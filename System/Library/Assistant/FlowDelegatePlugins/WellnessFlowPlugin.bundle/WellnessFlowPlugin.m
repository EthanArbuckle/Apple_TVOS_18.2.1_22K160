uint64_t variable initialization expression of GenericBinaryButtonSnippet._context()
{
  uint64_t v0;
  unint64_t v1;
  v0 = type metadata accessor for Context(0LL);
  v1 = sub_46F0();
  return EnvironmentObject.init()(v0, v1);
}

unint64_t sub_46F0()
{
  unint64_t result = qword_189B20;
  if (!qword_189B20)
  {
    uint64_t v1 = type metadata accessor for Context(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Context, v1);
    atomic_store(result, (unint64_t *)&qword_189B20);
  }

  return result;
}

uint64_t _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t variable initialization expression of HeightQueryModel.dateLabel()
{
  uint64_t v0 = sub_4A48();
  type metadata accessor for SpeakableString(v0);
  uint64_t v1 = sub_4A04();
  return sub_49FC(v1, v2, v3, v4);
}

uint64_t variable initialization expression of LogBloodPressureFlow.identifier()
{
  return 82LL;
}

uint64_t variable initialization expression of BloodPressureQueryModel.url()
{
  uint64_t v0 = sub_4A48();
  type metadata accessor for URL(v0);
  uint64_t v1 = sub_4A04();
  return sub_49FC(v1, v2, v3, v4);
}

unint64_t variable initialization expression of SpecificMedCompletedLogModel.sashBundleID()
{
  return sub_4A34();
}

uint64_t variable initialization expression of LogPeriodFlow.intentHandler()
{
  uint64_t v3 = 0LL;
  id v0 = objc_allocWithZone((Class)type metadata accessor for LogPeriodIntentHandler(0LL));
  return LogPeriodIntentHandler.init(storage:)(v2);
}

uint64_t variable initialization expression of LogPeriodFlow.flowIdentifier()
{
  return 42LL;
}

uint64_t variable initialization expression of LogPeriodFlow.spottingIdentifier()
{
  return 32LL;
}

uint64_t _s18WellnessFlowPlugin09LogPeriodB0V23catWrapperLoggingSimple33_D2AEAD270E2D4594A1CF2262EA495C80LLAA0ah4CATsI0Cvpfi_0()
{
  uint64_t v1 = (char *)&v3 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for WellnessLoggingCATsSimple(0LL);
  static CATOption.defaultMode.getter();
  return CATWrapperSimple.__allocating_init(options:globals:)(v1, 0LL);
}

uint64_t variable initialization expression of PhoneRingsSnippet._dynamicTypeSize@<X0>(void *a1@<X8>)
{
  *a1 = swift_getKeyPath(&unk_137030);
  uint64_t v2 = sub_494C(&qword_189B28);
  return swift_storeEnumTagMultiPayload(a1, v2, 0LL);
}

uint64_t sub_48B0()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_48D0(uint64_t a1)
{
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.dynamicTypeSize.setter(v3);
}

uint64_t sub_494C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t variable initialization expression of LogHealthKitQuantityFlow.taskLogger()
{
  return 3LL;
}

uint64_t variable initialization expression of SleepQueryModel.appPunchout()
{
  uint64_t v0 = sub_4A48();
  type metadata accessor for AppPunchout(v0);
  uint64_t v1 = sub_4A04();
  return sub_49FC(v1, v2, v3, v4);
}

uint64_t variable initialization expression of SleepQueryModel.snippetHeaderModel()
{
  uint64_t v0 = sub_4A48();
  type metadata accessor for SnippetHeaderModel(v0);
  uint64_t v1 = sub_4A04();
  return sub_49FC(v1, v2, v3, v4);
}

uint64_t _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV12skippedLabelSSSgvpfi_0()
{
  return 0LL;
}

uint64_t _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV6dosageSdSgvpfi_0()
{
  return 0LL;
}

uint64_t sub_49FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, a3, a4);
}

uint64_t sub_4A04()
{
  return v0;
}

uint64_t _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV7medTypeSSvpfi_0()
{
  return 0LL;
}

uint64_t isAsNeeded(from:)()
{
  return 0LL;
}

uint64_t _s18WellnessFlowPlugin26SingleActivitySummaryModelV4date16SiriDialogEngine0J8CalendarCSgvpfi_0()
{
  return 0LL;
}

unint64_t sub_4A34()
{
  return 0xD000000000000010LL;
}

uint64_t sub_4A48()
{
  return 0LL;
}

unint64_t sub_4A54(void *a1, char a2, char a3)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_500C(a1, v6);
  char v8 = dispatch thunk of DeviceState.isPad.getter(v6, v7);
  uint64_t v9 = a1[3];
  sub_500C(a1, v9);
  char v10 = dispatch thunk of DeviceState.isWatch.getter(v9);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_500C(a1, v11);
  char v13 = dispatch thunk of DeviceState.isPhone.getter(v11, v12);
  char v14 = (v13 | v8) & a2;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  uint64_t v15 = 0x100000000LL;
  if ((a3 & 1) == 0) {
    uint64_t v15 = 0LL;
  }
  uint64_t v16 = 0x1000000LL;
  if ((v14 & 1) == 0) {
    uint64_t v16 = 0LL;
  }
  uint64_t v17 = 0x10000LL;
  if ((v8 & 1) == 0) {
    uint64_t v17 = 0LL;
  }
  uint64_t v18 = 256LL;
  if ((v10 & 1) == 0) {
    uint64_t v18 = 0LL;
  }
  return (v17 | v15 | v18) & 0xFFFFFFFFFFFFFFFELL | v13 & 1 | v16;
}

uint64_t sub_4B48(unint64_t a1)
{
  if (BYTE3(a1) == 2LL) {
    goto LABEL_10;
  }
  unint64_t v1 = a1 >> 24;
  if (!(a1 & 0x1000000 | (a1 >> 24) & 0x10000))
  {
    if ((v1 & 0x100) == 0) {
      return 2LL;
    }
    goto LABEL_10;
  }

  uint64_t v2 = v1 & 0x101000000LL;
  unint64_t v3 = (v1 & 0x1000000) != 0 ? 4LL : 3LL;
  if (v2 == 0x1000000)
  {
LABEL_10:
    unint64_t v3 = 0x10000050100uLL >> ((a1 >> 13) & 0xF8);
    if (BYTE2(a1) <= 6u) {
      return v3;
    }
    else {
      return 5LL;
    }
  }

  return v3;
}

uint64_t sub_4BC4(unsigned __int16 a1)
{
  int v1 = a1;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v1 == 270) {
    return 6LL;
  }
  uint64_t v8 = Logger.wellness.unsafeMutableAddressor(v4);
  swift_beginAccess(v8, v22, 0LL, 0LL);
  uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v8, v2);
  char v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v21 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    v19 = v12 + 4;
    LOWORD(v20) = v1;
    uint64_t v14 = String.init<A>(describing:)(&v20, &type metadata for HealthDataType);
    unint64_t v16 = v15;
    uint64_t v20 = sub_39178(v14, v15, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v19, v12 + 12);
    swift_bridgeObjectRelease(v16);
    _os_log_impl(&dword_0, v10, v11, "Selecting querying flow for dataType: %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1LL);
    sub_5050(v13);
    sub_5050((uint64_t)v12);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  uint64_t result = 0LL;
  char v17 = v1 + 37;
  if (((1LL << v17) & 0x73D0838D52801LL) != 0) {
    return result;
  }
  if (((1LL << v17) & 0x2045201000LL) != 0) {
    return 2LL;
  }
LABEL_9:
  BOOL v18 = (v1 - 159) < 2 || v1 == 17;
  if (!v18 && v1 != 76)
  {
    if (v1 == 174) {
      return 3LL;
    }
    else {
      return 5LL;
    }
  }

  return result;
}

void sub_4E1C(unint64_t a1)
{
  if (BYTE2(a1) != 9)
  {
    unint64_t v2 = a1 >> 16;
    uint64_t v3 = sub_126284(SBYTE2(a1));
    uint64_t v5 = v4;
    if (v3 == 0x657461657263LL && v4 == 0xE600000000000000LL)
    {
      swift_bridgeObjectRelease(v4);
      return;
    }

    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657461657263LL, 0xE600000000000000LL, v3, v4, 0LL);
    swift_bridgeObjectRelease(v5);
    if ((v7 & 1) != 0) {
      return;
    }
    uint64_t v8 = sub_126284(v2);
    uint64_t v10 = v9;
    if (v8 == 0x657461647075LL && v9 == 0xE600000000000000LL)
    {
      swift_bridgeObjectRelease(v9);
    }

    else
    {
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657461647075LL, 0xE600000000000000LL, v8, v9, 0LL);
      swift_bridgeObjectRelease(v10);
    }

    sub_57F38(a1, (uint64_t)&off_17AD58);
  }
}

uint64_t sub_4F64(unint64_t a1)
{
  int v1 = (unsigned __int16)a1;
  sub_4E1C(a1);
  if ((v3 & 1) == 0) {
    return 3LL;
  }
  uint64_t result = 0LL;
  if ((v1 - 230) > 0x27 || ((1LL << (v1 + 26)) & 0xE7A00708A5LL) == 0)
  {
    if (v1 != 17 && v1 != 76)
    {
      if (v1 == 191) {
        return 1LL;
      }
      if (v1 != 159)
      {
        if (v1 == 128) {
          return 1LL;
        }
        return 3LL;
      }
    }
  }

  return result;
}

void *sub_500C(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_5050(uint64_t a1)
{
  return swift_slowDealloc(a1, -1LL, -1LL);
}

uint64_t sub_505C()
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v21 - v7;
  sub_494C(&qword_189BA0);
  sub_6D20();
  __chkstk_darwin(v9);
  sub_6D44();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = type metadata accessor for DateInterval(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = sub_6D84();
  uint64_t v16 = type metadata accessor for SynthesizedWellnessIntent(v15);
  sub_6CE4(v0 + *(int *)(v16 + 24), v12, &qword_189BA0);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v12, 1LL, v13) == 1)
  {
    sub_6CA4(v12);
    return 0LL;
  }

  else
  {
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v1, v12, v13);
    Date.init()(v18);
    if ((DateInterval.contains(_:)(v8) & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      sub_6DE0();
      return 2LL;
    }

    else
    {
      DateInterval.end.getter();
      char v19 = static Date.< infix(_:_:)(v6, v8);
      uint64_t v20 = *(void (**)(char *, uint64_t))(v3 + 8);
      v20(v6, v2);
      v20(v8, v2);
      sub_6DE0();
      return (v19 & 1) == 0;
    }
  }

uint64_t sub_520C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = v6;
  sub_494C(&qword_189B98);
  sub_6D20();
  __chkstk_darwin(v7);
  sub_6D30();
  uint64_t v48 = v8;
  sub_494C(&qword_189BA0);
  sub_6D20();
  __chkstk_darwin(v9);
  sub_6D44();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = (int *)type metadata accessor for SynthesizedWellnessIntent(0LL);
  sub_6D20();
  __chkstk_darwin(v14);
  sub_6D44();
  uint64_t v17 = v16 - v15;
  *(_WORD *)(v16 - v15 + 2) = 270;
  uint64_t v19 = v16 - v15 + *(int *)(v18 + 24);
  uint64_t v20 = type metadata accessor for DateInterval(0LL);
  sub_6D78(v19, v21, v22, v20);
  uint64_t v23 = v13[8];
  *(_BYTE *)(v17 + v23) = 61;
  uint64_t v24 = v17 + v13[10];
  *(void *)uint64_t v24 = 0LL;
  *(_BYTE *)(v24 + 8) = 1;
  uint64_t v25 = v17 + v13[11];
  uint64_t v47 = v25;
  uint64_t v26 = type metadata accessor for UsoEntity_common_MeasurementQualifier.DefinedValues(0LL);
  sub_6D78(v25, v27, v28, v26);
  uint64_t v29 = v17 + v13[12];
  uint64_t v30 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues(0LL);
  sub_6D78(v29, v31, v32, v30);
  sub_6D54();
  *(_BYTE *)uint64_t v17 = sub_6DD0(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16));
  sub_6D54();
  *(_WORD *)(v17 + 2) = sub_6DD0(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24));
  sub_6D54();
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  sub_5528(v12, v19, &qword_189BA0);
  uint64_t v33 = a1[4];
  sub_6D14();
  *(_BYTE *)(v17 + v13[7]) = sub_6DB0(*(uint64_t (**)(uint64_t, uint64_t))(v33 + 40)) & 1;
  uint64_t v34 = a1[4];
  sub_6D14();
  *(_BYTE *)(v17 + v23) = sub_6DB0(*(uint64_t (**)(uint64_t, uint64_t))(v34 + 48));
  sub_6D14();
  uint64_t v35 = sub_6DA0();
  *(void *)(v17 + v13[9]) = v36(v35);
  sub_6D14();
  uint64_t v37 = sub_6DA0();
  *(void *)uint64_t v24 = v38(v37);
  *(_BYTE *)(v24 + 8) = v39 & 1;
  sub_6D14();
  uint64_t v40 = sub_6DA0();
  v41(v40);
  sub_5528(v48, v47, &qword_189B98);
  uint64_t v42 = a1[3];
  uint64_t v43 = a1[4];
  sub_6D14();
  (*(void (**)(uint64_t, uint64_t))(v43 + 80))(v42, v43);
  sub_5528(v49, v29, &qword_189B90);
  uint64_t v44 = a1[4];
  sub_6D14();
  *(_BYTE *)(v17 + v13[13]) = sub_6DC0(*(uint64_t (**)(uint64_t, uint64_t))(v44 + 88)) & 1;
  uint64_t v45 = a1[4];
  sub_6D14();
  *(_BYTE *)(v17 + v13[14]) = sub_6DC0(*(uint64_t (**)(uint64_t, uint64_t))(v45 + 96)) & 1;
  sub_5558(v17, a2);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  return sub_559C(v17);
}

uint64_t type metadata accessor for SynthesizedWellnessIntent(uint64_t a1)
{
  uint64_t result = qword_189C00;
  if (!qword_189C00) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SynthesizedWellnessIntent);
  }
  return result;
}

uint64_t sub_5528(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = sub_6DF0(a1, a2, a3);
  sub_6E0C(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL));
  return v3;
}

uint64_t sub_5558(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SynthesizedWellnessIntent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_559C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SynthesizedWellnessIntent(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_55D8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_WORD *)(a1 + 2) = *((_WORD *)a2 + 1);
    uint64_t v7 = a3[6];
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for DateInterval(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v9, 1LL, v10))
    {
      uint64_t v11 = sub_494C(&qword_189BA0);
      memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v8, 0LL, 1LL, v10);
    }

    uint64_t v13 = a3[8];
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)v4 + v13) = *((_BYTE *)a2 + v13);
    uint64_t v14 = a3[9];
    uint64_t v15 = a3[10];
    uint64_t v16 = *(uint64_t *)((char *)a2 + v14);
    *(void *)((char *)v4 + v14) = v16;
    uint64_t v17 = (char *)v4 + v15;
    uint64_t v18 = (uint64_t)a2 + v15;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = *(_BYTE *)(v18 + 8);
    uint64_t v19 = a3[11];
    uint64_t v20 = (char *)v4 + v19;
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = type metadata accessor for UsoEntity_common_MeasurementQualifier.DefinedValues(0LL);
    swift_bridgeObjectRetain(v16);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v21, 1LL, v22))
    {
      uint64_t v23 = sub_494C(&qword_189B98);
      memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16LL))(v20, v21, v22);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 0LL, 1LL, v22);
    }

    uint64_t v24 = a3[12];
    uint64_t v25 = (char *)v4 + v24;
    uint64_t v26 = (char *)a2 + v24;
    uint64_t v27 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v26, 1LL, v27))
    {
      uint64_t v28 = sub_494C(&qword_189B90);
      memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16LL))(v25, v26, v27);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v25, 0LL, 1LL, v27);
    }

    uint64_t v29 = a3[14];
    *((_BYTE *)v4 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    *((_BYTE *)v4 + v29) = *((_BYTE *)a2 + v29);
  }

  return v4;
}

uint64_t _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t sub_5828(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for DateInterval(0LL);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[9]));
  uint64_t v6 = a1 + a2[11];
  uint64_t v7 = type metadata accessor for UsoEntity_common_MeasurementQualifier.DefinedValues(0LL);
  uint64_t v8 = a1 + a2[12];
  uint64_t v9 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues(0LL);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, 1LL, v9);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  }
  return result;
}

uint64_t sub_591C(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_494C(&qword_189BA0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0LL, 1LL, v9);
  }

  uint64_t v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  uint64_t v12 = a3[9];
  uint64_t v13 = a3[10];
  uint64_t v14 = *(void *)(a2 + v12);
  *(void *)(a1 + v12) = v14;
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  uint64_t v17 = a3[11];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (const void *)(a2 + v17);
  uint64_t v20 = type metadata accessor for UsoEntity_common_MeasurementQualifier.DefinedValues(0LL);
  swift_bridgeObjectRetain(v14);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v19, 1LL, v20))
  {
    uint64_t v21 = sub_494C(&qword_189B98);
    memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v20 - 8) + 16LL))(v18, v19, v20);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v18, 0LL, 1LL, v20);
  }

  uint64_t v22 = a3[12];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (const void *)(a2 + v22);
  uint64_t v25 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1LL, v25))
  {
    uint64_t v26 = sub_494C(&qword_189B90);
    memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v25 - 8) + 16LL))(v23, v24, v25);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0LL, 1LL, v25);
  }

  uint64_t v27 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v27) = *(_BYTE *)(a2 + v27);
  return a1;
}

uint64_t sub_5B34(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  int v10 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v7, 1LL, v9);
  int v11 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1LL, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0LL, 1LL, v9);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = sub_494C(&qword_189BA0);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  uint64_t v14 = a3[9];
  uint64_t v15 = *(void *)(a2 + v14);
  uint64_t v16 = *(void *)(a1 + v14);
  *(void *)(a1 + v14) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = a3[10];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  *(_BYTE *)(v18 + 8) = *((_BYTE *)v19 + 8);
  *(void *)uint64_t v18 = v20;
  uint64_t v21 = a3[11];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (const void *)(a2 + v21);
  uint64_t v24 = type metadata accessor for UsoEntity_common_MeasurementQualifier.DefinedValues(0LL);
  int v25 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1LL, v24);
  int v26 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v23, 1LL, v24);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v24 - 8) + 16LL))(v22, v23, v24);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v22, 0LL, 1LL, v24);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v27 = *(void *)(v24 - 8);
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v27 + 8))(v22, v24);
LABEL_12:
    uint64_t v28 = sub_494C(&qword_189B98);
    memcpy(v22, v23, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(void *, const void *, uint64_t))(v27 + 24))(v22, v23, v24);
LABEL_13:
  uint64_t v29 = a3[12];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (const void *)(a2 + v29);
  uint64_t v32 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues(0LL);
  int v33 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v30, 1LL, v32);
  int v34 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v31, 1LL, v32);
  if (!v33)
  {
    uint64_t v35 = *(void *)(v32 - 8);
    if (!v34)
    {
      (*(void (**)(void *, const void *, uint64_t))(v35 + 24))(v30, v31, v32);
      goto LABEL_19;
    }

    (*(void (**)(void *, uint64_t))(v35 + 8))(v30, v32);
    goto LABEL_18;
  }

  if (v34)
  {
LABEL_18:
    uint64_t v36 = sub_494C(&qword_189B90);
    memcpy(v30, v31, *(void *)(*(void *)(v36 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v32 - 8) + 16LL))(v30, v31, v32);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v30, 0LL, 1LL, v32);
LABEL_19:
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  return a1;
}

uint64_t sub_5E38(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_494C(&qword_189BA0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0LL, 1LL, v9);
  }

  uint64_t v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  uint64_t v12 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  uint64_t v15 = a3[11];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for UsoEntity_common_MeasurementQualifier.DefinedValues(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v17, 1LL, v18))
  {
    uint64_t v19 = sub_494C(&qword_189B98);
    memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v16, v17, v18);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v16, 0LL, 1LL, v18);
  }

  uint64_t v20 = a3[12];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (const void *)(a2 + v20);
  uint64_t v23 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1LL, v23))
  {
    uint64_t v24 = sub_494C(&qword_189B90);
    memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 32LL))(v21, v22, v23);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0LL, 1LL, v23);
  }

  uint64_t v25 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v25) = *(_BYTE *)(a2 + v25);
  return a1;
}

uint64_t sub_6040(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  int v10 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v7, 1LL, v9);
  int v11 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1LL, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0LL, 1LL, v9);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = sub_494C(&qword_189BA0);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(v12 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  uint64_t v15 = a3[9];
  uint64_t v16 = *(void *)(a1 + v15);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = a3[10];
  uint64_t v18 = a3[11];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(void *)uint64_t v19 = *(void *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  uint64_t v21 = (void *)(a1 + v18);
  uint64_t v22 = (const void *)(a2 + v18);
  uint64_t v23 = type metadata accessor for UsoEntity_common_MeasurementQualifier.DefinedValues(0LL);
  int v24 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v21, 1LL, v23);
  int v25 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1LL, v23);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 32LL))(v21, v22, v23);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0LL, 1LL, v23);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v26 = *(void *)(v23 - 8);
  if (v25)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v21, v23);
LABEL_12:
    uint64_t v27 = sub_494C(&qword_189B98);
    memcpy(v21, v22, *(void *)(*(void *)(v27 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(void *, const void *, uint64_t))(v26 + 40))(v21, v22, v23);
LABEL_13:
  uint64_t v28 = a3[12];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (const void *)(a2 + v28);
  uint64_t v31 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues(0LL);
  int v32 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v29, 1LL, v31);
  int v33 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v30, 1LL, v31);
  if (!v32)
  {
    uint64_t v34 = *(void *)(v31 - 8);
    if (!v33)
    {
      (*(void (**)(void *, const void *, uint64_t))(v34 + 40))(v29, v30, v31);
      goto LABEL_19;
    }

    (*(void (**)(void *, uint64_t))(v34 + 8))(v29, v31);
    goto LABEL_18;
  }

  if (v33)
  {
LABEL_18:
    uint64_t v35 = sub_494C(&qword_189B90);
    memcpy(v29, v30, *(void *)(*(void *)(v35 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v31 - 8) + 32LL))(v29, v30, v31);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v29, 0LL, 1LL, v31);
LABEL_19:
  uint64_t v36 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v36) = *(_BYTE *)(a2 + v36);
  return a1;
}

uint64_t sub_6330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_633C);
}

uint64_t sub_633C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_494C(&qword_189BA0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = a3[6];
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1 + v8, a2, v7);
  }

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    uint64_t v11 = sub_494C(&qword_189B98);
    if (*(_DWORD *)(*(void *)(v11 - 8) + 84LL) == (_DWORD)a2)
    {
      uint64_t v7 = v11;
      uint64_t v8 = a3[11];
    }

    else
    {
      uint64_t v7 = sub_494C(&qword_189B90);
      uint64_t v8 = a3[12];
    }

    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1 + v8, a2, v7);
  }

  unint64_t v9 = *(void *)(a1 + a3[9]);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_6408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6414);
}

uint64_t sub_6414(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = sub_494C(&qword_189BA0);
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = a4[6];
  }

  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + a4[9]) = (a2 - 1);
      return result;
    }

    uint64_t v11 = sub_494C(&qword_189B98);
    if (*(_DWORD *)(*(void *)(v11 - 8) + 84LL) == a3)
    {
      uint64_t v9 = v11;
      uint64_t v10 = a4[11];
    }

    else
    {
      uint64_t v9 = sub_494C(&qword_189B90);
      uint64_t v10 = a4[12];
    }
  }

  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1 + v10, a2, a2, v9);
}

void sub_64DC(uint64_t a1)
{
  v8[0] = &unk_1370B0;
  v8[1] = &unk_1370C8;
  sub_65F0( 319LL,  (unint64_t *)&qword_189C10,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval);
  if (v3 <= 0x3F)
  {
    v8[2] = *(void *)(v2 - 8) + 64LL;
    v8[3] = &unk_1370E0;
    v8[4] = &unk_1370F8;
    v8[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v8[6] = &unk_137110;
    sub_65F0( 319LL,  &qword_189C18,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_MeasurementQualifier.DefinedValues);
    if (v5 <= 0x3F)
    {
      v8[7] = *(void *)(v4 - 8) + 64LL;
      sub_65F0( 319LL,  (unint64_t *)&unk_189C20,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_ListPosition.DefinedValues);
      if (v7 <= 0x3F)
      {
        v8[8] = *(void *)(v6 - 8) + 64LL;
        v8[9] = &unk_1370E0;
        v8[10] = &unk_1370E0;
        swift_initStructMetadata(a1, 256LL, 11LL, v8, a1 + 16);
      }
    }
  }

void sub_65F0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

uint64_t sub_663C()
{
  uint64_t v2 = v0;
  uint64_t v58 = sub_494C(&qword_189B90);
  sub_6D20();
  __chkstk_darwin(v3);
  sub_6D30();
  uint64_t v57 = v4;
  uint64_t v56 = sub_494C(&qword_189B98);
  sub_6D20();
  __chkstk_darwin(v5);
  sub_6D30();
  uint64_t v55 = v6;
  sub_494C(&qword_189BA0);
  sub_6D20();
  __chkstk_darwin(v7);
  uint64_t v8 = sub_6D84();
  uint64_t v9 = type metadata accessor for DateInterval(v8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_6D44();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for TimeZone(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_6D44();
  uint64_t v18 = v17 - v16;
  id v19 = [objc_allocWithZone(NSDateIntervalFormatter) init];
  static TimeZone.current.getter([v19 setDateStyle:1]);
  Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v14);
  [v19 setTimeZone:isa];

  uint64_t v21 = (int *)type metadata accessor for SynthesizedWellnessIntent(0LL);
  sub_6CE4(v2 + v21[6], v1, &qword_189BA0);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1LL, v9) == 1)
  {
    uint64_t v22 = 7104878LL;
    sub_6CA4(v1);
    uint64_t v23 = (void *)0xE300000000000000LL;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v13, v1, v9);
    Class v24 = DateInterval._bridgeToObjectiveC()().super.isa;
    id v25 = [v19 stringFromDateInterval:v24];

    if (v25)
    {
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      uint64_t v23 = v26;
    }

    else
    {
      uint64_t v22 = 7104878LL;
      uint64_t v23 = (void *)0xE300000000000000LL;
    }

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  }

  v61[0] = 0LL;
  v61[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(171LL);
  v27._countAndFlagsBits = 0x203A62726576LL;
  v27._object = (void *)0xE600000000000000LL;
  String.append(_:)(v27);
  LOBYTE(v59) = *(_BYTE *)v2;
  _print_unlocked<A, B>(_:_:)( &v59,  v61,  &type metadata for Verb,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v28._countAndFlagsBits = 0x707954617461640ALL;
  v28._object = (void *)0xEB00000000203A65LL;
  String.append(_:)(v28);
  LOWORD(v59) = *(_WORD *)(v2 + 2);
  uint64_t v29 = sub_494C(&qword_189C80);
  v30._countAndFlagsBits = sub_6D6C(v29);
  object = v30._object;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(object);
  v32._countAndFlagsBits = 0x6E6152657461640ALL;
  v32._object = (void *)0xEC000000203A6567LL;
  String.append(_:)(v32);
  v33._countAndFlagsBits = v22;
  v33._object = v23;
  String.append(_:)(v33);
  uint64_t v34 = swift_bridgeObjectRelease(v23);
  sub_6E24(v34, 0x8000000000141070LL);
  if (*(_BYTE *)(v2 + v21[7])) {
    uint64_t v35 = 1702195828LL;
  }
  else {
    uint64_t v35 = 0x65736C6166LL;
  }
  if (*(_BYTE *)(v2 + v21[7])) {
    unint64_t v36 = 0xE400000000000000LL;
  }
  else {
    unint64_t v36 = 0xE500000000000000LL;
  }
  unint64_t v37 = v36;
  String.append(_:)(*(Swift::String *)&v35);
  sub_6D64();
  sub_6E00(0xD000000000000012LL, (uint64_t)"\nmeasurementUnit: ");
  LOBYTE(v59) = *(_BYTE *)(v2 + v21[8]);
  uint64_t v38 = sub_494C(&qword_189C88);
  v39._countAndFlagsBits = sub_6D6C(v38);
  String.append(_:)(v39);
  uint64_t v40 = sub_6D64();
  sub_6E24(v40, 0x80000000001410B0LL);
  v41 = (uint64_t *)(v2 + v21[10]);
  uint64_t v42 = *v41;
  LOBYTE(v41) = *((_BYTE *)v41 + 8);
  uint64_t v59 = v42;
  char v60 = (char)v41;
  uint64_t v43 = sub_494C(qword_189C90);
  v44._countAndFlagsBits = sub_6D6C(v43);
  String.append(_:)(v44);
  sub_6D64();
  sub_6E00(0xD000000000000017LL, (uint64_t)"\nmeasurementQualifier: ");
  sub_6CE4(v2 + v21[11], v55, &qword_189B98);
  v62._countAndFlagsBits = String.init<A>(describing:)(v55, v56);
  sub_6E18(v62);
  sub_6D64();
  v45._countAndFlagsBits = 0x736F507473696C0ALL;
  v45._object = (void *)0xEF203A6E6F697469LL;
  String.append(_:)(v45);
  sub_6CE4(v2 + v21[12], v57, &qword_189B90);
  v63._countAndFlagsBits = String.init<A>(describing:)(v57, v58);
  sub_6E18(v63);
  sub_6D64();
  v46._countAndFlagsBits = 0x726174537361680ALL;
  v46._object = (void *)0xEF203A6574614474LL;
  String.append(_:)(v46);
  if (*(_BYTE *)(v2 + v21[13])) {
    uint64_t v47 = 1702195828LL;
  }
  else {
    uint64_t v47 = 0x65736C6166LL;
  }
  if (*(_BYTE *)(v2 + v21[13])) {
    unint64_t v48 = 0xE400000000000000LL;
  }
  else {
    unint64_t v48 = 0xE500000000000000LL;
  }
  unint64_t v49 = v48;
  String.append(_:)(*(Swift::String *)&v47);
  sub_6D64();
  v50._countAndFlagsBits = 0x44646E457361680ALL;
  v50._object = (void *)0xED0000203A657461LL;
  String.append(_:)(v50);
  if (*(_BYTE *)(v2 + v21[14])) {
    uint64_t v51 = 1702195828LL;
  }
  else {
    uint64_t v51 = 0x65736C6166LL;
  }
  if (*(_BYTE *)(v2 + v21[14])) {
    unint64_t v52 = 0xE400000000000000LL;
  }
  else {
    unint64_t v52 = 0xE500000000000000LL;
  }
  unint64_t v53 = v52;
  String.append(_:)(*(Swift::String *)&v51);

  swift_bridgeObjectRelease(v52);
  return v61[0];
}

uint64_t SpecificMedCompletedLogModel.medStatus.getter()
{
  return *v0;
}

uint64_t sub_6B68()
{
  return *(unsigned __int16 *)(v0 + 2);
}

uint64_t sub_6B70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_6CE4(v2 + *(int *)(a1 + 24), a2, &qword_189BA0);
}

uint64_t sub_6B98(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 28));
}

uint64_t sub_6BA4(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 32));
}

uint64_t sub_6BB0(uint64_t a1)
{
  return swift_bridgeObjectRetain(*(void *)(v1 + *(int *)(a1 + 36)));
}

uint64_t sub_6BBC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 40));
}

uint64_t sub_6BD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_6CE4(v2 + *(int *)(a1 + 44), a2, &qword_189B98);
}

uint64_t sub_6BF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_6CE4(v2 + *(int *)(a1 + 48), a2, &qword_189B90);
}

uint64_t sub_6C20(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 52));
}

uint64_t sub_6C2C(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 56));
}

unint64_t sub_6C40(uint64_t a1)
{
  unint64_t result = sub_6C64();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_6C64()
{
  unint64_t result = qword_189C78;
  if (!qword_189C78)
  {
    uint64_t v1 = type metadata accessor for SynthesizedWellnessIntent(255LL);
    unint64_t result = swift_getWitnessTable(&unk_137128, v1);
    atomic_store(result, (unint64_t *)&qword_189C78);
  }

  return result;
}

uint64_t sub_6CA4(uint64_t a1)
{
  uint64_t v2 = sub_494C(&qword_189BA0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_6CE4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = sub_6DF0(a1, a2, a3);
  sub_6E0C(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL));
  return v3;
}

void *sub_6D14()
{
  return sub_500C(v0, v1);
}

  ;
}

  ;
}

  ;
}

void *sub_6D54()
{
  return sub_500C(v0, v0[3]);
}

uint64_t sub_6D64()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_6D6C(uint64_t a1)
{
  return String.init<A>(describing:)(v1 - 112, a1);
}

uint64_t sub_6D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 1LL, 1LL, a4);
}

uint64_t sub_6D84()
{
  return 0LL;
}

uint64_t sub_6DA0()
{
  return v0;
}

uint64_t sub_6DB0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_6DC0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_6DD0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_6DE0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_6DF0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_494C(a3);
}

void sub_6E00(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_6E0C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

void sub_6E18(Swift::String a1)
{
}

void sub_6E24(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0xD000000000000013LL;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

uint64_t initializeBufferWithCopyOfBuffer for WellnessPatternsProvider(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for GetCycleTrackingFlow(void *a1)
{
  return swift_unknownObjectRelease(a1[30]);
}

uint64_t initializeWithCopy for GetCycleTrackingFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  __int128 v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  __int128 v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  __int128 v8 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 184) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 160, a2 + 160);
  __int128 v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 224) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 200, a2 + 200);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(_WORD *)(a1 + 248) = *(_WORD *)(a2 + 248);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GetCycleTrackingFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 240);
  uint64_t v5 = *(void *)(a1 + 240);
  *(void *)(a1 + 240) = v4;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v5);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_BYTE *)(a1 + 249) = *(_BYTE *)(a2 + 249);
  return a1;
}

void *sub_7030(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        unint64_t result = (void *)swift_release(v11);
        *uint64_t v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

void *initializeWithTake for GetCycleTrackingFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xFAuLL);
}

uint64_t assignWithTake for GetCycleTrackingFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 80));
  __int128 v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 160));
  __int128 v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 200));
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  uint64_t v7 = *(void *)(a2 + 240);
  uint64_t v8 = *(void *)(a1 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v7;
  swift_unknownObjectRelease(v8);
  *(_WORD *)(a1 + 248) = *(_WORD *)(a2 + 248);
  return a1;
}

uint64_t getEnumTagSinglePayload for GetCycleTrackingFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 250))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GetCycleTrackingFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 248) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 250) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 250) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for GetCycleTrackingFlow()
{
  return &type metadata for GetCycleTrackingFlow;
}

uint64_t LogPeriodFlow.on(input:)()
{
  return 1LL;
}

uint64_t sub_7350(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_A4DC();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for GetCycleTrackingFlow, v4);
}

uint64_t sub_7390(uint64_t a1)
{
  v2[114] = v1;
  v2[113] = a1;
  uint64_t v3 = type metadata accessor for UnavailableDataFlow(0LL);
  v2[115] = v3;
  v2[116] = sub_A5C0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for CATOption(0LL);
  v2[117] = sub_A5C0(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v2[118] = v5;
  v2[119] = *(void *)(v5 - 8);
  v2[120] = sub_A5B8();
  v2[121] = sub_A5B8();
  v2[122] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_7424()
{
  uint64_t v1 = v0[122];
  uint64_t v2 = v0[119];
  uint64_t v3 = v0[118];
  FlowTaskLogger.taskStart()();
  id v4 = sub_7CC4();
  v0[123] = v4;
  uint64_t v5 = Logger.wellness.unsafeMutableAddressor();
  v0[124] = v5;
  sub_A5DC(v5, (uint64_t)(v0 + 103));
  __int128 v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[125] = v6;
  v6(v1, v5, v3);
  id v7 = v4;
  sub_A86C();
  os_log_type_t v8 = sub_AB70();
  if (sub_A634(v8))
  {
    uint64_t v9 = (_DWORD *)sub_A5E8(12LL);
    uint64_t v10 = (void *)sub_A5E8(8LL);
    *uint64_t v9 = 138412290;
    v0[112] = v7;
    id v11 = v7;
    sub_A738((uint64_t)(v0 + 112), (uint64_t)(v0 + 113));
    *uint64_t v10 = v7;

    sub_A5F0(&dword_0, v12, v13, "Created intent: %@");
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v10);
    sub_5050((uint64_t)v10);
    sub_5050((uint64_t)v9);
  }

  else
  {

    id v4 = v7;
  }

  uint64_t v14 = v0[119];
  uint64_t v15 = v0[114];

  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8);
  v0[126] = v16;
  sub_A7A0(v16);
  uint64_t v17 = *(void **)(v15 + 240);
  v0[7] = v0 + 110;
  v0[2] = v0;
  v0[3] = sub_7620;
  v0[99] = swift_continuation_init(v0 + 2, 0LL);
  v0[95] = _NSConcreteStackBlock;
  v0[96] = 0x40000000LL;
  v0[97] = sub_7ED0;
  v0[98] = &unk_17B688;
  [v17 handleGetMenstruationPrediction:v7 completion:v0 + 95];
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_7620()
{
  return sub_A5D0();
}

uint64_t sub_7658()
{
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 1000);
  uint64_t v3 = *(void **)(v0 + 992);
  id v4 = *(void **)(v0 + 880);
  *(void *)(v0 + 1016) = v4;
  sub_A5DC((uint64_t)v3, v0 + 848);
  uint64_t v5 = sub_AABC();
  v2(v5);
  __int128 v6 = v4;
  sub_A86C();
  os_log_type_t v7 = sub_AB70();
  os_log_type_t v8 = "nessFlowPlugin  PROJECT:SiriWellness-\n";
  if (sub_A634(v7))
  {
    uint64_t v9 = (_DWORD *)sub_A5E8(12LL);
    uint64_t v1 = (void *)sub_A5E8(8LL);
    *uint64_t v9 = 138412290;
    *(void *)(v0 + 888) = v6;
    os_log_type_t v8 = (char *)(v0 + 896);
    uint64_t v10 = v6;
    sub_A738(v0 + 888, v0 + 896);
    *uint64_t v1 = v6;

    sub_A5F0(&dword_0, v11, v12, "Received response: %@");
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v1);
    sub_5050((uint64_t)v1);
    sub_5050((uint64_t)v9);
  }

  else
  {

    uint64_t v3 = v6;
  }

  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1008);
  uint64_t v14 = *(void *)(v0 + 968);
  uint64_t v15 = *(void *)(v0 + 944);

  uint64_t v16 = v13(v14, v15);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))((char *)&stru_20.maxprot + (swift_isaMask & *v6)))(v16);
  if (v17 == 4)
  {
    uint64_t v22 = (void *)swift_task_alloc(dword_189CD4);
    *(void *)(v0 + 1024) = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_7BF8;
    return sub_7EF8((uint64_t)v6);
  }

  else
  {
    switch(v17)
    {
      case 'g':
        sub_A7D0();
        sub_A304((uint64_t)(v6 + 5), v0 + 344);
        sub_A13C((_OWORD *)v6 + 5, (_OWORD *)(v0 + 384));
        uint64_t v24 = sub_AA80();
        sub_A72C(v24);
        uint64_t v25 = sub_A9C8();
        *(void *)(v0 + 568) = v24;
        *(void *)(v0 + 576) = &protocol witness table for ResponseFactory;
        *(void *)(v0 + 544) = v25;
        sub_AA78();
        sub_A768();
        sub_AAF8((uint64_t)v8);
        sub_A874();
        sub_A768();
        uint64_t v26 = sub_AAF0((uint64_t)v8);
        *(void *)(v0 + 584) = v24;
        *(void *)(v0 + 592) = v26;
        sub_A1E8();
        sub_AC08();

        sub_A224((void *)(v0 + 344));
        break;
      case 'f':
        Swift::String v27 = *(void **)(v0 + 984);
        uint64_t v28 = *(void *)(v0 + 936);
        uint64_t v29 = *(_BYTE **)(v0 + 928);
        Swift::String v30 = *(int **)(v0 + 920);
        uint64_t v31 = *(void *)(v0 + 912);
        FlowTaskLogger.taskFailed()();
        char v32 = *(_BYTE *)(v31 + 248);
        uint64_t v33 = (uint64_t)&v29[v30[5]];
        uint64_t v34 = sub_ABEC();
        sub_A66C(v33, 1LL, v35, v34);
        sub_A304(v31 + 40, (uint64_t)&v29[v30[6]]);
        sub_A13C((_OWORD *)(v31 + 80), &v29[v30[7]]);
        uint64_t v36 = sub_AA80();
        sub_A72C(v36);
        uint64_t v37 = sub_A9C8();
        uint64_t v38 = (uint64_t *)&v29[v30[8]];
        v38[3] = v36;
        v38[4] = (uint64_t)&protocol witness table for ResponseFactory;
        *uint64_t v38 = v37;
        sub_AA78();
        sub_A774();
        sub_AAF8(v28);
        sub_A874();
        sub_A774();
        uint64_t v39 = sub_AAF0(v28);
        *uint64_t v29 = v32;
        *(void *)&v29[v30[9]] = v36;
        *(void *)&v29[v30[10]] = v39;
        sub_A410(&qword_189CC8, type metadata accessor for UnavailableDataFlow, (uint64_t)&unk_13FD60);
        static ExecuteResponse.complete<A>(next:)(v29);

        sub_A258((uint64_t)v29);
        break;
      case 'e':
        sub_A7D0();
        char v18 = *((_BYTE *)v6 + 248);
        sub_A304((uint64_t)(v6 + 5), v0 + 88);
        sub_A13C((_OWORD *)v6 + 5, (_OWORD *)(v0 + 128));
        uint64_t v19 = sub_AA80();
        sub_A72C(v19);
        uint64_t v20 = sub_A9C8();
        *(void *)(v0 + 312) = v19;
        *(void *)(v0 + 320) = &protocol witness table for ResponseFactory;
        *(void *)(v0 + 288) = v20;
        sub_AA78();
        sub_A768();
        sub_AAF8((uint64_t)v8);
        sub_A874();
        sub_A768();
        uint64_t v21 = sub_AAF0((uint64_t)v8);
        *(_BYTE *)(v0 + 80) = v18;
        *(void *)(v0 + 328) = v19;
        *(void *)(v0 + 336) = v21;
        sub_A294();
        sub_AC08();

        sub_A2D0((void *)(v0 + 80));
        break;
      default:
        uint64_t v40 = (_OWORD *)(v0 + 600);
        v41 = *(void (**)(uint64_t, os_log_s *, uint64_t))(v0 + 1000);
        uint64_t v42 = *(os_log_s **)(v0 + 992);
        uint64_t v43 = *(void *)(v0 + 960);
        uint64_t v44 = *(void *)(v0 + 944);
        sub_A5DC((uint64_t)v42, v0 + 800);
        v41(v43, v42, v44);
        Swift::String v45 = v6;
        sub_AB5C();
        os_log_type_t v46 = sub_A898();
        if (os_log_type_enabled(v42, v46))
        {
          uint64_t v47 = (uint8_t *)sub_A5E8(12LL);
          unint64_t v48 = (void *)sub_A5E8(8LL);
          *(_DWORD *)uint64_t v47 = 138412290;
          *(void *)(v0 + 872) = v45;
          unint64_t v49 = v45;
          sub_AB18(v0 + 872, v0 + 880);
          *unint64_t v48 = v45;

          uint64_t v40 = (_OWORD *)(v0 + 600);
          _os_log_impl(&dword_0, v42, v46, "Received unhandled response code: %@", v47, 0xCu);
          sub_494C(&qword_189CB8);
          sub_A81C((uint64_t)v48);
          sub_5050((uint64_t)v48);
          sub_5050((uint64_t)v47);
        }

        else
        {
        }

        Swift::String v50 = *(void **)(v0 + 984);
        uint64_t v51 = *(void *)(v0 + 912);
        (*(void (**)(void, void))(v0 + 1008))(*(void *)(v0 + 960), *(void *)(v0 + 944));
        FlowTaskLogger.taskFailed()();
        sub_A13C((_OWORD *)(v51 + 80), v40);
        sub_A178();
        static ExecuteResponse.complete<A>(next:)(v40);

        sub_A1B4(v40);
        break;
    }

    sub_A824();
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    sub_A760();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_7BF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1024LL);
  *(void *)(*(void *)v1 + 1032LL) = a1;
  swift_task_dealloc(v2);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_7C48()
{
  uint64_t v1 = *(void *)(v0 + 1032);
  uint64_t v2 = *(void **)(v0 + 1016);
  uint64_t v3 = *(void **)(v0 + 984);
  FlowTaskLogger.taskCompleted()();
  static ExecuteResponse.complete(next:)(v1);
  swift_release(v1);

  sub_A824();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_7CC4()
{
  uint64_t v2 = &qword_189D10;
  uint64_t v3 = sub_494C(&qword_189D10);
  sub_6D20();
  __chkstk_darwin(v4);
  sub_AA40();
  sub_494C(&qword_189B98);
  sub_6D20();
  __chkstk_darwin(v5);
  sub_AA58();
  uint64_t v8 = v6 - v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v27 - v10;
  id v12 = [objc_allocWithZone((Class)type metadata accessor for GetMenstruationPredictionIntent(0)) init];
  uint64_t v14 = v1[3];
  uint64_t v13 = v1[4];
  sub_500C(v1, v14);
  (*(void (**)(uint64_t, uint64_t))(v13 + 72))(v14, v13);
  uint64_t v15 = v1[3];
  uint64_t v16 = v1[4];
  sub_500C(v1, v15);
  char v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 104))(v15, v16);
  uint64_t v18 = *(int *)(v3 + 48);
  sub_A478((uint64_t)v11, v0, &qword_189B98);
  *(_BYTE *)(v0 + v18) = v17;
  uint64_t v19 = type metadata accessor for UsoEntity_common_MeasurementQualifier.DefinedValues(0LL);
  sub_A614(v0, 1LL, v19);
  if (v20)
  {
    uint64_t v21 = 0LL;
  }

  else
  {
    sub_A44C(v0, v8, &qword_189B98);
    uint64_t v22 = *(void *)(v19 - 8);
    int v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 88))(v8, v19);
    if (v23 == enum case for UsoEntity_common_MeasurementQualifier.DefinedValues.common_MeasurementQualifier_StartOf(_:))
    {
      uint64_t v24 = v17;
      uint64_t v25 = &unk_137220;
    }

    else
    {
      if (v23 != enum case for UsoEntity_common_MeasurementQualifier.DefinedValues.common_MeasurementQualifier_EndOf(_:))
      {
        sub_AB64(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
        uint64_t v21 = 0LL;
        uint64_t v2 = &qword_189D10;
        goto LABEL_10;
      }

      uint64_t v24 = v17;
      uint64_t v25 = &unk_137238;
    }

    uint64_t v21 = v25[v24];
    uint64_t v2 = &qword_189B98;
  }

LABEL_10:
  [v12 setProjectionFocus:v21];
  sub_A4A4(v0, v2);
  return v12;
}

  sub_1C730();
}

  sub_41920(v16, &qword_18AA78, v18, v19, v20, v21, v22, v23);
  sub_41978();
}

  v70 = sub_12BAB0(v53);
  if (v70 == 205)
  {
LABEL_25:
    uint64_t v51 = v274;
    goto LABEL_26;
  }

  v71 = v70;
  v72 = sub_27CC8(v70);
  v74 = v73;
  v75 = sub_27CC8(v277);
  v77 = v72 == v75 && v74 == v76;
  if (v77)
  {
    sub_4655C();
    goto LABEL_25;
  }

  v78 = sub_464C0(v72, v76, v75);
  sub_249D4();
  v79 = sub_1EBF4();
  uint64_t v51 = v274;
  if ((v78 & 1) == 0)
  {
    v80 = (os_log_s *)Logger.wellness.unsafeMutableAddressor(v79);
    sub_A5DC((uint64_t)v80, (uint64_t)v284);
    sub_46454();
    sub_463E8((uint64_t)v253, v81);
    sub_466E0();
    v82 = sub_AB70();
    if (sub_46514(v82))
    {
      v83 = (uint8_t *)sub_A5E8(12LL);
      v84 = sub_A5E8(32LL);
      v302 = v84;
      *(_DWORD *)v83 = 136315138;
      uint64_t v44 = (char *)(v83 + 4);
      LOBYTE(v300) = v71;
      v85 = String.init<A>(describing:)(&v300, &type metadata for HealthKitIdentifier);
      uint64_t v33 = v86;
      v300 = sub_39178(v85, v86, &v302);
      unint64_t v52 = v275;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v300, v301, v83 + 4, v83 + 12);
      swift_bridgeObjectRelease(v33);
      sub_DA24(&dword_0, v80, (os_log_type_t)v32, "Corrections parse had an updated HKIdentifier: %s", v83);
      sub_A81C(v84);
      sub_5050(v84);
      v87 = (uint64_t)v83;
      uint64_t v51 = v274;
      sub_5050(v87);

      sub_464B0();
      v89 = (uint64_t)v253;
    }

    else
    {

      v89 = sub_465F4();
    }

    sub_463F8(v89, v88);
    v277 = v71;
  }

  sub_398E0(0LL, (v9 & 0xC000000000000001LL) == 0, v9);
  if ((v9 & 0xC000000000000001LL) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v9);
  }
  else {
    sub_372CC();
  }
  uint64_t v10 = sub_249D4();
  uint64_t v11 = dispatch thunk of UsoEntity_common_MeasurementComponent.value.getter(v10);
  id v12 = sub_367AC();
  if (v11)
  {
    CodeGenBase.entity.getter(v12);
    sub_3652C();
  }

uint64_t sub_7ED0(uint64_t a1, void *a2)
{
  return sub_DBE30(*(void *)(a1 + 32), a2);
}

uint64_t sub_7EF8(uint64_t a1)
{
  v2[53] = a1;
  v2[54] = v1;
  uint64_t v3 = type metadata accessor for DialogPhase(0LL);
  v2[55] = v3;
  v2[56] = *(void *)(v3 - 8);
  v2[57] = sub_A5B8();
  v2[58] = sub_A5B8();
  uint64_t v4 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[59] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[60] = v5;
  v2[61] = sub_A5C0(v5);
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  v2[62] = sub_A5C0(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for UnavailableDataFlow(0LL);
  v2[63] = v7;
  v2[64] = sub_A5C0(*(void *)(v7 - 8));
  uint64_t v8 = sub_A8E4();
  v2[65] = v8;
  v2[66] = *(void *)(v8 - 8);
  v2[67] = sub_A5B8();
  v2[68] = sub_A5B8();
  v2[69] = sub_A5B8();
  v2[70] = sub_A5B8();
  uint64_t v9 = type metadata accessor for UsoEntity_common_MeasurementQualifier.DefinedValues(0LL);
  v2[71] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[72] = v10;
  v2[73] = sub_A5C0(v10);
  uint64_t v11 = sub_494C(&qword_189CE0);
  v2[74] = v11;
  v2[75] = sub_A5C0(*(void *)(v11 - 8));
  sub_494C(&qword_189B98);
  v2[76] = sub_A5B8();
  v2[77] = sub_A5B8();
  v2[78] = sub_A5B8();
  sub_494C(&qword_189CE8);
  v2[79] = sub_A5B8();
  v2[80] = sub_A5B8();
  v2[81] = sub_A5B8();
  v2[82] = sub_A5B8();
  v2[83] = sub_A5B8();
  v2[84] = sub_A5B8();
  uint64_t v12 = type metadata accessor for Logger(0LL);
  v2[85] = v12;
  v2[86] = *(void *)(v12 - 8);
  v2[87] = sub_A5B8();
  v2[88] = sub_A5B8();
  v2[89] = sub_A5B8();
  v2[90] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_80D0()
{
  uint64_t v1 = v0 + 38;
  uint64_t v2 = v0[90];
  uint64_t v3 = v0[86];
  uint64_t v4 = v0[85];
  uint64_t v5 = Logger.wellness.unsafeMutableAddressor();
  v0[91] = v5;
  sub_A5DC(v5, (uint64_t)(v0 + 38));
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[92] = (uint64_t)v6;
  v310 = v6;
  uint64_t v312 = v5;
  v6(v2, v5, v4);
  sub_A86C();
  os_log_type_t v7 = sub_AB70();
  if (os_log_type_enabled((os_log_t)(v0 + 38), v7))
  {
    uint64_t v8 = v0[90];
    uint64_t v9 = v0[86];
    uint64_t v316 = v0[85];
    uint64_t v10 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v11 = sub_A5E8(32LL);
    uint64_t v318 = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    v0[52] = sub_39178(0xD000000000000014LL, 0x8000000000137180LL, &v318);
    sub_AB18((uint64_t)(v0 + 52), (uint64_t)(v0 + 53));
    _os_log_impl(&dword_0, (os_log_t)(v0 + 38), v7, "Executing %s success pattern", v10, 0xCu);
    sub_A81C(v11);
    sub_5050(v11);
    sub_5050((uint64_t)v10);

    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v12(v8, v316);
  }

  else
  {
    uint64_t v13 = v0[90];
    uint64_t v14 = v0[86];
    uint64_t v15 = v0[85];

    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v12(v13, v15);
  }

  v314 = v12;
  v0[93] = (uint64_t)v12;
  uint64_t v16 = v0[83];
  uint64_t v17 = v0[78];
  uint64_t v18 = v0[77];
  uint64_t v19 = v0[75];
  uint64_t v317 = v0[74];
  uint64_t v20 = v0[72];
  uint64_t v21 = v0[71];
  uint64_t v22 = (void *)v0[54];
  sub_9108(v0[84]);
  sub_9580(v16);
  uint64_t v23 = v22[3];
  uint64_t v24 = v22[4];
  sub_500C(v22, v23);
  (*(void (**)(uint64_t, uint64_t))(v24 + 72))(v23, v24);
  (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))( v18,  enum case for UsoEntity_common_MeasurementQualifier.DefinedValues.common_MeasurementQualifier_EndOf(_:),  v21);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v18, 0LL, 1LL, v21);
  uint64_t v25 = v19 + *(int *)(v317 + 48);
  sub_A44C(v17, v19, &qword_189B98);
  sub_A44C(v18, v25, &qword_189B98);
  sub_A614(v19, 1LL, v21);
  if (v78)
  {
    uint64_t v26 = v0[78];
    uint64_t v27 = v0[71];
    sub_A4A4(v0[77], &qword_189B98);
    sub_A4A4(v26, &qword_189B98);
    sub_A614(v25, 1LL, v27);
    if (!v78) {
      goto LABEL_11;
    }
    sub_A4A4(v0[75], &qword_189B98);
  }

  else
  {
    uint64_t v28 = v0[71];
    sub_A44C(v0[75], v0[76], &qword_189B98);
    int v29 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v25, 1LL, v28);
    uint64_t v30 = v0[78];
    uint64_t v31 = v0[77];
    uint64_t v32 = v0[76];
    if (v29 == 1)
    {
      sub_A4A4(v0[77], &qword_189B98);
      sub_A4A4(v30, &qword_189B98);
      uint64_t v33 = sub_AABC();
      v34(v33);
LABEL_11:
      sub_A4A4(v0[75], &qword_189CE0);
LABEL_12:
      uint64_t v35 = v0[79];
      uint64_t v36 = v0[65];
      sub_A44C(v0[84], v35, &qword_189CE8);
      sub_A614(v35, 1LL, v36);
      if (!v78)
      {
        uint64_t v51 = v0[83];
        uint64_t v52 = v0[68];
        uint64_t v53 = v0[67];
        uint64_t v54 = v0[66];
        uint64_t v55 = v0[54];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32))(v53, v0[79], v0[65]);
        sub_AC20();
        sub_99D4(v53, v51, v52);
        v0[98] = *(void *)(v54 + 8);
        sub_ABFC();
        sub_AC20();
        sub_9B7C(v53, v51, v52);
        sub_ABFC();
        sub_A304(v55 + 200, (uint64_t)(v0 + 27));
        sub_500C(v0 + 27, v0[30]);
        uint64_t v56 = swift_task_alloc(32LL);
        v0[99] = v56;
        *(void *)(v56 + 16) = v53;
        *(void *)(v56 + 24) = v55;
        uint64_t v57 = (uint64_t **)swift_task_alloc(dword_18B9A4);
        v0[100] = (uint64_t)v57;
        *uint64_t v57 = v0;
        v57[1] = (uint64_t *)sub_8DC8;
        sub_AAA0();
        return sub_65B00(v58, v59, v60, v61, v62);
      }

      uint64_t v37 = v0 + 35;
      sub_A4A4(v0[79], &qword_189CE8);
      uint64_t v38 = sub_A5DC(v312, (uint64_t)(v0 + 35));
      sub_A8FC( v38,  v39,  v40,  v41,  v42,  v43,  v44,  v45,  v211,  v223,  v235,  v247,  v258,  v268,  v277,  v285,  v292,  v298,  v303,  v307,  v310);
      sub_A86C();
      os_log_type_t v46 = sub_A898();
      if (sub_A988(v46))
      {
        uint64_t v47 = (_WORD *)sub_A5E8(2LL);
        *uint64_t v47 = 0;
        sub_A940(&dword_0, v48, v49, "Failed to return cycle tracking prediction: start date not available.");
        sub_5050((uint64_t)v47);
      }

      uint64_t v50 = v0[88];
LABEL_27:
      uint64_t v91 = v0[85];
      uint64_t v92 = v0[84];
      uint64_t v93 = v0[83];
      v95 = (int *)v0[63];
      v94 = (_BYTE *)v0[64];
      uint64_t v96 = v0[62];
      uint64_t v97 = v0[54];

      v314(v50, v91);
      LOBYTE(v91) = *(_BYTE *)(v97 + 248);
      uint64_t v98 = (uint64_t)&v94[v95[5]];
      uint64_t v99 = sub_ABEC();
      sub_A66C(v98, 1LL, v100, v99);
      sub_A304(v97 + 40, (uint64_t)&v94[v95[6]]);
      sub_A13C((_OWORD *)(v97 + 80), &v94[v95[7]]);
      uint64_t v101 = sub_AA80();
      sub_A72C(v101);
      uint64_t v102 = sub_A9C8();
      v103 = (uint64_t *)&v94[v95[8]];
      v103[3] = v101;
      v103[4] = (uint64_t)&protocol witness table for ResponseFactory;
      uint64_t *v103 = v102;
      sub_AA78();
      sub_A774();
      uint64_t v104 = sub_AAF8(v96);
      type metadata accessor for WellnessCATs(0LL);
      sub_A774();
      uint64_t v105 = sub_AAF0(v96);
      _BYTE *v94 = v91;
      *(void *)&v94[v95[9]] = v104;
      *(void *)&v94[v95[10]] = v105;
      sub_A410(&qword_189CC8, type metadata accessor for UnavailableDataFlow, (uint64_t)&unk_13FD60);
      uint64_t v224 = Flow.eraseToAnyFlow()(v95);
      sub_A258((uint64_t)v94);
      sub_A674(v93);
      sub_A674(v92);
      uint64_t v236 = v0[78];
      uint64_t v248 = v0[77];
      uint64_t v259 = v0[76];
      uint64_t v269 = v0[75];
      uint64_t v278 = v0[73];
      uint64_t v286 = v0[70];
      uint64_t v293 = v0[69];
      uint64_t v299 = v0[68];
      uint64_t v304 = v0[67];
      uint64_t v308 = v0[64];
      uint64_t v311 = v0[62];
      uint64_t v313 = v0[61];
      uint64_t v315 = v0[58];
      swift_task_dealloc(v0[90]);
      sub_A8EC();
      sub_A910();
      sub_A864();
      sub_A85C();
      sub_A8F4();
      sub_A78C();
      sub_A67C();
      sub_A7C8();
      uint64_t v106 = sub_A760();
      uint64_t v114 = sub_A888(v106, v107, v108, v109, v110, v111, v112, v113, v212, v224, v236);
      uint64_t v122 = sub_A854(v114, v115, v116, v117, v118, v119, v120, v121, v213, v225, v237, v248);
      uint64_t v130 = sub_A84C(v122, v123, v124, v125, v126, v127, v128, v129, v214, v226, v238, v249, v259);
      uint64_t v138 = sub_A844(v130, v131, v132, v133, v134, v135, v136, v137, v215, v227, v239, v250, v260, v269);
      uint64_t v146 = sub_A83C(v138, v139, v140, v141, v142, v143, v144, v145, v216, v228, v240, v251, v261, v270, v278);
      uint64_t v154 = sub_A95C(v146, v147, v148, v149, v150, v151, v152, v153, v217, v229, v241, v252, v262, v271, v279, v286);
      uint64_t v162 = sub_A954( v154,  v155,  v156,  v157,  v158,  v159,  v160,  v161,  v218,  v230,  v242,  v253,  v263,  v272,  v280,  v287,  v293);
      uint64_t v170 = sub_A938( v162,  v163,  v164,  v165,  v166,  v167,  v168,  v169,  v219,  v231,  v243,  v254,  v264,  v273,  v281,  v288,  v294,  v299);
      uint64_t v178 = sub_A930( v170,  v171,  v172,  v173,  v174,  v175,  v176,  v177,  v220,  v232,  v244,  v255,  v265,  v274,  v282,  v289,  v295,  v300,  v304);
      uint64_t v186 = sub_A928( v178,  v179,  v180,  v181,  v182,  v183,  v184,  v185,  v221,  v233,  v245,  v256,  v266,  v275,  v283,  v290,  v296,  v301,  v305,  v308);
      sub_A920( v186,  v187,  v188,  v189,  v190,  v191,  v192,  v193,  v222,  v234,  v246,  v257,  v267,  v276,  v284,  v291,  v297,  v302,  v306,  v309,  v311);
      swift_task_dealloc(v313);
      swift_task_dealloc(v315);
      sub_A918();
      sub_AAA0();
      __asm { BR              X1 }
    }

    uint64_t v64 = v0[75];
    uint64_t v65 = v0[73];
    uint64_t v66 = v0[72];
    uint64_t v67 = v0[71];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v65, v25, v67);
    sub_A410( &qword_189CF0,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_MeasurementQualifier.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_MeasurementQualifier.DefinedValues);
    char v69 = dispatch thunk of static Equatable.== infix(_:_:)(v32, v65, v67, v68);
    v70 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
    v70(v65, v67);
    sub_A9F0(v31);
    sub_A9F0(v30);
    v70(v32, v67);
    sub_A9F0(v64);
    if ((v69 & 1) == 0) {
      goto LABEL_12;
    }
  }

  uint64_t v71 = v0[82];
  uint64_t v72 = v0[65];
  sub_A44C(v0[84], v71, &qword_189CE8);
  sub_A614(v71, 1LL, v72);
  if (v78)
  {
    v73 = v0 + 82;
LABEL_24:
    uint64_t v37 = v0 + 41;
    sub_A4A4(*v73, &qword_189CE8);
    uint64_t v79 = sub_A5DC(v312, (uint64_t)(v0 + 41));
    sub_A8FC( v79,  v80,  v81,  v82,  v83,  v84,  v85,  v86,  v211,  v223,  v235,  v247,  v258,  v268,  v277,  v285,  v292,  v298,  v303,  v307,  v310);
    sub_A86C();
    os_log_type_t v87 = sub_A898();
    if (sub_A988(v87))
    {
      v88 = (_WORD *)sub_A5E8(2LL);
      _WORD *v88 = 0;
      sub_A940(&dword_0, v89, v90, "Failed to return cycle tracking prediction: start and/or end dates not available.");
      sub_5050((uint64_t)v88);
    }

    uint64_t v50 = v0[89];
    goto LABEL_27;
  }

  uint64_t v74 = v0[83];
  uint64_t v75 = v0[81];
  uint64_t v76 = v0[65];
  v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[66] + 32);
  v77(v0[70], v0[82], v76);
  sub_A44C(v74, v75, &qword_189CE8);
  sub_A614(v75, 1LL, v76);
  if (v78)
  {
    v73 = v0 + 81;
    (*(void (**)(uint64_t, uint64_t))(v0[66] + 8))(v0[70], v0[65]);
    goto LABEL_24;
  }

  uint64_t v195 = v0[80];
  uint64_t v196 = v0[70];
  uint64_t v197 = v0[69];
  uint64_t v198 = v0[68];
  uint64_t v199 = v0[66];
  uint64_t v200 = v0[65];
  uint64_t v201 = v0[54];
  v77(v197, v0[81], v200);
  uint64_t v202 = sub_AABC();
  v203(v202);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v195, 0LL, 1LL, v200);
  sub_AC20();
  sub_99D4(v196, v195, v198);
  v204 = *(uint64_t (**)(uint64_t, uint64_t))(v199 + 8);
  v0[94] = (uint64_t)v204;
  sub_A7A0(v204);
  sub_A4A4(v195, &qword_189CE8);
  sub_A304(v201 + 200, (uint64_t)(v0 + 22));
  sub_500C(v0 + 22, v0[25]);
  uint64_t v205 = swift_task_alloc(32LL);
  v0[95] = v205;
  *(void *)(v205 + 16) = v197;
  *(void *)(v205 + 24) = v201;
  v206 = (uint64_t **)swift_task_alloc(dword_18B99C);
  v0[96] = (uint64_t)v206;
  *v206 = v0;
  v206[1] = (uint64_t *)sub_8A60;
  sub_AAA0();
  return sub_65978(v207, v208, v209, v210);
}

uint64_t sub_8A60()
{
  v3[44] = v1;
  v3[45] = v2;
  v3[46] = v0;
  uint64_t v4 = v3[96];
  *uint64_t v5 = *v1;
  v3[97] = v0;
  swift_task_dealloc(v4);
  sub_A67C();
  sub_A964();
  return sub_A810();
}

#error "8B04: call analysis failed (funcsize=75)"
#error "8D84: call analysis failed (funcsize=112)"
uint64_t sub_8DC8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  sub_AA10();
  v3[47] = v1;
  v3[48] = v2;
  v3[49] = v0;
  uint64_t v4 = v3[100];
  *uint64_t v5 = *v1;
  v3[101] = v0;
  swift_task_dealloc(v4);
  sub_A67C();
  sub_A964();
  return sub_A810();
}

#error "8E58: call analysis failed (funcsize=70)"
#error "90C4: call analysis failed (funcsize=107)"
void sub_9108(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v74 = a1;
  os_log_type_t v7 = sub_A8E4();
  uint64_t v8 = sub_AA88(v7);
  __chkstk_darwin(v8);
  uint64_t v71 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_A794();
  __chkstk_darwin(v10);
  v73 = (char *)&v69 - v11;
  sub_A794();
  uint64_t v13 = __chkstk_darwin(v12);
  sub_AB90(v13, v14, v15, v16, v17, v18, v19, v20, v69);
  sub_494C(&qword_189CE8);
  sub_6D20();
  __chkstk_darwin(v21);
  v70 = (char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_A794();
  __chkstk_darwin(v23);
  char v69 = (uint64_t)&v69 - v24;
  sub_A794();
  __chkstk_darwin(v25);
  sub_ABA4();
  __chkstk_darwin(v26);
  sub_AA68();
  __chkstk_darwin(v27);
  sub_ABB8();
  __chkstk_darwin(v28);
  sub_AA00();
  sub_494C(&qword_189B90);
  sub_6D20();
  __chkstk_darwin(v29);
  sub_A8C8();
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v69 - v31;
  sub_A6DC();
  uint64_t v33 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues(0LL);
  uint64_t v34 = sub_A614((uint64_t)v32, 1LL, v33);
  if (v37) {
    goto LABEL_13;
  }
  sub_AB50(v34, v35, &qword_189B90);
  uint64_t v36 = sub_A8B4();
  uint64_t v37 = (_DWORD)v36 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Last(_:)
     || (_DWORD)v36 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Previous(_:);
  if (!v37)
  {
    if ((_DWORD)v36 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Next(_:))
    {
      uint64_t v42 = sub_A60C(v36, "nextPeriodStart");
      if (v42)
      {
        sub_AB2C((uint64_t)v42);

        uint64_t v44 = 0LL;
      }

      else
      {
        uint64_t v44 = 1LL;
      }

      Swift::String v63 = v74;
      sub_A66C(v5, v44, v43, v75);
      uint64_t v64 = v5;
      uint64_t v65 = v63;
      goto LABEL_35;
    }

    uint64_t v34 = sub_A9A8();
LABEL_13:
    uint64_t v45 = sub_A60C(v34, "lastPeriodStart");
    if (v45)
    {
      os_log_type_t v46 = v45;
      sub_A780();

      uint64_t v47 = v75;
      sub_A684((uint64_t)v1, v4);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v1, 0LL, 1LL, v47);
      sub_A614((uint64_t)v1, 1LL, v47);
      if (!v37)
      {
        uint64_t v48 = v72;
        uint64_t v49 = sub_A684(v72, (uint64_t)v1);
        uint64_t v50 = sub_A60C(v49, "nextPeriodStart");
        if (v50)
        {
          uint64_t v51 = v50;
          sub_A780();

          sub_A684(v3, v4);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, 0LL, 1LL, v47);
          sub_A614(v3, 1LL, v47);
          if (!v37)
          {
            uint64_t v52 = sub_A684(v71, v3);
            uint64_t v53 = Date.init()(v52);
            uint64_t v54 = Date.timeIntervalSinceReferenceDate.getter(v53);
            uint64_t v55 = sub_A808(v4);
            Date.timeIntervalSinceReferenceDate.getter(v55);
            uint64_t v56 = sub_AB78();
            if (v6 >= vabdd_f64(v57, v54))
            {
              uint64_t v66 = sub_A60C(v56, "nextPeriodStart");
              if (!v66)
              {
                uint64_t v67 = 1LL;
                char v60 = (uint64_t)v70;
                goto LABEL_34;
              }

              char v59 = v66;
              char v60 = (uint64_t)v70;
            }

            else
            {
              char v58 = sub_A60C(v56, "lastPeriodStart");
              if (!v58)
              {
                uint64_t v67 = 1LL;
                char v60 = v69;
                goto LABEL_34;
              }

              char v59 = v58;
              char v60 = v69;
            }

            sub_AB00();

            uint64_t v67 = 0LL;
LABEL_34:
            sub_A808(v71);
            sub_A808(v48);
            sub_A628(v60, v67);
            uint64_t v64 = v60;
            uint64_t v65 = v74;
LABEL_35:
            sub_A478(v64, v65, &qword_189CE8);
            sub_A880(v68, &qword_189B90);
            goto LABEL_36;
          }
        }

        else
        {
          sub_A628(v3, 1LL);
        }

        sub_A9E0();
        goto LABEL_26;
      }
    }

    else
    {
      sub_A7F0();
    }

    uint64_t v3 = (uint64_t)v1;
LABEL_26:
    uint64_t v61 = v74;
    sub_A4A4(v3, &qword_189CE8);
    sub_A880(v62, &qword_189B90);
    sub_A628(v61, 1LL);
    goto LABEL_36;
  }

  sub_A880(v36, &qword_189B90);
  uint64_t v39 = sub_A60C(v38, "lastPeriodStart");
  if (v39)
  {
    sub_AB38((uint64_t)v39);

    uint64_t v41 = 0LL;
  }

  else
  {
    uint64_t v41 = 1LL;
  }

  sub_A66C(v2, v41, v40, v75);
  sub_A478(v2, v74, &qword_189CE8);
LABEL_36:
  sub_A744();
}

void sub_9580(uint64_t a1@<X8>)
{
  uint64_t v73 = a1;
  uint64_t v7 = sub_A8E4();
  uint64_t v8 = sub_AA88(v7);
  __chkstk_darwin(v8);
  uint64_t v70 = (uint64_t)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_A794();
  __chkstk_darwin(v10);
  uint64_t v72 = (char *)&v68 - v11;
  sub_A794();
  uint64_t v13 = __chkstk_darwin(v12);
  sub_AB90(v13, v14, v15, v16, v17, v18, v19, v20, v68);
  sub_494C(&qword_189CE8);
  sub_6D20();
  __chkstk_darwin(v21);
  char v69 = (char *)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_A794();
  __chkstk_darwin(v23);
  uint64_t v68 = (uint64_t)&v68 - v24;
  sub_A794();
  __chkstk_darwin(v25);
  sub_ABA4();
  __chkstk_darwin(v26);
  sub_AA68();
  __chkstk_darwin(v27);
  sub_ABB8();
  __chkstk_darwin(v28);
  sub_AA00();
  sub_494C(&qword_189B90);
  sub_6D20();
  __chkstk_darwin(v29);
  sub_A8C8();
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v68 - v31;
  sub_A6DC();
  uint64_t v33 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues(0LL);
  uint64_t v34 = sub_A614((uint64_t)v32, 1LL, v33);
  if (!v36)
  {
    sub_AB50(v34, v35, &qword_189B90);
    uint64_t v37 = sub_A8B4();
    if ((_DWORD)v37 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Last(_:))
    {
      id v38 = sub_A60C(v37, "lastPeriodEnd");
      if (v38)
      {
        sub_AB38((uint64_t)v38);

        uint64_t v40 = 0LL;
      }

      else
      {
        uint64_t v40 = 1LL;
      }

      sub_A66C(v2, v40, v39, v74);
      uint64_t v60 = v2;
      goto LABEL_20;
    }

    if ((_DWORD)v37 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Next(_:))
    {
      id v41 = sub_A60C(v37, "nextPeriodEnd");
      if (v41)
      {
        sub_AB2C((uint64_t)v41);

        uint64_t v43 = 0LL;
      }

      else
      {
        uint64_t v43 = 1LL;
      }

      uint64_t v64 = v73;
      sub_A66C(v5, v43, v42, v74);
      uint64_t v60 = v5;
      uint64_t v61 = v64;
      goto LABEL_26;
    }

    uint64_t v34 = sub_A9A8();
  }

  id v44 = sub_A60C(v34, "lastPeriodEnd");
  if (!v44)
  {
    sub_A7F0();
    goto LABEL_17;
  }

  uint64_t v45 = v44;
  sub_A780();

  uint64_t v46 = v74;
  sub_A684((uint64_t)v1, v4);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v1, 0LL, 1LL, v46);
  sub_A614((uint64_t)v1, 1LL, v46);
  if (v36)
  {
LABEL_17:
    uint64_t v3 = (uint64_t)v1;
    goto LABEL_23;
  }

  uint64_t v47 = v71;
  uint64_t v48 = sub_A684(v71, (uint64_t)v1);
  id v49 = sub_A60C(v48, "nextPeriodEnd");
  if (v49)
  {
    uint64_t v50 = v49;
    sub_A780();

    sub_A684(v3, v4);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, 0LL, 1LL, v46);
    sub_A614(v3, 1LL, v46);
    if (!v36)
    {
      uint64_t v51 = sub_A684(v70, v3);
      uint64_t v52 = Date.init()(v51);
      double v53 = Date.timeIntervalSinceReferenceDate.getter(v52);
      uint64_t v54 = sub_A808(v4);
      Date.timeIntervalSinceReferenceDate.getter(v54);
      uint64_t v55 = sub_AB78();
      if (v6 >= vabdd_f64(v56, v53))
      {
        id v66 = sub_A60C(v55, "nextPeriodEnd");
        if (!v66)
        {
          uint64_t v67 = 1LL;
          uint64_t v59 = (uint64_t)v69;
          goto LABEL_33;
        }

        char v58 = v66;
        uint64_t v59 = (uint64_t)v69;
      }

      else
      {
        id v57 = sub_A60C(v55, "lastPeriodEnd");
        if (!v57)
        {
          uint64_t v67 = 1LL;
          uint64_t v59 = v68;
          goto LABEL_33;
        }

        char v58 = v57;
        uint64_t v59 = v68;
      }

      sub_AB00();

      uint64_t v67 = 0LL;
LABEL_33:
      sub_A808(v70);
      sub_A808(v47);
      sub_A628(v59, v67);
      uint64_t v60 = v59;
LABEL_20:
      uint64_t v61 = v73;
LABEL_26:
      sub_A478(v60, v61, &qword_189CE8);
      sub_A880(v65, &qword_189B90);
      goto LABEL_27;
    }
  }

  else
  {
    sub_A628(v3, 1LL);
  }

  sub_A9E0();
LABEL_23:
  uint64_t v62 = v73;
  sub_A4A4(v3, &qword_189CE8);
  sub_A880(v63, &qword_189B90);
  sub_A628(v62, 1LL);
LABEL_27:
  sub_A744();
}

uint64_t sub_99D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = sub_A8E4();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_AA58();
  uint64_t v13 = v11 - v12;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v24 - v16;
  __chkstk_darwin(v15);
  sub_AA00();
  sub_A44C(a2, v4, &qword_189CE8);
  sub_A614(v4, 1LL, v9);
  if (v18)
  {
    sub_A4A4(v4, &qword_189CE8);
    char v19 = 0;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v3, v4, v9);
    sub_A410( &qword_189D08,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    char v20 = sub_AB84(a3, a1);
    sub_A9F8((uint64_t)v17, a3);
    sub_A9F8(v13, v3);
    if ((v20 & 1) != 0) {
      char v19 = 0;
    }
    else {
      char v19 = sub_AB84(v13, (uint64_t)v17) ^ 1;
    }
    uint64_t v21 = *(void (**)(uint64_t))(v10 + 8);
    uint64_t v22 = sub_AABC();
    v21(v22);
    ((void (*)(char *, uint64_t))v21)(v17, v9);
    ((void (*)(uint64_t, uint64_t))v21)(v3, v9);
  }

  return v19 & 1;
}

uint64_t sub_9B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_A8E4();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_AA58();
  sub_AA68();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - v10;
  LODWORD(a2) = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a2, 1LL, v7);
  sub_A9F8((uint64_t)v11, a1);
  sub_A9F8(v3, a3);
  if ((_DWORD)a2 == 1)
  {
    sub_A410( &qword_189D08,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    char v13 = dispatch thunk of static Comparable.< infix(_:_:)(v11, v3, v7, v12) ^ 1;
  }

  else
  {
    char v13 = 0;
  }

  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v14(v3, v7);
  uint64_t v15 = sub_AABC();
  ((void (*)(uint64_t))v14)(v15);
  return v13 & 1;
}

uint64_t sub_9C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v56 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  sub_AA28();
  sub_494C(&qword_189BA0);
  sub_6D20();
  __chkstk_darwin(v11);
  char v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_494C(&qword_189CF8);
  sub_6D20();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_494C(&qword_189D00);
  sub_6D20();
  __chkstk_darwin(v17);
  sub_AA40();
  type metadata accessor for DialogCalendar(0LL);
  uint64_t v18 = static DialogCalendar.make(date:)(a2);
  uint64_t v19 = *(int *)(a4(0LL) + 24);
  swift_release(*(void *)(a1 + v19));
  uint64_t v57 = a1;
  *(void *)(a1 + v19) = v18;
  uint64_t v20 = *(unsigned __int8 *)(a3 + 248);
  uint64_t v21 = sub_ABEC();
  sub_A66C((uint64_t)v13, 1LL, v22, v21);
  sub_F4F10(v20, v13);
  sub_A9F0((uint64_t)v13);
  uint64_t v23 = type metadata accessor for URL(0LL);
  sub_A614((uint64_t)v16, 1LL, v23);
  if (v24)
  {
    sub_A4A4((uint64_t)v16, &qword_189CF8);
    uint64_t v25 = sub_ABF4();
    sub_A66C(v4, 1LL, v26, v25);
  }

  else
  {
    id v27 = [objc_allocWithZone(SAUIAppPunchOut) init];
    URL._bridgeToObjectiveC()(v28);
    uint64_t v30 = v29;
    [v27 setPunchOutUri:v29];

    id v31 = v27;
    uint64_t v32 = UUID.init()();
    uint64_t v33 = UUID.uuidString.getter(v32);
    uint64_t v35 = v34;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v5, v56);
    sub_125B84(v33, v35, v31);

    id v37 = sub_AB24(v36, "dictionary");
    if (v37)
    {
      id v38 = v37;
      uint64_t v39 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      id v58 = 0LL;
      id v40 = [v39 dataWithPropertyList:v38 format:200 options:0 error:&v58];
      id v41 = v58;
      if (v40)
      {
        uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v40);
        unint64_t v44 = v43;

        Swift::String v45 = Data.base64EncodedString(options:)(0LL);
        String.toSpeakableString.getter(v45._countAndFlagsBits, v45._object);

        sub_A3CC(v42, v44);
        swift_bridgeObjectRelease(v45._object);
        uint64_t v47 = sub_ABF4();
        uint64_t v48 = v4;
        uint64_t v49 = 0LL;
      }

      else
      {
        uint64_t v52 = v41;
        uint64_t v53 = _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease(v53);
        uint64_t v47 = sub_ABF4();
        uint64_t v48 = v4;
        uint64_t v49 = 1LL;
      }

      sub_A66C(v48, v49, v46, v47);
    }

    else
    {
      uint64_t v50 = type metadata accessor for SpeakableString(0LL);
      sub_A66C(v4, 1LL, v51, v50);
    }

    sub_AB64(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8LL));
  }

  return sub_A384(v4, v57);
}

uint64_t sub_A018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to Flow.onAsync(input:)[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_A080;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t sub_A080(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(a1);
}

uint64_t sub_A0B8(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_189CAC);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_A108;
  return sub_7390(a1);
}

uint64_t sub_A108()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_OWORD *sub_A13C(_OWORD *a1, _OWORD *a2)
{
  return a2;
}

unint64_t sub_A178()
{
  unint64_t result = qword_189CB0;
  if (!qword_189CB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_13A674, &type metadata for GenericErrorFlow);
    atomic_store(result, (unint64_t *)&qword_189CB0);
  }

  return result;
}

void *sub_A1B4(void *a1)
{
  return a1;
}

unint64_t sub_A1E8()
{
  unint64_t result = qword_189CC0;
  if (!qword_189CC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_13FED0, &type metadata for HealthAppOnboardingRequiredFlow);
    atomic_store(result, (unint64_t *)&qword_189CC0);
  }

  return result;
}

void *sub_A224(void *a1)
{
  return a1;
}

uint64_t sub_A258(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnavailableDataFlow(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_A294()
{
  unint64_t result = qword_189CD8;
  if (!qword_189CD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13B268, &type metadata for AskAuthorizationFlow);
    atomic_store(result, (unint64_t *)&qword_189CD8);
  }

  return result;
}

void *sub_A2D0(void *a1)
{
  return a1;
}

void sub_A304(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_A890();
}

uint64_t sub_A344(uint64_t a1)
{
  return sub_9C8C( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  type metadata accessor for WellnessQueryingMenstruationStartParameters);
}

uint64_t sub_A364(uint64_t a1)
{
  return sub_9C8C( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  type metadata accessor for WellnessQueryingMenstruationEndParameters);
}

uint64_t sub_A384(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_189D00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_A3CC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void sub_A410(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = a2(255LL);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_A890();
}

void sub_A44C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_6DF0(a1, a2, a3);
  sub_6E0C(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_A890();
}

void sub_A478(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_6DF0(a1, a2, a3);
  sub_6E0C(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_A890();
}

void sub_A4A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_494C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_A890();
}

unint64_t sub_A4DC()
{
  unint64_t result = qword_189D18;
  if (!qword_189D18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1371C0, &type metadata for GetCycleTrackingFlow);
    atomic_store(result, (unint64_t *)&qword_189D18);
  }

  return result;
}

uint64_t sub_A518()
{
  uint64_t v2 = *(void *)(v0 + 720);
  *(void *)(v1 - 88) = *(void *)(v0 + 456);
  return swift_task_dealloc(v2);
}

uint64_t sub_A59C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_A5B8()
{
  return swift_task_alloc(v0);
}

uint64_t sub_A5C0@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_A5D0()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_A5DC(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0LL, 0LL);
}

uint64_t sub_A5E8(uint64_t a1)
{
  return swift_slowAlloc(a1, -1LL);
}

void sub_A5F0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_A604()
{
  return swift_errorRelease(v0);
}

id sub_A60C(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_A614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, a2, a3);
}

uint64_t sub_A628(uint64_t a1, uint64_t a2)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1LL, v2);
}

BOOL sub_A634(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_A644( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v14 - 88) = *(void *)(v13 + 672);
  return static DialogPhase.completion.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_A66C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1LL, a4);
}

void sub_A674(uint64_t a1)
{
}

uint64_t sub_A67C()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_A684(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_A68C()
{
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[14];
  sub_500C(v0 + 10, v3);
  return dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)( v2,  v1,  v3,  v4);
}

uint64_t sub_A6BC()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v1 - 8) = *v0;
  return swift_task_dealloc(v3);
}

uint64_t sub_A6DC()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  sub_500C(v0, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 80))(v2, v1);
}

uint64_t sub_A70C()
{
  return (*(uint64_t (**)(void, void))(v0 + 744))(*(void *)(v0 + 696), *(void *)(v0 + 680));
}

uint64_t sub_A72C(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_A738(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v3, v2);
}

  ;
}

uint64_t sub_A760()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_A768()
{
  return static CATOption.defaultMode.getter();
}

uint64_t sub_A774()
{
  return static CATOption.defaultMode.getter();
}

uint64_t sub_A780()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_A78C()
{
  return swift_task_dealloc(v0);
}

  ;
}

uint64_t sub_A7A0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

  ;
}

uint64_t sub_A7C8()
{
  return swift_task_dealloc(v0);
}

void sub_A7D0()
{
}

uint64_t sub_A7E8()
{
  return swift_errorRetain(v0);
}

uint64_t sub_A7F0()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, 1LL, 1LL, *(void *)(v1 - 104));
}

uint64_t sub_A808(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_A810()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_A81C(uint64_t a1)
{
  return swift_arrayDestroy(a1, 1LL);
}

uint64_t sub_A824()
{
  return swift_task_dealloc(*(void *)(v0 + 976));
}

uint64_t sub_A83C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_task_dealloc(a15);
}

uint64_t sub_A844( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_task_dealloc(a14);
}

uint64_t sub_A84C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return swift_task_dealloc(a13);
}

uint64_t sub_A854( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_task_dealloc(a12);
}

uint64_t sub_A85C()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_A864()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_A86C()
{
  return Logger.logObject.getter();
}

uint64_t sub_A874()
{
  return type metadata accessor for WellnessCATs(0LL);
}

void sub_A880(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_A888( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return swift_task_dealloc(a11);
}

  ;
}

uint64_t sub_A898()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_A8A0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v0, v3);
}

uint64_t sub_A8B4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v0 - 8) + 88LL))(v1, v0);
}

  ;
}

uint64_t sub_A8E4()
{
  return type metadata accessor for Date(0LL);
}

uint64_t sub_A8EC()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_A8F4()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_A8FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t (*a21)(uint64_t, uint64_t, uint64_t))
{
  return a21(v22, v21, v23);
}

uint64_t sub_A910()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_A918()
{
  return swift_task_dealloc(*(void *)(v0 - 88));
}

uint64_t sub_A920( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  return swift_task_dealloc(a21);
}

uint64_t sub_A928( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return swift_task_dealloc(a20);
}

uint64_t sub_A930( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return swift_task_dealloc(a19);
}

uint64_t sub_A938( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return swift_task_dealloc(a18);
}

void sub_A940(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_A954( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return swift_task_dealloc(a17);
}

uint64_t sub_A95C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return swift_task_dealloc(a16);
}

  ;
}

uint64_t sub_A970( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_task_dealloc(a9);
}

uint64_t sub_A978()
{
  return OutputGenerationManifest.responseViewId.setter(v0, v1);
}

BOOL sub_A988(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_A998(uint64_t a1)
{
  *(void *)(v1 + 400) = a1;
  return type metadata accessor for AnyFlow(0LL);
}

uint64_t sub_A9A8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_A9B8()
{
  return v3(v1, v0, v2);
}

uint64_t sub_A9C8()
{
  return ResponseFactory.init()();
}

uint64_t sub_A9D0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_A9E0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

void sub_A9F0(uint64_t a1)
{
}

uint64_t sub_A9F8(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

  ;
}

void sub_AA10()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_AA20()
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_AA78()
{
  return type metadata accessor for WellnessCATsSimple(0LL);
}

uint64_t sub_AA80()
{
  return type metadata accessor for ResponseFactory(0LL);
}

uint64_t sub_AA88(uint64_t result)
{
  *(void *)(v1 - 104) = result;
  *(void *)(v1 - 128) = *(void *)(result - 8);
  return result;
}

  ;
}

uint64_t sub_AABC()
{
  return v0;
}

uint64_t sub_AAC8()
{
  return (*(uint64_t (**)(void, void))(v0 + 784))(*(void *)(v0 + 536), *(void *)(v0 + 520));
}

uint64_t sub_AAD8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_task_dealloc(a10);
}

uint64_t sub_AAE0(uint64_t a1, uint64_t a2)
{
  return OutputGenerationManifest.init(dialogPhase:_:)(v2, a2, 0LL);
}

uint64_t sub_AAF0(uint64_t a1)
{
  return CATWrapper.__allocating_init(options:globals:)(a1, 0LL);
}

uint64_t sub_AAF8(uint64_t a1)
{
  return CATWrapperSimple.__allocating_init(options:globals:)(a1, 0LL);
}

uint64_t sub_AB00()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

_OWORD *sub_AB0C()
{
  return sub_A13C((_OWORD *)(v1 + 80), v0);
}

uint64_t sub_AB18(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2, v3);
}

id sub_AB24(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_AB2C(uint64_t a1)
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_AB38(uint64_t a1)
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

void sub_AB44()
{
}

void sub_AB50(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_AB5C()
{
  return Logger.logObject.getter();
}

uint64_t sub_AB64@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_AB70()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_AB78()
{
  return Date.timeIntervalSinceReferenceDate.getter();
}

uint64_t sub_AB84(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of static Comparable.< infix(_:_:)(a1, a2, v2, v3);
}

void sub_AB90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 136) = (char *)&a9 - v9;
}

  ;
}

  ;
}

void *sub_ABCC(uint64_t a1)
{
  *(void *)(v2 - 80) = a1;
  return sub_A1B4(v1);
}

uint64_t sub_ABD8()
{
  return *(void *)(v0 + 560);
}

uint64_t sub_ABEC()
{
  return type metadata accessor for DateInterval(0LL);
}

uint64_t sub_ABF4()
{
  return type metadata accessor for SpeakableString(0LL);
}

uint64_t sub_ABFC()
{
  return v2(v0, v1);
}

uint64_t sub_AC08()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

uint64_t sub_AC14()
{
  return *(void *)(v0 - 80);
}

uint64_t sub_AC20()
{
  return Date.init()();
}

__n128 GenericBinaryButtonSnippet.init(model:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 v11 = (__n128)a1[1];
  __int128 v12 = *a1;
  uint64_t v3 = *((void *)a1 + 4);
  uint64_t v4 = *((void *)a1 + 5);
  char v5 = a1[3] & 1;
  uint64_t v6 = type metadata accessor for Context(0LL);
  uint64_t v7 = sub_B1C8((unint64_t *)&qword_189B20, (uint64_t (*)(uint64_t))&type metadata accessor for Context);
  uint64_t v8 = EnvironmentObject.init()(v6, v7);
  __n128 result = v11;
  *(_OWORD *)a2 = v12;
  *(__n128 *)(a2 + 16) = v11;
  *(void *)(a2 + 32) = v3;
  *(void *)(a2 + 40) = v4;
  *(_BYTE *)(a2 + 48) = v5;
  *(void *)(a2 + 56) = v8;
  *(void *)(a2 + 64) = v10;
  return result;
}

uint64_t GenericBinaryButtonSnippet.body.getter()
{
  uint64_t v1 = swift_allocObject(&unk_17B6F0, 88LL, 7LL);
  memcpy((void *)(v1 + 16), v0, 0x48uLL);
  sub_B174((uint64_t)v0);
  uint64_t v2 = type metadata accessor for BinaryButtonView(0LL);
  uint64_t v3 = sub_B1C8(&qword_189D20, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryButtonView);
  return ComponentStack.init(content:)(sub_B16C, v1, v2, v3);
}

uint64_t sub_AD58(__int128 *a1)
{
  uint64_t v2 = type metadata accessor for ButtonItemButtonStyle.Role(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_494C(&qword_189D38);
  uint64_t v33 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_494C(&qword_189D40);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v14 = a1[1];
  __int128 v38 = *a1;
  __int128 v39 = v14;
  __int128 v40 = a1[2];
  if ((a1[3] & 1) != 0)
  {
    v42[0] = v40;
    __int128 v35 = v40;
    uint64_t v31 = v10;
    uint64_t v32 = v11;
    uint64_t v21 = v2;
    uint64_t v22 = swift_allocObject(&unk_17B7E8, 88LL, 7LL);
    memcpy((void *)(v22 + 16), a1, 0x48uLL);
    sub_B6B0((uint64_t)v42);
    sub_B174((uint64_t)a1);
    unint64_t v23 = sub_B6D8();
    Button<>.init<A>(_:action:)(&v35, sub_B7E8, v22, &type metadata for String, v23);
    (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for ButtonItemButtonStyle.Role.preferred(_:),  v21);
    uint64_t v24 = sub_B734((unint64_t *)&qword_189D50, &qword_189D38);
    View.buttonRole(_:)(v5, v6, v24);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v21);
    uint64_t v19 = v33;
    uint64_t v20 = *(void (**)(char *, uint64_t))(v33 + 8);
    v20(v8, v6);
    *(void *)&__int128 v35 = v6;
    *((void *)&v35 + 1) = v24;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2( &v35,  &opaque type descriptor for <<opaque return type of View.buttonRole(_:)>>,  1LL);
    uint64_t v26 = v31;
    uint64_t v18 = View.eraseToAnyView()(v31, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v26);
  }

  else
  {
    v42[0] = v40;
    __int128 v35 = v40;
    uint64_t v15 = swift_allocObject(&unk_17B798, 88LL, 7LL);
    memcpy((void *)(v15 + 16), a1, 0x48uLL);
    sub_B174((uint64_t)a1);
    sub_B6B0((uint64_t)v42);
    unint64_t v16 = sub_B6D8();
    Button<>.init<A>(_:action:)(&v35, sub_B694, v15, &type metadata for String, v16);
    uint64_t v17 = sub_B734((unint64_t *)&qword_189D50, &qword_189D38);
    uint64_t v18 = View.eraseToAnyView()(v6, v17);
    uint64_t v19 = v33;
    uint64_t v20 = *(void (**)(char *, uint64_t))(v33 + 8);
    v20(v8, v6);
  }

  __int128 v41 = v39;
  __int128 v35 = v39;
  uint64_t v27 = swift_allocObject(&unk_17B7C0, 88LL, 7LL);
  memcpy((void *)(v27 + 16), a1, 0x48uLL);
  sub_B174((uint64_t)a1);
  sub_B6B0((uint64_t)&v41);
  unint64_t v28 = sub_B6D8();
  Button<>.init<A>(_:action:)(&v35, sub_B718, v27, &type metadata for String, v28);
  uint64_t v36 = &type metadata for AnyView;
  id v37 = &protocol witness table for AnyView;
  *(void *)&__int128 v35 = v18;
  v34[3] = v6;
  v34[4] = sub_B734(&qword_189D58, &qword_189D38);
  uint64_t v29 = sub_B76C(v34);
  (*(void (**)(void *, char *, uint64_t))(v19 + 16))(v29, v8, v6);
  BinaryButtonView.init(primaryButton:secondaryButton:)(&v35, v34);
  return ((uint64_t (*)(char *, uint64_t))v20)(v8, v6);
}

uint64_t sub_B16C()
{
  return sub_AD58((__int128 *)(v0 + 16));
}

uint64_t sub_B174(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 56);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_B1C8(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = a2(255LL);
    uint64_t result = sub_B7EC(v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_B200(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2( a1,  &opaque type descriptor for <<opaque return type of GenericBinaryButtonSnippet.body>>,  1LL);
}

uint64_t sub_B210(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    uint64_t v6 = sub_494C(&qword_189D60);
    uint64_t inited = swift_initStackObject(v6, v15);
    *(_OWORD *)(inited + 16) = xmmword_137250;
    v14[0] = 0xD000000000000012LL;
    v14[1] = 0x8000000000141130LL;
    id v8 = v2;
    AnyHashable.init<A>(_:)(v14, &type metadata for String, &protocol witness table for String);
    *(void *)(inited + 96) = &type metadata for Bool;
    *(_BYTE *)(inited + 72) = a2;
    uint64_t v9 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    dispatch thunk of Context.perform(directInvocation:payload:)(v4, v5, v9);

    return swift_bridgeObjectRelease(v9);
  }

  else
  {
    uint64_t v11 = a1[8];
    uint64_t v12 = type metadata accessor for Context(0LL);
    uint64_t v13 = sub_B1C8( (unint64_t *)&qword_189B20,  (uint64_t (*)(uint64_t))&type metadata accessor for Context);
    uint64_t result = EnvironmentObject.error()(0LL, v11, v12, v13);
    __break(1u);
  }

  return result;
}

uint64_t sub_B35C()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_B374()
{
  return GenericBinaryButtonSnippet.body.getter();
}

void destroy for GenericBinaryButtonSnippet(uint64_t a1)
{
}

uint64_t initializeWithCopy for GenericBinaryButtonSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v7 = *(void **)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  id v8 = v7;
  return a1;
}

uint64_t assignWithCopy for GenericBinaryButtonSnippet(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v10 = *(void **)(a1 + 56);
  uint64_t v11 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v11;
  id v12 = v11;

  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

void *initializeWithTake for GenericBinaryButtonSnippet(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x48uLL);
}

uint64_t assignWithTake for GenericBinaryButtonSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v10 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericBinaryButtonSnippet(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 72))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericBinaryButtonSnippet(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 72) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for GenericBinaryButtonSnippet()
{
  return &type metadata for GenericBinaryButtonSnippet;
}

uint64_t sub_B620()
{
  return sub_B734(&qword_189D28, &qword_189D30);
}

uint64_t sub_B64C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_B694()
{
  return sub_B210((uint64_t *)(v0 + 16), 1);
}

uint64_t sub_B6B0(uint64_t a1)
{
  return a1;
}

unint64_t sub_B6D8()
{
  unint64_t result = qword_189D48;
  if (!qword_189D48)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_189D48);
  }

  return result;
}

uint64_t sub_B718()
{
  return sub_B210((uint64_t *)(v0 + 16), 0);
}

uint64_t sub_B734(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_B64C(a2);
    uint64_t result = sub_B7EC(v4);
    atomic_store(result, a1);
  }

  return result;
}

void *sub_B76C(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_B7AC()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_B7EC(uint64_t a1)
{
  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_B7F8(uint64_t a1)
{
  uint64_t v3 = *v1;
  v2[16] = a1;
  v2[17] = v3;
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  v2[18] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[19] = v5;
  v2[20] = sub_A5C0(v5);
  uint64_t v6 = type metadata accessor for Parse(0LL);
  v2[21] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[22] = v7;
  v2[23] = sub_A5C0(v7);
  uint64_t v8 = type metadata accessor for USOParse(0LL);
  v2[24] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[25] = v9;
  v2[26] = sub_A5C0(v9);
  uint64_t v10 = type metadata accessor for Input(0LL);
  v2[27] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[28] = v11;
  v2[29] = sub_A5C0(v11);
  uint64_t v12 = sub_D984();
  v2[30] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[31] = v13;
  v2[32] = sub_D8CC(v13);
  v2[33] = sub_A5B8();
  v2[34] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_B8C0(uint64_t a1)
{
  uint64_t v3 = v1 + 16;
  uint64_t v2 = v1[16];
  uint64_t v4 = (uint64_t)(v1 + 2);
  uint64_t v145 = (uint64_t)(v1 + 12);
  uint64_t v5 = v1[34];
  uint64_t v6 = v1[31];
  uint64_t v8 = v3[12];
  uint64_t v7 = v3[13];
  uint64_t v9 = v3[11];
  uint64_t v10 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v10, v4);
  uint64_t v154 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  uint64_t v159 = v10;
  sub_DA2C(v5, v10, v154);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v2, v9);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  int v14 = v13;
  uint64_t v149 = (uint64_t)v3;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v135 = v163[31];
    uint64_t v138 = v163[30];
    uint64_t v141 = v163[34];
    HIDWORD(v132) = v14;
    uint64_t v15 = v163[29];
    uint64_t v126 = v163[28];
    uint64_t v16 = v163[27];
    uint64_t v17 = v163[17];
    uint64_t v18 = sub_A5E8(22LL);
    uint64_t v129 = sub_A5E8(64LL);
    uint64_t v166 = v129;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v19 = sub_D914(v17);
    v163[14] = sub_D9D8(v19, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v163 + 14, v163 + 15, v18 + 4, v18 + 12);
    sub_DA1C();
    *(_WORD *)(v18 + 12) = 2080;
    unint64_t v21 = sub_D838();
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(v16, v21);
    unint64_t v24 = v23;
    v163[15] = sub_D9D8(v22, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v163 + 15, v3, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease(v24);
    (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v15, v16);
    sub_D9B0(&dword_0, v12, BYTE4(v132), "%s received input: %s", (uint8_t *)v18);
    sub_DA04(v129);
    sub_5050(v129);
    sub_5050(v18);

    uint64_t v25 = *(uint64_t (**)(void))(v135 + 8);
    uint64_t v26 = ((uint64_t (*)(uint64_t, uint64_t))v25)(v141, v138);
  }

  else
  {
    uint64_t v28 = v163[34];
    uint64_t v30 = v163[30];
    uint64_t v29 = v163[31];
    (*(void (**)(void, void))(v163[28] + 8LL))(v163[29], v163[27]);

    uint64_t v25 = *(uint64_t (**)(void))(v29 + 8);
    uint64_t v26 = ((uint64_t (*)(uint64_t, uint64_t))v25)(v28, v30);
  }

  uint64_t v27 = v163;
  uint64_t v32 = v163 + 23;
  uint64_t v31 = v163[23];
  uint64_t v34 = v163 + 22;
  uint64_t v33 = v163[22];
  uint64_t v36 = v163 + 21;
  uint64_t v35 = v163[21];
  Input.parse.getter(v26);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v33 + 88))(v31, v35) == enum case for Parse.uso(_:))
  {
    uint64_t v164 = v25;
    uint64_t v32 = v27 + 26;
    uint64_t v37 = v27[26];
    uint64_t v34 = v27 + 25;
    uint64_t v38 = v27[25];
    uint64_t v36 = v27 + 24;
    uint64_t v39 = v27[23];
    uint64_t v40 = v27[20];
    uint64_t v141 = v27[19];
    (*(void (**)(uint64_t, void))(v27[22] + 96LL))(v39, v27[21]);
    uint64_t v41 = sub_DA14(v37, v39, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 32));
    USOParse.userParse.getter(v41);
    uint64_t v42 = sub_E8C24();
    sub_D970(v40, *(uint64_t (**)(uint64_t, uint64_t))(v141 + 8));
    if (v42)
    {
      uint64_t v43 = swift_retain();
      uint64_t v44 = sub_A0AC8(v43);
      if ((v45 & 1) != 0)
      {
        uint64_t v82 = v149;
        uint64_t v83 = v27[33];
        sub_A5DC(v10, v149 - 64);
        sub_D9C8(v83, v84, v85, v86, v87, v88, v89, v90, v123, v126, v129, v132, v135, v138, v141, v145, v149, v154);
        uint64_t v91 = swift_retain_n(v42, 2LL);
        uint64_t v92 = (os_log_s *)Logger.logObject.getter(v91);
        os_log_type_t v93 = static os_log_type_t.error.getter();
        BOOL v94 = os_log_type_enabled(v92, v93);
        uint64_t v95 = v27[33];
        uint64_t v96 = v27[30];
        uint64_t v98 = v27[25];
        uint64_t v97 = v27[26];
        uint64_t v99 = v27[24];
        if (v94)
        {
          uint64_t v161 = v27[26];
          uint64_t v100 = v82 - 24;
          uint64_t v101 = v27[17];
          uint64_t v157 = v27[25];
          uint64_t v102 = sub_A5E8(22LL);
          uint64_t v152 = v99;
          uint64_t v103 = sub_A5E8(64LL);
          uint64_t v166 = v103;
          *(_DWORD *)uint64_t v102 = 136315394;
          uint64_t v144 = v95;
          uint64_t v104 = sub_D914(v101);
          unint64_t v106 = v105;
          v27[12] = sub_D9D8(v104, v105);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v147, v100, v102 + 4, v102 + 12);
          swift_bridgeObjectRelease(v106);
          *(_WORD *)(v102 + 12) = 2080;
          swift_retain();
          uint64_t v107 = sub_A1D18();
          uint64_t v148 = v96;
          unint64_t v109 = v108;
          swift_release();
          v27[13] = sub_39178(v107, v109, &v166);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v100, v27 + 14, v102 + 14, v102 + 22);
          sub_DA1C();
          sub_D8F0();
          sub_D9B0(&dword_0, v92, v93, "%s did not find a magnitude in %s", (uint8_t *)v102);
          sub_DA04(v103);
          sub_5050(v103);
          sub_5050(v102);

          sub_D8F0();
          sub_DA0C( v144,  v148,  v110,  v111,  v112,  v113,  v114,  v115,  v125,  v128,  v131,  v134,  v137,  v140,  v144,  v148,  v152,  v157,  v161,  v164);
          (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v162, v153);
        }

        else
        {

          swift_release_n(v42, 4LL);
          sub_DA0C( v95,  v96,  v117,  v118,  v119,  v120,  v121,  v122,  v125,  v128,  v131,  v134,  v137,  v140,  v143,  v147,  v151,  v156,  v159,  v164);
          (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v99);
        }

        uint64_t v46 = 0LL;
        uint64_t v48 = 0LL;
        uint64_t v49 = 1LL;
      }

      else
      {
        uint64_t v46 = v44;
        char v47 = sub_A0D74(v42);
        if (v47 == 61)
        {
          sub_D8E0();
          sub_D8F0();
          uint64_t v48 = 0LL;
          uint64_t v49 = 0LL;
        }

        else
        {
          uint64_t v48 = sub_37538(v47);
          uint64_t v49 = v116;
          sub_D8F0();
          sub_D8E0();
        }
      }

      goto LABEL_14;
    }

    uint64_t v25 = v164;
  }

  uint64_t v50 = v149;
  (*(void (**)(void, void))(*v34 + 8LL))(*v32, *v36);
  uint64_t v51 = v27;
  uint64_t v52 = v27[32];
  uint64_t v53 = v51[30];
  sub_A5DC(v10, v149 - 88);
  uint64_t v61 = sub_D9C8(v52, v54, v55, v56, v57, v58, v59, v60, v123, v126, v129, v132, v135, v138, v141, v145, v149, v154);
  uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
  os_log_type_t v63 = static os_log_type_t.error.getter();
  BOOL v64 = sub_A988(v63);
  uint64_t v65 = v51[32];
  uint64_t v66 = v51[30];
  if (v64)
  {
    uint64_t v160 = v50 - 40;
    uint64_t v165 = v25;
    uint64_t v67 = v51[17];
    uint64_t v68 = v51[30];
    char v69 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v70 = sub_A5E8(32LL);
    uint64_t v166 = v70;
    *(_DWORD *)char v69 = 136315138;
    uint64_t v71 = sub_D914(v67);
    v51[11] = sub_D9D8(v71, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v160, v146, v69 + 4, v69 + 12);
    sub_DA1C();
    sub_DA24(&dword_0, v62, (os_log_type_t)v53, "%s received unsupported input", v69);
    uint64_t v49 = 1LL;
    sub_A81C(v70);
    sub_5050(v70);
    sub_5050((uint64_t)v69);

    sub_DA0C( v65,  v68,  v73,  v74,  v75,  v76,  v77,  v78,  v124,  v127,  v130,  v133,  v136,  v139,  v142,  v146,  v150,  v155,  v160,  v165);
    uint64_t v46 = 0LL;
    uint64_t v48 = 0LL;
  }

  else
  {

    ((void (*)(uint64_t, uint64_t))v25)(v65, v66);
    uint64_t v46 = 0LL;
    uint64_t v48 = 0LL;
    uint64_t v49 = 1LL;
  }

  uint64_t v27 = v51;
LABEL_14:
  uint64_t v79 = v27[23];
  uint64_t v80 = v27[20];
  swift_task_dealloc(v27[34]);
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v27[1])(v46, v48, v49);
}

void sub_BF98(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v74 = a2;
  uint64_t v6 = *v2;
  uint64_t v75 = type metadata accessor for Parse(0LL);
  uint64_t v73 = *(void *)(v75 - 8);
  sub_D978();
  __chkstk_darwin(v7);
  sub_AA58();
  uint64_t v71 = v8 - v9;
  __chkstk_darwin(v10);
  sub_D9EC();
  uint64_t v66 = v11;
  uint64_t v12 = sub_D9E0();
  uint64_t v13 = type metadata accessor for Input(v12);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = sub_D91C();
  uint64_t v16 = type metadata accessor for Logger(v15);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_D938();
  uint64_t v19 = __chkstk_darwin(v18);
  unint64_t v21 = (char *)&v61 - v20;
  uint64_t v22 = Logger.wellness.unsafeMutableAddressor(v19);
  sub_A5DC(v22, (uint64_t)v79);
  uint64_t v70 = v17;
  uint64_t v67 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  uint64_t v68 = v22;
  sub_DA34((uint64_t)v21, v22, v67);
  unint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  uint64_t v72 = a1;
  uint64_t v24 = v23(v4, a1, v13);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  int v27 = v26;
  BOOL v28 = os_log_type_enabled(v25, v26);
  uint64_t v65 = v6;
  if (v28)
  {
    uint64_t v29 = sub_A5E8(22LL);
    uint64_t v64 = v3;
    uint64_t v30 = v29;
    uint64_t v63 = sub_A5E8(64LL);
    v78[0] = v63;
    *(_DWORD *)uint64_t v30 = 136315394;
    uint64_t v31 = sub_D914(v6);
    unint64_t v33 = v32;
    uint64_t v77 = sub_39178(v31, v32, v78);
    uint64_t v69 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v30 + 4, v30 + 12);
    uint64_t v34 = swift_bridgeObjectRelease(v33);
    *(_WORD *)(v30 + 12) = 2080;
    int v62 = v27;
    uint64_t v35 = v66;
    Input.parse.getter(v34);
    uint64_t v36 = String.init<A>(describing:)(v35, v75);
    unint64_t v38 = v37;
    uint64_t v77 = sub_39178(v36, v37, v78);
    uint64_t v16 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v30 + 14, v30 + 22);
    swift_bridgeObjectRelease(v38);
    sub_D9A0();
    sub_D9B0(&dword_0, v25, (os_log_type_t)v62, "%s got %s", (uint8_t *)v30);
    uint64_t v39 = v63;
    sub_DA04(v63);
    sub_5050(v39);
    uint64_t v40 = v30;
    uint64_t v3 = v64;
    sub_5050(v40);
  }

  else
  {
    sub_D9A0();
  }

  uint64_t v41 = sub_D98C();
  uint64_t v42 = v71;
  Input.parse.getter(v41);
  uint64_t v43 = v73;
  int v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 88))(v42, v75);
  int v45 = enum case for Parse.uso(_:);
  uint64_t v46 = sub_D970(v42, *(uint64_t (**)(uint64_t, uint64_t))(v43 + 8));
  if (v44 == v45)
  {
    static ActionForInput.handle()(v46);
  }

  else
  {
    uint64_t v47 = v68;
    sub_A5DC(v68, (uint64_t)v78);
    uint64_t v48 = v67(v3, v47, v16);
    uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
    uint64_t v50 = v3;
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v51))
    {
      uint64_t v52 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v53 = sub_A5E8(32LL);
      uint64_t v69 = v16;
      uint64_t v54 = v53;
      uint64_t v77 = v53;
      *(_DWORD *)uint64_t v52 = 136315138;
      uint64_t v55 = sub_D914(v65);
      unint64_t v57 = v56;
      uint64_t v76 = sub_39178(v55, v56, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v52 + 4, v52 + 12);
      swift_bridgeObjectRelease(v57);
      sub_DA24(&dword_0, v49, v51, "%s not handling parse because it's not a uso parse", v52);
      sub_A81C(v54);
      sub_5050(v54);
      sub_5050((uint64_t)v52);

      uint64_t v58 = v50;
      uint64_t v59 = v69;
    }

    else
    {

      uint64_t v58 = v50;
      uint64_t v59 = v16;
    }

    uint64_t v60 = ((uint64_t (*)(uint64_t, uint64_t))v14)(v58, v59);
    static ActionForInput.ignore()(v60);
  }

  sub_D8FC();
}

uint64_t sub_C3A4(uint64_t a1)
{
  v2[15] = a1;
  v2[16] = v1;
  uint64_t v3 = sub_494C(&qword_189EE0);
  v2[17] = sub_A5C0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v2[18] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[19] = v5;
  v2[20] = sub_D8CC(v5);
  v2[21] = sub_A5B8();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[22] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[23] = v7;
  v2[24] = sub_A5C0(v7);
  uint64_t v8 = sub_D984();
  v2[25] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[26] = v9;
  v2[27] = sub_A5C0(v9);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_C440(uint64_t a1)
{
  uint64_t v3 = v1[26];
  uint64_t v2 = (os_log_s *)v1[27];
  uint64_t v4 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v4, (uint64_t)(v1 + 12));
  uint64_t v5 = sub_DA14((uint64_t)v2, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  Logger.logObject.getter(v5);
  os_log_type_t v6 = sub_AB70();
  if (sub_A988(v6))
  {
    uint64_t v7 = (uint8_t *)sub_A5E8(2LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_0, v2, (os_log_type_t)v2, "prompt for value: defaulting to identifier", v7, 2u);
    sub_5050((uint64_t)v7);
  }

  uint64_t v9 = v1[26];
  uint64_t v8 = v1[27];
  uint64_t v10 = v1[16];

  sub_D970(v8, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
  uint64_t v11 = sub_27CC8(*(_BYTE *)(v10 + 16));
  uint64_t v13 = v12;
  v1[28] = v12;
  sub_DA3C(v10 + 104);
  sub_500C(v1 + 2, v1[5]);
  uint64_t v14 = swift_task_alloc(32LL);
  v1[29] = v14;
  *(void *)(v14 + 16) = v11;
  *(void *)(v14 + 24) = v13;
  uint64_t v15 = (void *)swift_task_alloc(dword_18EBFC);
  v1[30] = v15;
  *uint64_t v15 = v1;
  v15[1] = sub_C584;
  return sub_E085C((uint64_t)sub_D830, v14);
}

uint64_t sub_C584(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 240LL);
  v3[31] = a1;
  v3[32] = v1;
  swift_task_dealloc(v4);
  if (!v1)
  {
    uint64_t v5 = v3[29];
    swift_bridgeObjectRelease(v3[28]);
    swift_task_dealloc(v5);
  }

  sub_A964();
  return sub_D954();
}

uint64_t sub_C5F8()
{
  uint64_t v1 = (void *)v0[31];
  uint64_t v3 = v0[20];
  uint64_t v2 = v0[21];
  uint64_t v4 = v0[18];
  uint64_t v5 = v0[19];
  uint64_t v7 = v0[16];
  uint64_t v6 = v0[17];
  uint64_t v8 = _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2);
  static DialogPhase.clarification.getter(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  OutputGenerationManifest.init(dialogPhase:_:)(v3, sub_A633C, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
  OutputGenerationManifest.canUseServerTTS.setter(0LL);
  sub_CF6C(v6);
  uint64_t v9 = type metadata accessor for NLContextUpdate(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v6, 0LL, 1LL, v9);
  OutputGenerationManifest.nlContextUpdate.setter(v6);
  static String._unconditionallyBridgeFromObjectiveC(_:)([v1 patternId]);
  sub_DA44();
  sub_D9F8();
  sub_DA3C(v7 + 184);
  uint64_t v10 = v0[10];
  uint64_t v11 = v0[11];
  sub_500C(v0 + 7, v10);
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  v0[33] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_C75C;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)( v0[15],  v0[31],  v0[24],  v10,  v11);
}

uint64_t sub_C75C()
{
  uint64_t v3 = *(void *)(v2 + 264);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 272) = v0;
  swift_task_dealloc(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_C7AC()
{
  return sub_D8B0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_C800()
{
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 136);

  sub_D970(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 56));
  sub_A67C();
  sub_A7C8();
  sub_A8EC();
  sub_A910();
  swift_task_dealloc(v3);
  return sub_D8C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_C88C()
{
  sub_D9B8();
  sub_AA20();
  sub_D95C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  return sub_D8B0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_C8E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_494C(&qword_189D00);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a3)
  {
    String.toSpeakableString.getter(a2, a3);
    uint64_t v9 = type metadata accessor for SpeakableString(0LL);
    uint64_t v10 = 0LL;
  }

  else
  {
    uint64_t v9 = type metadata accessor for SpeakableString(0LL);
    uint64_t v10 = 1LL;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v8, v10, 1LL, v9);
  return sub_A384((uint64_t)v8, a1);
}

uint64_t sub_C9A0(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  v3[15] = *v2;
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v3[16] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[17] = v5;
  v3[18] = sub_D8CC(v5);
  v3[19] = sub_A5B8();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[20] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[21] = v7;
  v3[22] = sub_A5C0(v7);
  uint64_t v8 = sub_D984();
  v3[23] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[24] = v9;
  v3[25] = sub_A5C0(v9);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_CA30(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (uint64_t)(v1 + 7);
  uint64_t v6 = v1 + 24;
  uint64_t v5 = v1[24];
  uint64_t v4 = (os_log_s *)v6[1];
  uint64_t v7 = v2[13];
  uint64_t v8 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v8, v3);
  sub_DA14((uint64_t)v4, v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  swift_errorRetain(v7);
  uint64_t v9 = swift_errorRetain(v7);
  uint64_t v10 = v4;
  Logger.logObject.getter(v9);
  os_log_type_t v11 = sub_AB70();
  if (os_log_type_enabled(v4, v11))
  {
    uint64_t v27 = v2[24];
    uint64_t v28 = v2[23];
    uint64_t v29 = v2[25];
    uint64_t v12 = v2[15];
    uint64_t v13 = v2[13];
    uint64_t v14 = sub_A5E8(22LL);
    uint64_t v15 = (void *)sub_A5E8(8LL);
    uint64_t v26 = sub_A5E8(32LL);
    uint64_t v30 = v26;
    *(_DWORD *)uint64_t v14 = 136315394;
    uint64_t v16 = sub_D914(v12);
    unint64_t v18 = v17;
    v2[10] = sub_39178(v16, v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 10, v2 + 11, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v14 + 12) = 2112;
    swift_errorRetain(v13);
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError(v13);
    v2[11] = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 11, v2 + 12, v14 + 14, v14 + 22);
    *uint64_t v15 = v19;
    swift_errorRelease(v13);
    swift_errorRelease(v13);
    sub_D9B0(&dword_0, v10, v11, "%s makeErrorResponse called with error: %@", (uint8_t *)v14);
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v15);
    sub_5050((uint64_t)v15);
    sub_A81C(v26);
    sub_5050(v26);
    sub_5050(v14);

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v28);
  }

  else
  {
    uint64_t v21 = v2[24];
    uint64_t v20 = v2[25];
    uint64_t v22 = v2[23];
    uint64_t v23 = v2[13];
    swift_errorRelease(v23);
    swift_errorRelease(v23);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }

  sub_500C((void *)(v2[14] + 64LL), *(void *)(v2[14] + 88LL));
  uint64_t v24 = (void *)swift_task_alloc(dword_18CCDC);
  v2[26] = v24;
  *uint64_t v24 = v2;
  v24[1] = sub_CC90;
  return sub_764C8();
}

uint64_t sub_CC90(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 208);
  uint64_t v4 = *v2;
  *(void *)(v4 + 216) = a1;
  swift_task_dealloc(v3);
  if (v1)
  {
    swift_task_dealloc(*(void *)(v4 + 200));
    sub_A67C();
    sub_A7C8();
    sub_A760();
    return sub_D8C4(*(uint64_t (**)(void))(v4 + 8));
  }

  else
  {
    sub_A964();
    return sub_D954();
  }

uint64_t sub_CD20()
{
  uint64_t v1 = (void *)v0[27];
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[14];
  static DialogPhase.error.getter();
  sub_DA2C(v3, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  OutputGenerationManifest.init(dialogPhase:_:)(v3, sub_A633C, 0LL);
  sub_D8E0();
  OutputGenerationManifest.canUseServerTTS.setter(0LL);
  static String._unconditionallyBridgeFromObjectiveC(_:)([v1 patternId]);
  sub_DA44();
  sub_D9F8();
  sub_DA3C(v5 + 184);
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  sub_500C(v0 + 2, v6);
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  v0[28] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_CE30;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)( v0[12],  v0[27],  v0[22],  v6,  v7);
}

uint64_t sub_CE30()
{
  uint64_t v3 = *(void *)(v2 + 224);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 232) = v0;
  swift_task_dealloc(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_CE80()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);

  sub_D970(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 16));
  sub_A67C();
  sub_A7C8();
  sub_A8EC();
  sub_A910();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_CF04()
{
  sub_D9B8();
  sub_AA20();
  swift_task_dealloc(*(void *)(v0 + 200));
  sub_A67C();
  sub_A7C8();
  sub_A760();
  return sub_D8C4(*(uint64_t (**)(void))(v0 + 8));
}

void sub_CF6C(uint64_t a1@<X8>)
{
  uint64_t v81 = a1;
  uint64_t v3 = sub_D984();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_AA58();
  uint64_t v7 = v5 - v6;
  __chkstk_darwin(v8);
  sub_D9EC();
  uint64_t v80 = v9;
  uint64_t v10 = sub_D9E0();
  uint64_t v11 = type metadata accessor for NLContextUpdate(v10);
  uint64_t v70 = *(void *)(v11 - 8);
  uint64_t v71 = v11;
  sub_D978();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v79 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL);
  uint64_t v77 = *(void *)(v79 - 8);
  sub_D978();
  __chkstk_darwin(v15);
  uint64_t v76 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_D9E0();
  uint64_t v78 = type metadata accessor for Siri_Nlu_External_SystemPrompted(v17);
  uint64_t v75 = *(void *)(v78 - 8);
  sub_D978();
  __chkstk_darwin(v18);
  sub_D938();
  __chkstk_darwin(v19);
  sub_D9EC();
  uint64_t v74 = v20;
  sub_494C(&qword_189ED0);
  sub_D978();
  __chkstk_darwin(v21);
  uint64_t v22 = sub_D91C();
  uint64_t v23 = type metadata accessor for Siri_Nlu_External_UsoGraph(v22);
  uint64_t v73 = *(void *)(v23 - 8);
  sub_D978();
  __chkstk_darwin(v24);
  sub_AA58();
  uint64_t v27 = v25 - v26;
  __chkstk_darwin(v28);
  sub_D9EC();
  uint64_t v72 = v29;
  uint64_t v30 = sub_D9E0();
  type metadata accessor for UsoTask(v30);
  uint64_t v31 = static UsoTask.createHealthLog(_:measurementNeeded:)(0LL, 0LL, 1LL);
  UsoTaskBuilder.toProtobufUsoGraph()();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v2, 1LL, v23) == 1)
  {
    uint64_t v32 = sub_D7AC(v2);
    uint64_t v33 = Logger.health.unsafeMutableAddressor(v32);
    sub_A5DC(v33, (uint64_t)v84);
    uint64_t v34 = sub_DA2C(v7, v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      unint64_t v37 = (uint8_t *)sub_A5E8(2LL);
      *(_WORD *)unint64_t v37 = 0;
      _os_log_impl(&dword_0, v35, v36, "Failed to create protobuf UsoGraph from UsoTask", v37, 2u);
      sub_5050((uint64_t)v37);
    }

    uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
    NLContextUpdate.init()(v38);
    swift_release();
  }

  else
  {
    uint64_t v39 = v73;
    uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 32);
    uint64_t v69 = v3;
    uint64_t v41 = v31;
    uint64_t v42 = v72;
    uint64_t v43 = sub_DA34(v72, v2, v40);
    uint64_t v44 = v74;
    Siri_Nlu_External_SystemPrompted.init()(v43);
    uint64_t v45 = v42;
    uint64_t v46 = v41;
    sub_DA34(v27, v45, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 16));
    uint64_t v47 = Siri_Nlu_External_SystemPrompted.target.setter(v27);
    uint64_t v48 = v76;
    Siri_Nlu_External_SystemDialogAct.init()(v47);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 16))(v1, v44, v78);
    uint64_t v49 = Siri_Nlu_External_SystemDialogAct.prompted.setter(v1);
    NLContextUpdate.init()(v49);
    uint64_t v50 = sub_494C(&qword_189ED8);
    uint64_t v51 = v77;
    uint64_t v52 = *(unsigned __int8 *)(v77 + 80);
    uint64_t v53 = (v52 + 32) & ~v52;
    uint64_t v54 = swift_allocObject(v50, v53 + *(void *)(v77 + 72), v52 | 7);
    *(_OWORD *)(v54 + 16) = xmmword_137250;
    (*(void (**)(uint64_t, char *, uint64_t))(v51 + 16))(v54 + v53, v48, v79);
    uint64_t v55 = NLContextUpdate.nluSystemDialogActs.setter(v54);
    uint64_t v56 = Logger.health.unsafeMutableAddressor(v55);
    sub_A5DC(v56, (uint64_t)v84);
    unint64_t v57 = v80;
    uint64_t v58 = v69;
    (*(void (**)(os_log_s *, uint64_t, uint64_t))(v4 + 16))(v80, v56, v69);
    uint64_t v59 = swift_retain_n(v41, 2LL);
    uint64_t v60 = v57;
    Logger.logObject.getter(v59);
    os_log_type_t v61 = sub_AB70();
    if (os_log_type_enabled(v57, v61))
    {
      int v62 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v63 = sub_A5E8(32LL);
      uint64_t v82 = v41;
      uint64_t v83 = v63;
      *(_DWORD *)int v62 = 136315138;
      uint64_t v68 = v62 + 4;
      uint64_t common_HealthLog = type metadata accessor for UsoTaskBuilder_create_common_HealthLog(0LL);
      swift_retain();
      uint64_t v65 = String.init<A>(describing:)(&v82, common_HealthLog);
      unint64_t v67 = v66;
      uint64_t v82 = sub_39178(v65, v66, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v68, v62 + 12);
      swift_release_n(v46, 2LL);
      swift_bridgeObjectRelease(v67);
      sub_DA24(&dword_0, v60, v61, "Built nlContextUpdate with SystemPrompted for task: %s", v62);
      sub_A81C(v63);
      sub_5050(v63);
      sub_5050((uint64_t)v62);
      swift_release();

      (*(void (**)(os_log_s *, uint64_t))(v4 + 8))(v80, v69);
    }

    else
    {
      swift_release_n(v41, 3LL);

      (*(void (**)(os_log_s *, uint64_t))(v4 + 8))(v80, v58);
    }

    (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v79);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v74, v78);
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v23);
    (*(void (**)(uint64_t, char *, uint64_t))(v70 + 32))(v81, v14, v71);
  }

  sub_D8FC();
}

uint64_t sub_D478()
{
  return swift_deallocClassInstance(v0, 224LL, 7LL);
}

uint64_t type metadata accessor for LogQuantityPromptStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18WellnessFlowPlugin25LogQuantityPromptStrategy);
}

uint64_t sub_D4C8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc(dword_189D94);
  *(void *)(v2 + 24) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_D518;
  return sub_B7F8(a2);
}

uint64_t sub_D518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v4;
  uint64_t v9 = *(void *)(*v4 + 24);
  uint64_t v10 = *v4;
  swift_task_dealloc(v9);
  if (!v3)
  {
    uint64_t v11 = *(void **)(v8 + 16);
    *uint64_t v11 = a1;
    v11[1] = a2;
    v11[2] = a3;
  }

  return sub_D8B0(*(uint64_t (**)(void))(v10 + 8));
}

uint64_t sub_D578(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_189D9C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_D8AC;
  return sub_C3A4(a1);
}

uint64_t sub_D5C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse()[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_D8AC;
  return PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse()(a1, a2, a3);
}

uint64_t sub_D634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence()[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_D8AC;
  return PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence()(a1, a2, a3);
}

uint64_t sub_D6A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to PromptForValueFlowStrategyAsync.makeFlowCancelledResponse()[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_D70C;
  return PromptForValueFlowStrategyAsync.makeFlowCancelledResponse()(a1, a2, a3);
}

uint64_t sub_D70C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(v1 + 16));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_D74C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_189DA4);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_D8AC;
  return sub_C9A0(a1, a2);
}

uint64_t sub_D7AC(uint64_t a1)
{
  uint64_t v2 = sub_494C(&qword_189ED0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_D7EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_D830(uint64_t a1)
{
  return sub_C8E8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_D838()
{
  unint64_t result = qword_189EE8;
  if (!qword_189EE8)
  {
    uint64_t v1 = type metadata accessor for Input(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Input, v1);
    atomic_store(result, (unint64_t *)&qword_189EE8);
  }

  return result;
}

void *sub_D878(void *a1)
{
  return a1;
}

uint64_t sub_D8B0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_D8C4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_D8CC@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_D8E0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_D8F0()
{
  return swift_release_n(v0, 2LL);
}

  ;
}

uint64_t sub_D914(uint64_t a1)
{
  return _typeName(_:qualified:)(a1, 0LL);
}

uint64_t sub_D91C()
{
  return 0LL;
}

  ;
}

uint64_t sub_D954()
{
  return swift_task_switch();
}

uint64_t sub_D95C()
{
  return swift_task_dealloc(*(void *)(v0 + 216));
}

uint64_t sub_D970@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

  ;
}

uint64_t sub_D984()
{
  return type metadata accessor for Logger(0LL);
}

uint64_t sub_D98C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 200) + 8LL))(v1, v0);
}

uint64_t sub_D9A0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_D9B0(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_D9B8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_D9C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t (*a18)(uint64_t, uint64_t, uint64_t))
{
  return a18(a1, v19, v18);
}

uint64_t sub_D9D8(uint64_t a1, unint64_t a2)
{
  return sub_39178(a1, a2, (uint64_t *)(v2 - 80));
}

uint64_t sub_D9E0()
{
  return 0LL;
}

  ;
}

uint64_t sub_D9F8()
{
  return OutputGenerationManifest.responseViewId.setter(v0, v1);
}

uint64_t sub_DA04(uint64_t a1)
{
  return swift_arrayDestroy(a1, 2LL);
}

uint64_t sub_DA0C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t (*a20)(void))
{
  return a20();
}

uint64_t sub_DA14@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_DA1C()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_DA24(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_DA2C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_DA34@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_DA3C(uint64_t a1)
{
  return sub_D7EC(a1, v1);
}

void sub_DA44()
{
}

void *WellnessSnippets.bundleName.unsafeMutableAddressor()
{
  return &static WellnessSnippets.bundleName;
}

unint64_t static WellnessSnippets.bundleName.getter()
{
  return 0xD000000000000010LL;
}

void sub_DA7C()
{
}

uint64_t sub_DA9C(uint64_t a1)
{
  unint64_t v2 = sub_FEC4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_DAC4(uint64_t a1)
{
  unint64_t v2 = sub_FEC4();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_DAEC(char a1, char a2)
{
  return a1 == a2;
}

void sub_DAFC(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_DB20(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v4 = 0x80000000001411F0LL;
    if (a2 == 0x80000000001411F0LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x80000000001411F0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0xD000000000000016LL)
  {
    unint64_t v6 = 0x8000000000141210LL;
    if (a2 == 0x8000000000141210LL) {
      goto LABEL_10;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x8000000000141210LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
LABEL_10:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v7 = 0x8000000000141230LL;
    if (a2 == 0x8000000000141230LL) {
      goto LABEL_15;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x8000000000141230LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_15:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v8 = 0x8000000000141250LL;
    if (a2 == 0x8000000000141250LL) {
      goto LABEL_20;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x8000000000141250LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  BOOL v9 = a1 == 0x42636972656E6567LL && a2 == 0xED00006E6F747475LL;
  if (v9
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x42636972656E6567LL, 0xED00006E6F747475LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 4LL;
  }

  if (a1 == 0xD000000000000013LL && a2 == 0x8000000000141270LL)
  {
    unint64_t v10 = 0x8000000000141270LL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x8000000000141270LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_32;
  }

  if (a1 == 0xD000000000000016LL)
  {
    unint64_t v11 = 0x8000000000141290LL;
    if (a2 == 0x8000000000141290LL) {
      goto LABEL_37;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x8000000000141290LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 6LL;
  }

  if (a1 == 0xD000000000000012LL && a2 == 0x80000000001412B0LL)
  {
    unint64_t v12 = 0x80000000001412B0LL;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x80000000001412B0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_43;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x80000000001412D0LL)
  {
    unint64_t v13 = 0x80000000001412D0LL;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000000001412D0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_49;
  }

  BOOL v14 = a1 == 0x6144746867696568LL && a2 == 0xEF79726575516174LL;
  if (v14
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6144746867696568LL, 0xEF79726575516174LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 9LL;
  }

  BOOL v15 = a1 == 0x6E6952656E6F6870LL && a2 == 0xEA00000000007367LL;
  if (v15
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6952656E6F6870LL, 0xEA00000000007367LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 10LL;
  }

  if (a1 == 0xD00000000000001ALL && a2 == 0x80000000001412F0LL)
  {
    unint64_t v16 = 0x80000000001412F0LL;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 11LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000000001412F0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
    goto LABEL_67;
  }

  BOOL v17 = a1 == 0x6575517065656C73LL && a2 == 0xEA00000000007972LL;
  if (v17
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6575517065656C73LL, 0xEA00000000007972LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 12LL;
  }

  if (a1 == 0xD000000000000017LL && a2 == 0x8000000000141310LL)
  {
    unint64_t v18 = 0x8000000000141310LL;
LABEL_79:
    swift_bridgeObjectRelease(v18);
    return 13LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x8000000000141310LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v18 = a2;
    goto LABEL_79;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v19 = 0x8000000000141330LL;
    if (a2 == 0x8000000000141330LL) {
      goto LABEL_84;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x8000000000141330LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v19 = a2;
LABEL_84:
    swift_bridgeObjectRelease(v19);
    return 14LL;
  }

  if (a1 == 0x6E69526863746177LL && a2 == 0xEA00000000007367LL)
  {
    swift_bridgeObjectRelease(a2);
    return 15LL;
  }

  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E69526863746177LL, 0xEA00000000007367LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v21 & 1) != 0) {
      return 15LL;
    }
    else {
      return 16LL;
    }
  }

uint64_t sub_E0FC()
{
  return 16LL;
}

Swift::Int sub_E104(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t sub_E148(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_E180 + 4 * byte_1373D0[a1]))( 0xD000000000000014LL,  0x80000000001411F0LL);
}

uint64_t sub_E180(uint64_t a1)
{
  return a1 + 2;
}

void sub_E2B0()
{
}

uint64_t sub_E2D4()
{
  return 12383LL;
}

uint64_t sub_E2E0(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000LL)
  {
    swift_bridgeObjectRelease(a2);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(12383LL, 0xE200000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

void sub_E34C()
{
}

uint64_t sub_E37C(uint64_t a1)
{
  unint64_t v2 = sub_FE4C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E3A4(uint64_t a1)
{
  unint64_t v2 = sub_FE4C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_E3CC(uint64_t a1)
{
  unint64_t v2 = sub_FE88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E3F4(uint64_t a1)
{
  unint64_t v2 = sub_FE88();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_E41C(char *a1, char *a2)
{
  return sub_DAEC(*a1, *a2);
}

Swift::Int sub_E428()
{
  return sub_E104(*v0);
}

void sub_E430(uint64_t a1)
{
}

Swift::Int sub_E438(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_E478()
{
  return sub_E148(*v0);
}

uint64_t sub_E480@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_DB20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_E4A4()
{
  return _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV6dosageSdSgvpfi_0();
}

uint64_t sub_E4C0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_E0FC();
  *a1 = result;
  return result;
}

uint64_t sub_E4E4(uint64_t a1)
{
  unint64_t v2 = sub_F964();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E50C(uint64_t a1)
{
  unint64_t v2 = sub_F964();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_E534(uint64_t a1)
{
  unint64_t v2 = sub_FE10();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E55C(uint64_t a1)
{
  unint64_t v2 = sub_FE10();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_E584(uint64_t a1)
{
  unint64_t v2 = sub_FD5C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E5AC(uint64_t a1)
{
  unint64_t v2 = sub_FD5C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_E5D4(uint64_t a1)
{
  unint64_t v2 = sub_FDD4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E5FC(uint64_t a1)
{
  unint64_t v2 = sub_FDD4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_E624(uint64_t a1)
{
  unint64_t v2 = sub_FCA8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E64C(uint64_t a1)
{
  unint64_t v2 = sub_FCA8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_E674(uint64_t a1)
{
  unint64_t v2 = sub_FCE4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E69C(uint64_t a1)
{
  unint64_t v2 = sub_FCE4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_E6C4(uint64_t a1)
{
  unint64_t v2 = sub_FD20();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E6EC(uint64_t a1)
{
  unint64_t v2 = sub_FD20();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_E714(uint64_t a1)
{
  unint64_t v2 = sub_FC6C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E73C(uint64_t a1)
{
  unint64_t v2 = sub_FC6C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_E764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_E2E0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_E78C()
{
  return _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV6dosageSdSgvpfi_0();
}

uint64_t sub_E7A4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = LogPeriodFlow.on(input:)();
  *a1 = result & 1;
  return result;
}

uint64_t sub_E7CC(uint64_t a1)
{
  unint64_t v2 = sub_FB4C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E7F4(uint64_t a1)
{
  unint64_t v2 = sub_FB4C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_E81C(uint64_t a1)
{
  unint64_t v2 = sub_FB10();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E844(uint64_t a1)
{
  unint64_t v2 = sub_FB10();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_E86C(uint64_t a1)
{
  unint64_t v2 = sub_FAD4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E894(uint64_t a1)
{
  unint64_t v2 = sub_FAD4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_E8BC(uint64_t a1)
{
  unint64_t v2 = sub_FA98();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E8E4(uint64_t a1)
{
  unint64_t v2 = sub_FA98();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_E90C(uint64_t a1)
{
  unint64_t v2 = sub_FA5C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E934(uint64_t a1)
{
  unint64_t v2 = sub_FA5C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_E95C(uint64_t a1)
{
}

uint64_t sub_E988(uint64_t a1)
{
  unint64_t v2 = sub_F9E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E9B0(uint64_t a1)
{
  unint64_t v2 = sub_F9E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void WellnessSnippets.encode(to:)(uint64_t a1)
{
  uint64_t v4 = sub_D9E0();
  type metadata accessor for TemperatureQueryModel(v4);
  sub_D978();
  __chkstk_darwin(v5);
  sub_6D30();
  sub_494C(&qword_189F00);
  sub_D978();
  __chkstk_darwin(v6);
  sub_6D30();
  uint64_t v7 = sub_D9E0();
  type metadata accessor for SpecificMedCompletedLogModel(v7);
  sub_D978();
  __chkstk_darwin(v8);
  sub_6D30();
  sub_494C(&qword_189F08);
  sub_D978();
  __chkstk_darwin(v9);
  sub_6D30();
  uint64_t v10 = sub_D9E0();
  type metadata accessor for SleepQueryModel(v10);
  sub_D978();
  __chkstk_darwin(v11);
  sub_6D30();
  sub_494C(&qword_189F10);
  sub_D978();
  __chkstk_darwin(v12);
  sub_6D30();
  uint64_t v13 = sub_D9E0();
  type metadata accessor for SingleActivitySummaryModel(v13);
  sub_D978();
  __chkstk_darwin(v14);
  sub_6D30();
  sub_494C(&qword_189F18);
  sub_D978();
  __chkstk_darwin(v15);
  sub_6D30();
  sub_494C(&qword_189F20);
  sub_D978();
  __chkstk_darwin(v16);
  sub_6D30();
  uint64_t v17 = sub_D9E0();
  type metadata accessor for HeightQueryModel(v17);
  sub_D978();
  __chkstk_darwin(v18);
  sub_6D30();
  sub_494C(&qword_189F28);
  sub_D978();
  __chkstk_darwin(v19);
  sub_6D30();
  uint64_t v20 = sub_D9E0();
  type metadata accessor for GenericQueryModel(v20);
  sub_D978();
  __chkstk_darwin(v21);
  sub_6D30();
  sub_494C(&qword_189F30);
  sub_D978();
  __chkstk_darwin(v22);
  sub_6D30();
  uint64_t v23 = sub_D9E0();
  type metadata accessor for HealthDataLogModel(v23);
  sub_D978();
  __chkstk_darwin(v24);
  sub_6D30();
  sub_494C(&qword_189F38);
  sub_D978();
  __chkstk_darwin(v25);
  sub_6D30();
  uint64_t v26 = sub_D9E0();
  type metadata accessor for GenericMedCompletedLogModel(v26);
  sub_D978();
  __chkstk_darwin(v27);
  sub_6D30();
  sub_494C(&qword_189F40);
  sub_D978();
  __chkstk_darwin(v28);
  sub_6D30();
  sub_494C(&qword_189F48);
  sub_D978();
  __chkstk_darwin(v29);
  sub_6D30();
  uint64_t v30 = sub_D9E0();
  type metadata accessor for GenericButtonModel(v30);
  sub_D978();
  __chkstk_darwin(v31);
  sub_6D30();
  sub_494C(&qword_189F50);
  sub_D978();
  __chkstk_darwin(v32);
  sub_6D30();
  uint64_t v33 = sub_D9E0();
  type metadata accessor for CycleTrackingLogModel(v33);
  sub_D978();
  __chkstk_darwin(v34);
  sub_6D30();
  sub_494C(&qword_189F58);
  sub_D978();
  __chkstk_darwin(v35);
  sub_6D30();
  uint64_t v36 = sub_D9E0();
  type metadata accessor for BloodPressureLogModel(v36);
  sub_D978();
  __chkstk_darwin(v37);
  sub_6D30();
  sub_494C(&qword_189F60);
  sub_D978();
  __chkstk_darwin(v38);
  sub_6D30();
  uint64_t v39 = sub_D9E0();
  type metadata accessor for BloodPressureQueryModel(v39);
  sub_D978();
  __chkstk_darwin(v40);
  sub_6D30();
  sub_494C(&qword_189F68);
  sub_D978();
  __chkstk_darwin(v41);
  sub_6D30();
  uint64_t v42 = sub_D9E0();
  type metadata accessor for OxygenSaturationQueryModel(v42);
  sub_D978();
  __chkstk_darwin(v43);
  sub_6D44();
  uint64_t v44 = type metadata accessor for WellnessSnippets(0LL);
  sub_D978();
  __chkstk_darwin(v45);
  sub_6D44();
  uint64_t v48 = v47 - v46;
  sub_494C(&qword_189F70);
  sub_D978();
  __chkstk_darwin(v49);
  sub_6D44();
  uint64_t v51 = *(void *)(a1 + 24);
  uint64_t v50 = *(void *)(a1 + 32);
  unint64_t v52 = sub_1C700();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for WellnessSnippets.CodingKeys,  &type metadata for WellnessSnippets.CodingKeys,  v52,  v51,  v50);
  sub_F9A0(v54, v48);
  uint64_t v53 = (char *)sub_F000 + 4 * word_1373E0[swift_getEnumCaseMultiPayload(v48, v44)];
  __asm { BR              X10 }

void sub_F000()
{
  *(_BYTE *)(v0 + 864) = 0;
  sub_FEC4();
  uint64_t v4 = *(void *)(v0 + 8);
  sub_1C57C((uint64_t)&type metadata for WellnessSnippets.BloodOxygenDataQueryCodingKeys, v0 + 864);
  sub_1C6A4(&qword_18A078, v5, (uint64_t)&protocol conformance descriptor for OxygenSaturationQueryModel);
  uint64_t v6 = *(void *)(v0 + 24);
  sub_1C678();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 16) + 8LL))(v4, v6);
  sub_182B4(v3, type metadata accessor for OxygenSaturationQueryModel);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 584) + 8LL))(v2, v1);
  sub_1C6D8();
}

void sub_F80C()
{
  *(void *)(v0 + 608) = *(void *)v1;
  char v3 = *(_BYTE *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  char v5 = *(_BYTE *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  char v7 = *(_BYTE *)(v1 + 40);
  *(void *)(v0 + 552) = *(void *)(v1 + 48);
  *(_DWORD *)(v0 + 544) = *(unsigned __int8 *)(v1 + 56);
  *(void *)(v0 + 536) = *(void *)(v1 + 64);
  *(_DWORD *)(v0 + 528) = *(unsigned __int8 *)(v1 + 72);
  *(void *)(v0 + 520) = *(void *)(v1 + 80);
  *(_DWORD *)(v0 + 512) = *(unsigned __int8 *)(v1 + 88);
  *(_BYTE *)(v0 + 864) = 15;
  sub_F9E4();
  uint64_t v8 = *(void *)(v0 + 560);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for WellnessSnippets.WatchRingsCodingKeys,  v0 + 864,  *(void *)(v2 - 72),  &type metadata for WellnessSnippets.WatchRingsCodingKeys);
  *(void *)(v0 + 864) = *(void *)(v0 + 608);
  *(_BYTE *)(v0 + 872) = v3;
  *(void *)(v0 + 880) = v4;
  *(_BYTE *)(v0 + 888) = v5;
  *(void *)(v0 + 896) = v6;
  *(_BYTE *)(v0 + 904) = v7;
  *(void *)(v0 + 912) = *(void *)(v0 + 552);
  *(_BYTE *)(v0 + 920) = *(_DWORD *)(v0 + 544);
  *(void *)(v0 + 928) = *(void *)(v0 + 536);
  *(_BYTE *)(v0 + 936) = *(_DWORD *)(v0 + 528);
  *(void *)(v0 + 944) = *(void *)(v0 + 520);
  *(_BYTE *)(v0 + 952) = *(_DWORD *)(v0 + 512);
  sub_FA20();
  uint64_t v9 = *(void *)(v0 + 576);
  sub_1C678();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 568) + 8LL))(v8, v9);
  JUMPOUT(0xF7F8LL);
}

uint64_t type metadata accessor for WellnessSnippets(uint64_t a1)
{
  uint64_t result = qword_18A220;
  if (!qword_18A220) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WellnessSnippets);
  }
  return result;
}

unint64_t sub_F964()
{
  unint64_t result = qword_189F78;
  if (!qword_189F78)
  {
    unint64_t result = swift_getWitnessTable(&unk_138960, &type metadata for WellnessSnippets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_189F78);
  }

  return result;
}

uint64_t sub_F9A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WellnessSnippets(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_F9E4()
{
  unint64_t result = qword_189F80;
  if (!qword_189F80)
  {
    unint64_t result = swift_getWitnessTable(&unk_138910, &type metadata for WellnessSnippets.WatchRingsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_189F80);
  }

  return result;
}

unint64_t sub_FA20()
{
  unint64_t result = qword_189F88;
  if (!qword_189F88)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WatchRingsModel,  &type metadata for WatchRingsModel);
    atomic_store(result, (unint64_t *)&qword_189F88);
  }

  return result;
}

unint64_t sub_FA5C()
{
  unint64_t result = qword_189F90;
  if (!qword_189F90)
  {
    unint64_t result = swift_getWitnessTable(&unk_1388C0, &type metadata for WellnessSnippets.TemperatureDataQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_189F90);
  }

  return result;
}

unint64_t sub_FA98()
{
  unint64_t result = qword_189FA0;
  if (!qword_189FA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_138870, &type metadata for WellnessSnippets.SpecificMedCompletedLogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_189FA0);
  }

  return result;
}

unint64_t sub_FAD4()
{
  unint64_t result = qword_189FB0;
  if (!qword_189FB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_138820, &type metadata for WellnessSnippets.SleepQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_189FB0);
  }

  return result;
}

unint64_t sub_FB10()
{
  unint64_t result = qword_189FC0;
  if (!qword_189FC0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1387D0,  &type metadata for WellnessSnippets.SingleActivitySummaryQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_189FC0);
  }

  return result;
}

unint64_t sub_FB4C()
{
  unint64_t result = qword_189FD0;
  if (!qword_189FD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_138780, &type metadata for WellnessSnippets.PhoneRingsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_189FD0);
  }

  return result;
}

unint64_t sub_FB88()
{
  unint64_t result = qword_189FD8;
  if (!qword_189FD8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneRingsModel,  &type metadata for PhoneRingsModel);
    atomic_store(result, (unint64_t *)&qword_189FD8);
  }

  return result;
}

void *sub_FBC4(void *a1)
{
  uint64_t v2 = a1[15];
  uint64_t v3 = a1[17];
  uint64_t v4 = a1[19];
  uint64_t v5 = a1[21];
  uint64_t v6 = a1[23];
  uint64_t v7 = a1[25];
  uint64_t v8 = a1[27];
  uint64_t v9 = a1[29];
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

unint64_t sub_FC6C()
{
  unint64_t result = qword_189FE0;
  if (!qword_189FE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_138730, &type metadata for WellnessSnippets.HeightDataQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_189FE0);
  }

  return result;
}

unint64_t sub_FCA8()
{
  unint64_t result = qword_189FF0;
  if (!qword_189FF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1386E0, &type metadata for WellnessSnippets.GenericDataQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_189FF0);
  }

  return result;
}

unint64_t sub_FCE4()
{
  unint64_t result = qword_18A000;
  if (!qword_18A000)
  {
    unint64_t result = swift_getWitnessTable(&unk_138690, &type metadata for WellnessSnippets.GenericDataTypeLogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A000);
  }

  return result;
}

unint64_t sub_FD20()
{
  unint64_t result = qword_18A010;
  if (!qword_18A010)
  {
    unint64_t result = swift_getWitnessTable(&unk_138640, &type metadata for WellnessSnippets.GenericMedCompletedLogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A010);
  }

  return result;
}

unint64_t sub_FD5C()
{
  unint64_t result = qword_18A020;
  if (!qword_18A020)
  {
    unint64_t result = swift_getWitnessTable(&unk_1385F0, &type metadata for WellnessSnippets.GenericBinaryButtonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A020);
  }

  return result;
}

unint64_t sub_FD98()
{
  unint64_t result = qword_18A028;
  if (!qword_18A028)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GenericBinaryButtonModel,  &type metadata for GenericBinaryButtonModel);
    atomic_store(result, (unint64_t *)&qword_18A028);
  }

  return result;
}

unint64_t sub_FDD4()
{
  unint64_t result = qword_18A030;
  if (!qword_18A030)
  {
    unint64_t result = swift_getWitnessTable(&unk_1385A0, &type metadata for WellnessSnippets.GenericButtonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A030);
  }

  return result;
}

unint64_t sub_FE10()
{
  unint64_t result = qword_18A040;
  if (!qword_18A040)
  {
    unint64_t result = swift_getWitnessTable(&unk_138550, &type metadata for WellnessSnippets.CycleTrackingDataLogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A040);
  }

  return result;
}

unint64_t sub_FE4C()
{
  unint64_t result = qword_18A050;
  if (!qword_18A050)
  {
    unint64_t result = swift_getWitnessTable(&unk_138500, &type metadata for WellnessSnippets.BloodPressureDataLogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A050);
  }

  return result;
}

unint64_t sub_FE88()
{
  unint64_t result = qword_18A060;
  if (!qword_18A060)
  {
    unint64_t result = swift_getWitnessTable(&unk_1384B0, &type metadata for WellnessSnippets.BloodPressureDataQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A060);
  }

  return result;
}

unint64_t sub_FEC4()
{
  unint64_t result = qword_18A070;
  if (!qword_18A070)
  {
    unint64_t result = swift_getWitnessTable(&unk_138460, &type metadata for WellnessSnippets.BloodOxygenDataQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A070);
  }

  return result;
}

void WellnessSnippets.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v125 = a2;
  uint64_t v3 = sub_494C(&qword_18A080);
  sub_1C66C(v3, (uint64_t)v139);
  uint64_t v124 = v4;
  sub_D978();
  __chkstk_darwin(v5);
  sub_6D30();
  sub_1C680(v6);
  uint64_t v7 = sub_494C(&qword_18A088);
  sub_1C66C(v7, (uint64_t)v138);
  v123[63] = v8;
  sub_D978();
  __chkstk_darwin(v9);
  sub_6D30();
  sub_1C680(v10);
  uint64_t v11 = sub_494C(&qword_18A090);
  sub_1C66C(v11, (uint64_t)v137);
  v123[23] = v12;
  sub_D978();
  __chkstk_darwin(v13);
  sub_6D30();
  sub_1C680(v14);
  uint64_t v15 = sub_494C(&qword_18A098);
  sub_1C66C(v15, (uint64_t)v136);
  v123[22] = v16;
  sub_D978();
  __chkstk_darwin(v17);
  sub_6D30();
  sub_1C680(v18);
  uint64_t v19 = sub_494C(&qword_18A0A0);
  sub_1C66C(v19, (uint64_t)v135);
  v123[21] = v20;
  sub_D978();
  __chkstk_darwin(v21);
  sub_6D30();
  sub_1C680(v22);
  uint64_t v23 = sub_494C(&qword_18A0A8);
  sub_1C66C(v23, (uint64_t)v134);
  v123[20] = v24;
  sub_D978();
  __chkstk_darwin(v25);
  sub_6D30();
  sub_1C680(v26);
  uint64_t v27 = sub_494C(&qword_18A0B0);
  sub_1C66C(v27, (uint64_t)v133);
  v123[19] = v28;
  sub_D978();
  __chkstk_darwin(v29);
  sub_6D30();
  sub_1C680(v30);
  uint64_t v31 = sub_494C(&qword_18A0B8);
  sub_1C66C(v31, (uint64_t)v132);
  v123[18] = v32;
  sub_D978();
  __chkstk_darwin(v33);
  sub_6D30();
  sub_1C680(v34);
  uint64_t v35 = sub_494C(&qword_18A0C0);
  sub_1C66C(v35, (uint64_t)&v131);
  v123[17] = v36;
  sub_D978();
  __chkstk_darwin(v37);
  sub_6D30();
  sub_1C680(v38);
  uint64_t v39 = sub_494C(&qword_18A0C8);
  sub_1C66C(v39, (uint64_t)&v130);
  v123[16] = v40;
  sub_D978();
  __chkstk_darwin(v41);
  sub_6D30();
  sub_1C680(v42);
  uint64_t v43 = sub_494C(&qword_18A0D0);
  sub_1C66C(v43, (uint64_t)&v129);
  v123[15] = v44;
  sub_D978();
  __chkstk_darwin(v45);
  sub_6D30();
  sub_1C680(v46);
  uint64_t v47 = sub_494C(&qword_18A0D8);
  sub_1C66C(v47, (uint64_t)v128);
  v123[14] = v48;
  sub_D978();
  __chkstk_darwin(v49);
  sub_6D30();
  sub_1C680(v50);
  uint64_t v51 = sub_494C(&qword_18A0E0);
  sub_1C66C(v51, (uint64_t)&v127);
  v123[13] = v52;
  sub_D978();
  __chkstk_darwin(v53);
  sub_6D30();
  sub_1C680(v54);
  uint64_t v55 = sub_494C(&qword_18A0E8);
  sub_1C66C(v55, (uint64_t)&v126);
  v123[12] = v56;
  sub_D978();
  __chkstk_darwin(v57);
  sub_6D30();
  sub_1C680(v58);
  uint64_t v59 = sub_494C(&qword_18A0F0);
  sub_1C66C(v59, (uint64_t)&v125);
  v123[11] = v60;
  sub_D978();
  __chkstk_darwin(v61);
  sub_6D30();
  sub_1C680(v62);
  uint64_t v63 = sub_494C(&qword_18A0F8);
  sub_1C66C(v63, (uint64_t)&v124);
  v123[10] = v64;
  sub_D978();
  __chkstk_darwin(v65);
  sub_6D30();
  sub_1C680(v66);
  uint64_t v67 = sub_494C(&qword_18A100);
  sub_1C66C(v67, (uint64_t)v141);
  uint64_t v127 = v68;
  sub_D978();
  __chkstk_darwin(v69);
  sub_6D30();
  uint64_t v142 = v70;
  uint64_t v71 = sub_D9E0();
  uint64_t v72 = type metadata accessor for WellnessSnippets(v71);
  sub_1C66C(v72, (uint64_t)v140);
  sub_D978();
  __chkstk_darwin(v73);
  sub_1C65C();
  __chkstk_darwin(v74);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v75);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v76);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v77);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v78);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v79);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v80);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v81);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v82);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v83);
  sub_1C6B8();
  sub_1C65C();
  uint64_t v85 = __chkstk_darwin(v84);
  uint64_t v87 = (char *)v123 - v86;
  uint64_t v88 = __chkstk_darwin(v85);
  uint64_t v90 = (char *)v123 - v89;
  uint64_t v91 = __chkstk_darwin(v88);
  os_log_type_t v93 = (char *)v123 - v92;
  uint64_t v94 = __chkstk_darwin(v91);
  uint64_t v96 = (char *)v123 - v95;
  uint64_t v97 = __chkstk_darwin(v94);
  uint64_t v99 = (char *)v123 - v98;
  __chkstk_darwin(v97);
  uint64_t v101 = (char *)v123 - v100;
  uint64_t v102 = a1[3];
  uint64_t v103 = a1[4];
  uint64_t v130 = a1;
  unint64_t v104 = sub_1C700();
  unint64_t v105 = v131;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for WellnessSnippets.CodingKeys,  &type metadata for WellnessSnippets.CodingKeys,  v104,  v102,  v103);
  if (!v105)
  {
    v123[2] = v99;
    v123[3] = v96;
    v123[4] = v93;
    v123[5] = v90;
    v123[6] = v87;
    uint64_t v131 = v101;
    uint64_t v106 = v129;
    uint64_t v107 = KeyedDecodingContainer.allKeys.getter(v129);
    uint64_t v108 = v107;
    uint64_t v109 = *(void *)(v107 + 16);
    if (v109)
    {
      v123[1] = 0LL;
      uint64_t v110 = *(unsigned __int8 *)(v107 + 32);
      sub_11160(1LL, v109, v107, v107 + 32, 0LL, (2 * v109) | 1);
      uint64_t v112 = v111;
      unint64_t v114 = v113;
      swift_bridgeObjectRelease(v108);
      if (v112 == v114 >> 1) {
        __asm { BR              X9 }
      }

      uint64_t v106 = v129;
    }

    uint64_t v115 = v126;
    uint64_t v116 = type metadata accessor for DecodingError(0LL);
    swift_allocError(v116, &protocol witness table for DecodingError, 0LL, 0LL);
    uint64_t v118 = v117;
    sub_494C(&qword_18A108);
    *uint64_t v118 = v115;
    uint64_t v119 = KeyedDecodingContainer.codingPath.getter(v106);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v119,  0xD00000000000002BLL,  0x80000000001411C0LL,  0LL);
    uint64_t v120 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v116 - 8) + 104LL))( v118,  enum case for DecodingError.typeMismatch(_:),  v116);
    swift_willThrow(v120);
    sub_1C654();
    uint64_t v121 = sub_1C6C4();
    v122(v121, v106);
  }

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v130);
  sub_1C6D8();
}

void sub_11138(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_1114C(uint64_t a1)
{
}

uint64_t sub_11160(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if ((a2 & 0x8000000000000000LL) == 0) {
    return swift_unknownObjectRetain(a3);
  }
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_111D8()
{
  unint64_t result = qword_18A110;
  if (!qword_18A110)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WatchRingsModel,  &type metadata for WatchRingsModel);
    atomic_store(result, (unint64_t *)&qword_18A110);
  }

  return result;
}

void sub_11214(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  sub_A890();
}

unint64_t sub_11254()
{
  unint64_t result = qword_18A138;
  if (!qword_18A138)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneRingsModel,  &type metadata for PhoneRingsModel);
    atomic_store(result, (unint64_t *)&qword_18A138);
  }

  return result;
}

unint64_t sub_11290()
{
  unint64_t result = qword_18A160;
  if (!qword_18A160)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GenericBinaryButtonModel,  &type metadata for GenericBinaryButtonModel);
    atomic_store(result, (unint64_t *)&qword_18A160);
  }

  return result;
}

void sub_112CC()
{
}

void sub_112F8()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for WellnessSnippets(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v8 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v8))
        {
          uint64_t v9 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v8);
        }

        Model = (int *)type metadata accessor for OxygenSaturationQueryModel(0LL);
        uint64_t v79 = Model[5];
        uint64_t v80 = (char *)a1 + v79;
        uint64_t v81 = (char *)a2 + v79;
        *(void *)uint64_t v80 = *(void *)v81;
        v80[8] = v81[8];
        uint64_t v82 = Model[6];
        uint64_t v83 = (char *)a1 + v82;
        uint64_t v84 = (char *)a2 + v82;
        *(void *)uint64_t v83 = *(void *)v84;
        v83[8] = v84[8];
        uint64_t v85 = Model[7];
        uint64_t v86 = (char *)a1 + v85;
        uint64_t v87 = (char *)a2 + v85;
        v86[8] = v87[8];
        *(void *)uint64_t v86 = *(void *)v87;
        uint64_t v88 = Model[8];
        uint64_t v89 = (char *)a1 + v88;
        uint64_t v90 = (char *)a2 + v88;
        v89[8] = v90[8];
        *(void *)uint64_t v89 = *(void *)v90;
        uint64_t v91 = Model[9];
        uint64_t v92 = (char *)a1 + v91;
        os_log_type_t v93 = (char *)a2 + v91;
        uint64_t v94 = type metadata accessor for SpeakableString(0LL);
        __dst = (void *)v94;
        uint64_t v623 = a3;
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v93, 1LL, v94))
        {
          uint64_t v95 = sub_494C(&qword_189D00);
          memcpy(v92, v93, *(void *)(*(void *)(v95 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v94 - 8) + 16LL))(v92, v93, v94);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v92, 0LL, 1LL, v94);
        }

        uint64_t v349 = Model[10];
        v350 = (uint64_t *)((char *)a1 + v349);
        v351 = (uint64_t *)((char *)a2 + v349);
        uint64_t v352 = v351[1];
        void *v350 = *v351;
        v350[1] = v352;
        uint64_t v353 = Model[11];
        v354 = (uint64_t *)((char *)a1 + v353);
        v355 = (uint64_t *)((char *)a2 + v353);
        uint64_t v356 = v355[1];
        void *v354 = *v355;
        v354[1] = v356;
        uint64_t v357 = Model[12];
        v358 = (uint64_t *)((char *)a1 + v357);
        v359 = (uint64_t *)((char *)a2 + v357);
        uint64_t v360 = v359[1];
        void *v358 = *v359;
        v358[1] = v360;
        uint64_t v361 = Model[13];
        v362 = (uint64_t *)((char *)a1 + v361);
        v363 = (uint64_t *)((char *)a2 + v361);
        uint64_t v364 = v363[1];
        void *v362 = *v363;
        v362[1] = v364;
        uint64_t v365 = Model[14];
        v366 = (uint64_t *)((char *)a1 + v365);
        v367 = (uint64_t *)((char *)a2 + v365);
        uint64_t v368 = v367[1];
        void *v366 = *v367;
        v366[1] = v368;
        uint64_t v369 = Model[15];
        v370 = (uint64_t *)((char *)a1 + v369);
        v371 = (uint64_t *)((char *)a2 + v369);
        uint64_t v372 = v371[1];
        void *v370 = *v371;
        v370[1] = v372;
        uint64_t v373 = Model[16];
        v374 = (char *)a1 + v373;
        v375 = (char *)a2 + v373;
        uint64_t v376 = type metadata accessor for SnippetHeaderModel(0LL);
        swift_bridgeObjectRetain(v352);
        swift_bridgeObjectRetain(v356);
        swift_bridgeObjectRetain(v360);
        swift_bridgeObjectRetain(v364);
        swift_bridgeObjectRetain(v368);
        swift_bridgeObjectRetain(v372);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v375, 1LL, v376))
        {
          uint64_t v377 = sub_494C(&qword_18A1A8);
          memcpy(v374, v375, *(void *)(*(void *)(v377 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *))(*(__dst - 1) + 16LL))(v374, v375);
          uint64_t v544 = *(int *)(v376 + 20);
          v545 = &v374[v544];
          v546 = &v375[v544];
          uint64_t v547 = *((void *)v546 + 1);
          *(void *)v545 = *(void *)v546;
          *((void *)v545 + 1) = v547;
          uint64_t v548 = *(int *)(v376 + 24);
          v549 = &v374[v548];
          v550 = &v375[v548];
          uint64_t v551 = *((void *)v550 + 1);
          *(void *)v549 = *(void *)v550;
          *((void *)v549 + 1) = v551;
          swift_bridgeObjectRetain(v547);
          swift_bridgeObjectRetain(v551);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v374, 0LL, 1LL, v376);
        }

        uint64_t v24 = v623;
        uint64_t v23 = a1;
        uint64_t v25 = 0LL;
        goto LABEL_110;
      case 1u:
        uint64_t v11 = type metadata accessor for AppPunchout(0LL);
        uint64_t v619 = a3;
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v11))
        {
          uint64_t v12 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v11);
        }

        uint64_t v96 = (int *)type metadata accessor for BloodPressureQueryModel(0LL);
        uint64_t v97 = v96[5];
        uint64_t v98 = (char *)a1 + v97;
        uint64_t v99 = (char *)a2 + v97;
        *(void *)uint64_t v98 = *(void *)v99;
        v98[8] = v99[8];
        uint64_t v100 = v96[6];
        uint64_t v101 = (char *)a1 + v100;
        uint64_t v102 = (char *)a2 + v100;
        *(void *)uint64_t v101 = *(void *)v102;
        v101[8] = v102[8];
        uint64_t v103 = v96[7];
        unint64_t v104 = (char *)a1 + v103;
        unint64_t v105 = (char *)a2 + v103;
        v104[8] = v105[8];
        *(void *)unint64_t v104 = *(void *)v105;
        uint64_t v106 = v96[8];
        uint64_t v107 = (char *)a1 + v106;
        uint64_t v108 = (char *)a2 + v106;
        v107[8] = v108[8];
        *(void *)uint64_t v107 = *(void *)v108;
        uint64_t v109 = v96[9];
        uint64_t v110 = (char *)a1 + v109;
        uint64_t v111 = (char *)a2 + v109;
        v110[8] = v111[8];
        *(void *)uint64_t v110 = *(void *)v111;
        uint64_t v112 = v96[10];
        unint64_t v113 = (char *)a1 + v112;
        unint64_t v114 = (char *)a2 + v112;
        *(void *)unint64_t v113 = *(void *)v114;
        v113[8] = v114[8];
        uint64_t v115 = v96[11];
        uint64_t v116 = (uint64_t *)((char *)a1 + v115);
        uint64_t v117 = (uint64_t *)((char *)a2 + v115);
        uint64_t v610 = v117[1];
        *uint64_t v116 = *v117;
        v116[1] = v610;
        uint64_t v118 = v96[12];
        uint64_t v119 = (uint64_t *)((char *)a1 + v118);
        uint64_t v120 = (uint64_t *)((char *)a2 + v118);
        uint64_t v609 = v120[1];
        *uint64_t v119 = *v120;
        v119[1] = v609;
        uint64_t v121 = v96[13];
        uint64_t v122 = (uint64_t *)((char *)a1 + v121);
        uint64_t v123 = (uint64_t *)((char *)a2 + v121);
        uint64_t v608 = v123[1];
        *uint64_t v122 = *v123;
        v122[1] = v608;
        uint64_t v124 = v96[14];
        uint64_t v125 = (uint64_t *)((char *)a1 + v124);
        uint64_t v126 = (uint64_t *)((char *)a2 + v124);
        uint64_t v607 = v126[1];
        *uint64_t v125 = *v126;
        v125[1] = v607;
        uint64_t v127 = v96[15];
        uint64_t v128 = (uint64_t *)((char *)a1 + v127);
        uint64_t v129 = (uint64_t *)((char *)a2 + v127);
        uint64_t v130 = v129[1];
        *uint64_t v128 = *v129;
        v128[1] = v130;
        uint64_t v131 = v96[16];
        uint64_t v132 = (uint64_t *)((char *)a1 + v131);
        uint64_t v133 = (uint64_t *)((char *)a2 + v131);
        uint64_t v134 = v133[1];
        *uint64_t v132 = *v133;
        v132[1] = v134;
        uint64_t v135 = v96[17];
        uint64_t v136 = (uint64_t *)((char *)a1 + v135);
        uint64_t v137 = (uint64_t *)((char *)a2 + v135);
        uint64_t v138 = v137[1];
        *uint64_t v136 = *v137;
        v136[1] = v138;
        uint64_t v139 = v96[18];
        uint64_t v140 = (uint64_t *)((char *)a1 + v139);
        uint64_t v141 = (uint64_t *)((char *)a2 + v139);
        uint64_t v142 = v141[1];
        *uint64_t v140 = *v141;
        v140[1] = v142;
        uint64_t v143 = v96[19];
        uint64_t v144 = (uint64_t *)((char *)a1 + v143);
        uint64_t v145 = (uint64_t *)((char *)a2 + v143);
        uint64_t v146 = v145[1];
        *uint64_t v144 = *v145;
        v144[1] = v146;
        uint64_t v147 = v96[20];
        __dsta = (char *)a1 + v147;
        uint64_t v148 = (char *)a2 + v147;
        uint64_t v149 = type metadata accessor for URL(0LL);
        swift_bridgeObjectRetain(v610);
        swift_bridgeObjectRetain(v609);
        swift_bridgeObjectRetain(v608);
        swift_bridgeObjectRetain(v607);
        swift_bridgeObjectRetain(v130);
        swift_bridgeObjectRetain(v134);
        swift_bridgeObjectRetain(v138);
        swift_bridgeObjectRetain(v142);
        swift_bridgeObjectRetain(v146);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v148, 1LL, v149))
        {
          uint64_t v150 = sub_494C(&qword_189CF8);
          memcpy(__dsta, v148, *(void *)(*(void *)(v150 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v149 - 8) + 16LL))(__dsta, v148, v149);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dsta, 0LL, 1LL, v149);
        }

        uint64_t v378 = v96[21];
        v379 = (uint64_t *)((char *)a1 + v378);
        v380 = (uint64_t *)((char *)a2 + v378);
        uint64_t v381 = v380[1];
        void *v379 = *v380;
        v379[1] = v381;
        uint64_t v382 = v96[22];
        v383 = (uint64_t *)((char *)a1 + v382);
        v384 = (uint64_t *)((char *)a2 + v382);
        uint64_t v385 = v384[1];
        void *v383 = *v384;
        v383[1] = v385;
        uint64_t v386 = v96[23];
        v387 = (char *)a1 + v386;
        v388 = (char *)a2 + v386;
        uint64_t v389 = type metadata accessor for SnippetHeaderModel(0LL);
        swift_bridgeObjectRetain(v381);
        swift_bridgeObjectRetain(v385);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v388, 1LL, v389))
        {
          uint64_t v390 = sub_494C(&qword_18A1A8);
          memcpy(v387, v388, *(void *)(*(void *)(v390 - 8) + 64LL));
        }

        else
        {
          uint64_t v552 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v552 - 8) + 16LL))(v387, v388, v552);
          uint64_t v553 = *(int *)(v389 + 20);
          v554 = &v387[v553];
          v555 = &v388[v553];
          uint64_t v556 = *((void *)v555 + 1);
          *(void *)v554 = *(void *)v555;
          *((void *)v554 + 1) = v556;
          uint64_t v557 = *(int *)(v389 + 24);
          v558 = &v387[v557];
          v559 = &v388[v557];
          uint64_t v560 = *((void *)v559 + 1);
          *(void *)v558 = *(void *)v559;
          *((void *)v558 + 1) = v560;
          swift_bridgeObjectRetain(v556);
          swift_bridgeObjectRetain(v560);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v387, 0LL, 1LL, v389);
        }

        uint64_t v23 = a1;
        uint64_t v24 = v619;
        uint64_t v25 = 1LL;
        goto LABEL_110;
      case 2u:
        uint64_t v13 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v13))
        {
          uint64_t v14 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v13);
        }

        uint64_t v151 = (int *)type metadata accessor for BloodPressureLogModel(0LL);
        uint64_t v152 = v151[5];
        uint64_t v153 = (uint64_t *)((char *)a1 + v152);
        uint64_t v154 = (uint64_t *)((char *)a2 + v152);
        uint64_t v155 = v154[1];
        *uint64_t v153 = *v154;
        v153[1] = v155;
        uint64_t v156 = v151[6];
        uint64_t v157 = (uint64_t *)((char *)a1 + v156);
        uint64_t v158 = (uint64_t *)((char *)a2 + v156);
        uint64_t v159 = v158[1];
        *uint64_t v157 = *v158;
        v157[1] = v159;
        uint64_t v160 = v151[7];
        uint64_t v161 = (uint64_t *)((char *)a1 + v160);
        uint64_t v162 = (uint64_t *)((char *)a2 + v160);
        uint64_t v163 = v162[1];
        *uint64_t v161 = *v162;
        v161[1] = v163;
        uint64_t v164 = v151[8];
        uint64_t v165 = (char *)a1 + v164;
        uint64_t v166 = (char *)a2 + v164;
        uint64_t v167 = type metadata accessor for SnippetHeaderModel(0LL);
        swift_bridgeObjectRetain(v155);
        swift_bridgeObjectRetain(v159);
        swift_bridgeObjectRetain(v163);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v166, 1LL, v167))
        {
          uint64_t v168 = sub_494C(&qword_18A1A8);
          memcpy(v165, v166, *(void *)(*(void *)(v168 - 8) + 64LL));
        }

        else
        {
          uint64_t v391 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v391 - 8) + 16LL))(v165, v166, v391);
          uint64_t v392 = *(int *)(v167 + 20);
          v393 = &v165[v392];
          v394 = &v166[v392];
          uint64_t v395 = *((void *)v394 + 1);
          *(void *)v393 = *(void *)v394;
          *((void *)v393 + 1) = v395;
          uint64_t v396 = *(int *)(v167 + 24);
          v397 = &v165[v396];
          v398 = &v166[v396];
          uint64_t v399 = *((void *)v398 + 1);
          *(void *)v397 = *(void *)v398;
          *((void *)v397 + 1) = v399;
          swift_bridgeObjectRetain(v395);
          swift_bridgeObjectRetain(v399);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v165, 0LL, 1LL, v167);
        }

        uint64_t v400 = v151[9];
        v401 = (uint64_t *)((char *)a1 + v400);
        v402 = (uint64_t *)((char *)a2 + v400);
        uint64_t v403 = v402[1];
        void *v401 = *v402;
        v401[1] = v403;
        uint64_t v404 = v151[10];
        v405 = (uint64_t *)((char *)a1 + v404);
        v406 = (uint64_t *)((char *)a2 + v404);
        uint64_t v407 = v406[1];
        void *v405 = *v406;
        v405[1] = v407;
        swift_bridgeObjectRetain(v403);
        swift_bridgeObjectRetain(v407);
        uint64_t v23 = a1;
        uint64_t v24 = a3;
        uint64_t v25 = 2LL;
        goto LABEL_110;
      case 3u:
        uint64_t v15 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v15))
        {
          uint64_t v16 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v16 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v15 - 8) + 16LL))(a1, a2, v15);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v15);
        }

        uint64_t v169 = (int *)type metadata accessor for CycleTrackingLogModel(0LL);
        uint64_t v170 = v169[5];
        uint64_t v171 = (uint64_t *)((char *)a1 + v170);
        uint64_t v172 = (uint64_t *)((char *)a2 + v170);
        uint64_t v173 = v172[1];
        *uint64_t v171 = *v172;
        v171[1] = v173;
        uint64_t v174 = v169[6];
        uint64_t v175 = (uint64_t *)((char *)a1 + v174);
        uint64_t v176 = (uint64_t *)((char *)a2 + v174);
        uint64_t v177 = v176[1];
        *uint64_t v175 = *v176;
        v175[1] = v177;
        uint64_t v178 = v169[7];
        uint64_t v179 = (uint64_t *)((char *)a1 + v178);
        uint64_t v180 = (uint64_t *)((char *)a2 + v178);
        uint64_t v181 = v180[1];
        *uint64_t v179 = *v180;
        v179[1] = v181;
        uint64_t v182 = v169[8];
        uint64_t v183 = (char *)a1 + v182;
        uint64_t v184 = (char *)a2 + v182;
        uint64_t v185 = type metadata accessor for SnippetHeaderModel(0LL);
        swift_bridgeObjectRetain(v173);
        swift_bridgeObjectRetain(v177);
        swift_bridgeObjectRetain(v181);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v184, 1LL, v185))
        {
          uint64_t v186 = sub_494C(&qword_18A1A8);
          memcpy(v183, v184, *(void *)(*(void *)(v186 - 8) + 64LL));
        }

        else
        {
          uint64_t v408 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v408 - 8) + 16LL))(v183, v184, v408);
          uint64_t v409 = *(int *)(v185 + 20);
          v410 = &v183[v409];
          v411 = &v184[v409];
          uint64_t v412 = *((void *)v411 + 1);
          *(void *)v410 = *(void *)v411;
          *((void *)v410 + 1) = v412;
          uint64_t v413 = *(int *)(v185 + 24);
          v414 = &v183[v413];
          v415 = &v184[v413];
          uint64_t v416 = *((void *)v415 + 1);
          *(void *)v414 = *(void *)v415;
          *((void *)v414 + 1) = v416;
          swift_bridgeObjectRetain(v412);
          swift_bridgeObjectRetain(v416);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v183, 0LL, 1LL, v185);
        }

        uint64_t v417 = v169[9];
        v418 = (char *)a1 + v417;
        v419 = (char *)a2 + v417;
        uint64_t v420 = type metadata accessor for URL(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v419, 1LL, v420))
        {
          uint64_t v421 = sub_494C(&qword_189CF8);
          memcpy(v418, v419, *(void *)(*(void *)(v421 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v420 - 8) + 16LL))(v418, v419, v420);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v418, 0LL, 1LL, v420);
        }

        uint64_t v23 = a1;
        uint64_t v24 = a3;
        uint64_t v25 = 3LL;
        goto LABEL_110;
      case 4u:
        uint64_t v17 = a2[1];
        *a1 = *a2;
        a1[1] = v17;
        uint64_t v18 = *(int *)(type metadata accessor for GenericButtonModel(0LL) + 20);
        uint64_t v19 = (char *)a1 + v18;
        uint64_t v20 = (char *)a2 + v18;
        uint64_t v21 = type metadata accessor for URL(0LL);
        uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16LL);
        swift_bridgeObjectRetain(v17);
        v22(v19, v20, v21);
        uint64_t v23 = a1;
        uint64_t v24 = a3;
        uint64_t v25 = 4LL;
        goto LABEL_110;
      case 5u:
        uint64_t v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        uint64_t v27 = a2[3];
        a1[2] = a2[2];
        a1[3] = v27;
        uint64_t v28 = a2[5];
        a1[4] = a2[4];
        a1[5] = v28;
        *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRetain(v28);
        uint64_t v23 = a1;
        uint64_t v24 = a3;
        uint64_t v25 = 5LL;
        goto LABEL_110;
      case 6u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        uint64_t v29 = a2[2];
        a1[1] = a2[1];
        a1[2] = v29;
        uint64_t v30 = (int *)type metadata accessor for GenericMedCompletedLogModel(0LL);
        uint64_t v31 = v30[6];
        uint64_t v32 = (char *)a1 + v31;
        uint64_t v33 = (char *)a2 + v31;
        uint64_t v34 = type metadata accessor for AppPunchout(0LL);
        swift_bridgeObjectRetain(v29);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v33, 1LL, v34))
        {
          uint64_t v35 = sub_494C(&qword_18A1A0);
          memcpy(v32, v33, *(void *)(*(void *)(v35 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16LL))(v32, v33, v34);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v32, 0LL, 1LL, v34);
        }

        *((_BYTE *)a1 + v30[7]) = *((_BYTE *)a2 + v30[7]);
        uint64_t v187 = v30[8];
        uint64_t v188 = (uint64_t *)((char *)a1 + v187);
        uint64_t v189 = (uint64_t *)((char *)a2 + v187);
        uint64_t v190 = v189[1];
        *uint64_t v188 = *v189;
        v188[1] = v190;
        *((_BYTE *)a1 + v30[9]) = *((_BYTE *)a2 + v30[9]);
        uint64_t v191 = v30[10];
        uint64_t v192 = (uint64_t *)((char *)a1 + v191);
        uint64_t v193 = (uint64_t *)((char *)a2 + v191);
        uint64_t v194 = v193[1];
        *uint64_t v192 = *v193;
        v192[1] = v194;
        uint64_t v195 = v30[11];
        uint64_t v196 = (uint64_t *)((char *)a1 + v195);
        uint64_t v197 = (uint64_t *)((char *)a2 + v195);
        uint64_t v198 = v197[1];
        *uint64_t v196 = *v197;
        v196[1] = v198;
        uint64_t v199 = v30[12];
        uint64_t v200 = (uint64_t *)((char *)a1 + v199);
        uint64_t v201 = (uint64_t *)((char *)a2 + v199);
        uint64_t v202 = v201[1];
        *uint64_t v200 = *v201;
        v200[1] = v202;
        uint64_t v203 = v30[13];
        v204 = (uint64_t *)((char *)a1 + v203);
        uint64_t v205 = (uint64_t *)((char *)a2 + v203);
        uint64_t v206 = v205[1];
        void *v204 = *v205;
        v204[1] = v206;
        uint64_t v207 = v30[14];
        char v208 = (char *)a1 + v207;
        uint64_t v209 = (char *)a2 + v207;
        uint64_t v210 = type metadata accessor for SnippetHeaderModel(0LL);
        swift_bridgeObjectRetain(v190);
        swift_bridgeObjectRetain(v194);
        swift_bridgeObjectRetain(v198);
        swift_bridgeObjectRetain(v202);
        swift_bridgeObjectRetain(v206);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v209, 1LL, v210))
        {
          uint64_t v211 = sub_494C(&qword_18A1A8);
          memcpy(v208, v209, *(void *)(*(void *)(v211 - 8) + 64LL));
        }

        else
        {
          uint64_t v422 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v422 - 8) + 16LL))(v208, v209, v422);
          uint64_t v423 = *(int *)(v210 + 20);
          v424 = &v208[v423];
          v425 = &v209[v423];
          uint64_t v426 = *((void *)v425 + 1);
          *(void *)v424 = *(void *)v425;
          *((void *)v424 + 1) = v426;
          uint64_t v427 = *(int *)(v210 + 24);
          v428 = &v208[v427];
          v429 = &v209[v427];
          uint64_t v430 = *((void *)v429 + 1);
          *(void *)v428 = *(void *)v429;
          *((void *)v428 + 1) = v430;
          swift_bridgeObjectRetain(v426);
          swift_bridgeObjectRetain(v430);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v208, 0LL, 1LL, v210);
        }

        uint64_t v23 = a1;
        uint64_t v24 = a3;
        uint64_t v25 = 6LL;
        goto LABEL_110;
      case 7u:
        uint64_t v36 = type metadata accessor for SnippetHeaderModel(0LL);
        uint64_t v620 = a3;
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v36))
        {
          uint64_t v37 = sub_494C(&qword_18A1A8);
          memcpy(a1, a2, *(void *)(*(void *)(v37 - 8) + 64LL));
        }

        else
        {
          uint64_t v212 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v212 - 8) + 16LL))(a1, a2, v212);
          uint64_t v213 = *(int *)(v36 + 20);
          uint64_t v214 = (uint64_t *)((char *)a1 + v213);
          uint64_t v215 = (uint64_t *)((char *)a2 + v213);
          uint64_t v216 = v215[1];
          *uint64_t v214 = *v215;
          v214[1] = v216;
          uint64_t v217 = *(int *)(v36 + 24);
          uint64_t v218 = (uint64_t *)((char *)a1 + v217);
          uint64_t v219 = (uint64_t *)((char *)a2 + v217);
          uint64_t v220 = v219[1];
          *uint64_t v218 = *v219;
          v218[1] = v220;
          swift_bridgeObjectRetain(v216);
          swift_bridgeObjectRetain(v220);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v36);
        }

        uint64_t v221 = (int *)type metadata accessor for HealthDataLogModel(0LL);
        *(uint64_t *)((char *)a1 + v221[5]) = *(uint64_t *)((char *)a2 + v221[5]);
        uint64_t v222 = v221[6];
        uint64_t v223 = (uint64_t *)((char *)a1 + v222);
        uint64_t v224 = (uint64_t *)((char *)a2 + v222);
        uint64_t v225 = v224[1];
        *uint64_t v223 = *v224;
        v223[1] = v225;
        uint64_t v226 = v221[7];
        uint64_t v227 = (uint64_t *)((char *)a1 + v226);
        uint64_t v228 = (uint64_t *)((char *)a2 + v226);
        uint64_t v229 = v228[1];
        *uint64_t v227 = *v228;
        v227[1] = v229;
        uint64_t v230 = v221[8];
        uint64_t v231 = (uint64_t *)((char *)a1 + v230);
        uint64_t v232 = (uint64_t *)((char *)a2 + v230);
        uint64_t v233 = v232[1];
        *uint64_t v231 = *v232;
        v231[1] = v233;
        uint64_t v234 = v221[9];
        uint64_t v235 = (uint64_t *)((char *)a1 + v234);
        uint64_t v236 = (uint64_t *)((char *)a2 + v234);
        uint64_t v237 = v236[1];
        *uint64_t v235 = *v236;
        v235[1] = v237;
        uint64_t v238 = v221[10];
        __dstb = (char *)a1 + v238;
        uint64_t v239 = (char *)a2 + v238;
        uint64_t v240 = type metadata accessor for AppPunchout(0LL);
        swift_retain();
        swift_bridgeObjectRetain(v225);
        swift_bridgeObjectRetain(v229);
        swift_bridgeObjectRetain(v233);
        swift_bridgeObjectRetain(v237);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v239, 1LL, v240))
        {
          uint64_t v241 = sub_494C(&qword_18A1A0);
          memcpy(__dstb, v239, *(void *)(*(void *)(v241 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v240 - 8) + 16LL))(__dstb, v239, v240);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dstb, 0LL, 1LL, v240);
        }

        uint64_t v431 = v221[11];
        v432 = (uint64_t *)((char *)a1 + v431);
        v433 = (uint64_t *)((char *)a2 + v431);
        uint64_t v434 = v433[1];
        void *v432 = *v433;
        v432[1] = v434;
        swift_bridgeObjectRetain(v434);
        uint64_t v23 = a1;
        uint64_t v24 = v620;
        uint64_t v25 = 7LL;
        goto LABEL_110;
      case 8u:
        uint64_t v38 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v38))
        {
          uint64_t v39 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v39 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v38 - 8) + 16LL))(a1, a2, v38);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v38);
        }

        uint64_t v242 = (int *)type metadata accessor for GenericQueryModel(0LL);
        uint64_t v243 = v242[5];
        uint64_t v244 = (char *)a1 + v243;
        uint64_t v245 = (char *)a2 + v243;
        *(void *)uint64_t v244 = *(void *)v245;
        v244[8] = v245[8];
        uint64_t v246 = v242[6];
        uint64_t v247 = (char *)a1 + v246;
        uint64_t v248 = (char *)a2 + v246;
        *(void *)uint64_t v247 = *(void *)v248;
        v247[8] = v248[8];
        uint64_t v249 = v242[7];
        uint64_t v250 = (char *)a1 + v249;
        uint64_t v251 = (char *)a2 + v249;
        v250[8] = v251[8];
        *(void *)uint64_t v250 = *(void *)v251;
        uint64_t v252 = v242[8];
        uint64_t v253 = (char *)a1 + v252;
        uint64_t v254 = (char *)a2 + v252;
        v253[8] = v254[8];
        *(void *)uint64_t v253 = *(void *)v254;
        uint64_t v255 = v242[9];
        uint64_t v256 = (char *)a1 + v255;
        uint64_t v257 = (char *)a2 + v255;
        v256[8] = v257[8];
        *(void *)uint64_t v256 = *(void *)v257;
        uint64_t v258 = v242[10];
        uint64_t v259 = (char *)a1 + v258;
        uint64_t v260 = (char *)a2 + v258;
        uint64_t v261 = type metadata accessor for SpeakableString(0LL);
        uint64_t v624 = a3;
        uint64_t v611 = v261;
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v260, 1LL, v261))
        {
          uint64_t v262 = sub_494C(&qword_189D00);
          memcpy(v259, v260, *(void *)(*(void *)(v262 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v261 - 8) + 16LL))(v259, v260, v261);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v259, 0LL, 1LL, v261);
        }

        uint64_t v435 = v242[11];
        v436 = (uint64_t *)((char *)a1 + v435);
        v437 = (uint64_t *)((char *)a2 + v435);
        __dstd = (void *)v437[1];
        void *v436 = *v437;
        v436[1] = __dstd;
        uint64_t v438 = v242[12];
        v439 = (uint64_t *)((char *)a1 + v438);
        v440 = (uint64_t *)((char *)a2 + v438);
        uint64_t v441 = v440[1];
        void *v439 = *v440;
        v439[1] = v441;
        uint64_t v442 = v242[13];
        v443 = (uint64_t *)((char *)a1 + v442);
        v444 = (uint64_t *)((char *)a2 + v442);
        uint64_t v445 = v444[1];
        void *v443 = *v444;
        v443[1] = v445;
        uint64_t v446 = v242[14];
        v447 = (uint64_t *)((char *)a1 + v446);
        v448 = (uint64_t *)((char *)a2 + v446);
        uint64_t v449 = v448[1];
        void *v447 = *v448;
        v447[1] = v449;
        uint64_t v450 = v242[15];
        v451 = (uint64_t *)((char *)a1 + v450);
        v452 = (uint64_t *)((char *)a2 + v450);
        uint64_t v453 = v452[1];
        void *v451 = *v452;
        v451[1] = v453;
        uint64_t v454 = v242[16];
        v455 = (uint64_t *)((char *)a1 + v454);
        v456 = (uint64_t *)((char *)a2 + v454);
        uint64_t v457 = v456[1];
        void *v455 = *v456;
        v455[1] = v457;
        uint64_t v458 = v242[17];
        v459 = (uint64_t *)((char *)a1 + v458);
        v460 = (uint64_t *)((char *)a2 + v458);
        uint64_t v461 = v460[1];
        void *v459 = *v460;
        v459[1] = v461;
        uint64_t v462 = v242[18];
        v463 = (char *)a1 + v462;
        v464 = (char *)a2 + v462;
        uint64_t v465 = type metadata accessor for SnippetHeaderModel(0LL);
        swift_bridgeObjectRetain(__dstd);
        swift_bridgeObjectRetain(v441);
        swift_bridgeObjectRetain(v445);
        swift_bridgeObjectRetain(v449);
        swift_bridgeObjectRetain(v453);
        swift_bridgeObjectRetain(v457);
        swift_bridgeObjectRetain(v461);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v464, 1LL, v465))
        {
          uint64_t v466 = sub_494C(&qword_18A1A8);
          memcpy(v463, v464, *(void *)(*(void *)(v466 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *))(*(void *)(v611 - 8) + 16LL))(v463, v464);
          uint64_t v561 = *(int *)(v465 + 20);
          v562 = &v463[v561];
          v563 = &v464[v561];
          uint64_t v564 = *((void *)v563 + 1);
          *(void *)v562 = *(void *)v563;
          *((void *)v562 + 1) = v564;
          uint64_t v565 = *(int *)(v465 + 24);
          v566 = &v463[v565];
          v567 = &v464[v565];
          uint64_t v568 = *((void *)v567 + 1);
          *(void *)v566 = *(void *)v567;
          *((void *)v566 + 1) = v568;
          swift_bridgeObjectRetain(v564);
          swift_bridgeObjectRetain(v568);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v463, 0LL, 1LL, v465);
        }

        uint64_t v24 = v624;
        uint64_t v23 = a1;
        uint64_t v25 = 8LL;
        goto LABEL_110;
      case 9u:
        uint64_t v40 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v40))
        {
          uint64_t v41 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v41 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v40 - 8) + 16LL))(a1, a2, v40);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v40);
        }

        uint64_t v263 = (int *)type metadata accessor for HeightQueryModel(0LL);
        uint64_t v264 = v263[5];
        uint64_t v265 = (char *)a1 + v264;
        uint64_t v266 = (char *)a2 + v264;
        *(void *)uint64_t v265 = *(void *)v266;
        v265[8] = v266[8];
        uint64_t v267 = v263[6];
        uint64_t v268 = (char *)a1 + v267;
        uint64_t v269 = (char *)a2 + v267;
        *(void *)uint64_t v268 = *(void *)v269;
        v268[8] = v269[8];
        uint64_t v270 = v263[7];
        uint64_t v271 = (char *)a1 + v270;
        uint64_t v272 = (char *)a2 + v270;
        v271[8] = v272[8];
        *(void *)uint64_t v271 = *(void *)v272;
        uint64_t v273 = v263[8];
        uint64_t v274 = (char *)a1 + v273;
        uint64_t v275 = (char *)a2 + v273;
        uint64_t v276 = type metadata accessor for SpeakableString(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v275, 1LL, v276))
        {
          uint64_t v277 = sub_494C(&qword_189D00);
          memcpy(v274, v275, *(void *)(*(void *)(v277 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v276 - 8) + 16LL))(v274, v275, v276);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v274, 0LL, 1LL, v276);
        }

        *((_BYTE *)a1 + v263[9]) = *((_BYTE *)a2 + v263[9]);
        uint64_t v467 = v263[10];
        v468 = (char *)a1 + v467;
        v469 = (char *)a2 + v467;
        uint64_t v470 = type metadata accessor for SnippetHeaderModel(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v469, 1LL, v470))
        {
          uint64_t v471 = sub_494C(&qword_18A1A8);
          memcpy(v468, v469, *(void *)(*(void *)(v471 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v276 - 8) + 16LL))(v468, v469, v276);
          uint64_t v569 = *(int *)(v470 + 20);
          v570 = &v468[v569];
          v571 = &v469[v569];
          uint64_t v572 = *((void *)v571 + 1);
          *(void *)v570 = *(void *)v571;
          *((void *)v570 + 1) = v572;
          uint64_t v573 = *(int *)(v470 + 24);
          v574 = &v468[v573];
          v575 = &v469[v573];
          uint64_t v576 = *((void *)v575 + 1);
          *(void *)v574 = *(void *)v575;
          *((void *)v574 + 1) = v576;
          swift_bridgeObjectRetain(v572);
          swift_bridgeObjectRetain(v576);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v468, 0LL, 1LL, v470);
        }

        uint64_t v577 = v263[11];
        v578 = (uint64_t *)((char *)a1 + v577);
        v579 = (uint64_t *)((char *)a2 + v577);
        uint64_t v580 = v579[1];
        void *v578 = *v579;
        v578[1] = v580;
        uint64_t v581 = v263[12];
        v582 = (uint64_t *)((char *)a1 + v581);
        v583 = (uint64_t *)((char *)a2 + v581);
        uint64_t v584 = v583[1];
        void *v582 = *v583;
        v582[1] = v584;
        uint64_t v585 = v263[13];
        v586 = (uint64_t *)((char *)a1 + v585);
        v587 = (uint64_t *)((char *)a2 + v585);
        uint64_t v588 = v587[1];
        void *v586 = *v587;
        v586[1] = v588;
        swift_bridgeObjectRetain(v580);
        swift_bridgeObjectRetain(v584);
        swift_bridgeObjectRetain(v588);
        uint64_t v23 = a1;
        uint64_t v24 = a3;
        uint64_t v25 = 9LL;
        goto LABEL_110;
      case 0xAu:
        *a1 = *a2;
        *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
        a1[2] = a2[2];
        *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
        a1[4] = a2[4];
        *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
        *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
        a1[6] = a2[6];
        uint64_t v42 = a2[8];
        *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
        a1[8] = v42;
        a1[10] = a2[10];
        *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
        uint64_t v43 = a2[13];
        a1[12] = a2[12];
        a1[13] = v43;
        uint64_t v44 = a2[15];
        a1[14] = a2[14];
        a1[15] = v44;
        uint64_t v45 = a2[17];
        a1[16] = a2[16];
        a1[17] = v45;
        uint64_t v46 = a2[19];
        a1[18] = a2[18];
        a1[19] = v46;
        uint64_t v47 = a2[21];
        a1[20] = a2[20];
        a1[21] = v47;
        uint64_t v48 = a2[23];
        a1[22] = a2[22];
        a1[23] = v48;
        uint64_t v49 = a2[25];
        a1[24] = a2[24];
        a1[25] = v49;
        uint64_t v50 = a2[27];
        a1[26] = a2[26];
        a1[27] = v50;
        uint64_t v621 = a3;
        uint64_t v51 = a2[29];
        a1[28] = a2[28];
        a1[29] = v51;
        *((_BYTE *)a1 + 240) = *((_BYTE *)a2 + 240);
        swift_bridgeObjectRetain(v43);
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v45);
        swift_bridgeObjectRetain(v46);
        swift_bridgeObjectRetain(v47);
        swift_bridgeObjectRetain(v48);
        swift_bridgeObjectRetain(v49);
        swift_bridgeObjectRetain(v50);
        swift_bridgeObjectRetain(v51);
        uint64_t v23 = a1;
        uint64_t v24 = v621;
        uint64_t v25 = 10LL;
        goto LABEL_110;
      case 0xBu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v52 = a2[3];
        a1[2] = a2[2];
        a1[3] = v52;
        uint64_t v54 = a2[4];
        uint64_t v53 = a2[5];
        a1[4] = v54;
        a1[5] = v53;
        uint64_t v56 = a2[6];
        uint64_t v55 = a2[7];
        a1[6] = v56;
        a1[7] = v55;
        uint64_t v58 = a2[8];
        uint64_t v57 = a2[9];
        a1[8] = v58;
        a1[9] = v57;
        uint64_t v59 = a2[10];
        a1[10] = v59;
        uint64_t v60 = *(int *)(type metadata accessor for SingleActivitySummaryModel(0LL) + 44);
        uint64_t v61 = (char *)a1 + v60;
        uint64_t v62 = (char *)a2 + v60;
        uint64_t v63 = type metadata accessor for SnippetHeaderModel(0LL);
        swift_retain();
        swift_bridgeObjectRetain(v54);
        swift_bridgeObjectRetain(v56);
        swift_bridgeObjectRetain(v58);
        swift_bridgeObjectRetain(v59);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v62, 1LL, v63))
        {
          uint64_t v64 = sub_494C(&qword_18A1A8);
          memcpy(v61, v62, *(void *)(*(void *)(v64 - 8) + 64LL));
        }

        else
        {
          uint64_t v278 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v278 - 8) + 16LL))(v61, v62, v278);
          uint64_t v279 = *(int *)(v63 + 20);
          uint64_t v280 = &v61[v279];
          uint64_t v281 = &v62[v279];
          uint64_t v282 = *((void *)v281 + 1);
          *(void *)uint64_t v280 = *(void *)v281;
          *((void *)v280 + 1) = v282;
          uint64_t v283 = *(int *)(v63 + 24);
          uint64_t v284 = &v61[v283];
          uint64_t v285 = &v62[v283];
          uint64_t v286 = *((void *)v285 + 1);
          *(void *)uint64_t v284 = *(void *)v285;
          *((void *)v284 + 1) = v286;
          swift_bridgeObjectRetain(v282);
          swift_bridgeObjectRetain(v286);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v61, 0LL, 1LL, v63);
        }

        uint64_t v23 = a1;
        uint64_t v24 = a3;
        uint64_t v25 = 11LL;
        goto LABEL_110;
      case 0xCu:
        uint64_t v65 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v65))
        {
          uint64_t v66 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v66 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v65 - 8) + 16LL))(a1, a2, v65);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v65);
        }

        uint64_t v287 = (int *)type metadata accessor for SleepQueryModel(0LL);
        uint64_t v288 = v287[5];
        uint64_t v289 = (char *)a1 + v288;
        uint64_t v290 = (char *)a2 + v288;
        uint64_t v291 = type metadata accessor for SnippetHeaderModel(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v290, 1LL, v291))
        {
          uint64_t v292 = sub_494C(&qword_18A1A8);
          memcpy(v289, v290, *(void *)(*(void *)(v292 - 8) + 64LL));
        }

        else
        {
          uint64_t v472 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v472 - 8) + 16LL))(v289, v290, v472);
          uint64_t v473 = *(int *)(v291 + 20);
          v474 = &v289[v473];
          v475 = &v290[v473];
          uint64_t v476 = *((void *)v475 + 1);
          *(void *)v474 = *(void *)v475;
          *((void *)v474 + 1) = v476;
          uint64_t v477 = *(int *)(v291 + 24);
          v478 = &v289[v477];
          v479 = &v290[v477];
          uint64_t v480 = *((void *)v479 + 1);
          *(void *)v478 = *(void *)v479;
          *((void *)v478 + 1) = v480;
          swift_bridgeObjectRetain(v476);
          swift_bridgeObjectRetain(v480);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v289, 0LL, 1LL, v291);
        }

        uint64_t v481 = v287[6];
        v482 = (uint64_t *)((char *)a1 + v481);
        v483 = (uint64_t *)((char *)a2 + v481);
        uint64_t v484 = v483[1];
        void *v482 = *v483;
        v482[1] = v484;
        uint64_t v485 = v287[7];
        v486 = (uint64_t *)((char *)a1 + v485);
        v487 = (uint64_t *)((char *)a2 + v485);
        __dste = (void *)v487[1];
        void *v486 = *v487;
        v486[1] = __dste;
        uint64_t v488 = v287[8];
        v489 = (uint64_t *)((char *)a1 + v488);
        v490 = (uint64_t *)((char *)a2 + v488);
        uint64_t v612 = v490[1];
        void *v489 = *v490;
        v489[1] = v612;
        uint64_t v491 = v287[9];
        v492 = (uint64_t *)((char *)a1 + v491);
        v493 = (uint64_t *)((char *)a2 + v491);
        uint64_t v494 = v493[1];
        void *v492 = *v493;
        v492[1] = v494;
        uint64_t v495 = v287[10];
        v496 = (uint64_t *)((char *)a1 + v495);
        v497 = (uint64_t *)((char *)a2 + v495);
        uint64_t v498 = v497[1];
        void *v496 = *v497;
        v496[1] = v498;
        *(uint64_t *)((char *)a1 + v287[11]) = *(uint64_t *)((char *)a2 + v287[11]);
        *(uint64_t *)((char *)a1 + v287[12]) = *(uint64_t *)((char *)a2 + v287[12]);
        *(uint64_t *)((char *)a1 + v287[13]) = *(uint64_t *)((char *)a2 + v287[13]);
        *(uint64_t *)((char *)a1 + v287[14]) = *(uint64_t *)((char *)a2 + v287[14]);
        uint64_t v499 = v287[15];
        v500 = (uint64_t *)((char *)a1 + v499);
        v501 = (uint64_t *)((char *)a2 + v499);
        uint64_t v502 = v501[1];
        void *v500 = *v501;
        v500[1] = v502;
        uint64_t v503 = v287[16];
        v504 = (uint64_t *)((char *)a1 + v503);
        v505 = (uint64_t *)((char *)a2 + v503);
        uint64_t v506 = v505[1];
        void *v504 = *v505;
        v504[1] = v506;
        uint64_t v507 = v287[17];
        v508 = (uint64_t *)((char *)a1 + v507);
        v509 = (uint64_t *)((char *)a2 + v507);
        uint64_t v510 = v509[1];
        void *v508 = *v509;
        v508[1] = v510;
        swift_bridgeObjectRetain(v484);
        swift_bridgeObjectRetain(__dste);
        swift_bridgeObjectRetain(v612);
        swift_bridgeObjectRetain(v494);
        swift_bridgeObjectRetain(v498);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain(v502);
        swift_bridgeObjectRetain(v506);
        swift_bridgeObjectRetain(v510);
        uint64_t v23 = a1;
        uint64_t v24 = a3;
        uint64_t v25 = 12LL;
        goto LABEL_110;
      case 0xDu:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        uint64_t v67 = a2[2];
        a1[1] = a2[1];
        a1[2] = v67;
        uint64_t v68 = a2[4];
        a1[3] = a2[3];
        a1[4] = v68;
        uint64_t v69 = a2[6];
        a1[5] = a2[5];
        a1[6] = v69;
        uint64_t v70 = (int *)type metadata accessor for SpecificMedCompletedLogModel(0LL);
        uint64_t v71 = v70[8];
        uint64_t v72 = (char *)a1 + v71;
        uint64_t v73 = (char *)a2 + v71;
        uint64_t v74 = type metadata accessor for AppPunchout(0LL);
        swift_bridgeObjectRetain(v67);
        swift_bridgeObjectRetain(v68);
        swift_bridgeObjectRetain(v69);
        uint64_t v622 = a3;
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v73, 1LL, v74))
        {
          uint64_t v75 = sub_494C(&qword_18A1A0);
          memcpy(v72, v73, *(void *)(*(void *)(v75 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 16LL))(v72, v73, v74);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v72, 0LL, 1LL, v74);
        }

        uint64_t v293 = v70[9];
        uint64_t v294 = (char *)a1 + v293;
        uint64_t v295 = (char *)a2 + v293;
        *(void *)uint64_t v294 = *(void *)v295;
        v294[8] = v295[8];
        uint64_t v296 = v70[10];
        uint64_t v297 = (uint64_t *)((char *)a1 + v296);
        uint64_t v298 = (uint64_t *)((char *)a2 + v296);
        __dstc = (void *)v298[1];
        *uint64_t v297 = *v298;
        v297[1] = __dstc;
        uint64_t v299 = v70[11];
        uint64_t v300 = (uint64_t *)((char *)a1 + v299);
        uint64_t v301 = (uint64_t *)((char *)a2 + v299);
        uint64_t v302 = v301[1];
        *uint64_t v300 = *v301;
        v300[1] = v302;
        uint64_t v303 = v70[12];
        uint64_t v304 = (uint64_t *)((char *)a1 + v303);
        uint64_t v305 = (uint64_t *)((char *)a2 + v303);
        uint64_t v306 = v305[1];
        *uint64_t v304 = *v305;
        v304[1] = v306;
        uint64_t v307 = v70[13];
        uint64_t v308 = (uint64_t *)((char *)a1 + v307);
        uint64_t v309 = (uint64_t *)((char *)a2 + v307);
        uint64_t v310 = v309[1];
        *uint64_t v308 = *v309;
        v308[1] = v310;
        *((_BYTE *)a1 + v70[14]) = *((_BYTE *)a2 + v70[14]);
        *((_BYTE *)a1 + v70[15]) = *((_BYTE *)a2 + v70[15]);
        uint64_t v311 = v70[16];
        uint64_t v312 = (uint64_t *)((char *)a1 + v311);
        uint64_t v313 = (uint64_t *)((char *)a2 + v311);
        uint64_t v314 = v313[1];
        *uint64_t v312 = *v313;
        v312[1] = v314;
        uint64_t v315 = v70[17];
        uint64_t v316 = (uint64_t *)((char *)a1 + v315);
        uint64_t v317 = (uint64_t *)((char *)a2 + v315);
        uint64_t v318 = v317[1];
        *uint64_t v316 = *v317;
        v316[1] = v318;
        uint64_t v319 = v70[18];
        v320 = (uint64_t *)((char *)a1 + v319);
        v321 = (uint64_t *)((char *)a2 + v319);
        uint64_t v322 = v321[1];
        void *v320 = *v321;
        v320[1] = v322;
        uint64_t v323 = v70[19];
        v324 = (char *)a1 + v323;
        v325 = (char *)a2 + v323;
        uint64_t v326 = type metadata accessor for SnippetHeaderModel(0LL);
        swift_bridgeObjectRetain(__dstc);
        swift_bridgeObjectRetain(v302);
        swift_bridgeObjectRetain(v306);
        swift_bridgeObjectRetain(v310);
        swift_bridgeObjectRetain(v314);
        swift_bridgeObjectRetain(v318);
        swift_bridgeObjectRetain(v322);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v325, 1LL, v326))
        {
          uint64_t v327 = sub_494C(&qword_18A1A8);
          memcpy(v324, v325, *(void *)(*(void *)(v327 - 8) + 64LL));
        }

        else
        {
          uint64_t v511 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v511 - 8) + 16LL))(v324, v325, v511);
          uint64_t v512 = *(int *)(v326 + 20);
          v513 = &v324[v512];
          v514 = &v325[v512];
          uint64_t v515 = *((void *)v514 + 1);
          *(void *)v513 = *(void *)v514;
          *((void *)v513 + 1) = v515;
          uint64_t v516 = *(int *)(v326 + 24);
          v517 = &v324[v516];
          v518 = &v325[v516];
          uint64_t v519 = *((void *)v518 + 1);
          *(void *)v517 = *(void *)v518;
          *((void *)v517 + 1) = v519;
          swift_bridgeObjectRetain(v515);
          swift_bridgeObjectRetain(v519);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v324, 0LL, 1LL, v326);
        }

        uint64_t v24 = v622;
        uint64_t v23 = a1;
        uint64_t v25 = 13LL;
        goto LABEL_110;
      case 0xEu:
        uint64_t v76 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v76))
        {
          uint64_t v77 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v77 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v76 - 8) + 16LL))(a1, a2, v76);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v76);
        }

        v328 = (int *)type metadata accessor for TemperatureQueryModel(0LL);
        uint64_t v329 = v328[5];
        v330 = (char *)a1 + v329;
        v331 = (char *)a2 + v329;
        *(void *)v330 = *(void *)v331;
        v330[8] = v331[8];
        uint64_t v332 = v328[6];
        v333 = (char *)a1 + v332;
        v334 = (char *)a2 + v332;
        *(void *)v333 = *(void *)v334;
        v333[8] = v334[8];
        uint64_t v335 = v328[7];
        v336 = (char *)a1 + v335;
        v337 = (char *)a2 + v335;
        v336[8] = v337[8];
        *(void *)v336 = *(void *)v337;
        uint64_t v338 = v328[8];
        v339 = (char *)a1 + v338;
        v340 = (char *)a2 + v338;
        v339[8] = v340[8];
        *(void *)v339 = *(void *)v340;
        uint64_t v341 = v328[9];
        v342 = (char *)a1 + v341;
        v343 = (char *)a2 + v341;
        v342[8] = v343[8];
        *(void *)v342 = *(void *)v343;
        uint64_t v344 = v328[10];
        v345 = (char *)a1 + v344;
        v346 = (char *)a2 + v344;
        uint64_t v347 = type metadata accessor for SpeakableString(0LL);
        uint64_t v625 = a3;
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v346, 1LL, v347))
        {
          uint64_t v348 = sub_494C(&qword_189D00);
          memcpy(v345, v346, *(void *)(*(void *)(v348 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v347 - 8) + 16LL))(v345, v346, v347);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v345, 0LL, 1LL, v347);
        }

        uint64_t v520 = v328[11];
        v521 = (uint64_t *)((char *)a1 + v520);
        v522 = (uint64_t *)((char *)a2 + v520);
        uint64_t v523 = v522[1];
        void *v521 = *v522;
        v521[1] = v523;
        uint64_t v524 = v328[12];
        v525 = (uint64_t *)((char *)a1 + v524);
        v526 = (uint64_t *)((char *)a2 + v524);
        uint64_t v527 = v526[1];
        void *v525 = *v526;
        v525[1] = v527;
        uint64_t v528 = v328[13];
        v529 = (uint64_t *)((char *)a1 + v528);
        v530 = (uint64_t *)((char *)a2 + v528);
        uint64_t v531 = v530[1];
        void *v529 = *v530;
        v529[1] = v531;
        uint64_t v532 = v328[14];
        v533 = (uint64_t *)((char *)a1 + v532);
        v534 = (uint64_t *)((char *)a2 + v532);
        uint64_t v535 = v534[1];
        void *v533 = *v534;
        v533[1] = v535;
        uint64_t v536 = v328[15];
        v537 = (uint64_t *)((char *)a1 + v536);
        v538 = (uint64_t *)((char *)a2 + v536);
        uint64_t v539 = v538[1];
        void *v537 = *v538;
        v537[1] = v539;
        uint64_t v540 = v328[16];
        v541 = (char *)a1 + v540;
        v542 = (char *)a2 + v540;
        swift_bridgeObjectRetain(v523);
        swift_bridgeObjectRetain(v527);
        swift_bridgeObjectRetain(v531);
        swift_bridgeObjectRetain(v535);
        swift_bridgeObjectRetain(v539);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v542, 1LL, v347))
        {
          uint64_t v543 = sub_494C(&qword_189D00);
          memcpy(v541, v542, *(void *)(*(void *)(v543 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v347 - 8) + 16LL))(v541, v542, v347);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v541, 0LL, 1LL, v347);
        }

        uint64_t v589 = v328[17];
        v590 = (uint64_t *)((char *)a1 + v589);
        v591 = (uint64_t *)((char *)a2 + v589);
        uint64_t v592 = v591[1];
        void *v590 = *v591;
        v590[1] = v592;
        uint64_t v593 = v328[18];
        v594 = (char *)a1 + v593;
        v595 = (char *)a2 + v593;
        uint64_t v596 = type metadata accessor for SnippetHeaderModel(0LL);
        swift_bridgeObjectRetain(v592);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v595, 1LL, v596))
        {
          uint64_t v597 = sub_494C(&qword_18A1A8);
          memcpy(v594, v595, *(void *)(*(void *)(v597 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v347 - 8) + 16LL))(v594, v595, v347);
          uint64_t v598 = *(int *)(v596 + 20);
          v599 = &v594[v598];
          v600 = &v595[v598];
          uint64_t v601 = *((void *)v600 + 1);
          *(void *)v599 = *(void *)v600;
          *((void *)v599 + 1) = v601;
          uint64_t v602 = *(int *)(v596 + 24);
          v603 = &v594[v602];
          v604 = &v595[v602];
          uint64_t v605 = *((void *)v604 + 1);
          *(void *)v603 = *(void *)v604;
          *((void *)v603 + 1) = v605;
          swift_bridgeObjectRetain(v601);
          swift_bridgeObjectRetain(v605);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v594, 0LL, 1LL, v596);
        }

        uint64_t v23 = a1;
        uint64_t v24 = v625;
        uint64_t v25 = 14LL;
LABEL_110:
        swift_storeEnumTagMultiPayload(v23, v24, v25);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

uint64_t destroy for WellnessSnippets(void *a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      uint64_t v4 = type metadata accessor for AppPunchout(0LL);
      Model = (int *)type metadata accessor for OxygenSaturationQueryModel(0LL);
      uint64_t v6 = (uint64_t)v2 + Model[9];
      uint64_t v7 = type metadata accessor for SpeakableString(0LL);
      swift_bridgeObjectRelease(*(void *)((char *)v2 + Model[10] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + Model[11] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + Model[12] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + Model[13] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + Model[14] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + Model[15] + 8));
      uint64_t v8 = Model[16];
      goto LABEL_65;
    case 1:
      uint64_t v9 = type metadata accessor for AppPunchout(0LL);
      uint64_t v10 = (int *)type metadata accessor for BloodPressureQueryModel(0LL);
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v10[11] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v10[12] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v10[13] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v10[14] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v10[15] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v10[16] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v10[17] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v10[18] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v10[19] + 8));
      uint64_t v11 = (uint64_t)v2 + v10[20];
      uint64_t v12 = type metadata accessor for URL(0LL);
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v10[21] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v10[22] + 8));
      uint64_t v13 = v10[23];
      goto LABEL_56;
    case 2:
      uint64_t v14 = type metadata accessor for AppPunchout(0LL);
      uint64_t v15 = (int *)type metadata accessor for BloodPressureLogModel(0LL);
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v15[5] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v15[6] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v15[7] + 8));
      uint64_t v16 = (uint64_t)v2 + v15[8];
      uint64_t v17 = type metadata accessor for SnippetHeaderModel(0LL);
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v16, 1LL, v17))
      {
        uint64_t v18 = type metadata accessor for SpeakableString(0LL);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8LL))(v16, v18);
        swift_bridgeObjectRelease(*(void *)(v16 + *(int *)(v17 + 20) + 8));
        swift_bridgeObjectRelease(*(void *)(v16 + *(int *)(v17 + 24) + 8));
      }

      swift_bridgeObjectRelease(*(void *)((char *)v2 + v15[9] + 8));
      uint64_t v19 = v15[10];
      break;
    case 3:
      uint64_t v20 = type metadata accessor for AppPunchout(0LL);
      uint64_t v21 = (int *)type metadata accessor for CycleTrackingLogModel(0LL);
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v21[5] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v21[6] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v21[7] + 8));
      uint64_t v22 = (uint64_t)v2 + v21[8];
      uint64_t v23 = type metadata accessor for SnippetHeaderModel(0LL);
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v22, 1LL, v23))
      {
        uint64_t v24 = type metadata accessor for SpeakableString(0LL);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8LL))(v22, v24);
        swift_bridgeObjectRelease(*(void *)(v22 + *(int *)(v23 + 20) + 8));
        swift_bridgeObjectRelease(*(void *)(v22 + *(int *)(v23 + 24) + 8));
      }

      uint64_t v25 = (uint64_t)v2 + v21[9];
      uint64_t v26 = type metadata accessor for URL(0LL);
      uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v25, 1LL, v26);
      if ((_DWORD)result) {
        return result;
      }
      uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8LL);
      uint64_t v28 = v25;
      uint64_t v29 = v26;
      return v27(v28, v29);
    case 4:
      swift_bridgeObjectRelease(v2[1]);
      uint64_t v30 = (char *)v2 + *(int *)(type metadata accessor for GenericButtonModel(0LL) + 20);
      uint64_t v29 = type metadata accessor for URL(0LL);
      uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8LL);
      uint64_t v28 = (uint64_t)v30;
      return v27(v28, v29);
    case 5:
      swift_bridgeObjectRelease(v2[1]);
      swift_bridgeObjectRelease(v2[3]);
      uint64_t v31 = v2[5];
      return swift_bridgeObjectRelease(v31);
    case 6:
      swift_bridgeObjectRelease(v2[2]);
      uint64_t v32 = (int *)type metadata accessor for GenericMedCompletedLogModel(0LL);
      uint64_t v33 = (uint64_t)v2 + v32[6];
      uint64_t v34 = type metadata accessor for AppPunchout(0LL);
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v32[8] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v32[10] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v32[11] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v32[12] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v32[13] + 8));
      uint64_t v13 = v32[14];
      goto LABEL_56;
    case 7:
      uint64_t v35 = type metadata accessor for SnippetHeaderModel(0LL);
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v2, 1LL, v35))
      {
        uint64_t v36 = type metadata accessor for SpeakableString(0LL);
        (*(void (**)(void *, uint64_t))(*(void *)(v36 - 8) + 8LL))(v2, v36);
        swift_bridgeObjectRelease(*(void *)((char *)v2 + *(int *)(v35 + 20) + 8));
        swift_bridgeObjectRelease(*(void *)((char *)v2 + *(int *)(v35 + 24) + 8));
      }

      uint64_t v37 = (int *)type metadata accessor for HealthDataLogModel(0LL);
      swift_release();
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v37[6] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v37[7] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v37[8] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v37[9] + 8));
      uint64_t v38 = (uint64_t)v2 + v37[10];
      uint64_t v39 = type metadata accessor for AppPunchout(0LL);
      uint64_t v19 = v37[11];
      break;
    case 8:
      uint64_t v40 = type metadata accessor for AppPunchout(0LL);
      uint64_t v41 = (int *)type metadata accessor for GenericQueryModel(0LL);
      uint64_t v42 = (uint64_t)v2 + v41[10];
      uint64_t v7 = type metadata accessor for SpeakableString(0LL);
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v41[11] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v41[12] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v41[13] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v41[14] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v41[15] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v41[16] + 8));
      goto LABEL_64;
    case 9:
      uint64_t v43 = type metadata accessor for AppPunchout(0LL);
      uint64_t v44 = (int *)type metadata accessor for HeightQueryModel(0LL);
      uint64_t v45 = (uint64_t)v2 + v44[8];
      uint64_t v46 = type metadata accessor for SpeakableString(0LL);
      uint64_t v47 = (uint64_t)v2 + v44[10];
      uint64_t v48 = type metadata accessor for SnippetHeaderModel(0LL);
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v47, 1LL, v48))
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8LL))(v47, v46);
        swift_bridgeObjectRelease(*(void *)(v47 + *(int *)(v48 + 20) + 8));
        swift_bridgeObjectRelease(*(void *)(v47 + *(int *)(v48 + 24) + 8));
      }

      swift_bridgeObjectRelease(*(void *)((char *)v2 + v44[11] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v44[12] + 8));
      uint64_t v19 = v44[13];
      break;
    case 10:
      swift_bridgeObjectRelease(v2[13]);
      swift_bridgeObjectRelease(v2[15]);
      swift_bridgeObjectRelease(v2[17]);
      swift_bridgeObjectRelease(v2[19]);
      swift_bridgeObjectRelease(v2[21]);
      swift_bridgeObjectRelease(v2[23]);
      swift_bridgeObjectRelease(v2[25]);
      swift_bridgeObjectRelease(v2[27]);
      uint64_t v31 = v2[29];
      return swift_bridgeObjectRelease(v31);
    case 11:
      swift_release();
      swift_bridgeObjectRelease(v2[4]);
      swift_bridgeObjectRelease(v2[6]);
      swift_bridgeObjectRelease(v2[8]);
      swift_bridgeObjectRelease(v2[10]);
      uint64_t v13 = *(int *)(type metadata accessor for SingleActivitySummaryModel(0LL) + 44);
      goto LABEL_56;
    case 12:
      uint64_t v49 = type metadata accessor for AppPunchout(0LL);
      uint64_t v50 = (int *)type metadata accessor for SleepQueryModel(0LL);
      uint64_t v51 = (uint64_t)v2 + v50[5];
      uint64_t v52 = type metadata accessor for SnippetHeaderModel(0LL);
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v51, 1LL, v52))
      {
        uint64_t v53 = type metadata accessor for SpeakableString(0LL);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8LL))(v51, v53);
        swift_bridgeObjectRelease(*(void *)(v51 + *(int *)(v52 + 20) + 8));
        swift_bridgeObjectRelease(*(void *)(v51 + *(int *)(v52 + 24) + 8));
      }

      swift_bridgeObjectRelease(*(void *)((char *)v2 + v50[6] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v50[7] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v50[8] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v50[9] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v50[10] + 8));
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v50[15] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v50[16] + 8));
      uint64_t v19 = v50[17];
      break;
    case 13:
      swift_bridgeObjectRelease(v2[2]);
      swift_bridgeObjectRelease(v2[4]);
      swift_bridgeObjectRelease(v2[6]);
      uint64_t v54 = (int *)type metadata accessor for SpecificMedCompletedLogModel(0LL);
      uint64_t v55 = (uint64_t)v2 + v54[8];
      uint64_t v56 = type metadata accessor for AppPunchout(0LL);
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v54[10] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v54[11] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v54[12] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v54[13] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v54[16] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v54[17] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v54[18] + 8));
      uint64_t v13 = v54[19];
LABEL_56:
      uint64_t v2 = (void *)((char *)v2 + v13);
      uint64_t v57 = type metadata accessor for SnippetHeaderModel(0LL);
      uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v2, 1LL, v57);
      if ((_DWORD)result) {
        return result;
      }
      uint64_t v58 = type metadata accessor for SpeakableString(0LL);
      (*(void (**)(void *, uint64_t))(*(void *)(v58 - 8) + 8LL))(v2, v58);
      swift_bridgeObjectRelease(*(void *)((char *)v2 + *(int *)(v57 + 20) + 8));
      uint64_t v19 = *(int *)(v57 + 24);
      break;
    case 14:
      uint64_t v59 = type metadata accessor for AppPunchout(0LL);
      uint64_t v41 = (int *)type metadata accessor for TemperatureQueryModel(0LL);
      uint64_t v60 = (uint64_t)v2 + v41[10];
      uint64_t v7 = type metadata accessor for SpeakableString(0LL);
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v41[11] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v41[12] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v41[13] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v41[14] + 8));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v41[15] + 8));
      uint64_t v61 = (uint64_t)v2 + v41[16];
LABEL_64:
      swift_bridgeObjectRelease(*(void *)((char *)v2 + v41[17] + 8));
      uint64_t v8 = v41[18];
LABEL_65:
      uint64_t v2 = (void *)((char *)v2 + v8);
      uint64_t v62 = type metadata accessor for SnippetHeaderModel(0LL);
      uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v2, 1LL, v62);
      if ((_DWORD)result) {
        return result;
      }
      (*(void (**)(void *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v2, v7);
      swift_bridgeObjectRelease(*(void *)((char *)v2 + *(int *)(v62 + 20) + 8));
      uint64_t v19 = *(int *)(v62 + 24);
      break;
    default:
      return result;
  }

  uint64_t v31 = *(void *)((char *)v2 + v19 + 8);
  return swift_bridgeObjectRelease(v31);
}

void *initializeWithCopy for WellnessSnippets(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v6 = type metadata accessor for AppPunchout(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
      {
        uint64_t v7 = sub_494C(&qword_18A1A0);
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      }

      Model = (int *)type metadata accessor for OxygenSaturationQueryModel(0LL);
      uint64_t v76 = Model[5];
      uint64_t v77 = (char *)a1 + v76;
      uint64_t v78 = (char *)a2 + v76;
      *(void *)uint64_t v77 = *(void *)v78;
      v77[8] = v78[8];
      uint64_t v79 = Model[6];
      uint64_t v80 = (char *)a1 + v79;
      uint64_t v81 = (char *)a2 + v79;
      *(void *)uint64_t v80 = *(void *)v81;
      v80[8] = v81[8];
      uint64_t v82 = Model[7];
      uint64_t v83 = (char *)a1 + v82;
      uint64_t v84 = (char *)a2 + v82;
      v83[8] = v84[8];
      *(void *)uint64_t v83 = *(void *)v84;
      uint64_t v85 = Model[8];
      uint64_t v86 = (char *)a1 + v85;
      uint64_t v87 = (char *)a2 + v85;
      v86[8] = v87[8];
      *(void *)uint64_t v86 = *(void *)v87;
      uint64_t v88 = Model[9];
      uint64_t v89 = (char *)a1 + v88;
      uint64_t v90 = (char *)a2 + v88;
      uint64_t v91 = type metadata accessor for SpeakableString(0LL);
      __dst = (void *)v91;
      uint64_t v620 = a3;
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v90, 1LL, v91))
      {
        uint64_t v92 = sub_494C(&qword_189D00);
        memcpy(v89, v90, *(void *)(*(void *)(v92 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v91 - 8) + 16LL))(v89, v90, v91);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v89, 0LL, 1LL, v91);
      }

      uint64_t v346 = Model[10];
      uint64_t v347 = (void *)((char *)a1 + v346);
      uint64_t v348 = (void *)((char *)a2 + v346);
      uint64_t v349 = v348[1];
      *uint64_t v347 = *v348;
      v347[1] = v349;
      uint64_t v350 = Model[11];
      v351 = (void *)((char *)a1 + v350);
      uint64_t v352 = (void *)((char *)a2 + v350);
      uint64_t v353 = v352[1];
      void *v351 = *v352;
      v351[1] = v353;
      uint64_t v354 = Model[12];
      v355 = (void *)((char *)a1 + v354);
      uint64_t v356 = (void *)((char *)a2 + v354);
      uint64_t v357 = v356[1];
      void *v355 = *v356;
      v355[1] = v357;
      uint64_t v358 = Model[13];
      v359 = (void *)((char *)a1 + v358);
      uint64_t v360 = (void *)((char *)a2 + v358);
      uint64_t v361 = v360[1];
      void *v359 = *v360;
      v359[1] = v361;
      uint64_t v362 = Model[14];
      v363 = (void *)((char *)a1 + v362);
      uint64_t v364 = (void *)((char *)a2 + v362);
      uint64_t v365 = v364[1];
      void *v363 = *v364;
      v363[1] = v365;
      uint64_t v366 = Model[15];
      v367 = (void *)((char *)a1 + v366);
      uint64_t v368 = (void *)((char *)a2 + v366);
      uint64_t v369 = v368[1];
      void *v367 = *v368;
      v367[1] = v369;
      uint64_t v370 = Model[16];
      v371 = (char *)a1 + v370;
      uint64_t v372 = (char *)a2 + v370;
      uint64_t v373 = type metadata accessor for SnippetHeaderModel(0LL);
      swift_bridgeObjectRetain(v349);
      swift_bridgeObjectRetain(v353);
      swift_bridgeObjectRetain(v357);
      swift_bridgeObjectRetain(v361);
      swift_bridgeObjectRetain(v365);
      swift_bridgeObjectRetain(v369);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v372, 1LL, v373))
      {
        uint64_t v374 = sub_494C(&qword_18A1A8);
        memcpy(v371, v372, *(void *)(*(void *)(v374 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *))(*(__dst - 1) + 16LL))(v371, v372);
        uint64_t v541 = *(int *)(v373 + 20);
        v542 = &v371[v541];
        uint64_t v543 = &v372[v541];
        uint64_t v544 = *((void *)v543 + 1);
        *(void *)v542 = *(void *)v543;
        *((void *)v542 + 1) = v544;
        uint64_t v545 = *(int *)(v373 + 24);
        v546 = &v371[v545];
        uint64_t v547 = &v372[v545];
        uint64_t v548 = *((void *)v547 + 1);
        *(void *)v546 = *(void *)v547;
        *((void *)v546 + 1) = v548;
        swift_bridgeObjectRetain(v544);
        swift_bridgeObjectRetain(v548);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v371, 0LL, 1LL, v373);
      }

      uint64_t v21 = v620;
      uint64_t v20 = a1;
      uint64_t v22 = 0LL;
      goto LABEL_108;
    case 1u:
      uint64_t v8 = type metadata accessor for AppPunchout(0LL);
      uint64_t v616 = a3;
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v8))
      {
        uint64_t v9 = sub_494C(&qword_18A1A0);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v8);
      }

      os_log_type_t v93 = (int *)type metadata accessor for BloodPressureQueryModel(0LL);
      uint64_t v94 = v93[5];
      uint64_t v95 = (char *)a1 + v94;
      uint64_t v96 = (char *)a2 + v94;
      *(void *)uint64_t v95 = *(void *)v96;
      v95[8] = v96[8];
      uint64_t v97 = v93[6];
      uint64_t v98 = (char *)a1 + v97;
      uint64_t v99 = (char *)a2 + v97;
      *(void *)uint64_t v98 = *(void *)v99;
      v98[8] = v99[8];
      uint64_t v100 = v93[7];
      uint64_t v101 = (char *)a1 + v100;
      uint64_t v102 = (char *)a2 + v100;
      v101[8] = v102[8];
      *(void *)uint64_t v101 = *(void *)v102;
      uint64_t v103 = v93[8];
      unint64_t v104 = (char *)a1 + v103;
      unint64_t v105 = (char *)a2 + v103;
      v104[8] = v105[8];
      *(void *)unint64_t v104 = *(void *)v105;
      uint64_t v106 = v93[9];
      uint64_t v107 = (char *)a1 + v106;
      uint64_t v108 = (char *)a2 + v106;
      v107[8] = v108[8];
      *(void *)uint64_t v107 = *(void *)v108;
      uint64_t v109 = v93[10];
      uint64_t v110 = (char *)a1 + v109;
      uint64_t v111 = (char *)a2 + v109;
      *(void *)uint64_t v110 = *(void *)v111;
      v110[8] = v111[8];
      uint64_t v112 = v93[11];
      unint64_t v113 = (void *)((char *)a1 + v112);
      unint64_t v114 = (void *)((char *)a2 + v112);
      uint64_t v607 = v114[1];
      *unint64_t v113 = *v114;
      v113[1] = v607;
      uint64_t v115 = v93[12];
      uint64_t v116 = (void *)((char *)a1 + v115);
      uint64_t v117 = (void *)((char *)a2 + v115);
      uint64_t v606 = v117[1];
      *uint64_t v116 = *v117;
      v116[1] = v606;
      uint64_t v118 = v93[13];
      uint64_t v119 = (void *)((char *)a1 + v118);
      uint64_t v120 = (void *)((char *)a2 + v118);
      uint64_t v605 = v120[1];
      *uint64_t v119 = *v120;
      v119[1] = v605;
      uint64_t v121 = v93[14];
      uint64_t v122 = (void *)((char *)a1 + v121);
      uint64_t v123 = (void *)((char *)a2 + v121);
      uint64_t v604 = v123[1];
      *uint64_t v122 = *v123;
      v122[1] = v604;
      uint64_t v124 = v93[15];
      uint64_t v125 = (void *)((char *)a1 + v124);
      uint64_t v126 = (void *)((char *)a2 + v124);
      uint64_t v127 = v126[1];
      *uint64_t v125 = *v126;
      v125[1] = v127;
      uint64_t v128 = v93[16];
      uint64_t v129 = (void *)((char *)a1 + v128);
      uint64_t v130 = (void *)((char *)a2 + v128);
      uint64_t v131 = v130[1];
      *uint64_t v129 = *v130;
      v129[1] = v131;
      uint64_t v132 = v93[17];
      uint64_t v133 = (void *)((char *)a1 + v132);
      uint64_t v134 = (void *)((char *)a2 + v132);
      uint64_t v135 = v134[1];
      *uint64_t v133 = *v134;
      v133[1] = v135;
      uint64_t v136 = v93[18];
      uint64_t v137 = (void *)((char *)a1 + v136);
      uint64_t v138 = (void *)((char *)a2 + v136);
      uint64_t v139 = v138[1];
      *uint64_t v137 = *v138;
      v137[1] = v139;
      uint64_t v140 = v93[19];
      uint64_t v141 = (void *)((char *)a1 + v140);
      uint64_t v142 = (void *)((char *)a2 + v140);
      uint64_t v143 = v142[1];
      *uint64_t v141 = *v142;
      v141[1] = v143;
      uint64_t v144 = v93[20];
      __dsta = (char *)a1 + v144;
      uint64_t v145 = (char *)a2 + v144;
      uint64_t v146 = type metadata accessor for URL(0LL);
      swift_bridgeObjectRetain(v607);
      swift_bridgeObjectRetain(v606);
      swift_bridgeObjectRetain(v605);
      swift_bridgeObjectRetain(v604);
      swift_bridgeObjectRetain(v127);
      swift_bridgeObjectRetain(v131);
      swift_bridgeObjectRetain(v135);
      swift_bridgeObjectRetain(v139);
      swift_bridgeObjectRetain(v143);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v145, 1LL, v146))
      {
        uint64_t v147 = sub_494C(&qword_189CF8);
        memcpy(__dsta, v145, *(void *)(*(void *)(v147 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v146 - 8) + 16LL))(__dsta, v145, v146);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dsta, 0LL, 1LL, v146);
      }

      uint64_t v375 = v93[21];
      uint64_t v376 = (void *)((char *)a1 + v375);
      uint64_t v377 = (void *)((char *)a2 + v375);
      uint64_t v378 = v377[1];
      *uint64_t v376 = *v377;
      v376[1] = v378;
      uint64_t v379 = v93[22];
      v380 = (void *)((char *)a1 + v379);
      uint64_t v381 = (void *)((char *)a2 + v379);
      uint64_t v382 = v381[1];
      void *v380 = *v381;
      v380[1] = v382;
      uint64_t v383 = v93[23];
      v384 = (char *)a1 + v383;
      uint64_t v385 = (char *)a2 + v383;
      uint64_t v386 = type metadata accessor for SnippetHeaderModel(0LL);
      swift_bridgeObjectRetain(v378);
      swift_bridgeObjectRetain(v382);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v385, 1LL, v386))
      {
        uint64_t v387 = sub_494C(&qword_18A1A8);
        memcpy(v384, v385, *(void *)(*(void *)(v387 - 8) + 64LL));
      }

      else
      {
        uint64_t v549 = type metadata accessor for SpeakableString(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v549 - 8) + 16LL))(v384, v385, v549);
        uint64_t v550 = *(int *)(v386 + 20);
        uint64_t v551 = &v384[v550];
        uint64_t v552 = &v385[v550];
        uint64_t v553 = *((void *)v552 + 1);
        *(void *)uint64_t v551 = *(void *)v552;
        *((void *)v551 + 1) = v553;
        uint64_t v554 = *(int *)(v386 + 24);
        v555 = &v384[v554];
        uint64_t v556 = &v385[v554];
        uint64_t v557 = *((void *)v556 + 1);
        *(void *)v555 = *(void *)v556;
        *((void *)v555 + 1) = v557;
        swift_bridgeObjectRetain(v553);
        swift_bridgeObjectRetain(v557);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v384, 0LL, 1LL, v386);
      }

      uint64_t v20 = a1;
      uint64_t v21 = v616;
      uint64_t v22 = 1LL;
      goto LABEL_108;
    case 2u:
      uint64_t v10 = type metadata accessor for AppPunchout(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v10))
      {
        uint64_t v11 = sub_494C(&qword_18A1A0);
        memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v10);
      }

      uint64_t v148 = (int *)type metadata accessor for BloodPressureLogModel(0LL);
      uint64_t v149 = v148[5];
      uint64_t v150 = (void *)((char *)a1 + v149);
      uint64_t v151 = (void *)((char *)a2 + v149);
      uint64_t v152 = v151[1];
      *uint64_t v150 = *v151;
      v150[1] = v152;
      uint64_t v153 = v148[6];
      uint64_t v154 = (void *)((char *)a1 + v153);
      uint64_t v155 = (void *)((char *)a2 + v153);
      uint64_t v156 = v155[1];
      *uint64_t v154 = *v155;
      v154[1] = v156;
      uint64_t v157 = v148[7];
      uint64_t v158 = (void *)((char *)a1 + v157);
      uint64_t v159 = (void *)((char *)a2 + v157);
      uint64_t v160 = v159[1];
      *uint64_t v158 = *v159;
      v158[1] = v160;
      uint64_t v161 = v148[8];
      uint64_t v162 = (char *)a1 + v161;
      uint64_t v163 = (char *)a2 + v161;
      uint64_t v164 = type metadata accessor for SnippetHeaderModel(0LL);
      swift_bridgeObjectRetain(v152);
      swift_bridgeObjectRetain(v156);
      swift_bridgeObjectRetain(v160);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v163, 1LL, v164))
      {
        uint64_t v165 = sub_494C(&qword_18A1A8);
        memcpy(v162, v163, *(void *)(*(void *)(v165 - 8) + 64LL));
      }

      else
      {
        uint64_t v388 = type metadata accessor for SpeakableString(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v388 - 8) + 16LL))(v162, v163, v388);
        uint64_t v389 = *(int *)(v164 + 20);
        uint64_t v390 = &v162[v389];
        uint64_t v391 = &v163[v389];
        uint64_t v392 = *((void *)v391 + 1);
        *(void *)uint64_t v390 = *(void *)v391;
        *((void *)v390 + 1) = v392;
        uint64_t v393 = *(int *)(v164 + 24);
        v394 = &v162[v393];
        uint64_t v395 = &v163[v393];
        uint64_t v396 = *((void *)v395 + 1);
        *(void *)v394 = *(void *)v395;
        *((void *)v394 + 1) = v396;
        swift_bridgeObjectRetain(v392);
        swift_bridgeObjectRetain(v396);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v162, 0LL, 1LL, v164);
      }

      uint64_t v397 = v148[9];
      v398 = (void *)((char *)a1 + v397);
      uint64_t v399 = (void *)((char *)a2 + v397);
      uint64_t v400 = v399[1];
      void *v398 = *v399;
      v398[1] = v400;
      uint64_t v401 = v148[10];
      v402 = (void *)((char *)a1 + v401);
      uint64_t v403 = (void *)((char *)a2 + v401);
      uint64_t v404 = v403[1];
      void *v402 = *v403;
      v402[1] = v404;
      swift_bridgeObjectRetain(v400);
      swift_bridgeObjectRetain(v404);
      uint64_t v20 = a1;
      uint64_t v21 = a3;
      uint64_t v22 = 2LL;
      goto LABEL_108;
    case 3u:
      uint64_t v12 = type metadata accessor for AppPunchout(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v12))
      {
        uint64_t v13 = sub_494C(&qword_18A1A0);
        memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16LL))(a1, a2, v12);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v12);
      }

      uint64_t v166 = (int *)type metadata accessor for CycleTrackingLogModel(0LL);
      uint64_t v167 = v166[5];
      uint64_t v168 = (void *)((char *)a1 + v167);
      uint64_t v169 = (void *)((char *)a2 + v167);
      uint64_t v170 = v169[1];
      *uint64_t v168 = *v169;
      v168[1] = v170;
      uint64_t v171 = v166[6];
      uint64_t v172 = (void *)((char *)a1 + v171);
      uint64_t v173 = (void *)((char *)a2 + v171);
      uint64_t v174 = v173[1];
      *uint64_t v172 = *v173;
      v172[1] = v174;
      uint64_t v175 = v166[7];
      uint64_t v176 = (void *)((char *)a1 + v175);
      uint64_t v177 = (void *)((char *)a2 + v175);
      uint64_t v178 = v177[1];
      *uint64_t v176 = *v177;
      v176[1] = v178;
      uint64_t v179 = v166[8];
      uint64_t v180 = (char *)a1 + v179;
      uint64_t v181 = (char *)a2 + v179;
      uint64_t v182 = type metadata accessor for SnippetHeaderModel(0LL);
      swift_bridgeObjectRetain(v170);
      swift_bridgeObjectRetain(v174);
      swift_bridgeObjectRetain(v178);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v181, 1LL, v182))
      {
        uint64_t v183 = sub_494C(&qword_18A1A8);
        memcpy(v180, v181, *(void *)(*(void *)(v183 - 8) + 64LL));
      }

      else
      {
        uint64_t v405 = type metadata accessor for SpeakableString(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v405 - 8) + 16LL))(v180, v181, v405);
        uint64_t v406 = *(int *)(v182 + 20);
        uint64_t v407 = &v180[v406];
        uint64_t v408 = &v181[v406];
        uint64_t v409 = *((void *)v408 + 1);
        *(void *)uint64_t v407 = *(void *)v408;
        *((void *)v407 + 1) = v409;
        uint64_t v410 = *(int *)(v182 + 24);
        v411 = &v180[v410];
        uint64_t v412 = &v181[v410];
        uint64_t v413 = *((void *)v412 + 1);
        *(void *)v411 = *(void *)v412;
        *((void *)v411 + 1) = v413;
        swift_bridgeObjectRetain(v409);
        swift_bridgeObjectRetain(v413);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v180, 0LL, 1LL, v182);
      }

      uint64_t v414 = v166[9];
      v415 = (char *)a1 + v414;
      uint64_t v416 = (char *)a2 + v414;
      uint64_t v417 = type metadata accessor for URL(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v416, 1LL, v417))
      {
        uint64_t v418 = sub_494C(&qword_189CF8);
        memcpy(v415, v416, *(void *)(*(void *)(v418 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v417 - 8) + 16LL))(v415, v416, v417);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v415, 0LL, 1LL, v417);
      }

      uint64_t v20 = a1;
      uint64_t v21 = a3;
      uint64_t v22 = 3LL;
      goto LABEL_108;
    case 4u:
      uint64_t v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      uint64_t v15 = *(int *)(type metadata accessor for GenericButtonModel(0LL) + 20);
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for URL(0LL);
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16LL);
      swift_bridgeObjectRetain(v14);
      v19(v16, v17, v18);
      uint64_t v20 = a1;
      uint64_t v21 = a3;
      uint64_t v22 = 4LL;
      goto LABEL_108;
    case 5u:
      uint64_t v23 = a2[1];
      *a1 = *a2;
      a1[1] = v23;
      uint64_t v24 = a2[3];
      a1[2] = a2[2];
      a1[3] = v24;
      uint64_t v25 = a2[5];
      a1[4] = a2[4];
      a1[5] = v25;
      *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      uint64_t v20 = a1;
      uint64_t v21 = a3;
      uint64_t v22 = 5LL;
      goto LABEL_108;
    case 6u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      uint64_t v26 = a2[2];
      a1[1] = a2[1];
      a1[2] = v26;
      uint64_t v27 = (int *)type metadata accessor for GenericMedCompletedLogModel(0LL);
      uint64_t v28 = v27[6];
      uint64_t v29 = (char *)a1 + v28;
      uint64_t v30 = (char *)a2 + v28;
      uint64_t v31 = type metadata accessor for AppPunchout(0LL);
      swift_bridgeObjectRetain(v26);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v30, 1LL, v31))
      {
        uint64_t v32 = sub_494C(&qword_18A1A0);
        memcpy(v29, v30, *(void *)(*(void *)(v32 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16LL))(v29, v30, v31);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v29, 0LL, 1LL, v31);
      }

      *((_BYTE *)a1 + v27[7]) = *((_BYTE *)a2 + v27[7]);
      uint64_t v184 = v27[8];
      uint64_t v185 = (void *)((char *)a1 + v184);
      uint64_t v186 = (void *)((char *)a2 + v184);
      uint64_t v187 = v186[1];
      *uint64_t v185 = *v186;
      v185[1] = v187;
      *((_BYTE *)a1 + v27[9]) = *((_BYTE *)a2 + v27[9]);
      uint64_t v188 = v27[10];
      uint64_t v189 = (void *)((char *)a1 + v188);
      uint64_t v190 = (void *)((char *)a2 + v188);
      uint64_t v191 = v190[1];
      *uint64_t v189 = *v190;
      v189[1] = v191;
      uint64_t v192 = v27[11];
      uint64_t v193 = (void *)((char *)a1 + v192);
      uint64_t v194 = (void *)((char *)a2 + v192);
      uint64_t v195 = v194[1];
      *uint64_t v193 = *v194;
      v193[1] = v195;
      uint64_t v196 = v27[12];
      uint64_t v197 = (void *)((char *)a1 + v196);
      uint64_t v198 = (void *)((char *)a2 + v196);
      uint64_t v199 = v198[1];
      *uint64_t v197 = *v198;
      v197[1] = v199;
      uint64_t v200 = v27[13];
      uint64_t v201 = (void *)((char *)a1 + v200);
      uint64_t v202 = (void *)((char *)a2 + v200);
      uint64_t v203 = v202[1];
      *uint64_t v201 = *v202;
      v201[1] = v203;
      uint64_t v204 = v27[14];
      uint64_t v205 = (char *)a1 + v204;
      uint64_t v206 = (char *)a2 + v204;
      uint64_t v207 = type metadata accessor for SnippetHeaderModel(0LL);
      swift_bridgeObjectRetain(v187);
      swift_bridgeObjectRetain(v191);
      swift_bridgeObjectRetain(v195);
      swift_bridgeObjectRetain(v199);
      swift_bridgeObjectRetain(v203);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v206, 1LL, v207))
      {
        uint64_t v208 = sub_494C(&qword_18A1A8);
        memcpy(v205, v206, *(void *)(*(void *)(v208 - 8) + 64LL));
      }

      else
      {
        uint64_t v419 = type metadata accessor for SpeakableString(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v419 - 8) + 16LL))(v205, v206, v419);
        uint64_t v420 = *(int *)(v207 + 20);
        uint64_t v421 = &v205[v420];
        uint64_t v422 = &v206[v420];
        uint64_t v423 = *((void *)v422 + 1);
        *(void *)uint64_t v421 = *(void *)v422;
        *((void *)v421 + 1) = v423;
        uint64_t v424 = *(int *)(v207 + 24);
        v425 = &v205[v424];
        uint64_t v426 = &v206[v424];
        uint64_t v427 = *((void *)v426 + 1);
        *(void *)v425 = *(void *)v426;
        *((void *)v425 + 1) = v427;
        swift_bridgeObjectRetain(v423);
        swift_bridgeObjectRetain(v427);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v205, 0LL, 1LL, v207);
      }

      uint64_t v20 = a1;
      uint64_t v21 = a3;
      uint64_t v22 = 6LL;
      goto LABEL_108;
    case 7u:
      uint64_t v33 = type metadata accessor for SnippetHeaderModel(0LL);
      uint64_t v617 = a3;
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v33))
      {
        uint64_t v34 = sub_494C(&qword_18A1A8);
        memcpy(a1, a2, *(void *)(*(void *)(v34 - 8) + 64LL));
      }

      else
      {
        uint64_t v209 = type metadata accessor for SpeakableString(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v209 - 8) + 16LL))(a1, a2, v209);
        uint64_t v210 = *(int *)(v33 + 20);
        uint64_t v211 = (void *)((char *)a1 + v210);
        uint64_t v212 = (void *)((char *)a2 + v210);
        uint64_t v213 = v212[1];
        *uint64_t v211 = *v212;
        v211[1] = v213;
        uint64_t v214 = *(int *)(v33 + 24);
        uint64_t v215 = (void *)((char *)a1 + v214);
        uint64_t v216 = (void *)((char *)a2 + v214);
        uint64_t v217 = v216[1];
        *uint64_t v215 = *v216;
        v215[1] = v217;
        swift_bridgeObjectRetain(v213);
        swift_bridgeObjectRetain(v217);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v33);
      }

      uint64_t v218 = (int *)type metadata accessor for HealthDataLogModel(0LL);
      *(void *)((char *)a1 + v218[5]) = *(void *)((char *)a2 + v218[5]);
      uint64_t v219 = v218[6];
      uint64_t v220 = (void *)((char *)a1 + v219);
      uint64_t v221 = (void *)((char *)a2 + v219);
      uint64_t v222 = v221[1];
      *uint64_t v220 = *v221;
      v220[1] = v222;
      uint64_t v223 = v218[7];
      uint64_t v224 = (void *)((char *)a1 + v223);
      uint64_t v225 = (void *)((char *)a2 + v223);
      uint64_t v226 = v225[1];
      *uint64_t v224 = *v225;
      v224[1] = v226;
      uint64_t v227 = v218[8];
      uint64_t v228 = (void *)((char *)a1 + v227);
      uint64_t v229 = (void *)((char *)a2 + v227);
      uint64_t v230 = v229[1];
      *uint64_t v228 = *v229;
      v228[1] = v230;
      uint64_t v231 = v218[9];
      uint64_t v232 = (void *)((char *)a1 + v231);
      uint64_t v233 = (void *)((char *)a2 + v231);
      uint64_t v234 = v233[1];
      *uint64_t v232 = *v233;
      v232[1] = v234;
      uint64_t v235 = v218[10];
      __dstb = (char *)a1 + v235;
      uint64_t v236 = (char *)a2 + v235;
      uint64_t v237 = type metadata accessor for AppPunchout(0LL);
      swift_retain();
      swift_bridgeObjectRetain(v222);
      swift_bridgeObjectRetain(v226);
      swift_bridgeObjectRetain(v230);
      swift_bridgeObjectRetain(v234);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v236, 1LL, v237))
      {
        uint64_t v238 = sub_494C(&qword_18A1A0);
        memcpy(__dstb, v236, *(void *)(*(void *)(v238 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v237 - 8) + 16LL))(__dstb, v236, v237);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dstb, 0LL, 1LL, v237);
      }

      uint64_t v428 = v218[11];
      v429 = (void *)((char *)a1 + v428);
      uint64_t v430 = (void *)((char *)a2 + v428);
      uint64_t v431 = v430[1];
      void *v429 = *v430;
      v429[1] = v431;
      swift_bridgeObjectRetain(v431);
      uint64_t v20 = a1;
      uint64_t v21 = v617;
      uint64_t v22 = 7LL;
      goto LABEL_108;
    case 8u:
      uint64_t v35 = type metadata accessor for AppPunchout(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v35))
      {
        uint64_t v36 = sub_494C(&qword_18A1A0);
        memcpy(a1, a2, *(void *)(*(void *)(v36 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v35 - 8) + 16LL))(a1, a2, v35);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v35);
      }

      uint64_t v239 = (int *)type metadata accessor for GenericQueryModel(0LL);
      uint64_t v240 = v239[5];
      uint64_t v241 = (char *)a1 + v240;
      uint64_t v242 = (char *)a2 + v240;
      *(void *)uint64_t v241 = *(void *)v242;
      v241[8] = v242[8];
      uint64_t v243 = v239[6];
      uint64_t v244 = (char *)a1 + v243;
      uint64_t v245 = (char *)a2 + v243;
      *(void *)uint64_t v244 = *(void *)v245;
      v244[8] = v245[8];
      uint64_t v246 = v239[7];
      uint64_t v247 = (char *)a1 + v246;
      uint64_t v248 = (char *)a2 + v246;
      v247[8] = v248[8];
      *(void *)uint64_t v247 = *(void *)v248;
      uint64_t v249 = v239[8];
      uint64_t v250 = (char *)a1 + v249;
      uint64_t v251 = (char *)a2 + v249;
      v250[8] = v251[8];
      *(void *)uint64_t v250 = *(void *)v251;
      uint64_t v252 = v239[9];
      uint64_t v253 = (char *)a1 + v252;
      uint64_t v254 = (char *)a2 + v252;
      v253[8] = v254[8];
      *(void *)uint64_t v253 = *(void *)v254;
      uint64_t v255 = v239[10];
      uint64_t v256 = (char *)a1 + v255;
      uint64_t v257 = (char *)a2 + v255;
      uint64_t v258 = type metadata accessor for SpeakableString(0LL);
      uint64_t v621 = a3;
      uint64_t v608 = v258;
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v257, 1LL, v258))
      {
        uint64_t v259 = sub_494C(&qword_189D00);
        memcpy(v256, v257, *(void *)(*(void *)(v259 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v258 - 8) + 16LL))(v256, v257, v258);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v256, 0LL, 1LL, v258);
      }

      uint64_t v432 = v239[11];
      v433 = (void *)((char *)a1 + v432);
      uint64_t v434 = (void *)((char *)a2 + v432);
      __dstd = (void *)v434[1];
      void *v433 = *v434;
      v433[1] = __dstd;
      uint64_t v435 = v239[12];
      v436 = (void *)((char *)a1 + v435);
      v437 = (void *)((char *)a2 + v435);
      uint64_t v438 = v437[1];
      void *v436 = *v437;
      v436[1] = v438;
      uint64_t v439 = v239[13];
      v440 = (void *)((char *)a1 + v439);
      uint64_t v441 = (void *)((char *)a2 + v439);
      uint64_t v442 = v441[1];
      void *v440 = *v441;
      v440[1] = v442;
      uint64_t v443 = v239[14];
      v444 = (void *)((char *)a1 + v443);
      uint64_t v445 = (void *)((char *)a2 + v443);
      uint64_t v446 = v445[1];
      void *v444 = *v445;
      v444[1] = v446;
      uint64_t v447 = v239[15];
      v448 = (void *)((char *)a1 + v447);
      uint64_t v449 = (void *)((char *)a2 + v447);
      uint64_t v450 = v449[1];
      void *v448 = *v449;
      v448[1] = v450;
      uint64_t v451 = v239[16];
      v452 = (void *)((char *)a1 + v451);
      uint64_t v453 = (void *)((char *)a2 + v451);
      uint64_t v454 = v453[1];
      void *v452 = *v453;
      v452[1] = v454;
      uint64_t v455 = v239[17];
      v456 = (void *)((char *)a1 + v455);
      uint64_t v457 = (void *)((char *)a2 + v455);
      uint64_t v458 = v457[1];
      void *v456 = *v457;
      v456[1] = v458;
      uint64_t v459 = v239[18];
      v460 = (char *)a1 + v459;
      uint64_t v461 = (char *)a2 + v459;
      uint64_t v462 = type metadata accessor for SnippetHeaderModel(0LL);
      swift_bridgeObjectRetain(__dstd);
      swift_bridgeObjectRetain(v438);
      swift_bridgeObjectRetain(v442);
      swift_bridgeObjectRetain(v446);
      swift_bridgeObjectRetain(v450);
      swift_bridgeObjectRetain(v454);
      swift_bridgeObjectRetain(v458);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v461, 1LL, v462))
      {
        uint64_t v463 = sub_494C(&qword_18A1A8);
        memcpy(v460, v461, *(void *)(*(void *)(v463 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *))(*(void *)(v608 - 8) + 16LL))(v460, v461);
        uint64_t v558 = *(int *)(v462 + 20);
        v559 = &v460[v558];
        uint64_t v560 = &v461[v558];
        uint64_t v561 = *((void *)v560 + 1);
        *(void *)v559 = *(void *)v560;
        *((void *)v559 + 1) = v561;
        uint64_t v562 = *(int *)(v462 + 24);
        v563 = &v460[v562];
        uint64_t v564 = &v461[v562];
        uint64_t v565 = *((void *)v564 + 1);
        *(void *)v563 = *(void *)v564;
        *((void *)v563 + 1) = v565;
        swift_bridgeObjectRetain(v561);
        swift_bridgeObjectRetain(v565);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v460, 0LL, 1LL, v462);
      }

      uint64_t v21 = v621;
      uint64_t v20 = a1;
      uint64_t v22 = 8LL;
      goto LABEL_108;
    case 9u:
      uint64_t v37 = type metadata accessor for AppPunchout(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v37))
      {
        uint64_t v38 = sub_494C(&qword_18A1A0);
        memcpy(a1, a2, *(void *)(*(void *)(v38 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v37 - 8) + 16LL))(a1, a2, v37);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v37);
      }

      uint64_t v260 = (int *)type metadata accessor for HeightQueryModel(0LL);
      uint64_t v261 = v260[5];
      uint64_t v262 = (char *)a1 + v261;
      uint64_t v263 = (char *)a2 + v261;
      *(void *)uint64_t v262 = *(void *)v263;
      v262[8] = v263[8];
      uint64_t v264 = v260[6];
      uint64_t v265 = (char *)a1 + v264;
      uint64_t v266 = (char *)a2 + v264;
      *(void *)uint64_t v265 = *(void *)v266;
      v265[8] = v266[8];
      uint64_t v267 = v260[7];
      uint64_t v268 = (char *)a1 + v267;
      uint64_t v269 = (char *)a2 + v267;
      v268[8] = v269[8];
      *(void *)uint64_t v268 = *(void *)v269;
      uint64_t v270 = v260[8];
      uint64_t v271 = (char *)a1 + v270;
      uint64_t v272 = (char *)a2 + v270;
      uint64_t v273 = type metadata accessor for SpeakableString(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v272, 1LL, v273))
      {
        uint64_t v274 = sub_494C(&qword_189D00);
        memcpy(v271, v272, *(void *)(*(void *)(v274 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v273 - 8) + 16LL))(v271, v272, v273);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v271, 0LL, 1LL, v273);
      }

      *((_BYTE *)a1 + v260[9]) = *((_BYTE *)a2 + v260[9]);
      uint64_t v464 = v260[10];
      uint64_t v465 = (char *)a1 + v464;
      uint64_t v466 = (char *)a2 + v464;
      uint64_t v467 = type metadata accessor for SnippetHeaderModel(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v466, 1LL, v467))
      {
        uint64_t v468 = sub_494C(&qword_18A1A8);
        memcpy(v465, v466, *(void *)(*(void *)(v468 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v273 - 8) + 16LL))(v465, v466, v273);
        uint64_t v566 = *(int *)(v467 + 20);
        v567 = &v465[v566];
        uint64_t v568 = &v466[v566];
        uint64_t v569 = *((void *)v568 + 1);
        *(void *)v567 = *(void *)v568;
        *((void *)v567 + 1) = v569;
        uint64_t v570 = *(int *)(v467 + 24);
        v571 = &v465[v570];
        uint64_t v572 = &v466[v570];
        uint64_t v573 = *((void *)v572 + 1);
        *(void *)v571 = *(void *)v572;
        *((void *)v571 + 1) = v573;
        swift_bridgeObjectRetain(v569);
        swift_bridgeObjectRetain(v573);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v465, 0LL, 1LL, v467);
      }

      uint64_t v574 = v260[11];
      v575 = (void *)((char *)a1 + v574);
      uint64_t v576 = (void *)((char *)a2 + v574);
      uint64_t v577 = v576[1];
      void *v575 = *v576;
      v575[1] = v577;
      uint64_t v578 = v260[12];
      v579 = (void *)((char *)a1 + v578);
      uint64_t v580 = (void *)((char *)a2 + v578);
      uint64_t v581 = v580[1];
      void *v579 = *v580;
      v579[1] = v581;
      uint64_t v582 = v260[13];
      v583 = (void *)((char *)a1 + v582);
      uint64_t v584 = (void *)((char *)a2 + v582);
      uint64_t v585 = v584[1];
      void *v583 = *v584;
      v583[1] = v585;
      swift_bridgeObjectRetain(v577);
      swift_bridgeObjectRetain(v581);
      swift_bridgeObjectRetain(v585);
      uint64_t v20 = a1;
      uint64_t v21 = a3;
      uint64_t v22 = 9LL;
      goto LABEL_108;
    case 0xAu:
      *a1 = *a2;
      *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
      a1[2] = a2[2];
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      a1[4] = a2[4];
      *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
      *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
      a1[6] = a2[6];
      uint64_t v39 = a2[8];
      *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
      a1[8] = v39;
      a1[10] = a2[10];
      *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
      uint64_t v40 = a2[13];
      a1[12] = a2[12];
      a1[13] = v40;
      uint64_t v41 = a2[15];
      a1[14] = a2[14];
      a1[15] = v41;
      uint64_t v42 = a2[17];
      a1[16] = a2[16];
      a1[17] = v42;
      uint64_t v43 = a2[19];
      a1[18] = a2[18];
      a1[19] = v43;
      uint64_t v44 = a2[21];
      a1[20] = a2[20];
      a1[21] = v44;
      uint64_t v45 = a2[23];
      a1[22] = a2[22];
      a1[23] = v45;
      uint64_t v46 = a2[25];
      a1[24] = a2[24];
      a1[25] = v46;
      uint64_t v47 = a2[27];
      a1[26] = a2[26];
      a1[27] = v47;
      uint64_t v618 = a3;
      uint64_t v48 = a2[29];
      a1[28] = a2[28];
      a1[29] = v48;
      *((_BYTE *)a1 + 240) = *((_BYTE *)a2 + 240);
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRetain(v48);
      uint64_t v20 = a1;
      uint64_t v21 = v618;
      uint64_t v22 = 10LL;
      goto LABEL_108;
    case 0xBu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v49 = a2[3];
      a1[2] = a2[2];
      a1[3] = v49;
      uint64_t v51 = a2[4];
      uint64_t v50 = a2[5];
      a1[4] = v51;
      a1[5] = v50;
      uint64_t v53 = a2[6];
      uint64_t v52 = a2[7];
      a1[6] = v53;
      a1[7] = v52;
      uint64_t v55 = a2[8];
      uint64_t v54 = a2[9];
      a1[8] = v55;
      a1[9] = v54;
      uint64_t v56 = a2[10];
      a1[10] = v56;
      uint64_t v57 = *(int *)(type metadata accessor for SingleActivitySummaryModel(0LL) + 44);
      uint64_t v58 = (char *)a1 + v57;
      uint64_t v59 = (char *)a2 + v57;
      uint64_t v60 = type metadata accessor for SnippetHeaderModel(0LL);
      swift_retain();
      swift_bridgeObjectRetain(v51);
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRetain(v56);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v59, 1LL, v60))
      {
        uint64_t v61 = sub_494C(&qword_18A1A8);
        memcpy(v58, v59, *(void *)(*(void *)(v61 - 8) + 64LL));
      }

      else
      {
        uint64_t v275 = type metadata accessor for SpeakableString(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v275 - 8) + 16LL))(v58, v59, v275);
        uint64_t v276 = *(int *)(v60 + 20);
        uint64_t v277 = &v58[v276];
        uint64_t v278 = &v59[v276];
        uint64_t v279 = *((void *)v278 + 1);
        *(void *)uint64_t v277 = *(void *)v278;
        *((void *)v277 + 1) = v279;
        uint64_t v280 = *(int *)(v60 + 24);
        uint64_t v281 = &v58[v280];
        uint64_t v282 = &v59[v280];
        uint64_t v283 = *((void *)v282 + 1);
        *(void *)uint64_t v281 = *(void *)v282;
        *((void *)v281 + 1) = v283;
        swift_bridgeObjectRetain(v279);
        swift_bridgeObjectRetain(v283);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v58, 0LL, 1LL, v60);
      }

      uint64_t v20 = a1;
      uint64_t v21 = a3;
      uint64_t v22 = 11LL;
      goto LABEL_108;
    case 0xCu:
      uint64_t v62 = type metadata accessor for AppPunchout(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v62))
      {
        uint64_t v63 = sub_494C(&qword_18A1A0);
        memcpy(a1, a2, *(void *)(*(void *)(v63 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v62 - 8) + 16LL))(a1, a2, v62);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v62);
      }

      uint64_t v284 = (int *)type metadata accessor for SleepQueryModel(0LL);
      uint64_t v285 = v284[5];
      uint64_t v286 = (char *)a1 + v285;
      uint64_t v287 = (char *)a2 + v285;
      uint64_t v288 = type metadata accessor for SnippetHeaderModel(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v287, 1LL, v288))
      {
        uint64_t v289 = sub_494C(&qword_18A1A8);
        memcpy(v286, v287, *(void *)(*(void *)(v289 - 8) + 64LL));
      }

      else
      {
        uint64_t v469 = type metadata accessor for SpeakableString(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v469 - 8) + 16LL))(v286, v287, v469);
        uint64_t v470 = *(int *)(v288 + 20);
        uint64_t v471 = &v286[v470];
        uint64_t v472 = &v287[v470];
        uint64_t v473 = *((void *)v472 + 1);
        *(void *)uint64_t v471 = *(void *)v472;
        *((void *)v471 + 1) = v473;
        uint64_t v474 = *(int *)(v288 + 24);
        v475 = &v286[v474];
        uint64_t v476 = &v287[v474];
        uint64_t v477 = *((void *)v476 + 1);
        *(void *)v475 = *(void *)v476;
        *((void *)v475 + 1) = v477;
        swift_bridgeObjectRetain(v473);
        swift_bridgeObjectRetain(v477);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v286, 0LL, 1LL, v288);
      }

      uint64_t v478 = v284[6];
      v479 = (void *)((char *)a1 + v478);
      uint64_t v480 = (void *)((char *)a2 + v478);
      uint64_t v481 = v480[1];
      void *v479 = *v480;
      v479[1] = v481;
      uint64_t v482 = v284[7];
      v483 = (void *)((char *)a1 + v482);
      uint64_t v484 = (void *)((char *)a2 + v482);
      __dste = (void *)v484[1];
      void *v483 = *v484;
      v483[1] = __dste;
      uint64_t v485 = v284[8];
      v486 = (void *)((char *)a1 + v485);
      v487 = (void *)((char *)a2 + v485);
      uint64_t v609 = v487[1];
      void *v486 = *v487;
      v486[1] = v609;
      uint64_t v488 = v284[9];
      v489 = (void *)((char *)a1 + v488);
      v490 = (void *)((char *)a2 + v488);
      uint64_t v491 = v490[1];
      void *v489 = *v490;
      v489[1] = v491;
      uint64_t v492 = v284[10];
      v493 = (void *)((char *)a1 + v492);
      uint64_t v494 = (void *)((char *)a2 + v492);
      uint64_t v495 = v494[1];
      void *v493 = *v494;
      v493[1] = v495;
      *(void *)((char *)a1 + v284[11]) = *(void *)((char *)a2 + v284[11]);
      *(void *)((char *)a1 + v284[12]) = *(void *)((char *)a2 + v284[12]);
      *(void *)((char *)a1 + v284[13]) = *(void *)((char *)a2 + v284[13]);
      *(void *)((char *)a1 + v284[14]) = *(void *)((char *)a2 + v284[14]);
      uint64_t v496 = v284[15];
      v497 = (void *)((char *)a1 + v496);
      uint64_t v498 = (void *)((char *)a2 + v496);
      uint64_t v499 = v498[1];
      void *v497 = *v498;
      v497[1] = v499;
      uint64_t v500 = v284[16];
      v501 = (void *)((char *)a1 + v500);
      uint64_t v502 = (void *)((char *)a2 + v500);
      uint64_t v503 = v502[1];
      void *v501 = *v502;
      v501[1] = v503;
      uint64_t v504 = v284[17];
      v505 = (void *)((char *)a1 + v504);
      uint64_t v506 = (void *)((char *)a2 + v504);
      uint64_t v507 = v506[1];
      void *v505 = *v506;
      v505[1] = v507;
      swift_bridgeObjectRetain(v481);
      swift_bridgeObjectRetain(__dste);
      swift_bridgeObjectRetain(v609);
      swift_bridgeObjectRetain(v491);
      swift_bridgeObjectRetain(v495);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain(v499);
      swift_bridgeObjectRetain(v503);
      swift_bridgeObjectRetain(v507);
      uint64_t v20 = a1;
      uint64_t v21 = a3;
      uint64_t v22 = 12LL;
      goto LABEL_108;
    case 0xDu:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      uint64_t v64 = a2[2];
      a1[1] = a2[1];
      a1[2] = v64;
      uint64_t v65 = a2[4];
      a1[3] = a2[3];
      a1[4] = v65;
      uint64_t v66 = a2[6];
      a1[5] = a2[5];
      a1[6] = v66;
      uint64_t v67 = (int *)type metadata accessor for SpecificMedCompletedLogModel(0LL);
      uint64_t v68 = v67[8];
      uint64_t v69 = (char *)a1 + v68;
      uint64_t v70 = (char *)a2 + v68;
      uint64_t v71 = type metadata accessor for AppPunchout(0LL);
      swift_bridgeObjectRetain(v64);
      swift_bridgeObjectRetain(v65);
      swift_bridgeObjectRetain(v66);
      uint64_t v619 = a3;
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v70, 1LL, v71))
      {
        uint64_t v72 = sub_494C(&qword_18A1A0);
        memcpy(v69, v70, *(void *)(*(void *)(v72 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 16LL))(v69, v70, v71);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v69, 0LL, 1LL, v71);
      }

      uint64_t v290 = v67[9];
      uint64_t v291 = (char *)a1 + v290;
      uint64_t v292 = (char *)a2 + v290;
      *(void *)uint64_t v291 = *(void *)v292;
      v291[8] = v292[8];
      uint64_t v293 = v67[10];
      uint64_t v294 = (void *)((char *)a1 + v293);
      uint64_t v295 = (void *)((char *)a2 + v293);
      __dstc = (void *)v295[1];
      *uint64_t v294 = *v295;
      v294[1] = __dstc;
      uint64_t v296 = v67[11];
      uint64_t v297 = (void *)((char *)a1 + v296);
      uint64_t v298 = (void *)((char *)a2 + v296);
      uint64_t v299 = v298[1];
      *uint64_t v297 = *v298;
      v297[1] = v299;
      uint64_t v300 = v67[12];
      uint64_t v301 = (void *)((char *)a1 + v300);
      uint64_t v302 = (void *)((char *)a2 + v300);
      uint64_t v303 = v302[1];
      *uint64_t v301 = *v302;
      v301[1] = v303;
      uint64_t v304 = v67[13];
      uint64_t v305 = (void *)((char *)a1 + v304);
      uint64_t v306 = (void *)((char *)a2 + v304);
      uint64_t v307 = v306[1];
      *uint64_t v305 = *v306;
      v305[1] = v307;
      *((_BYTE *)a1 + v67[14]) = *((_BYTE *)a2 + v67[14]);
      *((_BYTE *)a1 + v67[15]) = *((_BYTE *)a2 + v67[15]);
      uint64_t v308 = v67[16];
      uint64_t v309 = (void *)((char *)a1 + v308);
      uint64_t v310 = (void *)((char *)a2 + v308);
      uint64_t v311 = v310[1];
      *uint64_t v309 = *v310;
      v309[1] = v311;
      uint64_t v312 = v67[17];
      uint64_t v313 = (void *)((char *)a1 + v312);
      uint64_t v314 = (void *)((char *)a2 + v312);
      uint64_t v315 = v314[1];
      *uint64_t v313 = *v314;
      v313[1] = v315;
      uint64_t v316 = v67[18];
      uint64_t v317 = (void *)((char *)a1 + v316);
      uint64_t v318 = (void *)((char *)a2 + v316);
      uint64_t v319 = v318[1];
      *uint64_t v317 = *v318;
      v317[1] = v319;
      uint64_t v320 = v67[19];
      v321 = (char *)a1 + v320;
      uint64_t v322 = (char *)a2 + v320;
      uint64_t v323 = type metadata accessor for SnippetHeaderModel(0LL);
      swift_bridgeObjectRetain(__dstc);
      swift_bridgeObjectRetain(v299);
      swift_bridgeObjectRetain(v303);
      swift_bridgeObjectRetain(v307);
      swift_bridgeObjectRetain(v311);
      swift_bridgeObjectRetain(v315);
      swift_bridgeObjectRetain(v319);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v322, 1LL, v323))
      {
        uint64_t v324 = sub_494C(&qword_18A1A8);
        memcpy(v321, v322, *(void *)(*(void *)(v324 - 8) + 64LL));
      }

      else
      {
        uint64_t v508 = type metadata accessor for SpeakableString(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v508 - 8) + 16LL))(v321, v322, v508);
        uint64_t v509 = *(int *)(v323 + 20);
        uint64_t v510 = &v321[v509];
        uint64_t v511 = &v322[v509];
        uint64_t v512 = *((void *)v511 + 1);
        *(void *)uint64_t v510 = *(void *)v511;
        *((void *)v510 + 1) = v512;
        uint64_t v513 = *(int *)(v323 + 24);
        v514 = &v321[v513];
        uint64_t v515 = &v322[v513];
        uint64_t v516 = *((void *)v515 + 1);
        *(void *)v514 = *(void *)v515;
        *((void *)v514 + 1) = v516;
        swift_bridgeObjectRetain(v512);
        swift_bridgeObjectRetain(v516);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v321, 0LL, 1LL, v323);
      }

      uint64_t v21 = v619;
      uint64_t v20 = a1;
      uint64_t v22 = 13LL;
      goto LABEL_108;
    case 0xEu:
      uint64_t v73 = type metadata accessor for AppPunchout(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v73))
      {
        uint64_t v74 = sub_494C(&qword_18A1A0);
        memcpy(a1, a2, *(void *)(*(void *)(v74 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v73 - 8) + 16LL))(a1, a2, v73);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v73);
      }

      v325 = (int *)type metadata accessor for TemperatureQueryModel(0LL);
      uint64_t v326 = v325[5];
      uint64_t v327 = (char *)a1 + v326;
      v328 = (char *)a2 + v326;
      *(void *)uint64_t v327 = *(void *)v328;
      v327[8] = v328[8];
      uint64_t v329 = v325[6];
      v330 = (char *)a1 + v329;
      v331 = (char *)a2 + v329;
      *(void *)v330 = *(void *)v331;
      v330[8] = v331[8];
      uint64_t v332 = v325[7];
      v333 = (char *)a1 + v332;
      v334 = (char *)a2 + v332;
      v333[8] = v334[8];
      *(void *)v333 = *(void *)v334;
      uint64_t v335 = v325[8];
      v336 = (char *)a1 + v335;
      v337 = (char *)a2 + v335;
      v336[8] = v337[8];
      *(void *)v336 = *(void *)v337;
      uint64_t v338 = v325[9];
      v339 = (char *)a1 + v338;
      v340 = (char *)a2 + v338;
      v339[8] = v340[8];
      *(void *)v339 = *(void *)v340;
      uint64_t v341 = v325[10];
      v342 = (char *)a1 + v341;
      v343 = (char *)a2 + v341;
      uint64_t v344 = type metadata accessor for SpeakableString(0LL);
      uint64_t v622 = a3;
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v343, 1LL, v344))
      {
        uint64_t v345 = sub_494C(&qword_189D00);
        memcpy(v342, v343, *(void *)(*(void *)(v345 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v344 - 8) + 16LL))(v342, v343, v344);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v342, 0LL, 1LL, v344);
      }

      uint64_t v517 = v325[11];
      v518 = (void *)((char *)a1 + v517);
      uint64_t v519 = (void *)((char *)a2 + v517);
      uint64_t v520 = v519[1];
      void *v518 = *v519;
      v518[1] = v520;
      uint64_t v521 = v325[12];
      v522 = (void *)((char *)a1 + v521);
      uint64_t v523 = (void *)((char *)a2 + v521);
      uint64_t v524 = v523[1];
      void *v522 = *v523;
      v522[1] = v524;
      uint64_t v525 = v325[13];
      v526 = (void *)((char *)a1 + v525);
      uint64_t v527 = (void *)((char *)a2 + v525);
      uint64_t v528 = v527[1];
      void *v526 = *v527;
      v526[1] = v528;
      uint64_t v529 = v325[14];
      v530 = (void *)((char *)a1 + v529);
      uint64_t v531 = (void *)((char *)a2 + v529);
      uint64_t v532 = v531[1];
      void *v530 = *v531;
      v530[1] = v532;
      uint64_t v533 = v325[15];
      v534 = (void *)((char *)a1 + v533);
      uint64_t v535 = (void *)((char *)a2 + v533);
      uint64_t v536 = v535[1];
      void *v534 = *v535;
      v534[1] = v536;
      uint64_t v537 = v325[16];
      v538 = (char *)a1 + v537;
      uint64_t v539 = (char *)a2 + v537;
      swift_bridgeObjectRetain(v520);
      swift_bridgeObjectRetain(v524);
      swift_bridgeObjectRetain(v528);
      swift_bridgeObjectRetain(v532);
      swift_bridgeObjectRetain(v536);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v539, 1LL, v344))
      {
        uint64_t v540 = sub_494C(&qword_189D00);
        memcpy(v538, v539, *(void *)(*(void *)(v540 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v344 - 8) + 16LL))(v538, v539, v344);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v538, 0LL, 1LL, v344);
      }

      uint64_t v586 = v325[17];
      v587 = (void *)((char *)a1 + v586);
      uint64_t v588 = (void *)((char *)a2 + v586);
      uint64_t v589 = v588[1];
      void *v587 = *v588;
      v587[1] = v589;
      uint64_t v590 = v325[18];
      v591 = (char *)a1 + v590;
      uint64_t v592 = (char *)a2 + v590;
      uint64_t v593 = type metadata accessor for SnippetHeaderModel(0LL);
      swift_bridgeObjectRetain(v589);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v592, 1LL, v593))
      {
        uint64_t v594 = sub_494C(&qword_18A1A8);
        memcpy(v591, v592, *(void *)(*(void *)(v594 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v344 - 8) + 16LL))(v591, v592, v344);
        uint64_t v595 = *(int *)(v593 + 20);
        uint64_t v596 = &v591[v595];
        uint64_t v597 = &v592[v595];
        uint64_t v598 = *((void *)v597 + 1);
        *(void *)uint64_t v596 = *(void *)v597;
        *((void *)v596 + 1) = v598;
        uint64_t v599 = *(int *)(v593 + 24);
        v600 = &v591[v599];
        uint64_t v601 = &v592[v599];
        uint64_t v602 = *((void *)v601 + 1);
        *(void *)v600 = *(void *)v601;
        *((void *)v600 + 1) = v602;
        swift_bridgeObjectRetain(v598);
        swift_bridgeObjectRetain(v602);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v591, 0LL, 1LL, v593);
      }

      uint64_t v20 = a1;
      uint64_t v21 = v622;
      uint64_t v22 = 14LL;
LABEL_108:
      swift_storeEnumTagMultiPayload(v20, v21, v22);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

void *assignWithCopy for WellnessSnippets(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_182B4((uint64_t)a1, type metadata accessor for WellnessSnippets);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v6 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
        {
          uint64_t v7 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
        }

        Model = (int *)type metadata accessor for OxygenSaturationQueryModel(0LL);
        uint64_t v77 = Model[5];
        uint64_t v78 = (char *)a1 + v77;
        uint64_t v79 = (char *)a2 + v77;
        char v80 = v79[8];
        *(void *)uint64_t v78 = *(void *)v79;
        v78[8] = v80;
        uint64_t v81 = Model[6];
        uint64_t v82 = (char *)a1 + v81;
        uint64_t v83 = (char *)a2 + v81;
        char v84 = v83[8];
        *(void *)uint64_t v82 = *(void *)v83;
        v82[8] = v84;
        uint64_t v85 = Model[7];
        uint64_t v86 = (char *)a1 + v85;
        uint64_t v87 = (char *)a2 + v85;
        char v88 = v87[8];
        *(void *)uint64_t v86 = *(void *)v87;
        v86[8] = v88;
        uint64_t v89 = Model[8];
        uint64_t v90 = (char *)a1 + v89;
        uint64_t v91 = (char *)a2 + v89;
        char v92 = v91[8];
        *(void *)uint64_t v90 = *(void *)v91;
        v90[8] = v92;
        uint64_t v93 = Model[9];
        uint64_t v94 = (char *)a1 + v93;
        uint64_t v95 = (char *)a2 + v93;
        uint64_t v96 = type metadata accessor for SpeakableString(0LL);
        __dst = (void *)v96;
        uint64_t v645 = a3;
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v95, 1LL, v96))
        {
          uint64_t v97 = sub_494C(&qword_189D00);
          memcpy(v94, v95, *(void *)(*(void *)(v97 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v96 - 8) + 16LL))(v94, v95, v96);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v94, 0LL, 1LL, v96);
        }

        uint64_t v371 = Model[10];
        uint64_t v372 = (void *)((char *)a1 + v371);
        uint64_t v373 = (void *)((char *)a2 + v371);
        *uint64_t v372 = *v373;
        uint64_t v374 = v373[1];
        v372[1] = v374;
        uint64_t v375 = Model[11];
        uint64_t v376 = (void *)((char *)a1 + v375);
        uint64_t v377 = (void *)((char *)a2 + v375);
        *uint64_t v376 = *v377;
        uint64_t v378 = v377[1];
        v376[1] = v378;
        uint64_t v379 = Model[12];
        v380 = (void *)((char *)a1 + v379);
        uint64_t v381 = (void *)((char *)a2 + v379);
        void *v380 = *v381;
        uint64_t v382 = v381[1];
        v380[1] = v382;
        uint64_t v383 = Model[13];
        v384 = (void *)((char *)a1 + v383);
        uint64_t v385 = (void *)((char *)a2 + v383);
        void *v384 = *v385;
        uint64_t v386 = v385[1];
        v384[1] = v386;
        uint64_t v387 = Model[14];
        uint64_t v388 = (void *)((char *)a1 + v387);
        uint64_t v389 = (void *)((char *)a2 + v387);
        void *v388 = *v389;
        uint64_t v390 = v389[1];
        v388[1] = v390;
        uint64_t v391 = Model[15];
        uint64_t v392 = (void *)((char *)a1 + v391);
        uint64_t v393 = (void *)((char *)a2 + v391);
        *uint64_t v392 = *v393;
        uint64_t v394 = v393[1];
        v392[1] = v394;
        uint64_t v395 = Model[16];
        uint64_t v396 = (char *)a1 + v395;
        uint64_t v397 = (char *)a2 + v395;
        uint64_t v398 = type metadata accessor for SnippetHeaderModel(0LL);
        swift_bridgeObjectRetain(v374);
        swift_bridgeObjectRetain(v378);
        swift_bridgeObjectRetain(v382);
        swift_bridgeObjectRetain(v386);
        swift_bridgeObjectRetain(v390);
        swift_bridgeObjectRetain(v394);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v397, 1LL, v398))
        {
          uint64_t v399 = sub_494C(&qword_18A1A8);
          memcpy(v396, v397, *(void *)(*(void *)(v399 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *))(*(__dst - 1) + 16LL))(v396, v397);
          uint64_t v566 = *(int *)(v398 + 20);
          v567 = &v396[v566];
          uint64_t v568 = &v397[v566];
          *(void *)v567 = *(void *)v568;
          uint64_t v569 = *((void *)v568 + 1);
          *((void *)v567 + 1) = v569;
          uint64_t v570 = *(int *)(v398 + 24);
          v571 = &v396[v570];
          uint64_t v572 = &v397[v570];
          *(void *)v571 = *(void *)v572;
          uint64_t v573 = *((void *)v572 + 1);
          *((void *)v571 + 1) = v573;
          swift_bridgeObjectRetain(v569);
          swift_bridgeObjectRetain(v573);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v396, 0LL, 1LL, v398);
        }

        uint64_t v21 = v645;
        uint64_t v20 = a1;
        uint64_t v22 = 0LL;
        goto LABEL_109;
      case 1u:
        uint64_t v8 = type metadata accessor for AppPunchout(0LL);
        uint64_t v641 = a3;
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v8))
        {
          uint64_t v9 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v8);
        }

        uint64_t v98 = (int *)type metadata accessor for BloodPressureQueryModel(0LL);
        uint64_t v99 = v98[5];
        uint64_t v100 = (char *)a1 + v99;
        uint64_t v101 = (char *)a2 + v99;
        char v102 = v101[8];
        *(void *)uint64_t v100 = *(void *)v101;
        v100[8] = v102;
        uint64_t v103 = v98[6];
        unint64_t v104 = (char *)a1 + v103;
        unint64_t v105 = (char *)a2 + v103;
        char v106 = v105[8];
        *(void *)unint64_t v104 = *(void *)v105;
        v104[8] = v106;
        uint64_t v107 = v98[7];
        uint64_t v108 = (char *)a1 + v107;
        uint64_t v109 = (char *)a2 + v107;
        char v110 = v109[8];
        *(void *)uint64_t v108 = *(void *)v109;
        v108[8] = v110;
        uint64_t v111 = v98[8];
        uint64_t v112 = (char *)a1 + v111;
        unint64_t v113 = (char *)a2 + v111;
        char v114 = v113[8];
        *(void *)uint64_t v112 = *(void *)v113;
        v112[8] = v114;
        uint64_t v115 = v98[9];
        uint64_t v116 = (char *)a1 + v115;
        uint64_t v117 = (char *)a2 + v115;
        char v118 = v117[8];
        *(void *)uint64_t v116 = *(void *)v117;
        v116[8] = v118;
        uint64_t v119 = v98[10];
        uint64_t v120 = (char *)a1 + v119;
        uint64_t v121 = (char *)a2 + v119;
        uint64_t v122 = *(void *)v121;
        v120[8] = v121[8];
        *(void *)uint64_t v120 = v122;
        uint64_t v123 = v98[11];
        uint64_t v124 = (void *)((char *)a1 + v123);
        uint64_t v125 = (void *)((char *)a2 + v123);
        *uint64_t v124 = *v125;
        uint64_t v632 = v125[1];
        v124[1] = v632;
        uint64_t v126 = v98[12];
        uint64_t v127 = (void *)((char *)a1 + v126);
        uint64_t v128 = (void *)((char *)a2 + v126);
        *uint64_t v127 = *v128;
        uint64_t v631 = v128[1];
        v127[1] = v631;
        uint64_t v129 = v98[13];
        uint64_t v130 = (void *)((char *)a1 + v129);
        uint64_t v131 = (void *)((char *)a2 + v129);
        *uint64_t v130 = *v131;
        uint64_t v630 = v131[1];
        v130[1] = v630;
        uint64_t v132 = v98[14];
        uint64_t v133 = (void *)((char *)a1 + v132);
        uint64_t v134 = (void *)((char *)a2 + v132);
        *uint64_t v133 = *v134;
        uint64_t v629 = v134[1];
        v133[1] = v629;
        uint64_t v135 = v98[15];
        uint64_t v136 = (void *)((char *)a1 + v135);
        uint64_t v137 = (void *)((char *)a2 + v135);
        *uint64_t v136 = *v137;
        uint64_t v138 = v137[1];
        v136[1] = v138;
        uint64_t v139 = v98[16];
        uint64_t v140 = (void *)((char *)a1 + v139);
        uint64_t v141 = (void *)((char *)a2 + v139);
        *uint64_t v140 = *v141;
        uint64_t v142 = v141[1];
        v140[1] = v142;
        uint64_t v143 = v98[17];
        uint64_t v144 = (void *)((char *)a1 + v143);
        uint64_t v145 = (void *)((char *)a2 + v143);
        *uint64_t v144 = *v145;
        uint64_t v146 = v145[1];
        v144[1] = v146;
        uint64_t v147 = v98[18];
        uint64_t v148 = (void *)((char *)a1 + v147);
        uint64_t v149 = (void *)((char *)a2 + v147);
        *uint64_t v148 = *v149;
        uint64_t v150 = v149[1];
        v148[1] = v150;
        uint64_t v151 = v98[19];
        uint64_t v152 = (void *)((char *)a1 + v151);
        uint64_t v153 = (void *)((char *)a2 + v151);
        *uint64_t v152 = *v153;
        uint64_t v154 = v153[1];
        v152[1] = v154;
        uint64_t v155 = v98[20];
        __dsta = (char *)a1 + v155;
        uint64_t v156 = (char *)a2 + v155;
        uint64_t v157 = type metadata accessor for URL(0LL);
        swift_bridgeObjectRetain(v632);
        swift_bridgeObjectRetain(v631);
        swift_bridgeObjectRetain(v630);
        swift_bridgeObjectRetain(v629);
        swift_bridgeObjectRetain(v138);
        swift_bridgeObjectRetain(v142);
        swift_bridgeObjectRetain(v146);
        swift_bridgeObjectRetain(v150);
        swift_bridgeObjectRetain(v154);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v156, 1LL, v157))
        {
          uint64_t v158 = sub_494C(&qword_189CF8);
          memcpy(__dsta, v156, *(void *)(*(void *)(v158 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v157 - 8) + 16LL))(__dsta, v156, v157);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dsta, 0LL, 1LL, v157);
        }

        uint64_t v400 = v98[21];
        uint64_t v401 = (void *)((char *)a1 + v400);
        v402 = (void *)((char *)a2 + v400);
        void *v401 = *v402;
        uint64_t v403 = v402[1];
        v401[1] = v403;
        uint64_t v404 = v98[22];
        uint64_t v405 = (void *)((char *)a1 + v404);
        uint64_t v406 = (void *)((char *)a2 + v404);
        void *v405 = *v406;
        uint64_t v407 = v406[1];
        v405[1] = v407;
        uint64_t v408 = v98[23];
        uint64_t v409 = (char *)a1 + v408;
        uint64_t v410 = (char *)a2 + v408;
        uint64_t v411 = type metadata accessor for SnippetHeaderModel(0LL);
        swift_bridgeObjectRetain(v403);
        swift_bridgeObjectRetain(v407);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v410, 1LL, v411))
        {
          uint64_t v412 = sub_494C(&qword_18A1A8);
          memcpy(v409, v410, *(void *)(*(void *)(v412 - 8) + 64LL));
        }

        else
        {
          uint64_t v574 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v574 - 8) + 16LL))(v409, v410, v574);
          uint64_t v575 = *(int *)(v411 + 20);
          uint64_t v576 = &v409[v575];
          uint64_t v577 = &v410[v575];
          *(void *)uint64_t v576 = *(void *)v577;
          uint64_t v578 = *((void *)v577 + 1);
          *((void *)v576 + 1) = v578;
          uint64_t v579 = *(int *)(v411 + 24);
          uint64_t v580 = &v409[v579];
          uint64_t v581 = &v410[v579];
          *(void *)uint64_t v580 = *(void *)v581;
          uint64_t v582 = *((void *)v581 + 1);
          *((void *)v580 + 1) = v582;
          swift_bridgeObjectRetain(v578);
          swift_bridgeObjectRetain(v582);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v409, 0LL, 1LL, v411);
        }

        uint64_t v20 = a1;
        uint64_t v21 = v641;
        uint64_t v22 = 1LL;
        goto LABEL_109;
      case 2u:
        uint64_t v10 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v10))
        {
          uint64_t v11 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v10);
        }

        uint64_t v159 = (int *)type metadata accessor for BloodPressureLogModel(0LL);
        uint64_t v160 = v159[5];
        uint64_t v161 = (void *)((char *)a1 + v160);
        uint64_t v162 = (void *)((char *)a2 + v160);
        *uint64_t v161 = *v162;
        uint64_t v163 = v162[1];
        v161[1] = v163;
        uint64_t v164 = v159[6];
        uint64_t v165 = (void *)((char *)a1 + v164);
        uint64_t v166 = (void *)((char *)a2 + v164);
        *uint64_t v165 = *v166;
        uint64_t v167 = v166[1];
        v165[1] = v167;
        uint64_t v168 = v159[7];
        uint64_t v169 = (void *)((char *)a1 + v168);
        uint64_t v170 = (void *)((char *)a2 + v168);
        *uint64_t v169 = *v170;
        uint64_t v171 = v170[1];
        v169[1] = v171;
        uint64_t v172 = v159[8];
        uint64_t v173 = (char *)a1 + v172;
        uint64_t v174 = (char *)a2 + v172;
        uint64_t v175 = type metadata accessor for SnippetHeaderModel(0LL);
        swift_bridgeObjectRetain(v163);
        swift_bridgeObjectRetain(v167);
        swift_bridgeObjectRetain(v171);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v174, 1LL, v175))
        {
          uint64_t v176 = sub_494C(&qword_18A1A8);
          memcpy(v173, v174, *(void *)(*(void *)(v176 - 8) + 64LL));
        }

        else
        {
          uint64_t v413 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v413 - 8) + 16LL))(v173, v174, v413);
          uint64_t v414 = *(int *)(v175 + 20);
          v415 = &v173[v414];
          uint64_t v416 = &v174[v414];
          *(void *)v415 = *(void *)v416;
          uint64_t v417 = *((void *)v416 + 1);
          *((void *)v415 + 1) = v417;
          uint64_t v418 = *(int *)(v175 + 24);
          uint64_t v419 = &v173[v418];
          uint64_t v420 = &v174[v418];
          *(void *)uint64_t v419 = *(void *)v420;
          uint64_t v421 = *((void *)v420 + 1);
          *((void *)v419 + 1) = v421;
          swift_bridgeObjectRetain(v417);
          swift_bridgeObjectRetain(v421);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v173, 0LL, 1LL, v175);
        }

        uint64_t v422 = v159[9];
        uint64_t v423 = (void *)((char *)a1 + v422);
        uint64_t v424 = (void *)((char *)a2 + v422);
        *uint64_t v423 = *v424;
        uint64_t v425 = v424[1];
        v423[1] = v425;
        uint64_t v426 = v159[10];
        uint64_t v427 = (void *)((char *)a1 + v426);
        uint64_t v428 = (void *)((char *)a2 + v426);
        *uint64_t v427 = *v428;
        uint64_t v429 = v428[1];
        v427[1] = v429;
        swift_bridgeObjectRetain(v425);
        swift_bridgeObjectRetain(v429);
        uint64_t v20 = a1;
        uint64_t v21 = a3;
        uint64_t v22 = 2LL;
        goto LABEL_109;
      case 3u:
        uint64_t v12 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v12))
        {
          uint64_t v13 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16LL))(a1, a2, v12);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v12);
        }

        uint64_t v177 = (int *)type metadata accessor for CycleTrackingLogModel(0LL);
        uint64_t v178 = v177[5];
        uint64_t v179 = (void *)((char *)a1 + v178);
        uint64_t v180 = (void *)((char *)a2 + v178);
        *uint64_t v179 = *v180;
        uint64_t v181 = v180[1];
        v179[1] = v181;
        uint64_t v182 = v177[6];
        uint64_t v183 = (void *)((char *)a1 + v182);
        uint64_t v184 = (void *)((char *)a2 + v182);
        *uint64_t v183 = *v184;
        uint64_t v185 = v184[1];
        v183[1] = v185;
        uint64_t v186 = v177[7];
        uint64_t v187 = (void *)((char *)a1 + v186);
        uint64_t v188 = (void *)((char *)a2 + v186);
        *uint64_t v187 = *v188;
        uint64_t v189 = v188[1];
        v187[1] = v189;
        uint64_t v190 = v177[8];
        uint64_t v191 = (char *)a1 + v190;
        uint64_t v192 = (char *)a2 + v190;
        uint64_t v193 = type metadata accessor for SnippetHeaderModel(0LL);
        swift_bridgeObjectRetain(v181);
        swift_bridgeObjectRetain(v185);
        swift_bridgeObjectRetain(v189);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v192, 1LL, v193))
        {
          uint64_t v194 = sub_494C(&qword_18A1A8);
          memcpy(v191, v192, *(void *)(*(void *)(v194 - 8) + 64LL));
        }

        else
        {
          uint64_t v430 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v430 - 8) + 16LL))(v191, v192, v430);
          uint64_t v431 = *(int *)(v193 + 20);
          uint64_t v432 = &v191[v431];
          v433 = &v192[v431];
          *(void *)uint64_t v432 = *(void *)v433;
          uint64_t v434 = *((void *)v433 + 1);
          *((void *)v432 + 1) = v434;
          uint64_t v435 = *(int *)(v193 + 24);
          v436 = &v191[v435];
          v437 = &v192[v435];
          *(void *)v436 = *(void *)v437;
          uint64_t v438 = *((void *)v437 + 1);
          *((void *)v436 + 1) = v438;
          swift_bridgeObjectRetain(v434);
          swift_bridgeObjectRetain(v438);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v191, 0LL, 1LL, v193);
        }

        uint64_t v439 = v177[9];
        v440 = (char *)a1 + v439;
        uint64_t v441 = (char *)a2 + v439;
        uint64_t v442 = type metadata accessor for URL(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v441, 1LL, v442))
        {
          uint64_t v443 = sub_494C(&qword_189CF8);
          memcpy(v440, v441, *(void *)(*(void *)(v443 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v442 - 8) + 16LL))(v440, v441, v442);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v440, 0LL, 1LL, v442);
        }

        uint64_t v20 = a1;
        uint64_t v21 = a3;
        uint64_t v22 = 3LL;
        goto LABEL_109;
      case 4u:
        *a1 = *a2;
        uint64_t v14 = a2[1];
        a1[1] = v14;
        uint64_t v15 = *(int *)(type metadata accessor for GenericButtonModel(0LL) + 20);
        uint64_t v16 = (char *)a1 + v15;
        uint64_t v17 = (char *)a2 + v15;
        uint64_t v18 = type metadata accessor for URL(0LL);
        uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16LL);
        swift_bridgeObjectRetain(v14);
        v19(v16, v17, v18);
        uint64_t v20 = a1;
        uint64_t v21 = a3;
        uint64_t v22 = 4LL;
        goto LABEL_109;
      case 5u:
        *a1 = *a2;
        uint64_t v23 = a2[1];
        a1[1] = v23;
        a1[2] = a2[2];
        uint64_t v24 = a2[3];
        a1[3] = v24;
        a1[4] = a2[4];
        uint64_t v25 = a2[5];
        a1[5] = v25;
        *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        uint64_t v20 = a1;
        uint64_t v21 = a3;
        uint64_t v22 = 5LL;
        goto LABEL_109;
      case 6u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        a1[1] = a2[1];
        uint64_t v26 = a2[2];
        a1[2] = v26;
        uint64_t v27 = (int *)type metadata accessor for GenericMedCompletedLogModel(0LL);
        uint64_t v28 = v27[6];
        uint64_t v29 = (char *)a1 + v28;
        uint64_t v30 = (char *)a2 + v28;
        uint64_t v31 = type metadata accessor for AppPunchout(0LL);
        swift_bridgeObjectRetain(v26);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v30, 1LL, v31))
        {
          uint64_t v32 = sub_494C(&qword_18A1A0);
          memcpy(v29, v30, *(void *)(*(void *)(v32 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16LL))(v29, v30, v31);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v29, 0LL, 1LL, v31);
        }

        *((_BYTE *)a1 + v27[7]) = *((_BYTE *)a2 + v27[7]);
        uint64_t v195 = v27[8];
        uint64_t v196 = (void *)((char *)a1 + v195);
        uint64_t v197 = (void *)((char *)a2 + v195);
        *uint64_t v196 = *v197;
        uint64_t v198 = v197[1];
        v196[1] = v198;
        *((_BYTE *)a1 + v27[9]) = *((_BYTE *)a2 + v27[9]);
        uint64_t v199 = v27[10];
        uint64_t v200 = (void *)((char *)a1 + v199);
        uint64_t v201 = (void *)((char *)a2 + v199);
        *uint64_t v200 = *v201;
        uint64_t v202 = v201[1];
        v200[1] = v202;
        uint64_t v203 = v27[11];
        uint64_t v204 = (void *)((char *)a1 + v203);
        uint64_t v205 = (void *)((char *)a2 + v203);
        void *v204 = *v205;
        uint64_t v206 = v205[1];
        v204[1] = v206;
        uint64_t v207 = v27[12];
        uint64_t v208 = (void *)((char *)a1 + v207);
        uint64_t v209 = (void *)((char *)a2 + v207);
        *uint64_t v208 = *v209;
        uint64_t v210 = v209[1];
        v208[1] = v210;
        uint64_t v211 = v27[13];
        uint64_t v212 = (void *)((char *)a1 + v211);
        uint64_t v213 = (void *)((char *)a2 + v211);
        *uint64_t v212 = *v213;
        uint64_t v214 = v213[1];
        v212[1] = v214;
        uint64_t v215 = v27[14];
        uint64_t v216 = (char *)a1 + v215;
        uint64_t v217 = (char *)a2 + v215;
        uint64_t v218 = type metadata accessor for SnippetHeaderModel(0LL);
        swift_bridgeObjectRetain(v198);
        swift_bridgeObjectRetain(v202);
        swift_bridgeObjectRetain(v206);
        swift_bridgeObjectRetain(v210);
        swift_bridgeObjectRetain(v214);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v217, 1LL, v218))
        {
          uint64_t v219 = sub_494C(&qword_18A1A8);
          memcpy(v216, v217, *(void *)(*(void *)(v219 - 8) + 64LL));
        }

        else
        {
          uint64_t v444 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v444 - 8) + 16LL))(v216, v217, v444);
          uint64_t v445 = *(int *)(v218 + 20);
          uint64_t v446 = &v216[v445];
          uint64_t v447 = &v217[v445];
          *(void *)uint64_t v446 = *(void *)v447;
          uint64_t v448 = *((void *)v447 + 1);
          *((void *)v446 + 1) = v448;
          uint64_t v449 = *(int *)(v218 + 24);
          uint64_t v450 = &v216[v449];
          uint64_t v451 = &v217[v449];
          *(void *)uint64_t v450 = *(void *)v451;
          uint64_t v452 = *((void *)v451 + 1);
          *((void *)v450 + 1) = v452;
          swift_bridgeObjectRetain(v448);
          swift_bridgeObjectRetain(v452);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v216, 0LL, 1LL, v218);
        }

        uint64_t v20 = a1;
        uint64_t v21 = a3;
        uint64_t v22 = 6LL;
        goto LABEL_109;
      case 7u:
        uint64_t v33 = type metadata accessor for SnippetHeaderModel(0LL);
        uint64_t v642 = a3;
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v33))
        {
          uint64_t v34 = sub_494C(&qword_18A1A8);
          memcpy(a1, a2, *(void *)(*(void *)(v34 - 8) + 64LL));
        }

        else
        {
          uint64_t v220 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v220 - 8) + 16LL))(a1, a2, v220);
          uint64_t v221 = *(int *)(v33 + 20);
          uint64_t v222 = (void *)((char *)a1 + v221);
          uint64_t v223 = (void *)((char *)a2 + v221);
          *uint64_t v222 = *v223;
          uint64_t v224 = v223[1];
          v222[1] = v224;
          uint64_t v225 = *(int *)(v33 + 24);
          uint64_t v226 = (void *)((char *)a1 + v225);
          uint64_t v227 = (void *)((char *)a2 + v225);
          *uint64_t v226 = *v227;
          uint64_t v228 = v227[1];
          v226[1] = v228;
          swift_bridgeObjectRetain(v224);
          swift_bridgeObjectRetain(v228);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v33);
        }

        uint64_t v229 = (int *)type metadata accessor for HealthDataLogModel(0LL);
        *(void *)((char *)a1 + v229[5]) = *(void *)((char *)a2 + v229[5]);
        uint64_t v230 = v229[6];
        uint64_t v231 = (void *)((char *)a1 + v230);
        uint64_t v232 = (void *)((char *)a2 + v230);
        *uint64_t v231 = *v232;
        uint64_t v233 = v232[1];
        v231[1] = v233;
        uint64_t v234 = v229[7];
        uint64_t v235 = (void *)((char *)a1 + v234);
        uint64_t v236 = (void *)((char *)a2 + v234);
        *uint64_t v235 = *v236;
        uint64_t v237 = v236[1];
        v235[1] = v237;
        uint64_t v238 = v229[8];
        uint64_t v239 = (void *)((char *)a1 + v238);
        uint64_t v240 = (void *)((char *)a2 + v238);
        *uint64_t v239 = *v240;
        uint64_t v241 = v240[1];
        v239[1] = v241;
        uint64_t v242 = v229[9];
        uint64_t v243 = (void *)((char *)a1 + v242);
        uint64_t v244 = (void *)((char *)a2 + v242);
        *uint64_t v243 = *v244;
        uint64_t v245 = v244[1];
        v243[1] = v245;
        uint64_t v246 = v229[10];
        __dstb = (char *)a1 + v246;
        uint64_t v247 = (char *)a2 + v246;
        uint64_t v248 = type metadata accessor for AppPunchout(0LL);
        swift_retain();
        swift_bridgeObjectRetain(v233);
        swift_bridgeObjectRetain(v237);
        swift_bridgeObjectRetain(v241);
        swift_bridgeObjectRetain(v245);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v247, 1LL, v248))
        {
          uint64_t v249 = sub_494C(&qword_18A1A0);
          memcpy(__dstb, v247, *(void *)(*(void *)(v249 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v248 - 8) + 16LL))(__dstb, v247, v248);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dstb, 0LL, 1LL, v248);
        }

        uint64_t v453 = v229[11];
        uint64_t v454 = (void *)((char *)a1 + v453);
        uint64_t v455 = (void *)((char *)a2 + v453);
        *uint64_t v454 = *v455;
        uint64_t v456 = v455[1];
        v454[1] = v456;
        swift_bridgeObjectRetain(v456);
        uint64_t v20 = a1;
        uint64_t v21 = v642;
        uint64_t v22 = 7LL;
        goto LABEL_109;
      case 8u:
        uint64_t v35 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v35))
        {
          uint64_t v36 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v36 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v35 - 8) + 16LL))(a1, a2, v35);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v35);
        }

        uint64_t v250 = (int *)type metadata accessor for GenericQueryModel(0LL);
        uint64_t v251 = v250[5];
        uint64_t v252 = (char *)a1 + v251;
        uint64_t v253 = (char *)a2 + v251;
        char v254 = v253[8];
        *(void *)uint64_t v252 = *(void *)v253;
        v252[8] = v254;
        uint64_t v255 = v250[6];
        uint64_t v256 = (char *)a1 + v255;
        uint64_t v257 = (char *)a2 + v255;
        char v258 = v257[8];
        *(void *)uint64_t v256 = *(void *)v257;
        v256[8] = v258;
        uint64_t v259 = v250[7];
        uint64_t v260 = (char *)a1 + v259;
        uint64_t v261 = (char *)a2 + v259;
        char v262 = v261[8];
        *(void *)uint64_t v260 = *(void *)v261;
        v260[8] = v262;
        uint64_t v263 = v250[8];
        uint64_t v264 = (char *)a1 + v263;
        uint64_t v265 = (char *)a2 + v263;
        char v266 = v265[8];
        *(void *)uint64_t v264 = *(void *)v265;
        v264[8] = v266;
        uint64_t v267 = v250[9];
        uint64_t v268 = (char *)a1 + v267;
        uint64_t v269 = (char *)a2 + v267;
        char v270 = v269[8];
        *(void *)uint64_t v268 = *(void *)v269;
        v268[8] = v270;
        uint64_t v271 = v250[10];
        uint64_t v272 = (char *)a1 + v271;
        uint64_t v273 = (char *)a2 + v271;
        uint64_t v274 = type metadata accessor for SpeakableString(0LL);
        uint64_t v646 = a3;
        uint64_t v633 = v274;
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v273, 1LL, v274))
        {
          uint64_t v275 = sub_494C(&qword_189D00);
          memcpy(v272, v273, *(void *)(*(void *)(v275 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v274 - 8) + 16LL))(v272, v273, v274);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v272, 0LL, 1LL, v274);
        }

        uint64_t v457 = v250[11];
        uint64_t v458 = (void *)((char *)a1 + v457);
        uint64_t v459 = (void *)((char *)a2 + v457);
        *uint64_t v458 = *v459;
        __dstd = (void *)v459[1];
        v458[1] = __dstd;
        uint64_t v460 = v250[12];
        uint64_t v461 = (void *)((char *)a1 + v460);
        uint64_t v462 = (void *)((char *)a2 + v460);
        *uint64_t v461 = *v462;
        uint64_t v463 = v462[1];
        v461[1] = v463;
        uint64_t v464 = v250[13];
        uint64_t v465 = (void *)((char *)a1 + v464);
        uint64_t v466 = (void *)((char *)a2 + v464);
        *uint64_t v465 = *v466;
        uint64_t v467 = v466[1];
        v465[1] = v467;
        uint64_t v468 = v250[14];
        uint64_t v469 = (void *)((char *)a1 + v468);
        uint64_t v470 = (void *)((char *)a2 + v468);
        void *v469 = *v470;
        uint64_t v471 = v470[1];
        v469[1] = v471;
        uint64_t v472 = v250[15];
        uint64_t v473 = (void *)((char *)a1 + v472);
        uint64_t v474 = (void *)((char *)a2 + v472);
        *uint64_t v473 = *v474;
        uint64_t v475 = v474[1];
        v473[1] = v475;
        uint64_t v476 = v250[16];
        uint64_t v477 = (void *)((char *)a1 + v476);
        uint64_t v478 = (void *)((char *)a2 + v476);
        *uint64_t v477 = *v478;
        uint64_t v479 = v478[1];
        v477[1] = v479;
        uint64_t v480 = v250[17];
        uint64_t v481 = (void *)((char *)a1 + v480);
        uint64_t v482 = (void *)((char *)a2 + v480);
        *uint64_t v481 = *v482;
        uint64_t v483 = v482[1];
        v481[1] = v483;
        uint64_t v484 = v250[18];
        uint64_t v485 = (char *)a1 + v484;
        v486 = (char *)a2 + v484;
        uint64_t v487 = type metadata accessor for SnippetHeaderModel(0LL);
        swift_bridgeObjectRetain(__dstd);
        swift_bridgeObjectRetain(v463);
        swift_bridgeObjectRetain(v467);
        swift_bridgeObjectRetain(v471);
        swift_bridgeObjectRetain(v475);
        swift_bridgeObjectRetain(v479);
        swift_bridgeObjectRetain(v483);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v486, 1LL, v487))
        {
          uint64_t v488 = sub_494C(&qword_18A1A8);
          memcpy(v485, v486, *(void *)(*(void *)(v488 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *))(*(void *)(v633 - 8) + 16LL))(v485, v486);
          uint64_t v583 = *(int *)(v487 + 20);
          uint64_t v584 = &v485[v583];
          uint64_t v585 = &v486[v583];
          *(void *)uint64_t v584 = *(void *)v585;
          uint64_t v586 = *((void *)v585 + 1);
          *((void *)v584 + 1) = v586;
          uint64_t v587 = *(int *)(v487 + 24);
          uint64_t v588 = &v485[v587];
          uint64_t v589 = &v486[v587];
          *(void *)uint64_t v588 = *(void *)v589;
          uint64_t v590 = *((void *)v589 + 1);
          *((void *)v588 + 1) = v590;
          swift_bridgeObjectRetain(v586);
          swift_bridgeObjectRetain(v590);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v485, 0LL, 1LL, v487);
        }

        uint64_t v21 = v646;
        uint64_t v20 = a1;
        uint64_t v22 = 8LL;
        goto LABEL_109;
      case 9u:
        uint64_t v37 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v37))
        {
          uint64_t v38 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v38 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v37 - 8) + 16LL))(a1, a2, v37);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v37);
        }

        uint64_t v276 = (int *)type metadata accessor for HeightQueryModel(0LL);
        uint64_t v277 = v276[5];
        uint64_t v278 = (char *)a1 + v277;
        uint64_t v279 = (char *)a2 + v277;
        char v280 = v279[8];
        *(void *)uint64_t v278 = *(void *)v279;
        v278[8] = v280;
        uint64_t v281 = v276[6];
        uint64_t v282 = (char *)a1 + v281;
        uint64_t v283 = (char *)a2 + v281;
        char v284 = v283[8];
        *(void *)uint64_t v282 = *(void *)v283;
        v282[8] = v284;
        uint64_t v285 = v276[7];
        uint64_t v286 = (char *)a1 + v285;
        uint64_t v287 = (char *)a2 + v285;
        char v288 = v287[8];
        *(void *)uint64_t v286 = *(void *)v287;
        v286[8] = v288;
        uint64_t v289 = v276[8];
        uint64_t v290 = (char *)a1 + v289;
        uint64_t v291 = (char *)a2 + v289;
        uint64_t v292 = type metadata accessor for SpeakableString(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v291, 1LL, v292))
        {
          uint64_t v293 = sub_494C(&qword_189D00);
          memcpy(v290, v291, *(void *)(*(void *)(v293 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v292 - 8) + 16LL))(v290, v291, v292);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v290, 0LL, 1LL, v292);
        }

        *((_BYTE *)a1 + v276[9]) = *((_BYTE *)a2 + v276[9]);
        uint64_t v489 = v276[10];
        v490 = (char *)a1 + v489;
        uint64_t v491 = (char *)a2 + v489;
        uint64_t v492 = type metadata accessor for SnippetHeaderModel(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v491, 1LL, v492))
        {
          uint64_t v493 = sub_494C(&qword_18A1A8);
          memcpy(v490, v491, *(void *)(*(void *)(v493 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v292 - 8) + 16LL))(v490, v491, v292);
          uint64_t v591 = *(int *)(v492 + 20);
          uint64_t v592 = &v490[v591];
          uint64_t v593 = &v491[v591];
          *(void *)uint64_t v592 = *(void *)v593;
          uint64_t v594 = *((void *)v593 + 1);
          *((void *)v592 + 1) = v594;
          uint64_t v595 = *(int *)(v492 + 24);
          uint64_t v596 = &v490[v595];
          uint64_t v597 = &v491[v595];
          *(void *)uint64_t v596 = *(void *)v597;
          uint64_t v598 = *((void *)v597 + 1);
          *((void *)v596 + 1) = v598;
          swift_bridgeObjectRetain(v594);
          swift_bridgeObjectRetain(v598);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v490, 0LL, 1LL, v492);
        }

        uint64_t v599 = v276[11];
        v600 = (void *)((char *)a1 + v599);
        uint64_t v601 = (void *)((char *)a2 + v599);
        void *v600 = *v601;
        uint64_t v602 = v601[1];
        v600[1] = v602;
        uint64_t v603 = v276[12];
        uint64_t v604 = (void *)((char *)a1 + v603);
        uint64_t v605 = (void *)((char *)a2 + v603);
        void *v604 = *v605;
        uint64_t v606 = v605[1];
        v604[1] = v606;
        uint64_t v607 = v276[13];
        uint64_t v608 = (void *)((char *)a1 + v607);
        uint64_t v609 = (void *)((char *)a2 + v607);
        *uint64_t v608 = *v609;
        uint64_t v610 = v609[1];
        v608[1] = v610;
        swift_bridgeObjectRetain(v602);
        swift_bridgeObjectRetain(v606);
        swift_bridgeObjectRetain(v610);
        uint64_t v20 = a1;
        uint64_t v21 = a3;
        uint64_t v22 = 9LL;
        goto LABEL_109;
      case 0xAu:
        uint64_t v39 = *a2;
        *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
        *a1 = v39;
        uint64_t v40 = a2[2];
        *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
        a1[2] = v40;
        uint64_t v41 = a2[4];
        *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
        a1[4] = v41;
        uint64_t v42 = a2[6];
        *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
        a1[6] = v42;
        uint64_t v43 = a2[8];
        *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
        a1[8] = v43;
        uint64_t v44 = a2[10];
        *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
        a1[10] = v44;
        a1[12] = a2[12];
        uint64_t v45 = a2[13];
        a1[13] = v45;
        a1[14] = a2[14];
        uint64_t v46 = a2[15];
        a1[15] = v46;
        a1[16] = a2[16];
        uint64_t v47 = a2[17];
        a1[17] = v47;
        a1[18] = a2[18];
        uint64_t v48 = a2[19];
        a1[19] = v48;
        a1[20] = a2[20];
        uint64_t v49 = a2[21];
        a1[21] = v49;
        a1[22] = a2[22];
        uint64_t v50 = a2[23];
        a1[23] = v50;
        a1[24] = a2[24];
        uint64_t v51 = a2[25];
        a1[25] = v51;
        a1[26] = a2[26];
        uint64_t v52 = a2[27];
        a1[27] = v52;
        a1[28] = a2[28];
        uint64_t v643 = a3;
        uint64_t v53 = a2[29];
        a1[29] = v53;
        *((_BYTE *)a1 + 240) = *((_BYTE *)a2 + 240);
        swift_bridgeObjectRetain(v45);
        swift_bridgeObjectRetain(v46);
        swift_bridgeObjectRetain(v47);
        swift_bridgeObjectRetain(v48);
        swift_bridgeObjectRetain(v49);
        swift_bridgeObjectRetain(v50);
        swift_bridgeObjectRetain(v51);
        swift_bridgeObjectRetain(v52);
        swift_bridgeObjectRetain(v53);
        uint64_t v20 = a1;
        uint64_t v21 = v643;
        uint64_t v22 = 10LL;
        goto LABEL_109;
      case 0xBu:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        uint64_t v54 = a2[4];
        a1[4] = v54;
        a1[5] = a2[5];
        uint64_t v55 = a2[6];
        a1[6] = v55;
        a1[7] = a2[7];
        uint64_t v56 = a2[8];
        a1[8] = v56;
        a1[9] = a2[9];
        uint64_t v57 = a2[10];
        a1[10] = v57;
        uint64_t v58 = *(int *)(type metadata accessor for SingleActivitySummaryModel(0LL) + 44);
        uint64_t v59 = (char *)a1 + v58;
        uint64_t v60 = (char *)a2 + v58;
        uint64_t v61 = type metadata accessor for SnippetHeaderModel(0LL);
        swift_retain();
        swift_bridgeObjectRetain(v54);
        swift_bridgeObjectRetain(v55);
        swift_bridgeObjectRetain(v56);
        swift_bridgeObjectRetain(v57);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v60, 1LL, v61))
        {
          uint64_t v62 = sub_494C(&qword_18A1A8);
          memcpy(v59, v60, *(void *)(*(void *)(v62 - 8) + 64LL));
        }

        else
        {
          uint64_t v294 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v294 - 8) + 16LL))(v59, v60, v294);
          uint64_t v295 = *(int *)(v61 + 20);
          uint64_t v296 = &v59[v295];
          uint64_t v297 = &v60[v295];
          *(void *)uint64_t v296 = *(void *)v297;
          uint64_t v298 = *((void *)v297 + 1);
          *((void *)v296 + 1) = v298;
          uint64_t v299 = *(int *)(v61 + 24);
          uint64_t v300 = &v59[v299];
          uint64_t v301 = &v60[v299];
          *(void *)uint64_t v300 = *(void *)v301;
          uint64_t v302 = *((void *)v301 + 1);
          *((void *)v300 + 1) = v302;
          swift_bridgeObjectRetain(v298);
          swift_bridgeObjectRetain(v302);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v59, 0LL, 1LL, v61);
        }

        uint64_t v20 = a1;
        uint64_t v21 = a3;
        uint64_t v22 = 11LL;
        goto LABEL_109;
      case 0xCu:
        uint64_t v63 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v63))
        {
          uint64_t v64 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v64 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v63 - 8) + 16LL))(a1, a2, v63);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v63);
        }

        uint64_t v303 = (int *)type metadata accessor for SleepQueryModel(0LL);
        uint64_t v304 = v303[5];
        uint64_t v305 = (char *)a1 + v304;
        uint64_t v306 = (char *)a2 + v304;
        uint64_t v307 = type metadata accessor for SnippetHeaderModel(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v306, 1LL, v307))
        {
          uint64_t v308 = sub_494C(&qword_18A1A8);
          memcpy(v305, v306, *(void *)(*(void *)(v308 - 8) + 64LL));
        }

        else
        {
          uint64_t v494 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v494 - 8) + 16LL))(v305, v306, v494);
          uint64_t v495 = *(int *)(v307 + 20);
          uint64_t v496 = &v305[v495];
          v497 = &v306[v495];
          *(void *)uint64_t v496 = *(void *)v497;
          uint64_t v498 = *((void *)v497 + 1);
          *((void *)v496 + 1) = v498;
          uint64_t v499 = *(int *)(v307 + 24);
          uint64_t v500 = &v305[v499];
          v501 = &v306[v499];
          *(void *)uint64_t v500 = *(void *)v501;
          uint64_t v502 = *((void *)v501 + 1);
          *((void *)v500 + 1) = v502;
          swift_bridgeObjectRetain(v498);
          swift_bridgeObjectRetain(v502);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v305, 0LL, 1LL, v307);
        }

        uint64_t v503 = v303[6];
        uint64_t v504 = (void *)((char *)a1 + v503);
        v505 = (void *)((char *)a2 + v503);
        void *v504 = *v505;
        uint64_t v506 = v505[1];
        v504[1] = v506;
        uint64_t v507 = v303[7];
        uint64_t v508 = (void *)((char *)a1 + v507);
        uint64_t v509 = (void *)((char *)a2 + v507);
        void *v508 = *v509;
        __dste = (void *)v509[1];
        v508[1] = __dste;
        uint64_t v510 = v303[8];
        uint64_t v511 = (void *)((char *)a1 + v510);
        uint64_t v512 = (void *)((char *)a2 + v510);
        *uint64_t v511 = *v512;
        uint64_t v634 = v512[1];
        v511[1] = v634;
        uint64_t v513 = v303[9];
        v514 = (void *)((char *)a1 + v513);
        uint64_t v515 = (void *)((char *)a2 + v513);
        void *v514 = *v515;
        uint64_t v516 = v515[1];
        v514[1] = v516;
        uint64_t v517 = v303[10];
        v518 = (void *)((char *)a1 + v517);
        uint64_t v519 = (void *)((char *)a2 + v517);
        void *v518 = *v519;
        uint64_t v520 = v519[1];
        v518[1] = v520;
        *(void *)((char *)a1 + v303[11]) = *(void *)((char *)a2 + v303[11]);
        *(void *)((char *)a1 + v303[12]) = *(void *)((char *)a2 + v303[12]);
        *(void *)((char *)a1 + v303[13]) = *(void *)((char *)a2 + v303[13]);
        *(void *)((char *)a1 + v303[14]) = *(void *)((char *)a2 + v303[14]);
        uint64_t v521 = v303[15];
        v522 = (void *)((char *)a1 + v521);
        uint64_t v523 = (void *)((char *)a2 + v521);
        void *v522 = *v523;
        uint64_t v524 = v523[1];
        v522[1] = v524;
        uint64_t v525 = v303[16];
        v526 = (void *)((char *)a1 + v525);
        uint64_t v527 = (void *)((char *)a2 + v525);
        void *v526 = *v527;
        uint64_t v528 = v527[1];
        v526[1] = v528;
        uint64_t v529 = v303[17];
        v530 = (void *)((char *)a1 + v529);
        uint64_t v531 = (void *)((char *)a2 + v529);
        void *v530 = *v531;
        uint64_t v532 = v531[1];
        v530[1] = v532;
        swift_bridgeObjectRetain(v506);
        swift_bridgeObjectRetain(__dste);
        swift_bridgeObjectRetain(v634);
        swift_bridgeObjectRetain(v516);
        swift_bridgeObjectRetain(v520);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain(v524);
        swift_bridgeObjectRetain(v528);
        swift_bridgeObjectRetain(v532);
        uint64_t v20 = a1;
        uint64_t v21 = a3;
        uint64_t v22 = 12LL;
        goto LABEL_109;
      case 0xDu:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        a1[1] = a2[1];
        uint64_t v65 = a2[2];
        a1[2] = v65;
        a1[3] = a2[3];
        uint64_t v66 = a2[4];
        a1[4] = v66;
        a1[5] = a2[5];
        uint64_t v67 = a2[6];
        a1[6] = v67;
        uint64_t v68 = (int *)type metadata accessor for SpecificMedCompletedLogModel(0LL);
        uint64_t v69 = v68[8];
        uint64_t v70 = (char *)a1 + v69;
        uint64_t v71 = (char *)a2 + v69;
        uint64_t v72 = type metadata accessor for AppPunchout(0LL);
        swift_bridgeObjectRetain(v65);
        swift_bridgeObjectRetain(v66);
        swift_bridgeObjectRetain(v67);
        uint64_t v644 = a3;
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v71, 1LL, v72))
        {
          uint64_t v73 = sub_494C(&qword_18A1A0);
          memcpy(v70, v71, *(void *)(*(void *)(v73 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 16LL))(v70, v71, v72);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v70, 0LL, 1LL, v72);
        }

        uint64_t v309 = v68[9];
        uint64_t v310 = (char *)a1 + v309;
        uint64_t v311 = (char *)a2 + v309;
        uint64_t v312 = *(void *)v311;
        v310[8] = v311[8];
        *(void *)uint64_t v310 = v312;
        uint64_t v313 = v68[10];
        uint64_t v314 = (void *)((char *)a1 + v313);
        uint64_t v315 = (void *)((char *)a2 + v313);
        *uint64_t v314 = *v315;
        __dstc = (void *)v315[1];
        v314[1] = __dstc;
        uint64_t v316 = v68[11];
        uint64_t v317 = (void *)((char *)a1 + v316);
        uint64_t v318 = (void *)((char *)a2 + v316);
        *uint64_t v317 = *v318;
        uint64_t v319 = v318[1];
        v317[1] = v319;
        uint64_t v320 = v68[12];
        v321 = (void *)((char *)a1 + v320);
        uint64_t v322 = (void *)((char *)a2 + v320);
        void *v321 = *v322;
        uint64_t v323 = v322[1];
        v321[1] = v323;
        uint64_t v324 = v68[13];
        v325 = (void *)((char *)a1 + v324);
        uint64_t v326 = (void *)((char *)a2 + v324);
        void *v325 = *v326;
        uint64_t v327 = v326[1];
        v325[1] = v327;
        *((_BYTE *)a1 + v68[14]) = *((_BYTE *)a2 + v68[14]);
        *((_BYTE *)a1 + v68[15]) = *((_BYTE *)a2 + v68[15]);
        uint64_t v328 = v68[16];
        uint64_t v329 = (void *)((char *)a1 + v328);
        v330 = (void *)((char *)a2 + v328);
        *uint64_t v329 = *v330;
        uint64_t v331 = v330[1];
        v329[1] = v331;
        uint64_t v332 = v68[17];
        v333 = (void *)((char *)a1 + v332);
        v334 = (void *)((char *)a2 + v332);
        void *v333 = *v334;
        uint64_t v335 = v334[1];
        v333[1] = v335;
        uint64_t v336 = v68[18];
        v337 = (void *)((char *)a1 + v336);
        uint64_t v338 = (void *)((char *)a2 + v336);
        void *v337 = *v338;
        uint64_t v339 = v338[1];
        v337[1] = v339;
        uint64_t v340 = v68[19];
        uint64_t v341 = (char *)a1 + v340;
        v342 = (char *)a2 + v340;
        uint64_t v343 = type metadata accessor for SnippetHeaderModel(0LL);
        swift_bridgeObjectRetain(__dstc);
        swift_bridgeObjectRetain(v319);
        swift_bridgeObjectRetain(v323);
        swift_bridgeObjectRetain(v327);
        swift_bridgeObjectRetain(v331);
        swift_bridgeObjectRetain(v335);
        swift_bridgeObjectRetain(v339);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v342, 1LL, v343))
        {
          uint64_t v344 = sub_494C(&qword_18A1A8);
          memcpy(v341, v342, *(void *)(*(void *)(v344 - 8) + 64LL));
        }

        else
        {
          uint64_t v533 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v533 - 8) + 16LL))(v341, v342, v533);
          uint64_t v534 = *(int *)(v343 + 20);
          uint64_t v535 = &v341[v534];
          uint64_t v536 = &v342[v534];
          *(void *)uint64_t v535 = *(void *)v536;
          uint64_t v537 = *((void *)v536 + 1);
          *((void *)v535 + 1) = v537;
          uint64_t v538 = *(int *)(v343 + 24);
          uint64_t v539 = &v341[v538];
          uint64_t v540 = &v342[v538];
          *(void *)uint64_t v539 = *(void *)v540;
          uint64_t v541 = *((void *)v540 + 1);
          *((void *)v539 + 1) = v541;
          swift_bridgeObjectRetain(v537);
          swift_bridgeObjectRetain(v541);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v341, 0LL, 1LL, v343);
        }

        uint64_t v21 = v644;
        uint64_t v20 = a1;
        uint64_t v22 = 13LL;
        goto LABEL_109;
      case 0xEu:
        uint64_t v74 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v74))
        {
          uint64_t v75 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v75 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v74 - 8) + 16LL))(a1, a2, v74);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v74);
        }

        uint64_t v345 = (int *)type metadata accessor for TemperatureQueryModel(0LL);
        uint64_t v346 = v345[5];
        uint64_t v347 = (char *)a1 + v346;
        uint64_t v348 = (char *)a2 + v346;
        char v349 = v348[8];
        *(void *)uint64_t v347 = *(void *)v348;
        v347[8] = v349;
        uint64_t v350 = v345[6];
        v351 = (char *)a1 + v350;
        uint64_t v352 = (char *)a2 + v350;
        char v353 = v352[8];
        *(void *)v351 = *(void *)v352;
        v351[8] = v353;
        uint64_t v354 = v345[7];
        v355 = (char *)a1 + v354;
        uint64_t v356 = (char *)a2 + v354;
        char v357 = v356[8];
        *(void *)v355 = *(void *)v356;
        v355[8] = v357;
        uint64_t v358 = v345[8];
        v359 = (char *)a1 + v358;
        uint64_t v360 = (char *)a2 + v358;
        char v361 = v360[8];
        *(void *)v359 = *(void *)v360;
        v359[8] = v361;
        uint64_t v362 = v345[9];
        v363 = (char *)a1 + v362;
        uint64_t v364 = (char *)a2 + v362;
        char v365 = v364[8];
        *(void *)v363 = *(void *)v364;
        v363[8] = v365;
        uint64_t v366 = v345[10];
        v367 = (char *)a1 + v366;
        uint64_t v368 = (char *)a2 + v366;
        uint64_t v369 = type metadata accessor for SpeakableString(0LL);
        uint64_t v647 = a3;
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v368, 1LL, v369))
        {
          uint64_t v370 = sub_494C(&qword_189D00);
          memcpy(v367, v368, *(void *)(*(void *)(v370 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v369 - 8) + 16LL))(v367, v368, v369);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v367, 0LL, 1LL, v369);
        }

        uint64_t v542 = v345[11];
        uint64_t v543 = (void *)((char *)a1 + v542);
        uint64_t v544 = (void *)((char *)a2 + v542);
        *uint64_t v543 = *v544;
        uint64_t v545 = v544[1];
        v543[1] = v545;
        uint64_t v546 = v345[12];
        uint64_t v547 = (void *)((char *)a1 + v546);
        uint64_t v548 = (void *)((char *)a2 + v546);
        *uint64_t v547 = *v548;
        uint64_t v549 = v548[1];
        v547[1] = v549;
        uint64_t v550 = v345[13];
        uint64_t v551 = (void *)((char *)a1 + v550);
        uint64_t v552 = (void *)((char *)a2 + v550);
        *uint64_t v551 = *v552;
        uint64_t v553 = v552[1];
        v551[1] = v553;
        uint64_t v554 = v345[14];
        v555 = (void *)((char *)a1 + v554);
        uint64_t v556 = (void *)((char *)a2 + v554);
        void *v555 = *v556;
        uint64_t v557 = v556[1];
        v555[1] = v557;
        uint64_t v558 = v345[15];
        v559 = (void *)((char *)a1 + v558);
        uint64_t v560 = (void *)((char *)a2 + v558);
        void *v559 = *v560;
        uint64_t v561 = v560[1];
        v559[1] = v561;
        uint64_t v562 = v345[16];
        v563 = (char *)a1 + v562;
        uint64_t v564 = (char *)a2 + v562;
        swift_bridgeObjectRetain(v545);
        swift_bridgeObjectRetain(v549);
        swift_bridgeObjectRetain(v553);
        swift_bridgeObjectRetain(v557);
        swift_bridgeObjectRetain(v561);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v564, 1LL, v369))
        {
          uint64_t v565 = sub_494C(&qword_189D00);
          memcpy(v563, v564, *(void *)(*(void *)(v565 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v369 - 8) + 16LL))(v563, v564, v369);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v563, 0LL, 1LL, v369);
        }

        uint64_t v611 = v345[17];
        uint64_t v612 = (void *)((char *)a1 + v611);
        v613 = (void *)((char *)a2 + v611);
        *uint64_t v612 = *v613;
        uint64_t v614 = v613[1];
        v612[1] = v614;
        uint64_t v615 = v345[18];
        uint64_t v616 = (char *)a1 + v615;
        uint64_t v617 = (char *)a2 + v615;
        uint64_t v618 = type metadata accessor for SnippetHeaderModel(0LL);
        swift_bridgeObjectRetain(v614);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v617, 1LL, v618))
        {
          uint64_t v619 = sub_494C(&qword_18A1A8);
          memcpy(v616, v617, *(void *)(*(void *)(v619 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v369 - 8) + 16LL))(v616, v617, v369);
          uint64_t v620 = *(int *)(v618 + 20);
          uint64_t v621 = &v616[v620];
          uint64_t v622 = &v617[v620];
          *(void *)uint64_t v621 = *(void *)v622;
          uint64_t v623 = *((void *)v622 + 1);
          *((void *)v621 + 1) = v623;
          uint64_t v624 = *(int *)(v618 + 24);
          uint64_t v625 = &v616[v624];
          v626 = &v617[v624];
          *(void *)uint64_t v625 = *(void *)v626;
          uint64_t v627 = *((void *)v626 + 1);
          *((void *)v625 + 1) = v627;
          swift_bridgeObjectRetain(v623);
          swift_bridgeObjectRetain(v627);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v616, 0LL, 1LL, v618);
        }

        uint64_t v20 = a1;
        uint64_t v21 = v647;
        uint64_t v22 = 14LL;
LABEL_109:
        swift_storeEnumTagMultiPayload(v20, v21, v22);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

void sub_182B4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_A890();
}

_OWORD *initializeWithTake for WellnessSnippets(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v6 = type metadata accessor for AppPunchout(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
      {
        uint64_t v7 = sub_494C(&qword_18A1A0);
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      }

      Model = (int *)type metadata accessor for OxygenSaturationQueryModel(0LL);
      uint64_t v49 = Model[5];
      uint64_t v50 = (char *)a1 + v49;
      uint64_t v51 = (char *)a2 + v49;
      *(void *)uint64_t v50 = *(void *)v51;
      v50[8] = v51[8];
      uint64_t v52 = Model[6];
      uint64_t v53 = (char *)a1 + v52;
      uint64_t v54 = (char *)a2 + v52;
      *(void *)uint64_t v53 = *(void *)v54;
      v53[8] = v54[8];
      uint64_t v55 = Model[7];
      uint64_t v56 = (char *)a1 + v55;
      uint64_t v57 = (char *)a2 + v55;
      v56[8] = v57[8];
      *(void *)uint64_t v56 = *(void *)v57;
      uint64_t v58 = Model[8];
      uint64_t v59 = (char *)a1 + v58;
      uint64_t v60 = (char *)a2 + v58;
      v59[8] = v60[8];
      *(void *)uint64_t v59 = *(void *)v60;
      uint64_t v61 = Model[9];
      uint64_t v62 = (char *)a1 + v61;
      uint64_t v63 = (char *)a2 + v61;
      uint64_t v64 = type metadata accessor for SpeakableString(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v63, 1LL, v64))
      {
        uint64_t v65 = sub_494C(&qword_189D00);
        memcpy(v62, v63, *(void *)(*(void *)(v65 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 32LL))(v62, v63, v64);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v62, 0LL, 1LL, v64);
      }

      *(_OWORD *)((char *)a1 + Model[10]) = *(_OWORD *)((char *)a2 + Model[10]);
      *(_OWORD *)((char *)a1 + Model[11]) = *(_OWORD *)((char *)a2 + Model[11]);
      *(_OWORD *)((char *)a1 + Model[12]) = *(_OWORD *)((char *)a2 + Model[12]);
      *(_OWORD *)((char *)a1 + Model[13]) = *(_OWORD *)((char *)a2 + Model[13]);
      *(_OWORD *)((char *)a1 + Model[14]) = *(_OWORD *)((char *)a2 + Model[14]);
      *(_OWORD *)((char *)a1 + Model[15]) = *(_OWORD *)((char *)a2 + Model[15]);
      uint64_t v186 = Model[16];
      uint64_t v187 = (char *)a1 + v186;
      uint64_t v188 = (char *)a2 + v186;
      uint64_t v189 = type metadata accessor for SnippetHeaderModel(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v188, 1LL, v189))
      {
        uint64_t v190 = sub_494C(&qword_18A1A8);
        memcpy(v187, v188, *(void *)(*(void *)(v190 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 32LL))(v187, v188, v64);
        *(_OWORD *)&v187[*(int *)(v189 + 20)] = *(_OWORD *)&v188[*(int *)(v189 + 20)];
        *(_OWORD *)&v187[*(int *)(v189 + 24)] = *(_OWORD *)&v188[*(int *)(v189 + 24)];
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v187, 0LL, 1LL, v189);
      }

      uint64_t v18 = a1;
      uint64_t v19 = a3;
      uint64_t v20 = 0LL;
      goto LABEL_106;
    case 1u:
      uint64_t v8 = type metadata accessor for AppPunchout(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v8))
      {
        uint64_t v9 = sub_494C(&qword_18A1A0);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v8);
      }

      uint64_t v66 = (int *)type metadata accessor for BloodPressureQueryModel(0LL);
      uint64_t v67 = v66[5];
      uint64_t v68 = (char *)a1 + v67;
      uint64_t v69 = (char *)a2 + v67;
      *(void *)uint64_t v68 = *(void *)v69;
      v68[8] = v69[8];
      uint64_t v70 = v66[6];
      uint64_t v71 = (char *)a1 + v70;
      uint64_t v72 = (char *)a2 + v70;
      *(void *)uint64_t v71 = *(void *)v72;
      v71[8] = v72[8];
      uint64_t v73 = v66[7];
      uint64_t v74 = (char *)a1 + v73;
      uint64_t v75 = (char *)a2 + v73;
      v74[8] = v75[8];
      *(void *)uint64_t v74 = *(void *)v75;
      uint64_t v76 = v66[8];
      uint64_t v77 = (char *)a1 + v76;
      uint64_t v78 = (char *)a2 + v76;
      v77[8] = v78[8];
      *(void *)uint64_t v77 = *(void *)v78;
      uint64_t v79 = v66[9];
      char v80 = (char *)a1 + v79;
      uint64_t v81 = (char *)a2 + v79;
      v80[8] = v81[8];
      *(void *)char v80 = *(void *)v81;
      uint64_t v82 = v66[10];
      uint64_t v83 = (char *)a1 + v82;
      char v84 = (char *)a2 + v82;
      *(void *)uint64_t v83 = *(void *)v84;
      v83[8] = v84[8];
      *(_OWORD *)((char *)a1 + v66[11]) = *(_OWORD *)((char *)a2 + v66[11]);
      *(_OWORD *)((char *)a1 + v66[12]) = *(_OWORD *)((char *)a2 + v66[12]);
      *(_OWORD *)((char *)a1 + v66[13]) = *(_OWORD *)((char *)a2 + v66[13]);
      *(_OWORD *)((char *)a1 + v66[14]) = *(_OWORD *)((char *)a2 + v66[14]);
      *(_OWORD *)((char *)a1 + v66[15]) = *(_OWORD *)((char *)a2 + v66[15]);
      *(_OWORD *)((char *)a1 + v66[16]) = *(_OWORD *)((char *)a2 + v66[16]);
      *(_OWORD *)((char *)a1 + v66[17]) = *(_OWORD *)((char *)a2 + v66[17]);
      *(_OWORD *)((char *)a1 + v66[18]) = *(_OWORD *)((char *)a2 + v66[18]);
      *(_OWORD *)((char *)a1 + v66[19]) = *(_OWORD *)((char *)a2 + v66[19]);
      uint64_t v85 = v66[20];
      uint64_t v86 = (char *)a1 + v85;
      uint64_t v87 = (char *)a2 + v85;
      uint64_t v88 = type metadata accessor for URL(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v87, 1LL, v88))
      {
        uint64_t v89 = sub_494C(&qword_189CF8);
        memcpy(v86, v87, *(void *)(*(void *)(v89 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 32LL))(v86, v87, v88);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v86, 0LL, 1LL, v88);
      }

      *(_OWORD *)((char *)a1 + v66[21]) = *(_OWORD *)((char *)a2 + v66[21]);
      *(_OWORD *)((char *)a1 + v66[22]) = *(_OWORD *)((char *)a2 + v66[22]);
      uint64_t v191 = v66[23];
      uint64_t v192 = (char *)a1 + v191;
      uint64_t v193 = (char *)a2 + v191;
      uint64_t v194 = type metadata accessor for SnippetHeaderModel(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v193, 1LL, v194))
      {
        uint64_t v195 = sub_494C(&qword_18A1A8);
        memcpy(v192, v193, *(void *)(*(void *)(v195 - 8) + 64LL));
      }

      else
      {
        uint64_t v220 = type metadata accessor for SpeakableString(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v220 - 8) + 32LL))(v192, v193, v220);
        *(_OWORD *)&v192[*(int *)(v194 + 20)] = *(_OWORD *)&v193[*(int *)(v194 + 20)];
        *(_OWORD *)&v192[*(int *)(v194 + 24)] = *(_OWORD *)&v193[*(int *)(v194 + 24)];
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v192, 0LL, 1LL, v194);
      }

      uint64_t v18 = a1;
      uint64_t v19 = a3;
      uint64_t v20 = 1LL;
      goto LABEL_106;
    case 2u:
      uint64_t v10 = type metadata accessor for AppPunchout(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v10))
      {
        uint64_t v11 = sub_494C(&qword_18A1A0);
        memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v10 - 8) + 32LL))(a1, a2, v10);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v10);
      }

      uint64_t v90 = (int *)type metadata accessor for BloodPressureLogModel(0LL);
      *(_OWORD *)((char *)a1 + v90[5]) = *(_OWORD *)((char *)a2 + v90[5]);
      *(_OWORD *)((char *)a1 + v90[6]) = *(_OWORD *)((char *)a2 + v90[6]);
      *(_OWORD *)((char *)a1 + v90[7]) = *(_OWORD *)((char *)a2 + v90[7]);
      uint64_t v91 = v90[8];
      char v92 = (char *)a1 + v91;
      uint64_t v93 = (char *)a2 + v91;
      uint64_t v94 = type metadata accessor for SnippetHeaderModel(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v93, 1LL, v94))
      {
        uint64_t v95 = sub_494C(&qword_18A1A8);
        memcpy(v92, v93, *(void *)(*(void *)(v95 - 8) + 64LL));
      }

      else
      {
        uint64_t v196 = type metadata accessor for SpeakableString(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v196 - 8) + 32LL))(v92, v93, v196);
        *(_OWORD *)&v92[*(int *)(v94 + 20)] = *(_OWORD *)&v93[*(int *)(v94 + 20)];
        *(_OWORD *)&v92[*(int *)(v94 + 24)] = *(_OWORD *)&v93[*(int *)(v94 + 24)];
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v92, 0LL, 1LL, v94);
      }

      *(_OWORD *)((char *)a1 + v90[9]) = *(_OWORD *)((char *)a2 + v90[9]);
      *(_OWORD *)((char *)a1 + v90[10]) = *(_OWORD *)((char *)a2 + v90[10]);
      uint64_t v18 = a1;
      uint64_t v19 = a3;
      uint64_t v20 = 2LL;
      goto LABEL_106;
    case 3u:
      uint64_t v12 = type metadata accessor for AppPunchout(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v12))
      {
        uint64_t v13 = sub_494C(&qword_18A1A0);
        memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v12 - 8) + 32LL))(a1, a2, v12);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v12);
      }

      uint64_t v96 = (int *)type metadata accessor for CycleTrackingLogModel(0LL);
      *(_OWORD *)((char *)a1 + v96[5]) = *(_OWORD *)((char *)a2 + v96[5]);
      *(_OWORD *)((char *)a1 + v96[6]) = *(_OWORD *)((char *)a2 + v96[6]);
      *(_OWORD *)((char *)a1 + v96[7]) = *(_OWORD *)((char *)a2 + v96[7]);
      uint64_t v97 = v96[8];
      uint64_t v98 = (char *)a1 + v97;
      uint64_t v99 = (char *)a2 + v97;
      uint64_t v100 = type metadata accessor for SnippetHeaderModel(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v99, 1LL, v100))
      {
        uint64_t v101 = sub_494C(&qword_18A1A8);
        memcpy(v98, v99, *(void *)(*(void *)(v101 - 8) + 64LL));
      }

      else
      {
        uint64_t v197 = type metadata accessor for SpeakableString(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v197 - 8) + 32LL))(v98, v99, v197);
        *(_OWORD *)&v98[*(int *)(v100 + 20)] = *(_OWORD *)&v99[*(int *)(v100 + 20)];
        *(_OWORD *)&v98[*(int *)(v100 + 24)] = *(_OWORD *)&v99[*(int *)(v100 + 24)];
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v98, 0LL, 1LL, v100);
      }

      uint64_t v198 = v96[9];
      uint64_t v199 = (char *)a1 + v198;
      uint64_t v200 = (char *)a2 + v198;
      uint64_t v201 = type metadata accessor for URL(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v200, 1LL, v201))
      {
        uint64_t v202 = sub_494C(&qword_189CF8);
        memcpy(v199, v200, *(void *)(*(void *)(v202 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v201 - 8) + 32LL))(v199, v200, v201);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v199, 0LL, 1LL, v201);
      }

      uint64_t v18 = a1;
      uint64_t v19 = a3;
      uint64_t v20 = 3LL;
      goto LABEL_106;
    case 4u:
      *a1 = *a2;
      uint64_t v14 = *(int *)(type metadata accessor for GenericButtonModel(0LL) + 20);
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32LL))(v15, v16, v17);
      uint64_t v18 = a1;
      uint64_t v19 = a3;
      uint64_t v20 = 4LL;
      goto LABEL_106;
    case 6u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
      uint64_t v21 = (int *)type metadata accessor for GenericMedCompletedLogModel(0LL);
      uint64_t v22 = v21[6];
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = (char *)a2 + v22;
      uint64_t v25 = type metadata accessor for AppPunchout(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1LL, v25))
      {
        uint64_t v26 = sub_494C(&qword_18A1A0);
        memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32LL))(v23, v24, v25);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0LL, 1LL, v25);
      }

      *((_BYTE *)a1 + v21[7]) = *((_BYTE *)a2 + v21[7]);
      *(_OWORD *)((char *)a1 + v21[8]) = *(_OWORD *)((char *)a2 + v21[8]);
      *((_BYTE *)a1 + v21[9]) = *((_BYTE *)a2 + v21[9]);
      *(_OWORD *)((char *)a1 + v21[10]) = *(_OWORD *)((char *)a2 + v21[10]);
      *(_OWORD *)((char *)a1 + v21[11]) = *(_OWORD *)((char *)a2 + v21[11]);
      *(_OWORD *)((char *)a1 + v21[12]) = *(_OWORD *)((char *)a2 + v21[12]);
      *(_OWORD *)((char *)a1 + v21[13]) = *(_OWORD *)((char *)a2 + v21[13]);
      uint64_t v102 = v21[14];
      uint64_t v103 = (char *)a1 + v102;
      unint64_t v104 = (char *)a2 + v102;
      uint64_t v105 = type metadata accessor for SnippetHeaderModel(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v104, 1LL, v105))
      {
        uint64_t v106 = sub_494C(&qword_18A1A8);
        memcpy(v103, v104, *(void *)(*(void *)(v106 - 8) + 64LL));
      }

      else
      {
        uint64_t v203 = type metadata accessor for SpeakableString(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v203 - 8) + 32LL))(v103, v104, v203);
        *(_OWORD *)&v103[*(int *)(v105 + 20)] = *(_OWORD *)&v104[*(int *)(v105 + 20)];
        *(_OWORD *)&v103[*(int *)(v105 + 24)] = *(_OWORD *)&v104[*(int *)(v105 + 24)];
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v103, 0LL, 1LL, v105);
      }

      uint64_t v18 = a1;
      uint64_t v19 = a3;
      uint64_t v20 = 6LL;
      goto LABEL_106;
    case 7u:
      uint64_t v27 = type metadata accessor for SnippetHeaderModel(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v27))
      {
        uint64_t v28 = sub_494C(&qword_18A1A8);
        memcpy(a1, a2, *(void *)(*(void *)(v28 - 8) + 64LL));
      }

      else
      {
        uint64_t v107 = type metadata accessor for SpeakableString(0LL);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v107 - 8) + 32LL))(a1, a2, v107);
        *(_OWORD *)((char *)a1 + *(int *)(v27 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v27 + 20));
        *(_OWORD *)((char *)a1 + *(int *)(v27 + sub_D878((void *)(v0 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v27 + 24));
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v27);
      }

      uint64_t v108 = (int *)type metadata accessor for HealthDataLogModel(0LL);
      *(void *)((char *)a1 + v108[5]) = *(void *)((char *)a2 + v108[5]);
      *(_OWORD *)((char *)a1 + v108[6]) = *(_OWORD *)((char *)a2 + v108[6]);
      *(_OWORD *)((char *)a1 + v108[7]) = *(_OWORD *)((char *)a2 + v108[7]);
      *(_OWORD *)((char *)a1 + v108[8]) = *(_OWORD *)((char *)a2 + v108[8]);
      *(_OWORD *)((char *)a1 + v108[9]) = *(_OWORD *)((char *)a2 + v108[9]);
      uint64_t v109 = v108[10];
      char v110 = (char *)a1 + v109;
      uint64_t v111 = (char *)a2 + v109;
      uint64_t v112 = type metadata accessor for AppPunchout(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v111, 1LL, v112))
      {
        uint64_t v113 = sub_494C(&qword_18A1A0);
        memcpy(v110, v111, *(void *)(*(void *)(v113 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v112 - 8) + 32LL))(v110, v111, v112);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v110, 0LL, 1LL, v112);
      }

      *(_OWORD *)((char *)a1 + v108[11]) = *(_OWORD *)((char *)a2 + v108[11]);
      uint64_t v18 = a1;
      uint64_t v19 = a3;
      uint64_t v20 = 7LL;
      goto LABEL_106;
    case 8u:
      uint64_t v29 = type metadata accessor for AppPunchout(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v29))
      {
        uint64_t v30 = sub_494C(&qword_18A1A0);
        memcpy(a1, a2, *(void *)(*(void *)(v30 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v29 - 8) + 32LL))(a1, a2, v29);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v29);
      }

      char v114 = (int *)type metadata accessor for GenericQueryModel(0LL);
      uint64_t v115 = v114[5];
      uint64_t v116 = (char *)a1 + v115;
      uint64_t v117 = (char *)a2 + v115;
      *(void *)uint64_t v116 = *(void *)v117;
      v116[8] = v117[8];
      uint64_t v118 = v114[6];
      uint64_t v119 = (char *)a1 + v118;
      uint64_t v120 = (char *)a2 + v118;
      *(void *)uint64_t v119 = *(void *)v120;
      v119[8] = v120[8];
      uint64_t v121 = v114[7];
      uint64_t v122 = (char *)a1 + v121;
      uint64_t v123 = (char *)a2 + v121;
      v122[8] = v123[8];
      *(void *)uint64_t v122 = *(void *)v123;
      uint64_t v124 = v114[8];
      uint64_t v125 = (char *)a1 + v124;
      uint64_t v126 = (char *)a2 + v124;
      v125[8] = v126[8];
      *(void *)uint64_t v125 = *(void *)v126;
      uint64_t v127 = v114[9];
      uint64_t v128 = (char *)a1 + v127;
      uint64_t v129 = (char *)a2 + v127;
      char v128[8] = v129[8];
      *(void *)uint64_t v128 = *(void *)v129;
      uint64_t v130 = v114[10];
      uint64_t v131 = (char *)a1 + v130;
      uint64_t v132 = (char *)a2 + v130;
      uint64_t v133 = type metadata accessor for SpeakableString(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v132, 1LL, v133))
      {
        uint64_t v134 = sub_494C(&qword_189D00);
        memcpy(v131, v132, *(void *)(*(void *)(v134 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v133 - 8) + 32LL))(v131, v132, v133);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v131, 0LL, 1LL, v133);
      }

      *(_OWORD *)((char *)a1 + v114[11]) = *(_OWORD *)((char *)a2 + v114[11]);
      *(_OWORD *)((char *)a1 + v114[12]) = *(_OWORD *)((char *)a2 + v114[12]);
      *(_OWORD *)((char *)a1 + v114[13]) = *(_OWORD *)((char *)a2 + v114[13]);
      *(_OWORD *)((char *)a1 + v114[14]) = *(_OWORD *)((char *)a2 + v114[14]);
      *(_OWORD *)((char *)a1 + v114[15]) = *(_OWORD *)((char *)a2 + v114[15]);
      *(_OWORD *)((char *)a1 + v114[16]) = *(_OWORD *)((char *)a2 + v114[16]);
      *(_OWORD *)((char *)a1 + v114[17]) = *(_OWORD *)((char *)a2 + v114[17]);
      uint64_t v204 = v114[18];
      uint64_t v205 = (char *)a1 + v204;
      uint64_t v206 = (char *)a2 + v204;
      uint64_t v207 = type metadata accessor for SnippetHeaderModel(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v206, 1LL, v207))
      {
        uint64_t v208 = sub_494C(&qword_18A1A8);
        memcpy(v205, v206, *(void *)(*(void *)(v208 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v133 - 8) + 32LL))(v205, v206, v133);
        *(_OWORD *)&v205[*(int *)(v207 + 20)] = *(_OWORD *)&v206[*(int *)(v207 + 20)];
        *(_OWORD *)&v205[*(int *)(v207 + 24)] = *(_OWORD *)&v206[*(int *)(v207 + 24)];
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v205, 0LL, 1LL, v207);
      }

      uint64_t v18 = a1;
      uint64_t v19 = a3;
      uint64_t v20 = 8LL;
      goto LABEL_106;
    case 9u:
      uint64_t v31 = type metadata accessor for AppPunchout(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v31))
      {
        uint64_t v32 = sub_494C(&qword_18A1A0);
        memcpy(a1, a2, *(void *)(*(void *)(v32 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v31 - 8) + 32LL))(a1, a2, v31);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v31);
      }

      uint64_t v135 = (int *)type metadata accessor for HeightQueryModel(0LL);
      uint64_t v136 = v135[5];
      uint64_t v137 = (char *)a1 + v136;
      uint64_t v138 = (char *)a2 + v136;
      *(void *)uint64_t v137 = *(void *)v138;
      char v137[8] = v138[8];
      uint64_t v139 = v135[6];
      uint64_t v140 = (char *)a1 + v139;
      uint64_t v141 = (char *)a2 + v139;
      *(void *)uint64_t v140 = *(void *)v141;
      char v140[8] = v141[8];
      uint64_t v142 = v135[7];
      uint64_t v143 = (char *)a1 + v142;
      uint64_t v144 = (char *)a2 + v142;
      v143[8] = v144[8];
      *(void *)uint64_t v143 = *(void *)v144;
      uint64_t v145 = v135[8];
      uint64_t v146 = (char *)a1 + v145;
      uint64_t v147 = (char *)a2 + v145;
      uint64_t v148 = type metadata accessor for SpeakableString(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v147, 1LL, v148))
      {
        uint64_t v149 = sub_494C(&qword_189D00);
        memcpy(v146, v147, *(void *)(*(void *)(v149 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v148 - 8) + 32LL))(v146, v147, v148);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v146, 0LL, 1LL, v148);
      }

      *((_BYTE *)a1 + v135[9]) = *((_BYTE *)a2 + v135[9]);
      uint64_t v209 = v135[10];
      uint64_t v210 = (char *)a1 + v209;
      uint64_t v211 = (char *)a2 + v209;
      uint64_t v212 = type metadata accessor for SnippetHeaderModel(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v211, 1LL, v212))
      {
        uint64_t v213 = sub_494C(&qword_18A1A8);
        memcpy(v210, v211, *(void *)(*(void *)(v213 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v148 - 8) + 32LL))(v210, v211, v148);
        *(_OWORD *)&v210[*(int *)(v212 + 20)] = *(_OWORD *)&v211[*(int *)(v212 + 20)];
        *(_OWORD *)&v210[*(int *)(v212 + 24)] = *(_OWORD *)&v211[*(int *)(v212 + 24)];
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v210, 0LL, 1LL, v212);
      }

      *(_OWORD *)((char *)a1 + v135[11]) = *(_OWORD *)((char *)a2 + v135[11]);
      *(_OWORD *)((char *)a1 + v135[12]) = *(_OWORD *)((char *)a2 + v135[12]);
      *(_OWORD *)((char *)a1 + v135[13]) = *(_OWORD *)((char *)a2 + v135[13]);
      uint64_t v18 = a1;
      uint64_t v19 = a3;
      uint64_t v20 = 9LL;
      goto LABEL_106;
    case 0xBu:
      *a1 = *a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)((char *)a2 + 72);
      uint64_t v33 = *(int *)(type metadata accessor for SingleActivitySummaryModel(0LL) + 44);
      uint64_t v34 = (char *)a1 + v33;
      uint64_t v35 = (char *)a2 + v33;
      uint64_t v36 = type metadata accessor for SnippetHeaderModel(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v35, 1LL, v36))
      {
        uint64_t v37 = sub_494C(&qword_18A1A8);
        memcpy(v34, v35, *(void *)(*(void *)(v37 - 8) + 64LL));
      }

      else
      {
        uint64_t v150 = type metadata accessor for SpeakableString(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v150 - 8) + 32LL))(v34, v35, v150);
        *(_OWORD *)&v34[*(int *)(v36 + 20)] = *(_OWORD *)&v35[*(int *)(v36 + 20)];
        *(_OWORD *)&v34[*(int *)(v36 + 24)] = *(_OWORD *)&v35[*(int *)(v36 + 24)];
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v34, 0LL, 1LL, v36);
      }

      uint64_t v18 = a1;
      uint64_t v19 = a3;
      uint64_t v20 = 11LL;
      goto LABEL_106;
    case 0xCu:
      uint64_t v38 = type metadata accessor for AppPunchout(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v38))
      {
        uint64_t v39 = sub_494C(&qword_18A1A0);
        memcpy(a1, a2, *(void *)(*(void *)(v39 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v38 - 8) + 32LL))(a1, a2, v38);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v38);
      }

      uint64_t v151 = (int *)type metadata accessor for SleepQueryModel(0LL);
      uint64_t v152 = v151[5];
      uint64_t v153 = (char *)a1 + v152;
      uint64_t v154 = (char *)a2 + v152;
      uint64_t v155 = type metadata accessor for SnippetHeaderModel(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v154, 1LL, v155))
      {
        uint64_t v156 = sub_494C(&qword_18A1A8);
        memcpy(v153, v154, *(void *)(*(void *)(v156 - 8) + 64LL));
      }

      else
      {
        uint64_t v214 = type metadata accessor for SpeakableString(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v214 - 8) + 32LL))(v153, v154, v214);
        *(_OWORD *)&v153[*(int *)(v155 + 20)] = *(_OWORD *)&v154[*(int *)(v155 + 20)];
        *(_OWORD *)&v153[*(int *)(v155 + 24)] = *(_OWORD *)&v154[*(int *)(v155 + 24)];
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v153, 0LL, 1LL, v155);
      }

      *(_OWORD *)((char *)a1 + v151[6]) = *(_OWORD *)((char *)a2 + v151[6]);
      *(_OWORD *)((char *)a1 + v151[7]) = *(_OWORD *)((char *)a2 + v151[7]);
      *(_OWORD *)((char *)a1 + v151[8]) = *(_OWORD *)((char *)a2 + v151[8]);
      *(_OWORD *)((char *)a1 + v151[9]) = *(_OWORD *)((char *)a2 + v151[9]);
      *(_OWORD *)((char *)a1 + v151[10]) = *(_OWORD *)((char *)a2 + v151[10]);
      *(void *)((char *)a1 + v151[11]) = *(void *)((char *)a2 + v151[11]);
      *(void *)((char *)a1 + v151[12]) = *(void *)((char *)a2 + v151[12]);
      *(void *)((char *)a1 + v151[13]) = *(void *)((char *)a2 + v151[13]);
      *(void *)((char *)a1 + v151[14]) = *(void *)((char *)a2 + v151[14]);
      *(_OWORD *)((char *)a1 + v151[15]) = *(_OWORD *)((char *)a2 + v151[15]);
      *(_OWORD *)((char *)a1 + v151[16]) = *(_OWORD *)((char *)a2 + v151[16]);
      *(_OWORD *)((char *)a1 + v151[17]) = *(_OWORD *)((char *)a2 + v151[17]);
      uint64_t v18 = a1;
      uint64_t v19 = a3;
      uint64_t v20 = 12LL;
      goto LABEL_106;
    case 0xDu:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
      *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      uint64_t v40 = (int *)type metadata accessor for SpecificMedCompletedLogModel(0LL);
      uint64_t v41 = v40[8];
      uint64_t v42 = (char *)a1 + v41;
      uint64_t v43 = (char *)a2 + v41;
      uint64_t v44 = type metadata accessor for AppPunchout(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v43, 1LL, v44))
      {
        uint64_t v45 = sub_494C(&qword_18A1A0);
        memcpy(v42, v43, *(void *)(*(void *)(v45 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32LL))(v42, v43, v44);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v42, 0LL, 1LL, v44);
      }

      uint64_t v157 = v40[9];
      uint64_t v158 = (char *)a1 + v157;
      uint64_t v159 = (char *)a2 + v157;
      *(void *)uint64_t v158 = *(void *)v159;
      v158[8] = v159[8];
      *(_OWORD *)((char *)a1 + v40[10]) = *(_OWORD *)((char *)a2 + v40[10]);
      *(_OWORD *)((char *)a1 + v40[11]) = *(_OWORD *)((char *)a2 + v40[11]);
      *(_OWORD *)((char *)a1 + v40[12]) = *(_OWORD *)((char *)a2 + v40[12]);
      *(_OWORD *)((char *)a1 + v40[13]) = *(_OWORD *)((char *)a2 + v40[13]);
      *((_BYTE *)a1 + v40[14]) = *((_BYTE *)a2 + v40[14]);
      *((_BYTE *)a1 + v40[15]) = *((_BYTE *)a2 + v40[15]);
      *(_OWORD *)((char *)a1 + v40[16]) = *(_OWORD *)((char *)a2 + v40[16]);
      *(_OWORD *)((char *)a1 + v40[17]) = *(_OWORD *)((char *)a2 + v40[17]);
      *(_OWORD *)((char *)a1 + v40[18]) = *(_OWORD *)((char *)a2 + v40[18]);
      uint64_t v160 = v40[19];
      uint64_t v161 = (char *)a1 + v160;
      uint64_t v162 = (char *)a2 + v160;
      uint64_t v163 = type metadata accessor for SnippetHeaderModel(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v162, 1LL, v163))
      {
        uint64_t v164 = sub_494C(&qword_18A1A8);
        memcpy(v161, v162, *(void *)(*(void *)(v164 - 8) + 64LL));
      }

      else
      {
        uint64_t v215 = type metadata accessor for SpeakableString(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v215 - 8) + 32LL))(v161, v162, v215);
        *(_OWORD *)&v161[*(int *)(v163 + 20)] = *(_OWORD *)&v162[*(int *)(v163 + 20)];
        *(_OWORD *)&v161[*(int *)(v163 + 24)] = *(_OWORD *)&v162[*(int *)(v163 + 24)];
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v161, 0LL, 1LL, v163);
      }

      uint64_t v18 = a1;
      uint64_t v19 = a3;
      uint64_t v20 = 13LL;
      goto LABEL_106;
    case 0xEu:
      uint64_t v46 = type metadata accessor for AppPunchout(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v46))
      {
        uint64_t v47 = sub_494C(&qword_18A1A0);
        memcpy(a1, a2, *(void *)(*(void *)(v47 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v46 - 8) + 32LL))(a1, a2, v46);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v46);
      }

      uint64_t v165 = (int *)type metadata accessor for TemperatureQueryModel(0LL);
      uint64_t v166 = v165[5];
      uint64_t v167 = (char *)a1 + v166;
      uint64_t v168 = (char *)a2 + v166;
      *(void *)uint64_t v167 = *(void *)v168;
      v167[8] = v168[8];
      uint64_t v169 = v165[6];
      uint64_t v170 = (char *)a1 + v169;
      uint64_t v171 = (char *)a2 + v169;
      *(void *)uint64_t v170 = *(void *)v171;
      v170[8] = v171[8];
      uint64_t v172 = v165[7];
      uint64_t v173 = (char *)a1 + v172;
      uint64_t v174 = (char *)a2 + v172;
      v173[8] = v174[8];
      *(void *)uint64_t v173 = *(void *)v174;
      uint64_t v175 = v165[8];
      uint64_t v176 = (char *)a1 + v175;
      uint64_t v177 = (char *)a2 + v175;
      v176[8] = v177[8];
      *(void *)uint64_t v176 = *(void *)v177;
      uint64_t v178 = v165[9];
      uint64_t v179 = (char *)a1 + v178;
      uint64_t v180 = (char *)a2 + v178;
      v179[8] = v180[8];
      *(void *)uint64_t v179 = *(void *)v180;
      uint64_t v181 = v165[10];
      uint64_t v182 = (char *)a1 + v181;
      uint64_t v183 = (char *)a2 + v181;
      uint64_t v184 = type metadata accessor for SpeakableString(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v183, 1LL, v184))
      {
        uint64_t v185 = sub_494C(&qword_189D00);
        memcpy(v182, v183, *(void *)(*(void *)(v185 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v184 - 8) + 32LL))(v182, v183, v184);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v182, 0LL, 1LL, v184);
      }

      *(_OWORD *)((char *)a1 + v165[11]) = *(_OWORD *)((char *)a2 + v165[11]);
      *(_OWORD *)((char *)a1 + v165[12]) = *(_OWORD *)((char *)a2 + v165[12]);
      *(_OWORD *)((char *)a1 + v165[13]) = *(_OWORD *)((char *)a2 + v165[13]);
      *(_OWORD *)((char *)a1 + v165[14]) = *(_OWORD *)((char *)a2 + v165[14]);
      *(_OWORD *)((char *)a1 + v165[15]) = *(_OWORD *)((char *)a2 + v165[15]);
      uint64_t v216 = v165[16];
      uint64_t v217 = (char *)a1 + v216;
      uint64_t v218 = (char *)a2 + v216;
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v216, 1LL, v184))
      {
        uint64_t v219 = sub_494C(&qword_189D00);
        memcpy(v217, v218, *(void *)(*(void *)(v219 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v184 - 8) + 32LL))(v217, v218, v184);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v217, 0LL, 1LL, v184);
      }

      *(_OWORD *)((char *)a1 + v165[17]) = *(_OWORD *)((char *)a2 + v165[17]);
      uint64_t v221 = v165[18];
      uint64_t v222 = (char *)a1 + v221;
      uint64_t v223 = (char *)a2 + v221;
      uint64_t v224 = type metadata accessor for SnippetHeaderModel(0LL);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v223, 1LL, v224))
      {
        uint64_t v225 = sub_494C(&qword_18A1A8);
        memcpy(v222, v223, *(void *)(*(void *)(v225 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v184 - 8) + 32LL))(v222, v223, v184);
        *(_OWORD *)&v222[*(int *)(v224 + 20)] = *(_OWORD *)&v223[*(int *)(v224 + 20)];
        *(_OWORD *)&v222[*(int *)(v224 + 24)] = *(_OWORD *)&v223[*(int *)(v224 + 24)];
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v222, 0LL, 1LL, v224);
      }

      uint64_t v18 = a1;
      uint64_t v19 = a3;
      uint64_t v20 = 14LL;
LABEL_106:
      swift_storeEnumTagMultiPayload(v18, v19, v20);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

_OWORD *assignWithTake for WellnessSnippets(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_182B4((uint64_t)a1, type metadata accessor for WellnessSnippets);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v6 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
        {
          uint64_t v7 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
        }

        Model = (int *)type metadata accessor for OxygenSaturationQueryModel(0LL);
        uint64_t v49 = Model[5];
        uint64_t v50 = (char *)a1 + v49;
        uint64_t v51 = (char *)a2 + v49;
        *(void *)uint64_t v50 = *(void *)v51;
        v50[8] = v51[8];
        uint64_t v52 = Model[6];
        uint64_t v53 = (char *)a1 + v52;
        uint64_t v54 = (char *)a2 + v52;
        *(void *)uint64_t v53 = *(void *)v54;
        v53[8] = v54[8];
        uint64_t v55 = Model[7];
        uint64_t v56 = (char *)a1 + v55;
        uint64_t v57 = (char *)a2 + v55;
        v56[8] = v57[8];
        *(void *)uint64_t v56 = *(void *)v57;
        uint64_t v58 = Model[8];
        uint64_t v59 = (char *)a1 + v58;
        uint64_t v60 = (char *)a2 + v58;
        v59[8] = v60[8];
        *(void *)uint64_t v59 = *(void *)v60;
        uint64_t v61 = Model[9];
        uint64_t v62 = (char *)a1 + v61;
        uint64_t v63 = (char *)a2 + v61;
        uint64_t v64 = type metadata accessor for SpeakableString(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v63, 1LL, v64))
        {
          uint64_t v65 = sub_494C(&qword_189D00);
          memcpy(v62, v63, *(void *)(*(void *)(v65 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 32LL))(v62, v63, v64);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v62, 0LL, 1LL, v64);
        }

        *(_OWORD *)((char *)a1 + Model[10]) = *(_OWORD *)((char *)a2 + Model[10]);
        *(_OWORD *)((char *)a1 + Model[11]) = *(_OWORD *)((char *)a2 + Model[11]);
        *(_OWORD *)((char *)a1 + Model[12]) = *(_OWORD *)((char *)a2 + Model[12]);
        *(_OWORD *)((char *)a1 + Model[13]) = *(_OWORD *)((char *)a2 + Model[13]);
        *(_OWORD *)((char *)a1 + Model[14]) = *(_OWORD *)((char *)a2 + Model[14]);
        *(_OWORD *)((char *)a1 + Model[15]) = *(_OWORD *)((char *)a2 + Model[15]);
        uint64_t v186 = Model[16];
        uint64_t v187 = (char *)a1 + v186;
        uint64_t v188 = (char *)a2 + v186;
        uint64_t v189 = type metadata accessor for SnippetHeaderModel(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v188, 1LL, v189))
        {
          uint64_t v190 = sub_494C(&qword_18A1A8);
          memcpy(v187, v188, *(void *)(*(void *)(v190 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 32LL))(v187, v188, v64);
          *(_OWORD *)&v187[*(int *)(v189 + 20)] = *(_OWORD *)&v188[*(int *)(v189 + 20)];
          *(_OWORD *)&v187[*(int *)(v189 + 24)] = *(_OWORD *)&v188[*(int *)(v189 + 24)];
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v187, 0LL, 1LL, v189);
        }

        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 0LL;
        goto LABEL_107;
      case 1u:
        uint64_t v8 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v8))
        {
          uint64_t v9 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v8);
        }

        uint64_t v66 = (int *)type metadata accessor for BloodPressureQueryModel(0LL);
        uint64_t v67 = v66[5];
        uint64_t v68 = (char *)a1 + v67;
        uint64_t v69 = (char *)a2 + v67;
        *(void *)uint64_t v68 = *(void *)v69;
        v68[8] = v69[8];
        uint64_t v70 = v66[6];
        uint64_t v71 = (char *)a1 + v70;
        uint64_t v72 = (char *)a2 + v70;
        *(void *)uint64_t v71 = *(void *)v72;
        v71[8] = v72[8];
        uint64_t v73 = v66[7];
        uint64_t v74 = (char *)a1 + v73;
        uint64_t v75 = (char *)a2 + v73;
        v74[8] = v75[8];
        *(void *)uint64_t v74 = *(void *)v75;
        uint64_t v76 = v66[8];
        uint64_t v77 = (char *)a1 + v76;
        uint64_t v78 = (char *)a2 + v76;
        v77[8] = v78[8];
        *(void *)uint64_t v77 = *(void *)v78;
        uint64_t v79 = v66[9];
        char v80 = (char *)a1 + v79;
        uint64_t v81 = (char *)a2 + v79;
        v80[8] = v81[8];
        *(void *)char v80 = *(void *)v81;
        uint64_t v82 = v66[10];
        uint64_t v83 = (char *)a1 + v82;
        char v84 = (char *)a2 + v82;
        *(void *)uint64_t v83 = *(void *)v84;
        v83[8] = v84[8];
        *(_OWORD *)((char *)a1 + v66[11]) = *(_OWORD *)((char *)a2 + v66[11]);
        *(_OWORD *)((char *)a1 + v66[12]) = *(_OWORD *)((char *)a2 + v66[12]);
        *(_OWORD *)((char *)a1 + v66[13]) = *(_OWORD *)((char *)a2 + v66[13]);
        *(_OWORD *)((char *)a1 + v66[14]) = *(_OWORD *)((char *)a2 + v66[14]);
        *(_OWORD *)((char *)a1 + v66[15]) = *(_OWORD *)((char *)a2 + v66[15]);
        *(_OWORD *)((char *)a1 + v66[16]) = *(_OWORD *)((char *)a2 + v66[16]);
        *(_OWORD *)((char *)a1 + v66[17]) = *(_OWORD *)((char *)a2 + v66[17]);
        *(_OWORD *)((char *)a1 + v66[18]) = *(_OWORD *)((char *)a2 + v66[18]);
        *(_OWORD *)((char *)a1 + v66[19]) = *(_OWORD *)((char *)a2 + v66[19]);
        uint64_t v85 = v66[20];
        uint64_t v86 = (char *)a1 + v85;
        uint64_t v87 = (char *)a2 + v85;
        uint64_t v88 = type metadata accessor for URL(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v87, 1LL, v88))
        {
          uint64_t v89 = sub_494C(&qword_189CF8);
          memcpy(v86, v87, *(void *)(*(void *)(v89 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 32LL))(v86, v87, v88);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v86, 0LL, 1LL, v88);
        }

        *(_OWORD *)((char *)a1 + v66[21]) = *(_OWORD *)((char *)a2 + v66[21]);
        *(_OWORD *)((char *)a1 + v66[22]) = *(_OWORD *)((char *)a2 + v66[22]);
        uint64_t v191 = v66[23];
        uint64_t v192 = (char *)a1 + v191;
        uint64_t v193 = (char *)a2 + v191;
        uint64_t v194 = type metadata accessor for SnippetHeaderModel(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v193, 1LL, v194))
        {
          uint64_t v195 = sub_494C(&qword_18A1A8);
          memcpy(v192, v193, *(void *)(*(void *)(v195 - 8) + 64LL));
        }

        else
        {
          uint64_t v220 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v220 - 8) + 32LL))(v192, v193, v220);
          *(_OWORD *)&v192[*(int *)(v194 + 20)] = *(_OWORD *)&v193[*(int *)(v194 + 20)];
          *(_OWORD *)&v192[*(int *)(v194 + 24)] = *(_OWORD *)&v193[*(int *)(v194 + 24)];
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v192, 0LL, 1LL, v194);
        }

        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 1LL;
        goto LABEL_107;
      case 2u:
        uint64_t v10 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v10))
        {
          uint64_t v11 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v10 - 8) + 32LL))(a1, a2, v10);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v10);
        }

        uint64_t v90 = (int *)type metadata accessor for BloodPressureLogModel(0LL);
        *(_OWORD *)((char *)a1 + v90[5]) = *(_OWORD *)((char *)a2 + v90[5]);
        *(_OWORD *)((char *)a1 + v90[6]) = *(_OWORD *)((char *)a2 + v90[6]);
        *(_OWORD *)((char *)a1 + v90[7]) = *(_OWORD *)((char *)a2 + v90[7]);
        uint64_t v91 = v90[8];
        char v92 = (char *)a1 + v91;
        uint64_t v93 = (char *)a2 + v91;
        uint64_t v94 = type metadata accessor for SnippetHeaderModel(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v93, 1LL, v94))
        {
          uint64_t v95 = sub_494C(&qword_18A1A8);
          memcpy(v92, v93, *(void *)(*(void *)(v95 - 8) + 64LL));
        }

        else
        {
          uint64_t v196 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v196 - 8) + 32LL))(v92, v93, v196);
          *(_OWORD *)&v92[*(int *)(v94 + 20)] = *(_OWORD *)&v93[*(int *)(v94 + 20)];
          *(_OWORD *)&v92[*(int *)(v94 + 24)] = *(_OWORD *)&v93[*(int *)(v94 + 24)];
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v92, 0LL, 1LL, v94);
        }

        *(_OWORD *)((char *)a1 + v90[9]) = *(_OWORD *)((char *)a2 + v90[9]);
        *(_OWORD *)((char *)a1 + v90[10]) = *(_OWORD *)((char *)a2 + v90[10]);
        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 2LL;
        goto LABEL_107;
      case 3u:
        uint64_t v12 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v12))
        {
          uint64_t v13 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v12 - 8) + 32LL))(a1, a2, v12);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v12);
        }

        uint64_t v96 = (int *)type metadata accessor for CycleTrackingLogModel(0LL);
        *(_OWORD *)((char *)a1 + v96[5]) = *(_OWORD *)((char *)a2 + v96[5]);
        *(_OWORD *)((char *)a1 + v96[6]) = *(_OWORD *)((char *)a2 + v96[6]);
        *(_OWORD *)((char *)a1 + v96[7]) = *(_OWORD *)((char *)a2 + v96[7]);
        uint64_t v97 = v96[8];
        uint64_t v98 = (char *)a1 + v97;
        uint64_t v99 = (char *)a2 + v97;
        uint64_t v100 = type metadata accessor for SnippetHeaderModel(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v99, 1LL, v100))
        {
          uint64_t v101 = sub_494C(&qword_18A1A8);
          memcpy(v98, v99, *(void *)(*(void *)(v101 - 8) + 64LL));
        }

        else
        {
          uint64_t v197 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v197 - 8) + 32LL))(v98, v99, v197);
          *(_OWORD *)&v98[*(int *)(v100 + 20)] = *(_OWORD *)&v99[*(int *)(v100 + 20)];
          *(_OWORD *)&v98[*(int *)(v100 + 24)] = *(_OWORD *)&v99[*(int *)(v100 + 24)];
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v98, 0LL, 1LL, v100);
        }

        uint64_t v198 = v96[9];
        uint64_t v199 = (char *)a1 + v198;
        uint64_t v200 = (char *)a2 + v198;
        uint64_t v201 = type metadata accessor for URL(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v200, 1LL, v201))
        {
          uint64_t v202 = sub_494C(&qword_189CF8);
          memcpy(v199, v200, *(void *)(*(void *)(v202 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v201 - 8) + 32LL))(v199, v200, v201);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v199, 0LL, 1LL, v201);
        }

        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 3LL;
        goto LABEL_107;
      case 4u:
        *a1 = *a2;
        uint64_t v14 = *(int *)(type metadata accessor for GenericButtonModel(0LL) + 20);
        uint64_t v15 = (char *)a1 + v14;
        uint64_t v16 = (char *)a2 + v14;
        uint64_t v17 = type metadata accessor for URL(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32LL))(v15, v16, v17);
        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 4LL;
        goto LABEL_107;
      case 6u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
        uint64_t v21 = (int *)type metadata accessor for GenericMedCompletedLogModel(0LL);
        uint64_t v22 = v21[6];
        uint64_t v23 = (char *)a1 + v22;
        uint64_t v24 = (char *)a2 + v22;
        uint64_t v25 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1LL, v25))
        {
          uint64_t v26 = sub_494C(&qword_18A1A0);
          memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32LL))(v23, v24, v25);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0LL, 1LL, v25);
        }

        *((_BYTE *)a1 + v21[7]) = *((_BYTE *)a2 + v21[7]);
        *(_OWORD *)((char *)a1 + v21[8]) = *(_OWORD *)((char *)a2 + v21[8]);
        *((_BYTE *)a1 + v21[9]) = *((_BYTE *)a2 + v21[9]);
        *(_OWORD *)((char *)a1 + v21[10]) = *(_OWORD *)((char *)a2 + v21[10]);
        *(_OWORD *)((char *)a1 + v21[11]) = *(_OWORD *)((char *)a2 + v21[11]);
        *(_OWORD *)((char *)a1 + v21[12]) = *(_OWORD *)((char *)a2 + v21[12]);
        *(_OWORD *)((char *)a1 + v21[13]) = *(_OWORD *)((char *)a2 + v21[13]);
        uint64_t v102 = v21[14];
        uint64_t v103 = (char *)a1 + v102;
        unint64_t v104 = (char *)a2 + v102;
        uint64_t v105 = type metadata accessor for SnippetHeaderModel(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v104, 1LL, v105))
        {
          uint64_t v106 = sub_494C(&qword_18A1A8);
          memcpy(v103, v104, *(void *)(*(void *)(v106 - 8) + 64LL));
        }

        else
        {
          uint64_t v203 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v203 - 8) + 32LL))(v103, v104, v203);
          *(_OWORD *)&v103[*(int *)(v105 + 20)] = *(_OWORD *)&v104[*(int *)(v105 + 20)];
          *(_OWORD *)&v103[*(int *)(v105 + 24)] = *(_OWORD *)&v104[*(int *)(v105 + 24)];
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v103, 0LL, 1LL, v105);
        }

        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 6LL;
        goto LABEL_107;
      case 7u:
        uint64_t v27 = type metadata accessor for SnippetHeaderModel(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v27))
        {
          uint64_t v28 = sub_494C(&qword_18A1A8);
          memcpy(a1, a2, *(void *)(*(void *)(v28 - 8) + 64LL));
        }

        else
        {
          uint64_t v107 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v107 - 8) + 32LL))(a1, a2, v107);
          *(_OWORD *)((char *)a1 + *(int *)(v27 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v27 + 20));
          *(_OWORD *)((char *)a1 + *(int *)(v27 + sub_D878((void *)(v0 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v27 + 24));
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v27);
        }

        uint64_t v108 = (int *)type metadata accessor for HealthDataLogModel(0LL);
        *(void *)((char *)a1 + v108[5]) = *(void *)((char *)a2 + v108[5]);
        *(_OWORD *)((char *)a1 + v108[6]) = *(_OWORD *)((char *)a2 + v108[6]);
        *(_OWORD *)((char *)a1 + v108[7]) = *(_OWORD *)((char *)a2 + v108[7]);
        *(_OWORD *)((char *)a1 + v108[8]) = *(_OWORD *)((char *)a2 + v108[8]);
        *(_OWORD *)((char *)a1 + v108[9]) = *(_OWORD *)((char *)a2 + v108[9]);
        uint64_t v109 = v108[10];
        char v110 = (char *)a1 + v109;
        uint64_t v111 = (char *)a2 + v109;
        uint64_t v112 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v111, 1LL, v112))
        {
          uint64_t v113 = sub_494C(&qword_18A1A0);
          memcpy(v110, v111, *(void *)(*(void *)(v113 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v112 - 8) + 32LL))(v110, v111, v112);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v110, 0LL, 1LL, v112);
        }

        *(_OWORD *)((char *)a1 + v108[11]) = *(_OWORD *)((char *)a2 + v108[11]);
        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 7LL;
        goto LABEL_107;
      case 8u:
        uint64_t v29 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v29))
        {
          uint64_t v30 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v30 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v29 - 8) + 32LL))(a1, a2, v29);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v29);
        }

        char v114 = (int *)type metadata accessor for GenericQueryModel(0LL);
        uint64_t v115 = v114[5];
        uint64_t v116 = (char *)a1 + v115;
        uint64_t v117 = (char *)a2 + v115;
        *(void *)uint64_t v116 = *(void *)v117;
        v116[8] = v117[8];
        uint64_t v118 = v114[6];
        uint64_t v119 = (char *)a1 + v118;
        uint64_t v120 = (char *)a2 + v118;
        *(void *)uint64_t v119 = *(void *)v120;
        v119[8] = v120[8];
        uint64_t v121 = v114[7];
        uint64_t v122 = (char *)a1 + v121;
        uint64_t v123 = (char *)a2 + v121;
        v122[8] = v123[8];
        *(void *)uint64_t v122 = *(void *)v123;
        uint64_t v124 = v114[8];
        uint64_t v125 = (char *)a1 + v124;
        uint64_t v126 = (char *)a2 + v124;
        v125[8] = v126[8];
        *(void *)uint64_t v125 = *(void *)v126;
        uint64_t v127 = v114[9];
        uint64_t v128 = (char *)a1 + v127;
        uint64_t v129 = (char *)a2 + v127;
        char v128[8] = v129[8];
        *(void *)uint64_t v128 = *(void *)v129;
        uint64_t v130 = v114[10];
        uint64_t v131 = (char *)a1 + v130;
        uint64_t v132 = (char *)a2 + v130;
        uint64_t v133 = type metadata accessor for SpeakableString(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v132, 1LL, v133))
        {
          uint64_t v134 = sub_494C(&qword_189D00);
          memcpy(v131, v132, *(void *)(*(void *)(v134 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v133 - 8) + 32LL))(v131, v132, v133);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v131, 0LL, 1LL, v133);
        }

        *(_OWORD *)((char *)a1 + v114[11]) = *(_OWORD *)((char *)a2 + v114[11]);
        *(_OWORD *)((char *)a1 + v114[12]) = *(_OWORD *)((char *)a2 + v114[12]);
        *(_OWORD *)((char *)a1 + v114[13]) = *(_OWORD *)((char *)a2 + v114[13]);
        *(_OWORD *)((char *)a1 + v114[14]) = *(_OWORD *)((char *)a2 + v114[14]);
        *(_OWORD *)((char *)a1 + v114[15]) = *(_OWORD *)((char *)a2 + v114[15]);
        *(_OWORD *)((char *)a1 + v114[16]) = *(_OWORD *)((char *)a2 + v114[16]);
        *(_OWORD *)((char *)a1 + v114[17]) = *(_OWORD *)((char *)a2 + v114[17]);
        uint64_t v204 = v114[18];
        uint64_t v205 = (char *)a1 + v204;
        uint64_t v206 = (char *)a2 + v204;
        uint64_t v207 = type metadata accessor for SnippetHeaderModel(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v206, 1LL, v207))
        {
          uint64_t v208 = sub_494C(&qword_18A1A8);
          memcpy(v205, v206, *(void *)(*(void *)(v208 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v133 - 8) + 32LL))(v205, v206, v133);
          *(_OWORD *)&v205[*(int *)(v207 + 20)] = *(_OWORD *)&v206[*(int *)(v207 + 20)];
          *(_OWORD *)&v205[*(int *)(v207 + 24)] = *(_OWORD *)&v206[*(int *)(v207 + 24)];
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v205, 0LL, 1LL, v207);
        }

        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 8LL;
        goto LABEL_107;
      case 9u:
        uint64_t v31 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v31))
        {
          uint64_t v32 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v32 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v31 - 8) + 32LL))(a1, a2, v31);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v31);
        }

        uint64_t v135 = (int *)type metadata accessor for HeightQueryModel(0LL);
        uint64_t v136 = v135[5];
        uint64_t v137 = (char *)a1 + v136;
        uint64_t v138 = (char *)a2 + v136;
        *(void *)uint64_t v137 = *(void *)v138;
        char v137[8] = v138[8];
        uint64_t v139 = v135[6];
        uint64_t v140 = (char *)a1 + v139;
        uint64_t v141 = (char *)a2 + v139;
        *(void *)uint64_t v140 = *(void *)v141;
        char v140[8] = v141[8];
        uint64_t v142 = v135[7];
        uint64_t v143 = (char *)a1 + v142;
        uint64_t v144 = (char *)a2 + v142;
        v143[8] = v144[8];
        *(void *)uint64_t v143 = *(void *)v144;
        uint64_t v145 = v135[8];
        uint64_t v146 = (char *)a1 + v145;
        uint64_t v147 = (char *)a2 + v145;
        uint64_t v148 = type metadata accessor for SpeakableString(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v147, 1LL, v148))
        {
          uint64_t v149 = sub_494C(&qword_189D00);
          memcpy(v146, v147, *(void *)(*(void *)(v149 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v148 - 8) + 32LL))(v146, v147, v148);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v146, 0LL, 1LL, v148);
        }

        *((_BYTE *)a1 + v135[9]) = *((_BYTE *)a2 + v135[9]);
        uint64_t v209 = v135[10];
        uint64_t v210 = (char *)a1 + v209;
        uint64_t v211 = (char *)a2 + v209;
        uint64_t v212 = type metadata accessor for SnippetHeaderModel(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v211, 1LL, v212))
        {
          uint64_t v213 = sub_494C(&qword_18A1A8);
          memcpy(v210, v211, *(void *)(*(void *)(v213 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v148 - 8) + 32LL))(v210, v211, v148);
          *(_OWORD *)&v210[*(int *)(v212 + 20)] = *(_OWORD *)&v211[*(int *)(v212 + 20)];
          *(_OWORD *)&v210[*(int *)(v212 + 24)] = *(_OWORD *)&v211[*(int *)(v212 + 24)];
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v210, 0LL, 1LL, v212);
        }

        *(_OWORD *)((char *)a1 + v135[11]) = *(_OWORD *)((char *)a2 + v135[11]);
        *(_OWORD *)((char *)a1 + v135[12]) = *(_OWORD *)((char *)a2 + v135[12]);
        *(_OWORD *)((char *)a1 + v135[13]) = *(_OWORD *)((char *)a2 + v135[13]);
        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 9LL;
        goto LABEL_107;
      case 0xBu:
        *a1 = *a2;
        *((void *)a1 + 2) = *((void *)a2 + 2);
        *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
        *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
        *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)((char *)a2 + 72);
        uint64_t v33 = *(int *)(type metadata accessor for SingleActivitySummaryModel(0LL) + 44);
        uint64_t v34 = (char *)a1 + v33;
        uint64_t v35 = (char *)a2 + v33;
        uint64_t v36 = type metadata accessor for SnippetHeaderModel(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v35, 1LL, v36))
        {
          uint64_t v37 = sub_494C(&qword_18A1A8);
          memcpy(v34, v35, *(void *)(*(void *)(v37 - 8) + 64LL));
        }

        else
        {
          uint64_t v150 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v150 - 8) + 32LL))(v34, v35, v150);
          *(_OWORD *)&v34[*(int *)(v36 + 20)] = *(_OWORD *)&v35[*(int *)(v36 + 20)];
          *(_OWORD *)&v34[*(int *)(v36 + 24)] = *(_OWORD *)&v35[*(int *)(v36 + 24)];
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v34, 0LL, 1LL, v36);
        }

        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 11LL;
        goto LABEL_107;
      case 0xCu:
        uint64_t v38 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v38))
        {
          uint64_t v39 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v39 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v38 - 8) + 32LL))(a1, a2, v38);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v38);
        }

        uint64_t v151 = (int *)type metadata accessor for SleepQueryModel(0LL);
        uint64_t v152 = v151[5];
        uint64_t v153 = (char *)a1 + v152;
        uint64_t v154 = (char *)a2 + v152;
        uint64_t v155 = type metadata accessor for SnippetHeaderModel(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v154, 1LL, v155))
        {
          uint64_t v156 = sub_494C(&qword_18A1A8);
          memcpy(v153, v154, *(void *)(*(void *)(v156 - 8) + 64LL));
        }

        else
        {
          uint64_t v214 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v214 - 8) + 32LL))(v153, v154, v214);
          *(_OWORD *)&v153[*(int *)(v155 + 20)] = *(_OWORD *)&v154[*(int *)(v155 + 20)];
          *(_OWORD *)&v153[*(int *)(v155 + 24)] = *(_OWORD *)&v154[*(int *)(v155 + 24)];
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v153, 0LL, 1LL, v155);
        }

        *(_OWORD *)((char *)a1 + v151[6]) = *(_OWORD *)((char *)a2 + v151[6]);
        *(_OWORD *)((char *)a1 + v151[7]) = *(_OWORD *)((char *)a2 + v151[7]);
        *(_OWORD *)((char *)a1 + v151[8]) = *(_OWORD *)((char *)a2 + v151[8]);
        *(_OWORD *)((char *)a1 + v151[9]) = *(_OWORD *)((char *)a2 + v151[9]);
        *(_OWORD *)((char *)a1 + v151[10]) = *(_OWORD *)((char *)a2 + v151[10]);
        *(void *)((char *)a1 + v151[11]) = *(void *)((char *)a2 + v151[11]);
        *(void *)((char *)a1 + v151[12]) = *(void *)((char *)a2 + v151[12]);
        *(void *)((char *)a1 + v151[13]) = *(void *)((char *)a2 + v151[13]);
        *(void *)((char *)a1 + v151[14]) = *(void *)((char *)a2 + v151[14]);
        *(_OWORD *)((char *)a1 + v151[15]) = *(_OWORD *)((char *)a2 + v151[15]);
        *(_OWORD *)((char *)a1 + v151[16]) = *(_OWORD *)((char *)a2 + v151[16]);
        *(_OWORD *)((char *)a1 + v151[17]) = *(_OWORD *)((char *)a2 + v151[17]);
        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 12LL;
        goto LABEL_107;
      case 0xDu:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
        *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
        *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
        uint64_t v40 = (int *)type metadata accessor for SpecificMedCompletedLogModel(0LL);
        uint64_t v41 = v40[8];
        uint64_t v42 = (char *)a1 + v41;
        uint64_t v43 = (char *)a2 + v41;
        uint64_t v44 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v43, 1LL, v44))
        {
          uint64_t v45 = sub_494C(&qword_18A1A0);
          memcpy(v42, v43, *(void *)(*(void *)(v45 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32LL))(v42, v43, v44);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v42, 0LL, 1LL, v44);
        }

        uint64_t v157 = v40[9];
        uint64_t v158 = (char *)a1 + v157;
        uint64_t v159 = (char *)a2 + v157;
        *(void *)uint64_t v158 = *(void *)v159;
        v158[8] = v159[8];
        *(_OWORD *)((char *)a1 + v40[10]) = *(_OWORD *)((char *)a2 + v40[10]);
        *(_OWORD *)((char *)a1 + v40[11]) = *(_OWORD *)((char *)a2 + v40[11]);
        *(_OWORD *)((char *)a1 + v40[12]) = *(_OWORD *)((char *)a2 + v40[12]);
        *(_OWORD *)((char *)a1 + v40[13]) = *(_OWORD *)((char *)a2 + v40[13]);
        *((_BYTE *)a1 + v40[14]) = *((_BYTE *)a2 + v40[14]);
        *((_BYTE *)a1 + v40[15]) = *((_BYTE *)a2 + v40[15]);
        *(_OWORD *)((char *)a1 + v40[16]) = *(_OWORD *)((char *)a2 + v40[16]);
        *(_OWORD *)((char *)a1 + v40[17]) = *(_OWORD *)((char *)a2 + v40[17]);
        *(_OWORD *)((char *)a1 + v40[18]) = *(_OWORD *)((char *)a2 + v40[18]);
        uint64_t v160 = v40[19];
        uint64_t v161 = (char *)a1 + v160;
        uint64_t v162 = (char *)a2 + v160;
        uint64_t v163 = type metadata accessor for SnippetHeaderModel(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v162, 1LL, v163))
        {
          uint64_t v164 = sub_494C(&qword_18A1A8);
          memcpy(v161, v162, *(void *)(*(void *)(v164 - 8) + 64LL));
        }

        else
        {
          uint64_t v215 = type metadata accessor for SpeakableString(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v215 - 8) + 32LL))(v161, v162, v215);
          *(_OWORD *)&v161[*(int *)(v163 + 20)] = *(_OWORD *)&v162[*(int *)(v163 + 20)];
          *(_OWORD *)&v161[*(int *)(v163 + 24)] = *(_OWORD *)&v162[*(int *)(v163 + 24)];
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v161, 0LL, 1LL, v163);
        }

        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 13LL;
        goto LABEL_107;
      case 0xEu:
        uint64_t v46 = type metadata accessor for AppPunchout(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v46))
        {
          uint64_t v47 = sub_494C(&qword_18A1A0);
          memcpy(a1, a2, *(void *)(*(void *)(v47 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v46 - 8) + 32LL))(a1, a2, v46);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v46);
        }

        uint64_t v165 = (int *)type metadata accessor for TemperatureQueryModel(0LL);
        uint64_t v166 = v165[5];
        uint64_t v167 = (char *)a1 + v166;
        uint64_t v168 = (char *)a2 + v166;
        *(void *)uint64_t v167 = *(void *)v168;
        v167[8] = v168[8];
        uint64_t v169 = v165[6];
        uint64_t v170 = (char *)a1 + v169;
        uint64_t v171 = (char *)a2 + v169;
        *(void *)uint64_t v170 = *(void *)v171;
        v170[8] = v171[8];
        uint64_t v172 = v165[7];
        uint64_t v173 = (char *)a1 + v172;
        uint64_t v174 = (char *)a2 + v172;
        v173[8] = v174[8];
        *(void *)uint64_t v173 = *(void *)v174;
        uint64_t v175 = v165[8];
        uint64_t v176 = (char *)a1 + v175;
        uint64_t v177 = (char *)a2 + v175;
        v176[8] = v177[8];
        *(void *)uint64_t v176 = *(void *)v177;
        uint64_t v178 = v165[9];
        uint64_t v179 = (char *)a1 + v178;
        uint64_t v180 = (char *)a2 + v178;
        v179[8] = v180[8];
        *(void *)uint64_t v179 = *(void *)v180;
        uint64_t v181 = v165[10];
        uint64_t v182 = (char *)a1 + v181;
        uint64_t v183 = (char *)a2 + v181;
        uint64_t v184 = type metadata accessor for SpeakableString(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v183, 1LL, v184))
        {
          uint64_t v185 = sub_494C(&qword_189D00);
          memcpy(v182, v183, *(void *)(*(void *)(v185 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v184 - 8) + 32LL))(v182, v183, v184);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v182, 0LL, 1LL, v184);
        }

        *(_OWORD *)((char *)a1 + v165[11]) = *(_OWORD *)((char *)a2 + v165[11]);
        *(_OWORD *)((char *)a1 + v165[12]) = *(_OWORD *)((char *)a2 + v165[12]);
        *(_OWORD *)((char *)a1 + v165[13]) = *(_OWORD *)((char *)a2 + v165[13]);
        *(_OWORD *)((char *)a1 + v165[14]) = *(_OWORD *)((char *)a2 + v165[14]);
        *(_OWORD *)((char *)a1 + v165[15]) = *(_OWORD *)((char *)a2 + v165[15]);
        uint64_t v216 = v165[16];
        uint64_t v217 = (char *)a1 + v216;
        uint64_t v218 = (char *)a2 + v216;
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v216, 1LL, v184))
        {
          uint64_t v219 = sub_494C(&qword_189D00);
          memcpy(v217, v218, *(void *)(*(void *)(v219 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v184 - 8) + 32LL))(v217, v218, v184);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v217, 0LL, 1LL, v184);
        }

        *(_OWORD *)((char *)a1 + v165[17]) = *(_OWORD *)((char *)a2 + v165[17]);
        uint64_t v221 = v165[18];
        uint64_t v222 = (char *)a1 + v221;
        uint64_t v223 = (char *)a2 + v221;
        uint64_t v224 = type metadata accessor for SnippetHeaderModel(0LL);
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v223, 1LL, v224))
        {
          uint64_t v225 = sub_494C(&qword_18A1A8);
          memcpy(v222, v223, *(void *)(*(void *)(v225 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v184 - 8) + 32LL))(v222, v223, v184);
          *(_OWORD *)&v222[*(int *)(v224 + 20)] = *(_OWORD *)&v223[*(int *)(v224 + 20)];
          *(_OWORD *)&v222[*(int *)(v224 + 24)] = *(_OWORD *)&v223[*(int *)(v224 + 24)];
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v222, 0LL, 1LL, v224);
        }

        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 14LL;
LABEL_107:
        swift_storeEnumTagMultiPayload(v18, v19, v20);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

uint64_t sub_1B354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_1B364(uint64_t a1)
{
  uint64_t result = type metadata accessor for OxygenSaturationQueryModel(319LL);
  if (v3 <= 0x3F)
  {
    v16[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for BloodPressureQueryModel(319LL);
    if (v4 <= 0x3F)
    {
      v16[1] = *(void *)(result - 8) + 64LL;
      uint64_t result = type metadata accessor for BloodPressureLogModel(319LL);
      if (v5 <= 0x3F)
      {
        v16[2] = *(void *)(result - 8) + 64LL;
        uint64_t result = type metadata accessor for CycleTrackingLogModel(319LL);
        if (v6 <= 0x3F)
        {
          v16[3] = *(void *)(result - 8) + 64LL;
          uint64_t result = type metadata accessor for GenericButtonModel(319LL);
          if (v7 <= 0x3F)
          {
            v16[4] = *(void *)(result - 8) + 64LL;
            v16[5] = "1";
            uint64_t result = type metadata accessor for GenericMedCompletedLogModel(319LL);
            if (v8 <= 0x3F)
            {
              v16[6] = *(void *)(result - 8) + 64LL;
              uint64_t result = type metadata accessor for HealthDataLogModel(319LL);
              if (v9 <= 0x3F)
              {
                v16[7] = *(void *)(result - 8) + 64LL;
                uint64_t result = type metadata accessor for GenericQueryModel(319LL);
                if (v10 <= 0x3F)
                {
                  v16[8] = *(void *)(result - 8) + 64LL;
                  uint64_t result = type metadata accessor for HeightQueryModel(319LL);
                  if (v11 <= 0x3F)
                  {
                    v16[9] = *(void *)(result - 8) + 64LL;
                    v16[10] = &unk_1375B0;
                    uint64_t result = type metadata accessor for SingleActivitySummaryModel(319LL);
                    if (v12 <= 0x3F)
                    {
                      v16[11] = *(void *)(result - 8) + 64LL;
                      uint64_t result = type metadata accessor for SleepQueryModel(319LL);
                      if (v13 <= 0x3F)
                      {
                        v16[12] = *(void *)(result - 8) + 64LL;
                        uint64_t result = type metadata accessor for SpecificMedCompletedLogModel(319LL);
                        if (v14 <= 0x3F)
                        {
                          v16[13] = *(void *)(result - 8) + 64LL;
                          uint64_t result = type metadata accessor for TemperatureQueryModel(319LL);
                          if (v15 <= 0x3F)
                          {
                            v16[14] = *(void *)(result - 8) + 64LL;
                            v16[15] = &unk_1375C8;
                            swift_initEnumMetadataMultiPayload(a1, 256LL, 16LL, v16);
                            return 0LL;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for Verb(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for WellnessSnippets.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF1)
  {
    if (a2 + 15 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 15) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 16;
    return (v5 + 1);
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v5 = v6 - 16;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v5 = v6 - 10;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xCD;
  int v5 = v6 - 205;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x3D;
  int v5 = v6 - 61;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  sub_41C80();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v106, v107, v108, v76);
LABEL_18:
  (*(void (**)(char *, void, uint64_t))(v77 + 104))( v89,  enum case for UsoEntity_common_Date.DefinedValues.common_Date_Today(_:),  v76);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v89, 0LL, 1LL, v76);
  uint64_t v109 = (uint64_t)&v81[*(int *)(v78 + 48)];
  sub_41850((uint64_t)v91, (uint64_t)v81, &qword_18B128);
  sub_41850((uint64_t)v89, v109, &qword_18B128);
  char v110 = sub_A614((uint64_t)v81, 1LL, v76);
  if (v114)
  {
    sub_41AC8((uint64_t)v89);
    sub_41AC8((uint64_t)v91);
    uint64_t v112 = sub_A614(v109, 1LL, v76);
    if (v114)
    {
      sub_41B5C(v112, &qword_18B128);
      sub_41C40();
LABEL_28:
      sub_418F0(v113, enum case for DateTime.Date.DefinedDate.today(_:));
      uint64_t v117 = sub_41BF0();
      sub_A72C(v117);
      uint64_t v118 = sub_41AF0();
      sub_418CC(v118, enum case for DateTime.DateTimeRange.DefinedDateTimeRange.entireDay(_:));
      uint64_t v119 = sub_41BE8();
      sub_A72C(v119);
      sub_41AE4();
      uint64_t v120 = sub_41AFC();
      sub_A72C(v120);
      sub_41A08();
      sub_41A7C();
      sub_41B08();
      uint64_t v121 = v313;
      sub_10A67C();
      sub_419F4();
      sub_41B88();
      sub_41AD8(v121, &qword_189BA0, (uint64_t)&v338);
      uint64_t v122 = sub_419B4();
      if (!v114)
      {
        sub_41B64();
        uint64_t v163 = v309;
        v164(v309, v81, &qword_18B128);
        uint64_t v165 = sub_494C(&qword_18B138);
        uint64_t v166 = v299[0];
        uint64_t v167 = v299[0] + *(int *)(v165 + 48);
        uint64_t v168 = v163;
        DateInterval.start.getter(v165);
        sub_41BB4();
        sub_41A28(v166);
        sub_494C(&qword_18B130);
        sub_419E0();
        sub_37034();
        (*(void (**)(uint64_t *, uint64_t *))(v85 + 8))(v163, &qword_18B128);
        sub_A4A4(v121, &qword_189BA0);
        sub_41AB0(v169, &qword_18AA78);
        *(_OWORD *)(v166 + v165) = xmmword_13A030;
        *(_BYTE *)(v166 + v167) = 1;
        uint64_t v170 = v166;
LABEL_49:
        uint64_t v171 = 0LL;
        uint64_t v172 = 1LL;
        uint64_t v173 = (uint64_t)v168;
LABEL_114:
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v170, v171, v172, v173);
        goto LABEL_115;
      }

      sub_41B5C(v122, &qword_189BA0);
      uint64_t v124 = Logger.wellness.unsafeMutableAddressor(v123);
      sub_A5DC(v124, (uint64_t)&v332);
      sub_41C04();
      uint64_t v125 = v310;
      uint64_t v127 = sub_41B50((uint64_t)v310, v126);
      Logger.logObject.getter(v127);
      uint64_t v128 = sub_AB70();
      if (sub_232DC(v128))
      {
        uint64_t v129 = (_WORD *)sub_232D0();
        sub_36DE0(v129);
        sub_41964(&dword_0, v130, v131, "failed to resolve dateTime in getMedScheduleWithDefinedValues, return nil");
        sub_5050(v77);
      }

      sub_37034();
      sub_39BAC();
      sub_41BBC((uint64_t)v125, (uint64_t (*)(uint64_t, uint64_t))qword_18B130);
      uint64_t v132 = v121;
LABEL_112:
      sub_A4A4(v132, &qword_189BA0);
      goto LABEL_113;
    }

    goto LABEL_26;
  }

  sub_41CE4(v110, v111, &qword_18B128);
  sub_A614(v109, 1LL, v76);
  if (v114)
  {
    sub_A674((uint64_t)v89);
    sub_A674((uint64_t)v91);
    uint64_t v112 = (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 8))(v85, v76);
LABEL_26:
    sub_41B5C(v112, &qword_18B120);
    sub_41C40();
    goto LABEL_33;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 32))(v20, v109, v76);
  sub_A410( &qword_18B148,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_Date.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_Date.DefinedValues);
  uint64_t v116 = dispatch thunk of static Equatable.== infix(_:_:)(v85, v20, v76, v115);
  uint64_t v77 = *(void *)(v77 + 8);
  ((void (*)(uint64_t, uint64_t))v77)(v20, v76);
  sub_41AC8((uint64_t)v89);
  sub_41AC8((uint64_t)v91);
  ((void (*)(uint64_t, uint64_t))v77)(v85, v76);
  sub_41AC8((uint64_t)v81);
  sub_41C40();
  if ((v116 & 1) != 0) {
    goto LABEL_28;
  }
LABEL_33:
  sub_41D48();
  sub_41BF8();
  sub_39BAC();
  uint64_t v133 = v329;
  uint64_t v134 = v322;
  if (!v332) {
    goto LABEL_51;
  }
  uint64_t v135 = sub_41CB8();
  uint64_t v136 = sub_37034();
  if (!v135) {
    goto LABEL_51;
  }
  uint64_t v137 = dispatch thunk of UsoEntity_common_MedicationSchedule.schedule.getter(v136);
  sub_3652C();
  if (!v137) {
    goto LABEL_51;
  }
  uint64_t v138 = sub_41CB0();
  sub_367AC();
  if (!v138) {
    goto LABEL_51;
  }
  if (v138 >> 62)
  {
    sub_41C10();
    uint64_t v139 = _CocoaArrayWrapper.endIndex.getter(v135);
    sub_2A184();
  }

  else
  {
    uint64_t v139 = *(void *)((char *)&dword_10 + (v138 & 0xFFFFFFFFFFFFFF8LL));
  }

  uint64_t v140 = v308;
  if (!v139)
  {
    sub_2A184();
LABEL_51:
    uint64_t v144 = v321;
    sub_41C80();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v174, v175, v176, v134);
    goto LABEL_52;
  }

  sub_41BC4();
  sub_41D50();
  sub_2A184();
  dispatch thunk of CodeGenListEntry.entry.getter(v336);
  uint64_t v141 = sub_3652C();
  if (!v336[0]) {
    goto LABEL_51;
  }
  uint64_t v142 = dispatch thunk of UsoEntity_common_DateTime.occurringIn.getter(v141);
  uint64_t v143 = sub_37034();
  if (!v142) {
    goto LABEL_51;
  }
  uint64_t v144 = v321;
  dispatch thunk of UsoEntity_common_DateTimeRange.definedValue.getter(v143);
  sub_3652C();
  sub_A614(v144, 1LL, v134);
  if (v114)
  {
LABEL_52:
    sub_A4A4(v144, &qword_18B118);
    sub_41D48();
    sub_41BF8();
    sub_39BAC();
    if (!v332) {
      goto LABEL_88;
    }
    uint64_t v177 = sub_41CB8();
    uint64_t v178 = sub_37034();
    if (!v177) {
      goto LABEL_88;
    }
    uint64_t v179 = dispatch thunk of UsoEntity_common_MedicationSchedule.schedule.getter(v178);
    sub_3652C();
    if (!v179) {
      goto LABEL_88;
    }
    uint64_t v180 = sub_41CB0();
    sub_367AC();
    if (!v180) {
      goto LABEL_88;
    }
    if (v180 >> 62)
    {
      sub_41C10();
      uint64_t v243 = _CocoaArrayWrapper.endIndex.getter(v177);
      sub_2A184();
      if (v243)
      {
LABEL_58:
        sub_41BC4();
        sub_41D50();
        sub_2A184();
        dispatch thunk of CodeGenListEntry.entry.getter(v336);
        sub_3652C();
        if (v336[0])
        {
          uint64_t v181 = UsoEntity_common_DateTime.toDateTime(recurrencePattern:)(0LL);
          sub_3652C();
LABEL_89:
          uint64_t v244 = v328;
          sub_41D48();
          sub_41BF8();
          uint64_t v245 = sub_39BAC();
          if (v332)
          {
            uint64_t v246 = dispatch thunk of UsoEntity_common_MedicationEvent.medicationSchedule.getter(v245);
            uint64_t v245 = sub_367AC();
            if (v246)
            {
              uint64_t v247 = dispatch thunk of UsoEntity_common_MedicationSchedule.schedule.getter(v245);
              uint64_t v245 = sub_3652C();
              if (v247)
              {
                uint64_t v248 = sub_41CB0();
                uint64_t v245 = sub_367AC();
                if (v248)
                {
                  sub_41B74();
                  if (v250)
                  {
                    sub_419A4();
                    uint64_t v251 = sub_41B80();
                    sub_249D4();
                    if (v251) {
                      goto LABEL_95;
                    }
                  }

                  else if (*(void *)(v249 + 16))
                  {
LABEL_95:
                    sub_41C20();
                    if ((v248 & 0xC000000000000001LL) != 0) {
                      sub_370B0();
                    }
                    else {
                      sub_372CC();
                    }
                    sub_249D4();
                    dispatch thunk of CodeGenListEntry.entry.getter(v336);
                    sub_367AC();
                    uint64_t v245 = swift_release();
                    goto LABEL_100;
                  }

                  uint64_t v245 = sub_249D4();
                }
              }
            }
          }

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v5 = v6 - 12;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(a1);
  return 0LL;
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x14;
  int v5 = v6 - 20;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v5 = v6 - 11;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v5 = v6 - 8;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v5 = v6 - 15;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10E;
  int v5 = v6 - 270;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v5 = v6 - 14;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v5 = v6 - 9;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unint64_t v14 = type metadata accessor for Date(0LL);
  unint64_t v15 = (uint64_t)v8;
  uint64_t v16 = 1LL;
LABEL_18:
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v15, v16, 1LL, v14);
  sub_41850((uint64_t)v8, (uint64_t)v6, &qword_189CE8);
  type metadata accessor for Date(0LL);
  uint64_t v17 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v6, 1LL, v14);
  if ((_DWORD)v17 == 1)
  {
    Date.init()(v17);
    sub_A4A4((uint64_t)v8, &qword_189CE8);
    sub_A4A4((uint64_t)v6, &qword_189CE8);
  }

  else
  {
    sub_A4A4((uint64_t)v8, &qword_189CE8);
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v14 - 8) + 32LL))(a1, v6, v14);
  }

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v5 = v6 - 13;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for WellnessSnippets.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF0) {
    return ((uint64_t (*)(void))((char *)&loc_1B614 + 4 * byte_1374BB[v4]))();
  }
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_1B648 + 4 * byte_1374B6[v4]))();
}

uint64_t sub_1B648(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B650(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1B658LL);
  }
  return result;
}

uint64_t sub_1B664(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1B66CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 15;
  return result;
}

uint64_t sub_1B670(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B678(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B684(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1B68C(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for WellnessSnippets.CodingKeys()
{
  return &type metadata for WellnessSnippets.CodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.BloodOxygenDataQueryCodingKeys()
{
  return &type metadata for WellnessSnippets.BloodOxygenDataQueryCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.BloodPressureDataQueryCodingKeys()
{
  return &type metadata for WellnessSnippets.BloodPressureDataQueryCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.BloodPressureDataLogCodingKeys()
{
  return &type metadata for WellnessSnippets.BloodPressureDataLogCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.CycleTrackingDataLogCodingKeys()
{
  return &type metadata for WellnessSnippets.CycleTrackingDataLogCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.GenericButtonCodingKeys()
{
  return &type metadata for WellnessSnippets.GenericButtonCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.GenericBinaryButtonCodingKeys()
{
  return &type metadata for WellnessSnippets.GenericBinaryButtonCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.GenericMedCompletedLogCodingKeys()
{
  return &type metadata for WellnessSnippets.GenericMedCompletedLogCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.GenericDataTypeLogCodingKeys()
{
  return &type metadata for WellnessSnippets.GenericDataTypeLogCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.GenericDataQueryCodingKeys()
{
  return &type metadata for WellnessSnippets.GenericDataQueryCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.HeightDataQueryCodingKeys()
{
  return &type metadata for WellnessSnippets.HeightDataQueryCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.PhoneRingsCodingKeys()
{
  return &type metadata for WellnessSnippets.PhoneRingsCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.SingleActivitySummaryQueryCodingKeys()
{
  return &type metadata for WellnessSnippets.SingleActivitySummaryQueryCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.SleepQueryCodingKeys()
{
  return &type metadata for WellnessSnippets.SleepQueryCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.SpecificMedCompletedLogCodingKeys()
{
  return &type metadata for WellnessSnippets.SpecificMedCompletedLogCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.TemperatureDataQueryCodingKeys()
{
  return &type metadata for WellnessSnippets.TemperatureDataQueryCodingKeys;
}

uint64_t getEnumTagSinglePayload for MedsLoggingCorrectionsFlow.CorrectionsTask(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t _s18WellnessFlowPlugin16WellnessSnippetsO30BloodOxygenDataQueryCodingKeysOwst_0( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1B830 + 4 * byte_1374C0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1B850 + 4 * byte_1374C5[v4]))();
  }
}

_BYTE *sub_1B830(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1B850(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1B858(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1B860(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1B868(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1B870(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for WellnessSnippets.WatchRingsCodingKeys()
{
  return &type metadata for WellnessSnippets.WatchRingsCodingKeys;
}

unint64_t sub_1B890()
{
  unint64_t result = qword_18A258;
  if (!qword_18A258)
  {
    unint64_t result = swift_getWitnessTable(&unk_1378B8, &type metadata for WellnessSnippets.WatchRingsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A258);
  }

  return result;
}

unint64_t sub_1B8D0()
{
  unint64_t result = qword_18A260;
  if (!qword_18A260)
  {
    unint64_t result = swift_getWitnessTable(&unk_137970, &type metadata for WellnessSnippets.TemperatureDataQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A260);
  }

  return result;
}

unint64_t sub_1B910()
{
  unint64_t result = qword_18A268;
  if (!qword_18A268)
  {
    unint64_t result = swift_getWitnessTable(&unk_137A28, &type metadata for WellnessSnippets.SpecificMedCompletedLogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A268);
  }

  return result;
}

unint64_t sub_1B950()
{
  unint64_t result = qword_18A270;
  if (!qword_18A270)
  {
    unint64_t result = swift_getWitnessTable(&unk_137AE0, &type metadata for WellnessSnippets.SleepQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A270);
  }

  return result;
}

unint64_t sub_1B990()
{
  unint64_t result = qword_18A278;
  if (!qword_18A278)
  {
    unint64_t result = swift_getWitnessTable( &unk_137B98,  &type metadata for WellnessSnippets.SingleActivitySummaryQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A278);
  }

  return result;
}

unint64_t sub_1B9D0()
{
  unint64_t result = qword_18A280;
  if (!qword_18A280)
  {
    unint64_t result = swift_getWitnessTable(&unk_137C50, &type metadata for WellnessSnippets.PhoneRingsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A280);
  }

  return result;
}

unint64_t sub_1BA10()
{
  unint64_t result = qword_18A288;
  if (!qword_18A288)
  {
    unint64_t result = swift_getWitnessTable(&unk_137D08, &type metadata for WellnessSnippets.HeightDataQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A288);
  }

  return result;
}

unint64_t sub_1BA50()
{
  unint64_t result = qword_18A290;
  if (!qword_18A290)
  {
    unint64_t result = swift_getWitnessTable(&unk_137DC0, &type metadata for WellnessSnippets.GenericDataQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A290);
  }

  return result;
}

unint64_t sub_1BA90()
{
  unint64_t result = qword_18A298;
  if (!qword_18A298)
  {
    unint64_t result = swift_getWitnessTable(&unk_137E78, &type metadata for WellnessSnippets.GenericDataTypeLogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A298);
  }

  return result;
}

unint64_t sub_1BAD0()
{
  unint64_t result = qword_18A2A0;
  if (!qword_18A2A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_137F30, &type metadata for WellnessSnippets.GenericMedCompletedLogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A2A0);
  }

  return result;
}

unint64_t sub_1BB10()
{
  unint64_t result = qword_18A2A8;
  if (!qword_18A2A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_137FE8, &type metadata for WellnessSnippets.GenericBinaryButtonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A2A8);
  }

  return result;
}

unint64_t sub_1BB50()
{
  unint64_t result = qword_18A2B0;
  if (!qword_18A2B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1380A0, &type metadata for WellnessSnippets.GenericButtonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A2B0);
  }

  return result;
}

unint64_t sub_1BB90()
{
  unint64_t result = qword_18A2B8;
  if (!qword_18A2B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_138158, &type metadata for WellnessSnippets.CycleTrackingDataLogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A2B8);
  }

  return result;
}

unint64_t sub_1BBD0()
{
  unint64_t result = qword_18A2C0;
  if (!qword_18A2C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_138210, &type metadata for WellnessSnippets.BloodPressureDataLogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A2C0);
  }

  return result;
}

unint64_t sub_1BC10()
{
  unint64_t result = qword_18A2C8;
  if (!qword_18A2C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1382C8, &type metadata for WellnessSnippets.BloodPressureDataQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A2C8);
  }

  return result;
}

unint64_t sub_1BC50()
{
  unint64_t result = qword_18A2D0;
  if (!qword_18A2D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_138380, &type metadata for WellnessSnippets.BloodOxygenDataQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A2D0);
  }

  return result;
}

unint64_t sub_1BC90()
{
  unint64_t result = qword_18A2D8;
  if (!qword_18A2D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_138438, &type metadata for WellnessSnippets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A2D8);
  }

  return result;
}

unint64_t sub_1BCD0()
{
  unint64_t result = qword_18A2E0;
  if (!qword_18A2E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1382F0, &type metadata for WellnessSnippets.BloodOxygenDataQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A2E0);
  }

  return result;
}

unint64_t sub_1BD10()
{
  unint64_t result = qword_18A2E8;
  if (!qword_18A2E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_138318, &type metadata for WellnessSnippets.BloodOxygenDataQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A2E8);
  }

  return result;
}

unint64_t sub_1BD50()
{
  unint64_t result = qword_18A2F0;
  if (!qword_18A2F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_138238, &type metadata for WellnessSnippets.BloodPressureDataQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A2F0);
  }

  return result;
}

unint64_t sub_1BD90()
{
  unint64_t result = qword_18A2F8;
  if (!qword_18A2F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_138260, &type metadata for WellnessSnippets.BloodPressureDataQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A2F8);
  }

  return result;
}

unint64_t sub_1BDD0()
{
  unint64_t result = qword_18A300;
  if (!qword_18A300)
  {
    unint64_t result = swift_getWitnessTable(&unk_138180, &type metadata for WellnessSnippets.BloodPressureDataLogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A300);
  }

  return result;
}

unint64_t sub_1BE10()
{
  unint64_t result = qword_18A308;
  if (!qword_18A308)
  {
    unint64_t result = swift_getWitnessTable(&unk_1381A8, &type metadata for WellnessSnippets.BloodPressureDataLogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A308);
  }

  return result;
}

unint64_t sub_1BE50()
{
  unint64_t result = qword_18A310;
  if (!qword_18A310)
  {
    unint64_t result = swift_getWitnessTable(&unk_1380C8, &type metadata for WellnessSnippets.CycleTrackingDataLogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A310);
  }

  return result;
}

unint64_t sub_1BE90()
{
  unint64_t result = qword_18A318;
  if (!qword_18A318)
  {
    unint64_t result = swift_getWitnessTable(&unk_1380F0, &type metadata for WellnessSnippets.CycleTrackingDataLogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A318);
  }

  return result;
}

unint64_t sub_1BED0()
{
  unint64_t result = qword_18A320;
  if (!qword_18A320)
  {
    unint64_t result = swift_getWitnessTable(&unk_138010, &type metadata for WellnessSnippets.GenericButtonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A320);
  }

  return result;
}

unint64_t sub_1BF10()
{
  unint64_t result = qword_18A328;
  if (!qword_18A328)
  {
    unint64_t result = swift_getWitnessTable(&unk_138038, &type metadata for WellnessSnippets.GenericButtonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A328);
  }

  return result;
}

unint64_t sub_1BF50()
{
  unint64_t result = qword_18A330;
  if (!qword_18A330)
  {
    unint64_t result = swift_getWitnessTable(&unk_137F58, &type metadata for WellnessSnippets.GenericBinaryButtonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A330);
  }

  return result;
}

unint64_t sub_1BF90()
{
  unint64_t result = qword_18A338;
  if (!qword_18A338)
  {
    unint64_t result = swift_getWitnessTable(&unk_137F80, &type metadata for WellnessSnippets.GenericBinaryButtonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A338);
  }

  return result;
}

unint64_t sub_1BFD0()
{
  unint64_t result = qword_18A340;
  if (!qword_18A340)
  {
    unint64_t result = swift_getWitnessTable(&unk_137EA0, &type metadata for WellnessSnippets.GenericMedCompletedLogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A340);
  }

  return result;
}

unint64_t sub_1C010()
{
  unint64_t result = qword_18A348;
  if (!qword_18A348)
  {
    unint64_t result = swift_getWitnessTable(&unk_137EC8, &type metadata for WellnessSnippets.GenericMedCompletedLogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A348);
  }

  return result;
}

unint64_t sub_1C050()
{
  unint64_t result = qword_18A350;
  if (!qword_18A350)
  {
    unint64_t result = swift_getWitnessTable(&unk_137DE8, &type metadata for WellnessSnippets.GenericDataTypeLogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A350);
  }

  return result;
}

unint64_t sub_1C090()
{
  unint64_t result = qword_18A358;
  if (!qword_18A358)
  {
    unint64_t result = swift_getWitnessTable(&unk_137E10, &type metadata for WellnessSnippets.GenericDataTypeLogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A358);
  }

  return result;
}

unint64_t sub_1C0D0()
{
  unint64_t result = qword_18A360;
  if (!qword_18A360)
  {
    unint64_t result = swift_getWitnessTable(&unk_137D30, &type metadata for WellnessSnippets.GenericDataQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A360);
  }

  return result;
}

unint64_t sub_1C110()
{
  unint64_t result = qword_18A368;
  if (!qword_18A368)
  {
    unint64_t result = swift_getWitnessTable(&unk_137D58, &type metadata for WellnessSnippets.GenericDataQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A368);
  }

  return result;
}

unint64_t sub_1C150()
{
  unint64_t result = qword_18A370;
  if (!qword_18A370)
  {
    unint64_t result = swift_getWitnessTable(&unk_137C78, &type metadata for WellnessSnippets.HeightDataQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A370);
  }

  return result;
}

unint64_t sub_1C190()
{
  unint64_t result = qword_18A378;
  if (!qword_18A378)
  {
    unint64_t result = swift_getWitnessTable(&unk_137CA0, &type metadata for WellnessSnippets.HeightDataQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A378);
  }

  return result;
}

unint64_t sub_1C1D0()
{
  unint64_t result = qword_18A380;
  if (!qword_18A380)
  {
    unint64_t result = swift_getWitnessTable(&unk_137BC0, &type metadata for WellnessSnippets.PhoneRingsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A380);
  }

  return result;
}

unint64_t sub_1C210()
{
  unint64_t result = qword_18A388;
  if (!qword_18A388)
  {
    unint64_t result = swift_getWitnessTable(&unk_137BE8, &type metadata for WellnessSnippets.PhoneRingsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A388);
  }

  return result;
}

unint64_t sub_1C250()
{
  unint64_t result = qword_18A390;
  if (!qword_18A390)
  {
    unint64_t result = swift_getWitnessTable( &unk_137B08,  &type metadata for WellnessSnippets.SingleActivitySummaryQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A390);
  }

  return result;
}

unint64_t sub_1C290()
{
  unint64_t result = qword_18A398;
  if (!qword_18A398)
  {
    unint64_t result = swift_getWitnessTable( &unk_137B30,  &type metadata for WellnessSnippets.SingleActivitySummaryQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A398);
  }

  return result;
}

unint64_t sub_1C2D0()
{
  unint64_t result = qword_18A3A0;
  if (!qword_18A3A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_137A50, &type metadata for WellnessSnippets.SleepQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A3A0);
  }

  return result;
}

unint64_t sub_1C310()
{
  unint64_t result = qword_18A3A8;
  if (!qword_18A3A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_137A78, &type metadata for WellnessSnippets.SleepQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A3A8);
  }

  return result;
}

unint64_t sub_1C350()
{
  unint64_t result = qword_18A3B0;
  if (!qword_18A3B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_137998, &type metadata for WellnessSnippets.SpecificMedCompletedLogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A3B0);
  }

  return result;
}

unint64_t sub_1C390()
{
  unint64_t result = qword_18A3B8;
  if (!qword_18A3B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1379C0, &type metadata for WellnessSnippets.SpecificMedCompletedLogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A3B8);
  }

  return result;
}

unint64_t sub_1C3D0()
{
  unint64_t result = qword_18A3C0;
  if (!qword_18A3C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1378E0, &type metadata for WellnessSnippets.TemperatureDataQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A3C0);
  }

  return result;
}

unint64_t sub_1C410()
{
  unint64_t result = qword_18A3C8;
  if (!qword_18A3C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_137908, &type metadata for WellnessSnippets.TemperatureDataQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A3C8);
  }

  return result;
}

unint64_t sub_1C450()
{
  unint64_t result = qword_18A3D0;
  if (!qword_18A3D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_137828, &type metadata for WellnessSnippets.WatchRingsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A3D0);
  }

  return result;
}

unint64_t sub_1C490()
{
  unint64_t result = qword_18A3D8;
  if (!qword_18A3D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_137850, &type metadata for WellnessSnippets.WatchRingsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A3D8);
  }

  return result;
}

unint64_t sub_1C4D0()
{
  unint64_t result = qword_18A3E0;
  if (!qword_18A3E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1383A8, &type metadata for WellnessSnippets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A3E0);
  }

  return result;
}

unint64_t sub_1C510()
{
  unint64_t result = qword_18A3E8;
  if (!qword_18A3E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1383D0, &type metadata for WellnessSnippets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A3E8);
  }

  return result;
}

uint64_t sub_1C558(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(void *)(v2 - 360), a1);
}

uint64_t sub_1C57C(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(void *)(v2 - 72), a1);
}

uint64_t sub_1C594(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, *(void *)(v2 - 256), v3);
}

uint64_t sub_1C5AC()
{
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v1 - 72), *(void *)(v1 - 360));
}

uint64_t sub_1C5C0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 256) + 8LL))(v2, v1);
}

uint64_t sub_1C5D4@<X0>(uint64_t (*a1)(void, void)@<X8>)
{
  return a1(*(void *)(v1 - 72), *(void *)(v1 - 360));
}

uint64_t sub_1C5E4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_1C5F0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_1C600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

  ;
}

uint64_t sub_1C61C()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_1C628()
{
  return v0;
}

uint64_t sub_1C638()
{
  return v0;
}

void sub_1C648(uint64_t a1)
{
}

uint64_t sub_1C654()
{
  return swift_unknownObjectRelease(v0);
}

void sub_1C65C()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t sub_1C66C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 - 256) = result;
  return result;
}

uint64_t sub_1C678()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

void sub_1C680(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

  ;
}

void sub_1C698(char a1@<W8>)
{
  *(_BYTE *)(v1 - 336) = a1;
}

void sub_1C6A4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1C6AC()
{
  return v0;
}

  ;
}

uint64_t sub_1C6C4()
{
  return v0;
}

  ;
}

uint64_t sub_1C6F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a3, a1);
}

unint64_t sub_1C700()
{
  return sub_F964();
}

uint64_t sub_1C71C()
{
  return v0;
}

  ;
}

void sub_1C73C()
{
}

void *sub_1C748(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xF1uLL);
}

uint64_t WatchRingsModel.exerciseGoalValue.getter()
{
  return *(void *)v0;
}

uint64_t WatchRingsModel.exerciseGoalValue.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*SingleActivitySummaryModel.totalValue.modify())()
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t WatchRingsModel.exerciseTotalValue.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t WatchRingsModel.exerciseTotalValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*SingleActivitySummaryModel.date.modify())()
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t WatchRingsModel.moveGoalValue.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t WatchRingsModel.moveGoalValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*GenericBinaryButtonModel.secondaryButtonLabel.modify())()
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t WatchRingsModel.moveTotalValue.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t WatchRingsModel.moveTotalValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 48) = result;
  *(_BYTE *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*GenericBinaryButtonModel.isSmartEnabled.modify())()
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t WatchRingsModel.standGoalValue.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t WatchRingsModel.standGoalValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 64) = result;
  *(_BYTE *)(v2 + 72) = a2 & 1;
  return result;
}

uint64_t (*WatchRingsModel.standGoalValue.modify())()
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t WatchRingsModel.standTotalValue.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t WatchRingsModel.standTotalValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 80) = result;
  *(_BYTE *)(v2 + 88) = a2 & 1;
  return result;
}

uint64_t (*WatchRingsModel.standTotalValue.modify())()
{
  return PhoneRingsSnippet.body.getter;
}

void PhoneRingsModel.exerciseLabel.getter()
{
}

void PhoneRingsModel.exerciseLabel.setter()
{
  *(void *)(v1 + 96) = v2;
  *(void *)(v1 + 104) = v0;
  sub_1EB0C();
}

uint64_t (*PhoneRingsModel.exerciseLabel.modify())()
{
  return PhoneRingsSnippet.body.getter;
}

void PhoneRingsModel.exerciseValueLabel.getter()
{
}

void PhoneRingsModel.exerciseValueLabel.setter()
{
  *(void *)(v1 + 112) = v2;
  *(void *)(v1 + 120) = v0;
  sub_1EB0C();
}

uint64_t (*PhoneRingsModel.exerciseValueLabel.modify())()
{
  return PhoneRingsSnippet.body.getter;
}

void PhoneRingsModel.exerciseUnitLabel.getter()
{
}

void PhoneRingsModel.exerciseUnitLabel.setter()
{
  *(void *)(v1 + 128) = v2;
  *(void *)(v1 + 136) = v0;
  sub_1EB0C();
}

uint64_t (*PhoneRingsModel.exerciseUnitLabel.modify())()
{
  return PhoneRingsSnippet.body.getter;
}

void PhoneRingsModel.moveLabel.getter()
{
}

void PhoneRingsModel.moveLabel.setter()
{
  *(void *)(v1 + 144) = v2;
  *(void *)(v1 + 152) = v0;
  sub_1EB0C();
}

uint64_t (*PhoneRingsModel.moveLabel.modify())()
{
  return PhoneRingsSnippet.body.getter;
}

void PhoneRingsModel.moveValueLabel.getter()
{
}

void PhoneRingsModel.moveValueLabel.setter()
{
  *(void *)(v1 + 160) = v2;
  *(void *)(v1 + 168) = v0;
  sub_1EB0C();
}

uint64_t (*PhoneRingsModel.moveValueLabel.modify())()
{
  return PhoneRingsSnippet.body.getter;
}

void PhoneRingsModel.moveUnitLabel.getter()
{
}

void PhoneRingsModel.moveUnitLabel.setter()
{
  *(void *)(v1 + 176) = v2;
  *(void *)(v1 + 184) = v0;
  sub_1EB0C();
}

uint64_t (*PhoneRingsModel.moveUnitLabel.modify())()
{
  return PhoneRingsSnippet.body.getter;
}

void PhoneRingsModel.standLabel.getter()
{
}

void PhoneRingsModel.standLabel.setter()
{
  *(void *)(v1 + 192) = v2;
  *(void *)(v1 + 200) = v0;
  sub_1EB0C();
}

uint64_t (*PhoneRingsModel.standLabel.modify())()
{
  return PhoneRingsSnippet.body.getter;
}

void PhoneRingsModel.standValueLabel.getter()
{
}

void PhoneRingsModel.standValueLabel.setter()
{
  *(void *)(v1 + 208) = v2;
  *(void *)(v1 + 216) = v0;
  sub_1EB0C();
}

uint64_t (*PhoneRingsModel.standValueLabel.modify())()
{
  return PhoneRingsSnippet.body.getter;
}

void PhoneRingsModel.standUnitLabel.getter()
{
}

void PhoneRingsModel.standUnitLabel.setter()
{
  *(void *)(v1 + 224) = v2;
  *(void *)(v1 + 232) = v0;
  sub_1EB0C();
}

uint64_t (*PhoneRingsModel.standUnitLabel.modify())()
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t PhoneRingsModel.isSmartEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 240);
}

uint64_t PhoneRingsModel.isSmartEnabled.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 240) = result;
  return result;
}

uint64_t (*PhoneRingsModel.isSmartEnabled.modify())()
{
  return PhoneRingsSnippet.body.getter;
}

void __swiftcall PhoneRingsModel.init(exerciseGoalValue:exerciseTotalValue:moveGoalValue:moveTotalValue:standGoalValue:standTotalValue:exerciseLabel:exerciseUnitLabel:moveLabel:moveUnitLabel:standLabel:standUnitLabel:isSmartEnabled:)( WellnessFlowPlugin::PhoneRingsModel *__return_ptr retstr, Swift::Double exerciseGoalValue, Swift::Double exerciseTotalValue, Swift::Double moveGoalValue, Swift::Double moveTotalValue, Swift::Double standGoalValue, Swift::Double standTotalValue, Swift::String exerciseLabel, Swift::String exerciseUnitLabel, Swift::String moveLabel, Swift::String moveUnitLabel, Swift::String standLabel, Swift::String standUnitLabel, Swift::Bool isSmartEnabled)
{
  if (v17)
  {
    __break(1u);
    goto LABEL_21;
  }

  if (exerciseTotalValue <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  double v18 = v16;
  if (exerciseTotalValue >= sub_1EBE0())
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v31 = v26;
  uint64_t v32 = v25;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v22;
  uint64_t v36 = v21;
  uint64_t v37 = v20;
  uint64_t v38 = v19;
  double v39 = v30;
  double v40 = v29;
  double v41 = v28;
  double v42 = v27;
  uint64_t v56 = (uint64_t)exerciseTotalValue;
  sub_1EC10(v19, v20);
  *(void *)__src = sub_1EBEC();
  *(void *)&__src[8] = v43;
  sub_1EBD4();
  sub_1EBFC();
  if (v17)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  if (v18 <= -9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if (v18 >= sub_1EBE0())
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v54 = v38;
  uint64_t v56 = (uint64_t)v18;
  v44._countAndFlagsBits = sub_1EBEC();
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  sub_1EBFC();
  if (v17)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  if (v41 <= -9.22337204e18)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  if (v41 >= sub_1EBE0())
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  uint64_t v45 = *(void *)&__src[8];
  uint64_t v53 = *(void *)__src;
  uint64_t v56 = (uint64_t)v41;
  swift_bridgeObjectRetain(*(void *)&__src[8]);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v33);
  *(void *)__src = sub_1EBEC();
  *(void *)&__src[8] = v46;
  sub_1EBD4();
  sub_1EBFC();
  if (v17)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v42 <= -9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  if (v42 >= sub_1EBE0())
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  uint64_t v56 = (uint64_t)v42;
  v47._countAndFlagsBits = sub_1EBEC();
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  sub_1EBFC();
  if (v17)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  if (v39 <= -9.22337204e18)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  if (v39 >= sub_1EBE0())
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  uint64_t v52 = v34;
  uint64_t v48 = *(void *)&__src[8];
  uint64_t v51 = *(void *)__src;
  *(void *)__src = (uint64_t)v39;
  swift_bridgeObjectRetain(*(void *)&__src[8]);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(standLabel._object);
  uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v57 = v49;
  sub_1EBD4();
  if ((~*(void *)&v40 & 0x7FF0000000000000LL) == 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  if (v40 <= -9.22337204e18)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  if (v40 < sub_1EBE0())
  {
    v50._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    *(double *)__src = v18;
    __src[8] = 0;
    *(Swift::Double *)&__src[16] = exerciseTotalValue;
    __src[24] = 0;
    *(double *)&__src[32] = v42;
    __src[40] = 0;
    *(double *)&__src[48] = v41;
    __src[56] = 0;
    *(double *)&__src[64] = v40;
    __src[72] = 0;
    *(double *)&__src[80] = v39;
    __src[88] = 0;
    *(void *)&__src[96] = v54;
    *(void *)&__src[104] = v37;
    *(void *)&__src[112] = v53;
    *(void *)&__src[120] = v45;
    *(void *)&__src[128] = v36;
    *(void *)&__src[136] = v35;
    *(void *)&__src[144] = v52;
    *(void *)&__src[152] = v33;
    *(void *)&__src[160] = v51;
    *(void *)&__src[168] = v48;
    *(void *)&__src[176] = v32;
    *(void *)&__src[184] = v31;
    *(Swift::String *)&__src[192] = standLabel;
    *(void *)&__src[208] = v56;
    *(void *)&__src[216] = v57;
    *(Swift::String *)&__src[224] = standUnitLabel;
    __src[240] = isSmartEnabled;
    sub_1CFA8(__src);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_FBC4(__src);
    memcpy(retstr, __src, sizeof(WellnessFlowPlugin::PhoneRingsModel));
    return;
  }

LABEL_37:
  __break(1u);
}

  sub_36F38(v16, v55);
  sub_A384(v16, a1 + v25[11]);
  sub_A744();
}

void *sub_1CFA8(void *a1)
{
  uint64_t v2 = a1[13];
  uint64_t v3 = a1[15];
  uint64_t v4 = a1[17];
  uint64_t v5 = a1[19];
  uint64_t v6 = a1[21];
  uint64_t v7 = a1[23];
  uint64_t v8 = a1[25];
  uint64_t v9 = a1[27];
  swift_bridgeObjectRetain(a1[29]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t sub_1D050(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v4 = 0x8000000000141350LL;
    if (a2 == 0x8000000000141350LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000000141350LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v6 = 0x8000000000141370LL;
    if (a2 == 0x8000000000141370LL) {
      goto LABEL_10;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000000141370LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
LABEL_10:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  BOOL v7 = a1 == 0x6C616F4765766F6DLL && a2 == 0xED000065756C6156LL;
  if (v7
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6C616F4765766F6DLL, 0xED000065756C6156LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2LL;
  }

  BOOL v8 = a1 == 0x61746F5465766F6DLL && a2 == 0xEE0065756C61566CLL;
  if (v8
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x61746F5465766F6DLL, 0xEE0065756C61566CLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3LL;
  }

  BOOL v9 = a1 == 0x616F47646E617473LL && a2 == 0xEE0065756C61566CLL;
  if (v9
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x616F47646E617473LL, 0xEE0065756C61566CLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 4LL;
  }

  BOOL v10 = a1 == 0x746F54646E617473LL && a2 == 0xEF65756C61566C61LL;
  if (v10
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746F54646E617473LL, 0xEF65756C61566C61LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 5LL;
  }

  BOOL v11 = a1 == 0x6573696372657865LL && a2 == 0xED00006C6562614CLL;
  if (v11
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6573696372657865LL, 0xED00006C6562614CLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 6LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v12 = 0x8000000000141390LL;
    if (a2 == 0x8000000000141390LL) {
      goto LABEL_45;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000000141390LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_45:
    swift_bridgeObjectRelease(v12);
    return 7LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v13 = 0x80000000001413B0LL;
    if (a2 == 0x80000000001413B0LL) {
      goto LABEL_50;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000000001413B0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 8LL;
  }

  BOOL v14 = a1 == 0x6562614C65766F6DLL && a2 == 0xE90000000000006CLL;
  if (v14
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6562614C65766F6DLL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 9LL;
  }

  else
  {
    BOOL v15 = a1 == 0x756C615665766F6DLL && a2 == 0xEE006C6562614C65LL;
    if (v15
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x756C615665766F6DLL, 0xEE006C6562614C65LL, a1, a2, 0LL) & 1) != 0)
    {
      swift_bridgeObjectRelease(a2);
      return 10LL;
    }

    else
    {
      BOOL v16 = a1 == 0x74696E5565766F6DLL && a2 == 0xED00006C6562614CLL;
      if (v16
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x74696E5565766F6DLL, 0xED00006C6562614CLL, a1, a2, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(a2);
        return 11LL;
      }

      else
      {
        BOOL v17 = a1 == 0x62614C646E617473LL && a2 == 0xEA00000000006C65LL;
        if (v17
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0x62614C646E617473LL, 0xEA00000000006C65LL, a1, a2, 0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease(a2);
          return 12LL;
        }

        else
        {
          BOOL v18 = a1 == 0x6C6156646E617473LL && a2 == 0xEF6C6562614C6575LL;
          if (v18
            || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6156646E617473LL, 0xEF6C6562614C6575LL, a1, a2, 0LL) & 1) != 0)
          {
            swift_bridgeObjectRelease(a2);
            return 13LL;
          }

          else
          {
            BOOL v19 = a1 == 0x696E55646E617473LL && a2 == 0xEE006C6562614C74LL;
            if (v19
              || (_stringCompareWithSmolCheck(_:_:expecting:)(0x696E55646E617473LL, 0xEE006C6562614C74LL, a1, a2, 0LL) & 1) != 0)
            {
              swift_bridgeObjectRelease(a2);
              return 14LL;
            }

            else if (a1 == 0x457472616D537369LL && a2 == 0xEE0064656C62616ELL)
            {
              swift_bridgeObjectRelease(a2);
              return 15LL;
            }

            else
            {
              char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(0x457472616D537369LL, 0xEE0064656C62616ELL, a1, a2, 0LL);
              swift_bridgeObjectRelease(a2);
              if ((v21 & 1) != 0) {
                return 15LL;
              }
              else {
                return 16LL;
              }
            }
          }
        }
      }
    }
  }

uint64_t sub_1D6DC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1D714 + 4 * byte_1389C0[a1]))( 0xD000000000000011LL,  0x8000000000141350LL);
}

uint64_t sub_1D714(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_1D7D4()
{
  return 0x6562614C65766F6DLL;
}

void sub_1D7F0()
{
}

uint64_t sub_1D838()
{
  return 0x62614C646E617473LL;
}

void sub_1D854()
{
}

uint64_t sub_1D878()
{
  return 0x696E55646E617473LL;
}

uint64_t sub_1D8A0()
{
  return 0x457472616D537369LL;
}

uint64_t sub_1D8C4()
{
  return sub_1D6DC(*v0);
}

uint64_t sub_1D8CC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1D050(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D8F0(uint64_t a1)
{
  unint64_t v2 = sub_1DB84();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1D918(uint64_t a1)
{
  unint64_t v2 = sub_1DB84();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PhoneRingsModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_494C(&qword_18A3F0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  BOOL v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_500C(a1, v9);
  unint64_t v11 = sub_1DB84();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for PhoneRingsModel.CodingKeys,  &type metadata for PhoneRingsModel.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = *((unsigned __int8 *)v3 + 8);
  char v17 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v17, v5);
  if (!v2)
  {
    sub_1EAF4(v3[2], *((unsigned __int8 *)v3 + 24), 1);
    sub_1EAF4(v3[4], *((unsigned __int8 *)v3 + 40), 2);
    sub_1EAF4(v3[6], *((unsigned __int8 *)v3 + 56), 3);
    sub_1EAF4(v3[8], *((unsigned __int8 *)v3 + 72), 4);
    sub_1EAF4(v3[10], *((unsigned __int8 *)v3 + 88), 5);
    sub_1EAB8(v3[12], v3[13], 6);
    sub_1EAB8(v3[14], v3[15], 7);
    sub_1EAB8(v3[16], v3[17], 8);
    sub_1EAB8(v3[18], v3[19], 9);
    sub_1EAB8(v3[20], v3[21], 10);
    sub_1EAB8(v3[22], v3[23], 11);
    sub_1EAB8(v3[24], v3[25], 12);
    sub_1EAB8(v3[26], v3[27], 13);
    sub_1EAB8(v3[28], v3[29], 14);
    uint64_t v14 = *((unsigned __int8 *)v3 + 240);
    char v17 = 15;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v17, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1DB84()
{
  unint64_t result = qword_18A3F8;
  if (!qword_18A3F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_138B48, &type metadata for PhoneRingsModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A3F8);
  }

  return result;
}

void *PhoneRingsModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_494C(&qword_18A400);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  BOOL v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v130 = 1;
  char v128 = 1;
  char v126 = 1;
  char v124 = 1;
  uint64_t v9 = (void *)a1[3];
  uint64_t v10 = a1[4];
  uint64_t v82 = a1;
  sub_500C(a1, (uint64_t)v9);
  unint64_t v11 = sub_1DB84();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for PhoneRingsModel.CodingKeys,  &type metadata for PhoneRingsModel.CodingKeys,  v11,  v9,  v10);
  if (v2)
  {
    uint64_t v135 = v2;
    sub_1EBA4();
    uint64_t v25 = 0LL;
LABEL_4:
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v82);
    swift_bridgeObjectRelease(v83);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(a2);
    return (void *)sub_1EBF4();
  }

  uint64_t v9 = (void *)a2;
  LOBYTE(v85) = 0;
  a2 = sub_1EB60((uint64_t)&v85);
  int v13 = v12;
  char v134 = v12 & 1;
  LOBYTE(v85) = 1;
  uint64_t v14 = sub_1EB60((uint64_t)&v85);
  int v81 = v13;
  char v132 = v15 & 1;
  uint64_t v80 = sub_1EB18(2);
  int v79 = v13;
  char v130 = v16 & 1;
  uint64_t v17 = sub_1EB18(3);
  int v77 = v13;
  uint64_t v78 = v17;
  char v128 = v18 & 1;
  uint64_t v19 = sub_1EB18(4);
  int v75 = v13;
  uint64_t v76 = v19;
  char v126 = v20 & 1;
  uint64_t v21 = sub_1EB18(5);
  int v73 = v13;
  uint64_t v74 = v21;
  char v124 = v22 & 1;
  LOBYTE(v85) = 6;
  int v23 = v22;
  uint64_t v24 = sub_1EC08((uint64_t)&v85, v5);
  uint64_t v28 = v27;
  int v70 = v23;
  uint64_t v71 = v24;
  LOBYTE(v85) = 7;
  sub_1EC10(v24, v27);
  uint64_t v29 = sub_1EC08((uint64_t)&v85, v5);
  uint64_t v72 = v30;
  uint64_t v68 = v29;
  uint64_t v69 = v28;
  LOBYTE(v85) = 8;
  swift_bridgeObjectRetain(v30);
  uint64_t v67 = sub_1EC08((uint64_t)&v85, v5);
  uint64_t v135 = 0LL;
  LOBYTE(v85) = 9;
  uint64_t v66 = v31;
  sub_1EC10(v67, v31);
  uint64_t v64 = sub_1EAE0();
  uint64_t v65 = v32;
  uint64_t v135 = 0LL;
  LOBYTE(v85) = 10;
  swift_bridgeObjectRetain(v32);
  uint64_t v62 = sub_1EAE0();
  uint64_t v63 = v33;
  uint64_t v135 = 0LL;
  LOBYTE(v85) = 11;
  swift_bridgeObjectRetain(v33);
  uint64_t v34 = sub_1EAE0();
  uint64_t v61 = v35;
  uint64_t v135 = 0LL;
  uint64_t v10 = v34;
  LOBYTE(v85) = 12;
  swift_bridgeObjectRetain(v35);
  uint64_t v59 = sub_1EAE0();
  uint64_t v60 = v36;
  uint64_t v135 = 0LL;
  LOBYTE(v85) = 13;
  swift_bridgeObjectRetain(v36);
  uint64_t v57 = sub_1EAE0();
  uint64_t v58 = v37;
  uint64_t v135 = 0LL;
  LOBYTE(v85) = 14;
  swift_bridgeObjectRetain(v37);
  uint64_t v56 = sub_1EAE0();
  uint64_t v83 = v38;
  uint64_t v135 = 0LL;
  char v122 = 15;
  swift_bridgeObjectRetain(v83);
  uint64_t v25 = v8;
  uint64_t v39 = v135;
  char v40 = KeyedDecodingContainer.decode(_:forKey:)(&v122, v5);
  uint64_t v135 = v39;
  if (v39)
  {
    sub_1EAD0();
    sub_1EB48();
    sub_1EB3C();
    sub_1EB30();
    sub_1EB54();
    sub_1EB74();
    sub_1EB98();
    sub_1EBC8();
    sub_1EBF4();
    swift_bridgeObjectRelease(v83);
    goto LABEL_4;
  }

  char v41 = v40;
  sub_1EAD0();
  int v54 = v41 & 1;
  uint64_t v52 = a2;
  uint64_t v53 = v14;
  v84[0] = a2;
  LOBYTE(v84[1]) = v81 & 1;
  v84[2] = v14;
  LOBYTE(v84[3]) = v79 & 1;
  v84[4] = v80;
  LOBYTE(v84[5]) = v77 & 1;
  v84[6] = v78;
  LOBYTE(v84[7]) = v75 & 1;
  v84[8] = v76;
  LOBYTE(v84[9]) = v73 & 1;
  v84[10] = v74;
  LOBYTE(v84[11]) = v70 & 1;
  uint64_t v42 = v72;
  uint64_t v43 = v69;
  v84[12] = v71;
  v84[13] = v69;
  v84[14] = v68;
  v84[15] = v72;
  uint64_t v44 = v65;
  v84[16] = v67;
  v84[17] = v66;
  uint64_t v45 = v63;
  v84[18] = v64;
  v84[19] = v65;
  v84[20] = v62;
  v84[21] = v63;
  uint64_t v55 = v10;
  v84[22] = v10;
  uint64_t v46 = v60;
  uint64_t v47 = v61;
  uint64_t v48 = v58;
  v84[23] = v61;
  v84[24] = v59;
  v84[25] = v60;
  v84[26] = v57;
  v84[27] = v58;
  v84[28] = v56;
  v84[29] = v83;
  LOBYTE(v84[30]) = v54;
  sub_1CFA8(v84);
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v42);
  sub_1EB30();
  sub_1EBF4();
  swift_bridgeObjectRelease(v45);
  uint64_t v49 = v47;
  swift_bridgeObjectRelease(v47);
  uint64_t v50 = v46;
  swift_bridgeObjectRelease(v46);
  swift_bridgeObjectRelease(v48);
  uint64_t v51 = v83;
  swift_bridgeObjectRelease(v83);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v82);
  uint64_t v85 = v52;
  char v86 = v134;
  *(_DWORD *)uint64_t v87 = *(_DWORD *)v133;
  *(_DWORD *)&v87[3] = *(_DWORD *)&v133[3];
  uint64_t v88 = v53;
  char v89 = v132;
  *(_DWORD *)uint64_t v90 = *(_DWORD *)v131;
  *(_DWORD *)&v90[3] = *(_DWORD *)&v131[3];
  uint64_t v91 = v80;
  char v92 = v130;
  *(_DWORD *)&v93[3] = *(_DWORD *)&v129[3];
  *(_DWORD *)uint64_t v93 = *(_DWORD *)v129;
  uint64_t v94 = v78;
  char v95 = v128;
  *(_DWORD *)uint64_t v96 = *(_DWORD *)v127;
  *(_DWORD *)&v96[3] = *(_DWORD *)&v127[3];
  uint64_t v97 = v76;
  char v98 = v126;
  *(_DWORD *)uint64_t v99 = *(_DWORD *)v125;
  *(_DWORD *)&v99[3] = *(_DWORD *)&v125[3];
  uint64_t v100 = v74;
  char v101 = v124;
  *(_DWORD *)&v102[3] = *(_DWORD *)&v123[3];
  *(_DWORD *)uint64_t v102 = *(_DWORD *)v123;
  uint64_t v103 = v71;
  uint64_t v104 = v69;
  uint64_t v105 = v68;
  uint64_t v106 = v42;
  uint64_t v107 = v67;
  uint64_t v108 = v43;
  uint64_t v109 = v64;
  uint64_t v110 = v44;
  uint64_t v111 = v62;
  uint64_t v112 = v63;
  uint64_t v113 = v55;
  uint64_t v114 = v49;
  uint64_t v115 = v59;
  uint64_t v116 = v50;
  uint64_t v117 = v57;
  uint64_t v118 = v48;
  uint64_t v119 = v56;
  uint64_t v120 = v51;
  char v121 = v54;
  sub_FBC4(&v85);
  return memcpy(v9, v84, 0xF1uLL);
}

void *sub_1E364@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = PhoneRingsModel.init(from:)(a1, (uint64_t)__src);
  if (!v2) {
    return memcpy(a2, __src, 0xF1uLL);
  }
  return result;
}

uint64_t sub_1E3B4(void *a1)
{
  return PhoneRingsModel.encode(to:)(a1);
}

uint64_t destroy for PhoneRingsModel(void *a1)
{
  return swift_bridgeObjectRelease(a1[29]);
}

uint64_t initializeWithCopy for PhoneRingsModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  uint64_t v4 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v4;
  uint64_t v5 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v5;
  uint64_t v6 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v6;
  uint64_t v7 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v7;
  uint64_t v8 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v8;
  uint64_t v9 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v9;
  uint64_t v10 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v10;
  uint64_t v11 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v11;
  uint64_t v12 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v12;
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t assignWithCopy for PhoneRingsModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(void *)(a1 + 64) = v8;
  uint64_t v9 = a2[10];
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 96) = a2[12];
  uint64_t v10 = a2[13];
  uint64_t v11 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 112) = a2[14];
  uint64_t v12 = a2[15];
  uint64_t v13 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 128) = a2[16];
  uint64_t v14 = a2[17];
  uint64_t v15 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(void *)(a1 + 144) = a2[18];
  uint64_t v16 = a2[19];
  uint64_t v17 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(void *)(a1 + 160) = a2[20];
  uint64_t v18 = a2[21];
  uint64_t v19 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(void *)(a1 + 176) = a2[22];
  uint64_t v20 = a2[23];
  uint64_t v21 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(void *)(a1 + 192) = a2[24];
  uint64_t v22 = a2[25];
  uint64_t v23 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(void *)(a1 + 208) = a2[26];
  uint64_t v24 = a2[27];
  uint64_t v25 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  *(void *)(a1 + 224) = a2[28];
  uint64_t v26 = a2[29];
  uint64_t v27 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  *(_BYTE *)(a1 + 240) = *((_BYTE *)a2 + 240);
  return a1;
}

void *initializeWithTake for PhoneRingsModel(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xF1uLL);
}

uint64_t assignWithTake for PhoneRingsModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  uint64_t v5 = *(void *)(a2 + 104);
  uint64_t v6 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 120);
  uint64_t v8 = *(void *)(a1 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 136);
  uint64_t v10 = *(void *)(a1 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a2 + 152);
  uint64_t v12 = *(void *)(a1 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v11;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(void *)(a2 + 168);
  uint64_t v14 = *(void *)(a1 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v13;
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(a2 + 184);
  uint64_t v16 = *(void *)(a1 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v15;
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = *(void *)(a2 + 200);
  uint64_t v18 = *(void *)(a1 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v17;
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = *(void *)(a2 + 216);
  uint64_t v20 = *(void *)(a1 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v19;
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = *(void *)(a2 + 232);
  uint64_t v22 = *(void *)(a1 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v21;
  swift_bridgeObjectRelease(v22);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhoneRingsModel(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 241))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 104);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhoneRingsModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 232) = 0LL;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 240) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 241) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 241) = 0;
    }
    if (a2) {
      *(void *)(result + 104) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PhoneRingsModel()
{
  return &type metadata for PhoneRingsModel;
}

uint64_t storeEnumTagSinglePayload for PhoneRingsModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF0) {
    return ((uint64_t (*)(void))((char *)&loc_1E978 + 4 * byte_1389D5[v4]))();
  }
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_1E9AC + 4 * byte_1389D0[v4]))();
}

uint64_t sub_1E9AC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E9B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1E9BCLL);
  }
  return result;
}

uint64_t sub_1E9C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1E9D0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 15;
  return result;
}

uint64_t sub_1E9D4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E9DC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PhoneRingsModel.CodingKeys()
{
  return &type metadata for PhoneRingsModel.CodingKeys;
}

unint64_t sub_1E9FC()
{
  unint64_t result = qword_18A408;
  if (!qword_18A408)
  {
    unint64_t result = swift_getWitnessTable(&unk_138B20, &type metadata for PhoneRingsModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A408);
  }

  return result;
}

unint64_t sub_1EA3C()
{
  unint64_t result = qword_18A410;
  if (!qword_18A410)
  {
    unint64_t result = swift_getWitnessTable(&unk_138A90, &type metadata for PhoneRingsModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18A410);
  }

  return result;
}

unint64_t sub_1EA7C()
{
  unint64_t result = qword_18A418[0];
  if (!qword_18A418[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_138AB8, &type metadata for PhoneRingsModel.CodingKeys);
    atomic_store(result, qword_18A418);
  }

  return result;
}

uint64_t sub_1EAB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 65) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 65, v3);
}

uint64_t sub_1EAD0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1EAE0()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v0 + 504, v1);
}

uint64_t sub_1EAF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 65) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 65, v3);
}

  ;
}

uint64_t sub_1EB18@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 + 504) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v1 + 504, v2);
}

uint64_t sub_1EB30()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 112));
}

uint64_t sub_1EB3C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 160));
}

uint64_t sub_1EB48()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 136));
}

uint64_t sub_1EB54()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 104));
}

uint64_t sub_1EB60(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

uint64_t sub_1EB6C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1EB74()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 88));
}

  ;
}

uint64_t sub_1EB8C()
{
  return v0;
}

uint64_t sub_1EB98()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 72));
}

void sub_1EBA4()
{
  *(void *)(v0 + 248) = 0LL;
}

uint64_t sub_1EBC8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 64));
}

void sub_1EBD4()
{
  v0._countAndFlagsBits = 47LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

double sub_1EBE0()
{
  return 9.22337204e18;
}

uint64_t sub_1EBEC()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_1EBF4()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t sub_1EC08(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, a2);
}

uint64_t sub_1EC10(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t destroy for UnsupportedLoggingFlow(void *a1)
{
  return swift_release();
}

uint64_t initializeWithCopy for UnsupportedLoggingFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  __int128 v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  __int128 v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  __int128 v8 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 184) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 160, a2 + 160);
  __int128 v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 224) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 200, a2 + 200);
  uint64_t v10 = *(void *)(a2 + 264);
  uint64_t v11 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = v10;
  *(void *)(a1 + 272) = v11;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 240, a2 + 240);
  uint64_t v12 = *(void *)(a2 + 280);
  uint64_t v13 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = v12;
  *(void *)(a1 + 288) = v13;
  swift_retain(v12);
  swift_retain(v13);
  return a1;
}

void *assignWithCopy for UnsupportedLoggingFlow(void *a1, void *a2)
{
  a1[35] = a2[35];
  swift_retain();
  swift_release();
  a1[36] = a2[36];
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for UnsupportedLoggingFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x128uLL);
}

uint64_t assignWithTake for UnsupportedLoggingFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 80));
  __int128 v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 160));
  __int128 v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 200));
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 240));
  __int128 v7 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v7;
  uint64_t v8 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v8;
  swift_release();
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for UnsupportedLoggingFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 296))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnsupportedLoggingFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 296) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 296) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for UnsupportedLoggingFlow()
{
  return &type metadata for UnsupportedLoggingFlow;
}

uint64_t sub_1F004(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_20228();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for UnsupportedLoggingFlow, v4);
}

uint64_t sub_1F044(uint64_t a1, __int16 a2)
{
  *(void *)(v3 + 520) = v2;
  *(_WORD *)(v3 + 688) = a2;
  *(void *)(v3 + 512) = a1;
  uint64_t v4 = type metadata accessor for GenericButtonModel(0LL);
  *(void *)(v3 + 528) = v4;
  *(void *)(v3 + 536) = sub_A5C0(*(void *)(v4 - 8));
  uint64_t v5 = sub_494C(&qword_189CF8);
  *(void *)(v3 + 544) = sub_A5C0(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for URL(0LL);
  *(void *)(v3 + 552) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v3 + 560) = v7;
  *(void *)(v3 + 568) = sub_A5C0(v7);
  uint64_t v8 = type metadata accessor for DialogPhase(0LL);
  *(void *)(v3 + 576) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v3 + 584) = v9;
  *(void *)(v3 + 592) = sub_D8CC(v9);
  *(void *)(v3 + 600) = swift_task_alloc(v2);
  uint64_t v10 = type metadata accessor for OutputGenerationManifest(0LL);
  *(void *)(v3 + 608) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v3 + 616) = v11;
  *(void *)(v3 + 624) = sub_A5C0(v11);
  uint64_t v12 = sub_494C(&qword_189D00);
  *(void *)(v3 + 632) = sub_A5C0(*(void *)(v12 - 8));
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_1F120()
{
  uint64_t v1 = sub_12BAB0(*(_WORD *)(v0 + 688));
  uint64_t v2 = v1;
  uint64_t v3 = 1LL;
  if (v1 != 205)
  {
    uint64_t v4 = sub_27CC8(v1);
    uint64_t v6 = v5;
    String.toSpeakableString.getter(v4, v5);
    swift_bridgeObjectRelease(v6);
    uint64_t v3 = 0LL;
  }

  uint64_t v7 = *(void *)(v0 + 632);
  uint64_t v8 = type metadata accessor for SpeakableString(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v7, v3, 1LL, v8);
  char v9 = sub_20310(v2);
  uint64_t v10 = (void *)swift_task_alloc(dword_190B94);
  *(void *)(v0 + 640) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1F1F8;
  return sub_1309B0(*(void *)(v0 + 632), (v9 & 1) == 0);
}

uint64_t sub_1F1F8(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 640);
  *(void *)(*v2 + 648) = a1;
  swift_task_dealloc(v4);
  uint64_t v5 = *(void *)(v3 + 632);
  if (v1) {
    swift_errorRelease(v1);
  }
  sub_2012C(v5, &qword_189D00);
  sub_A964();
  return sub_A810();
}

uint64_t sub_1F284( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9 = (void *)v8[81];
  uint64_t v10 = v8[75];
  uint64_t v11 = v8[74];
  uint64_t v12 = v8[73];
  uint64_t v13 = v8[72];
  uint64_t v14 = v8[65];
  static DialogPhase.completion.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v10, v13);
  OutputGenerationManifest.init(dialogPhase:_:)(v11, sub_A633C, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v13);
  OutputGenerationManifest.printSupportingDialogInDisplayModes.setter(1LL);
  id v15 = [v9 catId];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  OutputGenerationManifest.responseViewId.setter(v16, v18);
  sub_500C((void *)(v14 + 40), *(void *)(v14 + 64));
  sub_202B4();
  uint64_t v19 = v8[42];
  uint64_t v20 = v8[43];
  sub_500C(v8 + 39, v19);
  char v21 = dispatch thunk of DeviceState.isPhone.getter(v19, v20);
  sub_200CC(v14, (uint64_t)(v8 + 2));
  if ((v21 & 1) != 0)
  {
    sub_20100(v8 + 2);
    sub_20300();
  }

  else
  {
    sub_500C(v8 + 7, v8[10]);
    sub_202B4();
    uint64_t v22 = v8[47];
    uint64_t v23 = v8[48];
    sub_500C(v8 + 44, v22);
    char v24 = dispatch thunk of DeviceState.isPad.getter(v22, v23);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v8 + 44);
    sub_20100(v8 + 2);
    sub_20300();
    if ((v24 & 1) == 0)
    {
LABEL_6:
      uint64_t v27 = (void *)v8[81];
      uint64_t v28 = v8[65];
      uint64_t v29 = *(void *)(v28 + 264);
      sub_500C((void *)(v28 + 240), v29);
      uint64_t v30 = sub_494C(&qword_18A460);
      uint64_t v31 = sub_20308(v30, 40LL);
      *(_OWORD *)(v31 + 16) = xmmword_138BA0;
      *(void *)(v31 + 32) = v27;
      sub_202E8(v31, v32, v33);
      v8[84] = v58;
      uint64_t v34 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)[1];
      id v35 = v27;
      uint64_t v36 = (void *)swift_task_alloc(v34);
      v8[85] = v36;
      *uint64_t v36 = v8;
      v36[1] = sub_1F7A0;
      return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)( v8 + 49,  v58,  v8[78],  v29);
    }
  }

  uint64_t v25 = v8[69];
  uint64_t v26 = v8[68];
  sub_12BB10((void *)v8[65]);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v26, 1LL, v25) == 1)
  {
    sub_2012C(v8[68], &qword_189CF8);
    goto LABEL_6;
  }

  uint64_t v57 = (void *)v8[81];
  uint64_t v38 = v8[71];
  uint64_t v39 = v8[70];
  uint64_t v40 = v8[69];
  char v41 = (uint64_t *)v8[67];
  uint64_t v42 = v8[66];
  uint64_t v43 = v8[65];
  (*(void (**)(uint64_t, void, uint64_t))(v39 + 32))(v38, v8[68], v40);
  uint64_t v44 = sub_90E74(0x616548206E65704FLL, 0xEB0000000068746CLL, 0x6C6165486E65706FLL, (void *)0xED00007070416874LL);
  uint64_t v46 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))((char *)v41 + *(int *)(v42 + 20), v38, v40);
  uint64_t *v41 = v44;
  v41[1] = v46;
  uint64_t v47 = *(void *)(v43 + 264);
  sub_500C((void *)(v43 + 240), v47);
  uint64_t v48 = type metadata accessor for WellnessSnippets(0LL);
  v8[62] = v48;
  v8[63] = sub_20168();
  uint64_t v49 = sub_B76C(v8 + 59);
  sub_201A8((uint64_t)v41, (uint64_t)v49);
  swift_storeEnumTagMultiPayload(v49, v48, 4LL);
  uint64_t v50 = sub_494C(&qword_18A460);
  uint64_t v51 = sub_20308(v50, 40LL);
  *(_OWORD *)(v51 + 16) = xmmword_138BA0;
  *(void *)(v51 + 32) = v57;
  sub_202E8(v51, v52, v53);
  v8[82] = v58;
  uint64_t v54 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)[1];
  id v55 = v57;
  uint64_t v56 = (void *)swift_task_alloc(v54);
  v8[83] = v56;
  *uint64_t v56 = v8;
  v56[1] = sub_1F698;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)( v8 + 54,  v8 + 59,  v58,  v8[78],  v47);
}

uint64_t sub_1F698()
{
  uint64_t v1 = v0 + 59;
  uint64_t v2 = v0[82];
  sub_20264(v0[83]);
  swift_bridgeObjectRelease(v2);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  sub_A964();
  return sub_A810();
}

uint64_t sub_1F6E4()
{
  uint64_t v1 = *(void *)(v0 + 616);
  uint64_t v2 = *(void *)(v0 + 568);
  uint64_t v3 = *(void *)(v0 + 560);
  uint64_t v4 = *(void *)(v0 + 552);
  uint64_t v5 = *(void *)(v0 + 536);
  uint64_t v6 = *(void *)(v0 + 512);

  sub_201EC(v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_20004((__int128 *)(v0 + 432), v6);
  sub_20274();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1F7A0()
{
  uint64_t v1 = *(void *)(v0 + 672);
  sub_20264(*(void *)(v0 + 680));
  swift_bridgeObjectRelease(v1);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_1F7E0()
{
  uint64_t v1 = *(void *)(v0 + 616);
  uint64_t v2 = *(void *)(v0 + 512);

  sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_20004((__int128 *)(v0 + 392), v2);
  sub_20274();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  return sub_20294(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1F854()
{
  uint64_t v1 = *(void *)(v0 + 512);
  *(void *)(v1 + 32) = 0LL;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  sub_20274();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  return sub_20294(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1F8A8(uint64_t a1)
{
  v2[87] = v1;
  v2[86] = a1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[88] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[89] = v4;
  v2[90] = sub_D8CC(v4);
  v2[91] = swift_task_alloc(v1);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_1F900(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 728);
  uint64_t v3 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v3, v1 + 624);
  uint64_t v4 = sub_202D0(v2);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v31 = *(void *)(v1 + 712);
    uint64_t v32 = *(void *)(v1 + 704);
    uint64_t v33 = *(void *)(v1 + 728);
    uint64_t v7 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v8 = sub_A5E8(32LL);
    uint64_t v34 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v1 + 680) = sub_39178(0xD000000000000016LL, 0x8000000000138BB0LL, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 680, v1 + 688, v7 + 4, v7 + 12);
    _os_log_impl(&dword_0, v5, v6, "Executing %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL);
    sub_5050(v8);
    sub_5050((uint64_t)v7);

    char v9 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    v9(v33, v32);
  }

  else
  {
    uint64_t v10 = *(void *)(v1 + 728);
    uint64_t v11 = *(void *)(v1 + 712);
    uint64_t v12 = *(void *)(v1 + 704);

    char v9 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v9(v10, v12);
  }

  uint64_t v13 = *(void **)(v1 + 696);
  uint64_t v14 = v13[3];
  uint64_t v15 = v13[4];
  sub_500C(v13, v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 24))(v14, v15);
  if ((unsigned __int16)v16 == 270)
  {
    sub_A13C((_OWORD *)(*(void *)(v1 + 696) + 80LL), (_OWORD *)(v1 + 184));
    sub_A178();
    sub_202C4();
    sub_A1B4((void *)(v1 + 184));
  }

  else
  {
    uint64_t v17 = v16;
    if (sub_12BAB0(v16) != 205)
    {
      if (qword_189B08 != -1) {
        swift_once(&qword_189B08, sub_1013A8);
      }
      uint64_t v18 = qword_19C3D0;
      swift_bridgeObjectRetain(qword_19C3D0);
      sub_57F38(v17, v18);
      char v20 = v19;
      swift_bridgeObjectRelease(v18);
      if ((v20 & 1) != 0)
      {
        char v21 = (void *)swift_task_alloc(dword_18A444);
        *(void *)(v1 + 736) = v21;
        *char v21 = v1;
        v21[1] = sub_1FCA0;
        return sub_1F044(v1 + 504, v17);
      }
    }

    uint64_t v23 = *(void *)(v1 + 720);
    sub_A5DC(v3, v1 + 648);
    uint64_t v24 = sub_202D0(v23);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)sub_A5E8(2LL);
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl( &dword_0,  v25,  v26,  "Nil HealthKitIdentifier, returning genericNotSupported instead of dataTypeNotSupported.",  v27,  2u);
      sub_5050((uint64_t)v27);
    }

    uint64_t v28 = *(void *)(v1 + 720);
    uint64_t v29 = *(void *)(v1 + 704);
    uint64_t v30 = *(void *)(v1 + 696);

    v9(v28, v29);
    sub_A13C((_OWORD *)(v30 + 80), (_OWORD *)(v1 + 16));
    *(_BYTE *)(v1 + 176) = 0;
    sub_1FF94();
    static ExecuteResponse.complete<A>(next:)(v1 + 16);
    sub_1FFD0((void *)(v1 + 16));
  }

  sub_202DC();
  sub_A78C();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1FCA0()
{
  return sub_A5D0();
}

uint64_t sub_1FCD4()
{
  uint64_t v1 = (__int128 *)(v0 + 504);
  if (*(void *)(v0 + 528))
  {
    sub_20004(v1, v0 + 584);
    sub_D7EC(v0 + 584, v0 + 544);
    uint64_t v2 = sub_20308((uint64_t)&unk_17C5A8, 56LL);
    sub_20004((__int128 *)(v0 + 544), v2 + 16);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v6);
    uint64_t v3 = type metadata accessor for SimpleOutputFlowAsync(0LL);
    swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
    *(void *)(v0 + 672) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)(v6, &unk_18A458, v2);
    static ExecuteResponse.complete<A>(next:)(v0 + 672);
    sub_20300();
    swift_release();
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 696);
    sub_2012C((uint64_t)v1, &qword_18A448);
    sub_A13C((_OWORD *)(v4 + 80), (_OWORD *)(v0 + 344));
    sub_A178();
    sub_202C4();
    sub_A1B4((void *)(v0 + 344));
  }

  sub_202DC();
  sub_A78C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1FE14(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(sub_1FE2C, 0LL, 0LL);
}

uint64_t sub_1FE2C()
{
  return sub_202A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1FE58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to Flow.onAsync(input:)[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1FEC0;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t sub_1FEC0(uint64_t a1)
{
  return v1[1](a1);
}

uint64_t sub_1FF08(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18A434);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1FF58;
  return sub_1F8A8(a1);
}

uint64_t sub_1FF58()
{
  return v0[1]();
}

unint64_t sub_1FF94()
{
  unint64_t result = qword_18A438;
  if (!qword_18A438)
  {
    unint64_t result = swift_getWitnessTable(&unk_13C1F8, &type metadata for GenericNotSupportedFlow);
    atomic_store(result, &qword_18A438);
  }

  return result;
}

void *sub_1FFD0(void *a1)
{
  return a1;
}

uint64_t sub_20004(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_2001C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_20040(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_18A454);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_20098;
  return sub_1FE14(a1, v1 + 16);
}

uint64_t sub_20098()
{
  return sub_202A8(v0[1]);
}

uint64_t sub_200CC(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_20100(void *a1)
{
  return a1;
}

uint64_t sub_2012C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_494C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

unint64_t sub_20168()
{
  unint64_t result = qword_18A468;
  if (!qword_18A468)
  {
    uint64_t v1 = type metadata accessor for WellnessSnippets(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for WellnessSnippets, v1);
    atomic_store(result, (unint64_t *)&qword_18A468);
  }

  return result;
}

uint64_t sub_201A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GenericButtonModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_201EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GenericButtonModel(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_20228()
{
  unint64_t result = qword_18A470;
  if (!qword_18A470)
  {
    unint64_t result = swift_getWitnessTable(&unk_138BE8, &type metadata for UnsupportedLoggingFlow);
    atomic_store(result, (unint64_t *)&qword_18A470);
  }

  return result;
}

uint64_t sub_20264(uint64_t a1)
{
  *(void *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

uint64_t sub_20274()
{
  return swift_task_dealloc(*(void *)(v0 + 632));
}

uint64_t sub_20294(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_202A8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_202B4()
{
  return v0(v1, v2);
}

uint64_t sub_202C4()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

uint64_t sub_202D0(uint64_t a1)
{
  return v3(a1, v1, v2);
}

uint64_t sub_202DC()
{
  return swift_task_dealloc(*(void *)(v0 + 728));
}

uint64_t sub_202E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array._endMutation()(a1, a2, a3);
}

uint64_t sub_202F4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_20300()
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
}

uint64_t sub_20308(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7LL);
}

uint64_t sub_20310(uint64_t a1)
{
  int v2 = a1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if (v2 == 205)
  {
    uint64_t v8 = Logger.wellness.unsafeMutableAddressor(v5);
    swift_beginAccess(v8, v18, 0LL, 0LL);
    uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v8, v3);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl( &dword_0,  v10,  v11,  "Cannot determine if isLoggingSupported for nil identifier. Assuming it is supported.",  v12,  2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    char v13 = 1;
  }

  else
  {
    sub_58030(a1, (uint64_t)&off_17AD88);
    char v15 = v14;
    swift_bridgeObjectRelease(&off_17AD88);
    char v13 = v15 ^ 1;
  }

  return v13 & 1;
}

_UNKNOWN **sub_20460()
{
  return &off_17AD88;
}

uint64_t destroy for WellnessPatternsProvider(void *a1)
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 15);
}

_OWORD *initializeWithCopy for WellnessPatternsProvider(_OWORD *a1, _OWORD *a2)
{
  __int128 v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  __int128 v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  __int128 v7 = a2[9];
  a1[9] = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))((uint64_t)a1 + 120, (uint64_t)a2 + 120);
  return a1;
}

void *assignWithCopy for WellnessPatternsProvider(void *a1, void *a2)
{
  return a1;
}

void *initializeWithTake for WellnessPatternsProvider(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA0uLL);
}

uint64_t assignWithTake for WellnessPatternsProvider(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 80));
  __int128 v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for WellnessPatternsProvider(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 160))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WellnessPatternsProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0LL;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 160) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 160) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for WellnessPatternsProvider()
{
  return &type metadata for WellnessPatternsProvider;
}

uint64_t sub_206D8(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_task_switch(sub_206F0, 0LL, 0LL);
}

uint64_t sub_206F0()
{
  uint64_t v1 = *(void **)(v0 + 16);
  v1[3] = type metadata accessor for AceOutput(0LL);
  v1[4] = &protocol witness table for AceOutput;
  unint64_t v2 = sub_B76C(v1);
  sub_21428((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9, 0LL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a1;
  v5[6] = a3;
  uint64_t v6 = sub_494C(&qword_18A648);
  v5[9] = sub_21410(v6);
  v5[10] = sub_A5B8();
  return sub_A5D0();
}

uint64_t sub_207A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a1;
  v5[6] = a3;
  uint64_t v6 = sub_494C(&qword_18A648);
  v5[9] = sub_21410(v6);
  v5[10] = sub_A5B8();
  return sub_A5D0();
}

void sub_207F4()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v1 + 16);
  BOOL v3 = __OFADD__(v2, 1LL);
  uint64_t v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = *(void *)(v0 + 72);
    uint64_t v5 = *(void *)(v0 + 80);
    uint64_t v7 = *(void *)(v0 + 48);
    uint64_t v8 = *(void *)(v0 + 56);
    uint64_t v9 = *(void **)(v0 + 40);
    uint64_t v10 = *(void *)(v1 + 24);
    *(void *)(v1 + 16) = v4;
    *(void *)(v1 + 24) = v7;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRelease(v10);
    uint64_t v11 = type metadata accessor for OutputGenerationManifest(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))(v5, v8, v11);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, 0LL, 1LL, v11);
    sub_21338(v5, v6);
    uint64_t v12 = v1 + OBJC_IVAR____TtC18WellnessFlowPlugin19MockResponseFactory_outputGenerationManifest;
    swift_beginAccess( v1 + OBJC_IVAR____TtC18WellnessFlowPlugin19MockResponseFactory_outputGenerationManifest,  v0 + 16,  33LL,  0LL);
    sub_21380(v6, v12);
    swift_endAccess(v0 + 16);
    v9[3] = type metadata accessor for AceOutput(0LL);
    v9[4] = &protocol witness table for AceOutput;
    char v13 = sub_B76C(v9);
    sub_21428((uint64_t)v13, v14, v15, v16, v17, v18, v19, v20, 0LL);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    (*(void (**)(void))(v0 + 8))();
  }

uint64_t sub_20928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = sub_494C(&qword_18A648);
  void v4[9] = sub_21410(v5);
  v4[10] = sub_A5B8();
  return sub_A5D0();
}

uint64_t sub_20978()
{
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t sub_209B0()
{
  return type metadata accessor for MockResponseFactory(0LL);
}

uint64_t type metadata accessor for MockResponseFactory(uint64_t a1)
{
  uint64_t result = qword_18A4A0;
  if (!qword_18A4A0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MockResponseFactory);
  }
  return result;
}

void sub_209F0(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = "\b";
  sub_20A74(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
  }

void sub_20A74(uint64_t a1)
{
  if (!qword_18A4D0)
  {
    uint64_t v2 = type metadata accessor for OutputGenerationManifest(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_18A4D0);
    }
  }

uint64_t sub_20AC8(uint64_t a1)
{
  unint64_t v3 = (void *)swift_task_alloc(dword_18A4B4);
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_A108;
  return sub_206D8(a1);
}

uint64_t sub_20B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (void *)swift_task_alloc(async function pointer to ResponseGenerating.makeResponseOutput(resultModel:conversationModel:dialog:outputGenerationManifest:)[1]);
  *(void *)(v7 + 16) = v15;
  *uint64_t v15 = v7;
  v15[1] = sub_2140C;
  return ResponseGenerating.makeResponseOutput(resultModel:conversationModel:dialog:outputGenerationManifest:)( a1,  a2,  a3,  a4,  a5,  a6,  a7);
}

uint64_t sub_20BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v13 = (void *)swift_task_alloc(async function pointer to ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)[1]);
  *(void *)(v6 + 16) = v13;
  *char v13 = v6;
  v13[1] = sub_2140C;
  return ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_20C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v13 = (void *)swift_task_alloc(async function pointer to ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)[1]);
  *(void *)(v6 + 16) = v13;
  *char v13 = v6;
  v13[1] = sub_2140C;
  return ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)( a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t sub_20CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_2140C;
  return ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(a1, a2, a3, a4, a5);
}

uint64_t sub_20D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (void *)swift_task_alloc(async function pointer to ResponseGenerating.makeResponseOutput(resultModel:conversationModel:dialog:outputGenerationManifest:)[1]);
  *(void *)(v7 + 16) = v15;
  *uint64_t v15 = v7;
  v15[1] = sub_2140C;
  return ResponseGenerating.makeResponseOutput(resultModel:conversationModel:dialog:outputGenerationManifest:)( a1,  a2,  a3,  a4,  a5,  a6,  a7);
}

uint64_t sub_20DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(dword_18A4C4);
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_2140C;
  return sub_207A4(a1, v9, a3, a4);
}

uint64_t sub_20E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(dword_18A4BC);
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_2140C;
  return sub_20754(a1, v9, a3, a4);
}

uint64_t sub_20ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_18A4CC);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_2140C;
  return sub_20928(a1, a2, a3);
}

uint64_t sub_20F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v13 = (void *)swift_task_alloc(async function pointer to ResponseGenerating.makeResponseOutput(resultModel:conversationModel:outputGenerationManifest:)[1]);
  *(void *)(v6 + 16) = v13;
  *char v13 = v6;
  v13[1] = sub_A108;
  return ResponseGenerating.makeResponseOutput(resultModel:conversationModel:outputGenerationManifest:)( a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t sub_20FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to ResponseGenerating.makeResponseOutput(resultModel:outputGenerationManifest:)[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_2140C;
  return ResponseGenerating.makeResponseOutput(resultModel:outputGenerationManifest:)(a1, a2, a3, a4, a5);
}

uint64_t sub_21058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to ResponseGenerating.makeResponseOutput(conversationModel:outputGenerationManifest:)[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_2140C;
  return ResponseGenerating.makeResponseOutput(conversationModel:outputGenerationManifest:)(a1, a2, a3, a4, a5);
}

uint64_t sub_210DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (void *)swift_task_alloc(async function pointer to ResponseGenerating.makeSuccessOutput(resultModel:conversationModel:dialog:outputGenerationManifest:)[1]);
  *(void *)(v7 + 16) = v15;
  *uint64_t v15 = v7;
  v15[1] = sub_2140C;
  return ResponseGenerating.makeSuccessOutput(resultModel:conversationModel:dialog:outputGenerationManifest:)( a1,  a2,  a3,  a4,  a5,  a6,  a7);
}

uint64_t sub_21178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v13 = (void *)swift_task_alloc(async function pointer to ResponseGenerating.makeSuccessOutput(resultModel:dialog:outputGenerationManifest:)[1]);
  *(void *)(v6 + 16) = v13;
  *char v13 = v6;
  v13[1] = sub_2140C;
  return ResponseGenerating.makeSuccessOutput(resultModel:dialog:outputGenerationManifest:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_2120C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v13 = (void *)swift_task_alloc(async function pointer to ResponseGenerating.makeSuccessOutput(conversationModel:dialog:outputGenerationManifest:)[1]);
  *(void *)(v6 + 16) = v13;
  *char v13 = v6;
  v13[1] = sub_2140C;
  return ResponseGenerating.makeSuccessOutput(conversationModel:dialog:outputGenerationManifest:)( a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t sub_212A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to ResponseGenerating.makeSuccessOutput(dialog:outputGenerationManifest:)[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_2140C;
  return ResponseGenerating.makeSuccessOutput(dialog:outputGenerationManifest:)(a1, a2, a3, a4, a5);
}

uint64_t sub_21324()
{
  return ResponseGenerating.makeResponseUpdateOutput(viewId:update:)();
}

uint64_t sub_21338(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_18A648);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_21380(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_18A648);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_213C8(uint64_t a1)
{
  uint64_t v2 = sub_494C(&qword_18A648);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_21410(uint64_t a1)
{
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_21428( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return AceOutput.init(commands:flowActivity:)(v9, &a9);
}

uint64_t type metadata accessor for WellnessCATs(uint64_t a1)
{
  uint64_t result = qword_18A650;
  if (!qword_18A650) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WellnessCATs);
  }
  return result;
}

uint64_t sub_21470(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_19C208);
}

uint64_t sub_214AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_189D00);
  __chkstk_darwin(v4);
  sub_6D44();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = sub_494C(&qword_18A6A0);
  uint64_t v9 = swift_allocObject(v8, 128LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_138D90;
  uint64_t v10 = (void *)(v9 + 48);
  *(void *)(v9 + 32) = 0x6570795461746164LL;
  *(void *)(v9 + 40) = 0xE800000000000000LL;
  sub_217DC(a1, v7, &qword_189D00);
  uint64_t v11 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1LL, v11) == 1)
  {
    sub_2012C(v7, &qword_189D00);
    *(_OWORD *)uint64_t v10 = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
  }

  else
  {
    *(void *)(v9 + 72) = v11;
    uint64_t v12 = sub_B76C(v10);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))(v12, v7, v11);
  }

  *(void *)(v9 + 80) = 7368801LL;
  *(void *)(v9 + 88) = 0xE300000000000000LL;
  if (a2)
  {
    uint64_t v13 = type metadata accessor for SirikitApp(0LL);
    uint64_t v14 = a2;
  }

  else
  {
    uint64_t v14 = 0LL;
    uint64_t v13 = 0LL;
    *(void *)(v9 + 104) = 0LL;
    *(void *)(v9 + 112) = 0LL;
  }

  *(void *)(v9 + 96) = v14;
  *(void *)(v9 + 120) = v13;
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:)(0xD000000000000014LL, 0x8000000000141490LL, v9);
  return swift_bridgeObjectRelease(v9);
}

uint64_t sub_21640()
{
  return dispatch thunk of CATWrapper.execute(catId:parameters:)( 0xD000000000000015LL,  0x8000000000141470LL,  &_swiftEmptyArrayStorage);
}

uint64_t sub_21664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B4(a1, a2, a3);
}

uint64_t sub_216B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_6D44();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_494C(&qword_189CF8);
  __chkstk_darwin(v11);
  sub_6D44();
  uint64_t v14 = v13 - v12;
  sub_217DC(a1, v13 - v12, &qword_189CF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  uint64_t v15 = CATWrapper.init(templateDir:options:globals:)(v14, v10, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_2012C(a1, &qword_189CF8);
  return v15;
}

uint64_t sub_217B8()
{
  uint64_t v0 = CATWrapper.deinit();
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t sub_217D4()
{
  return type metadata accessor for WellnessCATs(0LL);
}

uint64_t sub_217DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_494C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

void sub_21820(uint64_t a1)
{
}

void sub_21850(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_23368(a1);
  Hasher._combine(_:)(v1);
  Hasher._finalize()();
  sub_1C730();
}

Swift::Int sub_21888(uint64_t a1)
{
  return Hasher._finalize()();
}

void sub_218C4()
{
}

BOOL sub_218CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Parse(0LL);
  uint64_t v54 = *(void *)(v2 - 8);
  uint64_t v55 = v2;
  __chkstk_darwin(v2);
  sub_6D44();
  uint64_t v53 = v4 - v3;
  uint64_t v5 = type metadata accessor for Input(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_6D44();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = sub_D984();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v52 = (os_log_s *)((char *)v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v49 = (os_log_s *)((char *)v47 - v15);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)v47 - v17;
  uint64_t v19 = Logger.wellness.unsafeMutableAddressor(v16);
  sub_A5DC(v19, (uint64_t)v58);
  uint64_t v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  uint64_t v51 = v19;
  sub_23360((uint64_t)v18, v19, v50);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  char v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = sub_A5E8(12LL);
    uint64_t v48 = v10;
    uint64_t v24 = (uint8_t *)v23;
    uint64_t v25 = sub_A5E8(32LL);
    v47[1] = v11;
    uint64_t v26 = v25;
    v57[0] = v25;
    v47[2] = a1;
    *(_DWORD *)uint64_t v24 = 136315138;
    v47[0] = v24 + 4;
    uint64_t v27 = sub_2322C( (unint64_t *)&qword_189EE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v5, v27);
    unint64_t v30 = v29;
    uint64_t v56 = sub_39178(v28, v29, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v47[0], v24 + 12);
    swift_bridgeObjectRelease(v30);
    sub_23318();
    sub_DA24(&dword_0, v21, v22, "LoggingCorrectionsFlow on(correction:) for input: %s", v24);
    sub_A81C(v26);
    sub_5050(v26);
    uint64_t v31 = (uint64_t)v24;
    uint64_t v10 = v48;
    sub_5050(v31);
  }

  else
  {
    sub_23318();
  }

  uint64_t v32 = sub_2334C((uint64_t)v18);
  uint64_t v33 = v53;
  Input.parse.getter(v32);
  int v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 88))(v33, v55);
  int v35 = enum case for Parse.uso(_:);
  if (v34 == enum case for Parse.uso(_:))
  {
    sub_23308();
    uint64_t v36 = v51;
    sub_A5DC(v51, (uint64_t)v57);
    uint64_t v37 = v49;
    uint64_t v38 = sub_23360((uint64_t)v49, v36, v50);
    Logger.logObject.getter(v38);
    os_log_type_t v39 = sub_AB70();
    if (sub_232DC(v39))
    {
      uint64_t v40 = (uint8_t *)sub_232D0();
      *(_WORD *)uint64_t v40 = 0;
      sub_232EC(&dword_0, v37, (os_log_type_t)v21, "LoggingCorrectionsFlow got USO parse...", v40);
      sub_5050((uint64_t)v40);
    }

    sub_2334C((uint64_t)v37);
  }

  else
  {
    uint64_t v41 = v51;
    sub_A5DC(v51, (uint64_t)v57);
    uint64_t v42 = v52;
    uint64_t v43 = v50((uint64_t)v52, v41, v10);
    Logger.logObject.getter(v43);
    os_log_type_t v44 = sub_AB70();
    if (sub_232DC(v44))
    {
      uint64_t v45 = (uint8_t *)sub_232D0();
      *(_WORD *)uint64_t v45 = 0;
      sub_232EC( &dword_0,  v42,  (os_log_type_t)v41,  "LoggingCorrectionsFlow encountered non-uso parse. Not handling.",  v45);
      sub_5050((uint64_t)v45);
    }

    sub_2334C((uint64_t)v52);
    sub_23308();
  }

  return v34 == v35;
}

uint64_t sub_21CA4()
{
  uint64_t v0 = sub_D984();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_6D44();
  uint64_t v4 = v3 - v2;
  uint64_t v6 = Logger.wellness.unsafeMutableAddressor(v5);
  sub_A5DC(v6, (uint64_t)v12);
  uint64_t v7 = sub_23360(v4, v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)sub_232D0();
    *(_WORD *)uint64_t v10 = 0;
    sub_232EC(&dword_0, v8, v9, "LoggingCorrectionsFlow on(input:) - This is unexpected", v10);
    sub_5050((uint64_t)v10);
  }

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  return 0LL;
}

uint64_t sub_21D8C(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  uint64_t v3 = sub_D984();
  v2[14] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[15] = v4;
  v2[16] = sub_D8CC(v4);
  v2[17] = sub_A5B8();
  v2[18] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_21DE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 104);
  if (!*(_BYTE *)(v2 + 16))
  {
    uint64_t v11 = *(void *)(v1 + 144);
    uint64_t v12 = *(void *)(v1 + 120);
    uint64_t v13 = Logger.wellness.unsafeMutableAddressor(a1);
    sub_A5DC(v13, v1 + 64);
    sub_23354(v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
    sub_A86C();
    os_log_type_t v14 = sub_AB70();
    if (sub_232DC(v14))
    {
      uint64_t v15 = (uint8_t *)sub_232D0();
      *(_WORD *)uint64_t v15 = 0;
      sub_232EC(&dword_0, (os_log_s *)(v1 + 64), (os_log_type_t)v11, "LoggingCorrectionsFlow Execute - Ready", v15);
      sub_5050((uint64_t)v15);
    }

    uint64_t v16 = *(void *)(v1 + 104);

    uint64_t v17 = sub_23340();
    v18(v17);
    *(_BYTE *)(v2 + 16) = 1;
    *(void *)(v1 + 88) = v16;
    uint64_t v19 = type metadata accessor for MedsLoggingCorrectionsFlow(0LL);
    uint64_t v20 = sub_2322C(&qword_18A888, type metadata accessor for MedsLoggingCorrectionsFlow, (uint64_t)&unk_138FB8);
    static ExecuteResponse.ongoing<A>(next:)(v1 + 88, v19, v20);
    goto LABEL_12;
  }

  if (*(_BYTE *)(v2 + 16) != 1)
  {
    uint64_t v21 = Logger.wellness.unsafeMutableAddressor(a1);
    sub_A5DC(v21, v1 + 16);
    sub_232F4();
    sub_23374();
    os_log_type_t v22 = sub_AB70();
    if (sub_A988(v22))
    {
      uint64_t v23 = (_WORD *)sub_232D0();
      *uint64_t v23 = 0;
      sub_A940(&dword_0, v24, v25, "LoggingCorrectionsFlow Execute - Done");
      sub_5050((uint64_t)v23);
    }

    uint64_t v26 = *(void *)(v1 + 120);

    uint64_t v27 = sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
    static ExecuteResponse.complete()(v27);
LABEL_12:
    sub_23328();
    sub_A78C();
    sub_A67C();
    return sub_D8C4(*(uint64_t (**)(void))(v1 + 8));
  }

  uint64_t v3 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v3, v1 + 40);
  sub_232F4();
  sub_23374();
  os_log_type_t v4 = sub_AB70();
  if (sub_A988(v4))
  {
    uint64_t v5 = (_WORD *)sub_232D0();
    *uint64_t v5 = 0;
    sub_A940(&dword_0, v6, v7, "LoggingCorrectionsFlow Execute - Correcting");
    sub_5050((uint64_t)v5);
  }

  uint64_t v8 = *(void *)(v1 + 120);

  sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  os_log_type_t v9 = (void *)swift_task_alloc(dword_18A71C);
  *(void *)(v1 + 152) = v9;
  *os_log_type_t v9 = v1;
  v9[1] = sub_2203C;
  return sub_22134(*(void *)(v1 + 96));
}

uint64_t sub_2203C()
{
  return sub_A5D0();
}

uint64_t sub_22084()
{
  *(_BYTE *)(*(void *)(v0 + 104) + 16LL) = 2;
  sub_23328();
  sub_A78C();
  sub_A67C();
  return sub_D8C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_220C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MedsLoggingCorrectionsFlow(0LL);
  uint64_t v5 = sub_2322C(&qword_18A888, type metadata accessor for MedsLoggingCorrectionsFlow, (uint64_t)&unk_138FB8);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
}

uint64_t sub_22134(uint64_t a1)
{
  v2[76] = v1;
  v2[75] = a1;
  uint64_t v3 = type metadata accessor for DialogPhase(0LL);
  v2[77] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[78] = v4;
  v2[79] = sub_D8CC(v4);
  v2[80] = sub_A5B8();
  uint64_t v5 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[81] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[82] = v6;
  v2[83] = sub_A5C0(v6);
  uint64_t v7 = type metadata accessor for CorrectionsExitValue(0LL);
  v2[84] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[85] = v8;
  v2[86] = sub_A5C0(v8);
  uint64_t v9 = sub_D984();
  v2[87] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[88] = v10;
  v2[89] = sub_D8CC(v10);
  v2[90] = sub_A5B8();
  v2[91] = sub_A5B8();
  v2[92] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_221F0()
{
  uint64_t v1 = (os_log_s *)v0[92];
  uint64_t v2 = v0[88];
  uint64_t v3 = v0[76];
  id v4 = [objc_allocWithZone((Class)type metadata accessor for UndoMedsIntent(0)) init];
  v0[93] = v4;
  uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_matchingMeds);
  uint64_t v6 = swift_bridgeObjectRetain(v5);
  sub_231D4(v6, v4);
  uint64_t v7 = swift_bridgeObjectRelease(v5);
  uint64_t v8 = Logger.wellness.unsafeMutableAddressor(v7);
  v0[94] = v8;
  sub_A5DC(v8, (uint64_t)(v0 + 64));
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[95] = v9;
  uint64_t v10 = sub_23354((uint64_t)v1, v9);
  Logger.logObject.getter(v10);
  os_log_type_t v11 = sub_AB70();
  if (sub_232DC(v11))
  {
    uint64_t v12 = (uint8_t *)sub_232D0();
    *(_WORD *)uint64_t v12 = 0;
    sub_232EC(&dword_0, v1, (os_log_type_t)v0, "LoggingCorrectionsFlow doCorrection - Undoing", v12);
    sub_5050((uint64_t)v12);
  }

  uint64_t v13 = v0[92];
  uint64_t v14 = v0[88];
  uint64_t v15 = v0[87];
  uint64_t v16 = v0[76];

  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v0[96] = v17;
  v17(v13, v15);
  uint64_t v18 = *(void **)(v16 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_intentHandler);
  v0[7] = v0 + 72;
  v0[2] = v0;
  v0[3] = sub_2239C;
  v0[54] = swift_continuation_init(v0 + 2, 0LL);
  v0[50] = _NSConcreteStackBlock;
  v0[51] = 0x40000000LL;
  v0[52] = sub_22BB4;
  v0[53] = &unk_17C848;
  [v18 handleUndoMeds:v4 completion:v0 + 50];
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_2239C()
{
  return sub_A5D0();
}

uint64_t sub_223DC()
{
  uint64_t v1 = *(void (**)(uint64_t, os_log_s *, uint64_t))(v0 + 760);
  uint64_t v2 = *(os_log_s **)(v0 + 752);
  uint64_t v3 = *(void *)(v0 + 728);
  uint64_t v4 = *(void *)(v0 + 696);
  uint64_t v5 = *(void **)(v0 + 576);
  *(void *)(v0 + 776) = v5;
  sub_A5DC((uint64_t)v2, v0 + 440);
  v1(v3, v2, v4);
  uint64_t v6 = v5;
  sub_A86C();
  os_log_type_t v7 = sub_AB70();
  if (os_log_type_enabled(v2, v7))
  {
    uint64_t v8 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v9 = (void *)sub_A5E8(8LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    *(void *)(v0 + 592) = v6;
    uint64_t v10 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 592, v0 + 600, v8 + 4, v8 + 12);
    *uint64_t v9 = v6;

    sub_DA24(&dword_0, v2, v7, "LoggingCorrectionsFlow Received intent response: %@", v8);
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v9);
    sub_5050((uint64_t)v9);
    sub_5050((uint64_t)v8);
  }

  else
  {

    uint64_t v2 = (os_log_s *)v6;
  }

  os_log_type_t v11 = *(uint64_t (**)(uint64_t))(v0 + 768);

  uint64_t v12 = sub_23340();
  uint64_t v13 = v11(v12);
  uint64_t v14 = *(uint64_t (**)(void))((char *)&stru_20.maxprot + (swift_isaMask & *v6));
  if (((uint64_t (*)(uint64_t))v14)(v13) == 4)
  {
    uint64_t v15 = *(void *)(v0 + 608);
    uint64_t v16 = OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_provider;
    *(void *)(v0 + 784) = OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_provider;
    sub_500C((void *)(v15 + v16 + 80), *(void *)(v15 + v16 + 104));
    uint64_t v17 = (void *)swift_task_alloc(dword_18EC44);
    *(void *)(v0 + 792) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_227C4;
    return sub_E207C();
  }

  else
  {
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 760);
    uint64_t v20 = *(void *)(v0 + 752);
    uint64_t v21 = *(void *)(v0 + 712);
    uint64_t v22 = *(void *)(v0 + 696);
    sub_A5DC(v20, v0 + 464);
    v19(v21, v20, v22);
    uint64_t v23 = v6;
    uint64_t v24 = (os_log_s *)sub_A86C();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 768);
    uint64_t v28 = *(void *)(v0 + 712);
    uint64_t v29 = *(void *)(v0 + 696);
    if (v26)
    {
      uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v0 + 768);
      uint64_t v36 = *(void *)(v0 + 696);
      unint64_t v30 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v31 = sub_A5E8(32LL);
      uint64_t v38 = v31;
      *(_DWORD *)unint64_t v30 = 136315138;
      *(void *)(v0 + 568) = v14();
      uint64_t v32 = String.init<A>(describing:)(v0 + 568, &type metadata for UndoMedsIntentResponseCode);
      unint64_t v34 = v33;
      *(void *)(v0 + 560) = sub_39178(v32, v33, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 560, v0 + 568, v30 + 4, v30 + 12);
      swift_bridgeObjectRelease(v34);

      sub_DA24(&dword_0, v24, v25, "Intent handler failed with code: %s", v30);
      sub_A81C(v31);
      sub_5050(v31);
      sub_5050((uint64_t)v30);

      v37(v28, v36);
    }

    else
    {

      v27(v28, v29);
    }

    int v35 = *(void **)(v0 + 744);
    sub_A13C( (_OWORD *)(*(void *)(v0 + 608) + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_provider),  (_OWORD *)(v0 + 240));
    sub_A178();
    static ExecuteResponse.complete<A>(next:)(v0 + 240);

    sub_A1B4((void *)(v0 + 240));
    sub_232AC();
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    sub_A760();
    sub_A8EC();
    sub_A910();
    sub_A864();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_227C4(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 792));
  if (v1) {
    swift_errorRelease(v1);
  }
  else {
    *(void *)(v4 + 800) = a1;
  }
  sub_A964();
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_22838()
{
  uint64_t v31 = *(void **)(v0 + 776);
  uint64_t v29 = *(void **)(v0 + 744);
  uint64_t v1 = *(void *)(v0 + 688);
  uint64_t v2 = *(void *)(v0 + 680);
  uint64_t v3 = *(void *)(v0 + 672);
  uint64_t v26 = *(void *)(v0 + 664);
  id v27 = *(id *)(v0 + 800);
  uint64_t v30 = *(void *)(v0 + 656);
  uint64_t v4 = *(void *)(v0 + 640);
  uint64_t v5 = *(void *)(v0 + 632);
  uint64_t v6 = *(void *)(v0 + 624);
  uint64_t v7 = *(void *)(v0 + 616);
  uint64_t v8 = *(void *)(v0 + 608);
  uint64_t v28 = (void *)(v8 + *(void *)(v0 + 784));
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for CorrectionsExitValue.success(_:), v3);
  uint64_t v9 = v8 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_correctionsExitValue;
  swift_beginAccess(v9, v0 + 488, 33LL, 0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 40))(v9, v1, v3);
  uint64_t v10 = swift_endAccess(v0 + 488);
  static DialogPhase.completion.getter(v10, v11, v12, v13, v14, v15, v16, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v7);
  OutputGenerationManifest.init(dialogPhase:_:)(v5, sub_A633C, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v7);
  id v18 = [v27 patternId];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v18);

  uint64_t v19 = sub_23340();
  OutputGenerationManifest.responseViewId.setter(v19, v20);
  uint64_t v21 = v28[3];
  uint64_t v22 = v28[4];
  sub_500C(v28, v21);
  *(void *)(v0 + 584) = dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)( v27,  v26,  v21,  v22);
  uint64_t v23 = type metadata accessor for AnyFlow(0LL);
  uint64_t v24 = Flow.eraseToAnyFlow()(v23);
  static ExecuteResponse.complete(next:)(v24);
  swift_release();
  swift_release();

  sub_23334(v30);
  sub_232AC();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_22A5C()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 760);
  uint64_t v2 = *(void *)(v0 + 752);
  uint64_t v3 = *(void *)(v0 + 720);
  uint64_t v4 = *(void *)(v0 + 696);
  sub_A5DC(v2, v0 + 536);
  v1(v3, v2, v4);
  uint64_t v5 = (void *)sub_23374();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (sub_A988(v6))
  {
    uint64_t v7 = (_WORD *)sub_232D0();
    *uint64_t v7 = 0;
    sub_A940(&dword_0, v8, v9, "LoggingCorrectionsFlow Error executing pattern");
    sub_5050((uint64_t)v7);
  }

  uint64_t v10 = *(void *)(v0 + 784);
  uint64_t v11 = *(void **)(v0 + 776);
  uint64_t v12 = *(void (**)(uint64_t))(v0 + 768);
  uint64_t v17 = *(void **)(v0 + 744);
  uint64_t v13 = *(void *)(v0 + 608);

  uint64_t v14 = sub_23340();
  v12(v14);
  sub_A13C((_OWORD *)(v13 + v10), (_OWORD *)(v0 + 80));
  sub_A178();
  uint64_t v15 = Flow.eraseToAnyFlow()(&type metadata for GenericErrorFlow);
  sub_A1B4((void *)(v0 + 80));
  static ExecuteResponse.complete(next:)(v15);
  swift_release();

  sub_232AC();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_22BB4(uint64_t a1, void *a2)
{
  return sub_BF980(*(void *)(a1 + 32), (uint64_t)a2);
}

uint64_t sub_22BDC()
{
  uint64_t v1 = type metadata accessor for CorrectionsExitValue(0LL);
  sub_23334(*(void *)(v1 - 8));
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_kWellnessFlowPluginIdentifier
                                      + 8));
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_matchingMeds));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0
                                                                + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_flowConfig));
  sub_D878((void *)(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_provider));
  swift_unknownObjectRelease(*(void *)(v0
                                       + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_intentHandler));
  sub_2326C(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_correctionInput);
  return v0;
}

uint64_t sub_22C7C()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_22CA0()
{
  return type metadata accessor for MedsLoggingCorrectionsFlow(0LL);
}

uint64_t type metadata accessor for MedsLoggingCorrectionsFlow(uint64_t a1)
{
  uint64_t result = qword_18A700;
  if (!qword_18A700) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MedsLoggingCorrectionsFlow);
  }
  return result;
}

void sub_22CE0(uint64_t a1)
{
  v6[0] = (char *)&value witness table for () + 64;
  v6[1] = &unk_138E50;
  uint64_t v2 = type metadata accessor for CorrectionsExitValue(319LL);
  if (v3 <= 0x3F)
  {
    v6[2] = *(void *)(v2 - 8) + 64LL;
    v6[3] = &unk_138E68;
    v6[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v6[5] = &unk_138E80;
    v6[6] = &unk_138E98;
    v6[7] = &unk_138EB0;
    sub_22DB0(319LL);
    if (v5 <= 0x3F)
    {
      v6[8] = *(void *)(v4 - 8) + 64LL;
      swift_updateClassMetadata2(a1, 256LL, 9LL, v6, a1 + 80);
    }
  }

void sub_22DB0(uint64_t a1)
{
  if (!qword_18A720)
  {
    uint64_t v2 = type metadata accessor for Input(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_18A720);
    }
  }

uint64_t getEnumTagSinglePayload for MedsLoggingCorrectionsFlow.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for MedsLoggingCorrectionsFlow.State( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_22ED8 + 4 * byte_138DE5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_22F0C + 4 * byte_138DE0[v4]))();
}

uint64_t sub_22F0C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22F14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x22F1CLL);
  }
  return result;
}

uint64_t sub_22F28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x22F30LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_22F34(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22F3C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MedsLoggingCorrectionsFlow.State()
{
  return &type metadata for MedsLoggingCorrectionsFlow.State;
}

uint64_t storeEnumTagSinglePayload for MedsLoggingCorrectionsFlow.CorrectionsTask(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_22F98 + 4 * byte_138DEA[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_22FB8 + 4 * byte_138DEF[v4]))();
  }
}

_BYTE *sub_22F98(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_22FB8(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_22FC0(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_22FC8(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_22FD0(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_22FD8(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MedsLoggingCorrectionsFlow.CorrectionsTask()
{
  return &type metadata for MedsLoggingCorrectionsFlow.CorrectionsTask;
}

unint64_t sub_22FF8()
{
  unint64_t result = qword_18A868;
  if (!qword_18A868)
  {
    unint64_t result = swift_getWitnessTable(&unk_138F28, &type metadata for MedsLoggingCorrectionsFlow.CorrectionsTask);
    atomic_store(result, (unint64_t *)&qword_18A868);
  }

  return result;
}

unint64_t sub_23038()
{
  unint64_t result = qword_18A870[0];
  if (!qword_18A870[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_138F90, &type metadata for MedsLoggingCorrectionsFlow.State);
    atomic_store(result, qword_18A870);
  }

  return result;
}

uint64_t sub_23074@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_correctionsExitValue;
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t v4 = type metadata accessor for CorrectionsExitValue(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

BOOL sub_230DC(uint64_t a1)
{
  return sub_218CC(a1);
}

uint64_t sub_230F4()
{
  return 0LL;
}

uint64_t sub_2310C(uint64_t a1, uint64_t a2)
{
  return sub_220C0(a1, a2);
}

uint64_t sub_2312C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18A714);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_A108;
  return sub_21D8C(a1);
}

uint64_t sub_23180(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for MedsLoggingCorrectionsFlow(0LL);
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t sub_231A8()
{
  return sub_2322C(&qword_18A888, type metadata accessor for MedsLoggingCorrectionsFlow, (uint64_t)&unk_138FB8);
}

void sub_231D4(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [a2 setMatchingMeds:isa];
}

uint64_t sub_2322C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_2326C(uint64_t a1)
{
  uint64_t v2 = sub_494C(qword_18A890);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_232AC()
{
  return swift_task_dealloc(*(void *)(v0 + 736));
}

uint64_t sub_232D0()
{
  return swift_slowAlloc(2LL, -1LL);
}

BOOL sub_232DC(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_232EC(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_232F4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, v2, v1);
}

uint64_t sub_23308()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_23318()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_23328()
{
  return swift_task_dealloc(*(void *)(v0 + 144));
}

uint64_t sub_23334@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_23340()
{
  return v0;
}

uint64_t sub_2334C(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_23354@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

uint64_t sub_23360@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

void *sub_23368(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, 0LL);
}

uint64_t sub_23374()
{
  return Logger.logObject.getter();
}

ValueMetadata *type metadata accessor for HealthAppRestrictedFlow()
{
  return &type metadata for HealthAppRestrictedFlow;
}

uint64_t sub_2338C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_2380C();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for HealthAppRestrictedFlow, v4);
}

uint64_t sub_233CC(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[7] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  _BYTE v2[8] = v4;
  void v2[9] = sub_A5C0(v4);
  uint64_t v5 = type metadata accessor for DialogPhase(0LL);
  v2[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[11] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[12] = swift_task_alloc(v7);
  v2[13] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[14] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[15] = v9;
  v2[16] = sub_A5C0(v9);
  return swift_task_switch(sub_23474, 0LL, 0LL);
}

uint64_t sub_23474()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18CCCC);
  *(void *)(v0 + 136) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_234D0;
  return sub_75D38(0);
}

uint64_t sub_234D0(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 136));
  if (v1)
  {
    swift_errorRelease(v1);
    uint64_t v5 = sub_23698;
  }

  else
  {
    *(void *)(v4 + 144) = a1;
    uint64_t v5 = sub_23548;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_23548()
{
  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v17 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v8 = *(void **)(v0 + 48);
  static DialogPhase.error.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v4, v7);
  OutputGenerationManifest.init(dialogPhase:_:)(v6, sub_A633C, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v7);
  id v9 = [v1 patternId];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  OutputGenerationManifest.responseViewId.setter(v10, v12);
  uint64_t v13 = v8[3];
  uint64_t v14 = v8[4];
  sub_500C(v8, v13);
  uint64_t v15 = dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)( v1,  v2,  v13,  v14);
  static ExecuteResponse.complete(next:)(v15);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v17);
  sub_23848();
  swift_task_dealloc(v15);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23698(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v4 = *(void *)(v1 + 56);
  uint64_t v5 = Logger.wellness.unsafeMutableAddressor(a1);
  swift_beginAccess(v5, v1 + 16, 0LL, 0LL);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v9 = 0;
    _os_log_impl(&dword_0, v7, v8, "Failed to execute appRestricted pattern", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  uint64_t v11 = *(void *)(v1 + 64);
  uint64_t v10 = *(void *)(v1 + 72);
  uint64_t v12 = *(void *)(v1 + 56);

  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  static ExecuteResponse.complete()(v13);
  sub_23848();
  swift_task_dealloc(v7);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_237BC(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18A8AC);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_A108;
  return sub_233CC(a1);
}

unint64_t sub_2380C()
{
  unint64_t result = qword_18A8B0;
  if (!qword_18A8B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_139088, &type metadata for HealthAppRestrictedFlow);
    atomic_store(result, (unint64_t *)&qword_18A8B0);
  }

  return result;
}

uint64_t sub_23848()
{
  return swift_task_dealloc(*(void *)(v0 + 128));
}

void sub_23858()
{
}

void sub_238B8()
{
  *(void *)(v1 + 256) = v4;
  *(void *)(v1 + 264) = v3;
  *(void *)(v1 + 272) = v2;
  *(_BYTE *)(v1 + 280) = v0;
  sub_24A0C();
}

uint64_t sub_23918()
{
  uint64_t v0 = sub_D984();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = Logger.wellness.unsafeMutableAddressor(v2);
  sub_A5DC(v5, (uint64_t)v13);
  uint64_t v6 = sub_DA14((uint64_t)v4, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)sub_232D0();
    *(_WORD *)id v9 = 0;
    _os_log_impl(&dword_0, v7, v8, "In MedNameDisambiguationStrategy's actionForInput().", v9, 2u);
    sub_5050((uint64_t)v9);
  }

  uint64_t v10 = sub_24A50((uint64_t)v4, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return static ActionForInput.handle()(v10);
}

uint64_t sub_23A18(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v3[18] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[19] = v5;
  v3[20] = sub_D8CC(v5);
  v3[21] = sub_A5B8();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[22] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[23] = v7;
  v3[24] = sub_A5C0(v7);
  uint64_t v8 = sub_D984();
  v3[25] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[26] = v9;
  v3[27] = sub_A5C0(v9);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_23AA0(uint64_t a1)
{
  uint64_t v3 = v1[26];
  uint64_t v2 = (os_log_s *)v1[27];
  uint64_t v4 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v4, (uint64_t)(v1 + 12));
  uint64_t v5 = sub_DA14((uint64_t)v2, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  uint64_t v6 = v2;
  Logger.logObject.getter(v5);
  os_log_type_t v7 = sub_AB70();
  if (sub_A988(v7))
  {
    uint64_t v8 = (uint8_t *)sub_232D0();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_0, v2, (os_log_type_t)v2, "MedNameDisambiguationStrategy: makePromptForDisambiguation", v8, 2u);
    sub_5050((uint64_t)v8);
  }

  uint64_t v9 = v1[26];
  uint64_t v10 = v1[27];
  uint64_t v11 = v1[25];
  uint64_t v13 = v1[20];
  uint64_t v12 = v1[21];
  uint64_t v14 = v1[19];
  uint64_t v23 = v1[17];

  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  static DialogPhase.clarification.getter(v15);
  sub_DA14(v13, v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16));
  OutputGenerationManifest.init(dialogPhase:_:)(v13, sub_A633C, 0LL);
  sub_24A50(v12, *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
  OutputGenerationManifest.listenAfterSpeaking.setter(0LL);
  sub_D7EC(v23 + 56, (uint64_t)(v1 + 2));
  uint64_t v16 = sub_500C(v1 + 2, v1[5]);
  uint64_t v17 = sub_494C(&qword_18AA80);
  uint64_t v18 = PaginatedItemContainer.items.getter(v17);
  v1[28] = v18;
  LOBYTE(v9) = *(_BYTE *)(v23 + 280);
  uint64_t v19 = *v16;
  uint64_t v20 = unk_18CD54;
  uint64_t v24 = (uint64_t (*)(char, char, char, char, uint64_t, char, uint64_t, uint64_t))((char *)&dword_18CD50
                                                                                        + dword_18CD50);
  swift_retain();
  uint64_t v21 = (void *)swift_task_alloc(v20);
  v1[29] = v21;
  *uint64_t v21 = v1;
  v21[1] = sub_23C80;
  return v24(0, 1, 1, 0, v18, v9, v19, v1[17]);
}

uint64_t sub_23C80(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v5 = *(void *)(*v2 + 224);
  uint64_t v4 = *(void *)(*v2 + 232);
  *(void *)(v3 + 240) = a1;
  *(void *)(v3 + 248) = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v5);
  sub_A964();
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_23CF0()
{
  uint64_t v1 = (void *)v0[30];
  uint64_t v2 = v0[17];
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2);
  id v3 = [v1 patternId];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  OutputGenerationManifest.responseViewId.setter(v4, v6);
  sub_D7EC(v2 + 176, (uint64_t)(v0 + 7));
  uint64_t v7 = v0[10];
  uint64_t v8 = v0[11];
  sub_500C(v0 + 7, v7);
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  v0[32] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_23DD0;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)( v0[15],  v0[30],  v0[24],  v7,  v8);
}

uint64_t sub_23DD0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 256LL);
  *(void *)(*(void *)v1 + 264LL) = v0;
  swift_task_dealloc(v2);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_23E28()
{
  return sub_2499C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23E78()
{
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 160);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_AA20();
  sub_A67C();
  sub_A7C8();
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23F04()
{
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 192);

  sub_24A50(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_AA20();
  sub_24A20();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  return sub_2499C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23F60(uint64_t a1, uint64_t a2)
{
  v2[58] = a1;
  v2[59] = a2;
  uint64_t v3 = type metadata accessor for Parse.DirectInvocation(0LL);
  v2[60] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[61] = v4;
  v2[62] = sub_A5C0(v4);
  uint64_t v5 = type metadata accessor for Parse(0LL);
  v2[63] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[64] = v6;
  v2[65] = sub_D8CC(v6);
  v2[66] = sub_A5B8();
  uint64_t v7 = sub_D984();
  v2[67] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[68] = v8;
  v2[69] = sub_D8CC(v8);
  v2[70] = sub_A5B8();
  v2[71] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_23FF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 568);
  uint64_t v3 = *(void *)(v1 + 544);
  uint64_t v4 = *(void *)(v1 + 536);
  uint64_t v5 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v5, v1 + 336);
  uint64_t v107 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  uint64_t v109 = v5;
  uint64_t v6 = v107(v2, v5, v4);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (_WORD *)sub_232D0();
    *uint64_t v9 = 0;
    sub_249C8(&dword_0, v7, v8, "MedNameDisambiguationStrategy: parseDisambiguationResponse");
    sub_5050((uint64_t)v9);
  }

  uint64_t v10 = *(void *)(v1 + 568);
  uint64_t v11 = *(void *)(v1 + 544);
  uint64_t v12 = *(void *)(v1 + 536);
  uint64_t v13 = *(void *)(v1 + 528);
  uint64_t v14 = *(void *)(v1 + 520);
  uint64_t v16 = *(void *)(v1 + 504);
  uint64_t v15 = *(void *)(v1 + 512);

  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
  uint64_t v18 = v17(v10, v12);
  Input.parse.getter(v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v14, v13, v16);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v15 + 88))(v14, v16) == enum case for Parse.directInvocation(_:))
  {
    uint64_t v19 = *(void *)(v1 + 520);
    uint64_t v20 = *(void *)(v1 + 488);
    uint64_t v21 = *(void *)(v1 + 496);
    uint64_t v22 = *(void *)(v1 + 480);
    (*(void (**)(uint64_t, void))(*(void *)(v1 + 512) + 96LL))(v19, *(void *)(v1 + 504));
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v21, v19, v22);
    if (Parse.DirectInvocation.userData.getter(v23))
    {
      sub_24A48(0x656C756465686373LL, 0xEA00000000004449LL, (_OWORD *)(v1 + 304));
      sub_249D4();
      if (*(void *)(v1 + 328))
      {
        uint64_t v24 = sub_24A30(v1 + 440, v1 + 304, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String);
        if ((_DWORD)v24) {
          uint64_t v25 = *(void *)(v1 + 440);
        }
        else {
          uint64_t v25 = 0LL;
        }
        if ((_DWORD)v24) {
          uint64_t v26 = *(void *)(v1 + 448);
        }
        else {
          uint64_t v26 = 0LL;
        }
LABEL_17:
        if (Parse.DirectInvocation.userData.getter(v24))
        {
          sub_24A48(0x697461636964656DLL, 0xEC00000044496E6FLL, (_OWORD *)(v1 + 240));
          sub_249D4();
          if (*(void *)(v1 + 264))
          {
            uint64_t v53 = sub_24A30(v1 + 408, v1 + 240, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String);
            if ((v53 & 1) != 0)
            {
              uint64_t v54 = *(void *)(v1 + 416);
              uint64_t v101 = *(void *)(v1 + 408);
              if (Parse.DirectInvocation.userData.getter(v53))
              {
                uint64_t v55 = sub_249AC();
                sub_24A48(v55, 0xE800000000000000LL, v56);
                sub_249D4();
                if (*(void *)(v1 + 296))
                {
                  uint64_t v57 = sub_24A30( v1 + 456,  v1 + 272,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Double);
                  if ((_DWORD)v57) {
                    uint64_t v58 = *(void *)(v1 + 456);
                  }
                  else {
                    uint64_t v58 = 0LL;
                  }
                  char v59 = v57 ^ 1;
LABEL_35:
                  uint64_t v106 = v25;
                  if (Parse.DirectInvocation.userData.getter(v57))
                  {
                    uint64_t v86 = sub_249AC();
                    sub_24A48(v86, 0xEC00000074696E55LL, v87);
                    sub_249D4();
                    if (*(void *)(v1 + 232))
                    {
                      int v88 = sub_24A30( v1 + 424,  v1 + 208,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String);
                      uint64_t v89 = *(void *)(v1 + 424);
                      if (v88)
                      {
                        uint64_t v90 = *(void *)(v1 + 432);
                      }

                      else
                      {
                        uint64_t v89 = 0LL;
                        uint64_t v90 = 0LL;
                      }

                      goto LABEL_42;
                    }
                  }

                  else
                  {
                    *(_OWORD *)(v1 + 208) = 0u;
                    *(_OWORD *)(v1 + 224) = 0u;
                  }

                  sub_24958(v1 + 208);
                  uint64_t v89 = 0LL;
                  uint64_t v90 = 0LL;
LABEL_42:
                  uint64_t v91 = v101;
                  uint64_t v103 = *(void *)(v1 + 528);
                  uint64_t v93 = *(void *)(v1 + 504);
                  uint64_t v92 = *(void *)(v1 + 512);
                  uint64_t v94 = *(void *)(v1 + 488);
                  *(void *)(v1 + 80) = v106;
                  *(void *)(v1 + 88) = v26;
                  *(void *)(v1 + 96) = v91;
                  *(void *)(v1 + 104) = v54;
                  *(void *)(v1 + 112) = v58;
                  *(_BYTE *)(v1 + 120) = v59;
                  *(void *)(v1 + 128) = v89;
                  *(void *)(v1 + 136) = v90;
                  uint64_t v95 = sub_494C(&qword_18AA70);
                  static DisambiguationResult.chosenItem(_:)(v1 + 80, v95);
                  swift_bridgeObjectRelease(v54);
                  sub_6D64();
                  sub_249D4();
                  sub_24A58(*(uint64_t (**)(uint64_t, uint64_t))(v94 + 8));
                  (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v103, v93);
                  goto LABEL_32;
                }
              }

              else
              {
                *(_OWORD *)(v1 + 272) = 0u;
                *(_OWORD *)(v1 + 288) = 0u;
              }

              uint64_t v57 = sub_24958(v1 + 272);
              uint64_t v58 = 0LL;
              char v59 = 1;
              goto LABEL_35;
            }

            sub_6D64();
            goto LABEL_29;
          }
        }

        else
        {
          *(_OWORD *)(v1 + 240) = 0u;
          *(_OWORD *)(v1 + 256) = 0u;
        }

        sub_6D64();
        sub_24958(v1 + 240);
LABEL_29:
        uint64_t v60 = *(os_log_s **)(v1 + 560);
        uint64_t v61 = sub_A5DC(v109, v1 + 384);
        uint64_t v69 = sub_249DC(v61, v62, v63, v64, v65, v66, v67, v68, v96, v99, (uint64_t)v17, v107);
        Logger.logObject.getter(v69);
        os_log_type_t v70 = sub_AB70();
        if (sub_A988(v70))
        {
          uint64_t v71 = (_WORD *)sub_232D0();
          *uint64_t v71 = 0;
          sub_249C8( &dword_0,  v60,  (os_log_type_t)v109,  "error in parseDisambiguationResponse for medication name; could not unpack directInvocation.");
          sub_5050((uint64_t)v71);
        }

        uint64_t v72 = *(void *)(v1 + 512);
        uint64_t v108 = *(void *)(v1 + 504);
        uint64_t v110 = *(void *)(v1 + 528);
        uint64_t v73 = *(void *)(v1 + 488);

        sub_24A38(v74, v75, v76, v77, v78, v79, v80, v81, v98, v102, v105);
        *(void *)(v1 + 16) = 0LL;
        *(void *)(v1 + 24) = 0LL;
        *(void *)(v1 + 32) = 0LL;
        *(void *)(v1 + 40) = 0xE000000000000000LL;
        *(void *)(v1 + 48) = 0LL;
        *(_BYTE *)(v1 + 56) = 1;
        *(void *)(v1 + 64) = 0LL;
        *(void *)(v1 + 72) = 0LL;
        uint64_t v82 = sub_494C(&qword_18AA70);
        static DisambiguationResult.chosenItem(_:)(v1 + 16, v82);
        sub_24A58(*(uint64_t (**)(uint64_t, uint64_t))(v73 + 8));
        (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v110, v108);
        goto LABEL_32;
      }
    }

    else
    {
      *(_OWORD *)(v1 + 304) = 0u;
      *(_OWORD *)(v1 + 320) = 0u;
    }

    uint64_t v24 = sub_24958(v1 + 304);
    uint64_t v25 = 0LL;
    uint64_t v26 = 0LL;
    goto LABEL_17;
  }

  id v27 = *(os_log_s **)(v1 + 552);
  uint64_t v28 = sub_A5DC(v109, v1 + 360);
  uint64_t v36 = sub_249DC(v28, v29, v30, v31, v32, v33, v34, v35, v96, v99, (uint64_t)v17, v107);
  Logger.logObject.getter(v36);
  os_log_type_t v37 = sub_AB70();
  if (sub_A988(v37))
  {
    uint64_t v38 = (_WORD *)sub_232D0();
    *uint64_t v38 = 0;
    sub_249C8(&dword_0, v27, (os_log_type_t)v109, "error in parsing disambiguation response for medication name.");
    sub_5050((uint64_t)v38);
  }

  uint64_t v39 = *(void *)(v1 + 528);
  uint64_t v40 = *(void *)(v1 + 520);
  uint64_t v41 = *(void *)(v1 + 504);
  uint64_t v42 = *(void *)(v1 + 512);

  sub_24A38(v43, v44, v45, v46, v47, v48, v49, v50, v97, v100, v104);
  *(void *)(v1 + 144) = 0LL;
  *(void *)(v1 + 152) = 0LL;
  *(void *)(v1 + 160) = 0LL;
  *(void *)(v1 + 168) = 0xE000000000000000LL;
  *(void *)(v1 + sub_20004(v6, v1 + 176) = 0LL;
  *(_BYTE *)(v1 + 184) = 1;
  *(void *)(v1 + 192) = 0LL;
  *(void *)(v1 + 200) = 0LL;
  uint64_t v51 = sub_494C(&qword_18AA70);
  static DisambiguationResult.chosenItem(_:)(v1 + 144, v51);
  uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
  v52(v39, v41);
  v52(v40, v41);
LABEL_32:
  uint64_t v83 = *(void *)(v1 + 560);
  uint64_t v84 = *(void *)(v1 + 496);
  swift_task_dealloc(*(void *)(v1 + 568));
  swift_task_dealloc(v83);
  sub_A67C();
  sub_A7C8();
  sub_A760();
  swift_task_dealloc(v84);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void *sub_245D8()
{
  return v0;
}

uint64_t sub_2460C()
{
  return swift_deallocClassInstance(v0, 281LL, 7LL);
}

uint64_t type metadata accessor for MedNameDisambiguationStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18WellnessFlowPlugin29MedNameDisambiguationStrategy);
}

uint64_t sub_2464C()
{
  return j___s11SiriKitFlow15PaginationStyleV02noD0ACyFZ();
}

uint64_t sub_24660()
{
  return sub_23918();
}

uint64_t sub_24674(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_18A8EC);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_24998;
  return sub_23F60(a1, a2);
}

uint64_t sub_246CC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_18A8E4);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_24998;
  return sub_23A18(a1, a2);
}

uint64_t sub_2472C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_log_type_t v8 = (void *)swift_task_alloc(async function pointer to PromptForDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for MedNameDisambiguationStrategy();
  *os_log_type_t v8 = v4;
  v8[1] = sub_24998;
  return PromptForDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:)(a1, a2, v9, a4);
}

uint64_t sub_247A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_log_type_t v8 = (void *)swift_task_alloc(async function pointer to PromptForDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for MedNameDisambiguationStrategy();
  *os_log_type_t v8 = v4;
  v8[1] = sub_24998;
  return PromptForDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:)(a1, a2, v9, a4);
}

uint64_t sub_24824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to PromptForDisambiguationFlowStrategyAsync.makeFlowCancelledResponse()[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_24890;
  return PromptForDisambiguationFlowStrategyAsync.makeFlowCancelledResponse()(a1, a2, a3);
}

uint64_t sub_24890()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_248D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to PromptForDisambiguationFlowStrategyAsync.makeErrorResponse(_:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_24998;
  return PromptForDisambiguationFlowStrategyAsync.makeErrorResponse(_:)(a1, a2, a3, a4);
}

uint64_t sub_24958(uint64_t a1)
{
  uint64_t v2 = sub_494C(&qword_18AA78);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_2499C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_249AC()
{
  return 0x6874676E65727473LL;
}

void sub_249C8(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_249D4()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_249DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(uint64_t, uint64_t, uint64_t))
{
  return a12(v13, v12, v14);
}

  ;
}

  ;
}

uint64_t sub_24A20()
{
  return swift_task_dealloc(*(void *)(v0 + 216));
}

uint64_t sub_24A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6LL);
}

uint64_t sub_24A38( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t, uint64_t))
{
  return a11(v11, v12);
}

double sub_24A48@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_12BE4C(a1, a2, v3, a3);
}

uint64_t sub_24A50@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_24A58@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

void OxygenSaturationQueryModel.appPunchout.getter(uint64_t a1@<X8>)
{
}

void OxygenSaturationQueryModel.appPunchout.setter(uint64_t a1)
{
}

uint64_t HeightQueryModel.height.getter()
{
  uint64_t v1 = sub_27A08();
  return sub_27A9C(v0 + *(int *)(v1 + 20));
}

uint64_t type metadata accessor for HeightQueryModel(uint64_t a1)
{
  uint64_t result = qword_18AB28;
  if (!qword_18AB28) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HeightQueryModel);
  }
  return result;
}

void HeightQueryModel.height.setter()
{
  uint64_t v0 = sub_27A08();
  sub_27A40(*(int *)(v0 + 20));
  sub_1EB0C();
}

uint64_t (*HeightQueryModel.height.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t HeightQueryModel.maxHeight.getter()
{
  uint64_t v1 = sub_27A08();
  return sub_27A9C(v0 + *(int *)(v1 + 24));
}

void HeightQueryModel.maxHeight.setter()
{
  uint64_t v0 = sub_27A08();
  sub_27A40(*(int *)(v0 + 24));
  sub_1EB0C();
}

uint64_t (*HeightQueryModel.maxHeight.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t HeightQueryModel.minHeight.getter()
{
  uint64_t v1 = sub_27A08();
  return sub_27A9C(v0 + *(int *)(v1 + 28));
}

void HeightQueryModel.minHeight.setter()
{
  uint64_t v0 = sub_27A08();
  sub_27A40(*(int *)(v0 + 28));
  sub_1EB0C();
}

uint64_t (*HeightQueryModel.minHeight.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void HeightQueryModel.dateLabel.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_27A08();
  sub_A44C(v1 + *(int *)(v3 + 32), a1, &qword_189D00);
  sub_A890();
}

void HeightQueryModel.dateLabel.setter(uint64_t a1)
{
  uint64_t v3 = sub_27A08();
  sub_24D88(a1, v1 + *(int *)(v3 + 32), &qword_189D00);
  sub_A890();
}

uint64_t (*HeightQueryModel.dateLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t HeightQueryModel.isDifferenceNegligible.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(sub_27A08() + 36));
}

void HeightQueryModel.isDifferenceNegligible.setter(char a1)
{
  *(_BYTE *)(v1 + *(int *)(sub_27A08() + 36)) = a1;
  sub_A890();
}

uint64_t (*HeightQueryModel.isDifferenceNegligible.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void HeightQueryModel.snippetHeaderModel.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_27A08();
  sub_A44C(v1 + *(int *)(v3 + 40), a1, &qword_18A1A8);
  sub_A890();
}

void HeightQueryModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v3 = sub_27A08();
  sub_24D88(a1, v1 + *(int *)(v3 + 40), &qword_18A1A8);
  sub_A890();
}

void sub_24D88(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_6DF0(a1, a2, a3);
  sub_6E0C(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 40LL));
  sub_A890();
}

uint64_t (*HeightQueryModel.snippetHeaderModel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void HeightQueryModel.minHeightSymbolic.getter()
{
  uint64_t v0 = sub_27A08();
  sub_27A30(*(int *)(v0 + 44));
  sub_A890();
}

void HeightQueryModel.minHeightSymbolic.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_27A08();
  sub_27AB4(*(int *)(v5 + 44));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*HeightQueryModel.minHeightSymbolic.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void HeightQueryModel.maxHeightSymbolic.getter()
{
  uint64_t v0 = sub_27A08();
  sub_27A30(*(int *)(v0 + 48));
  sub_A890();
}

void HeightQueryModel.maxHeightSymbolic.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_27A08();
  sub_27AB4(*(int *)(v5 + 48));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*HeightQueryModel.maxHeightSymbolic.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void HeightQueryModel.heightSymbolic.getter()
{
  uint64_t v0 = sub_27A08();
  sub_27A30(*(int *)(v0 + 52));
  sub_A890();
}

void HeightQueryModel.heightSymbolic.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_27A08();
  sub_27AB4(*(int *)(v5 + 52));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*HeightQueryModel.heightSymbolic.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t sub_24F4C@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  BOOL v54 = (a2 & 1) == 0;
  BOOL v55 = (a4 & 1) == 0;
  BOOL v59 = (a6 & 1) == 0;
  sub_494C(&qword_18A1A0);
  sub_6D20();
  __chkstk_darwin(v17);
  uint64_t v18 = sub_27A80();
  uint64_t v57 = type metadata accessor for AppPunchout(v18);
  sub_6D78(a9, v19, v20, v57);
  uint64_t v21 = (int *)sub_27A08();
  uint64_t v22 = a9 + v21[8];
  uint64_t v23 = type metadata accessor for SpeakableString(0LL);
  sub_6D78(v22, v24, v25, v23);
  uint64_t v26 = a9 + v21[10];
  uint64_t v53 = v26;
  uint64_t v27 = type metadata accessor for SnippetHeaderModel(0LL);
  sub_6D78(v26, v28, v29, v27);
  uint64_t v30 = (uint64_t *)(a9 + v21[11]);
  *uint64_t v30 = 0LL;
  v30[1] = 0LL;
  uint64_t v31 = (uint64_t *)(a9 + v21[12]);
  *uint64_t v31 = 0LL;
  v31[1] = 0LL;
  uint64_t v32 = (uint64_t *)(a9 + v21[13]);
  BOOL v33 = (a1 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v54 && v33) {
    uint64_t v34 = 0LL;
  }
  else {
    uint64_t v34 = a1;
  }
  char v35 = a2 | v33;
  *uint64_t v32 = 0LL;
  v32[1] = 0LL;
  uint64_t v36 = a9 + v21[5];
  *(void *)uint64_t v36 = v34;
  *(_BYTE *)(v36 + 8) = v35 & 1;
  uint64_t v37 = a3;
  if (v55 && (a3 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
    uint64_t v37 = 0LL;
  }
  uint64_t v38 = a9 + v21[6];
  *(void *)uint64_t v38 = v37;
  *(_BYTE *)(v38 + 8) = a4 & 1 | ((a3 & 0x7FFFFFFFFFFFFFFFLL) == 0);
  uint64_t v39 = a5;
  BOOL v40 = (a5 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v59 && v40) {
    uint64_t v39 = 0LL;
  }
  char v41 = a6 | v40;
  uint64_t v42 = a9 + v21[7];
  *(void *)uint64_t v42 = v39;
  *(_BYTE *)(v42 + 8) = v41 & 1;
  *(_BYTE *)(a9 + v21[9]) = a8;
  sub_279B4(a7, v22, &qword_189D00);
  sub_2521C(a11);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v12, 0LL, 1LL, v57);
  sub_24D88(v12, a9, &qword_18A1A0);
  sub_279B4(a12, v53, &qword_18A1A8);
  uint64_t v43 = sub_27B10(*(void *)v42, *(_BYTE *)(v42 + 8));
  uint64_t v45 = v44;
  swift_bridgeObjectRelease();
  *uint64_t v30 = v43;
  v30[1] = v45;
  uint64_t v46 = sub_27B10(*(void *)v38, *(_BYTE *)(v38 + 8));
  uint64_t v48 = v47;
  swift_bridgeObjectRelease();
  *uint64_t v31 = v46;
  v31[1] = v48;
  uint64_t v49 = sub_27B10(*(void *)v36, *(_BYTE *)(v36 + 8));
  uint64_t v51 = v50;
  sub_279E0(a12, &qword_18A1A8);
  sub_279E0(a11, &qword_189CF8);
  sub_279E0(a10, &qword_189D00);
  sub_279E0(a7, &qword_189D00);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v32 = v49;
  v32[1] = v51;
  return result;
}

uint64_t sub_2521C(uint64_t a1)
{
  uint64_t v2 = sub_494C(&qword_189CF8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_A44C(a1, (uint64_t)v4, &qword_189CF8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v4, 1LL, v5) == 1)
  {
    sub_279E0((uint64_t)v4, &qword_189CF8);
    return AppPunchout.init(punchOutUri:bundleId:appDisplayName:)(0xD00000000000001ELL);
  }

  else
  {
    uint64_t v10 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    uint64_t v11 = URL.absoluteString.getter(v10);
    AppPunchout.init(punchOutUri:bundleId:appDisplayName:)(v11);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

uint64_t sub_25378(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = sub_494C(&qword_189D00);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v28 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v27 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v27 - v12;
  uint64_t v14 = type metadata accessor for SpeakableString(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = 0LL;
  if ((a2 & 1) == 0)
  {
    sub_A44C(a3, (uint64_t)v13, &qword_189D00);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1LL, v14) == 1)
    {
      uint64_t v19 = (uint64_t)v13;
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
      uint64_t v20 = type metadata accessor for DialogPersonHeight.Builder(0LL);
      swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
      DialogPersonHeight.Builder.init()();
      dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)(a1, 0LL);
      swift_release();
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v11, v17, v14);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0LL, 1LL, v14);
      dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)(v11);
      swift_release();
      sub_279E0((uint64_t)v11, &qword_189D00);
      dispatch thunk of DialogAbstractMeasurement.Builder.build()(v21);
      uint64_t v22 = swift_release();
      uint64_t v23 = (uint64_t)v28;
      dispatch thunk of DialogPersonHeight.symbolic.getter(v22);
      uint64_t v24 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v23, 1LL, v14);
      if ((_DWORD)v24 != 1)
      {
        uint64_t v18 = SpeakableString.print.getter(v24);
        swift_release();
        uint64_t v25 = *(void (**)(char *, uint64_t))(v15 + 8);
        v25(v17, v14);
        v25((char *)v23, v14);
        return v18;
      }

      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      swift_release();
      uint64_t v19 = v23;
    }

    sub_279E0(v19, &qword_189D00);
    return 0LL;
  }

  return v18;
}

uint64_t sub_255FC(uint64_t a1, unint64_t a2)
{
  BOOL v3 = a1 == 0x68636E7550707061LL && a2 == 0xEB0000000074756FLL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x68636E7550707061LL, 0xEB0000000074756FLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  BOOL v6 = a1 == 0x746867696568LL && a2 == 0xE600000000000000LL;
  if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746867696568LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  BOOL v7 = a1 == 0x686769654878616DLL && a2 == 0xE900000000000074LL;
  if (v7
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x686769654878616DLL, 0xE900000000000074LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2LL;
  }

  BOOL v8 = a1 == 0x68676965486E696DLL && a2 == 0xE900000000000074LL;
  if (v8
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x68676965486E696DLL, 0xE900000000000074LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3LL;
  }

  BOOL v9 = a1 == 0x6562614C65746164LL && a2 == 0xE90000000000006CLL;
  if (v9
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6562614C65746164LL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 4LL;
  }

  if (a1 == 0xD000000000000016LL && a2 == 0x8000000000141610LL)
  {
    unint64_t v10 = 0x8000000000141610LL;
LABEL_36:
    swift_bridgeObjectRelease(v10);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x8000000000141610LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_36;
  }

  if (a1 == 0xD000000000000012LL && a2 == 0x8000000000141630LL)
  {
    unint64_t v11 = 0x8000000000141630LL;
LABEL_42:
    swift_bridgeObjectRelease(v11);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000000141630LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_42;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v12 = 0x8000000000141650LL;
    if (a2 == 0x8000000000141650LL) {
      goto LABEL_47;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000000141650LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_47:
    swift_bridgeObjectRelease(v12);
    return 7LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v13 = 0x8000000000141670LL;
    if (a2 == 0x8000000000141670LL) {
      goto LABEL_52;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000000141670LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
LABEL_52:
    swift_bridgeObjectRelease(v13);
    return 8LL;
  }

  if (a1 == 0x7953746867696568LL && a2 == 0xEE0063696C6F626DLL)
  {
    swift_bridgeObjectRelease(a2);
    return 9LL;
  }

  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7953746867696568LL, 0xEE0063696C6F626DLL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0) {
      return 9LL;
    }
    else {
      return 10LL;
    }
  }

uint64_t sub_259CC()
{
  return 10LL;
}

uint64_t sub_259D4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_25A10 + 4 * byte_1391D0[a1]))( 0xD000000000000016LL,  0x8000000000141610LL);
}

uint64_t sub_25A10()
{
  return 0x68636E7550707061LL;
}

uint64_t sub_25A30()
{
  return 0x746867696568LL;
}

uint64_t sub_25A44()
{
  return 0x686769654878616DLL;
}

uint64_t sub_25A6C()
{
  return 0x6562614C65746164LL;
}

uint64_t sub_25A8C()
{
  return v0 + 1;
}

unint64_t sub_25AA4()
{
  return 0xD000000000000011LL;
}

uint64_t sub_25ACC()
{
  return 0x7953746867696568LL;
}

uint64_t sub_25AF0()
{
  return sub_259D4(*v0);
}

uint64_t sub_25AF8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_255FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25B1C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_259CC();
  *a1 = result;
  return result;
}

uint64_t sub_25B40(uint64_t a1)
{
  unint64_t v2 = sub_25E44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_25B68(uint64_t a1)
{
  unint64_t v2 = sub_25E44();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t HeightQueryModel.encode(to:)(void *a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = sub_494C(&qword_18AA88);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_27AD8();
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_500C(a1, v8);
  unint64_t v10 = sub_25E44();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for HeightQueryModel.CodingKeys,  &type metadata for HeightQueryModel.CodingKeys,  v10,  v8,  v9);
  char v41 = 0;
  uint64_t v11 = type metadata accessor for AppPunchout(0LL);
  sub_A410( &qword_18AA98,  (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchout,  (uint64_t)&protocol conformance descriptor for AppPunchout);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v4, &v41, v6, v11);
  if (!v2)
  {
    Model = (int *)type metadata accessor for HeightQueryModel(0LL);
    uint64_t v13 = sub_27A9C(v4 + Model[5]);
    char v40 = 1;
    sub_27A20(v13, v14, (uint64_t)&v40);
    uint64_t v15 = sub_27A9C(v4 + Model[6]);
    char v39 = 2;
    sub_27A20(v15, v16, (uint64_t)&v39);
    uint64_t v17 = sub_27A9C(v4 + Model[7]);
    char v38 = 3;
    sub_27A20(v17, v18, (uint64_t)&v38);
    char v37 = 4;
    type metadata accessor for SpeakableString(0LL);
    sub_A410( &qword_18AAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
    sub_27A54(v19, (uint64_t)&v37);
    uint64_t v20 = *(unsigned __int8 *)(v4 + Model[9]);
    char v36 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v36, v6);
    char v35 = 6;
    type metadata accessor for SnippetHeaderModel(0LL);
    sub_A410( &qword_18AAA8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    sub_27A54(v21, (uint64_t)&v35);
    uint64_t v22 = (uint64_t *)(v4 + Model[11]);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    char v34 = 7;
    sub_27A10(v23, v24, (uint64_t)&v34);
    uint64_t v25 = (uint64_t *)(v4 + Model[12]);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    char v33 = 8;
    sub_27A10(v26, v27, (uint64_t)&v33);
    uint64_t v28 = (uint64_t *)(v4 + Model[13]);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    char v32 = 9;
    sub_27A10(v29, v30, (uint64_t)&v32);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
}

unint64_t sub_25E44()
{
  unint64_t result = qword_18AA90;
  if (!qword_18AA90)
  {
    unint64_t result = swift_getWitnessTable(&unk_1393B4, &type metadata for HeightQueryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18AA90);
  }

  return result;
}

void HeightQueryModel.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = v6;
  sub_494C(&qword_189D00);
  sub_6D20();
  __chkstk_darwin(v7);
  sub_6D30();
  uint64_t v41 = v8;
  sub_494C(&qword_18A1A0);
  sub_6D20();
  __chkstk_darwin(v9);
  sub_6D30();
  uint64_t v42 = v10;
  uint64_t v44 = sub_494C(&qword_18AAB0);
  uint64_t v43 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  sub_27AD8();
  Model = (int *)type metadata accessor for HeightQueryModel(0LL);
  sub_6D20();
  __chkstk_darwin(v12);
  uint64_t v13 = sub_27A80();
  uint64_t v40 = type metadata accessor for AppPunchout(v13);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, 1LL, 1LL, v40);
  uint64_t v14 = v3 + Model[5];
  *(void *)uint64_t v14 = 0LL;
  *(_BYTE *)(v14 + 8) = 1;
  uint64_t v15 = v3 + Model[6];
  *(void *)uint64_t v15 = 0LL;
  *(_BYTE *)(v15 + 8) = 1;
  uint64_t v16 = v3 + Model[7];
  *(void *)uint64_t v16 = 0LL;
  *(_BYTE *)(v16 + 8) = 1;
  uint64_t v50 = v3 + Model[8];
  uint64_t v39 = type metadata accessor for SpeakableString(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v50, 1LL, 1LL, v39);
  uint64_t v17 = v3 + Model[10];
  uint64_t v18 = type metadata accessor for SnippetHeaderModel(0LL);
  uint64_t v48 = v17;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v17, 1LL, 1LL, v18);
  uint64_t v19 = (uint64_t *)(v3 + Model[11]);
  uint64_t *v19 = 0LL;
  v19[1] = 0LL;
  uint64_t v49 = v19;
  uint64_t v20 = (uint64_t *)(v3 + Model[12]);
  *uint64_t v20 = 0LL;
  v20[1] = 0LL;
  uint64_t v51 = v20;
  uint64_t v52 = v3;
  uint64_t v21 = (uint64_t *)(v3 + Model[13]);
  *uint64_t v21 = 0LL;
  v21[1] = 0LL;
  uint64_t v45 = v21;
  uint64_t v46 = a1;
  uint64_t v22 = a1[3];
  uint64_t v23 = a1[4];
  sub_500C(a1, v22);
  unint64_t v24 = sub_25E44();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for HeightQueryModel.CodingKeys,  &type metadata for HeightQueryModel.CodingKeys,  v24,  v22,  v23);
  if (v47)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
    sub_279E0(v52, &qword_18A1A0);
    sub_279E0(v50, &qword_189D00);
    sub_279E0(v48, &qword_18A1A8);
    swift_bridgeObjectRelease(v49[1]);
    swift_bridgeObjectRelease(v51[1]);
    swift_bridgeObjectRelease(v45[1]);
  }

  else
  {
    char v62 = 0;
    sub_A410( &qword_18AAB8,  (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchout,  (uint64_t)&protocol conformance descriptor for AppPunchout);
    sub_27ACC(v40, (uint64_t)&v62, v44);
    sub_24D88(v42, v52, &qword_18A1A0);
    char v61 = 1;
    *(void *)uint64_t v14 = sub_27AA8((uint64_t)&v61);
    *(_BYTE *)(v14 + 8) = v25 & 1;
    char v60 = 2;
    *(void *)uint64_t v15 = sub_27AA8((uint64_t)&v60);
    *(_BYTE *)(v15 + 8) = v26 & 1;
    char v59 = 3;
    *(void *)uint64_t v16 = sub_27AA8((uint64_t)&v59);
    *(_BYTE *)(v16 + 8) = v27 & 1;
    char v58 = 4;
    sub_A410( &qword_18AAC0,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
    sub_27ACC(v39, (uint64_t)&v58, v44);
    sub_24D88(v41, v50, &qword_189D00);
    char v57 = 5;
    *(_BYTE *)(v52 + Model[9]) = KeyedDecodingContainer.decode(_:forKey:)(&v57, v44) & 1;
    char v56 = 6;
    sub_A410( &qword_18AAC8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    sub_27ACC(v18, (uint64_t)&v56, v44);
    sub_24D88(v38, v48, &qword_18A1A8);
    char v55 = 7;
    uint64_t v28 = sub_27AC0((uint64_t)&v55);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease(v49[1]);
    *uint64_t v49 = v28;
    v49[1] = v30;
    char v54 = 8;
    uint64_t v31 = sub_27AC0((uint64_t)&v54);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease(v51[1]);
    *uint64_t v51 = v31;
    v51[1] = v33;
    char v53 = 9;
    uint64_t v34 = sub_27AC0((uint64_t)&v53);
    uint64_t v36 = v35;
    sub_27B18(v2, *(uint64_t (**)(uint64_t, void))(v43 + 8));
    swift_bridgeObjectRelease(v45[1]);
    *uint64_t v45 = v34;
    v45[1] = v36;
    sub_263F4(v52, a2);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v46);
    sub_26F04(v52, type metadata accessor for HeightQueryModel);
  }

uint64_t sub_263F4(uint64_t a1, uint64_t a2)
{
  uint64_t Model = type metadata accessor for HeightQueryModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Model - 8) + 16LL))(a2, a1, Model);
  return a2;
}

void sub_26438()
{
}

void sub_26464()
{
}

void sub_26490(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_264A4(void *a1)
{
  return HeightQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for HeightQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for AppPunchout(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_18A1A0);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = (char *)a1 + v10;
    uint64_t v13 = (char *)a2 + v10;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = (char *)a1 + v11;
    uint64_t v15 = (char *)a2 + v11;
    *(void *)uint64_t v14 = *(void *)v15;
    v14[8] = v15[8];
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (char *)a1 + v16;
    uint64_t v19 = (char *)a2 + v16;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = (char *)a1 + v17;
    uint64_t v21 = (char *)a2 + v17;
    uint64_t v22 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v21, 1LL, v22))
    {
      uint64_t v23 = sub_494C(&qword_189D00);
      memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16LL))(v20, v21, v22);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 0LL, 1LL, v22);
    }

    uint64_t v24 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    char v25 = (char *)a1 + v24;
    char v26 = (char *)a2 + v24;
    uint64_t v27 = type metadata accessor for SnippetHeaderModel(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v26, 1LL, v27))
    {
      uint64_t v28 = sub_494C(&qword_18A1A8);
      memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16LL))(v25, v26, v22);
      uint64_t v29 = *(int *)(v27 + 20);
      uint64_t v30 = &v25[v29];
      uint64_t v31 = &v26[v29];
      uint64_t v32 = *((void *)v31 + 1);
      *(void *)uint64_t v30 = *(void *)v31;
      *((void *)v30 + 1) = v32;
      uint64_t v33 = *(int *)(v27 + 24);
      uint64_t v34 = &v25[v33];
      uint64_t v35 = &v26[v33];
      uint64_t v36 = *((void *)v35 + 1);
      *(void *)uint64_t v34 = *(void *)v35;
      *((void *)v34 + 1) = v36;
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v36);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v25, 0LL, 1LL, v27);
    }

    uint64_t v37 = a3[11];
    uint64_t v38 = a3[12];
    uint64_t v39 = (uint64_t *)((char *)a1 + v37);
    uint64_t v40 = (uint64_t *)((char *)a2 + v37);
    uint64_t v41 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v41;
    uint64_t v42 = (uint64_t *)((char *)a1 + v38);
    uint64_t v43 = (uint64_t *)((char *)a2 + v38);
    uint64_t v44 = v43[1];
    *uint64_t v42 = *v43;
    v42[1] = v44;
    uint64_t v45 = a3[13];
    uint64_t v46 = (uint64_t *)((char *)a1 + v45);
    uint64_t v47 = (uint64_t *)((char *)a2 + v45);
    uint64_t v48 = v47[1];
    *uint64_t v46 = *v47;
    v46[1] = v48;
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v48);
  }

  return a1;
}

uint64_t destroy for HeightQueryModel(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout(0LL);
  uint64_t v5 = a1 + a2[8];
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  uint64_t v7 = a1 + a2[10];
  uint64_t v8 = type metadata accessor for SnippetHeaderModel(0LL);
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1LL, v8))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v7, v6);
    swift_bridgeObjectRelease(*(void *)(v7 + *(int *)(v8 + 20) + 8));
    swift_bridgeObjectRelease(*(void *)(v7 + *(int *)(v8 + 24) + 8));
  }

  swift_bridgeObjectRelease(*(void *)(a1 + a2[11] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[12] + 8));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[13] + 8));
}

char *initializeWithCopy for HeightQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  uint64_t v20 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v19, 1LL, v20))
  {
    uint64_t v21 = sub_494C(&qword_189D00);
    memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16LL))(v18, v19, v20);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v18, 0LL, 1LL, v20);
  }

  uint64_t v22 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = type metadata accessor for SnippetHeaderModel(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1LL, v25))
  {
    uint64_t v26 = sub_494C(&qword_18A1A8);
    memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16LL))(v23, v24, v20);
    uint64_t v27 = *(int *)(v25 + 20);
    uint64_t v28 = &v23[v27];
    uint64_t v29 = &v24[v27];
    uint64_t v30 = *((void *)v29 + 1);
    *(void *)uint64_t v28 = *(void *)v29;
    *((void *)v28 + 1) = v30;
    uint64_t v31 = *(int *)(v25 + 24);
    uint64_t v32 = &v23[v31];
    uint64_t v33 = &v24[v31];
    uint64_t v34 = *((void *)v33 + 1);
    *(void *)uint64_t v32 = *(void *)v33;
    *((void *)v32 + 1) = v34;
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v34);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0LL, 1LL, v25);
  }

  uint64_t v35 = a3[11];
  uint64_t v36 = a3[12];
  uint64_t v37 = &a1[v35];
  uint64_t v38 = &a2[v35];
  uint64_t v39 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + 1) = v39;
  uint64_t v40 = &a1[v36];
  uint64_t v41 = &a2[v36];
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = *(void *)v41;
  *((void *)v40 + 1) = v42;
  uint64_t v43 = a3[13];
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &a2[v43];
  uint64_t v46 = *((void *)v45 + 1);
  *(void *)uint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = v46;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v46);
  return a1;
}

char *assignWithCopy for HeightQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  v12[8] = v13[8];
  *(void *)uint64_t v12 = v14;
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[7];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)uint64_t v20 = v22;
  uint64_t v23 = a3[8];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = type metadata accessor for SpeakableString(0LL);
  int v27 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1LL, v26);
  int v28 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1LL, v26);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16LL))(v24, v25, v26);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0LL, 1LL, v26);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v29 = *(void *)(v26 - 8);
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v24, v26);
LABEL_12:
    uint64_t v30 = sub_494C(&qword_189D00);
    memcpy(v24, v25, *(void *)(*(void *)(v30 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v24, v25, v26);
LABEL_13:
  a1[a3[9]] = a2[a3[9]];
  uint64_t v31 = a3[10];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v34 = type metadata accessor for SnippetHeaderModel(0LL);
  int v35 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1LL, v34);
  int v36 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v33, 1LL, v34);
  if (!v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 24LL))(v32, v33, v26);
      uint64_t v62 = *(int *)(v34 + 20);
      uint64_t v63 = &v32[v62];
      uint64_t v64 = &v33[v62];
      *(void *)uint64_t v63 = *(void *)v64;
      uint64_t v65 = *((void *)v64 + 1);
      uint64_t v66 = *((void *)v63 + 1);
      *((void *)v63 + 1) = v65;
      swift_bridgeObjectRetain(v65);
      swift_bridgeObjectRelease(v66);
      uint64_t v67 = *(int *)(v34 + 24);
      uint64_t v68 = &v32[v67];
      uint64_t v69 = &v33[v67];
      *(void *)uint64_t v68 = *(void *)v69;
      uint64_t v70 = *((void *)v69 + 1);
      uint64_t v71 = *((void *)v68 + 1);
      *((void *)v68 + 1) = v70;
      swift_bridgeObjectRetain(v70);
      swift_bridgeObjectRelease(v71);
      goto LABEL_19;
    }

    sub_26F04((uint64_t)v32, type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }

  if (v36)
  {
LABEL_18:
    uint64_t v45 = sub_494C(&qword_18A1A8);
    memcpy(v32, v33, *(void *)(*(void *)(v45 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16LL))(v32, v33, v26);
  uint64_t v37 = *(int *)(v34 + 20);
  uint64_t v38 = &v32[v37];
  uint64_t v39 = &v33[v37];
  *(void *)uint64_t v38 = *(void *)v39;
  uint64_t v40 = *((void *)v39 + 1);
  *((void *)v38 + 1) = v40;
  uint64_t v41 = *(int *)(v34 + 24);
  uint64_t v42 = &v32[v41];
  uint64_t v43 = &v33[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  uint64_t v44 = *((void *)v43 + 1);
  *((void *)v42 + 1) = v44;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v44);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v32, 0LL, 1LL, v34);
LABEL_19:
  uint64_t v46 = a3[11];
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  *(void *)uint64_t v47 = *(void *)v48;
  uint64_t v49 = *((void *)v48 + 1);
  uint64_t v50 = *((void *)v47 + 1);
  *((void *)v47 + 1) = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  uint64_t v51 = a3[12];
  uint64_t v52 = &a1[v51];
  char v53 = &a2[v51];
  *(void *)uint64_t v52 = *(void *)v53;
  uint64_t v54 = *((void *)v53 + 1);
  uint64_t v55 = *((void *)v52 + 1);
  *((void *)v52 + 1) = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
  uint64_t v56 = a3[13];
  char v57 = &a1[v56];
  char v58 = &a2[v56];
  *(void *)char v57 = *(void *)v58;
  uint64_t v59 = *((void *)v58 + 1);
  uint64_t v60 = *((void *)v57 + 1);
  *((void *)v57 + 1) = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease(v60);
  return a1;
}

void sub_26F04(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0LL);
  sub_27A6C(v2);
  sub_A890();
}

char *initializeWithTake for HeightQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  uint64_t v20 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v19, 1LL, v20))
  {
    uint64_t v21 = sub_494C(&qword_189D00);
    memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32LL))(v18, v19, v20);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v18, 0LL, 1LL, v20);
  }

  uint64_t v22 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = type metadata accessor for SnippetHeaderModel(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1LL, v25))
  {
    uint64_t v26 = sub_494C(&qword_18A1A8);
    memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32LL))(v23, v24, v20);
    *(_OWORD *)&v23[*(int *)(v25 + 20)] = *(_OWORD *)&v24[*(int *)(v25 + 20)];
    *(_OWORD *)&v23[*(int *)(v25 + 24)] = *(_OWORD *)&v24[*(int *)(v25 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0LL, 1LL, v25);
  }

  uint64_t v27 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v27] = *(_OWORD *)&a2[v27];
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  return a1;
}

char *assignWithTake for HeightQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = &a1[v12];
  uint64_t v16 = &a2[v12];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = a3[7];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v17];
  uint64_t v20 = &a2[v17];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = &a1[v18];
  uint64_t v22 = &a2[v18];
  uint64_t v23 = type metadata accessor for SpeakableString(0LL);
  int v24 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v21, 1LL, v23);
  int v25 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1LL, v23);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32LL))(v21, v22, v23);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0LL, 1LL, v23);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v26 = *(void *)(v23 - 8);
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v21, v23);
LABEL_12:
    uint64_t v27 = sub_494C(&qword_189D00);
    memcpy(v21, v22, *(void *)(*(void *)(v27 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v21, v22, v23);
LABEL_13:
  uint64_t v28 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v31 = type metadata accessor for SnippetHeaderModel(0LL);
  int v32 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v29, 1LL, v31);
  int v33 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v30, 1LL, v31);
  if (!v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 40LL))(v29, v30, v23);
      uint64_t v54 = *(int *)(v31 + 20);
      uint64_t v55 = &v29[v54];
      uint64_t v56 = &v30[v54];
      uint64_t v58 = *(void *)v56;
      uint64_t v57 = *((void *)v56 + 1);
      uint64_t v59 = *((void *)v55 + 1);
      *(void *)uint64_t v55 = v58;
      *((void *)v55 + 1) = v57;
      swift_bridgeObjectRelease(v59);
      uint64_t v60 = *(int *)(v31 + 24);
      char v61 = &v29[v60];
      uint64_t v62 = &v30[v60];
      uint64_t v64 = *(void *)v62;
      uint64_t v63 = *((void *)v62 + 1);
      uint64_t v65 = *((void *)v61 + 1);
      *(void *)char v61 = v64;
      *((void *)v61 + 1) = v63;
      swift_bridgeObjectRelease(v65);
      goto LABEL_19;
    }

    sub_26F04((uint64_t)v29, type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }

  if (v33)
  {
LABEL_18:
    uint64_t v34 = sub_494C(&qword_18A1A8);
    memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32LL))(v29, v30, v23);
  *(_OWORD *)&v29[*(int *)(v31 + 20)] = *(_OWORD *)&v30[*(int *)(v31 + 20)];
  *(_OWORD *)&v29[*(int *)(v31 + 24)] = *(_OWORD *)&v30[*(int *)(v31 + 24)];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v29, 0LL, 1LL, v31);
LABEL_19:
  uint64_t v35 = a3[11];
  int v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  uint64_t v39 = *(void *)v37;
  uint64_t v38 = *((void *)v37 + 1);
  uint64_t v40 = *((void *)v36 + 1);
  *(void *)int v36 = v39;
  *((void *)v36 + 1) = v38;
  swift_bridgeObjectRelease(v40);
  uint64_t v41 = a3[12];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  uint64_t v45 = *(void *)v43;
  uint64_t v44 = *((void *)v43 + 1);
  uint64_t v46 = *((void *)v42 + 1);
  *(void *)uint64_t v42 = v45;
  *((void *)v42 + 1) = v44;
  swift_bridgeObjectRelease(v46);
  uint64_t v47 = a3[13];
  uint64_t v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  uint64_t v51 = *(void *)v49;
  uint64_t v50 = *((void *)v49 + 1);
  uint64_t v52 = *((void *)v48 + 1);
  *(void *)uint64_t v48 = v51;
  *((void *)v48 + 1) = v50;
  swift_bridgeObjectRelease(v52);
  return a1;
}

uint64_t getEnumTagSinglePayload for HeightQueryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_274E4);
}

uint64_t sub_274E4(uint64_t a1, uint64_t a2, int *a3)
{
  if (v9)
  {
    uint64_t v7 = v6;
    uint64_t v8 = a1;
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, a2, v7);
  }

  sub_494C(&qword_189D00);
  sub_27AF0();
  if (v9)
  {
    uint64_t v7 = v10;
    uint64_t v11 = a3[8];
LABEL_10:
    uint64_t v8 = a1 + v11;
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, a2, v7);
  }

  sub_494C(&qword_18A1A8);
  sub_27AF0();
  if (v12)
  {
    uint64_t v7 = v13;
    uint64_t v11 = a3[10];
    goto LABEL_10;
  }

  unint64_t v15 = *(void *)(a1 + a3[11] + 8);
  if (v15 >= 0xFFFFFFFF) {
    LODWORD(v15) = -1;
  }
  int v16 = v15 - 1;
  if (v16 < 0) {
    int v16 = -1;
  }
  return (v16 + 1);
}

uint64_t storeEnumTagSinglePayload for HeightQueryModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_275B8);
}

void sub_275B8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (v10)
  {
    uint64_t v8 = v7;
    uint64_t v9 = a1;
  }

  else
  {
    sub_494C(&qword_189D00);
    sub_27B00();
    if (v10)
    {
      uint64_t v8 = v11;
      uint64_t v12 = a4[8];
    }

    else
    {
      sub_494C(&qword_18A1A8);
      sub_27B00();
      if (!v13)
      {
        *(void *)(a1 + a4[11] + 8) = a2;
        sub_1EB0C();
        return;
      }

      uint64_t v8 = v14;
      uint64_t v12 = a4[10];
    }

    uint64_t v9 = a1 + v12;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v9, a2, a2, v8);
}

void sub_27668(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    v8[1] = "\t";
    v8[2] = "\t";
    v8[3] = "\t";
    sub_27758( 319LL,  (unint64_t *)&qword_18AB40,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString);
    if (v5 <= 0x3F)
    {
      v8[4] = *(void *)(v4 - 8) + 64LL;
      v8[5] = &unk_1392C0;
      sub_27758(319LL, (unint64_t *)&qword_18AB48, type metadata accessor for SnippetHeaderModel);
      if (v7 <= 0x3F)
      {
        v8[6] = *(void *)(v6 - 8) + 64LL;
        v8[7] = &unk_1392D8;
        v8[8] = &unk_1392D8;
        v8[9] = &unk_1392D8;
        swift_initStructMetadata(a1, 256LL, 10LL, v8, a1 + 16);
      }
    }
  }

void sub_27758(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

  sub_A890();
}

uint64_t getEnumTagSinglePayload for HeightQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for HeightQueryModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF6) {
    return ((uint64_t (*)(void))((char *)&loc_27874 + 4 * byte_1391DF[v4]))();
  }
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_278A8 + 4 * byte_1391DA[v4]))();
}

uint64_t sub_278A8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_278B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x278B8LL);
  }
  return result;
}

uint64_t sub_278C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x278CCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 9;
  return result;
}

uint64_t sub_278D0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_278D8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HeightQueryModel.CodingKeys()
{
  return &type metadata for HeightQueryModel.CodingKeys;
}

unint64_t sub_278F8()
{
  unint64_t result = qword_18AB98;
  if (!qword_18AB98)
  {
    unint64_t result = swift_getWitnessTable(&unk_13938C, &type metadata for HeightQueryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18AB98);
  }

  return result;
}

unint64_t sub_27938()
{
  unint64_t result = qword_18ABA0;
  if (!qword_18ABA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1392FC, &type metadata for HeightQueryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18ABA0);
  }

  return result;
}

unint64_t sub_27978()
{
  unint64_t result = qword_18ABA8;
  if (!qword_18ABA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_139324, &type metadata for HeightQueryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18ABA8);
  }

  return result;
}

void sub_279B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_6DF0(a1, a2, a3);
  sub_6E0C(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 24LL));
  sub_A890();
}

void sub_279E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_494C(a2);
  sub_27A6C(v2);
  sub_A890();
}

uint64_t sub_27A08()
{
  return type metadata accessor for HeightQueryModel(0LL);
}

uint64_t sub_27A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_27A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_27A30@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRetain(*(void *)(v1 + a1 + 8));
}

void sub_27A40(uint64_t a1@<X8>)
{
  uint64_t v4 = v2 + a1;
  *(void *)uint64_t v4 = v3;
  *(_BYTE *)(v4 + 8) = v1 & 1;
}

uint64_t sub_27A54(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, a2, v2, v4);
}

uint64_t sub_27A6C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_27A80()
{
  return 0LL;
}

uint64_t sub_27A9C@<X0>(uint64_t a1@<X8>)
{
  return *(void *)a1;
}

uint64_t sub_27AA8(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, *(void *)(v1 - 160));
}

uint64_t sub_27AB4@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(v1 + a1 + 8));
}

uint64_t sub_27AC0(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, *(void *)(v1 - 160));
}

uint64_t sub_27ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a1);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_27B10(uint64_t a1, char a2)
{
  return sub_25378(a1, a2, v2);
}

uint64_t sub_27B18@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void)@<X8>)
{
  return a2(a1, *(void *)(v2 - 160));
}

uint64_t sub_27B20()
{
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v1 - 168), *(void *)(v1 - 160));
}

uint64_t getEnumTagSinglePayload for HealthKitIdentifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0x34)
  {
    if (a2 + 204 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 204) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 205;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for HealthKitIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 204 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 204) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0x34) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0x33) {
    return ((uint64_t (*)(void))((char *)&loc_27C00 + 4 * byte_139415[v4]))();
  }
  *a1 = a2 - 52;
  return ((uint64_t (*)(void))((char *)sub_27C34 + 4 * byte_139410[v4]))();
}

uint64_t sub_27C34(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_27C3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x27C44LL);
  }
  return result;
}

uint64_t sub_27C50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x27C58LL);
  }
  *(_BYTE *)unint64_t result = a2 - 52;
  return result;
}

uint64_t sub_27C5C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_27C64(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HealthKitIdentifier()
{
  return &type metadata for HealthKitIdentifier;
}

unint64_t sub_27C84()
{
  unint64_t result = qword_18ABB0;
  if (!qword_18ABB0)
  {
    uint64_t v1 = sub_B64C(&qword_18ABB8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_18ABB0);
  }

  return result;
}

uint64_t sub_27CC8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_27D04 + 4 * word_13941A[a1]))( 0xD00000000000001FLL,  0x80000000001416B0LL);
}

unint64_t sub_27D04()
{
  return 0xD000000000000027LL;
}

uint64_t sub_28870()
{
  return v0 - 9;
}

uint64_t sub_28880()
{
  return v0 + 3;
}

uint64_t sub_28890()
{
  return v0 + 11;
}

uint64_t sub_288A0()
{
  return v0 + 15;
}

uint64_t sub_288B0()
{
  return v0 + 8;
}

uint64_t sub_288C0()
{
  return v0 - 3;
}

uint64_t sub_288D0()
{
  return v0 + 2;
}

uint64_t sub_288E0()
{
  return v0 - 16;
}

uint64_t sub_288F0()
{
  return v0 - 5;
}

uint64_t sub_28900()
{
  return v0 - 16;
}

uint64_t sub_28910()
{
  return 0x73676E69524B48LL;
}

uint64_t sub_28928()
{
  return v0 - 3;
}

uint64_t sub_28938()
{
  return v0 - 3;
}

uint64_t sub_28948()
{
  return v0 - 6;
}

uint64_t sub_28958()
{
  return v0 + 23;
}

void sub_28968()
{
}

void sub_28980(uint64_t a1)
{
}

void sub_2898C(uint64_t a1)
{
}

void sub_28998(uint64_t a1)
{
  char v1 = a1;
  sub_23368(a1);
  sub_12BCF4((uint64_t)v2, v1);
  sub_2A17C();
  sub_1C730();
}

void sub_289C8(uint64_t a1)
{
}

void sub_289D4(uint64_t a1)
{
  unsigned __int16 v1 = a1;
  sub_23368(a1);
  uint64_t v2 = sub_10F1C0(v1);
  sub_2A164(v2, v3, v4);
  sub_2A184();
  sub_2A17C();
  sub_1C730();
}

void sub_28A08(uint64_t a1)
{
}

void sub_28A14(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = a2(a1);
  sub_2A164(v4, v5, v6);
  sub_2A184();
  sub_2A17C();
  sub_1C730();
}

uint64_t sub_28A4C(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_494C(&qword_18ABC8);
  uint64_t v5 = swift_allocObject(v4, 4952LL, 7LL);
  uint64_t v6 = sub_58F80(v5, 205LL);
  *(void *)uint64_t v7 = "HKActivitySummaryTypeIdentifier";
  *(void *)(v7 + 8) = 31LL;
  *(_BYTE *)(v7 + 16) = 2;
  *(void *)(v7 + 24) = "HKCategoryTypeIdentifierAbdominalCramps";
  *(void *)(v7 + 3sub_D878(v0 + 2) = 39LL;
  *(_BYTE *)(v7 + 40) = 2;
  *(void *)(v7 + 48) = "HKCategoryTypeIdentifierAcne";
  *(void *)(v7 + 56) = 28LL;
  *(_BYTE *)(v7 + 64) = 2;
  *(void *)(v7 + 7sub_D878(v0 + 2) = "HKCategoryTypeIdentifierAppetiteChanges";
  *(void *)(v7 + 80) = 39LL;
  *(_BYTE *)(v7 + 88) = 2;
  *(void *)(v7 + 96) = "HKCategoryTypeIdentifierAppleStandHour";
  *(void *)(v7 + 104) = 38LL;
  *(_BYTE *)(v7 + 11sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 120) = "HKCategoryTypeIdentifierAppleWalkingSteadinessEvent";
  *(void *)(v7 + 128) = 51LL;
  *(_BYTE *)(v7 + 136) = 2;
  *(void *)(v7 + 144) = "HKCategoryTypeIdentifierAudioExposureEvent";
  *(void *)(v7 + 15sub_D878(v0 + 2) = 42LL;
  *(_BYTE *)(v7 + 160) = 2;
  *(void *)(v7 + 168) = "HKCategoryTypeIdentifierBladderIncontinence";
  *(void *)(v7 + sub_20004(v6, v1 + 176) = 43LL;
  *(_BYTE *)(v7 + 184) = 2;
  *(void *)(v7 + 19sub_D878(v0 + 2) = "HKCategoryTypeIdentifierBloating";
  *(void *)(v7 + 200) = 32LL;
  *(_BYTE *)(v7 + 208) = 2;
  *(void *)(v7 + sub_20004(v5, v1 + 216) = "HKCategoryTypeIdentifierBreastPain";
  *(void *)(v7 + 224) = 34LL;
  *(_BYTE *)(v7 + 23sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 240) = "HKCategoryTypeIdentifierCervicalMucusQuality";
  *(void *)(v7 + 248) = 44LL;
  *(_BYTE *)(v7 + 256) = 2;
  *(void *)(v7 + 264) = "HKCategoryTypeIdentifierChestTightnessOrPain";
  *(void *)(v7 + 27sub_D878(v0 + 2) = 44LL;
  *(_BYTE *)(v7 + 280) = 2;
  *(void *)(v7 + 288) = "HKCategoryTypeIdentifierChills";
  *(void *)(v7 + 296) = 30LL;
  *(_BYTE *)(v7 + 304) = 2;
  *(void *)(v7 + 31sub_D878(v0 + 2) = "HKCategoryTypeIdentifierConstipation";
  *(void *)(v7 + 320) = 36LL;
  *(_BYTE *)(v7 + 328) = 2;
  *(void *)(v7 + 336) = "HKCategoryTypeIdentifierContraceptive";
  *(void *)(v7 + 344) = 37LL;
  *(_BYTE *)(v7 + 35sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 360) = "HKCategoryTypeIdentifierCoughing";
  *(void *)(v7 + 368) = 32LL;
  *(_BYTE *)(v7 + 376) = 2;
  *(void *)(v7 + 384) = "HKCategoryTypeIdentifierDiarrhea";
  *(void *)(v7 + 39sub_D878(v0 + 2) = 32LL;
  *(_BYTE *)(v7 + 400) = 2;
  *(void *)(v7 + 408) = "HKCategoryTypeIdentifierDizziness";
  *(void *)(v7 + 416) = 33LL;
  *(_BYTE *)(v7 + 424) = 2;
  *(void *)(v7 + 43sub_D878(v0 + 2) = "HKCategoryTypeIdentifierDrySkin";
  *(void *)(v7 + 440) = 31LL;
  *(_BYTE *)(v7 + 448) = 2;
  *(void *)(v7 + 456) = "HKCategoryTypeIdentifierEnvironmentalAudioExposureEvent";
  *(void *)(v7 + 464) = 55LL;
  *(_BYTE *)(v7 + 47sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 480) = "HKCategoryTypeIdentifierFainting";
  *(void *)(v7 + 488) = 32LL;
  *(_BYTE *)(v7 + 496) = 2;
  *(void *)(v7 + 504) = "HKCategoryTypeIdentifierFatigue";
  *(void *)(v7 + 51sub_D878(v0 + 2) = 31LL;
  *(_BYTE *)(v7 + 520) = 2;
  *(void *)(v7 + 528) = "HKCategoryTypeIdentifierFever";
  *(void *)(v7 + 536) = 29LL;
  *(_BYTE *)(v7 + 544) = 2;
  *(void *)(v7 + 55sub_D878(v0 + 2) = "HKCategoryTypeIdentifierGeneralizedBodyAche";
  *(void *)(v7 + 560) = 43LL;
  *(_BYTE *)(v7 + 568) = 2;
  *(void *)(v7 + 576) = "HKCategoryTypeIdentifierHairLoss";
  *(void *)(v7 + 584) = 32LL;
  *(_BYTE *)(v7 + 59sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 600) = "HKCategoryTypeIdentifierHandwashingEvent";
  *(void *)(v7 + 608) = 40LL;
  *(_BYTE *)(v7 + 616) = 2;
  *(void *)(v7 + 624) = "HKCategoryTypeIdentifierHeadache";
  *(void *)(v7 + 63sub_D878(v0 + 2) = 32LL;
  *(_BYTE *)(v7 + 640) = 2;
  *(void *)(v7 + 648) = "HKCategoryTypeIdentifierHeadphoneAudioExposureEvent";
  *(void *)(v7 + 656) = 51LL;
  *(_BYTE *)(v7 + 664) = 2;
  *(void *)(v7 + 67sub_D878(v0 + 2) = "HKCategoryTypeIdentifierHeartburn";
  *(void *)(v7 + 680) = 33LL;
  *(_BYTE *)(v7 + 688) = 2;
  *(void *)(v7 + 696) = "HKCategoryTypeIdentifierHighHeartRateEvent";
  *(void *)(v7 + 704) = 42LL;
  *(_BYTE *)(v7 + 71sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 720) = "HKCategoryTypeIdentifierHotFlashes";
  *(void *)(v7 + 728) = 34LL;
  *(_BYTE *)(v7 + 736) = 2;
  *(void *)(v7 + 744) = "HKCategoryTypeIdentifierInfrequentMenstrualCycles";
  *(void *)(v7 + 75sub_D878(v0 + 2) = 49LL;
  *(_BYTE *)(v7 + 760) = 2;
  *(void *)(v7 + 768) = "HKCategoryTypeIdentifierIntermenstrualBleeding";
  *(void *)(v7 + 776) = 46LL;
  *(_BYTE *)(v7 + 784) = 2;
  *(void *)(v7 + 79sub_D878(v0 + 2) = "HKCategoryTypeIdentifierIrregularHeartRhythmEvent";
  *(void *)(v7 + 800) = 49LL;
  *(_BYTE *)(v7 + 808) = 2;
  *(void *)(v7 + 816) = "HKCategoryTypeIdentifierIrregularMenstrualCycles";
  *(void *)(v7 + 824) = 48LL;
  *(_BYTE *)(v7 + 83sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 840) = "HKCategoryTypeIdentifierLactation";
  *(void *)(v7 + 848) = 33LL;
  *(_BYTE *)(v7 + 856) = 2;
  *(void *)(v7 + 864) = "HKCategoryTypeIdentifierLossOfSmell";
  *(void *)(v7 + 87sub_D878(v0 + 2) = 35LL;
  *(_BYTE *)(v7 + 880) = 2;
  *(void *)(v7 + 888) = "HKCategoryTypeIdentifierLossOfTaste";
  *(void *)(v7 + 896) = 35LL;
  *(_BYTE *)(v7 + 904) = 2;
  *(void *)(v7 + 91sub_D878(v0 + 2) = "HKCategoryTypeIdentifierLowCardioFitnessEvent";
  *(void *)(v7 + 920) = 45LL;
  *(_BYTE *)(v7 + 928) = 2;
  *(void *)(v7 + 936) = "HKCategoryTypeIdentifierLowHeartRateEvent";
  *(void *)(v7 + 944) = 41LL;
  *(_BYTE *)(v7 + 95sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 960) = "HKCategoryTypeIdentifierLowerBackPain";
  *(void *)(v7 + 968) = 37LL;
  *(_BYTE *)(v7 + 976) = 2;
  *(void *)(v7 + 984) = "HKCategoryTypeIdentifierMemoryLapse";
  *(void *)(v7 + 99sub_D878(v0 + 2) = 35LL;
  *(_BYTE *)(v7 + 1000) = 2;
  *(void *)(v7 + 1008) = "HKCategoryTypeIdentifierMenstrualFlow";
  *(void *)(v7 + 1016) = 37LL;
  *(_BYTE *)(v7 + 1024) = 2;
  *(void *)(v7 + 103sub_D878(v0 + 2) = "HKCategoryTypeIdentifierMindfulSession";
  *(void *)(v7 + 1040) = 38LL;
  *(_BYTE *)(v7 + 1048) = 2;
  *(void *)(v7 + 1056) = "HKCategoryTypeIdentifierMoodChanges";
  *(void *)(v7 + 1064) = 35LL;
  *(_BYTE *)(v7 + 107sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 1080) = "HKCategoryTypeIdentifierNausea";
  *(void *)(v7 + 1088) = 30LL;
  *(_BYTE *)(v7 + 1096) = 2;
  *(void *)(v7 + 1104) = "HKCategoryTypeIdentifierNightSweats";
  *(void *)(v7 + 111sub_D878(v0 + 2) = 35LL;
  *(_BYTE *)(v7 + 1120) = 2;
  *(void *)(v7 + 1128) = "HKCategoryTypeIdentifierOvulationTestResult";
  *(void *)(v7 + 1136) = 43LL;
  *(_BYTE *)(v7 + 1144) = 2;
  *(void *)(v7 + 115sub_D878(v0 + 2) = "HKCategoryTypeIdentifierPelvicPain";
  *(void *)(v7 + 1160) = 34LL;
  *(_BYTE *)(v7 + 1168) = 2;
  *(void *)(v7 + 1sub_20004(v6, v1 + 176) = "HKCategoryTypeIdentifierPersistentIntermenstrualBleeding";
  *(void *)(v7 + 1184) = 56LL;
  *(_BYTE *)(v7 + 119sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 1200) = "HKCategoryTypeIdentifierPregnancy";
  *(void *)(v7 + 1208) = 33LL;
  *(_BYTE *)(v7 + 1sub_20004(v5, v1 + 216) = 2;
  *(void *)(v7 + 1224) = "HKCategoryTypeIdentifierPregnancyTestResult";
  *(void *)(v7 + 123sub_D878(v0 + 2) = 43LL;
  *(_BYTE *)(v7 + 1240) = 2;
  *(void *)(v7 + 1248) = "HKCategoryTypeIdentifierProgesteroneTestResult";
  *(void *)(v7 + 1256) = 46LL;
  *(_BYTE *)(v7 + 1264) = 2;
  *(void *)(v7 + 127sub_D878(v0 + 2) = "HKCategoryTypeIdentifierProlongedMenstrualPeriods";
  *(void *)(v7 + 1280) = 49LL;
  *(_BYTE *)(v7 + 1288) = 2;
  *(void *)(v7 + 1296) = "HKCategoryTypeIdentifierRapidPoundingOrFlutteringHeartbeat";
  *(void *)(v7 + 1304) = 58LL;
  *(_BYTE *)(v7 + 131sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 1320) = "HKCategoryTypeIdentifierRunnyNose";
  *(void *)(v7 + 1328) = 33LL;
  *(_BYTE *)(v7 + 1336) = 2;
  *(void *)(v7 + 1344) = "HKCategoryTypeIdentifierSexualActivity";
  *(void *)(v7 + 135sub_D878(v0 + 2) = 38LL;
  *(_BYTE *)(v7 + 1360) = 2;
  *(void *)(v7 + 1368) = "HKCategoryTypeIdentifierShortnessOfBreath";
  *(void *)(v7 + 1376) = 41LL;
  *(_BYTE *)(v7 + 1384) = 2;
  *(void *)(v7 + 139sub_D878(v0 + 2) = "HKCategoryTypeIdentifierSinusCongestion";
  *(void *)(v7 + 1400) = 39LL;
  *(_BYTE *)(v7 + 1408) = 2;
  *(void *)(v7 + 1416) = "HKCategoryTypeIdentifierSkippedHeartbeat";
  *(void *)(v7 + 1424) = 40LL;
  *(_BYTE *)(v7 + 143sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 1440) = "HKCategoryTypeIdentifierSleepAnalysis";
  *(void *)(v7 + 1448) = 37LL;
  *(_BYTE *)(v7 + 1456) = 2;
  *(void *)(v7 + 1464) = "HKCategoryTypeIdentifierSleepChanges";
  *(void *)(v7 + 147sub_D878(v0 + 2) = 36LL;
  *(_BYTE *)(v7 + 1480) = 2;
  *(void *)(v7 + 1488) = "HKCategoryTypeIdentifierSoreThroat";
  *(void *)(v7 + 1496) = 34LL;
  *(_BYTE *)(v7 + 1504) = 2;
  *(void *)(v7 + 151sub_D878(v0 + 2) = "HKCategoryTypeIdentifierToothbrushingEvent";
  *(void *)(v7 + 1520) = 42LL;
  *(_BYTE *)(v7 + 1528) = 2;
  *(void *)(v7 + 1536) = "HKCategoryTypeIdentifierVaginalDryness";
  *(void *)(v7 + 1544) = 38LL;
  *(_BYTE *)(v7 + 155sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 1560) = "HKCategoryTypeIdentifierVomiting";
  *(void *)(v7 + 1568) = 32LL;
  *(_BYTE *)(v7 + 1576) = 2;
  *(void *)(v7 + 1584) = "HKCategoryTypeIdentifierWheezing";
  *(void *)(v7 + 159sub_D878(v0 + 2) = 32LL;
  *(_BYTE *)(v7 + 1600) = 2;
  *(void *)(v7 + 1608) = "HKCharacteristicTypeIdentifierBiologicalSex";
  *(void *)(v7 + 1616) = 43LL;
  *(_BYTE *)(v7 + 1624) = 2;
  *(void *)(v7 + 163sub_D878(v0 + 2) = "HKCharacteristicTypeIdentifierBloodType";
  *(void *)(v7 + 1640) = 39LL;
  *(_BYTE *)(v7 + 1648) = 2;
  *(void *)(v7 + 1656) = "HKCharacteristicTypeIdentifierCardioFitnessMedicationsUse";
  *(void *)(v7 + 1664) = 57LL;
  *(_BYTE *)(v7 + 167sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 1680) = "HKCharacteristicTypeIdentifierDateOfBirth";
  *(void *)(v7 + 1688) = 41LL;
  *(_BYTE *)(v7 + 1696) = 2;
  *(void *)(v7 + 1704) = "HKCharacteristicTypeIdentifierFitzpatrickSkinType";
  *(void *)(v7 + 171sub_D878(v0 + 2) = 49LL;
  *(_BYTE *)(v7 + 1720) = 2;
  *(void *)(v7 + 1728) = "HKCharacteristicTypeIdentifierWheelchairUse";
  *(void *)(v7 + 1736) = 43LL;
  *(_BYTE *)(v7 + 1744) = 2;
  *(void *)(v7 + 175sub_D878(v0 + 2) = "HKClinicalTypeIdentifierAllergyRecord";
  *(void *)(v7 + 1760) = 37LL;
  *(_BYTE *)(v7 + 1768) = 2;
  *(void *)(v7 + 1776) = "HKClinicalTypeIdentifierClinicalNoteRecord";
  *(void *)(v7 + 1784) = 42LL;
  *(_BYTE *)(v7 + 179sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 1800) = "HKClinicalTypeIdentifierConditionRecord";
  *(void *)(v7 + 1808) = 39LL;
  *(_BYTE *)(v7 + 1816) = 2;
  *(void *)(v7 + 1824) = "HKClinicalTypeIdentifierCoverageRecord";
  *(void *)(v7 + 183sub_D878(v0 + 2) = 38LL;
  *(_BYTE *)(v7 + 1840) = 2;
  *(void *)(v7 + 1848) = "HKClinicalTypeIdentifierImmunizationRecord";
  *(void *)(v7 + 1856) = 42LL;
  *(_BYTE *)(v7 + 1864) = 2;
  *(void *)(v7 + 187sub_D878(v0 + 2) = "HKClinicalTypeIdentifierLabResultRecord";
  *(void *)(v7 + 1880) = 39LL;
  *(_BYTE *)(v7 + 1888) = 2;
  *(void *)(v7 + 1896) = "HKClinicalTypeIdentifierMedicationRecord";
  *(void *)(v7 + 1920) = "HKClinicalTypeIdentifierProcedureRecord";
  *(void *)(v7 + 1944) = "HKClinicalTypeIdentifierVitalSignRecord";
  *(void *)(v7 + 1968) = "HKCorrelationTypeIdentifierBloodPressure";
  *(void *)(v7 + 2304) = "HKQuantityTypeIdentifierBasalBodyTemperature";
  *(void *)(v7 + 2328) = "HKQuantityTypeIdentifierBasalEnergyBurned";
  *(void *)(v7 + 2376) = "HKQuantityTypeIdentifierCyclingFunctionalThresholdPower";
  *(void *)(v7 + 2400) = "HKQuantityTypeIdentifierCyclingPower";
  *(void *)(v7 + 2496) = "HKQuantityTypeIdentifierBodyFatPercentage";
  *(void *)(v7 + 259sub_D878(v0 + 2) = "HKQuantityTypeIdentifierDietaryBiotin";
  *(void *)(v7 + 2688) = "HKQuantityTypeIdentifierDietaryChloride";
  *(void *)(v7 + 2784) = "HKQuantityTypeIdentifierDietaryEnergyConsumed";
  *(void *)(v7 + 2856) = "HKQuantityTypeIdentifierDietaryFatSaturated";
  *(_BYTE *)(v7 + 2848) = 2;
  *(void *)(v7 + 283sub_D878(v0 + 2) = "HKQuantityTypeIdentifierDietaryFatPolyunsaturated";
  *(void *)(v7 + 2816) = 49LL;
  *(_BYTE *)(v7 + 2824) = 2;
  *(void *)(v7 + 2840) = 49LL;
  *(void *)(v7 + 1904) = 40LL;
  *(void *)(v7 + 2808) = "HKQuantityTypeIdentifierDietaryFatMonounsaturated";
  *(void *)(v7 + 279sub_D878(v0 + 2) = 45LL;
  *(_BYTE *)(v7 + 2800) = 2;
  *(void *)(v7 + 2760) = "HKQuantityTypeIdentifierDietaryCopper";
  *(_BYTE *)(v7 + 275sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 2768) = 37LL;
  *(_BYTE *)(v7 + 2776) = 2;
  *(void *)(v7 + 2736) = "HKQuantityTypeIdentifierDietaryChromium";
  *(void *)(v7 + 2720) = 42LL;
  *(_BYTE *)(v7 + 2728) = 2;
  *(void *)(v7 + 2744) = 39LL;
  *(_BYTE *)(v7 + 191sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 271sub_D878(v0 + 2) = "HKQuantityTypeIdentifierDietaryCholesterol";
  *(void *)(v7 + 2696) = 39LL;
  *(_BYTE *)(v7 + 2704) = 2;
  *(void *)(v7 + 2664) = "HKQuantityTypeIdentifierDietaryCarbohydrates";
  *(_BYTE *)(v7 + 2656) = 2;
  *(void *)(v7 + 267sub_D878(v0 + 2) = 44LL;
  *(_BYTE *)(v7 + 2680) = 2;
  *(void *)(v7 + 2640) = "HKQuantityTypeIdentifierDietaryCalcium";
  *(void *)(v7 + 2624) = 39LL;
  *(_BYTE *)(v7 + 263sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 2648) = 38LL;
  *(void *)(v7 + 1928) = 39LL;
  *(void *)(v7 + 2616) = "HKQuantityTypeIdentifierDietaryCaffeine";
  *(void *)(v7 + 2600) = 37LL;
  *(_BYTE *)(v7 + 2608) = 2;
  *(void *)(v7 + 2568) = "HKQuantityTypeIdentifierBodyTemperature";
  *(_BYTE *)(v7 + 2560) = 2;
  *(void *)(v7 + 2576) = 39LL;
  *(_BYTE *)(v7 + 2584) = 2;
  *(void *)(v7 + 2544) = "HKQuantityTypeIdentifierBodyMassIndex";
  *(void *)(v7 + 2528) = 32LL;
  *(_BYTE *)(v7 + 2536) = 2;
  *(void *)(v7 + 255sub_D878(v0 + 2) = 37LL;
  *(_BYTE *)(v7 + 1936) = 2;
  *(void *)(v7 + 2520) = "HKQuantityTypeIdentifierBodyMass";
  *(void *)(v7 + 2504) = 41LL;
  *(_BYTE *)(v7 + 251sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 247sub_D878(v0 + 2) = "HKQuantityTypeIdentifierBloodGlucose";
  *(_BYTE *)(v7 + 2464) = 2;
  *(void *)(v7 + 2480) = 36LL;
  *(_BYTE *)(v7 + 2488) = 2;
  *(void *)(v7 + 2448) = "HKQuantityTypeIdentifierBloodAlcoholContent";
  *(void *)(v7 + 243sub_D878(v0 + 2) = 36LL;
  *(_BYTE *)(v7 + 2440) = 2;
  *(void *)(v7 + 2456) = 43LL;
  *(void *)(v7 + 2424) = "HKQuantityTypeIdentifierCyclingSpeed";
  *(_BYTE *)(v7 + 239sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 2408) = 36LL;
  *(_BYTE *)(v7 + 2416) = 2;
  *(void *)(v7 + 195sub_D878(v0 + 2) = 39LL;
  *(void *)(v7 + 2384) = 55LL;
  *(void *)(v7 + 2360) = 38LL;
  *(_BYTE *)(v7 + 2368) = 2;
  *(void *)(v7 + 235sub_D878(v0 + 2) = "HKQuantityTypeIdentifierCyclingCadence";
  *(_BYTE *)(v7 + 2320) = 2;
  *(void *)(v7 + 2336) = 41LL;
  *(_BYTE *)(v7 + 2344) = 2;
  *(_BYTE *)(v7 + 1960) = 2;
  *(void *)(v7 + 231sub_D878(v0 + 2) = 44LL;
  *(void *)(v7 + 2288) = 48LL;
  *(_BYTE *)(v7 + 2296) = 2;
  *(void *)(v7 + 1976) = 40LL;
  *(void *)(v7 + 2280) = "HKQuantityTypeIdentifierAtrialFibrillationBurden";
  *(void *)(v7 + 2264) = 46LL;
  *(_BYTE *)(v7 + 227sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 2208) = "HKQuantityTypeIdentifierAppleSleepingWristTemperature";
  *(void *)(v7 + 2240) = 38LL;
  *(_BYTE *)(v7 + 2248) = 2;
  *(void *)(v7 + 2256) = "HKQuantityTypeIdentifierAppleWalkingSteadiness";
  *(void *)(v7 + 2sub_20004(v5, v1 + 216) = 53LL;
  *(_BYTE *)(v7 + 2224) = 2;
  *(void *)(v7 + 223sub_D878(v0 + 2) = "HKQuantityTypeIdentifierAppleStandTime";
  *(_BYTE *)(v7 + 2sub_20004(v6, v1 + 176) = 2;
  *(void *)(v7 + 2184) = "HKQuantityTypeIdentifierAppleMoveTime";
  *(void *)(v7 + 219sub_D878(v0 + 2) = 37LL;
  *(_BYTE *)(v7 + 2200) = 2;
  *(_BYTE *)(v7 + 1984) = 2;
  *(_BYTE *)(v7 + 215sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 2160) = "HKQuantityTypeIdentifierAppleExerciseTime";
  *(void *)(v7 + 2168) = 41LL;
  *(void *)(v7 + 199sub_D878(v0 + 2) = "HKDataTypeIdentifierAudiogram";
  *(_BYTE *)(v7 + 2128) = 2;
  *(void *)(v7 + 2136) = "HKQuantityTypeIdentifierActiveEnergyBurned";
  *(void *)(v7 + 2144) = 42LL;
  *(_BYTE *)(v7 + 2104) = 2;
  *(void *)(v7 + 211sub_D878(v0 + 2) = "HKMedicationDoseEventTypeIdentifierMedicationDoseEvent";
  *(void *)(v7 + 2120) = 54LL;
  *(void *)(v7 + 2088) = "HKDocumentTypeIdentifierCDA";
  *(void *)(v7 + 207sub_D878(v0 + 2) = 23LL;
  *(_BYTE *)(v7 + 2080) = 2;
  *(void *)(v7 + 2096) = 27LL;
  *(void *)(v7 + 2000) = 29LL;
  *(void *)(v7 + 2048) = 27LL;
  *(_BYTE *)(v7 + 2056) = 2;
  *(void *)(v7 + 2064) = "HKDataTypeSleepSchedule";
  *(void *)(v7 + 2016) = "HKDataTypeIdentifierElectrocardiogram";
  *(void *)(v7 + 2024) = 37LL;
  *(_BYTE *)(v7 + 203sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 2040) = "HKDataTypeSleepDurationGoal";
  *(_BYTE *)(v7 + 2008) = 2;
  *(void *)(v7 + 2864) = 43LL;
  *(_BYTE *)(v7 + 287sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 2880) = "HKQuantityTypeIdentifierDietaryFatTotal";
  *(void *)(v7 + 2888) = 39LL;
  *(_BYTE *)(v7 + 2896) = 2;
  *(void *)(v7 + 2904) = "HKQuantityTypeIdentifierDietaryFiber";
  *(void *)(v7 + 291sub_D878(v0 + 2) = 36LL;
  *(_BYTE *)(v7 + 2920) = 2;
  *(void *)(v7 + 2928) = "HKQuantityTypeIdentifierDietaryFolate";
  *(void *)(v7 + 2936) = 37LL;
  *(_BYTE *)(v7 + 2944) = 2;
  *(void *)(v7 + 295sub_D878(v0 + 2) = "HKQuantityTypeIdentifierDietaryIodine";
  *(void *)(v7 + 2960) = 37LL;
  *(_BYTE *)(v7 + 2968) = 2;
  *(void *)(v7 + 2976) = "HKQuantityTypeIdentifierDietaryIron";
  *(void *)(v7 + 2984) = 35LL;
  *(_BYTE *)(v7 + 299sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 3000) = "HKQuantityTypeIdentifierDietaryMagnesium";
  *(void *)(v7 + 3008) = 40LL;
  *(_BYTE *)(v7 + 3016) = 2;
  *(void *)(v7 + 3024) = "HKQuantityTypeIdentifierDietaryManganese";
  *(void *)(v7 + 303sub_D878(v0 + 2) = 40LL;
  *(_BYTE *)(v7 + 3040) = 2;
  *(void *)(v7 + 3048) = "HKQuantityTypeIdentifierDietaryMolybdenum";
  *(void *)(v7 + 3056) = 41LL;
  *(_BYTE *)(v7 + 3064) = 2;
  *(void *)(v7 + 307sub_D878(v0 + 2) = "HKQuantityTypeIdentifierDietaryNiacin";
  *(void *)(v7 + 3080) = 37LL;
  *(_BYTE *)(v7 + 3088) = 2;
  *(void *)(v7 + 3096) = "HKQuantityTypeIdentifierDietaryPantothenicAcid";
  *(void *)(v7 + 3104) = 46LL;
  *(_BYTE *)(v7 + 311sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 3120) = "HKQuantityTypeIdentifierDietaryPhosphorus";
  *(void *)(v7 + 3128) = 41LL;
  *(_BYTE *)(v7 + 3136) = 2;
  *(void *)(v7 + 3144) = "HKQuantityTypeIdentifierDietaryPotassium";
  *(void *)(v7 + 315sub_D878(v0 + 2) = 40LL;
  *(_BYTE *)(v7 + 3160) = 2;
  *(void *)(v7 + 3168) = "HKQuantityTypeIdentifierDietaryProtein";
  *(void *)(v7 + 3sub_20004(v6, v1 + 176) = 38LL;
  *(_BYTE *)(v7 + 3184) = 2;
  *(void *)(v7 + 319sub_D878(v0 + 2) = "HKQuantityTypeIdentifierDietaryRiboflavin";
  *(void *)(v7 + 3200) = 41LL;
  *(_BYTE *)(v7 + 3208) = 2;
  *(void *)(v7 + 3sub_20004(v5, v1 + 216) = "HKQuantityTypeIdentifierDietarySelenium";
  *(void *)(v7 + 3224) = 39LL;
  *(_BYTE *)(v7 + 323sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 3240) = "HKQuantityTypeIdentifierDietarySodium";
  *(void *)(v7 + 3248) = 37LL;
  *(_BYTE *)(v7 + 3256) = 2;
  *(void *)(v7 + 3264) = "HKQuantityTypeIdentifierDietarySugar";
  *(void *)(v7 + 327sub_D878(v0 + 2) = 36LL;
  *(_BYTE *)(v7 + 3280) = 2;
  *(void *)(v7 + 3288) = "HKQuantityTypeIdentifierDietaryThiamin";
  *(void *)(v7 + 3296) = 38LL;
  *(_BYTE *)(v7 + 3304) = 2;
  *(void *)(v7 + 331sub_D878(v0 + 2) = "HKQuantityTypeIdentifierDietaryVitaminA";
  *(void *)(v7 + 3320) = 39LL;
  *(_BYTE *)(v7 + 3328) = 2;
  *(void *)(v7 + 3336) = "HKQuantityTypeIdentifierDietaryVitaminB12";
  *(void *)(v7 + 3344) = 41LL;
  *(_BYTE *)(v7 + 335sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 3360) = "HKQuantityTypeIdentifierDietaryVitaminB6";
  *(void *)(v7 + 3368) = 40LL;
  *(_BYTE *)(v7 + 3376) = 2;
  *(void *)(v7 + 3384) = "HKQuantityTypeIdentifierDietaryVitaminC";
  *(void *)(v7 + 339sub_D878(v0 + 2) = 39LL;
  *(_BYTE *)(v7 + 3400) = 2;
  *(void *)(v7 + 3408) = "HKQuantityTypeIdentifierDietaryVitaminD";
  *(void *)(v7 + 3416) = 39LL;
  *(_BYTE *)(v7 + 3424) = 2;
  *(void *)(v7 + 343sub_D878(v0 + 2) = "HKQuantityTypeIdentifierDietaryVitaminE";
  *(void *)(v7 + 3440) = 39LL;
  *(_BYTE *)(v7 + 3448) = 2;
  *(void *)(v7 + 3456) = "HKQuantityTypeIdentifierDietaryVitaminK";
  *(void *)(v7 + 3464) = 39LL;
  *(_BYTE *)(v7 + 347sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 3480) = "HKQuantityTypeIdentifierDietaryWater";
  *(void *)(v7 + 3488) = 36LL;
  *(_BYTE *)(v7 + 3496) = 2;
  *(void *)(v7 + 3504) = "HKQuantityTypeIdentifierDietaryZinc";
  *(void *)(v7 + 351sub_D878(v0 + 2) = 35LL;
  *(_BYTE *)(v7 + 3520) = 2;
  *(void *)(v7 + 3528) = "HKQuantityTypeIdentifierDistanceCycling";
  *(void *)(v7 + 3536) = 39LL;
  *(_BYTE *)(v7 + 3544) = 2;
  *(void *)(v7 + 355sub_D878(v0 + 2) = "HKQuantityTypeIdentifierDistanceDownhillSnowSports";
  *(void *)(v7 + 3560) = 50LL;
  *(_BYTE *)(v7 + 3568) = 2;
  *(void *)(v7 + 3576) = "HKQuantityTypeIdentifierDistanceSwimming";
  *(void *)(v7 + 3584) = 40LL;
  *(_BYTE *)(v7 + 359sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 3600) = "HKQuantityTypeIdentifierDistanceWalkingRunning";
  *(void *)(v7 + 3608) = 46LL;
  *(_BYTE *)(v7 + 3616) = 2;
  *(void *)(v7 + 3624) = "HKQuantityTypeIdentifierDistanceWheelchair";
  *(void *)(v7 + 363sub_D878(v0 + 2) = 42LL;
  *(_BYTE *)(v7 + 3640) = 2;
  *(void *)(v7 + 3648) = "HKQuantityTypeIdentifierElectrodermalActivity";
  *(void *)(v7 + 3656) = 45LL;
  *(_BYTE *)(v7 + 3664) = 2;
  *(void *)(v7 + 367sub_D878(v0 + 2) = "HKQuantityTypeIdentifierEnvironmentalAudioExposure";
  *(void *)(v7 + 3680) = 50LL;
  *(_BYTE *)(v7 + 3688) = 2;
  *(void *)(v7 + 3696) = "HKQuantityTypeIdentifierEnvironmentalSoundReduction";
  *(void *)(v7 + 3704) = 51LL;
  *(_BYTE *)(v7 + 371sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 3720) = "HKQuantityTypeIdentifierFlightsClimbed";
  *(void *)(v7 + 3728) = 38LL;
  *(_BYTE *)(v7 + 3736) = 2;
  *(void *)(v7 + 3744) = "HKQuantityTypeIdentifierForcedExpiratoryVolume1";
  *(void *)(v7 + 375sub_D878(v0 + 2) = 47LL;
  *(_BYTE *)(v7 + 3760) = 2;
  *(void *)(v7 + 3768) = "HKQuantityTypeIdentifierForcedVitalCapacity";
  *(void *)(v7 + 3776) = 43LL;
  *(_BYTE *)(v7 + 3784) = 2;
  *(void *)(v7 + 379sub_D878(v0 + 2) = "HKQuantityTypeIdentifierHeadphoneAudioExposure";
  *(void *)(v7 + 3800) = 46LL;
  *(_BYTE *)(v7 + 3808) = 2;
  *(void *)(v7 + 3816) = "HKQuantityTypeIdentifierHeartRate";
  *(void *)(v7 + 3824) = 33LL;
  *(_BYTE *)(v7 + 383sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 3840) = "HKQuantityTypeIdentifierHeartRateRecoveryOneMinute";
  *(void *)(v7 + 3848) = 50LL;
  *(_BYTE *)(v7 + 3856) = 2;
  *(void *)(v7 + 3864) = "HKQuantityTypeIdentifierHeartRateVariabilitySDNN";
  *(void *)(v7 + 387sub_D878(v0 + 2) = 48LL;
  *(_BYTE *)(v7 + 3880) = 2;
  *(void *)(v7 + 3888) = "HKQuantityTypeIdentifierHeight";
  *(void *)(v7 + 3896) = 30LL;
  *(_BYTE *)(v7 + 3904) = 2;
  *(void *)(v7 + 391sub_D878(v0 + 2) = "HKQuantityTypeIdentifierInhalerUsage";
  *(void *)(v7 + 3920) = 36LL;
  *(_BYTE *)(v7 + 3928) = 2;
  *(void *)(v7 + 3936) = "HKQuantityTypeIdentifierInsulinDelivery";
  *(void *)(v7 + 3944) = 39LL;
  *(_BYTE *)(v7 + 395sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 3960) = "HKQuantityTypeIdentifierLeanBodyMass";
  *(void *)(v7 + 3968) = 36LL;
  *(_BYTE *)(v7 + 3976) = 2;
  *(void *)(v7 + 3984) = "HKQuantityTypeIdentifierNikeFuel";
  *(void *)(v7 + 399sub_D878(v0 + 2) = 32LL;
  *(_BYTE *)(v7 + 4000) = 2;
  *(void *)(v7 + 4008) = "HKQuantityTypeIdentifierPhysicalEffort";
  *(void *)(v7 + 4016) = 38LL;
  *(_BYTE *)(v7 + 4024) = 2;
  *(void *)(v7 + 403sub_D878(v0 + 2) = "HKQuantityTypeIdentifierNumberOfAlcoholicBeverages";
  *(void *)(v7 + 4040) = 50LL;
  *(_BYTE *)(v7 + 4048) = 2;
  *(void *)(v7 + 4056) = "HKQuantityTypeIdentifierNumberOfTimesFallen";
  *(void *)(v7 + 4064) = 43LL;
  *(_BYTE *)(v7 + 407sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 4080) = "HKQuantityTypeIdentifierOxygenSaturation";
  *(void *)(v7 + 4088) = 40LL;
  *(_BYTE *)(v7 + 4096) = 2;
  *(void *)(v7 + 4104) = "HKQuantityTypeIdentifierPeakExpiratoryFlowRate";
  *(void *)(v7 + 411sub_D878(v0 + 2) = 46LL;
  *(_BYTE *)(v7 + 4120) = 2;
  *(void *)(v7 + 4128) = "HKQuantityTypeIdentifierPeripheralPerfusionIndex";
  *(void *)(v7 + 4136) = 48LL;
  *(_BYTE *)(v7 + 4144) = 2;
  *(void *)(v7 + 415sub_D878(v0 + 2) = "HKQuantityTypeIdentifierPushCount";
  *(void *)(v7 + 4160) = 33LL;
  *(_BYTE *)(v7 + 4168) = 2;
  *(void *)(v7 + 4sub_20004(v6, v1 + 176) = "HKQuantityTypeIdentifierRespiratoryRate";
  *(void *)(v7 + 4184) = 39LL;
  *(_BYTE *)(v7 + 419sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 4200) = "HKQuantityTypeIdentifierRestingHeartRate";
  *(void *)(v7 + 4208) = 40LL;
  *(_BYTE *)(v7 + 4sub_20004(v5, v1 + 216) = 2;
  *(void *)(v7 + 4224) = "HKQuantityTypeIdentifierRunningGroundContactTime";
  *(void *)(v7 + 423sub_D878(v0 + 2) = 48LL;
  *(_BYTE *)(v7 + 4240) = 2;
  *(void *)(v7 + 4248) = "HKQuantityTypeIdentifierRunningPower";
  *(void *)(v7 + 4256) = 36LL;
  *(_BYTE *)(v7 + 4264) = 2;
  *(void *)(v7 + 427sub_D878(v0 + 2) = "HKQuantityTypeIdentifierRunningSpeed";
  *(void *)(v7 + 4280) = 36LL;
  *(_BYTE *)(v7 + 4288) = 2;
  *(void *)(v7 + 4296) = "HKQuantityTypeIdentifierRunningStrideLength";
  *(void *)(v7 + 4304) = 43LL;
  *(_BYTE *)(v7 + 431sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 4320) = "HKQuantityTypeIdentifierRunningVerticalOscillation";
  *(void *)(v7 + 4328) = 50LL;
  *(_BYTE *)(v7 + 4336) = 2;
  *(void *)(v7 + 4344) = "HKQuantityTypeIdentifierSixMinuteWalkTestDistance";
  *(void *)(v7 + 435sub_D878(v0 + 2) = 49LL;
  *(_BYTE *)(v7 + 4360) = 2;
  *(void *)(v7 + 4368) = "HKQuantityTypeIdentifierStairAscentSpeed";
  *(void *)(v7 + 4376) = 40LL;
  *(_BYTE *)(v7 + 4384) = 2;
  *(void *)(v7 + 439sub_D878(v0 + 2) = "HKQuantityTypeIdentifierStairDescentSpeed";
  *(void *)(v7 + 4400) = 41LL;
  *(_BYTE *)(v7 + 4408) = 2;
  *(void *)(v7 + 4416) = "HKQuantityTypeIdentifierStepCount";
  *(void *)(v7 + 4424) = 33LL;
  *(_BYTE *)(v7 + 443sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 4440) = "HKQuantityTypeIdentifierSwimmingStrokeCount";
  *(void *)(v7 + 4448) = 43LL;
  *(_BYTE *)(v7 + 4456) = 2;
  *(void *)(v7 + 4464) = "HKQuantityTypeIdentifierTimeInDaylight";
  *(void *)(v7 + 447sub_D878(v0 + 2) = 38LL;
  *(_BYTE *)(v7 + 4480) = 2;
  *(void *)(v7 + 4488) = "HKQuantityTypeIdentifierUVExposure";
  *(void *)(v7 + 4496) = 34LL;
  *(_BYTE *)(v7 + 4504) = 2;
  *(void *)(v7 + 451sub_D878(v0 + 2) = "HKQuantityTypeIdentifierUnderwaterDepth";
  *(void *)(v7 + 4520) = 39LL;
  *(_BYTE *)(v7 + 4528) = 2;
  *(void *)(v7 + 4536) = "HKQuantityTypeIdentifierVO2Max";
  *(void *)(v7 + 4544) = 30LL;
  *(_BYTE *)(v7 + 455sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 4560) = "HKQuantityTypeIdentifierWaistCircumference";
  *(void *)(v7 + 4568) = 42LL;
  *(_BYTE *)(v7 + 4576) = 2;
  *(void *)(v7 + 4584) = "HKQuantityTypeIdentifierWalkingAsymmetryPercentage";
  *(void *)(v7 + 459sub_D878(v0 + 2) = 50LL;
  *(_BYTE *)(v7 + 4600) = 2;
  *(void *)(v7 + 4608) = "HKQuantityTypeIdentifierWalkingDoubleSupportPercentage";
  *(void *)(v7 + 4616) = 54LL;
  *(_BYTE *)(v7 + 4624) = 2;
  *(void *)(v7 + 463sub_D878(v0 + 2) = "HKQuantityTypeIdentifierWalkingHeartRateAverage";
  *(void *)(v7 + 4640) = 47LL;
  *(_BYTE *)(v7 + 4648) = 2;
  *(void *)(v7 + 4656) = "HKQuantityTypeIdentifierWalkingSpeed";
  *(void *)(v7 + 4664) = 36LL;
  *(_BYTE *)(v7 + 467sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 4680) = "HKQuantityTypeIdentifierWalkingStepLength";
  *(void *)(v7 + 4688) = 41LL;
  *(_BYTE *)(v7 + 4696) = 2;
  *(void *)(v7 + 4704) = "HKSampleTypeStateOfMind";
  *(void *)(v7 + 471sub_D878(v0 + 2) = 23LL;
  *(_BYTE *)(v7 + 4720) = 2;
  *(void *)(v7 + 4728) = "HKVisionPrescriptionTypeIdentifier";
  *(void *)(v7 + 4736) = 34LL;
  *(_BYTE *)(v7 + 4744) = 2;
  *(void *)(v7 + 475sub_D878(v0 + 2) = "HKWorkoutTypeIdentifier";
  *(void *)(v7 + 4760) = 23LL;
  *(_BYTE *)(v7 + 4768) = 2;
  *(void *)(v7 + 4776) = "HKRings";
  *(void *)(v7 + 4784) = 7LL;
  *(_BYTE *)(v7 + 479sub_D878(v0 + 2) = 2;
  *(void *)(v7 + 4800) = "HKScoredAssessmentTypeIdentifierGAD7";
  *(void *)(v7 + 4808) = 36LL;
  *(_BYTE *)(v7 + 4816) = 2;
  *(void *)(v7 + 4824) = "HKScoredAssessmentTypeIdentifierPHQ9";
  *(void *)(v7 + 483sub_D878(v0 + 2) = 36LL;
  *(_BYTE *)(v7 + 4840) = 2;
  *(void *)(v7 + 4848) = "HKCategoryValueSleepAnalysisInBed";
  *(void *)(v7 + 4856) = 33LL;
  *(_BYTE *)(v7 + 4864) = 2;
  *(void *)(v7 + 487sub_D878(v0 + 2) = "_HKCharacteristicTypeIdentifierUserEnteredMenstrualCycleLength";
  *(void *)(v7 + 4880) = 62LL;
  *(_BYTE *)(v7 + 4888) = 2;
  *(void *)(v7 + 4896) = "_HKCharacteristicTypeIdentifierUserEnteredMenstrualPeriodLength";
  *(void *)(v7 + 4904) = 63LL;
  *(_BYTE *)(v7 + 491sub_D878(v0 + 2) = 2;
  v8._rawValue = (void *)PhoneRingsSnippet.body.getter(v6);
  v9._countAndFlagsBits = a1;
  v9._object = a2;
  Swift::Int v10 = _findStringSwitchCase(cases:string:)(v8, v9);
  swift_bridgeObjectRelease(v8._rawValue);
  sub_2A184();
  uint64_t v11 = 0LL;
  uint64_t result = 118LL;
  switch(v10)
  {
    case 0LL:
      goto LABEL_128;
    case 1LL:
      uint64_t v11 = 1LL;
      goto LABEL_128;
    case 2LL:
      uint64_t v11 = 2LL;
      goto LABEL_128;
    case 3LL:
      uint64_t v11 = 3LL;
      goto LABEL_128;
    case 4LL:
      uint64_t v11 = 4LL;
      goto LABEL_128;
    case 5LL:
      uint64_t v11 = 5LL;
      goto LABEL_128;
    case 6LL:
      uint64_t v11 = 6LL;
      goto LABEL_128;
    case 7LL:
      uint64_t v11 = 7LL;
      goto LABEL_128;
    case 8LL:
      uint64_t v11 = 8LL;
      goto LABEL_128;
    case 9LL:
      uint64_t v11 = 9LL;
      goto LABEL_128;
    case 10LL:
      uint64_t v11 = 10LL;
      goto LABEL_128;
    case 11LL:
      uint64_t v11 = 11LL;
      goto LABEL_128;
    case 12LL:
      uint64_t v11 = 12LL;
      goto LABEL_128;
    case 13LL:
      uint64_t v11 = 13LL;
      goto LABEL_128;
    case 14LL:
      uint64_t v11 = 14LL;
      goto LABEL_128;
    case 15LL:
      uint64_t v11 = 15LL;
      goto LABEL_128;
    case 16LL:
      uint64_t v11 = 16LL;
      goto LABEL_128;
    case 17LL:
      uint64_t v11 = 17LL;
      goto LABEL_128;
    case 18LL:
      uint64_t v11 = 18LL;
      goto LABEL_128;
    case 19LL:
      uint64_t v11 = 19LL;
      goto LABEL_128;
    case 20LL:
      uint64_t v11 = 20LL;
      goto LABEL_128;
    case 21LL:
      uint64_t v11 = 21LL;
      goto LABEL_128;
    case 22LL:
      uint64_t v11 = 22LL;
      goto LABEL_128;
    case 23LL:
      uint64_t v11 = 23LL;
      goto LABEL_128;
    case 24LL:
      uint64_t v11 = 24LL;
      goto LABEL_128;
    case 25LL:
      uint64_t v11 = 25LL;
      goto LABEL_128;
    case 26LL:
      uint64_t v11 = 26LL;
      goto LABEL_128;
    case 27LL:
      uint64_t v11 = 27LL;
      goto LABEL_128;
    case 28LL:
      uint64_t v11 = 28LL;
      goto LABEL_128;
    case 29LL:
      uint64_t v11 = 29LL;
      goto LABEL_128;
    case 30LL:
      uint64_t v11 = 30LL;
      goto LABEL_128;
    case 31LL:
      uint64_t v11 = 31LL;
      goto LABEL_128;
    case 32LL:
      uint64_t v11 = 32LL;
      goto LABEL_128;
    case 33LL:
      uint64_t v11 = 33LL;
      goto LABEL_128;
    case 34LL:
      uint64_t v11 = 34LL;
      goto LABEL_128;
    case 35LL:
      uint64_t v11 = 35LL;
      goto LABEL_128;
    case 36LL:
      uint64_t v11 = 36LL;
      goto LABEL_128;
    case 37LL:
      uint64_t v11 = 37LL;
      goto LABEL_128;
    case 38LL:
      uint64_t v11 = 38LL;
      goto LABEL_128;
    case 39LL:
      uint64_t v11 = 39LL;
      goto LABEL_128;
    case 40LL:
      uint64_t v11 = 40LL;
      goto LABEL_128;
    case 41LL:
      uint64_t v11 = 41LL;
      goto LABEL_128;
    case 42LL:
      uint64_t v11 = 42LL;
      goto LABEL_128;
    case 43LL:
      uint64_t v11 = 43LL;
      goto LABEL_128;
    case 44LL:
      uint64_t v11 = 44LL;
      goto LABEL_128;
    case 45LL:
      uint64_t v11 = 45LL;
      goto LABEL_128;
    case 46LL:
      uint64_t v11 = 46LL;
      goto LABEL_128;
    case 47LL:
      uint64_t v11 = 47LL;
      goto LABEL_128;
    case 48LL:
      uint64_t v11 = 48LL;
      goto LABEL_128;
    case 49LL:
      uint64_t v11 = 49LL;
      goto LABEL_128;
    case 50LL:
      uint64_t v11 = 50LL;
      goto LABEL_128;
    case 51LL:
      uint64_t v11 = 51LL;
      goto LABEL_128;
    case 52LL:
      uint64_t v11 = 52LL;
      goto LABEL_128;
    case 53LL:
      uint64_t v11 = 53LL;
      goto LABEL_128;
    case 54LL:
      uint64_t v11 = 54LL;
      goto LABEL_128;
    case 55LL:
      uint64_t v11 = 55LL;
      goto LABEL_128;
    case 56LL:
      uint64_t v11 = 56LL;
      goto LABEL_128;
    case 57LL:
      uint64_t v11 = 57LL;
      goto LABEL_128;
    case 58LL:
      uint64_t v11 = 58LL;
      goto LABEL_128;
    case 59LL:
      uint64_t v11 = 59LL;
      goto LABEL_128;
    case 60LL:
      uint64_t v11 = 60LL;
      goto LABEL_128;
    case 61LL:
      uint64_t v11 = 61LL;
      goto LABEL_128;
    case 62LL:
      uint64_t v11 = 62LL;
      goto LABEL_128;
    case 63LL:
      uint64_t v11 = 63LL;
      goto LABEL_128;
    case 64LL:
      uint64_t v11 = 64LL;
      goto LABEL_128;
    case 65LL:
      uint64_t v11 = 65LL;
      goto LABEL_128;
    case 66LL:
      uint64_t v11 = 66LL;
      goto LABEL_128;
    case 67LL:
      uint64_t v11 = 67LL;
      goto LABEL_128;
    case 68LL:
      uint64_t v11 = 68LL;
      goto LABEL_128;
    case 69LL:
      uint64_t v11 = 69LL;
      goto LABEL_128;
    case 70LL:
      uint64_t v11 = 70LL;
      goto LABEL_128;
    case 71LL:
      uint64_t v11 = 71LL;
      goto LABEL_128;
    case 72LL:
      uint64_t v11 = 72LL;
      goto LABEL_128;
    case 73LL:
      uint64_t v11 = 73LL;
      goto LABEL_128;
    case 74LL:
      uint64_t v11 = 74LL;
      goto LABEL_128;
    case 75LL:
      uint64_t v11 = 75LL;
      goto LABEL_128;
    case 76LL:
      uint64_t v11 = 76LL;
      goto LABEL_128;
    case 77LL:
      uint64_t v11 = 77LL;
      goto LABEL_128;
    case 78LL:
      uint64_t v11 = 78LL;
      goto LABEL_128;
    case 79LL:
      uint64_t v11 = 79LL;
      goto LABEL_128;
    case 80LL:
      uint64_t v11 = 80LL;
      goto LABEL_128;
    case 81LL:
      uint64_t v11 = 81LL;
      goto LABEL_128;
    case 82LL:
      uint64_t v11 = 82LL;
      goto LABEL_128;
    case 83LL:
      uint64_t v11 = 83LL;
      goto LABEL_128;
    case 84LL:
      uint64_t v11 = 84LL;
      goto LABEL_128;
    case 85LL:
      uint64_t v11 = 85LL;
      goto LABEL_128;
    case 86LL:
      uint64_t v11 = 86LL;
      goto LABEL_128;
    case 87LL:
      uint64_t v11 = 87LL;
      goto LABEL_128;
    case 88LL:
      uint64_t v11 = 88LL;
      goto LABEL_128;
    case 89LL:
      uint64_t v11 = 89LL;
      goto LABEL_128;
    case 90LL:
      uint64_t v11 = 90LL;
      goto LABEL_128;
    case 91LL:
      uint64_t v11 = 91LL;
      goto LABEL_128;
    case 92LL:
      uint64_t v11 = 92LL;
      goto LABEL_128;
    case 93LL:
      uint64_t v11 = 93LL;
      goto LABEL_128;
    case 94LL:
      uint64_t v11 = 94LL;
      goto LABEL_128;
    case 95LL:
      uint64_t v11 = 95LL;
      goto LABEL_128;
    case 96LL:
      uint64_t v11 = 96LL;
      goto LABEL_128;
    case 97LL:
      uint64_t v11 = 97LL;
      goto LABEL_128;
    case 98LL:
      uint64_t v11 = 98LL;
      goto LABEL_128;
    case 99LL:
      uint64_t v11 = 99LL;
      goto LABEL_128;
    case 100LL:
      uint64_t v11 = 100LL;
      goto LABEL_128;
    case 101LL:
      uint64_t v11 = 101LL;
      goto LABEL_128;
    case 102LL:
      uint64_t v11 = 102LL;
      goto LABEL_128;
    case 103LL:
      uint64_t v11 = 103LL;
      goto LABEL_128;
    case 104LL:
      uint64_t v11 = 104LL;
      goto LABEL_128;
    case 105LL:
      uint64_t v11 = 105LL;
      goto LABEL_128;
    case 106LL:
      uint64_t v11 = 106LL;
      goto LABEL_128;
    case 107LL:
      uint64_t v11 = 107LL;
      goto LABEL_128;
    case 108LL:
      uint64_t v11 = 108LL;
      goto LABEL_128;
    case 109LL:
      uint64_t v11 = 109LL;
      goto LABEL_128;
    case 110LL:
      uint64_t v11 = 110LL;
      goto LABEL_128;
    case 111LL:
      uint64_t v11 = 111LL;
      goto LABEL_128;
    case 112LL:
      uint64_t v11 = 112LL;
      goto LABEL_128;
    case 113LL:
      uint64_t v11 = 113LL;
      goto LABEL_128;
    case 114LL:
      uint64_t v11 = 114LL;
      goto LABEL_128;
    case 115LL:
      uint64_t v11 = 115LL;
      goto LABEL_128;
    case 116LL:
      uint64_t v11 = 116LL;
      goto LABEL_128;
    case 117LL:
      uint64_t v11 = 117LL;
LABEL_128:
      uint64_t result = v11;
      break;
    case 118LL:
      return result;
    case 119LL:
      uint64_t result = 119LL;
      break;
    case 120LL:
      uint64_t result = 120LL;
      break;
    case 121LL:
      uint64_t result = 121LL;
      break;
    case 122LL:
      uint64_t result = 122LL;
      break;
    case 123LL:
      uint64_t result = 123LL;
      break;
    case 124LL:
      uint64_t result = 124LL;
      break;
    case 125LL:
      uint64_t result = 125LL;
      break;
    case 126LL:
      uint64_t result = 126LL;
      break;
    case 127LL:
      uint64_t result = 127LL;
      break;
    default:
      if ((v10 & 0xFFFFFFFFFFFFFFC0LL) == 0x80)
      {
        uint64_t result = v10 | 0xFFFFFF80;
      }

      else if ((unint64_t)(v10 - 192) >= 0xD)
      {
        uint64_t result = 205LL;
      }

      else
      {
        uint64_t result = (v10 - 256);
      }

      break;
  }

  return result;
}

_UNKNOWN **sub_29F58()
{
  return &off_17AEF8;
}

void sub_29F64(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_29F70()
{
}

uint64_t sub_29F90(uint64_t a1)
{
  return sub_12BC74(a1, *v1);
}

void sub_29F98(uint64_t a1)
{
}

uint64_t sub_29FA0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_28A4C(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_29FCC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_27CC8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_29FF4(void *a1@<X8>)
{
  *a1 = &off_17AEF8;
}

unint64_t sub_2A008()
{
  unint64_t result = qword_18ABC0;
  if (!qword_18ABC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1397B4, &type metadata for HealthKitIdentifier);
    atomic_store(result, (unint64_t *)&qword_18ABC0);
  }

  return result;
}

unint64_t sub_2A044(unsigned __int8 a1)
{
  unint64_t result = 0xD000000000000016LL;
  switch(a1)
  {
    case 'X':
      return 0xD000000000000023LL;
    case 'Y':
    case 'Z':
    case '[':
    case ']':
    case 'a':
      return 0xD000000000000018LL;
    case '\\':
    case '^':
    case '_':
    case 'b':
    case 'c':
    case 'd':
    case 'e':
    case 'f':
    case 'h':
    case 'j':
      return result;
      return 0xD00000000000001DLL;
    case 'g':
    case 'k':
      return 0xD000000000000017LL;
    case 'i':
      return 0xD000000000000021LL;
    default:
      uint64_t v3 = a1 - 147;
      if (((1LL << (a1 + 109)) & 0x2004000119LL) != 0) {
        return 0xD000000000000018LL;
      }
      if (((1LL << (a1 + 109)) & 0x8800000) != 0) {
        return 0xD00000000000001CLL;
      }
      if (v3 == 15) {
        return 0xD000000000000021LL;
      }
LABEL_11:
      if (a1 != 60)
      {
        if (a1 == 32 || a1 == 42)
        {
          return 0xD00000000000001DLL;
        }

        else if (a1 == 4)
        {
          return 0xD000000000000018LL;
        }
      }

      return result;
  }

uint64_t sub_2A164(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return String.hash(into:)(va, a1, a2);
}

Swift::Int sub_2A17C()
{
  return Hasher._finalize()();
}

uint64_t sub_2A184()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_2A18C(uint64_t a1, __int128 *a2, const void *a3, const void *a4, uint64_t a5)
{
  uint64_t v14 = v13 - v12;
  uint64_t v15 = sub_AA80();
  sub_A72C(v15);
  uint64_t v16 = sub_A9C8();
  *(void *)(v5 + 320) = v15;
  *(void *)(v5 + 328) = &protocol witness table for ResponseFactory;
  *(void *)(v5 + 296) = v16;
  type metadata accessor for WellnessLoggingCATsSimple(0LL);
  sub_37504();
  *(void *)(v5 + 336) = sub_AAF8(v14);
  type metadata accessor for WellnessCATs(0LL);
  sub_37504();
  *(void *)(v5 + 344) = sub_AAF0(v14);
  *(void *)(v5 + 35sub_D878(v0 + 2) = [objc_allocWithZone((Class)type metadata accessor for LogGenericMedicationsIntentHandler(0)) init];
  *(void *)(v5 + 16) = a1;
  sub_20004(a2, v5 + 24);
  memcpy((void *)(v5 + 64), a3, 0xA0uLL);
  sub_35A9C(a4, (void *)(v5 + 224));
  *(_BYTE *)(v5 + 400) = 0;
  if (*(void *)(a5 + 24))
  {
    sub_20004((__int128 *)a5, (uint64_t)&v18);
  }

  else
  {
    uint64_t v19 = &type metadata for MedsCorrectionsFlowProvider;
    uint64_t v20 = &off_17F1C8;
    *(void *)&__int128 v18 = sub_20308((uint64_t)&unk_17CE88, 216LL);
    sub_A304(v5 + 24, v18 + 16);
    sub_A13C((_OWORD *)(v5 + 64), (_OWORD *)(v18 + 56));
    sub_279E0(a5, &qword_18AF10);
  }

  sub_20004(&v18, v5 + 360);
  return v5;
}

uint64_t sub_2A324(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GenericMedLoggingFlow();
  sub_35A68(&qword_18AF08, v5, (uint64_t (*)(uint64_t))type metadata accessor for GenericMedLoggingFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v6);
}

uint64_t sub_2A394(uint64_t a1)
{
  v2[1381] = v1;
  v2[1380] = a1;
  sub_494C(&qword_189D00);
  v2[1382] = sub_A5B8();
  v2[1383] = sub_A5B8();
  uint64_t v3 = sub_494C(&qword_18A1A8);
  v2[1384] = sub_36390(v3);
  uint64_t v4 = type metadata accessor for GenericMedCompletedLogModel(0LL);
  v2[1385] = sub_36390(v4);
  uint64_t v5 = sub_ABF4();
  v2[1386] = v5;
  v2[1387] = sub_36390(v5);
  uint64_t v6 = type metadata accessor for SnippetHeaderModel(0LL);
  v2[1388] = v6;
  v2[1389] = sub_36390(v6);
  sub_494C(&qword_189CF8);
  v2[1390] = sub_A5B8();
  v2[1391] = sub_A5B8();
  v2[1392] = sub_A5B8();
  v2[1393] = sub_A5B8();
  uint64_t v7 = type metadata accessor for DialogPhase(0LL);
  v2[1394] = v7;
  v2[1395] = *(void *)(v7 - 8);
  v2[1396] = sub_A5B8();
  v2[1397] = sub_A5B8();
  uint64_t v8 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[1398] = v8;
  v2[1399] = *(void *)(v8 - 8);
  v2[1400] = sub_A5B8();
  v2[1401] = sub_A5B8();
  v2[1402] = sub_A5B8();
  v2[1403] = sub_A5B8();
  v2[1404] = sub_A5B8();
  v2[1405] = sub_A5B8();
  v2[1406] = sub_A5B8();
  v2[1407] = sub_A5B8();
  uint64_t v9 = sub_3730C();
  v2[1408] = sub_36390(v9);
  uint64_t v10 = sub_A8E4();
  v2[1409] = v10;
  v2[1410] = *(void *)(v10 - 8);
  v2[1411] = sub_A5B8();
  v2[1412] = sub_A5B8();
  uint64_t v11 = sub_D984();
  v2[1413] = v11;
  v2[1414] = *(void *)(v11 - 8);
  v2[1415] = sub_A5B8();
  v2[1416] = sub_A5B8();
  v2[1417] = sub_A5B8();
  v2[1418] = sub_A5B8();
  v2[1419] = sub_A5B8();
  v2[1420] = sub_A5B8();
  v2[1421] = sub_A5B8();
  v2[1422] = sub_A5B8();
  v2[1423] = sub_A5B8();
  v2[1424] = sub_A5B8();
  v2[1425] = sub_A5B8();
  v2[1426] = sub_A5B8();
  v2[1427] = sub_A5B8();
  v2[1428] = sub_A5B8();
  v2[1429] = sub_A5B8();
  v2[1430] = sub_A5B8();
  v2[1431] = sub_A5B8();
  v2[1432] = sub_A5B8();
  v2[1433] = sub_A5B8();
  v2[1434] = sub_A5B8();
  v2[1435] = sub_A5B8();
  v2[1436] = sub_A5B8();
  v2[1437] = sub_A5B8();
  v2[1438] = sub_A5B8();
  v2[1439] = sub_A5B8();
  v2[1440] = sub_A5B8();
  v2[1441] = sub_A5B8();
  v2[1442] = sub_A5B8();
  v2[1443] = sub_A5B8();
  v2[1444] = sub_A5B8();
  v2[1445] = sub_A5B8();
  v2[1446] = sub_A5B8();
  v2[1447] = sub_A5B8();
  v2[1448] = sub_A5B8();
  v2[1449] = sub_A5B8();
  v2[1450] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

#error "2AFF0: call analysis failed (funcsize=668)"
uint64_t sub_2B150()
{
  sub_36A5C();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_2B17C()
{
  uint64_t v1092 = v4 | 0x1000000000000000LL;
  uint64_t v1093 = v5;
  uint64_t v1091 = v1;
  uint64_t v6 = *(void *)(v1 + 11720);
  uint64_t v7 = *(uint64_t **)(v1 + 11000);
  *(void *)(v1 + 11728) = v7;
  swift_unknownObjectRelease(v6);
  uint64_t v8 = sub_36D1C(*v7);
  switch(v8)
  {
    case 'e':
      uint64_t v9 = *(os_log_s **)(v1 + 11688);
      uint64_t v10 = *(void *)(v1 + 11584);
      uint64_t v11 = *(uint8_t **)(v1 + 11304);
      sub_A5DC((uint64_t)v9, v1 + 9800);
      sub_A9B8();
      sub_AB5C();
      os_log_type_t v12 = sub_AB70();
      if (sub_A634(v12))
      {
        uint64_t v13 = (_WORD *)sub_3635C();
        sub_37364(v13);
        sub_232EC( &dword_0,  v9,  (os_log_type_t)v10,  "Received .requiresAuthorization, returning Output with FlowActivity for Requires Auth",  v11);
        sub_5050((uint64_t)v11);
      }

      uint64_t v14 = *(void **)(v1 + 11712);
      uint64_t v15 = *(void (**)(uint64_t))(v1 + 11704);
      uint64_t v16 = *(void *)(v1 + 11264);
      uint64_t v17 = *(void *)(v1 + 11048);

      uint64_t v18 = sub_37104();
      v15(v18);
      sub_A304(v17 + 24, v1 + 216);
      sub_A13C((_OWORD *)(v17 + 64), (_OWORD *)(v1 + 256));
      uint64_t v19 = sub_AA80();
      sub_A72C(v19);
      uint64_t v20 = sub_A9C8();
      *(void *)(v1 + 440) = v19;
      *(void *)(v1 + 448) = &protocol witness table for ResponseFactory;
      *(void *)(v1 + 416) = v20;
      type metadata accessor for WellnessCATsSimple(0LL);
      sub_A768();
      uint64_t v21 = sub_AAF8(v16);
      type metadata accessor for WellnessCATs(0LL);
      sub_A768();
      uint64_t v22 = sub_AAF0(v16);
      *(_BYTE *)(v1 + 208) = 88;
      *(void *)(v1 + 456) = v21;
      *(void *)(v1 + 464) = v22;
      sub_A294();
      sub_36C08();

      sub_A2D0((void *)(v1 + 208));
      goto LABEL_46;
    case 'f':
      goto LABEL_10;
    case 'g':
      sub_36BE8();
      uint64_t v38 = *(void *)(v1 + 11304);
      sub_A5DC(v0, v39);
      sub_36170();
      sub_23374();
      os_log_type_t v40 = sub_AB70();
      if (sub_A988(v40))
      {
        uint64_t v41 = (_WORD *)sub_3635C();
        sub_366C0(v41);
        sub_A940(&dword_0, v42, v43, "Got multiple meds (failure for generic med logging), creating output.");
        sub_5050(v38);
      }

      sub_36CAC();
      sub_36D90();
      *(void *)(v1 + 1191sub_D878(v0 + 2) = *(void *)(v2 + 336);
      sub_363E8();
      uint64_t v44 = (void *)sub_36B20();
      *(void *)(v1 + 11920) = v44;
      sub_37160(v44, (uint64_t)sub_2CABC);
      sub_36CF4();
      return sub_131324();
    case 'h':
      goto LABEL_7;
    case 'i':
      uint64_t v45 = *(void *)(v1 + 11688);
      uint64_t v46 = *(uint8_t **)(v1 + 11496);
      uint64_t v47 = *(void *)(v1 + 11048);
      uint64_t v48 = *(void *)(v47 + 224);
      uint64_t v49 = *(void *)(v47 + 232);
      v47 += 224LL;
      uint64_t v50 = *(void *)(v47 + 16);
      uint64_t v51 = *(void *)(v47 + 24);
      uint64_t v52 = *(void *)(v47 + 32);
      uint64_t v53 = *(void *)(v47 + 40);
      uint64_t v54 = *(void *)(v47 + 48);
      uint64_t v55 = *(void *)(v47 + 56);
      unsigned __int8 v56 = *(_BYTE *)(v47 + 64);
      *(void *)uint64_t v47 = 4LL;
      *(_OWORD *)(v47 + 8) = 0u;
      *(_OWORD *)(v47 + 24) = 0u;
      *(_OWORD *)(v47 + 40) = 0u;
      *(void *)(v47 + 56) = 0LL;
      *(_BYTE *)(v47 + 64) = -64;
      sub_3561C(v48, v49, v50, v51, v52, v53, v54, v55, v56);
      sub_A5DC(v45, v1 + 9992);
      sub_36CDC();
      sub_AB5C();
      os_log_type_t v57 = sub_AB70();
      if (sub_232DC(v57))
      {
        uint64_t v58 = (_WORD *)sub_3635C();
        sub_36A44(v58);
        sub_232EC( &dword_0,  (os_log_s *)(v1 + 9992),  (os_log_type_t)v45,  "got state .awaitingConfirmationLogAsScheduled inside GenericMedLoggingFlow",  v46);
        sub_5050((uint64_t)v46);
      }

      uint64_t v59 = sub_37044();
      sub_36D9C(v59, (SEL *)&selRef_matchingMeds);
      if (v60)
      {
        uint64_t v61 = v60;
        v1086 = *(void **)(v1 + 11712);
        uint64_t v62 = *(void *)(v1 + 11048);
        uint64_t v63 = sub_363E8();
        getMedStatus(from:)(v63, v64, v65, v66, v67, v68);
        char v70 = v69;
        sub_3652C();
        sub_A13C((_OWORD *)(v62 + 64), (_OWORD *)(v1 + 4152));
        uint64_t v71 = sub_BFB20();
        uint64_t v72 = sub_BFB34();
        uint64_t v73 = sub_AA80();
        sub_A72C(v73);
        uint64_t v74 = sub_A9C8();
        uint64_t v75 = type metadata accessor for LogMedAsScheduledConfirmationStrategy();
        uint64_t v76 = sub_20308(v75, 264LL);
        uint64_t v77 = sub_358E4(0LL, 0LL, v70 & 1, v61, (const void *)(v1 + 4152), v71, v72, v74, v76);
        swift_retain();
        static OutputPublisherFactory.makeOutputPublisherAsync()(v1090);
        uint64_t v78 = sub_494C(&qword_18AEA0);
        sub_A72C(v78);
        sub_35A68( &qword_18AEC8,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for LogMedAsScheduledConfirmationStrategy);
        *(void *)(v1 + 1103sub_D878(v0 + 2) = PromptForValueFlowAsync.init<A>(strategy:outputPublisher:)(v77, v1090, v75, v79);
        sub_3586C(&qword_18AEB0, &qword_18AEA0);
        sub_372CC();
        static ExecuteResponse.ongoing<A>(next:childCompletion:)(v1 + 11032, sub_35998, v62, v78);

        sub_37110();
        sub_367AC();
LABEL_38:
        swift_release();
        goto LABEL_46;
      }

      char v124 = (uint8_t *)(v1 + 4312);
      uint64_t v125 = (void *)(v1 + 4472);
      uint64_t v0 = *(void *)(v1 + 11688);
      sub_A5DC(v0, v1 + 9776);
      sub_372BC();
      sub_A86C();
      os_log_type_t v126 = sub_AB70();
      BOOL v127 = sub_37140(v126);
      char v128 = *(void (**)(uint64_t))(v1 + 11704);
      if (!v127) {
        goto LABEL_44;
      }
      uint64_t v129 = (_WORD *)sub_3635C();
      sub_36E3C(v129);
      sub_36F18((uint64_t)_swiftEmptyArrayStorage);
      char v130 = "Needed confirmation log as scheduled but intentResponse.matchingMeds was nil.";
      goto LABEL_43;
    case 'j':
      sub_3723C();
      uint64_t v80 = *(void *)(v1 + 11576);
      uint64_t v81 = *(uint8_t **)(v1 + 11304);
      sub_A5DC(v0, v82);
      sub_36868();
      sub_A86C();
      os_log_type_t v83 = sub_AB70();
      if (sub_232DC(v83))
      {
        uint64_t v84 = (_WORD *)sub_3635C();
        sub_36A44(v84);
        sub_232EC( &dword_0,  (os_log_s *)v0,  (os_log_type_t)v80,  "Received .needsSingleMedLogging, returning SpecificMedLoggingFlow",  v81);
        sub_5050((uint64_t)v81);
      }

      uint64_t v85 = sub_37044();
      sub_36D9C(v85, (SEL *)&selRef_matchingMeds);
      if (!v86) {
        goto LABEL_41;
      }
      sub_36C3C();
      if (v88)
      {
        uint64_t v89 = sub_37358(v87);
        if (v89) {
          goto LABEL_25;
        }
      }

      else
      {
        uint64_t v89 = *(void *)(v87 + 16);
        if (v89)
        {
LABEL_25:
          sub_370C8(v89, (v0 & 0xC000000000000001LL) == 0);
          if ((v0 & 0xC000000000000001LL) != 0) {
            uint64_t v90 = sub_370B0();
          }
          else {
            uint64_t v90 = (uint64_t)sub_37388();
          }
          uint64_t v91 = (void *)v90;
          sub_249D4();
          sub_DA4E4(v91);
          if (v93)
          {
            uint64_t v94 = v92;
            uint64_t v95 = v93;
            uint64_t v96 = *(void *)(v1 + 11048);
            uint64_t v97 = *(void *)(v96 + 16);
            sub_A304(v96 + 24, v1 + 7264);
            sub_A13C((_OWORD *)(v96 + 64), (_OWORD *)(v1 + 472));
            uint64_t v1083 = v97;
            swift_retain();
            sub_DA4D8(v91);
            uint64_t v99 = v98;
            uint64_t v101 = v100;
            id v102 = [v91 strength];
            uint64_t v103 = v102;
            if (v102)
            {
              [v102 doubleValue];
              uint64_t v105 = v104;
            }

            else
            {
              uint64_t v105 = 0LL;
            }

            v1081 = *(void **)(v1 + 11712);
            type metadata accessor for SpecificMedLoggingFlow();
            sub_DA4F0(v91);
            *(void *)(v1 + 703sub_D878(v0 + 2) = v99;
            *(void *)(v1 + 7040) = v101;
            *(void *)(v1 + 7048) = v94;
            *(void *)(v1 + 7056) = v95;
            *(void *)(v1 + 7064) = v105;
            *(void *)(v1 + 707sub_D878(v0 + 2) = v103 == 0LL;
            *(void *)(v1 + 7080) = v131;
            *(void *)(v1 + 7088) = v132;
            *(_BYTE *)(v1 + 7096) = 0;
            uint64_t v1088 = 0LL;
            memset(v1087, 0, sizeof(v1087));
            sub_30FBC(v1089);
            uint64_t v133 = sub_31020( (void (*)(void))type metadata accessor for WellnessLoggingCATsSimple,  (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
            uint64_t v134 = sub_31020( (void (*)(void))type metadata accessor for WellnessCATs,  (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
            id v135 = sub_3107C();
            sub_310A0(v1090);
            *(void *)(v1 + 11016) = sub_BF9D4( v1083,  v1 + 7264,  v1 + 472,  v1 + 7032,  (uint64_t)v1089,  v133,  v134,  (uint64_t)v135,  (uint64_t)v1090,  (uint64_t)v1087);
            sub_35A68( &qword_18AF00,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for SpecificMedLoggingFlow);
            static ExecuteResponse.complete<A>(next:)(v1 + 11016);

            goto LABEL_38;
          }

          goto LABEL_41;
        }
      }

      sub_249D4();
LABEL_41:
      char v124 = (uint8_t *)(v1 + 792);
      uint64_t v125 = (void *)(v1 + 952);
      sub_3723C();
      sub_A5DC(v0, v136);
      sub_372BC();
      sub_A86C();
      os_log_type_t v137 = sub_A898();
      BOOL v138 = sub_37140(v137);
      char v128 = *(void (**)(uint64_t))(v1 + 11704);
      if (v138)
      {
        uint64_t v139 = (_WORD *)sub_3635C();
        sub_36E3C(v139);
        sub_36F18((uint64_t)_swiftEmptyArrayStorage);
        char v130 = ".needsSingleMedLogging case: failed to unpack matchingMed, returning GenericErrorFlow.";
LABEL_43:
        sub_232EC(&dword_0, (os_log_s *)v0, v3, v130, v124);
        uint64_t v140 = (uint64_t)v124;
        char v124 = v1085;
        sub_5050(v140);
      }

LABEL_44:
      uint64_t v141 = sub_37104();
      v128(v141);
      uint64_t v142 = *(void **)(v1 + 11712);
      sub_A13C((_OWORD *)(*(void *)(v1 + 11048) + 64LL), v124);
      sub_5A9B0(v124, v125);
      sub_A178();
      static ExecuteResponse.complete<A>(next:)(v125);

      uint64_t v37 = v125;
LABEL_45:
      sub_A1B4(v37);
LABEL_46:
      uint64_t v143 = sub_36998();
      uint64_t v510 = v145;
      uint64_t v543 = v144;
      uint64_t v575 = *(void *)(v1 + 11504);
      uint64_t v606 = *(void *)(v1 + 11496);
      uint64_t v636 = *(void *)(v1 + 11488);
      uint64_t v665 = *(void *)(v1 + 11480);
      uint64_t v693 = *(void *)(v1 + 11472);
      uint64_t v720 = *(void *)(v1 + 11464);
      uint64_t v746 = *(void *)(v1 + 11456);
      uint64_t v771 = *(void *)(v1 + 11448);
      uint64_t v795 = *(void *)(v1 + 11440);
      uint64_t v818 = *(void *)(v1 + 11432);
      uint64_t v840 = *(void *)(v1 + 11424);
      uint64_t v861 = *(void *)(v1 + 11416);
      uint64_t v881 = *(void *)(v1 + 11408);
      uint64_t v900 = *(void *)(v1 + 11400);
      uint64_t v918 = *(void *)(v1 + 11392);
      uint64_t v935 = *(void *)(v1 + 11384);
      uint64_t v951 = *(void *)(v1 + 11376);
      uint64_t v966 = *(void *)(v1 + 11368);
      uint64_t v980 = *(void *)(v1 + 11360);
      uint64_t v993 = *(void *)(v1 + 11352);
      uint64_t v1005 = *(void *)(v1 + 11344);
      uint64_t v1016 = *(void *)(v1 + 11336);
      uint64_t v1026 = *(void *)(v1 + 11328);
      uint64_t v1035 = *(void *)(v1 + 11320);
      uint64_t v1043 = *(void *)(v1 + 11296);
      uint64_t v1050 = *(void *)(v1 + 11288);
      uint64_t v1056 = *(void *)(v1 + 11264);
      uint64_t v1061 = *(void *)(v1 + 11256);
      uint64_t v1065 = *(void *)(v1 + 11248);
      uint64_t v1068 = *(void *)(v1 + 11240);
      uint64_t v1070 = *(void *)(v1 + 11232);
      uint64_t v1071 = *(void *)(v1 + 11224);
      uint64_t v1072 = *(void *)(v1 + 11216);
      uint64_t v1073 = *(void *)(v1 + 11208);
      uint64_t v1074 = *(void *)(v1 + 11200);
      uint64_t v1075 = *(void *)(v1 + 11176);
      uint64_t v1076 = *(void *)(v1 + 11168);
      uint64_t v1077 = *(void *)(v1 + 11144);
      uint64_t v1078 = *(void *)(v1 + 11136);
      uint64_t v1079 = *(void *)(v1 + 11128);
      uint64_t v1080 = *(void *)(v1 + 11120);
      uint64_t v1082 = *(void *)(v1 + 11112);
      uint64_t v1084 = *(void *)(v1 + 11096);
      swift_task_dealloc(v143);
      sub_A760();
      sub_A7C8();
      sub_A67C();
      sub_A78C();
      sub_A8F4();
      sub_A85C();
      sub_A864();
      sub_A910();
      uint64_t v146 = sub_A8EC();
      uint64_t v154 = sub_A854(v146, v147, v148, v149, v150, v151, v152, v153, v411, v444, v477, v510);
      uint64_t v162 = sub_A84C(v154, v155, v156, v157, v158, v159, v160, v161, v412, v445, v478, v511, v543);
      uint64_t v170 = sub_A844(v162, v163, v164, v165, v166, v167, v168, v169, v413, v446, v479, v512, v544, v575);
      uint64_t v178 = sub_A83C(v170, v171, v172, v173, v174, v175, v176, v177, v414, v447, v480, v513, v545, v576, v606);
      uint64_t v186 = sub_A95C(v178, v179, v180, v181, v182, v183, v184, v185, v415, v448, v481, v514, v546, v577, v607, v636);
      uint64_t v194 = sub_A954( v186,  v187,  v188,  v189,  v190,  v191,  v192,  v193,  v416,  v449,  v482,  v515,  v547,  v578,  v608,  v637,  v665);
      uint64_t v202 = sub_A938( v194,  v195,  v196,  v197,  v198,  v199,  v200,  v201,  v417,  v450,  v483,  v516,  v548,  v579,  v609,  v638,  v666,  v693);
      uint64_t v210 = sub_A930( v202,  v203,  v204,  v205,  v206,  v207,  v208,  v209,  v418,  v451,  v484,  v517,  v549,  v580,  v610,  v639,  v667,  v694,  v720);
      uint64_t v218 = sub_A928( v210,  v211,  v212,  v213,  v214,  v215,  v216,  v217,  v419,  v452,  v485,  v518,  v550,  v581,  v611,  v640,  v668,  v695,  v721,  v746);
      uint64_t v226 = sub_A920( v218,  v219,  v220,  v221,  v222,  v223,  v224,  v225,  v420,  v453,  v486,  v519,  v551,  v582,  v612,  v641,  v669,  v696,  v722,  v747,  v771);
      uint64_t v234 = sub_36374( v226,  v227,  v228,  v229,  v230,  v231,  v232,  v233,  v421,  v454,  v487,  v520,  v552,  v583,  v613,  v642,  v670,  v697,  v723,  v748,  v772,  v795);
      uint64_t v242 = sub_3636C( v234,  v235,  v236,  v237,  v238,  v239,  v240,  v241,  v422,  v455,  v488,  v521,  v553,  v584,  v614,  v643,  v671,  v698,  v724,  v749,  v773,  v796,  v818);
      uint64_t v250 = sub_36364( v242,  v243,  v244,  v245,  v246,  v247,  v248,  v249,  v423,  v456,  v489,  v522,  v554,  v585,  v615,  v644,  v672,  v699,  v725,  v750,  v774,  v797,  v819,  v840);
      uint64_t v258 = sub_363F0( v250,  v251,  v252,  v253,  v254,  v255,  v256,  v257,  v424,  v457,  v490,  v523,  v555,  v586,  v616,  v645,  v673,  v700,  v726,  v751,  v775,  v798,  v820,  v841,  v861);
      uint64_t v266 = sub_36430( v258,  v259,  v260,  v261,  v262,  v263,  v264,  v265,  v425,  v458,  v491,  v524,  v556,  v587,  v617,  v646,  v674,  v701,  v727,  v752,  v776,  v799,  v821,  v842,  v862,  v881);
      uint64_t v274 = sub_36428( v266,  v267,  v268,  v269,  v270,  v271,  v272,  v273,  v426,  v459,  v492,  v525,  v557,  v588,  v618,  v647,  v675,  v702,  v728,  v753,  v777,  v800,  v822,  v843,  v863,  v882,  v900);
      uint64_t v282 = sub_36478( v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v427,  v460,  v493,  v526,  v558,  v589,  v619,  v648,  v676,  v703,  v729,  v754,  v778,  v801,  v823,  v844,  v864,  v883,  v901,  v918);
      uint64_t v290 = sub_36524( v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v428,  v461,  v494,  v527,  v559,  v590,  v620,  v649,  v677,  v704,  v730,  v755,  v779,  v802,  v824,  v845,  v865,  v884,  v902,  v919,  v935);
      uint64_t v298 = sub_3651C( v290,  v291,  v292,  v293,  v294,  v295,  v296,  v297,  v429,  v462,  v495,  v528,  v560,  v591,  v621,  v650,  v678,  v705,  v731,  v756,  v780,  v803,  v825,  v846,  v866,  v885,  v903,  v920,  v936,  v951);
      uint64_t v306 = sub_36514( v298,  v299,  v300,  v301,  v302,  v303,  v304,  v305,  v430,  v463,  v496,  v529,  v561,  v592,  v622,  v651,  v679,  v706,  v732,  v757,  v781,  v804,  v826,  v847,  v867,  v886,  v904,  v921,  v937,  v952,  v966);
      uint64_t v314 = sub_3650C( v306,  v307,  v308,  v309,  v310,  v311,  v312,  v313,  v431,  v464,  v497,  v530,  v562,  v593,  v623,  v652,  v680,  v707,  v733,  v758,  v782,  v805,  v827,  v848,  v868,  v887,  v905,  v922,  v938,  v953,  v967,  v980);
      uint64_t v322 = sub_36504( v314,  v315,  v316,  v317,  v318,  v319,  v320,  v321,  v432,  v465,  v498,  v531,  v563,  v594,  v624,  v653,  v681,  v708,  v734,  v759,  v783,  v806,  v828,  v849,  v869,  v888,  v906,  v923,  v939,  v954,  v968,  v981,  v993);
      uint64_t v330 = sub_364FC( v322,  v323,  v324,  v325,  v326,  v327,  v328,  v329,  v433,  v466,  v499,  v532,  v564,  v595,  v625,  v654,  v682,  v709,  v735,  v760,  v784,  v807,  v829,  v850,  v870,  v889,  v907,  v924,  v940,  v955,  v969,  v982,  v994,  v1005);
      uint64_t v338 = sub_364F4( v330,  v331,  v332,  v333,  v334,  v335,  v336,  v337,  v434,  v467,  v500,  v533,  v565,  v596,  v626,  v655,  v683,  v710,  v736,  v761,  v785,  v808,  v830,  v851,  v871,  v890,  v908,  v925,  v941,  v956,  v970,  v983,  v995,  v1006,  v1016);
      uint64_t v346 = sub_364EC( v338,  v339,  v340,  v341,  v342,  v343,  v344,  v345,  v435,  v468,  v501,  v534,  v566,  v597,  v627,  v656,  v684,  v711,  v737,  v762,  v786,  v809,  v831,  v852,  v872,  v891,  v909,  v926,  v942,  v957,  v971,  v984,  v996,  v1007,  v1017,  v1026);
      uint64_t v354 = sub_364E4( v346,  v347,  v348,  v349,  v350,  v351,  v352,  v353,  v436,  v469,  v502,  v535,  v567,  v598,  v628,  v657,  v685,  v712,  v738,  v763,  v787,  v810,  v832,  v853,  v873,  v892,  v910,  v927,  v943,  v958,  v972,  v985,  v997,  v1008,  v1018,  v1027,  v1035);
      uint64_t v362 = sub_364DC( v354,  v355,  v356,  v357,  v358,  v359,  v360,  v361,  v437,  v470,  v503,  v536,  v568,  v599,  v629,  v658,  v686,  v713,  v739,  v764,  v788,  v811,  v833,  v854,  v874,  v893,  v911,  v928,  v944,  v959,  v973,  v986,  v998,  v1009,  v1019,  v1028,  v1036,  v1043);
      uint64_t v370 = sub_364D4( v362,  v363,  v364,  v365,  v366,  v367,  v368,  v369,  v438,  v471,  v504,  v537,  v569,  v600,  v630,  v659,  v687,  v714,  v740,  v765,  v789,  v812,  v834,  v855,  v875,  v894,  v912,  v929,  v945,  v960,  v974,  v987,  v999,  v1010,  v1020,  v1029,  v1037,  v1044,  v1050);
      uint64_t v378 = sub_366F8( v370,  v371,  v372,  v373,  v374,  v375,  v376,  v377,  v439,  v472,  v505,  v538,  v570,  v601,  v631,  v660,  v688,  v715,  v741,  v766,  v790,  v813,  v835,  v856,  v876,  v895,  v913,  v930,  v946,  v961,  v975,  v988,  v1000,  v1011,  v1021,  v1030,  v1038,  v1045,  v1051,  v1056);
      uint64_t v386 = sub_366F0( v378,  v379,  v380,  v381,  v382,  v383,  v384,  v385,  v440,  v473,  v506,  v539,  v571,  v602,  v632,  v661,  v689,  v716,  v742,  v767,  v791,  v814,  v836,  v857,  v877,  v896,  v914,  v931,  v947,  v962,  v976,  v989,  v1001,  v1012,  v1022,  v1031,  v1039,  v1046,  v1052,  v1057,  v1061);
      uint64_t v394 = sub_36B90( v386,  v387,  v388,  v389,  v390,  v391,  v392,  v393,  v441,  v474,  v507,  v540,  v572,  v603,  v633,  v662,  v690,  v717,  v743,  v768,  v792,  v815,  v837,  v858,  v878,  v897,  v915,  v932,  v948,  v963,  v977,  v990,  v1002,  v1013,  v1023,  v1032,  v1040,  v1047,  v1053,  v1058,  v1062,  v1065);
      uint64_t v402 = sub_36EF4( v394,  v395,  v396,  v397,  v398,  v399,  v400,  v401,  v442,  v475,  v508,  v541,  v573,  v604,  v634,  v663,  v691,  v718,  v744,  v769,  v793,  v816,  v838,  v859,  v879,  v898,  v916,  v933,  v949,  v964,  v978,  v991,  v1003,  v1014,  v1024,  v1033,  v1041,  v1048,  v1054,  v1059,  v1063,  v1066,  v1068);
      sub_36EEC( v402,  v403,  v404,  v405,  v406,  v407,  v408,  v409,  v443,  v476,  v509,  v542,  v574,  v605,  v635,  v664,  v692,  v719,  v745,  v770,  v794,  v817,  v839,  v860,  v880,  v899,  v917,  v934,  v950,  v965,  v979,  v992,  v1004,  v1015,  v1025,  v1034,  v1042,  v1049,  v1055,  v1060,  v1064,  v1067,  v1069,  v1070);
      swift_task_dealloc(v1071);
      swift_task_dealloc(v1072);
      swift_task_dealloc(v1073);
      swift_task_dealloc(v1074);
      swift_task_dealloc(v1075);
      swift_task_dealloc(v1076);
      swift_task_dealloc(v1077);
      swift_task_dealloc(v1078);
      swift_task_dealloc(v1079);
      swift_task_dealloc(v1080);
      swift_task_dealloc(v1082);
      swift_task_dealloc(v1084);
      sub_36B88();
      sub_366E8();
      sub_3677C();
      sub_36588();
      sub_36CF4();
      __asm { BR              X0 }

      return result;
    default:
      if (v8 == 4)
      {
        sub_3723C();
        uint64_t v106 = *(void *)(v1 + 11560);
        uint64_t v107 = *(uint8_t **)(v1 + 11304);
        sub_A5DC(v0, v108);
        sub_36868();
        uint64_t v109 = (os_log_s *)sub_A86C();
        os_log_type_t v110 = static os_log_type_t.debug.getter();
        if (sub_37314(v110))
        {
          uint64_t v111 = (_WORD *)sub_3635C();
          sub_36A44(v111);
          sub_232EC(&dword_0, v109, (os_log_type_t)v106, "Received successful intent response, creating output.", v107);
          sub_5050((uint64_t)v107);
        }

        sub_37400();
        uint64_t v112 = sub_374C4();
        sub_36D9C(v112, (SEL *)&selRef_matchingMedsBeforeUpdate);
        sub_37198(v113, (uint64_t)_swiftEmptyArrayStorage);
        sub_2A184();
        uint64_t v114 = sub_37370();
        getMedStatus(from:)(v114, v115, v116, v117, v118, v119);
        *(_BYTE *)(v1 + 7097) = v120 & 1;
        sub_37034();
        *(void *)(v1 + 11736) = *(void *)(v0 + 336);
        sub_363E8();
        char v121 = (void *)sub_36B20();
        *(void *)(v1 + 11744) = v121;
        sub_37170(v121, (uint64_t)sub_2BE94);
        sub_36CF4();
        return sub_1311F4(v122, v123);
      }

      else
      {
        if (v8 != 5)
        {
LABEL_10:
          uint64_t v31 = *(os_log_s **)(v1 + 11688);
          uint64_t v32 = *(void *)(v1 + 11480);
          int v33 = *(uint8_t **)(v1 + 11304);
          sub_A5DC((uint64_t)v31, v1 + 10040);
          sub_A9B8();
          sub_AB5C();
          os_log_type_t v34 = sub_AB70();
          if (sub_A634(v34))
          {
            uint64_t v35 = (_WORD *)sub_3635C();
            sub_37364(v35);
            sub_232EC( &dword_0,  v31,  (os_log_type_t)v32,  "Intent response code was not an expected one, returning nil output.",  v33);
            sub_5050((uint64_t)v33);
          }

          int v36 = *(void **)(v1 + 11712);
          sub_36C80();
          sub_36CC4();
          sub_37000();
          sub_A178();
          sub_36F0C();

          uint64_t v37 = (void *)(v1 + 4792);
          goto LABEL_45;
        }

  if (v11 >= 0) {
    uint64_t v47 = v3;
  }
  else {
    uint64_t v47 = v11;
  }
  sub_1EB6C();
  uint64_t v48 = _CocoaArrayWrapper.endIndex.getter(v47);
  uint64_t result = sub_249D4();
  if (!v48) {
    goto LABEL_48;
  }
LABEL_26:
  if ((v11 & 0xC000000000000001LL) != 0)
  {
    sub_370B0();
    goto LABEL_29;
  }

  if (*(void *)(v3 + 16))
  {
    swift_retain();
LABEL_29:
    sub_249D4();
    dispatch thunk of CodeGenListEntry.entry.getter(v57);
    os_log_type_t v34 = sub_36EBC();
    if (!v57[0]) {
      goto LABEL_49;
    }
    uint64_t v35 = dispatch thunk of UsoEntity_common_MeasurementComponent.unit.getter(v34);
    int v36 = sub_3652C();
    if (!v35) {
      goto LABEL_49;
    }
    uint64_t v37 = dispatch thunk of UsoEntity_common_MeasurementUnit.name.getter(v36);
    uint64_t v39 = v38;
    sub_36EBC();
    if (!v39) {
      goto LABEL_49;
    }
    uint64_t v31 = 1702063972LL;
    if (v37 == 1702063972 && v39 == 0xE400000000000000LL)
    {
      sub_249D4();
    }

    else
    {
      uint64_t v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, 1702063972LL, 0xE400000000000000LL, 0LL);
      sub_249D4();
      if ((v41 & 1) == 0) {
        goto LABEL_49;
      }
    }

    sub_A5DC(v12, (uint64_t)v57);
    uint64_t v42 = v55;
    uint64_t v43 = v54(v55, v12, v2);
    uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
    uint64_t v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)sub_A5E8(2LL);
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl(&dword_0, v44, v45, "got a raw name for dosageUnit but no identifiers", v46, 2u);
      sub_5050((uint64_t)v46);
    }

    ((void (*)(char *, uint64_t))v6)(v42, v2);
    sub_39BAC();
    return v31;
  }

  __break(1u);
  return result;
}

  sub_1C730();
}

LABEL_7:
        sub_36BE8();
        uint64_t v23 = *(void *)(v1 + 11304);
        sub_A5DC(v0, v24);
        sub_36170();
        sub_23374();
        os_log_type_t v25 = sub_AB70();
        if (sub_A988(v25))
        {
          uint64_t v26 = (_WORD *)sub_3635C();
          sub_366C0(v26);
          sub_A940(&dword_0, v27, v28, "Got .noMedsFound or .failure, creating output.");
          sub_5050(v23);
        }

        sub_36CAC();
        sub_36D90();
        *(void *)(v1 + 11968) = *(void *)(v2 + 336);
        sub_363E8();
        uint64_t v29 = (void *)sub_36B20();
        *(void *)(v1 + 11976) = v29;
        sub_37160(v29, (uint64_t)sub_2D0D8);
        sub_36CF4();
        return sub_1312C4();
      }
  }

  sub_D8FC();
}

    uint64_t v7 = *a2;
    uint64_t v8 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 3sub_D878(v0 + 2) = v8;
    *(_OWORD *)a1 = v7;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v4);
    goto LABEL_7;
  }

  *(_BYTE *)a1 = *(_BYTE *)a2;
  sub_7030(v4, (void *)a2 + 1);
  return a1;
}

  uint64_t v24 = a2[3];
  os_log_type_t v25 = a2[4];
  sub_500C(a2, v24);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v25 + 8))(&v71, v24, v25);
  uint64_t v26 = v72;
  uint64_t v27 = v73;
  sub_500C(&v71, v72);
  uint64_t v28 = dispatch thunk of DeviceState.isPhone.getter(v26, v27);
  sub_A304((uint64_t)a2, (uint64_t)v87);
  if ((v28 & 1) != 0)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v87);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(&v71);
    goto LABEL_10;
  }

  uint64_t v29 = v88;
  uint64_t v30 = v89;
  sub_500C(v87, (uint64_t)v88);
  (*(void (**)(void *__return_ptr, ValueMetadata *, unint64_t))(v30 + 8))(v84, v29, v30);
  uint64_t v31 = v85;
  uint64_t v32 = v86;
  sub_500C(v84, v85);
  int v33 = dispatch thunk of DeviceState.isPad.getter(v31, v32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v84);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v87);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(&v71);
  if ((v33 & 1) != 0)
  {
LABEL_10:
    if ((HealthApps.isInstalled.getter(11LL) & 1) != 0) {
      goto LABEL_11;
    }
LABEL_14:
    sub_A304((uint64_t)a2, (uint64_t)&v71);
    uint64_t v41 = type metadata accessor for ResponseFactory(0LL);
    uint64_t v42 = swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
    uint64_t v43 = ResponseFactory.init()(v42);
    uint64_t v76 = v41;
    uint64_t v77 = &protocol witness table for ResponseFactory;
    uint64_t v74 = v43;
    type metadata accessor for WellnessCATsSimple(0LL);
    static CATOption.defaultMode.getter();
    uint64_t v44 = CATWrapperSimple.__allocating_init(options:globals:)(v12, 0LL);
    type metadata accessor for WellnessCATs(0LL);
    static CATOption.defaultMode.getter();
    uint64_t v45 = CATWrapper.__allocating_init(options:globals:)(v12, 0LL);
    uint64_t v78 = v44;
    uint64_t v79 = v45;
    sub_81C18();
    uint64_t v23 = Flow.eraseToAnyFlow()(&type metadata for InstallAppFlow);
    sub_81BEC(&v71);
    return v23;
  }

uint64_t sub_2BE94()
{
  *(void *)(v0 + 1175sub_D878(v0 + 2) = v2;
  sub_36900(v3);
  swift_release();
  if (v1) {
    sub_36860();
  }
  sub_A964();
  return sub_A810();
}

#error "2BF34: call analysis failed (funcsize=130)"
uint64_t sub_2C0F8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sub_AA10();
  v1[1321] = v0;
  v1[1322] = v2;
  v1[1323] = v3;
  sub_364C8();
  *(void *)(v5 + 11784) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_2C140()
{
  v0[1474] = v0[1322];
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  v0[1475] = v1;
  uint64_t v2 = sub_36408(v1, (uint64_t)sub_2C180);
  return sub_36164(v2, v3);
}

uint64_t sub_2C180()
{
  v1[1324] = v0;
  v1[1325] = v2;
  v1[1326] = v3;
  sub_364C8();
  *(void *)(v5 + 11808) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_2C1C8()
{
  v0[1477] = v0[1325];
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  v0[1478] = v1;
  uint64_t v2 = sub_36540(v1, (uint64_t)sub_2C208);
  return sub_36164(v2, v3);
}

uint64_t sub_2C208()
{
  v1[1327] = v0;
  v1[1328] = v2;
  v1[1329] = v3;
  sub_364C8();
  *(void *)(v5 + 1183sub_D878(v0 + 2) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_2C250()
{
  v0[1480] = v0[1328];
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  v0[1481] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2C29C;
  unint64_t v2 = sub_368E0();
  return sub_36164(v2, v3);
}

uint64_t sub_2C29C()
{
  v1[1330] = v0;
  v1[1331] = v2;
  v1[1332] = v3;
  sub_364C8();
  *(void *)(v5 + 11856) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_2C2E4()
{
  v0[1483] = v0[1331];
  sub_36E8C();
  v0[1484] = v1;
  uint64_t v2 = (void *)swift_task_alloc(dword_18B704);
  v0[1485] = v2;
  uint64_t v3 = sub_36E5C(v2, (uint64_t)sub_2C334);
  return sub_366DC(v3, v4);
}

uint64_t sub_2C334()
{
  v1[1333] = v0;
  v1[1334] = v2;
  v1[1335] = v3;
  sub_364C8();
  *(void *)(v5 + 11888) = v4;
  swift_task_dealloc(v6);
  sub_249D4();
  sub_A964();
  return sub_A5D0();
}

#error "2C550: call analysis failed (funcsize=152)"
uint64_t sub_2C624()
{
  uint64_t v0;
  sub_AA10();
  sub_20264(*(void *)(v0 + 11904));
  sub_2A184();
  sub_AA20();
  sub_A964();
  return sub_A810();
}

uint64_t sub_2C66C()
{
  uint64_t v1 = *(void **)(v0 + 11728);
  uint64_t v864 = *(void *)(v0 + 11664);
  uint64_t v861 = *(void *)(v0 + 11648);
  uint64_t v862 = *(void *)(v0 + 11656);
  uint64_t v859 = *(void *)(v0 + 11632);
  uint64_t v860 = *(void *)(v0 + 11640);
  uint64_t v857 = *(void **)(v0 + 11712);
  uint64_t v858 = *(void *)(v0 + 11624);
  uint64_t v2 = *(void *)(v0 + 11616);
  uint64_t v3 = *(void *)(v0 + 11608);
  sub_371C0();
  uint64_t v863 = *(void *)(v0 + 11080);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v4);
  sub_369CC();
  sub_36CEC(v0 + 7464);
  uint64_t v5 = sub_364BC((uint64_t)&unk_17CE60);
  sub_20004((__int128 *)(v0 + 7304), v5 + 16);
  j___s11SiriKitFlow22OutputPublisherFactoryO04makedE5AsyncAA0deH0_pyFZ(v865);
  *(void *)(v0 + 10960) = SimpleOutputFlowAsync.__allocating_init(outputPublisher:outputGenerator:)( v865,  &unk_18AEF8,  v5);
  static ExecuteResponse.complete<A>(next:)(v0 + 10960);

  sub_3561C(v3, v2, v858, v859, v860, v861, v862, v864, 0xC0u);
  sub_373A8();
  sub_36EC4();
  sub_26F04(v863, type metadata accessor for GenericMedCompletedLogModel);
  sub_37458(v6, type metadata accessor for SnippetHeaderModel);
  sub_37450(v7, &qword_189CF8);
  sub_36A34();
  sub_367AC();
  sub_35FF4();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  sub_A78C();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  uint64_t v8 = sub_A8EC();
  uint64_t v16 = sub_A888(v8, v9, v10, v11, v12, v13, v14, v15, v265, v297, v329);
  uint64_t v24 = sub_A854(v16, v17, v18, v19, v20, v21, v22, v23, v266, v298, v330, v361);
  uint64_t v32 = sub_A84C(v24, v25, v26, v27, v28, v29, v30, v31, v267, v299, v331, v362, v392);
  uint64_t v40 = sub_A844(v32, v33, v34, v35, v36, v37, v38, v39, v268, v300, v332, v363, v393, v422);
  uint64_t v48 = sub_A83C(v40, v41, v42, v43, v44, v45, v46, v47, v269, v301, v333, v364, v394, v423, v451);
  uint64_t v56 = sub_A95C(v48, v49, v50, v51, v52, v53, v54, v55, v270, v302, v334, v365, v395, v424, v452, v479);
  uint64_t v64 = sub_A954(v56, v57, v58, v59, v60, v61, v62, v63, v271, v303, v335, v366, v396, v425, v453, v480, v506);
  uint64_t v72 = sub_A938(v64, v65, v66, v67, v68, v69, v70, v71, v272, v304, v336, v367, v397, v426, v454, v481, v507, v532);
  uint64_t v80 = sub_A930( v72,  v73,  v74,  v75,  v76,  v77,  v78,  v79,  v273,  v305,  v337,  v368,  v398,  v427,  v455,  v482,  v508,  v533,  v557);
  uint64_t v88 = sub_A928( v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  v274,  v306,  v338,  v369,  v399,  v428,  v456,  v483,  v509,  v534,  v558,  v581);
  uint64_t v96 = sub_A920( v88,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  v275,  v307,  v339,  v370,  v400,  v429,  v457,  v484,  v510,  v535,  v559,  v582,  v604);
  uint64_t v104 = sub_36374( v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v276,  v308,  v340,  v371,  v401,  v430,  v458,  v485,  v511,  v536,  v560,  v583,  v605,  v626);
  uint64_t v112 = sub_3636C( v104,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v277,  v309,  v341,  v372,  v402,  v431,  v459,  v486,  v512,  v537,  v561,  v584,  v606,  v627,  v647);
  uint64_t v120 = sub_36364( v112,  v113,  v114,  v115,  v116,  v117,  v118,  v119,  v278,  v310,  v342,  v373,  v403,  v432,  v460,  v487,  v513,  v538,  v562,  v585,  v607,  v628,  v648,  v667);
  uint64_t v128 = sub_363F0( v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v279,  v311,  v343,  v374,  v404,  v433,  v461,  v488,  v514,  v539,  v563,  v586,  v608,  v629,  v649,  v668,  v686);
  uint64_t v136 = sub_36430( v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v280,  v312,  v344,  v375,  v405,  v434,  v462,  v489,  v515,  v540,  v564,  v587,  v609,  v630,  v650,  v669,  v687,  v704);
  uint64_t v144 = sub_36428( v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v281,  v313,  v345,  v376,  v406,  v435,  v463,  v490,  v516,  v541,  v565,  v588,  v610,  v631,  v651,  v670,  v688,  v705,  v721);
  uint64_t v152 = sub_36478( v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v282,  v314,  v346,  v377,  v407,  v436,  v464,  v491,  v517,  v542,  v566,  v589,  v611,  v632,  v652,  v671,  v689,  v706,  v722,  v737);
  uint64_t v160 = sub_36524( v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v283,  v315,  v347,  v378,  v408,  v437,  v465,  v492,  v518,  v543,  v567,  v590,  v612,  v633,  v653,  v672,  v690,  v707,  v723,  v738,  v752);
  uint64_t v168 = sub_3651C( v160,  v161,  v162,  v163,  v164,  v165,  v166,  v167,  v284,  v316,  v348,  v379,  v409,  v438,  v466,  v493,  v519,  v544,  v568,  v591,  v613,  v634,  v654,  v673,  v691,  v708,  v724,  v739,  v753,  v766);
  uint64_t v176 = sub_36514( v168,  v169,  v170,  v171,  v172,  v173,  v174,  v175,  v285,  v317,  v349,  v380,  v410,  v439,  v467,  v494,  v520,  v545,  v569,  v592,  v614,  v635,  v655,  v674,  v692,  v709,  v725,  v740,  v754,  v767,  v779);
  uint64_t v184 = sub_3650C( v176,  v177,  v178,  v179,  v180,  v181,  v182,  v183,  v286,  v318,  v350,  v381,  v411,  v440,  v468,  v495,  v521,  v546,  v570,  v593,  v615,  v636,  v656,  v675,  v693,  v710,  v726,  v741,  v755,  v768,  v780,  v791);
  uint64_t v192 = sub_36504( v184,  v185,  v186,  v187,  v188,  v189,  v190,  v191,  v287,  v319,  v351,  v382,  v412,  v441,  v469,  v496,  v522,  v547,  v571,  v594,  v616,  v637,  v657,  v676,  v694,  v711,  v727,  v742,  v756,  v769,  v781,  v792,  v802);
  uint64_t v200 = sub_364FC( v192,  v193,  v194,  v195,  v196,  v197,  v198,  v199,  v288,  v320,  v352,  v383,  v413,  v442,  v470,  v497,  v523,  v548,  v572,  v595,  v617,  v638,  v658,  v677,  v695,  v712,  v728,  v743,  v757,  v770,  v782,  v793,  v803,  v812);
  uint64_t v208 = sub_364F4( v200,  v201,  v202,  v203,  v204,  v205,  v206,  v207,  v289,  v321,  v353,  v384,  v414,  v443,  v471,  v498,  v524,  v549,  v573,  v596,  v618,  v639,  v659,  v678,  v696,  v713,  v729,  v744,  v758,  v771,  v783,  v794,  v804,  v813,  v821);
  uint64_t v216 = sub_364EC( v208,  v209,  v210,  v211,  v212,  v213,  v214,  v215,  v290,  v322,  v354,  v385,  v415,  v444,  v472,  v499,  v525,  v550,  v574,  v597,  v619,  v640,  v660,  v679,  v697,  v714,  v730,  v745,  v759,  v772,  v784,  v795,  v805,  v814,  v822,  v829);
  uint64_t v224 = sub_364E4( v216,  v217,  v218,  v219,  v220,  v221,  v222,  v223,  v291,  v323,  v355,  v386,  v416,  v445,  v473,  v500,  v526,  v551,  v575,  v598,  v620,  v641,  v661,  v680,  v698,  v715,  v731,  v746,  v760,  v773,  v785,  v796,  v806,  v815,  v823,  v830,  v836);
  uint64_t v232 = sub_364DC( v224,  v225,  v226,  v227,  v228,  v229,  v230,  v231,  v292,  v324,  v356,  v387,  v417,  v446,  v474,  v501,  v527,  v552,  v576,  v599,  v621,  v642,  v662,  v681,  v699,  v716,  v732,  v747,  v761,  v774,  v786,  v797,  v807,  v816,  v824,  v831,  v837,  v842);
  uint64_t v240 = sub_364D4( v232,  v233,  v234,  v235,  v236,  v237,  v238,  v239,  v293,  v325,  v357,  v388,  v418,  v447,  v475,  v502,  v528,  v553,  v577,  v600,  v622,  v643,  v663,  v682,  v700,  v717,  v733,  v748,  v762,  v775,  v787,  v798,  v808,  v817,  v825,  v832,  v838,  v843,  v847);
  uint64_t v248 = sub_366F8( v240,  v241,  v242,  v243,  v244,  v245,  v246,  v247,  v294,  v326,  v358,  v389,  v419,  v448,  v476,  v503,  v529,  v554,  v578,  v601,  v623,  v644,  v664,  v683,  v701,  v718,  v734,  v749,  v763,  v776,  v788,  v799,  v809,  v818,  v826,  v833,  v839,  v844,  v848,  v851);
  uint64_t v256 = sub_366F0( v248,  v249,  v250,  v251,  v252,  v253,  v254,  v255,  v295,  v327,  v359,  v390,  v420,  v449,  v477,  v504,  v530,  v555,  v579,  v602,  v624,  v645,  v665,  v684,  v702,  v719,  v735,  v750,  v764,  v777,  v789,  v800,  v810,  v819,  v827,  v834,  v840,  v845,  v849,  v852,  v854);
  sub_36B90( v256,  v257,  v258,  v259,  v260,  v261,  v262,  v263,  v296,  v328,  v360,  v391,  v421,  v450,  v478,  v505,  v531,  v556,  v580,  v603,  v625,  v646,  v666,  v685,  v703,  v720,  v736,  v751,  v765,  v778,  v790,  v801,  v811,  v820,  v828,  v835,  v841,  v846,  v850,  v853,  v855,  v856);
  sub_36B88();
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  return sub_36148(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_2C8DC()
{
  uint64_t v3 = v1[1444];
  sub_A5DC((uint64_t)v0, v4);
  sub_36170();
  sub_23374();
  sub_A898();
  sub_373B0();
  if (sub_36958())
  {
    uint64_t v5 = (_WORD *)sub_3635C();
    sub_3692C(v5);
    sub_369F4();
    sub_232EC( &dword_0,  v0,  (os_log_type_t)v3,  "Failed executing catWrapperSimple.genericMedicationCompletedLog_Dialog, returning nil",  v2);
    sub_5050((uint64_t)v2);
  }

  else
  {
    sub_369F4();
  }

  sub_3747C();
  uint64_t v6 = (void *)v1[1466];
  uint64_t v7 = (void *)v1[1464];
  sub_36590((_OWORD *)(v1[1381] + 64LL));
  sub_36ACC();
  sub_A178();
  sub_36B14();

  sub_36DD8();
  sub_35B4C();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  sub_A78C();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  uint64_t v8 = sub_A8EC();
  uint64_t v16 = sub_AAD8(v8, v9, v10, v11, v12, v13, v14, v15, v266, v298);
  uint64_t v24 = sub_A888(v16, v17, v18, v19, v20, v21, v22, v23, v267, v299, v330);
  uint64_t v32 = sub_A854(v24, v25, v26, v27, v28, v29, v30, v31, v268, v300, v331, v361);
  uint64_t v40 = sub_A84C(v32, v33, v34, v35, v36, v37, v38, v39, v269, v301, v332, v362, v391);
  uint64_t v48 = sub_A844(v40, v41, v42, v43, v44, v45, v46, v47, v270, v302, v333, v363, v392, v420);
  uint64_t v56 = sub_A83C(v48, v49, v50, v51, v52, v53, v54, v55, v271, v303, v334, v364, v393, v421, v448);
  uint64_t v64 = sub_A95C(v56, v57, v58, v59, v60, v61, v62, v63, v272, v304, v335, v365, v394, v422, v449, v475);
  uint64_t v72 = sub_A954(v64, v65, v66, v67, v68, v69, v70, v71, v273, v305, v336, v366, v395, v423, v450, v476, v501);
  uint64_t v80 = sub_A938(v72, v73, v74, v75, v76, v77, v78, v79, v274, v306, v337, v367, v396, v424, v451, v477, v502, v526);
  uint64_t v88 = sub_A930( v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  v275,  v307,  v338,  v368,  v397,  v425,  v452,  v478,  v503,  v527,  v550);
  uint64_t v96 = sub_A928( v88,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  v276,  v308,  v339,  v369,  v398,  v426,  v453,  v479,  v504,  v528,  v551,  v573);
  uint64_t v104 = sub_A920( v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v277,  v309,  v340,  v370,  v399,  v427,  v454,  v480,  v505,  v529,  v552,  v574,  v595);
  uint64_t v112 = sub_36374( v104,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v278,  v310,  v341,  v371,  v400,  v428,  v455,  v481,  v506,  v530,  v553,  v575,  v596,  v616);
  uint64_t v120 = sub_3636C( v112,  v113,  v114,  v115,  v116,  v117,  v118,  v119,  v279,  v311,  v342,  v372,  v401,  v429,  v456,  v482,  v507,  v531,  v554,  v576,  v597,  v617,  v636);
  uint64_t v128 = sub_36364( v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v280,  v312,  v343,  v373,  v402,  v430,  v457,  v483,  v508,  v532,  v555,  v577,  v598,  v618,  v637,  v655);
  uint64_t v136 = sub_363F0( v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v281,  v313,  v344,  v374,  v403,  v431,  v458,  v484,  v509,  v533,  v556,  v578,  v599,  v619,  v638,  v656,  v673);
  uint64_t v144 = sub_36430( v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v282,  v314,  v345,  v375,  v404,  v432,  v459,  v485,  v510,  v534,  v557,  v579,  v600,  v620,  v639,  v657,  v674,  v690);
  uint64_t v152 = sub_36428( v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v283,  v315,  v346,  v376,  v405,  v433,  v460,  v486,  v511,  v535,  v558,  v580,  v601,  v621,  v640,  v658,  v675,  v691,  v706);
  uint64_t v160 = sub_36478( v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v284,  v316,  v347,  v377,  v406,  v434,  v461,  v487,  v512,  v536,  v559,  v581,  v602,  v622,  v641,  v659,  v676,  v692,  v707,  v721);
  uint64_t v168 = sub_36524( v160,  v161,  v162,  v163,  v164,  v165,  v166,  v167,  v285,  v317,  v348,  v378,  v407,  v435,  v462,  v488,  v513,  v537,  v560,  v582,  v603,  v623,  v642,  v660,  v677,  v693,  v708,  v722,  v735);
  uint64_t v176 = sub_3651C( v168,  v169,  v170,  v171,  v172,  v173,  v174,  v175,  v286,  v318,  v349,  v379,  v408,  v436,  v463,  v489,  v514,  v538,  v561,  v583,  v604,  v624,  v643,  v661,  v678,  v694,  v709,  v723,  v736,  v748);
  uint64_t v184 = sub_36514( v176,  v177,  v178,  v179,  v180,  v181,  v182,  v183,  v287,  v319,  v350,  v380,  v409,  v437,  v464,  v490,  v515,  v539,  v562,  v584,  v605,  v625,  v644,  v662,  v679,  v695,  v710,  v724,  v737,  v749,  v760);
  uint64_t v192 = sub_3650C( v184,  v185,  v186,  v187,  v188,  v189,  v190,  v191,  v288,  v320,  v351,  v381,  v410,  v438,  v465,  v491,  v516,  v540,  v563,  v585,  v606,  v626,  v645,  v663,  v680,  v696,  v711,  v725,  v738,  v750,  v761,  v771);
  uint64_t v200 = sub_36504( v192,  v193,  v194,  v195,  v196,  v197,  v198,  v199,  v289,  v321,  v352,  v382,  v411,  v439,  v466,  v492,  v517,  v541,  v564,  v586,  v607,  v627,  v646,  v664,  v681,  v697,  v712,  v726,  v739,  v751,  v762,  v772,  v781);
  uint64_t v208 = sub_364FC( v200,  v201,  v202,  v203,  v204,  v205,  v206,  v207,  v290,  v322,  v353,  v383,  v412,  v440,  v467,  v493,  v518,  v542,  v565,  v587,  v608,  v628,  v647,  v665,  v682,  v698,  v713,  v727,  v740,  v752,  v763,  v773,  v782,  v790);
  uint64_t v216 = sub_364F4( v208,  v209,  v210,  v211,  v212,  v213,  v214,  v215,  v291,  v323,  v354,  v384,  v413,  v441,  v468,  v494,  v519,  v543,  v566,  v588,  v609,  v629,  v648,  v666,  v683,  v699,  v714,  v728,  v741,  v753,  v764,  v774,  v783,  v791,  v798);
  uint64_t v224 = sub_364EC( v216,  v217,  v218,  v219,  v220,  v221,  v222,  v223,  v292,  v324,  v355,  v385,  v414,  v442,  v469,  v495,  v520,  v544,  v567,  v589,  v610,  v630,  v649,  v667,  v684,  v700,  v715,  v729,  v742,  v754,  v765,  v775,  v784,  v792,  v799,  v805);
  uint64_t v232 = sub_364E4( v224,  v225,  v226,  v227,  v228,  v229,  v230,  v231,  v293,  v325,  v356,  v386,  v415,  v443,  v470,  v496,  v521,  v545,  v568,  v590,  v611,  v631,  v650,  v668,  v685,  v701,  v716,  v730,  v743,  v755,  v766,  v776,  v785,  v793,  v800,  v806,  v811);
  uint64_t v240 = sub_364DC( v232,  v233,  v234,  v235,  v236,  v237,  v238,  v239,  v294,  v326,  v357,  v387,  v416,  v444,  v471,  v497,  v522,  v546,  v569,  v591,  v612,  v632,  v651,  v669,  v686,  v702,  v717,  v731,  v744,  v756,  v767,  v777,  v786,  v794,  v801,  v807,  v812,  v816);
  uint64_t v248 = sub_364D4( v240,  v241,  v242,  v243,  v244,  v245,  v246,  v247,  v295,  v327,  v358,  v388,  v417,  v445,  v472,  v498,  v523,  v547,  v570,  v592,  v613,  v633,  v652,  v670,  v687,  v703,  v718,  v732,  v745,  v757,  v768,  v778,  v787,  v795,  v802,  v808,  v813,  v817,  v820);
  uint64_t v256 = sub_366F8( v248,  v249,  v250,  v251,  v252,  v253,  v254,  v255,  v296,  v328,  v359,  v389,  v418,  v446,  v473,  v499,  v524,  v548,  v571,  v593,  v614,  v634,  v653,  v671,  v688,  v704,  v719,  v733,  v746,  v758,  v769,  v779,  v788,  v796,  v803,  v809,  v814,  v818,  v821,  v823);
  sub_366F0( v256,  v257,  v258,  v259,  v260,  v261,  v262,  v263,  v297,  v329,  v360,  v390,  v419,  v447,  v474,  v500,  v525,  v549,  v572,  v594,  v615,  v635,  v654,  v672,  v689,  v705,  v720,  v734,  v747,  v759,  v770,  v780,  v789,  v797,  v804,  v810,  v815,  v819,  v822,  v824,  v825);
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  sub_36814();
  uint64_t v264 = (uint64_t (*)(void))sub_36E80();
  return sub_36148(v264);
}

uint64_t sub_2CABC()
{
  *(void *)(v0 + 11928) = v2;
  *(void *)(v0 + 11936) = v1;
  sub_36900(v3);
  swift_release();
  if (v1) {
    sub_36860();
  }
  sub_A964();
  return sub_A810();
}

uint64_t sub_2CB18()
{
  uint64_t v2 = sub_36E20();
  sub_36C4C(v2, (uint64_t)PhoneRingsSnippet.body.getter);
  uint64_t v3 = sub_368F8();
  id v4 = sub_36F04(v3, "catId");
  sub_36EE4();
  sub_36920();
  sub_36534();
  sub_36F2C();
  sub_36590((_OWORD *)(v1 + 64));
  sub_36CEC(v1 + 296);
  v0[1493] = *(void *)(v1 + 336);
  v0[1494] = *(void *)(v1 + 344);
  sub_363E8();
  sub_36C5C();
  uint64_t v5 = (void *)sub_3709C();
  v0[1495] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_2CBFC;
  sub_36700();
  return sub_3619C(v6, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_2CBFC()
{
  uint64_t v1 = (void *)(v0 + 8984);
  sub_20264(*(void *)(v0 + 11960));
  sub_36BE0();
  sub_36EBC();
  sub_36B74(v1);
  sub_36E94();
  sub_A964();
  return sub_36348(v2, v3, v4);
}

uint64_t sub_2CC64()
{
  uint64_t v2 = (__int128 *)(v0 + 1138);
  if (v0[1141])
  {
    uint64_t v3 = (void *)v0[1491];
    uint64_t v4 = (void *)v0[1466];
    uint64_t v5 = (void *)v0[1464];
    sub_36438(v2);
    sub_36878((uint64_t)(v0 + 1153));
    uint64_t v6 = sub_364BC((uint64_t)&unk_17CE38);
    uint64_t v7 = sub_367B4(v6);
    v0[1373] = sub_369E4((uint64_t)v7, (uint64_t)&unk_18AEE8);
    sub_369FC();

    sub_3678C();
    sub_3652C();
  }

  else
  {
    uint64_t v8 = v0 + 1270;
    uint64_t v9 = v0[1461];
    uint64_t v10 = v0[1413];
    sub_279E0((uint64_t)v2, &qword_18A448);
    sub_A5DC(v9, (uint64_t)(v0 + 1270));
    sub_36A9C();
    sub_368A0();
    sub_A898();
    sub_36D10();
    if (sub_367D4())
    {
      uint64_t v11 = (_WORD *)sub_3635C();
      sub_363A4(v11);
      sub_36C34();
      sub_232EC( &dword_0,  (os_log_s *)(v0 + 1270),  (os_log_type_t)v10,  "getPunchoutOutput() returned nil, returning GenericErrorFlow",  v1);
      sub_37268();

      sub_36AAC();
    }

    else
    {
      sub_36C34();

      sub_36E08();
    }

    uint64_t v12 = (void *)v0[1491];
    uint64_t v13 = (void *)v0[1466];
    uint64_t v14 = (void *)v0[1464];
    sub_3668C();
    sub_36D84();
    sub_A178();
    sub_36748();

    sub_36784();
    sub_36ABC();
  }

  sub_35DF4();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  sub_A78C();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  uint64_t v15 = sub_A8EC();
  uint64_t v23 = sub_AAD8(v15, v16, v17, v18, v19, v20, v21, v22, v297, v332);
  uint64_t v31 = sub_A888(v23, v24, v25, v26, v27, v28, v29, v30, v298, v333, v367);
  uint64_t v39 = sub_A854(v31, v32, v33, v34, v35, v36, v37, v38, v299, v334, v368, v401);
  uint64_t v47 = sub_A84C(v39, v40, v41, v42, v43, v44, v45, v46, v300, v335, v369, v402, v434);
  uint64_t v55 = sub_A844(v47, v48, v49, v50, v51, v52, v53, v54, v301, v336, v370, v403, v435, v466);
  uint64_t v63 = sub_A83C(v55, v56, v57, v58, v59, v60, v61, v62, v302, v337, v371, v404, v436, v467, v497);
  uint64_t v71 = sub_A95C(v63, v64, v65, v66, v67, v68, v69, v70, v303, v338, v372, v405, v437, v468, v498, v527);
  uint64_t v79 = sub_A954(v71, v72, v73, v74, v75, v76, v77, v78, v304, v339, v373, v406, v438, v469, v499, v528, v556);
  uint64_t v87 = sub_A938(v79, v80, v81, v82, v83, v84, v85, v86, v305, v340, v374, v407, v439, v470, v500, v529, v557, v584);
  uint64_t v95 = sub_A930( v87,  v88,  v89,  v90,  v91,  v92,  v93,  v94,  v306,  v341,  v375,  v408,  v440,  v471,  v501,  v530,  v558,  v585,  v611);
  uint64_t v103 = sub_A928( v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v307,  v342,  v376,  v409,  v441,  v472,  v502,  v531,  v559,  v586,  v612,  v637);
  uint64_t v111 = sub_A920( v103,  v104,  v105,  v106,  v107,  v108,  v109,  v110,  v308,  v343,  v377,  v410,  v442,  v473,  v503,  v532,  v560,  v587,  v613,  v638,  v662);
  uint64_t v119 = sub_36374( v111,  v112,  v113,  v114,  v115,  v116,  v117,  v118,  v309,  v344,  v378,  v411,  v443,  v474,  v504,  v533,  v561,  v588,  v614,  v639,  v663,  v686);
  uint64_t v127 = sub_3636C( v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v310,  v345,  v379,  v412,  v444,  v475,  v505,  v534,  v562,  v589,  v615,  v640,  v664,  v687,  v709);
  uint64_t v135 = sub_36364( v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v311,  v346,  v380,  v413,  v445,  v476,  v506,  v535,  v563,  v590,  v616,  v641,  v665,  v688,  v710,  v731);
  uint64_t v143 = sub_363F0( v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v312,  v347,  v381,  v414,  v446,  v477,  v507,  v536,  v564,  v591,  v617,  v642,  v666,  v689,  v711,  v732,  v752);
  uint64_t v151 = sub_36430( v143,  v144,  v145,  v146,  v147,  v148,  v149,  v150,  v313,  v348,  v382,  v415,  v447,  v478,  v508,  v537,  v565,  v592,  v618,  v643,  v667,  v690,  v712,  v733,  v753,  v772);
  uint64_t v159 = sub_36428( v151,  v152,  v153,  v154,  v155,  v156,  v157,  v158,  v314,  v349,  v383,  v416,  v448,  v479,  v509,  v538,  v566,  v593,  v619,  v644,  v668,  v691,  v713,  v734,  v754,  v773,  v791);
  uint64_t v167 = sub_36478( v159,  v160,  v161,  v162,  v163,  v164,  v165,  v166,  v315,  v350,  v384,  v417,  v449,  v480,  v510,  v539,  v567,  v594,  v620,  v645,  v669,  v692,  v714,  v735,  v755,  v774,  v792,  v809);
  uint64_t v175 = sub_36524( v167,  v168,  v169,  v170,  v171,  v172,  v173,  v174,  v316,  v351,  v385,  v418,  v450,  v481,  v511,  v540,  v568,  v595,  v621,  v646,  v670,  v693,  v715,  v736,  v756,  v775,  v793,  v810,  v826);
  uint64_t v183 = sub_3651C( v175,  v176,  v177,  v178,  v179,  v180,  v181,  v182,  v317,  v352,  v386,  v419,  v451,  v482,  v512,  v541,  v569,  v596,  v622,  v647,  v671,  v694,  v716,  v737,  v757,  v776,  v794,  v811,  v827,  v842);
  uint64_t v191 = sub_36514( v183,  v184,  v185,  v186,  v187,  v188,  v189,  v190,  v318,  v353,  v387,  v420,  v452,  v483,  v513,  v542,  v570,  v597,  v623,  v648,  v672,  v695,  v717,  v738,  v758,  v777,  v795,  v812,  v828,  v843,  v857);
  uint64_t v199 = sub_3650C( v191,  v192,  v193,  v194,  v195,  v196,  v197,  v198,  v319,  v354,  v388,  v421,  v453,  v484,  v514,  v543,  v571,  v598,  v624,  v649,  v673,  v696,  v718,  v739,  v759,  v778,  v796,  v813,  v829,  v844,  v858,  v871);
  uint64_t v207 = sub_36504( v199,  v200,  v201,  v202,  v203,  v204,  v205,  v206,  v320,  v355,  v389,  v422,  v454,  v485,  v515,  v544,  v572,  v599,  v625,  v650,  v674,  v697,  v719,  v740,  v760,  v779,  v797,  v814,  v830,  v845,  v859,  v872,  v884);
  uint64_t v215 = sub_364FC( v207,  v208,  v209,  v210,  v211,  v212,  v213,  v214,  v321,  v356,  v390,  v423,  v455,  v486,  v516,  v545,  v573,  v600,  v626,  v651,  v675,  v698,  v720,  v741,  v761,  v780,  v798,  v815,  v831,  v846,  v860,  v873,  v885,  v896);
  uint64_t v223 = sub_364F4( v215,  v216,  v217,  v218,  v219,  v220,  v221,  v222,  v322,  v357,  v391,  v424,  v456,  v487,  v517,  v546,  v574,  v601,  v627,  v652,  v676,  v699,  v721,  v742,  v762,  v781,  v799,  v816,  v832,  v847,  v861,  v874,  v886,  v897,  v907);
  uint64_t v231 = sub_364EC( v223,  v224,  v225,  v226,  v227,  v228,  v229,  v230,  v323,  v358,  v392,  v425,  v457,  v488,  v518,  v547,  v575,  v602,  v628,  v653,  v677,  v700,  v722,  v743,  v763,  v782,  v800,  v817,  v833,  v848,  v862,  v875,  v887,  v898,  v908,  v917);
  uint64_t v239 = sub_364E4( v231,  v232,  v233,  v234,  v235,  v236,  v237,  v238,  v324,  v359,  v393,  v426,  v458,  v489,  v519,  v548,  v576,  v603,  v629,  v654,  v678,  v701,  v723,  v744,  v764,  v783,  v801,  v818,  v834,  v849,  v863,  v876,  v888,  v899,  v909,  v918,  v926);
  uint64_t v247 = sub_364DC( v239,  v240,  v241,  v242,  v243,  v244,  v245,  v246,  v325,  v360,  v394,  v427,  v459,  v490,  v520,  v549,  v577,  v604,  v630,  v655,  v679,  v702,  v724,  v745,  v765,  v784,  v802,  v819,  v835,  v850,  v864,  v877,  v889,  v900,  v910,  v919,  v927,  v934);
  uint64_t v255 = sub_364D4( v247,  v248,  v249,  v250,  v251,  v252,  v253,  v254,  v326,  v361,  v395,  v428,  v460,  v491,  v521,  v550,  v578,  v605,  v631,  v656,  v680,  v703,  v725,  v746,  v766,  v785,  v803,  v820,  v836,  v851,  v865,  v878,  v890,  v901,  v911,  v920,  v928,  v935,  v941);
  uint64_t v263 = sub_366F8( v255,  v256,  v257,  v258,  v259,  v260,  v261,  v262,  v327,  v362,  v396,  v429,  v461,  v492,  v522,  v551,  v579,  v606,  v632,  v657,  v681,  v704,  v726,  v747,  v767,  v786,  v804,  v821,  v837,  v852,  v866,  v879,  v891,  v902,  v912,  v921,  v929,  v936,  v942,  v947);
  uint64_t v271 = sub_366F0( v263,  v264,  v265,  v266,  v267,  v268,  v269,  v270,  v328,  v363,  v397,  v430,  v462,  v493,  v523,  v552,  v580,  v607,  v633,  v658,  v682,  v705,  v727,  v748,  v768,  v787,  v805,  v822,  v838,  v853,  v867,  v880,  v892,  v903,  v913,  v922,  v930,  v937,  v943,  v948,  v952);
  uint64_t v279 = sub_36B90( v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v329,  v364,  v398,  v431,  v463,  v494,  v524,  v553,  v581,  v608,  v634,  v659,  v683,  v706,  v728,  v749,  v769,  v788,  v806,  v823,  v839,  v854,  v868,  v881,  v893,  v904,  v914,  v923,  v931,  v938,  v944,  v949,  v953,  v956);
  uint64_t v287 = sub_36EF4( v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v330,  v365,  v399,  v432,  v464,  v495,  v525,  v554,  v582,  v609,  v635,  v660,  v684,  v707,  v729,  v750,  v770,  v789,  v807,  v824,  v840,  v855,  v869,  v882,  v894,  v905,  v915,  v924,  v932,  v939,  v945,  v950,  v954,  v957,  v959);
  sub_36EEC( v287,  v288,  v289,  v290,  v291,  v292,  v293,  v294,  v331,  v366,  v400,  v433,  v465,  v496,  v526,  v555,  v583,  v610,  v636,  v661,  v685,  v708,  v730,  v751,  v771,  v790,  v808,  v825,  v841,  v856,  v870,  v883,  v895,  v906,  v916,  v925,  v933,  v940,  v946,  v951,  v955,  v958,  v960,  v961);
  sub_36B88();
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  uint64_t v295 = (uint64_t (*)(void))sub_3743C();
  return sub_36148(v295);
}

uint64_t sub_2CF04()
{
  os_log_type_t v4 = sub_A898();
  if (sub_36958())
  {
    uint64_t v5 = (_WORD *)sub_3635C();
    sub_36908(v5);
    sub_367E8((uint64_t)_swiftEmptyArrayStorage);
    sub_232EC( &dword_0,  v0,  v4,  "Failed executing catWrapperSimple.genericMedicationMultipleMedsFound_Dialog, returning nil",  v2);
    sub_37128();
  }

  sub_36B28();
  uint64_t v6 = (void *)v1[1466];
  uint64_t v7 = (void *)v1[1464];
  sub_36590((_OWORD *)(v1[1381] + 64LL));
  sub_36ACC();
  sub_A178();
  sub_36B14();

  sub_36DD8();
  sub_35B4C();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  sub_A78C();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  uint64_t v8 = sub_A8EC();
  uint64_t v16 = sub_AAD8(v8, v9, v10, v11, v12, v13, v14, v15, v266, v298);
  uint64_t v24 = sub_A888(v16, v17, v18, v19, v20, v21, v22, v23, v267, v299, v330);
  uint64_t v32 = sub_A854(v24, v25, v26, v27, v28, v29, v30, v31, v268, v300, v331, v361);
  uint64_t v40 = sub_A84C(v32, v33, v34, v35, v36, v37, v38, v39, v269, v301, v332, v362, v391);
  uint64_t v48 = sub_A844(v40, v41, v42, v43, v44, v45, v46, v47, v270, v302, v333, v363, v392, v420);
  uint64_t v56 = sub_A83C(v48, v49, v50, v51, v52, v53, v54, v55, v271, v303, v334, v364, v393, v421, v448);
  uint64_t v64 = sub_A95C(v56, v57, v58, v59, v60, v61, v62, v63, v272, v304, v335, v365, v394, v422, v449, v475);
  uint64_t v72 = sub_A954(v64, v65, v66, v67, v68, v69, v70, v71, v273, v305, v336, v366, v395, v423, v450, v476, v501);
  uint64_t v80 = sub_A938(v72, v73, v74, v75, v76, v77, v78, v79, v274, v306, v337, v367, v396, v424, v451, v477, v502, v526);
  uint64_t v88 = sub_A930( v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  v275,  v307,  v338,  v368,  v397,  v425,  v452,  v478,  v503,  v527,  v550);
  uint64_t v96 = sub_A928( v88,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  v276,  v308,  v339,  v369,  v398,  v426,  v453,  v479,  v504,  v528,  v551,  v573);
  uint64_t v104 = sub_A920( v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v277,  v309,  v340,  v370,  v399,  v427,  v454,  v480,  v505,  v529,  v552,  v574,  v595);
  uint64_t v112 = sub_36374( v104,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v278,  v310,  v341,  v371,  v400,  v428,  v455,  v481,  v506,  v530,  v553,  v575,  v596,  v616);
  uint64_t v120 = sub_3636C( v112,  v113,  v114,  v115,  v116,  v117,  v118,  v119,  v279,  v311,  v342,  v372,  v401,  v429,  v456,  v482,  v507,  v531,  v554,  v576,  v597,  v617,  v636);
  uint64_t v128 = sub_36364( v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v280,  v312,  v343,  v373,  v402,  v430,  v457,  v483,  v508,  v532,  v555,  v577,  v598,  v618,  v637,  v655);
  uint64_t v136 = sub_363F0( v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v281,  v313,  v344,  v374,  v403,  v431,  v458,  v484,  v509,  v533,  v556,  v578,  v599,  v619,  v638,  v656,  v673);
  uint64_t v144 = sub_36430( v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v282,  v314,  v345,  v375,  v404,  v432,  v459,  v485,  v510,  v534,  v557,  v579,  v600,  v620,  v639,  v657,  v674,  v690);
  uint64_t v152 = sub_36428( v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v283,  v315,  v346,  v376,  v405,  v433,  v460,  v486,  v511,  v535,  v558,  v580,  v601,  v621,  v640,  v658,  v675,  v691,  v706);
  uint64_t v160 = sub_36478( v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v284,  v316,  v347,  v377,  v406,  v434,  v461,  v487,  v512,  v536,  v559,  v581,  v602,  v622,  v641,  v659,  v676,  v692,  v707,  v721);
  uint64_t v168 = sub_36524( v160,  v161,  v162,  v163,  v164,  v165,  v166,  v167,  v285,  v317,  v348,  v378,  v407,  v435,  v462,  v488,  v513,  v537,  v560,  v582,  v603,  v623,  v642,  v660,  v677,  v693,  v708,  v722,  v735);
  uint64_t v176 = sub_3651C( v168,  v169,  v170,  v171,  v172,  v173,  v174,  v175,  v286,  v318,  v349,  v379,  v408,  v436,  v463,  v489,  v514,  v538,  v561,  v583,  v604,  v624,  v643,  v661,  v678,  v694,  v709,  v723,  v736,  v748);
  uint64_t v184 = sub_36514( v176,  v177,  v178,  v179,  v180,  v181,  v182,  v183,  v287,  v319,  v350,  v380,  v409,  v437,  v464,  v490,  v515,  v539,  v562,  v584,  v605,  v625,  v644,  v662,  v679,  v695,  v710,  v724,  v737,  v749,  v760);
  uint64_t v192 = sub_3650C( v184,  v185,  v186,  v187,  v188,  v189,  v190,  v191,  v288,  v320,  v351,  v381,  v410,  v438,  v465,  v491,  v516,  v540,  v563,  v585,  v606,  v626,  v645,  v663,  v680,  v696,  v711,  v725,  v738,  v750,  v761,  v771);
  uint64_t v200 = sub_36504( v192,  v193,  v194,  v195,  v196,  v197,  v198,  v199,  v289,  v321,  v352,  v382,  v411,  v439,  v466,  v492,  v517,  v541,  v564,  v586,  v607,  v627,  v646,  v664,  v681,  v697,  v712,  v726,  v739,  v751,  v762,  v772,  v781);
  uint64_t v208 = sub_364FC( v200,  v201,  v202,  v203,  v204,  v205,  v206,  v207,  v290,  v322,  v353,  v383,  v412,  v440,  v467,  v493,  v518,  v542,  v565,  v587,  v608,  v628,  v647,  v665,  v682,  v698,  v713,  v727,  v740,  v752,  v763,  v773,  v782,  v790);
  uint64_t v216 = sub_364F4( v208,  v209,  v210,  v211,  v212,  v213,  v214,  v215,  v291,  v323,  v354,  v384,  v413,  v441,  v468,  v494,  v519,  v543,  v566,  v588,  v609,  v629,  v648,  v666,  v683,  v699,  v714,  v728,  v741,  v753,  v764,  v774,  v783,  v791,  v798);
  uint64_t v224 = sub_364EC( v216,  v217,  v218,  v219,  v220,  v221,  v222,  v223,  v292,  v324,  v355,  v385,  v414,  v442,  v469,  v495,  v520,  v544,  v567,  v589,  v610,  v630,  v649,  v667,  v684,  v700,  v715,  v729,  v742,  v754,  v765,  v775,  v784,  v792,  v799,  v805);
  uint64_t v232 = sub_364E4( v224,  v225,  v226,  v227,  v228,  v229,  v230,  v231,  v293,  v325,  v356,  v386,  v415,  v443,  v470,  v496,  v521,  v545,  v568,  v590,  v611,  v631,  v650,  v668,  v685,  v701,  v716,  v730,  v743,  v755,  v766,  v776,  v785,  v793,  v800,  v806,  v811);
  uint64_t v240 = sub_364DC( v232,  v233,  v234,  v235,  v236,  v237,  v238,  v239,  v294,  v326,  v357,  v387,  v416,  v444,  v471,  v497,  v522,  v546,  v569,  v591,  v612,  v632,  v651,  v669,  v686,  v702,  v717,  v731,  v744,  v756,  v767,  v777,  v786,  v794,  v801,  v807,  v812,  v816);
  uint64_t v248 = sub_364D4( v240,  v241,  v242,  v243,  v244,  v245,  v246,  v247,  v295,  v327,  v358,  v388,  v417,  v445,  v472,  v498,  v523,  v547,  v570,  v592,  v613,  v633,  v652,  v670,  v687,  v703,  v718,  v732,  v745,  v757,  v768,  v778,  v787,  v795,  v802,  v808,  v813,  v817,  v820);
  uint64_t v256 = sub_366F8( v248,  v249,  v250,  v251,  v252,  v253,  v254,  v255,  v296,  v328,  v359,  v389,  v418,  v446,  v473,  v499,  v524,  v548,  v571,  v593,  v614,  v634,  v653,  v671,  v688,  v704,  v719,  v733,  v746,  v758,  v769,  v779,  v788,  v796,  v803,  v809,  v814,  v818,  v821,  v823);
  sub_366F0( v256,  v257,  v258,  v259,  v260,  v261,  v262,  v263,  v297,  v329,  v360,  v390,  v419,  v447,  v474,  v500,  v525,  v549,  v572,  v594,  v615,  v635,  v654,  v672,  v689,  v705,  v720,  v734,  v747,  v759,  v770,  v780,  v789,  v797,  v804,  v810,  v815,  v819,  v822,  v824,  v825);
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  sub_36814();
  uint64_t v264 = (uint64_t (*)(void))sub_36E80();
  return sub_36148(v264);
}

uint64_t sub_2D0D8()
{
  *(void *)(v0 + 11984) = v2;
  *(void *)(v0 + 1199sub_D878(v0 + 2) = v1;
  sub_36900(v3);
  swift_release();
  if (v1) {
    sub_36860();
  }
  sub_A964();
  return sub_A810();
}

uint64_t sub_2D134()
{
  uint64_t v2 = sub_36E20();
  sub_36C4C(v2, (uint64_t)PhoneRingsSnippet.body.getter);
  uint64_t v3 = sub_368F8();
  id v4 = sub_36F04(v3, "catId");
  sub_36EE4();
  sub_36920();
  sub_36534();
  sub_36F2C();
  sub_36590((_OWORD *)(v1 + 64));
  sub_36CEC(v1 + 296);
  v0[1500] = *(void *)(v1 + 336);
  v0[1501] = *(void *)(v1 + 344);
  sub_363E8();
  sub_36C5C();
  uint64_t v5 = (void *)sub_3709C();
  v0[1502] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_2D218;
  sub_36700();
  return sub_3619C(v6, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_2D218()
{
  uint64_t v1 = (void *)(v0 + 9464);
  sub_20264(*(void *)(v0 + 12016));
  sub_36BE0();
  sub_36EBC();
  sub_36B74(v1);
  sub_36E94();
  sub_A964();
  return sub_36348(v2, v3, v4);
}

uint64_t sub_2D280()
{
  uint64_t v2 = (__int128 *)(v0 + 1198);
  if (v0[1201])
  {
    uint64_t v3 = (void *)v0[1498];
    uint64_t v4 = (void *)v0[1466];
    uint64_t v5 = (void *)v0[1464];
    sub_36438(v2);
    sub_36878((uint64_t)(v0 + 1208));
    uint64_t v6 = sub_364BC((uint64_t)&unk_17CE10);
    uint64_t v7 = sub_367B4(v6);
    v0[1376] = sub_369E4((uint64_t)v7, (uint64_t)&unk_18AED8);
    sub_369FC();

    sub_3678C();
    sub_3652C();
  }

  else
  {
    uint64_t v8 = v0 + 1228;
    uint64_t v9 = v0[1461];
    uint64_t v10 = v0[1413];
    sub_279E0((uint64_t)v2, &qword_18A448);
    sub_A5DC(v9, (uint64_t)(v0 + 1228));
    sub_36A9C();
    sub_368A0();
    sub_A898();
    sub_36D10();
    if (sub_367D4())
    {
      uint64_t v11 = (_WORD *)sub_3635C();
      sub_363A4(v11);
      sub_36C34();
      sub_232EC( &dword_0,  (os_log_s *)(v0 + 1228),  (os_log_type_t)v10,  "getPunchoutOutput() returned nil, returning GenericErrorFlow",  v1);
      sub_37268();

      sub_36AAC();
    }

    else
    {
      sub_36C34();

      sub_36E08();
    }

    uint64_t v12 = (void *)v0[1498];
    uint64_t v13 = (void *)v0[1466];
    uint64_t v14 = (void *)v0[1464];
    sub_3668C();
    sub_36D84();
    sub_A178();
    sub_36748();

    sub_36784();
    sub_36ABC();
  }

  sub_35DF4();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  sub_A78C();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  uint64_t v15 = sub_A8EC();
  uint64_t v23 = sub_AAD8(v15, v16, v17, v18, v19, v20, v21, v22, v297, v332);
  uint64_t v31 = sub_A888(v23, v24, v25, v26, v27, v28, v29, v30, v298, v333, v367);
  uint64_t v39 = sub_A854(v31, v32, v33, v34, v35, v36, v37, v38, v299, v334, v368, v401);
  uint64_t v47 = sub_A84C(v39, v40, v41, v42, v43, v44, v45, v46, v300, v335, v369, v402, v434);
  uint64_t v55 = sub_A844(v47, v48, v49, v50, v51, v52, v53, v54, v301, v336, v370, v403, v435, v466);
  uint64_t v63 = sub_A83C(v55, v56, v57, v58, v59, v60, v61, v62, v302, v337, v371, v404, v436, v467, v497);
  uint64_t v71 = sub_A95C(v63, v64, v65, v66, v67, v68, v69, v70, v303, v338, v372, v405, v437, v468, v498, v527);
  uint64_t v79 = sub_A954(v71, v72, v73, v74, v75, v76, v77, v78, v304, v339, v373, v406, v438, v469, v499, v528, v556);
  uint64_t v87 = sub_A938(v79, v80, v81, v82, v83, v84, v85, v86, v305, v340, v374, v407, v439, v470, v500, v529, v557, v584);
  uint64_t v95 = sub_A930( v87,  v88,  v89,  v90,  v91,  v92,  v93,  v94,  v306,  v341,  v375,  v408,  v440,  v471,  v501,  v530,  v558,  v585,  v611);
  uint64_t v103 = sub_A928( v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v307,  v342,  v376,  v409,  v441,  v472,  v502,  v531,  v559,  v586,  v612,  v637);
  uint64_t v111 = sub_A920( v103,  v104,  v105,  v106,  v107,  v108,  v109,  v110,  v308,  v343,  v377,  v410,  v442,  v473,  v503,  v532,  v560,  v587,  v613,  v638,  v662);
  uint64_t v119 = sub_36374( v111,  v112,  v113,  v114,  v115,  v116,  v117,  v118,  v309,  v344,  v378,  v411,  v443,  v474,  v504,  v533,  v561,  v588,  v614,  v639,  v663,  v686);
  uint64_t v127 = sub_3636C( v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v310,  v345,  v379,  v412,  v444,  v475,  v505,  v534,  v562,  v589,  v615,  v640,  v664,  v687,  v709);
  uint64_t v135 = sub_36364( v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v311,  v346,  v380,  v413,  v445,  v476,  v506,  v535,  v563,  v590,  v616,  v641,  v665,  v688,  v710,  v731);
  uint64_t v143 = sub_363F0( v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v312,  v347,  v381,  v414,  v446,  v477,  v507,  v536,  v564,  v591,  v617,  v642,  v666,  v689,  v711,  v732,  v752);
  uint64_t v151 = sub_36430( v143,  v144,  v145,  v146,  v147,  v148,  v149,  v150,  v313,  v348,  v382,  v415,  v447,  v478,  v508,  v537,  v565,  v592,  v618,  v643,  v667,  v690,  v712,  v733,  v753,  v772);
  uint64_t v159 = sub_36428( v151,  v152,  v153,  v154,  v155,  v156,  v157,  v158,  v314,  v349,  v383,  v416,  v448,  v479,  v509,  v538,  v566,  v593,  v619,  v644,  v668,  v691,  v713,  v734,  v754,  v773,  v791);
  uint64_t v167 = sub_36478( v159,  v160,  v161,  v162,  v163,  v164,  v165,  v166,  v315,  v350,  v384,  v417,  v449,  v480,  v510,  v539,  v567,  v594,  v620,  v645,  v669,  v692,  v714,  v735,  v755,  v774,  v792,  v809);
  uint64_t v175 = sub_36524( v167,  v168,  v169,  v170,  v171,  v172,  v173,  v174,  v316,  v351,  v385,  v418,  v450,  v481,  v511,  v540,  v568,  v595,  v621,  v646,  v670,  v693,  v715,  v736,  v756,  v775,  v793,  v810,  v826);
  uint64_t v183 = sub_3651C( v175,  v176,  v177,  v178,  v179,  v180,  v181,  v182,  v317,  v352,  v386,  v419,  v451,  v482,  v512,  v541,  v569,  v596,  v622,  v647,  v671,  v694,  v716,  v737,  v757,  v776,  v794,  v811,  v827,  v842);
  uint64_t v191 = sub_36514( v183,  v184,  v185,  v186,  v187,  v188,  v189,  v190,  v318,  v353,  v387,  v420,  v452,  v483,  v513,  v542,  v570,  v597,  v623,  v648,  v672,  v695,  v717,  v738,  v758,  v777,  v795,  v812,  v828,  v843,  v857);
  uint64_t v199 = sub_3650C( v191,  v192,  v193,  v194,  v195,  v196,  v197,  v198,  v319,  v354,  v388,  v421,  v453,  v484,  v514,  v543,  v571,  v598,  v624,  v649,  v673,  v696,  v718,  v739,  v759,  v778,  v796,  v813,  v829,  v844,  v858,  v871);
  uint64_t v207 = sub_36504( v199,  v200,  v201,  v202,  v203,  v204,  v205,  v206,  v320,  v355,  v389,  v422,  v454,  v485,  v515,  v544,  v572,  v599,  v625,  v650,  v674,  v697,  v719,  v740,  v760,  v779,  v797,  v814,  v830,  v845,  v859,  v872,  v884);
  uint64_t v215 = sub_364FC( v207,  v208,  v209,  v210,  v211,  v212,  v213,  v214,  v321,  v356,  v390,  v423,  v455,  v486,  v516,  v545,  v573,  v600,  v626,  v651,  v675,  v698,  v720,  v741,  v761,  v780,  v798,  v815,  v831,  v846,  v860,  v873,  v885,  v896);
  uint64_t v223 = sub_364F4( v215,  v216,  v217,  v218,  v219,  v220,  v221,  v222,  v322,  v357,  v391,  v424,  v456,  v487,  v517,  v546,  v574,  v601,  v627,  v652,  v676,  v699,  v721,  v742,  v762,  v781,  v799,  v816,  v832,  v847,  v861,  v874,  v886,  v897,  v907);
  uint64_t v231 = sub_364EC( v223,  v224,  v225,  v226,  v227,  v228,  v229,  v230,  v323,  v358,  v392,  v425,  v457,  v488,  v518,  v547,  v575,  v602,  v628,  v653,  v677,  v700,  v722,  v743,  v763,  v782,  v800,  v817,  v833,  v848,  v862,  v875,  v887,  v898,  v908,  v917);
  uint64_t v239 = sub_364E4( v231,  v232,  v233,  v234,  v235,  v236,  v237,  v238,  v324,  v359,  v393,  v426,  v458,  v489,  v519,  v548,  v576,  v603,  v629,  v654,  v678,  v701,  v723,  v744,  v764,  v783,  v801,  v818,  v834,  v849,  v863,  v876,  v888,  v899,  v909,  v918,  v926);
  uint64_t v247 = sub_364DC( v239,  v240,  v241,  v242,  v243,  v244,  v245,  v246,  v325,  v360,  v394,  v427,  v459,  v490,  v520,  v549,  v577,  v604,  v630,  v655,  v679,  v702,  v724,  v745,  v765,  v784,  v802,  v819,  v835,  v850,  v864,  v877,  v889,  v900,  v910,  v919,  v927,  v934);
  uint64_t v255 = sub_364D4( v247,  v248,  v249,  v250,  v251,  v252,  v253,  v254,  v326,  v361,  v395,  v428,  v460,  v491,  v521,  v550,  v578,  v605,  v631,  v656,  v680,  v703,  v725,  v746,  v766,  v785,  v803,  v820,  v836,  v851,  v865,  v878,  v890,  v901,  v911,  v920,  v928,  v935,  v941);
  uint64_t v263 = sub_366F8( v255,  v256,  v257,  v258,  v259,  v260,  v261,  v262,  v327,  v362,  v396,  v429,  v461,  v492,  v522,  v551,  v579,  v606,  v632,  v657,  v681,  v704,  v726,  v747,  v767,  v786,  v804,  v821,  v837,  v852,  v866,  v879,  v891,  v902,  v912,  v921,  v929,  v936,  v942,  v947);
  uint64_t v271 = sub_366F0( v263,  v264,  v265,  v266,  v267,  v268,  v269,  v270,  v328,  v363,  v397,  v430,  v462,  v493,  v523,  v552,  v580,  v607,  v633,  v658,  v682,  v705,  v727,  v748,  v768,  v787,  v805,  v822,  v838,  v853,  v867,  v880,  v892,  v903,  v913,  v922,  v930,  v937,  v943,  v948,  v952);
  uint64_t v279 = sub_36B90( v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v329,  v364,  v398,  v431,  v463,  v494,  v524,  v553,  v581,  v608,  v634,  v659,  v683,  v706,  v728,  v749,  v769,  v788,  v806,  v823,  v839,  v854,  v868,  v881,  v893,  v904,  v914,  v923,  v931,  v938,  v944,  v949,  v953,  v956);
  uint64_t v287 = sub_36EF4( v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v330,  v365,  v399,  v432,  v464,  v495,  v525,  v554,  v582,  v609,  v635,  v660,  v684,  v707,  v729,  v750,  v770,  v789,  v807,  v824,  v840,  v855,  v869,  v882,  v894,  v905,  v915,  v924,  v932,  v939,  v945,  v950,  v954,  v957,  v959);
  sub_36EEC( v287,  v288,  v289,  v290,  v291,  v292,  v293,  v294,  v331,  v366,  v400,  v433,  v465,  v496,  v526,  v555,  v583,  v610,  v636,  v661,  v685,  v708,  v730,  v751,  v771,  v790,  v808,  v825,  v841,  v856,  v870,  v883,  v895,  v906,  v916,  v925,  v933,  v940,  v946,  v951,  v955,  v958,  v960,  v961);
  sub_36B88();
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  uint64_t v295 = (uint64_t (*)(void))sub_3743C();
  return sub_36148(v295);
}

uint64_t sub_2D520()
{
  os_log_type_t v4 = sub_A898();
  if (sub_36958())
  {
    uint64_t v5 = (_WORD *)sub_3635C();
    sub_36908(v5);
    sub_367E8((uint64_t)_swiftEmptyArrayStorage);
    sub_232EC( &dword_0,  v0,  v4,  "Failed executing catWrapperSimple.genericMedicationLogFailed_Dialog, returning nil",  v2);
    sub_37128();
  }

  sub_36B28();
  uint64_t v6 = (void *)v1[1466];
  uint64_t v7 = (void *)v1[1464];
  sub_36590((_OWORD *)(v1[1381] + 64LL));
  sub_36ACC();
  sub_A178();
  sub_36B14();

  sub_36DD8();
  sub_35B4C();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  sub_A78C();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  uint64_t v8 = sub_A8EC();
  uint64_t v16 = sub_AAD8(v8, v9, v10, v11, v12, v13, v14, v15, v266, v298);
  uint64_t v24 = sub_A888(v16, v17, v18, v19, v20, v21, v22, v23, v267, v299, v330);
  uint64_t v32 = sub_A854(v24, v25, v26, v27, v28, v29, v30, v31, v268, v300, v331, v361);
  uint64_t v40 = sub_A84C(v32, v33, v34, v35, v36, v37, v38, v39, v269, v301, v332, v362, v391);
  uint64_t v48 = sub_A844(v40, v41, v42, v43, v44, v45, v46, v47, v270, v302, v333, v363, v392, v420);
  uint64_t v56 = sub_A83C(v48, v49, v50, v51, v52, v53, v54, v55, v271, v303, v334, v364, v393, v421, v448);
  uint64_t v64 = sub_A95C(v56, v57, v58, v59, v60, v61, v62, v63, v272, v304, v335, v365, v394, v422, v449, v475);
  uint64_t v72 = sub_A954(v64, v65, v66, v67, v68, v69, v70, v71, v273, v305, v336, v366, v395, v423, v450, v476, v501);
  uint64_t v80 = sub_A938(v72, v73, v74, v75, v76, v77, v78, v79, v274, v306, v337, v367, v396, v424, v451, v477, v502, v526);
  uint64_t v88 = sub_A930( v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  v275,  v307,  v338,  v368,  v397,  v425,  v452,  v478,  v503,  v527,  v550);
  uint64_t v96 = sub_A928( v88,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  v276,  v308,  v339,  v369,  v398,  v426,  v453,  v479,  v504,  v528,  v551,  v573);
  uint64_t v104 = sub_A920( v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v277,  v309,  v340,  v370,  v399,  v427,  v454,  v480,  v505,  v529,  v552,  v574,  v595);
  uint64_t v112 = sub_36374( v104,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v278,  v310,  v341,  v371,  v400,  v428,  v455,  v481,  v506,  v530,  v553,  v575,  v596,  v616);
  uint64_t v120 = sub_3636C( v112,  v113,  v114,  v115,  v116,  v117,  v118,  v119,  v279,  v311,  v342,  v372,  v401,  v429,  v456,  v482,  v507,  v531,  v554,  v576,  v597,  v617,  v636);
  uint64_t v128 = sub_36364( v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v280,  v312,  v343,  v373,  v402,  v430,  v457,  v483,  v508,  v532,  v555,  v577,  v598,  v618,  v637,  v655);
  uint64_t v136 = sub_363F0( v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v281,  v313,  v344,  v374,  v403,  v431,  v458,  v484,  v509,  v533,  v556,  v578,  v599,  v619,  v638,  v656,  v673);
  uint64_t v144 = sub_36430( v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v282,  v314,  v345,  v375,  v404,  v432,  v459,  v485,  v510,  v534,  v557,  v579,  v600,  v620,  v639,  v657,  v674,  v690);
  uint64_t v152 = sub_36428( v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v283,  v315,  v346,  v376,  v405,  v433,  v460,  v486,  v511,  v535,  v558,  v580,  v601,  v621,  v640,  v658,  v675,  v691,  v706);
  uint64_t v160 = sub_36478( v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v284,  v316,  v347,  v377,  v406,  v434,  v461,  v487,  v512,  v536,  v559,  v581,  v602,  v622,  v641,  v659,  v676,  v692,  v707,  v721);
  uint64_t v168 = sub_36524( v160,  v161,  v162,  v163,  v164,  v165,  v166,  v167,  v285,  v317,  v348,  v378,  v407,  v435,  v462,  v488,  v513,  v537,  v560,  v582,  v603,  v623,  v642,  v660,  v677,  v693,  v708,  v722,  v735);
  uint64_t v176 = sub_3651C( v168,  v169,  v170,  v171,  v172,  v173,  v174,  v175,  v286,  v318,  v349,  v379,  v408,  v436,  v463,  v489,  v514,  v538,  v561,  v583,  v604,  v624,  v643,  v661,  v678,  v694,  v709,  v723,  v736,  v748);
  uint64_t v184 = sub_36514( v176,  v177,  v178,  v179,  v180,  v181,  v182,  v183,  v287,  v319,  v350,  v380,  v409,  v437,  v464,  v490,  v515,  v539,  v562,  v584,  v605,  v625,  v644,  v662,  v679,  v695,  v710,  v724,  v737,  v749,  v760);
  uint64_t v192 = sub_3650C( v184,  v185,  v186,  v187,  v188,  v189,  v190,  v191,  v288,  v320,  v351,  v381,  v410,  v438,  v465,  v491,  v516,  v540,  v563,  v585,  v606,  v626,  v645,  v663,  v680,  v696,  v711,  v725,  v738,  v750,  v761,  v771);
  uint64_t v200 = sub_36504( v192,  v193,  v194,  v195,  v196,  v197,  v198,  v199,  v289,  v321,  v352,  v382,  v411,  v439,  v466,  v492,  v517,  v541,  v564,  v586,  v607,  v627,  v646,  v664,  v681,  v697,  v712,  v726,  v739,  v751,  v762,  v772,  v781);
  uint64_t v208 = sub_364FC( v200,  v201,  v202,  v203,  v204,  v205,  v206,  v207,  v290,  v322,  v353,  v383,  v412,  v440,  v467,  v493,  v518,  v542,  v565,  v587,  v608,  v628,  v647,  v665,  v682,  v698,  v713,  v727,  v740,  v752,  v763,  v773,  v782,  v790);
  uint64_t v216 = sub_364F4( v208,  v209,  v210,  v211,  v212,  v213,  v214,  v215,  v291,  v323,  v354,  v384,  v413,  v441,  v468,  v494,  v519,  v543,  v566,  v588,  v609,  v629,  v648,  v666,  v683,  v699,  v714,  v728,  v741,  v753,  v764,  v774,  v783,  v791,  v798);
  uint64_t v224 = sub_364EC( v216,  v217,  v218,  v219,  v220,  v221,  v222,  v223,  v292,  v324,  v355,  v385,  v414,  v442,  v469,  v495,  v520,  v544,  v567,  v589,  v610,  v630,  v649,  v667,  v684,  v700,  v715,  v729,  v742,  v754,  v765,  v775,  v784,  v792,  v799,  v805);
  uint64_t v232 = sub_364E4( v224,  v225,  v226,  v227,  v228,  v229,  v230,  v231,  v293,  v325,  v356,  v386,  v415,  v443,  v470,  v496,  v521,  v545,  v568,  v590,  v611,  v631,  v650,  v668,  v685,  v701,  v716,  v730,  v743,  v755,  v766,  v776,  v785,  v793,  v800,  v806,  v811);
  uint64_t v240 = sub_364DC( v232,  v233,  v234,  v235,  v236,  v237,  v238,  v239,  v294,  v326,  v357,  v387,  v416,  v444,  v471,  v497,  v522,  v546,  v569,  v591,  v612,  v632,  v651,  v669,  v686,  v702,  v717,  v731,  v744,  v756,  v767,  v777,  v786,  v794,  v801,  v807,  v812,  v816);
  uint64_t v248 = sub_364D4( v240,  v241,  v242,  v243,  v244,  v245,  v246,  v247,  v295,  v327,  v358,  v388,  v417,  v445,  v472,  v498,  v523,  v547,  v570,  v592,  v613,  v633,  v652,  v670,  v687,  v703,  v718,  v732,  v745,  v757,  v768,  v778,  v787,  v795,  v802,  v808,  v813,  v817,  v820);
  uint64_t v256 = sub_366F8( v248,  v249,  v250,  v251,  v252,  v253,  v254,  v255,  v296,  v328,  v359,  v389,  v418,  v446,  v473,  v499,  v524,  v548,  v571,  v593,  v614,  v634,  v653,  v671,  v688,  v704,  v719,  v733,  v746,  v758,  v769,  v779,  v788,  v796,  v803,  v809,  v814,  v818,  v821,  v823);
  sub_366F0( v256,  v257,  v258,  v259,  v260,  v261,  v262,  v263,  v297,  v329,  v360,  v390,  v419,  v447,  v474,  v500,  v525,  v549,  v572,  v594,  v615,  v635,  v654,  v672,  v689,  v705,  v720,  v734,  v747,  v759,  v770,  v780,  v789,  v797,  v804,  v810,  v815,  v819,  v822,  v824,  v825);
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  sub_36814();
  uint64_t v264 = (uint64_t (*)(void))sub_36E80();
  return sub_36148(v264);
}

uint64_t sub_2D6F4()
{
  return sub_A5D0();
}

uint64_t sub_2D720()
{
  uint64_t v3 = *(void *)(v1 + 12056);
  os_log_type_t v4 = *(uint64_t **)(v1 + 10952);
  *(void *)(v1 + 12064) = v4;
  swift_unknownObjectRelease(v3);
  uint64_t v5 = sub_36D1C(*v4);
  switch(v5)
  {
    case 108LL:
      sub_36BF8();
      uint64_t v25 = *(void *)(v1 + 11304);
      sub_A5DC((uint64_t)v0, v26);
      sub_36170();
      sub_23374();
      os_log_type_t v27 = sub_AB70();
      if (sub_A988(v27))
      {
        uint64_t v28 = (_WORD *)sub_3635C();
        sub_366C0(v28);
        sub_A940( &dword_0,  v29,  v30,  "Received .allMedsLoggedAlready inside first .receivedConfirmationLogAsScheduled case, handling.");
        sub_5050(v25);
      }

      uint64_t v31 = *(void (**)(uint64_t))(v1 + 12040);
      uint64_t v32 = *(void *)(v1 + 11176);
      uint64_t v33 = *(void *)(v1 + 11160);
      uint64_t v1054 = *(void *)(v1 + 11064);
      uint64_t v1055 = *(void *)(v1 + 11088);
      uint64_t v34 = *(void *)(v1 + 11048);

      uint64_t v35 = sub_373E0();
      v31(v35);
      sub_36EDC();
      uint64_t v36 = sub_36D48(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 16));
      sub_369D4(v36, (uint64_t)sub_A633C);
      sub_36EFC(v32, *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8));
      sub_368F8();
      *(void *)(v1 + 12248) = *(void *)(v34 + 336);
      sub_363E8();
      uint64_t v37 = swift_retain();
      getMedStatus(from:)(v37, v38, v39, v40, v41, v42);
      sub_36BE0();
      sub_A66C(v1054, 1LL, v43, v1055);
      uint64_t v44 = (void *)swift_task_alloc(dword_190C24);
      *(void *)(v1 + 12256) = v44;
      *uint64_t v44 = v1;
      v44[1] = sub_2EAF4;
      sub_371E0();
      return sub_131F84(v45, v46);
    case 107LL:
      uint64_t v47 = *(os_log_s **)(v1 + 12024);
      uint64_t v48 = *(void *)(v1 + 11448);
      uint64_t v49 = *(uint8_t **)(v1 + 11304);
      sub_A5DC((uint64_t)v47, v1 + 10472);
      sub_36868();
      sub_A86C();
      os_log_type_t v50 = sub_AB70();
      if (sub_232DC(v50))
      {
        uint64_t v51 = (_WORD *)sub_3635C();
        sub_36A44(v51);
        sub_232EC( &dword_0,  v47,  (os_log_type_t)v48,  "Received .needsConfirmMixedLogging inside first .receivedConfirmationLogAsScheduled case, handling.",  v49);
        sub_5050((uint64_t)v49);
      }

      uint64_t v52 = *(void *)(v1 + 11048);

      sub_37044();
      uint64_t v53 = *(void *)(v52 + 224);
      uint64_t v54 = *(void *)(v52 + 232);
      v52 += 224LL;
      uint64_t v55 = *(void *)(v52 + 16);
      uint64_t v56 = *(void *)(v52 + 24);
      uint64_t v57 = *(void *)(v52 + 32);
      uint64_t v58 = *(void *)(v52 + 40);
      uint64_t v59 = *(void *)(v52 + 48);
      uint64_t v60 = *(void *)(v52 + 56);
      unsigned __int8 v61 = *(_BYTE *)(v52 + 64);
      *(void *)uint64_t v52 = 6LL;
      *(_OWORD *)(v52 + 8) = 0u;
      *(_OWORD *)(v52 + 24) = 0u;
      *(_OWORD *)(v52 + 40) = 0u;
      *(void *)(v52 + 56) = 0LL;
      *(_BYTE *)(v52 + 64) = -64;
      uint64_t v62 = sub_3561C(v53, v54, v55, v56, v57, v58, v59, v60, v61);
      sub_36D9C(v62, (SEL *)&selRef_matchingMeds);
      if (v63)
      {
        uint64_t v64 = v63;
        uint64_t v1056 = *(void **)(v1 + 12048);
        uint64_t v65 = *(void *)(v1 + 11264);
        uint64_t v66 = *(void *)(v1 + 11048);
        uint64_t v67 = sub_363E8();
        getMedStatus(from:)(v67, v68, v69, v70, v71, v72);
        char v74 = v73;
        sub_3652C();
        sub_31100(v1057);
        type metadata accessor for WellnessLoggingCATsSimple(0LL);
        sub_37510();
        uint64_t v75 = sub_AAF8(v65);
        type metadata accessor for WellnessLoggingCATs(0LL);
        sub_37510();
        uint64_t v76 = sub_AAF0(v65);
        uint64_t v77 = sub_AA80();
        sub_A72C(v77);
        uint64_t v78 = sub_A9C8();
        uint64_t v79 = type metadata accessor for LogMedGenericMixedStatusConfirmationStrategy();
        uint64_t v80 = sub_20308(v79, 248LL);
        uint64_t v81 = sub_357D0(v74 & 1, v64, v1057, v75, v76, v78, v80);
        swift_retain();
        static OutputPublisherFactory.makeOutputPublisherAsync()(v1057);
        uint64_t v82 = sub_494C(&qword_18AEA0);
        sub_A72C(v82);
        sub_35A68( &qword_18AEA8,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for LogMedGenericMixedStatusConfirmationStrategy);
        *(void *)(v1 + 10968) = PromptForValueFlowAsync.init<A>(strategy:outputPublisher:)(v81, v1057, v79, v83);
        sub_3586C(&qword_18AEB0, &qword_18AEA0);
        sub_372CC();
        static ExecuteResponse.ongoing<A>(next:childCompletion:)(v1 + 10968, sub_35868, v66, v82);

        sub_37110();
        sub_367AC();
        sub_3652C();
      }

      else
      {
        uint64_t v91 = *(os_log_s **)(v1 + 12024);
        uint64_t v92 = *(void *)(v1 + 11440);
        uint64_t v93 = *(uint8_t **)(v1 + 11304);
        sub_A5DC((uint64_t)v91, v1 + 10448);
        sub_A9B8();
        sub_AB5C();
        os_log_type_t v94 = sub_AB70();
        if (sub_A634(v94))
        {
          uint64_t v95 = (_WORD *)sub_3635C();
          sub_37364(v95);
          sub_232EC( &dword_0,  v91,  (os_log_type_t)v92,  "Needed confirmation for mixed logging, but intentResponse.matchingMeds was nil.",  v93);
          sub_5050((uint64_t)v93);
        }

        uint64_t v96 = *(void **)(v1 + 12048);
        sub_36C80();
        sub_36CC4();
        sub_37000();
        sub_A178();
        sub_36F0C();

        sub_A1B4((void *)(v1 + 5592));
      }

      uint64_t v412 = *(void *)(v1 + 11520);
      uint64_t v447 = *(void *)(v1 + 11512);
      uint64_t v481 = *(void *)(v1 + 11504);
      uint64_t v514 = *(void *)(v1 + 11496);
      uint64_t v546 = *(void *)(v1 + 11488);
      uint64_t v577 = *(void *)(v1 + 11480);
      uint64_t v607 = *(void *)(v1 + 11472);
      uint64_t v636 = *(void *)(v1 + 11464);
      uint64_t v664 = *(void *)(v1 + 11456);
      uint64_t v691 = *(void *)(v1 + 11448);
      uint64_t v717 = *(void *)(v1 + 11440);
      uint64_t v742 = *(void *)(v1 + 11432);
      uint64_t v766 = *(void *)(v1 + 11424);
      uint64_t v789 = *(void *)(v1 + 11416);
      uint64_t v811 = *(void *)(v1 + 11408);
      uint64_t v832 = *(void *)(v1 + 11400);
      uint64_t v852 = *(void *)(v1 + 11392);
      uint64_t v871 = *(void *)(v1 + 11384);
      uint64_t v889 = *(void *)(v1 + 11376);
      uint64_t v906 = *(void *)(v1 + 11368);
      uint64_t v922 = *(void *)(v1 + 11360);
      uint64_t v937 = *(void *)(v1 + 11352);
      uint64_t v951 = *(void *)(v1 + 11344);
      uint64_t v964 = *(void *)(v1 + 11336);
      uint64_t v976 = *(void *)(v1 + 11328);
      uint64_t v987 = *(void *)(v1 + 11320);
      uint64_t v997 = *(void *)(v1 + 11296);
      uint64_t v1006 = *(void *)(v1 + 11288);
      uint64_t v1014 = *(void *)(v1 + 11264);
      uint64_t v1021 = *(void *)(v1 + 11256);
      uint64_t v1027 = *(void *)(v1 + 11248);
      uint64_t v1032 = *(void *)(v1 + 11240);
      uint64_t v1036 = *(void *)(v1 + 11232);
      uint64_t v1039 = *(void *)(v1 + 11224);
      uint64_t v1041 = *(void *)(v1 + 11216);
      uint64_t v1042 = *(void *)(v1 + 11208);
      uint64_t v1043 = *(void *)(v1 + 11200);
      uint64_t v1044 = *(void *)(v1 + 11176);
      uint64_t v1045 = *(void *)(v1 + 11168);
      uint64_t v1046 = *(void *)(v1 + 11144);
      uint64_t v1047 = *(void *)(v1 + 11136);
      uint64_t v1048 = *(void *)(v1 + 11128);
      uint64_t v1049 = *(void *)(v1 + 11120);
      uint64_t v1050 = *(void *)(v1 + 11112);
      uint64_t v1051 = *(void *)(v1 + 11096);
      uint64_t v1052 = *(void *)(v1 + 11080);
      uint64_t v1053 = *(void *)(v1 + 11072);
      swift_task_dealloc(*(void *)(v1 + 11600));
      sub_A760();
      sub_A7C8();
      sub_A67C();
      sub_A78C();
      sub_A8F4();
      sub_A85C();
      sub_A864();
      sub_A910();
      uint64_t v97 = sub_A8EC();
      uint64_t v105 = sub_AAD8(v97, v98, v99, v100, v101, v102, v103, v104, v377, v412);
      uint64_t v113 = sub_A888(v105, v106, v107, v108, v109, v110, v111, v112, v378, v413, v447);
      uint64_t v121 = sub_A854(v113, v114, v115, v116, v117, v118, v119, v120, v379, v414, v448, v481);
      uint64_t v129 = sub_A84C(v121, v122, v123, v124, v125, v126, v127, v128, v380, v415, v449, v482, v514);
      uint64_t v137 = sub_A844(v129, v130, v131, v132, v133, v134, v135, v136, v381, v416, v450, v483, v515, v546);
      uint64_t v145 = sub_A83C(v137, v138, v139, v140, v141, v142, v143, v144, v382, v417, v451, v484, v516, v547, v577);
      uint64_t v153 = sub_A95C(v145, v146, v147, v148, v149, v150, v151, v152, v383, v418, v452, v485, v517, v548, v578, v607);
      uint64_t v161 = sub_A954( v153,  v154,  v155,  v156,  v157,  v158,  v159,  v160,  v384,  v419,  v453,  v486,  v518,  v549,  v579,  v608,  v636);
      uint64_t v169 = sub_A938( v161,  v162,  v163,  v164,  v165,  v166,  v167,  v168,  v385,  v420,  v454,  v487,  v519,  v550,  v580,  v609,  v637,  v664);
      uint64_t v177 = sub_A930( v169,  v170,  v171,  v172,  v173,  v174,  v175,  v176,  v386,  v421,  v455,  v488,  v520,  v551,  v581,  v610,  v638,  v665,  v691);
      uint64_t v185 = sub_A928( v177,  v178,  v179,  v180,  v181,  v182,  v183,  v184,  v387,  v422,  v456,  v489,  v521,  v552,  v582,  v611,  v639,  v666,  v692,  v717);
      uint64_t v193 = sub_A920( v185,  v186,  v187,  v188,  v189,  v190,  v191,  v192,  v388,  v423,  v457,  v490,  v522,  v553,  v583,  v612,  v640,  v667,  v693,  v718,  v742);
      uint64_t v201 = sub_36374( v193,  v194,  v195,  v196,  v197,  v198,  v199,  v200,  v389,  v424,  v458,  v491,  v523,  v554,  v584,  v613,  v641,  v668,  v694,  v719,  v743,  v766);
      uint64_t v209 = sub_3636C( v201,  v202,  v203,  v204,  v205,  v206,  v207,  v208,  v390,  v425,  v459,  v492,  v524,  v555,  v585,  v614,  v642,  v669,  v695,  v720,  v744,  v767,  v789);
      uint64_t v217 = sub_36364( v209,  v210,  v211,  v212,  v213,  v214,  v215,  v216,  v391,  v426,  v460,  v493,  v525,  v556,  v586,  v615,  v643,  v670,  v696,  v721,  v745,  v768,  v790,  v811);
      uint64_t v225 = sub_363F0( v217,  v218,  v219,  v220,  v221,  v222,  v223,  v224,  v392,  v427,  v461,  v494,  v526,  v557,  v587,  v616,  v644,  v671,  v697,  v722,  v746,  v769,  v791,  v812,  v832);
      uint64_t v233 = sub_36430( v225,  v226,  v227,  v228,  v229,  v230,  v231,  v232,  v393,  v428,  v462,  v495,  v527,  v558,  v588,  v617,  v645,  v672,  v698,  v723,  v747,  v770,  v792,  v813,  v833,  v852);
      uint64_t v241 = sub_36428( v233,  v234,  v235,  v236,  v237,  v238,  v239,  v240,  v394,  v429,  v463,  v496,  v528,  v559,  v589,  v618,  v646,  v673,  v699,  v724,  v748,  v771,  v793,  v814,  v834,  v853,  v871);
      uint64_t v249 = sub_36478( v241,  v242,  v243,  v244,  v245,  v246,  v247,  v248,  v395,  v430,  v464,  v497,  v529,  v560,  v590,  v619,  v647,  v674,  v700,  v725,  v749,  v772,  v794,  v815,  v835,  v854,  v872,  v889);
      uint64_t v257 = sub_36524( v249,  v250,  v251,  v252,  v253,  v254,  v255,  v256,  v396,  v431,  v465,  v498,  v530,  v561,  v591,  v620,  v648,  v675,  v701,  v726,  v750,  v773,  v795,  v816,  v836,  v855,  v873,  v890,  v906);
      uint64_t v265 = sub_3651C( v257,  v258,  v259,  v260,  v261,  v262,  v263,  v264,  v397,  v432,  v466,  v499,  v531,  v562,  v592,  v621,  v649,  v676,  v702,  v727,  v751,  v774,  v796,  v817,  v837,  v856,  v874,  v891,  v907,  v922);
      uint64_t v273 = sub_36514( v265,  v266,  v267,  v268,  v269,  v270,  v271,  v272,  v398,  v433,  v467,  v500,  v532,  v563,  v593,  v622,  v650,  v677,  v703,  v728,  v752,  v775,  v797,  v818,  v838,  v857,  v875,  v892,  v908,  v923,  v937);
      uint64_t v281 = sub_3650C( v273,  v274,  v275,  v276,  v277,  v278,  v279,  v280,  v399,  v434,  v468,  v501,  v533,  v564,  v594,  v623,  v651,  v678,  v704,  v729,  v753,  v776,  v798,  v819,  v839,  v858,  v876,  v893,  v909,  v924,  v938,  v951);
      uint64_t v289 = sub_36504( v281,  v282,  v283,  v284,  v285,  v286,  v287,  v288,  v400,  v435,  v469,  v502,  v534,  v565,  v595,  v624,  v652,  v679,  v705,  v730,  v754,  v777,  v799,  v820,  v840,  v859,  v877,  v894,  v910,  v925,  v939,  v952,  v964);
      uint64_t v297 = sub_364FC( v289,  v290,  v291,  v292,  v293,  v294,  v295,  v296,  v401,  v436,  v470,  v503,  v535,  v566,  v596,  v625,  v653,  v680,  v706,  v731,  v755,  v778,  v800,  v821,  v841,  v860,  v878,  v895,  v911,  v926,  v940,  v953,  v965,  v976);
      uint64_t v305 = sub_364F4( v297,  v298,  v299,  v300,  v301,  v302,  v303,  v304,  v402,  v437,  v471,  v504,  v536,  v567,  v597,  v626,  v654,  v681,  v707,  v732,  v756,  v779,  v801,  v822,  v842,  v861,  v879,  v896,  v912,  v927,  v941,  v954,  v966,  v977,  v987);
      uint64_t v313 = sub_364EC( v305,  v306,  v307,  v308,  v309,  v310,  v311,  v312,  v403,  v438,  v472,  v505,  v537,  v568,  v598,  v627,  v655,  v682,  v708,  v733,  v757,  v780,  v802,  v823,  v843,  v862,  v880,  v897,  v913,  v928,  v942,  v955,  v967,  v978,  v988,  v997);
      uint64_t v321 = sub_364E4( v313,  v314,  v315,  v316,  v317,  v318,  v319,  v320,  v404,  v439,  v473,  v506,  v538,  v569,  v599,  v628,  v656,  v683,  v709,  v734,  v758,  v781,  v803,  v824,  v844,  v863,  v881,  v898,  v914,  v929,  v943,  v956,  v968,  v979,  v989,  v998,  v1006);
      uint64_t v329 = sub_364DC( v321,  v322,  v323,  v324,  v325,  v326,  v327,  v328,  v405,  v440,  v474,  v507,  v539,  v570,  v600,  v629,  v657,  v684,  v710,  v735,  v759,  v782,  v804,  v825,  v845,  v864,  v882,  v899,  v915,  v930,  v944,  v957,  v969,  v980,  v990,  v999,  v1007,  v1014);
      uint64_t v337 = sub_364D4( v329,  v330,  v331,  v332,  v333,  v334,  v335,  v336,  v406,  v441,  v475,  v508,  v540,  v571,  v601,  v630,  v658,  v685,  v711,  v736,  v760,  v783,  v805,  v826,  v846,  v865,  v883,  v900,  v916,  v931,  v945,  v958,  v970,  v981,  v991,  v1000,  v1008,  v1015,  v1021);
      uint64_t v345 = sub_366F8( v337,  v338,  v339,  v340,  v341,  v342,  v343,  v344,  v407,  v442,  v476,  v509,  v541,  v572,  v602,  v631,  v659,  v686,  v712,  v737,  v761,  v784,  v806,  v827,  v847,  v866,  v884,  v901,  v917,  v932,  v946,  v959,  v971,  v982,  v992,  v1001,  v1009,  v1016,  v1022,  v1027);
      uint64_t v353 = sub_366F0( v345,  v346,  v347,  v348,  v349,  v350,  v351,  v352,  v408,  v443,  v477,  v510,  v542,  v573,  v603,  v632,  v660,  v687,  v713,  v738,  v762,  v785,  v807,  v828,  v848,  v867,  v885,  v902,  v918,  v933,  v947,  v960,  v972,  v983,  v993,  v1002,  v1010,  v1017,  v1023,  v1028,  v1032);
      uint64_t v361 = sub_36B90( v353,  v354,  v355,  v356,  v357,  v358,  v359,  v360,  v409,  v444,  v478,  v511,  v543,  v574,  v604,  v633,  v661,  v688,  v714,  v739,  v763,  v786,  v808,  v829,  v849,  v868,  v886,  v903,  v919,  v934,  v948,  v961,  v973,  v984,  v994,  v1003,  v1011,  v1018,  v1024,  v1029,  v1033,  v1036);
      uint64_t v369 = sub_36EF4( v361,  v362,  v363,  v364,  v365,  v366,  v367,  v368,  v410,  v445,  v479,  v512,  v544,  v575,  v605,  v634,  v662,  v689,  v715,  v740,  v764,  v787,  v809,  v830,  v850,  v869,  v887,  v904,  v920,  v935,  v949,  v962,  v974,  v985,  v995,  v1004,  v1012,  v1019,  v1025,  v1030,  v1034,  v1037,  v1039);
      sub_36EEC( v369,  v370,  v371,  v372,  v373,  v374,  v375,  v376,  v411,  v446,  v480,  v513,  v545,  v576,  v606,  v635,  v663,  v690,  v716,  v741,  v765,  v788,  v810,  v831,  v851,  v870,  v888,  v905,  v921,  v936,  v950,  v963,  v975,  v986,  v996,  v1005,  v1013,  v1020,  v1026,  v1031,  v1035,  v1038,  v1040,  v1041);
      swift_task_dealloc(v1042);
      swift_task_dealloc(v1043);
      swift_task_dealloc(v1044);
      swift_task_dealloc(v1045);
      swift_task_dealloc(v1046);
      swift_task_dealloc(v1047);
      swift_task_dealloc(v1048);
      swift_task_dealloc(v1049);
      swift_task_dealloc(v1050);
      swift_task_dealloc(v1051);
      swift_task_dealloc(v1052);
      swift_task_dealloc(v1053);
      sub_36B88();
      sub_366E8();
      return sub_36148(*(uint64_t (**)(void))(v1 + 8));
    case 4LL:
      uint64_t v6 = *(void *)(v1 + 12024);
      uint64_t v7 = *(void *)(v1 + 11464);
      uint64_t v8 = *(uint8_t **)(v1 + 11304);
      sub_A5DC(v6, v1 + 10376);
      sub_36868();
      uint64_t v9 = (os_log_s *)sub_A86C();
      os_log_type_t v10 = static os_log_type_t.debug.getter();
      if (sub_37314(v10))
      {
        uint64_t v11 = (_WORD *)sub_3635C();
        sub_36A44(v11);
        sub_232EC(&dword_0, v9, (os_log_type_t)v7, "Received successful intent response, creating output.", v8);
        sub_5050((uint64_t)v8);
      }

      sub_37400();
      uint64_t v12 = sub_374D0();
      sub_36D9C(v12, (SEL *)&selRef_matchingMedsBeforeUpdate);
      sub_37198(v13, (uint64_t)_swiftEmptyArrayStorage);
      sub_2A184();
      uint64_t v14 = sub_37370();
      getMedStatus(from:)(v14, v15, v16, v17, v18, v19);
      *(_BYTE *)(v1 + 7098) = v20 & 1;
      sub_37034();
      *(void *)(v1 + 1207sub_D878(v0 + 2) = *(void *)(v6 + 336);
      sub_363E8();
      uint64_t v21 = (void *)sub_36B20();
      *(void *)(v1 + 12080) = v21;
      sub_37170(v21, (uint64_t)sub_2DFA0);
      sub_371E0();
      return sub_1311F4(v22, v23);
    default:
      sub_36BF8();
      uint64_t v84 = *(void *)(v1 + 11304);
      sub_A5DC((uint64_t)v0, v85);
      sub_36170();
      sub_23374();
      os_log_type_t v86 = sub_AB70();
      if (sub_A988(v86))
      {
        uint64_t v87 = (_WORD *)sub_3635C();
        sub_366C0(v87);
        sub_A940( &dword_0,  v88,  v89,  "Got unacceptable response code after confirmedLogAsScheduled, creating failure output.");
        sub_5050(v84);
      }

      sub_36CAC();
      sub_36D90();
      *(void *)(v1 + 12424) = *(void *)(v2 + 336);
      sub_363E8();
      uint64_t v90 = (void *)sub_36B20();
      *(void *)(v1 + 1243sub_D878(v0 + 2) = v90;
      sub_37160(v90, (uint64_t)sub_2F6D0);
      sub_371E0();
      return sub_1312C4();
  }

uint64_t sub_2DFA0()
{
  *(void *)(v0 + 12088) = v2;
  sub_36900(v3);
  swift_release();
  if (v1) {
    sub_36860();
  }
  sub_A964();
  return sub_A810();
}

#error "2E040: call analysis failed (funcsize=108)"
uint64_t sub_2E1B0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sub_AA10();
  v1[1336] = v0;
  v1[1337] = v2;
  v1[1338] = v3;
  sub_364C8();
  *(void *)(v5 + 12120) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_2E1F8()
{
  v0[1516] = v0[1337];
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  v0[1517] = v1;
  uint64_t v2 = sub_36408(v1, (uint64_t)sub_2E238);
  return sub_36164(v2, v3);
}

uint64_t sub_2E238()
{
  v1[1339] = v0;
  v1[1340] = v2;
  v1[1341] = v3;
  sub_364C8();
  *(void *)(v5 + 12144) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_2E280()
{
  v0[1519] = v0[1340];
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  v0[1520] = v1;
  uint64_t v2 = sub_36540(v1, (uint64_t)sub_2E2C0);
  return sub_36164(v2, v3);
}

uint64_t sub_2E2C0()
{
  v1[1342] = v0;
  v1[1343] = v2;
  v1[1344] = v3;
  sub_364C8();
  *(void *)(v5 + 12168) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_2E308()
{
  v0[1522] = v0[1343];
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  v0[1523] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2E354;
  unint64_t v2 = sub_368E0();
  return sub_36164(v2, v3);
}

uint64_t sub_2E354()
{
  v1[1345] = v0;
  v1[1346] = v2;
  v1[1347] = v3;
  sub_364C8();
  *(void *)(v5 + 1219sub_D878(v0 + 2) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_2E39C()
{
  v0[1525] = v0[1346];
  sub_36E8C();
  v0[1526] = v1;
  uint64_t v2 = (void *)swift_task_alloc(dword_18B704);
  v0[1527] = v2;
  uint64_t v3 = sub_36E5C(v2, (uint64_t)sub_2E3EC);
  return sub_366DC(v3, v4);
}

uint64_t sub_2E3EC()
{
  v1[1348] = v0;
  v1[1349] = v2;
  v1[1350] = v3;
  sub_364C8();
  *(void *)(v5 + 12224) = v4;
  swift_task_dealloc(v6);
  sub_249D4();
  sub_A964();
  return sub_A5D0();
}

#error "2E600: call analysis failed (funcsize=154)"
uint64_t sub_2E6E4()
{
  uint64_t v0;
  sub_AA10();
  sub_20264(*(void *)(v0 + 12240));
  sub_2A184();
  sub_AA20();
  sub_A964();
  return sub_A810();
}

uint64_t sub_2E72C()
{
  uint64_t v1 = *(void **)(v0 + 12064);
  uint64_t v2 = *(void **)(v0 + 12048);
  sub_36B48();
  sub_371C0();
  uint64_t v857 = *(void *)(v0 + 11080);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_369CC();
  sub_372E4();
  uint64_t v4 = sub_364BC((uint64_t)&unk_17CDD0);
  uint64_t v5 = sub_37270(v4);
  *(void *)(v0 + 1099sub_D878(v0 + 2) = sub_374A0((uint64_t)v5, (uint64_t)&unk_18AEC0);
  sub_3722C();

  sub_36B98();
  sub_373A8();
  sub_36EC4();
  sub_26F04(v857, type metadata accessor for GenericMedCompletedLogModel);
  sub_37458(v6, type metadata accessor for SnippetHeaderModel);
  sub_37450(v7, &qword_189CF8);
  sub_36A34();
  sub_37034();
  sub_35FF4();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  sub_A78C();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  uint64_t v8 = sub_A8EC();
  uint64_t v16 = sub_A888(v8, v9, v10, v11, v12, v13, v14, v15, v265, v297, v329);
  uint64_t v24 = sub_A854(v16, v17, v18, v19, v20, v21, v22, v23, v266, v298, v330, v361);
  uint64_t v32 = sub_A84C(v24, v25, v26, v27, v28, v29, v30, v31, v267, v299, v331, v362, v392);
  uint64_t v40 = sub_A844(v32, v33, v34, v35, v36, v37, v38, v39, v268, v300, v332, v363, v393, v422);
  uint64_t v48 = sub_A83C(v40, v41, v42, v43, v44, v45, v46, v47, v269, v301, v333, v364, v394, v423, v451);
  uint64_t v56 = sub_A95C(v48, v49, v50, v51, v52, v53, v54, v55, v270, v302, v334, v365, v395, v424, v452, v479);
  uint64_t v64 = sub_A954(v56, v57, v58, v59, v60, v61, v62, v63, v271, v303, v335, v366, v396, v425, v453, v480, v506);
  uint64_t v72 = sub_A938(v64, v65, v66, v67, v68, v69, v70, v71, v272, v304, v336, v367, v397, v426, v454, v481, v507, v532);
  uint64_t v80 = sub_A930( v72,  v73,  v74,  v75,  v76,  v77,  v78,  v79,  v273,  v305,  v337,  v368,  v398,  v427,  v455,  v482,  v508,  v533,  v557);
  uint64_t v88 = sub_A928( v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  v274,  v306,  v338,  v369,  v399,  v428,  v456,  v483,  v509,  v534,  v558,  v581);
  uint64_t v96 = sub_A920( v88,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  v275,  v307,  v339,  v370,  v400,  v429,  v457,  v484,  v510,  v535,  v559,  v582,  v604);
  uint64_t v104 = sub_36374( v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v276,  v308,  v340,  v371,  v401,  v430,  v458,  v485,  v511,  v536,  v560,  v583,  v605,  v626);
  uint64_t v112 = sub_3636C( v104,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v277,  v309,  v341,  v372,  v402,  v431,  v459,  v486,  v512,  v537,  v561,  v584,  v606,  v627,  v647);
  uint64_t v120 = sub_36364( v112,  v113,  v114,  v115,  v116,  v117,  v118,  v119,  v278,  v310,  v342,  v373,  v403,  v432,  v460,  v487,  v513,  v538,  v562,  v585,  v607,  v628,  v648,  v667);
  uint64_t v128 = sub_363F0( v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v279,  v311,  v343,  v374,  v404,  v433,  v461,  v488,  v514,  v539,  v563,  v586,  v608,  v629,  v649,  v668,  v686);
  uint64_t v136 = sub_36430( v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v280,  v312,  v344,  v375,  v405,  v434,  v462,  v489,  v515,  v540,  v564,  v587,  v609,  v630,  v650,  v669,  v687,  v704);
  uint64_t v144 = sub_36428( v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v281,  v313,  v345,  v376,  v406,  v435,  v463,  v490,  v516,  v541,  v565,  v588,  v610,  v631,  v651,  v670,  v688,  v705,  v721);
  uint64_t v152 = sub_36478( v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v282,  v314,  v346,  v377,  v407,  v436,  v464,  v491,  v517,  v542,  v566,  v589,  v611,  v632,  v652,  v671,  v689,  v706,  v722,  v737);
  uint64_t v160 = sub_36524( v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v283,  v315,  v347,  v378,  v408,  v437,  v465,  v492,  v518,  v543,  v567,  v590,  v612,  v633,  v653,  v672,  v690,  v707,  v723,  v738,  v752);
  uint64_t v168 = sub_3651C( v160,  v161,  v162,  v163,  v164,  v165,  v166,  v167,  v284,  v316,  v348,  v379,  v409,  v438,  v466,  v493,  v519,  v544,  v568,  v591,  v613,  v634,  v654,  v673,  v691,  v708,  v724,  v739,  v753,  v766);
  uint64_t v176 = sub_36514( v168,  v169,  v170,  v171,  v172,  v173,  v174,  v175,  v285,  v317,  v349,  v380,  v410,  v439,  v467,  v494,  v520,  v545,  v569,  v592,  v614,  v635,  v655,  v674,  v692,  v709,  v725,  v740,  v754,  v767,  v779);
  uint64_t v184 = sub_3650C( v176,  v177,  v178,  v179,  v180,  v181,  v182,  v183,  v286,  v318,  v350,  v381,  v411,  v440,  v468,  v495,  v521,  v546,  v570,  v593,  v615,  v636,  v656,  v675,  v693,  v710,  v726,  v741,  v755,  v768,  v780,  v791);
  uint64_t v192 = sub_36504( v184,  v185,  v186,  v187,  v188,  v189,  v190,  v191,  v287,  v319,  v351,  v382,  v412,  v441,  v469,  v496,  v522,  v547,  v571,  v594,  v616,  v637,  v657,  v676,  v694,  v711,  v727,  v742,  v756,  v769,  v781,  v792,  v802);
  uint64_t v200 = sub_364FC( v192,  v193,  v194,  v195,  v196,  v197,  v198,  v199,  v288,  v320,  v352,  v383,  v413,  v442,  v470,  v497,  v523,  v548,  v572,  v595,  v617,  v638,  v658,  v677,  v695,  v712,  v728,  v743,  v757,  v770,  v782,  v793,  v803,  v812);
  uint64_t v208 = sub_364F4( v200,  v201,  v202,  v203,  v204,  v205,  v206,  v207,  v289,  v321,  v353,  v384,  v414,  v443,  v471,  v498,  v524,  v549,  v573,  v596,  v618,  v639,  v659,  v678,  v696,  v713,  v729,  v744,  v758,  v771,  v783,  v794,  v804,  v813,  v821);
  uint64_t v216 = sub_364EC( v208,  v209,  v210,  v211,  v212,  v213,  v214,  v215,  v290,  v322,  v354,  v385,  v415,  v444,  v472,  v499,  v525,  v550,  v574,  v597,  v619,  v640,  v660,  v679,  v697,  v714,  v730,  v745,  v759,  v772,  v784,  v795,  v805,  v814,  v822,  v829);
  uint64_t v224 = sub_364E4( v216,  v217,  v218,  v219,  v220,  v221,  v222,  v223,  v291,  v323,  v355,  v386,  v416,  v445,  v473,  v500,  v526,  v551,  v575,  v598,  v620,  v641,  v661,  v680,  v698,  v715,  v731,  v746,  v760,  v773,  v785,  v796,  v806,  v815,  v823,  v830,  v836);
  uint64_t v232 = sub_364DC( v224,  v225,  v226,  v227,  v228,  v229,  v230,  v231,  v292,  v324,  v356,  v387,  v417,  v446,  v474,  v501,  v527,  v552,  v576,  v599,  v621,  v642,  v662,  v681,  v699,  v716,  v732,  v747,  v761,  v774,  v786,  v797,  v807,  v816,  v824,  v831,  v837,  v842);
  uint64_t v240 = sub_364D4( v232,  v233,  v234,  v235,  v236,  v237,  v238,  v239,  v293,  v325,  v357,  v388,  v418,  v447,  v475,  v502,  v528,  v553,  v577,  v600,  v622,  v643,  v663,  v682,  v700,  v717,  v733,  v748,  v762,  v775,  v787,  v798,  v808,  v817,  v825,  v832,  v838,  v843,  v847);
  uint64_t v248 = sub_366F8( v240,  v241,  v242,  v243,  v244,  v245,  v246,  v247,  v294,  v326,  v358,  v389,  v419,  v448,  v476,  v503,  v529,  v554,  v578,  v601,  v623,  v644,  v664,  v683,  v701,  v718,  v734,  v749,  v763,  v776,  v788,  v799,  v809,  v818,  v826,  v833,  v839,  v844,  v848,  v851);
  uint64_t v256 = sub_366F0( v248,  v249,  v250,  v251,  v252,  v253,  v254,  v255,  v295,  v327,  v359,  v390,  v420,  v449,  v477,  v504,  v530,  v555,  v579,  v602,  v624,  v645,  v665,  v684,  v702,  v719,  v735,  v750,  v764,  v777,  v789,  v800,  v810,  v819,  v827,  v834,  v840,  v845,  v849,  v852,  v854);
  sub_36B90( v256,  v257,  v258,  v259,  v260,  v261,  v262,  v263,  v296,  v328,  v360,  v391,  v421,  v450,  v478,  v505,  v531,  v556,  v580,  v603,  v625,  v646,  v666,  v685,  v703,  v720,  v736,  v751,  v765,  v778,  v790,  v801,  v811,  v820,  v828,  v835,  v841,  v846,  v850,  v853,  v855,  v856);
  sub_36B88();
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  return sub_36148(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_2E918()
{
  os_log_type_t v4 = sub_A898();
  if (sub_36958())
  {
    uint64_t v5 = (_WORD *)sub_3635C();
    sub_36908(v5);
    sub_367E8((uint64_t)_swiftEmptyArrayStorage);
    sub_232EC( &dword_0,  v0,  v4,  "Failed executing catWrapperSimple.genericMedicationCompletedLog_Dialog, returning nil",  v2);
    sub_37128();
  }

  sub_36B28();
  uint64_t v6 = (void *)v1[1508];
  uint64_t v7 = (void *)v1[1506];
  sub_36590((_OWORD *)(v1[1381] + 64LL));
  sub_36ACC();
  sub_A178();
  sub_36B14();

  sub_36DD8();
  sub_35B4C();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  sub_A78C();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  uint64_t v8 = sub_A8EC();
  uint64_t v16 = sub_AAD8(v8, v9, v10, v11, v12, v13, v14, v15, v266, v298);
  uint64_t v24 = sub_A888(v16, v17, v18, v19, v20, v21, v22, v23, v267, v299, v330);
  uint64_t v32 = sub_A854(v24, v25, v26, v27, v28, v29, v30, v31, v268, v300, v331, v361);
  uint64_t v40 = sub_A84C(v32, v33, v34, v35, v36, v37, v38, v39, v269, v301, v332, v362, v391);
  uint64_t v48 = sub_A844(v40, v41, v42, v43, v44, v45, v46, v47, v270, v302, v333, v363, v392, v420);
  uint64_t v56 = sub_A83C(v48, v49, v50, v51, v52, v53, v54, v55, v271, v303, v334, v364, v393, v421, v448);
  uint64_t v64 = sub_A95C(v56, v57, v58, v59, v60, v61, v62, v63, v272, v304, v335, v365, v394, v422, v449, v475);
  uint64_t v72 = sub_A954(v64, v65, v66, v67, v68, v69, v70, v71, v273, v305, v336, v366, v395, v423, v450, v476, v501);
  uint64_t v80 = sub_A938(v72, v73, v74, v75, v76, v77, v78, v79, v274, v306, v337, v367, v396, v424, v451, v477, v502, v526);
  uint64_t v88 = sub_A930( v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  v275,  v307,  v338,  v368,  v397,  v425,  v452,  v478,  v503,  v527,  v550);
  uint64_t v96 = sub_A928( v88,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  v276,  v308,  v339,  v369,  v398,  v426,  v453,  v479,  v504,  v528,  v551,  v573);
  uint64_t v104 = sub_A920( v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v277,  v309,  v340,  v370,  v399,  v427,  v454,  v480,  v505,  v529,  v552,  v574,  v595);
  uint64_t v112 = sub_36374( v104,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v278,  v310,  v341,  v371,  v400,  v428,  v455,  v481,  v506,  v530,  v553,  v575,  v596,  v616);
  uint64_t v120 = sub_3636C( v112,  v113,  v114,  v115,  v116,  v117,  v118,  v119,  v279,  v311,  v342,  v372,  v401,  v429,  v456,  v482,  v507,  v531,  v554,  v576,  v597,  v617,  v636);
  uint64_t v128 = sub_36364( v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v280,  v312,  v343,  v373,  v402,  v430,  v457,  v483,  v508,  v532,  v555,  v577,  v598,  v618,  v637,  v655);
  uint64_t v136 = sub_363F0( v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v281,  v313,  v344,  v374,  v403,  v431,  v458,  v484,  v509,  v533,  v556,  v578,  v599,  v619,  v638,  v656,  v673);
  uint64_t v144 = sub_36430( v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v282,  v314,  v345,  v375,  v404,  v432,  v459,  v485,  v510,  v534,  v557,  v579,  v600,  v620,  v639,  v657,  v674,  v690);
  uint64_t v152 = sub_36428( v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v283,  v315,  v346,  v376,  v405,  v433,  v460,  v486,  v511,  v535,  v558,  v580,  v601,  v621,  v640,  v658,  v675,  v691,  v706);
  uint64_t v160 = sub_36478( v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v284,  v316,  v347,  v377,  v406,  v434,  v461,  v487,  v512,  v536,  v559,  v581,  v602,  v622,  v641,  v659,  v676,  v692,  v707,  v721);
  uint64_t v168 = sub_36524( v160,  v161,  v162,  v163,  v164,  v165,  v166,  v167,  v285,  v317,  v348,  v378,  v407,  v435,  v462,  v488,  v513,  v537,  v560,  v582,  v603,  v623,  v642,  v660,  v677,  v693,  v708,  v722,  v735);
  uint64_t v176 = sub_3651C( v168,  v169,  v170,  v171,  v172,  v173,  v174,  v175,  v286,  v318,  v349,  v379,  v408,  v436,  v463,  v489,  v514,  v538,  v561,  v583,  v604,  v624,  v643,  v661,  v678,  v694,  v709,  v723,  v736,  v748);
  uint64_t v184 = sub_36514( v176,  v177,  v178,  v179,  v180,  v181,  v182,  v183,  v287,  v319,  v350,  v380,  v409,  v437,  v464,  v490,  v515,  v539,  v562,  v584,  v605,  v625,  v644,  v662,  v679,  v695,  v710,  v724,  v737,  v749,  v760);
  uint64_t v192 = sub_3650C( v184,  v185,  v186,  v187,  v188,  v189,  v190,  v191,  v288,  v320,  v351,  v381,  v410,  v438,  v465,  v491,  v516,  v540,  v563,  v585,  v606,  v626,  v645,  v663,  v680,  v696,  v711,  v725,  v738,  v750,  v761,  v771);
  uint64_t v200 = sub_36504( v192,  v193,  v194,  v195,  v196,  v197,  v198,  v199,  v289,  v321,  v352,  v382,  v411,  v439,  v466,  v492,  v517,  v541,  v564,  v586,  v607,  v627,  v646,  v664,  v681,  v697,  v712,  v726,  v739,  v751,  v762,  v772,  v781);
  uint64_t v208 = sub_364FC( v200,  v201,  v202,  v203,  v204,  v205,  v206,  v207,  v290,  v322,  v353,  v383,  v412,  v440,  v467,  v493,  v518,  v542,  v565,  v587,  v608,  v628,  v647,  v665,  v682,  v698,  v713,  v727,  v740,  v752,  v763,  v773,  v782,  v790);
  uint64_t v216 = sub_364F4( v208,  v209,  v210,  v211,  v212,  v213,  v214,  v215,  v291,  v323,  v354,  v384,  v413,  v441,  v468,  v494,  v519,  v543,  v566,  v588,  v609,  v629,  v648,  v666,  v683,  v699,  v714,  v728,  v741,  v753,  v764,  v774,  v783,  v791,  v798);
  uint64_t v224 = sub_364EC( v216,  v217,  v218,  v219,  v220,  v221,  v222,  v223,  v292,  v324,  v355,  v385,  v414,  v442,  v469,  v495,  v520,  v544,  v567,  v589,  v610,  v630,  v649,  v667,  v684,  v700,  v715,  v729,  v742,  v754,  v765,  v775,  v784,  v792,  v799,  v805);
  uint64_t v232 = sub_364E4( v224,  v225,  v226,  v227,  v228,  v229,  v230,  v231,  v293,  v325,  v356,  v386,  v415,  v443,  v470,  v496,  v521,  v545,  v568,  v590,  v611,  v631,  v650,  v668,  v685,  v701,  v716,  v730,  v743,  v755,  v766,  v776,  v785,  v793,  v800,  v806,  v811);
  uint64_t v240 = sub_364DC( v232,  v233,  v234,  v235,  v236,  v237,  v238,  v239,  v294,  v326,  v357,  v387,  v416,  v444,  v471,  v497,  v522,  v546,  v569,  v591,  v612,  v632,  v651,  v669,  v686,  v702,  v717,  v731,  v744,  v756,  v767,  v777,  v786,  v794,  v801,  v807,  v812,  v816);
  uint64_t v248 = sub_364D4( v240,  v241,  v242,  v243,  v244,  v245,  v246,  v247,  v295,  v327,  v358,  v388,  v417,  v445,  v472,  v498,  v523,  v547,  v570,  v592,  v613,  v633,  v652,  v670,  v687,  v703,  v718,  v732,  v745,  v757,  v768,  v778,  v787,  v795,  v802,  v808,  v813,  v817,  v820);
  uint64_t v256 = sub_366F8( v248,  v249,  v250,  v251,  v252,  v253,  v254,  v255,  v296,  v328,  v359,  v389,  v418,  v446,  v473,  v499,  v524,  v548,  v571,  v593,  v614,  v634,  v653,  v671,  v688,  v704,  v719,  v733,  v746,  v758,  v769,  v779,  v788,  v796,  v803,  v809,  v814,  v818,  v821,  v823);
  sub_366F0( v256,  v257,  v258,  v259,  v260,  v261,  v262,  v263,  v297,  v329,  v360,  v390,  v419,  v447,  v474,  v500,  v525,  v549,  v572,  v594,  v615,  v635,  v654,  v672,  v689,  v705,  v720,  v734,  v747,  v759,  v770,  v780,  v789,  v797,  v804,  v810,  v815,  v819,  v822,  v824,  v825);
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  sub_36814();
  uint64_t v264 = (uint64_t (*)(void))sub_36E80();
  return sub_36148(v264);
}

uint64_t sub_2EAF4()
{
  *(void *)(v0 + 12264) = v2;
  uint64_t v4 = sub_36900(v3);
  if (v1)
  {
    sub_367AC();
    uint64_t v5 = sub_36860();
    sub_36A94(v5, &qword_189D00);
  }

  else
  {
    sub_36A94(v4, &qword_189D00);
    sub_367AC();
  }

  sub_A964();
  return sub_363F8(v6, v7, v8);
}

uint64_t sub_2EB70()
{
  uint64_t v1 = (void *)(v0 + 7784);
  uint64_t v2 = (void *)(v0 + 7824);
  id v3 = [*(id *)(v0 + 12264) catId];
  sub_36E70();
  sub_36AD8();
  sub_36534();
  sub_36CB8();
  sub_36750();
  if ((sub_3666C((void *)(v0 + 7664)) & 1) != 0)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 7664));
    uint64_t v4 = _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 7624));
    unsigned __int8 v6 = 4;
  }

  else
  {
    sub_36FDC();
    uint64_t v2 = (void *)(v0 + 7784);
    sub_3671C();
    uint64_t v1 = *(void **)(v0 + 7776);
    sub_36838((void *)(v0 + 7744));
    uint64_t v4 = sub_36DA4();
    if (v7) {
      unsigned __int8 v6 = 0;
    }
    else {
      unsigned __int8 v6 = 4;
    }
  }

  sub_370BC(v4, v5, v6);
  sub_36FE8();
  sub_36598(v1);
  if ((sub_3662C(v2) & 1) != 0)
  {
    uint64_t v8 = sub_36E9C();
  }

  else
  {
    sub_36AE4();
    sub_36480();
    sub_3664C((void *)(v0 + 7904));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 7904));
    sub_36C10((void *)(v0 + 7864));
    if (v7) {
      uint64_t v8 = 9LL;
    }
    else {
      uint64_t v8 = 11LL;
    }
  }

  uint64_t v9 = HealthApps.rawValue.getter(v8);
  *(void *)(v0 + 1227sub_D878(v0 + 2) = v10;
  *(void *)(v0 + 12280) = v9;
  uint64_t v11 = (void *)swift_task_alloc(dword_18B6EC);
  *(void *)(v0 + 12288) = v11;
  uint64_t v12 = sub_3655C(v11, (uint64_t)sub_2ED10);
  return sub_363CC(v12, v13);
}

uint64_t sub_2ED10()
{
  v1[1351] = v0;
  v1[1352] = v2;
  v1[1353] = v3;
  sub_364C8();
  *(void *)(v5 + 12296) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_2ED58()
{
  v0[1538] = v0[1352];
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  v0[1539] = v1;
  uint64_t v2 = sub_36408(v1, (uint64_t)sub_2ED98);
  return sub_36164(v2, v3);
}

uint64_t sub_2ED98()
{
  v1[1354] = v0;
  v1[1355] = v2;
  v1[1356] = v3;
  sub_364C8();
  *(void *)(v5 + 12320) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_2EDE0()
{
  v0[1541] = v0[1355];
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  v0[1542] = v1;
  uint64_t v2 = sub_36540(v1, (uint64_t)sub_2EE20);
  return sub_36164(v2, v3);
}

uint64_t sub_2EE20()
{
  v1[1357] = v0;
  v1[1358] = v2;
  v1[1359] = v3;
  sub_364C8();
  *(void *)(v5 + 12344) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_2EE68()
{
  v0[1544] = v0[1358];
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  v0[1545] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2EEB4;
  unint64_t v2 = sub_368E0();
  return sub_36164(v2, v3);
}

uint64_t sub_2EEB4()
{
  v1[1360] = v0;
  v1[1361] = v2;
  v1[1362] = v3;
  sub_364C8();
  *(void *)(v5 + 12368) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_2EEFC()
{
  v0[1547] = v0[1361];
  sub_36E8C();
  v0[1548] = v1;
  uint64_t v2 = (void *)swift_task_alloc(dword_18B704);
  v0[1549] = v2;
  uint64_t v3 = sub_36E5C(v2, (uint64_t)sub_2EF4C);
  return sub_366DC(v3, v4);
}

uint64_t sub_2EF4C()
{
  v1[1363] = v0;
  v1[1364] = v2;
  v1[1365] = v3;
  sub_364C8();
  *(void *)(v5 + 12400) = v4;
  swift_task_dealloc(v6);
  sub_249D4();
  sub_A964();
  return sub_A5D0();
}

#error "2F1CC: call analysis failed (funcsize=180)"
uint64_t sub_2F2AC()
{
  uint64_t v0;
  sub_AA10();
  sub_20264(*(void *)(v0 + 12416));
  sub_2A184();
  sub_AA20();
  sub_A964();
  return sub_A810();
}

uint64_t sub_2F2F4()
{
  uint64_t v1 = *(void **)(v0 + 12064);
  uint64_t v2 = *(void **)(v0 + 12048);
  sub_36B48();
  sub_371C0();
  uint64_t v857 = *(void *)(v0 + 11080);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_369CC();
  sub_372E4();
  uint64_t v4 = sub_364BC((uint64_t)&unk_17CDA8);
  uint64_t v5 = sub_37270(v4);
  *(void *)(v0 + 10944) = sub_374A0((uint64_t)v5, (uint64_t)&unk_18AE98);
  sub_3722C();

  sub_36B98();
  sub_373A8();
  sub_36EC4();
  sub_26F04(v857, type metadata accessor for GenericMedCompletedLogModel);
  sub_37458(v6, type metadata accessor for SnippetHeaderModel);
  sub_37450(v7, &qword_189CF8);
  sub_36A34();
  sub_37034();
  sub_35FF4();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  sub_A78C();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  uint64_t v8 = sub_A8EC();
  uint64_t v16 = sub_A888(v8, v9, v10, v11, v12, v13, v14, v15, v265, v297, v329);
  uint64_t v24 = sub_A854(v16, v17, v18, v19, v20, v21, v22, v23, v266, v298, v330, v361);
  uint64_t v32 = sub_A84C(v24, v25, v26, v27, v28, v29, v30, v31, v267, v299, v331, v362, v392);
  uint64_t v40 = sub_A844(v32, v33, v34, v35, v36, v37, v38, v39, v268, v300, v332, v363, v393, v422);
  uint64_t v48 = sub_A83C(v40, v41, v42, v43, v44, v45, v46, v47, v269, v301, v333, v364, v394, v423, v451);
  uint64_t v56 = sub_A95C(v48, v49, v50, v51, v52, v53, v54, v55, v270, v302, v334, v365, v395, v424, v452, v479);
  uint64_t v64 = sub_A954(v56, v57, v58, v59, v60, v61, v62, v63, v271, v303, v335, v366, v396, v425, v453, v480, v506);
  uint64_t v72 = sub_A938(v64, v65, v66, v67, v68, v69, v70, v71, v272, v304, v336, v367, v397, v426, v454, v481, v507, v532);
  uint64_t v80 = sub_A930( v72,  v73,  v74,  v75,  v76,  v77,  v78,  v79,  v273,  v305,  v337,  v368,  v398,  v427,  v455,  v482,  v508,  v533,  v557);
  uint64_t v88 = sub_A928( v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  v274,  v306,  v338,  v369,  v399,  v428,  v456,  v483,  v509,  v534,  v558,  v581);
  uint64_t v96 = sub_A920( v88,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  v275,  v307,  v339,  v370,  v400,  v429,  v457,  v484,  v510,  v535,  v559,  v582,  v604);
  uint64_t v104 = sub_36374( v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v276,  v308,  v340,  v371,  v401,  v430,  v458,  v485,  v511,  v536,  v560,  v583,  v605,  v626);
  uint64_t v112 = sub_3636C( v104,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v277,  v309,  v341,  v372,  v402,  v431,  v459,  v486,  v512,  v537,  v561,  v584,  v606,  v627,  v647);
  uint64_t v120 = sub_36364( v112,  v113,  v114,  v115,  v116,  v117,  v118,  v119,  v278,  v310,  v342,  v373,  v403,  v432,  v460,  v487,  v513,  v538,  v562,  v585,  v607,  v628,  v648,  v667);
  uint64_t v128 = sub_363F0( v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v279,  v311,  v343,  v374,  v404,  v433,  v461,  v488,  v514,  v539,  v563,  v586,  v608,  v629,  v649,  v668,  v686);
  uint64_t v136 = sub_36430( v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v280,  v312,  v344,  v375,  v405,  v434,  v462,  v489,  v515,  v540,  v564,  v587,  v609,  v630,  v650,  v669,  v687,  v704);
  uint64_t v144 = sub_36428( v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v281,  v313,  v345,  v376,  v406,  v435,  v463,  v490,  v516,  v541,  v565,  v588,  v610,  v631,  v651,  v670,  v688,  v705,  v721);
  uint64_t v152 = sub_36478( v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v282,  v314,  v346,  v377,  v407,  v436,  v464,  v491,  v517,  v542,  v566,  v589,  v611,  v632,  v652,  v671,  v689,  v706,  v722,  v737);
  uint64_t v160 = sub_36524( v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v283,  v315,  v347,  v378,  v408,  v437,  v465,  v492,  v518,  v543,  v567,  v590,  v612,  v633,  v653,  v672,  v690,  v707,  v723,  v738,  v752);
  uint64_t v168 = sub_3651C( v160,  v161,  v162,  v163,  v164,  v165,  v166,  v167,  v284,  v316,  v348,  v379,  v409,  v438,  v466,  v493,  v519,  v544,  v568,  v591,  v613,  v634,  v654,  v673,  v691,  v708,  v724,  v739,  v753,  v766);
  uint64_t v176 = sub_36514( v168,  v169,  v170,  v171,  v172,  v173,  v174,  v175,  v285,  v317,  v349,  v380,  v410,  v439,  v467,  v494,  v520,  v545,  v569,  v592,  v614,  v635,  v655,  v674,  v692,  v709,  v725,  v740,  v754,  v767,  v779);
  uint64_t v184 = sub_3650C( v176,  v177,  v178,  v179,  v180,  v181,  v182,  v183,  v286,  v318,  v350,  v381,  v411,  v440,  v468,  v495,  v521,  v546,  v570,  v593,  v615,  v636,  v656,  v675,  v693,  v710,  v726,  v741,  v755,  v768,  v780,  v791);
  uint64_t v192 = sub_36504( v184,  v185,  v186,  v187,  v188,  v189,  v190,  v191,  v287,  v319,  v351,  v382,  v412,  v441,  v469,  v496,  v522,  v547,  v571,  v594,  v616,  v637,  v657,  v676,  v694,  v711,  v727,  v742,  v756,  v769,  v781,  v792,  v802);
  uint64_t v200 = sub_364FC( v192,  v193,  v194,  v195,  v196,  v197,  v198,  v199,  v288,  v320,  v352,  v383,  v413,  v442,  v470,  v497,  v523,  v548,  v572,  v595,  v617,  v638,  v658,  v677,  v695,  v712,  v728,  v743,  v757,  v770,  v782,  v793,  v803,  v812);
  uint64_t v208 = sub_364F4( v200,  v201,  v202,  v203,  v204,  v205,  v206,  v207,  v289,  v321,  v353,  v384,  v414,  v443,  v471,  v498,  v524,  v549,  v573,  v596,  v618,  v639,  v659,  v678,  v696,  v713,  v729,  v744,  v758,  v771,  v783,  v794,  v804,  v813,  v821);
  uint64_t v216 = sub_364EC( v208,  v209,  v210,  v211,  v212,  v213,  v214,  v215,  v290,  v322,  v354,  v385,  v415,  v444,  v472,  v499,  v525,  v550,  v574,  v597,  v619,  v640,  v660,  v679,  v697,  v714,  v730,  v745,  v759,  v772,  v784,  v795,  v805,  v814,  v822,  v829);
  uint64_t v224 = sub_364E4( v216,  v217,  v218,  v219,  v220,  v221,  v222,  v223,  v291,  v323,  v355,  v386,  v416,  v445,  v473,  v500,  v526,  v551,  v575,  v598,  v620,  v641,  v661,  v680,  v698,  v715,  v731,  v746,  v760,  v773,  v785,  v796,  v806,  v815,  v823,  v830,  v836);
  uint64_t v232 = sub_364DC( v224,  v225,  v226,  v227,  v228,  v229,  v230,  v231,  v292,  v324,  v356,  v387,  v417,  v446,  v474,  v501,  v527,  v552,  v576,  v599,  v621,  v642,  v662,  v681,  v699,  v716,  v732,  v747,  v761,  v774,  v786,  v797,  v807,  v816,  v824,  v831,  v837,  v842);
  uint64_t v240 = sub_364D4( v232,  v233,  v234,  v235,  v236,  v237,  v238,  v239,  v293,  v325,  v357,  v388,  v418,  v447,  v475,  v502,  v528,  v553,  v577,  v600,  v622,  v643,  v663,  v682,  v700,  v717,  v733,  v748,  v762,  v775,  v787,  v798,  v808,  v817,  v825,  v832,  v838,  v843,  v847);
  uint64_t v248 = sub_366F8( v240,  v241,  v242,  v243,  v244,  v245,  v246,  v247,  v294,  v326,  v358,  v389,  v419,  v448,  v476,  v503,  v529,  v554,  v578,  v601,  v623,  v644,  v664,  v683,  v701,  v718,  v734,  v749,  v763,  v776,  v788,  v799,  v809,  v818,  v826,  v833,  v839,  v844,  v848,  v851);
  uint64_t v256 = sub_366F0( v248,  v249,  v250,  v251,  v252,  v253,  v254,  v255,  v295,  v327,  v359,  v390,  v420,  v449,  v477,  v504,  v530,  v555,  v579,  v602,  v624,  v645,  v665,  v684,  v702,  v719,  v735,  v750,  v764,  v777,  v789,  v800,  v810,  v819,  v827,  v834,  v840,  v845,  v849,  v852,  v854);
  sub_36B90( v256,  v257,  v258,  v259,  v260,  v261,  v262,  v263,  v296,  v328,  v360,  v391,  v421,  v450,  v478,  v505,  v531,  v556,  v580,  v603,  v625,  v646,  v666,  v685,  v703,  v720,  v736,  v751,  v765,  v778,  v790,  v801,  v811,  v820,  v828,  v835,  v841,  v846,  v850,  v853,  v855,  v856);
  sub_36B88();
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  return sub_36148(*(uint64_t (**)(void))(v0 + 8));
}

#error "2F600: call analysis failed (funcsize=121)"
uint64_t sub_2F6D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_364AC();
  sub_36578();
  *(void *)(v0 + 12440) = v2;
  *(void *)(v0 + 12448) = v1;
  sub_36900(v3);
  swift_release();
  if (v1) {
    sub_36860();
  }
  sub_A964();
  return sub_A810();
}

uint64_t sub_2F72C()
{
  uint64_t v1 = v0[1397];
  uint64_t v2 = v0[1395];
  uint64_t v3 = v0[1381];
  sub_36EDC();
  uint64_t v4 = sub_36D48(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  sub_369D4(v4, (uint64_t)sub_A633C);
  sub_36EFC(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  uint64_t v5 = sub_368F8();
  id v6 = sub_36F04(v5, "catId");
  sub_36EE4();
  sub_36920();
  sub_36534();
  sub_36CEC(v3 + 24);
  sub_36590((_OWORD *)(v3 + 64));
  sub_A304(v3 + 296, (uint64_t)(v0 + 903));
  v0[1557] = *(void *)(v3 + 336);
  v0[1558] = *(void *)(v3 + 344);
  sub_363E8();
  sub_36C5C();
  uint64_t v7 = (void *)sub_3709C();
  v0[1559] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_2F850;
  sub_36FB4();
  return sub_3619C(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_2F850()
{
  uint64_t v1 = (void *)(v0 + 7224);
  sub_20264(*(void *)(v0 + 12472));
  sub_36BE0();
  sub_36EBC();
  sub_36B74(v1);
  sub_20300();
  sub_A964();
  return sub_36348(v2, v3, v4);
}

uint64_t sub_2F8BC()
{
  uint64_t v2 = (__int128 *)(v0 + 888);
  if (v0[891])
  {
    uint64_t v3 = (void *)v0[1555];
    uint64_t v4 = (void *)v0[1508];
    uint64_t v5 = (void *)v0[1506];
    sub_36438(v2);
    sub_36878((uint64_t)(v0 + 898));
    uint64_t v6 = sub_364BC((uint64_t)&unk_17CD80);
    uint64_t v7 = sub_367B4(v6);
    v0[1367] = sub_369E4((uint64_t)v7, (uint64_t)&unk_18AE88);
    sub_369FC();

    sub_3678C();
    sub_3652C();
  }

  else
  {
    uint64_t v8 = v0 + 1258;
    uint64_t v9 = v0[1503];
    uint64_t v10 = v0[1413];
    sub_279E0((uint64_t)v2, &qword_18A448);
    sub_A5DC(v9, (uint64_t)(v0 + 1258));
    sub_36A9C();
    sub_368A0();
    sub_A898();
    sub_36D10();
    if (sub_367D4())
    {
      uint64_t v11 = (_WORD *)sub_3635C();
      sub_363A4(v11);
      sub_36C34();
      sub_232EC( &dword_0,  (os_log_s *)(v0 + 1258),  (os_log_type_t)v10,  "getPunchoutOutput() returned nil, returning GenericErrorFlow",  v1);
      sub_37268();

      sub_36AAC();
    }

    else
    {
      sub_36C34();

      sub_36E08();
    }

    uint64_t v12 = (void *)v0[1555];
    uint64_t v13 = (void *)v0[1508];
    uint64_t v14 = (void *)v0[1506];
    sub_3668C();
    sub_36D84();
    sub_A178();
    sub_36748();

    sub_36784();
    sub_36ABC();
  }

  sub_35DF4();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  sub_A78C();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  uint64_t v15 = sub_A8EC();
  uint64_t v23 = sub_AAD8(v15, v16, v17, v18, v19, v20, v21, v22, v297, v332);
  uint64_t v31 = sub_A888(v23, v24, v25, v26, v27, v28, v29, v30, v298, v333, v367);
  uint64_t v39 = sub_A854(v31, v32, v33, v34, v35, v36, v37, v38, v299, v334, v368, v401);
  uint64_t v47 = sub_A84C(v39, v40, v41, v42, v43, v44, v45, v46, v300, v335, v369, v402, v434);
  uint64_t v55 = sub_A844(v47, v48, v49, v50, v51, v52, v53, v54, v301, v336, v370, v403, v435, v466);
  uint64_t v63 = sub_A83C(v55, v56, v57, v58, v59, v60, v61, v62, v302, v337, v371, v404, v436, v467, v497);
  uint64_t v71 = sub_A95C(v63, v64, v65, v66, v67, v68, v69, v70, v303, v338, v372, v405, v437, v468, v498, v527);
  uint64_t v79 = sub_A954(v71, v72, v73, v74, v75, v76, v77, v78, v304, v339, v373, v406, v438, v469, v499, v528, v556);
  uint64_t v87 = sub_A938(v79, v80, v81, v82, v83, v84, v85, v86, v305, v340, v374, v407, v439, v470, v500, v529, v557, v584);
  uint64_t v95 = sub_A930( v87,  v88,  v89,  v90,  v91,  v92,  v93,  v94,  v306,  v341,  v375,  v408,  v440,  v471,  v501,  v530,  v558,  v585,  v611);
  uint64_t v103 = sub_A928( v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v307,  v342,  v376,  v409,  v441,  v472,  v502,  v531,  v559,  v586,  v612,  v637);
  uint64_t v111 = sub_A920( v103,  v104,  v105,  v106,  v107,  v108,  v109,  v110,  v308,  v343,  v377,  v410,  v442,  v473,  v503,  v532,  v560,  v587,  v613,  v638,  v662);
  uint64_t v119 = sub_36374( v111,  v112,  v113,  v114,  v115,  v116,  v117,  v118,  v309,  v344,  v378,  v411,  v443,  v474,  v504,  v533,  v561,  v588,  v614,  v639,  v663,  v686);
  uint64_t v127 = sub_3636C( v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v310,  v345,  v379,  v412,  v444,  v475,  v505,  v534,  v562,  v589,  v615,  v640,  v664,  v687,  v709);
  uint64_t v135 = sub_36364( v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v311,  v346,  v380,  v413,  v445,  v476,  v506,  v535,  v563,  v590,  v616,  v641,  v665,  v688,  v710,  v731);
  uint64_t v143 = sub_363F0( v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v312,  v347,  v381,  v414,  v446,  v477,  v507,  v536,  v564,  v591,  v617,  v642,  v666,  v689,  v711,  v732,  v752);
  uint64_t v151 = sub_36430( v143,  v144,  v145,  v146,  v147,  v148,  v149,  v150,  v313,  v348,  v382,  v415,  v447,  v478,  v508,  v537,  v565,  v592,  v618,  v643,  v667,  v690,  v712,  v733,  v753,  v772);
  uint64_t v159 = sub_36428( v151,  v152,  v153,  v154,  v155,  v156,  v157,  v158,  v314,  v349,  v383,  v416,  v448,  v479,  v509,  v538,  v566,  v593,  v619,  v644,  v668,  v691,  v713,  v734,  v754,  v773,  v791);
  uint64_t v167 = sub_36478( v159,  v160,  v161,  v162,  v163,  v164,  v165,  v166,  v315,  v350,  v384,  v417,  v449,  v480,  v510,  v539,  v567,  v594,  v620,  v645,  v669,  v692,  v714,  v735,  v755,  v774,  v792,  v809);
  uint64_t v175 = sub_36524( v167,  v168,  v169,  v170,  v171,  v172,  v173,  v174,  v316,  v351,  v385,  v418,  v450,  v481,  v511,  v540,  v568,  v595,  v621,  v646,  v670,  v693,  v715,  v736,  v756,  v775,  v793,  v810,  v826);
  uint64_t v183 = sub_3651C( v175,  v176,  v177,  v178,  v179,  v180,  v181,  v182,  v317,  v352,  v386,  v419,  v451,  v482,  v512,  v541,  v569,  v596,  v622,  v647,  v671,  v694,  v716,  v737,  v757,  v776,  v794,  v811,  v827,  v842);
  uint64_t v191 = sub_36514( v183,  v184,  v185,  v186,  v187,  v188,  v189,  v190,  v318,  v353,  v387,  v420,  v452,  v483,  v513,  v542,  v570,  v597,  v623,  v648,  v672,  v695,  v717,  v738,  v758,  v777,  v795,  v812,  v828,  v843,  v857);
  uint64_t v199 = sub_3650C( v191,  v192,  v193,  v194,  v195,  v196,  v197,  v198,  v319,  v354,  v388,  v421,  v453,  v484,  v514,  v543,  v571,  v598,  v624,  v649,  v673,  v696,  v718,  v739,  v759,  v778,  v796,  v813,  v829,  v844,  v858,  v871);
  uint64_t v207 = sub_36504( v199,  v200,  v201,  v202,  v203,  v204,  v205,  v206,  v320,  v355,  v389,  v422,  v454,  v485,  v515,  v544,  v572,  v599,  v625,  v650,  v674,  v697,  v719,  v740,  v760,  v779,  v797,  v814,  v830,  v845,  v859,  v872,  v884);
  uint64_t v215 = sub_364FC( v207,  v208,  v209,  v210,  v211,  v212,  v213,  v214,  v321,  v356,  v390,  v423,  v455,  v486,  v516,  v545,  v573,  v600,  v626,  v651,  v675,  v698,  v720,  v741,  v761,  v780,  v798,  v815,  v831,  v846,  v860,  v873,  v885,  v896);
  uint64_t v223 = sub_364F4( v215,  v216,  v217,  v218,  v219,  v220,  v221,  v222,  v322,  v357,  v391,  v424,  v456,  v487,  v517,  v546,  v574,  v601,  v627,  v652,  v676,  v699,  v721,  v742,  v762,  v781,  v799,  v816,  v832,  v847,  v861,  v874,  v886,  v897,  v907);
  uint64_t v231 = sub_364EC( v223,  v224,  v225,  v226,  v227,  v228,  v229,  v230,  v323,  v358,  v392,  v425,  v457,  v488,  v518,  v547,  v575,  v602,  v628,  v653,  v677,  v700,  v722,  v743,  v763,  v782,  v800,  v817,  v833,  v848,  v862,  v875,  v887,  v898,  v908,  v917);
  uint64_t v239 = sub_364E4( v231,  v232,  v233,  v234,  v235,  v236,  v237,  v238,  v324,  v359,  v393,  v426,  v458,  v489,  v519,  v548,  v576,  v603,  v629,  v654,  v678,  v701,  v723,  v744,  v764,  v783,  v801,  v818,  v834,  v849,  v863,  v876,  v888,  v899,  v909,  v918,  v926);
  uint64_t v247 = sub_364DC( v239,  v240,  v241,  v242,  v243,  v244,  v245,  v246,  v325,  v360,  v394,  v427,  v459,  v490,  v520,  v549,  v577,  v604,  v630,  v655,  v679,  v702,  v724,  v745,  v765,  v784,  v802,  v819,  v835,  v850,  v864,  v877,  v889,  v900,  v910,  v919,  v927,  v934);
  uint64_t v255 = sub_364D4( v247,  v248,  v249,  v250,  v251,  v252,  v253,  v254,  v326,  v361,  v395,  v428,  v460,  v491,  v521,  v550,  v578,  v605,  v631,  v656,  v680,  v703,  v725,  v746,  v766,  v785,  v803,  v820,  v836,  v851,  v865,  v878,  v890,  v901,  v911,  v920,  v928,  v935,  v941);
  uint64_t v263 = sub_366F8( v255,  v256,  v257,  v258,  v259,  v260,  v261,  v262,  v327,  v362,  v396,  v429,  v461,  v492,  v522,  v551,  v579,  v606,  v632,  v657,  v681,  v704,  v726,  v747,  v767,  v786,  v804,  v821,  v837,  v852,  v866,  v879,  v891,  v902,  v912,  v921,  v929,  v936,  v942,  v947);
  uint64_t v271 = sub_366F0( v263,  v264,  v265,  v266,  v267,  v268,  v269,  v270,  v328,  v363,  v397,  v430,  v462,  v493,  v523,  v552,  v580,  v607,  v633,  v658,  v682,  v705,  v727,  v748,  v768,  v787,  v805,  v822,  v838,  v853,  v867,  v880,  v892,  v903,  v913,  v922,  v930,  v937,  v943,  v948,  v952);
  uint64_t v279 = sub_36B90( v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v329,  v364,  v398,  v431,  v463,  v494,  v524,  v553,  v581,  v608,  v634,  v659,  v683,  v706,  v728,  v749,  v769,  v788,  v806,  v823,  v839,  v854,  v868,  v881,  v893,  v904,  v914,  v923,  v931,  v938,  v944,  v949,  v953,  v956);
  uint64_t v287 = sub_36EF4( v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v330,  v365,  v399,  v432,  v464,  v495,  v525,  v554,  v582,  v609,  v635,  v660,  v684,  v707,  v729,  v750,  v770,  v789,  v807,  v824,  v840,  v855,  v869,  v882,  v894,  v905,  v915,  v924,  v932,  v939,  v945,  v950,  v954,  v957,  v959);
  sub_36EEC( v287,  v288,  v289,  v290,  v291,  v292,  v293,  v294,  v331,  v366,  v400,  v433,  v465,  v496,  v526,  v555,  v583,  v610,  v636,  v661,  v685,  v708,  v730,  v751,  v771,  v790,  v808,  v825,  v841,  v856,  v870,  v883,  v895,  v906,  v916,  v925,  v933,  v940,  v946,  v951,  v955,  v958,  v960,  v961);
  sub_36B88();
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  uint64_t v295 = (uint64_t (*)(void))sub_3743C();
  return sub_36148(v295);
}

uint64_t sub_2FB64()
{
  os_log_type_t v4 = sub_A898();
  if (sub_36958())
  {
    uint64_t v5 = (_WORD *)sub_3635C();
    sub_36908(v5);
    sub_367E8((uint64_t)_swiftEmptyArrayStorage);
    sub_232EC( &dword_0,  v0,  v4,  "Failed executing catWrapperSimple.genericMedicationLogFailed_Dialog, returning nil",  v2);
    sub_37128();
  }

  sub_36B28();
  uint64_t v6 = (void *)v1[1508];
  uint64_t v7 = (void *)v1[1506];
  sub_36590((_OWORD *)(v1[1381] + 64LL));
  sub_36ACC();
  sub_A178();
  sub_36B14();

  sub_36DD8();
  sub_35B4C();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  sub_A78C();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  uint64_t v8 = sub_A8EC();
  uint64_t v16 = sub_AAD8(v8, v9, v10, v11, v12, v13, v14, v15, v266, v298);
  uint64_t v24 = sub_A888(v16, v17, v18, v19, v20, v21, v22, v23, v267, v299, v330);
  uint64_t v32 = sub_A854(v24, v25, v26, v27, v28, v29, v30, v31, v268, v300, v331, v361);
  uint64_t v40 = sub_A84C(v32, v33, v34, v35, v36, v37, v38, v39, v269, v301, v332, v362, v391);
  uint64_t v48 = sub_A844(v40, v41, v42, v43, v44, v45, v46, v47, v270, v302, v333, v363, v392, v420);
  uint64_t v56 = sub_A83C(v48, v49, v50, v51, v52, v53, v54, v55, v271, v303, v334, v364, v393, v421, v448);
  uint64_t v64 = sub_A95C(v56, v57, v58, v59, v60, v61, v62, v63, v272, v304, v335, v365, v394, v422, v449, v475);
  uint64_t v72 = sub_A954(v64, v65, v66, v67, v68, v69, v70, v71, v273, v305, v336, v366, v395, v423, v450, v476, v501);
  uint64_t v80 = sub_A938(v72, v73, v74, v75, v76, v77, v78, v79, v274, v306, v337, v367, v396, v424, v451, v477, v502, v526);
  uint64_t v88 = sub_A930( v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  v275,  v307,  v338,  v368,  v397,  v425,  v452,  v478,  v503,  v527,  v550);
  uint64_t v96 = sub_A928( v88,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  v276,  v308,  v339,  v369,  v398,  v426,  v453,  v479,  v504,  v528,  v551,  v573);
  uint64_t v104 = sub_A920( v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v277,  v309,  v340,  v370,  v399,  v427,  v454,  v480,  v505,  v529,  v552,  v574,  v595);
  uint64_t v112 = sub_36374( v104,  v105,  v106,  v107,  v108,  v109,  v110,  v111,  v278,  v310,  v341,  v371,  v400,  v428,  v455,  v481,  v506,  v530,  v553,  v575,  v596,  v616);
  uint64_t v120 = sub_3636C( v112,  v113,  v114,  v115,  v116,  v117,  v118,  v119,  v279,  v311,  v342,  v372,  v401,  v429,  v456,  v482,  v507,  v531,  v554,  v576,  v597,  v617,  v636);
  uint64_t v128 = sub_36364( v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v280,  v312,  v343,  v373,  v402,  v430,  v457,  v483,  v508,  v532,  v555,  v577,  v598,  v618,  v637,  v655);
  uint64_t v136 = sub_363F0( v128,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  v281,  v313,  v344,  v374,  v403,  v431,  v458,  v484,  v509,  v533,  v556,  v578,  v599,  v619,  v638,  v656,  v673);
  uint64_t v144 = sub_36430( v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v282,  v314,  v345,  v375,  v404,  v432,  v459,  v485,  v510,  v534,  v557,  v579,  v600,  v620,  v639,  v657,  v674,  v690);
  uint64_t v152 = sub_36428( v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v283,  v315,  v346,  v376,  v405,  v433,  v460,  v486,  v511,  v535,  v558,  v580,  v601,  v621,  v640,  v658,  v675,  v691,  v706);
  uint64_t v160 = sub_36478( v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v284,  v316,  v347,  v377,  v406,  v434,  v461,  v487,  v512,  v536,  v559,  v581,  v602,  v622,  v641,  v659,  v676,  v692,  v707,  v721);
  uint64_t v168 = sub_36524( v160,  v161,  v162,  v163,  v164,  v165,  v166,  v167,  v285,  v317,  v348,  v378,  v407,  v435,  v462,  v488,  v513,  v537,  v560,  v582,  v603,  v623,  v642,  v660,  v677,  v693,  v708,  v722,  v735);
  uint64_t v176 = sub_3651C( v168,  v169,  v170,  v171,  v172,  v173,  v174,  v175,  v286,  v318,  v349,  v379,  v408,  v436,  v463,  v489,  v514,  v538,  v561,  v583,  v604,  v624,  v643,  v661,  v678,  v694,  v709,  v723,  v736,  v748);
  uint64_t v184 = sub_36514( v176,  v177,  v178,  v179,  v180,  v181,  v182,  v183,  v287,  v319,  v350,  v380,  v409,  v437,  v464,  v490,  v515,  v539,  v562,  v584,  v605,  v625,  v644,  v662,  v679,  v695,  v710,  v724,  v737,  v749,  v760);
  uint64_t v192 = sub_3650C( v184,  v185,  v186,  v187,  v188,  v189,  v190,  v191,  v288,  v320,  v351,  v381,  v410,  v438,  v465,  v491,  v516,  v540,  v563,  v585,  v606,  v626,  v645,  v663,  v680,  v696,  v711,  v725,  v738,  v750,  v761,  v771);
  uint64_t v200 = sub_36504( v192,  v193,  v194,  v195,  v196,  v197,  v198,  v199,  v289,  v321,  v352,  v382,  v411,  v439,  v466,  v492,  v517,  v541,  v564,  v586,  v607,  v627,  v646,  v664,  v681,  v697,  v712,  v726,  v739,  v751,  v762,  v772,  v781);
  uint64_t v208 = sub_364FC( v200,  v201,  v202,  v203,  v204,  v205,  v206,  v207,  v290,  v322,  v353,  v383,  v412,  v440,  v467,  v493,  v518,  v542,  v565,  v587,  v608,  v628,  v647,  v665,  v682,  v698,  v713,  v727,  v740,  v752,  v763,  v773,  v782,  v790);
  uint64_t v216 = sub_364F4( v208,  v209,  v210,  v211,  v212,  v213,  v214,  v215,  v291,  v323,  v354,  v384,  v413,  v441,  v468,  v494,  v519,  v543,  v566,  v588,  v609,  v629,  v648,  v666,  v683,  v699,  v714,  v728,  v741,  v753,  v764,  v774,  v783,  v791,  v798);
  uint64_t v224 = sub_364EC( v216,  v217,  v218,  v219,  v220,  v221,  v222,  v223,  v292,  v324,  v355,  v385,  v414,  v442,  v469,  v495,  v520,  v544,  v567,  v589,  v610,  v630,  v649,  v667,  v684,  v700,  v715,  v729,  v742,  v754,  v765,  v775,  v784,  v792,  v799,  v805);
  uint64_t v232 = sub_364E4( v224,  v225,  v226,  v227,  v228,  v229,  v230,  v231,  v293,  v325,  v356,  v386,  v415,  v443,  v470,  v496,  v521,  v545,  v568,  v590,  v611,  v631,  v650,  v668,  v685,  v701,  v716,  v730,  v743,  v755,  v766,  v776,  v785,  v793,  v800,  v806,  v811);
  uint64_t v240 = sub_364DC( v232,  v233,  v234,  v235,  v236,  v237,  v238,  v239,  v294,  v326,  v357,  v387,  v416,  v444,  v471,  v497,  v522,  v546,  v569,  v591,  v612,  v632,  v651,  v669,  v686,  v702,  v717,  v731,  v744,  v756,  v767,  v777,  v786,  v794,  v801,  v807,  v812,  v816);
  uint64_t v248 = sub_364D4( v240,  v241,  v242,  v243,  v244,  v245,  v246,  v247,  v295,  v327,  v358,  v388,  v417,  v445,  v472,  v498,  v523,  v547,  v570,  v592,  v613,  v633,  v652,  v670,  v687,  v703,  v718,  v732,  v745,  v757,  v768,  v778,  v787,  v795,  v802,  v808,  v813,  v817,  v820);
  uint64_t v256 = sub_366F8( v248,  v249,  v250,  v251,  v252,  v253,  v254,  v255,  v296,  v328,  v359,  v389,  v418,  v446,  v473,  v499,  v524,  v548,  v571,  v593,  v614,  v634,  v653,  v671,  v688,  v704,  v719,  v733,  v746,  v758,  v769,  v779,  v788,  v796,  v803,  v809,  v814,  v818,  v821,  v823);
  sub_366F0( v256,  v257,  v258,  v259,  v260,  v261,  v262,  v263,  v297,  v329,  v360,  v390,  v419,  v447,  v474,  v500,  v525,  v549,  v572,  v594,  v615,  v635,  v654,  v672,  v689,  v705,  v720,  v734,  v747,  v759,  v770,  v780,  v789,  v797,  v804,  v810,  v815,  v819,  v822,  v824,  v825);
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  sub_36814();
  uint64_t v264 = (uint64_t (*)(void))sub_36E80();
  return sub_36148(v264);
}

uint64_t sub_2FD40()
{
  *(void *)(v0 + 12520) = v2;
  uint64_t v4 = sub_36900(v3);
  if (v1)
  {
    sub_367AC();
    uint64_t v5 = sub_36860();
    sub_36A94(v5, &qword_189D00);
  }

  else
  {
    sub_36A94(v4, &qword_189D00);
    sub_367AC();
  }

  sub_A964();
  return sub_363F8(v6, v7, v8);
}

uint64_t sub_2FDBC()
{
  uint64_t v1 = v0[1397];
  uint64_t v2 = v0[1395];
  uint64_t v3 = v0[1381];
  sub_36EDC();
  uint64_t v4 = sub_36D48(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  sub_369D4(v4, (uint64_t)sub_A633C);
  sub_36EFC(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  uint64_t v5 = sub_368F8();
  id v6 = sub_36F04(v5, "catId");
  sub_36EE4();
  sub_36920();
  sub_36534();
  sub_A304(v3 + 24, (uint64_t)(v0 + 1053));
  sub_36590((_OWORD *)(v3 + 64));
  sub_36CEC(v3 + 296);
  v0[1566] = *(void *)(v3 + 336);
  v0[1567] = *(void *)(v3 + 344);
  sub_363E8();
  sub_36C5C();
  uint64_t v7 = (void *)sub_3709C();
  v0[1568] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_2FEE0;
  sub_36700();
  return sub_3619C(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_2FEE0()
{
  uint64_t v1 = (void *)(v0 + 8384);
  sub_20264(*(void *)(v0 + 12544));
  sub_36BE0();
  sub_36EBC();
  sub_36B74(v1);
  sub_36E94();
  sub_A964();
  return sub_36348(v2, v3, v4);
}

uint64_t sub_2FF4C()
{
  uint64_t v1 = (__int128 *)(v0 + 1133);
  if (v0[1136])
  {
    uint64_t v2 = (void *)v0[1565];
    uint64_t v848 = v0[1401];
    uint64_t v3 = v0[1399];
    sub_20004(v1, (uint64_t)(v0 + 1158));
    sub_36878((uint64_t)(v0 + 1158));
    uint64_t v4 = sub_364BC((uint64_t)&unk_17CD40);
    sub_36964(v4);
    uint64_t v5 = sub_369CC();
    uint64_t v6 = sub_A72C(v5);
    v0[1366] = sub_37494(v6, (uint64_t)&unk_18AE78);
    sub_37130();

    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 1158);
    sub_D970(v848, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    sub_3652C();
  }

  else
  {
    uint64_t v7 = v0[1560];
    uint64_t v8 = (uint8_t *)v0[1423];
    sub_279E0((uint64_t)v1, &qword_18A448);
    sub_A5DC(v7, (uint64_t)(v0 + 1303));
    sub_36CDC();
    sub_AB5C();
    os_log_type_t v9 = sub_AB70();
    if (sub_232DC(v9))
    {
      uint64_t v10 = (_WORD *)sub_3635C();
      sub_36A44(v10);
      sub_232EC( &dword_0,  (os_log_s *)(v0 + 1303),  (os_log_type_t)v7,  "Couldn't create output, returning GenericErrorFlow",  v8);
      sub_5050((uint64_t)v8);
    }

    uint64_t v11 = (void *)v0[1565];
    uint64_t v12 = (void (*)(uint64_t, uint64_t))v0[1562];
    uint64_t v13 = v0[1423];
    uint64_t v14 = v0[1413];
    uint64_t v847 = v0[1401];
    uint64_t v15 = v0[1399];
    uint64_t v16 = v0[1398];

    v12(v13, v14);
    sub_372AC();
    sub_A178();
    sub_36C08();

    sub_36DD8();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v847, v16);
  }

  uint64_t v17 = sub_36998();
  uint64_t v286 = v19;
  uint64_t v319 = v18;
  uint64_t v351 = v0[1438];
  uint64_t v382 = v0[1437];
  uint64_t v412 = v0[1436];
  uint64_t v441 = v0[1435];
  uint64_t v469 = v0[1434];
  uint64_t v496 = v0[1433];
  uint64_t v522 = v0[1432];
  uint64_t v547 = v0[1431];
  uint64_t v571 = v0[1430];
  uint64_t v594 = v0[1429];
  uint64_t v616 = v0[1428];
  uint64_t v637 = v0[1427];
  uint64_t v657 = v0[1426];
  uint64_t v676 = v0[1425];
  uint64_t v694 = v0[1424];
  uint64_t v711 = v0[1423];
  uint64_t v727 = v0[1422];
  uint64_t v742 = v0[1421];
  uint64_t v756 = v0[1420];
  uint64_t v769 = v0[1419];
  uint64_t v781 = v0[1418];
  uint64_t v792 = v0[1417];
  uint64_t v802 = v0[1416];
  uint64_t v811 = v0[1415];
  uint64_t v819 = v0[1412];
  uint64_t v826 = v0[1411];
  uint64_t v832 = v0[1408];
  uint64_t v837 = v0[1407];
  uint64_t v841 = v0[1406];
  uint64_t v844 = v0[1405];
  uint64_t v846 = v0[1404];
  swift_task_dealloc(v17);
  sub_A760();
  sub_A7C8();
  sub_A67C();
  sub_A78C();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  uint64_t v20 = sub_A8EC();
  uint64_t v28 = sub_A970(v20, v21, v22, v23, v24, v25, v26, v27, v286);
  uint64_t v36 = sub_AAD8(v28, v29, v30, v31, v32, v33, v34, v35, v287, v319);
  uint64_t v44 = sub_A888(v36, v37, v38, v39, v40, v41, v42, v43, v288, v320, v351);
  uint64_t v52 = sub_A854(v44, v45, v46, v47, v48, v49, v50, v51, v289, v321, v352, v382);
  uint64_t v60 = sub_A84C(v52, v53, v54, v55, v56, v57, v58, v59, v290, v322, v353, v383, v412);
  uint64_t v68 = sub_A844(v60, v61, v62, v63, v64, v65, v66, v67, v291, v323, v354, v384, v413, v441);
  uint64_t v76 = sub_A83C(v68, v69, v70, v71, v72, v73, v74, v75, v292, v324, v355, v385, v414, v442, v469);
  uint64_t v84 = sub_A95C(v76, v77, v78, v79, v80, v81, v82, v83, v293, v325, v356, v386, v415, v443, v470, v496);
  uint64_t v92 = sub_A954(v84, v85, v86, v87, v88, v89, v90, v91, v294, v326, v357, v387, v416, v444, v471, v497, v522);
  uint64_t v100 = sub_A938(v92, v93, v94, v95, v96, v97, v98, v99, v295, v327, v358, v388, v417, v445, v472, v498, v523, v547);
  uint64_t v108 = sub_A930( v100,  v101,  v102,  v103,  v104,  v105,  v106,  v107,  v296,  v328,  v359,  v389,  v418,  v446,  v473,  v499,  v524,  v548,  v571);
  uint64_t v116 = sub_A928( v108,  v109,  v110,  v111,  v112,  v113,  v114,  v115,  v297,  v329,  v360,  v390,  v419,  v447,  v474,  v500,  v525,  v549,  v572,  v594);
  uint64_t v124 = sub_A920( v116,  v117,  v118,  v119,  v120,  v121,  v122,  v123,  v298,  v330,  v361,  v391,  v420,  v448,  v475,  v501,  v526,  v550,  v573,  v595,  v616);
  uint64_t v132 = sub_36374( v124,  v125,  v126,  v127,  v128,  v129,  v130,  v131,  v299,  v331,  v362,  v392,  v421,  v449,  v476,  v502,  v527,  v551,  v574,  v596,  v617,  v637);
  uint64_t v140 = sub_3636C( v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v300,  v332,  v363,  v393,  v422,  v450,  v477,  v503,  v528,  v552,  v575,  v597,  v618,  v638,  v657);
  uint64_t v148 = sub_36364( v140,  v141,  v142,  v143,  v144,  v145,  v146,  v147,  v301,  v333,  v364,  v394,  v423,  v451,  v478,  v504,  v529,  v553,  v576,  v598,  v619,  v639,  v658,  v676);
  uint64_t v156 = sub_363F0( v148,  v149,  v150,  v151,  v152,  v153,  v154,  v155,  v302,  v334,  v365,  v395,  v424,  v452,  v479,  v505,  v530,  v554,  v577,  v599,  v620,  v640,  v659,  v677,  v694);
  uint64_t v164 = sub_36430( v156,  v157,  v158,  v159,  v160,  v161,  v162,  v163,  v303,  v335,  v366,  v396,  v425,  v453,  v480,  v506,  v531,  v555,  v578,  v600,  v621,  v641,  v660,  v678,  v695,  v711);
  uint64_t v172 = sub_36428( v164,  v165,  v166,  v167,  v168,  v169,  v170,  v171,  v304,  v336,  v367,  v397,  v426,  v454,  v481,  v507,  v532,  v556,  v579,  v601,  v622,  v642,  v661,  v679,  v696,  v712,  v727);
  uint64_t v180 = sub_36478( v172,  v173,  v174,  v175,  v176,  v177,  v178,  v179,  v305,  v337,  v368,  v398,  v427,  v455,  v482,  v508,  v533,  v557,  v580,  v602,  v623,  v643,  v662,  v680,  v697,  v713,  v728,  v742);
  uint64_t v188 = sub_36524( v180,  v181,  v182,  v183,  v184,  v185,  v186,  v187,  v306,  v338,  v369,  v399,  v428,  v456,  v483,  v509,  v534,  v558,  v581,  v603,  v624,  v644,  v663,  v681,  v698,  v714,  v729,  v743,  v756);
  uint64_t v196 = sub_3651C( v188,  v189,  v190,  v191,  v192,  v193,  v194,  v195,  v307,  v339,  v370,  v400,  v429,  v457,  v484,  v510,  v535,  v559,  v582,  v604,  v625,  v645,  v664,  v682,  v699,  v715,  v730,  v744,  v757,  v769);
  uint64_t v204 = sub_36514( v196,  v197,  v198,  v199,  v200,  v201,  v202,  v203,  v308,  v340,  v371,  v401,  v430,  v458,  v485,  v511,  v536,  v560,  v583,  v605,  v626,  v646,  v665,  v683,  v700,  v716,  v731,  v745,  v758,  v770,  v781);
  uint64_t v212 = sub_3650C( v204,  v205,  v206,  v207,  v208,  v209,  v210,  v211,  v309,  v341,  v372,  v402,  v431,  v459,  v486,  v512,  v537,  v561,  v584,  v606,  v627,  v647,  v666,  v684,  v701,  v717,  v732,  v746,  v759,  v771,  v782,  v792);
  uint64_t v220 = sub_36504( v212,  v213,  v214,  v215,  v216,  v217,  v218,  v219,  v310,  v342,  v373,  v403,  v432,  v460,  v487,  v513,  v538,  v562,  v585,  v607,  v628,  v648,  v667,  v685,  v702,  v718,  v733,  v747,  v760,  v772,  v783,  v793,  v802);
  uint64_t v228 = sub_364FC( v220,  v221,  v222,  v223,  v224,  v225,  v226,  v227,  v311,  v343,  v374,  v404,  v433,  v461,  v488,  v514,  v539,  v563,  v586,  v608,  v629,  v649,  v668,  v686,  v703,  v719,  v734,  v748,  v761,  v773,  v784,  v794,  v803,  v811);
  uint64_t v236 = sub_364F4( v228,  v229,  v230,  v231,  v232,  v233,  v234,  v235,  v312,  v344,  v375,  v405,  v434,  v462,  v489,  v515,  v540,  v564,  v587,  v609,  v630,  v650,  v669,  v687,  v704,  v720,  v735,  v749,  v762,  v774,  v785,  v795,  v804,  v812,  v819);
  uint64_t v244 = sub_364EC( v236,  v237,  v238,  v239,  v240,  v241,  v242,  v243,  v313,  v345,  v376,  v406,  v435,  v463,  v490,  v516,  v541,  v565,  v588,  v610,  v631,  v651,  v670,  v688,  v705,  v721,  v736,  v750,  v763,  v775,  v786,  v796,  v805,  v813,  v820,  v826);
  uint64_t v252 = sub_364E4( v244,  v245,  v246,  v247,  v248,  v249,  v250,  v251,  v314,  v346,  v377,  v407,  v436,  v464,  v491,  v517,  v542,  v566,  v589,  v611,  v632,  v652,  v671,  v689,  v706,  v722,  v737,  v751,  v764,  v776,  v787,  v797,  v806,  v814,  v821,  v827,  v832);
  uint64_t v260 = sub_364DC( v252,  v253,  v254,  v255,  v256,  v257,  v258,  v259,  v315,  v347,  v378,  v408,  v437,  v465,  v492,  v518,  v543,  v567,  v590,  v612,  v633,  v653,  v672,  v690,  v707,  v723,  v738,  v752,  v765,  v777,  v788,  v798,  v807,  v815,  v822,  v828,  v833,  v837);
  uint64_t v268 = sub_364D4( v260,  v261,  v262,  v263,  v264,  v265,  v266,  v267,  v316,  v348,  v379,  v409,  v438,  v466,  v493,  v519,  v544,  v568,  v591,  v613,  v634,  v654,  v673,  v691,  v708,  v724,  v739,  v753,  v766,  v778,  v789,  v799,  v808,  v816,  v823,  v829,  v834,  v838,  v841);
  uint64_t v276 = sub_366F8( v268,  v269,  v270,  v271,  v272,  v273,  v274,  v275,  v317,  v349,  v380,  v410,  v439,  v467,  v494,  v520,  v545,  v569,  v592,  v614,  v635,  v655,  v674,  v692,  v709,  v725,  v740,  v754,  v767,  v779,  v790,  v800,  v809,  v817,  v824,  v830,  v835,  v839,  v842,  v844);
  sub_366F0( v276,  v277,  v278,  v279,  v280,  v281,  v282,  v283,  v318,  v350,  v381,  v411,  v440,  v468,  v495,  v521,  v546,  v570,  v593,  v615,  v636,  v656,  v675,  v693,  v710,  v726,  v741,  v755,  v768,  v780,  v791,  v801,  v810,  v818,  v825,  v831,  v836,  v840,  v843,  v845,  v846);
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  uint64_t v284 = (uint64_t (*)(void))sub_36E80();
  return sub_36148(v284);
}

#error "303FC: call analysis failed (funcsize=102)"
uint64_t sub_304CC()
{
  sub_36A5C();
  sub_A964();
  return sub_A5D0();
}

#error "30740: call analysis failed (funcsize=190)"
uint64_t sub_30810()
{
  uint64_t v0;
  sub_AA10();
  sub_20264(*(void *)(v0 + 12584));
  sub_A964();
  return sub_A5D0();
}

#error "30894: call analysis failed (funcsize=72)"
uint64_t sub_30964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_364AC();
  sub_36578();
  *(void *)(v0 + 12608) = v2;
  *(void *)(v0 + 12616) = v1;
  sub_36900(v3);
  swift_release();
  if (v1) {
    sub_36860();
  }
  sub_A964();
  return sub_A810();
}

uint64_t sub_309C0()
{
  uint64_t v4 = sub_368F8();
  id v5 = sub_36F04(v4, "catId");
  sub_36EE4();
  sub_36920();
  sub_36534();
  sub_36CEC(v1 + 24);
  sub_36590((_OWORD *)(v1 + 64));
  sub_A304(v1 + 296, (uint64_t)(v0 + 1188));
  v0[1578] = *(void *)(v1 + 336);
  v0[1579] = *(void *)(v1 + 344);
  LogPeriodFlow.on(input:)();
  uint64_t v6 = dword_18D9BC;
  sub_363E8();
  sub_36C5C();
  uint64_t v7 = (void *)swift_task_alloc(v6);
  v0[1580] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_30ABC;
  sub_36FB4();
  return sub_3619C(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_30ABC()
{
  uint64_t v1 = (void *)(v0 + 9504);
  sub_20264(*(void *)(v0 + 12640));
  sub_36BE0();
  sub_36EBC();
  sub_36B74(v1);
  sub_20300();
  sub_A964();
  return sub_36348(v2, v3, v4);
}

uint64_t sub_30B24()
{
  uint64_t v2 = (__int128 *)(v0 + 1173);
  if (v0[1176])
  {
    uint64_t v3 = (void *)v0[1576];
    uint64_t v4 = (void *)v0[1572];
    id v5 = (void *)v0[1570];
    sub_36438(v2);
    sub_36878((uint64_t)(v0 + 1163));
    uint64_t v6 = sub_364BC((uint64_t)&unk_17CD18);
    uint64_t v7 = sub_367B4(v6);
    v0[1378] = sub_369E4((uint64_t)v7, (uint64_t)&unk_18AE68);
    sub_369FC();

    sub_3678C();
    sub_3652C();
  }

  else
  {
    uint64_t v8 = v0 + 1213;
    uint64_t v9 = v0[1459];
    uint64_t v10 = v0[1413];
    sub_279E0((uint64_t)v2, &qword_18A448);
    sub_A5DC(v9, (uint64_t)(v0 + 1213));
    sub_36A9C();
    sub_368A0();
    sub_A898();
    sub_36D10();
    if (sub_367D4())
    {
      uint64_t v11 = (_WORD *)sub_3635C();
      sub_363A4(v11);
      sub_36C34();
      sub_232EC( &dword_0,  (os_log_s *)(v0 + 1213),  (os_log_type_t)v10,  "getPunchoutOutput() returned nil, returning GenericErrorFlow",  v1);
      sub_37268();

      sub_36AAC();
    }

    else
    {
      sub_36C34();

      sub_36E08();
    }

    uint64_t v12 = (void *)v0[1576];
    uint64_t v13 = (void *)v0[1572];
    uint64_t v14 = (void *)v0[1570];
    sub_3668C();
    sub_36D84();
    sub_A178();
    sub_36748();

    sub_36784();
    sub_36ABC();
  }

  sub_35DF4();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  sub_A78C();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  uint64_t v15 = sub_A8EC();
  uint64_t v23 = sub_AAD8(v15, v16, v17, v18, v19, v20, v21, v22, v297, v332);
  uint64_t v31 = sub_A888(v23, v24, v25, v26, v27, v28, v29, v30, v298, v333, v367);
  uint64_t v39 = sub_A854(v31, v32, v33, v34, v35, v36, v37, v38, v299, v334, v368, v401);
  uint64_t v47 = sub_A84C(v39, v40, v41, v42, v43, v44, v45, v46, v300, v335, v369, v402, v434);
  uint64_t v55 = sub_A844(v47, v48, v49, v50, v51, v52, v53, v54, v301, v336, v370, v403, v435, v466);
  uint64_t v63 = sub_A83C(v55, v56, v57, v58, v59, v60, v61, v62, v302, v337, v371, v404, v436, v467, v497);
  uint64_t v71 = sub_A95C(v63, v64, v65, v66, v67, v68, v69, v70, v303, v338, v372, v405, v437, v468, v498, v527);
  uint64_t v79 = sub_A954(v71, v72, v73, v74, v75, v76, v77, v78, v304, v339, v373, v406, v438, v469, v499, v528, v556);
  uint64_t v87 = sub_A938(v79, v80, v81, v82, v83, v84, v85, v86, v305, v340, v374, v407, v439, v470, v500, v529, v557, v584);
  uint64_t v95 = sub_A930( v87,  v88,  v89,  v90,  v91,  v92,  v93,  v94,  v306,  v341,  v375,  v408,  v440,  v471,  v501,  v530,  v558,  v585,  v611);
  uint64_t v103 = sub_A928( v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v307,  v342,  v376,  v409,  v441,  v472,  v502,  v531,  v559,  v586,  v612,  v637);
  uint64_t v111 = sub_A920( v103,  v104,  v105,  v106,  v107,  v108,  v109,  v110,  v308,  v343,  v377,  v410,  v442,  v473,  v503,  v532,  v560,  v587,  v613,  v638,  v662);
  uint64_t v119 = sub_36374( v111,  v112,  v113,  v114,  v115,  v116,  v117,  v118,  v309,  v344,  v378,  v411,  v443,  v474,  v504,  v533,  v561,  v588,  v614,  v639,  v663,  v686);
  uint64_t v127 = sub_3636C( v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v310,  v345,  v379,  v412,  v444,  v475,  v505,  v534,  v562,  v589,  v615,  v640,  v664,  v687,  v709);
  uint64_t v135 = sub_36364( v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v311,  v346,  v380,  v413,  v445,  v476,  v506,  v535,  v563,  v590,  v616,  v641,  v665,  v688,  v710,  v731);
  uint64_t v143 = sub_363F0( v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v312,  v347,  v381,  v414,  v446,  v477,  v507,  v536,  v564,  v591,  v617,  v642,  v666,  v689,  v711,  v732,  v752);
  uint64_t v151 = sub_36430( v143,  v144,  v145,  v146,  v147,  v148,  v149,  v150,  v313,  v348,  v382,  v415,  v447,  v478,  v508,  v537,  v565,  v592,  v618,  v643,  v667,  v690,  v712,  v733,  v753,  v772);
  uint64_t v159 = sub_36428( v151,  v152,  v153,  v154,  v155,  v156,  v157,  v158,  v314,  v349,  v383,  v416,  v448,  v479,  v509,  v538,  v566,  v593,  v619,  v644,  v668,  v691,  v713,  v734,  v754,  v773,  v791);
  uint64_t v167 = sub_36478( v159,  v160,  v161,  v162,  v163,  v164,  v165,  v166,  v315,  v350,  v384,  v417,  v449,  v480,  v510,  v539,  v567,  v594,  v620,  v645,  v669,  v692,  v714,  v735,  v755,  v774,  v792,  v809);
  uint64_t v175 = sub_36524( v167,  v168,  v169,  v170,  v171,  v172,  v173,  v174,  v316,  v351,  v385,  v418,  v450,  v481,  v511,  v540,  v568,  v595,  v621,  v646,  v670,  v693,  v715,  v736,  v756,  v775,  v793,  v810,  v826);
  uint64_t v183 = sub_3651C( v175,  v176,  v177,  v178,  v179,  v180,  v181,  v182,  v317,  v352,  v386,  v419,  v451,  v482,  v512,  v541,  v569,  v596,  v622,  v647,  v671,  v694,  v716,  v737,  v757,  v776,  v794,  v811,  v827,  v842);
  uint64_t v191 = sub_36514( v183,  v184,  v185,  v186,  v187,  v188,  v189,  v190,  v318,  v353,  v387,  v420,  v452,  v483,  v513,  v542,  v570,  v597,  v623,  v648,  v672,  v695,  v717,  v738,  v758,  v777,  v795,  v812,  v828,  v843,  v857);
  uint64_t v199 = sub_3650C( v191,  v192,  v193,  v194,  v195,  v196,  v197,  v198,  v319,  v354,  v388,  v421,  v453,  v484,  v514,  v543,  v571,  v598,  v624,  v649,  v673,  v696,  v718,  v739,  v759,  v778,  v796,  v813,  v829,  v844,  v858,  v871);
  uint64_t v207 = sub_36504( v199,  v200,  v201,  v202,  v203,  v204,  v205,  v206,  v320,  v355,  v389,  v422,  v454,  v485,  v515,  v544,  v572,  v599,  v625,  v650,  v674,  v697,  v719,  v740,  v760,  v779,  v797,  v814,  v830,  v845,  v859,  v872,  v884);
  uint64_t v215 = sub_364FC( v207,  v208,  v209,  v210,  v211,  v212,  v213,  v214,  v321,  v356,  v390,  v423,  v455,  v486,  v516,  v545,  v573,  v600,  v626,  v651,  v675,  v698,  v720,  v741,  v761,  v780,  v798,  v815,  v831,  v846,  v860,  v873,  v885,  v896);
  uint64_t v223 = sub_364F4( v215,  v216,  v217,  v218,  v219,  v220,  v221,  v222,  v322,  v357,  v391,  v424,  v456,  v487,  v517,  v546,  v574,  v601,  v627,  v652,  v676,  v699,  v721,  v742,  v762,  v781,  v799,  v816,  v832,  v847,  v861,  v874,  v886,  v897,  v907);
  uint64_t v231 = sub_364EC( v223,  v224,  v225,  v226,  v227,  v228,  v229,  v230,  v323,  v358,  v392,  v425,  v457,  v488,  v518,  v547,  v575,  v602,  v628,  v653,  v677,  v700,  v722,  v743,  v763,  v782,  v800,  v817,  v833,  v848,  v862,  v875,  v887,  v898,  v908,  v917);
  uint64_t v239 = sub_364E4( v231,  v232,  v233,  v234,  v235,  v236,  v237,  v238,  v324,  v359,  v393,  v426,  v458,  v489,  v519,  v548,  v576,  v603,  v629,  v654,  v678,  v701,  v723,  v744,  v764,  v783,  v801,  v818,  v834,  v849,  v863,  v876,  v888,  v899,  v909,  v918,  v926);
  uint64_t v247 = sub_364DC( v239,  v240,  v241,  v242,  v243,  v244,  v245,  v246,  v325,  v360,  v394,  v427,  v459,  v490,  v520,  v549,  v577,  v604,  v630,  v655,  v679,  v702,  v724,  v745,  v765,  v784,  v802,  v819,  v835,  v850,  v864,  v877,  v889,  v900,  v910,  v919,  v927,  v934);
  uint64_t v255 = sub_364D4( v247,  v248,  v249,  v250,  v251,  v252,  v253,  v254,  v326,  v361,  v395,  v428,  v460,  v491,  v521,  v550,  v578,  v605,  v631,  v656,  v680,  v703,  v725,  v746,  v766,  v785,  v803,  v820,  v836,  v851,  v865,  v878,  v890,  v901,  v911,  v920,  v928,  v935,  v941);
  uint64_t v263 = sub_366F8( v255,  v256,  v257,  v258,  v259,  v260,  v261,  v262,  v327,  v362,  v396,  v429,  v461,  v492,  v522,  v551,  v579,  v606,  v632,  v657,  v681,  v704,  v726,  v747,  v767,  v786,  v804,  v821,  v837,  v852,  v866,  v879,  v891,  v902,  v912,  v921,  v929,  v936,  v942,  v947);
  uint64_t v271 = sub_366F0( v263,  v264,  v265,  v266,  v267,  v268,  v269,  v270,  v328,  v363,  v397,  v430,  v462,  v493,  v523,  v552,  v580,  v607,  v633,  v658,  v682,  v705,  v727,  v748,  v768,  v787,  v805,  v822,  v838,  v853,  v867,  v880,  v892,  v903,  v913,  v922,  v930,  v937,  v943,  v948,  v952);
  uint64_t v279 = sub_36B90( v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v329,  v364,  v398,  v431,  v463,  v494,  v524,  v553,  v581,  v608,  v634,  v659,  v683,  v706,  v728,  v749,  v769,  v788,  v806,  v823,  v839,  v854,  v868,  v881,  v893,  v904,  v914,  v923,  v931,  v938,  v944,  v949,  v953,  v956);
  uint64_t v287 = sub_36EF4( v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v330,  v365,  v399,  v432,  v464,  v495,  v525,  v554,  v582,  v609,  v635,  v660,  v684,  v707,  v729,  v750,  v770,  v789,  v807,  v824,  v840,  v855,  v869,  v882,  v894,  v905,  v915,  v924,  v932,  v939,  v945,  v950,  v954,  v957,  v959);
  sub_36EEC( v287,  v288,  v289,  v290,  v291,  v292,  v293,  v294,  v331,  v366,  v400,  v433,  v465,  v496,  v526,  v555,  v583,  v610,  v636,  v661,  v685,  v708,  v730,  v751,  v771,  v790,  v808,  v825,  v841,  v856,  v870,  v883,  v895,  v906,  v916,  v925,  v933,  v940,  v946,  v951,  v955,  v958,  v960,  v961);
  sub_36B88();
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  uint64_t v295 = (uint64_t (*)(void))sub_3743C();
  return sub_36148(v295);
}

uint64_t sub_30DC4()
{
  uint64_t v2 = *(os_log_s **)(v0 + 11672);
  uint64_t v3 = *(void *)(v0 + 11336);
  sub_A5DC((uint64_t)v2, v0 + 10016);
  sub_36170();
  sub_23374();
  sub_A898();
  sub_373B0();
  if (sub_36958())
  {
    uint64_t v4 = (_WORD *)sub_3635C();
    sub_3692C(v4);
    sub_369F4();
    sub_232EC( &dword_0,  v2,  (os_log_type_t)v3,  "Failed executing catWrapperSimple.genericMedicationLogFailed_Dialog, returning nil",  v1);
    sub_5050((uint64_t)v1);
  }

  else
  {
    sub_369F4();
  }

  sub_3747C();
  id v5 = *(void **)(v0 + 12576);
  uint64_t v6 = *(void **)(v0 + 12560);
  sub_A13C((_OWORD *)(*(void *)(v0 + 11048) + 64LL), (_OWORD *)(v0 + 2552));
  sub_5A9B0((void *)(v0 + 2552), (void *)(v0 + 2392));
  sub_A178();
  sub_36748();

  sub_36784();
  sub_35B4C();
  sub_A760();
  sub_A7C8();
  sub_A67C();
  sub_A78C();
  sub_A8F4();
  sub_A85C();
  sub_A864();
  sub_A910();
  uint64_t v7 = sub_A8EC();
  uint64_t v15 = sub_AAD8(v7, v8, v9, v10, v11, v12, v13, v14, v265, v297);
  uint64_t v23 = sub_A888(v15, v16, v17, v18, v19, v20, v21, v22, v266, v298, v329);
  uint64_t v31 = sub_A854(v23, v24, v25, v26, v27, v28, v29, v30, v267, v299, v330, v360);
  uint64_t v39 = sub_A84C(v31, v32, v33, v34, v35, v36, v37, v38, v268, v300, v331, v361, v390);
  uint64_t v47 = sub_A844(v39, v40, v41, v42, v43, v44, v45, v46, v269, v301, v332, v362, v391, v419);
  uint64_t v55 = sub_A83C(v47, v48, v49, v50, v51, v52, v53, v54, v270, v302, v333, v363, v392, v420, v447);
  uint64_t v63 = sub_A95C(v55, v56, v57, v58, v59, v60, v61, v62, v271, v303, v334, v364, v393, v421, v448, v474);
  uint64_t v71 = sub_A954(v63, v64, v65, v66, v67, v68, v69, v70, v272, v304, v335, v365, v394, v422, v449, v475, v500);
  uint64_t v79 = sub_A938(v71, v72, v73, v74, v75, v76, v77, v78, v273, v305, v336, v366, v395, v423, v450, v476, v501, v525);
  uint64_t v87 = sub_A930( v79,  v80,  v81,  v82,  v83,  v84,  v85,  v86,  v274,  v306,  v337,  v367,  v396,  v424,  v451,  v477,  v502,  v526,  v549);
  uint64_t v95 = sub_A928( v87,  v88,  v89,  v90,  v91,  v92,  v93,  v94,  v275,  v307,  v338,  v368,  v397,  v425,  v452,  v478,  v503,  v527,  v550,  v572);
  uint64_t v103 = sub_A920( v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v276,  v308,  v339,  v369,  v398,  v426,  v453,  v479,  v504,  v528,  v551,  v573,  v594);
  uint64_t v111 = sub_36374( v103,  v104,  v105,  v106,  v107,  v108,  v109,  v110,  v277,  v309,  v340,  v370,  v399,  v427,  v454,  v480,  v505,  v529,  v552,  v574,  v595,  v615);
  uint64_t v119 = sub_3636C( v111,  v112,  v113,  v114,  v115,  v116,  v117,  v118,  v278,  v310,  v341,  v371,  v400,  v428,  v455,  v481,  v506,  v530,  v553,  v575,  v596,  v616,  v635);
  uint64_t v127 = sub_36364( v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v279,  v311,  v342,  v372,  v401,  v429,  v456,  v482,  v507,  v531,  v554,  v576,  v597,  v617,  v636,  v654);
  uint64_t v135 = sub_363F0( v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v280,  v312,  v343,  v373,  v402,  v430,  v457,  v483,  v508,  v532,  v555,  v577,  v598,  v618,  v637,  v655,  v672);
  uint64_t v143 = sub_36430( v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v281,  v313,  v344,  v374,  v403,  v431,  v458,  v484,  v509,  v533,  v556,  v578,  v599,  v619,  v638,  v656,  v673,  v689);
  uint64_t v151 = sub_36428( v143,  v144,  v145,  v146,  v147,  v148,  v149,  v150,  v282,  v314,  v345,  v375,  v404,  v432,  v459,  v485,  v510,  v534,  v557,  v579,  v600,  v620,  v639,  v657,  v674,  v690,  v705);
  uint64_t v159 = sub_36478( v151,  v152,  v153,  v154,  v155,  v156,  v157,  v158,  v283,  v315,  v346,  v376,  v405,  v433,  v460,  v486,  v511,  v535,  v558,  v580,  v601,  v621,  v640,  v658,  v675,  v691,  v706,  v720);
  uint64_t v167 = sub_36524( v159,  v160,  v161,  v162,  v163,  v164,  v165,  v166,  v284,  v316,  v347,  v377,  v406,  v434,  v461,  v487,  v512,  v536,  v559,  v581,  v602,  v622,  v641,  v659,  v676,  v692,  v707,  v721,  v734);
  uint64_t v175 = sub_3651C( v167,  v168,  v169,  v170,  v171,  v172,  v173,  v174,  v285,  v317,  v348,  v378,  v407,  v435,  v462,  v488,  v513,  v537,  v560,  v582,  v603,  v623,  v642,  v660,  v677,  v693,  v708,  v722,  v735,  v747);
  uint64_t v183 = sub_36514( v175,  v176,  v177,  v178,  v179,  v180,  v181,  v182,  v286,  v318,  v349,  v379,  v408,  v436,  v463,  v489,  v514,  v538,  v561,  v583,  v604,  v624,  v643,  v661,  v678,  v694,  v709,  v723,  v736,  v748,  v759);
  uint64_t v191 = sub_3650C( v183,  v184,  v185,  v186,  v187,  v188,  v189,  v190,  v287,  v319,  v350,  v380,  v409,  v437,  v464,  v490,  v515,  v539,  v562,  v584,  v605,  v625,  v644,  v662,  v679,  v695,  v710,  v724,  v737,  v749,  v760,  v770);
  uint64_t v199 = sub_36504( v191,  v192,  v193,  v194,  v195,  v196,  v197,  v198,  v288,  v320,  v351,  v381,  v410,  v438,  v465,  v491,  v516,  v540,  v563,  v585,  v606,  v626,  v645,  v663,  v680,  v696,  v711,  v725,  v738,  v750,  v761,  v771,  v780);
  uint64_t v207 = sub_364FC( v199,  v200,  v201,  v202,  v203,  v204,  v205,  v206,  v289,  v321,  v352,  v382,  v411,  v439,  v466,  v492,  v517,  v541,  v564,  v586,  v607,  v627,  v646,  v664,  v681,  v697,  v712,  v726,  v739,  v751,  v762,  v772,  v781,  v789);
  uint64_t v215 = sub_364F4( v207,  v208,  v209,  v210,  v211,  v212,  v213,  v214,  v290,  v322,  v353,  v383,  v412,  v440,  v467,  v493,  v518,  v542,  v565,  v587,  v608,  v628,  v647,  v665,  v682,  v698,  v713,  v727,  v740,  v752,  v763,  v773,  v782,  v790,  v797);
  uint64_t v223 = sub_364EC( v215,  v216,  v217,  v218,  v219,  v220,  v221,  v222,  v291,  v323,  v354,  v384,  v413,  v441,  v468,  v494,  v519,  v543,  v566,  v588,  v609,  v629,  v648,  v666,  v683,  v699,  v714,  v728,  v741,  v753,  v764,  v774,  v783,  v791,  v798,  v804);
  uint64_t v231 = sub_364E4( v223,  v224,  v225,  v226,  v227,  v228,  v229,  v230,  v292,  v324,  v355,  v385,  v414,  v442,  v469,  v495,  v520,  v544,  v567,  v589,  v610,  v630,  v649,  v667,  v684,  v700,  v715,  v729,  v742,  v754,  v765,  v775,  v784,  v792,  v799,  v805,  v810);
  uint64_t v239 = sub_364DC( v231,  v232,  v233,  v234,  v235,  v236,  v237,  v238,  v293,  v325,  v356,  v386,  v415,  v443,  v470,  v496,  v521,  v545,  v568,  v590,  v611,  v631,  v650,  v668,  v685,  v701,  v716,  v730,  v743,  v755,  v766,  v776,  v785,  v793,  v800,  v806,  v811,  v815);
  uint64_t v247 = sub_364D4( v239,  v240,  v241,  v242,  v243,  v244,  v245,  v246,  v294,  v326,  v357,  v387,  v416,  v444,  v471,  v497,  v522,  v546,  v569,  v591,  v612,  v632,  v651,  v669,  v686,  v702,  v717,  v731,  v744,  v756,  v767,  v777,  v786,  v794,  v801,  v807,  v812,  v816,  v819);
  uint64_t v255 = sub_366F8( v247,  v248,  v249,  v250,  v251,  v252,  v253,  v254,  v295,  v327,  v358,  v388,  v417,  v445,  v472,  v498,  v523,  v547,  v570,  v592,  v613,  v633,  v652,  v670,  v687,  v703,  v718,  v732,  v745,  v757,  v768,  v778,  v787,  v795,  v802,  v808,  v813,  v817,  v820,  v822);
  sub_366F0( v255,  v256,  v257,  v258,  v259,  v260,  v261,  v262,  v296,  v328,  v359,  v389,  v418,  v446,  v473,  v499,  v524,  v548,  v571,  v593,  v614,  v634,  v653,  v671,  v688,  v704,  v719,  v733,  v746,  v758,  v769,  v779,  v788,  v796,  v803,  v809,  v814,  v818,  v821,  v823,  v824);
  sub_366E8();
  sub_3677C();
  sub_36588();
  sub_36624();
  sub_3661C();
  sub_36614();
  sub_3660C();
  sub_36604();
  sub_365FC();
  sub_365F4();
  sub_365EC();
  sub_365E4();
  sub_365DC();
  sub_366B8();
  sub_366B0();
  sub_366A8();
  sub_36814();
  uint64_t v263 = (uint64_t (*)(void))sub_36E80();
  return sub_36148(v263);
}

void sub_30FBC(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_AA80();
  sub_A72C(v2);
  uint64_t v3 = sub_A9C8();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for ResponseFactory;
  *a1 = v3;
  sub_1EB0C();
}

uint64_t sub_30FF8()
{
  return sub_31020( (void (*)(void))type metadata accessor for WellnessLoggingCATsSimple,  (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t sub_3100C()
{
  return sub_31020( (void (*)(void))type metadata accessor for WellnessCATs,  (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t sub_31020(void (*a1)(void), uint64_t (*a2)(uint64_t, void))
{
  return a2(v2, 0LL);
}

id sub_3107C()
{
  return [objc_allocWithZone((Class)type metadata accessor for LogSpecificMedicationsIntentHandler(0)) init];
}

id sub_310A0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (objc_class *)type metadata accessor for MedStorageHelper(0LL);
  id result = [objc_allocWithZone(v2) init];
  a1[3] = v2;
  a1[4] = &protocol witness table for MedStorageHelper;
  *a1 = result;
  return result;
}

uint64_t sub_310E8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(sub_35B1C, 0LL, 0LL);
}

void sub_31100(uint64_t *a1@<X8>)
{
  uint64_t v5 = sub_AAF0(v2);
  a1[8] = v1;
  a1[9] = (uint64_t)&off_17DC48;
  a1[5] = v5;
  type metadata accessor for WellnessLoggingCATPatternsExecutor(0LL);
  sub_36E30();
  uint64_t v6 = sub_AAF0(v2);
  a1[13] = v1;
  a1[14] = (uint64_t)&off_1806B8;
  a1[10] = v6;
  type metadata accessor for WellnessQueryingCATPatternsExecutor(0LL);
  sub_36E30();
  uint64_t v7 = sub_AAF0(v2);
  a1[18] = v1;
  a1[19] = (uint64_t)&off_17D960;
  a1[15] = v7;
  sub_1EB0C();
}

uint64_t sub_311AC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_D984();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v23 - v9;
  type metadata accessor for SiriEnvironment(0LL);
  if (static SiriEnvironment.forCurrentTask.getter())
  {
    SiriEnvironment.correctionsClientProvider.getter();
    uint64_t v11 = sub_3652C();
    dispatch thunk of SiriCorrectionsClientProvider.correctionsClient.getter(&v25, v11);
    sub_37110();
    if (*((void *)&v26 + 1))
    {
      uint64_t v12 = sub_20004(&v25, (uint64_t)v28);
      uint64_t v13 = (os_log_s *)Logger.wellness.unsafeMutableAddressor(v12);
      sub_A5DC((uint64_t)v13, (uint64_t)v24);
      sub_36E14((uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
      sub_368A0();
      os_log_type_t v14 = sub_AB70();
      if (sub_A634(v14))
      {
        uint64_t v15 = (uint8_t *)sub_232D0();
        *(_WORD *)uint64_t v15 = 0;
        sub_232EC(&dword_0, v13, (os_log_type_t)v8, "SpecificMedLoggingFlow: Registering corrections flow", v15);
        sub_5050((uint64_t)v15);
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      sub_A304((uint64_t)(v2 + 360), (uint64_t)v23);
      sub_500C(v23, v23[3]);
      sub_AA22C(a1, (uint64_t *)&v25);
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v23);
      uint64_t v16 = v29;
      uint64_t v17 = v30;
      sub_500C(v28, v29);
      dispatch thunk of SiriCorrectionsClient.register(flow:)(&v25, v16, v17);
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(&v25);
      return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v28);
    }
  }

  else
  {
    uint64_t v27 = 0LL;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
  }

  sub_279E0((uint64_t)&v25, &qword_18AE50);
  uint64_t v20 = (os_log_s *)Logger.wellness.unsafeMutableAddressor(v19);
  sub_A5DC((uint64_t)v20, (uint64_t)v28);
  sub_36E14((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  sub_AB5C();
  os_log_type_t v21 = sub_A898();
  if (sub_232DC(v21))
  {
    uint64_t v22 = (_WORD *)sub_232D0();
    sub_36DE0(v22);
    sub_232EC( &dword_0,  v20,  (os_log_type_t)a1,  "SpecificMedLoggingFlow: No corrections client available. Continuing without registering corrections flow.",  v2);
    sub_5050((uint64_t)v2);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

void sub_313EC(uint64_t a1)
{
  uint64_t v3 = sub_494C(&qword_18AE40);
  uint64_t v4 = *(unsigned __int8 **)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v78 = &v66[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_A794();
  __chkstk_darwin(v6);
  uint64_t v8 = &v66[-v7];
  uint64_t v9 = sub_D984();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_3751C();
  uint64_t v72 = v11;
  sub_A794();
  __chkstk_darwin(v12);
  uint64_t v71 = &v66[-v13];
  sub_A794();
  __chkstk_darwin(v14);
  uint64_t v70 = &v66[-v15];
  sub_A794();
  __chkstk_darwin(v16);
  uint64_t v79 = &v66[-v17];
  sub_A794();
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v20 = (uint8_t *)Logger.wellness.unsafeMutableAddressor(v19);
  sub_A5DC((uint64_t)v20, (uint64_t)v82);
  uint64_t v75 = v10;
  uint64_t v21 = sub_36ECC();
  uint64_t v73 = v22;
  v22(v21);
  uint64_t v76 = a1;
  uint64_t v77 = v4;
  uint64_t v74 = (void (*)(unsigned __int8 *, uint64_t, uint64_t))*((void *)v4 + 2);
  v74(v8, a1, v3);
  uint64_t v23 = (os_log_s *)sub_368A0();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = sub_A5E8(12LL);
    uint64_t v69 = v9;
    __int128 v26 = (uint8_t *)v25;
    uint64_t v67 = sub_A5E8(32LL);
    v81[0] = v67;
    uint64_t v68 = v20;
    *(_DWORD *)__int128 v26 = 136315138;
    uint64_t v1 = v26 + 4;
    sub_3586C(&qword_18AE48, &qword_18AE40);
    uint64_t v4 = v8;
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v3, v27);
    uint64_t v30 = sub_37390(v28, v29);
    uint64_t v31 = sub_373C4(v30);
    uint64_t v20 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v31, v32, v26 + 4, v26 + 12);
    sub_249D4();
    sub_36F84();
    sub_DA24( &dword_0,  v23,  v24,  "Received response from PromptForValueFlowAsync for LogConfirmationAsScheduledStrategy: %s",  v26);
    uint64_t v33 = v67;
    swift_arrayDestroy(v67, 1LL);
    sub_5050(v33);
    uint64_t v34 = (uint64_t)v26;
    uint64_t v9 = v69;
    sub_5050(v34);
  }

  else
  {
    sub_36F84();
  }

  uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
  sub_37090();
  uint64_t v36 = v78;
  v74(v78, v76, v3);
  int v37 = (*((uint64_t (**)(unsigned __int8 *, uint64_t))v1 + 11))(v36, v3);
  uint64_t v38 = (uint64_t)v79;
  if (v37 != enum case for PromptResult.answered<A>(_:))
  {
    ((void (*)(unsigned __int8 *, uint64_t))v4)(v36, v3);
    sub_A5DC((uint64_t)v20, (uint64_t)v81);
    uint64_t v44 = sub_36ECC();
    v45(v44);
    sub_368A0();
    os_log_type_t v46 = sub_A898();
    if (sub_232DC(v46))
    {
      uint64_t v47 = (_WORD *)sub_232D0();
      sub_36DE0(v47);
      uint64_t v43 = "PromptForValueFlowAsync was unanswered, erroring out";
      goto LABEL_11;
    }

LABEL_12:
    sub_37090();
    sub_36F54();
    goto LABEL_13;
  }

  (*((void (**)(unsigned __int8 *, uint64_t))v1 + 12))(v36, v3);
  uint64_t v39 = *((void *)v36 + 1);
  if (!v39 || (uint64_t v4 = (unsigned __int8 *)*v36, swift_bridgeObjectRelease(v39), v4 == (_BYTE *)&dword_0 + 2))
  {
    sub_A5DC((uint64_t)v20, (uint64_t)v81);
    uint64_t v40 = sub_36ECC();
    v73(v40);
    sub_368A0();
    os_log_type_t v41 = sub_A898();
    if (sub_232DC(v41))
    {
      uint64_t v42 = (_WORD *)sub_232D0();
      sub_36DE0(v42);
      uint64_t v43 = "PromptForValueFlowAsync returned incorrect values, erroring out";
LABEL_11:
      sub_232EC(&dword_0, (os_log_s *)v4, (os_log_type_t)v36, v43, v20);
      sub_5050((uint64_t)v20);
      goto LABEL_12;
    }

    goto LABEL_12;
  }

  sub_A5DC((uint64_t)v20, (uint64_t)v81);
  uint64_t v56 = v73;
  ((void (*)(uint64_t, uint8_t *, uint64_t))v73)(v38, v20, v9);
  sub_37018();
  os_log_type_t v57 = sub_AB70();
  if (sub_232DC(v57))
  {
    uint64_t v38 = 8LL;
    uint64_t v58 = v20;
    uint64_t v59 = (float *)sub_A5E8(8LL);
    sub_36AF0(v59, 1.5047e-36);
    sub_37070(&dword_0, v60, v61, "PromptForValueFlowAsync returned: %{BOOL}d");
    uint64_t v62 = (uint64_t)v59;
    uint64_t v20 = v58;
    sub_5050(v62);
  }

  v35(v38, v9);
  if ((v4 & 1) != 0)
  {
    sub_371A8();
  }

  else
  {
    sub_A5DC((uint64_t)v20, (uint64_t)v80);
    uint64_t v63 = sub_36ECC();
    v56(v63);
    sub_368A0();
    os_log_type_t v64 = sub_A898();
    if (sub_232DC(v64))
    {
      uint64_t v65 = (_WORD *)sub_232D0();
      sub_36DE0(v65);
      sub_232EC( &dword_0,  (os_log_s *)v4,  (os_log_type_t)v36,  "User rejected confirmation to log as scheduled, switching state",  v20);
      sub_5050((uint64_t)v20);
    }

    sub_37090();
    sub_371A8();
  }

    sub_37344();
    sub_36F54();
    sub_36BB8();
    goto LABEL_13;
  }

  sub_36EFC((uint64_t)v45, *(uint64_t (**)(uint64_t, uint64_t))(v41 + 96));
  uint64_t v48 = *((void *)v45 + 1);
  if (!v48 || (uint64_t v39 = (char *)*v45, swift_bridgeObjectRelease(v48), v39 == (_BYTE *)&dword_0 + 2))
  {
    sub_A5DC((uint64_t)v23, (uint64_t)v101);
    uint64_t v49 = sub_37118();
    v94(v49);
    sub_37018();
    uint64_t v50 = sub_A898();
    if (sub_232DC(v50))
    {
      uint64_t v51 = (_WORD *)sub_232D0();
      sub_36DE0(v51);
      uint64_t v52 = "PromptForValueFlowAsync returned incorrect values, erroring out";
LABEL_11:
      sub_232EC(&dword_0, (os_log_s *)v39, (os_log_type_t)v45, v52, v23);
      sub_5050((uint64_t)v23);
      goto LABEL_12;
    }

    goto LABEL_12;
  }

  sub_A5DC((uint64_t)v23, (uint64_t)v101);
  ((void (*)(char *, uint8_t *, uint64_t))v94)(v47, v23, v10);
  sub_37018();
  uint64_t v65 = sub_AB70();
  if (sub_232DC(v65))
  {
    uint64_t v66 = v23;
    uint64_t v67 = (float *)sub_A5E8(8LL);
    sub_36AF0(v67, 1.5047e-36);
    sub_37070(&dword_0, v68, v69, "PromptForValueFlowAsync returned: %{BOOL}d");
    uint64_t v70 = (uint64_t)v67;
    uint64_t v23 = v66;
    sub_5050(v70);
  }

  uint64_t v71 = sub_37104();
  v44(v71);
  if ((v39 & 1) != 0)
  {
    swift_beginAccess(v23, v100, 0LL, 0LL);
    sub_372D4();
    sub_368A0();
    uint64_t v75 = sub_AB70();
    if (sub_232DC(v75))
    {
      uint64_t v76 = (_WORD *)sub_232D0();
      sub_36DE0(v76);
      sub_232EC( &dword_0,  (os_log_s *)v39,  (os_log_type_t)v45,  "User wanted to overwrite existing statuses, switching state",  v23);
      sub_5050((uint64_t)v23);
    }

    sub_374E4();
    uint64_t v77 = sub_363E8();
    getMedStatus(from:)(v77, v78, v79, v80, v81, v82);
    uint64_t v84 = v83;
    sub_3652C();
    uint64_t v74 = 3LL;
    if ((v84 & 1) != 0) {
      uint64_t v74 = 4LL;
    }
  }

  else
  {
    swift_beginAccess(v23, v100, 0LL, 0LL);
    sub_372D4();
    sub_368A0();
    uint64_t v72 = sub_AB70();
    if (sub_232DC(v72))
    {
      uint64_t v73 = (_WORD *)sub_232D0();
      sub_36DE0(v73);
      sub_232EC( &dword_0,  (os_log_s *)v39,  (os_log_type_t)v45,  "User didn't want to overwrite existing statuses, switching state",  v23);
      sub_5050((uint64_t)v23);
    }

    sub_374E4();
    uint64_t v74 = 5LL;
  }

  os_log_type_t v57 = *(void *)(v2 + 224);
  uint64_t v58 = *(void *)(v2 + 232);
  uint64_t v85 = v2 + 224;
  uint64_t v59 = *(void *)(v85 + 16);
  uint64_t v60 = *(void *)(v85 + 24);
  uint64_t v61 = *(void *)(v85 + 32);
  uint64_t v62 = *(void *)(v85 + 40);
  uint64_t v63 = *(void *)(v85 + 48);
  os_log_type_t v64 = *(void *)(v85 + 56);
  *(void *)uint64_t v85 = v74;
  *(_OWORD *)(v85 + 8) = 0u;
  *(_OWORD *)(v85 + 24) = 0u;
  *(_OWORD *)(v85 + 40) = 0u;
  *(void *)(v85 + 56) = 0LL;
  *(_BYTE *)(v85 + 64) = 0x80;
LABEL_13:
  sub_3561C(v57, v58, v59, v60, v61, v62, v63, v64, v86);
  sub_D8FC();
}

      sub_37034();
      return 0LL;
    }

    goto LABEL_13;
  }

  if (*(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8LL)))
  {
    swift_retain();
    goto LABEL_9;
  }

  __break(1u);
  return result;
}

        uint64_t v16 = sub_37034();
        goto LABEL_13;
      }
    }

    else if (*(void *)(v29 + 16))
    {
      goto LABEL_8;
    }

    sub_37034();
    uint64_t v16 = sub_249D4();
  }

  uint64_t v9 = 1LL;
LABEL_13:
  uint64_t v11 = v0[37];
  uint64_t v12 = v0[27];
  type metadata accessor for SpeakableString(0LL);
  sub_41A40(v11, v9);
  uint64_t v13 = sub_6115C();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v18 = *(unsigned __int8 *)(v12 + 16);
  v0[38] = *(void *)(v12 + 192);
  uint64_t v19 = *(void *)(v1 + 24);
  if (!((unint64_t)v19 >> 62))
  {
    uint64_t v20 = *(void *)((char *)&dword_10 + (v19 & 0xFFFFFFFFFFFFF8LL));
    swift_retain();
    sub_61894();
    if (v20) {
      goto LABEL_15;
    }
LABEL_23:
    sub_DA1C();
    goto LABEL_24;
  }

  if (v19 < 0) {
    __int128 v26 = v19;
  }
  else {
    __int128 v26 = v19 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_retain();
  sub_61894();
  if (!_CocoaArrayWrapper.endIndex.getter(v26)) {
    goto LABEL_23;
  }
LABEL_15:
  sub_398E0(0LL, (v19 & 0xC000000000000001LL) == 0, v19);
  if ((v19 & 0xC000000000000001LL) != 0) {
    uint64_t v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v19);
  }
  else {
    uint64_t v21 = *(id *)(v19 + 32);
  }
  uint64_t v22 = v21;
  sub_DA1C();
  sub_134BCC(v22);
  if (v24)
  {
    String.toSpeakableString.getter(v23, v24);
    sub_DA1C();
    uint64_t v25 = 0LL;
    goto LABEL_25;
  }

    v27((char *)v25, v23, v20);
    goto LABEL_13;
  }

  if (v33 >= 3599.0) {
    goto LABEL_12;
  }
  sub_F85F4();
  DateInterval.init(start:duration:)(v16);
LABEL_11:
  sub_24A50((uint64_t)v23, *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8));
LABEL_13:
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v25, 0LL, 1LL, v20);
}

    uint64_t v63 = *(void **)(v1 + 1352);
    os_log_type_t v64 = *(void *)(v1 + 1336);
    uint64_t v65 = *(void *)(v1 + 1328);
    uint64_t v66 = *(void *)(v1 + 1320);
    uint64_t v67 = *v20;
    uint64_t v68 = *(void *)(v1 + 1192);
    uint64_t v69 = *(void *)(v1 + 1184);
    uint64_t v70 = *(void *)(v1 + 1176);

    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
    sub_A13C((_OWORD *)(v70 + 40), v96);
    sub_A178();
    static ExecuteResponse.complete<A>(next:)();

    sub_A1B4(v96);
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
    uint64_t v71 = sub_FA894();
    uint64_t v98 = v72;
    swift_task_dealloc(v71);
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    sub_A760();
    sub_A8EC();
    sub_A910();
    sub_A864();
    sub_A85C();
    sub_A8F4();
    swift_task_dealloc(v98);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  uint64_t v97 = v1 + 912;
  uint64_t v94 = *(void *)(v1 + 1336);
  uint64_t v74 = *(void **)(v1 + 1264);
  uint64_t v75 = *(uint64_t **)(v1 + 1232);
  uint64_t v31 = *(void *)(v1 + 1224);
  sub_FA938(v57, *(void *)(v1 + 1240));
  uint64_t v76 = sub_FA8F8();
  *uint64_t v75 = v54;
  v75[1] = v56;
  uint64_t v33 = sub_FAA34(v76, "catId");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  sub_FA9F0();
  sub_FA980();
  *(void *)(v1 + 856) = sub_FA94C();
  uint64_t v77 = sub_20168();
  *(void *)(v1 + 864) = v77;
  uint64_t v85 = sub_FAA28(v77, v78, v79, v80, v81, v82, v83, v84, v92, v94, (void *)(v1 + 832));
  sub_FA9D0((uint64_t)v85);
  sub_FA9B0();
  uint64_t v86 = sub_494C(&qword_18A460);
  uint64_t v87 = (__n128 *)sub_20308(v86, 40LL);
  sub_FA910(v87, v88, v89, (__n128)xmmword_138BA0);
  uint64_t v47 = v99;
  *(void *)(v1 + 1384) = v99;
  uint64_t v90 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)[1];
  uint64_t v91 = v74;
  uint64_t v50 = (void *)swift_task_alloc(v90);
  *(void *)(v1 + 139sub_D878(v0 + 2) = v50;
  uint64_t v51 = sub_FA370;
LABEL_14:
  *uint64_t v50 = v1;
  v50[1] = v51;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)( v97,  v31,  v47,  *(void *)(v1 + 1336),  v33);
}

  uint64_t v8 = 1LL;
LABEL_13:
  uint64_t v10 = v0[37];
  type metadata accessor for SpeakableString(0LL);
  sub_36F38(v10, v8);
  uint64_t v11 = *(void *)(v1 + 16);
  if (!((unint64_t)v11 >> 62))
  {
    uint64_t v12 = *(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain(*(void *)(v1 + 16));
    if (v12) {
      goto LABEL_15;
    }
LABEL_23:
    sub_2A184();
LABEL_24:
    uint64_t v17 = 1LL;
    goto LABEL_25;
  }

  if (v11 < 0) {
    uint64_t v18 = *(void *)(v1 + 16);
  }
  else {
    uint64_t v18 = v11 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*(void *)(v1 + 16));
  if (!_CocoaArrayWrapper.endIndex.getter(v18)) {
    goto LABEL_23;
  }
LABEL_15:
  sub_398E0(0LL, (v11 & 0xC000000000000001LL) == 0, v11);
  if ((v11 & 0xC000000000000001LL) != 0) {
    uint64_t v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v11);
  }
  else {
    uint64_t v13 = *(id *)(v11 + 32);
  }
  uint64_t v14 = v13;
  sub_2A184();
  uint64_t v15 = sub_1141DC(v14);
  if (!v16) {
    goto LABEL_24;
  }
  String.toSpeakableString.getter(v15, v16);
  sub_2A184();
  uint64_t v17 = 0LL;
LABEL_25:
  uint64_t v19 = v0[27];
  sub_36F38(v0[36], v17);
  v0[38] = *(void *)(v19 + 184);
  uint64_t v20 = dword_190C0C;
  swift_retain();
  uint64_t v21 = (void *)swift_task_alloc(v20);
  v0[39] = v21;
  *uint64_t v21 = v0;
  v21[1] = sub_113868;
  return sub_131CB4(v0[36], v0[37]);
}

LABEL_13:
  sub_36BB8();
  sub_3561C(v48, v49, v50, v51, v52, v53, v54, v55, v66[0]);
  sub_D8FC();
}

  sub_41920(v16, &qword_18AA78, v18, v19, v20, v21, v22, v23);
  sub_41978();
}

          sub_A383C(v23, v24, &qword_18AA78);
          if (v48)
          {
            updated = type metadata accessor for UsoTask_update_common_HealthLog(0LL);
            uint64_t v36 = sub_A3770(updated);
            if ((v36 & 1) == 0)
            {
LABEL_23:
              sub_41BE0(v36, &qword_18AA78);
              goto LABEL_24;
            }

            int v37 = sub_372CC();
            dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter(v47, v37);
            sub_367AC();
            if (!v47[0]
              || (uint64_t v38 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)( 1701667182LL,  0xE400000000000000LL),  swift_release(),  !v38))
            {
              uint64_t v36 = sub_367AC();
              goto LABEL_23;
            }

            sub_91090(v38, v9);
            sub_249D4();
            uint64_t v39 = type metadata accessor for UsoIdentifier(0LL);
            uint64_t v40 = sub_A614(v9, 1LL, v39);
            if (!v30)
            {
              uint64_t v43 = UsoIdentifier.value.getter(v40);
              uint64_t v45 = v44;
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8LL))(v9, v39);
              sub_110A0C(v43, v45);
              os_log_type_t v46 = sub_367AC();
              sub_41BE0(v46, &qword_18AA78);
              goto LABEL_24;
            }

            sub_367AC();
            os_log_type_t v41 = &qword_18DCA8;
            uint64_t v42 = (void *)v9;
          }

          else
          {
            os_log_type_t v41 = &qword_18AA78;
            uint64_t v42 = v47;
          }

          sub_A4A4((uint64_t)v42, v41);
          goto LABEL_23;
        }
      }

      else
      {
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v13, 1LL, 1LL, v0);
      }

      sub_37110();
      uint64_t v33 = &qword_18DCB0;
      uint64_t v34 = (void *)v13;
    }

    else
    {
      uint64_t v33 = &qword_18AA78;
      uint64_t v34 = v47;
    }

    sub_A4A4((uint64_t)v34, v33);
    goto LABEL_13;
  }

void sub_31894(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_494C(&qword_18AE40);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v98 = (unsigned __int8 *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_A794();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v86 - v8;
  uint64_t v10 = sub_D984();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_3751C();
  uint64_t v93 = v12;
  sub_A794();
  __chkstk_darwin(v13);
  uint64_t v92 = (char *)&v86 - v14;
  sub_A794();
  __chkstk_darwin(v15);
  uint64_t v91 = (char *)&v86 - v16;
  sub_A794();
  __chkstk_darwin(v17);
  uint64_t v90 = (char *)&v86 - v18;
  sub_A794();
  __chkstk_darwin(v19);
  uint64_t v99 = (char *)&v86 - v20;
  sub_A794();
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v23 = (uint8_t *)Logger.wellness.unsafeMutableAddressor(v22);
  sub_A5DC((uint64_t)v23, (uint64_t)v102);
  uint64_t v24 = sub_37118();
  uint64_t v94 = v25;
  v25(v24);
  uint64_t v96 = a1;
  uint64_t v97 = v5;
  uint64_t v95 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v95(v9, a1, v4);
  __int128 v26 = (os_log_s *)sub_37018();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = sub_A5E8(12LL);
    uint64_t v88 = v23;
    unint64_t v29 = (uint8_t *)v28;
    uint64_t v30 = sub_A5E8(32LL);
    uint64_t v89 = v10;
    uint64_t v31 = v30;
    v101[0] = v30;
    uint64_t v87 = v11;
    *(_DWORD *)unint64_t v29 = 136315138;
    uint64_t v86 = v29 + 4;
    sub_3586C(&qword_18AE48, &qword_18AE40);
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter(v4, v32);
    uint64_t v35 = sub_37390(v33, v34);
    uint64_t v36 = sub_373C4(v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v36, v37, v86, v29 + 12);
    sub_249D4();
    uint64_t v38 = v97;
    uint64_t v39 = *(char **)(v97 + 8);
    sub_37334((uint64_t)v9);
    os_log_type_t v40 = v27;
    uint64_t v41 = v38;
    sub_DA24( &dword_0,  v26,  v40,  "Received response from PromptForValueFlowAsync for LogMedGenericMixedStatusConfirmationStrategy: %s",  v29);
    swift_arrayDestroy(v31, 1LL);
    uint64_t v42 = v31;
    uint64_t v10 = v89;
    sub_5050(v42);
    uint64_t v43 = (uint64_t)v29;
    uint64_t v23 = v88;
    sub_5050(v43);

    uint64_t v44 = *(void (**)(uint64_t))(v87 + 8);
  }

  else
  {
    uint64_t v41 = v97;
    uint64_t v39 = *(char **)(v97 + 8);
    sub_37334((uint64_t)v9);

    uint64_t v44 = *(void (**)(uint64_t))(v11 + 8);
  }

  sub_37344();
  uint64_t v45 = v98;
  v95((char *)v98, v96, v4);
  int v46 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v41 + 88))(v45, v4);
  uint64_t v47 = v99;
  if (v46 != enum case for PromptResult.answered<A>(_:))
  {
    sub_37334((uint64_t)v45);
    sub_A5DC((uint64_t)v23, (uint64_t)v101);
    uint64_t v53 = sub_37118();
    v54(v53);
    sub_37018();
    os_log_type_t v55 = sub_A898();
    if (sub_232DC(v55))
    {
      uint64_t v56 = (_WORD *)sub_232D0();
      sub_36DE0(v56);
      uint64_t v52 = "PromptForValueFlowAsync was unanswered, erroring out";
      goto LABEL_11;
    }

uint64_t sub_31E1C(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v4 + 3sub_20004(v5, v1 + 216) = v3;
  *(void *)(v4 + 3208) = a3;
  *(_BYTE *)(v4 + 3129) = a2;
  *(void *)(v4 + 3200) = a1;
  uint64_t v5 = type metadata accessor for GenericMedCompletedLogModel(0LL);
  *(void *)(v4 + 3224) = sub_36390(v5);
  uint64_t v6 = sub_ABF4();
  *(void *)(v4 + 323sub_D878(v0 + 2) = v6;
  *(void *)(v4 + 3240) = *(void *)(v6 - 8);
  *(void *)(v4 + 3248) = sub_A5B8();
  *(void *)(v4 + 3256) = sub_A5B8();
  uint64_t v7 = sub_494C(&qword_18A1A8);
  *(void *)(v4 + 3264) = sub_36390(v7);
  sub_A8E4();
  *(void *)(v4 + 327sub_D878(v0 + 2) = sub_A5B8();
  *(void *)(v4 + 3280) = sub_A5B8();
  uint64_t v8 = type metadata accessor for SpecificMedCompletedLogModel(0LL);
  *(void *)(v4 + 3288) = sub_36390(v8);
  *(void *)(v4 + 3296) = type metadata accessor for SnippetHeaderModel(0LL);
  *(void *)(v4 + 3304) = sub_A5B8();
  *(void *)(v4 + 331sub_D878(v0 + 2) = sub_A5B8();
  sub_494C(&qword_189CF8);
  *(void *)(v4 + 3320) = sub_A5B8();
  *(void *)(v4 + 3328) = sub_A5B8();
  *(void *)(v4 + 3336) = sub_A5B8();
  *(void *)(v4 + 3344) = sub_A5B8();
  *(void *)(v4 + 335sub_D878(v0 + 2) = sub_A5B8();
  sub_494C(&qword_189D00);
  *(void *)(v4 + 3360) = sub_A5B8();
  *(void *)(v4 + 3368) = sub_A5B8();
  *(void *)(v4 + 3376) = sub_A5B8();
  *(void *)(v4 + 3384) = sub_A5B8();
  uint64_t v9 = sub_D984();
  *(void *)(v4 + 339sub_D878(v0 + 2) = v9;
  *(void *)(v4 + 3400) = *(void *)(v9 - 8);
  *(void *)(v4 + 3408) = sub_A5B8();
  *(void *)(v4 + 3416) = sub_A5B8();
  *(void *)(v4 + 3424) = sub_A5B8();
  *(void *)(v4 + 343sub_D878(v0 + 2) = sub_A5B8();
  *(void *)(v4 + 3440) = sub_A5B8();
  *(void *)(v4 + 3448) = sub_A5B8();
  *(void *)(v4 + 3456) = sub_A5B8();
  *(void *)(v4 + 3464) = sub_A5B8();
  *(void *)(v4 + 347sub_D878(v0 + 2) = sub_A5B8();
  uint64_t v10 = type metadata accessor for DialogPhase(0LL);
  *(void *)(v4 + 3480) = v10;
  *(void *)(v4 + 3488) = *(void *)(v10 - 8);
  *(void *)(v4 + 3496) = sub_A5B8();
  *(void *)(v4 + 3504) = sub_A5B8();
  uint64_t v11 = type metadata accessor for OutputGenerationManifest(0LL);
  *(void *)(v4 + 351sub_D878(v0 + 2) = v11;
  *(void *)(v4 + 3520) = *(void *)(v11 - 8);
  *(void *)(v4 + 3528) = sub_A5B8();
  *(void *)(v4 + 3536) = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_32048( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8 + 3128;
  uint64_t v10 = *(void *)(v8 + 3504);
  uint64_t v11 = *(void *)(v8 + 3496);
  uint64_t v12 = *(void *)(v8 + 3488);
  uint64_t v13 = *(void *)(v8 + 3480);
  uint64_t v14 = *(void *)(v8 + 3400);
  int v15 = *(unsigned __int8 *)(v8 + 3129);
  static DialogPhase.completion.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  *(void *)(v8 + 3544) = v16;
  v16(v11, v10, v13);
  OutputGenerationManifest.init(dialogPhase:_:)(v11, sub_A633C, 0LL);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
  *(void *)(v8 + 355sub_D878(v0 + 2) = v17;
  uint64_t v18 = sub_D970(v10, v17);
  uint64_t v19 = Logger.wellness.unsafeMutableAddressor(v18);
  uint64_t v20 = (os_log_s *)v19;
  *(void *)(v8 + 3560) = v19;
  uint64_t v21 = *(void **)(v8 + 3208);
  if (v15 == 5)
  {
    uint64_t v22 = *(void *)(v8 + 3472);
    sub_A5DC(v19, v8 + 2928);
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
    *(void *)(v8 + 3568) = v23;
    sub_36E14(v22, v23);
    uint64_t v24 = v21;
    sub_A86C();
    os_log_type_t v25 = sub_AB70();
    if (sub_3721C(v25))
    {
      __int128 v26 = (uint8_t *)sub_A5E8(12LL);
      os_log_type_t v27 = (void *)sub_A5E8(32LL);
      *(_DWORD *)__int128 v26 = 136315138;
      sub_37350((uint64_t)v27, (SEL *)&selRef_matchingMeds);
      uint64_t v29 = v28;
      uint64_t v30 = (_BYTE *)(v8 + 3128);
      if (v28)
      {
        if ((unint64_t)v28 >> 62)
        {
          if (v28 >= 0) {
            v28 &= 0xFFFFFFFFFFFFFF8uLL;
          }
          uint64_t v31 = _CocoaArrayWrapper.endIndex.getter(v28);
        }

        else
        {
          uint64_t v31 = *(void *)((char *)&dword_10 + (v28 & 0xFFFFFFFFFFFFFF8LL));
        }

        sub_369F4();
      }

      else
      {
        uint64_t v31 = 0LL;
      }

      sub_370DC();
      *(void *)(v8 + 3120) = v31;
      *uint64_t v30 = v47;
      uint64_t v48 = sub_494C(&qword_18AE18);
      uint64_t v49 = sub_3739C(v48);
      uint64_t v51 = sub_374F0(v49, v50);
      *(void *)(v8 + 319sub_D878(v0 + 2) = v51;
      sub_373EC(v51, v8 + 3200, v52, (uint64_t)(v26 + 12));
      swift_bridgeObjectRelease(v30);

      sub_DA24(&dword_0, v20, (os_log_type_t)v22, "got .rejectedOverwriteInGroup, starting with %s matchingMeds", v26);
      sub_36F70();
      sub_5050(v22);
      sub_5050((uint64_t)v26);

      uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      uint64_t v43 = v386;
      uint64_t v42 = v387;
    }

    else
    {
      sub_37324();

      uint64_t v41 = (void (*)(uint64_t, uint64_t))v21[1];
      uint64_t v42 = sub_372A0();
    }

    v41(v42, v43);
    *(void *)(v8 + 3576) = v41;
    sub_35414(*(void **)(v8 + 3208), (SEL *)&selRef_matchingMeds);
    if (!v54)
    {
LABEL_21:
      uint64_t v58 = *(void *)(v8 + 3384);
      uint64_t v59 = *(void *)(v8 + 3232);
      *(void *)(v8 + 3584) = *(void *)(*(void *)(v8 + 3216) + 336LL);
      sub_A66C(v58, 1LL, v53, v59);
      sub_363E8();
      uint64_t v60 = (void *)sub_36B20();
      *(void *)(v8 + 359sub_D878(v0 + 2) = v60;
      *uint64_t v60 = v8;
      v60[1] = sub_32790;
LABEL_56:
      sub_36DEC();
      return sub_1317D4(v231, v232, v233);
    }

    sub_36C3C();
    if (v56)
    {
      else {
        uint64_t v229 = v41;
      }
      uint64_t v57 = _CocoaArrayWrapper.endIndex.getter(v229);
    }

    else
    {
      uint64_t v57 = *(void *)(v55 + 16);
    }

    sub_249D4();
    if (v57 != 1)
    {
      if (v57)
      {
        sub_35414(*(void **)(v8 + 3208), (SEL *)&selRef_matchingMeds);
        if (!v70)
        {
          uint64_t v94 = *(void *)(v8 + 3392);
          sub_A5DC(*(void *)(v8 + 3560), v8 + 2904);
          sub_36170();
          sub_23374();
          os_log_type_t v95 = sub_A898();
          if (sub_A988(v95))
          {
            uint64_t v96 = (_WORD *)sub_232D0();
            sub_366C0(v96);
            sub_A940( &dword_0,  v97,  v98,  "Couldn't create logMedConfirmationRejected_Dialog, returning GenericErrorFlow");
            sub_5050(v94);
          }

          uint64_t v388 = *(void *)(v8 + 3536);
          uint64_t v99 = *(void *)(v8 + 3520);
          sub_366CC();
          sub_ABFC();
          sub_36590((_OWORD *)(v94 + 64));
          sub_A178();
          sub_36748();
          sub_36784();
          sub_D970(v388, *(uint64_t (**)(uint64_t, uint64_t))(v99 + 8));
          sub_36280();
          sub_A8EC();
          sub_A910();
          sub_A864();
          sub_A85C();
          sub_A8F4();
          sub_A78C();
          sub_A67C();
          sub_A7C8();
          uint64_t v100 = sub_A760();
          uint64_t v108 = sub_AAD8(v100, v101, v102, v103, v104, v105, v106, v107, v234, v250);
          uint64_t v116 = sub_A888(v108, v109, v110, v111, v112, v113, v114, v115, v235, v251, v266);
          uint64_t v124 = sub_A854(v116, v117, v118, v119, v120, v121, v122, v123, v236, v252, v267, v281);
          uint64_t v132 = sub_A84C(v124, v125, v126, v127, v128, v129, v130, v131, v237, v253, v268, v282, v295);
          uint64_t v140 = sub_A844(v132, v133, v134, v135, v136, v137, v138, v139, v238, v254, v269, v283, v296, v308);
          uint64_t v148 = sub_A83C(v140, v141, v142, v143, v144, v145, v146, v147, v239, v255, v270, v284, v297, v309, v320);
          uint64_t v156 = sub_A95C( v148,  v149,  v150,  v151,  v152,  v153,  v154,  v155,  v240,  v256,  v271,  v285,  v298,  v310,  v321,  v331);
          uint64_t v164 = sub_A954( v156,  v157,  v158,  v159,  v160,  v161,  v162,  v163,  v241,  v257,  v272,  v286,  v299,  v311,  v322,  v332,  v341);
          uint64_t v172 = sub_A938( v164,  v165,  v166,  v167,  v168,  v169,  v170,  v171,  v242,  v258,  v273,  v287,  v300,  v312,  v323,  v333,  v342,  v350);
          uint64_t v180 = sub_A930( v172,  v173,  v174,  v175,  v176,  v177,  v178,  v179,  v243,  v259,  v274,  v288,  v301,  v313,  v324,  v334,  v343,  v351,  v358);
          uint64_t v188 = sub_A928( v180,  v181,  v182,  v183,  v184,  v185,  v186,  v187,  v244,  v260,  v275,  v289,  v302,  v314,  v325,  v335,  v344,  v352,  v359,  v365);
          uint64_t v196 = sub_A920( v188,  v189,  v190,  v191,  v192,  v193,  v194,  v195,  v245,  v261,  v276,  v290,  v303,  v315,  v326,  v336,  v345,  v353,  v360,  v366,  v371);
          uint64_t v204 = sub_36374( v196,  v197,  v198,  v199,  v200,  v201,  v202,  v203,  v246,  v262,  v277,  v291,  v304,  v316,  v327,  v337,  v346,  v354,  v361,  v367,  v372,  v376);
          uint64_t v212 = sub_3636C( v204,  v205,  v206,  v207,  v208,  v209,  v210,  v211,  v247,  v263,  v278,  v292,  v305,  v317,  v328,  v338,  v347,  v355,  v362,  v368,  v373,  v377,  v380);
          uint64_t v220 = sub_36364( v212,  v213,  v214,  v215,  v216,  v217,  v218,  v219,  v248,  v264,  v279,  v293,  v306,  v318,  v329,  v339,  v348,  v356,  v363,  v369,  v374,  v378,  v381,  v383);
          sub_363F0( v220,  v221,  v222,  v223,  v224,  v225,  v226,  v227,  v249,  v265,  v280,  v294,  v307,  v319,  v330,  v340,  v349,  v357,  v364,  v370,  v375,  v379,  v382,  v384,  v385);
          sub_36814();
          sub_3680C();
          sub_36804();
          sub_367FC();
          sub_A918();
          sub_36DEC();
          __asm { BR              X0 }
        }

        sub_36C3C();
        if (v72) {
          sub_37358(v71);
        }
        uint64_t v73 = *(void *)(v8 + 3368);
        uint64_t v74 = *(void *)(v8 + 3216);
        sub_249D4();
        *(void *)(v8 + 375sub_D878(v0 + 2) = *(void *)(v74 + 336);
        sub_37188(v73);
        sub_363E8();
        os_log_type_t v75 = (void *)sub_3703C();
        *(void *)(v8 + 3760) = v75;
        *os_log_type_t v75 = v8;
        v75[1] = sub_33864;
        goto LABEL_56;
      }

      goto LABEL_21;
    }

    *(void *)(v8 + 363sub_D878(v0 + 2) = *(void *)(*(void *)(v8 + 3216) + 336LL);
    uint64_t v61 = sub_363E8();
    sub_36D9C(v61, (SEL *)&selRef_matchingMeds);
    if (!v62) {
      goto LABEL_36;
    }
    uint64_t v64 = v62;
    if ((unint64_t)v62 >> 62)
    {
      if (v62 >= 0) {
        v62 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      if (_CocoaArrayWrapper.endIndex.getter(v62))
      {
LABEL_25:
        sub_398E0(0LL, (v64 & 0xC000000000000001LL) == 0, v64);
        if ((v64 & 0xC000000000000001LL) != 0) {
          id v65 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v64);
        }
        else {
          id v65 = *(id *)(v64 + 32);
        }
        uint64_t v66 = v65;
        sub_2A184();
        sub_134BCC(v66);
        if (v68)
        {
          String.toSpeakableString.getter(v67, v68);
          uint64_t v69 = 0LL;
LABEL_54:
          sub_2A184();
          goto LABEL_55;
        }

LABEL_36:
        uint64_t v69 = 1LL;
LABEL_55:
        sub_A66C(*(void *)(v8 + 3376), v69, v63, *(void *)(v8 + 3232));
        uint64_t v230 = (void *)swift_task_alloc(dword_190BF4);
        *(void *)(v8 + 3640) = v230;
        *uint64_t v230 = v8;
        v230[1] = sub_32D4C;
        goto LABEL_56;
      }
    }

    else if (*(void *)((char *)&dword_10 + (v62 & 0xFFFFFFFFFFFFFF8LL)))
    {
      goto LABEL_25;
    }

    uint64_t v69 = 1LL;
    goto LABEL_54;
  }

  uint64_t v32 = *(void *)(v8 + 3416);
  sub_A5DC(v19, v8 + 2760);
  uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  *(void *)(v8 + 3800) = v33;
  sub_36E14(v32, v33);
  unint64_t v34 = v21;
  sub_A86C();
  os_log_type_t v35 = sub_AB70();
  if (sub_3721C(v35))
  {
    uint64_t v36 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v37 = (void *)sub_A5E8(32LL);
    *(_DWORD *)uint64_t v36 = 136315138;
    sub_37350((uint64_t)v37, (SEL *)&selRef_matchingMeds);
    uint64_t v39 = v38;
    if (v38)
    {
      if ((unint64_t)v38 >> 62)
      {
        if (v38 >= 0) {
          v38 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        uint64_t v40 = _CocoaArrayWrapper.endIndex.getter(v38);
      }

      else
      {
        uint64_t v40 = *(void *)((char *)&dword_10 + (v38 & 0xFFFFFFFFFFFFFF8LL));
      }

      sub_369F4();
    }

    else
    {
      uint64_t v40 = 0LL;
    }

    sub_370DC();
    *(void *)(v8 + 3136) = v40;
    uint64_t v9 = v8 + 3128;
    *(_BYTE *)(v8 + 3144) = v76;
    uint64_t v77 = sub_494C(&qword_18AE18);
    uint64_t v78 = sub_3739C(v77);
    uint64_t v80 = sub_374F0(v78, v79);
    *(void *)(v8 + 315sub_D878(v0 + 2) = v80;
    sub_373EC(v80, v8 + 3160, v81, (uint64_t)(v36 + 12));
    swift_bridgeObjectRelease(v8 + 3128);

    sub_DA24( &dword_0,  v20,  (os_log_type_t)v32,  "didn't get .rejectedOverwriteInGroup, starting with %s matchingMeds",  v36);
    sub_36F70();
    sub_5050(v32);
    sub_5050((uint64_t)v36);

    uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    uint64_t v46 = v386;
    uint64_t v45 = v387;
  }

  else
  {
    sub_37324();

    uint64_t v44 = (void (*)(uint64_t, uint64_t))v21[1];
    uint64_t v45 = sub_372A0();
  }

  v44(v45, v46);
  *(void *)(v8 + 3808) = v44;
  uint64_t v82 = *(void *)(v8 + 3216);
  uint64_t v83 = sub_363E8();
  getMedStatus(from:)(v83, v84, v85, v86, v87, v88);
  *(_BYTE *)(v9 + sub_D878(v0 + 2) = v89 & 1;
  sub_3652C();
  *(void *)(v8 + 3816) = *(void *)(v82 + 336);
  sub_363E8();
  uint64_t v90 = (void *)sub_3703C();
  *(void *)(v8 + 3824) = v90;
  *uint64_t v90 = v8;
  v90[1] = sub_34258;
  sub_36DEC();
  return sub_1311F4(v91, v92);
}

    sub_DED3C(v38);
    uint64_t v56 = sub_DEB74();
    id v65 = 8LL;
LABEL_37:
    *(void *)uint64_t v6 = v65;
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *(void *)(v6 + 56) = 0LL;
    *(_BYTE *)(v6 + 64) = -64;
    sub_3561C(v56, v57, v58, v59, v60, v61, v62, v63, v64);
    goto LABEL_38;
  }

  (*(void (**)(unsigned __int8 *, uint64_t))(v111 + 96))(v37, v8);
  uint64_t v36 = *((void *)v37 + 1);
  uint64_t v38 = v104;
  if (!v36)
  {
LABEL_33:
    uint64_t v66 = v110;
    sub_A5DC((uint64_t)v110, (uint64_t)v114);
    sub_DDF94(v38);
    sub_466E0();
    uint64_t v94 = sub_A898();
    if (sub_232DC(v94))
    {
      os_log_type_t v95 = (_WORD *)sub_A5E8(2LL);
      sub_DE478(v95);
      uint64_t v69 = "PromptForValueFlowAsync returned incorrect values, erroring out";
      goto LABEL_35;
    }

    goto LABEL_36;
  }

  uint64_t v39 = *v37;
  if (v39 == 2) {
    goto LABEL_32;
  }
  if (!((unint64_t)v36 >> 62))
  {
    uint64_t v28 = *(os_log_s **)((char *)&dword_10 + (v36 & 0xFFFFFFFFFFFFFF8LL));
    if (v28) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }

  uint64_t v93 = v36 >= 0 ? v36 & 0xFFFFFFFFFFFFFF8LL : *((void *)v37 + 1);
  sub_1EB6C();
  uint64_t v28 = (os_log_s *)_CocoaArrayWrapper.endIndex.getter(v93);
  sub_249D4();
  if (!v28)
  {
LABEL_32:
    sub_249D4();
    goto LABEL_33;
  }

uint64_t sub_32790()
{
  *(void *)(v0 + 3600) = v2;
  uint64_t v4 = sub_36900(v3);
  if (v1)
  {
    sub_367AC();
    uint64_t v5 = sub_36860();
    sub_36A94(v5, &qword_189D00);
  }

  else
  {
    sub_36A94(v4, &qword_189D00);
    sub_367AC();
  }

  sub_A964();
  return sub_363F8(v6, v7, v8);
}

uint64_t sub_3280C()
{
  uint64_t v1 = *(void *)(v0 + 3216);
  id v2 = [*(id *)(v0 + 3600) catId];
  sub_36EE4();
  sub_36920();
  sub_36534();
  sub_368F8();
  sub_36F2C();
  sub_36590((_OWORD *)(v1 + 64));
  sub_36CEC(v1 + 296);
  *(void *)(v0 + 3608) = *(void *)(v1 + 336);
  *(void *)(v0 + 3616) = *(void *)(v1 + 344);
  sub_363E8();
  sub_36C5C();
  uint64_t v3 = (void *)sub_3709C();
  *(void *)(v0 + 3624) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_328D8;
  sub_36700();
  return sub_3619C(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_328D8()
{
  uint64_t v1 = (void *)(v0 + 1656);
  sub_20264(*(void *)(v0 + 3624));
  sub_36BE0();
  sub_36EBC();
  sub_36B74(v1);
  sub_36E94();
  sub_A964();
  return sub_36348(v2, v3, v4);
}

uint64_t sub_32938()
{
  uint64_t v1 = (__int128 *)(v0 + 1776);
  if (*(void *)(v0 + 1800))
  {
    uint64_t v2 = *(void **)(v0 + 3600);
    uint64_t v359 = *(void *)(v0 + 3536);
    uint64_t v3 = *(void *)(v0 + 3520);
    sub_20004(v1, v0 + 2016);
    sub_36878(v0 + 2016);
    uint64_t v4 = sub_364BC((uint64_t)&unk_17CCD8);
    sub_36964(v4);
    uint64_t v5 = sub_369CC();
    uint64_t v6 = sub_A72C(v5);
    *(void *)(v0 + 3sub_20004(v6, v1 + 176) = sub_37494(v6, (uint64_t)&unk_18AE38);
    sub_37130();

    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 2016));
    sub_D970(v359, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    sub_3652C();
  }

  else
  {
    uint64_t v7 = *(void *)(v0 + 3560);
    uint64_t v8 = *(uint8_t **)(v0 + 3464);
    sub_279E0((uint64_t)v1, &qword_18A448);
    sub_A5DC(v7, v0 + 2808);
    sub_36CDC();
    sub_AB5C();
    os_log_type_t v9 = sub_AB70();
    if (sub_232DC(v9))
    {
      uint64_t v10 = (_WORD *)sub_232D0();
      sub_36A44(v10);
      sub_232EC( &dword_0,  (os_log_s *)(v0 + 2808),  (os_log_type_t)v7,  "Couldn't create output, returning GenericErrorFlow",  v8);
      sub_5050((uint64_t)v8);
    }

    uint64_t v11 = *(void **)(v0 + 3600);
    uint64_t v12 = *(void (**)(uint64_t))(v0 + 3576);
    uint64_t v358 = *(void *)(v0 + 3536);
    uint64_t v13 = *(void *)(v0 + 3520);
    sub_366CC();
    uint64_t v14 = sub_37084();
    v12(v14);
    sub_372AC();
    sub_A178();
    sub_36C08();

    sub_36DD8();
    sub_D970(v358, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
  }

  uint64_t v168 = *(void *)(v0 + 3424);
  uint64_t v187 = *(void *)(v0 + 3416);
  uint64_t v205 = *(void *)(v0 + 3408);
  uint64_t v222 = *(void *)(v0 + 3384);
  uint64_t v238 = *(void *)(v0 + 3376);
  uint64_t v253 = *(void *)(v0 + 3368);
  uint64_t v267 = *(void *)(v0 + 3360);
  uint64_t v280 = *(void *)(v0 + 3352);
  uint64_t v292 = *(void *)(v0 + 3344);
  uint64_t v303 = *(void *)(v0 + 3336);
  uint64_t v313 = *(void *)(v0 + 3328);
  uint64_t v322 = *(void *)(v0 + 3320);
  uint64_t v330 = *(void *)(v0 + 3312);
  uint64_t v337 = *(void *)(v0 + 3304);
  uint64_t v343 = *(void *)(v0 + 3288);
  uint64_t v348 = *(void *)(v0 + 3280);
  uint64_t v352 = *(void *)(v0 + 3272);
  uint64_t v355 = *(void *)(v0 + 3264);
  uint64_t v357 = *(void *)(v0 + 3256);
  swift_task_dealloc(*(void *)(v0 + 3536));
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  uint64_t v15 = sub_A760();
  uint64_t v23 = sub_A970(v15, v16, v17, v18, v19, v20, v21, v22, v168);
  uint64_t v31 = sub_AAD8(v23, v24, v25, v26, v27, v28, v29, v30, v169, v187);
  uint64_t v39 = sub_A888(v31, v32, v33, v34, v35, v36, v37, v38, v170, v188, v205);
  uint64_t v47 = sub_A854(v39, v40, v41, v42, v43, v44, v45, v46, v171, v189, v206, v222);
  uint64_t v55 = sub_A84C(v47, v48, v49, v50, v51, v52, v53, v54, v172, v190, v207, v223, v238);
  uint64_t v63 = sub_A844(v55, v56, v57, v58, v59, v60, v61, v62, v173, v191, v208, v224, v239, v253);
  uint64_t v71 = sub_A83C(v63, v64, v65, v66, v67, v68, v69, v70, v174, v192, v209, v225, v240, v254, v267);
  uint64_t v79 = sub_A95C(v71, v72, v73, v74, v75, v76, v77, v78, v175, v193, v210, v226, v241, v255, v268, v280);
  uint64_t v87 = sub_A954(v79, v80, v81, v82, v83, v84, v85, v86, v176, v194, v211, v227, v242, v256, v269, v281, v292);
  uint64_t v95 = sub_A938(v87, v88, v89, v90, v91, v92, v93, v94, v177, v195, v212, v228, v243, v257, v270, v282, v293, v303);
  uint64_t v103 = sub_A930( v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v178,  v196,  v213,  v229,  v244,  v258,  v271,  v283,  v294,  v304,  v313);
  uint64_t v111 = sub_A928( v103,  v104,  v105,  v106,  v107,  v108,  v109,  v110,  v179,  v197,  v214,  v230,  v245,  v259,  v272,  v284,  v295,  v305,  v314,  v322);
  uint64_t v119 = sub_A920( v111,  v112,  v113,  v114,  v115,  v116,  v117,  v118,  v180,  v198,  v215,  v231,  v246,  v260,  v273,  v285,  v296,  v306,  v315,  v323,  v330);
  uint64_t v127 = sub_36374( v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v181,  v199,  v216,  v232,  v247,  v261,  v274,  v286,  v297,  v307,  v316,  v324,  v331,  v337);
  uint64_t v135 = sub_3636C( v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v182,  v200,  v217,  v233,  v248,  v262,  v275,  v287,  v298,  v308,  v317,  v325,  v332,  v338,  v343);
  uint64_t v143 = sub_36364( v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v183,  v201,  v218,  v234,  v249,  v263,  v276,  v288,  v299,  v309,  v318,  v326,  v333,  v339,  v344,  v348);
  uint64_t v151 = sub_363F0( v143,  v144,  v145,  v146,  v147,  v148,  v149,  v150,  v184,  v202,  v219,  v235,  v250,  v264,  v277,  v289,  v300,  v310,  v319,  v327,  v334,  v340,  v345,  v349,  v352);
  uint64_t v159 = sub_36430( v151,  v152,  v153,  v154,  v155,  v156,  v157,  v158,  v185,  v203,  v220,  v236,  v251,  v265,  v278,  v290,  v301,  v311,  v320,  v328,  v335,  v341,  v346,  v350,  v353,  v355);
  sub_36428( v159,  v160,  v161,  v162,  v163,  v164,  v165,  v166,  v186,  v204,  v221,  v237,  v252,  v266,  v279,  v291,  v302,  v312,  v321,  v329,  v336,  v342,  v347,  v351,  v354,  v356,  v357);
  sub_366B0();
  sub_366A8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

#error "32CEC: call analysis failed (funcsize=76)"
uint64_t sub_32D4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  sub_364AC();
  sub_36578();
  *(void *)(v0 + 3648) = v2;
  uint64_t v4 = sub_36900(v3);
  if (v1)
  {
    sub_367AC();
    uint64_t v5 = sub_36860();
    sub_36A94(v5, &qword_189D00);
  }

  else
  {
    sub_36A94(v4, &qword_189D00);
    sub_367AC();
  }

  sub_A964();
  return sub_363F8(v6, v7, v8);
}

uint64_t sub_32DC8()
{
  unint64_t v1 = 0xD000000000000010LL;
  id v2 = [*(id *)(v0 + 3648) catId];
  sub_36E70();
  sub_36AD8();
  sub_36534();
  sub_368F8();
  sub_36CB8();
  sub_36750();
  if ((sub_3666C((void *)(v0 + 2376)) & 1) != 0)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 2376));
    sub_36EC4();
LABEL_4:
    uint64_t v7 = 0xD00000000000005CLL;
    goto LABEL_6;
  }

  sub_36FDC();
  sub_3671C();
  uint64_t v3 = *(void *)(v0 + 2480);
  uint64_t v4 = *(void *)(v0 + 2488);
  sub_500C((void *)(v0 + 2456), v3);
  uint64_t v5 = v4;
  unint64_t v1 = 0xD000000000000010LL;
  char v6 = dispatch thunk of DeviceState.isPad.getter(v3, v5);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 2456));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 2416));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 2376));
  sub_36EC4();
  if ((v6 & 1) != 0) {
    goto LABEL_4;
  }
  uint64_t v7 = 0xD000000000000033LL;
LABEL_6:
  sub_37418(v7);
  sub_36CD0();
  sub_36598((void *)(v0 + 2496));
  if ((sub_3662C((void *)(v0 + 2536)) & 1) != 0)
  {
    sub_37050((void *)(v0 + 2536));
    unint64_t v8 = 0x8000000000140A90LL;
  }

  else
  {
    sub_36AE4();
    sub_36480();
    char v9 = sub_3664C((void *)(v0 + 2616));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 2616));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 2576));
    sub_37050((void *)(v0 + 2536));
    if ((v9 & 1) == 0) {
      unint64_t v1 = 0xD000000000000019LL;
    }
    unint64_t v8 = 0x8000000000144010LL;
    if ((v9 & 1) != 0) {
      unint64_t v8 = 0x8000000000140A90LL;
    }
  }

  *(void *)(v0 + 3664) = v8;
  *(void *)(v0 + 3656) = v1;
  uint64_t v10 = (void *)swift_task_alloc(dword_18B6EC);
  *(void *)(v0 + 367sub_D878(v0 + 2) = v10;
  uint64_t v11 = sub_3655C(v10, (uint64_t)sub_32FDC);
  return sub_363CC(v11, v12);
}

uint64_t sub_32FDC()
{
  v1[369] = v0;
  v1[370] = v2;
  v1[371] = v3;
  sub_364C8();
  *(void *)(v5 + 3680) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_33024()
{
  v0[461] = v0[370];
  unint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  v0[462] = v1;
  uint64_t v2 = sub_36408(v1, (uint64_t)sub_33064);
  return sub_36164(v2, v3);
}

uint64_t sub_33064()
{
  v1[372] = v0;
  v1[373] = v2;
  v1[374] = v3;
  sub_364C8();
  *(void *)(v5 + 3704) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_330AC()
{
  v0[464] = v0[373];
  unint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  v0[465] = v1;
  uint64_t v2 = sub_36540(v1, (uint64_t)sub_330EC);
  return sub_36164(v2, v3);
}

uint64_t sub_330EC()
{
  v1[375] = v0;
  v1[376] = v2;
  v1[377] = v3;
  sub_364C8();
  *(void *)(v5 + 3728) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_33134()
{
  unint64_t v1 = *(void *)(v0 + 3728);
  uint64_t v2 = *(void *)(v0 + 3008);
  uint64_t v3 = *(void *)(v0 + 3312);
  uint64_t v4 = *(void *)(v0 + 3296);
  uint64_t v5 = *(void *)(v0 + 3216);
  uint64_t v6 = *(void **)(v0 + 3208);
  String.toSpeakableString.getter(0xD000000000000036LL, 0x8000000000142730LL);
  sub_3720C((void *)(v3 + *(int *)(v4 + 20)));
  uint64_t v7 = (void *)(v3 + *(int *)(v4 + 24));
  *uint64_t v7 = 0xD000000000000036LL;
  v7[1] = 0x8000000000142730LL;
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = sub_363E8();
  getMedStatus(from:)(v9, v10, v11, v12, v13, v14);
  char v16 = v15;
  uint64_t v17 = sub_3652C();
  Date.init()(v17);
  sub_35414(v6, (SEL *)&selRef_matchingMeds);
  if (!v18) {
    goto LABEL_12;
  }
  sub_36C3C();
  if (v20)
  {
    if (v8 >= 0) {
      uint64_t v26 = v19;
    }
    else {
      uint64_t v26 = v8;
    }
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter(v26);
    if (v21) {
      goto LABEL_4;
    }
    goto LABEL_11;
  }

  uint64_t v21 = *(void *)(v19 + 16);
  if (!v21)
  {
LABEL_11:
    sub_249D4();
LABEL_12:
    uint64_t v64 = 0LL;
    uint64_t v65 = 0LL;
    goto LABEL_13;
  }

LABEL_4:
  sub_370C8(v21, (v8 & 0xC000000000000001LL) == 0);
  if ((v8 & 0xC000000000000001LL) != 0) {
    uint64_t v22 = sub_370B0();
  }
  else {
    uint64_t v22 = (uint64_t)sub_37388();
  }
  uint64_t v23 = (void *)v22;
  sub_249D4();
  sub_134BD8(v23);
  uint64_t v64 = v25;
  uint64_t v65 = v24;
LABEL_13:
  sub_35414(*(void **)(v0 + 3208), (SEL *)&selRef_matchingMeds);
  char v76 = v16;
  if (!v27)
  {
LABEL_24:
    unint64_t v62 = 0LL;
    uint64_t v63 = 0LL;
    goto LABEL_25;
  }

  sub_36C3C();
  if (v29)
  {
    if (v8 >= 0) {
      uint64_t v35 = v28;
    }
    else {
      uint64_t v35 = v8;
    }
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v35);
    if (v30) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }

  uint64_t v30 = *(void *)(v28 + 16);
  if (!v30)
  {
LABEL_23:
    sub_249D4();
    goto LABEL_24;
  }

LABEL_16:
  sub_370C8(v30, (v8 & 0xC000000000000001LL) == 0);
  if ((v8 & 0xC000000000000001LL) != 0) {
    uint64_t v31 = sub_370B0();
  }
  else {
    uint64_t v31 = (uint64_t)sub_37388();
  }
  uint64_t v32 = (void *)v31;
  sub_249D4();
  sub_134BCC(v32);
  unint64_t v62 = v34;
  uint64_t v63 = v33;
LABEL_25:
  if (v1) {
    unint64_t v36 = v1;
  }
  else {
    unint64_t v36 = 0xE500000000000000LL;
  }
  uint64_t v37 = 0x6E656B6154LL;
  if (v1) {
    uint64_t v37 = v2;
  }
  uint64_t v70 = v37;
  uint64_t v71 = v36;
  uint64_t v38 = *(void *)(v0 + 3704);
  uint64_t v39 = *(void *)(v0 + 3688);
  uint64_t v40 = *(void *)(v0 + 3680);
  uint64_t v74 = (void *)(v0 + 2176);
  uint64_t v72 = *(void *)(v0 + 3656);
  uint64_t v73 = *(void *)(v0 + 3664);
  uint64_t v75 = *(void **)(v0 + 3648);
  uint64_t v41 = *(void *)(v0 + 3344);
  uint64_t v42 = *(void *)(v0 + 3312);
  if (!v40) {
    uint64_t v39 = 0x646567676F4CLL;
  }
  uint64_t v66 = v39;
  if (v40) {
    uint64_t v43 = *(void *)(v0 + 3680);
  }
  else {
    uint64_t v43 = 0xE600000000000000LL;
  }
  uint64_t v67 = *(void *)(v0 + 3280);
  uint64_t v68 = *(void *)(v0 + 3288);
  uint64_t v44 = *(void *)(v0 + 3264);
  if (v38) {
    uint64_t v45 = *(void *)(v0 + 3712);
  }
  else {
    uint64_t v45 = 0x64657070696B53LL;
  }
  if (v38) {
    uint64_t v46 = *(void *)(v0 + 3704);
  }
  else {
    uint64_t v46 = 0xE700000000000000LL;
  }
  uint64_t v69 = *(void *)(v0 + 3216);
  sub_374DC(*(void *)(v0 + 3352));
  *(void *)(v0 + 2680) = &type metadata for WellnessFeatureFlagsKey;
  *(void *)(v0 + 2688) = sub_354B0();
  *(_BYTE *)(v0 + 2656) = 4;
  char v47 = isFeatureEnabled(_:)(v0 + 2656);
  sub_36E94();
  sub_35554(v42, v44, type metadata accessor for SnippetHeaderModel);
  sub_37150(v44);
  SpecificMedCompletedLogModel.init(medStatus:givenTime:requestedMedName:requestedMedSchedule:dosage:dosageUnit:url:sashBundleID:dontDisplayGranularTime:isSmartEnabled:loggedLabel:skippedLabel:takenLabel:snippetHeaderModel:)( v76 & 1,  v67,  v65,  v64,  v63,  v62,  0LL,  1,  v68,  0LL,  0LL,  v41,  v72,  v73,  0,  v47 & 1,  v66,  v43,  v45,  v46,  v70,  v71,  v44);
  sub_36878(v69 + 296);
  uint64_t v48 = *(void *)(v0 + 2280);
  uint64_t v49 = *(void *)(v0 + 2288);
  sub_500C((void *)(v0 + 2256), v48);
  uint64_t v50 = sub_370D4();
  *(void *)(v0 + 2200) = v50;
  sub_36F4C((unint64_t *)&qword_18A468, v51, type metadata accessor for WellnessSnippets);
  *(void *)(v0 + 2208) = v52;
  uint64_t v53 = sub_B76C(v74);
  sub_35554(v68, (uint64_t)v53, type metadata accessor for SpecificMedCompletedLogModel);
  swift_storeEnumTagMultiPayload(v53, v50, 13LL);
  uint64_t v54 = sub_494C(&qword_18A460);
  uint64_t v55 = sub_20308(v54, 40LL);
  *(_OWORD *)(v55 + 16) = xmmword_138BA0;
  *(void *)(v55 + 3sub_D878(v0 + 2) = v75;
  sub_3737C(v55, v56, v57);
  *(void *)(v0 + 3736) = v77;
  id v59 = v75;
  uint64_t v60 = (void *)swift_task_alloc(v58);
  *(void *)(v0 + 3744) = v60;
  *uint64_t v60 = v0;
  v60[1] = sub_33560;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)( v0 + 2696,  v74,  v77,  *(void *)(v0 + 3536),  v48,  v49);
}

  uint64_t v11 = 0LL;
LABEL_17:
  char v15 = getMeasurementUnit(from:)(v11);
  char v16 = sub_3652C();
  uint64_t v12 = Logger.wellness.unsafeMutableAddressor(v16);
  sub_A5DC(v12, (uint64_t)v58);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v17(v8, v12, v2);
  uint64_t v18 = swift_bridgeObjectRetain_n(v15, 2LL);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  uint64_t v20 = static os_log_type_t.debug.getter();
  uint64_t v21 = os_log_type_enabled(v19, v20);
  uint64_t v54 = (uint64_t (*)(char *, uint64_t, uint64_t))v17;
  if (v21)
  {
    uint64_t v22 = sub_A5E8(12LL);
    uint64_t v50 = v3;
    uint64_t v23 = (uint8_t *)v22;
    uint64_t v24 = sub_A5E8(32LL);
    uint64_t v52 = v2;
    uint64_t v25 = v24;
    v57[0] = v24;
    uint64_t v53 = a1;
    *(_DWORD *)uint64_t v23 = 136315138;
    uint64_t v51 = v12;
    uint64_t v26 = swift_bridgeObjectRetain(v15);
    uint64_t v27 = Array.description.getter(v26, &type metadata for String);
    uint64_t v29 = v28;
    sub_369F4();
    uint64_t v56 = sub_39178(v27, v29, v57);
    uint64_t v12 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v23 + 4, v23 + 12);
    sub_39B70();
    swift_bridgeObjectRelease(v29);
    _os_log_impl(&dword_0, v19, v20, "got identifiers: %s", v23, 0xCu);
    swift_arrayDestroy(v25, 1LL);
    uint64_t v30 = v25;
    uint64_t v2 = v52;
    sub_5050(v30);
    sub_5050((uint64_t)v23);

    uint64_t v6 = *(char **)(v50 + 8);
  }

  else
  {

    sub_39B70();
    uint64_t v6 = *(char **)(v3 + 8);
  }

  ((void (*)(char *, uint64_t))v6)(v8, v2);
  if (*(void *)(v15 + 16))
  {
    uint64_t v31 = *(void *)(v15 + 32);
    sub_1EB6C();
    sub_39BAC();
    sub_369F4();
    return v31;
  }

  uint64_t v32 = sub_369F4();
  if (!dispatch thunk of UsoEntity_common_Medication.dosage.getter(v32)) {
    goto LABEL_49;
  }
  uint64_t v11 = sub_39BA4();
  id result = sub_36EBC();
  if (!v11) {
    goto LABEL_49;
  }
  uint64_t v3 = v11 & 0xFFFFFFFFFFFFFF8LL;
  if (!((unint64_t)v11 >> 62))
  {
LABEL_48:
    sub_249D4();
LABEL_49:
    sub_39BAC();
    return 0LL;
  }

  sub_41920(v33, &qword_18AA78, v34, v35, v36, v37, v38, v39);
  sub_41978();
}

uint64_t sub_33560()
{
  return sub_A810();
}

#error "336C8: call analysis failed (funcsize=92)"
#error "33804: call analysis failed (funcsize=76)"
uint64_t sub_33864()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  sub_364AC();
  sub_36578();
  *(void *)(v0 + 3768) = v2;
  uint64_t v4 = sub_36900(v3);
  if (v1)
  {
    sub_367AC();
    uint64_t v5 = sub_36860();
    sub_36A94(v5, &qword_189D00);
  }

  else
  {
    sub_36A94(v4, &qword_189D00);
    sub_367AC();
  }

  sub_A964();
  return sub_363F8(v6, v7, v8);
}

uint64_t sub_338E0()
{
  id v2 = [*(id *)(v0 + 3768) catId];
  sub_36E70();

  uint64_t v3 = sub_37084();
  OutputGenerationManifest.responseViewId.setter(v3, v4);
  sub_368F8();
  sub_36AE4();
  sub_500C((void *)(v0 + 1856), *(void *)(v0 + 1880));
  uint64_t v5 = sub_37084();
  v6(v5);
  sub_500C((void *)(v0 + 1896), *(void *)(v0 + 1920));
  uint64_t v7 = sub_37084();
  if ((dispatch thunk of DeviceState.isPhone.getter(v7, v8) & 1) != 0)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 1896));
    sub_20300();
LABEL_4:
    unint64_t v14 = 0xD00000000000005CLL;
    unint64_t v15 = 0x8000000000144070LL;
    goto LABEL_6;
  }

  sub_36FD0();
  uint64_t v9 = *(void *)(v0 + 1960);
  uint64_t v10 = *(void *)(v0 + 1968);
  sub_500C((void *)(v0 + 1936), v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  uint64_t v11 = *(void *)(v0 + 2000);
  uint64_t v12 = *(void *)(v0 + 2008);
  sub_500C((void *)(v0 + 1976), v11);
  char v13 = dispatch thunk of DeviceState.isPad.getter(v11, v12);
  sub_36980();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 1896));
  sub_20300();
  if ((v13 & 1) != 0) {
    goto LABEL_4;
  }
  unint64_t v15 = 0x8000000000143FD0LL;
  unint64_t v14 = 0xD000000000000033LL;
LABEL_6:
  URL.init(string:)(v14, v15);
  uint64_t v16 = *(void *)(v0 + 3328);
  sub_374DC(*(void *)(v0 + 3336));
  uint64_t v17 = type metadata accessor for URL(0LL);
  int v18 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v16, 1LL, v17);
  uint64_t v19 = *(void *)(v0 + 3360);
  uint64_t v20 = *(void *)(v0 + 3328);
  uint64_t v21 = *(void *)(v0 + 3232);
  if (v18 == 1)
  {
    sub_279E0(*(void *)(v0 + 3328), &qword_189CF8);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v19, 1LL, 1LL, v21);
  }

  else
  {
    sub_59024(*(void *)(v0 + 3360));
    sub_D970(v20, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8LL));
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v19, 1LL, v21) != 1)
    {
      uint64_t v164 = *(void **)(v0 + 3208);
      (*(void (**)(void, void, void))(*(void *)(v0 + 3240) + 32LL))( *(void *)(v0 + 3256),  *(void *)(v0 + 3360),  *(void *)(v0 + 3232));
      *(void *)(v0 + 3168) = _swiftEmptyArrayStorage;
      sub_35414(v164, (SEL *)&selRef_matchingMeds);
      if (v165) {
        uint64_t v166 = v165;
      }
      else {
        uint64_t v166 = (uint64_t)_swiftEmptyArrayStorage;
      }
      if ((unint64_t)v166 >> 62)
      {
        if (v166 < 0) {
          uint64_t v190 = v166;
        }
        else {
          uint64_t v190 = v166 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v166);
        uint64_t v167 = _CocoaArrayWrapper.endIndex.getter(v190);
        sub_DA1C();
      }

      else
      {
        uint64_t v167 = *(void *)((char *)&dword_10 + (v166 & 0xFFFFFFFFFFFFF8LL));
      }

      if (v167)
      {
        uint64_t result = type metadata accessor for WellnessMedicationDialogObject(0LL);
        if (v167 < 1)
        {
          __break(1u);
          return result;
        }

        uint64_t v168 = 0LL;
        uint64_t v343 = *(void *)(v0 + 3240);
        unint64_t v169 = v166 & 0xC000000000000001LL;
        uint64_t v170 = v166;
        do
        {
          if (v169)
          {
            uint64_t v171 = sub_37104();
            id v173 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v171, v172);
          }

          else
          {
            id v173 = *(id *)(v166 + 8 * v168 + 32);
          }

          uint64_t v174 = v173;
          uint64_t v175 = *(void *)(v0 + 3248);
          (*(void (**)(uint64_t, void, void))(v343 + 16))( v175,  *(void *)(v0 + 3256),  *(void *)(v0 + 3232));
          id v176 = v174;
          sub_FAA40(v176, v175);
          uint64_t v178 = v177;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v177);
          unint64_t v180 = *(void *)((char *)&dword_10 + (*(void *)(v0 + 3168) & 0xFFFFFFFFFFFFFF8LL));
          unint64_t v179 = *(void *)((char *)&dword_18 + (*(void *)(v0 + 3168) & 0xFFFFFFFFFFFFFF8LL));
          if (v180 >= v179 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v179 > 1, v180 + 1, 1LL);
          }
          ++v168;
          uint64_t v181 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v180, v178);
          specialized Array._endMutation()(v181, v182, v183);

          uint64_t v166 = v170;
        }

        while (v167 != v168);
        sub_DA1C();
        uint64_t v184 = *(void **)(v0 + 3168);
      }

      else
      {
        sub_DA1C();
        uint64_t v184 = _swiftEmptyArrayStorage;
      }

      *(void *)(v0 + 3776) = v184;
      uint64_t v185 = *(void **)(v0 + 3208);
      sub_500C((void *)(*(void *)(v0 + 3216) + 144LL), *(void *)(*(void *)(v0 + 3216) + 168LL));
      uint64_t v186 = unk_18ECBC;
      id v187 = v185;
      sub_372CC();
      swift_bridgeObjectRetain(v184);
      uint64_t v188 = (void *)swift_task_alloc(v186);
      *(void *)(v0 + 3784) = v188;
      *uint64_t v188 = v0;
      v188[1] = sub_33EA8;
      sub_36DEC();
      __asm { BR              X8 }
    }
  }

  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 3568);
  uint64_t v23 = *(void *)(v0 + 3560);
  uint64_t v24 = *(void *)(v0 + 3432);
  uint64_t v25 = *(void *)(v0 + 3392);
  sub_279E0(*(void *)(v0 + 3360), &qword_189D00);
  sub_A5DC(v23, v0 + 2880);
  v22(v24, v23, v25);
  sub_A86C();
  os_log_type_t v26 = sub_A898();
  if (sub_A988(v26))
  {
    uint64_t v27 = (_WORD *)sub_232D0();
    sub_366C0(v27);
    sub_A940( &dword_0,  v28,  v29,  "Couldn't create actionAceCommandString while trying to create logMedConfirmationRejected_Dialog, returning GenericErrorFlow");
    sub_5050(v24);
  }

  uint64_t v30 = *(void **)(v0 + 3768);
  uint64_t v31 = *(void (**)(uint64_t))(v0 + 3576);
  uint64_t v32 = *(void *)(v0 + 3336);
  uint64_t v33 = *(void *)(v0 + 3216);

  uint64_t v34 = sub_37084();
  v31(v34);
  sub_36590((_OWORD *)(v33 + 64));
  sub_A178();
  sub_36748();

  sub_36784();
  sub_279E0(v32, &qword_189CF8);
  sub_370F4();
  sub_36280();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  uint64_t v35 = sub_A760();
  uint64_t v43 = sub_AAD8(v35, v36, v37, v38, v39, v40, v41, v42, v191, v207);
  uint64_t v51 = sub_A888(v43, v44, v45, v46, v47, v48, v49, v50, v192, v208, v223);
  uint64_t v59 = sub_A854(v51, v52, v53, v54, v55, v56, v57, v58, v193, v209, v224, v238);
  uint64_t v67 = sub_A84C(v59, v60, v61, v62, v63, v64, v65, v66, v194, v210, v225, v239, v252);
  uint64_t v75 = sub_A844(v67, v68, v69, v70, v71, v72, v73, v74, v195, v211, v226, v240, v253, v265);
  uint64_t v83 = sub_A83C(v75, v76, v77, v78, v79, v80, v81, v82, v196, v212, v227, v241, v254, v266, v277);
  uint64_t v91 = sub_A95C(v83, v84, v85, v86, v87, v88, v89, v90, v197, v213, v228, v242, v255, v267, v278, v288);
  uint64_t v99 = sub_A954(v91, v92, v93, v94, v95, v96, v97, v98, v198, v214, v229, v243, v256, v268, v279, v289, v298);
  uint64_t v107 = sub_A938( v99,  v100,  v101,  v102,  v103,  v104,  v105,  v106,  v199,  v215,  v230,  v244,  v257,  v269,  v280,  v290,  v299,  v307);
  uint64_t v115 = sub_A930( v107,  v108,  v109,  v110,  v111,  v112,  v113,  v114,  v200,  v216,  v231,  v245,  v258,  v270,  v281,  v291,  v300,  v308,  v315);
  uint64_t v123 = sub_A928( v115,  v116,  v117,  v118,  v119,  v120,  v121,  v122,  v201,  v217,  v232,  v246,  v259,  v271,  v282,  v292,  v301,  v309,  v316,  v322);
  uint64_t v131 = sub_A920( v123,  v124,  v125,  v126,  v127,  v128,  v129,  v130,  v202,  v218,  v233,  v247,  v260,  v272,  v283,  v293,  v302,  v310,  v317,  v323,  v328);
  uint64_t v139 = sub_36374( v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v203,  v219,  v234,  v248,  v261,  v273,  v284,  v294,  v303,  v311,  v318,  v324,  v329,  v333);
  uint64_t v147 = sub_3636C( v139,  v140,  v141,  v142,  v143,  v144,  v145,  v146,  v204,  v220,  v235,  v249,  v262,  v274,  v285,  v295,  v304,  v312,  v319,  v325,  v330,  v334,  v337);
  uint64_t v155 = sub_36364( v147,  v148,  v149,  v150,  v151,  v152,  v153,  v154,  v205,  v221,  v236,  v250,  v263,  v275,  v286,  v296,  v305,  v313,  v320,  v326,  v331,  v335,  v338,  v340);
  sub_363F0( v155,  v156,  v157,  v158,  v159,  v160,  v161,  v162,  v206,  v222,  v237,  v251,  v264,  v276,  v287,  v297,  v306,  v314,  v321,  v327,  v332,  v336,  v339,  v341,  v342);
  sub_36814();
  sub_3680C();
  sub_36804();
  sub_367FC();
  sub_A918();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_33EA8(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 3784));
  if (v1)
  {
    sub_36860();
    sub_6D64();
  }

  else
  {
    sub_6D64();
    *(void *)(v4 + 379sub_D878(v0 + 2) = a1;
  }

  sub_A964();
  return swift_task_switch(v5, v6, v7);
}

#error "34040: call analysis failed (funcsize=94)"
#error "341F8: call analysis failed (funcsize=106)"
uint64_t sub_34258(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v3 = *(void *)(*(void *)v2 + 3824LL);
  *(void *)(*(void *)v2 + 3832LL) = a1;
  sub_36900(v3);
  sub_37034();
  if (v1) {
    sub_36860();
  }
  sub_A964();
  return sub_A810();
}

uint64_t sub_342C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (void (*)(uint64_t, uint64_t))v8[444];
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v8[443];
  uint64_t v11 = v8[438];
  uint64_t v12 = v8[437];
  uint64_t v13 = v8[435];
  sub_374FC(a1, a2, a3, a4, a5, a6, a7, a8, v8[402], (uint64_t)(v8 + 162), (uint64_t)(v8 + 202), v32, v33);
  uint64_t v14 = v10(v12, v11, v13);
  sub_369D4(v14, (uint64_t)sub_A633C);
  v9(v11, v13);
  uint64_t v15 = sub_368F8();
  id v16 = sub_373D8(v15, "catId");
  sub_36E70();
  sub_36AD8();
  sub_36534();
  sub_36FD0();
  sub_500C(v8 + 262, v8[265]);
  sub_36880();
  if ((sub_3666C(v8 + 257) & 1) != 0)
  {
    sub_36980();
LABEL_4:
    unint64_t v20 = 0xD000000000000010LL;
    uint64_t v21 = 0xD00000000000005CLL;
    goto LABEL_6;
  }

  sub_36CD0();
  sub_500C(v8 + 227, v8[230]);
  sub_36890();
  uint64_t v17 = v8[215];
  uint64_t v18 = v8[216];
  sub_500C(v8 + 212, v17);
  char v19 = dispatch thunk of DeviceState.isPad.getter(v17, v18);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v8 + 212);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v8 + 227);
  sub_36980();
  if ((v19 & 1) != 0) {
    goto LABEL_4;
  }
  unint64_t v20 = 0xD000000000000010LL;
  uint64_t v21 = 0xD000000000000033LL;
LABEL_6:
  sub_37418(v21);
  sub_36CD0();
  uint64_t v22 = v8[205];
  uint64_t v23 = v8[206];
  sub_500C(v31, v22);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
  if ((sub_3662C(v30) & 1) != 0)
  {
    sub_37050(v30);
    unint64_t v24 = 0x8000000000140A90LL;
  }

  else
  {
    sub_36AE4();
    sub_36480();
    char v25 = sub_3664C(v8 + 172);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v8 + 172);
    sub_20300();
    sub_37050(v30);
    if ((v25 & 1) == 0) {
      unint64_t v20 = 0xD000000000000019LL;
    }
    unint64_t v24 = 0x8000000000144010LL;
    if ((v25 & 1) != 0) {
      unint64_t v24 = 0x8000000000140A90LL;
    }
  }

  v8[481] = v24;
  v8[480] = v20;
  os_log_type_t v26 = (void *)swift_task_alloc(dword_18B6EC);
  v8[482] = v26;
  uint64_t v27 = sub_3655C(v26, (uint64_t)sub_34574);
  return sub_5E408(v27, v28);
}

uint64_t sub_34574()
{
  v1[378] = v0;
  v1[379] = v2;
  v1[380] = v3;
  sub_364C8();
  *(void *)(v5 + 3864) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_345BC()
{
  v0[484] = v0[379];
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  v0[485] = v1;
  uint64_t v2 = sub_36408(v1, (uint64_t)sub_345FC);
  return sub_36164(v2, v3);
}

uint64_t sub_345FC()
{
  v1[381] = v0;
  v1[382] = v2;
  v1[383] = v3;
  sub_364C8();
  *(void *)(v5 + 3888) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_34644()
{
  v0[487] = v0[382];
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  v0[488] = v1;
  uint64_t v2 = sub_36540(v1, (uint64_t)sub_34684);
  return sub_36164(v2, v3);
}

uint64_t sub_34684()
{
  v1[384] = v0;
  v1[385] = v2;
  v1[386] = v3;
  sub_364C8();
  *(void *)(v5 + 391sub_D878(v0 + 2) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_346CC()
{
  v0[490] = v0[385];
  uint64_t v1 = (void *)swift_task_alloc(dword_18B6EC);
  v0[491] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_34718;
  unint64_t v2 = sub_368E0();
  return sub_36164(v2, v3);
}

uint64_t sub_34718(uint64_t a1)
{
  uint64_t v4 = v1[491];
  uint64_t v5 = *v2;
  *uint64_t v6 = v5;
  v1[492] = v7;
  swift_task_dealloc(v4);
  v1[493] = a1;
  uint64_t v8 = (void *)swift_task_alloc(dword_18B704);
  v1[494] = v8;
  *uint64_t v8 = v5;
  v8[1] = sub_3478C;
  return sub_366DC(0xD000000000000036LL, 0x8000000000142730LL);
}

uint64_t sub_3478C()
{
  v1[387] = v0;
  v1[388] = v2;
  v1[389] = v3;
  sub_364C8();
  *(void *)(v5 + 3960) = v4;
  swift_task_dealloc(v6);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_347D4()
{
  uint64_t v1 = *(void *)(v0 + 3896);
  uint64_t v2 = *(void *)(v0 + 3888);
  uint64_t v3 = *(void *)(v0 + 3872);
  uint64_t v4 = *(void *)(v0 + 3864);
  if (!v4) {
    uint64_t v3 = 0x646567676F4CLL;
  }
  uint64_t v61 = v3;
  unint64_t v5 = 0xE600000000000000LL;
  uint64_t v59 = *(void *)(v0 + 3840);
  uint64_t v60 = *(void *)(v0 + 3848);
  uint64_t v62 = *(void **)(v0 + 3832);
  char v58 = *(_BYTE *)(v0 + 3130);
  uint64_t v6 = *(void *)(v0 + 3344);
  uint64_t v7 = *(void *)(v0 + 3320);
  if (v4) {
    unint64_t v5 = *(void *)(v0 + 3864);
  }
  uint64_t v57 = v5;
  if (!v2) {
    uint64_t v1 = 0x64657070696B53LL;
  }
  uint64_t v56 = v1;
  uint64_t v8 = *(void *)(v0 + 3304);
  uint64_t v9 = *(void *)(v0 + 3296);
  unint64_t v10 = 0xE700000000000000LL;
  if (v2) {
    unint64_t v10 = *(void *)(v0 + 3888);
  }
  uint64_t v55 = v10;
  sub_37430();
  unint64_t v17 = v16 & 0xFFFF00000000FFFFLL | 0x6E656B0000LL;
  if (v11) {
    unint64_t v18 = v17;
  }
  else {
    unint64_t v18 = v14;
  }
  unint64_t v19 = 0xE500000000000000LL;
  if (!v11) {
    unint64_t v19 = v15;
  }
  uint64_t v52 = v19;
  uint64_t v53 = v18;
  uint64_t v20 = *(void *)(v0 + 3272);
  uint64_t v21 = *(void *)(v0 + 3264);
  if (!v13) {
    unint64_t v12 = 0xD000000000000019LL;
  }
  uint64_t v50 = v12;
  unint64_t v22 = 0x8000000000144050LL;
  uint64_t v51 = *(void *)(v0 + 3224);
  uint64_t v54 = *(void *)(v0 + 3216);
  if (v13) {
    unint64_t v22 = v13;
  }
  uint64_t v49 = v22;
  sub_37424();
  uint64_t v27 = v26 | 0x6974616369640000LL;
  if (v23) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = v25;
  }
  if (v23) {
    unint64_t v29 = 0xEB00000000736E6FLL;
  }
  else {
    unint64_t v29 = v24;
  }
  String.toSpeakableString.getter(v28, v29);
  sub_249D4();
  sub_3720C((void *)(v8 + *(int *)(v9 + 20)));
  sub_3720C((void *)(v8 + *(int *)(v9 + 24)));
  Date.init()(v30);
  sub_35468(v7, v6);
  *(void *)(v0 + 1440) = &type metadata for WellnessFeatureFlagsKey;
  *(void *)(v0 + 1448) = sub_354B0();
  *(_BYTE *)(v0 + 1416) = 4;
  char v31 = isFeatureEnabled(_:)(v0 + 1416);
  sub_36E94();
  sub_35554(v8, v21, type metadata accessor for SnippetHeaderModel);
  sub_37150(v21);
  GenericMedCompletedLogModel.init(medStatus:givenTime:url:dontDisplayGranularTime:sashBundleID:isSmartEnabled:loggedLabel:skippedLabel:takenLabel:allScheduledMedicationsLabel:snippetHeaderModel:)( v58,  v20,  v6,  0,  v59,  v60,  v31 & 1,  v61,  v51,  v57,  v56,  v55,  v53,  v52,  v50,  v49,  v21);
  sub_36878(v54 + 296);
  sub_500C((void *)(v0 + 1496), *(void *)(v0 + 1520));
  *(void *)(v0 + 1560) = sub_370D4();
  sub_36F4C((unint64_t *)&qword_18A468, v32, type metadata accessor for WellnessSnippets);
  *(void *)(v0 + 1568) = v33;
  uint64_t v34 = sub_B76C((void *)(v0 + 1536));
  sub_370A4((uint64_t)v34, v35, type metadata accessor for GenericMedCompletedLogModel);
  sub_37064((uint64_t)v34);
  uint64_t v36 = sub_494C(&qword_18A460);
  uint64_t v37 = sub_20308(v36, 40LL);
  *(_OWORD *)(v37 + 16) = xmmword_138BA0;
  *(void *)(v37 + 3sub_D878(v0 + 2) = v62;
  sub_3737C(v37, v38, v39);
  *(void *)(v0 + 3968) = v63;
  id v40 = v62;
  uint64_t v41 = (void *)sub_3703C();
  *(void *)(v0 + 3976) = v41;
  void *v41 = v0;
  v41[1] = sub_34B14;
  sub_36F98();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)( v42,  v43,  v44,  v45,  v46,  v47);
}

uint64_t sub_34B14()
{
  return sub_A810();
}

#error "34C98: call analysis failed (funcsize=99)"
#error "34DD4: call analysis failed (funcsize=76)"
#error "34F10: call analysis failed (funcsize=76)"
uint64_t sub_34F70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(sub_34F88, 0LL, 0LL);
}

uint64_t sub_34F88()
{
  return sub_202A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_34FB4(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = v6 - v5;
  uint64_t v8 = sub_ABF4();
  uint64_t v47 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_6D44();
  uint64_t v11 = v10 - v9;
  sub_494C(&qword_189D00);
  sub_6D20();
  uint64_t v13 = __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v46 - v16;
  uint64_t v18 = *a2;
  if ((unint64_t)v18 >> 62)
  {
    if (v18 < 0) {
      uint64_t v38 = v18;
    }
    else {
      uint64_t v38 = v18 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v18);
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v38);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v19 = *(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v20 = (int *)type metadata accessor for WellnessLoggingLogGenericMedRejectedConfirmationResultSetParameters(0LL);
  uint64_t v21 = a1 + v20[14];
  *(double *)uint64_t v21 = (double)v19;
  *(_BYTE *)(v21 + 8) = 0;
  uint64_t v22 = a1 + v20[12];
  sub_279E0(v22, &qword_189D00);
  sub_36F38(v22, 1LL);
  uint64_t v23 = swift_retain();
  getMedStatus(from:)(v23, v24, v25, v26, v27, v28);
  LOBYTE(v2sub_D878(v0 + 2) = v29;
  swift_release();
  if ((v22 & 1) != 0)
  {
    uint64_t v30 = 0x6E656B6154LL;
    unint64_t v31 = 0xE500000000000000LL;
  }

  else
  {
    uint64_t v30 = 0x64657070696B53LL;
    unint64_t v31 = 0xE700000000000000LL;
  }

  String.toSpeakableString.getter(v30, v31);
  sub_36F38((uint64_t)v17, 0LL);
  uint64_t v32 = sub_A384((uint64_t)v17, a1 + v20[15]);
  sub_37350(v32, (SEL *)&selRef_matchingMeds);
  if (!v33) {
    goto LABEL_21;
  }
  uint64_t v34 = v33;
  if (!((unint64_t)v33 >> 62))
  {
LABEL_20:
    uint64_t v33 = sub_369F4();
    goto LABEL_21;
  }

  if (v33 >= 0) {
    v33 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  if (!_CocoaArrayWrapper.endIndex.getter(v33)) {
    goto LABEL_20;
  }
LABEL_9:
  sub_398E0(0LL, (v34 & 0xC000000000000001LL) == 0, v34);
  if ((v34 & 0xC000000000000001LL) != 0) {
    id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v34);
  }
  else {
    id v35 = *(id *)(v34 + 32);
  }
  uint64_t v36 = v35;
  sub_369F4();
  uint64_t v33 = sub_1141DC(v36);
  if (v37)
  {
    String.toSpeakableString.getter(v33, v37);
    sub_369F4();
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v15, v11, v8);
LABEL_23:
    uint64_t v40 = 0LL;
    goto LABEL_24;
  }

LABEL_21:
  Date.init()(v33);
  uint64_t v39 = sub_A8E4();
  uint64_t v40 = 1LL;
  sub_A66C(v7, 0LL, v41, v39);
  uint64_t v42 = sub_91C24(v7);
  uint64_t v44 = v43;
  sub_279E0(v7, &qword_189CE8);
  if (v44)
  {
    String.toSpeakableString.getter(v42, v44);
    sub_369F4();
    goto LABEL_23;
  }

  sub_41920(v45, &qword_18AA78, v47, v48, v49, v50, v51, v52);
  sub_41978();
}

  sub_D8FC();
}

    swift_release();
  }

LABEL_24:
  sub_36F38((uint64_t)v15, v40);
  return sub_A384((uint64_t)v15, a1 + v20[11]);
}

      uint64_t v95 = v104;
      uint64_t v36 = sub_494C(&qword_18AFA8);
      uint64_t v37 = (uint64_t)v95;
LABEL_25:
      uint64_t v57 = 3LL;
      return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v37, v57, 3LL, v36);
    }

    uint64_t v91 = *(void (**)(os_log_s *, char *, uint64_t))(v19 + 32);
    v91(v21, v17, v18);
    uint64_t v92 = sub_494C(&qword_18AFA8);
    uint64_t v93 = v104;
    uint64_t v94 = (os_log_s *)&v104[*(int *)(v92 + 48)];
    *uint64_t v104 = v74;
    v91(v94, (char *)v21, v18);
    uint64_t v37 = (uint64_t)v93;
    uint64_t v57 = 0LL;
    uint64_t v36 = v92;
  }

  else
  {
    char v58 = Logger.wellness.unsafeMutableAddressor(v41);
    sub_3C69C(v58);
    uint64_t v60 = v100;
    uint64_t v59 = v101;
    uint64_t v61 = v102;
    uint64_t v62 = (*(uint64_t (**)(char *, os_log_s *, uint64_t))(v101 + 16))(v100, v21, v102);
    uint64_t v63 = (void *)Logger.logObject.getter(v62);
    uint64_t v64 = static os_log_type_t.debug.getter();
    if (sub_3C758(v64))
    {
      uint64_t v65 = sub_A5E8(12LL);
      uint64_t v66 = sub_A5E8(32LL);
      uint64_t v105 = v66;
      uint64_t v67 = sub_3C768(4.8149e-34);
      uint64_t v69 = v68;
      uint64_t v70 = sub_3C7A0(v67, v68);
      sub_3C6B0(v70);
      swift_bridgeObjectRelease(v69);
      sub_3C718(&dword_0, v71, v72, "Punchout not supported for %s");
      sub_3C72C();
      sub_5050(v66);
      sub_5050(v65);
    }

    (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v61);
    uint64_t v73 = v104;
    uint64_t v36 = sub_494C(&qword_18AFA8);
    uint64_t v37 = (uint64_t)v73;
    uint64_t v57 = 2LL;
  }

  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v37, v57, 3LL, v36);
}

        uint64_t v32 = sub_37034();
        goto LABEL_25;
      }
    }

    else if (*(void *)(v51 + 16))
    {
      goto LABEL_21;
    }

    sub_37034();
    uint64_t v32 = sub_249D4();
  }

  uint64_t v25 = 1LL;
LABEL_25:
  uint64_t v27 = v17 > 0;
  char v29 = v13 < 1 || v15 < 1;
  if (v18) {
    uint64_t v13 = v15;
  }
  sub_41A40(v0[36], v25);
  uint64_t v30 = *(_BYTE *)(v12 + 16);
  unint64_t v31 = (void *)swift_task_alloc(dword_190C04);
  v0[39] = v31;
  *unint64_t v31 = v0;
  v31[1] = sub_6074C;
  return sub_131AF4(v0[36], v30, COERCE__INT64((double)v13), 0, v29, v27);
}

  sub_D8FC();
}

uint64_t sub_352C4()
{
  return v0;
}

uint64_t sub_3533C()
{
  return swift_deallocClassInstance(v0, 401LL, 7LL);
}

uint64_t type metadata accessor for GenericMedLoggingFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC18WellnessFlowPlugin21GenericMedLoggingFlow);
}

uint64_t sub_3537C(uint64_t a1, uint64_t a2)
{
  return sub_2A324(a1, a2);
}

uint64_t sub_3539C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18ABFC);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1FF58;
  return sub_2A394(a1);
}

uint64_t sub_353F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for GenericMedLoggingFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

void sub_35414(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = type metadata accessor for MatchedMedName(0LL);
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);
  }

  sub_A890();
}

uint64_t sub_35468(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_189CF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_354B0()
{
  unint64_t result = qword_18AE00;
  if (!qword_18AE00)
  {
    unint64_t result = swift_getWitnessTable(&unk_13F3F0, &type metadata for WellnessFeatureFlagsKey);
    atomic_store(result, &qword_18AE00);
  }

  return result;
}

uint64_t sub_354EC()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_35510()
{
  uint64_t v0 = swift_task_alloc(dword_18AE0C);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

void sub_35554(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  sub_A890();
}

uint64_t sub_35594()
{
  uint64_t v0 = swift_task_alloc(dword_18AE24);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_34F70(v2, v3);
}

uint64_t sub_355D8()
{
  uint64_t v0 = swift_task_alloc(dword_18AE34);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

uint64_t sub_3561C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  int v11 = a9 >> 6;
  if (v11 != 1)
  {
    if (v11) {
      return result;
    }
    swift_bridgeObjectRelease(a4);
    a3 = a8;
  }

  swift_bridgeObjectRelease(a2);
  return swift_bridgeObjectRelease(a3);
}

unint64_t sub_35684()
{
  unint64_t result = qword_18AE58;
  if (!qword_18AE58)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_18AE58);
  }

  return result;
}

uint64_t sub_356C0()
{
  uint64_t v0 = swift_task_alloc(dword_18AE64);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

uint64_t sub_35704()
{
  uint64_t v0 = swift_task_alloc(dword_18AE74);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

uint64_t sub_35748()
{
  uint64_t v0 = swift_task_alloc(dword_18AE84);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

uint64_t sub_3578C()
{
  uint64_t v0 = swift_task_alloc(dword_18AE94);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

uint64_t sub_357D0(char a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v16 = type metadata accessor for ResponseFactory(0LL);
  unint64_t v17 = &protocol witness table for ResponseFactory;
  *(void *)&__int128 v15 = a6;
  *(_BYTE *)(a7 + 16) = a1;
  *(void *)(a7 + 24) = a2;
  memcpy((void *)(a7 + 32), a3, 0xA0uLL);
  *(void *)(a7 + 19sub_D878(v0 + 2) = a4;
  *(void *)(a7 + 200) = a5;
  sub_20004(&v15, a7 + 208);
  return a7;
}

void sub_3586C(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_B64C(a2);
    atomic_store(sub_B7EC(v3), a1);
  }

  sub_A890();
}

uint64_t sub_358A0()
{
  uint64_t v0 = swift_task_alloc(dword_18AEBC);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

uint64_t sub_358E4( uint64_t a1, uint64_t a2, char a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v19 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v20 = &protocol witness table for ResponseFactory;
  *(void *)&__int128 v18 = a8;
  *(void *)(a9 + 16) = a1;
  *(void *)(a9 + 24) = a2;
  swift_bridgeObjectRelease(0LL);
  *(_BYTE *)(a9 + 3sub_D878(v0 + 2) = a3;
  *(void *)(a9 + 40) = a4;
  memcpy((void *)(a9 + 48), a5, 0xA0uLL);
  *(void *)(a9 + 208) = a6;
  *(void *)(a9 + sub_20004(v5, v1 + 216) = a7;
  sub_20004(&v18, a9 + 224);
  return a9;
}

uint64_t sub_3599C()
{
  uint64_t v0 = swift_task_alloc(dword_18AED4);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

uint64_t sub_359E0()
{
  uint64_t v0 = swift_task_alloc(dword_18AEE4);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

uint64_t sub_35A24()
{
  uint64_t v0 = swift_task_alloc(dword_18AEF4);
  uint64_t v1 = (void *)sub_36A28(v0);
  uint64_t v2 = sub_3637C(v1);
  return sub_310E8(v2, v3);
}

void sub_35A68(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v4 = a3(a2);
    atomic_store(sub_B7EC(v4), a1);
  }

  sub_A890();
}

void *sub_35A9C(const void *a1, void *a2)
{
  return a2;
}

uint64_t sub_35AD8()
{
  return swift_deallocObject(v0, 216LL, 7LL);
}

uint64_t sub_35B4C()
{
  uint64_t v2 = v0[1450];
  uint64_t v3 = v0[1403];
  *(void *)(v1 - 248) = v0[1404];
  *(void *)(v1 - 240) = v3;
  uint64_t v4 = v0[1401];
  *(void *)(v1 - 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0[1402];
  *(void *)(v1 - 224) = v4;
  uint64_t v5 = v0[1397];
  *(void *)(v1 - sub_20004(v5, v1 + 216) = v0[1400];
  *(void *)(v1 - 208) = v5;
  uint64_t v6 = v0[1393];
  *(void *)(v1 - 200) = v0[1396];
  *(void *)(v1 - 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v6;
  uint64_t v7 = v0[1391];
  *(void *)(v1 - 184) = v0[1392];
  *(void *)(v1 - sub_20004(v6, v1 + 176) = v7;
  uint64_t v8 = v0[1389];
  *(void *)(v1 - 168) = v0[1390];
  *(void *)(v1 - 160) = v8;
  uint64_t v9 = v0[1385];
  *(void *)(v1 - 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0[1387];
  *(void *)(v1 - 144) = v9;
  uint64_t v10 = v0[1383];
  *(void *)(v1 - 136) = v0[1384];
  *(void *)(v1 - 128) = v10;
  *(void *)(v1 - 120) = v0[1382];
  return swift_task_dealloc(v2);
}

uint64_t sub_35CA0()
{
  uint64_t v2 = v0[1450];
  uint64_t v3 = v0[1405];
  *(void *)(v1 - 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0[1406];
  *(void *)(v1 - 224) = v3;
  uint64_t v4 = v0[1403];
  *(void *)(v1 - sub_20004(v5, v1 + 216) = v0[1404];
  *(void *)(v1 - 208) = v4;
  uint64_t v5 = v0[1401];
  *(void *)(v1 - 200) = v0[1402];
  *(void *)(v1 - 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v5;
  uint64_t v6 = v0[1397];
  *(void *)(v1 - 184) = v0[1400];
  *(void *)(v1 - sub_20004(v6, v1 + 176) = v6;
  uint64_t v7 = v0[1393];
  *(void *)(v1 - 168) = v0[1396];
  *(void *)(v1 - 160) = v7;
  uint64_t v8 = v0[1391];
  *(void *)(v1 - 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0[1392];
  *(void *)(v1 - 144) = v8;
  uint64_t v9 = v0[1389];
  *(void *)(v1 - 136) = v0[1390];
  *(void *)(v1 - 128) = v9;
  uint64_t v10 = v0[1385];
  *(void *)(v1 - 120) = v0[1387];
  *(void *)(v1 - 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v10;
  uint64_t v11 = v0[1383];
  *(void *)(v1 - 104) = v0[1384];
  *(void *)(v1 - 96) = v11;
  *(void *)(v1 - 88) = v0[1382];
  return swift_task_dealloc(v2);
}

uint64_t sub_35DF4()
{
  uint64_t v2 = v0[1450];
  uint64_t v3 = v0[1400];
  *(void *)(v1 - 256) = v0[1401];
  *(void *)(v1 - 248) = v3;
  uint64_t v4 = v0[1396];
  *(void *)(v1 - 240) = v0[1397];
  *(void *)(v1 - 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v4;
  uint64_t v5 = v0[1392];
  *(void *)(v1 - 224) = v0[1393];
  *(void *)(v1 - sub_20004(v5, v1 + 216) = v5;
  uint64_t v6 = v0[1390];
  *(void *)(v1 - 208) = v0[1391];
  *(void *)(v1 - 200) = v6;
  uint64_t v7 = v0[1387];
  *(void *)(v1 - 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0[1389];
  *(void *)(v1 - 184) = v7;
  uint64_t v8 = v0[1384];
  *(void *)(v1 - sub_20004(v6, v1 + 176) = v0[1385];
  *(void *)(v1 - 168) = v8;
  uint64_t v9 = v0[1382];
  *(void *)(v1 - 160) = v0[1383];
  *(void *)(v1 - 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v9;
  return swift_task_dealloc(v2);
}

uint64_t sub_35F48()
{
  uint64_t v2 = v0[442];
  uint64_t v3 = v0[408];
  *(void *)(v1 - 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0[409];
  *(void *)(v1 - 104) = v3;
  uint64_t v4 = v0[406];
  *(void *)(v1 - 96) = v0[407];
  *(void *)(v1 - 88) = v4;
  *(void *)(v1 - 80) = v0[403];
  return swift_task_dealloc(v2);
}

uint64_t sub_35FF4()
{
  uint64_t v2 = v0[1450];
  uint64_t v3 = v0[1403];
  *(void *)(v1 - 256) = v0[1404];
  *(void *)(v1 - 248) = v3;
  uint64_t v4 = v0[1401];
  *(void *)(v1 - 240) = v0[1402];
  *(void *)(v1 - 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v4;
  uint64_t v5 = v0[1397];
  *(void *)(v1 - 224) = v0[1400];
  *(void *)(v1 - sub_20004(v5, v1 + 216) = v5;
  uint64_t v6 = v0[1393];
  *(void *)(v1 - 208) = v0[1396];
  *(void *)(v1 - 200) = v6;
  uint64_t v7 = v0[1391];
  *(void *)(v1 - 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0[1392];
  *(void *)(v1 - 184) = v7;
  uint64_t v8 = v0[1389];
  *(void *)(v1 - sub_20004(v6, v1 + 176) = v0[1390];
  *(void *)(v1 - 168) = v8;
  uint64_t v9 = v0[1385];
  *(void *)(v1 - 160) = v0[1387];
  *(void *)(v1 - 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v9;
  uint64_t v10 = v0[1383];
  *(void *)(v1 - 144) = v0[1384];
  *(void *)(v1 - 136) = v10;
  *(void *)(v1 - 128) = v0[1382];
  return swift_task_dealloc(v2);
}

uint64_t sub_36148(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_36164(uint64_t a1, uint64_t a2)
{
  return sub_5E408(a1, a2);
}

uint64_t sub_36170()
{
  return v3(v0, v1, v2);
}

  ;
}

uint64_t sub_3619C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_911B0(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_361B8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_361D4()
{
  uint64_t v2 = v0[442];
  uint64_t v3 = v0[406];
  *(void *)(v1 - 144) = v0[407];
  *(void *)(v1 - 136) = v3;
  *(void *)(v1 - 128) = v0[403];
  return swift_task_dealloc(v2);
}

uint64_t sub_36280()
{
  uint64_t v2 = v0[442];
  uint64_t v3 = v0[408];
  *(void *)(v1 - 120) = v0[409];
  *(void *)(v1 - 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v3;
  uint64_t v4 = v0[406];
  *(void *)(v1 - 104) = v0[407];
  *(void *)(v1 - 96) = v4;
  *(void *)(v1 - 88) = v0[403];
  return swift_task_dealloc(v2);
}

uint64_t sub_3632C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_36348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_3635C()
{
  return sub_A5E8(2LL);
}

uint64_t sub_36364( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  return swift_task_dealloc(a24);
}

uint64_t sub_3636C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  return swift_task_dealloc(a23);
}

uint64_t sub_36374( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  return swift_task_dealloc(a22);
}

uint64_t sub_3637C(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_36390(uint64_t a1)
{
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_363A4(_WORD *a1)
{
  *(void *)(v2 - 136) = 0LL;
  *(void *)(v2 - 128) = 0LL;
  *a1 = 0;
  *(void *)(v2 - 144) = a1 + 1;
  return sub_D9904(v1, v2 - 144, v2 - 136, v2 - 128);
}

uint64_t sub_363CC(uint64_t a1, uint64_t a2)
{
  return sub_5E408(a1, a2);
}

uint64_t sub_363E8()
{
  return swift_retain(v0);
}

uint64_t sub_363F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  return swift_task_dealloc(a25);
}

uint64_t sub_363F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_36408@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return 0x64657070696B73LL;
}

uint64_t sub_36428( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  return swift_task_dealloc(a27);
}

uint64_t sub_36430( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  return swift_task_dealloc(a26);
}

uint64_t sub_36438(__int128 *a1)
{
  *(void *)(v4 - 168) = *(void *)(v3 + 11192);
  *(void *)(v4 - 160) = *(void *)(v3 + 11184);
  *(void *)(v4 - 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v1;
  sub_20004(a1, v2);
  return type metadata accessor for SimpleOutputFlowAsync(0LL);
}

  ;
}

uint64_t sub_36478( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  return swift_task_dealloc(a28);
}

uint64_t sub_36480()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

void sub_364AC()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_364BC(uint64_t a1)
{
  return swift_allocObject(a1, 56LL, 7LL);
}

void sub_364C8()
{
  *uint64_t v0 = *v1;
}

uint64_t sub_364D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39)
{
  return swift_task_dealloc(a39);
}

uint64_t sub_364DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38)
{
  return swift_task_dealloc(a38);
}

uint64_t sub_364E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  return swift_task_dealloc(a37);
}

uint64_t sub_364EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
  return swift_task_dealloc(a36);
}

uint64_t sub_364F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35)
{
  return swift_task_dealloc(a35);
}

uint64_t sub_364FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34)
{
  return swift_task_dealloc(a34);
}

uint64_t sub_36504( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33)
{
  return swift_task_dealloc(a33);
}

uint64_t sub_3650C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
  return swift_task_dealloc(a32);
}

uint64_t sub_36514( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
  return swift_task_dealloc(a31);
}

uint64_t sub_3651C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  return swift_task_dealloc(a30);
}

uint64_t sub_36524( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29)
{
  return swift_task_dealloc(a29);
}

uint64_t sub_3652C()
{
  return swift_release(v0);
}

uint64_t sub_36534()
{
  return OutputGenerationManifest.responseViewId.setter(v0, v1);
}

uint64_t sub_36540@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return 0x6E656B6174LL;
}

uint64_t sub_3655C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return 0x646567676F6CLL;
}

void sub_36578()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_36588()
{
  return swift_task_dealloc(*(void *)(v0 - 232));
}

_OWORD *sub_36590(_OWORD *a1)
{
  return sub_A13C(a1, v1);
}

uint64_t sub_36598(void *a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_365C0()
{
  return ((uint64_t (*)(void))dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:))();
}

uint64_t sub_365DC()
{
  return swift_task_dealloc(*(void *)(v0 - 152));
}

uint64_t sub_365E4()
{
  return swift_task_dealloc(*(void *)(v0 - 160));
}

uint64_t sub_365EC()
{
  return swift_task_dealloc(*(void *)(v0 - 168));
}

uint64_t sub_365F4()
{
  return swift_task_dealloc(*(void *)(v0 - 176));
}

uint64_t sub_365FC()
{
  return swift_task_dealloc(*(void *)(v0 - 184));
}

uint64_t sub_36604()
{
  return swift_task_dealloc(*(void *)(v0 - 192));
}

uint64_t sub_3660C()
{
  return swift_task_dealloc(*(void *)(v0 - 200));
}

uint64_t sub_36614()
{
  return swift_task_dealloc(*(void *)(v0 - 208));
}

uint64_t sub_3661C()
{
  return swift_task_dealloc(*(void *)(v0 - 216));
}

uint64_t sub_36624()
{
  return swift_task_dealloc(*(void *)(v0 - 224));
}

uint64_t sub_3662C(void *a1)
{
  return dispatch thunk of DeviceState.isPhone.getter(v1, v2);
}

uint64_t sub_3664C(void *a1)
{
  return dispatch thunk of DeviceState.isPad.getter(v1, v2);
}

uint64_t sub_3666C(void *a1)
{
  return dispatch thunk of DeviceState.isPhone.getter(v1, v2);
}

_OWORD *sub_3668C()
{
  return sub_A13C((_OWORD *)(*(void *)(v0 + 11048) + 64LL), v1);
}

uint64_t sub_366A8()
{
  return swift_task_dealloc(*(void *)(v0 - 128));
}

uint64_t sub_366B0()
{
  return swift_task_dealloc(*(void *)(v0 - 136));
}

uint64_t sub_366B8()
{
  return swift_task_dealloc(*(void *)(v0 - 144));
}

_WORD *sub_366C0(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

void sub_366CC()
{
}

uint64_t sub_366DC(uint64_t a1, uint64_t a2)
{
  return sub_5E5E4(a1, a2);
}

uint64_t sub_366E8()
{
  return swift_task_dealloc(*(void *)(v0 - 248));
}

uint64_t sub_366F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41)
{
  return swift_task_dealloc(a41);
}

uint64_t sub_366F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40)
{
  return swift_task_dealloc(a40);
}

  ;
}

uint64_t sub_3671C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v0);
}

uint64_t sub_36748()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

uint64_t sub_36750()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_3677C()
{
  return swift_task_dealloc(*(void *)(v0 - 240));
}

void *sub_36784()
{
  return sub_A1B4(v0);
}

uint64_t sub_3678C()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 - 168) + 8LL))( *(void *)(v1 - 152),  *(void *)(v1 - 160));
}

uint64_t sub_367AC()
{
  return swift_release(v0);
}

void *sub_367B4(uint64_t a1)
{
  return j___s11SiriKitFlow22OutputPublisherFactoryO04makedE5AsyncAA0deH0_pyFZ((void *)(v2 - 128));
}

BOOL sub_367D4()
{
  return os_log_type_enabled(v0, v1);
}

uint64_t sub_367E8(uint64_t a1)
{
  return sub_D9904(a1, v1 - 112, v1 - 104, v1 - 96);
}

uint64_t sub_367FC()
{
  return swift_task_dealloc(*(void *)(v0 - 96));
}

uint64_t sub_36804()
{
  return swift_task_dealloc(*(void *)(v0 - 104));
}

uint64_t sub_3680C()
{
  return swift_task_dealloc(*(void *)(v0 - 112));
}

uint64_t sub_36814()
{
  return swift_task_dealloc(*(void *)(v0 - 120));
}

  ;
}

uint64_t sub_36838(void *a1)
{
  return dispatch thunk of DeviceState.isPad.getter(v1, v2);
}

uint64_t sub_36860()
{
  return swift_errorRelease(v0);
}

uint64_t sub_36868()
{
  return v3(v1, v0, v2);
}

void sub_36878(uint64_t a1)
{
}

uint64_t sub_36880()
{
  return v0(v1, v2);
}

uint64_t sub_36890()
{
  return v0(v2, v1);
}

uint64_t sub_368A0()
{
  return Logger.logObject.getter();
}

uint64_t sub_368A8()
{
  return *(unsigned int *)(v0 - 116);
}

unint64_t sub_368E0()
{
  return 0xD000000000000017LL;
}

uint64_t sub_368F8()
{
  return OutputGenerationManifest.printSupportingDialogInDisplayModes.setter(1LL);
}

uint64_t sub_36900@<X0>(uint64_t a1@<X8>)
{
  return swift_task_dealloc(a1);
}

_WORD *sub_36908(_WORD *result)
{
  *(void *)(v1 - 104) = 0LL;
  *(void *)(v1 - 96) = 0LL;
  *unint64_t result = 0;
  *(void *)(v1 - 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = result + 1;
  return result;
}

void sub_36920()
{
}

uint64_t sub_3692C(_WORD *a1)
{
  *(void *)(v2 - 104) = 0LL;
  *(void *)(v2 - 96) = 0LL;
  *a1 = 0;
  *(void *)(v2 - 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a1 + 1;
  return sub_D9904(v1, v2 - 112, v2 - 104, v2 - 96);
}

BOOL sub_36958()
{
  return os_log_type_enabled(v0, v1);
}

void *sub_36964(uint64_t a1)
{
  return static OutputPublisherFactory.makeOutputPublisherAsync()((void *)(v2 - 120));
}

uint64_t sub_36980()
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
}

uint64_t sub_36998()
{
  return *(void *)(v0 + 11600);
}

uint64_t sub_369CC()
{
  return type metadata accessor for SimpleOutputFlowAsync(0LL);
}

uint64_t sub_369D4(uint64_t a1, uint64_t a2)
{
  return OutputGenerationManifest.init(dialogPhase:_:)(v2, a2, 0LL);
}

uint64_t sub_369E4(uint64_t a1, uint64_t a2)
{
  return SimpleOutputFlowAsync.__allocating_init(outputPublisher:outputGenerator:)(v3 - 128, a2, v2);
}

uint64_t sub_369F4()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_369FC()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

uint64_t sub_36A0C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_36A28(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_36A34()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 144) + 8LL))( *(void *)(v0 - 128),  *(void *)(v0 - 136));
}

_WORD *sub_36A44(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

  ;
}

void sub_36A5C()
{
  *(void *)(v1 - 8) = *v0;
  *(void *)(v1 - 8) = *v0;
}

  ;
}

void sub_36A94(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_36A9C()
{
  return v3(v1, v0, v2);
}

uint64_t sub_36AAC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 152))(v0, v1);
}

uint64_t sub_36ABC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void *sub_36ACC()
{
  return sub_5A9B0(v0, v1);
}

void sub_36AD8()
{
}

void sub_36AE4()
{
}

uint64_t sub_36AF0(float *a1, float a2)
{
  *a1 = a2;
  *(_DWORD *)(v4 - 160) = v2;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 160, v4 - 156, a1 + 1, (char *)a1 + v3);
}

uint64_t sub_36B14()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

uint64_t sub_36B20()
{
  return swift_task_alloc(v0);
}

uint64_t sub_36B28()
{
  return v2(v0, v1);
}

void sub_36B34()
{
  *(void *)(v1 - 80) = *(void *)(v0 + 3536);
}

void sub_36B48()
{
  *(void *)(v2 - 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v1[1457];
  *(void *)(v2 - 184) = v0;
  uint64_t v3 = v1[1456];
  *(void *)(v2 - 208) = v1[1455];
  *(void *)(v2 - 200) = v3;
  uint64_t v4 = v1[1454];
  *(void *)(v2 - 224) = v1[1453];
  *(void *)(v2 - sub_20004(v5, v1 + 216) = v4;
}

void *sub_36B74(void *a1)
{
  return sub_D878(v1);
}

uint64_t sub_36B88()
{
  return swift_task_dealloc(*(void *)(v0 - 256));
}

uint64_t sub_36B90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42)
{
  return swift_task_dealloc(a42);
}

uint64_t sub_36B98()
{
  return sub_3561C( 9LL,  v0,  *(void *)(v1 - 224),  *(void *)(v1 - 216),  *(void *)(v1 - 208),  *(void *)(v1 - 200),  *(void *)(v1 - 192),  *(void *)(v1 - 184),  0xC0u);
}

double sub_36BB8()
{
  *(void *)uint64_t v1 = v0;
  double result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(void *)(v1 + 56) = 0LL;
  *(_BYTE *)(v1 + 64) = -64;
  return result;
}

uint64_t sub_36BE0()
{
  return swift_release(v0);
}

  ;
}

  ;
}

uint64_t sub_36C08()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

uint64_t sub_36C10(void *a1)
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v2);
}

uint64_t sub_36C34()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t sub_36C4C(uint64_t a1, uint64_t a2)
{
  return sub_A627C(v2, a2, 0LL);
}

uint64_t sub_36C5C()
{
  return swift_retain(v0);
}

uint64_t sub_36C64(uint64_t a1, uint64_t a2)
{
  return sub_A627C(v2, a1, a2);
}

void sub_36C80()
{
}

  ;
}

void sub_36CAC()
{
}

void sub_36CB8()
{
}

uint64_t sub_36CC4()
{
  return v2(v0, v1);
}

void sub_36CD0()
{
}

uint64_t sub_36CDC()
{
  return v3(v1, v0, v2);
}

void sub_36CEC(uint64_t a1)
{
}

  ;
}

void sub_36D10()
{
}

uint64_t sub_36D1C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))((char *)&stru_20.maxprot + (v1 & a1)))();
}

  ;
}

uint64_t sub_36D48@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1, v3);
}

uint64_t sub_36D58(uint64_t a1, uint64_t a2)
{
  return SnippetHeaderModel.init(categoryLabel:categoryListIconName:categoryIdentifier:)(v5, v2, v3, a1, a2, v4);
}

uint64_t sub_36D74()
{
  return sub_27CC8(0x58u);
}

void *sub_36D84()
{
  return sub_5A9B0(v1, v0);
}

uint64_t sub_36D90()
{
  return v2(v0, v1);
}

void sub_36D9C(uint64_t a1, SEL *a2)
{
}

uint64_t sub_36DA4()
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
}

void *sub_36DD8()
{
  return sub_A1B4(v0);
}

_WORD *sub_36DE0(_WORD *result)
{
  *double result = 0;
  return result;
}

  ;
}

uint64_t sub_36E08()
{
  return v2(v0, v1);
}

uint64_t sub_36E14@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

uint64_t sub_36E20()
{
  return static DialogPhase.error.getter();
}

uint64_t sub_36E30()
{
  return static CATOption.defaultMode.getter();
}

_WORD *sub_36E3C(_WORD *result)
{
  *(void *)(v2 - 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v1;
  *(void *)(v2 - sub_20004(v6, v1 + 176) = 0LL;
  *(void *)(v2 - 136) = 0LL;
  *double result = 0;
  *(void *)(v2 - 224) = result + 1;
  return result;
}

uint64_t sub_36E5C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_36E70()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_36E78()
{
  return swift_task_dealloc(*(void *)(v0 - 80));
}

uint64_t sub_36E80()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_36E8C()
{
  return sub_27CC8(0x58u);
}

uint64_t sub_36E94()
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
}

uint64_t sub_36E9C()
{
  return 11LL;
}

uint64_t sub_36EBC()
{
  return swift_release(v0);
}

uint64_t sub_36EC4()
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
}

uint64_t sub_36ECC()
{
  return v0;
}

uint64_t sub_36EDC()
{
  return static DialogPhase.error.getter();
}

uint64_t sub_36EE4()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_36EEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44)
{
  return swift_task_dealloc(a44);
}

uint64_t sub_36EF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43)
{
  return swift_task_dealloc(a43);
}

uint64_t sub_36EFC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

id sub_36F04(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_36F0C()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

uint64_t sub_36F18(uint64_t a1)
{
  return sub_D9904(a1, v1 - 224, v1 - 176, v1 - 136);
}

void sub_36F2C()
{
}

uint64_t sub_36F38(uint64_t a1, uint64_t a2)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1LL, v2);
}

id sub_36F44(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

void sub_36F4C(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
}

uint64_t sub_36F54()
{
  return *(void *)(v0 + 224);
}

uint64_t sub_36F70()
{
  return swift_arrayDestroy(*(void *)(v0 - 88), 1LL);
}

uint64_t sub_36F84()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 184) + 8LL))(v0, v1);
}

  ;
}

  ;
}

void sub_36FD0()
{
}

void sub_36FDC()
{
}

void sub_36FE8()
{
}

void sub_36FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)(v3 - 96);
  sub_57F08(a1, a2, a3);
}

_OWORD *sub_37000()
{
  return sub_A13C((_OWORD *)(v1 + 64), v0);
}

void *sub_3700C()
{
  return sub_B76C(*(void **)(v0 - 104));
}

uint64_t sub_37018()
{
  return Logger.logObject.getter();
}

uint64_t sub_37020(uint64_t a1)
{
  return String.toSpeakableString.getter(a1, v1);
}

uint64_t sub_37034()
{
  return swift_release(v0);
}

uint64_t sub_3703C()
{
  return swift_task_alloc(v0);
}

uint64_t sub_37044()
{
  return v2(v0, v1);
}

uint64_t sub_37050(void *a1)
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
}

uint64_t sub_37064(uint64_t a1)
{
  return swift_storeEnumTagMultiPayload(a1, v1, 6LL);
}

void sub_37070(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_37084()
{
  return v0;
}

uint64_t sub_37090()
{
  return v0(v1, v2);
}

uint64_t sub_3709C()
{
  return swift_task_alloc(v0);
}

void sub_370A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_370B0()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v0);
}

uint64_t sub_370BC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return sub_12BE9C(0LL, 0LL, a3);
}

uint64_t sub_370C8(uint64_t a1, uint64_t a2)
{
  return sub_398E0(0LL, a2, v2);
}

uint64_t sub_370D4()
{
  return type metadata accessor for WellnessSnippets(0LL);
}

void sub_370DC()
{
  *(void *)(v2 - 104) = *(void *)(v1 + 3392);
  *(void *)(v2 - 96) = v0;
}

uint64_t sub_370F4()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 104) + 8LL))( *(void *)(v0 - 88),  *(void *)(v0 - 96));
}

uint64_t sub_37104()
{
  return v0;
}

uint64_t sub_37110()
{
  return swift_release(v0);
}

uint64_t sub_37118()
{
  return v0;
}

uint64_t sub_37128()
{
  return sub_5050(v0);
}

uint64_t sub_37130()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

BOOL sub_37140(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_37150(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 0LL, 1LL, v1);
}

void *sub_37160@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *double result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_37170@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_37188(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 1LL, 1LL, v1);
}

uint64_t sub_37198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1) {
    return sub_311AC(a1);
  }
  else {
    return sub_311AC(a2);
  }
}

uint64_t sub_371A8()
{
  return *(void *)(v0 + 224);
}

void sub_371C0()
{
  *(void *)(v2 - 136) = *(void *)(v1 + 11184);
  *(void *)(v2 - 128) = v0;
}

uint64_t sub_371D0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

  ;
}

void sub_371FC()
{
}

void sub_3720C(void *a1@<X8>)
{
  *a1 = v1;
  a1[1] = (v2 - 32) | 0x8000000000000000LL;
}

BOOL sub_3721C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_3722C()
{
  return static ExecuteResponse.complete<A>(next:)(v0);
}

  ;
}

  ;
}

uint64_t sub_37268()
{
  return sub_5050(v0);
}

void *sub_37270(uint64_t a1)
{
  return j___s11SiriKitFlow22OutputPublisherFactoryO04makedE5AsyncAA0deH0_pyFZ((void *)(v2 - 120));
}

uint64_t sub_37290@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v3, v2);
}

uint64_t sub_372A0()
{
  return v0;
}

_OWORD *sub_372AC()
{
  return sub_A13C(v0, *(_OWORD **)(v1 - 128));
}

uint64_t sub_372BC()
{
  return v2(v1, v0, v3);
}

uint64_t sub_372CC()
{
  return swift_retain(v0);
}

uint64_t sub_372D4()
{
  return v3(v1, v0, v2);
}

void sub_372E4()
{
}

  ;
}

uint64_t sub_3730C()
{
  return type metadata accessor for CATOption(0LL);
}

BOOL sub_37314(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_37324()
{
}

uint64_t sub_37334(uint64_t a1)
{
  return v1(a1, v2);
}

id sub_3733C(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2 & 1);
}

uint64_t sub_37344()
{
  return v0(v2, v1);
}

void sub_37350(uint64_t a1, SEL *a2)
{
}

uint64_t sub_37358@<X0>(uint64_t a1@<X8>)
{
  if (v1 >= 0) {
    return _CocoaArrayWrapper.endIndex.getter(a1);
  }
  else {
    return _CocoaArrayWrapper.endIndex.getter(v1);
  }
}

_WORD *sub_37364(_WORD *result)
{
  *double result = 0;
  return result;
}

uint64_t sub_37370()
{
  return swift_retain(*(void *)(v0 + 16));
}

uint64_t sub_3737C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 - 88) = a1;
  return specialized Array._endMutation()(a1, a2, a3);
}

id sub_37388()
{
  return *(id *)(v0 + 32);
}

uint64_t sub_37390(uint64_t a1, unint64_t a2)
{
  return sub_39178(a1, a2, (uint64_t *)(v2 - 136));
}

uint64_t sub_3739C(uint64_t a1)
{
  return String.init<A>(describing:)(*(void *)(v1 - 112), a1);
}

void sub_373A8()
{
}

void sub_373B0()
{
}

uint64_t sub_373BC()
{
  return Logger.wellness.unsafeMutableAddressor();
}

uint64_t sub_373C4(uint64_t a1)
{
  *(void *)(v1 - 160) = a1;
  return v1 - 160;
}

id sub_373D8(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_373E0()
{
  return v0;
}

uint64_t sub_373EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4, a2, v5, a4);
}

uint64_t sub_373F8(uint64_t a1)
{
  return sub_58F6C(a1, 1LL);
}

void sub_37400()
{
}

void sub_3740C( char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, char a5@<W6>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

uint64_t sub_37418(uint64_t a1)
{
  return URL.init(string:)(a1, (v1 - 32) | 0x8000000000000000LL);
}

  ;
}

  ;
}

uint64_t sub_3743C()
{
  return *(void *)(v0 + 8);
}

unint64_t sub_37448()
{
  return sub_2A044(0x58u);
}

void sub_37450(uint64_t a1, uint64_t *a2)
{
}

void sub_37458(uint64_t a1, uint64_t (*a2)(void))
{
}

  ;
}

void sub_37474(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_3747C()
{
  return v2(v0, v1);
}

uint64_t sub_37488()
{
  return swift_continuation_init(v0, 0LL);
}

uint64_t sub_37494(uint64_t a1, uint64_t a2)
{
  return SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)(v3 - 120, a2, v2);
}

uint64_t sub_374A0(uint64_t a1, uint64_t a2)
{
  return SimpleOutputFlowAsync.__allocating_init(outputPublisher:outputGenerator:)(v3 - 120, a2, v2);
}

void *sub_374AC()
{
  return sub_500C(v0, v1);
}

id sub_374B8(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_374C4()
{
  return v2(v0, v1);
}

uint64_t sub_374D0()
{
  return v2(v0, v1);
}

uint64_t sub_374DC(uint64_t a1)
{
  return sub_35468(a1, v1);
}

uint64_t sub_374E4()
{
  return v0(v1, v2);
}

uint64_t sub_374F0(uint64_t a1, unint64_t a2)
{
  return sub_39178(a1, a2, (uint64_t *)(v2 - 80));
}

uint64_t sub_374FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return static DialogPhase.completion.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_37504()
{
  return static CATOption.defaultMode.getter();
}

uint64_t sub_37510()
{
  return static CATOption.defaultMode.getter();
}

  ;
}

uint64_t sub_37530()
{
  return type metadata accessor for LogGenericMedicationsIntent(0LL);
}

uint64_t sub_37538(char a1)
{
  return qword_139A70[a1];
}

uint64_t sub_37558(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_17A3F0, a1, a2, &unk_189B10);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x3D) {
    return 61LL;
  }
  else {
    return v3;
  }
}

_UNKNOWN **sub_375A8()
{
  return &off_17AFE8;
}

uint64_t sub_375B4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_375F0 + 4 * word_1398E0[a1]))( 0xD000000000000011LL,  0x8000000000140620LL);
}

uint64_t sub_375F0()
{
  return 0x7265702074656566LL;
}

uint64_t sub_377B0()
{
  return v0 + 9;
}

uint64_t sub_377C0()
{
  return v0 + 8;
}

uint64_t sub_377D0()
{
  return 0x6D6172676F6C696BLL;
}

uint64_t sub_377E8()
{
  return 1835102823LL;
}

uint64_t sub_377F8()
{
  return 0x646E756F70LL;
}

uint64_t sub_3780C()
{
  return 0x656E6F7473LL;
}

uint64_t sub_37918()
{
  return 0x6C756F6A6F6C696BLL;
}

uint64_t sub_37934()
{
  return 0x655F657669746361LL;
}

uint64_t sub_37958()
{
  return 0x5F676E6974736572LL;
}

uint64_t sub_3797C()
{
  return 7172194LL;
}

uint64_t sub_3798C()
{
  return 0x726574696CLL;
}

uint64_t sub_3799C()
{
  return v0 + 3;
}

uint64_t sub_379AC()
{
  return 0x5F7265705F707563LL;
}

uint64_t sub_379F0()
{
  return v0 + 7;
}

uint64_t sub_37A00()
{
  return v0 + 3;
}

void sub_37A10()
{
}

uint64_t sub_37A28()
{
  return 0x5F666F5F74696E75LL;
}

uint64_t sub_37A4C()
{
  return 1734897005LL;
}

uint64_t sub_37A5C()
{
  return 0x6D5F687461657262LL;
}

void sub_37A78()
{
}

uint64_t sub_37A8C()
{
  return 0x737569736C6563LL;
}

uint64_t sub_37AA4()
{
  return 0x65686E6572686166LL;
}

uint64_t sub_37AC4()
{
  return 1885697139LL;
}

uint64_t sub_37AD4()
{
  return 0x746867696C66LL;
}

uint64_t sub_37AE8()
{
  return 0x6168636C65656877LL;
}

uint64_t sub_37B0C()
{
  return 0x656B6F727473LL;
}

uint64_t sub_37B20()
{
  return 0x676E696D6D697773LL;
}

uint64_t sub_37B44()
{
  return 7364972LL;
}

uint64_t sub_37B54()
{
  return 0x6574756E696DLL;
}

uint64_t sub_37B68()
{
  return 1920298856LL;
}

void sub_37B78(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_37B84()
{
}

uint64_t sub_37B8C(uint64_t a1)
{
  return sub_12BC80(a1, *v1);
}

void sub_37B94(uint64_t a1)
{
}

uint64_t sub_37B9C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_37558(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_37BC8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_375B4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_37BF0(void *a1@<X8>)
{
  *a1 = &off_17AFE8;
}

uint64_t getEnumTagSinglePayload for MeasurementUnit(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xC4)
  {
    if (a2 + 60 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 60) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 61;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for MeasurementUnit(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 60 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 60) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xC4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xC3) {
    return ((uint64_t (*)(void))((char *)&loc_37CD4 + 4 * byte_13995F[v4]))();
  }
  *a1 = a2 + 60;
  return ((uint64_t (*)(void))((char *)sub_37D08 + 4 * byte_13995A[v4]))();
}

uint64_t sub_37D08(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_37D10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x37D18LL);
  }
  return result;
}

uint64_t sub_37D24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x37D2CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 60;
  return result;
}

uint64_t sub_37D30(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_37D38(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MeasurementUnit()
{
  return &type metadata for MeasurementUnit;
}

unint64_t sub_37D58()
{
  unint64_t result = qword_18AF18;
  if (!qword_18AF18)
  {
    uint64_t v1 = sub_B64C(&qword_18AF20);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_18AF18);
  }

  return result;
}

unint64_t sub_37DA0()
{
  unint64_t result = qword_18AF28;
  if (!qword_18AF28)
  {
    unint64_t result = swift_getWitnessTable(&unk_139A44, &type metadata for MeasurementUnit);
    atomic_store(result, (unint64_t *)&qword_18AF28);
  }

  return result;
}

uint64_t getLocalizedMedName(from:)(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  swift_retain();
  uint64_t v1 = dispatch thunk of UsoEntity_common_Medication.name.getter();
  sub_367AC();
  return v1;
}

void *getUsoMedNames(from:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v46 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v42 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v42 - v9;
  if (!a1) {
    return 0LL;
  }
  swift_retain();
  unint64_t result = (void *)dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)( 1701667182LL,  0xE400000000000000LL);
  uint64_t v44 = result;
  if (!result)
  {
    sub_3652C();
    return 0LL;
  }

  uint64_t v12 = result;
  uint64_t v42 = a1;
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v47 = _swiftEmptyArrayStorage;
  uint64_t v45 = result[2];
  if (!v45)
  {
LABEL_21:
    swift_bridgeObjectRelease(v12);
    uint64_t v27 = v13[2];
    if (v27)
    {
      uint64_t v28 = (char *)v13 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
      uint64_t v29 = *(void *)(v3 + 72);
      uint64_t v44 = v13;
      uint64_t v45 = v29;
      uint64_t v30 = *(uint64_t (**)(char *, char *, uint64_t))(v3 + 16);
      swift_retain();
      unint64_t v31 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v32 = v46;
        uint64_t v33 = v30(v46, v28, v2);
        uint64_t v34 = UsoIdentifier.value.getter(v33);
        uint64_t v36 = v35;
        (*(void (**)(char *, uint64_t))(v3 + 8))(v32, v2);
        if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
        {
          sub_39B58(0, v31[2] + 1LL);
          unint64_t v31 = v40;
        }

        unint64_t v38 = v31[2];
        unint64_t v37 = v31[3];
        if (v38 >= v37 >> 1)
        {
          sub_39B58(v37 > 1, v38 + 1);
          unint64_t v31 = v41;
        }

        v31[2] = v38 + 1;
        uint64_t v39 = &v31[2 * v38];
        v39[4] = v34;
        v39[5] = v36;
        v28 += v45;
        --v27;
      }

      while (v27);
      swift_release();
      swift_release_n(v44, 2LL);
    }

    else
    {
      sub_3652C();
      swift_release();
      return _swiftEmptyArrayStorage;
    }

    return v31;
  }

  unint64_t v14 = 0LL;
  uint64_t v43 = v8;
  while (v14 < v12[2])
  {
    unint64_t v15 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v16 = *(void *)(v3 + 72);
    uint64_t v17 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v3 + 16))( v10,  (unint64_t)v12 + v15 + v16 * v14,  v2);
    uint64_t v18 = UsoIdentifier.namespace.getter(v17);
    if (v19)
    {
      if (v18 == 0x64695F6D657469LL && v19 == 0xE700000000000000LL)
      {
        sub_249D4();
LABEL_14:
        uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
        v22(v8, v10, v2);
        uint64_t v23 = v47;
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
        {
          sub_39908(0, v23[2] + 1LL, 1);
          uint64_t v23 = v47;
        }

        unint64_t v25 = v23[2];
        unint64_t v24 = v23[3];
        if (v25 >= v24 >> 1)
        {
          sub_39908(v24 > 1, v25 + 1, 1);
          uint64_t v23 = v47;
        }

        v23[2] = v25 + 1;
        unint64_t v26 = (unint64_t)v23 + v15 + v25 * v16;
        uint64_t v8 = v43;
        unint64_t result = (void *)((uint64_t (*)(unint64_t, char *, uint64_t))v22)(v26, v43, v2);
        uint64_t v47 = v23;
        uint64_t v12 = v44;
        goto LABEL_19;
      }

      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, 0x64695F6D657469LL, 0xE700000000000000LL, 0LL);
      sub_249D4();
      if ((v21 & 1) != 0) {
        goto LABEL_14;
      }
    }

    unint64_t result = (void *)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v10, v2);
LABEL_19:
    if (v45 == ++v14)
    {
      uint64_t v13 = v47;
      goto LABEL_21;
    }
  }

  __break(1u);
  return result;
}

uint64_t hasMedDosage(from:)(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = swift_retain();
    uint64_t v2 = dispatch thunk of UsoEntity_common_Medication.dosage.getter(v1);
    sub_3652C();
    if (v2)
    {
      sub_37034();
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t getUsoMedDosageUnit(from:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v49 - v7;
  if (!a1) {
    return 0LL;
  }
  uint64_t v9 = swift_retain();
  uint64_t v10 = dispatch thunk of UsoEntity_common_Medication.dosage.getter(v9);
  uint64_t v55 = v6;
  if (!v10) {
    goto LABEL_16;
  }
  uint64_t v11 = sub_39BA4();
  sub_36BE0();
  if (!v11) {
    goto LABEL_17;
  }
  if (!((unint64_t)v11 >> 62))
  {
    uint64_t v12 = *(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFFF8LL));
    if (v12) {
      goto LABEL_6;
    }
LABEL_15:
    sub_249D4();
    goto LABEL_16;
  }

  if (v11 >= 0) {
    uint64_t v14 = v11 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    uint64_t v14 = v11;
  }
  sub_1EB6C();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v14);
  sub_249D4();
  if (!v12) {
    goto LABEL_15;
  }
LABEL_6:
  if ((v11 & 0xC000000000000001LL) != 0)
  {
    sub_370B0();
  }

  else
  {
    if (!*(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFFF8LL)))
    {
      __break(1u);
      goto LABEL_44;
    }

    swift_retain();
  }

  sub_249D4();
  dispatch thunk of CodeGenListEntry.entry.getter(v58);
  uint64_t v13 = sub_36BE0();
  if (v58[0])
  {
    uint64_t v11 = dispatch thunk of UsoEntity_common_MeasurementComponent.unit.getter(v13);
    sub_36BE0();
    goto LABEL_17;
  }

uint64_t getMedDosageValue(from:)(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v1 = swift_retain();
  if (!dispatch thunk of UsoEntity_common_Medication.dosage.getter(v1)) {
    goto LABEL_12;
  }
  uint64_t v2 = sub_39BA4();
  uint64_t result = sub_367AC();
  if (!v2)
  {
LABEL_13:
    sub_37034();
    return v2;
  }

  if (!((unint64_t)v2 >> 62))
  {
LABEL_18:
    sub_37034();
    sub_249D4();
    return 0LL;
  }

  if (v2 >= 0) {
    uint64_t v7 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    uint64_t v7 = v2;
  }
  sub_1EB6C();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v7);
  uint64_t result = sub_249D4();
  if (!v8) {
    goto LABEL_18;
  }
LABEL_6:
  if ((v2 & 0xC000000000000001LL) != 0)
  {
    sub_370B0();
LABEL_9:
    sub_249D4();
    dispatch thunk of CodeGenListEntry.entry.getter(&v9);
    uint64_t v4 = sub_367AC();
    uint64_t v2 = v9;
    if (v9)
    {
      uint64_t v5 = dispatch thunk of UsoEntity_common_MeasurementComponent.value.getter(v4);
      uint64_t v6 = sub_3652C();
      if (v5)
      {
        uint64_t v2 = UsoEntity_common_Number.asDouble.getter(v6);
        sub_367AC();
        sub_37034();
        return v2;
      }

uint64_t sub_387D0(uint64_t result, _BYTE **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_387E0(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

void sub_38814(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_39B00();
    if (v8 != v9)
    {
      sub_39B64();
      if (v8)
      {
        __break(1u);
        return;
      }

      sub_39AF0();
    }
  }

  sub_39B28();
  if (v5)
  {
    uint64_t v10 = sub_494C(&qword_18AF58);
    uint64_t v11 = (char *)sub_20308(v10, 16 * v5 + 32);
    size_t v12 = j__malloc_size(v11);
    sub_39B48(v12 - 32);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  if ((a1 & 1) != 0)
  {
    sub_38D10((char *)(a4 + 32), v4, v11 + 32);
    sub_39B10();
  }

  else
  {
    uint64_t v13 = sub_39B38();
    sub_38A18(v13, v14, v15, v16);
  }

  sub_1EB0C();
}

void sub_388C0(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_39B00();
    if (v8 != v9)
    {
      sub_39B64();
      if (v8)
      {
        __break(1u);
        return;
      }

      sub_39AF0();
    }
  }

  sub_39B28();
  if (v5)
  {
    uint64_t v10 = sub_494C(&qword_18AF40);
    uint64_t v11 = (char *)sub_20308(v10, (v5 << 6) | 0x20);
    size_t v12 = j__malloc_size(v11);
    sub_39B48(v12 - 32);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  if ((a1 & 1) != 0)
  {
    sub_38E68((char *)(a4 + 32), v4, v11 + 32);
    sub_39B10();
  }

  else
  {
    uint64_t v13 = sub_39B38();
    sub_38B0C(v13, v14, v15, v16);
  }

  sub_1EB0C();
}

void sub_3896C(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_39B00();
    if (v8 != v9)
    {
      sub_39B64();
      if (v8)
      {
        __break(1u);
        return;
      }

      sub_39AF0();
    }
  }

  sub_39B28();
  if (v5)
  {
    uint64_t v10 = sub_494C(&qword_18AF38);
    uint64_t v11 = (char *)sub_20308(v10, 8 * v5 + 32);
    size_t v12 = j__malloc_size(v11);
    sub_39B48(v12 - 32);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  if ((a1 & 1) != 0)
  {
    sub_38EEC((char *)(a4 + 32), v4, v11 + 32);
    sub_39B10();
  }

  else
  {
    uint64_t v13 = sub_39B38();
    sub_38C20(v13, v14, v15, v16);
  }

  sub_1EB0C();
}

uint64_t sub_38A18(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 16 * a1 + 32;
  unint64_t v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_38B0C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + (a1 << 6) + 32;
  unint64_t v8 = a3 + (v4 << 6);
  if (v7 >= v8 || v7 + (v4 << 6) <= a3)
  {
    sub_494C(&qword_18AF48);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_38C20(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = (char *)(a4 + 8 * a1 + 32);
  unint64_t v7 = &__dst[8 * v4];
  if (v6 >= v7 || &v6[8 * v4] <= __dst)
  {
    memcpy(__dst, v6, 8 * v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_38D10(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }

  return __src;
}

uint64_t sub_38D94(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void))
{
  if (a2 < 0)
  {
    sub_39ACC();
    uint64_t result = sub_39B1C( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  55LL,  v11,  (uint64_t)"Swift/UnsafePointer.swift",  v12,  v13,  v14,  v15);
    __break(1u);
  }

  else if (a3 < a1 {
         || (uint64_t result = ((uint64_t (*)(void))a4)(0LL),
  }
             a1 + *(void *)(*(void *)(result - 8) + 72LL) * a2 <= a3))
  {
    a4(0LL);
    uint64_t v10 = sub_39B7C();
    return swift_arrayInitWithTakeFrontToBack(v10);
  }

  else if (a3 != a1)
  {
    uint64_t v9 = sub_39B7C();
    return swift_arrayInitWithTakeBackToFront(v9);
  }

  return result;
}

char *sub_38E68(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[64 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, a2 << 6);
  }

  return __src;
}

char *sub_38EEC(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }

  return __src;
}

uint64_t sub_38F70(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(void))
{
  if (a2 < 0)
  {
    sub_39ACC();
    uint64_t v14 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v15 = 51LL;
  }

  else
  {
    uint64_t v6 = *(void *)(*(void *)(a4(0LL) - 8) + 72LL) * a2;
    unint64_t v7 = a3 + v6;
    unint64_t v8 = a1 + v6;
    if (v7 <= a1 || v8 <= a3)
    {
      uint64_t v10 = sub_39B90();
      return sub_39AE0(v10);
    }

    sub_39ACC();
    uint64_t v14 = "UnsafeMutablePointer.initialize overlapping range";
    uint64_t v15 = 49LL;
  }

  uint64_t result = sub_39B1C( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)v14,  v15,  v12,  (uint64_t)"Swift/UnsafePointer.swift",  v13,  v16,  v17,  v18);
  __break(1u);
  return result;
}

uint64_t sub_3902C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_39ACC();
    unint64_t v8 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v9 = 51LL;
  }

  else
  {
    if (a3 + 8 * a2 <= a1 || a1 + 8 * a2 <= a3)
    {
      type metadata accessor for MatchedMedName(0LL);
      uint64_t v4 = sub_39B90();
      return sub_39AE0(v4);
    }

    sub_39ACC();
    unint64_t v8 = "UnsafeMutablePointer.initialize overlapping range";
    uint64_t v9 = 49LL;
  }

  uint64_t result = sub_39B1C( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)v8,  v9,  v6,  (uint64_t)"Swift/UnsafePointer.swift",  v7,  v10,  v11,  v12);
  __break(1u);
  return result;
}

_BYTE **sub_390DC(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t sub_390EC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_3910C(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  uint64_t v8 = sub_39178(v6, v7, a3);
  uint64_t v9 = *a1;
  uint64_t v10 = *a1 + 8;
  uint64_t v12 = v8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v9, v10);
  uint64_t result = sub_249D4();
  *a1 = v10;
  return result;
}

uint64_t sub_39178(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_39248(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_39A90((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_39A90((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v12);
  return v7;
}

void *sub_39248(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_3939C((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
      uint64_t result = 0LL;
      *a1 = __dst;
      return result;
    }

    goto LABEL_11;
  }

  if ((a6 & 0x1000000000000000LL) != 0)
  {
LABEL_11:
    uint64_t result = sub_39460(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }

  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL);
      __break(1u);
      return result;
    }
  }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return (void *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

void *sub_3939C(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory with negative count",  60LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1170LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1173LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_39460(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_394F4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_396C8(0LL, v2[2] + 1LL, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_396C8((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  _OWORD v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0;
  return v2;
}

void *sub_394F4(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v4 = String.UTF8View._foreignCount()();
    if (v4) {
      goto LABEL_6;
    }
    return _swiftEmptyArrayStorage;
  }

  if ((a2 & 0x2000000000000000LL) != 0) {
    Swift::Int v4 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
LABEL_6:
  uint64_t v5 = sub_39664(v4, 0LL);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  2,  71LL,  0);
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = v5;
  uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    uint64_t v9 = "Insufficient space allocated to copy string contents";
    uint64_t v10 = "Swift/StringUTF8View.swift";
    uint64_t v11 = 52LL;
    uint64_t v12 = 26LL;
    goto LABEL_15;
  }

  if (v7 == v4) {
    return v6;
  }
  uint64_t v9 = "invalid Collection: less than 'count' elements in collection";
  uint64_t v10 = "Swift/ContiguousArrayBuffer.swift";
  uint64_t v11 = 60LL;
  uint64_t v12 = 33LL;
LABEL_15:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v9, v11, 2LL, v10, v12);
  __break(1u);
  return result;
}

void *sub_39664(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_494C(&qword_18AF50);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_396C8(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_494C(&qword_18AF50);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_39860(v14, v8, v13);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_3979C(v14, v8, v13);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_3979C(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

char *sub_39860(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

unint64_t sub_398E4(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL)) > result)
    {
      return result;
    }

    __break(1u);
  }

  return result;
}

void sub_39908(char a1, uint64_t a2, char a3)
{
  *unint64_t v3 = v4;
}

void sub_39934(char a1, uint64_t a2, char a3)
{
  *unint64_t v3 = v4;
}

void sub_39960(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    sub_39B00();
    if (v10 != v11)
    {
      sub_39B64();
      if (v10)
      {
LABEL_24:
        __break(1u);
        return;
      }

      sub_39AF0();
    }
  }

  else
  {
    uint64_t v9 = a2;
  }

  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (!v13)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  uint64_t v14 = sub_494C(a5);
  uint64_t v15 = *(void *)(((uint64_t (*)(void))a6)(0LL) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v19 = (void *)swift_allocObject(v14, v18 + v16 * v13, v17 | 7);
  size_t v20 = j__malloc_size(v19);
  if (!v16)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  if (v20 - v18 == 0x8000000000000000LL && v16 == -1) {
    goto LABEL_23;
  }
  v19[2] = v12;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_18:
  uint64_t v22 = *(unsigned __int8 *)(*(void *)(((uint64_t (*)(void))a6)(0LL) - 8) + 80LL);
  uint64_t v23 = (v22 + 32) & ~v22;
  unint64_t v24 = (unint64_t)v19 + v23;
  unint64_t v25 = a4 + v23;
  if ((a1 & 1) != 0)
  {
    sub_38D94(v25, v12, v24, a6);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_38F70(v25, v12, v24, (uint64_t (*)(void))a6);
  }

  sub_37034();
}

uint64_t sub_39A90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

  ;
}

uint64_t sub_39AE0(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

  ;
}

  ;
}

uint64_t sub_39B10()
{
  *(void *)(v0 + 16) = 0LL;
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_39B1C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2LL, a7, 25LL, a9, a10, a11);
}

  ;
}

uint64_t sub_39B38()
{
  return 0LL;
}

void sub_39B48(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

void sub_39B58(char a1, uint64_t a2)
{
}

  ;
}

uint64_t sub_39B70()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_39B7C()
{
  return v0;
}

uint64_t sub_39B90()
{
  return v0;
}

uint64_t sub_39BA4()
{
  return dispatch thunk of UsoEntity_common_Measurement.components.getter();
}

uint64_t sub_39BAC()
{
  return swift_release(v0);
}

uint64_t sub_39BB4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_3A3C8();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for LegacyFlow, v4);
}

uint64_t sub_39BF4(uint64_t a1)
{
  v2[88] = v1;
  v2[87] = a1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[89] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[90] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[91] = swift_task_alloc(v5);
  v2[92] = swift_task_alloc(v5);
  return swift_task_switch(sub_39C68, 0LL, 0LL);
}

uint64_t sub_39C68()
{
  uint64_t v1 = (void *)(*(void *)(v0 + 704) + 40LL);
  sub_3A484(v1);
  uint64_t v2 = sub_3A474();
  v3(v2);
  sub_3A484((void *)(v0 + 608));
  uint64_t v4 = sub_3A474();
  char v5 = dispatch thunk of DeviceState.isWatch.getter(v4);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 608));
  if ((v5 & 1) == 0)
  {
    uint64_t v19 = (void *)(v0 + 272);
    uint64_t v20 = sub_3A48C();
    sub_3A404(v20);
    uint64_t v21 = sub_3A42C();
    Logger.logObject.getter(v21);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (sub_232DC(v22))
    {
      *(_WORD *)sub_232D0() = 0;
      sub_3A440(&dword_0, v23, v24, "Legacy behavior not supported on this device. Returning GenericNotSupportedFlow.");
      sub_3A464();
    }

    sub_3A418();
    sub_3A454();
    sub_3A498();
    *(_BYTE *)(v0 + 43_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0;
    goto LABEL_12;
  }

  unint64_t v6 = *(void **)(v0 + 704);
  sub_3A484(v6);
  uint64_t v7 = sub_3A474();
  char v9 = v8(v7);
  sub_58128(v9, (uint64_t)&off_17B048);
  if ((v10 & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v12 = v6[3];
  uint64_t v11 = v6[4];
  sub_3A484(*(void **)(v0 + 704));
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 24))(v12, v11);
  if ((unsigned __int16)v13 == 270
    || (uint64_t v14 = v13,
        uint64_t v15 = *(void *)(*(void *)(v0 + 704) + 280LL),
        swift_bridgeObjectRetain(v15),
        sub_57F38(v14, v15),
        char v17 = v16,
        swift_bridgeObjectRelease(v15),
        (v17 & 1) == 0))
  {
LABEL_9:
    uint64_t v19 = (void *)(v0 + 440);
    uint64_t v25 = sub_3A48C();
    sub_3A404(v25);
    uint64_t v26 = sub_3A42C();
    Logger.logObject.getter(v26);
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (sub_232DC(v27))
    {
      *(_WORD *)sub_232D0() = 0;
      sub_3A440(&dword_0, v28, v29, "Cannot punchout for the requested parse, executing GenericNotSupportedFlow");
      sub_3A464();
    }

    sub_3A418();
    sub_3A454();
    sub_3A498();
    *(_BYTE *)(v0 + 600) = 0;
LABEL_12:
    sub_1FF94();
    static ExecuteResponse.complete<A>(next:)(v19);
    sub_1FFD0(v19);
    goto LABEL_13;
  }

  uint64_t v18 = *(void *)(v0 + 704);
  sub_D7EC((uint64_t)v1, v0 + 24);
  sub_D7EC(v18 + 80, v0 + 64);
  sub_A13C((_OWORD *)(v18 + 120), (_OWORD *)(v0 + 104));
  *(_WORD *)(v0 + 16) = v14;
  *(_BYTE *)(v0 + 264) = 0;
  sub_3A358();
  static ExecuteResponse.complete<A>(next:)(v0 + 16);
  sub_3A394((void *)(v0 + 16));
LABEL_13:
  uint64_t v30 = *(void *)(v0 + 728);
  swift_task_dealloc(*(void *)(v0 + 736));
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_39EEC@<X0>( __int128 *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, const void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = memcpy((void *)(a5 + 120), a4, 0xA0uLL);
  *(void *)(a5 + 280) = &off_17B070;
  return result;
}

uint64_t destroy for LegacyFlow(void *a1)
{
  return swift_bridgeObjectRelease(a1[35]);
}

uint64_t initializeWithCopy for LegacyFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  __int128 v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  __int128 v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  __int128 v8 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 184) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 160, a2 + 160);
  __int128 v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 224) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 200, a2 + 200);
  uint64_t v10 = *(void *)(a2 + 264);
  uint64_t v11 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = v10;
  *(void *)(a1 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v11;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 240, a2 + 240);
  uint64_t v12 = *(void *)(a2 + 280);
  *(void *)(a1 + 280) = v12;
  swift_bridgeObjectRetain(v12);
  return a1;
}

void *assignWithCopy for LegacyFlow(void *a1, void *a2)
{
  uint64_t v4 = a2[35];
  uint64_t v5 = a1[35];
  a1[35] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

void *initializeWithTake for LegacyFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t assignWithTake for LegacyFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 80));
  __int128 v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 152);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 160));
  __int128 v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + sub_20004(v6, v1 + 176) = v6;
  *(void *)(a1 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 192);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 200));
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + sub_20004(v5, v1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 232);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 240));
  __int128 v7 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v7;
  uint64_t v8 = *(void *)(a2 + 280);
  uint64_t v9 = *(void *)(a1 + 280);
  *(void *)(a1 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for LegacyFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 288))
    {
      LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LegacyFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 280) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + sub_20004(v5, v1 + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 288) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 288) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LegacyFlow()
{
  return &type metadata for LegacyFlow;
}

uint64_t sub_3A308(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18AF7C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_A108;
  return sub_39BF4(a1);
}

unint64_t sub_3A358()
{
  unint64_t result = qword_18AF80;
  if (!qword_18AF80)
  {
    unint64_t result = swift_getWitnessTable(&unk_13F2C0, &type metadata for PunchoutFlow);
    atomic_store(result, (unint64_t *)&qword_18AF80);
  }

  return result;
}

void *sub_3A394(void *a1)
{
  return a1;
}

unint64_t sub_3A3C8()
{
  unint64_t result = qword_18AF88[0];
  if (!qword_18AF88[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_139E60, &type metadata for LegacyFlow);
    atomic_store(result, qword_18AF88);
  }

  return result;
}

uint64_t sub_3A404(uint64_t a1)
{
  return swift_beginAccess(a1, v1, 0LL, 0LL);
}

void sub_3A418()
{
}

uint64_t sub_3A42C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, v2, v1);
}

void sub_3A440(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_3A454()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_3A464()
{
  return swift_slowDealloc(v0, -1LL, -1LL);
}

uint64_t sub_3A474()
{
  return v0;
}

void *sub_3A484(void *a1)
{
  return sub_500C(a1, v1);
}

uint64_t sub_3A48C()
{
  return Logger.wellness.unsafeMutableAddressor();
}

_OWORD *sub_3A498()
{
  return sub_A13C((_OWORD *)(v1 + 120), v0);
}

uint64_t destroy for DataTypePunchoutFlow(void *a1)
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 26);
}

uint64_t initializeWithCopy for DataTypePunchoutFlow(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  __int128 v5 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 48, a2 + 48);
  __int128 v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 88, a2 + 88);
  __int128 v7 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 128, a2 + 128);
  __int128 v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 168, a2 + 168);
  __int128 v9 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 208, a2 + 208);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  return a1;
}

uint64_t assignWithCopy for DataTypePunchoutFlow(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  sub_7030((void *)(a1 + 8), (void *)(a2 + 8));
  sub_7030((void *)(a1 + 48), (void *)(a2 + 48));
  sub_7030((void *)(a1 + 88), (void *)(a2 + 88));
  sub_7030((void *)(a1 + 128), (void *)(a2 + 128));
  sub_7030((void *)(a1 + 168), (void *)(a2 + 168));
  sub_7030((void *)(a1 + 208), (void *)(a2 + 208));
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  return a1;
}

void *initializeWithTake for DataTypePunchoutFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xF9uLL);
}

uint64_t assignWithTake for DataTypePunchoutFlow(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 48));
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 88));
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 128));
  __int128 v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 168));
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 208));
  __int128 v6 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v6;
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  return a1;
}

uint64_t getEnumTagSinglePayload for DataTypePunchoutFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 249))
    {
      LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DataTypePunchoutFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + sub_20004(v5, v1 + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 248) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 249) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 249) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DataTypePunchoutFlow()
{
  return &type metadata for DataTypePunchoutFlow;
}

uint64_t sub_3A7FC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_3BFE4();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for DataTypePunchoutFlow, v4);
}

uint64_t sub_3A83C(uint64_t a1)
{
  v2[7] = a1;
  _BYTE v2[8] = v1;
  uint64_t v3 = sub_D984();
  void v2[9] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[10] = v4;
  v2[11] = sub_A5C0(v4);
  uint64_t v5 = type metadata accessor for DialogPhase(0LL);
  v2[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[13] = v6;
  v2[14] = sub_D8CC(v6);
  v2[15] = sub_A5B8();
  uint64_t v7 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[16] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[17] = v8;
  v2[18] = sub_A5C0(v8);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_3A8C0()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[8];
  static DialogPhase.error.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  OutputGenerationManifest.init(dialogPhase:_:)(v2, sub_A633C, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  sub_500C((void *)(v5 + 128), *(void *)(v5 + 152));
  uint64_t v6 = (void *)swift_task_alloc(dword_18CCF4);
  v0[19] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_3A978;
  return sub_7661C();
}

uint64_t sub_3A978(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 152);
  *(void *)(*v2 + 160) = v1;
  swift_task_dealloc(v5);
  if (!v1) {
    *(void *)(v4 + 168) = a1;
  }
  sub_A964();
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_3A9E8()
{
  uint64_t v1 = *(void **)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(uint64_t **)(v0 + 56);
  uint64_t v4 = *(void **)(v0 + 64);
  FlowTaskLogger.taskUnsupported()();
  id v5 = [v1 patternId];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  OutputGenerationManifest.responseViewId.setter(v6, v8);
  uint64_t v9 = v4[14];
  uint64_t v10 = v4[15];
  sub_500C(v4 + 11, v9);
  uint64_t v11 = dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)( v1,  v2,  v9,  v10);
  v3[3] = type metadata accessor for AnyFlow(0LL);
  v3[4] = (uint64_t)&protocol witness table for AnyFlow;

  *uint64_t v3 = v11;
  sub_3C73C();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  return sub_3C700(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_3AAC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 160);
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 88);
  uint64_t v5 = *(void *)(v1 + 72);
  uint64_t v6 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v6, v1 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  swift_errorRetain(v2);
  uint64_t v7 = swift_errorRetain(v2);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = *(void *)(v1 + 160);
    uint64_t v23 = *(void *)(v1 + 80);
    uint64_t v24 = *(void *)(v1 + 72);
    uint64_t v25 = *(void *)(v1 + 88);
    uint64_t v11 = sub_A5E8(22LL);
    uint64_t v12 = (void *)sub_A5E8(8LL);
    uint64_t v22 = sub_A5E8(32LL);
    uint64_t v26 = v22;
    *(_DWORD *)uint64_t v11 = 136315394;
    *(void *)(v1 + 40) = sub_39178(0xD00000000000001CLL, 0x8000000000144410LL, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 40, v1 + 48, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2112;
    swift_errorRetain(v10);
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError(v10);
    *(void *)(v1 + 48) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 56, v11 + 14, v11 + 22);
    *uint64_t v12 = v13;
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl(&dword_0, v8, v9, "Could not execute %s. Error: %@", (uint8_t *)v11, 0x16u);
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v12);
    sub_5050((uint64_t)v12);
    sub_A81C(v22);
    sub_5050(v22);
    sub_5050(v11);

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  }

  else
  {
    uint64_t v14 = *(void *)(v1 + 160);
    uint64_t v16 = *(void *)(v1 + 80);
    uint64_t v15 = *(void *)(v1 + 88);
    uint64_t v17 = *(void *)(v1 + 72);
    swift_errorRelease(v14);
    swift_errorRelease(v14);

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }

  uint64_t v18 = *(void *)(v1 + 160);
  uint64_t v19 = *(uint64_t **)(v1 + 56);
  FlowTaskLogger.taskFailed()();
  v19[3] = (uint64_t)&type metadata for GenericErrorFlow;
  v19[4] = sub_A178();
  uint64_t v20 = sub_20308((uint64_t)&unk_17D158, 176LL);
  uint64_t *v19 = v20;
  sub_5A9C0((uint64_t *)(v20 + 16));
  swift_errorRelease(v18);
  sub_3C73C();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  return sub_3C6E4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_3AD40(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v4 + 64) = a3;
  *(void *)(v4 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v3;
  *(_BYTE *)(v4 + 160) = a2;
  *(void *)(v4 + 56) = a1;
  uint64_t v5 = type metadata accessor for OutputFlow(0LL);
  *(void *)(v4 + 80) = v5;
  *(void *)(v4 + 88) = sub_A5C0(*(void *)(v5 - 8));
  uint64_t v6 = sub_494C(&qword_189D00);
  *(void *)(v4 + 96) = sub_A5C0(*(void *)(v6 - 8));
  uint64_t v7 = sub_494C(&qword_18AFC0);
  *(void *)(v4 + 104) = sub_D8CC(*(void *)(v7 - 8));
  *(void *)(v4 + 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  uint64_t v8 = sub_3C798();
  *(void *)(v4 + 120) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v4 + 128) = v9;
  *(void *)(v4 + 136) = sub_A5C0(v9);
  uint64_t v10 = type metadata accessor for AppPunchOutFlow(0LL);
  *(void *)(v4 + 144) = v10;
  *(void *)(v4 + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5C0(*(void *)(v10 - 8));
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_3ADF4()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v30 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v27 = *(void *)(v0 + 96);
  uint64_t v28 = *(void *)(v0 + 112);
  uint64_t v5 = *(void **)(v0 + 72);
  uint64_t v32 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v33 = *(uint64_t **)(v0 + 56);
  uint64_t v34 = *(void *)(v0 + 104);
  uint64_t v29 = *(void *)(v0 + 88);
  uint64_t v7 = v5[4];
  uint64_t v8 = v5[5];
  unsigned __int8 v26 = *(_BYTE *)(v0 + 160);
  sub_3C788(v5 + 1);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 16))(v35, v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v6, v4);
  AppPunchOutFlow.init(aceService:url:instrumentationTask:)(v35, v3, 0LL, 0LL);
  sub_A410( &qword_18AFC8,  (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchOutFlow,  (uint64_t)&protocol conformance descriptor for AppPunchOutFlow);
  uint64_t v31 = Flow.eraseToAnyFlow()(v30);
  sub_26F04(v1, (uint64_t (*)(void))&type metadata accessor for AppPunchOutFlow);
  uint64_t v9 = sub_500C(v5 + 6, v5[9]);
  sub_11EC54(*v9);
  uint64_t v10 = sub_27CC8(v26);
  uint64_t v12 = v11;
  String.toSpeakableString.getter(v10, v11);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = type metadata accessor for SpeakableString(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v27, 0LL, 1LL, v13);
  sub_214AC(v27, 0LL);
  swift_release();
  sub_279E0(v27, &qword_189D00);
  sub_3BF9C(v28, v34);
  sub_A304((uint64_t)(v5 + 1), v0 + 16);
  OutputFlow.init(templatingResult:snippets:flowConfig:rrEntities:)(v34, _swiftEmptyArrayStorage, v0 + 16, 0LL);
  sub_A410( &qword_18AFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for OutputFlow,  (uint64_t)&protocol conformance descriptor for OutputFlow);
  uint64_t v14 = Flow.eraseToAnyFlow()(v32);
  sub_26F04(v29, (uint64_t (*)(void))&type metadata accessor for OutputFlow);
  uint64_t v15 = v5[4];
  uint64_t v16 = v5[5];
  sub_500C(v5 + 1, v15);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v16 + 16))(v35, v15, v16);
  uint64_t v17 = sub_494C(&qword_18A460);
  uint64_t v18 = sub_20308(v17, 48LL);
  *(_OWORD *)(v18 + 16) = xmmword_139EC0;
  *(void *)(v18 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v14;
  *(void *)(v18 + 40) = v31;
  uint64_t v36 = v18;
  specialized Array._endMutation()(v18, v19, v20);
  uint64_t v21 = v36;
  uint64_t v22 = type metadata accessor for SequenceFlow(0LL);
  sub_20308(v22, 64LL);
  uint64_t v23 = SequenceFlow.init(aceService:flows:)(v35, v21);
  v33[3] = v22;
  sub_A410( &qword_18AFD8,  (uint64_t (*)(uint64_t))&type metadata accessor for SequenceFlow,  (uint64_t)&protocol conformance descriptor for SequenceFlow);
  v33[4] = v24;
  *uint64_t v33 = v23;
  sub_279E0(v28, &qword_18AFC0);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v28);
  swift_task_dealloc(v34);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3B11C(uint64_t a1)
{
  v2[62] = a1;
  v2[63] = v1;
  uint64_t v3 = sub_3C798();
  v2[64] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[65] = v4;
  v2[66] = sub_A5C0(v4);
  uint64_t v5 = type metadata accessor for CATOption(0LL);
  v2[67] = sub_A5C0(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for DataTypePunchoutFlow.PunchOutAction(0LL);
  v2[68] = sub_D8CC(*(void *)(v6 - 8));
  v2[69] = sub_A5B8();
  uint64_t v7 = sub_D984();
  v2[70] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[71] = v8;
  _BYTE v2[72] = sub_A5C0(v8);
  sub_A964();
  return sub_A5D0();
}

void sub_3B1A8(uint64_t a1)
{
  uint64_t v2 = v1[72];
  uint64_t v3 = v1[71];
  uint64_t v4 = v1[70];
  uint64_t v5 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v5, (uint64_t)(v1 + 58));
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v22 = v1[71];
    uint64_t v23 = v1[70];
    uint64_t v24 = v1[72];
    uint64_t v9 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v10 = sub_A5E8(32LL);
    uint64_t v25 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    v1[61] = sub_39178(0xD000000000000014LL, 0x8000000000139EE0LL, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 61, v1 + 62, v9 + 4, v9 + 12);
    _os_log_impl(&dword_0, v7, v8, "Executing %s", v9, 0xCu);
    sub_A81C(v10);
    sub_5050(v10);
    sub_5050((uint64_t)v9);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, v23);
  }

  else
  {
    uint64_t v11 = v1[72];
    uint64_t v12 = v1[71];
    uint64_t v13 = v1[70];

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }

  uint64_t v14 = (_BYTE *)v1[69];
  uint64_t v15 = v1[68];
  uint64_t v16 = (void *)v1[63];
  uint64_t v17 = v16[4];
  uint64_t v18 = v16[5];
  unsigned int v19 = *(unsigned __int16 *)v16;
  sub_3C788(v16 + 1);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
  sub_3B774(v19, v1 + 48, v14);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1 + 48);
  sub_3BF1C((uint64_t)v14, v15);
  uint64_t v20 = sub_494C(&qword_18AFA8);
  uint64_t v21 = (char *)sub_3B3D0 + 4 * byte_139ED0[_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v15, 3LL, v20)];
  __asm { BR              X10 }

uint64_t sub_3B3D0()
{
  uint64_t v2 = (char *)v1[68];
  char v3 = *v2;
  (*(void (**)(void, char *, void))(v1[65] + 32LL))(v1[66], &v2[*(int *)(v0 + 48)], v1[64]);
  FlowTaskLogger.taskCompleted()();
  uint64_t v4 = (void *)swift_task_alloc(dword_18AFB4);
  v1[74] = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_3B698;
  return sub_3AD40((uint64_t)(v1 + 43), v3, v1[66]);
}

uint64_t sub_3B454()
{
  uint64_t v3 = *(void *)(v1 + 552);
  uint64_t v4 = *(void *)(v1 + 536);
  sub_ADD58(v2);
  type metadata accessor for WellnessCATPatternsExecutor(0LL);
  sub_3C77C();
  uint64_t v5 = sub_AAF0(v4);
  *(void *)(v1 + 80) = v0;
  *(void *)(v1 + 88) = &off_17DC48;
  *(void *)(v1 + 56) = v5;
  type metadata accessor for WellnessLoggingCATPatternsExecutor(0LL);
  sub_3C77C();
  uint64_t v6 = sub_AAF0(v4);
  *(void *)(v1 + 120) = v0;
  *(void *)(v1 + 128) = &off_1806B8;
  *(void *)(v1 + 96) = v6;
  type metadata accessor for WellnessQueryingCATPatternsExecutor(0LL);
  sub_3C77C();
  uint64_t v7 = sub_AAF0(v4);
  *(void *)(v1 + 160) = v0;
  *(void *)(v1 + 168) = &off_17D960;
  *(void *)(v1 + 136) = v7;
  *(_BYTE *)(v1 + sub_20004(v6, v1 + 176) = 0;
  sub_1FF94();
  static ExecuteResponse.complete<A>(next:)(v2);
  sub_1FFD0(v2);
  sub_26F04(v3, type metadata accessor for DataTypePunchoutFlow.PunchOutAction);
  sub_3C6CC();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  return sub_3C6E4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_3B57C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_18AFBC);
  *(void *)(v0 + 584) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_3B5CC;
  return sub_3A83C(v0 + 424);
}

uint64_t sub_3B5CC()
{
  return sub_A5D0();
}

uint64_t sub_3B608()
{
  uint64_t v1 = *(void *)(v0 + 552);
  uint64_t v2 = sub_500C((void *)(v0 + 424), *(void *)(v0 + 448));
  static ExecuteResponse.complete<A>(next:)(v2);
  sub_26F04(v1, type metadata accessor for DataTypePunchoutFlow.PunchOutAction);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 424));
  sub_3C6CC();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3B698()
{
  return sub_A5D0();
}

uint64_t sub_3B6D4()
{
  uint64_t v1 = *(void *)(v0 + 552);
  uint64_t v2 = *(void *)(v0 + 528);
  uint64_t v3 = *(void *)(v0 + 520);
  uint64_t v4 = *(void *)(v0 + 512);
  uint64_t v5 = sub_500C((void *)(v0 + 344), *(void *)(v0 + 368));
  static ExecuteResponse.complete<A>(next:)(v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_26F04(v1, type metadata accessor for DataTypePunchoutFlow.PunchOutAction);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 344));
  sub_3C6CC();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  return sub_3C700(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_3B774@<X0>(unsigned int a1@<W0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned int v103 = a1;
  uint64_t v104 = a3;
  uint64_t v5 = sub_D984();
  uint64_t v101 = *(void *)(v5 - 8);
  uint64_t v102 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  os_log_type_t v8 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v100 = (char *)&v97 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v99 = (char *)&v97 - v12;
  __chkstk_darwin(v11);
  uint64_t v98 = (char *)&v97 - v13;
  sub_494C(&qword_189BA0);
  sub_6D20();
  __chkstk_darwin(v14);
  sub_372F4();
  sub_494C(&qword_189CF8);
  sub_6D20();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_3C798();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (os_log_s *)((char *)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v23 = a2[3];
  uint64_t v22 = a2[4];
  sub_3C788(a2);
  char v24 = dispatch thunk of DeviceState.isPhone.getter(v23, v22);
  sub_A304((uint64_t)a2, (uint64_t)v106);
  if ((v24 & 1) != 0)
  {
    uint64_t v25 = _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v106);
  }

  else
  {
    uint64_t v26 = v107;
    uint64_t v27 = v108;
    sub_500C(v106, v107);
    char v28 = dispatch thunk of DeviceState.isPad.getter(v26, v27);
    uint64_t v25 = _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v106);
    if ((v28 & 1) == 0)
    {
      uint64_t v36 = sub_494C(&qword_18AFA8);
      uint64_t v37 = (uint64_t)v104;
      uint64_t v57 = 1LL;
      return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v37, v57, 3LL, v36);
    }
  }

  uint64_t v29 = v103;
  if ((unsigned __int16)v103 == 270)
  {
    uint64_t v30 = Logger.wellness.unsafeMutableAddressor(v25);
    sub_3C69C(v30);
    uint64_t v32 = v101;
    uint64_t v31 = v102;
    uint64_t v33 = (*(uint64_t (**)(char *, os_log_s *, uint64_t))(v101 + 16))(v8, v21, v102);
    Logger.logObject.getter(v33);
    os_log_type_t v34 = sub_3C790();
    if (os_log_type_enabled(v21, v34))
    {
      uint64_t v35 = (uint8_t *)sub_A5E8(2LL);
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl(&dword_0, v21, v34, "Cannot punchout for nil datatype", v35, 2u);
      sub_5050((uint64_t)v35);
    }

    (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v31);
    uint64_t v36 = sub_494C(&qword_18AFA8);
    uint64_t v37 = (uint64_t)v104;
    goto LABEL_25;
  }

  if (qword_189B08 != -1) {
    swift_once(&qword_189B08, sub_1013A8);
  }
  uint64_t v38 = qword_19C3D0;
  swift_bridgeObjectRetain(qword_19C3D0);
  sub_57F38(v29, v38);
  char v40 = v39;
  uint64_t v41 = swift_bridgeObjectRelease(v38);
  if ((v40 & 1) != 0)
  {
    uint64_t v42 = sub_12BAB0(v29);
    if (v42 == 205)
    {
      uint64_t v43 = Logger.wellness.unsafeMutableAddressor(v42);
      sub_3C69C(v43);
      uint64_t v45 = v101;
      uint64_t v44 = v102;
      uint64_t v46 = v99;
      uint64_t v47 = (*(uint64_t (**)(char *, os_log_s *, uint64_t))(v101 + 16))(v99, v21, v102);
      Logger.logObject.getter(v47);
      os_log_type_t v48 = sub_3C790();
      if (sub_3C758(v48))
      {
        uint64_t v49 = sub_A5E8(12LL);
        uint64_t v50 = sub_A5E8(32LL);
        uint64_t v105 = v50;
        uint64_t v51 = sub_3C768(4.8149e-34);
        unint64_t v53 = v52;
        uint64_t v54 = sub_3C7A0(v51, v52);
        sub_3C6B0(v54);
        swift_bridgeObjectRelease(v53);
        sub_3C718(&dword_0, v55, v56, "Expected to create a HealthKit Identifier to punchout for %s");
        sub_3C72C();
        sub_5050(v50);
        sub_5050(v49);
      }

      (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v44);
      goto LABEL_24;
    }

    uint64_t v74 = v42;
    uint64_t v75 = type metadata accessor for DateInterval(0LL);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, 1LL, 1LL, v75);
    sub_F4F10(v74, v3);
    sub_279E0(v3, &qword_189BA0);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v17, 1LL, v18) == 1)
    {
      sub_279E0((uint64_t)v17, &qword_189CF8);
      uint64_t v77 = Logger.wellness.unsafeMutableAddressor(v76);
      sub_3C69C(v77);
      uint64_t v79 = v101;
      uint64_t v78 = v102;
      uint64_t v80 = v98;
      uint64_t v81 = (*(uint64_t (**)(char *, os_log_s *, uint64_t))(v101 + 16))(v98, v21, v102);
      Logger.logObject.getter(v81);
      os_log_type_t v82 = sub_3C790();
      if (sub_3C758(v82))
      {
        uint64_t v83 = (_DWORD *)sub_A5E8(12LL);
        uint64_t v84 = sub_A5E8(32LL);
        uint64_t v105 = v84;
        *uint64_t v83 = 136315138;
        uint64_t v85 = sub_27CC8(v74);
        unint64_t v87 = v86;
        uint64_t v88 = sub_3C7A0(v85, v86);
        sub_3C6B0(v88);
        swift_bridgeObjectRelease(v87);
        sub_3C718(&dword_0, v89, v90, "Cannot create a punchout url for %s");
        sub_3C72C();
        sub_5050(v84);
        sub_5050((uint64_t)v83);

        (*(void (**)(char *, uint64_t))(v79 + 8))(v98, v78);
      }

      else
      {

        (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v78);
      }

uint64_t sub_3BDD8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v5 = sub_AAF0(v2);
  a1[8] = v1;
  a1[9] = (uint64_t)&off_17DC48;
  a1[5] = v5;
  type metadata accessor for WellnessLoggingCATPatternsExecutor(0LL);
  sub_36E30();
  uint64_t v6 = sub_AAF0(v2);
  a1[13] = v1;
  a1[14] = (uint64_t)&off_1806B8;
  a1[10] = v6;
  type metadata accessor for WellnessQueryingCATPatternsExecutor(0LL);
  sub_36E30();
  uint64_t result = sub_AAF0(v2);
  a1[18] = v1;
  a1[19] = (uint64_t)&off_17D960;
  a1[15] = result;
  return result;
}

uint64_t sub_3BE94(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18AFA4);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1FF58;
  return sub_3B11C(a1);
}

uint64_t type metadata accessor for DataTypePunchoutFlow.PunchOutAction(uint64_t a1)
{
  uint64_t result = qword_18B058;
  if (!qword_18B058) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DataTypePunchoutFlow.PunchOutAction);
  }
  return result;
}

uint64_t sub_3BF1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataTypePunchoutFlow.PunchOutAction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_3BF60()
{
  return swift_deallocObject(v0, 176LL, 7LL);
}

uint64_t sub_3BF9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_18AFC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_3BFE4()
{
  unint64_t result = qword_18AFE0;
  if (!qword_18AFE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_139F18, &type metadata for DataTypePunchoutFlow);
    atomic_store(result, (unint64_t *)&qword_18AFE0);
  }

  return result;
}

uint64_t *sub_3C020(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else
  {
    uint64_t v7 = sub_494C(&qword_18AFA8);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 3LL, v7))
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      uint64_t v9 = *(int *)(v7 + 48);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 3LL, v7);
    }
  }

  return a1;
}

uint64_t sub_3C0F8(uint64_t a1)
{
  uint64_t v2 = sub_494C(&qword_18AFA8);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 3LL, v2);
  if (!(_DWORD)result)
  {
    uint64_t v4 = a1 + *(int *)(v2 + 48);
    uint64_t v5 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }

  return result;
}

_BYTE *sub_3C164(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6 = sub_494C(&qword_18AFA8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 3LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(v6 + 48);
    uint64_t v8 = &a1[v7];
    uint64_t v9 = &a2[v7];
    uint64_t v10 = type metadata accessor for URL(0LL);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 3LL, v6);
  }

  return a1;
}

_BYTE *sub_3C218(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6 = sub_494C(&qword_18AFA8);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 3LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 3LL, v6);
  if (!v7)
  {
    if (!v8)
    {
      *a1 = *a2;
      uint64_t v14 = *(int *)(v6 + 48);
      uint64_t v15 = &a1[v14];
      uint64_t v16 = &a2[v14];
      uint64_t v17 = type metadata accessor for URL(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v17 - 8) + 24LL))(v15, v16, v17);
      return a1;
    }

    sub_279E0((uint64_t)a1, &qword_18AFA8);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  *a1 = *a2;
  uint64_t v9 = *(int *)(v6 + 48);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for URL(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 3LL, v6);
  return a1;
}

_BYTE *sub_3C338(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6 = sub_494C(&qword_18AFA8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 3LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(v6 + 48);
    int v8 = &a1[v7];
    uint64_t v9 = &a2[v7];
    uint64_t v10 = type metadata accessor for URL(0LL);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 3LL, v6);
  }

  return a1;
}

_BYTE *sub_3C3EC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6 = sub_494C(&qword_18AFA8);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 3LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 3LL, v6);
  if (!v7)
  {
    if (!v8)
    {
      *a1 = *a2;
      uint64_t v14 = *(int *)(v6 + 48);
      uint64_t v15 = &a1[v14];
      uint64_t v16 = &a2[v14];
      uint64_t v17 = type metadata accessor for URL(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v17 - 8) + 40LL))(v15, v16, v17);
      return a1;
    }

    sub_279E0((uint64_t)a1, &qword_18AFA8);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  *a1 = *a2;
  uint64_t v9 = *(int *)(v6 + 48);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for URL(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v12 - 8) + 32LL))(v10, v11, v12);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 3LL, v6);
  return a1;
}

uint64_t sub_3C50C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_3C518);
}

uint64_t sub_3C518(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_18AFA8);
  unsigned int v5 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, a2, v4);
  if (v5 >= 4) {
    return v5 - 3;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_3C560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_3C56C);
}

uint64_t sub_3C56C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 3);
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = sub_494C(&qword_18AFA8);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, v5, a3, v6);
}

uint64_t sub_3C5BC(uint64_t a1)
{
  uint64_t v2 = sub_494C(&qword_18AFA8);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 3LL, v2);
}

uint64_t sub_3C5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_18AFA8);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 3LL, v4);
}

uint64_t sub_3C62C(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, &unk_139F80, *(void *)(result - 8) + 64LL);
    swift_initEnumMetadataSinglePayload(a1, 256LL, v4, 3LL);
    return 0LL;
  }

  return result;
}

uint64_t sub_3C69C(uint64_t a1)
{
  return swift_beginAccess(a1, v1 - 144, 0LL, 0LL);
}

uint64_t sub_3C6B0(uint64_t a1)
{
  *(void *)(v3 - 160) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 160, v3 - 152, v2, v1);
}

uint64_t sub_3C6CC()
{
  return swift_task_dealloc(*(void *)(v0 + 576));
}

uint64_t sub_3C6E4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_3C700(uint64_t (*a1)(void))
{
  return a1();
}

void sub_3C718(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_3C72C()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_3C73C()
{
  return (*(uint64_t (**)(void, void))(v0[17] + 8LL))(v0[18], v0[16]);
}

BOOL sub_3C758(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_3C768(float a1)
{
  *uint64_t v1 = a1;
  return sub_10F1C0(v2);
}

uint64_t sub_3C77C()
{
  return static CATOption.defaultMode.getter();
}

void *sub_3C788(void *a1)
{
  return sub_500C(a1, v1);
}

uint64_t sub_3C790()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_3C798()
{
  return type metadata accessor for URL(0LL);
}

uint64_t sub_3C7A0(uint64_t a1, unint64_t a2)
{
  return sub_39178(a1, a2, (uint64_t *)(v2 - 152));
}

uint64_t type metadata accessor for WellnessCATsSimple(uint64_t a1)
{
  uint64_t result = qword_18B068;
  if (!qword_18B068) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WellnessCATsSimple);
  }
  return result;
}

uint64_t sub_3C7E0(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_19C220);
}

uint64_t sub_3C81C(uint64_t a1)
{
  _OWORD v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_494C(&qword_189D00);
  v2[4] = sub_36390(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_3C85C()
{
  uint64_t v2 = sub_494C(&qword_18A6A0);
  uint64_t v3 = sub_20308(v2, 80LL);
  uint64_t v4 = (__n128 *)sub_3D908(v3);
  sub_3D774(v4, (__n128)xmmword_137250);
  sub_3D7C4(v0, v5, &qword_189D00);
  uint64_t v6 = sub_ABF4();
  uint64_t v7 = sub_3D74C(v6);
  if (v8)
  {
    sub_3D7BC(v7, &qword_189D00);
    sub_3D8B0();
  }

  else
  {
    uint64_t v9 = sub_3D7F0();
    sub_3D738((uint64_t)v9);
  }

  uint64_t v10 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 48) = v10;
  sub_3D8F0(v10, (uint64_t)sub_3C90C);
  sub_3D80C();
  unint64_t v11 = sub_3D7FC(28LL);
  return sub_3D6D0(v11, v12, v13, v14);
}

uint64_t sub_3C90C()
{
  if (v0)
  {
    sub_A964();
    return sub_363F8(v1, v2, v3);
  }

  else
  {
    sub_3D880();
    sub_A78C();
    uint64_t v5 = sub_3D7AC();
    return sub_3D6F8(v5, v6);
  }

uint64_t sub_3C954(uint64_t a1)
{
  _OWORD v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_494C(&qword_189D00);
  v2[4] = sub_36390(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_3C994()
{
  uint64_t v2 = sub_494C(&qword_18A6A0);
  uint64_t v3 = sub_20308(v2, 80LL);
  uint64_t v4 = sub_3D908(v3);
  *(_OWORD *)(v4 + 16) = xmmword_137250;
  strcpy((char *)(v4 + 32), "activityType");
  *(_BYTE *)(v4 + 45) = 0;
  *(_WORD *)(v4 + 46) = -5120;
  sub_3D7C4(v0, v5, &qword_189D00);
  uint64_t v6 = sub_ABF4();
  uint64_t v7 = sub_3D74C(v6);
  if (v8)
  {
    sub_3D7BC(v7, &qword_189D00);
    sub_3D8B0();
  }

  else
  {
    uint64_t v9 = sub_3D7F0();
    sub_3D738((uint64_t)v9);
  }

  uint64_t v10 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 48) = v10;
  sub_3D8F0(v10, (uint64_t)sub_3CA68);
  sub_3D80C();
  unint64_t v11 = sub_3D7FC(23LL);
  return sub_3D6D0(v11, v12, v13, v14);
}

uint64_t sub_3CA68()
{
  if (v0)
  {
    sub_A964();
    return sub_363F8(v1, v2, v3);
  }

  else
  {
    sub_3D880();
    sub_A78C();
    uint64_t v5 = sub_3D7AC();
    return sub_3D6F8(v5, v6);
  }

uint64_t sub_3CAB0()
{
  return sub_202A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_3CAE0()
{
  uint64_t v1 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_3D6C4;
  sub_3D874();
  unint64_t v2 = sub_3D860(24LL);
  return sub_3D72C(v2, v3, v4, v5);
}

uint64_t sub_3CB38()
{
  uint64_t v1 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_3D6C4;
  sub_3D874();
  unint64_t v2 = sub_3D860(49LL);
  return sub_3D72C(v2, v3, v4, v5);
}

uint64_t sub_3CB90(uint64_t a1)
{
  _OWORD v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_494C(&qword_189D00);
  v2[4] = sub_36390(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_3CBD0()
{
  uint64_t v2 = sub_494C(&qword_18A6A0);
  uint64_t v3 = sub_20308(v2, 80LL);
  uint64_t v4 = (__n128 *)sub_3D908(v3);
  sub_3D774(v4, (__n128)xmmword_137250);
  sub_3D7C4(v0, v5, &qword_189D00);
  uint64_t v6 = sub_ABF4();
  uint64_t v7 = sub_3D74C(v6);
  if (v8)
  {
    sub_3D7BC(v7, &qword_189D00);
    sub_3D8B0();
  }

  else
  {
    uint64_t v9 = sub_3D7F0();
    sub_3D738((uint64_t)v9);
  }

  uint64_t v10 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 48) = v10;
  sub_3D8F0(v10, (uint64_t)sub_3C90C);
  sub_3D80C();
  unint64_t v11 = sub_3D7FC(17LL);
  return sub_3D6D0(v11, v12, v13, v14);
}

uint64_t sub_3CC80()
{
  uint64_t v1 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_3CCD8;
  sub_3D874();
  unint64_t v2 = sub_3D860(22LL);
  return sub_3D72C(v2, v3, v4, v5);
}

uint64_t sub_3CCD8(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  uint64_t v6 = swift_task_dealloc(v4);
  if (!v1) {
    uint64_t v6 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_3CD2C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = sub_494C(&qword_189D00);
  v3[5] = sub_36390(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_3CD70()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[2];
  uint64_t v3 = sub_494C(&qword_18A6A0);
  uint64_t v4 = (__n128 *)sub_3D81C(v3);
  v0[6] = v4;
  sub_3D774(v4, (__n128)xmmword_138D90);
  sub_3D7C4(v2, v5, &qword_189D00);
  uint64_t v6 = sub_ABF4();
  uint64_t v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1LL, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_3D7BC(v7, &qword_189D00);
    sub_3D8B0();
  }

  else
  {
    char v8 = sub_3D7F0();
    sub_3D738((uint64_t)v8);
  }

  unint64_t v9 = v0[3];
  v4[5].n128_u64[0] = 0xD000000000000014LL;
  v4[5].n128_u64[1] = 0x8000000000144550LL;
  uint64_t v10 = 0LL;
  if (v9)
  {
    uint64_t v10 = type metadata accessor for DialogCalendarRange(0LL);
  }

  else
  {
    v4[6].n128_u64[1] = 0LL;
    v4[7].n128_u64[0] = 0LL;
  }

  v4[6].n128_u64[0] = v9;
  v4[7].n128_u64[1] = v10;
  uint64_t v11 = *((unsigned int *)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:) + 1);
  swift_retain();
  uint64_t v12 = (void *)swift_task_alloc(v11);
  v0[7] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_3CE94;
  uint64_t v13 = sub_3D844(0xD00000000000001BLL);
  return sub_3D6D0(v13, v14, v15, v16);
}

uint64_t sub_3CE94()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56LL);
  *(void *)(*(void *)v1 + 64LL) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    sub_A964();
    return sub_363F8(v3, v4, v5);
  }

  else
  {
    swift_bridgeObjectRelease();
    sub_A78C();
    uint64_t v7 = sub_3D7AC();
    return sub_3D6F8(v7, v8);
  }

uint64_t sub_3CF00()
{
  return sub_202A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_3CF30()
{
  uint64_t v1 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_3D6C4;
  sub_3D874();
  unint64_t v2 = sub_3D860(27LL);
  return sub_3D72C(v2, v3, v4, v5);
}

uint64_t sub_3CF88()
{
  uint64_t v1 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_3D6C4;
  sub_3D874();
  unint64_t v2 = sub_3D860(34LL);
  return sub_3D72C(v2, v3, v4, v5);
}

uint64_t sub_3CFE0(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = sub_494C(&qword_189D00);
  uint64_t v5 = sub_21410(v4);
  v3[6] = sub_3D8FC(v5);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_3D028()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = sub_494C(&qword_18A6A0);
  uint64_t v3 = sub_3D81C(v2);
  v0[7] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_138D90;
  sub_3D828(v3);
  sub_3D7C4(v1, v4, &qword_189D00);
  uint64_t v5 = sub_ABF4();
  uint64_t v6 = sub_3D888(v5);
  if (v7)
  {
    sub_3D7BC(v6, &qword_189D00);
    sub_3D92C();
  }

  else
  {
    *(void *)(v3 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v1;
    char v8 = sub_3D86C();
    sub_3D798((uint64_t)v8);
  }

  uint64_t v10 = v0[3];
  *(void *)(v3 + 80) = 1953066613LL;
  *(void *)(v3 + 88) = 0xE400000000000000LL;
  sub_3D7C4(v10, v9, &qword_189D00);
  uint64_t v11 = sub_3D8CC();
  if (v7)
  {
    sub_3D7BC(v11, &qword_189D00);
    sub_3D92C();
  }

  else
  {
    *(void *)(v3 + 120) = v1;
    uint64_t v12 = sub_3D86C();
    sub_3D798((uint64_t)v12);
  }

  uint64_t v13 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  v0[8] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_3D13C;
  sub_3D80C();
  unint64_t v14 = sub_3D7FC(24LL);
  return sub_3D6D0(v14, v15, v16, v17);
}

uint64_t sub_3D13C()
{
  if (v0)
  {
    sub_A964();
    return sub_363F8(v2, v3, v4);
  }

  else
  {
    sub_3D914();
    sub_A78C();
    swift_task_dealloc(v1);
    uint64_t v6 = sub_3D7AC();
    return sub_3D6F8(v6, v7);
  }

uint64_t sub_3D18C(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 64) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = sub_494C(&qword_189D00);
  *(void *)(v3 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_36390(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_3D1D0()
{
  uint64_t v3 = sub_494C(&qword_18A6A0);
  uint64_t v4 = sub_3D81C(v3);
  uint64_t v5 = sub_3D908(v4);
  *(_OWORD *)(v5 + 16) = xmmword_138D90;
  sub_3D828(v5);
  sub_3D7C4(v0, v6, &qword_189D00);
  uint64_t v7 = sub_ABF4();
  uint64_t v8 = sub_3D74C(v7);
  if (v9)
  {
    sub_3D7BC(v8, &qword_189D00);
    sub_3D8B0();
  }

  else
  {
    uint64_t v10 = sub_3D7F0();
    sub_3D738((uint64_t)v10);
  }

  char v11 = *(_BYTE *)(v1 + 64);
  *(void *)(v2 + 80) = 0xD000000000000010LL;
  *(void *)(v2 + 88) = 0x80000000001444C0LL;
  *(void *)(v2 + 120) = &type metadata for Bool;
  *(_BYTE *)(v2 + 96) = v11;
  uint64_t v12 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 48) = v12;
  sub_3D8F0(v12, (uint64_t)sub_3CA68);
  uint64_t v13 = sub_3D844(0xD000000000000014LL);
  return sub_3D6D0(v13, v14, v15, v16);
}

uint64_t sub_3D2B0(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = sub_494C(&qword_189D00);
  uint64_t v5 = sub_21410(v4);
  v3[6] = sub_3D8FC(v5);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_3D2F8()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = sub_494C(&qword_18A6A0);
  uint64_t v3 = sub_3D81C(v2);
  v0[7] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_138D90;
  *(void *)(v3 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 1953066613LL;
  *(void *)(v3 + 40) = 0xE400000000000000LL;
  sub_3D7C4(v1, v4, &qword_189D00);
  uint64_t v5 = sub_ABF4();
  uint64_t v6 = sub_3D888(v5);
  if (v7)
  {
    sub_3D7BC(v6, &qword_189D00);
    sub_3D92C();
  }

  else
  {
    *(void *)(v3 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v1;
    uint64_t v8 = sub_3D86C();
    sub_3D798((uint64_t)v8);
  }

  uint64_t v10 = v0[3];
  *(void *)(v3 + 80) = 0xD000000000000016LL;
  *(void *)(v3 + 88) = 0x8000000000144460LL;
  sub_3D7C4(v10, v9, &qword_189D00);
  uint64_t v11 = sub_3D8CC();
  if (v7)
  {
    sub_3D7BC(v11, &qword_189D00);
    sub_3D92C();
  }

  else
  {
    *(void *)(v3 + 120) = v1;
    uint64_t v12 = sub_3D86C();
    sub_3D798((uint64_t)v12);
  }

  uint64_t v13 = (void *)sub_3D6E4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  v0[8] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_3D428;
  sub_3D80C();
  unint64_t v14 = sub_3D7FC(19LL);
  return sub_3D6D0(v14, v15, v16, v17);
}

uint64_t sub_3D428()
{
  if (v0)
  {
    sub_A964();
    return sub_363F8(v2, v3, v4);
  }

  else
  {
    sub_3D914();
    sub_A78C();
    swift_task_dealloc(v1);
    uint64_t v6 = sub_3D7AC();
    return sub_3D6F8(v6, v7);
  }

uint64_t sub_3D478()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRelease();
  sub_A78C();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3D4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_3D500(a1, a2, a3);
}

uint64_t sub_3D500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_6D44();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_494C(&qword_189CF8);
  __chkstk_darwin(v11);
  sub_6D44();
  uint64_t v14 = v13 - v12;
  sub_217DC(a1, v13 - v12, &qword_189CF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  uint64_t v15 = CATWrapperSimple.init(templateDir:options:globals:)(v14, v10, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_2012C(a1, &qword_189CF8);
  return v15;
}

uint64_t sub_3D604(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_6D44();
  uint64_t v8 = v7 - v6;
  sub_3D8BC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  uint64_t v9 = CATWrapperSimple.init(useResponseMode:options:)(a1, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  return v9;
}

uint64_t sub_3D6A8()
{
  uint64_t v0 = CATWrapperSimple.deinit();
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t sub_3D6D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_3D6E4@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t sub_3D6F8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_3D708()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 48);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 56) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_3D72C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_3D738(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))(a1, v2, v1);
}

uint64_t sub_3D74C(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1LL, a1);
}

__n128 *sub_3D774(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x6570795461746164LL;
  result[2].n128_u64[1] = 0xE800000000000000LL;
  return result;
}

uint64_t sub_3D798(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))(a1, v2, v1);
}

uint64_t sub_3D7AC()
{
  return v0;
}

uint64_t sub_3D7BC(uint64_t a1, uint64_t *a2)
{
  return sub_2012C(v2, a2);
}

uint64_t sub_3D7C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_217DC(a1, v3, a3);
}

uint64_t sub_3D7CC()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 64);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0;
  return swift_task_dealloc(v5);
}

void *sub_3D7F0()
{
  *(void *)(v2 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v1;
  return sub_B76C(v0);
}

unint64_t sub_3D7FC(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

  ;
}

uint64_t sub_3D81C(uint64_t a1)
{
  return swift_allocObject(a1, 128LL, 7LL);
}

uint64_t sub_3D828(uint64_t result)
{
  *(void *)(result + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0x6570797461746164LL;
  *(void *)(result + 40) = 0xE800000000000000LL;
  return result;
}

uint64_t sub_3D844@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

unint64_t sub_3D860(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

void *sub_3D86C()
{
  return sub_B76C(v0);
}

  ;
}

uint64_t sub_3D880()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 40));
}

uint64_t sub_3D888(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1LL, a1);
}

double sub_3D8B0()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t sub_3D8BC()
{
  return swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
}

uint64_t sub_3D8CC()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1LL, v0);
}

void *sub_3D8F0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *double result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_3D8FC(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  return swift_task_alloc(v1);
}

uint64_t sub_3D908(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t sub_3D914()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 56));
}

  ;
}

double sub_3D92C()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t isLoggingTask(from:)()
{
  uint64_t v0 = sub_3D9A4((uint64_t)v19, (uint64_t)v17);
  if (v18)
  {
    uint64_t v3 = sub_41A38();
    uint64_t v6 = sub_418A8(v3, v4, (uint64_t)&type metadata for Any + 8, v3, v5);
    if ((v6 & 1) != 0)
    {
      sub_41BD8(v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
      return 1LL;
    }
  }

  else
  {
    sub_418C4(v0, &qword_18AA78, v1, v2);
  }

  return 0LL;
}

uint64_t sub_3D9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_18AA78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void isQueryingTask(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = sub_41A4C(a1, a2, a3, a4, a5, a6);
  sub_418B8((uint64_t)v6, v7, &qword_18AA78, v8, v9);
  if (v45)
  {
    uint64_t v13 = sub_41B48();
    uint64_t v15 = sub_41890(v13, v14);
    if ((v15 & 1) != 0)
    {
      uint64_t v23 = sub_41BD8(v15, v16, v17, v18, v19, v20, v21, v22, v43, v44);
      sub_41920(v23, &qword_18AA78, v24, v25, v26, v27, v28, v29);
      goto LABEL_10;
    }
  }

  else
  {
    sub_418C4(v10, &qword_18AA78, v11, v12);
  }

  uint64_t v30 = sub_41D04(v15, v16);
  if (v45)
  {
    uint64_t v33 = sub_41B40();
    uint64_t v35 = sub_41890(v33, v34);
    if ((v35 & 1) != 0) {
      sub_41BD8(v35, v36, v37, v38, v39, v40, v41, v42, v43, v44);
    }
  }

  else
  {
    sub_418C4(v30, &qword_18AA78, v31, v32);
  }

void isLoggingTimeframeTodayOrNone(from:todayDate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((v12 & 1) == 0) {
    isLoggingTimeframeNone(from:)(a1, v7, v8, v9, v10, v11);
  }
}

void isLoggingTimeframeToday(from:todayDate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = sub_41A4C(a1, a2, a3, a4, a5, a6);
  sub_418B8((uint64_t)v7, v8, &qword_18AA78, v9, v10);
  if (!v52)
  {
    sub_418C4(v11, &qword_18AA78, v12, v13);
LABEL_5:
    sub_418B8(v17, v18, &qword_18AA78, v19, v20);
    if (v52)
    {
      uint64_t v24 = sub_41B48();
      uint64_t v27 = sub_418A8(v24, v25, (uint64_t)&type metadata for Any + 8, v24, v26);
      if ((v27 & 1) != 0)
      {
        sub_363E8();
        dispatch thunk of Uso_VerbTemplate_Reference.reference.getter(v51);
        goto LABEL_12;
      }
    }

    else
    {
      sub_418C4(v21, &qword_18AA78, v22, v23);
    }

    sub_418B8(v27, v28, &qword_18AA78, v29, v30);
    if (v52)
    {
      uint64_t v34 = sub_41B40();
      uint64_t v37 = sub_418A8(v34, v35, (uint64_t)&type metadata for Any + 8, v34, v36);
      if ((v37 & 1) != 0)
      {
        sub_363E8();
        dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter(v51);
        goto LABEL_12;
      }
    }

    else
    {
      sub_418C4(v31, &qword_18AA78, v32, v33);
    }

    sub_41920(v37, &qword_18AA78, v38, v39, v40, v41, v42, v43);
    goto LABEL_15;
  }

  uint64_t v14 = sub_41A38();
  uint64_t v17 = sub_418A8(v14, v15, (uint64_t)&type metadata for Any + 8, v14, v16);
  if ((v17 & 1) == 0) {
    goto LABEL_5;
  }
  sub_363E8();
  dispatch thunk of Uso_VerbTemplate_Target.target.getter(v51);
LABEL_12:
  sub_3652C();
  isTimeframeToday(from:todayDate:)(v51[0], a2);
  sub_3652C();
  uint64_t v44 = sub_367AC();
  sub_41920(v44, &qword_18AA78, v45, v46, v47, v48, v49, v50);
LABEL_15:
  sub_41978();
}

void getMedStatus(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = sub_41A4C(a1, a2, a3, a4, a5, a6);
  sub_418B8((uint64_t)v6, v7, &qword_18AA78, v8, v9);
  if (!v30[3])
  {
    sub_418C4(v10, &qword_18AA78, v11, v12);
    goto LABEL_5;
  }

  uint64_t v13 = sub_41A38();
  uint64_t v16 = sub_418A8(v13, v14, (uint64_t)&type metadata for Any + 8, v13, v15);
  if ((v16 & 1) == 0)
  {
LABEL_5:
    sub_41920(v16, &qword_18AA78, v17, v18, v19, v20, v21, v22);
    goto LABEL_6;
  }

  sub_363E8();
  dispatch thunk of Uso_VerbTemplate_Target.target.getter(v30);
  sub_3652C();
  getMedStatus(from:)(v30[0]);
  sub_3652C();
  uint64_t v23 = sub_367AC();
  sub_41920(v23, &qword_18AA78, v24, v25, v26, v27, v28, v29);
LABEL_6:
  sub_41978();
}

void isMedicationRequest(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = sub_41A4C(a1, a2, a3, a4, a5, a6);
  sub_418B8((uint64_t)v6, v7, &qword_18AA78, v8, v9);
  if (v95)
  {
    uint64_t v13 = sub_41B48();
    uint64_t v15 = sub_41890(v13, v14);
    if ((v15 & 1) != 0) {
      goto LABEL_43;
    }
  }

  else
  {
    sub_418C4(v10, &qword_18AA78, v11, v12);
  }

  sub_418B8(v15, v16, &qword_18AA78, v18, v19);
  if (v95)
  {
    uint64_t v26 = sub_41A38();
    uint64_t v15 = sub_41890(v26, v27);
    if ((v15 & 1) != 0) {
      goto LABEL_43;
    }
  }

  else
  {
    sub_418C4(v23, &qword_18AA78, v24, v25);
  }

  sub_418B8(v15, v16, &qword_18AA78, v18, v19);
  if (v95)
  {
    uint64_t v31 = type metadata accessor for UsoTask_noVerb_common_MedicationEvent(0LL);
    uint64_t v15 = sub_41890(v31, v32);
    if ((v15 & 1) != 0) {
      goto LABEL_43;
    }
  }

  else
  {
    sub_418C4(v28, &qword_18AA78, v29, v30);
  }

  sub_418B8(v15, v16, &qword_18AA78, v18, v19);
  if (v95)
  {
    uint64_t v36 = sub_41B40();
    uint64_t v15 = sub_41890(v36, v37);
    if ((v15 & 1) != 0) {
      goto LABEL_43;
    }
  }

  else
  {
    sub_418C4(v33, &qword_18AA78, v34, v35);
  }

  sub_418B8(v15, v16, &qword_18AA78, v18, v19);
  if (v95)
  {
    uint64_t v41 = type metadata accessor for UsoTask_snooze_common_MedicationEvent(0LL);
    uint64_t v15 = sub_41890(v41, v42);
    if ((v15 & 1) != 0) {
      goto LABEL_43;
    }
  }

  else
  {
    sub_418C4(v38, &qword_18AA78, v39, v40);
  }

  sub_418B8(v15, v16, &qword_18AA78, v18, v19);
  if (v95)
  {
    uint64_t v46 = type metadata accessor for UsoTask_checkExistence_common_MedicationSchedule(0LL);
    uint64_t v15 = sub_41890(v46, v47);
    if ((v15 & 1) != 0) {
      goto LABEL_43;
    }
  }

  else
  {
    sub_418C4(v43, &qword_18AA78, v44, v45);
  }

  sub_418B8(v15, v16, &qword_18AA78, v18, v19);
  if (v95)
  {
    uint64_t v51 = type metadata accessor for UsoTask_noVerb_common_MedicationSchedule(0LL);
    uint64_t v15 = sub_41890(v51, v52);
    if ((v15 & 1) != 0) {
      goto LABEL_43;
    }
  }

  else
  {
    sub_418C4(v48, &qword_18AA78, v49, v50);
  }

  sub_418B8(v15, v16, &qword_18AA78, v18, v19);
  if (v95)
  {
    uint64_t v56 = type metadata accessor for UsoTask_delete_common_MedicationSchedule(0LL);
    uint64_t v15 = sub_41890(v56, v57);
    if ((v15 & 1) != 0) {
      goto LABEL_43;
    }
  }

  else
  {
    sub_418C4(v53, &qword_18AA78, v54, v55);
  }

  sub_418B8(v15, v16, &qword_18AA78, v18, v19);
  if (v95)
  {
    uint64_t updated = type metadata accessor for UsoTask_update_common_MedicationSchedule(0LL);
    uint64_t v15 = sub_41890(updated, v62);
    if ((v15 & 1) != 0) {
      goto LABEL_43;
    }
  }

  else
  {
    sub_418C4(v58, &qword_18AA78, v59, v60);
  }

  sub_418B8(v15, v16, &qword_18AA78, v18, v19);
  if (v95)
  {
    uint64_t common_MedicationSchedule = type metadata accessor for UsoTask_create_common_MedicationSchedule(0LL);
    uint64_t v15 = sub_41890(common_MedicationSchedule, v67);
    if ((v15 & 1) != 0) {
      goto LABEL_43;
    }
  }

  else
  {
    sub_418C4(v63, &qword_18AA78, v64, v65);
  }

  sub_418B8(v15, v16, &qword_18AA78, v18, v19);
  if (v95)
  {
    uint64_t v71 = type metadata accessor for UsoTask_summarise_common_MedicationSchedule(0LL);
    uint64_t v15 = sub_41890(v71, v72);
    if ((v15 & 1) != 0)
    {
LABEL_43:
      uint64_t v73 = sub_41BD8(v15, v16, v17, v18, v19, v20, v21, v22, v93, v94);
      sub_41920(v73, &qword_18AA78, v74, v75, v76, v77, v78, v79);
      goto LABEL_44;
    }
  }

  else
  {
    sub_418C4(v68, &qword_18AA78, v69, v70);
  }

  uint64_t v80 = sub_41D04(v15, v16);
  if (v95)
  {
    uint64_t v83 = type metadata accessor for UsoTask_request_common_MedicationSchedule(0LL);
    uint64_t v85 = sub_41890(v83, v84);
    if ((v85 & 1) != 0) {
      sub_41BD8(v85, v86, v87, v88, v89, v90, v91, v92, v93, v94);
    }
  }

  else
  {
    sub_418C4(v80, &qword_18AA78, v81, v82);
  }

void isQueryAboutStatusOrSchedule(from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = sub_41A4C(a1, a2, a3, a4, a5, a6);
  sub_418B8((uint64_t)v6, v7, &qword_18AA78, v8, v9);
  if (!v39)
  {
    sub_418C4(v10, &qword_18AA78, v11, v12);
LABEL_5:
    sub_418B8(v15, v16, &qword_18AA78, v17, v18);
    if (v39)
    {
      uint64_t v22 = sub_41B40();
      uint64_t v24 = sub_41890(v22, v23);
      if ((v24 & 1) != 0)
      {
        sub_363E8();
        dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter(v38);
        goto LABEL_8;
      }
    }

    else
    {
      sub_418C4(v19, &qword_18AA78, v20, v21);
    }

    sub_41920(v24, &qword_18AA78, v25, v26, v27, v28, v29, v30);
    goto LABEL_11;
  }

  uint64_t v13 = sub_41B48();
  uint64_t v15 = sub_41890(v13, v14);
  if ((v15 & 1) == 0) {
    goto LABEL_5;
  }
  sub_363E8();
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter(v38);
LABEL_8:
  sub_3652C();
  hasStatusOrSchedule(from:)(v38[0]);
  sub_3652C();
  uint64_t v31 = sub_367AC();
  sub_41920(v31, &qword_18AA78, v32, v33, v34, v35, v36, v37);
LABEL_11:
  sub_41978();
}

void isLoggingTimeframeNone(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = sub_41A4C(a1, a2, a3, a4, a5, a6);
  sub_418B8((uint64_t)v6, v7, &qword_18AA78, v8, v9);
  if (v60)
  {
    uint64_t v13 = sub_41A38();
    uint64_t v15 = sub_41890(v13, v14);
    if ((v15 & 1) != 0)
    {
      uint64_t v23 = sub_41914(v15, v16, v17, v18, v19, v20, v21, v22, v57, v58);
      sub_41A1C(v23, v24);
      goto LABEL_12;
    }
  }

  else
  {
    sub_418C4(v10, &qword_18AA78, v11, v12);
  }

  sub_418B8(v15, v16, &qword_18AA78, v18, v19);
  if (v60)
  {
    uint64_t v28 = sub_41B48();
    uint64_t v30 = sub_41890(v28, v29);
    if ((v30 & 1) != 0)
    {
      uint64_t v38 = sub_41914(v30, v31, v32, v33, v34, v35, v36, v37, v57, v58);
      sub_41B34(v38, v39);
      goto LABEL_12;
    }
  }

  else
  {
    sub_418C4(v25, &qword_18AA78, v26, v27);
  }

  sub_418B8(v30, v31, &qword_18AA78, v33, v34);
  if (!v60)
  {
    sub_418C4(v40, &qword_18AA78, v41, v42);
    goto LABEL_18;
  }

  uint64_t v43 = sub_41B40();
  uint64_t v45 = sub_41890(v43, v44);
  if ((v45 & 1) != 0)
  {
    uint64_t v53 = sub_41914(v45, v46, v47, v48, v49, v50, v51, v52, v57, v58);
    sub_41B28(v53, v54);
LABEL_12:
    uint64_t v55 = sub_37034();
    if (v59)
    {
      uint64_t v56 = dispatch thunk of UsoEntity_common_MedicationEvent.dateTime.getter(v55);
      sub_37034();
      uint64_t v45 = sub_3652C();
      if (v56) {
        uint64_t v45 = sub_367AC();
      }
    }

    else
    {
      uint64_t v45 = sub_37034();
    }
  }

LABEL_18:
  sub_41920(v45, &qword_18AA78, v47, v48, v49, v50, v51, v52);
  sub_41978();
}

  uint64_t v11 = *(void *)(v1 + 16);
  if (!((unint64_t)v11 >> 62))
  {
    uint64_t v12 = *(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFF8LL));
    sub_134E5C();
    if (v12) {
      goto LABEL_20;
    }
LABEL_26:
    sub_2A184();
    goto LABEL_27;
  }

  if (v11 < 0) {
    uint64_t v17 = *(void *)(v1 + 16);
  }
  else {
    uint64_t v17 = v11 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_134E5C();
  if (!_CocoaArrayWrapper.endIndex.getter(v17)) {
    goto LABEL_26;
  }
LABEL_20:
  sub_134E64();
  uint64_t v13 = (void *)sub_41D50();
  sub_2A184();
  sub_134BE4(v13, (SEL *)&selRef_name);
  if (v15)
  {
    String.toSpeakableString.getter(v14, v15);
    sub_2A184();
    uint64_t v16 = 0LL;
    goto LABEL_28;
  }

void getLocalizedMedName(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = sub_41A4C(a1, a2, a3, a4, a5, a6);
  sub_418B8((uint64_t)v6, v7, &qword_18AA78, v8, v9);
  if (v67)
  {
    uint64_t v13 = sub_41A38();
    uint64_t v15 = sub_41890(v13, v14);
    if ((v15 & 1) != 0)
    {
      uint64_t v23 = sub_41914(v15, v16, v17, v18, v19, v20, v21, v22, v63, v64);
      sub_41A1C(v23, v24);
LABEL_12:
      uint64_t v55 = sub_37034();
      if (!v66) {
        goto LABEL_19;
      }
      uint64_t v56 = dispatch thunk of UsoEntity_common_MedicationEvent.medicationSchedule.getter(v55);
      sub_3652C();
      if (!v56) {
        goto LABEL_19;
      }
      uint64_t v57 = sub_41B90();
      sub_367AC();
      if (!v57) {
        goto LABEL_19;
      }
      sub_41B74();
      if (v59)
      {
        sub_419A4();
        uint64_t v62 = sub_41B80();
        sub_249D4();
        if (v62)
        {
LABEL_17:
          sub_41948();
          sub_370B0();
          uint64_t v60 = sub_249D4();
          sub_41AA4(v60);
          sub_367AC();
          if (v65)
          {
            uint64_t v61 = sub_41A9C();
            dispatch thunk of UsoEntity_common_Medication.name.getter(v61);
            sub_37034();
            uint64_t v45 = sub_41AD0(v65);
            goto LABEL_23;
          }

LABEL_19:
          uint64_t v45 = sub_37034();
          goto LABEL_23;
        }
      }

      else if (*(void *)(v58 + 16))
      {
        goto LABEL_17;
      }

      sub_37034();
      uint64_t v45 = sub_249D4();
      goto LABEL_23;
    }
  }

  else
  {
    sub_418C4(v10, &qword_18AA78, v11, v12);
  }

  sub_418B8(v15, v16, &qword_18AA78, v18, v19);
  if (v67)
  {
    uint64_t v28 = sub_41B48();
    uint64_t v30 = sub_41890(v28, v29);
    if ((v30 & 1) != 0)
    {
      uint64_t v38 = sub_41914(v30, v31, v32, v33, v34, v35, v36, v37, v63, v64);
      sub_41B34(v38, v39);
      goto LABEL_12;
    }
  }

  else
  {
    sub_418C4(v25, &qword_18AA78, v26, v27);
  }

  sub_418B8(v30, v31, &qword_18AA78, v33, v34);
  if (!v67)
  {
    sub_418C4(v40, &qword_18AA78, v41, v42);
    goto LABEL_23;
  }

  uint64_t v43 = sub_41B40();
  uint64_t v45 = sub_41890(v43, v44);
  if ((v45 & 1) != 0)
  {
    uint64_t v53 = sub_41914(v45, v46, v47, v48, v49, v50, v51, v52, v63, v64);
    sub_41B28(v53, v54);
    goto LABEL_12;
  }

  sub_398E0(0LL, (v5 & 0xC000000000000001LL) == 0, v5);
  if ((v5 & 0xC000000000000001LL) != 0) {
    sub_41D50();
  }
  else {
    sub_8E1B0();
  }
  sub_2A184();
  dispatch thunk of CodeGenListEntry.entry.getter(&v8);
  sub_367AC();
  sub_3652C();
  return v8;
}

LABEL_23:
  sub_41920(v45, &qword_18AA78, v47, v48, v49, v50, v51, v52);
  sub_41978();
}

    sub_ABF08();
    uint64_t v65 = v145;
    uint64_t v66 = v153;
    (*(void (**)(uint64_t, void, uint64_t))(v145 + 104))( v153,  enum case for Calendar.Component.year(_:),  v55);
    uint64_t v67 = Calendar.component(_:from:)(v66, v54);
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v66, v55);
    sub_ABE38();
    if (v56 == v67) {
      uint64_t v68 = v61;
    }
    else {
      uint64_t v68 = 1;
    }
    LODWORD(v146) = v68;
    if (v52)
    {
      uint64_t v69 = sub_ABE50();
      uint64_t v70 = v69;
      if (v69)
      {
        uint64_t v67 = v69;
        dispatch thunk of UsoEntity_common_DateTime.date.getter();
        uint64_t v71 = sub_ABE18();
        uint64_t v70 = dispatch thunk of UsoEntity_common_Date.monthOfYear.getter(v71);
        uint64_t v72 = sub_3652C();
        if (v70)
        {
          uint64_t v67 = v70;
          dispatch thunk of UsoEntity_common_MonthOfYear.integerValue.getter(v72);
          uint64_t v73 = sub_ABE18();
          uint64_t v70 = dispatch thunk of UsoEntity_common_Integer.integerValue.getter(v73);
          uint64_t v75 = v74;
          sub_3652C();
          uint64_t v76 = v75 & 1;
          goto LABEL_32;
        }
      }
    }

    else
    {
      uint64_t v70 = 0LL;
    }

    uint64_t v76 = 1;
LABEL_32:
    uint64_t v77 = sub_ABF08();
    sub_ABE7C(v77, enum case for Calendar.Component.month(_:));
    sub_ABE60();
    sub_ABE94();
    sub_ABE38();
    if (v70 == v67) {
      uint64_t v78 = v76;
    }
    else {
      uint64_t v78 = 1;
    }
    LODWORD(v145) = v78;
    if (v52 && sub_ABE50())
    {
      uint64_t v79 = sub_ABE8C();
      uint64_t v80 = sub_3652C();
      if (v79)
      {
        uint64_t v67 = v79;
        dispatch thunk of UsoEntity_common_Date.dayOfMonth.getter(v80);
        uint64_t v81 = sub_ABE18();
        uint64_t v79 = dispatch thunk of UsoEntity_common_Integer.integerValue.getter(v81);
        uint64_t v83 = v82;
        sub_3652C();
        uint64_t v84 = (v83 & 1) == 0;
        goto LABEL_41;
      }
    }

    else
    {
      uint64_t v79 = 0LL;
    }

    uint64_t v84 = 0;
LABEL_41:
    uint64_t v85 = sub_ABF08();
    sub_ABE7C(v85, enum case for Calendar.Component.day(_:));
    sub_ABE60();
    sub_ABE94();
    uint64_t v86 = sub_ABE38();
    uint64_t v87 = v79 == v67 && v84;
    uint64_t v88 = Logger.wellness.unsafeMutableAddressor(v86);
    swift_beginAccess(v88, v156, 0LL, 0LL);
    uint64_t v90 = v150;
    uint64_t v89 = v151;
    uint64_t v91 = v147;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v150 + 16))(v151, v88, v147);
    uint64_t v92 = swift_retain_n(v52, 2LL);
    uint64_t v93 = (void *)Logger.logObject.getter(v92);
    uint64_t v94 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled((os_log_t)v93, (os_log_type_t)v94))
    {

      swift_release_n(v52, 2LL);
      unsigned int v103 = v143;
      goto LABEL_60;
    }

    LODWORD(v154) = v94;
    uint64_t v95 = swift_slowAlloc(26LL, -1LL);
    *(_DWORD *)uint64_t v95 = 67109888;
    uint64_t v155 = v146 ^ 1;
    uint64_t v97 = sub_ABE44(v95, v96, v95 + 4, v95 + 8);
    *(_WORD *)(v95 + 8) = 1024;
    uint64_t v155 = v145 ^ 1;
    uint64_t v99 = sub_ABE44(v97, v98, v95 + 10, v95 + 14);
    *(_WORD *)(v95 + 14) = 1024;
    LODWORD(v153) = v87;
    uint64_t v155 = v87;
    sub_ABE44(v99, v100, v95 + 16, v95 + 20);
    *(_WORD *)(v95 + 20) = 1024;
    if (v52 && sub_ABE50())
    {
      sub_ABE8C();
      uint64_t v101 = sub_ABE18();
      uint64_t v102 = v140;
      dispatch thunk of UsoEntity_common_Date.definedValue.getter(v101);
      sub_3652C();
      unsigned int v103 = v143;
    }

    else
    {
      uint64_t v102 = v140;
      unsigned int v103 = v143;
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v140, 1LL, 1LL, v143);
    }

    uint64_t v104 = v141;
    (*(void (**)(uint64_t, void, uint64_t))(v149 + 104))( v141,  enum case for UsoEntity_common_Date.DefinedValues.common_Date_Today(_:),  v103);
    sub_ABEC4(v104);
    uint64_t v105 = v136;
    uint64_t v107 = v136 + v106;
    sub_41850(v102, v136, &qword_18B128);
    sub_41850(v104, v107, &qword_18B128);
    sub_ABDFC(v105);
    if (v51)
    {
      sub_ABDFC(v107);
      uint64_t v108 = v140;
      if (v51)
      {
        sub_A4A4(v105, &qword_18B128);
        uint64_t v89 = 1LL;
LABEL_59:
        uint64_t v87 = v153;
        sub_A3758(v141);
        sub_A3758(v108);
        swift_release();
        uint64_t v155 = v89;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v95 + 22, v95 + 26);
        swift_release();
        _os_log_impl( &dword_0,  (os_log_t)v93,  (os_log_type_t)v154,  "isThisYear: %{BOOL}d,\nisThisMonth: %{BOOL}d,\nisThisDay: %{BOOL}d,\ndefinedValue: %{BOOL}d",  (uint8_t *)v95,  0x1Au);
        swift_slowDealloc(v95, -1LL, -1LL);

        uint64_t v90 = v150;
LABEL_60:
        (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v151, v91);
        if (v52 && sub_ABE50() && (sub_ABE8C(), uint64_t v118 = sub_ABE18(), v89))
        {
          uint64_t v119 = v138;
          dispatch thunk of UsoEntity_common_Date.definedValue.getter(v118);
          sub_3652C();
        }

        else
        {
          uint64_t v119 = v138;
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v138, 1LL, 1LL, v103);
        }

        uint64_t v120 = v139;
        uint64_t v121 = v149;
        uint64_t v122 = v137;
        (*(void (**)(uint64_t, void, uint64_t))(v149 + 104))( v137,  enum case for UsoEntity_common_Date.DefinedValues.common_Date_Today(_:),  v103);
        sub_ABEC4(v122);
        uint64_t v124 = v120 + v123;
        sub_41850(v119, v120, &qword_18B128);
        sub_41850(v122, v124, &qword_18B128);
        sub_ABDFC(v120);
        if (!v51)
        {
          sub_ABEE8(v120, &qword_18B128, (uint64_t)&v158);
          sub_ABDFC(v124);
          if (!v125)
          {
            uint64_t v126 = v133;
            uint64_t v127 = sub_ABE70();
            v128(v127);
            sub_A410( &qword_18B148,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_Date.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_Date.DefinedValues);
            sub_ABEB0(v87, v126, v130, v129);
            uint64_t v131 = *(void (**)(uint64_t, uint64_t))(v121 + 8);
            v131(v126, v103);
            sub_A674(v122);
            sub_A674(v119);
            v131(v87, v103);
            sub_A674(v120);
            goto LABEL_73;
          }

          sub_A3758(v122);
          sub_A3758(v119);
          sub_ABEA4(*(uint64_t (**)(uint64_t, uint64_t))(v121 + 8));
LABEL_77:
          sub_A4A4(v120, &qword_18B120);
          goto LABEL_73;
        }

        sub_A674(v122);
        sub_A674(v119);
        sub_ABDFC(v124);
        if (!v51) {
          goto LABEL_77;
        }
        uint64_t v46 = &qword_18B128;
        uint64_t v47 = v120;
LABEL_72:
        sub_A4A4(v47, v46);
        goto LABEL_73;
      }
    }

    else
    {
      sub_ABEE8(v105, &qword_18B128, (uint64_t)&v157);
      sub_ABDFC(v107);
      if (!v109)
      {
        uint64_t v110 = v149;
        uint64_t v111 = v133;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v149 + 32))(v133, v107, v103);
        sub_A410( &qword_18B148,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_Date.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_Date.DefinedValues);
        uint64_t v112 = v105;
        uint64_t v115 = sub_ABEB0(v102, v111, v114, v113);
        uint64_t v116 = *(void (**)(uint64_t, uint64_t))(v110 + 8);
        uint64_t v91 = v147;
        v116(v102, v103);
        uint64_t v117 = v111;
        uint64_t v52 = v148;
        v116(v117, v103);
        sub_A4A4(v112, &qword_18B128);
        uint64_t v89 = v115 & 1;
        uint64_t v108 = v140;
        goto LABEL_59;
      }

      sub_ABEA4(*(uint64_t (**)(uint64_t, uint64_t))(v149 + 8));
      uint64_t v108 = v140;
    }

    sub_A4A4(v105, &qword_18B120);
    uint64_t v89 = 0LL;
    goto LABEL_59;
  }

  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v21 = (uint64_t *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  uint64_t v23 = __OFADD__(v22, 1LL);
  uint64_t v24 = v22 + 1;
  if (v23)
  {
    __break(1u);
LABEL_26:
    uint64_t v25 = sub_494C(&qword_18B170);
    double result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v25);
    __break(1u);
  }

  else
  {
    *(void *)(v20 + 16) = v24;
  }

  return result;
}

  __break(1u);
}

void getUSOMedNames(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = sub_41A4C(a1, a2, a3, a4, a5, a6);
  sub_418B8((uint64_t)v6, v7, &qword_18AA78, v8, v9);
  if (v65)
  {
    uint64_t v13 = sub_41A38();
    uint64_t v15 = sub_41890(v13, v14);
    if ((v15 & 1) != 0)
    {
      uint64_t v23 = sub_41914(v15, v16, v17, v18, v19, v20, v21, v22, v61, v62);
      sub_41A1C(v23, v24);
LABEL_12:
      uint64_t v55 = sub_37034();
      if (!v64) {
        goto LABEL_18;
      }
      uint64_t v56 = dispatch thunk of UsoEntity_common_MedicationEvent.medicationSchedule.getter(v55);
      sub_3652C();
      if (!v56)
      {
LABEL_19:
        getUsoMedNames(from:)(v56);
        sub_37034();
        uint64_t v45 = sub_367AC();
        goto LABEL_21;
      }

      uint64_t v57 = sub_41B90();
      sub_367AC();
      if (!v57)
      {
LABEL_18:
        uint64_t v56 = 0LL;
        goto LABEL_19;
      }

      sub_41B74();
      if (v59)
      {
        sub_419A4();
        uint64_t v56 = sub_41B80();
        sub_249D4();
        if (v56) {
          goto LABEL_17;
        }
      }

      else
      {
        uint64_t v56 = *(void *)(v58 + 16);
        if (v56)
        {
LABEL_17:
          sub_41948();
          sub_370B0();
          uint64_t v60 = sub_249D4();
          sub_41AA4(v60);
          sub_367AC();
          uint64_t v56 = v63;
          goto LABEL_19;
        }
      }

      sub_249D4();
      goto LABEL_19;
    }
  }

  else
  {
    sub_418C4(v10, &qword_18AA78, v11, v12);
  }

  sub_418B8(v15, v16, &qword_18AA78, v18, v19);
  if (v65)
  {
    uint64_t v28 = sub_41B48();
    uint64_t v30 = sub_41890(v28, v29);
    if ((v30 & 1) != 0)
    {
      uint64_t v38 = sub_41914(v30, v31, v32, v33, v34, v35, v36, v37, v61, v62);
      sub_41B34(v38, v39);
      goto LABEL_12;
    }
  }

  else
  {
    sub_418C4(v25, &qword_18AA78, v26, v27);
  }

  sub_418B8(v30, v31, &qword_18AA78, v33, v34);
  if (!v65)
  {
    sub_418C4(v40, &qword_18AA78, v41, v42);
    goto LABEL_21;
  }

  uint64_t v43 = sub_41B40();
  uint64_t v45 = sub_41890(v43, v44);
  if ((v45 & 1) != 0)
  {
    uint64_t v53 = sub_41914(v45, v46, v47, v48, v49, v50, v51, v52, v61, v62);
    sub_41B28(v53, v54);
    goto LABEL_12;
  }

void getMedSchedule(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = sub_41A4C(a1, a2, a3, a4, a5, a6);
  sub_418B8((uint64_t)v6, v7, &qword_18AA78, v8, v9);
  if (v41)
  {
    uint64_t v13 = sub_41A38();
    uint64_t v15 = sub_41890(v13, v14);
    if ((v15 & 1) != 0)
    {
      sub_372CC();
      dispatch thunk of Uso_VerbTemplate_Target.target.getter(v40);
LABEL_12:
      sub_367AC();
      if (v40[0])
      {
        sub_41CB8();
        sub_37034();
      }

      sub_41CF0();
      sub_367AC();
      uint64_t v33 = sub_3652C();
      goto LABEL_16;
    }
  }

  else
  {
    sub_418C4(v10, &qword_18AA78, v11, v12);
  }

  sub_418B8(v15, v16, &qword_18AA78, v17, v18);
  if (v41)
  {
    uint64_t v22 = sub_41B48();
    uint64_t v24 = sub_41890(v22, v23);
    if ((v24 & 1) != 0)
    {
      sub_372CC();
      dispatch thunk of Uso_VerbTemplate_Reference.reference.getter(v40);
      goto LABEL_12;
    }
  }

  else
  {
    sub_418C4(v19, &qword_18AA78, v20, v21);
  }

  sub_418B8(v24, v25, &qword_18AA78, v26, v27);
  if (!v41)
  {
    sub_418C4(v28, &qword_18AA78, v29, v30);
    goto LABEL_16;
  }

  uint64_t v31 = sub_41B40();
  uint64_t v33 = sub_41890(v31, v32);
  if ((v33 & 1) != 0)
  {
    sub_372CC();
    dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter(v40);
    goto LABEL_12;
  }

void getMedScheduleWithDefinedValues(from:deviceState:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v21;
  a20 = v22;
  uint64_t v326 = v23;
  uint64_t v25 = v24;
  sub_494C(&qword_18B118);
  sub_D978();
  __chkstk_darwin(v26);
  sub_6D30();
  uint64_t v28 = sub_41A8C(v27);
  uint64_t v322 = type metadata accessor for UsoEntity_common_DateTimeRange.DefinedValues(v28);
  uint64_t v306 = *(void *)(v322 - 8);
  sub_D978();
  __chkstk_darwin(v29);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v30);
  sub_D9EC();
  uint64_t v32 = sub_41A8C(v31);
  uint64_t v33 = type metadata accessor for Logger(v32);
  uint64_t v329 = *(void *)(v33 - 8);
  uint64_t v330 = v33;
  sub_D978();
  __chkstk_darwin(v34);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v35);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v36);
  sub_1C6B8();
  uint64_t v328 = v37;
  __chkstk_darwin(v38);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v39);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v40);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v41);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v42);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v43);
  sub_D9EC();
  uint64_t v45 = sub_41A8C(v44);
  uint64_t v327 = type metadata accessor for DateInterval(v45);
  uint64_t v315 = *(void *)(v327 - 8);
  sub_D978();
  __chkstk_darwin(v46);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v47);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v48);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v49);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v50);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v51);
  sub_D9EC();
  uint64_t v53 = sub_41A8C(v52);
  uint64_t v325 = type metadata accessor for Date(v53);
  uint64_t v323 = *(void *)(v325 - 8);
  sub_D978();
  __chkstk_darwin(v54);
  sub_6D30();
  uint64_t v324 = v55;
  sub_494C(&qword_189BA0);
  sub_D978();
  __chkstk_darwin(v56);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v57);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v58);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v59);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v60);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v61);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v62);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v63);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v64);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v65);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v66);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v67);
  sub_D9EC();
  uint64_t v69 = sub_41A8C(v68);
  uint64_t v319 = type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange(v69);
  uint64_t v318 = *(void *)(v319 - 8);
  sub_D978();
  __chkstk_darwin(v70);
  sub_6D30();
  uint64_t v72 = sub_41A8C(v71);
  uint64_t v317 = type metadata accessor for DateTime.Date.DefinedDate(v72);
  uint64_t v316 = *(void *)(v317 - 8);
  sub_D978();
  __chkstk_darwin(v73);
  sub_6D30();
  uint64_t v75 = sub_41A8C(v74);
  uint64_t v76 = type metadata accessor for UsoEntity_common_Date.DefinedValues(v75);
  uint64_t v77 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  sub_41C68();
  uint64_t v78 = sub_494C(&qword_18B120);
  sub_D978();
  __chkstk_darwin(v79);
  uint64_t v81 = (char *)v299 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_494C(&qword_18B128);
  sub_D978();
  __chkstk_darwin(v82);
  sub_AA58();
  uint64_t v85 = v83 - v84;
  uint64_t v87 = __chkstk_darwin(v86);
  uint64_t v89 = (char *)v299 - v88;
  __chkstk_darwin(v87);
  uint64_t v91 = (char *)v299 - v90;
  uint64_t v92 = static UsoTask_CodegenConverter.convert(task:)(&v337);
  sub_41D68((uint64_t)v92, v93, &qword_18AA78);
  if (!v334)
  {
    sub_A4A4((uint64_t)&v332, &qword_18AA78);
    goto LABEL_113;
  }

  uint64_t v94 = sub_41A38();
  uint64_t v95 = sub_24A30((uint64_t)v336, (uint64_t)&v332, (uint64_t)&type metadata for Any + 8, v94);
  if ((v95 & 1) == 0)
  {
LABEL_113:
    sub_41AB0(v95, &qword_18AA78);
    sub_494C(&qword_18B130);
    sub_41C80();
    goto LABEL_114;
  }

  v299[0] = v25;
  uint64_t v96 = v336[0];
  sub_363E8();
  dispatch thunk of Uso_VerbTemplate_Target.target.getter(&v332);
  v299[1] = v96;
  uint64_t v97 = sub_3652C();
  uint64_t v98 = v332;
  if (!v332) {
    goto LABEL_17;
  }
  dispatch thunk of UsoEntity_common_MedicationEvent.medicationSchedule.getter(v97);
  uint64_t v99 = sub_41BA0();
  uint64_t v98 = dispatch thunk of UsoEntity_common_MedicationSchedule.schedule.getter(v99);
  uint64_t v100 = sub_3652C();
  if (!v98) {
    goto LABEL_17;
  }
  uint64_t v101 = v98;
  dispatch thunk of UsoEntity_common_RecurringDateTime.recurrenceDateTimes.getter(v100);
  sub_41BA0();
  sub_41B74();
  if (!v103)
  {
    uint64_t v98 = *(void *)(v102 + 16);
    if (v98) {
      goto LABEL_7;
    }
LABEL_16:
    sub_249D4();
    goto LABEL_17;
  }

  if (v98 >= 0) {
    uint64_t v98 = v102;
  }
  swift_bridgeObjectRetain(v101);
  uint64_t v98 = _CocoaArrayWrapper.endIndex.getter(v98);
  sub_249D4();
  if (!v98) {
    goto LABEL_16;
  }
LABEL_7:
  sub_41C20();
  if ((v101 & 0xC000000000000001LL) != 0) {
    sub_370B0();
  }
  else {
    swift_retain();
  }
  sub_249D4();
  dispatch thunk of CodeGenListEntry.entry.getter(v336);
  uint64_t v104 = swift_release();
  uint64_t v98 = v336[0];
  if (v336[0])
  {
    dispatch thunk of UsoEntity_common_DateTime.date.getter(v104);
    uint64_t v105 = sub_41BA0();
    dispatch thunk of UsoEntity_common_Date.definedValue.getter(v105);
    sub_3652C();
    goto LABEL_18;
  }

LABEL_100:
          if (!v181)
          {
            uint64_t v271 = Logger.wellness.unsafeMutableAddressor(v245);
            sub_A5DC(v271, (uint64_t)&v332);
            os_log_type_t v272 = v320[0];
            uint64_t v273 = sub_41CCC(v320[0], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v133 + 16));
            uint64_t v274 = (os_log_s *)Logger.logObject.getter(v273);
            os_log_type_t v275 = static os_log_type_t.debug.getter();
            if (sub_41C30(v275))
            {
              uint64_t v276 = (uint8_t *)sub_232D0();
              *(_WORD *)uint64_t v276 = 0;
              sub_232EC( &dword_0,  v274,  v272,  "failed to resolve dateTime with meridien in getMedScheduleWithDefinedValues, return nil",  v276);
              sub_5050((uint64_t)v276);
            }

            sub_39BAC();

            uint64_t v95 = (*(uint64_t (**)(uint64_t, uint64_t))(v133 + 8))(v320[0], v85);
            goto LABEL_113;
          }

          uint64_t v252 = swift_retain();
          uint64_t v253 = Logger.wellness.unsafeMutableAddressor(v252);
          sub_A5DC(v253, (uint64_t)v336);
          sub_41D5C(v244);
          uint64_t v254 = swift_retain_n(v181, 2LL);
          uint64_t v255 = (os_log_s *)Logger.logObject.getter(v254);
          os_log_type_t v256 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v255, v256))
          {
            uint64_t v257 = (uint8_t *)sub_A5E8(12LL);
            uint64_t v258 = sub_A5E8(32LL);
            uint64_t v331 = v181;
            uint64_t v332 = v258;
            *(_DWORD *)uint64_t v257 = 136315138;
            uint64_t v322 = v253;
            uint64_t v259 = v181;
            uint64_t v260 = type metadata accessor for DateTime(0LL);
            sub_A410( &qword_18B140,  (uint64_t (*)(uint64_t))&type metadata accessor for DateTime,  (uint64_t)&protocol conformance descriptor for DateTime);
            uint64_t v262 = v261;
            uint64_t v263 = v260;
            uint64_t v181 = v259;
            uint64_t v264 = dispatch thunk of CustomStringConvertible.description.getter(v263, v262);
            uint64_t v266 = sub_41D3C(v264, v265);
            uint64_t v267 = sub_41D28(v266);
            uint64_t v253 = v322;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v267, v268, v257 + 4, v257 + 12);
            sub_41AD0(v259);
            sub_249D4();
            _os_log_impl(&dword_0, v255, v256, "here's the datetime: %s", v257, 0xCu);
            swift_arrayDestroy(v258, 1LL);
            uint64_t v269 = v258;
            uint64_t v85 = v330;
            sub_5050(v269);
            sub_5050((uint64_t)v257);

            uint64_t v270 = *(void (**)(uint64_t, uint64_t))(v329 + 8);
            v270(v328, v85);
          }

          else
          {

            sub_41AD0(v181);
            uint64_t v270 = *(void (**)(uint64_t, uint64_t))(v133 + 8);
            v270(v244, v85);
          }

          uint64_t v277 = sub_D7EC(v326, (uint64_t)&v332);
          uint64_t v278 = v324;
          Date.init()(v277);
          uint64_t v279 = v320[1];
          sub_10A67C();
          (*(void (**)(uint64_t, uint64_t))(v323 + 8))(v278, v325);
          sub_41B88();
          uint64_t v280 = v314;
          sub_41850(v279, v314, &qword_189BA0);
          uint64_t v281 = v327;
          uint64_t v282 = sub_A614(v280, 1LL, v327);
          if (!v114)
          {
            uint64_t v291 = v299[0];
            uint64_t v292 = v315;
            uint64_t v293 = v311;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v315 + 32))(v311, v280, v281);
            uint64_t v294 = sub_494C(&qword_18B130);
            uint64_t v295 = (void *)(v291 + *(int *)(v294 + 48));
            uint64_t v330 = *(int *)(v294 + 64);
            uint64_t v296 = sub_494C(&qword_18B138);
            uint64_t v297 = DateInterval.start.getter(v296);
            DateInterval.end.getter(v297);
            swift_release();
            sub_41AD0(v181);
            sub_41BBC(v293, *(uint64_t (**)(uint64_t, uint64_t))(v292 + 8));
            sub_41BAC(&qword_189BA0, (uint64_t)&a16);
            sub_41AB0(v298, &qword_18AA78);
            _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v291, 0LL, 1LL, v296);
            *uint64_t v295 = 0LL;
            v295[1] = 0LL;
            *(_BYTE *)(v291 + v330) = 0;
            uint64_t v170 = v291;
            uint64_t v171 = 0LL;
            uint64_t v172 = 1LL;
            uint64_t v173 = v294;
            goto LABEL_114;
          }

          sub_A880(v282, &qword_189BA0);
          sub_A5DC(v253, (uint64_t)&v332);
          uint64_t v283 = v312;
          uint64_t v284 = sub_41D5C(v312);
          uint64_t v285 = (void *)v283;
          Logger.logObject.getter(v284);
          os_log_type_t v286 = sub_AB70();
          if (sub_232DC(v286))
          {
            uint64_t v287 = (_WORD *)sub_232D0();
            sub_36DE0(v287);
            sub_41964( &dword_0,  v288,  v289,  "failed to resolve dateInterval with meridien in getMedScheduleWithDefinedValues, return nil");
            uint64_t v290 = v283;
            uint64_t v283 = v312;
            sub_5050(v290);
          }

          sub_39BAC();
          sub_41AD0(v181);

          v270(v283, v85);
          uint64_t v132 = v279;
          goto LABEL_112;
        }

LABEL_88:
        uint64_t v181 = 0LL;
        goto LABEL_89;
      }
    }

    else if (*(void *)((char *)&dword_10 + (v180 & 0xFFFFFFFFFFFFFF8LL)))
    {
      goto LABEL_58;
    }

    sub_2A184();
    goto LABEL_88;
  }

  uint64_t v145 = v306;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v306 + 32))(v307, v144, v134);
  uint64_t v146 = v305;
  sub_41CD8(v305, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v145 + 16));
  uint64_t v147 = (*(uint64_t (**)(uint64_t, uint64_t))(v145 + 88))(v146, v134);
  if ((_DWORD)v147 == enum case for UsoEntity_common_DateTimeRange.DefinedValues.common_DateTimeRange_Afternoon(_:))
  {
    sub_418F0(v147, enum case for DateTime.Date.DefinedDate.today(_:));
    uint64_t v148 = sub_41BF0();
    sub_A72C(v148);
    uint64_t v149 = sub_41AF0();
    sub_418CC(v149, enum case for DateTime.DateTimeRange.DefinedDateTimeRange.afternoon(_:));
    uint64_t v150 = sub_41BE8();
    sub_A72C(v150);
    sub_41AE4();
    uint64_t v151 = sub_41AFC();
    sub_A72C(v151);
    sub_41A08();
    sub_41A7C();
    sub_41B08();
    uint64_t v168 = &v332;
    uint64_t v140 = v304;
    sub_41A54();
    sub_419F4();
    sub_41B88();
    sub_41AD8(v140, &qword_189BA0, (uint64_t)&v330);
    uint64_t v152 = sub_419B4();
    if (!v114)
    {
      sub_41B64();
      sub_41A68(v195);
      sub_494C(&qword_18B138);
      sub_41928();
      sub_41BB4();
      sub_41A28(v98);
      sub_494C(&qword_18B130);
      sub_419E0();
      sub_37034();
      sub_41AB8();
      sub_41BAC(&qword_189BA0, (uint64_t)&v332);
      uint64_t v196 = sub_41988();
      sub_41AB0(v196, &qword_18AA78);
      __int128 v197 = xmmword_13A020;
LABEL_83:
      *(_OWORD *)(v98 + v146) = v197;
      *(_BYTE *)(v98 + v140) = 1;
      uint64_t v170 = v98;
      goto LABEL_49;
    }

    sub_41B5C(v152, &qword_189BA0);
    uint64_t v154 = (void *)Logger.wellness.unsafeMutableAddressor(v153);
    sub_A5DC((uint64_t)v154, (uint64_t)&v332);
    sub_41C04();
    sub_41B14(v155);
    sub_A86C();
    os_log_type_t v156 = sub_AB70();
    if (sub_232DC(v156))
    {
      uint64_t v157 = (_WORD *)sub_232D0();
      sub_36DE0(v157);
      sub_41964(&dword_0, v158, v159, "failed to resolve dateTime in getMedScheduleWithDefinedValues, return nil");
      uint64_t v160 = v140;
      uint64_t v140 = v304;
      sub_5050(v160);
    }

    sub_37034();
    sub_39BAC();
    uint64_t v161 = *(uint64_t (**)(uint64_t, uint64_t))(v133 + 8);
    uint64_t v162 = &v331;
    goto LABEL_72;
  }

  if ((_DWORD)v147 == enum case for UsoEntity_common_DateTimeRange.DefinedValues.common_DateTimeRange_Night(_:))
  {
    sub_418F0(v147, enum case for DateTime.Date.DefinedDate.today(_:));
    uint64_t v182 = sub_41BF0();
    sub_A72C(v182);
    uint64_t v183 = sub_41AF0();
    sub_418CC(v183, enum case for DateTime.DateTimeRange.DefinedDateTimeRange.night(_:));
    uint64_t v184 = sub_41BE8();
    sub_A72C(v184);
    sub_41AE4();
    uint64_t v185 = sub_41AFC();
    sub_A72C(v185);
    sub_41A08();
    sub_41A7C();
    sub_41B08();
    uint64_t v168 = &v332;
    sub_41A54();
    sub_419F4();
    sub_41B88();
    sub_41AD8(v140, &qword_189BA0, (uint64_t)&v328);
    uint64_t v186 = sub_419B4();
    if (!v114)
    {
      sub_41B64();
      sub_41A68(v212);
      sub_494C(&qword_18B138);
      sub_41928();
      sub_41BB4();
      sub_41A28(v98);
      sub_494C(&qword_18B130);
      sub_419E0();
      sub_37034();
      sub_41AB8();
      sub_41BAC(&qword_189BA0, (uint64_t)&v335);
      uint64_t v213 = sub_41988();
      sub_41AB0(v213, &qword_18AA78);
      __int128 v197 = xmmword_13A010;
      goto LABEL_83;
    }

    sub_41B5C(v186, &qword_189BA0);
    uint64_t v188 = (void *)Logger.wellness.unsafeMutableAddressor(v187);
    sub_A5DC((uint64_t)v188, (uint64_t)&v332);
    sub_41C04();
    sub_41B14(v189);
    sub_A86C();
    os_log_type_t v190 = sub_AB70();
    if (sub_232DC(v190))
    {
      uint64_t v191 = (_WORD *)sub_232D0();
      sub_36DE0(v191);
      sub_41964(&dword_0, v192, v193, "failed to resolve dateTime in getMedScheduleWithDefinedValues, return nil");
      uint64_t v194 = v140;
      uint64_t v140 = v308;
      sub_5050(v194);
    }

    sub_37034();
    sub_39BAC();
    uint64_t v161 = *(uint64_t (**)(uint64_t, uint64_t))(v133 + 8);
    uint64_t v162 = &v327;
    goto LABEL_72;
  }

  if ((_DWORD)v147 == enum case for UsoEntity_common_DateTimeRange.DefinedValues.common_DateTimeRange_Evening(_:))
  {
    sub_418F0(v147, enum case for DateTime.Date.DefinedDate.today(_:));
    uint64_t v198 = sub_41BF0();
    sub_A72C(v198);
    uint64_t v199 = sub_41AF0();
    sub_418CC(v199, enum case for DateTime.DateTimeRange.DefinedDateTimeRange.evening(_:));
    uint64_t v200 = sub_41BE8();
    sub_A72C(v200);
    sub_41AE4();
    uint64_t v201 = sub_41AFC();
    sub_A72C(v201);
    sub_41A08();
    sub_41A7C();
    sub_41B08();
    uint64_t v168 = &v332;
    uint64_t v140 = v303;
    sub_41A54();
    sub_419F4();
    sub_41B88();
    sub_41AD8(v140, &qword_189BA0, (uint64_t)&v323);
    uint64_t v202 = sub_419B4();
    if (!v114)
    {
      sub_41B64();
      sub_41A68(v228);
      sub_494C(&qword_18B138);
      sub_41928();
      sub_41BB4();
      sub_41A28(v98);
      sub_494C(&qword_18B130);
      sub_419E0();
      sub_37034();
      sub_41AB8();
      sub_41BAC(&qword_189BA0, (uint64_t)&v326);
      uint64_t v229 = sub_41988();
      sub_41AB0(v229, &qword_18AA78);
      __int128 v197 = xmmword_13A000;
      goto LABEL_83;
    }

    sub_41B5C(v202, &qword_189BA0);
    uint64_t v204 = (void *)Logger.wellness.unsafeMutableAddressor(v203);
    sub_A5DC((uint64_t)v204, (uint64_t)&v332);
    sub_41C04();
    sub_41B14(v205);
    sub_A86C();
    os_log_type_t v206 = sub_AB70();
    if (sub_232DC(v206))
    {
      uint64_t v207 = (_WORD *)sub_232D0();
      sub_36DE0(v207);
      sub_41964(&dword_0, v208, v209, "failed to resolve dateTime in getMedScheduleWithDefinedValues, return nil");
      uint64_t v210 = v140;
      uint64_t v140 = v303;
      sub_5050(v210);
    }

    sub_37034();
    sub_39BAC();
    uint64_t v161 = *(uint64_t (**)(uint64_t, uint64_t))(v133 + 8);
    uint64_t v162 = &v325;
LABEL_72:
    sub_41BBC(*(v162 - 32), v161);
    uint64_t v211 = v140;
LABEL_73:
    sub_A4A4(v211, &qword_189BA0);
    uint64_t v95 = (*(uint64_t (**)(uint64_t, uint64_t))(v306 + 8))(v307, v134);
    goto LABEL_113;
  }

  if ((_DWORD)v147 == enum case for UsoEntity_common_DateTimeRange.DefinedValues.common_DateTimeRange_Morning(_:))
  {
    sub_418F0(v147, enum case for DateTime.Date.DefinedDate.today(_:));
    uint64_t v214 = sub_41BF0();
    sub_A72C(v214);
    uint64_t v215 = sub_41AF0();
    sub_418CC(v215, enum case for DateTime.DateTimeRange.DefinedDateTimeRange.morning(_:));
    uint64_t v216 = sub_41BE8();
    sub_A72C(v216);
    sub_41AE4();
    uint64_t v217 = sub_41AFC();
    sub_A72C(v217);
    sub_41A08();
    sub_41A7C();
    sub_41B08();
    uint64_t v168 = &v332;
    uint64_t v140 = v302;
    sub_41A54();
    sub_419F4();
    sub_41B88();
    sub_41AD8(v140, &qword_189BA0, (uint64_t)v320);
    uint64_t v218 = sub_419B4();
    if (!v114)
    {
      sub_41B64();
      sub_41A68(v241);
      sub_494C(&qword_18B138);
      sub_41928();
      sub_41BB4();
      sub_41A28(v98);
      sub_494C(&qword_18B130);
      sub_419E0();
      sub_37034();
      sub_41AB8();
      sub_41BAC(&qword_189BA0, (uint64_t)&v322);
      uint64_t v242 = sub_41988();
      sub_41AB0(v242, &qword_18AA78);
      __int128 v197 = xmmword_139FF0;
      goto LABEL_83;
    }

    sub_41B5C(v218, &qword_189BA0);
    uint64_t v220 = Logger.wellness.unsafeMutableAddressor(v219);
    sub_A5DC(v220, (uint64_t)&v332);
    sub_41C04();
    uint64_t v221 = v300;
    uint64_t v223 = sub_41B50((uint64_t)v300, v222);
    Logger.logObject.getter(v223);
    os_log_type_t v224 = sub_AB70();
    if (sub_232DC(v224))
    {
      uint64_t v225 = (_WORD *)sub_232D0();
      sub_36DE0(v225);
      sub_41964(&dword_0, v226, v227, "failed to resolve dateTime in getMedScheduleWithDefinedValues, return nil");
      sub_5050(v140);
    }

    sub_37034();
    sub_39BAC();
    sub_41BBC((uint64_t)v221, *(uint64_t (**)(uint64_t, uint64_t))(v133 + 8));
    uint64_t v211 = v302;
    goto LABEL_73;
  }

  uint64_t v230 = Logger.wellness.unsafeMutableAddressor(v147);
  sub_A5DC(v230, (uint64_t)&v332);
  uint64_t v231 = v301;
  uint64_t v232 = sub_41CCC(v301, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v133 + 16));
  uint64_t v233 = (os_log_s *)Logger.logObject.getter(v232);
  os_log_type_t v234 = static os_log_type_t.debug.getter();
  if (sub_41C30(v234))
  {
    uint64_t v235 = (uint8_t *)sub_232D0();
    *(_WORD *)uint64_t v235 = 0;
    sub_232EC( &dword_0,  v233,  (os_log_type_t)v231,  "getMedScheduleWithDefinedValues got a definedValue that is not handled, return nil",  v235);
    sub_5050((uint64_t)v235);
  }

  sub_39BAC();

  sub_41BBC(v231, *(uint64_t (**)(uint64_t, uint64_t))(v133 + 8));
  uint64_t v236 = sub_41CC0((uint64_t)&v334);
  sub_41AB0(v236, &qword_18AA78);
  sub_494C(&qword_18B130);
  sub_41C80();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v237, v238, v239, v240);
  sub_41CC0((uint64_t)&v333);
LABEL_115:
  sub_D8FC();
}

void getMedEventDate(from:deviceState:)()
{
  uint64_t v64 = v1;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_41C68();
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_AA58();
  uint64_t v10 = v8 - v9;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (os_log_s *)((char *)&v57 - v13);
  __chkstk_darwin(v12);
  uint64_t v16 = (os_log_s *)((char *)&v57 - v15);
  uint64_t v17 = static UsoTask_CodegenConverter.convert(task:)(&v68);
  sub_41D68((uint64_t)v17, v18, &qword_18AA78);
  if (!v66[3])
  {
    sub_A4A4((uint64_t)v66, &qword_18AA78);
    goto LABEL_7;
  }

  uint64_t v19 = sub_41A38();
  uint64_t v20 = sub_24A30((uint64_t)v67, (uint64_t)v66, (uint64_t)&type metadata for Any + 8, v19);
  if ((v20 & 1) == 0)
  {
LABEL_7:
    uint64_t v43 = Logger.wellness.unsafeMutableAddressor(v20);
    sub_A5DC(v43, (uint64_t)v66);
    uint64_t v44 = sub_DA34(v10, v43, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
    uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
    os_log_type_t v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)sub_232D0();
      *(_WORD *)uint64_t v47 = 0;
      sub_232EC( &dword_0,  v45,  v46,  "couldn't convert to task to common_MedicationEvent in getMedEventDate, returning nil",  v47);
      sub_5050((uint64_t)v47);
    }

    uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_13;
  }

  uint64_t v63 = v3;
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_Target.target.getter(v66);
  uint64_t v21 = sub_37110();
  if (!v66[0])
  {
    uint64_t v49 = Logger.wellness.unsafeMutableAddressor(v21);
    sub_A5DC(v49, (uint64_t)v66);
    uint64_t v50 = sub_DA34((uint64_t)v14, v49, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
    Logger.logObject.getter(v50);
    os_log_type_t v51 = sub_AB70();
    BOOL v52 = os_log_type_enabled(v14, v51);
    uint64_t v3 = v63;
    if (v52)
    {
      uint64_t v53 = (uint8_t *)sub_232D0();
      *(_WORD *)uint64_t v53 = 0;
      sub_232EC(&dword_0, v14, v51, "couldn't convert to dateTime in getMedEventDate, returning nil", v53);
      sub_5050((uint64_t)v53);
    }

    sub_37110();

    uint64_t v48 = (*(uint64_t (**)(os_log_s *, uint64_t))(v7 + 8))(v14, v6);
LABEL_13:
    sub_41AB0(v48, &qword_18AA78);
    uint64_t v54 = 1LL;
    goto LABEL_14;
  }

  dispatch thunk of UsoEntity_common_MedicationEvent.dateTime.getter(v21);
  sub_41CA4();
  uint64_t v22 = UsoEntity_common_DateTime.toDateTime(recurrencePattern:)(0LL);
  uint64_t v23 = sub_3652C();
  uint64_t v24 = Logger.wellness.unsafeMutableAddressor(v23);
  sub_A5DC(v24, (uint64_t)v67);
  sub_DA34((uint64_t)v16, v24, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
  uint64_t v25 = swift_retain_n(v22, 2LL);
  Logger.logObject.getter(v25);
  os_log_type_t v26 = sub_AB70();
  int v27 = v26;
  if (os_log_type_enabled(v16, v26))
  {
    uint64_t v62 = v16;
    uint64_t v28 = sub_A5E8(12LL);
    int v60 = v27;
    uint64_t v29 = (uint8_t *)v28;
    uint64_t v59 = sub_A5E8(32LL);
    uint64_t v65 = v22;
    v66[0] = v59;
    uint64_t v58 = v29;
    *(_DWORD *)uint64_t v29 = 136315138;
    uint64_t v57 = v29 + 4;
    uint64_t v30 = type metadata accessor for DateTime(0LL);
    uint64_t v61 = v22;
    uint64_t v31 = v30;
    sub_A410( &qword_18B140,  (uint64_t (*)(uint64_t))&type metadata accessor for DateTime,  (uint64_t)&protocol conformance descriptor for DateTime);
    uint64_t v33 = v32;
    uint64_t v34 = v31;
    uint64_t v35 = v61;
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(v34, v33);
    uint64_t v38 = sub_41D3C(v36, v37);
    uint64_t v39 = sub_41D28(v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v39, v40, v57, v29 + 12);
    sub_41AD0(v35);
    sub_249D4();
    uint64_t v41 = v58;
    _os_log_impl(&dword_0, v62, (os_log_type_t)v60, "here's the datetime: %s", v58, 0xCu);
    uint64_t v42 = v59;
    swift_arrayDestroy(v59, 1LL);
    sub_5050(v42);
    sub_5050((uint64_t)v41);
  }

  else
  {

    sub_41AD0(v22);
  }

  (*(void (**)(os_log_s *, uint64_t))(v7 + 8))(v16, v6);
  uint64_t v3 = v63;
  uint64_t v55 = sub_D7EC(v64, (uint64_t)v66);
  Date.init()(v55);
  sub_10AE64();
  sub_37110();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0, v4);
  uint64_t v56 = sub_41B88();
  sub_41AB0((uint64_t)v56, &qword_18AA78);
  uint64_t v54 = 0LL;
LABEL_14:
  sub_41A40(v3, v54);
  sub_D8FC();
}

void hasDosageEdit(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = sub_41A4C(a1, a2, a3, a4, a5, a6);
  sub_418B8((uint64_t)v6, v7, &qword_18AA78, v8, v9);
  if (!v39)
  {
    sub_418C4(v10, &qword_18AA78, v11, v12);
    goto LABEL_13;
  }

  uint64_t v13 = sub_41A38();
  uint64_t v16 = sub_418A8(v13, v14, (uint64_t)&type metadata for Any + 8, v13, v15);
  if ((v16 & 1) != 0)
  {
    uint64_t v24 = sub_41914(v16, v17, v18, v19, v20, v21, v22, v23, v35, v36);
    sub_41A1C(v24, v25);
    uint64_t v26 = sub_37034();
    if (!v38) {
      goto LABEL_12;
    }
    uint64_t v27 = dispatch thunk of UsoEntity_common_MedicationEvent.medicationSchedule.getter(v26);
    sub_3652C();
    if (!v27) {
      goto LABEL_12;
    }
    uint64_t v28 = sub_41B90();
    sub_367AC();
    if (!v28) {
      goto LABEL_12;
    }
    sub_41B74();
    if (v30)
    {
      sub_419A4();
      uint64_t v34 = sub_41B80();
      sub_249D4();
      if (v34)
      {
LABEL_8:
        sub_41948();
        sub_370B0();
        uint64_t v31 = sub_249D4();
        sub_41AA4(v31);
        sub_367AC();
        if (v37)
        {
          uint64_t v32 = sub_363E8();
          uint64_t v33 = dispatch thunk of UsoEntity_common_Medication.dosage.getter(v32);
          sub_37034();
          uint64_t v16 = sub_41AD0(v37);
          if (v33) {
            uint64_t v16 = sub_367AC();
          }
          goto LABEL_13;
        }

void hasDateEdit(from:)()
{
  uint64_t v1 = type metadata accessor for UsoEntity_common_DateTime.DefinedValues(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_41C50();
  uint64_t v3 = sub_494C(&qword_18B150);
  sub_D978();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_494C(&qword_18B158);
  sub_D978();
  __chkstk_darwin(v7);
  sub_AA58();
  uint64_t v10 = v8 - v9;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)v100 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v100 - v15;
  static UsoTask_CodegenConverter.convert(task:)(v104);
  sub_41850((uint64_t)v104, (uint64_t)v103, &qword_18AA78);
  if (!v103[3])
  {
    sub_A4A4((uint64_t)v103, &qword_18AA78);
    goto LABEL_6;
  }

  uint64_t v17 = sub_41A38();
  uint64_t v18 = sub_24A30((uint64_t)&v102, (uint64_t)v103, (uint64_t)&type metadata for Any + 8, v17);
  if ((v18 & 1) == 0)
  {
LABEL_6:
    sub_41BE0(v18, &qword_18AA78);
    goto LABEL_7;
  }

  uint64_t v101 = v0;
  uint64_t v19 = v102;
  sub_363E8();
  dispatch thunk of Uso_VerbTemplate_Target.target.getter(v103);
  uint64_t v20 = v19;
  uint64_t v21 = sub_3652C();
  if (v103[0])
  {
    dispatch thunk of UsoEntity_common_MedicationEvent.dateTime.getter(v21);
    uint64_t v22 = sub_41CA4();
    dispatch thunk of UsoEntity_common_DateTime.definedValue.getter(v22);
    sub_3652C();
  }

  else
  {
    sub_41A40((uint64_t)v16, 1LL);
  }

  (*(void (**)(char *, void, uint64_t))(v2 + 104))( v14,  enum case for UsoEntity_common_DateTime.DefinedValues.common_DateTime_Now(_:),  v1);
  sub_41A28((uint64_t)v14);
  uint64_t v23 = (uint64_t)&v6[*(int *)(v3 + 48)];
  sub_41850((uint64_t)v16, (uint64_t)v6, &qword_18B158);
  sub_41850((uint64_t)v14, v23, &qword_18B158);
  sub_A614((uint64_t)v6, 1LL, v1);
  if (v26)
  {
    sub_41AC8((uint64_t)v14);
    sub_41AC8((uint64_t)v16);
    uint64_t v24 = sub_A614(v23, 1LL, v1);
    if (v26)
    {
      sub_A880(v24, &qword_18B158);
LABEL_19:
      sub_41BE0(v25, &qword_18AA78);
      sub_37034();
      goto LABEL_7;
    }

    goto LABEL_17;
  }

  sub_41850((uint64_t)v6, v10, &qword_18B158);
  sub_A614(v23, 1LL, v1);
  if (v26)
  {
    sub_A674((uint64_t)v14);
    sub_A674((uint64_t)v16);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v10, v1);
LABEL_17:
    sub_A880(v24, &qword_18B150);
    goto LABEL_20;
  }

  uint64_t v27 = v101;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v101, v23, v1);
  sub_A410( &qword_18B160,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_DateTime.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_DateTime.DefinedValues);
  char v29 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v27, v1, v28);
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v30(v27, v1);
  sub_41AC8((uint64_t)v14);
  sub_41AC8((uint64_t)v16);
  v30(v10, v1);
  sub_41AC8((uint64_t)v6);
  if ((v29 & 1) != 0) {
    goto LABEL_19;
  }
LABEL_20:
  sub_4195C();
  sub_41D10();
  uint64_t v31 = sub_37034();
  uint64_t v32 = v103[0];
  if (v103[0])
  {
    uint64_t v33 = dispatch thunk of UsoEntity_common_MedicationEvent.dateTime.getter(v31);
    uint64_t v34 = sub_367AC();
    if (v33)
    {
      uint64_t v32 = dispatch thunk of UsoEntity_common_DateTime.date.getter(v34);
      sub_3652C();
    }

    else
    {
      uint64_t v32 = 0LL;
    }
  }

  sub_4195C();
  sub_41D10();
  uint64_t v35 = sub_37034();
  if (v103[0])
  {
    dispatch thunk of UsoEntity_common_MedicationEvent.medicationSchedule.getter(v35);
    sub_419D8();
  }

  uint64_t v36 = sub_41CF0();
  uint64_t v37 = sub_3652C();
  if (v36)
  {
    uint64_t v38 = dispatch thunk of UsoEntity_common_DateTime.date.getter(v37);
    uint64_t v37 = sub_36BE0();
    if (!v32) {
      goto LABEL_34;
    }
  }

  else
  {
    uint64_t v38 = 0LL;
    if (!v32) {
      goto LABEL_34;
    }
  }

  uint64_t v39 = sub_372CC();
  uint64_t v40 = dispatch thunk of UsoEntity_common_Date.year.getter(v39);
  uint64_t v37 = sub_367AC();
  if (v40)
  {
    dispatch thunk of UsoEntity_common_Integer.integerValue.getter(v37);
    char v42 = v41;
    uint64_t v37 = sub_3652C();
    if ((v42 & 1) == 0)
    {
      int v43 = 0;
      if (!v38) {
        goto LABEL_39;
      }
      goto LABEL_35;
    }
  }

LABEL_34:
  int v43 = 1;
  if (!v38) {
    goto LABEL_39;
  }
LABEL_35:
  uint64_t v44 = sub_41A9C();
  uint64_t v45 = dispatch thunk of UsoEntity_common_Date.year.getter(v44);
  uint64_t v37 = sub_419D8();
  if (v45)
  {
    dispatch thunk of UsoEntity_common_Integer.integerValue.getter(v37);
    char v47 = v46;
    uint64_t v37 = sub_3652C();
    if ((v47 & 1) == 0)
    {
      int v48 = 0;
      if (!v32) {
        goto LABEL_43;
      }
      goto LABEL_40;
    }
  }

    double result = 0.0;
    uint64_t v31 = v40;
    *(_OWORD *)uint64_t v40 = 0u;
    *(_OWORD *)(v31 + 16) = 0u;
    return result;
  }

  uint64_t v36 = a1 == 0x6874676E65727473LL && a2 == 0xEC00000074696E55LL;
  if (v36 || (uint64_t v37 = sub_79B5C(), (sub_79A2C(v37, 0xEC00000074696E55LL) & 1) != 0))
  {
    sub_79734(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_strengthUnit, (uint64_t)v13);
    sub_ABF4();
    sub_79A98((uint64_t)v13);
    if (!v23) {
      goto LABEL_56;
    }
    uint64_t v24 = (uint64_t)v13;
    goto LABEL_33;
  }

  uint64_t v38 = a1 == 0x7463656C65536E6FLL && a2 == 0xEF646E616D6D6F43LL;
  if (!v38 && (sub_79A2C(0x7463656C65536E6FLL, 0xEF646E616D6D6F43LL) & 1) == 0) {
    goto LABEL_34;
  }
  sub_79734(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_onSelectCommand, (uint64_t)v10);
  sub_ABF4();
  sub_79A98((uint64_t)v10);
  if (v23)
  {
    uint64_t v24 = (uint64_t)v10;
LABEL_33:
    sub_59A88(v24);
    goto LABEL_34;
  }

  uint64_t v140 = *(void *)(v0 + 1128);
  uint64_t v117 = *(void *)(v0 + 1064);
  uint64_t v119 = *(void *)(v0 + 1120);
  char v86 = *(void *)(v0 + 1024);
  uint64_t v87 = *(void *)(v0 + 1008);
  uint64_t v88 = *(void *)(v0 + 976);
  char v89 = *(void *)(v0 + 968);
  uint64_t v115 = *(void *)(v0 + 960);
  char v116 = *(void *)(v0 + 1016);
  char v90 = *(void *)(v0 + 952);
  uint64_t v91 = *(void *)(v0 + 944);
  ((void (*)(void))v146)(*(void *)(v0 + 1080));
  swift_bridgeObjectRelease(v142);
  v76(v86, v91, v87);
  uint64_t v92 = (void *)(v91 + *(int *)(sub_89E20() + 20));
  char v93 = v92[3];
  char v94 = v92[4];
  sub_500C(v92, v93);
  (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v93, v94);
  int v95 = *(void *)(v0 + 568);
  uint64_t v96 = *(void *)(v0 + 576);
  sub_500C(v131, v95);
  uint64_t v97 = dispatch thunk of DeviceState.preferencesLanguageCode.getter(v95, v96);
  if (v98) {
    uint64_t v99 = v97;
  }
  else {
    uint64_t v99 = 0LL;
  }
  if (v98) {
    uint64_t v100 = v98;
  }
  else {
    uint64_t v100 = 0xE000000000000000LL;
  }
  uint64_t v101 = _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v131);
  uint64_t v102 = static Locale.current.getter(v101);
  Locale.region.getter(v102);
  (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v88, v115);
  *(void *)(v0 + 688) = &type metadata for WellnessFeatureFlags;
  *(void *)(v0 + 696) = &off_181D20;
  sub_834D4(v86, v136 & 1, v99, v100, v90, log);
  swift_bridgeObjectRelease(v100);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 664));
  sub_A4A4(v90, &qword_18D5A0);
  sub_89E0C(*(uint64_t (**)(uint64_t, uint64_t))(v116 + 8));
  sub_85124(v121);
  sub_851D0(v123);
  *(void *)(v0 + 648) = &type metadata for WellnessCATProvider;
  *(void *)(v0 + 656) = &off_182110;
  uint64_t v103 = sub_20308((uint64_t)&unk_17E1F8, 48LL);
  *(void *)(v0 + 624) = v103;
  *(_OWORD *)(v103 + 16) = 0u;
  *(_OWORD *)(v103 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
  sub_8478C(log);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 624));
  sub_D878(v123);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v121);
  uint64_t v104 = sub_500C(v128, *(void *)(v0 + 608));
  static ExecuteResponse.complete<A>(next:)(v104);
  swift_release();
  sub_85BDC((uint64_t)log);
  v146(v119, v117);
  v146(v140, v117);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v128);
LABEL_41:
  uint64_t v105 = *(void *)(v0 + 1192);
  uint64_t v106 = *(void *)(v0 + 1184);
  uint64_t v107 = *(void *)(v0 + 1176);
  uint64_t v108 = *(void *)(v0 + 1168);
  uint64_t v109 = *(void *)(v0 + 1160);
  uint64_t v110 = *(void *)(v0 + 1152);
  uint64_t v111 = *(void *)(v0 + 1128);
  uint64_t v112 = *(void *)(v0 + 1120);
  uint64_t v113 = *(void *)(v0 + 1112);
  uint64_t v122 = *(void *)(v0 + 1104);
  uint64_t v124 = *(void *)(v0 + 1096);
  loga = *(os_log_t *)(v0 + 1088);
  uint64_t v129 = *(void *)(v0 + 1080);
  uint64_t v132 = *(void *)(v0 + 1056);
  uint64_t v133 = *(void *)(v0 + 1032);
  uint64_t v137 = *(void *)(v0 + 1024);
  uint64_t v141 = *(void *)(v0 + 1000);
  uint64_t v143 = *(void *)(v0 + 976);
  uint64_t v147 = *(void *)(v0 + 952);
  swift_task_dealloc(*(void *)(v0 + 1200));
  swift_task_dealloc(v105);
  swift_task_dealloc(v106);
  swift_task_dealloc(v107);
  swift_task_dealloc(v108);
  swift_task_dealloc(v109);
  swift_task_dealloc(v110);
  swift_task_dealloc(v111);
  swift_task_dealloc(v112);
  swift_task_dealloc(v113);
  swift_task_dealloc(v122);
  swift_task_dealloc(v124);
  swift_task_dealloc(loga);
  swift_task_dealloc(v129);
  swift_task_dealloc(v132);
  swift_task_dealloc(v133);
  swift_task_dealloc(v137);
  swift_task_dealloc(v141);
  swift_task_dealloc(v143);
  swift_task_dealloc(v147);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

  Date.init()(v48);
  uint64_t v54 = type metadata accessor for Date(0LL);
  uint64_t v55 = 1LL;
  sub_A66C(v4, 0LL, v56, v54);
  char v57 = sub_91C24(v4);
  uint64_t v59 = v58;
  sub_279E0(v4, &qword_189CE8);
  if (v59)
  {
    String.toSpeakableString.getter(v57, v59);
    sub_369F4();
    goto LABEL_36;
  }

LABEL_39:
  int v48 = 1;
  if (!v32) {
    goto LABEL_43;
  }
LABEL_40:
  uint64_t v49 = sub_372CC();
  uint64_t v50 = dispatch thunk of UsoEntity_common_Date.year.getter(v49);
  uint64_t v37 = sub_367AC();
  if (v50)
  {
    dispatch thunk of UsoEntity_common_Integer.integerValue.getter(v37);
    char v52 = v51;
    uint64_t v37 = sub_3652C();
    char v53 = v52 & 1;
    if (!v38) {
      goto LABEL_48;
    }
    goto LABEL_44;
  }

LABEL_43:
  char v53 = 1;
  if (!v38) {
    goto LABEL_48;
  }
LABEL_44:
  uint64_t v54 = sub_41A9C();
  uint64_t v55 = dispatch thunk of UsoEntity_common_Date.year.getter(v54);
  uint64_t v37 = sub_419D8();
  if (v55)
  {
    sub_41B98();
    char v57 = v56;
    uint64_t v37 = sub_36EBC();
    char v58 = v57 & 1;
    if ((v53 & 1) == 0) {
      goto LABEL_46;
    }
    goto LABEL_49;
  }

LABEL_48:
  char v58 = 1;
  if ((v53 & 1) == 0)
  {
LABEL_46:
    if ((v58 & 1) == 0) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }

LABEL_49:
  if ((v58 & 1) != 0) {
    goto LABEL_51;
  }
LABEL_50:
  if (((v43 | v48) & 1) == 0)
  {
    if (v32) {
      goto LABEL_52;
    }
LABEL_57:
    int v64 = 1;
    goto LABEL_58;
  }

LABEL_51:
  if (!v32) {
    goto LABEL_57;
  }
LABEL_52:
  uint64_t v59 = sub_372CC();
  uint64_t v60 = dispatch thunk of UsoEntity_common_Date.monthOfYear.getter(v59);
  uint64_t v37 = sub_367AC();
  if (!v60) {
    goto LABEL_57;
  }
  uint64_t v61 = dispatch thunk of UsoEntity_common_MonthOfYear.integerValue.getter(v37);
  uint64_t v37 = sub_3652C();
  if (!v61) {
    goto LABEL_57;
  }
  dispatch thunk of UsoEntity_common_Integer.integerValue.getter(v37);
  char v63 = v62;
  uint64_t v37 = sub_36BE0();
  if ((v63 & 1) != 0) {
    goto LABEL_57;
  }
  int v64 = 0;
  if (!v38) {
    goto LABEL_63;
  }
  uint64_t v65 = sub_41A9C();
  uint64_t v66 = dispatch thunk of UsoEntity_common_Date.monthOfYear.getter(v65);
  uint64_t v37 = sub_419D8();
  if (!v66) {
    goto LABEL_63;
  }
LABEL_58:
  uint64_t v67 = dispatch thunk of UsoEntity_common_MonthOfYear.integerValue.getter(v37);
  uint64_t v37 = sub_3652C();
  if (v67
    && (dispatch thunk of UsoEntity_common_Integer.integerValue.getter(v37), char v69 = v68,
                                                                             uint64_t v37 = sub_36BE0(),
                                                                             (v69 & 1) == 0))
  {
    int v70 = 0;
  }

  else
  {
LABEL_63:
    int v70 = 1;
  }

  if (v32
    && (v71 = sub_372CC(), v72 = dispatch thunk of UsoEntity_common_Date.monthOfYear.getter(v71), uint64_t v37 = sub_367AC(), v72)
    && (v73 = dispatch thunk of UsoEntity_common_MonthOfYear.integerValue.getter(v37), uint64_t v37 = sub_36BE0(), v73))
  {
    dispatch thunk of UsoEntity_common_Integer.integerValue.getter(v37);
    char v75 = v74;
    uint64_t v37 = sub_3652C();
    char v76 = v75 & 1;
    if (!v38) {
      goto LABEL_75;
    }
  }

  else
  {
    char v76 = 1;
    if (!v38) {
      goto LABEL_75;
    }
  }

  uint64_t v77 = sub_41A9C();
  uint64_t v78 = dispatch thunk of UsoEntity_common_Date.monthOfYear.getter(v77);
  uint64_t v37 = sub_419D8();
  if (v78)
  {
    uint64_t v79 = dispatch thunk of UsoEntity_common_MonthOfYear.integerValue.getter(v37);
    uint64_t v37 = sub_3652C();
    if (v79)
    {
      sub_41B98();
      uint64_t v101 = v20;
      char v81 = v80;
      uint64_t v37 = sub_36EBC();
      char v82 = v81 & 1;
      if ((v76 & 1) != 0) {
        goto LABEL_76;
      }
LABEL_73:
      if ((v82 & 1) == 0) {
        goto LABEL_78;
      }
      goto LABEL_77;
    }
  }

LABEL_75:
  char v82 = 1;
  if ((v76 & 1) == 0) {
    goto LABEL_73;
  }
LABEL_76:
  if ((v82 & 1) != 0) {
    goto LABEL_78;
  }
LABEL_77:
  if (((v64 | v70) & 1) == 0)
  {
    if (!v32) {
      goto LABEL_84;
    }
    goto LABEL_79;
  }

LABEL_78:
  if (!v32) {
    goto LABEL_84;
  }
LABEL_79:
  uint64_t v83 = sub_372CC();
  uint64_t v84 = dispatch thunk of UsoEntity_common_Date.dayOfMonth.getter(v83);
  uint64_t v37 = sub_367AC();
  if (v84)
  {
    dispatch thunk of UsoEntity_common_Integer.integerValue.getter(v37);
    char v86 = v85;
    uint64_t v37 = sub_3652C();
    if ((v86 & 1) == 0)
    {
      if (!v38) {
        goto LABEL_89;
      }
      goto LABEL_85;
    }
  }

LABEL_84:
  if (!v38) {
    goto LABEL_89;
  }
LABEL_85:
  uint64_t v87 = sub_41A9C();
  uint64_t v88 = dispatch thunk of UsoEntity_common_Date.dayOfMonth.getter(v87);
  uint64_t v37 = sub_419D8();
  if (v88)
  {
    dispatch thunk of UsoEntity_common_Integer.integerValue.getter(v37);
    char v90 = v89;
    uint64_t v37 = sub_3652C();
    if ((v90 & 1) == 0)
    {
      if (!v32) {
        goto LABEL_93;
      }
      goto LABEL_90;
    }
  }

LABEL_89:
  if (!v32) {
    goto LABEL_93;
  }
LABEL_90:
  uint64_t v91 = sub_372CC();
  uint64_t v92 = dispatch thunk of UsoEntity_common_Date.dayOfMonth.getter(v91);
  uint64_t v37 = sub_367AC();
  if (v92)
  {
    dispatch thunk of UsoEntity_common_Integer.integerValue.getter(v37);
    char v94 = v93;
    uint64_t v37 = sub_3652C();
    int v95 = v94 & 1;
    if (!v38)
    {
LABEL_92:
      sub_41BE0(v37, &qword_18AA78);
      sub_37034();
      sub_367AC();
      goto LABEL_7;
    }

    goto LABEL_94;
  }

LABEL_93:
  int v95 = 1;
  if (!v38) {
    goto LABEL_92;
  }
LABEL_94:
  LODWORD(v101) = v95;
  uint64_t v96 = sub_41A9C();
  uint64_t v97 = dispatch thunk of UsoEntity_common_Date.dayOfMonth.getter(v96);
  uint64_t v98 = sub_419D8();
  if (v97)
  {
    v100[1] = sub_41B98();
    sub_37034();
    sub_419D8();
    sub_36EBC();
    uint64_t v99 = sub_367AC();
    sub_41BE0(v99, &qword_18AA78);
  }

  else
  {
    sub_41BE0(v98, &qword_18AA78);
    sub_419D8();
    sub_37034();
    sub_367AC();
  }

BOOL hasTimeEdit(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = sub_41A4C(a1, a2, a3, a4, a5, a6);
  sub_418B8((uint64_t)v6, v7, &qword_18AA78, v8, v9);
  if (!v100)
  {
    sub_418C4(v10, &qword_18AA78, v11, v12);
    goto LABEL_7;
  }

  uint64_t v13 = sub_41A38();
  uint64_t v16 = sub_418A8(v13, v14, (uint64_t)&type metadata for Any + 8, v13, v15);
  if ((v16 & 1) == 0)
  {
LABEL_7:
    sub_41920(v16, &qword_18AA78, v18, v19, v20, v21, v22, v23);
    return 0LL;
  }

  uint64_t v24 = sub_41914(v16, v17, v18, v19, v20, v21, v22, v23, v97, v98);
  sub_41A1C(v24, v25);
  uint64_t v26 = sub_37034();
  uint64_t v27 = v99;
  if (v99)
  {
    uint64_t v28 = dispatch thunk of UsoEntity_common_MedicationEvent.dateTime.getter(v26);
    uint64_t v29 = sub_367AC();
    if (v28)
    {
      uint64_t v27 = dispatch thunk of UsoEntity_common_DateTime.time.getter(v29);
      sub_3652C();
    }

    else
    {
      uint64_t v27 = 0LL;
    }
  }

  uint64_t v31 = sub_4195C();
  sub_41A1C(v31, v32);
  uint64_t v33 = sub_37034();
  if (v99)
  {
    dispatch thunk of UsoEntity_common_MedicationEvent.medicationSchedule.getter(v33);
    sub_419D8();
  }

  uint64_t v34 = sub_41CF0();
  uint64_t v35 = sub_3652C();
  if (v34)
  {
    uint64_t v42 = dispatch thunk of UsoEntity_common_DateTime.time.getter(v35);
    uint64_t v35 = sub_36BE0();
    if (!v27) {
      goto LABEL_18;
    }
  }

  else
  {
    uint64_t v42 = 0LL;
    if (!v27)
    {
LABEL_18:
      char v47 = 1;
      goto LABEL_19;
    }
  }

  uint64_t v43 = sub_372CC();
  uint64_t v44 = dispatch thunk of UsoEntity_common_Time.hour.getter(v43);
  uint64_t v35 = sub_367AC();
  if (!v44) {
    goto LABEL_18;
  }
  dispatch thunk of UsoEntity_common_Integer.integerValue.getter(v35);
  char v46 = v45;
  uint64_t v35 = sub_3652C();
  if ((v46 & 1) != 0) {
    goto LABEL_18;
  }
  char v47 = 0;
LABEL_19:
  if (v42)
  {
    uint64_t v48 = sub_41A9C();
    uint64_t v49 = dispatch thunk of UsoEntity_common_Time.hour.getter(v48);
    uint64_t v35 = sub_419D8();
    if (v49)
    {
      dispatch thunk of UsoEntity_common_Integer.integerValue.getter(v35);
      uint64_t v35 = sub_3652C();
    }
  }

  if (v27
    && (v50 = sub_372CC(), v51 = dispatch thunk of UsoEntity_common_Time.hour.getter(v50), uint64_t v35 = sub_367AC(), v51))
  {
    uint64_t v52 = dispatch thunk of UsoEntity_common_Integer.integerValue.getter(v35);
    char v54 = v53;
    uint64_t v35 = sub_3652C();
    char v55 = v54 & 1;
    if (!v42) {
      goto LABEL_32;
    }
  }

  else
  {
    uint64_t v52 = 0LL;
    char v55 = 1;
    if (!v42) {
      goto LABEL_32;
    }
  }

  uint64_t v56 = sub_41A9C();
  uint64_t v57 = dispatch thunk of UsoEntity_common_Time.hour.getter(v56);
  uint64_t v35 = sub_419D8();
  if (v57)
  {
    uint64_t v58 = sub_41B98();
    char v60 = v59;
    uint64_t v35 = sub_36EBC();
    char v61 = v60 & 1;
    if ((v55 & 1) != 0) {
      goto LABEL_33;
    }
    goto LABEL_29;
  }

LABEL_32:
  uint64_t v58 = 0LL;
  char v61 = 1;
  if ((v55 & 1) != 0)
  {
LABEL_33:
    if ((v61 & 1) == 0)
    {
LABEL_34:
      if ((v47 & 1) == 0)
      {
        BOOL v62 = 0;
        if (v27) {
          goto LABEL_37;
        }
LABEL_41:
        char v67 = 1;
        goto LABEL_42;
      }

      goto LABEL_35;
    }

    goto LABEL_35;
  }

LABEL_29:
  if ((v61 & 1) != 0) {
    goto LABEL_34;
  }
  BOOL v62 = v52 == v58;
  if ((v47 & 1) != 0) {
LABEL_35:
  }
    BOOL v62 = 1;
  if (!v27) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v63 = sub_372CC();
  uint64_t v64 = dispatch thunk of UsoEntity_common_Time.minute.getter(v63);
  uint64_t v35 = sub_367AC();
  if (!v64) {
    goto LABEL_41;
  }
  dispatch thunk of UsoEntity_common_Integer.integerValue.getter(v35);
  char v66 = v65;
  uint64_t v35 = sub_3652C();
  if ((v66 & 1) != 0) {
    goto LABEL_41;
  }
  char v67 = 0;
LABEL_42:
  if (v42)
  {
    uint64_t v68 = sub_41A9C();
    uint64_t v69 = dispatch thunk of UsoEntity_common_Time.minute.getter(v68);
    uint64_t v35 = sub_419D8();
    if (v69)
    {
      dispatch thunk of UsoEntity_common_Integer.integerValue.getter(v35);
      uint64_t v35 = sub_3652C();
    }
  }

  if (v27
    && (v70 = sub_372CC(), v71 = dispatch thunk of UsoEntity_common_Time.minute.getter(v70), uint64_t v35 = sub_367AC(), v71))
  {
    uint64_t v72 = dispatch thunk of UsoEntity_common_Integer.integerValue.getter(v35);
    char v74 = v73;
    uint64_t v35 = sub_3652C();
    char v75 = v74 & 1;
    if (!v42)
    {
LABEL_48:
      sub_41920(v35, &qword_18AA78, v36, v37, v38, v39, v40, v41);
      goto LABEL_57;
    }
  }

  else
  {
    uint64_t v72 = 0LL;
    char v75 = 1;
    if (!v42) {
      goto LABEL_48;
    }
  }

  uint64_t v76 = sub_41A9C();
  uint64_t v77 = dispatch thunk of UsoEntity_common_Time.minute.getter(v76);
  uint64_t v78 = sub_419D8();
  if (v77)
  {
    uint64_t v85 = sub_41B98();
    char v87 = v86;
    sub_37034();
    sub_419D8();
    sub_36EBC();
    char v88 = v87 & 1;
    uint64_t v89 = sub_367AC();
    sub_41920(v89, &qword_18AA78, v90, v91, v92, v93, v94, v95);
    if ((v75 & 1) != 0) {
      goto LABEL_58;
    }
    goto LABEL_52;
  }

  sub_41920(v78, &qword_18AA78, v79, v80, v81, v82, v83, v84);
  sub_419D8();
LABEL_57:
  sub_37034();
  sub_367AC();
  uint64_t v85 = 0LL;
  char v88 = 1;
  if ((v75 & 1) != 0)
  {
LABEL_58:
    if ((v88 & 1) != 0) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }

LABEL_52:
  if ((v88 & 1) == 0)
  {
    if ((v67 & 1) == 0)
    {
      BOOL v96 = v72 == v85;
      if (v62) {
        return !v96;
      }
      goto LABEL_62;
    }

    goto LABEL_60;
  }

LABEL_59:
  if ((v67 & 1) == 0)
  {
LABEL_62:
    BOOL v96 = 0;
    return !v96;
  }

LABEL_60:
  if (!v62) {
    goto LABEL_62;
  }
  BOOL v96 = 1;
  return !v96;
}

void isSpecificMedRequest(from:deviceState:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_41C50();
  uint64_t v7 = sub_494C(&qword_18B168);
  sub_D978();
  __chkstk_darwin(v8);
  sub_AA58();
  uint64_t v11 = v9 - v10;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v61 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v61 - v16;
  getMedScheduleWithDefinedValues(from:deviceState:)( v4,  v2,  v18,  v19,  v20,  v21,  v22,  v23,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v68,  v69,  v70[0],  v70[1],  v70[2]);
  getLocalizedMedName(from:)(v4, v24, v25, v26, v27, v28);
  uint64_t v65 = v29;
  uint64_t v31 = v30;
  getUSOMedNames(from:)(v4, v30, v32, v33, v34, v35);
  if (v36)
  {
    uint64_t v37 = *(void *)(v36 + 16);
    swift_bridgeObjectRelease(v36);
    BOOL v38 = v37 != 0;
  }

  else
  {
    BOOL v38 = 0;
  }

  uint64_t v39 = sub_494C(&qword_18B130);
  int v40 = 1;
  uint64_t v41 = sub_A614((uint64_t)v17, 1LL, v39);
  if (v42)
  {
    if (v31) {
      int v40 = 1;
    }
    else {
      int v40 = v38;
    }
  }

  uint64_t v66 = __PAIR64__(v40, v38);
  uint64_t v43 = Logger.wellness.unsafeMutableAddressor(v41);
  sub_A5DC(v43, (uint64_t)v70);
  uint64_t v44 = sub_41CD8(v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  sub_41CE4(v44, v45, &qword_18B168);
  uint64_t v46 = swift_bridgeObjectRetain(v31);
  uint64_t v47 = v6;
  uint64_t v48 = (os_log_s *)Logger.logObject.getter(v46);
  os_log_type_t v49 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = sub_A5E8(38LL);
    uint64_t v64 = v5;
    uint64_t v51 = v50;
    uint64_t v62 = sub_A5E8(96LL);
    uint64_t v69 = v62;
    *(_DWORD *)uint64_t v51 = 136315906;
    uint64_t v63 = v47;
    sub_41850((uint64_t)v15, v11, &qword_18B168);
    uint64_t v52 = String.init<A>(describing:)(v11, v7);
    uint64_t v67 = sub_41D1C(v52, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v51 + 4, v51 + 12);
    swift_bridgeObjectRelease(v11);
    sub_A4A4((uint64_t)v15, &qword_18B168);
    *(_WORD *)(v51 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2080;
    uint64_t v67 = v65;
    uint64_t v68 = v31;
    swift_bridgeObjectRetain(v31);
    uint64_t v54 = sub_494C(&qword_18B170);
    uint64_t v55 = String.init<A>(describing:)(&v67, v54);
    uint64_t v67 = sub_41D1C(v55, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v51 + 14, v51 + 22);
    sub_41CF8();
    swift_bridgeObjectRelease(v11);
    *(_WORD *)(v51 + 2_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2080;
    if ((_DWORD)v66) {
      uint64_t v57 = 1702195828LL;
    }
    else {
      uint64_t v57 = 0x65736C6166LL;
    }
    if ((_DWORD)v66) {
      unint64_t v58 = 0xE400000000000000LL;
    }
    else {
      unint64_t v58 = 0xE500000000000000LL;
    }
    uint64_t v67 = sub_39178(v57, v58, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v51 + 24, v51 + 32);
    sub_2A184();
    *(_WORD *)(v51 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 1024;
    LODWORD(v6_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = HIDWORD(v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, (char *)&v67 + 4, v51 + 34, v51 + 38);
    _os_log_impl( &dword_0,  v48,  v49,  "Checking specific med request:\nschedule: %s,\nlocalizedMedName: %s,\nfirstUSOMedName: %s,\ncombined: %{BOOL}d",  (uint8_t *)v51,  0x26u);
    uint64_t v59 = v62;
    swift_arrayDestroy(v62, 3LL);
    sub_5050(v59);
    sub_5050(v51);

    uint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v0, v64);
  }

  else
  {
    sub_A4A4((uint64_t)v15, &qword_18B168);

    sub_41CF8();
    uint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v0, v5);
  }

  sub_41B5C(v60, &qword_18B168);
  sub_D8FC();
}

void isQueryAboutDetails(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = sub_41A4C(a1, a2, a3, a4, a5, a6);
  sub_418B8((uint64_t)v6, v7, &qword_18AA78, v8, v9);
  if (v61)
  {
    uint64_t v13 = sub_41B48();
    uint64_t v15 = sub_41890(v13, v14);
    if ((v15 & 1) != 0)
    {
      uint64_t v23 = sub_41914(v15, v16, v17, v18, v19, v20, v21, v22, v57, v58);
      sub_41B34(v23, v24);
      uint64_t v25 = sub_37034();
      if (v60)
      {
        uint64_t v26 = dispatch thunk of UsoEntity_common_MedicationEvent.dateTime.getter(v25);
        sub_3652C();
        if (v26) {
          sub_367AC();
        }
      }

      uint64_t v44 = sub_4195C();
      sub_41B34(v44, v45);
      goto LABEL_16;
    }
  }

  else
  {
    sub_418C4(v10, &qword_18AA78, v11, v12);
  }

  sub_418B8(v15, v16, &qword_18AA78, v18, v19);
  if (!v61)
  {
    sub_418C4(v27, &qword_18AA78, v28, v29);
    goto LABEL_25;
  }

  uint64_t v30 = sub_41B40();
  uint64_t v32 = sub_41890(v30, v31);
  if ((v32 & 1) != 0)
  {
    uint64_t v40 = sub_41914(v32, v33, v34, v35, v36, v37, v38, v39, v57, v58);
    sub_41B28(v40, v41);
    uint64_t v42 = sub_37034();
    if (v60)
    {
      uint64_t v43 = dispatch thunk of UsoEntity_common_MedicationEvent.dateTime.getter(v42);
      sub_3652C();
      if (v43) {
        sub_367AC();
      }
    }

    uint64_t v46 = sub_4195C();
    sub_41B28(v46, v47);
LABEL_16:
    uint64_t v48 = sub_37034();
    if (!v60) {
      goto LABEL_24;
    }
    uint64_t v49 = dispatch thunk of UsoEntity_common_MedicationEvent.medicationSchedule.getter(v48);
    sub_3652C();
    if (!v49) {
      goto LABEL_24;
    }
    uint64_t v50 = sub_41B90();
    sub_367AC();
    if (!v50) {
      goto LABEL_24;
    }
    sub_41B74();
    if (v52)
    {
      sub_419A4();
      uint64_t v56 = sub_41B80();
      sub_249D4();
      if (v56)
      {
LABEL_21:
        sub_41948();
        sub_370B0();
        uint64_t v53 = sub_249D4();
        sub_41AA4(v53);
        sub_367AC();
        if (v59)
        {
          uint64_t v54 = sub_363E8();
          uint64_t v55 = dispatch thunk of UsoEntity_common_Medication.dosage.getter(v54);
          sub_37034();
          uint64_t v32 = sub_41AD0(v59);
          if (v55) {
            uint64_t v32 = sub_367AC();
          }
          goto LABEL_25;
        }

LABEL_25:
  sub_41920(v32, &qword_18AA78, v34, v35, v36, v37, v38, v39);
  sub_41978();
}

  *(void *)(v0 + 27936) = v552;
  if ((*(_BYTE *)(v0 + 27568) & 1) == 0 && *(void *)(v0 + 27584))
  {
    uint64_t v586 = *(void **)(v0 + 27896);
    uint64_t v587 = sub_D69A8(*(double *)(v0 + 27560));
    sub_36F44(v586, "setStrength:");

    uint64_t v588 = sub_ABE70();
    sub_DA5F8(v588, v589, v586);
  }

  uint64_t v590 = *(void *)(v0 + 27896);
  uint64_t v591 = *(void *)(*(void *)(v0 + 25976) + 352LL);
  *(void *)(v0 + 27944) = v591;
  *(void *)(v0 + 56) = v0 + 25784;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_CA5B8;
  *(void *)(v0 + 18960) = swift_continuation_init(v0 + 16, 0LL);
  *(void *)(v0 + 18928) = _NSConcreteStackBlock;
  *(void *)(v0 + 18936) = 0x40000000LL;
  *(void *)(v0 + 18944) = sub_22BB4;
  *(void *)(v0 + 1895_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = &unk_1800F8;
  [(id)swift_unknownObjectRetain(v591) handleLogSpecificMedications:v590 completion:v0 + 18928];
  return sub_DDF18();
}

    uint64_t v13 = (v18 - 1) & v18;
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

void medScheduleHasOneMed(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = sub_41A4C(a1, a2, a3, a4, a5, a6);
  sub_418B8((uint64_t)v6, v7, &qword_18AA78, v8, v9);
  if (!v34)
  {
    sub_418C4(v10, &qword_18AA78, v11, v12);
    goto LABEL_10;
  }

  uint64_t v13 = sub_41A38();
  uint64_t v16 = sub_418A8(v13, v14, (uint64_t)&type metadata for Any + 8, v13, v15);
  if ((v16 & 1) != 0)
  {
    uint64_t v24 = sub_41914(v16, v17, v18, v19, v20, v21, v22, v23, v31, v32);
    sub_41A1C(v24, v25);
    uint64_t v26 = sub_37034();
    if (v33)
    {
      uint64_t v27 = dispatch thunk of UsoEntity_common_MedicationEvent.medicationSchedule.getter(v26);
      uint64_t v28 = sub_367AC();
      if (v27)
      {
        uint64_t v29 = dispatch thunk of UsoEntity_common_MedicationSchedule.medications.getter(v28);
        if (v29)
        {
          uint64_t v30 = v29;
          if ((unint64_t)v29 >> 62)
          {
            if (v29 >= 0) {
              v29 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            _CocoaArrayWrapper.endIndex.getter(v29);
          }

          sub_37034();
          sub_3652C();
          uint64_t v16 = swift_bridgeObjectRelease(v30);
          goto LABEL_10;
        }

        sub_37034();
      }
    }

    uint64_t v16 = swift_release();
  }

void getMedDosageUnit(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = sub_41A4C(a1, a2, a3, a4, a5, a6);
  sub_418B8((uint64_t)v6, v7, &qword_18AA78, v8, v9);
  if (!v38)
  {
    sub_418C4(v10, &qword_18AA78, v11, v12);
    goto LABEL_15;
  }

  uint64_t v13 = sub_41A38();
  uint64_t v16 = sub_418A8(v13, v14, (uint64_t)&type metadata for Any + 8, v13, v15);
  if ((v16 & 1) != 0)
  {
    uint64_t v24 = sub_41914(v16, v17, v18, v19, v20, v21, v22, v23, v34, v35);
    sub_41A1C(v24, v25);
    uint64_t v26 = sub_37034();
    if (v37)
    {
      uint64_t v27 = dispatch thunk of UsoEntity_common_MedicationEvent.medicationSchedule.getter(v26);
      sub_3652C();
      if (v27)
      {
        uint64_t v28 = sub_41B90();
        sub_367AC();
        if (v28)
        {
          sub_41B74();
          if (v30)
          {
            sub_419A4();
            uint64_t v33 = sub_41B80();
            sub_249D4();
            if (v33) {
              goto LABEL_8;
            }
          }

          else if (*(void *)(v29 + 16))
          {
LABEL_8:
            sub_41948();
            sub_370B0();
            uint64_t v31 = sub_249D4();
            sub_41AA4(v31);
            sub_367AC();
            uint64_t v32 = v36;
LABEL_14:
            getUsoMedDosageUnit(from:)(v32);
            sub_37034();
            uint64_t v16 = sub_419D8();
            goto LABEL_15;
          }

          sub_249D4();
        }
      }
    }

    uint64_t v32 = 0LL;
    goto LABEL_14;
  }

LABEL_15:
  sub_41920(v16, &qword_18AA78, v18, v19, v20, v21, v22, v23);
  sub_41978();
}

        __break(1u);
        return result;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_15;
  }

  if (!dispatch thunk of UsoEntity_common_MedicationSchedule.schedule.getter(v1)
    || (uint64_t v5 = dispatch thunk of UsoEntity_common_RecurringDateTime.recurrenceDateTimes.getter(), sub_3652C(), !v5))
  {
    sub_367AC();
    return 0LL;
  }

  if ((unint64_t)v5 >> 62)
  {
    if (v5 >= 0) {
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v6 = v5;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v6);
    sub_2A184();
    if (v7) {
      goto LABEL_19;
    }
    goto LABEL_29;
  }

  if (!*(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8LL)))
  {
LABEL_29:
    sub_367AC();
    sub_2A184();
    return 0LL;
  }

  __break(1u);
  return result;
}

uint64_t getMedDosageValue(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = sub_41A4C(a1, a2, a3, a4, a5, a6);
  sub_418B8((uint64_t)v6, v7, &qword_18AA78, v8, v9);
  if (v38)
  {
    uint64_t v13 = sub_41A38();
    uint64_t v16 = sub_418A8(v13, v14, (uint64_t)&type metadata for Any + 8, v13, v15);
    if ((v16 & 1) != 0)
    {
      uint64_t v24 = sub_41914(v16, v17, v18, v19, v20, v21, v22, v23, v34, v35);
      sub_41A1C(v24, v25);
      uint64_t v26 = sub_37034();
      if (!v37) {
        goto LABEL_11;
      }
      uint64_t v27 = dispatch thunk of UsoEntity_common_MedicationEvent.medicationSchedule.getter(v26);
      sub_3652C();
      if (!v27)
      {
LABEL_12:
        uint64_t v32 = getMedDosageValue(from:)(v27);
        sub_37034();
        uint64_t v16 = sub_367AC();
        goto LABEL_13;
      }

      uint64_t v28 = sub_41B90();
      sub_367AC();
      if (!v28)
      {
LABEL_11:
        uint64_t v27 = 0LL;
        goto LABEL_12;
      }

      sub_41B74();
      if (v30)
      {
        sub_419A4();
        uint64_t v27 = sub_41B80();
        sub_249D4();
        if (v27) {
          goto LABEL_8;
        }
      }

      else
      {
        uint64_t v27 = *(void *)(v29 + 16);
        if (v27)
        {
LABEL_8:
          sub_41948();
          sub_370B0();
          uint64_t v31 = sub_249D4();
          sub_41AA4(v31);
          sub_367AC();
          uint64_t v27 = v36;
          goto LABEL_12;
        }
      }

      sub_249D4();
      goto LABEL_12;
    }
  }

  else
  {
    sub_418C4(v10, &qword_18AA78, v11, v12);
  }

  uint64_t v32 = 0LL;
LABEL_13:
  sub_41920(v16, &qword_18AA78, v18, v19, v20, v21, v22, v23);
  return v32;
}

void *sub_4181C(void *a1)
{
  return a1;
}

void sub_41850(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_494C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  sub_A890();
}

uint64_t sub_41890(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v4 = va_arg(va1, void);
  return swift_dynamicCast((uint64_t *)va, va1, v2 + 8, a1, 6LL);
}

uint64_t sub_418A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6 = va_arg(va1, void);
  return swift_dynamicCast((uint64_t *)va, va1, a3, a4, 6LL);
}

void sub_418B8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_41850((uint64_t)va1, (uint64_t)va, a3);
}

void sub_418C4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_418CC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(v2 - 312) + 104LL))( *(void *)(v2 - 296),  a2,  *(void *)(v2 - 304));
}

uint64_t sub_418F0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(v2 - 336) + 104LL))( *(void *)(v2 - 320),  a2,  *(void *)(v2 - 328));
}

uint64_t sub_41914( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_retain(a10);
}

void sub_41920(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_41928()
{
  return DateInterval.start.getter();
}

uint64_t sub_41948()
{
  return sub_398E0(0LL, (v0 & 0xC000000000000001LL) == 0, v0);
}

uint64_t sub_4195C()
{
  return swift_retain(v0);
}

void sub_41964(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

  ;
}

uint64_t sub_41988()
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(v1 - 424) + 8LL))(*(void *)(v1 - 416), v0);
}

uint64_t sub_419A4()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_419B4()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1LL, *(void *)(v1 - 224));
}

uint64_t sub_419D8()
{
  return swift_release(v0);
}

uint64_t sub_419E0()
{
  return swift_release(v0);
}

uint64_t sub_419F4()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 256) + 8LL))(v0, *(void *)(v1 - 240));
}

uint64_t sub_41A08()
{
  return DateTime.init(withDate:occurringIn:)(v0, v1);
}

void *sub_41A1C(uint64_t a1, uint64_t a2, ...)
{
  return dispatch thunk of Uso_VerbTemplate_Target.target.getter((uint64_t *)va);
}

uint64_t sub_41A28(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 0LL, 1LL, v1);
}

uint64_t sub_41A38()
{
  return type metadata accessor for UsoTask_create_common_MedicationEvent(0LL);
}

uint64_t sub_41A40(uint64_t a1, uint64_t a2)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1LL, v2);
}

void *sub_41A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return static UsoTask_CodegenConverter.convert(task:)((uint64_t *)va);
}

uint64_t sub_41A54()
{
  return sub_10A67C();
}

uint64_t sub_41A68@<X0>(uint64_t (*a1)(void, uint64_t, uint64_t)@<X8>)
{
  return a1(*(void *)(v1 - 256), v2, v3);
}

uint64_t sub_41A7C()
{
  return sub_D7EC(*(void *)(v0 - 232), v0 - 184);
}

uint64_t sub_41A8C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return 0LL;
}

uint64_t sub_41A9C()
{
  return swift_retain(v0);
}

void *sub_41AA4(uint64_t a1, ...)
{
  return dispatch thunk of CodeGenListEntry.entry.getter((uint64_t *)va);
}

void sub_41AB0(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_41AB8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void sub_41AC8(uint64_t a1)
{
}

uint64_t sub_41AD0(uint64_t a1)
{
  return swift_release_n(a1, 2LL);
}

void sub_41AD8(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_41AE4()
{
  return DateTime.DateTimeRange.init(withDefinedValue:)(v0);
}

uint64_t sub_41AF0()
{
  return DateTime.Date.init(withDefinedValue:)(v0);
}

uint64_t sub_41AFC()
{
  return type metadata accessor for DateTime(0LL);
}

uint64_t sub_41B08()
{
  return Date.init()();
}

uint64_t sub_41B14@<X0>(uint64_t (*a1)(void, uint64_t, uint64_t)@<X8>)
{
  return a1(*(void *)(v1 - 256), v2, v3);
}

void *sub_41B28(uint64_t a1, uint64_t a2, ...)
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter((uint64_t *)va);
}

void *sub_41B34(uint64_t a1, uint64_t a2, ...)
{
  return dispatch thunk of Uso_VerbTemplate_Reference.reference.getter((uint64_t *)va);
}

uint64_t sub_41B40()
{
  return type metadata accessor for UsoTask_request_common_MedicationEvent(0LL);
}

uint64_t sub_41B48()
{
  return type metadata accessor for UsoTask_checkExistence_common_MedicationEvent(0LL);
}

uint64_t sub_41B50@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

void sub_41B5C(uint64_t a1, uint64_t *a2)
{
}

  ;
}

  ;
}

uint64_t sub_41B80()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

void *sub_41B88()
{
  return sub_4181C((void *)(v0 - 184));
}

uint64_t sub_41B90()
{
  return dispatch thunk of UsoEntity_common_MedicationSchedule.medications.getter();
}

uint64_t sub_41B98()
{
  return dispatch thunk of UsoEntity_common_Integer.integerValue.getter();
}

uint64_t sub_41BA0()
{
  return swift_release(v0);
}

void sub_41BAC(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
}

uint64_t sub_41BB4()
{
  return DateInterval.end.getter();
}

uint64_t sub_41BBC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_41BC4()
{
  return sub_398E0(0LL, (v0 & 0xC000000000000001LL) == 0, v0);
}

uint64_t sub_41BD8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_release(a10);
}

void sub_41BE0(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_41BE8()
{
  return type metadata accessor for DateTime.DateTimeRange(0LL);
}

uint64_t sub_41BF0()
{
  return type metadata accessor for DateTime.Date(0LL);
}

void *sub_41BF8()
{
  return dispatch thunk of Uso_VerbTemplate_Target.target.getter((void *)(v0 - 184));
}

  ;
}

uint64_t sub_41C10()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_41C20()
{
  if (v0) {
    uint64_t v2 = 1LL;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_398E0(0LL, v2, v1);
}

BOOL sub_41C30(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_41CA4()
{
  return swift_release(v0);
}

uint64_t sub_41CB0()
{
  return dispatch thunk of UsoEntity_common_RecurringDateTime.recurrenceDateTimes.getter();
}

uint64_t sub_41CB8()
{
  return dispatch thunk of UsoEntity_common_MedicationEvent.medicationSchedule.getter();
}

uint64_t sub_41CC0@<X0>(uint64_t a1@<X8>)
{
  return v1(*(void *)(a1 - 256), v2);
}

uint64_t sub_41CCC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t sub_41CD8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

void sub_41CE4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_41CF0()
{
  return getMedScheduleDateTime(from:)(v0);
}

uint64_t sub_41CF8()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_41D04(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  return sub_3D9A4((uint64_t)va1, (uint64_t)va);
}

void *sub_41D10()
{
  return dispatch thunk of Uso_VerbTemplate_Target.target.getter((void *)(v0 - 144));
}

uint64_t sub_41D1C(uint64_t a1, unint64_t a2)
{
  return sub_39178(a1, a2, (uint64_t *)(v2 - 112));
}

uint64_t sub_41D28(uint64_t a1)
{
  *(void *)(v1 - 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a1;
  return v1 - 192;
}

uint64_t sub_41D3C(uint64_t a1, unint64_t a2)
{
  return sub_39178(a1, a2, (uint64_t *)(v2 - 184));
}

uint64_t sub_41D48()
{
  return swift_retain(v0);
}

uint64_t sub_41D50()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v0);
}

uint64_t sub_41D5C(uint64_t a1)
{
  return v3(a1, v1, v2);
}

void sub_41D68(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t type metadata accessor for WellnessUnsupportedCATsSimple(uint64_t a1)
{
  uint64_t result = qword_18B178;
  if (!qword_18B178) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WellnessUnsupportedCATsSimple);
  }
  return result;
}

uint64_t sub_41DAC(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_19C230);
}

uint64_t sub_41DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_41E2C(a1, a2, a3);
}

uint64_t sub_41E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_6D44();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_494C(&qword_189CF8);
  __chkstk_darwin(v11);
  sub_6D44();
  uint64_t v14 = v13 - v12;
  sub_35468(a1, v13 - v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  uint64_t v15 = CATWrapperSimple.init(templateDir:options:globals:)(v14, v10, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_41F24(a1);
  return v15;
}

uint64_t sub_41F1C()
{
  return type metadata accessor for WellnessUnsupportedCATsSimple(0LL);
}

uint64_t sub_41F24(uint64_t a1)
{
  uint64_t v2 = sub_494C(&qword_189CF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_41F64(os_log_s *a1)
{
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v74 = *(void *)(v3 - 8);
  sub_D978();
  __chkstk_darwin(v4);
  sub_6D30();
  sub_1C680(v5);
  sub_494C(qword_18A890);
  sub_D978();
  __chkstk_darwin(v6);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v7);
  uint64_t v9 = sub_41A8C((uint64_t)v71 - v8);
  uint64_t v10 = (uint8_t *)type metadata accessor for USOParse(v9);
  uint64_t v89 = *((void *)v10 - 1);
  sub_D978();
  __chkstk_darwin(v11);
  sub_6D30();
  uint64_t v88 = v12;
  uint64_t v86 = type metadata accessor for Parse(0LL);
  uint64_t v90 = *(void *)(v86 - 8);
  sub_D978();
  __chkstk_darwin(v13);
  sub_6D30();
  uint64_t v15 = sub_41A8C(v14);
  uint64_t v16 = type metadata accessor for Input(v15);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = sub_46540();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v20);
  sub_1C6B8();
  sub_1C65C();
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)v71 - v23;
  uint64_t v25 = Logger.wellness.unsafeMutableAddressor(v22);
  sub_A5DC(v25, (uint64_t)v94);
  uint64_t v82 = v19;
  uint64_t v26 = *(void (**)(void, void, void))(v19 + 16);
  uint64_t v84 = (os_log_s *)v25;
  uint64_t v83 = v26;
  v26(v24, v25, v18);
  uint64_t v27 = *(void (**)(uint64_t, os_log_s *, uint64_t))(v17 + 16);
  char v87 = a1;
  uint64_t v76 = v27;
  uint64_t v28 = ((uint64_t (*)(uint64_t, os_log_s *, uint64_t))v27)(v1, a1, v16);
  Logger.logObject.getter(v28);
  os_log_type_t v29 = sub_4662C();
  BOOL v30 = os_log_type_enabled(a1, v29);
  uint64_t v75 = v3;
  if (v30)
  {
    uint64_t v31 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v72 = sub_A5E8(32LL);
    v92[0] = v72;
    char v73 = v10;
    *(_DWORD *)uint64_t v31 = 136315138;
    v71[1] = v31 + 4;
    sub_A410( (unint64_t *)&qword_189EE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter(v16, v32);
    uint64_t v35 = sub_39178(v33, v34, v92);
    uint64_t v36 = sub_46588(v35);
    uint64_t v10 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v36, v37, v38, v31 + 12);
    sub_249D4();
    sub_46634();
    sub_DA24(&dword_0, a1, v29, "LoggingCorrectionsFlow on(correction:) for input: %s", v31);
    uint64_t v39 = v72;
    sub_A81C(v72);
    sub_5050(v39);
    sub_5050((uint64_t)v31);
  }

  else
  {
    sub_46634();
  }

  uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
  uint64_t v41 = sub_4669C();
  uint64_t v43 = v87;
  uint64_t v42 = v88;
  uint64_t v44 = v85;
  Input.parse.getter(v41);
  uint64_t v45 = sub_46690();
  if (v46(v45) != enum case for Parse.uso(_:))
  {
    uint64_t v64 = v84;
    sub_A5DC((uint64_t)v84, (uint64_t)v92);
    uint64_t v65 = v77;
    uint64_t v66 = sub_465B0(v77);
    Logger.logObject.getter(v66);
    os_log_type_t v67 = sub_4662C();
    if (sub_41C30(v67))
    {
      uint64_t v68 = (_WORD *)sub_A5E8(2LL);
      sub_366C0(v68);
      sub_232EC( &dword_0,  v64,  (os_log_type_t)v65,  "LoggingCorrectionsFlow encountered non-uso parse. Not handling.",  v10);
      sub_5050((uint64_t)v10);
    }

    v40(v65, v18);
    uint64_t v69 = sub_46690();
    goto LABEL_14;
  }

  uint64_t v47 = sub_46690();
  v48(v47);
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v89 + 32))(v42, v44, v10);
  uint64_t v49 = v84;
  sub_A5DC((uint64_t)v84, (uint64_t)v93);
  uint64_t v50 = v78;
  uint64_t v51 = sub_465B0(v78);
  Logger.logObject.getter(v51);
  os_log_type_t v52 = sub_4662C();
  if (sub_41C30(v52))
  {
    uint64_t v53 = (_WORD *)sub_A5E8(2LL);
    sub_366C0(v53);
    sub_232EC(&dword_0, v49, (os_log_type_t)v50, "LoggingCorrectionsFlow examining USO parse...", v10);
    sub_5050((uint64_t)v10);
  }

  v40(v50, v18);
  uint64_t v54 = v79;
  v76(v79, v43, v16);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v54, 0LL, 1LL, v16);
  uint64_t v55 = v80;
  sub_462B8(v54, v80);
  uint64_t v56 = v81 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_correctionInput;
  sub_463D0(v81 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_correctionInput, (uint64_t)v92, 33LL);
  sub_24D88(v55, v56, qword_18A890);
  swift_endAccess(v92);
  sub_42A08();
  if ((v57 & 1) == 0 || (USOParse.userParse.getter(v57), uint64_t v58 = sub_E8C24(), v59 = sub_465F4(), v60(v59, v75), !v58))
  {
    uint64_t v69 = sub_466A8();
LABEL_14:
    v70(v69);
    goto LABEL_15;
  }

  v91[3] = &type metadata for WellnessTask;
  v91[4] = sub_46300();
  v91[0] = v58;
  swift_retain();
  uint64_t v61 = v81;
  sub_42DF8(v91, v92);
  swift_release();
  uint64_t v62 = sub_466A8();
  v63(v62);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v91);
  sub_463D0(v61 + 16, (uint64_t)v91, 33LL);
  sub_4633C((uint64_t)v92, v61 + 16);
  swift_endAccess(v91);
LABEL_15:
  sub_D8FC();
}

uint64_t sub_4254C()
{
  uint64_t v1 = sub_D984();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = Logger.wellness.unsafeMutableAddressor(v3);
  sub_A5DC(v6, (uint64_t)v13);
  uint64_t v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v6, v1);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (_WORD *)sub_A5E8(2LL);
    sub_36A44(v10);
    sub_232EC(&dword_0, v8, v9, "LoggingCorrectionsFlow on(input:) - This is unexpected", v0);
    sub_5050((uint64_t)v0);
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return 0LL;
}

uint64_t sub_42640(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  uint64_t v3 = sub_D984();
  v2[14] = v3;
  v2[15] = *(void *)(v3 - 8);
  v2[16] = sub_A5B8();
  v2[17] = sub_A5B8();
  v2[18] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_426A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 104);
  if (!*(_BYTE *)(v2 + 64))
  {
    uint64_t v11 = *(void *)(v1 + 144);
    uint64_t v12 = *(uint8_t **)(v1 + 112);
    uint64_t v13 = *(void *)(v1 + 120);
    uint64_t v14 = Logger.wellness.unsafeMutableAddressor(a1);
    sub_A5DC(v14, v1 + 64);
    sub_464D8(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16));
    sub_A86C();
    os_log_type_t v15 = sub_AB70();
    if (sub_232DC(v15))
    {
      uint64_t v16 = (_WORD *)sub_A5E8(2LL);
      sub_36A44(v16);
      sub_232EC(&dword_0, (os_log_s *)(v1 + 64), (os_log_type_t)v11, "LoggingCorrectionsFlow Execute - Ready", v12);
      sub_5050((uint64_t)v12);
    }

    uint64_t v17 = *(void *)(v1 + 104);

    uint64_t v18 = sub_23340();
    v19(v18);
    *(_BYTE *)(v2 + 64) = 1;
    *(void *)(v1 + 88) = v17;
    uint64_t v20 = type metadata accessor for LoggingCorrectionsFlow(0LL);
    sub_A410(&qword_18B3D0, type metadata accessor for LoggingCorrectionsFlow, (uint64_t)&unk_13A238);
    static ExecuteResponse.ongoing<A>(next:)(v1 + 88, v20, v21);
    goto LABEL_12;
  }

  if (*(_BYTE *)(v2 + 64) != 1)
  {
    uint64_t v22 = *(void *)(v1 + 128);
    uint64_t v23 = *(uint8_t **)(v1 + 112);
    uint64_t v24 = Logger.wellness.unsafeMutableAddressor(a1);
    sub_A5DC(v24, v1 + 16);
    sub_232F4();
    sub_23374();
    os_log_type_t v25 = sub_AB70();
    if (sub_A988(v25))
    {
      uint64_t v26 = (_WORD *)sub_A5E8(2LL);
      sub_366C0(v26);
      sub_232EC(&dword_0, (os_log_s *)(v1 + 16), (os_log_type_t)v22, "LoggingCorrectionsFlow Execute - Done", v23);
      sub_5050((uint64_t)v23);
    }

    uint64_t v27 = *(void *)(v1 + 120);

    uint64_t v28 = sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
    static ExecuteResponse.complete()(v28);
LABEL_12:
    sub_23328();
    sub_A78C();
    sub_A67C();
    return sub_D8C4(*(uint64_t (**)(void))(v1 + 8));
  }

  uint64_t v3 = *(void *)(v1 + 136);
  uint64_t v4 = *(uint8_t **)(v1 + 112);
  uint64_t v5 = Logger.wellness.unsafeMutableAddressor(a1);
  sub_A5DC(v5, v1 + 40);
  sub_232F4();
  sub_23374();
  os_log_type_t v6 = sub_AB70();
  if (sub_A988(v6))
  {
    uint64_t v7 = (_WORD *)sub_A5E8(2LL);
    sub_366C0(v7);
    sub_232EC(&dword_0, (os_log_s *)(v1 + 40), (os_log_type_t)v3, "LoggingCorrectionsFlow Execute - Correcting", v4);
    sub_5050((uint64_t)v4);
  }

  uint64_t v8 = *(void *)(v1 + 120);

  sub_202F4(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  os_log_type_t v9 = (void *)swift_task_alloc(dword_18B24C);
  *(void *)(v1 + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v9;
  *os_log_type_t v9 = v1;
  v9[1] = sub_42910;
  return sub_443B8(*(void *)(v1 + 96));
}

uint64_t sub_42910()
{
  return sub_A5D0();
}

uint64_t sub_42958()
{
  *(_BYTE *)(*(void *)(v0 + 104) + 64LL) = 2;
  sub_23328();
  sub_A78C();
  sub_A67C();
  return sub_D8C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_42994(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LoggingCorrectionsFlow(0LL);
  sub_A410(&qword_18B3D0, type metadata accessor for LoggingCorrectionsFlow, (uint64_t)&unk_13A238);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
}

void sub_42A08()
{
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = sub_46540();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_3751C();
  uint64_t v43 = (os_log_s *)v5;
  __chkstk_darwin(v6);
  sub_1C6B8();
  uint64_t v44 = (os_log_s *)v7;
  __chkstk_darwin(v8);
  sub_1C6B8();
  uint64_t v45 = v9;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v41 - v12;
  uint64_t v14 = Logger.wellness.unsafeMutableAddressor(v11);
  sub_A5DC(v14, (uint64_t)v50);
  uint64_t v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v15 = v46(v13, v14, v3);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)sub_A5E8(2LL);
    uint64_t v42 = v2;
    uint64_t v19 = (uint64_t)v18;
    *(_WORD *)uint64_t v18 = 0;
    sub_232EC(&dword_0, v16, v17, "isCorrectionsSteeringSupportedBySelf", v18);
    uint64_t v2 = v42;
    sub_5050(v19);
  }

  uint64_t v20 = *(void *)(v4 + 8);
  uint64_t v21 = sub_46708((uint64_t)v13);
  USOParse.userParse.getter(v21);
  uint64_t v22 = v0;
  uint64_t v23 = sub_E8C24();
  (*(void (**)(os_log_s *, uint64_t))(v2 + 8))(v0, v1);
  if (!v23)
  {
    swift_beginAccess(v14, v49, 0LL, 0LL);
    uint64_t v32 = v43;
    uint64_t v33 = sub_465C4((uint64_t)v43);
    Logger.logObject.getter(v33);
    os_log_type_t v34 = sub_A898();
    if (sub_232DC(v34))
    {
      uint64_t v35 = (uint8_t *)sub_A5E8(2LL);
      *(_WORD *)uint64_t v35 = 0;
      sub_232EC(&dword_0, v32, v17, "No task found in corrections parse. Not handling.", v35);
      sub_5050((uint64_t)v35);
    }

    uint64_t v36 = (uint64_t)v32;
    goto LABEL_16;
  }

  swift_beginAccess(v14, v49, 0LL, 0LL);
  uint64_t v24 = v45;
  v46((char *)v45, v14, v3);
  swift_retain_n(v23, 3LL);
  sub_A86C();
  os_log_type_t v25 = sub_AB70();
  if (sub_46514(v25))
  {
    uint64_t v26 = sub_A5E8(12LL);
    uint64_t v43 = (os_log_s *)v20;
    uint64_t v27 = (uint8_t *)v26;
    uint64_t v42 = sub_A5E8(32LL);
    v48[0] = v42;
    *(_DWORD *)uint64_t v27 = 136315138;
    swift_retain();
    uint64_t v28 = sub_A1D18();
    unint64_t v30 = v29;
    swift_release();
    uint64_t v47 = sub_39178(v28, v30, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v27 + 4, v27 + 12);
    sub_46470();
    swift_bridgeObjectRelease(v30);
    sub_DA24(&dword_0, v22, (os_log_type_t)v1, "Received corrections intent: %s", v27);
    uint64_t v24 = v42;
    sub_A81C(v42);
    sub_5050(v24);
    sub_5050((uint64_t)v27);

    uint64_t v31 = v45;
  }

  else
  {

    sub_46470();
    uint64_t v31 = v24;
  }

  sub_46708(v31);
  if ((sub_4591C(v23) & 1) == 0)
  {
    sub_A5DC(v14, (uint64_t)v48);
    uint64_t v37 = v44;
    uint64_t v38 = sub_465C4((uint64_t)v44);
    Logger.logObject.getter(v38);
    os_log_type_t v39 = sub_A898();
    if (sub_232DC(v39))
    {
      uint64_t v40 = (uint8_t *)sub_A5E8(2LL);
      *(_WORD *)uint64_t v40 = 0;
      sub_232EC(&dword_0, v37, (os_log_type_t)v24, "Task doesn't have any non-nil information. Not handling.", v40);
      sub_5050((uint64_t)v40);
      sub_46470();
    }

    else
    {

      sub_46470();
    }

    uint64_t v36 = (uint64_t)v44;
LABEL_16:
    sub_46708(v36);
    goto LABEL_17;
  }

  sub_46470();
LABEL_17:
  sub_D8FC();
}

uint64_t sub_42DF8@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  os_log_type_t v272 = a2;
  uint64_t v271 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues(0LL);
  uint64_t v260 = *(void *)(v271 - 8);
  sub_D978();
  __chkstk_darwin(v4);
  sub_6D30();
  sub_1C680(v5);
  uint64_t v6 = sub_494C(&qword_18B3E8);
  uint64_t v7 = sub_46440(v6, (uint64_t)v296);
  __chkstk_darwin(v7);
  sub_6D30();
  sub_1C680(v8);
  uint64_t v9 = sub_494C(&qword_189B90);
  uint64_t v10 = sub_46440(v9, (uint64_t)v286);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v251 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  sub_1C6B8();
  sub_1C65C();
  uint64_t v15 = __chkstk_darwin(v14);
  os_log_type_t v17 = (char *)&v251 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = sub_41A8C((uint64_t)&v251 - v18);
  uint64_t v273 = type metadata accessor for DateInterval(v19);
  uint64_t v259 = *(void *)(v273 - 8);
  sub_D978();
  __chkstk_darwin(v20);
  sub_6D30();
  sub_1C680(v21);
  uint64_t v22 = sub_494C(&qword_18B3F0);
  uint64_t v23 = sub_46440(v22, (uint64_t)v295);
  __chkstk_darwin(v23);
  sub_6D30();
  sub_1C680(v24);
  uint64_t v25 = sub_494C(&qword_189BA0);
  uint64_t v26 = sub_46440(v25, (uint64_t)v285);
  __chkstk_darwin(v26);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v27);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v28);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v29);
  uint64_t v31 = sub_41A8C((uint64_t)&v251 - v30);
  uint64_t v32 = type metadata accessor for Logger(v31);
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  sub_3751C();
  sub_1C65C();
  __chkstk_darwin(v34);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v35);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v36);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v37);
  sub_1C6B8();
  sub_1C65C();
  __chkstk_darwin(v38);
  sub_1C6B8();
  sub_1C65C();
  uint64_t v40 = __chkstk_darwin(v39);
  uint64_t v42 = (char *)&v251 - v41;
  __chkstk_darwin(v40);
  uint64_t v44 = (char *)&v251 - v43;
  uint64_t v45 = type metadata accessor for SynthesizedWellnessIntent(0LL);
  uint64_t v46 = sub_46440(v45, (uint64_t)v303);
  __chkstk_darwin(v46);
  uint64_t v48 = (char *)&v251 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v277 = *(unsigned __int8 *)(v2
                            + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_lastSavedSampleHKIdentifier);
  uint64_t v281 = (void *)(v2 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_lastSavedSampleIntent);
  sub_A304(v2 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_lastSavedSampleIntent, (uint64_t)&v302);
  uint64_t v280 = v48;
  sub_520C(&v302, (uint64_t)v48);
  uint64_t v49 = a1[4];
  sub_3A484(a1);
  unsigned __int16 v50 = sub_46568(*(uint64_t (**)(uint64_t, uint64_t))(v49 + 24));
  uint64_t v283 = v32;
  uint64_t v282 = v33;
  uint64_t v279 = v17;
  unint64_t v265 = v13;
  if (v50 == 270)
  {
    uint64_t v51 = v274;
    uint64_t v52 = v275;
    goto LABEL_26;
  }

  unsigned __int16 v53 = v50;
  uint64_t v253 = v42;
  uint64_t v54 = a1[3];
  uint64_t v55 = a1[4];
  sub_3A484(a1);
  uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 24))(v54, v55);
  uint64_t v57 = v281[3];
  uint64_t v33 = v281[4];
  sub_500C(v281, v57);
  uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 24))(v57, v33);
  uint64_t v32 = v58;
  if ((unsigned __int16)v56 == 270)
  {
    uint64_t v52 = v275;
    goto LABEL_7;
  }

  uint64_t v52 = v275;
  uint64_t v33 = sub_10F1C0(v56);
  uint64_t v91 = v90;
  uint64_t v92 = sub_10F1C0(v32);
  if (v33 == v92 && v91 == v93)
  {
    sub_4655C();
    goto LABEL_10;
  }

  uint64_t v56 = v93;
  uint64_t v32 = sub_464C0(v33, v93, v92);
  sub_249D4();
  uint64_t v58 = sub_1EBF4();
  if ((v32 & 1) == 0)
  {
LABEL_7:
    uint64_t v59 = Logger.wellness.unsafeMutableAddressor(v58);
    sub_A5DC(v59, (uint64_t)v287);
    sub_46454();
    uint64_t v60 = (uint64_t)v44;
    uint64_t v62 = sub_463E8((uint64_t)v44, v61);
    uint64_t v63 = (os_log_s *)v44;
    Logger.logObject.getter(v62);
    os_log_type_t v64 = sub_AB70();
    if (sub_46514(v64))
    {
      uint64_t v65 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v56 = sub_A5E8(32LL);
      uint64_t v302 = v56;
      *(_DWORD *)uint64_t v65 = 136315138;
      uint64_t v33 = (uint64_t)(v65 + 12);
      LOWORD(v300) = v53;
      uint64_t v66 = String.init<A>(describing:)(&v300, &type metadata for HealthDataType);
      uint64_t v44 = (char *)v67;
      uint64_t v300 = sub_39178(v66, v67, &v302);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v300, v301, v65 + 4, v65 + 12);
      uint64_t v52 = v275;
      swift_bridgeObjectRelease(v44);
      sub_DA24(&dword_0, v63, (os_log_type_t)v32, "Corrections parse had an updated dataType: %s", v65);
      sub_A81C(v56);
      sub_5050(v56);
      sub_5050((uint64_t)v65);
    }

    sub_464B0();
    sub_463F8(v60, v68);
    sub_465E4();
    __int16 v69 = sub_463D8(*(uint64_t (**)(uint64_t, uint64_t))(v56 + 24));
    *((_WORD *)v280 + 1) = v69;
  }

LABEL_26:
  uint64_t v95 = a1[4];
  sub_500C(a1, a1[3]);
  char v96 = sub_463D8(*(uint64_t (**)(uint64_t, uint64_t))(v95 + 16));
  uint64_t v97 = v281[4];
  sub_3A484(v281);
  LOBYTE(v95) = sub_46568(*(uint64_t (**)(uint64_t, uint64_t))(v97 + 16));
  uint64_t v98 = sub_126284(v96);
  uint64_t v100 = v99;
  uint64_t v101 = sub_126284(v95);
  if (v98 == v101 && v100 == v102)
  {
    sub_4655C();
    sub_466F4();
  }

  else
  {
    char v104 = sub_464C0(v98, v102, v101);
    sub_249D4();
    sub_1EBF4();
    sub_466F4();
    if ((v104 & 1) == 0)
    {
      uint64_t v106 = Logger.wellness.unsafeMutableAddressor(v105);
      sub_A5DC(v106, (uint64_t)&v300);
      uint64_t v107 = v282;
      uint64_t v108 = v258;
      sub_463E8(v258, *(uint64_t (**)(uint64_t, uint64_t, void))(v282 + 16));
      sub_46464();
      uint64_t v109 = (os_log_s *)sub_466E0();
      os_log_type_t v110 = static os_log_type_t.debug.getter();
      uint64_t v33 = v110;
      if (os_log_type_enabled(v109, v110))
      {
        uint64_t v111 = (uint8_t *)sub_A5E8(12LL);
        uint64_t v253 = (char *)sub_A5E8(32LL);
        uint64_t v299 = v253;
        *(_DWORD *)uint64_t v111 = 136315138;
        uint64_t v252 = v111 + 4;
        uint64_t v112 = v304;
        uint64_t v44 = v305;
        sub_500C(&v302, v304);
        uint64_t v52 = v275;
        LOBYTE(v29_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = (*((uint64_t (**)(uint64_t, char *))v44 + 2))(v112, v44);
        uint64_t v113 = String.init<A>(describing:)(&v297, &type metadata for Verb);
        uint64_t v297 = sub_39178(v113, v114, (uint64_t *)&v299);
        uint64_t v32 = v273;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v297, v298, v252, v111 + 12);
        sub_249D4();
        sub_46428();
        sub_DA24(&dword_0, v109, (os_log_type_t)v33, "Corrections parse had an updated verb: %s", v111);
        uint64_t v115 = (uint64_t)v253;
        sub_A81C((uint64_t)v253);
        sub_5050(v115);
        uint64_t v116 = (uint64_t)v111;
        uint64_t v51 = v274;
        sub_5050(v116);

        uint64_t v117 = *(uint64_t (**)(uint64_t, void))(v107 + 8);
        uint64_t v118 = v258;
      }

      else
      {
        sub_46428();

        uint64_t v117 = *(uint64_t (**)(uint64_t, void))(v107 + 8);
        uint64_t v118 = v108;
      }

      sub_463F8(v118, v117);
      uint64_t v98 = v278;
      uint64_t v119 = a1[4];
      sub_500C(a1, a1[3]);
      char v120 = sub_463D8(*(uint64_t (**)(uint64_t, uint64_t))(v119 + 16));
      *uint64_t v280 = v120;
    }
  }

  sub_500C(a1, a1[3]);
  sub_46430();
  sub_4647C();
  sub_46430();
  uint64_t v121 = v51 + *(int *)(v268 + 48);
  sub_A44C(v98, v51, &qword_189BA0);
  sub_A44C(v52, v121, &qword_189BA0);
  sub_46644(v51);
  if (v77)
  {
    sub_46580(v52);
    sub_46580(v98);
    sub_46644(v121);
    if (v77)
    {
      sub_279E0(v51, &qword_189BA0);
      goto LABEL_49;
    }
  }

  else
  {
    sub_466BC(v51, &qword_189BA0, (uint64_t)&v288);
    sub_46644(v121);
    if (!v122)
    {
      uint64_t v158 = v259;
      uint64_t v159 = v254;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v259 + 32))(v254, v121, v32);
      sub_A410( &qword_18B408,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
      char v161 = dispatch thunk of static Equatable.== infix(_:_:)(v33, v159, v32, v160);
      uint64_t v162 = *(void (**)(uint64_t, uint64_t))(v158 + 8);
      v162(v159, v32);
      sub_46580(v52);
      sub_46580(v278);
      uint64_t v163 = sub_466D4();
      ((void (*)(uint64_t))v162)(v163);
      sub_46580(v51);
      if ((v161 & 1) != 0) {
        goto LABEL_49;
      }
      goto LABEL_45;
    }

    sub_464D0(v52);
    sub_464D0(v98);
    uint64_t v123 = sub_466D4();
    v124(v123);
  }

  sub_279E0(v51, &qword_18B3F0);
LABEL_45:
  uint64_t v125 = Logger.wellness.unsafeMutableAddressor(v164);
  sub_A5DC(v125, (uint64_t)&v299);
  sub_46454();
  uint64_t v126 = v266;
  sub_463E8(v266, v127);
  sub_46464();
  Logger.logObject.getter(v128);
  os_log_type_t v129 = sub_46624();
  if (os_log_type_enabled((os_log_t)&qword_189BA0, v129))
  {
    uint64_t v130 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v131 = sub_A5E8(32LL);
    uint64_t v297 = v131;
    sub_46404(4.8149e-34);
    uint64_t v132 = v264;
    uint64_t v133 = sub_46670();
    v134(v133);
    uint64_t v135 = String.init<A>(describing:)(v132, v256);
    uint64_t v137 = sub_39178(v135, v136, &v297);
    uint64_t v138 = sub_46588(v137);
    sub_46578(v138, v139, v140);
    sub_249D4();
    sub_46428();
    sub_DA24(&dword_0, (os_log_s *)&qword_189BA0, v129, "Corrections parse had an updated dateInterval: %s", v130);
    sub_A81C(v131);
    sub_5050(v131);
    sub_5050((uint64_t)v130);

    sub_464B0();
    sub_463F8(v266, v141);
  }

  else
  {
    sub_46428();

    sub_464B0();
    sub_463F8(v126, v142);
    uint64_t v132 = v264;
  }

  sub_500C(a1, a1[3]);
  sub_46430();
  sub_465A4();
  sub_24D88(v132, (uint64_t)&v280[*(int *)(v143 + 24)], &qword_189BA0);
LABEL_49:
  uint64_t v144 = (os_log_s *)a1[3];
  uint64_t v145 = a1[4];
  sub_500C(a1, (uint64_t)v144);
  int v146 = sub_463D8(*(uint64_t (**)(uint64_t, uint64_t))(v145 + 40)) & 1;
  sub_4647C();
  uint64_t v147 = sub_463D8(*(uint64_t (**)(uint64_t, uint64_t))(v145 + 40));
  if (v146 != (v147 & 1))
  {
    uint64_t v148 = Logger.wellness.unsafeMutableAddressor(v147);
    sub_A5DC(v148, (uint64_t)&v297);
    sub_46454();
    uint64_t v149 = v261;
    sub_463E8(v261, v150);
    sub_46464();
    sub_23374();
    os_log_type_t v151 = sub_46624();
    if (sub_46530(v151))
    {
      uint64_t v152 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v153 = sub_A5E8(32LL);
      uint64_t v294 = v153;
      *(_DWORD *)uint64_t v152 = 136315138;
      sub_46604();
      char v154 = (*(uint64_t (**)(char *, uint64_t))(v33 + 40))(v44, v33);
      BOOL v155 = (v154 & 1) == 0;
      if ((v154 & 1) != 0) {
        uint64_t v156 = 1702195828LL;
      }
      else {
        uint64_t v156 = 0x65736C6166LL;
      }
      if (v155) {
        unint64_t v157 = 0xE500000000000000LL;
      }
      else {
        unint64_t v157 = 0xE400000000000000LL;
      }
      uint64_t v292 = sub_39178(v156, v157, &v294);
      sub_46578((uint64_t)&v292, (uint64_t)v293, (uint64_t)(v152 + 4));
      sub_249D4();
      sub_46428();
      sub_DA24(&dword_0, v144, (os_log_type_t)v146, "Corrections parse had an updated isRequestForUser: %s", v152);
      sub_A81C(v153);
      sub_5050(v153);
      sub_5050((uint64_t)v152);
    }

    else
    {
      sub_46428();
    }

    sub_463F8(v149, *(uint64_t (**)(uint64_t, void))(v282 + 8));
    uint64_t v165 = a1[4];
    sub_500C(a1, a1[3]);
    sub_463D8(*(uint64_t (**)(uint64_t, uint64_t))(v165 + 40));
    sub_465A4();
    v280[*(int *)(v166 + 28)] = v167 & 1;
  }

  uint64_t v168 = a1[4];
  sub_500C(a1, a1[3]);
  uint64_t v169 = (os_log_s *)sub_463D8(*(uint64_t (**)(uint64_t, uint64_t))(v168 + 48));
  uint64_t v170 = v281[4];
  sub_3A484(v281);
  uint64_t v171 = sub_46568(*(uint64_t (**)(uint64_t, uint64_t))(v170 + 48));
  unsigned __int8 v172 = v171;
  if (v169 == 61)
  {
    goto LABEL_66;
  }

  uint64_t v170 = sub_375B4(v169);
  uint64_t v239 = v238;
  uint64_t v240 = sub_375B4(v172);
  if (v170 == v240 && v239 == v241)
  {
    sub_4655C();
    goto LABEL_70;
  }

  uint64_t v169 = v241;
  char v243 = _stringCompareWithSmolCheck(_:_:expecting:)(v170, v239, v240, v241, 0LL);
  sub_249D4();
  uint64_t v171 = swift_bridgeObjectRelease(v169);
  if ((v243 & 1) == 0)
  {
LABEL_66:
    uint64_t v173 = Logger.wellness.unsafeMutableAddressor(v171);
    sub_A5DC(v173, (uint64_t)&v294);
    sub_46454();
    uint64_t v174 = v262;
    sub_463E8(v262, v175);
    sub_46464();
    sub_23374();
    os_log_type_t v176 = sub_46624();
    if (sub_46530(v176))
    {
      uint64_t v177 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v178 = sub_A5E8(32LL);
      uint64_t v292 = v178;
      sub_46404(4.8149e-34);
      uint64_t v179 = sub_46670();
      LOBYTE(v290) = v180(v179);
      uint64_t v181 = sub_494C(&qword_189C88);
      uint64_t v182 = sub_46660(v181);
      uint64_t v184 = sub_39178(v182, v183, &v292);
      sub_46490(v184);
      sub_249D4();
      sub_46428();
      sub_DA24(&dword_0, v169, (os_log_type_t)v170, "Corrections parse had an updated measurementUnit: %s", v177);
      sub_A81C(v178);
      sub_5050(v178);
      sub_5050((uint64_t)v177);
    }

    else
    {
      sub_46428();
    }

    sub_463F8(v174, *(uint64_t (**)(uint64_t, void))(v282 + 8));
    uint64_t v185 = a1[4];
    sub_500C(a1, a1[3]);
    sub_463D8(*(uint64_t (**)(uint64_t, uint64_t))(v185 + 48));
    sub_465A4();
    v280[*(int *)(v186 + 32)] = v187;
  }

        sub_2A184();
        sub_3652C();
      }
    }

    else
    {
      sub_A4A4((uint64_t)v34, &qword_18AA78);
    }

    uint64_t v33 = 61LL;
    goto LABEL_29;
  }

  os_log_type_t v17 = (uint64_t *)(v15 + 40);
  while (1)
  {
    uint64_t v19 = *(v17 - 1);
    uint64_t v18 = *v17;
    sub_1EB6C();
    sub_37558(v19, v18);
    sub_A3850();
    if (!v21) {
      break;
    }
    v17 += 2;
    if (!--v16) {
      goto LABEL_18;
    }
  }

  uint64_t v33 = v20;
  sub_2A184();
LABEL_29:
  sub_A4A4((uint64_t)v36, &qword_18AA78);
  return v33;
}

LABEL_70:
  double v188 = COERCE_DOUBLE(sub_464E8());
  char v190 = v189;
  uint64_t v191 = v281[3];
  uint64_t v192 = v281[4];
  sub_500C(v281, v191);
  double v193 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint64_t))(v192 + 64))(v191, v192));
  if ((v190 & 1) != 0)
  {
    uint64_t v195 = v276;
    if ((v194 & 1) != 0) {
      goto LABEL_79;
    }
  }

  else
  {
    uint64_t v195 = v276;
    if ((v194 & 1) == 0 && v188 == v193) {
      goto LABEL_79;
    }
  }

  uint64_t v196 = Logger.wellness.unsafeMutableAddressor(*(void *)&v193);
  sub_A5DC(v196, (uint64_t)&v292);
  sub_46454();
  uint64_t v197 = v263;
  sub_463E8(v263, v198);
  sub_46464();
  sub_23374();
  os_log_type_t v199 = sub_46624();
  if (sub_46530(v199))
  {
    uint64_t v200 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v201 = sub_A5E8(32LL);
    uint64_t v289 = v201;
    sub_46404(4.8149e-34);
    uint64_t v202 = sub_46670();
    uint64_t v290 = v203(v202);
    char v291 = v204 & 1;
    uint64_t v205 = sub_494C(qword_189C90);
    uint64_t v206 = sub_46660(v205);
    uint64_t v208 = sub_466C8(v206, v207);
    sub_46490(v208);
    sub_249D4();
    sub_46428();
    sub_DA24( &dword_0,  *(os_log_s **)&v188,  (os_log_type_t)v191,  "Corrections parse had an updated measurementValue: %s",  v200);
    sub_A81C(v201);
    uint64_t v195 = v276;
    sub_5050(v201);
    sub_5050((uint64_t)v200);
  }

  else
  {
    sub_46428();
  }

  sub_463F8(v197, *(uint64_t (**)(uint64_t, void))(v282 + 8));
  sub_464E8();
  sub_465A4();
  uint64_t v210 = &v280[*(int *)(v209 + 40)];
  *(void *)uint64_t v210 = v211;
  v210[8] = v212 & 1;
LABEL_79:
  sub_465E4();
  sub_46430();
  sub_4647C();
  uint64_t v213 = (uint64_t)v279;
  sub_46430();
  uint64_t v214 = v270;
  uint64_t v215 = v270 + *(int *)(v269 + 48);
  sub_A44C(v195, v270, &qword_189B90);
  sub_A44C(v213, v215, &qword_189B90);
  uint64_t v216 = v271;
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v214, 1LL, v271) == 1)
  {
    sub_464D0((uint64_t)v279);
    sub_464D0(v195);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v215, 1LL, v216) == 1)
    {
      sub_279E0(v214, &qword_189B90);
      goto LABEL_89;
    }
  }

  else
  {
    sub_466BC(v214, &qword_189B90, (uint64_t)&v290);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v215, 1LL, v216) != 1)
    {
      uint64_t v244 = v260;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v260 + 32))(v255, v215, v216);
      sub_A410( &qword_18B400,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_ListPosition.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_ListPosition.DefinedValues);
      uint64_t v245 = sub_466D4();
      char v248 = dispatch thunk of static Equatable.== infix(_:_:)(v245, v246, v216, v247);
      uint64_t v249 = v214;
      uint64_t v250 = *(void (**)(uint64_t, uint64_t))(v244 + 8);
      sub_4669C();
      sub_464D0((uint64_t)v279);
      sub_464D0(v195);
      v250(v33, v216);
      sub_464D0(v249);
      if ((v248 & 1) != 0) {
        goto LABEL_89;
      }
      goto LABEL_85;
    }

    sub_279E0((uint64_t)v279, &qword_189B90);
    sub_279E0(v195, &qword_189B90);
    (*(void (**)(uint64_t, uint64_t))(v260 + 8))(v33, v216);
  }

  sub_279E0(v214, &qword_18B3E8);
LABEL_85:
  uint64_t v218 = (os_log_s *)Logger.wellness.unsafeMutableAddressor(v217);
  sub_A5DC((uint64_t)v218, (uint64_t)&v290);
  sub_46454();
  v219(v267, v218, v283);
  sub_46464();
  sub_466E0();
  os_log_type_t v220 = sub_4662C();
  if (os_log_type_enabled(v218, v220))
  {
    uint64_t v221 = sub_A5E8(12LL);
    uint64_t v222 = sub_A5E8(32LL);
    uint64_t v289 = v222;
    *(_DWORD *)uint64_t v221 = 136315138;
    uint64_t v281 = (void *)(v221 + 4);
    sub_46604();
    uint64_t v223 = (uint64_t)v265;
    (*(void (**)(uint64_t, uint64_t))(v33 + 80))(v195, v33);
    uint64_t v224 = String.init<A>(describing:)(v223, v257);
    uint64_t v288 = sub_466C8(v224, v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v288, &v289, v281, v221 + 12);
    sub_249D4();
    sub_46428();
    sub_DA24(&dword_0, v218, v220, "Corrections parse had an updated listPosition: %s", (uint8_t *)v221);
    sub_A81C(v222);
    sub_5050(v222);
    sub_5050(v221);

    sub_464B0();
    sub_463F8(v267, v226);
  }

  else
  {
    sub_46428();

    uint64_t v227 = sub_465F4();
    sub_463F8(v227, v228);
    uint64_t v223 = (uint64_t)v265;
  }

  uint64_t v229 = a1[3];
  uint64_t v230 = a1[4];
  sub_500C(a1, v229);
  (*(void (**)(uint64_t, uint64_t))(v230 + 80))(v229, v230);
  sub_465A4();
  sub_24D88(v223, (uint64_t)&v280[*(int *)(v231 + 48)], &qword_189B90);
LABEL_89:
  uint64_t v232 = v272;
  *os_log_type_t v272 = v277;
  sub_465A4();
  v232[4] = v233;
  sub_A410(&qword_18B3F8, type metadata accessor for SynthesizedWellnessIntent, (uint64_t)&unk_137150);
  v232[5] = v234;
  uint64_t v235 = sub_B76C(v232 + 1);
  uint64_t v236 = (uint64_t)v280;
  sub_5558((uint64_t)v280, (uint64_t)v235);
  return sub_559C(v236);
}

uint64_t sub_443B8(uint64_t a1)
{
  v2[206] = v1;
  v2[205] = a1;
  uint64_t v3 = sub_494C(qword_18A890);
  v2[207] = sub_46524(*(void *)(*(void *)(v3 - 8) + 64LL));
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v2[208] = v4;
  v2[209] = *(void *)(v4 - 8);
  v2[210] = sub_A5B8();
  v2[211] = sub_A5B8();
  uint64_t v5 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[212] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[213] = v6;
  v2[214] = sub_46524(*(void *)(v6 + 64));
  uint64_t v7 = type metadata accessor for CorrectionsExitValue(0LL);
  v2[215] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[216] = v8;
  v2[217] = sub_46524(*(void *)(v8 + 64));
  uint64_t v9 = sub_D984();
  v2[218] = v9;
  v2[219] = *(void *)(v9 - 8);
  v2[220] = sub_A5B8();
  v2[221] = sub_A5B8();
  v2[222] = sub_A5B8();
  v2[223] = sub_A5B8();
  v2[224] = sub_A5B8();
  v2[225] = sub_A5B8();
  v2[226] = sub_A5B8();
  v2[227] = sub_A5B8();
  v2[228] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_444D8()
{
  uint64_t v3 = *(void *)(v0 + 1648);
  id v4 = [objc_allocWithZone((Class)type metadata accessor for DeleteHealthSampleIntent(0)) init];
  *(void *)(v0 + 183_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v4;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v4 setSampleIdentifier:isa];

  sub_A5DC(v3 + 16, v0 + 1400);
  uint64_t v6 = sub_4610C(v3 + 16, v0 + 944);
  if (*(void *)(v0 + 976))
  {
    uint64_t v7 = *(void *)(v0 + 1792);
    uint64_t v8 = *(void *)(v0 + 1752);
    uint64_t v9 = *(uint8_t **)(v0 + 1744);
    *(_BYTE *)(v0 + 1921) = *(_BYTE *)(v0 + 944);
    uint64_t v10 = sub_20004((__int128 *)(v0 + 952), v0 + 1112);
    uint64_t v11 = Logger.wellness.unsafeMutableAddressor(v10);
    *(void *)(v0 + 1896) = v11;
    sub_A5DC(v11, v0 + 1496);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    *(void *)(v0 + 1904) = v12;
    sub_464D8(v12);
    sub_A86C();
    os_log_type_t v13 = sub_AB70();
    if (sub_232DC(v13))
    {
      uint64_t v14 = (_WORD *)sub_A5E8(2LL);
      sub_36A44(v14);
      sub_232EC( &dword_0,  (os_log_s *)(v0 + 1496),  (os_log_type_t)v7,  "LoggingCorrectionsFlow doCorrection - Updating",  v9);
      sub_5050((uint64_t)v9);
    }

    sub_465D4();
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
    *(void *)(v0 + 191_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v15;
    sub_A7A0(v15);
    uint64_t v16 = *(void **)(v2 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_intentHandler);
    *(void *)(v0 + 56) = v0 + 1608;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_45060;
    *(void *)(v0 + 1064) = swift_continuation_init(v0 + 16, 0LL);
    *(void *)(v0 + 103_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = _NSConcreteStackBlock;
    *(void *)(v0 + 1040) = 0x40000000LL;
    *(void *)(v0 + 1048) = sub_7ED0;
    *(void *)(v0 + 1056) = &unk_17D320;
    [v16 handleDeleteHealthSample:v4 completion:v0 + 1032];
    uint64_t v17 = v0 + 16;
  }

  else
  {
    uint64_t v18 = *(void *)(v0 + 1824);
    uint64_t v19 = *(void *)(v0 + 1752);
    uint64_t v20 = *(uint8_t **)(v0 + 1744);
    uint64_t v21 = Logger.wellness.unsafeMutableAddressor(v6);
    *(void *)(v0 + 1840) = v21;
    sub_A5DC(v21, v0 + 1520);
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
    *(void *)(v0 + 1848) = v22;
    sub_464D8(v22);
    sub_A86C();
    os_log_type_t v23 = sub_AB70();
    if (sub_232DC(v23))
    {
      uint64_t v24 = (_WORD *)sub_A5E8(2LL);
      sub_36A44(v24);
      sub_232EC( &dword_0,  (os_log_s *)(v0 + 1520),  (os_log_type_t)v18,  "LoggingCorrectionsFlow doCorrection - Undoing",  v20);
      sub_5050((uint64_t)v20);
    }

    sub_465D4();
    uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
    *(void *)(v0 + 1856) = v25;
    sub_A7A0(v25);
    uint64_t v26 = *(void **)(v2 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_intentHandler);
    *(void *)(v0 + 120) = v0 + 1544;
    *(void *)(v0 + 80) = v0;
    *(void *)(v0 + 88) = sub_447C8;
    *(void *)(v0 + 1104) = swift_continuation_init(v0 + 80, 0LL);
    *(void *)(v0 + 107_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = _NSConcreteStackBlock;
    *(void *)(v0 + 1080) = 0x40000000LL;
    *(void *)(v0 + 1088) = sub_7ED0;
    *(void *)(v0 + 1096) = &unk_17D338;
    [v26 handleDeleteHealthSample:v4 completion:v0 + 1072];
    uint64_t v17 = v0 + 80;
  }

  return swift_continuation_await(v17);
}

uint64_t sub_447C8()
{
  return sub_A5D0();
}

uint64_t sub_447F4()
{
  uint64_t v1 = *(void (**)(uint64_t, os_log_s *, uint64_t))(v0 + 1848);
  uint64_t v2 = *(os_log_s **)(v0 + 1840);
  uint64_t v3 = *(void *)(v0 + 1816);
  uint64_t v4 = *(void *)(v0 + 1744);
  uint64_t v5 = *(void **)(v0 + 1544);
  *(void *)(v0 + 1864) = v5;
  sub_A5DC((uint64_t)v2, v0 + 1448);
  v1(v3, v2, v4);
  uint64_t v6 = v5;
  sub_A86C();
  os_log_type_t v7 = sub_AB70();
  if (os_log_type_enabled(v2, v7))
  {
    uint64_t v8 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v9 = (void *)sub_A5E8(8LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    *(void *)(v0 + 1576) = v6;
    uint64_t v10 = v6;
    sub_46578(v0 + 1576, v0 + 1584, (uint64_t)(v8 + 4));
    *uint64_t v9 = v6;

    sub_DA24(&dword_0, v2, v7, "LoggingCorrectionsFlow Received intent response: %@", v8);
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v9);
    sub_5050((uint64_t)v9);
    sub_5050((uint64_t)v8);
  }

  else
  {

    uint64_t v2 = (os_log_s *)v6;
  }

  uint64_t v11 = *(uint64_t (**)(uint64_t))(v0 + 1856);

  uint64_t v12 = sub_23340();
  uint64_t v13 = v11(v12);
  uint64_t v14 = *(uint64_t (**)(void))((char *)&stru_20.maxprot + (swift_isaMask & *v6));
  if (((uint64_t (*)(uint64_t))v14)(v13) == 4)
  {
    uint64_t v15 = *(void *)(v0 + 1648);
    uint64_t v16 = OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_provider;
    *(void *)(v0 + 187_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_provider;
    sub_500C((void *)(v15 + v16 + 80), *(void *)(v15 + v16 + 104));
    uint64_t v17 = (void *)swift_task_alloc(dword_18EC44);
    *(void *)(v0 + 1880) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_44C08;
    return sub_E207C();
  }

  else
  {
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1848);
    uint64_t v20 = *(void *)(v0 + 1840);
    uint64_t v21 = *(void *)(v0 + 1800);
    uint64_t v22 = *(void *)(v0 + 1744);
    sub_A5DC(v20, v0 + 1424);
    v19(v21, v20, v22);
    os_log_type_t v23 = v6;
    uint64_t v24 = (os_log_s *)sub_A86C();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 1856);
    uint64_t v28 = *(void *)(v0 + 1800);
    uint64_t v29 = *(void *)(v0 + 1744);
    if (v26)
    {
      uint64_t v42 = *(void *)(v0 + 1800);
      uint64_t v30 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v31 = sub_A5E8(32LL);
      uint64_t v45 = v31;
      *(_DWORD *)uint64_t v30 = 136315138;
      *(void *)(v0 + 159_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v14();
      uint64_t v32 = String.init<A>(describing:)(v0 + 1592, &type metadata for DeleteHealthSampleIntentResponseCode);
      *(void *)(v0 + 1600) = sub_39178(v32, v33, &v45);
      sub_46578(v0 + 1600, v0 + 1608, (uint64_t)(v30 + 4));
      sub_249D4();

      sub_DA24(&dword_0, v24, v25, "Intent handler failed with code: %s", v30);
      sub_A81C(v31);
      sub_5050(v31);
      sub_5050((uint64_t)v30);

      v27(v42, v29);
    }

    else
    {

      v27(v28, v29);
    }

    uint64_t v34 = *(void **)(v0 + 1832);
    sub_A13C( (_OWORD *)(*(void *)(v0 + 1648) + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_provider),  (_OWORD *)(v0 + 464));
    sub_A178();
    static ExecuteResponse.complete<A>(next:)(v0 + 464);

    sub_A1B4((void *)(v0 + 464));
    sub_4639C();
    uint64_t v40 = v36;
    uint64_t v41 = v35;
    sub_466E8();
    uint64_t v43 = v38;
    uint64_t v44 = v37;
    swift_task_dealloc(v39);
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    sub_A760();
    sub_A8EC();
    sub_A910();
    sub_A864();
    sub_A85C();
    sub_A8F4();
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_44C08(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 1880));
  if (v1) {
    swift_errorRelease(v1);
  }
  else {
    *(void *)(v4 + 1888) = a1;
  }
  sub_A964();
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_44C7C()
{
  uint64_t v40 = *(void **)(v0 + 1864);
  uint64_t v34 = *(void **)(v0 + 1832);
  uint64_t v1 = *(void *)(v0 + 1736);
  uint64_t v2 = *(void *)(v0 + 1728);
  uint64_t v3 = *(void *)(v0 + 1720);
  uint64_t v31 = *(void *)(v0 + 1712);
  id v32 = *(id *)(v0 + 1888);
  uint64_t v36 = *(void *)(v0 + 1704);
  uint64_t v38 = *(void *)(v0 + 1696);
  uint64_t v4 = *(void *)(v0 + 1688);
  uint64_t v5 = *(void *)(v0 + 1680);
  uint64_t v6 = *(void *)(v0 + 1672);
  uint64_t v7 = *(void *)(v0 + 1664);
  uint64_t v8 = *(void *)(v0 + 1648);
  unint64_t v33 = (void *)(v8 + *(void *)(v0 + 1872));
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for CorrectionsExitValue.success(_:), v3);
  uint64_t v9 = v8 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_correctionsExitValue;
  sub_463D0(v9, v0 + 1472, 33LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 40))(v9, v1, v3);
  uint64_t v10 = swift_endAccess(v0 + 1472);
  static DialogPhase.completion.getter(v10, v11, v12, v13, v14, v15, v16, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v7);
  OutputGenerationManifest.init(dialogPhase:_:)(v5, sub_A633C, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v7);
  id v18 = [v32 patternId];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v18);

  uint64_t v19 = sub_23340();
  OutputGenerationManifest.responseViewId.setter(v19, v20);
  uint64_t v21 = v33[3];
  uint64_t v22 = v33[4];
  sub_500C(v33, v21);
  *(void *)(v0 + 163_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)( v32,  v31,  v21,  v22);
  uint64_t v23 = type metadata accessor for AnyFlow(0LL);
  uint64_t v24 = Flow.eraseToAnyFlow()(v23);
  static ExecuteResponse.complete(next:)(v24);
  sub_3652C();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v31, v38);
  sub_4639C();
  uint64_t v35 = v26;
  uint64_t v37 = v25;
  sub_466E8();
  uint64_t v39 = v28;
  uint64_t v41 = v27;
  swift_task_dealloc(v29);
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_44ED8()
{
  uint64_t v1 = *(os_log_s **)(v0 + 1840);
  uint64_t v2 = *(void *)(v0 + 1808);
  uint64_t v3 = *(uint8_t **)(v0 + 1744);
  sub_A5DC((uint64_t)v1, v0 + 1232);
  sub_36170();
  sub_23374();
  os_log_type_t v4 = sub_A898();
  if (sub_A988(v4))
  {
    uint64_t v5 = (_WORD *)sub_A5E8(2LL);
    sub_366C0(v5);
    sub_232EC(&dword_0, v1, (os_log_type_t)v2, "LoggingCorrectionsFlow Error executing pattern", v3);
    sub_5050((uint64_t)v3);
  }

  uint64_t v6 = *(void *)(v0 + 1872);
  uint64_t v21 = *(void **)(v0 + 1864);
  uint64_t v7 = *(void (**)(uint64_t))(v0 + 1856);
  uint64_t v8 = *(void **)(v0 + 1832);
  uint64_t v9 = *(void *)(v0 + 1648);

  uint64_t v10 = sub_23340();
  v7(v10);
  sub_A13C((_OWORD *)(v9 + v6), (_OWORD *)(v0 + 304));
  sub_A178();
  uint64_t v11 = Flow.eraseToAnyFlow()(&type metadata for GenericErrorFlow);
  sub_A1B4((void *)(v0 + 304));
  static ExecuteResponse.complete(next:)(v11);

  sub_3652C();
  sub_4639C();
  uint64_t v18 = v13;
  uint64_t v19 = v12;
  sub_466E8();
  uint64_t v20 = v15;
  uint64_t v22 = v14;
  swift_task_dealloc(v16);
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_45060()
{
  return sub_A5D0();
}

uint64_t sub_4508C()
{
  uint64_t v1 = *(os_log_s **)(v0 + 1896);
  uint64_t v2 = *(void **)(v0 + 1608);
  sub_A5DC((uint64_t)v1, v0 + 1376);
  sub_36170();
  uint64_t v3 = v2;
  sub_23374();
  os_log_type_t v4 = sub_AB70();
  if (sub_46614(v4))
  {
    uint64_t v5 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v6 = (void *)sub_A5E8(8LL);
    *(_DWORD *)uint64_t v5 = 138412290;
    *(void *)(v0 + 155_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v3;
    uint64_t v7 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1552, v0 + 1560, v5 + 4, v5 + 12);
    *uint64_t v6 = v3;

    sub_DA24(&dword_0, v1, (os_log_type_t)v2, "LoggingCorrectionsFlow Received intent response: %@", v5);
    sub_494C(&qword_189CB8);
    sub_A81C((uint64_t)v6);
    sub_5050((uint64_t)v6);
    sub_5050((uint64_t)v5);
  }

  else
  {

    uint64_t v1 = (os_log_s *)v3;
  }

  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1912);
  uint64_t v9 = *(void *)(v0 + 1784);
  uint64_t v10 = *(void *)(v0 + 1744);

  uint64_t v11 = v8(v9, v10);
  uint64_t v12 = *(uint64_t (**)(void))((char *)&stru_20.maxprot + (swift_isaMask & *v3));
  if (((uint64_t (*)(uint64_t))v12)(v11) == 4)
  {
    uint64_t v13 = *(void *)(v0 + 1656);
    uint64_t v14 = *(void *)(v0 + 1648) + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_correctionInput;
    sub_A5DC(v14, v0 + 1352);
    sub_A44C(v14, v13, qword_18A890);
    uint64_t v15 = type metadata accessor for Input(0LL);
    LODWORD(v14) = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v13, 1LL, v15);
    sub_279E0(v13, qword_18A890);
    uint64_t v16 = *(void (**)(os_log_s *, os_log_s *, uint64_t))(v0 + 1904);
    uint64_t v17 = *(os_log_s **)(v0 + 1896);
    uint64_t v18 = *(void *)(v0 + 1744);
    if ((_DWORD)v14 == 1)
    {
      uint64_t v19 = *(void *)(v0 + 1768);
      sub_A5DC(*(void *)(v0 + 1896), v0 + 1328);
      sub_46680();
      sub_23374();
      os_log_type_t v20 = sub_A898();
      if (sub_A988(v20))
      {
        uint64_t v21 = (uint8_t *)sub_A5E8(2LL);
        *(_WORD *)uint64_t v21 = 0;
        sub_232EC(&dword_0, v17, (os_log_type_t)v19, "Expected correctionInput, but none was found", v21);
        sub_5050((uint64_t)v21);
      }

      uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v0 + 1912);
      uint64_t v23 = *(void **)(v0 + 1832);
      uint64_t v24 = *(void *)(v0 + 1768);
      uint64_t v25 = *(void *)(v0 + 1744);
      uint64_t v26 = *(void *)(v0 + 1648);

      v22(v24, v25);
      sub_A13C( (_OWORD *)(v26 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_provider),  (_OWORD *)(v0 + 784));
      sub_A178();
      static ExecuteResponse.complete<A>(next:)(v0 + 784);

      sub_A1B4((void *)(v0 + 784));
      uint64_t v27 = (void *)(v0 + 1112);
    }

    else
    {
      unint64_t v86 = (__int128 *)(v0 + 1152);
      uint64_t v88 = (_OWORD *)(v0 + 144);
      uint64_t v85 = (__int128 *)(v0 + 1192);
      uint64_t v40 = *(os_log_s **)(v0 + 1776);
      uint64_t v41 = *(void *)(v0 + 1648);
      (*(void (**)(void, void, void))(*(void *)(v0 + 1728) + 104LL))( *(void *)(v0 + 1736),  enum case for CorrectionsExitValue.success(_:),  *(void *)(v0 + 1720));
      sub_463D0( v41 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_correctionsExitValue,  v0 + 1256,  33LL);
      uint64_t v42 = sub_466D4();
      uint64_t v43 = (void *)(v0 + 992);
      v44(v42);
      swift_endAccess(v0 + 1256);
      sub_A5DC((uint64_t)v17, v0 + 1280);
      v16(v40, v17, v18);
      uint64_t v45 = v0 + 1112;
      sub_A304(v0 + 1112, v0 + 992);
      uint64_t v46 = v40;
      Logger.logObject.getter(v47);
      os_log_type_t v48 = sub_AB70();
      BOOL v49 = sub_46614(v48);
      unsigned __int16 v50 = *(void (**)(uint64_t, uint64_t))(v0 + 1912);
      if (v49)
      {
        char v51 = *(_BYTE *)(v0 + 1921);
        uint64_t v83 = *(void *)(v0 + 1744);
        uint64_t v84 = *(void *)(v0 + 1776);
        os_log_type_t v82 = *(void (**)(uint64_t, uint64_t))(v0 + 1912);
        uint64_t v52 = sub_A5E8(22LL);
        uint64_t v81 = sub_A5E8(64LL);
        *(void *)&v95[0] = v81;
        *(_DWORD *)uint64_t v52 = 136315394;
        *(_BYTE *)(v0 + 1920) = v51;
        uint64_t v53 = String.init<A>(describing:)(v0 + 1920, &type metadata for HealthKitIdentifier);
        unint64_t v55 = v54;
        *(void *)(v0 + 1568) = sub_39178(v53, v54, (uint64_t *)v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1568, v0 + 1576, v52 + 4, v52 + 12);
        swift_bridgeObjectRelease(v55);
        *(_WORD *)(v52 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 2080;
        uint64_t v56 = *(void *)(v0 + 1016);
        uint64_t v57 = sub_3A484(v43);
        uint64_t v58 = *(void *)(v56 - 8);
        uint64_t v59 = sub_46524(*(void *)(v58 + 64));
        (*(void (**)(uint64_t, void *, uint64_t))(v58 + 16))(v59, v57, v56);
        uint64_t v60 = sub_46690();
        uint64_t v61 = String.init<A>(describing:)(v60);
        unint64_t v63 = v62;
        uint64_t v64 = v59;
        uint64_t v45 = v0 + 1112;
        swift_task_dealloc(v64);
        *(void *)(v0 + 1560) = sub_39178(v61, v63, (uint64_t *)v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1560, v0 + 1568, v52 + 14, v52 + 22);
        swift_bridgeObjectRelease(v63);
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 992));
        _os_log_impl( &dword_0,  v46,  (os_log_type_t)v18,  "LoggingCorrectionsFlow Pushing on LogHealthKitQuantity flow with updated identifier [%s] and intent [%s]",  (uint8_t *)v52,  0x16u);
        swift_arrayDestroy(v81, 2LL);
        sub_5050(v81);
        sub_5050(v52);

        v82(v84, v83);
      }

      else
      {
        uint64_t v66 = *(void *)(v0 + 1776);
        uint64_t v67 = *(void *)(v0 + 1744);
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v43);

        v50(v66, v67);
      }

      uint64_t v68 = *(void *)(v0 + 1648);
      uint64_t v92 = *(void **)(v0 + 1832);
      char v69 = *(_BYTE *)(v0 + 1921);
      sub_A304(v45, (uint64_t)v85);
      sub_A304(v68 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_flowConfig, (uint64_t)v86);
      sub_A13C((_OWORD *)(v68 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_provider), v88);
      int v70 = (objc_class *)type metadata accessor for LogQuantityIntentHandler(0LL);
      memset(v95, 0, sizeof(v95));
      uint64_t v96 = 0LL;
      id v71 = [objc_allocWithZone(v70) init];
      uint64_t v72 = type metadata accessor for LogHealthKitQuantityFlow();
      uint64_t v73 = swift_allocObject(v72, 337LL, 7LL);
      *(void *)(v0 + 1584) = sub_46140(v69, v85, v86, v88, (uint64_t)v71, (uint64_t)v95, v73);
      sub_A410( &qword_18B3D8,  (uint64_t (*)(uint64_t))type metadata accessor for LogHealthKitQuantityFlow,  (uint64_t)&protocol conformance descriptor for LogHealthKitQuantityFlow);
      uint64_t v74 = Flow.eraseToAnyFlow()(v72);
      static ExecuteResponse.complete(next:)(v74);

      sub_3652C();
      swift_release();

      uint64_t v27 = (void *)v45;
    }
  }

  else
  {
    uint64_t v28 = (_OWORD *)(v0 + 624);
    sub_A5DC(*(void *)(v0 + 1896), v0 + 1304);
    sub_46680();
    uint64_t v29 = v3;
    uint64_t v30 = (os_log_s *)sub_23374();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    unint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 1912);
    uint64_t v34 = *(void *)(v0 + 1760);
    uint64_t v35 = *(void *)(v0 + 1744);
    if (v32)
    {
      uint64_t v89 = *(void *)(v0 + 1744);
      uint64_t v36 = (uint8_t *)sub_A5E8(12LL);
      uint64_t v87 = v34;
      uint64_t v37 = sub_A5E8(32LL);
      *(void *)&v95[0] = v37;
      *(_DWORD *)uint64_t v36 = 136315138;
      *(void *)(v0 + 1624) = v12();
      uint64_t v38 = String.init<A>(describing:)(v0 + 1624, &type metadata for DeleteHealthSampleIntentResponseCode);
      *(void *)(v0 + 1616) = sub_39178(v38, v39, (uint64_t *)v95);
      uint64_t v28 = (_OWORD *)(v0 + 624);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1616, v0 + 1624, v36 + 4, v36 + 12);
      sub_249D4();

      sub_DA24(&dword_0, v30, v31, "Intent handler failed with code: %s", v36);
      sub_A81C(v37);
      sub_5050(v37);
      sub_5050((uint64_t)v36);

      v33(v87, v89);
    }

    else
    {

      v33(v34, v35);
    }

    uint64_t v65 = *(void **)(v0 + 1832);
    sub_A13C( (_OWORD *)(*(void *)(v0 + 1648) + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_provider),  v28);
    sub_A178();
    static ExecuteResponse.complete<A>(next:)(v28);

    sub_A1B4(v28);
    uint64_t v27 = (void *)(v0 + 1112);
  }

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v27);
  sub_4639C();
  uint64_t v90 = v76;
  uint64_t v91 = v75;
  sub_466E8();
  uint64_t v93 = v78;
  uint64_t v94 = v77;
  swift_task_dealloc(v79);
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_4591C(uint64_t a1)
{
  __int16 v3 = v2;
  uint64_t v4 = sub_A12B4(a1);
  uint64_t v5 = v4;
  if ((unint64_t)v4 >> 62)
  {
    if (v4 >= 0) {
      v4 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v4);
  }

  else
  {
    uint64_t v6 = *(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8LL));
  }

  swift_bridgeObjectRelease(v5);
  int v7 = sub_A0D74(a1);
  sub_A0AC8(a1);
  BOOL v11 = v3 != 270 || v6 != 0 || v7 != 61;
  return (v8 & 1) == 0 || v11;
}

void sub_459B8()
{
  uint64_t v1 = type metadata accessor for CorrectionsExitValue(0LL);
  sub_27A6C(v1);
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_kWellnessFlowPluginIdentifier
                                      + 8));
  uint64_t v2 = type metadata accessor for UUID(0LL);
  sub_27A6C(v2);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0
                                                                + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_lastSavedSampleIntent));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0
                                                                + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_flowConfig));
  sub_D878((void *)(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_provider));
  swift_unknownObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_intentHandler));
  sub_279E0(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_correctionInput, qword_18A890);
  sub_A890();
}

uint64_t sub_45A74()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_45A98()
{
  return type metadata accessor for LoggingCorrectionsFlow(0LL);
}

uint64_t type metadata accessor for LoggingCorrectionsFlow(uint64_t a1)
{
  uint64_t result = qword_18B230;
  if (!qword_18B230) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LoggingCorrectionsFlow);
  }
  return result;
}

void sub_45AD8(uint64_t a1)
{
  v8[0] = "0";
  v8[1] = &unk_13A120;
  uint64_t v2 = type metadata accessor for CorrectionsExitValue(319LL);
  if (v3 <= 0x3F)
  {
    v8[2] = *(void *)(v2 - 8) + 64LL;
    v8[3] = &unk_13A138;
    uint64_t v4 = type metadata accessor for UUID(319LL);
    if (v5 <= 0x3F)
    {
      v8[4] = *(void *)(v4 - 8) + 64LL;
      v8[5] = &unk_13A150;
      v8[6] = &unk_13A168;
      v8[7] = &unk_13A168;
      v8[8] = &unk_13A180;
      v8[9] = &unk_13A198;
      sub_22DB0(319LL);
      if (v7 <= 0x3F)
      {
        void v8[10] = *(void *)(v6 - 8) + 64LL;
        swift_updateClassMetadata2(a1, 256LL, 11LL, v8, a1 + 80);
      }
    }
  }

uint64_t storeEnumTagSinglePayload for LoggingCorrectionsFlow.State( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_45C08 + 4 * byte_13A0B5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_45C3C + 4 * byte_13A0B0[v4]))();
}

uint64_t sub_45C3C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_45C44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x45C4CLL);
  }
  return result;
}

uint64_t sub_45C58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x45C60LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_45C64(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_45C6C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LoggingCorrectionsFlow.State()
{
  return &type metadata for LoggingCorrectionsFlow.State;
}

uint64_t destroy for LoggingCorrectionsFlow.CorrectionsTask(uint64_t result)
{
  if (*(void *)(result + 32) >= 0xFFFFFFFFuLL) {
    return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(result + 8));
  }
  return result;
}

uint64_t initializeWithCopy for LoggingCorrectionsFlow.CorrectionsTask(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 32);
  if (v3 < 0xFFFFFFFF)
  {
    __int128 v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + sub_46370(v0 + 16) = v5;
    *(_OWORD *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(_OWORD *)(a2 + 32);
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v4 = *(void *)(a2 + 40);
    *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v3;
    *(void *)(a1 + 40) = v4;
    (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  }

  return a1;
}

uint64_t assignWithCopy for LoggingCorrectionsFlow.CorrectionsTask(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  unint64_t v5 = *((void *)a2 + 4);
  if (*(void *)(a1 + 32) < 0xFFFFFFFFuLL)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      uint64_t v6 = *((void *)a2 + 4);
      *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v6;
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      (**(void (***)(void *, uint64_t))(v6 - 8))(v4, (uint64_t)a2 + 8);
      return a1;
    }

__n128 initializeWithTake for LoggingCorrectionsFlow.CorrectionsTask(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + sub_46370(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LoggingCorrectionsFlow.CorrectionsTask(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  uint64_t v4 = (_OWORD *)(a1 + 8);
  if (*(void *)(a2 + 32) < 0xFFFFFFFFuLL)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 8));
LABEL_5:
    __int128 v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + sub_46370(v0 + 16) = v6;
    *(_OWORD *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(_OWORD *)(a2 + 32);
    return a1;
  }

  *(_BYTE *)a1 = *(_BYTE *)a2;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(a1 + 8));
  __int128 v5 = *(_OWORD *)(a2 + 24);
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for LoggingCorrectionsFlow.CorrectionsTask(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(sub_36C64(v2, v3) = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for LoggingCorrectionsFlow.CorrectionsTask( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + sub_46370(v0 + 16) = 0u;
    *(_OWORD *)(result + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a2;
    }
  }

  return result;
}

uint64_t sub_45F08(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 32);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(sub_A304(v0, v1) = -1;
  }
  return (v1 + 1);
}

double sub_45F20(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 40) = 0LL;
    double result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }

  else if (a2)
  {
    *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = (a2 - 1);
  }

  return result;
}

ValueMetadata *type metadata accessor for LoggingCorrectionsFlow.CorrectionsTask()
{
  return &type metadata for LoggingCorrectionsFlow.CorrectionsTask;
}

unint64_t sub_45F64()
{
  unint64_t result = qword_18B3B8[0];
  if (!qword_18B3B8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_13A210, &type metadata for LoggingCorrectionsFlow.State);
    atomic_store(result, qword_18B3B8);
  }

  return result;
}

uint64_t sub_45FA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_correctionsExitValue;
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t v4 = type metadata accessor for CorrectionsExitValue(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_46008(os_log_s *a1)
{
  return v1 & 1;
}

uint64_t sub_4602C()
{
  return 0LL;
}

uint64_t sub_46044(uint64_t a1, uint64_t a2)
{
  return sub_42994(a1, a2);
}

uint64_t sub_46064(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18B244);
  *(void *)(v1 + sub_46370(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_A108;
  return sub_42640(a1);
}

uint64_t sub_460B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for LoggingCorrectionsFlow(0LL);
  return Flow<>.exitValue.getter(v3, a2);
}

void sub_460E0()
{
}

uint64_t sub_4610C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_46140(char a1, __int128 *a2, __int128 *a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_BYTE *)(a7 + 336) = 3;
  *(_BYTE *)(a7 + sub_46370(v0 + 16) = a1;
  sub_20004(a2, a7 + 24);
  sub_A304((uint64_t)a3, a7 + 64);
  sub_A13C(a4, (_OWORD *)(a7 + 104));
  *(void *)(a7 + 264) = a5;
  sub_20004(a3, (uint64_t)v15);
  memcpy(v14, a4, sizeof(v14));
  if (*(void *)(a6 + 24))
  {
    sub_D878(v14);
    sub_46428();
    sub_20004((__int128 *)a6, (uint64_t)&v16);
  }

  else
  {
    uint64_t v17 = &type metadata for CorrectionsFlowProvider;
    uint64_t v18 = &off_17F1B8;
    uint64_t v12 = swift_allocObject(&unk_17D360, 216LL, 7LL);
    *(void *)&__int128 v16 = v12;
    sub_20004(v15, v12 + 16);
    memcpy((void *)(v12 + 56), v14, 0xA0uLL);
    sub_279E0(a6, &qword_18B3E0);
  }

  sub_20004(&v16, a7 + 272);
  *(void *)(a7 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
  *(void *)(a7 + 320) = 0LL;
  *(void *)(a7 + 328) = 1LL;
  return a7;
}

uint64_t sub_46274()
{
  return swift_deallocObject(v0, 216LL, 7LL);
}

uint64_t sub_462B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(qword_18A890);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_46300()
{
  unint64_t result = qword_18B410;
  if (!qword_18B410)
  {
    unint64_t result = swift_getWitnessTable(&unk_13C198, &type metadata for WellnessTask);
    atomic_store(result, (unint64_t *)&qword_18B410);
  }

  return result;
}

uint64_t sub_4633C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_46370(uint64_t a1)
{
  return a1;
}

uint64_t sub_4639C()
{
  return *(void *)(v0 + 1824);
}

uint64_t sub_463D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0LL);
}

uint64_t sub_463D8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_463E8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, void)@<X8>)
{
  return a2(a1, v2, *(void *)(v3 - 344));
}

uint64_t sub_463F8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void)@<X8>)
{
  return a2(a1, *(void *)(v2 - 344));
}

void *sub_46404(float a1)
{
  *uint64_t v1 = a1;
  *(void *)(v2 - 39_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v1 + 1;
  return sub_500C((void *)(v2 - 128), *(void *)(v2 - 104));
}

uint64_t sub_46428()
{
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 - 128));
}

uint64_t sub_46430()
{
  return v0(v1, v2);
}

uint64_t sub_46440@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 - 256) = result;
  return result;
}

  ;
}

void sub_46464()
{
}

uint64_t sub_46470()
{
  return swift_release_n(v0, 2LL);
}

void *sub_4647C()
{
  return sub_500C(*(void **)(v0 - 360), *(void *)(*(void *)(v0 - 360) + 24LL));
}

uint64_t sub_46490(uint64_t a1)
{
  *(void *)(v3 - 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 272, v2 + 8, *(void *)(v3 - 392), v1);
}

  ;
}

uint64_t sub_464C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, v4, 0LL);
}

void sub_464D0(uint64_t a1)
{
}

uint64_t sub_464D8@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v3, v2);
}

uint64_t sub_464E8()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  sub_500C(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2);
}

BOOL sub_46514(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_46524@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

BOOL sub_46530(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_46540()
{
  return type metadata accessor for Logger(0LL);
}

uint64_t sub_4655C()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_46568@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_46578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

void sub_46580(uint64_t a1)
{
}

uint64_t sub_46588(uint64_t a1)
{
  *(void *)(v1 - 224) = a1;
  return v1 - 224;
}

  ;
}

uint64_t sub_465B0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 288))(a1, v1, v2);
}

uint64_t sub_465C4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 168))(a1, v2, v1);
}

void sub_465D4()
{
}

void *sub_465E4()
{
  return sub_500C(v0, v0[3]);
}

uint64_t sub_465F4()
{
  return v0;
}

void *sub_46604()
{
  return sub_500C((void *)(v0 - 128), *(void *)(v0 - 104));
}

BOOL sub_46614(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_46624()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_4662C()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_46634()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_46644(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1LL, v1);
}

uint64_t sub_46660(uint64_t a1)
{
  return String.init<A>(describing:)(v1 - 272, a1);
}

uint64_t sub_46670()
{
  return v0;
}

uint64_t sub_46680()
{
  return v2(v0, v1, v3);
}

uint64_t sub_46690()
{
  return v0;
}

uint64_t sub_4669C()
{
  return v0(v2, v1);
}

uint64_t sub_466A8()
{
  return v0;
}

void sub_466BC(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_466C8(uint64_t a1, unint64_t a2)
{
  return sub_39178(a1, a2, (uint64_t *)(v2 - 280));
}

uint64_t sub_466D4()
{
  return v0;
}

uint64_t sub_466E0()
{
  return Logger.logObject.getter();
}

  ;
}

  ;
}

uint64_t sub_46708(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_46710(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 56) = a3;
  *(void *)(v4 + 64) = a4;
  *(void *)(v4 + 48) = a2;
  *(_BYTE *)(v4 + 248) = a1;
  uint64_t v5 = sub_D984();
  *(void *)(v4 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 80) = v6;
  *(void *)(v4 + 88) = sub_A5C0(v6);
  sub_A964();
  return sub_A5D0();
}

void sub_4675C(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(v1 + 248);
  switch(*(_BYTE *)(v1 + 248))
  {
    case 'Y':
      __int128 v7 = (void *)swift_task_alloc(dword_18B4C4);
      *(void *)(v1 + 96) = v7;
      sub_56034(v7, (uint64_t)sub_46D64);
      sub_560E0();
      sub_470FC(v8, v9, v10);
      break;
    case 'Z':
      os_log_type_t v31 = (void *)swift_task_alloc(dword_18B4BC);
      *(void *)(v1 + 104) = v31;
      sub_56034(v31, (uint64_t)sub_46D9C);
      sub_560E0();
      sub_47530(v32, v33, v34);
      break;
    case '[':
    case '\\':
    case '^':
    case '_':
    case 'b':
    case 'c':
    case 'd':
    case 'e':
    case 'f':
    case 'h':
    case 'j':
LABEL_14:
      uint64_t v16 = *(void *)(v1 + 80);
      uint64_t v15 = *(void *)(v1 + 88);
      uint64_t v17 = *(void *)(v1 + 72);
      uint64_t v18 = Logger.wellness.unsafeMutableAddressor(a1);
      sub_A5DC(v18, v1 + 16);
      uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v18, v17);
      os_log_type_t v20 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v21 = static os_log_type_t.error.getter();
      BOOL v22 = sub_A634(v21);
      uint64_t v23 = *(void *)(v1 + 80);
      uint64_t v24 = *(void *)(v1 + 88);
      uint64_t v25 = *(void *)(v1 + 72);
      if (v22)
      {
        unsigned __int8 v26 = *(_BYTE *)(v1 + 248);
        uint64_t v97 = *(void *)(v1 + 88);
        uint64_t v27 = (uint8_t *)sub_A5E8(12LL);
        uint64_t v28 = sub_A5E8(32LL);
        uint64_t v98 = v28;
        *(_DWORD *)uint64_t v27 = 136315138;
        uint64_t v29 = sub_27CC8(v26);
        *(void *)(v1 + 40) = sub_39178(v29, v30, &v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 40, v1 + 48, v27 + 4, v27 + 12);
        swift_bridgeObjectRelease();
        sub_DA24(&dword_0, v20, (os_log_type_t)v18, "No pattern execution defined for %s", v27);
        sub_A81C(v28);
        sub_5050(v28);
        sub_5050((uint64_t)v27);

        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v97, v25);
      }

      else
      {

        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v25);
      }

      unsigned __int8 v95 = *(_BYTE *)(v1 + 248);
      uint64_t v98 = 0LL;
      unint64_t v99 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(35LL);
      swift_bridgeObjectRelease();
      uint64_t v98 = 0xD000000000000021LL;
      unint64_t v99 = 0x80000000001447C0LL;
      v96._countAndFlagsBits = sub_27CC8(v95);
      String.append(_:)(v96);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v98,  v99,  "WellnessFlowPlugin/ExecutePattern.swift",  39LL,  2LL,  78LL,  0);
      sub_560E0();
      break;
    case ']':
      uint64_t v35 = (void *)swift_task_alloc(dword_18B4B4);
      *(void *)(v1 + 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v35;
      sub_56034(v35, (uint64_t)sub_46DCC);
      sub_560E0();
      sub_47910(v36, v37, v38);
      break;
      unint64_t v39 = (void *)swift_task_alloc(dword_18B4AC);
      *(void *)(v1 + 120) = v39;
      sub_56034(v39, (uint64_t)sub_46DFC);
      sub_560E0();
      sub_47EE0(v40, v41, v42);
      break;
    case 'a':
      uint64_t v43 = (void *)swift_task_alloc(dword_18B4A4);
      *(void *)(v1 + sub_A304(v0, v1 - 128) = v43;
      sub_56034(v43, (uint64_t)sub_46E2C);
      sub_560E0();
      sub_48694(v44, v45, v46);
      break;
    case 'g':
      uint64_t v47 = (void *)swift_task_alloc(dword_18B49C);
      *(void *)(v1 + 136) = v47;
      sub_56034(v47, (uint64_t)sub_46E5C);
      sub_560E0();
      sub_48A74(v48, v49, v50);
      break;
    case 'i':
      char v51 = (void *)swift_task_alloc(dword_18B494);
      *(void *)(v1 + 144) = v51;
      sub_56034(v51, (uint64_t)sub_46E8C);
      sub_560E0();
      sub_48F44(v52, v53, v54);
      break;
    case 'k':
      unint64_t v55 = (void *)swift_task_alloc(dword_18B48C);
      *(void *)(v1 + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v55;
      sub_56034(v55, (uint64_t)sub_46EBC);
      sub_560E0();
      sub_49C68(v56, v57, v58);
      break;
    default:
      switch(*(_BYTE *)(v1 + 248))
      {
        case 0x93:
          BOOL v11 = (void *)swift_task_alloc(dword_18B484);
          *(void *)(v1 + 160) = v11;
          sub_56034(v11, (uint64_t)sub_46EEC);
          sub_560E0();
          sub_4A518(v12, v13, v14);
          return;
        case 0x94:
        case 0x95:
        case 0x98:
        case 0x99:
        case 0x9A:
          goto LABEL_14;
        case 0x96:
          uint64_t v59 = (void *)swift_task_alloc(dword_18B47C);
          *(void *)(v1 + 168) = v59;
          sub_56034(v59, (uint64_t)sub_46F1C);
          sub_560E0();
          sub_4A8F8(v60, v61, v62);
          return;
        case 0x97:
          unint64_t v63 = (void *)swift_task_alloc(dword_18B474);
          *(void *)(v1 + sub_20004(v6, v1 + 176) = v63;
          sub_56034(v63, (uint64_t)sub_46F4C);
          sub_560E0();
          sub_4ACD8(v64, v65, v66);
          return;
        case 0x9B:
          uint64_t v67 = (void *)swift_task_alloc(dword_18B46C);
          *(void *)(v1 + 184) = v67;
          sub_56034(v67, (uint64_t)sub_46F7C);
          sub_560E0();
          sub_4B0B8(v68, v69, v70);
          return;
        default:
          switch(v2)
          {
            case 159:
              id v71 = (void *)swift_task_alloc(dword_18B464);
              *(void *)(v1 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v71;
              sub_56034(v71, (uint64_t)sub_46FAC);
              sub_560E0();
              sub_4B498(v72, v73, v74);
              break;
            case 162:
              uint64_t v75 = (void *)swift_task_alloc(dword_18B45C);
              *(void *)(v1 + 200) = v75;
              sub_56034(v75, (uint64_t)sub_46FDC);
              sub_560E0();
              sub_4B8FC(v76, v77, v78);
              break;
            case 170:
              uint64_t v79 = (void *)swift_task_alloc(dword_18B454);
              *(void *)(v1 + 208) = v79;
              sub_56034(v79, (uint64_t)sub_4700C);
              sub_560E0();
              sub_4C59C(v80, v81, v82);
              break;
            case 173:
              uint64_t v83 = (void *)swift_task_alloc(dword_18B44C);
              *(void *)(v1 + sub_20004(v5, v1 + 216) = v83;
              sub_56034(v83, (uint64_t)sub_4703C);
              sub_560E0();
              sub_4CA00(v84, v85, v86);
              break;
            case 174:
              uint64_t v87 = (void *)swift_task_alloc(dword_18B444);
              *(void *)(v1 + 224) = v87;
              sub_56034(v87, (uint64_t)sub_4706C);
              sub_560E0();
              sub_4CDE0(v88, v89, v90);
              break;
            case 184:
              uint64_t v91 = (void *)swift_task_alloc(dword_18B43C);
              *(void *)(v1 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v91;
              sub_56034(v91, (uint64_t)sub_4709C);
              sub_560E0();
              sub_4D474(v92, v93, v94);
              break;
            case 193:
              uint64_t v3 = (void *)swift_task_alloc(dword_18B434);
              *(void *)(v1 + 240) = v3;
              sub_56034(v3, (uint64_t)sub_470CC);
              sub_560E0();
              sub_4D854(v4, v5, v6);
              break;
            default:
              goto LABEL_14;
          }

          break;
      }

      break;
  }

uint64_t sub_46D64()
{
  uint64_t v1 = sub_565DC();
  return sub_55F88(v1, v2);
}

uint64_t sub_46D9C()
{
  uint64_t v1 = sub_565DC();
  return sub_55F88(v1, v2);
}

uint64_t sub_46DCC()
{
  uint64_t v1 = sub_565DC();
  return sub_55F88(v1, v2);
}

uint64_t sub_46DFC()
{
  uint64_t v1 = sub_565DC();
  return sub_55F88(v1, v2);
}

uint64_t sub_46E2C()
{
  uint64_t v1 = sub_565DC();
  return sub_55F88(v1, v2);
}

uint64_t sub_46E5C()
{
  uint64_t v1 = sub_565DC();
  return sub_55F88(v1, v2);
}

uint64_t sub_46E8C()
{
  uint64_t v1 = sub_565DC();
  return sub_55F88(v1, v2);
}

uint64_t sub_46EBC()
{
  uint64_t v1 = sub_565DC();
  return sub_55F88(v1, v2);
}

uint64_t sub_46EEC()
{
  uint64_t v1 = sub_565DC();
  return sub_55F88(v1, v2);
}

uint64_t sub_46F1C()
{
  uint64_t v1 = sub_565DC();
  return sub_55F88(v1, v2);
}

uint64_t sub_46F4C()
{
  uint64_t v1 = sub_565DC();
  return sub_55F88(v1, v2);
}

uint64_t sub_46F7C()
{
  uint64_t v1 = sub_565DC();
  return sub_55F88(v1, v2);
}

uint64_t sub_46FAC()
{
  uint64_t v1 = sub_565DC();
  return sub_55F88(v1, v2);
}

uint64_t sub_46FDC()
{
  uint64_t v1 = sub_565DC();
  return sub_55F88(v1, v2);
}

uint64_t sub_4700C()
{
  uint64_t v1 = sub_565DC();
  return sub_55F88(v1, v2);
}

uint64_t sub_4703C()
{
  uint64_t v1 = sub_565DC();
  return sub_55F88(v1, v2);
}

uint64_t sub_4706C()
{
  uint64_t v1 = sub_565DC();
  return sub_55F88(v1, v2);
}

uint64_t sub_4709C()
{
  uint64_t v1 = sub_565DC();
  return sub_55F88(v1, v2);
}

uint64_t sub_470CC()
{
  uint64_t v1 = sub_565DC();
  return sub_55F88(v1, v2);
}

uint64_t sub_470FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_56158(a1, a2, a3);
  v3[16] = sub_55F48(v4);
  uint64_t v5 = sub_494C(&qword_189CF8);
  v3[17] = v5;
  v3[18] = sub_D8CC(*(void *)(v5 - 8));
  v3[19] = sub_A5B8();
  v3[20] = sub_A5B8();
  uint64_t v6 = sub_A8E4();
  v3[21] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[22] = v7;
  v3[23] = sub_D8CC(v7);
  v3[24] = sub_A5B8();
  v3[25] = sub_A5B8();
  v3[26] = sub_A5B8();
  uint64_t v8 = sub_494C(&qword_189BA0);
  v3[27] = sub_D8CC(*(void *)(v8 - 8));
  v3[28] = sub_A5B8();
  uint64_t v9 = sub_494C(&qword_189CE8);
  v3[29] = sub_D8CC(*(void *)(v9 - 8));
  v3[30] = sub_A5B8();
  v3[31] = sub_A5B8();
  v3[32] = sub_A5B8();
  v3[33] = sub_A5B8();
  v3[34] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

#error "47388: call analysis failed (funcsize=179)"
uint64_t sub_474DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_560AC();
  if (v1) {
    sub_36860();
  }
  else {
    *(void *)(v2 + 304) = v0;
  }
  sub_A7C8();
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

uint64_t sub_47530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_56158(a1, a2, a3);
  v3[16] = sub_55F48(v4);
  uint64_t v5 = sub_494C(&qword_189CF8);
  v3[17] = v5;
  v3[18] = sub_D8CC(*(void *)(v5 - 8));
  v3[19] = sub_A5B8();
  v3[20] = sub_A5B8();
  uint64_t v6 = sub_A8E4();
  v3[21] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[22] = v7;
  v3[23] = sub_D8CC(v7);
  v3[24] = sub_A5B8();
  v3[25] = sub_A5B8();
  v3[26] = sub_A5B8();
  uint64_t v8 = sub_494C(&qword_189BA0);
  v3[27] = sub_D8CC(*(void *)(v8 - 8));
  v3[28] = sub_A5B8();
  uint64_t v9 = sub_494C(&qword_189CE8);
  v3[29] = sub_D8CC(*(void *)(v9 - 8));
  v3[30] = sub_A5B8();
  v3[31] = sub_A5B8();
  v3[32] = sub_A5B8();
  v3[33] = sub_A5B8();
  v3[34] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

#error "477BC: call analysis failed (funcsize=179)"
uint64_t sub_47910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v4 = sub_56158(a1, a2, a3);
  v3[16] = sub_55F48(v4);
  uint64_t v5 = sub_494C(&qword_189CF8);
  v3[17] = v5;
  v3[18] = sub_D8CC(*(void *)(v5 - 8));
  v3[19] = sub_A5B8();
  v3[20] = sub_A5B8();
  uint64_t v6 = sub_A8E4();
  v3[21] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[22] = v7;
  v3[23] = sub_D8CC(v7);
  v3[24] = sub_A5B8();
  v3[25] = sub_A5B8();
  v3[26] = sub_A5B8();
  uint64_t v8 = sub_494C(&qword_189BA0);
  v3[27] = sub_D8CC(*(void *)(v8 - 8));
  v3[28] = sub_A5B8();
  uint64_t v9 = sub_494C(&qword_189CE8);
  v3[29] = sub_D8CC(*(void *)(v9 - 8));
  v3[30] = sub_A5B8();
  v3[31] = sub_A5B8();
  v3[32] = sub_A5B8();
  v3[33] = sub_A5B8();
  v3[34] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

#error "47B9C: call analysis failed (funcsize=179)"
uint64_t sub_47CF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sub_560AC();
  if (v1) {
    sub_36860();
  }
  else {
    *(void *)(v2 + 304) = v0;
  }
  sub_A7C8();
  sub_A964();
  return sub_55F28(v3, v4, v5);
}

#error "47DE4: call analysis failed (funcsize=51)"
#error "47EB0: call analysis failed (funcsize=48)"
uint64_t sub_47EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v4 = sub_56158(a1, a2, a3);
  v3[16] = sub_55F48(v4);
  uint64_t v5 = sub_494C(&qword_189D00);
  v3[17] = sub_A5C0(*(void *)(v5 - 8));
  uint64_t v6 = sub_494C(&qword_189CF8);
  v3[18] = v6;
  v3[19] = sub_D8CC(*(void *)(v6 - 8));
  v3[20] = sub_A5B8();
  v3[21] = sub_A5B8();
  uint64_t v7 = sub_A8E4();
  v3[22] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[23] = v8;
  v3[24] = sub_D8CC(v8);
  v3[25] = sub_A5B8();
  v3[26] = sub_A5B8();
  v3[27] = sub_A5B8();
  uint64_t v9 = sub_494C(&qword_189BA0);
  v3[28] = sub_D8CC(*(void *)(v9 - 8));
  v3[29] = sub_A5B8();
  uint64_t v10 = sub_494C(&qword_189CE8);
  v3[30] = sub_D8CC(*(void *)(v10 - 8));
  v3[31] = sub_A5B8();
  v3[32] = sub_A5B8();
  v3[33] = sub_A5B8();
  v3[34] = sub_A5B8();
  v3[35] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

#error "481F4: call analysis failed (funcsize=280)"
uint64_t sub_4846C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sub_56884();
  sub_56254(*(void *)(v2 + 304), v3);
  if (v1) {
    sub_36860();
  }
  else {
    *(void *)(v2 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0;
  }
  sub_A7C8();
  sub_A964();
  return sub_55F28(v4, v5, v6);
}

#error "48578: call analysis failed (funcsize=56)"
#error "48658: call analysis failed (funcsize=52)"
uint64_t sub_48694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v4 = sub_56158(a1, a2, a3);
  v3[16] = sub_55F48(v4);
  uint64_t v5 = sub_494C(&qword_189CF8);
  v3[17] = v5;
  v3[18] = sub_D8CC(*(void *)(v5 - 8));
  v3[19] = sub_A5B8();
  v3[20] = sub_A5B8();
  uint64_t v6 = sub_A8E4();
  v3[21] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[22] = v7;
  v3[23] = sub_D8CC(v7);
  v3[24] = sub_A5B8();
  v3[25] = sub_A5B8();
  v3[26] = sub_A5B8();
  uint64_t v8 = sub_494C(&qword_189BA0);
  v3[27] = sub_D8CC(*(void *)(v8 - 8));
  v3[28] = sub_A5B8();
  uint64_t v9 = sub_494C(&qword_189CE8);
  v3[29] = sub_D8CC(*(void *)(v9 - 8));
  v3[30] = sub_A5B8();
  v3[31] = sub_A5B8();
  v3[32] = sub_A5B8();
  v3[33] = sub_A5B8();
  v3[34] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

#error "48920: call analysis failed (funcsize=179)"
uint64_t sub_48A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v4 = sub_56158(a1, a2, a3);
  v3[16] = sub_55F48(v4);
  uint64_t v5 = sub_A8E4();
  v3[17] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[18] = v6;
  v3[19] = sub_D8CC(v6);
  v3[20] = sub_A5B8();
  v3[21] = sub_A5B8();
  v3[22] = sub_A5B8();
  uint64_t v7 = sub_494C(&qword_189CF8);
  v3[23] = v7;
  v3[24] = sub_D8CC(*(void *)(v7 - 8));
  v3[25] = sub_A5B8();
  v3[26] = sub_A5B8();
  v3[27] = sub_A5B8();
  uint64_t v8 = sub_494C(&qword_189BA0);
  v3[28] = sub_D8CC(*(void *)(v8 - 8));
  v3[29] = sub_A5B8();
  uint64_t v9 = sub_494C(&qword_189CE8);
  v3[30] = sub_D8CC(*(void *)(v9 - 8));
  v3[31] = sub_A5B8();
  v3[32] = sub_A5B8();
  v3[33] = sub_A5B8();
  v3[34] = sub_A5B8();
  v3[35] = sub_A5B8();
  v3[36] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

#error "48D20: call analysis failed (funcsize=207)"
uint64_t sub_48ED8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v4 = *v2;
  uint64_t v9 = v4;
  sub_56254(*(void *)(v4 + 312), &v9);
  if (v1) {
    sub_36860();
  }
  else {
    *(void *)(v4 + 320) = a1;
  }
  sub_A7C8();
  sub_A964();
  return sub_55F28(v5, v6, v7);
}

uint64_t sub_48F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[16] = a2;
  v3[17] = a3;
  v3[15] = a1;
  uint64_t v4 = sub_494C(&qword_18B4C8);
  v3[18] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[19] = v5;
  v3[20] = sub_D8CC(v5);
  v3[21] = sub_A5B8();
  v3[22] = sub_A5B8();
  v3[23] = sub_A5B8();
  v3[24] = sub_A5B8();
  uint64_t v6 = sub_D984();
  v3[25] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[26] = v7;
  v3[27] = sub_D8CC(v7);
  v3[28] = sub_A5B8();
  uint64_t v8 = sub_A8E4();
  v3[29] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[30] = v9;
  v3[31] = sub_D8CC(v9);
  v3[32] = sub_A5B8();
  v3[33] = sub_A5B8();
  v3[34] = sub_A5B8();
  uint64_t v10 = sub_494C(&qword_189CF8);
  v3[35] = v10;
  v3[36] = sub_D8CC(*(void *)(v10 - 8));
  v3[37] = sub_A5B8();
  v3[38] = sub_A5B8();
  v3[39] = sub_A5B8();
  uint64_t v11 = sub_494C(&qword_189BA0);
  v3[40] = sub_D8CC(*(void *)(v11 - 8));
  v3[41] = sub_A5B8();
  uint64_t v12 = sub_494C(&qword_189CE8);
  v3[42] = sub_D8CC(*(void *)(v12 - 8));
  v3[43] = sub_A5B8();
  v3[44] = sub_A5B8();
  v3[45] = sub_A5B8();
  v3[46] = sub_A5B8();
  v3[47] = sub_A5B8();
  v3[48] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_490A0(uint64_t a1)
{
  id v2 = sub_5693C(a1, "minimum");
  double v4 = v3;
  id v5 = sub_5693C((uint64_t)v2, "maximum");
  double v7 = v6;
  id v8 = sub_566D0((uint64_t)v5, "start");
  if (v8)
  {
    uint64_t v10 = v8;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v8);

    uint64_t v11 = 0LL;
  }

  else
  {
    uint64_t v11 = 1LL;
  }

  uint64_t v12 = 1LL;
  uint64_t v13 = sub_A66C(*(void *)(v1 + 384), v11, v9, *(void *)(v1 + 232));
  id v14 = sub_5693C(v13, "end");
  if (v14)
  {
    uint64_t v16 = v14;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v14);

    uint64_t v12 = 0LL;
  }

  uint64_t v17 = 1LL;
  uint64_t v18 = sub_A66C(*(void *)(v1 + 376), v12, v15, *(void *)(v1 + 232));
  id v19 = sub_565D4(v18, "sampleStartDate");
  if (v19)
  {
    os_log_type_t v21 = v19;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v19);

    uint64_t v17 = 0LL;
  }

  uint64_t v22 = sub_A66C(*(void *)(v1 + 368), v17, v20, *(void *)(v1 + 232));
  id v23 = sub_565D4(v22, "sampleEndDate");
  if (v23)
  {
    unsigned __int8 v26 = v23;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v23);
  }

  uint64_t v306 = v1 + 112;
  uint64_t v27 = *(void *)(v1 + 328);
  uint64_t v28 = *(void **)(v1 + 120);
  sub_5604C(*(void *)(v1 + 360), v24, v25, *(void *)(v1 + 232));
  sub_12892C();
  uint64_t v309 = v29;
  *(void *)(v1 + 39_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v29;
  sub_ABEC();
  sub_36F38(v27, 1LL);
  id v30 = [v28 start];
  uint64_t v32 = (uint64_t *)(v1 + 352);
  uint64_t v33 = *(void *)(v1 + 352);
  if (v30)
  {
    uint64_t v34 = v30;
    uint64_t v36 = *(void *)(v1 + 232);
    uint64_t v35 = *(void *)(v1 + 240);
    sub_56968((uint64_t)v30);

    uint64_t v37 = *(uint64_t (**)(void, void, void))(v35 + 32);
    sub_569C4();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v33, 0LL, 1LL, v36);
    sub_A614(v33, 1LL, v36);
    if (!v38)
    {
      uint64_t v39 = v37(*(void *)(v1 + 272), *(void *)(v1 + 352), *(void *)(v1 + 232));
      id v40 = sub_5693C(v39, "end");
      uint64_t v42 = *(void *)(v1 + 344);
      if (v40)
      {
        uint64_t v43 = v40;
        uint64_t v44 = *(void *)(v1 + 232);
        sub_56968((uint64_t)v40);

        sub_569C4();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v42, 0LL, 1LL, v44);
        sub_A614(v42, 1LL, v44);
        if (!v38)
        {
          uint64_t v286 = *(void *)(v1 + 320);
          uint64_t v292 = *(void *)(v1 + 328);
          uint64_t v45 = (uint64_t *)(v1 + 304);
          uint64_t v47 = *(void *)(v1 + 264);
          uint64_t v46 = *(void *)(v1 + 272);
          uint64_t v298 = v46;
          uint64_t v49 = *(void *)(v1 + 248);
          uint64_t v48 = *(void *)(v1 + 256);
          uint64_t v50 = *(void *)(v1 + 232);
          uint64_t v51 = *(void *)(v1 + 240);
          sub_56B14(v48, *(void *)(v1 + 344));
          sub_56B14(v47, v46);
          sub_56B14(v49, v48);
          DateInterval.init(start:end:)(v47, v49);
          sub_2012C(v292, &qword_189BA0);
          sub_36F38(v286, 0LL);
          uint64_t v52 = sub_56B24();
          sub_55C74(v52, v53, &qword_189BA0);
          sub_F4F10(105LL, v292);
          uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
          v54(v48, v50);
          v54(v46, v50);
          goto LABEL_22;
        }
      }

      else
      {
        sub_A66C(*(void *)(v1 + 344), 1LL, v41, *(void *)(v1 + 232));
      }

      uint64_t v32 = (uint64_t *)(v1 + 344);
      sub_565A8(*(void *)(v1 + 240));
    }
  }

  else
  {
    sub_A66C(*(void *)(v1 + 352), 1LL, v31, *(void *)(v1 + 232));
  }

  uint64_t v56 = sub_2012C(*v32, &qword_189CE8);
  id v57 = sub_566D0(v56, "sampleEndDate");
  if (v57)
  {
    uint64_t v59 = v57;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v57);

    uint64_t v60 = 0LL;
  }

  else
  {
    uint64_t v60 = 1LL;
  }

  uint64_t v61 = *(void *)(v1 + 336);
  uint64_t v45 = (uint64_t *)(v1 + 296);
  sub_A66C(v61, v60, v58, *(void *)(v1 + 232));
  uint64_t v62 = sub_F4F10(105LL, v61);
  sub_566F4(v62, &qword_189CE8);
LABEL_22:
  uint64_t v63 = *v45;
  uint64_t v64 = *(void *)(v1 + 312);
  uint64_t v65 = *(uint8_t **)(v1 + 288);
  uint64_t v66 = *(os_log_s **)(v1 + 224);
  uint64_t v67 = *(void *)(v1 + 200);
  uint64_t v68 = *(void *)(v1 + 208);
  uint64_t v69 = sub_56748(v63, v55, &qword_189CF8);
  uint64_t v70 = Logger.wellness.unsafeMutableAddressor(v69);
  sub_A5DC(v70, v1 + 56);
  id v71 = *(void (**)(os_log_s *, uint64_t, uint64_t))(v68 + 16);
  v71(v66, v70, v67);
  uint64_t v72 = sub_56AB8(v64);
  uint64_t v73 = v66;
  Logger.logObject.getter(v72);
  os_log_type_t v74 = sub_AB70();
  uint64_t v303 = v70;
  uint64_t v308 = (uint64_t (*)(os_log_s *, uint64_t, uint64_t))v71;
  if (sub_A634(v74))
  {
    uint64_t v75 = *(void *)(v1 + 304);
    uint64_t v77 = *(void *)(v1 + 280);
    uint64_t v76 = *(void *)(v1 + 288);
    uint64_t v286 = *(void *)(v1 + 208);
    uint64_t v292 = *(void *)(v1 + 200);
    uint64_t v298 = *(void *)(v1 + 224);
    sub_56148();
    uint64_t v78 = sub_56168();
    uint64_t v312 = v78;
    *(_DWORD *)uint64_t v65 = 136315138;
    sub_35468(v76, v75);
    uint64_t v79 = String.init<A>(describing:)(v75, v77);
    *(void *)(v1 + 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_39178(v79, v80, &v312);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v306, v1 + 120, v65 + 4, (char *)v66 + (void)v65);
    uint64_t v81 = swift_bridgeObjectRelease();
    sub_56480(v81, &qword_189CF8);
    sub_DA24(&dword_0, v66, (os_log_type_t)v67, "Deep Link punch out: %s", v65);
    sub_A81C(v78);
    sub_5050(v78);
    sub_5050((uint64_t)v65);

    uint64_t v82 = *(void (**)(uint64_t, uint64_t))(v286 + 8);
    v82(v298, v292);
  }

  else
  {
    uint64_t v83 = *(void *)(v1 + 224);
    uint64_t v84 = *(void *)(v1 + 200);
    uint64_t v85 = *(void *)(v1 + 208);
    sub_2012C(*(void *)(v1 + 288), &qword_189CF8);

    uint64_t v82 = *(void (**)(uint64_t, uint64_t))(v85 + 8);
    v82(v83, v84);
  }

  sub_7D950(*(void **)(v1 + 128));
  if (!v86)
  {
    sub_2012C(*(void *)(v1 + 328), &qword_189BA0);
    uint64_t v113 = swift_release();
    sub_566F4(v113, &qword_189CF8);
    uint64_t v114 = sub_56488();
    uint64_t v310 = v116;
    uint64_t v311 = v115;
    swift_task_dealloc(v114);
    sub_A760();
    sub_A8EC();
    sub_A910();
    sub_A864();
    sub_A85C();
    sub_A8F4();
    sub_A78C();
    sub_A67C();
    uint64_t v117 = sub_A7C8();
    uint64_t v125 = sub_AAD8(v117, v118, v119, v120, v121, v122, v123, v124, v214, v226);
    uint64_t v133 = sub_A888(v125, v126, v127, v128, v129, v130, v131, v132, v215, v227, v238);
    uint64_t v141 = sub_A854(v133, v134, v135, v136, v137, v138, v139, v140, v216, v228, v239, v249);
    uint64_t v149 = sub_A84C(v141, v142, v143, v144, v145, v146, v147, v148, v217, v229, v240, v250, v259);
    uint64_t v157 = sub_A844(v149, v150, v151, v152, v153, v154, v155, v156, v218, v230, v241, v251, v261, v269);
    uint64_t v165 = sub_A83C(v157, v158, v159, v160, v161, v162, v163, v164, v219, v231, v242, v252, v262, v271, v278);
    uint64_t v173 = sub_A95C(v165, v166, v167, v168, v169, v170, v171, v172, v220, v232, v243, v253, v263, v272, v280, v286);
    uint64_t v181 = sub_A954( v173,  v174,  v175,  v176,  v177,  v178,  v179,  v180,  v221,  v233,  v244,  v254,  v264,  v273,  v281,  v287,  v292);
    uint64_t v189 = sub_A938( v181,  v182,  v183,  v184,  v185,  v186,  v187,  v188,  v222,  v234,  v245,  v255,  v265,  v274,  v282,  v288,  v294,  v298);
    uint64_t v197 = sub_A930( v189,  v190,  v191,  v192,  v193,  v194,  v195,  v196,  v223,  v235,  v246,  v256,  v266,  v275,  v283,  v289,  v295,  v300,  v303);
    uint64_t v205 = sub_A928( v197,  v198,  v199,  v200,  v201,  v202,  v203,  v204,  v224,  v236,  v247,  v257,  v267,  v276,  v284,  v290,  v296,  v301,  v304,  v306);
    sub_A920( v205,  v206,  v207,  v208,  v209,  v210,  v211,  v212,  v225,  v237,  v248,  v258,  v268,  v277,  v285,  v291,  v297,  v302,  v305,  v307,  (uint64_t)v71);
    swift_task_dealloc(v310);
    swift_task_dealloc(v311);
    sub_567F8();
    sub_56A3C();
    __asm { BR              X1 }
  }

  uint64_t v279 = *(os_log_s **)(v1 + 216);
  uint64_t v293 = *(void *)(v1 + 200);
  uint64_t v299 = v82;
  uint64_t v260 = *(void *)(v1 + 176);
  uint64_t v88 = *(void *)(v1 + 160);
  uint64_t v87 = *(void *)(v1 + 168);
  uint64_t v89 = *(void *)(v1 + 144);
  uint64_t v270 = *(void *)(v1 + 152);
  uint64_t v90 = *(void **)(v1 + 128);
  uint64_t v91 = sub_55CC4(0LL, &qword_18B4D0, &OBJC_CLASS___NSUnitMass_ptr);
  id v92 = sub_9205C();
  *(void *)(v1 + 400) = v92;
  [v90 minimum];
  id v93 = v92;
  sub_56AC0((uint64_t)v93);
  [v90 maximum];
  sub_56AC0((uint64_t)v93);
  id v94 = [(id)objc_opt_self(NSUnitMass) poundsMass];
  Measurement<>.converted(to:)();

  id v96 = sub_36F04(v95, "poundsMass");
  Measurement<>.converted(to:)();

  static Measurement<>.- infix(_:_:)(v87, v88, v91);
  *(void *)(v1 + 408) = *(void *)(v270 + 8);
  sub_56B1C(v88);
  sub_56B1C(v87);
  double v97 = Measurement.value.getter(v89);
  sub_56B1C(v260);
  sub_A5DC(v303, v1 + 80);
  uint64_t v98 = v308(v279, v303, v293);
  Logger.logObject.getter(v98);
  os_log_type_t v99 = sub_AB70();
  if (sub_A988(v99))
  {
    uint64_t v100 = sub_A5E8(18LL);
    *(_DWORD *)uint64_t v100 = 134218240;
    *(double *)(v1 + 104) = v97;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v306, v100 + 4, v100 + 12);
    *(_WORD *)(v100 + 1_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 1024;
    *(_DWORD *)(v1 + 440) = v97 < 0.5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 440, v1 + 444, v100 + 14, v100 + 18);
    _os_log_impl( &dword_0,  v279,  (os_log_type_t)v279,  "Weight difference is %f lbs, isDifferenceNegligible: %{BOOL}d",  (uint8_t *)v100,  0x12u);
    sub_5050(v100);
  }

  uint64_t v101 = *(void *)(v1 + 312);
  uint64_t v102 = *(void *)(v1 + 216);
  uint64_t v103 = *(void *)(v1 + 200);
  uint64_t v105 = *(void *)(v1 + 128);
  uint64_t v104 = *(void *)(v1 + 136);
  uint64_t v106 = *(void *)(v1 + 120);

  v299(v102, v103);
  sub_D7EC(v104 + 120, v1 + 16);
  sub_500C((void *)(v1 + 16), *(void *)(v1 + 40));
  uint64_t v107 = swift_task_alloc(64LL);
  *(void *)(v1 + 4sub_46370(v0 + 16) = v107;
  *(void *)(v107 + sub_46370(v0 + 16) = v309;
  *(_BYTE *)(v107 + 24) = v4 == v7;
  *(void *)(v107 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v105;
  *(_BYTE *)(v107 + 40) = 105;
  *(void *)(v107 + 48) = v106;
  *(void *)(v107 + 56) = v101;
  uint64_t v108 = (void *)swift_task_alloc(dword_18B9E4);
  *(void *)(v1 + 424) = v108;
  *uint64_t v108 = v1;
  v108[1] = sub_499D4;
  sub_56A3C();
  return sub_66C78(v109, v110, v111);
}

uint64_t sub_499D4()
{
  if (v1) {
    sub_36860();
  }
  else {
    *(void *)(v2 + 43_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v0;
  }
  sub_A7C8();
  sub_A964();
  return sub_55F28(v4, v5, v6);
}

uint64_t sub_49A34()
{
  uint64_t v201 = *(void *)(v0 + 432);
  uint64_t v1 = *(void **)(v0 + 400);
  swift_release();

  sub_567DC();
  uint64_t v2 = sub_56B44();
  uint64_t v3 = sub_56628(v2, &qword_189BA0);
  sub_56860(v3, &qword_189CF8);
  sub_AA20();
  uint64_t v109 = *(void *)(v0 + 304);
  uint64_t v122 = *(void *)(v0 + 296);
  uint64_t v134 = *(void *)(v0 + 288);
  uint64_t v145 = *(void *)(v0 + 272);
  uint64_t v155 = *(void *)(v0 + 264);
  uint64_t v164 = *(void *)(v0 + 256);
  uint64_t v172 = *(void *)(v0 + 248);
  uint64_t v179 = *(void *)(v0 + 224);
  uint64_t v185 = *(void *)(v0 + 216);
  uint64_t v190 = *(void *)(v0 + 192);
  uint64_t v194 = *(void *)(v0 + 184);
  uint64_t v197 = *(void *)(v0 + 176);
  uint64_t v199 = *(void *)(v0 + 168);
  uint64_t v200 = *(void *)(v0 + 160);
  swift_task_dealloc(*(void *)(v0 + 384));
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A78C();
  sub_A67C();
  sub_A7C8();
  uint64_t v4 = sub_A760();
  uint64_t v12 = sub_A970(v4, v5, v6, v7, v8, v9, v10, v11, v109);
  uint64_t v20 = sub_AAD8(v12, v13, v14, v15, v16, v17, v18, v19, v110, v122);
  uint64_t v28 = sub_A888(v20, v21, v22, v23, v24, v25, v26, v27, v111, v123, v134);
  uint64_t v36 = sub_A854(v28, v29, v30, v31, v32, v33, v34, v35, v112, v124, v135, v145);
  uint64_t v44 = sub_A84C(v36, v37, v38, v39, v40, v41, v42, v43, v113, v125, v136, v146, v155);
  uint64_t v52 = sub_A844(v44, v45, v46, v47, v48, v49, v50, v51, v114, v126, v137, v147, v156, v164);
  uint64_t v60 = sub_A83C(v52, v53, v54, v55, v56, v57, v58, v59, v115, v127, v138, v148, v157, v165, v172);
  uint64_t v68 = sub_A95C(v60, v61, v62, v63, v64, v65, v66, v67, v116, v128, v139, v149, v158, v166, v173, v179);
  uint64_t v76 = sub_A954(v68, v69, v70, v71, v72, v73, v74, v75, v117, v129, v140, v150, v159, v167, v174, v180, v185);
  uint64_t v84 = sub_A938(v76, v77, v78, v79, v80, v81, v82, v83, v118, v130, v141, v151, v160, v168, v175, v181, v186, v190);
  uint64_t v92 = sub_A930( v84,  v85,  v86,  v87,  v88,  v89,  v90,  v91,  v119,  v131,  v142,  v152,  v161,  v169,  v176,  v182,  v187,  v191,  v194);
  uint64_t v100 = sub_A928( v92,  v93,  v94,  v95,  v96,  v97,  v98,  v99,  v120,  v132,  v143,  v153,  v162,  v170,  v177,  v183,  v188,  v192,  v195,  v197);
  sub_A920( v100,  v101,  v102,  v103,  v104,  v105,  v106,  v107,  v121,  v133,  v144,  v154,  v163,  v171,  v178,  v184,  v189,  v193,  v196,  v198,  v199);
  swift_task_dealloc(v200);
  return sub_56764(v201, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_49B84()
{
  uint64_t v1 = *(void **)(v0 + 400);
  swift_release();

  sub_567DC();
  uint64_t v2 = sub_56B44();
  uint64_t v3 = sub_56628(v2, &qword_189BA0);
  sub_56860(v3, &qword_189CF8);
  sub_AA20();
  uint64_t v4 = sub_56488();
  uint64_t v196 = v6;
  uint64_t v197 = v5;
  swift_task_dealloc(v4);
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A78C();
  sub_A67C();
  uint64_t v7 = sub_A7C8();
  uint64_t v15 = sub_AAD8(v7, v8, v9, v10, v11, v12, v13, v14, v106, v118);
  uint64_t v23 = sub_A888(v15, v16, v17, v18, v19, v20, v21, v22, v107, v119, v130);
  uint64_t v31 = sub_A854(v23, v24, v25, v26, v27, v28, v29, v30, v108, v120, v131, v141);
  uint64_t v39 = sub_A84C(v31, v32, v33, v34, v35, v36, v37, v38, v109, v121, v132, v142, v151);
  uint64_t v47 = sub_A844(v39, v40, v41, v42, v43, v44, v45, v46, v110, v122, v133, v143, v152, v160);
  uint64_t v55 = sub_A83C(v47, v48, v49, v50, v51, v52, v53, v54, v111, v123, v134, v144, v153, v161, v168);
  uint64_t v63 = sub_A95C(v55, v56, v57, v58, v59, v60, v61, v62, v112, v124, v135, v145, v154, v162, v169, v175);
  uint64_t v71 = sub_A954(v63, v64, v65, v66, v67, v68, v69, v70, v113, v125, v136, v146, v155, v163, v170, v176, v181);
  uint64_t v79 = sub_A938(v71, v72, v73, v74, v75, v76, v77, v78, v114, v126, v137, v147, v156, v164, v171, v177, v182, v186);
  uint64_t v87 = sub_A930( v79,  v80,  v81,  v82,  v83,  v84,  v85,  v86,  v115,  v127,  v138,  v148,  v157,  v165,  v172,  v178,  v183,  v187,  v190);
  uint64_t v95 = sub_A928( v87,  v88,  v89,  v90,  v91,  v92,  v93,  v94,  v116,  v128,  v139,  v149,  v158,  v166,  v173,  v179,  v184,  v188,  v191,  v193);
  sub_A920( v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v117,  v129,  v140,  v150,  v159,  v167,  v174,  v180,  v185,  v189,  v192,  v194,  v195);
  swift_task_dealloc(v196);
  swift_task_dealloc(v197);
  uint64_t v103 = sub_567F8();
  return sub_56764(v103, v104);
}

uint64_t sub_49C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_56158(a1, a2, a3);
  v3[16] = sub_55F48(v4);
  uint64_t v5 = sub_494C(&qword_189D00);
  v3[17] = sub_A5C0(*(void *)(v5 - 8));
  uint64_t v6 = sub_A8E4();
  v3[18] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[19] = v7;
  v3[20] = sub_D8CC(v7);
  v3[21] = sub_A5B8();
  v3[22] = sub_A5B8();
  v3[23] = sub_A5B8();
  uint64_t v8 = sub_494C(&qword_189CF8);
  v3[24] = v8;
  v3[25] = sub_D8CC(*(void *)(v8 - 8));
  v3[26] = sub_A5B8();
  v3[27] = sub_A5B8();
  v3[28] = sub_A5B8();
  uint64_t v9 = sub_494C(&qword_189BA0);
  v3[29] = sub_D8CC(*(void *)(v9 - 8));
  v3[30] = sub_A5B8();
  uint64_t v10 = sub_494C(&qword_189CE8);
  v3[31] = sub_D8CC(*(void *)(v10 - 8));
  v3[32] = sub_A5B8();
  v3[33] = sub_A5B8();
  v3[34] = sub_A5B8();
  v3[35] = sub_A5B8();
  v3[36] = sub_A5B8();
  v3[37] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

#error "4A19C: call analysis failed (funcsize=324)"
uint64_t sub_4A2B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sub_56884();
  sub_56254(*(void *)(v2 + 320), v3);
  if (v1) {
    sub_36860();
  }
  else {
    *(void *)(v2 + 328) = v0;
  }
  sub_A7C8();
  sub_A964();
  return sub_55F28(v4, v5, v6);
}

uint64_t sub_4A318()
{
  uint64_t v172 = *(void *)(v0 + 328);
  swift_release();
  uint64_t v106 = *(void *)(v0 + 256);
  uint64_t v117 = *(void *)(v0 + 248);
  uint64_t v127 = *(void *)(v0 + 232);
  uint64_t v136 = *(void *)(v0 + 216);
  uint64_t v144 = *(void *)(v0 + 208);
  uint64_t v151 = *(void *)(v0 + 200);
  uint64_t v157 = *(void *)(v0 + 184);
  uint64_t v162 = *(void *)(v0 + 176);
  sub_568C0();
  uint64_t v166 = v2;
  uint64_t v169 = v1;
  uint64_t v171 = *(void *)(v0 + 128);
  uint64_t v4 = sub_56A60(v3, &qword_189BA0);
  uint64_t v5 = sub_56860(v4, &qword_189D00);
  sub_56628(v5, &qword_189CF8);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((void *)(v0 + 16));
  sub_A85C();
  sub_A8F4();
  sub_A78C();
  sub_A760();
  uint64_t v6 = sub_A910();
  uint64_t v14 = sub_AAD8(v6, v7, v8, v9, v10, v11, v12, v13, v95, v106);
  sub_A888(v14, v15, v16, v17, v18, v19, v20, v21, v96, v107, v117);
  uint64_t v22 = sub_A8EC();
  sub_A854(v22, v23, v24, v25, v26, v27, v28, v29, v97, v108, v118, v127);
  uint64_t v30 = sub_A67C();
  uint64_t v38 = sub_A84C(v30, v31, v32, v33, v34, v35, v36, v37, v98, v109, v119, v128, v136);
  uint64_t v46 = sub_A844(v38, v39, v40, v41, v42, v43, v44, v45, v99, v110, v120, v129, v137, v144);
  uint64_t v54 = sub_A83C(v46, v47, v48, v49, v50, v51, v52, v53, v100, v111, v121, v130, v138, v145, v151);
  uint64_t v62 = sub_A95C(v54, v55, v56, v57, v58, v59, v60, v61, v101, v112, v122, v131, v139, v146, v152, v157);
  uint64_t v70 = sub_A954(v62, v63, v64, v65, v66, v67, v68, v69, v102, v113, v123, v132, v140, v147, v153, v158, v162);
  uint64_t v78 = sub_A938(v70, v71, v72, v73, v74, v75, v76, v77, v103, v114, v124, v133, v141, v148, v154, v159, v163, v166);
  sub_A930(v78, v79, v80, v81, v82, v83, v84, v85, v104, v115, v125, v134, v142, v149, v155, v160, v164, v167, v169);
  uint64_t v86 = sub_A7C8();
  sub_A928( v86,  v87,  v88,  v89,  v90,  v91,  v92,  v93,  v105,  v116,  v126,  v135,  v143,  v150,  v156,  v161,  v165,  v168,  v170,  v171);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v172);
}

#error "4A4D4: call analysis failed (funcsize=53)"
uint64_t sub_4A518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v4 = sub_56158(a1, a2, a3);
  v3[16] = sub_55F48(v4);
  uint64_t v5 = sub_494C(&qword_189CF8);
  v3[17] = v5;
  v3[18] = sub_D8CC(*(void *)(v5 - 8));
  v3[19] = sub_A5B8();
  v3[20] = sub_A5B8();
  uint64_t v6 = sub_A8E4();
  v3[21] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[22] = v7;
  v3[23] = sub_D8CC(v7);
  v3[24] = sub_A5B8();
  v3[25] = sub_A5B8();
  v3[26] = sub_A5B8();
  uint64_t v8 = sub_494C(&qword_189BA0);
  v3[27] = sub_D8CC(*(void *)(v8 - 8));
  v3[28] = sub_A5B8();
  uint64_t v9 = sub_494C(&qword_189CE8);
  v3[29] = sub_D8CC(*(void *)(v9 - 8));
  v3[30] = sub_A5B8();
  v3[31] = sub_A5B8();
  v3[32] = sub_A5B8();
  v3[33] = sub_A5B8();
  v3[34] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

#error "4A7A4: call analysis failed (funcsize=179)"
uint64_t sub_4A8F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v4 = sub_56158(a1, a2, a3);
  v3[16] = sub_55F48(v4);
  uint64_t v5 = sub_494C(&qword_189CF8);
  v3[17] = v5;
  v3[18] = sub_D8CC(*(void *)(v5 - 8));
  v3[19] = sub_A5B8();
  v3[20] = sub_A5B8();
  uint64_t v6 = sub_A8E4();
  v3[21] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[22] = v7;
  v3[23] = sub_D8CC(v7);
  v3[24] = sub_A5B8();
  v3[25] = sub_A5B8();
  v3[26] = sub_A5B8();
  uint64_t v8 = sub_494C(&qword_189BA0);
  v3[27] = sub_D8CC(*(void *)(v8 - 8));
  v3[28] = sub_A5B8();
  uint64_t v9 = sub_494C(&qword_189CE8);
  v3[29] = sub_D8CC(*(void *)(v9 - 8));
  v3[30] = sub_A5B8();
  v3[31] = sub_A5B8();
  v3[32] = sub_A5B8();
  v3[33] = sub_A5B8();
  v3[34] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

#error "4AB84: call analysis failed (funcsize=179)"
uint64_t sub_4ACD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v4 = sub_56158(a1, a2, a3);
  v3[16] = sub_55F48(v4);
  uint64_t v5 = sub_494C(&qword_189CF8);
  v3[17] = v5;
  v3[18] = sub_D8CC(*(void *)(v5 - 8));
  v3[19] = sub_A5B8();
  v3[20] = sub_A5B8();
  uint64_t v6 = sub_A8E4();
  v3[21] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[22] = v7;
  v3[23] = sub_D8CC(v7);
  v3[24] = sub_A5B8();
  v3[25] = sub_A5B8();
  v3[26] = sub_A5B8();
  uint64_t v8 = sub_494C(&qword_189BA0);
  v3[27] = sub_D8CC(*(void *)(v8 - 8));
  v3[28] = sub_A5B8();
  uint64_t v9 = sub_494C(&qword_189CE8);
  v3[29] = sub_D8CC(*(void *)(v9 - 8));
  v3[30] = sub_A5B8();
  v3[31] = sub_A5B8();
  v3[32] = sub_A5B8();
  v3[33] = sub_A5B8();
  v3[34] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

#error "4AF64: call analysis failed (funcsize=179)"
uint64_t sub_4B0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v4 = sub_56158(a1, a2, a3);
  v3[16] = sub_55F48(v4);
  uint64_t v5 = sub_494C(&qword_189CF8);
  v3[17] = v5;
  v3[18] = sub_D8CC(*(void *)(v5 - 8));
  v3[19] = sub_A5B8();
  v3[20] = sub_A5B8();
  uint64_t v6 = sub_A8E4();
  v3[21] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[22] = v7;
  v3[23] = sub_D8CC(v7);
  v3[24] = sub_A5B8();
  v3[25] = sub_A5B8();
  v3[26] = sub_A5B8();
  uint64_t v8 = sub_494C(&qword_189BA0);
  v3[27] = sub_D8CC(*(void *)(v8 - 8));
  v3[28] = sub_A5B8();
  uint64_t v9 = sub_494C(&qword_189CE8);
  v3[29] = sub_D8CC(*(void *)(v9 - 8));
  v3[30] = sub_A5B8();
  v3[31] = sub_A5B8();
  v3[32] = sub_A5B8();
  v3[33] = sub_A5B8();
  v3[34] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

#error "4B344: call analysis failed (funcsize=179)"
uint64_t sub_4B498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v4 = sub_56158(a1, a2, a3);
  v3[16] = sub_55F48(v4);
  uint64_t v5 = sub_A8E4();
  v3[17] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[18] = v6;
  v3[19] = sub_D8CC(v6);
  v3[20] = sub_A5B8();
  v3[21] = sub_A5B8();
  v3[22] = sub_A5B8();
  uint64_t v7 = sub_494C(&qword_189CF8);
  v3[23] = v7;
  v3[24] = sub_D8CC(*(void *)(v7 - 8));
  v3[25] = sub_A5B8();
  v3[26] = sub_A5B8();
  v3[27] = sub_A5B8();
  uint64_t v8 = sub_494C(&qword_189BA0);
  v3[28] = sub_D8CC(*(void *)(v8 - 8));
  v3[29] = sub_A5B8();
  uint64_t v9 = sub_494C(&qword_189CE8);
  v3[30] = sub_D8CC(*(void *)(v9 - 8));
  v3[31] = sub_A5B8();
  v3[32] = sub_A5B8();
  v3[33] = sub_A5B8();
  v3[34] = sub_A5B8();
  v3[35] = sub_A5B8();
  v3[36] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

#error "4B744: call analysis failed (funcsize=207)"
uint64_t sub_4B8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  v3[15] = a2;
  v3[16] = a3;
  v3[14] = a1;
  uint64_t v4 = sub_494C(&qword_189D00);
  v3[17] = sub_A5C0(*(void *)(v4 - 8));
  uint64_t v5 = sub_D984();
  v3[18] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[19] = v6;
  v3[20] = sub_D8CC(v6);
  v3[21] = sub_A5B8();
  uint64_t v7 = sub_A8E4();
  v3[22] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[23] = v8;
  v3[24] = sub_D8CC(v8);
  v3[25] = sub_A5B8();
  v3[26] = sub_A5B8();
  v3[27] = sub_A5B8();
  uint64_t v9 = sub_494C(&qword_189CF8);
  v3[28] = v9;
  v3[29] = sub_D8CC(*(void *)(v9 - 8));
  v3[30] = sub_A5B8();
  v3[31] = sub_A5B8();
  v3[32] = sub_A5B8();
  uint64_t v10 = sub_494C(&qword_189BA0);
  v3[33] = sub_D8CC(*(void *)(v10 - 8));
  v3[34] = sub_A5B8();
  uint64_t v11 = sub_494C(&qword_189CE8);
  v3[35] = sub_D8CC(*(void *)(v11 - 8));
  v3[36] = sub_A5B8();
  v3[37] = sub_A5B8();
  v3[38] = sub_A5B8();
  v3[39] = sub_A5B8();
  v3[40] = sub_A5B8();
  v3[41] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_4BA30()
{
  id v1 = [*(id *)(v0 + 112) start];
  if (v1)
  {
    uint64_t v3 = v1;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v1);

    uint64_t v4 = 0LL;
  }

  else
  {
    uint64_t v4 = 1LL;
  }

  uint64_t v5 = 1LL;
  uint64_t v6 = sub_A66C(*(void *)(v0 + 328), v4, v2, *(void *)(v0 + 176));
  id v7 = sub_5693C(v6, "end");
  if (v7)
  {
    uint64_t v9 = v7;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v7);

    uint64_t v5 = 0LL;
  }

  uint64_t v10 = 1LL;
  uint64_t v11 = sub_A66C(*(void *)(v0 + 320), v5, v8, *(void *)(v0 + 176));
  id v12 = sub_373D8(v11, "sampleStartDate");
  if (v12)
  {
    uint64_t v13 = v12;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v12);

    uint64_t v10 = 0LL;
  }

  uint64_t v257 = v0 + 56;
  uint64_t v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 312), v10, 1LL, *(void *)(v0 + 176));
  id v15 = sub_56344(v14, "sampleEndDate");
  if (v15)
  {
    uint64_t v18 = v15;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v15);
  }

  uint64_t v19 = *(void *)(v0 + 272);
  uint64_t v20 = *(void **)(v0 + 112);
  sub_5604C(*(void *)(v0 + 304), v16, v17, *(void *)(v0 + 176));
  sub_56B24();
  sub_12892C();
  uint64_t v260 = v21;
  *(void *)(v0 + 336) = v21;
  sub_ABEC();
  sub_36F38(v19, 1LL);
  id v22 = [v20 start];
  uint64_t v24 = (uint64_t *)(v0 + 296);
  uint64_t v25 = *(void *)(v0 + 296);
  if (v22)
  {
    uint64_t v26 = v22;
    uint64_t v28 = *(void *)(v0 + 176);
    uint64_t v27 = *(void *)(v0 + 184);
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v22);

    uint64_t v29 = *(uint64_t (**)(void, void, void))(v27 + 32);
    sub_569B4();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v25, 0LL, 1LL, v28);
    sub_A614(v25, 1LL, v28);
    if (!v30)
    {
      uint64_t v31 = v29(*(void *)(v0 + 216), *(void *)(v0 + 296), *(void *)(v0 + 176));
      id v32 = sub_5693C(v31, "end");
      uint64_t v34 = *(void *)(v0 + 288);
      if (v32)
      {
        uint64_t v35 = v32;
        uint64_t v36 = *(void *)(v0 + 176);
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v32);

        sub_569B4();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v34, 0LL, 1LL, v36);
        sub_A614(v34, 1LL, v36);
        if (!v30)
        {
          uint64_t v37 = (uint64_t *)(v0 + 248);
          uint64_t v231 = *(void *)(v0 + 264);
          uint64_t v238 = *(void *)(v0 + 272);
          uint64_t v38 = *(void *)(v0 + 208);
          uint64_t v39 = *(void *)(v0 + 216);
          uint64_t v244 = v39;
          uint64_t v250 = *(void *)(v0 + 248);
          uint64_t v40 = *(void *)(v0 + 192);
          uint64_t v41 = *(void *)(v0 + 200);
          uint64_t v42 = *(void *)(v0 + 176);
          uint64_t v43 = *(void *)(v0 + 184);
          sub_56AB0(v41, *(void *)(v0 + 288));
          sub_56AB0(v38, v39);
          sub_56AB0(v40, v41);
          DateInterval.init(start:end:)(v38, v40);
          sub_2012C(v238, &qword_189BA0);
          sub_36F38(v231, 0LL);
          sub_55C74(v231, v238, &qword_189BA0);
          sub_5687C(162LL);
          uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
          v44(v41, v42);
          v44(v39, v42);
          goto LABEL_22;
        }
      }

      else
      {
        sub_A66C(*(void *)(v0 + 288), 1LL, v33, *(void *)(v0 + 176));
      }

      uint64_t v24 = (uint64_t *)(v0 + 288);
      sub_565A8(*(void *)(v0 + 184));
    }
  }

  else
  {
    sub_A66C(*(void *)(v0 + 296), 1LL, v23, *(void *)(v0 + 176));
  }

  uint64_t v46 = sub_2012C(*v24, &qword_189CE8);
  id v47 = sub_566D0(v46, "sampleEndDate");
  if (v47)
  {
    uint64_t v48 = v47;
    sub_567D4((uint64_t)v47);

    uint64_t v49 = 0LL;
  }

  else
  {
    uint64_t v49 = 1LL;
  }

  uint64_t v37 = (uint64_t *)(v0 + 240);
  uint64_t v50 = *(void *)(v0 + 280);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v50, v49, 1LL, *(void *)(v0 + 176));
  uint64_t v51 = sub_F4F10(162LL, v50);
  sub_56628(v51, &qword_189CE8);
LABEL_22:
  uint64_t v52 = *(os_log_s **)(v0 + 256);
  uint64_t v53 = *(void *)(v0 + 168);
  uint64_t v55 = *(void *)(v0 + 144);
  uint64_t v54 = *(void *)(v0 + 152);
  uint64_t v56 = sub_56748(*v37, v45, &qword_189CF8);
  uint64_t v57 = Logger.wellness.unsafeMutableAddressor(v56);
  sub_A5DC(v57, v257);
  uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16);
  v58(v53, v57, v55);
  sub_56AB8((uint64_t)v52);
  sub_368A0();
  os_log_type_t v59 = sub_AB70();
  if (os_log_type_enabled(v52, v59))
  {
    uint64_t v60 = *(void *)(v0 + 248);
    uint64_t v61 = *(void *)(v0 + 232);
    uint64_t v214 = *(void *)(v0 + 224);
    uint64_t v223 = v0 + 104;
    uint64_t v238 = *(void *)(v0 + 152);
    uint64_t v244 = *(void *)(v0 + 144);
    uint64_t v250 = *(void *)(v0 + 168);
    uint64_t v62 = (uint8_t *)sub_A5E8(12LL);
    uint64_t v63 = sub_A5E8(32LL);
    uint64_t v261 = v63;
    uint64_t v257 = (uint64_t)v58;
    uint64_t v231 = v57;
    *(_DWORD *)uint64_t v62 = 136315138;
    sub_564F0(v61);
    uint64_t v64 = String.init<A>(describing:)(v60, v214);
    *(void *)(v0 + 104) = sub_39178(v64, v65, &v261);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v62 + 4, v62 + 12);
    uint64_t v66 = sub_1EBF4();
    sub_56750(v66, &qword_189CF8);
    sub_DA24(&dword_0, v52, v59, "Deep Link punch out: %s", v62);
    sub_A81C(v63);
    sub_5050(v63);
    sub_5050((uint64_t)v62);

    uint64_t v67 = *(void (**)(uint64_t, uint64_t))(v238 + 8);
    v67(v250, v244);
  }

  else
  {
    uint64_t v68 = *(void *)(v0 + 168);
    uint64_t v69 = *(void *)(v0 + 144);
    uint64_t v70 = *(void *)(v0 + 152);
    sub_2012C(*(void *)(v0 + 232), &qword_189CF8);

    uint64_t v67 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
    v67(v68, v69);
  }

  uint64_t v71 = sub_7D950(*(void **)(v0 + 120));
  sub_10A39C(v71, v72);
  uint64_t v74 = v73;
  uint64_t v76 = v75;
  *(void *)(v0 + 344) = v75;
  uint64_t v77 = sub_249D4();
  if (v76)
  {
    uint64_t v245 = *(void *)(v0 + 128);
    uint64_t v78 = *(void **)(v0 + 120);
    uint64_t v254 = *(void *)(v0 + 112);
    uint64_t v258 = *(void *)(v0 + 256);
    sub_565D4(v77, "minimum");
    uint64_t v79 = sub_56810();
    double v81 = sub_56734(v79, v80, 0xA2u);
    uint64_t v82 = sub_249D4();
    sub_565D4(v82, "maximum");
    uint64_t v83 = sub_56810();
    double v85 = sub_56734(v83, v84, 0xA2u);
    sub_249D4();
    sub_50DA4(v78);
    uint64_t v86 = sub_56810();
    double v88 = sub_56734(v86, v87, 0xA2u);
    sub_249D4();
    uint64_t v89 = type metadata accessor for DialogPersonHeight.Builder(0LL);
    sub_A72C(v89);
    DialogPersonHeight.Builder.init()();
    dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)(*(void *)&v81, 0LL);
    sub_3652C();
    sub_569D4();
    sub_ABF4();
    uint64_t v90 = sub_56A7C();
    dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)(v90);
    swift_release();
    uint64_t v91 = sub_56A70();
    uint64_t v92 = dispatch thunk of DialogAbstractMeasurement.Builder.build()(v91);
    *(void *)(v0 + 35_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v92;
    sub_3652C();
    swift_allocObject(v89, *(unsigned int *)(v89 + 48), *(unsigned __int16 *)(v89 + 52));
    DialogPersonHeight.Builder.init()();
    dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)(*(void *)&v85, 0LL);
    sub_3652C();
    sub_569D4();
    uint64_t v93 = sub_56A7C();
    dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)(v93);
    swift_release();
    uint64_t v94 = sub_56A70();
    uint64_t v95 = dispatch thunk of DialogAbstractMeasurement.Builder.build()(v94);
    *(void *)(v0 + 360) = v95;
    uint64_t v96 = sub_37034();
    id v97 = sub_565D4(v96, "minimum");
    sub_565D4((uint64_t)v97, "maximum");
    sub_7D950(v78);
    char v98 = sub_50DF0();
    swift_bridgeObjectRelease();
    sub_D7EC(v245 + 120, v0 + 16);
    sub_500C((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v99 = swift_task_alloc(96LL);
    *(void *)(v0 + 368) = v99;
    *(void *)(v99 + sub_46370(v0 + 16) = v260;
    v98 &= 1u;
    *(_BYTE *)(v99 + 24) = v98;
    *(void *)(v99 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v92;
    *(void *)(v99 + 40) = v95;
    *(double *)(v99 + 48) = v88;
    *(void *)(v99 + 56) = v74;
    *(void *)(v99 + 64) = v76;
    *(void *)(v99 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v254;
    *(void *)(v99 + 80) = v78;
    *(void *)(v99 + 88) = v258;
    uint64_t v100 = (void *)swift_task_alloc(dword_18B994);
    *(void *)(v0 + 376) = v100;
    *uint64_t v100 = v0;
    v100[1] = sub_4C354;
    return sub_65798(0, v98, (uint64_t)sub_55D88, v99);
  }

  else
  {
    uint64_t v102 = *(void *)(v0 + 160);
    uint64_t v103 = *(void *)(v0 + 144);
    sub_A5DC(v57, v0 + 80);
    uint64_t v104 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v58)(v102, v57, v103);
    uint64_t v105 = (os_log_s *)Logger.logObject.getter(v104);
    os_log_type_t v106 = static os_log_type_t.error.getter();
    if (sub_A988(v106))
    {
      uint64_t v107 = (uint8_t *)sub_A5E8(2LL);
      *(_WORD *)uint64_t v107 = 0;
      _os_log_impl( &dword_0,  v105,  (os_log_type_t)v103,  "Failed to execute height pattern: no unit found in intent response.",  v107,  2u);
      sub_5050((uint64_t)v107);
    }

    uint64_t v108 = *(void *)(v0 + 160);
    uint64_t v109 = *(void *)(v0 + 144);
    swift_release();

    uint64_t v110 = ((uint64_t (*)(uint64_t, uint64_t))v67)(v108, v109);
    uint64_t v111 = sub_56628(v110, &qword_189BA0);
    sub_56860(v111, &qword_189CF8);
    sub_56528();
    sub_A85C();
    sub_A8F4();
    sub_A78C();
    sub_A67C();
    sub_A7C8();
    sub_A760();
    sub_A8EC();
    sub_A910();
    uint64_t v112 = sub_A864();
    uint64_t v120 = sub_AAD8(v112, v113, v114, v115, v116, v117, v118, v119, v194, v204);
    uint64_t v128 = sub_A888(v120, v121, v122, v123, v124, v125, v126, v127, v195, v205, v214);
    uint64_t v136 = sub_A854(v128, v129, v130, v131, v132, v133, v134, v135, v196, v206, v215, v223);
    uint64_t v144 = sub_A84C(v136, v137, v138, v139, v140, v141, v142, v143, v197, v207, v216, v224, v231);
    uint64_t v152 = sub_A844(v144, v145, v146, v147, v148, v149, v150, v151, v198, v208, v217, v225, v232, v238);
    uint64_t v160 = sub_A83C(v152, v153, v154, v155, v156, v157, v158, v159, v199, v209, v218, v226, v233, v239, v244);
    uint64_t v168 = sub_A95C(v160, v161, v162, v163, v164, v165, v166, v167, v200, v210, v219, v227, v234, v240, v246, v250);
    uint64_t v176 = sub_A954( v168,  v169,  v170,  v171,  v172,  v173,  v174,  v175,  v201,  v211,  v220,  v228,  v235,  v241,  v247,  v251,  v0 + 112);
    uint64_t v184 = sub_A938( v176,  v177,  v178,  v179,  v180,  v181,  v182,  v183,  v202,  v212,  v221,  v229,  v236,  v242,  v248,  v252,  v255,  v257);
    sub_A930( v184,  v185,  v186,  v187,  v188,  v189,  v190,  v191,  v203,  v213,  v222,  v230,  v237,  v243,  v249,  v253,  v256,  v259,  v260);
    uint64_t v192 = sub_567F8();
    return sub_56764(v192, v193);
  }

uint64_t sub_4C354(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v9 = v4;
  sub_56254(*(void *)(v4 + 376), &v9);
  if (v1)
  {
    sub_36860();
    sub_1EBF4();
  }

  else
  {
    sub_1EBF4();
    *(void *)(v4 + 384) = a1;
  }

  sub_A67C();
  sub_A964();
  return swift_task_switch(v5, v6, v7);
}

#error "4C4B0: call analysis failed (funcsize=64)"
#error "4C568: call analysis failed (funcsize=43)"
uint64_t sub_4C59C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v4 = sub_56158(a1, a2, a3);
  v3[16] = sub_55F48(v4);
  uint64_t v5 = sub_A8E4();
  v3[17] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[18] = v6;
  v3[19] = sub_D8CC(v6);
  v3[20] = sub_A5B8();
  v3[21] = sub_A5B8();
  v3[22] = sub_A5B8();
  uint64_t v7 = sub_494C(&qword_189CF8);
  v3[23] = v7;
  v3[24] = sub_D8CC(*(void *)(v7 - 8));
  v3[25] = sub_A5B8();
  v3[26] = sub_A5B8();
  v3[27] = sub_A5B8();
  uint64_t v8 = sub_494C(&qword_189BA0);
  v3[28] = sub_D8CC(*(void *)(v8 - 8));
  v3[29] = sub_A5B8();
  uint64_t v9 = sub_494C(&qword_189CE8);
  v3[30] = sub_D8CC(*(void *)(v9 - 8));
  v3[31] = sub_A5B8();
  v3[32] = sub_A5B8();
  v3[33] = sub_A5B8();
  v3[34] = sub_A5B8();
  v3[35] = sub_A5B8();
  v3[36] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

#error "4C848: call analysis failed (funcsize=207)"
uint64_t sub_4CA00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v4 = sub_56158(a1, a2, a3);
  v3[16] = sub_55F48(v4);
  uint64_t v5 = sub_494C(&qword_189CF8);
  v3[17] = v5;
  v3[18] = sub_D8CC(*(void *)(v5 - 8));
  v3[19] = sub_A5B8();
  v3[20] = sub_A5B8();
  uint64_t v6 = sub_A8E4();
  v3[21] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[22] = v7;
  v3[23] = sub_D8CC(v7);
  v3[24] = sub_A5B8();
  v3[25] = sub_A5B8();
  v3[26] = sub_A5B8();
  uint64_t v8 = sub_494C(&qword_189BA0);
  v3[27] = sub_D8CC(*(void *)(v8 - 8));
  v3[28] = sub_A5B8();
  uint64_t v9 = sub_494C(&qword_189CE8);
  v3[29] = sub_D8CC(*(void *)(v9 - 8));
  v3[30] = sub_A5B8();
  v3[31] = sub_A5B8();
  v3[32] = sub_A5B8();
  v3[33] = sub_A5B8();
  v3[34] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

#error "4CC8C: call analysis failed (funcsize=179)"
uint64_t sub_4CDE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v4 = sub_56158(a1, a2, a3);
  v3[16] = sub_55F48(v4);
  uint64_t v5 = sub_A8E4();
  v3[17] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[18] = v6;
  v3[19] = sub_D8CC(v6);
  v3[20] = sub_A5B8();
  v3[21] = sub_A5B8();
  v3[22] = sub_A5B8();
  uint64_t v7 = sub_494C(&qword_189CF8);
  v3[23] = v7;
  v3[24] = sub_D8CC(*(void *)(v7 - 8));
  v3[25] = sub_A5B8();
  v3[26] = sub_A5B8();
  v3[27] = sub_A5B8();
  uint64_t v8 = sub_494C(&qword_189BA0);
  v3[28] = sub_D8CC(*(void *)(v8 - 8));
  v3[29] = sub_A5B8();
  uint64_t v9 = sub_494C(&qword_189CE8);
  v3[30] = sub_D8CC(*(void *)(v9 - 8));
  v3[31] = sub_A5B8();
  v3[32] = sub_A5B8();
  v3[33] = sub_A5B8();
  v3[34] = sub_A5B8();
  v3[35] = sub_A5B8();
  v3[36] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

#error "4D08C: call analysis failed (funcsize=207)"
uint64_t sub_4D244(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v4 = *v2;
  uint64_t v9 = v4;
  sub_56254(*(void *)(v4 + 312), &v9);
  if (v1) {
    sub_36860();
  }
  else {
    *(void *)(v4 + 320) = a1;
  }
  sub_A7C8();
  sub_A964();
  return sub_55F28(v5, v6, v7);
}

#error "4D358: call analysis failed (funcsize=56)"
#error "4D438: call analysis failed (funcsize=53)"
uint64_t sub_4D474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v4 = sub_56158(a1, a2, a3);
  v3[16] = sub_55F48(v4);
  uint64_t v5 = sub_494C(&qword_189CF8);
  v3[17] = v5;
  v3[18] = sub_D8CC(*(void *)(v5 - 8));
  v3[19] = sub_A5B8();
  v3[20] = sub_A5B8();
  uint64_t v6 = sub_A8E4();
  v3[21] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[22] = v7;
  v3[23] = sub_D8CC(v7);
  v3[24] = sub_A5B8();
  v3[25] = sub_A5B8();
  v3[26] = sub_A5B8();
  uint64_t v8 = sub_494C(&qword_189BA0);
  v3[27] = sub_D8CC(*(void *)(v8 - 8));
  v3[28] = sub_A5B8();
  uint64_t v9 = sub_494C(&qword_189CE8);
  v3[29] = sub_D8CC(*(void *)(v9 - 8));
  v3[30] = sub_A5B8();
  v3[31] = sub_A5B8();
  v3[32] = sub_A5B8();
  v3[33] = sub_A5B8();
  v3[34] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

#error "4D700: call analysis failed (funcsize=179)"
uint64_t sub_4D854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v4 = sub_56158(a1, a2, a3);
  v3[16] = sub_55F48(v4);
  uint64_t v5 = sub_A8E4();
  v3[17] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[18] = v6;
  v3[19] = sub_D8CC(v6);
  v3[20] = sub_A5B8();
  v3[21] = sub_A5B8();
  v3[22] = sub_A5B8();
  uint64_t v7 = sub_494C(&qword_189CF8);
  v3[23] = v7;
  v3[24] = sub_D8CC(*(void *)(v7 - 8));
  v3[25] = sub_A5B8();
  v3[26] = sub_A5B8();
  v3[27] = sub_A5B8();
  uint64_t v8 = sub_494C(&qword_189BA0);
  v3[28] = sub_D8CC(*(void *)(v8 - 8));
  v3[29] = sub_A5B8();
  uint64_t v9 = sub_494C(&qword_189CE8);
  v3[30] = sub_D8CC(*(void *)(v9 - 8));
  v3[31] = sub_A5B8();
  v3[32] = sub_A5B8();
  v3[33] = sub_A5B8();
  v3[34] = sub_A5B8();
  v3[35] = sub_A5B8();
  v3[36] = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

#error "4DB00: call analysis failed (funcsize=207)"
uint64_t sub_4DCB8(uint64_t a1, uint64_t a2, void *a3, int a4, void *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int *active;
  uint64_t v31;
  int *v32;
  double v33;
  double v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  void *v55;
  int v56;
  double v57;
  int *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  void (*v63)(char *, uint64_t);
  id v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  int v69;
  double v70;
  int *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  NSURL *v84;
  void *v85;
  void *v86;
  id v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  void *v94;
  void *v95;
  id v96;
  id v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  Swift::String v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  int v116;
  char *v117;
  char *v118;
  id v119;
  uint64_t v120;
  char *v121;
  char *v122;
  id v123;
  uint64_t v119 = a5;
  uint64_t v120 = a6;
  uint64_t v116 = a4;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v112 = *(void *)(v9 - 8);
  uint64_t v113 = v9;
  __chkstk_darwin(v9);
  uint64_t v111 = (char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_494C(&qword_189CF8);
  __chkstk_darwin(v11);
  uint64_t v122 = (char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v115 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v114 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v15 = sub_494C(&qword_189CE8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v117 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v118 = (char *)&v110 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  id v22 = (char *)&v110 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v110 - v23;
  uint64_t v25 = sub_494C(&qword_189D00);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v121 = (char *)&v110 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v110 - v28;
  active = (int *)type metadata accessor for WellnessQueryingActiveEnergyParameters(0LL);
  uint64_t v31 = active[8];
  swift_retain();
  swift_release();
  *(void *)(a1 + v31) = a2;
  id v32 = active;
  [a3 average];
  uint64_t v34 = v33;
  uint64_t v35 = sub_7D950(a3);
  uint64_t v36 = v116;
  uint64_t v38 = sub_90668(v35, v37, v116, v34);
  swift_bridgeObjectRelease();
  uint64_t v39 = a1 + active[5];
  *(double *)uint64_t v39 = v38;
  *(_BYTE *)(v39 + 8) = 0;
  [a3 total];
  uint64_t v41 = v40;
  uint64_t v42 = sub_7D950(a3);
  uint64_t v44 = sub_90668(v42, v43, v36, v41);
  swift_bridgeObjectRelease();
  uint64_t v45 = a1 + active[9];
  *(double *)uint64_t v45 = v44;
  *(_BYTE *)(v45 + 8) = 0;
  uint64_t v46 = sub_7D950(a3);
  if (v47)
  {
    String.toSpeakableString.getter(v46, v47);
    swift_bridgeObjectRelease();
    uint64_t v48 = type metadata accessor for SpeakableString(0LL);
    uint64_t v49 = 0LL;
  }

  else
  {
    uint64_t v48 = type metadata accessor for SpeakableString(0LL);
    uint64_t v49 = 1LL;
  }

  uint64_t v50 = 1LL;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v29, v49, 1LL, v48);
  sub_A384((uint64_t)v29, a1 + active[10]);
  uint64_t v51 = type metadata accessor for DialogCalendarRange.Builder(0LL);
  swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
  DialogCalendarRange.Builder.init()();
  uint64_t v52 = v119;
  uint64_t v53 = [v119 start];
  uint64_t v54 = (uint64_t)v122;
  if (v53)
  {
    uint64_t v55 = v53;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v53);

    uint64_t v50 = 0LL;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v22, v50, 1LL, v13);
  sub_55C74((uint64_t)v22, (uint64_t)v24, &qword_189CE8);
  uint64_t v56 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1LL, v13);
  if (v56)
  {
    sub_2012C((uint64_t)v24, &qword_189CE8);
    uint64_t v57 = 0.0;
  }

  else
  {
    uint64_t v58 = v32;
    os_log_type_t v59 = v114;
    uint64_t v60 = v115;
    (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v114, v24, v13);
    uint64_t v61 = sub_2012C((uint64_t)v24, &qword_189CE8);
    uint64_t v62 = Date.timeIntervalSince1970.getter(v61);
    uint64_t v63 = *(void (**)(char *, uint64_t))(v60 + 8);
    id v32 = v58;
    v63(v59, v13);
    uint64_t v57 = v62;
  }

  dispatch thunk of DialogCalendarRange.Builder.withStartSecs(_:)(*(void *)&v57, v56 != 0);
  swift_release();
  uint64_t v64 = [v52 end];
  unint64_t v65 = (uint64_t)v117;
  uint64_t v66 = (uint64_t)v118;
  if (v64)
  {
    uint64_t v67 = v64;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v64);

    uint64_t v68 = 0LL;
  }

  else
  {
    uint64_t v68 = 1LL;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v65, v68, 1LL, v13);
  sub_55C74(v65, v66, &qword_189CE8);
  uint64_t v69 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v66, 1LL, v13);
  if (v69)
  {
    sub_2012C(v66, &qword_189CE8);
    uint64_t v70 = 0.0;
  }

  else
  {
    uint64_t v71 = v32;
    uint64_t v72 = v114;
    uint64_t v73 = v115;
    (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v114, v66, v13);
    uint64_t v74 = sub_2012C(v66, &qword_189CE8);
    uint64_t v75 = Date.timeIntervalSince1970.getter(v74);
    uint64_t v76 = *(void (**)(char *, uint64_t))(v73 + 8);
    id v32 = v71;
    v76(v72, v13);
    uint64_t v70 = v75;
  }

  uint64_t v77 = (uint64_t)v121;
  dispatch thunk of DialogCalendarRange.Builder.withEndSecs(_:)(*(void *)&v70, v69 != 0);
  uint64_t v78 = swift_release();
  uint64_t v79 = dispatch thunk of DialogCalendarRange.Builder.build()(v78);
  swift_release();
  uint64_t v80 = v32[7];
  swift_release();
  *(void *)(a1 + v80) = v79;
  sub_35468(v120, v54);
  double v81 = type metadata accessor for URL(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v54, 1LL, v81) == 1)
  {
    sub_2012C(v54, &qword_189CF8);
    uint64_t v82 = type metadata accessor for SpeakableString(0LL);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v77, 1LL, 1LL, v82);
  }

  else
  {
    uint64_t v83 = [objc_allocWithZone(SAUIAppPunchOut) init];
    URL._bridgeToObjectiveC()(v84);
    uint64_t v86 = v85;
    [v83 setPunchOutUri:v85];

    uint64_t v87 = v83;
    double v88 = v111;
    uint64_t v89 = UUID.init()();
    uint64_t v90 = UUID.uuidString.getter(v89);
    uint64_t v92 = v91;
    (*(void (**)(char *, uint64_t))(v112 + 8))(v88, v113);
    sub_125B84(v90, v92, v87);

    uint64_t v93 = [v87 dictionary];
    if (v93)
    {
      uint64_t v94 = v93;
      uint64_t v95 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      uint64_t v123 = 0LL;
      uint64_t v96 = [v95 dataWithPropertyList:v94 format:200 options:0 error:&v123];
      id v97 = v123;
      if (v96)
      {
        char v98 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v96);
        uint64_t v100 = v99;

        uint64_t v101 = Data.base64EncodedString(options:)(0LL);
        String.toSpeakableString.getter(v101._countAndFlagsBits, v101._object);

        sub_A3CC(v98, v100);
        swift_bridgeObjectRelease();
        uint64_t v102 = type metadata accessor for SpeakableString(0LL);
        uint64_t v103 = v77;
        uint64_t v104 = 0LL;
      }

      else
      {
        os_log_type_t v106 = v97;
        uint64_t v107 = _convertNSErrorToError(_:)();

        swift_willThrow(v108);
        swift_errorRelease(v107);
        uint64_t v102 = type metadata accessor for SpeakableString(0LL);
        uint64_t v103 = v77;
        uint64_t v104 = 1LL;
      }

      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v103, v104, 1LL, v102);
    }

    else
    {
      uint64_t v105 = type metadata accessor for SpeakableString(0LL);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v77, 1LL, 1LL, v105);
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v81 - 8) + 8LL))(v54, v81);
  }

  return sub_A384(v77, a1);
}

uint64_t sub_4E470(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  id v157 = a7;
  uint64_t v164 = a6;
  id v160 = a5;
  uint64_t v152 = a4;
  uint64_t v166 = type metadata accessor for Date(0LL);
  uint64_t v162 = *(void *)(v166 - 8);
  __chkstk_darwin(v166);
  uint64_t v161 = (char *)&v147 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_494C(&qword_189CE8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v149 = (char *)&v147 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v150 = (uint64_t)&v147 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v156 = (char *)&v147 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v158 = (uint64_t)&v147 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v155 = (char *)&v147 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v148 = (uint64_t)&v147 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v153 = (char *)&v147 - v25;
  __chkstk_darwin(v24);
  uint64_t v154 = (uint64_t)&v147 - v26;
  uint64_t v27 = type metadata accessor for UUID(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  char v30 = (char *)&v147 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_494C(&qword_189CF8);
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&v147 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = sub_494C(&qword_189D00);
  uint64_t v35 = __chkstk_darwin(v34);
  uint64_t v37 = (char *)&v147 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v35);
  uint64_t v39 = (char *)&v147 - v38;
  int v163 = a2;
  uint64_t v40 = sub_27CC8(a2);
  String.toSpeakableString.getter(v40, v41);
  swift_bridgeObjectRelease();
  uint64_t v42 = type metadata accessor for SpeakableString(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v39, 0LL, 1LL, v42);
  uint64_t v43 = type metadata accessor for WellnessQueryingBasalBodyTemperatureParameters(0LL);
  sub_A384((uint64_t)v39, a1 + *(int *)(v43 + 20));
  uint64_t v165 = v43;
  uint64_t v44 = *(int *)(v43 + 32);
  swift_retain();
  swift_release();
  uint64_t v159 = a3;
  *(void *)(a1 + v44) = a3;
  sub_35468(v152, (uint64_t)v33);
  uint64_t v45 = type metadata accessor for URL(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v33, 1LL, v45) == 1)
  {
    sub_2012C((uint64_t)v33, &qword_189CF8);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v37, 1LL, 1LL, v42);
    uint64_t v46 = v164;
  }

  else
  {
    uint64_t v152 = a1;
    id v47 = [objc_allocWithZone(SAUIAppPunchOut) init];
    URL._bridgeToObjectiveC()(v48);
    uint64_t v50 = v49;
    [v47 setPunchOutUri:v49];

    id v51 = v47;
    uint64_t v52 = UUID.init()();
    uint64_t v53 = UUID.uuidString.getter(v52);
    uint64_t v55 = v54;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
    sub_125B84(v53, v55, v51);

    id v56 = [v51 dictionary];
    if (v56)
    {
      uint64_t v57 = v56;
      uint64_t v58 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      id v167 = 0LL;
      id v59 = [v58 dataWithPropertyList:v57 format:200 options:0 error:&v167];
      id v60 = v167;
      uint64_t v46 = v164;
      if (v59)
      {
        uint64_t v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v59);
        unint64_t v63 = v62;

        Swift::String v64 = Data.base64EncodedString(options:)(0LL);
        String.toSpeakableString.getter(v64._countAndFlagsBits, v64._object);

        sub_A3CC(v61, v63);
        swift_bridgeObjectRelease();
        uint64_t v65 = (uint64_t)v37;
        uint64_t v66 = 0LL;
      }

      else
      {
        uint64_t v67 = v60;
        uint64_t v68 = _convertNSErrorToError(_:)();

        swift_willThrow(v69);
        swift_errorRelease(v68);
        uint64_t v65 = (uint64_t)v37;
        uint64_t v66 = 1LL;
      }

      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v65, v66, 1LL, v42);
    }

    else
    {
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v37, 1LL, 1LL, v42);

      uint64_t v46 = v164;
    }

    (*(void (**)(char *, uint64_t))(*(void *)(v45 - 8) + 8LL))(v33, v45);
    a1 = v152;
  }

  uint64_t v70 = v166;
  sub_A384((uint64_t)v37, a1);
  uint64_t v71 = type metadata accessor for DialogTemperature.Builder(0LL);
  uint64_t v72 = *(unsigned int *)(v71 + 48);
  uint64_t v73 = *(unsigned __int16 *)(v71 + 52);
  uint64_t v152 = v71;
  swift_allocObject(v71, v72, v73);
  DialogTemperature.Builder.init()();
  id v74 = v160;
  [v160 average];
  uint64_t v75 = &selRef_mostRecent;
  if (v76 > 0.0) {
    uint64_t v75 = &selRef_average;
  }
  [v74 *v75];
  double v78 = v77;
  uint64_t v79 = sub_7D950(v74);
  double v81 = sub_90668(v79, v80, v163, v78);
  swift_bridgeObjectRelease();
  dispatch thunk of DialogConvertibleMeasurement.Builder.withValue(_:)(*(void *)&v81, 0LL);
  swift_release();
  dispatch thunk of DialogConvertibleMeasurement.Builder.withUnits(_:)(v46);
  uint64_t v82 = swift_release();
  uint64_t v83 = dispatch thunk of DialogConvertibleMeasurement.Builder.build()(v82);
  swift_release();
  uint64_t v84 = *(int *)(v165 + 28);
  swift_release();
  uint64_t v151 = v84;
  *(void *)(a1 + v84) = v83;
  uint64_t v85 = type metadata accessor for DialogCalendarRange.Builder(0LL);
  swift_allocObject(v85, *(unsigned int *)(v85 + 48), *(unsigned __int16 *)(v85 + 52));
  DialogCalendarRange.Builder.init()();
  id v86 = v157;
  id v87 = [v157 start];
  if (v87)
  {
    double v88 = v87;
    uint64_t v89 = v153;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v87);

    uint64_t v90 = (uint64_t)v89;
    uint64_t v91 = 0LL;
    uint64_t v92 = (uint64_t)v155;
  }

  else
  {
    uint64_t v91 = 1LL;
    uint64_t v92 = (uint64_t)v155;
    uint64_t v90 = (uint64_t)v153;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v90, v91, 1LL, v70);
  uint64_t v93 = v90;
  uint64_t v94 = v154;
  sub_55C74(v93, v154, &qword_189CE8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v94, 1LL, v70))
  {
    sub_2012C(v94, &qword_189CE8);
    id v95 = [v74 sampleEndDate];
    if (v95)
    {
      uint64_t v96 = v95;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v95);

      uint64_t v97 = 0LL;
    }

    else
    {
      uint64_t v97 = 1LL;
    }

    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v92, v97, 1LL, v70);
    uint64_t v101 = v92;
    uint64_t v100 = v148;
    sub_55C74(v101, v148, &qword_189CE8);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v100, 1LL, v70))
    {
      sub_2012C(v100, &qword_189CE8);
      double v102 = 0.0;
      uint64_t v103 = 1LL;
      goto LABEL_24;
    }

    uint64_t v98 = v162;
    uint64_t v99 = *(void (**)(char *, uint64_t, uint64_t))(v162 + 16);
  }

  else
  {
    uint64_t v98 = v162;
    uint64_t v99 = *(void (**)(char *, uint64_t, uint64_t))(v162 + 16);
    uint64_t v100 = v94;
  }

  uint64_t v104 = v161;
  v99(v161, v100, v70);
  uint64_t v105 = sub_2012C(v100, &qword_189CE8);
  double v106 = Date.timeIntervalSince1970.getter(v105);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v104, v70);
  uint64_t v103 = 0LL;
  double v102 = v106;
LABEL_24:
  dispatch thunk of DialogCalendarRange.Builder.withStartSecs(_:)(*(void *)&v102, v103);
  swift_release();
  id v107 = [v86 end];
  if (v107)
  {
    uint64_t v108 = v107;
    uint64_t v109 = (uint64_t)v156;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v107);

    uint64_t v110 = 0LL;
  }

  else
  {
    uint64_t v110 = 1LL;
    uint64_t v109 = (uint64_t)v156;
  }

  uint64_t v111 = v166;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v109, v110, 1LL, v166);
  uint64_t v112 = v109;
  uint64_t v113 = v158;
  sub_55C74(v112, v158, &qword_189CE8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v113, 1LL, v111))
  {
    sub_2012C(v113, &qword_189CE8);
    id v114 = [v74 sampleEndDate];
    if (v114)
    {
      uint64_t v115 = v114;
      uint64_t v116 = (uint64_t)v149;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v114);

      uint64_t v117 = 0LL;
    }

    else
    {
      uint64_t v117 = 1LL;
      uint64_t v116 = (uint64_t)v149;
    }

    uint64_t v124 = v165;
    uint64_t v125 = v166;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v116, v117, 1LL, v166);
    uint64_t v126 = v150;
    sub_55C74(v116, v150, &qword_189CE8);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v126, 1LL, v125))
    {
      sub_2012C(v126, &qword_189CE8);
      double v123 = 0.0;
      uint64_t v122 = 1LL;
    }

    else
    {
      uint64_t v127 = v162;
      uint64_t v128 = v126;
      uint64_t v129 = v161;
      (*(void (**)(char *, uint64_t, uint64_t))(v162 + 16))(v161, v128, v125);
      uint64_t v130 = v128;
      uint64_t v124 = v165;
      uint64_t v131 = sub_2012C(v130, &qword_189CE8);
      double v132 = Date.timeIntervalSince1970.getter(v131);
      (*(void (**)(char *, uint64_t))(v127 + 8))(v129, v125);
      uint64_t v122 = 0LL;
      double v123 = v132;
    }
  }

  else
  {
    uint64_t v119 = v161;
    uint64_t v118 = v162;
    (*(void (**)(char *, uint64_t, uint64_t))(v162 + 16))(v161, v113, v111);
    uint64_t v120 = sub_2012C(v113, &qword_189CE8);
    double v121 = Date.timeIntervalSince1970.getter(v120);
    (*(void (**)(char *, uint64_t))(v118 + 8))(v119, v111);
    uint64_t v122 = 0LL;
    double v123 = v121;
    uint64_t v124 = v165;
  }

  dispatch thunk of DialogCalendarRange.Builder.withEndSecs(_:)(*(void *)&v123, v122);
  uint64_t v133 = swift_release();
  uint64_t v134 = dispatch thunk of DialogCalendarRange.Builder.build()(v133);
  swift_release();
  uint64_t v135 = *(int *)(v124 + 24);
  swift_release();
  *(void *)(a1 + v135) = v134;
  unsigned __int8 v136 = sub_12AB68();
  uint64_t v137 = v164;
  if (v136 < 3u || (uint64_t result = sub_128C14(), (result & 1) != 0))
  {
    swift_allocObject(v152, *(unsigned int *)(v152 + 48), *(unsigned __int16 *)(v152 + 52));
    DialogTemperature.Builder.init()();
    [v74 average];
    double v140 = v139;
    uint64_t v141 = sub_7D950(v74);
    double v143 = sub_90668(v141, v142, v163, v140);
    swift_bridgeObjectRelease();
    dispatch thunk of DialogConvertibleMeasurement.Builder.withValue(_:)(*(void *)&v143, 0LL);
    swift_release();
    dispatch thunk of DialogConvertibleMeasurement.Builder.withUnits(_:)(v137);
    uint64_t v144 = swift_release();
    uint64_t v145 = dispatch thunk of DialogConvertibleMeasurement.Builder.build()(v144);
    swift_release();
    uint64_t v146 = v151;
    uint64_t result = swift_release();
    *(void *)(a1 + v146) = v145;
  }

  return result;
}

uint64_t sub_4EF50(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 a4, int a5, void *a6, uint64_t a7)
{
  uint64_t v164 = a7;
  id v168 = a6;
  int v158 = a5;
  uint64_t v153 = type metadata accessor for UUID(0LL);
  uint64_t v152 = *(void *)(v153 - 8);
  __chkstk_darwin(v153);
  uint64_t v151 = (char *)&v151 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_494C(&qword_189CF8);
  __chkstk_darwin(v12);
  uint64_t v166 = (uint64_t)&v151 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v162 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v167 = (char *)&v151 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_494C(&qword_189CE8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v163 = (uint64_t)&v151 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v156 = (char *)&v151 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  id v157 = (char *)&v151 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  id v160 = (char *)&v151 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v161 = (char *)&v151 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v154 = (char *)&v151 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v155 = (uint64_t)&v151 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v159 = (char *)&v151 - v32;
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v151 - v33;
  uint64_t v35 = sub_494C(&qword_189D00);
  uint64_t v36 = __chkstk_darwin(v35);
  uint64_t v165 = (char *)&v151 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v36);
  uint64_t v39 = (char *)&v151 - v38;
  uint64_t v40 = (int *)type metadata accessor for WellnessQueryingBloodGlucoseParameters(0LL);
  uint64_t v41 = v40[10];
  swift_retain();
  swift_release();
  *(void *)(a1 + v41) = a2;
  uint64_t v42 = v40;
  [a3 mostRecent];
  double v44 = v43;
  uint64_t v45 = sub_7D950(a3);
  double v47 = sub_90668(v45, v46, a4, v44);
  swift_bridgeObjectRelease();
  uint64_t v48 = a1 + v40[12];
  *(double *)uint64_t v48 = v47;
  *(_BYTE *)(v48 + 8) = 0;
  [a3 maximum];
  double v50 = v49;
  uint64_t v51 = sub_7D950(a3);
  double v53 = sub_90668(v51, v52, a4, v50);
  swift_bridgeObjectRelease();
  uint64_t v54 = a1 + v40[8];
  *(double *)uint64_t v54 = v53;
  *(_BYTE *)(v54 + 8) = 0;
  [a3 minimum];
  double v56 = v55;
  uint64_t v57 = sub_7D950(a3);
  double v59 = sub_90668(v57, v58, a4, v56);
  swift_bridgeObjectRelease();
  uint64_t v60 = a1 + v40[9];
  *(double *)uint64_t v60 = v59;
  *(_BYTE *)(v60 + 8) = 0;
  if ((v158 & 1) == 0)
  {
    [a3 average];
    double v62 = v61;
    uint64_t v63 = sub_7D950(a3);
    double v65 = sub_90668(v63, v64, a4, v62);
    swift_bridgeObjectRelease();
    uint64_t v66 = a1 + v40[5];
    *(double *)uint64_t v66 = v65;
    *(_BYTE *)(v66 + 8) = 0;
  }

  uint64_t v67 = sub_7D950(a3);
  if (v68)
  {
    String.toSpeakableString.getter(v67, v68);
    swift_bridgeObjectRelease();
    uint64_t v69 = type metadata accessor for SpeakableString(0LL);
    uint64_t v70 = 0LL;
  }

  else
  {
    uint64_t v69 = type metadata accessor for SpeakableString(0LL);
    uint64_t v70 = 1LL;
  }

  uint64_t v71 = (uint64_t)v159;
  uint64_t v72 = 1LL;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v39, v70, 1LL, v69);
  sub_A384((uint64_t)v39, a1 + v40[11]);
  uint64_t v73 = type metadata accessor for DialogCalendarRange.Builder(0LL);
  swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
  DialogCalendarRange.Builder.init()();
  id v74 = [v168 start];
  if (v74)
  {
    uint64_t v75 = v74;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v74);

    uint64_t v72 = 0LL;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v71, v72, 1LL, v14);
  sub_55C74(v71, (uint64_t)v34, &qword_189CE8);
  uint64_t v76 = a1;
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v34, 1LL, v14))
  {
    sub_2012C((uint64_t)v34, &qword_189CE8);
    id v77 = [a3 sampleEndDate];
    uint64_t v78 = v162;
    if (v77)
    {
      uint64_t v79 = v77;
      uint64_t v80 = (uint64_t)v154;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v77);

      uint64_t v81 = 0LL;
      uint64_t v82 = (uint64_t)v165;
    }

    else
    {
      uint64_t v81 = 1LL;
      uint64_t v82 = (uint64_t)v165;
      uint64_t v80 = (uint64_t)v154;
    }

    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v80, v81, 1LL, v14);
    uint64_t v89 = v155;
    sub_55C74(v80, v155, &qword_189CE8);
    uint64_t v83 = v42;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v89, 1LL, v14))
    {
      sub_2012C(v89, &qword_189CE8);
      double v88 = 0.0;
      uint64_t v87 = 1LL;
    }

    else
    {
      uint64_t v90 = v89;
      uint64_t v91 = v167;
      (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v167, v90, v14);
      uint64_t v92 = sub_2012C(v90, &qword_189CE8);
      double v93 = Date.timeIntervalSince1970.getter(v92);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v91, v14);
      uint64_t v87 = 0LL;
      double v88 = v93;
    }
  }

  else
  {
    uint64_t v83 = v42;
    uint64_t v78 = v162;
    uint64_t v84 = v167;
    (*(void (**)(char *, char *, uint64_t))(v162 + 16))(v167, v34, v14);
    uint64_t v85 = sub_2012C((uint64_t)v34, &qword_189CE8);
    double v86 = Date.timeIntervalSince1970.getter(v85);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v84, v14);
    uint64_t v87 = 0LL;
    double v88 = v86;
    uint64_t v82 = (uint64_t)v165;
  }

  dispatch thunk of DialogCalendarRange.Builder.withStartSecs(_:)(*(void *)&v88, v87);
  swift_release();
  id v94 = [v168 end];
  if (v94)
  {
    id v95 = v94;
    uint64_t v96 = v160;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v94);

    uint64_t v97 = (uint64_t)v96;
    uint64_t v98 = 0LL;
  }

  else
  {
    uint64_t v98 = 1LL;
    uint64_t v97 = (uint64_t)v160;
  }

  uint64_t v99 = (uint64_t)v161;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v97, v98, 1LL, v14);
  sub_55C74(v97, v99, &qword_189CE8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v99, 1LL, v14))
  {
    sub_2012C(v99, &qword_189CE8);
    id v100 = [a3 sampleEndDate];
    if (v100)
    {
      uint64_t v101 = v100;
      uint64_t v102 = (uint64_t)v156;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v100);

      uint64_t v103 = 0LL;
    }

    else
    {
      uint64_t v103 = 1LL;
      uint64_t v102 = (uint64_t)v156;
    }

    uint64_t v104 = (uint64_t)v157;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v102, v103, 1LL, v14);
    sub_55C74(v102, v104, &qword_189CE8);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v104, 1LL, v14))
    {
      sub_2012C(v104, &qword_189CE8);
      double v107 = 0.0;
      uint64_t v108 = 1LL;
      goto LABEL_28;
    }

    uint64_t v105 = v167;
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v167, v104, v14);
    uint64_t v106 = v104;
  }

  else
  {
    uint64_t v105 = v167;
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v167, v99, v14);
    uint64_t v106 = v99;
  }

  uint64_t v109 = sub_2012C(v106, &qword_189CE8);
  double v110 = Date.timeIntervalSince1970.getter(v109);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v105, v14);
  uint64_t v108 = 0LL;
  double v107 = v110;
LABEL_28:
  dispatch thunk of DialogCalendarRange.Builder.withEndSecs(_:)(*(void *)&v107, v108);
  uint64_t v111 = swift_release();
  uint64_t v112 = dispatch thunk of DialogCalendarRange.Builder.build()(v111);
  swift_release();
  uint64_t v113 = v83;
  uint64_t v114 = v83[7];
  uint64_t v115 = v76;
  swift_release();
  *(void *)(v76 + v114) = v112;
  id v116 = [v168 start];
  if (v116)
  {
    uint64_t v117 = v116;
    uint64_t v118 = v167;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v116);

    uint64_t v119 = v163;
    (*(void (**)(uint64_t, char *, uint64_t))(v78 + 32))(v163, v118, v14);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v119, 0LL, 1LL, v14);
    BOOL v120 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v119, 1LL, v14) == 1;
  }

  else
  {
    BOOL v120 = 1;
    uint64_t v119 = v163;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v163, 1LL, 1LL, v14);
  }

  sub_2012C(v119, &qword_189CE8);
  *(_BYTE *)(v76 + v113[13]) = v120;
  uint64_t v121 = v166;
  sub_35468(v164, v166);
  uint64_t v122 = type metadata accessor for URL(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v121, 1LL, v122) == 1)
  {
    sub_2012C(v121, &qword_189CF8);
    uint64_t v123 = type metadata accessor for SpeakableString(0LL);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v82, 1LL, 1LL, v123);
  }

  else
  {
    id v124 = [objc_allocWithZone(SAUIAppPunchOut) init];
    URL._bridgeToObjectiveC()(v125);
    uint64_t v127 = v126;
    [v124 setPunchOutUri:v126];

    id v128 = v124;
    uint64_t v129 = v151;
    uint64_t v130 = UUID.init()();
    uint64_t v131 = UUID.uuidString.getter(v130);
    uint64_t v133 = v132;
    (*(void (**)(char *, uint64_t))(v152 + 8))(v129, v153);
    sub_125B84(v131, v133, v128);

    id v134 = [v128 dictionary];
    if (v134)
    {
      uint64_t v135 = v134;
      unsigned __int8 v136 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      id v169 = 0LL;
      id v137 = [v136 dataWithPropertyList:v135 format:200 options:0 error:&v169];
      id v138 = v169;
      if (v137)
      {
        uint64_t v139 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v137);
        unint64_t v141 = v140;

        Swift::String v142 = Data.base64EncodedString(options:)(0LL);
        String.toSpeakableString.getter(v142._countAndFlagsBits, v142._object);

        sub_A3CC(v139, v141);
        swift_bridgeObjectRelease();
        uint64_t v143 = type metadata accessor for SpeakableString(0LL);
        uint64_t v144 = v82;
        uint64_t v145 = 0LL;
      }

      else
      {
        uint64_t v147 = v138;
        uint64_t v148 = _convertNSErrorToError(_:)();

        swift_willThrow(v149);
        swift_errorRelease(v148);
        uint64_t v143 = type metadata accessor for SpeakableString(0LL);
        uint64_t v144 = v82;
        uint64_t v145 = 1LL;
      }

      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v144, v145, 1LL, v143);
    }

    else
    {
      uint64_t v146 = type metadata accessor for SpeakableString(0LL);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v82, 1LL, 1LL, v146);
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v122 - 8) + 8LL))(v121, v122);
    uint64_t v115 = v76;
  }

  return sub_A384(v82, v115);
}

uint64_t sub_4FAB4( uint64_t a1, uint64_t a2, void *a3, unsigned __int8 a4, uint64_t a5, int a6, void *a7, uint64_t a8)
{
  uint64_t v157 = a8;
  id v162 = a7;
  int v150 = a6;
  uint64_t v146 = type metadata accessor for UUID(0LL);
  uint64_t v145 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  uint64_t v144 = (char *)&v143 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_494C(&qword_189CF8);
  __chkstk_darwin(v14);
  int v158 = (char *)&v143 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_494C(&qword_189D00);
  __chkstk_darwin(v16);
  uint64_t v159 = (char *)&v143 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for Date(0LL);
  uint64_t v156 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v155 = (char *)&v143 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_494C(&qword_189CE8);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v148 = (char *)&v143 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v149 = (uint64_t)&v143 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v153 = (char *)&v143 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v154 = (uint64_t)&v143 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v152 = (char *)&v143 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v147 = (uint64_t)&v143 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v151 = (char *)&v143 - v34;
  __chkstk_darwin(v33);
  uint64_t v36 = (char *)&v143 - v35;
  uint64_t v37 = (int *)type metadata accessor for WellnessQueryingBodyTemperatureParameters(0LL);
  uint64_t v38 = v37[10];
  swift_retain();
  swift_release();
  *(void *)(a1 + v38) = a2;
  uint64_t v39 = type metadata accessor for DialogTemperature.Builder(0LL);
  swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  DialogTemperature.Builder.init()();
  [a3 mostRecent];
  double v41 = v40;
  uint64_t v42 = sub_7D950(a3);
  double v44 = sub_90668(v42, v43, a4, v41);
  swift_bridgeObjectRelease();
  dispatch thunk of DialogConvertibleMeasurement.Builder.withValue(_:)(*(void *)&v44, 0LL);
  swift_release();
  dispatch thunk of DialogConvertibleMeasurement.Builder.withUnits(_:)(a5);
  uint64_t v45 = swift_release();
  uint64_t v46 = dispatch thunk of DialogConvertibleMeasurement.Builder.build()(v45);
  swift_release();
  uint64_t v47 = v37[11];
  swift_release();
  *(void *)(a1 + v4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = v46;
  swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  DialogTemperature.Builder.init()();
  [a3 maximum];
  double v49 = v48;
  uint64_t v50 = sub_7D950(a3);
  double v52 = sub_90668(v50, v51, a4, v49);
  swift_bridgeObjectRelease();
  dispatch thunk of DialogConvertibleMeasurement.Builder.withValue(_:)(*(void *)&v52, 0LL);
  swift_release();
  dispatch thunk of DialogConvertibleMeasurement.Builder.withUnits(_:)(a5);
  uint64_t v53 = swift_release();
  uint64_t v54 = dispatch thunk of DialogConvertibleMeasurement.Builder.build()(v53);
  swift_release();
  uint64_t v55 = v37[8];
  swift_release();
  *(void *)(a1 + v55) = v54;
  swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  DialogTemperature.Builder.init()();
  [a3 minimum];
  double v57 = v56;
  id v161 = a3;
  uint64_t v58 = sub_7D950(a3);
  unsigned __int8 v59 = a4;
  double v61 = sub_90668(v58, v60, a4, v57);
  swift_bridgeObjectRelease();
  dispatch thunk of DialogConvertibleMeasurement.Builder.withValue(_:)(*(void *)&v61, 0LL);
  swift_release();
  uint64_t v62 = a5;
  dispatch thunk of DialogConvertibleMeasurement.Builder.withUnits(_:)(a5);
  uint64_t v63 = swift_release();
  uint64_t v64 = dispatch thunk of DialogConvertibleMeasurement.Builder.build()(v63);
  swift_release();
  id v160 = v37;
  uint64_t v65 = v37[9];
  swift_release();
  uint64_t v66 = a1;
  *(void *)(a1 + v65) = v64;
  if ((v150 & 1) == 0)
  {
    swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
    DialogTemperature.Builder.init()();
    id v67 = v161;
    [v161 average];
    double v69 = v68;
    uint64_t v70 = sub_7D950(v67);
    double v72 = sub_90668(v70, v71, v59, v69);
    swift_bridgeObjectRelease();
    dispatch thunk of DialogConvertibleMeasurement.Builder.withValue(_:)(*(void *)&v72, 0LL);
    swift_release();
    dispatch thunk of DialogConvertibleMeasurement.Builder.withUnits(_:)(v62);
    uint64_t v73 = swift_release();
    uint64_t v74 = dispatch thunk of DialogConvertibleMeasurement.Builder.build()(v73);
    swift_release();
    uint64_t v75 = v160[5];
    swift_release();
    *(void *)(a1 + v75) = v74;
  }

  uint64_t v76 = type metadata accessor for DialogCalendarRange.Builder(0LL);
  swift_allocObject(v76, *(unsigned int *)(v76 + 48), *(unsigned __int16 *)(v76 + 52));
  DialogCalendarRange.Builder.init()();
  id v77 = [v162 start];
  if (v77)
  {
    uint64_t v78 = v77;
    uint64_t v79 = (uint64_t)v151;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v77);

    uint64_t v80 = 0LL;
    uint64_t v81 = v155;
  }

  else
  {
    uint64_t v80 = 1LL;
    uint64_t v81 = v155;
    uint64_t v79 = (uint64_t)v151;
  }

  uint64_t v82 = (uint64_t)v152;
  uint64_t v83 = v66;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v79, v80, 1LL, v18);
  sub_55C74(v79, (uint64_t)v36, &qword_189CE8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v36, 1LL, v18))
  {
    sub_2012C((uint64_t)v36, &qword_189CE8);
    id v84 = [v161 sampleEndDate];
    uint64_t v85 = v156;
    if (v84)
    {
      double v86 = v84;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v84);

      uint64_t v87 = 0LL;
    }

    else
    {
      uint64_t v87 = 1LL;
    }

    uint64_t v92 = (uint64_t)v158;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v82, v87, 1LL, v18);
    uint64_t v93 = v147;
    sub_55C74(v82, v147, &qword_189CE8);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v93, 1LL, v18))
    {
      sub_2012C(v93, &qword_189CE8);
      double v91 = 0.0;
      uint64_t v90 = 1LL;
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v81, v93, v18);
      uint64_t v94 = sub_2012C(v93, &qword_189CE8);
      double v95 = Date.timeIntervalSince1970.getter(v94);
      (*(void (**)(char *, uint64_t))(v85 + 8))(v81, v18);
      uint64_t v90 = 0LL;
      double v91 = v95;
    }
  }

  else
  {
    uint64_t v85 = v156;
    (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v81, v36, v18);
    uint64_t v88 = sub_2012C((uint64_t)v36, &qword_189CE8);
    double v89 = Date.timeIntervalSince1970.getter(v88);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v81, v18);
    uint64_t v90 = 0LL;
    double v91 = v89;
    uint64_t v92 = (uint64_t)v158;
  }

  dispatch thunk of DialogCalendarRange.Builder.withStartSecs(_:)(*(void *)&v91, v90);
  swift_release();
  id v96 = [v162 end];
  if (v96)
  {
    uint64_t v97 = v96;
    uint64_t v98 = (uint64_t)v153;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v96);

    uint64_t v99 = 0LL;
  }

  else
  {
    uint64_t v99 = 1LL;
    uint64_t v98 = (uint64_t)v153;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v98, v99, 1LL, v18);
  uint64_t v100 = v154;
  sub_55C74(v98, v154, &qword_189CE8);
  sub_2012C(v100, &qword_189CE8);
  id v101 = [v161 sampleEndDate];
  if (v101)
  {
    uint64_t v102 = v101;
    uint64_t v103 = (uint64_t)v148;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v101);

    uint64_t v104 = 0LL;
  }

  else
  {
    uint64_t v104 = 1LL;
    uint64_t v103 = (uint64_t)v148;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v103, v104, 1LL, v18);
  uint64_t v100 = v149;
  sub_55C74(v103, v149, &qword_189CE8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v100, 1LL, v18))
  {
    sub_2012C(v100, &qword_189CE8);
    double v105 = 0.0;
    uint64_t v106 = 1LL;
  }

  else
  {
LABEL_23:
    (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v81, v100, v18);
    uint64_t v107 = sub_2012C(v100, &qword_189CE8);
    double v108 = Date.timeIntervalSince1970.getter(v107);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v81, v18);
    uint64_t v106 = 0LL;
    double v105 = v108;
  }

  dispatch thunk of DialogCalendarRange.Builder.withEndSecs(_:)(*(void *)&v105, v106);
  uint64_t v109 = swift_release();
  uint64_t v110 = dispatch thunk of DialogCalendarRange.Builder.build()(v109);
  swift_release();
  uint64_t v111 = v160[7];
  swift_release();
  *(void *)(v66 + v111) = v110;
  sub_35468(v157, v92);
  uint64_t v112 = type metadata accessor for URL(0LL);
  int v113 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v92, 1LL, v112);
  uint64_t v114 = (uint64_t)v159;
  if (v113 == 1)
  {
    sub_2012C(v92, &qword_189CF8);
    uint64_t v115 = type metadata accessor for SpeakableString(0LL);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v114, 1LL, 1LL, v115);
  }

  else
  {
    id v116 = [objc_allocWithZone(SAUIAppPunchOut) init];
    URL._bridgeToObjectiveC()(v117);
    uint64_t v119 = v118;
    [v116 setPunchOutUri:v118];

    id v120 = v116;
    uint64_t v121 = v144;
    uint64_t v122 = UUID.init()();
    uint64_t v123 = UUID.uuidString.getter(v122);
    uint64_t v125 = v124;
    (*(void (**)(char *, uint64_t))(v145 + 8))(v121, v146);
    sub_125B84(v123, v125, v120);

    id v126 = [v120 dictionary];
    if (v126)
    {
      uint64_t v127 = v126;
      id v128 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      id v163 = 0LL;
      id v129 = [v128 dataWithPropertyList:v127 format:200 options:0 error:&v163];
      id v130 = v163;
      if (v129)
      {
        uint64_t v131 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v129);
        unint64_t v133 = v132;

        Swift::String v134 = Data.base64EncodedString(options:)(0LL);
        String.toSpeakableString.getter(v134._countAndFlagsBits, v134._object);

        sub_A3CC(v131, v133);
        swift_bridgeObjectRelease();
        uint64_t v135 = type metadata accessor for SpeakableString(0LL);
        uint64_t v136 = v114;
        uint64_t v137 = 0LL;
      }

      else
      {
        uint64_t v139 = v130;
        uint64_t v140 = _convertNSErrorToError(_:)();

        swift_willThrow(v141);
        swift_errorRelease(v140);
        uint64_t v135 = type metadata accessor for SpeakableString(0LL);
        uint64_t v136 = v114;
        uint64_t v137 = 1LL;
      }

      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v136, v137, 1LL, v135);
    }

    else
    {
      uint64_t v138 = type metadata accessor for SpeakableString(0LL);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v114, 1LL, 1LL, v138);
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v112 - 8) + 8LL))(v92, v112);
  }

  return sub_A384(v114, v83);
}

void sub_50634()
{
  uint64_t v2 = v1;
  uint64_t v133 = v3;
  uint64_t v136 = v4;
  LODWORD(v13_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = v5;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = sub_56944(__stack_chk_guard);
  v124[1] = *(void *)(v12 - 8);
  v124[2] = v12;
  sub_D978();
  __chkstk_darwin(v13);
  sub_56904(v14, v124[0]);
  sub_494C(&qword_189CF8);
  sub_D978();
  __chkstk_darwin(v15);
  uint64_t v135 = (uint64_t)v124 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v132 = *(void *)(sub_A8E4() - 8);
  sub_D978();
  __chkstk_darwin(v17);
  sub_56920(v18, v124[0]);
  sub_494C(&qword_189CE8);
  sub_D978();
  __chkstk_darwin(v19);
  sub_3751C();
  uint64_t v127 = v20;
  sub_A794();
  __chkstk_darwin(v21);
  id v128 = (char *)v124 - v22;
  sub_A794();
  __chkstk_darwin(v23);
  id v129 = (char *)v124 - v24;
  sub_A794();
  __chkstk_darwin(v25);
  sub_1C6B8();
  uint64_t v130 = v26;
  sub_A794();
  __chkstk_darwin(v27);
  uint64_t v125 = (char *)v124 - v28;
  sub_A794();
  __chkstk_darwin(v29);
  id v126 = (char *)v124 - v30;
  sub_A794();
  __chkstk_darwin(v31);
  sub_56AEC();
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)v124 - v33;
  sub_494C(&qword_189D00);
  sub_D978();
  __chkstk_darwin(v35);
  Swift::String v134 = (char *)v124 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_A794();
  __chkstk_darwin(v37);
  uint64_t v39 = (char *)v124 - v38;
  double v40 = (int *)v2(0LL);
  uint64_t v41 = v40[8];
  swift_retain();
  swift_release();
  *(void *)(v11 + v41) = v9;
  uint64_t v42 = v11;
  [v7 total];
  uint64_t v43 = sub_568FC();
  LOBYTE(v11) = (_BYTE)v137;
  sub_56734(v43, v44, v137);
  sub_1EBF4();
  sub_56804(v42 + v40[9]);
  [v7 average];
  uint64_t v45 = sub_568FC();
  sub_56734(v45, v46, v11);
  sub_1EBF4();
  uint64_t v137 = v40;
  sub_56804(v42 + v40[5]);
  uint64_t v47 = sub_568FC();
  if (v48)
  {
    uint64_t v7 = v48;
    String.toSpeakableString.getter(v47, v48);
    sub_249D4();
    uint64_t v50 = sub_ABF4();
    uint64_t v51 = 0LL;
  }

  else
  {
    uint64_t v50 = sub_ABF4();
    uint64_t v51 = 1LL;
  }

  uint64_t v52 = 1LL;
  sub_A66C((uint64_t)v39, v51, v49, v50);
  sub_A384((uint64_t)v39, v42 + v137[10]);
  uint64_t v53 = sub_56B64();
  sub_A72C(v53);
  uint64_t v54 = sub_56AD8();
  id v55 = sub_56988(v54, "start");
  uint64_t v56 = v131;
  if (v55)
  {
    sub_56AE0((uint64_t)v55);

    uint64_t v52 = 0LL;
  }

  uint64_t v57 = v132;
  sub_A628(v0, v52);
  sub_568E0(v0, v58, &qword_189CE8);
  uint64_t v59 = sub_566D8((uint64_t)v34);
  if ((_DWORD)v59)
  {
    uint64_t v60 = sub_56628(v59, &qword_189CE8);
    id v61 = sub_36F04(v60, "sampleStartDate");
    uint64_t v62 = (uint64_t)v134;
    if (v61)
    {
      uint64_t v63 = v61;
      uint64_t v64 = (uint64_t)v125;
      sub_56AA0((uint64_t)v61);

      uint64_t v65 = 0LL;
    }

    else
    {
      uint64_t v65 = 1LL;
      uint64_t v64 = (uint64_t)v125;
    }

    sub_A628(v64, v65);
    uint64_t v71 = (uint64_t)v126;
    sub_568E0(v64, v72, &qword_189CE8);
    uint64_t v73 = sub_566D8(v71);
    if ((_DWORD)v73)
    {
      sub_56628(v73, &qword_189CE8);
      uint64_t v70 = _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV6dosageSdSgvpfi_0();
    }

    else
    {
      uint64_t v74 = sub_566C0(v56, v71, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 16));
      sub_56628(v74, &qword_189CE8);
      sub_56874();
      sub_5673C(*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8));
      uint64_t v70 = sub_5695C();
    }
  }

  else
  {
    uint64_t v66 = sub_566C0(v56, (uint64_t)v34, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 16));
    sub_56628(v66, &qword_189CE8);
    sub_56874();
    uint64_t v68 = v67;
    sub_5673C(*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8));
    uint64_t v69 = 0LL;
    uint64_t v70 = v68;
    uint64_t v62 = (uint64_t)v134;
  }

  dispatch thunk of DialogCalendarRange.Builder.withStartSecs(_:)(v70, v69);
  uint64_t v75 = swift_release();
  id v76 = sub_56988(v75, "end");
  if (v76)
  {
    id v77 = v76;
    uint64_t v78 = (uint64_t)v129;
    sub_56968((uint64_t)v76);

    uint64_t v79 = 0LL;
  }

  else
  {
    uint64_t v79 = 1LL;
    uint64_t v78 = (uint64_t)v129;
  }

  sub_A628(v78, v79);
  uint64_t v80 = v130;
  sub_56748(v78, v81, &qword_189CE8);
  uint64_t v82 = sub_566D8(v80);
  if (!(_DWORD)v82) {
    goto LABEL_23;
  }
  uint64_t v83 = sub_566F4(v82, &qword_189CE8);
  id v84 = sub_36F04(v83, "sampleEndDate");
  if (v84)
  {
    uint64_t v85 = v84;
    uint64_t v78 = v127;
    sub_56968((uint64_t)v84);

    uint64_t v86 = 0LL;
  }

  else
  {
    uint64_t v86 = 1LL;
    uint64_t v78 = v127;
  }

  sub_A628(v78, v86);
  uint64_t v80 = (uint64_t)v128;
  sub_56748(v78, v87, &qword_189CE8);
  uint64_t v88 = sub_566D8(v80);
  if ((_DWORD)v88)
  {
    sub_566F4(v88, &qword_189CE8);
    uint64_t v89 = _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV6dosageSdSgvpfi_0();
  }

  else
  {
LABEL_23:
    uint64_t v91 = sub_566C0(v56, v80, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 16));
    sub_566F4(v91, &qword_189CE8);
    sub_56874();
    sub_5673C(*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8));
    uint64_t v89 = sub_5695C();
  }

  dispatch thunk of DialogCalendarRange.Builder.withEndSecs(_:)(v89, v90);
  uint64_t v92 = sub_37034();
  uint64_t v93 = dispatch thunk of DialogCalendarRange.Builder.build()(v92);
  sub_3652C();
  uint64_t v94 = v137[7];
  swift_release();
  *(void *)(v42 + v94) = v93;
  uint64_t v95 = v135;
  sub_35468(v133, v135);
  uint64_t v96 = sub_3C798();
  uint64_t v97 = sub_A614(v95, 1LL, v96);
  if (v98)
  {
    sub_56A68(v97, &qword_189CF8);
    uint64_t v99 = sub_ABF4();
    sub_A66C(v62, 1LL, v100, v99);
  }

  else
  {
    uint64_t v101 = v42;
    id v102 = [objc_allocWithZone(SAUIAppPunchOut) init];
    URL._bridgeToObjectiveC()(v103);
    double v105 = v104;
    sub_36F44(v102, "setPunchOutUri:");

    id v106 = v102;
    uint64_t v107 = sub_56A30();
    UUID.uuidString.getter(v107);
    sub_56898();
    sub_125B84(v78, (uint64_t)v102, v106);

    id v108 = [v106 dictionary];
    if (v108)
    {
      uint64_t v109 = v108;
      uint64_t v110 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      uint64_t v138 = 0LL;
      id v111 = sub_5678C(v110, "dataWithPropertyList:format:options:error:");
      id v112 = sub_56950();
      if (v102)
      {
        sub_56B5C();
        sub_56A1C();
        uint64_t v113 = sub_56A00();
        sub_56A24(v113, v114);

        sub_56B38();
        sub_6D64();
        uint64_t v116 = sub_ABF4();
        uint64_t v117 = v62;
        uint64_t v118 = 0LL;
      }

      else
      {
        uint64_t v121 = v112;
        uint64_t v122 = _convertNSErrorToError(_:)();

        swift_willThrow(v123);
        swift_errorRelease(v122);
        uint64_t v116 = sub_ABF4();
        uint64_t v117 = v62;
        uint64_t v118 = 1LL;
      }

      sub_A66C(v117, v118, v115, v116);
    }

    else
    {
      uint64_t v119 = type metadata accessor for SpeakableString(0LL);
      sub_A66C(v62, 1LL, v120, v119);
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v96 - 8) + 8LL))(v95, v96);
    uint64_t v42 = v101;
  }

  sub_A384(v62, v42);
  sub_A744();
}

id sub_50DA4(void *a1)
{
  return sub_5693C((uint64_t)[a1 average], "mostRecent");
}

BOOL sub_50DF0()
{
  uint64_t v36 = v1;
  uint64_t v37 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  double v8 = v7;
  double v10 = v9;
  uint64_t v11 = sub_494C(&qword_18B418);
  uint64_t v35 = *(void *)(v11 - 8);
  sub_D978();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v32 - v17;
  __chkstk_darwin(v16);
  sub_1C6B8();
  uint64_t v34 = v19;
  sub_A794();
  __chkstk_darwin(v20);
  sub_56B00();
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v32 - v22;
  uint64_t v24 = sub_55CC4(0LL, &qword_18B420, &OBJC_CLASS___NSUnitLength_ptr);
  swift_bridgeObjectRetain(v4);
  id v25 = sub_55BB0(v6, v4);
  Measurement.init(value:unit:)(v25, v24, v10);
  id v33 = v25;
  Measurement.init(value:unit:)(v33, v24, v8);
  uint64_t v26 = (void *)objc_opt_self(&OBJC_CLASS___NSUnitLength);
  id v27 = [v26 inches];
  Measurement<>.converted(to:)();

  id v28 = [v26 inches];
  Measurement<>.converted(to:)();

  uint64_t v29 = v34;
  static Measurement<>.- infix(_:_:)(v18, v15, v24);
  sub_568E8((uint64_t)v15);
  sub_568E8((uint64_t)v18);
  double v30 = Measurement.value.getter(v11);

  sub_568E8(v29);
  sub_568E8(v0);
  sub_568E8((uint64_t)v23);
  return v30 < 1.0;
}

uint64_t sub_5100C( uint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5, uint64_t a6, int *a7, void *a8, double a9, void *a10, uint64_t a11)
{
  id v141 = a5;
  id v142 = a8;
  uint64_t v136 = a7;
  uint64_t v133 = a6;
  uint64_t v125 = a4;
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v127 = *(void *)(v15 - 8);
  uint64_t v128 = v15;
  __chkstk_darwin(v15);
  id v126 = (char *)&v125 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_494C(&qword_189CF8);
  __chkstk_darwin(v17);
  uint64_t v139 = (uint64_t)&v125 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Date(0LL);
  uint64_t v137 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v140 = (char *)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_494C(&qword_189CE8);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v131 = (char *)&v125 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v132 = (uint64_t)&v125 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  Swift::String v134 = (char *)&v125 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v135 = (uint64_t)&v125 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  id v129 = (char *)&v125 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v130 = (uint64_t)&v125 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v125 - v35;
  __chkstk_darwin(v34);
  uint64_t v38 = (char *)&v125 - v37;
  uint64_t v39 = sub_494C(&qword_189D00);
  uint64_t v40 = __chkstk_darwin(v39);
  uint64_t v138 = (char *)&v125 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v40);
  uint64_t v43 = (char *)&v125 - v42;
  uint64_t v44 = (int *)type metadata accessor for WellnessQueryingHeightParameters(0LL);
  uint64_t v45 = v44[12];
  swift_retain();
  swift_release();
  *(void *)(a1 + v45) = a2;
  uint64_t v46 = a1;
  if ((a3 & 1) == 0)
  {
    uint64_t v47 = v44[10];
    uint64_t v48 = v125;
    swift_retain();
    swift_release();
    *(void *)(a1 + v4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = v48;
    uint64_t v49 = v44[9];
    id v50 = v141;
    swift_retain();
    swift_release();
    *(void *)(a1 + v49) = v50;
    uint64_t v46 = a1;
  }

  id v141 = a10;
  uint64_t v51 = type metadata accessor for DialogPersonHeight.Builder(0LL);
  swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
  DialogPersonHeight.Builder.init()();
  dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)(*(void *)&a9, 0LL);
  swift_release();
  String.toSpeakableString.getter(v133, v136);
  uint64_t v52 = type metadata accessor for SpeakableString(0LL);
  uint64_t v53 = 1LL;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v43, 0LL, 1LL, v52);
  dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)(v43);
  swift_release();
  uint64_t v54 = sub_2012C((uint64_t)v43, &qword_189D00);
  uint64_t v55 = dispatch thunk of DialogAbstractMeasurement.Builder.build()(v54);
  swift_release();
  uint64_t v136 = v44;
  uint64_t v56 = v44[8];
  swift_release();
  *(void *)(v46 + v56) = v55;
  uint64_t v57 = type metadata accessor for DialogCalendarRange.Builder(0LL);
  swift_allocObject(v57, *(unsigned int *)(v57 + 48), *(unsigned __int16 *)(v57 + 52));
  DialogCalendarRange.Builder.init()();
  id v58 = [v142 start];
  if (v58)
  {
    uint64_t v59 = v58;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v58);

    uint64_t v53 = 0LL;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v36, v53, 1LL, v19);
  sub_55C74((uint64_t)v36, (uint64_t)v38, &qword_189CE8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v38, 1LL, v19))
  {
    sub_2012C((uint64_t)v38, &qword_189CE8);
    id v60 = [v141 sampleEndDate];
    uint64_t v61 = v137;
    if (v60)
    {
      uint64_t v62 = v60;
      uint64_t v63 = (uint64_t)v129;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v60);

      uint64_t v64 = 0LL;
    }

    else
    {
      uint64_t v64 = 1LL;
      uint64_t v63 = (uint64_t)v129;
    }

    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v63, v64, 1LL, v19);
    uint64_t v67 = v130;
    sub_55C74(v63, v130, &qword_189CE8);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v67, 1LL, v19))
    {
      sub_2012C(v67, &qword_189CE8);
      double v68 = 0.0;
      uint64_t v69 = 1LL;
      goto LABEL_14;
    }

    uint64_t v65 = v140;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v140, v67, v19);
    uint64_t v66 = v67;
  }

  else
  {
    uint64_t v61 = v137;
    uint64_t v65 = v140;
    (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v140, v38, v19);
    uint64_t v66 = (uint64_t)v38;
  }

  uint64_t v70 = sub_2012C(v66, &qword_189CE8);
  double v71 = Date.timeIntervalSince1970.getter(v70);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v65, v19);
  uint64_t v69 = 0LL;
  double v68 = v71;
LABEL_14:
  dispatch thunk of DialogCalendarRange.Builder.withStartSecs(_:)(*(void *)&v68, v69);
  swift_release();
  id v72 = [v142 end];
  if (v72)
  {
    uint64_t v73 = v72;
    uint64_t v74 = (uint64_t)v134;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v72);

    uint64_t v75 = 0LL;
    uint64_t v76 = (uint64_t)v138;
  }

  else
  {
    uint64_t v75 = 1LL;
    uint64_t v76 = (uint64_t)v138;
    uint64_t v74 = (uint64_t)v134;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v74, v75, 1LL, v19);
  uint64_t v77 = v135;
  sub_55C74(v74, v135, &qword_189CE8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v77, 1LL, v19))
  {
    sub_2012C(v77, &qword_189CE8);
    id v78 = [v141 sampleEndDate];
    if (v78)
    {
      uint64_t v79 = v78;
      uint64_t v80 = (uint64_t)v131;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v78);

      uint64_t v81 = 0LL;
    }

    else
    {
      uint64_t v81 = 1LL;
      uint64_t v80 = (uint64_t)v131;
    }

    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v80, v81, 1LL, v19);
    uint64_t v88 = v132;
    sub_55C74(v80, v132, &qword_189CE8);
    int v89 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v88, 1LL, v19);
    uint64_t v87 = v136;
    if (v89)
    {
      sub_2012C(v88, &qword_189CE8);
      double v86 = 0.0;
      uint64_t v85 = 1LL;
    }

    else
    {
      uint64_t v90 = v140;
      (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v140, v88, v19);
      uint64_t v91 = sub_2012C(v88, &qword_189CE8);
      double v92 = Date.timeIntervalSince1970.getter(v91);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v90, v19);
      uint64_t v85 = 0LL;
      double v86 = v92;
    }
  }

  else
  {
    uint64_t v82 = v140;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v140, v77, v19);
    uint64_t v83 = sub_2012C(v77, &qword_189CE8);
    double v84 = Date.timeIntervalSince1970.getter(v83);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v82, v19);
    uint64_t v85 = 0LL;
    double v86 = v84;
    uint64_t v87 = v136;
  }

  dispatch thunk of DialogCalendarRange.Builder.withEndSecs(_:)(*(void *)&v86, v85);
  uint64_t v93 = swift_release();
  uint64_t v94 = dispatch thunk of DialogCalendarRange.Builder.build()(v93);
  swift_release();
  uint64_t v95 = v87[11];
  swift_release();
  *(void *)(v46 + v95) = v94;
  uint64_t v96 = v139;
  sub_35468(a11, v139);
  uint64_t v97 = type metadata accessor for URL(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v96, 1LL, v97) == 1)
  {
    sub_2012C(v96, &qword_189CF8);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v76, 1LL, 1LL, v52);
  }

  else
  {
    uint64_t v98 = v52;
    uint64_t v99 = v46;
    id v100 = [objc_allocWithZone(SAUIAppPunchOut) init];
    URL._bridgeToObjectiveC()(v101);
    uint64_t v103 = v102;
    [v100 setPunchOutUri:v102];

    id v104 = v100;
    double v105 = v126;
    uint64_t v106 = UUID.init()();
    uint64_t v107 = UUID.uuidString.getter(v106);
    uint64_t v109 = v108;
    (*(void (**)(char *, uint64_t))(v127 + 8))(v105, v128);
    sub_125B84(v107, v109, v104);

    id v110 = [v104 dictionary];
    if (v110)
    {
      id v111 = v110;
      id v112 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      id v143 = 0LL;
      id v113 = [v112 dataWithPropertyList:v111 format:200 options:0 error:&v143];
      id v114 = v143;
      if (v113)
      {
        uint64_t v115 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v113);
        unint64_t v117 = v116;

        Swift::String v118 = Data.base64EncodedString(options:)(0LL);
        String.toSpeakableString.getter(v118._countAndFlagsBits, v118._object);

        sub_A3CC(v115, v117);
        swift_bridgeObjectRelease();
        uint64_t v119 = v76;
        uint64_t v120 = 0LL;
      }

      else
      {
        uint64_t v121 = v114;
        uint64_t v122 = _convertNSErrorToError(_:)();

        swift_willThrow(v123);
        swift_errorRelease(v122);
        uint64_t v119 = v76;
        uint64_t v120 = 1LL;
      }

      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v119, v120, 1LL, v98);
    }

    else
    {
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v76, 1LL, 1LL, v98);
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v97 - 8) + 8LL))(v96, v97);
    uint64_t v46 = v99;
  }

  return sub_A384(v76, v46);
}

uint64_t sub_519EC(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 a4, int a5, void *a6, uint64_t a7)
{
  uint64_t v147 = a7;
  id v151 = a6;
  int v142 = a5;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v137 = *(void *)(v11 - 8);
  uint64_t v138 = v11;
  __chkstk_darwin(v11);
  uint64_t v136 = (char *)&v136 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_494C(&qword_189CF8);
  __chkstk_darwin(v13);
  uint64_t v148 = (char *)&v136 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_494C(&qword_189D00);
  __chkstk_darwin(v15);
  uint64_t v149 = (char *)&v136 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v146 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  int v150 = (char *)&v136 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_494C(&qword_189CE8);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v140 = (char *)&v136 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v20);
  id v141 = (char *)&v136 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v144 = (char *)&v136 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v145 = (char *)&v136 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  id v143 = (char *)&v136 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v139 = (uint64_t)&v136 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v34 = (char *)&v136 - v33;
  __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v136 - v35;
  uint64_t v37 = (int *)type metadata accessor for WellnessQueryingBloodOxygenParameters(0LL);
  uint64_t v38 = v37[10];
  swift_retain();
  swift_release();
  *(void *)(a1 + v38) = a2;
  uint64_t v39 = a1;
  [a3 mostRecent];
  double v41 = v40 * 100.0;
  uint64_t v42 = sub_7D950(a3);
  double v44 = sub_90668(v42, v43, a4, v41);
  swift_bridgeObjectRelease();
  uint64_t v45 = a1 + v37[12];
  *(double *)uint64_t v45 = v44;
  *(_BYTE *)(v45 + 8) = 0;
  [a3 maximum];
  double v47 = v46 * 100.0;
  uint64_t v48 = sub_7D950(a3);
  double v50 = sub_90668(v48, v49, a4, v47);
  swift_bridgeObjectRelease();
  uint64_t v51 = a1 + v37[8];
  *(double *)uint64_t v51 = v50;
  *(_BYTE *)(v51 + 8) = 0;
  [a3 minimum];
  double v53 = v52 * 100.0;
  uint64_t v54 = sub_7D950(a3);
  double v56 = sub_90668(v54, v55, a4, v53);
  swift_bridgeObjectRelease();
  uint64_t v57 = v37;
  uint64_t v58 = a1 + v37[9];
  *(double *)uint64_t v58 = v56;
  *(_BYTE *)(v58 + 8) = 0;
  if ((v142 & 1) == 0)
  {
    [a3 average];
    double v60 = v59 * 100.0;
    uint64_t v61 = sub_7D950(a3);
    double v63 = sub_90668(v61, v62, a4, v60);
    swift_bridgeObjectRelease();
    uint64_t v64 = a1 + v37[5];
    *(double *)uint64_t v64 = v63;
    *(_BYTE *)(v64 + 8) = 0;
  }

  uint64_t v65 = type metadata accessor for DialogCalendarRange.Builder(0LL);
  swift_allocObject(v65, *(unsigned int *)(v65 + 48), *(unsigned __int16 *)(v65 + 52));
  DialogCalendarRange.Builder.init()();
  id v66 = [v151 start];
  if (v66)
  {
    uint64_t v67 = v66;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v66);

    uint64_t v68 = 0LL;
  }

  else
  {
    uint64_t v68 = 1LL;
  }

  uint64_t v69 = v146;
  uint64_t v70 = (uint64_t)v143;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v34, v68, 1LL, v17);
  sub_55C74((uint64_t)v34, (uint64_t)v36, &qword_189CE8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v36, 1LL, v17))
  {
    sub_2012C((uint64_t)v36, &qword_189CE8);
    id v71 = [a3 sampleEndDate];
    if (v71)
    {
      id v72 = v71;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v71);

      uint64_t v73 = 0LL;
    }

    else
    {
      uint64_t v73 = 1LL;
    }

    uint64_t v79 = (uint64_t)v148;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v70, v73, 1LL, v17);
    uint64_t v80 = v139;
    sub_55C74(v70, v139, &qword_189CE8);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v80, 1LL, v17))
    {
      sub_2012C(v80, &qword_189CE8);
      double v78 = 0.0;
      uint64_t v77 = 1LL;
    }

    else
    {
      uint64_t v81 = v150;
      (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v150, v80, v17);
      uint64_t v82 = sub_2012C(v80, &qword_189CE8);
      double v83 = Date.timeIntervalSince1970.getter(v82);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v81, v17);
      uint64_t v77 = 0LL;
      double v78 = v83;
    }
  }

  else
  {
    uint64_t v74 = v150;
    (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v150, v36, v17);
    uint64_t v75 = sub_2012C((uint64_t)v36, &qword_189CE8);
    double v76 = Date.timeIntervalSince1970.getter(v75);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v74, v17);
    uint64_t v77 = 0LL;
    double v78 = v76;
    uint64_t v79 = (uint64_t)v148;
  }

  dispatch thunk of DialogCalendarRange.Builder.withStartSecs(_:)(*(void *)&v78, v77);
  swift_release();
  id v84 = [v151 end];
  if (v84)
  {
    uint64_t v85 = v84;
    double v86 = v144;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v84);

    uint64_t v87 = (uint64_t)v86;
    uint64_t v88 = 0LL;
  }

  else
  {
    uint64_t v88 = 1LL;
    uint64_t v87 = (uint64_t)v144;
  }

  uint64_t v89 = (uint64_t)v145;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v87, v88, 1LL, v17);
  sub_55C74(v87, v89, &qword_189CE8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v89, 1LL, v17))
  {
    sub_2012C(v89, &qword_189CE8);
    id v90 = [a3 sampleEndDate];
    if (v90)
    {
      uint64_t v91 = v90;
      uint64_t v92 = (uint64_t)v140;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v90);

      uint64_t v93 = 0LL;
    }

    else
    {
      uint64_t v93 = 1LL;
      uint64_t v92 = (uint64_t)v140;
    }

    uint64_t v94 = (uint64_t)v141;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v92, v93, 1LL, v17);
    sub_55C74(v92, v94, &qword_189CE8);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v94, 1LL, v17))
    {
      sub_2012C(v94, &qword_189CE8);
      double v97 = 0.0;
      uint64_t v98 = 1LL;
      goto LABEL_26;
    }

    uint64_t v95 = v150;
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v150, v94, v17);
    uint64_t v96 = v94;
  }

  else
  {
    uint64_t v95 = v150;
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v150, v89, v17);
    uint64_t v96 = v89;
  }

  uint64_t v99 = sub_2012C(v96, &qword_189CE8);
  double v100 = Date.timeIntervalSince1970.getter(v99);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v95, v17);
  uint64_t v98 = 0LL;
  double v97 = v100;
LABEL_26:
  dispatch thunk of DialogCalendarRange.Builder.withEndSecs(_:)(*(void *)&v97, v98);
  uint64_t v101 = swift_release();
  uint64_t v102 = dispatch thunk of DialogCalendarRange.Builder.build()(v101);
  swift_release();
  uint64_t v103 = v57[7];
  swift_release();
  *(void *)(v39 + v103) = v102;
  sub_35468(v147, v79);
  uint64_t v104 = type metadata accessor for URL(0LL);
  int v105 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v79, 1LL, v104);
  uint64_t v106 = (uint64_t)v149;
  if (v105 == 1)
  {
    sub_2012C(v79, &qword_189CF8);
    uint64_t v107 = type metadata accessor for SpeakableString(0LL);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v106, 1LL, 1LL, v107);
  }

  else
  {
    id v108 = [objc_allocWithZone(SAUIAppPunchOut) init];
    URL._bridgeToObjectiveC()(v109);
    id v111 = v110;
    [v108 setPunchOutUri:v110];

    id v112 = v108;
    id v113 = v136;
    uint64_t v114 = UUID.init()();
    uint64_t v115 = UUID.uuidString.getter(v114);
    uint64_t v117 = v116;
    (*(void (**)(char *, uint64_t))(v137 + 8))(v113, v138);
    sub_125B84(v115, v117, v112);

    id v118 = [v112 dictionary];
    if (v118)
    {
      uint64_t v119 = v118;
      uint64_t v120 = v39;
      uint64_t v121 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      id v152 = 0LL;
      id v122 = [v121 dataWithPropertyList:v119 format:200 options:0 error:&v152];
      id v123 = v152;
      if (v122)
      {
        uint64_t v124 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v122);
        unint64_t v126 = v125;

        Swift::String v127 = Data.base64EncodedString(options:)(0LL);
        String.toSpeakableString.getter(v127._countAndFlagsBits, v127._object);

        sub_A3CC(v124, v126);
        swift_bridgeObjectRelease();
        uint64_t v128 = type metadata accessor for SpeakableString(0LL);
        uint64_t v129 = v106;
        uint64_t v130 = 0LL;
      }

      else
      {
        uint64_t v132 = v123;
        uint64_t v133 = _convertNSErrorToError(_:)();

        swift_willThrow(v134);
        swift_errorRelease(v133);
        uint64_t v128 = type metadata accessor for SpeakableString(0LL);
        uint64_t v129 = v106;
        uint64_t v130 = 1LL;
      }

      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v129, v130, 1LL, v128);
      uint64_t v39 = v120;
    }

    else
    {
      uint64_t v131 = type metadata accessor for SpeakableString(0LL);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v106, 1LL, 1LL, v131);
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v104 - 8) + 8LL))(v79, v104);
  }

  return sub_A384(v106, v39);
}

void sub_523DC()
{
  uint64_t v3 = v2;
  uint64_t v125 = v4;
  uint64_t v128 = v5;
  LODWORD(v129) = v6;
  double v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v13 = sub_56944(__stack_chk_guard);
  v116[1] = *(void *)(v13 - 8);
  v116[2] = v13;
  sub_D978();
  __chkstk_darwin(v14);
  sub_56904(v15, v116[0]);
  sub_494C(&qword_189CF8);
  sub_D978();
  __chkstk_darwin(v16);
  sub_6D30();
  uint64_t v126 = v17;
  sub_494C(&qword_189D00);
  sub_D978();
  __chkstk_darwin(v18);
  Swift::String v127 = (char *)v116 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = *(void *)(sub_A8E4() - 8);
  sub_D978();
  __chkstk_darwin(v20);
  sub_56920(v21, v116[0]);
  sub_494C(&qword_189CE8);
  sub_D978();
  __chkstk_darwin(v22);
  sub_3751C();
  uint64_t v118 = v23;
  sub_A794();
  __chkstk_darwin(v24);
  uint64_t v119 = (char *)v116 - v25;
  sub_A794();
  __chkstk_darwin(v26);
  uint64_t v120 = (char *)v116 - v27;
  sub_A794();
  __chkstk_darwin(v28);
  uint64_t v121 = (char *)v116 - v29;
  sub_A794();
  __chkstk_darwin(v30);
  uint64_t v117 = (char *)v116 - v31;
  sub_A794();
  __chkstk_darwin(v32);
  sub_56B00();
  __chkstk_darwin(v33);
  sub_56AEC();
  __chkstk_darwin(v34);
  uint64_t v36 = (char *)v116 - v35;
  uint64_t v37 = (int *)v3(0LL);
  uint64_t v38 = v37[8];
  swift_retain();
  uint64_t v39 = swift_release();
  *(void *)(v12 + v38) = v10;
  sub_565D4(v39, "total");
  uint64_t v40 = sub_56810();
  LOBYTE(sub_56254(*(void *)(v2 + 424), v3) = v129;
  sub_56734(v40, v41, v129);
  sub_249D4();
  sub_56804(v12 + v37[9]);
  sub_565D4(v42, "average");
  uint64_t v43 = sub_7D950(v8);
  uint64_t v45 = (void *)v44;
  sub_56734(v43, v44, v3);
  sub_249D4();
  id v122 = v37;
  uint64_t v46 = v37[5];
  uint64_t v129 = v12;
  sub_56804(v12 + v46);
  uint64_t v47 = sub_56B64();
  sub_A72C(v47);
  uint64_t v48 = sub_56AD8();
  id v49 = sub_56988(v48, "start");
  if (v49)
  {
    sub_56AE0((uint64_t)v49);

    uint64_t v50 = 0LL;
  }

  else
  {
    uint64_t v50 = 1LL;
  }

  sub_A628(v1, v50);
  sub_55C74(v1, (uint64_t)v36, &qword_189CE8);
  uint64_t v51 = sub_566D8((uint64_t)v36);
  uint64_t v53 = v123;
  uint64_t v52 = v124;
  if ((_DWORD)v51)
  {
    uint64_t v54 = sub_56750(v51, &qword_189CE8);
    id v55 = sub_36F04(v54, "sampleStartDate");
    uint64_t v56 = v126;
    if (v55)
    {
      uint64_t v57 = v55;
      uint64_t v58 = (uint64_t)v117;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v55);

      uint64_t v59 = 0LL;
    }

    else
    {
      uint64_t v59 = 1LL;
      uint64_t v58 = (uint64_t)v117;
    }

    sub_A628(v58, v59);
    sub_55C74(v58, v0, &qword_189CE8);
    if (sub_566D8(v0))
    {
      sub_2012C(v0, &qword_189CE8);
      uint64_t v64 = _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV6dosageSdSgvpfi_0();
    }

    else
    {
      sub_566C0(v53, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 16));
      sub_2012C(v0, &qword_189CE8);
      sub_56874();
      sub_5673C(*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8));
      uint64_t v64 = sub_5695C();
    }
  }

  else
  {
    uint64_t v60 = sub_566C0(v123, (uint64_t)v36, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v124 + 16));
    sub_56750(v60, &qword_189CE8);
    sub_56874();
    uint64_t v62 = v61;
    sub_5673C(*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8));
    uint64_t v63 = 0LL;
    uint64_t v64 = v62;
    uint64_t v56 = v126;
  }

  dispatch thunk of DialogCalendarRange.Builder.withStartSecs(_:)(v64, v63);
  uint64_t v65 = sub_37034();
  id v66 = sub_56988(v65, "end");
  if (v66)
  {
    uint64_t v67 = v66;
    uint64_t v68 = (uint64_t)v120;
    sub_56AA0((uint64_t)v66);

    uint64_t v69 = 0LL;
  }

  else
  {
    uint64_t v69 = 1LL;
    uint64_t v68 = (uint64_t)v120;
  }

  sub_A628(v68, v69);
  uint64_t v70 = (uint64_t)v121;
  sub_568E0(v68, v71, &qword_189CE8);
  uint64_t v72 = sub_566D8(v70);
  if (!(_DWORD)v72) {
    goto LABEL_21;
  }
  uint64_t v73 = sub_56628(v72, &qword_189CE8);
  id v74 = sub_36F04(v73, "sampleEndDate");
  if (v74)
  {
    uint64_t v75 = v74;
    uint64_t v76 = v118;
    sub_56AA0((uint64_t)v74);

    uint64_t v77 = 0LL;
  }

  else
  {
    uint64_t v77 = 1LL;
    uint64_t v76 = v118;
  }

  sub_A628(v76, v77);
  uint64_t v70 = (uint64_t)v119;
  sub_568E0(v76, v78, &qword_189CE8);
  uint64_t v79 = sub_566D8(v70);
  if ((_DWORD)v79)
  {
    sub_56628(v79, &qword_189CE8);
    uint64_t v80 = _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV6dosageSdSgvpfi_0();
  }

  else
  {
LABEL_21:
    uint64_t v82 = sub_566C0(v53, v70, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 16));
    sub_56628(v82, &qword_189CE8);
    sub_56874();
    sub_5673C(*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8));
    uint64_t v80 = sub_5695C();
  }

  dispatch thunk of DialogCalendarRange.Builder.withEndSecs(_:)(v80, v81);
  uint64_t v83 = sub_56ACC();
  uint64_t v84 = dispatch thunk of DialogCalendarRange.Builder.build()(v83);
  sub_3652C();
  uint64_t v85 = v122[7];
  uint64_t v86 = v129;
  swift_release();
  *(void *)(v86 + v85) = v84;
  sub_35468(v125, v56);
  uint64_t v87 = sub_3C798();
  uint64_t v88 = sub_A614(v56, 1LL, v87);
  uint64_t v89 = (uint64_t)v127;
  if (v90)
  {
    sub_56480(v88, &qword_189CF8);
    uint64_t v91 = sub_ABF4();
    sub_A66C(v89, 1LL, v92, v91);
  }

  else
  {
    id v93 = [objc_allocWithZone(SAUIAppPunchOut) init];
    URL._bridgeToObjectiveC()(v94);
    uint64_t v96 = v95;
    sub_36F44(v93, "setPunchOutUri:");

    id v97 = v93;
    uint64_t v98 = sub_56A30();
    UUID.uuidString.getter(v98);
    sub_56898();
    sub_125B84(v52, v86, v97);

    id v100 = sub_5693C(v99, "dictionary");
    if (v100)
    {
      uint64_t v101 = v100;
      uint64_t v102 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      uint64_t v130 = 0LL;
      id v103 = sub_5678C(v102, "dataWithPropertyList:format:options:error:");
      id v104 = sub_56950();
      if (v86)
      {
        sub_56B5C();
        sub_56A1C();
        uint64_t v105 = sub_56A00();
        String.toSpeakableString.getter(v105, v106);

        sub_56B38();
        sub_6D64();
        uint64_t v108 = sub_ABF4();
        uint64_t v109 = v89;
        uint64_t v110 = 0LL;
      }

      else
      {
        id v113 = v104;
        uint64_t v114 = _convertNSErrorToError(_:)();

        swift_willThrow(v115);
        swift_errorRelease(v114);
        uint64_t v108 = sub_ABF4();
        uint64_t v109 = v89;
        uint64_t v110 = 1LL;
      }

      sub_A66C(v109, v110, v107, v108);
    }

    else
    {
      uint64_t v111 = type metadata accessor for SpeakableString(0LL);
      sub_A66C(v89, 1LL, v112, v111);
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v87 - 8) + 8LL))(v56, v87);
  }

  sub_A384(v89, v129);
  sub_A744();
}

uint64_t sub_52ACC(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 a4, int a5, void *a6, uint64_t a7)
{
  id v160 = a6;
  uint64_t v161 = a7;
  int v153 = a5;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v149 = *(void *)(v11 - 8);
  uint64_t v150 = v11;
  __chkstk_darwin(v11);
  uint64_t v148 = (char *)&v147 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_494C(&qword_189CF8);
  __chkstk_darwin(v13);
  uint64_t v162 = (uint64_t)&v147 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_494C(&qword_189D00);
  __chkstk_darwin(v15);
  id v163 = (char *)&v147 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v158 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v164 = (char *)&v147 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_494C(&qword_189CE8);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v159 = (uint64_t)&v147 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v20);
  id v151 = (char *)&v147 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  id v152 = (char *)&v147 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v156 = (char *)&v147 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v157 = (char *)&v147 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v154 = (char *)&v147 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v155 = (char *)&v147 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v147 - v35;
  __chkstk_darwin(v34);
  uint64_t v38 = (char *)&v147 - v37;
  uint64_t v39 = (int *)type metadata accessor for WellnessQueryingRespiratoryRateParameters(0LL);
  uint64_t v40 = v39[10];
  swift_retain();
  swift_release();
  *(void *)(a1 + v40) = a2;
  uint64_t v41 = a1;
  [a3 mostRecent];
  double v43 = v42;
  uint64_t v44 = sub_7D950(a3);
  double v46 = sub_90668(v44, v45, a4, v43);
  swift_bridgeObjectRelease();
  uint64_t v47 = a1 + v39[12];
  *(double *)uint64_t v47 = v46;
  *(_BYTE *)(v47 + 8) = 0;
  [a3 maximum];
  double v49 = v48;
  uint64_t v50 = sub_7D950(a3);
  double v52 = sub_90668(v50, v51, a4, v49);
  swift_bridgeObjectRelease();
  uint64_t v53 = a1 + v39[8];
  *(double *)uint64_t v53 = v52;
  *(_BYTE *)(v53 + 8) = 0;
  [a3 minimum];
  double v55 = v54;
  uint64_t v56 = sub_7D950(a3);
  double v58 = sub_90668(v56, v57, a4, v55);
  swift_bridgeObjectRelease();
  uint64_t v59 = v39;
  uint64_t v60 = a1 + v39[9];
  *(double *)uint64_t v60 = v58;
  *(_BYTE *)(v60 + 8) = 0;
  if ((v153 & 1) == 0)
  {
    [a3 average];
    double v62 = v61;
    uint64_t v63 = sub_7D950(a3);
    double v65 = sub_90668(v63, v64, a4, v62);
    swift_bridgeObjectRelease();
    uint64_t v66 = a1 + v39[5];
    *(double *)uint64_t v66 = v65;
    *(_BYTE *)(v66 + 8) = 0;
  }

  uint64_t v67 = type metadata accessor for DialogCalendarRange.Builder(0LL);
  swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
  DialogCalendarRange.Builder.init()();
  id v68 = v160;
  id v69 = [v160 start];
  if (v69)
  {
    uint64_t v70 = v69;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v69);

    uint64_t v71 = 0LL;
  }

  else
  {
    uint64_t v71 = 1LL;
  }

  uint64_t v72 = (uint64_t)v154;
  uint64_t v73 = (uint64_t)v155;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v36, v71, 1LL, v17);
  sub_55C74((uint64_t)v36, (uint64_t)v38, &qword_189CE8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v38, 1LL, v17))
  {
    sub_2012C((uint64_t)v38, &qword_189CE8);
    id v74 = [a3 sampleEndDate];
    if (v74)
    {
      uint64_t v75 = v74;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v74);

      uint64_t v76 = 0LL;
    }

    else
    {
      uint64_t v76 = 1LL;
    }

    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v72, v76, 1LL, v17);
    sub_55C74(v72, v73, &qword_189CE8);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v73, 1LL, v17))
    {
      sub_2012C(v73, &qword_189CE8);
      double v81 = 0.0;
      uint64_t v82 = 1LL;
      uint64_t v77 = v158;
      goto LABEL_15;
    }

    uint64_t v83 = v158;
    uint64_t v84 = v164;
    (*(void (**)(char *, uint64_t, uint64_t))(v158 + 16))(v164, v73, v17);
    uint64_t v85 = v73;
    uint64_t v77 = v83;
    uint64_t v86 = sub_2012C(v85, &qword_189CE8);
    double v80 = Date.timeIntervalSince1970.getter(v86);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v17);
  }

  else
  {
    uint64_t v77 = v158;
    uint64_t v78 = v164;
    (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v164, v38, v17);
    uint64_t v79 = sub_2012C((uint64_t)v38, &qword_189CE8);
    double v80 = Date.timeIntervalSince1970.getter(v79);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v17);
  }

  uint64_t v82 = 0LL;
  double v81 = v80;
LABEL_15:
  dispatch thunk of DialogCalendarRange.Builder.withStartSecs(_:)(*(void *)&v81, v82);
  swift_release();
  id v87 = [v68 end];
  if (v87)
  {
    uint64_t v88 = v87;
    uint64_t v89 = v156;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v87);

    uint64_t v90 = (uint64_t)v89;
    uint64_t v91 = 0LL;
  }

  else
  {
    uint64_t v91 = 1LL;
    uint64_t v90 = (uint64_t)v156;
  }

  uint64_t v92 = (uint64_t)v157;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v90, v91, 1LL, v17);
  sub_55C74(v90, v92, &qword_189CE8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v92, 1LL, v17))
  {
    sub_2012C(v92, &qword_189CE8);
    id v93 = [a3 sampleEndDate];
    if (v93)
    {
      uint64_t v94 = v93;
      uint64_t v95 = (uint64_t)v151;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v93);

      uint64_t v96 = 0LL;
    }

    else
    {
      uint64_t v96 = 1LL;
      uint64_t v95 = (uint64_t)v151;
    }

    uint64_t v97 = (uint64_t)v152;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v95, v96, 1LL, v17);
    sub_55C74(v95, v97, &qword_189CE8);
    id v103 = v59;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v97, 1LL, v17))
    {
      sub_2012C(v97, &qword_189CE8);
      double v102 = 0.0;
      uint64_t v101 = 1LL;
    }

    else
    {
      id v104 = v164;
      (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v164, v97, v17);
      uint64_t v105 = sub_2012C(v97, &qword_189CE8);
      double v106 = Date.timeIntervalSince1970.getter(v105);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v104, v17);
      uint64_t v101 = 0LL;
      double v102 = v106;
    }
  }

  else
  {
    uint64_t v98 = v164;
    (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v164, v92, v17);
    uint64_t v99 = sub_2012C(v92, &qword_189CE8);
    double v100 = Date.timeIntervalSince1970.getter(v99);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v98, v17);
    uint64_t v101 = 0LL;
    double v102 = v100;
    id v103 = v59;
  }

  dispatch thunk of DialogCalendarRange.Builder.withEndSecs(_:)(*(void *)&v102, v101);
  uint64_t v107 = swift_release();
  uint64_t v108 = dispatch thunk of DialogCalendarRange.Builder.build()(v107);
  swift_release();
  uint64_t v109 = v103[7];
  swift_release();
  *(void *)(v41 + v109) = v108;
  id v110 = [v68 start];
  if (v110)
  {
    uint64_t v111 = v110;
    uint64_t v112 = v164;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v110);

    uint64_t v113 = v159;
    (*(void (**)(uint64_t, char *, uint64_t))(v77 + 32))(v159, v112, v17);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v113, 0LL, 1LL, v17);
    BOOL v114 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v113, 1LL, v17) == 1;
  }

  else
  {
    BOOL v114 = 1;
    uint64_t v113 = v159;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v159, 1LL, 1LL, v17);
  }

  uint64_t v115 = (uint64_t)v163;
  sub_2012C(v113, &qword_189CE8);
  *(_BYTE *)(v41 + v103[13]) = v114;
  uint64_t v116 = v162;
  sub_35468(v161, v162);
  uint64_t v117 = type metadata accessor for URL(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v116, 1LL, v117) == 1)
  {
    sub_2012C(v116, &qword_189CF8);
    uint64_t v118 = type metadata accessor for SpeakableString(0LL);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v115, 1LL, 1LL, v118);
  }

  else
  {
    uint64_t v119 = v41;
    id v120 = [objc_allocWithZone(SAUIAppPunchOut) init];
    URL._bridgeToObjectiveC()(v121);
    uint64_t v123 = v122;
    [v120 setPunchOutUri:v122];

    id v124 = v120;
    uint64_t v125 = v148;
    uint64_t v126 = UUID.init()();
    uint64_t v127 = UUID.uuidString.getter(v126);
    uint64_t v129 = v128;
    (*(void (**)(char *, uint64_t))(v149 + 8))(v125, v150);
    sub_125B84(v127, v129, v124);

    id v130 = [v124 dictionary];
    if (v130)
    {
      uint64_t v131 = v130;
      uint64_t v132 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      id v165 = 0LL;
      id v133 = [v132 dataWithPropertyList:v131 format:200 options:0 error:&v165];
      id v134 = v165;
      if (v133)
      {
        uint64_t v135 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v133);
        unint64_t v137 = v136;

        Swift::String v138 = Data.base64EncodedString(options:)(0LL);
        String.toSpeakableString.getter(v138._countAndFlagsBits, v138._object);

        sub_A3CC(v135, v137);
        swift_bridgeObjectRelease();
        uint64_t v139 = type metadata accessor for SpeakableString(0LL);
        uint64_t v140 = v115;
        uint64_t v141 = 0LL;
      }

      else
      {
        id v143 = v134;
        uint64_t v144 = _convertNSErrorToError(_:)();

        swift_willThrow(v145);
        swift_errorRelease(v144);
        uint64_t v139 = type metadata accessor for SpeakableString(0LL);
        uint64_t v140 = v115;
        uint64_t v141 = 1LL;
      }

      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v140, v141, 1LL, v139);
    }

    else
    {
      uint64_t v142 = type metadata accessor for SpeakableString(0LL);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v115, 1LL, 1LL, v142);
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v117 - 8) + 8LL))(v116, v117);
    uint64_t v41 = v119;
  }

  return sub_A384(v115, v41);
}

uint64_t sub_53598(uint64_t a1, uint64_t a2, void *a3, int a4, void *a5, uint64_t a6)
{
  uint64_t v137 = a6;
  id v134 = a5;
  LODWORD(v140) = a4;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v126 = *(void *)(v9 - 8);
  uint64_t v127 = v9;
  __chkstk_darwin(v9);
  uint64_t v125 = (char *)&v125 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_494C(&qword_189CF8);
  __chkstk_darwin(v11);
  uint64_t v139 = (uint64_t)&v125 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v136 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v135 = (char *)&v125 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_494C(&qword_189CE8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v129 = (char *)&v125 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v130 = (uint64_t)&v125 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v132 = (char *)&v125 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v133 = (uint64_t)&v125 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v131 = (char *)&v125 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v128 = (uint64_t)&v125 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v125 - v29;
  __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v125 - v31;
  uint64_t v33 = sub_494C(&qword_189D00);
  uint64_t v34 = __chkstk_darwin(v33);
  Swift::String v138 = (char *)&v125 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v34);
  uint64_t v37 = (char *)&v125 - v36;
  uint64_t v38 = (int *)type metadata accessor for WellnessQueryingRestingEnergyParameters(0LL);
  uint64_t v39 = v38[8];
  swift_retain();
  swift_release();
  *(void *)(a1 + v39) = a2;
  uint64_t v40 = a1;
  [a3 average];
  double v42 = v41;
  uint64_t v43 = sub_7D950(a3);
  LOBYTE(a_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = (_BYTE)v140;
  double v45 = sub_90668(v43, v44, v140, v42);
  swift_bridgeObjectRelease();
  uint64_t v46 = a1 + v38[5];
  *(double *)uint64_t v46 = v45;
  *(_BYTE *)(v46 + 8) = 0;
  [a3 total];
  double v48 = v47;
  uint64_t v49 = sub_7D950(a3);
  double v51 = sub_90668(v49, v50, a2, v48);
  swift_bridgeObjectRelease();
  uint64_t v140 = v38;
  uint64_t v52 = v38[9];
  uint64_t v53 = a3;
  uint64_t v54 = a1 + v52;
  *(double *)uint64_t v54 = v51;
  *(_BYTE *)(v54 + 8) = 0;
  uint64_t v55 = sub_7D950(a3);
  if (v56)
  {
    String.toSpeakableString.getter(v55, v56);
    swift_bridgeObjectRelease();
    uint64_t v57 = type metadata accessor for SpeakableString(0LL);
    uint64_t v58 = 0LL;
  }

  else
  {
    uint64_t v57 = type metadata accessor for SpeakableString(0LL);
    uint64_t v58 = 1LL;
  }

  uint64_t v59 = 1LL;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v37, v58, 1LL, v57);
  sub_A384((uint64_t)v37, a1 + v140[10]);
  uint64_t v60 = type metadata accessor for DialogCalendarRange.Builder(0LL);
  swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
  DialogCalendarRange.Builder.init()();
  id v61 = v134;
  id v62 = [v134 start];
  uint64_t v63 = v135;
  if (v62)
  {
    uint64_t v64 = v62;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v62);

    uint64_t v59 = 0LL;
  }

  uint64_t v65 = (uint64_t)v131;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v30, v59, 1LL, v13);
  sub_55C74((uint64_t)v30, (uint64_t)v32, &qword_189CE8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1LL, v13))
  {
    sub_2012C((uint64_t)v32, &qword_189CE8);
    id v66 = [v53 sampleStartDate];
    uint64_t v67 = (uint64_t)v138;
    uint64_t v68 = v136;
    if (v66)
    {
      id v69 = v66;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v66);

      uint64_t v70 = 0LL;
    }

    else
    {
      uint64_t v70 = 1LL;
    }

    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v65, v70, 1LL, v13);
    uint64_t v75 = v128;
    sub_55C74(v65, v128, &qword_189CE8);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v75, 1LL, v13))
    {
      sub_2012C(v75, &qword_189CE8);
      double v74 = 0.0;
      uint64_t v73 = 1LL;
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v63, v75, v13);
      uint64_t v76 = sub_2012C(v75, &qword_189CE8);
      double v77 = Date.timeIntervalSince1970.getter(v76);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v63, v13);
      uint64_t v73 = 0LL;
      double v74 = v77;
    }
  }

  else
  {
    uint64_t v68 = v136;
    (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v63, v32, v13);
    uint64_t v71 = sub_2012C((uint64_t)v32, &qword_189CE8);
    double v72 = Date.timeIntervalSince1970.getter(v71);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v63, v13);
    uint64_t v73 = 0LL;
    double v74 = v72;
    uint64_t v67 = (uint64_t)v138;
  }

  dispatch thunk of DialogCalendarRange.Builder.withStartSecs(_:)(*(void *)&v74, v73);
  swift_release();
  id v78 = [v61 end];
  if (v78)
  {
    uint64_t v79 = v78;
    uint64_t v80 = (uint64_t)v132;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v78);

    uint64_t v81 = 0LL;
  }

  else
  {
    uint64_t v81 = 1LL;
    uint64_t v80 = (uint64_t)v132;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v80, v81, 1LL, v13);
  uint64_t v82 = v133;
  sub_55C74(v80, v133, &qword_189CE8);
  sub_2012C(v82, &qword_189CE8);
  id v83 = [v53 sampleEndDate];
  if (v83)
  {
    uint64_t v84 = v83;
    uint64_t v85 = (uint64_t)v129;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v83);

    uint64_t v86 = 0LL;
  }

  else
  {
    uint64_t v86 = 1LL;
    uint64_t v85 = (uint64_t)v129;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v85, v86, 1LL, v13);
  uint64_t v82 = v130;
  sub_55C74(v85, v130, &qword_189CE8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v82, 1LL, v13))
  {
    sub_2012C(v82, &qword_189CE8);
    double v87 = 0.0;
    uint64_t v88 = 1LL;
  }

  else
  {
LABEL_23:
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v63, v82, v13);
    uint64_t v89 = sub_2012C(v82, &qword_189CE8);
    double v90 = Date.timeIntervalSince1970.getter(v89);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v63, v13);
    uint64_t v88 = 0LL;
    double v87 = v90;
  }

  dispatch thunk of DialogCalendarRange.Builder.withEndSecs(_:)(*(void *)&v87, v88);
  uint64_t v91 = swift_release();
  uint64_t v92 = dispatch thunk of DialogCalendarRange.Builder.build()(v91);
  swift_release();
  uint64_t v93 = v140[7];
  swift_release();
  *(void *)(v40 + v93) = v92;
  uint64_t v94 = v139;
  sub_35468(v137, v139);
  uint64_t v95 = type metadata accessor for URL(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v94, 1LL, v95) == 1)
  {
    sub_2012C(v94, &qword_189CF8);
    uint64_t v96 = type metadata accessor for SpeakableString(0LL);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v67, 1LL, 1LL, v96);
  }

  else
  {
    uint64_t v97 = v40;
    id v98 = [objc_allocWithZone(SAUIAppPunchOut) init];
    URL._bridgeToObjectiveC()(v99);
    uint64_t v101 = v100;
    [v98 setPunchOutUri:v100];

    id v102 = v98;
    id v103 = v125;
    uint64_t v104 = UUID.init()();
    uint64_t v105 = UUID.uuidString.getter(v104);
    uint64_t v107 = v106;
    (*(void (**)(char *, uint64_t))(v126 + 8))(v103, v127);
    sub_125B84(v105, v107, v102);

    id v108 = [v102 dictionary];
    if (v108)
    {
      uint64_t v109 = v108;
      id v110 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      id v141 = 0LL;
      id v111 = [v110 dataWithPropertyList:v109 format:200 options:0 error:&v141];
      id v112 = v141;
      if (v111)
      {
        uint64_t v113 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v111);
        unint64_t v115 = v114;

        Swift::String v116 = Data.base64EncodedString(options:)(0LL);
        String.toSpeakableString.getter(v116._countAndFlagsBits, v116._object);

        sub_A3CC(v113, v115);
        swift_bridgeObjectRelease();
        uint64_t v117 = type metadata accessor for SpeakableString(0LL);
        uint64_t v118 = v67;
        uint64_t v119 = 0LL;
      }

      else
      {
        uint64_t v121 = v112;
        uint64_t v122 = _convertNSErrorToError(_:)();

        swift_willThrow(v123);
        swift_errorRelease(v122);
        uint64_t v117 = type metadata accessor for SpeakableString(0LL);
        uint64_t v118 = v67;
        uint64_t v119 = 1LL;
      }

      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v118, v119, 1LL, v117);
    }

    else
    {
      uint64_t v120 = type metadata accessor for SpeakableString(0LL);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v67, 1LL, 1LL, v120);
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v95 - 8) + 8LL))(v94, v95);
    uint64_t v40 = v97;
  }

  return sub_A384(v67, v40);
}

uint64_t sub_53F4C(uint64_t a1, uint64_t a2, void *a3, int a4, void *a5, uint64_t a6)
{
  uint64_t v130 = a6;
  id v133 = a5;
  LODWORD(v134) = a4;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v120 = *(void *)(v9 - 8);
  uint64_t v121 = v9;
  __chkstk_darwin(v9);
  uint64_t v119 = (char *)&v119 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_494C(&qword_189CF8);
  __chkstk_darwin(v11);
  uint64_t v131 = (char *)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_494C(&qword_189D00);
  __chkstk_darwin(v13);
  uint64_t v132 = (char *)&v119 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v129 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v128 = (char *)&v119 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_494C(&qword_189CE8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v123 = (char *)&v119 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v124 = (uint64_t)&v119 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v125 = (char *)&v119 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v126 = (uint64_t)&v119 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v122 = (char *)&v119 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v119 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v33 = (char *)&v119 - v32;
  __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v119 - v34;
  uint64_t v36 = (int *)type metadata accessor for WellnessQueryingStepsParameters(0LL);
  uint64_t v37 = v36[9];
  swift_retain();
  swift_release();
  *(void *)(a1 + v3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = a2;
  [a3 total];
  double v39 = v38;
  uint64_t v40 = sub_7D950(a3);
  unsigned __int8 v41 = v134;
  double v43 = sub_90668(v40, v42, v134, v39);
  swift_bridgeObjectRelease();
  uint64_t v44 = a1 + v36[10];
  *(double *)uint64_t v44 = v43;
  *(_BYTE *)(v44 + 8) = 0;
  [a3 average];
  double v46 = v45;
  double v47 = a3;
  uint64_t v48 = sub_7D950(a3);
  double v50 = sub_90668(v48, v49, v41, v46);
  swift_bridgeObjectRelease();
  uint64_t v127 = v36;
  uint64_t v51 = v36[5];
  uint64_t v134 = a1;
  uint64_t v52 = a1 + v51;
  *(double *)uint64_t v52 = v50;
  *(_BYTE *)(v52 + 8) = 0;
  uint64_t v53 = type metadata accessor for DialogCalendarRange.Builder(0LL);
  swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  DialogCalendarRange.Builder.init()();
  id v54 = [v133 start];
  if (v54)
  {
    uint64_t v55 = v54;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v54);

    uint64_t v56 = 0LL;
  }

  else
  {
    uint64_t v56 = 1LL;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v33, v56, 1LL, v15);
  sub_55C74((uint64_t)v33, (uint64_t)v35, &qword_189CE8);
  int v57 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v35, 1LL, v15);
  uint64_t v59 = v128;
  uint64_t v58 = v129;
  if (v57)
  {
    sub_2012C((uint64_t)v35, &qword_189CE8);
    id v60 = [a3 sampleStartDate];
    uint64_t v61 = (uint64_t)v131;
    if (v60)
    {
      id v62 = v60;
      uint64_t v63 = (uint64_t)v122;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v60);

      uint64_t v64 = 0LL;
    }

    else
    {
      uint64_t v64 = 1LL;
      uint64_t v63 = (uint64_t)v122;
    }

    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v63, v64, 1LL, v15);
    sub_55C74(v63, (uint64_t)v30, &qword_189CE8);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v30, 1LL, v15))
    {
      sub_2012C((uint64_t)v30, &qword_189CE8);
      double v68 = 0.0;
      uint64_t v67 = 1LL;
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v59, v30, v15);
      uint64_t v69 = sub_2012C((uint64_t)v30, &qword_189CE8);
      double v70 = Date.timeIntervalSince1970.getter(v69);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v15);
      uint64_t v67 = 0LL;
      double v68 = v70;
    }
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v128, v35, v15);
    uint64_t v65 = sub_2012C((uint64_t)v35, &qword_189CE8);
    double v66 = Date.timeIntervalSince1970.getter(v65);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v15);
    uint64_t v67 = 0LL;
    double v68 = v66;
    uint64_t v61 = (uint64_t)v131;
  }

  dispatch thunk of DialogCalendarRange.Builder.withStartSecs(_:)(*(void *)&v68, v67);
  swift_release();
  id v71 = [v133 end];
  if (v71)
  {
    double v72 = v71;
    uint64_t v73 = (uint64_t)v125;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v71);

    uint64_t v74 = 0LL;
  }

  else
  {
    uint64_t v74 = 1LL;
    uint64_t v73 = (uint64_t)v125;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v73, v74, 1LL, v15);
  uint64_t v75 = v126;
  sub_55C74(v73, v126, &qword_189CE8);
  sub_2012C(v75, &qword_189CE8);
  id v76 = [v47 sampleEndDate];
  if (v76)
  {
    double v77 = v76;
    uint64_t v78 = (uint64_t)v123;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v76);

    uint64_t v79 = 0LL;
  }

  else
  {
    uint64_t v79 = 1LL;
    uint64_t v78 = (uint64_t)v123;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v78, v79, 1LL, v15);
  uint64_t v75 = v124;
  sub_55C74(v78, v124, &qword_189CE8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v75, 1LL, v15))
  {
    sub_2012C(v75, &qword_189CE8);
    double v80 = 0.0;
    uint64_t v81 = 1LL;
  }

  else
  {
LABEL_21:
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v59, v75, v15);
    uint64_t v82 = sub_2012C(v75, &qword_189CE8);
    double v83 = Date.timeIntervalSince1970.getter(v82);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v15);
    uint64_t v81 = 0LL;
    double v80 = v83;
  }

  dispatch thunk of DialogCalendarRange.Builder.withEndSecs(_:)(*(void *)&v80, v81);
  uint64_t v84 = swift_release();
  uint64_t v85 = dispatch thunk of DialogCalendarRange.Builder.build()(v84);
  swift_release();
  uint64_t v86 = v127[7];
  uint64_t v87 = v134;
  swift_release();
  *(void *)(v87 + v86) = v85;
  sub_35468(v130, v61);
  uint64_t v88 = type metadata accessor for URL(0LL);
  int v89 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v61, 1LL, v88);
  uint64_t v90 = (uint64_t)v132;
  if (v89 == 1)
  {
    sub_2012C(v61, &qword_189CF8);
    uint64_t v91 = type metadata accessor for SpeakableString(0LL);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v90, 1LL, 1LL, v91);
  }

  else
  {
    id v92 = [objc_allocWithZone(SAUIAppPunchOut) init];
    URL._bridgeToObjectiveC()(v93);
    uint64_t v95 = v94;
    [v92 setPunchOutUri:v94];

    id v96 = v92;
    uint64_t v97 = v119;
    uint64_t v98 = UUID.init()();
    uint64_t v99 = UUID.uuidString.getter(v98);
    uint64_t v101 = v100;
    (*(void (**)(char *, uint64_t))(v120 + 8))(v97, v121);
    sub_125B84(v99, v101, v96);

    id v102 = [v96 dictionary];
    if (v102)
    {
      id v103 = v102;
      uint64_t v104 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      id v135 = 0LL;
      id v105 = [v104 dataWithPropertyList:v103 format:200 options:0 error:&v135];
      id v106 = v135;
      if (v105)
      {
        uint64_t v107 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v105);
        unint64_t v109 = v108;

        Swift::String v110 = Data.base64EncodedString(options:)(0LL);
        String.toSpeakableString.getter(v110._countAndFlagsBits, v110._object);

        sub_A3CC(v107, v109);
        swift_bridgeObjectRelease();
        uint64_t v111 = type metadata accessor for SpeakableString(0LL);
        uint64_t v112 = v90;
        uint64_t v113 = 0LL;
      }

      else
      {
        unint64_t v115 = v106;
        uint64_t v116 = _convertNSErrorToError(_:)();

        swift_willThrow(v117);
        swift_errorRelease(v116);
        uint64_t v111 = type metadata accessor for SpeakableString(0LL);
        uint64_t v112 = v90;
        uint64_t v113 = 1LL;
      }

      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v112, v113, 1LL, v111);
    }

    else
    {
      uint64_t v114 = type metadata accessor for SpeakableString(0LL);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v90, 1LL, 1LL, v114);
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v88 - 8) + 8LL))(v61, v88);
  }

  return sub_A384(v90, v134);
}

void sub_5486C()
{
  uint64_t v1 = v0;
  uint64_t v169 = v2;
  uint64_t v173 = v3;
  int v161 = v4;
  unsigned __int8 v6 = v5;
  double v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v155 = sub_56944(__stack_chk_guard);
  uint64_t v154 = *(void *)(v155 - 8);
  sub_D978();
  __chkstk_darwin(v13);
  sub_6D30();
  uint64_t v153 = v14;
  sub_494C(&qword_189CF8);
  sub_D978();
  __chkstk_darwin(v15);
  uint64_t v171 = (char *)&v152 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_A8E4();
  uint64_t v167 = *(void *)(v17 - 8);
  sub_D978();
  __chkstk_darwin(v18);
  sub_6D30();
  uint64_t v166 = v19;
  sub_494C(&qword_189CE8);
  sub_D978();
  __chkstk_darwin(v20);
  sub_3751C();
  uint64_t v168 = v21;
  sub_A794();
  __chkstk_darwin(v22);
  sub_1C6B8();
  uint64_t v159 = v23;
  sub_A794();
  __chkstk_darwin(v24);
  sub_1C6B8();
  uint64_t v160 = v25;
  sub_A794();
  __chkstk_darwin(v26);
  uint64_t v164 = (char *)&v152 - v27;
  sub_A794();
  __chkstk_darwin(v28);
  id v165 = (char *)&v152 - v29;
  sub_A794();
  __chkstk_darwin(v30);
  id v163 = (char *)&v152 - v31;
  sub_A794();
  __chkstk_darwin(v32);
  sub_1C6B8();
  uint64_t v158 = v33;
  sub_A794();
  __chkstk_darwin(v34);
  uint64_t v162 = (char *)&v152 - v35;
  sub_A794();
  __chkstk_darwin(v36);
  double v38 = (char *)&v152 - v37;
  uint64_t v172 = sub_ABF4();
  uint64_t v157 = *(void *)(v172 - 8);
  sub_D978();
  __chkstk_darwin(v39);
  sub_6D30();
  uint64_t v156 = v40;
  sub_494C(&qword_189D00);
  sub_D978();
  __chkstk_darwin(v41);
  uint64_t v170 = (char *)&v152 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_A794();
  __chkstk_darwin(v43);
  double v45 = (char *)&v152 - v44;
  double v46 = (int *)v1(0LL);
  uint64_t v47 = v46[10];
  swift_retain();
  uint64_t v48 = sub_37034();
  *(void *)(v12 + v4_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = v10;
  uint64_t v49 = v12;
  double v50 = v46;
  sub_373D8(v48, "mostRecent");
  uint64_t v51 = sub_56828();
  sub_56734(v51, v52, v6);
  sub_5681C();
  sub_56804(v49 + v46[12]);
  sub_373D8(v53, "maximum");
  uint64_t v54 = sub_56828();
  sub_56734(v54, v55, v6);
  sub_5681C();
  sub_56804(v49 + v46[8]);
  sub_373D8(v56, "minimum");
  uint64_t v57 = sub_56828();
  sub_56734(v57, v58, v6);
  sub_5681C();
  sub_56804(v49 + v46[9]);
  if ((v161 & 1) == 0)
  {
    sub_373D8(v59, "average");
    uint64_t v60 = sub_56828();
    sub_56734(v60, v61, v6);
    sub_5681C();
    sub_56804(v49 + v46[5]);
  }

  sub_7D950(v8);
  if (v62)
  {
    String.uppercased()();
    sub_249D4();
    uint64_t v63 = v156;
    uint64_t v64 = sub_56B24();
    String.toSpeakableString.getter(v64, v65);
    swift_bridgeObjectRelease();
    uint64_t v66 = v172;
    (*(void (**)(char *, uint64_t, uint64_t))(v157 + 32))(v45, v63, v172);
  }

  else
  {
    String.toSpeakableString.getter(5066818LL, 0xE300000000000000LL);
    uint64_t v66 = v172;
  }

  uint64_t v67 = (uint64_t)v163;
  uint64_t v68 = 1LL;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v45, 0LL, 1LL, v66);
  sub_A384((uint64_t)v45, v49 + v50[11]);
  uint64_t v69 = sub_56B64();
  sub_A72C(v69);
  uint64_t v70 = sub_56AD8();
  id v71 = sub_56B30(v70, "start");
  if (v71)
  {
    double v72 = v71;
    uint64_t v73 = (uint64_t)v162;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v71);

    uint64_t v68 = 0LL;
  }

  else
  {
    uint64_t v73 = (uint64_t)v162;
  }

  sub_56758(v73, v68);
  sub_55C74(v73, (uint64_t)v38, &qword_189CE8);
  uint64_t v74 = sub_56868((uint64_t)v38);
  if ((_DWORD)v74)
  {
    uint64_t v75 = sub_56750(v74, &qword_189CE8);
    id v76 = sub_373D8(v75, "sampleEndDate");
    uint64_t v77 = v167;
    if (v76)
    {
      uint64_t v78 = v76;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v76);

      uint64_t v79 = 0LL;
    }

    else
    {
      uint64_t v79 = 1LL;
    }

    uint64_t v83 = v166;
    sub_56758(v67, v79);
    uint64_t v85 = v158;
    sub_56748(v67, v86, &qword_189CE8);
    uint64_t v87 = sub_56834();
    double v80 = v50;
    if ((_DWORD)v87)
    {
      sub_566F4(v87, &qword_189CE8);
      uint64_t v88 = _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV6dosageSdSgvpfi_0();
      goto LABEL_18;
    }

    uint64_t v90 = sub_568B8(v83, v85, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 16));
    uint64_t v91 = sub_566F4(v90, &qword_189CE8);
    Date.timeIntervalSince1970.getter(v91);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v83, v17);
  }

  else
  {
    double v80 = v50;
    uint64_t v81 = v166;
    uint64_t v77 = v167;
    sub_568B8(v166, (uint64_t)v38, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v167 + 16));
    uint64_t v82 = (uint64_t)v38;
    uint64_t v83 = v81;
    uint64_t v84 = sub_2012C(v82, &qword_189CE8);
    Date.timeIntervalSince1970.getter(v84);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v81, v17);
  }

  uint64_t v88 = sub_5695C();
LABEL_18:
  dispatch thunk of DialogCalendarRange.Builder.withStartSecs(_:)(v88, v89);
  uint64_t v92 = swift_release();
  id v93 = sub_56B30(v92, "end");
  if (v93)
  {
    uint64_t v94 = v93;
    uint64_t v95 = v164;
    sub_56330((uint64_t)v93);

    uint64_t v96 = (uint64_t)v95;
    uint64_t v97 = 0LL;
    uint64_t v98 = (uint64_t)v171;
  }

  else
  {
    uint64_t v97 = 1LL;
    uint64_t v98 = (uint64_t)v171;
    uint64_t v96 = (uint64_t)v164;
  }

  sub_56758(v96, v97);
  uint64_t v99 = v96;
  uint64_t v100 = (uint64_t)v165;
  sub_56748(v99, v101, &qword_189CE8);
  uint64_t v102 = sub_56834();
  if ((_DWORD)v102)
  {
    uint64_t v103 = sub_566F4(v102, &qword_189CE8);
    id v104 = sub_373D8(v103, "sampleEndDate");
    if (v104)
    {
      id v105 = v104;
      uint64_t v106 = v159;
      sub_56968((uint64_t)v104);

      uint64_t v107 = 0LL;
    }

    else
    {
      uint64_t v107 = 1LL;
      uint64_t v106 = v159;
    }

    uint64_t v108 = v160;
    sub_56758(v106, v107);
    sub_568E0(v106, v110, &qword_189CE8);
    uint64_t v111 = sub_56868(v108);
    if ((_DWORD)v111)
    {
      sub_56628(v111, &qword_189CE8);
      uint64_t v112 = _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV6dosageSdSgvpfi_0();
      goto LABEL_30;
    }

    sub_568B8(v83, v108, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 16));
    uint64_t v109 = v108;
  }

  else
  {
    sub_568B8(v83, v100, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 16));
    uint64_t v109 = v100;
  }

  uint64_t v114 = sub_2012C(v109, &qword_189CE8);
  Date.timeIntervalSince1970.getter(v114);
  (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v83, v17);
  uint64_t v112 = sub_5695C();
LABEL_30:
  dispatch thunk of DialogCalendarRange.Builder.withEndSecs(_:)(v112, v113);
  uint64_t v115 = sub_56ACC();
  uint64_t v116 = dispatch thunk of DialogCalendarRange.Builder.build()(v115);
  sub_3652C();
  uint64_t v117 = v80[7];
  uint64_t v118 = swift_release();
  *(void *)(v49 + v11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = v116;
  id v119 = sub_56B30(v118, "start");
  if (v119)
  {
    uint64_t v120 = v119;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v119);

    uint64_t v121 = v168;
    sub_568B8(v168, v83, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 32));
    sub_56758(v121, 0LL);
    uint64_t v122 = sub_A614(v121, 1LL, v17);
    if (v123) {
      char v124 = 1;
    }
    else {
      char v124 = 0;
    }
  }

  else
  {
    char v124 = 1;
    uint64_t v122 = sub_56758(v168, 1LL);
  }

  sub_566F4(v122, &qword_189CE8);
  *(_BYTE *)(v49 + v80[13]) = v124;
  sub_35468(v169, v98);
  uint64_t v125 = sub_3C798();
  uint64_t v126 = sub_A614(v98, 1LL, v125);
  uint64_t v127 = (uint64_t)v170;
  if (v123)
  {
    sub_56A68(v126, &qword_189CF8);
    sub_568CC();
  }

  else
  {
    id v128 = [objc_allocWithZone(SAUIAppPunchOut) init];
    URL._bridgeToObjectiveC()(v129);
    uint64_t v131 = v130;
    sub_36F44(v128, "setPunchOutUri:");

    id v132 = v128;
    uint64_t v133 = v153;
    uint64_t v134 = UUID.init()();
    uint64_t v135 = UUID.uuidString.getter(v134);
    uint64_t v137 = v136;
    (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v133, v155);
    sub_125B84(v135, v137, v132);

    id v139 = sub_373D8(v138, "dictionary");
    if (v139)
    {
      uint64_t v140 = v139;
      id v141 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      uint64_t v174 = 0LL;
      id v142 = sub_5678C(v141, "dataWithPropertyList:format:options:error:");
      id v143 = sub_56950();
      if (v133)
      {
        sub_56B5C();
        sub_56A1C();
        Swift::String v144 = Data.base64EncodedString(options:)(0LL);
        sub_56A24(v144._countAndFlagsBits, (uint64_t)v144._object);

        uint64_t v145 = sub_56B24();
        sub_A3CC(v145, v146);

        sub_6D64();
        uint64_t v147 = v127;
        uint64_t v148 = 0LL;
      }

      else
      {
        uint64_t v149 = v143;
        uint64_t v150 = _convertNSErrorToError(_:)();

        swift_willThrow(v151);
        swift_errorRelease(v150);
        uint64_t v147 = v127;
        uint64_t v148 = 1LL;
      }

      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v147, v148, 1LL, v172);
    }

    else
    {
      sub_568CC();
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v125 - 8) + 8LL))(v98, v125);
  }

  sub_A384(v127, v49);
  sub_A744();
}

uint64_t sub_551BC(uint64_t a1, uint64_t a2, int a3, void *a4, unsigned __int8 a5, void *a6, uint64_t a7)
{
  uint64_t v143 = a7;
  id v146 = a6;
  id v147 = a4;
  int v137 = a3;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v132 = *(void *)(v10 - 8);
  uint64_t v133 = v10;
  __chkstk_darwin(v10);
  uint64_t v131 = (char *)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_494C(&qword_189CF8);
  __chkstk_darwin(v12);
  uint64_t v145 = (uint64_t)&v130 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v142 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v141 = (char *)&v130 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_494C(&qword_189CE8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v135 = (char *)&v130 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v136 = (uint64_t)&v130 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  id v139 = (char *)&v130 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v140 = (uint64_t)&v130 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v138 = (char *)&v130 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v134 = (uint64_t)&v130 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v130 - v30;
  __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v130 - v32;
  uint64_t v34 = sub_494C(&qword_189D00);
  uint64_t v35 = __chkstk_darwin(v34);
  Swift::String v144 = (char *)&v130 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v35);
  double v38 = (char *)&v130 - v37;
  uint64_t v39 = (int *)type metadata accessor for WellnessQueryingWeightParameters(0LL);
  uint64_t v40 = v39[10];
  swift_retain();
  swift_release();
  *(void *)(a1 + v40) = a2;
  id v41 = v147;
  uint64_t v42 = a1;
  if ((v137 & 1) == 0)
  {
    [v147 minimum];
    double v44 = v43;
    uint64_t v45 = sub_7D950(v41);
    double v47 = sub_90668(v45, v46, a5, v44);
    swift_bridgeObjectRelease();
    uint64_t v48 = a1 + v39[9];
    *(double *)uint64_t v48 = v47;
    *(_BYTE *)(v48 + 8) = 0;
    [v41 maximum];
    double v50 = v49;
    uint64_t v51 = sub_7D950(v41);
    double v53 = sub_90668(v51, v52, a5, v50);
    swift_bridgeObjectRelease();
    uint64_t v54 = a1 + v39[8];
    *(double *)uint64_t v54 = v53;
    *(_BYTE *)(v54 + 8) = 0;
  }

  sub_50DA4(v41);
  double v56 = v55;
  uint64_t v57 = sub_7D950(v41);
  double v59 = sub_90668(v57, v58, a5, v56);
  swift_bridgeObjectRelease();
  uint64_t v60 = a1 + v39[12];
  *(double *)uint64_t v60 = v59;
  *(_BYTE *)(v60 + 8) = 0;
  uint64_t v61 = sub_7D950(v41);
  if (v62)
  {
    String.toSpeakableString.getter(v61, v62);
    swift_bridgeObjectRelease();
    uint64_t v63 = type metadata accessor for SpeakableString(0LL);
    uint64_t v64 = 0LL;
  }

  else
  {
    uint64_t v63 = type metadata accessor for SpeakableString(0LL);
    uint64_t v64 = 1LL;
  }

  uint64_t v65 = v141;
  uint64_t v66 = 1LL;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v38, v64, 1LL, v63);
  sub_A384((uint64_t)v38, v42 + v39[11]);
  uint64_t v67 = type metadata accessor for DialogCalendarRange.Builder(0LL);
  swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
  DialogCalendarRange.Builder.init()();
  id v68 = [v146 start];
  if (v68)
  {
    uint64_t v69 = v68;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v68);

    uint64_t v66 = 0LL;
  }

  uint64_t v70 = (uint64_t)v138;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v31, v66, 1LL, v14);
  sub_55C74((uint64_t)v31, (uint64_t)v33, &qword_189CE8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v33, 1LL, v14))
  {
    sub_2012C((uint64_t)v33, &qword_189CE8);
    id v71 = [v147 sampleEndDate];
    uint64_t v72 = v142;
    if (v71)
    {
      uint64_t v73 = v71;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v71);

      uint64_t v74 = 0LL;
    }

    else
    {
      uint64_t v74 = 1LL;
    }

    uint64_t v79 = (uint64_t)v144;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v70, v74, 1LL, v14);
    uint64_t v80 = v134;
    sub_55C74(v70, v134, &qword_189CE8);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v80, 1LL, v14))
    {
      sub_2012C(v80, &qword_189CE8);
      double v78 = 0.0;
      uint64_t v77 = 1LL;
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v65, v80, v14);
      uint64_t v81 = sub_2012C(v80, &qword_189CE8);
      double v82 = Date.timeIntervalSince1970.getter(v81);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v65, v14);
      uint64_t v77 = 0LL;
      double v78 = v82;
    }
  }

  else
  {
    uint64_t v72 = v142;
    (*(void (**)(char *, char *, uint64_t))(v142 + 16))(v65, v33, v14);
    uint64_t v75 = sub_2012C((uint64_t)v33, &qword_189CE8);
    double v76 = Date.timeIntervalSince1970.getter(v75);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v65, v14);
    uint64_t v77 = 0LL;
    double v78 = v76;
    uint64_t v79 = (uint64_t)v144;
  }

  dispatch thunk of DialogCalendarRange.Builder.withStartSecs(_:)(*(void *)&v78, v77);
  swift_release();
  id v83 = [v146 end];
  if (v83)
  {
    uint64_t v84 = v83;
    uint64_t v85 = (uint64_t)v139;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v83);

    uint64_t v86 = 0LL;
  }

  else
  {
    uint64_t v86 = 1LL;
    uint64_t v85 = (uint64_t)v139;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v85, v86, 1LL, v14);
  uint64_t v87 = v140;
  sub_55C74(v85, v140, &qword_189CE8);
  sub_2012C(v87, &qword_189CE8);
  id v88 = [v147 sampleEndDate];
  if (v88)
  {
    uint64_t v89 = v88;
    uint64_t v90 = (uint64_t)v135;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v88);

    uint64_t v91 = 0LL;
  }

  else
  {
    uint64_t v91 = 1LL;
    uint64_t v90 = (uint64_t)v135;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v90, v91, 1LL, v14);
  uint64_t v87 = v136;
  sub_55C74(v90, v136, &qword_189CE8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v87, 1LL, v14))
  {
    sub_2012C(v87, &qword_189CE8);
    double v92 = 0.0;
    uint64_t v93 = 1LL;
  }

  else
  {
LABEL_25:
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v65, v87, v14);
    uint64_t v94 = sub_2012C(v87, &qword_189CE8);
    double v95 = Date.timeIntervalSince1970.getter(v94);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v65, v14);
    uint64_t v93 = 0LL;
    double v92 = v95;
  }

  dispatch thunk of DialogCalendarRange.Builder.withEndSecs(_:)(*(void *)&v92, v93);
  uint64_t v96 = swift_release();
  uint64_t v97 = dispatch thunk of DialogCalendarRange.Builder.build()(v96);
  swift_release();
  uint64_t v98 = v39[6];
  swift_release();
  *(void *)(v42 + v98) = v97;
  uint64_t v99 = v145;
  sub_35468(v143, v145);
  uint64_t v100 = type metadata accessor for URL(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v99, 1LL, v100) == 1)
  {
    sub_2012C(v99, &qword_189CF8);
    uint64_t v101 = type metadata accessor for SpeakableString(0LL);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v79, 1LL, 1LL, v101);
  }

  else
  {
    id v102 = [objc_allocWithZone(SAUIAppPunchOut) init];
    URL._bridgeToObjectiveC()(v103);
    id v105 = v104;
    [v102 setPunchOutUri:v104];

    id v106 = v102;
    uint64_t v107 = v131;
    uint64_t v108 = UUID.init()();
    uint64_t v109 = UUID.uuidString.getter(v108);
    uint64_t v111 = v110;
    (*(void (**)(char *, uint64_t))(v132 + 8))(v107, v133);
    sub_125B84(v109, v111, v106);

    id v112 = [v106 dictionary];
    if (v112)
    {
      uint64_t v113 = v112;
      uint64_t v114 = v42;
      uint64_t v115 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      id v148 = 0LL;
      id v116 = [v115 dataWithPropertyList:v113 format:200 options:0 error:&v148];
      id v117 = v148;
      if (v116)
      {
        uint64_t v118 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v116);
        unint64_t v120 = v119;

        Swift::String v121 = Data.base64EncodedString(options:)(0LL);
        String.toSpeakableString.getter(v121._countAndFlagsBits, v121._object);

        sub_A3CC(v118, v120);
        swift_bridgeObjectRelease();
        uint64_t v122 = type metadata accessor for SpeakableString(0LL);
        uint64_t v123 = v79;
        uint64_t v124 = 0LL;
      }

      else
      {
        uint64_t v126 = v117;
        uint64_t v127 = _convertNSErrorToError(_:)();

        swift_willThrow(v128);
        swift_errorRelease(v127);
        uint64_t v122 = type metadata accessor for SpeakableString(0LL);
        uint64_t v123 = v79;
        uint64_t v124 = 1LL;
      }

      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v123, v124, 1LL, v122);
      uint64_t v42 = v114;
    }

    else
    {
      uint64_t v125 = type metadata accessor for SpeakableString(0LL);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v79, 1LL, 1LL, v125);
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v100 - 8) + 8LL))(v99, v100);
  }

  return sub_A384(v79, v42);
}

id sub_55BB0(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithSymbol:v5];

  return v6;
}

uint64_t sub_55C20(uint64_t a1)
{
  return sub_55E3C(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_4DCB8);
}

uint64_t sub_55C2C(uint64_t a1)
{
  return sub_55DE4( a1,  (uint64_t)type metadata accessor for WellnessQueryingExerciseMinutesParameters,  (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t))sub_50634);
}

uint64_t sub_55C40(uint64_t a1)
{
  return sub_55DE4( a1,  (uint64_t)type metadata accessor for WellnessQueryingStandMinutesParameters,  (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t))sub_50634);
}

uint64_t sub_55C54(uint64_t a1)
{
  return sub_4E470( a1,  *(unsigned __int8 *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void **)(v1 + 40),  *(void *)(v1 + 48),  *(void **)(v1 + 56));
}

uint64_t sub_55C68(uint64_t a1)
{
  return sub_55E3C(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_53598);
}

uint64_t sub_55C74(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_494C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_55CB8(uint64_t a1)
{
  return sub_55E18(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_4EF50);
}

uint64_t sub_55CC4(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_55CFC(uint64_t a1)
{
  return sub_551BC( a1,  *(void *)(v1 + 16),  *(unsigned __int8 *)(v1 + 24),  *(void **)(v1 + 32),  *(_BYTE *)(v1 + 40),  *(void **)(v1 + 48),  *(void *)(v1 + 56));
}

uint64_t sub_55D14(uint64_t a1)
{
  return sub_4FAB4( a1,  *(void *)(v1 + 16),  *(void **)(v1 + 24),  *(_BYTE *)(v1 + 32),  *(void *)(v1 + 40),  *(unsigned __int8 *)(v1 + 48),  *(void **)(v1 + 56),  *(void *)(v1 + 64));
}

uint64_t sub_55D2C(uint64_t a1)
{
  return sub_55DE4( a1,  (uint64_t)type metadata accessor for WellnessQueryingCyclingDistanceParameters,  (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t))sub_50634);
}

uint64_t sub_55D40(uint64_t a1)
{
  return sub_55DE4( a1,  (uint64_t)type metadata accessor for WellnessQueryingDistanceWalkingAndRunningParameters,  (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t))sub_50634);
}

uint64_t sub_55D54(uint64_t a1)
{
  return sub_55DE4( a1,  (uint64_t)type metadata accessor for WellnessQueryingDistanceWheelchairParameters,  (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t))sub_50634);
}

uint64_t sub_55D68(uint64_t a1)
{
  return sub_55DE4( a1,  (uint64_t)type metadata accessor for WellnessQueryingFlightsClimbedParameters,  (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t))sub_523DC);
}

void sub_55D7C()
{
}

uint64_t sub_55D88(uint64_t a1)
{
  return sub_5100C( a1,  *(void *)(v1 + 16),  *(_BYTE *)(v1 + 24),  *(void *)(v1 + 32),  *(void **)(v1 + 40),  *(void *)(v1 + 56),  *(int **)(v1 + 64),  *(void **)(v1 + 72),  *(double *)(v1 + 48),  *(void **)(v1 + 80),  *(void *)(v1 + 88));
}

uint64_t sub_55DC4(uint64_t a1)
{
  return sub_55E18(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_519EC);
}

uint64_t sub_55DD0(uint64_t a1)
{
  return sub_55DE4( a1,  (uint64_t)type metadata accessor for WellnessQueryingPushesParameters,  (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t))sub_523DC);
}

uint64_t sub_55DE4( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, void, void, void, void, void, uint64_t))
{
  return a3( a1,  *(void *)(v3 + 16),  *(void *)(v3 + 24),  *(unsigned __int8 *)(v3 + 32),  *(void *)(v3 + 40),  *(void *)(v3 + 48),  a2);
}

uint64_t sub_55E0C(uint64_t a1)
{
  return sub_55E18(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_52ACC);
}

uint64_t sub_55E18( uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2( a1,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(unsigned __int8 *)(v2 + 32),  *(unsigned __int8 *)(v2 + 33),  *(void *)(v2 + 40),  *(void *)(v2 + 48));
}

uint64_t sub_55E30(uint64_t a1)
{
  return sub_55E3C(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_53F4C);
}

uint64_t sub_55E3C(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2( a1,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(unsigned __int8 *)(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 48));
}

void sub_55E50()
{
}

void sub_55E5C()
{
}

uint64_t sub_55E94()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1LL, v1);
}

id sub_55EC8(uint64_t a1)
{
  return [v3 *(SEL *)(v1 + 3120)];
}

uint64_t sub_55EF4()
{
  return swift_slowAlloc(12LL, -1LL);
}

uint64_t sub_55F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_55F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v4, 1LL, 1LL, a4);
}

uint64_t sub_55F48(uint64_t a1)
{
  *(void *)(v1 + 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a1;
  uint64_t v2 = *(void *)(a1 - 8);
  *(void *)(v1 + 120) = v2;
  return swift_task_alloc((*(void *)(v2 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_55F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for WellnessTime(0LL);
}

uint64_t sub_55F88(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_55F94()
{
}

uint64_t sub_55FAC()
{
  return sub_55C74(v2, v0, v3);
}

uint64_t sub_55FD8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v12 + 80) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a11, v13, v11, v14);
}

uint64_t sub_55FF0()
{
  return swift_task_alloc(64LL);
}

uint64_t sub_56010()
{
  return v0(v1[24], v1[29], v1[21]);
}

uint64_t sub_56034@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 48);
}

uint64_t sub_5604C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for WellnessTime(0LL);
}

uint64_t sub_56068()
{
  return v0(v1, v2, v3);
}

uint64_t sub_56078(uint64_t a1)
{
  *(void *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

uint64_t sub_5608C()
{
  return sub_D7EC(*(void *)(v0 + 104) + 120LL, v0 + 16);
}

uint64_t sub_560AC()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (uint64_t *)(v1 - 8);
  *uint64_t v3 = *v0;
  uint64_t v4 = *(void *)(v2 + 296);
  *uint64_t v3 = *v0;
  return swift_task_dealloc(v4);
}

void sub_560CC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

  ;
}

void sub_560FC()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_56110()
{
  return swift_slowAlloc(12LL, -1LL);
}

uint64_t sub_56148()
{
  return swift_slowAlloc(12LL, -1LL);
}

uint64_t sub_56158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[12] = a2;
  v3[13] = a3;
  v3[11] = a1;
  return type metadata accessor for Logger(0LL);
}

uint64_t sub_56168()
{
  return swift_slowAlloc(32LL, -1LL);
}

uint64_t sub_56178()
{
  return v0(v1[20], v1[31], v1[17]);
}

BOOL sub_561AC(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

id sub_561BC()
{
  uint64_t v2 = (void *)v1[12];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1[34], v0, 1LL, v1[17]);
  return [v2 sampleEndDate];
}

uint64_t sub_561F8(float a1)
{
  *uint64_t v1 = a1;
  return sub_35468(v3, v2);
}

uint64_t sub_56210(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_5622C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_56240()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v3, v1, v2);
}

uint64_t sub_56254@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_5625C()
{
  return sub_D7EC(*(void *)(v0 + 104) + 120LL, v0 + 16);
}

uint64_t sub_56284()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v1, v3, v2);
}

uint64_t sub_56298()
{
  return (*(uint64_t (**)(void, void))(v0[22] + 8LL))(v0[26], v0[21]);
}

uint64_t sub_562AC()
{
  return v0(v1[26], v1[30], v1[21]);
}

uint64_t sub_562C0(uint64_t a1)
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_562D4(uint64_t a1)
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

id sub_562E8()
{
  return [*(id *)(v0 + 88) start];
}

  ;
}

  ;
}

uint64_t sub_56330(uint64_t a1)
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_56338@<X0>(uint64_t a1@<X8>)
{
  return sub_D7EC(a1 + 120, v1);
}

id sub_56344(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_5634C(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_56354()
{
  return v0;
}

uint64_t sub_56364@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_56374( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return sub_39178(a1, a2, (uint64_t *)va);
}

uint64_t sub_56380()
{
  return sub_55C74(v3, v1, v2);
}

uint64_t sub_563AC()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_563BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_2012C(a14, v14);
}

uint64_t sub_563CC()
{
  return DateInterval.init(start:end:)(v1, v0);
}

uint64_t sub_563DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return String.init<A>(describing:)(v10, a10);
}

uint64_t sub_563E8(uint64_t a1)
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_563F4(uint64_t a1)
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

  ;
}

uint64_t sub_5641C()
{
  return v0(v1, v2, v3);
}

uint64_t sub_5642C(uint64_t a1)
{
  *(void *)(v1 + 280) = a1;
  return type metadata accessor for DateInterval(0LL);
}

uint64_t sub_5643C(float a1)
{
  *uint64_t v1 = a1;
  return sub_35468(v3, v2);
}

uint64_t sub_56454(uint64_t a1, uint64_t a2)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v2 + 240), a2, 1LL, *(void *)(v2 + 136));
}

uint64_t sub_56480(uint64_t a1, uint64_t *a2)
{
  return sub_2012C(v2, a2);
}

uint64_t sub_56488()
{
  return *(void *)(v0 + 384);
}

uint64_t sub_564F0(uint64_t a1)
{
  return sub_35468(a1, v1);
}

uint64_t sub_564F8(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_56500()
{
  return DateInterval.init(start:end:)(v1, v0);
}

id sub_56514()
{
  return [v0 start];
}

uint64_t sub_56528()
{
  return swift_task_dealloc(*(void *)(v0 + 328));
}

uint64_t sub_5657C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return a14;
}

uint64_t sub_5658C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_565A8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_565B0()
{
  return sub_35468(v0, v1);
}

uint64_t sub_565BC(uint64_t a1)
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_565C8(uint64_t a1)
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

id sub_565D4(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_565DC()
{
  return v0;
}

uint64_t sub_565E8@<X0>(uint64_t result@<X0>, char a2@<W8>)
{
  *(_BYTE *)(result + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a2;
  *(void *)(result + 40) = v3;
  *(void *)(result + 48) = v2;
  return result;
}

uint64_t sub_565F8(uint64_t result)
{
  *(void *)(v1 + 288) = result;
  *(void *)(result + sub_46370(v0 + 16) = v3;
  *(void *)(result + 24) = v2;
  return result;
}

  ;
}

uint64_t sub_56628(uint64_t a1, uint64_t *a2)
{
  return sub_2012C(v2, a2);
}

  ;
}

uint64_t sub_56650()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, v2, v1);
}

uint64_t sub_56664()
{
  return v0(v1[22], v1[32], v1[17]);
}

uint64_t sub_56678()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v1, v3, v2);
}

uint64_t sub_5668C()
{
  return *(void *)v0;
}

uint64_t sub_566A4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

uint64_t sub_566C0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_566C8(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

id sub_566D0(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_566D8(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1LL, v1);
}

uint64_t sub_566E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_2012C(a11, v11);
}

uint64_t sub_566F4(uint64_t a1, uint64_t *a2)
{
  return sub_2012C(v2, a2);
}

  ;
}

uint64_t sub_56718@<X0>(uint64_t result@<X0>, char a2@<W8>)
{
  *(_BYTE *)(result + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a2;
  *(_BYTE *)(result + 33) = v2;
  *(void *)(result + 40) = v4;
  *(void *)(result + 48) = v3;
  return result;
}

uint64_t sub_5672C(uint64_t a1)
{
  return v1(a1, v2);
}

double sub_56734(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return sub_90668(a1, a2, a3, v3);
}

uint64_t sub_5673C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_56748(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_55C74(a1, v3, a3);
}

uint64_t sub_56750(uint64_t a1, uint64_t *a2)
{
  return sub_2012C(v2, a2);
}

uint64_t sub_56758(uint64_t a1, uint64_t a2)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1LL, v2);
}

uint64_t sub_56764(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_56770( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return a16;
}

  ;
}

id sub_5678C(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2, 200, 0, v3 - 120);
}

uint64_t sub_567A0(uint64_t a1)
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_567AC(uint64_t a1)
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_567B8(uint64_t a1)
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_567C4(uint64_t result)
{
  *(void *)(v1 + 304) = result;
  *(void *)(result + sub_46370(v0 + 16) = v3;
  *(void *)(result + 24) = v2;
  return result;
}

uint64_t sub_567D4(uint64_t a1)
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_567DC()
{
  return (*(uint64_t (**)(void, void))(v0 + 408))(*(void *)(v0 + 184), *(void *)(v0 + 144));
}

uint64_t sub_567F8()
{
  return 0LL;
}

void sub_56804(uint64_t a1@<X8>)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t sub_56810()
{
  return sub_7D950(v0);
}

uint64_t sub_5681C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_56828()
{
  return sub_7D950(v0);
}

uint64_t sub_56834()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1LL, v1);
}

  ;
}

uint64_t sub_56860(uint64_t a1, uint64_t *a2)
{
  return sub_2012C(v2, a2);
}

uint64_t sub_56868(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1LL, v1);
}

uint64_t sub_56874()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t sub_5687C(uint64_t a1)
{
  return sub_F4F10(a1, v1);
}

void sub_56884()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_56898()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 248) + 8LL))(v0, *(void *)(v1 - 240));
}

uint64_t sub_568B0(uint64_t a1)
{
  return sub_F4F10(a1, v1);
}

uint64_t sub_568B8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

  ;
}

uint64_t sub_568CC()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, 1LL, 1LL, *(void *)(v1 - 144));
}

uint64_t sub_568E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_55C74(a1, v3, a3);
}

uint64_t sub_568E8(uint64_t a1)
{
  return v2(a1, v1);
}

  ;
}

uint64_t sub_568FC()
{
  return sub_7D950(v0);
}

void sub_56904(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 256) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

void sub_56920(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

id sub_5693C(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_56944@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a1;
  return type metadata accessor for UUID(0LL);
}

id sub_56950()
{
  return *(id *)(v0 - 120);
}

uint64_t sub_5695C()
{
  return v0;
}

uint64_t sub_56968(uint64_t a1)
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_56970()
{
  return *(void *)v0;
}

  ;
}

id sub_56988(uint64_t a1, const char *a2)
{
  return [*(id *)(v2 - 144) a2];
}

  ;
}

  ;
}

uint64_t sub_569B4()
{
  return v1(v0, v2, v3);
}

uint64_t sub_569C4()
{
  return v2(v0, v1, v3);
}

uint64_t sub_569D4()
{
  return String.toSpeakableString.getter(v0, v1);
}

uint64_t sub_569E4()
{
  return String.toSpeakableString.getter(v1, v0);
}

  ;
}

uint64_t sub_56A00()
{
  return Data.base64EncodedString(options:)(0LL)._countAndFlagsBits;
}

  ;
}

void sub_56A1C()
{
}

uint64_t sub_56A24(uint64_t a1, uint64_t a2)
{
  return String.toSpeakableString.getter(a1, a2);
}

uint64_t sub_56A30()
{
  return UUID.init()();
}

  ;
}

uint64_t sub_56A60(uint64_t a1, uint64_t *a2)
{
  return sub_2012C(v2, a2);
}

uint64_t sub_56A68(uint64_t a1, uint64_t *a2)
{
  return sub_2012C(v2, a2);
}

uint64_t sub_56A70()
{
  return sub_2012C(v1, v0);
}

uint64_t sub_56A7C()
{
  return v1;
}

uint64_t sub_56AA0(uint64_t a1)
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_56AA8(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_56AB0(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_56AB8(uint64_t a1)
{
  return sub_35468(a1, v1);
}

uint64_t sub_56AC0(uint64_t a1)
{
  return Measurement.init(value:unit:)(a1, v1, v2);
}

uint64_t sub_56ACC()
{
  return swift_release(v0);
}

uint64_t sub_56AD8()
{
  return DialogCalendarRange.Builder.init()();
}

uint64_t sub_56AE0(uint64_t a1)
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

  ;
}

  ;
}

uint64_t sub_56B14(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_56B1C(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_56B24()
{
  return v0;
}

id sub_56B30(uint64_t a1, const char *a2)
{
  return [*(id *)(v2 - 136) a2];
}

uint64_t sub_56B38()
{
  return sub_A3CC(v0, v1);
}

uint64_t sub_56B44()
{
  return v2(v0, v1);
}

uint64_t sub_56B50(uint64_t a1)
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_56B5C()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_56B64()
{
  return type metadata accessor for DialogCalendarRange.Builder(0LL);
}

uint64_t sub_56B6C(uint64_t a1, char a2, uint64_t a3)
{
  *(_BYTE *)(v3 + 168) = a2;
  *(void *)(v3 + 120) = a1;
  *(void *)(v3 + sub_A304(v0, v1 - 128) = a3;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  *(void *)(v3 + 136) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 144) = v5;
  *(void *)(v3 + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_56BC4()
{
  int v2 = *(unsigned __int8 *)(v0 + 168);
  BOOL v3 = (v2 - 89) > 0x3E || ((1LL << (v2 - 89)) & 0x6400000000054181LL) == 0;
  if (v3 && ((unsigned int v4 = v2 - 155, v5 = v4 > 0x22, v6 = (1LL << v4) & 0x4200C8091LL, !v5) ? (v7 = v6 == 0) : (v7 = 1), v7))
  {
    *(void *)(v0 + 48) = 0LL;
    *(_OWORD *)(v0 + sub_46370(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0u;
    uint64_t v10 = sub_57ED0();
    uint64_t v11 = *(void *)(v0 + 80);
    sub_57F00(v10, &qword_18A448);
    if (v11)
    {
      sub_57EF4();
    }

    else
    {
      uint64_t v12 = sub_57EB0();
      sub_A5DC(v12, v0 + 56);
      uint64_t v13 = sub_3A42C();
      Logger.logObject.getter(v13);
      os_log_type_t v14 = sub_A898();
      if (sub_232DC(v14))
      {
        uint64_t v15 = (_WORD *)sub_A5E8(2LL);
        *uint64_t v15 = 0;
        sub_3A440( &dword_0,  v16,  v17,  "#GenerateLoggingResponseOutput: Snippet model cannot be created. Possibly unsupported usecase.");
        sub_5050((uint64_t)v15);
      }

      sub_57EA0();
      uint64_t v18 = sub_57E90();
      sub_36A94(v18, &qword_18A448);
      *(_OWORD *)uint64_t v1 = 0u;
      *(_OWORD *)(v1 + sub_46370(v0 + 16) = 0u;
      *(void *)(v1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
    }

    swift_task_dealloc(*(void *)(v0 + 152));
    return sub_20294(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    double v8 = (void *)swift_task_alloc(dword_18B4E4);
    *(void *)(v0 + 160) = v8;
    *double v8 = v0;
    v8[1] = sub_56D38;
    return sub_56E80(v0 + 16, *(_BYTE *)(v0 + 168), *(void *)(v0 + 128));
  }

uint64_t sub_56D38()
{
  return sub_A5D0();
}

uint64_t sub_56D6C()
{
  uint64_t v2 = sub_57ED0();
  uint64_t v3 = *(void *)(v0 + 80);
  sub_57F00(v2, &qword_18A448);
  if (v3)
  {
    sub_57EF4();
  }

  else
  {
    uint64_t v4 = sub_57EB0();
    sub_A5DC(v4, v0 + 56);
    uint64_t v5 = sub_3A42C();
    Logger.logObject.getter(v5);
    os_log_type_t v6 = sub_A898();
    if (sub_232DC(v6))
    {
      BOOL v7 = (_WORD *)sub_A5E8(2LL);
      *BOOL v7 = 0;
      sub_3A440( &dword_0,  v8,  v9,  "#GenerateLoggingResponseOutput: Snippet model cannot be created. Possibly unsupported usecase.");
      sub_5050((uint64_t)v7);
    }

    sub_57EA0();
    uint64_t v10 = sub_57E90();
    sub_36A94(v10, &qword_18A448);
    *(_OWORD *)uint64_t v1 = 0u;
    *(_OWORD *)(v1 + sub_46370(v0 + 16) = 0u;
    *(void *)(v1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
  }

  swift_task_dealloc(*(void *)(v0 + 152));
  return sub_20294(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_56E38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_18A448);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_56E80(uint64_t a1, char a2, uint64_t a3)
{
  *(_BYTE *)(v3 + 520) = a2;
  *(void *)(v3 + 19_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a1;
  *(void *)(v3 + 200) = a3;
  uint64_t v4 = sub_494C(&qword_189D00);
  *(void *)(v3 + 208) = sub_36390(v4);
  uint64_t v5 = sub_494C(&qword_189BA0);
  *(void *)(v3 + sub_20004(v5, v1 + 216) = sub_36390(v5);
  uint64_t v6 = sub_494C(&qword_189CF8);
  *(void *)(v3 + 224) = sub_36390(v6);
  uint64_t v7 = sub_494C(&qword_18A1A8);
  *(void *)(v3 + 23_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_36390(v7);
  uint64_t v8 = type metadata accessor for HealthDataLogModel(0LL);
  *(void *)(v3 + 240) = v8;
  *(void *)(v3 + 248) = sub_D8CC(*(void *)(v8 - 8));
  *(void *)(v3 + 256) = sub_A5B8();
  *(void *)(v3 + 264) = sub_A5B8();
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v3 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v3 + 280) = v10;
  *(void *)(v3 + 288) = sub_D8CC(v10);
  *(void *)(v3 + 296) = sub_A5B8();
  *(void *)(v3 + 304) = sub_A5B8();
  *(void *)(v3 + 31_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_A5B8();
  uint64_t v11 = type metadata accessor for SnippetHeaderModel(0LL);
  *(void *)(v3 + 320) = v11;
  *(void *)(v3 + 328) = sub_D8CC(*(void *)(v11 - 8));
  *(void *)(v3 + 336) = sub_A5B8();
  *(void *)(v3 + 344) = sub_A5B8();
  uint64_t v12 = sub_494C(&qword_189CE8);
  *(void *)(v3 + 35_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = sub_36390(v12);
  uint64_t v13 = type metadata accessor for Date(0LL);
  *(void *)(v3 + 360) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v3 + 368) = v14;
  *(void *)(v3 + 376) = sub_D8CC(v14);
  *(void *)(v3 + 384) = sub_A5B8();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_56FBC()
{
  uint64_t v1 = sub_27CC8(*(_BYTE *)(v0 + 520));
  uint64_t v3 = v2;
  *(void *)(v0 + 39_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v2;
  uint64_t v4 = (void *)swift_task_alloc(dword_18B704);
  *(void *)(v0 + 400) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_5701C;
  return sub_5E5E4(v1, v3);
}

uint64_t sub_5701C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 400);
  *(void *)(v3 + 408) = a1;
  *(void *)(v3 + 4sub_46370(v0 + 16) = a2;
  swift_task_dealloc(v4);
  sub_249D4();
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_57070()
{
  unsigned __int8 v1 = 40;
  uint64_t v2 = sub_27CC8(*(_BYTE *)(v0 + 520));
  if (v2 == 0xD000000000000028LL && v3 == 0x8000000000143740LL)
  {
    uint64_t v4 = swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v5 = *(void **)(v0 + 200);
    sub_57EDC(v4, "doubleValue");
    double v7 = v6 * 100.0;
    goto LABEL_7;
  }

  unsigned __int8 v1 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, 0xD000000000000028LL, 0x8000000000143740LL, 0LL);
  uint64_t v4 = sub_249D4();
  if ((v1 & 1) != 0) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void **)(v0 + 200);
  sub_57EDC(v4, "doubleValue");
  double v7 = v8;
LABEL_7:
  uint64_t v9 = sub_57DD0(v5);
  *(double *)(v0 + 424) = sub_90668(v9, v10, v1, v7);
  uint64_t v11 = *(void **)(v0 + 200);
  unsigned __int8 v12 = *(_BYTE *)(v0 + 520);
  sub_249D4();
  uint64_t v13 = sub_57CE8(v12, v11);
  uint64_t v15 = v14;
  *(void *)(v0 + 43_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v13;
  *(void *)(v0 + 440) = v14;
  id v16 = [v11 start];
  if (!v16)
  {
    sub_6D78(*(void *)(v0 + 352), v17, v18, *(void *)(v0 + 360));
    goto LABEL_14;
  }

  uint64_t v19 = v16;
  uint64_t v21 = *(void *)(v0 + 368);
  uint64_t v20 = *(void *)(v0 + 376);
  uint64_t v23 = *(void *)(v0 + 352);
  uint64_t v22 = *(void *)(v0 + 360);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v16);

  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32);
  v24(v23, v20, v22);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v23, 0LL, 1LL, v22);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v23, 1LL, v22) == 1)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v53 = sub_249D4();
    sub_36A94(v53, &qword_189CE8);
    goto LABEL_16;
  }

  v24(*(void *)(v0 + 384), *(void *)(v0 + 352), *(void *)(v0 + 360));
  uint64_t v25 = *(void *)(v0 + 416);
  if (v15 && v25)
  {
    uint64_t v26 = *(void *)(v0 + 344);
    uint64_t v164 = *(void *)(v0 + 336);
    uint64_t v27 = *(void *)(v0 + 312);
    uint64_t v28 = *(void *)(v0 + 320);
    uint64_t v30 = *(void *)(v0 + 272);
    uint64_t v29 = *(void *)(v0 + 280);
    unsigned __int8 v31 = *(_BYTE *)(v0 + 520);
    String.toSpeakableString.getter(*(void *)(v0 + 408), v25);
    swift_bridgeObjectRelease();
    unint64_t v32 = sub_2A044(v31);
    unint64_t v34 = v33;
    uint64_t v35 = sub_27CC8(v31);
    uint64_t v36 = (unint64_t *)(v26 + *(int *)(v28 + 20));
    *uint64_t v36 = v32;
    v36[1] = v34;
    uint64_t v37 = (uint64_t *)(v26 + *(int *)(v28 + 24));
    *uint64_t v37 = v35;
    v37[1] = v38;
    uint64_t v39 = Logger.wellness.unsafeMutableAddressor(v35);
    *(void *)(v0 + 448) = v39;
    sub_A5DC(v39, v0 + 56);
    uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
    *(void *)(v0 + 456) = v40;
    v40(v27, v39, v30);
    sub_35554(v26, v164, type metadata accessor for SnippetHeaderModel);
    uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.debug.getter(v42);
    BOOL v44 = os_log_type_enabled(v42, v43);
    uint64_t v45 = *(void *)(v0 + 336);
    if (v44)
    {
      uint64_t v46 = *(void *)(v0 + 320);
      uint64_t v47 = *(void *)(v0 + 328);
      uint64_t v157 = *(void *)(v0 + 280);
      uint64_t v161 = *(void *)(v0 + 272);
      uint64_t v165 = *(void *)(v0 + 312);
      uint64_t v48 = (_DWORD *)sub_A5E8(12LL);
      uint64_t v49 = sub_A5E8(32LL);
      uint64_t v166 = v49;
      *uint64_t v48 = 136315138;
      sub_35554(v45, v47, type metadata accessor for SnippetHeaderModel);
      uint64_t v50 = String.init<A>(describing:)(v47, v46);
      *(void *)(v0 + 184) = sub_39178(v50, v51, &v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v48 + 1, v48 + 3);
      swift_bridgeObjectRelease();
      sub_26F04(v45, type metadata accessor for SnippetHeaderModel);
      sub_57EE8(&dword_0, v42, v43, "#GenerateLoggingResponseOutput: Snippet header model %s");
      swift_arrayDestroy(v49, 1LL);
      sub_5050(v49);
      sub_5050((uint64_t)v48);

      uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v157 + 8);
      v52(v165, v161);
    }

    else
    {
      uint64_t v126 = *(void *)(v0 + 312);
      uint64_t v127 = *(void *)(v0 + 272);
      uint64_t v128 = *(void *)(v0 + 280);
      sub_26F04(*(void *)(v0 + 336), type metadata accessor for SnippetHeaderModel);

      uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v128 + 8);
      v52(v126, v127);
    }

    *(void *)(v0 + 464) = v52;
    uint64_t v129 = type metadata accessor for DialogCalendar.Builder(0LL);
    swift_allocObject(v129, *(unsigned int *)(v129 + 48), *(unsigned __int16 *)(v129 + 52));
    uint64_t v130 = DialogCalendar.Builder.init()();
    double v131 = Date.timeIntervalSince1970.getter(v130);
    dispatch thunk of DialogCalendar.Builder.withSecs(_:)(*(void *)&v131, 0LL);
    uint64_t v132 = swift_release();
    *(void *)(v0 + 47_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = dispatch thunk of DialogCalendar.Builder.build()(v132);
    swift_release();
    uint64_t v133 = (void *)swift_task_alloc(dword_18B6EC);
    *(void *)(v0 + 480) = v133;
    *uint64_t v133 = v0;
    v133[1] = sub_575E8;
    return sub_5E408(0x646567676F6CLL, 0xE600000000000000LL);
  }

  sub_57EC0();
  uint64_t v54 = swift_bridgeObjectRelease();
LABEL_16:
  uint64_t v56 = *(void *)(v0 + 280);
  double v55 = *(void **)(v0 + 288);
  uint64_t v57 = *(void *)(v0 + 272);
  uint64_t v58 = Logger.wellness.unsafeMutableAddressor(v54);
  sub_A5DC(v58, v0 + 128);
  uint64_t v59 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v56 + 16))(v55, v58, v57);
  uint64_t v60 = v55;
  Logger.logObject.getter(v59);
  os_log_type_t v61 = sub_A898();
  if (sub_A988(v61))
  {
    uint64_t v62 = (_WORD *)sub_A5E8(2LL);
    *uint64_t v62 = 0;
    sub_A940( &dword_0,  v63,  v64,  "#GenerateLoggingResponseOutput: Response start is nil. or unit/category labels are nil");
    sub_5050((uint64_t)v62);
  }

  uint64_t v66 = *(void *)(v0 + 280);
  uint64_t v65 = *(void *)(v0 + 288);
  uint64_t v67 = *(void *)(v0 + 272);
  uint64_t v68 = *(void *)(v0 + 192);

  (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v67);
  *(void *)(v68 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
  *(_OWORD *)uint64_t v68 = 0u;
  *(_OWORD *)(v68 + sub_46370(v0 + 16) = 0u;
  sub_57E30();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A78C();
  sub_A67C();
  uint64_t v69 = sub_A7C8();
  uint64_t v77 = sub_A970(v69, v70, v71, v72, v73, v74, v75, v76, v134);
  uint64_t v85 = sub_AAD8(v77, v78, v79, v80, v81, v82, v83, v84, v135, v141);
  uint64_t v93 = sub_A888(v85, v86, v87, v88, v89, v90, v91, v92, v136, v142, v147);
  uint64_t v101 = sub_A854(v93, v94, v95, v96, v97, v98, v99, v100, v137, v143, v148, v152);
  uint64_t v109 = sub_A84C(v101, v102, v103, v104, v105, v106, v107, v108, v138, v144, v149, v153, v156);
  uint64_t v117 = sub_A844(v109, v110, v111, v112, v113, v114, v115, v116, v139, v145, v150, v154, v158, v160);
  sub_A83C(v117, v118, v119, v120, v121, v122, v123, v124, v140, v146, v151, v155, v159, v162, v163);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_575E8()
{
  v2[19] = v0;
  v2[20] = v1;
  v2[21] = v3;
  uint64_t v4 = v2[60];
  *uint64_t v5 = *v0;
  v2[61] = v3;
  swift_task_dealloc(v4);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_57630()
{
  uint64_t v1 = *(void *)(v0 + 488);
  uint64_t v2 = *(void *)(v0 + 472);
  uint64_t v3 = *(void *)(v0 + 440);
  uint64_t v36 = *(void *)(v0 + 448);
  uint64_t v4 = *(void *)(v0 + 424);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 456);
  uint64_t v44 = *(void *)(v0 + 432);
  uint64_t v5 = *(void *)(v0 + 320);
  uint64_t v37 = *(void *)(v0 + 304);
  uint64_t v38 = *(void *)(v0 + 272);
  uint64_t v34 = *(void *)(v0 + 160);
  uint64_t v35 = *(void *)(v0 + 264);
  uint64_t v40 = *(void *)(v0 + 256);
  uint64_t v6 = *(void *)(v0 + 224);
  uint64_t v7 = *(void *)(v0 + 232);
  uint64_t v8 = *(void *)(v0 + 216);
  uint64_t v9 = *(unsigned __int8 *)(v0 + 520);
  sub_35554(*(void *)(v0 + 344), v7, type metadata accessor for SnippetHeaderModel);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v7, 0LL, 1LL, v5);
  uint64_t v10 = type metadata accessor for DateInterval(0LL);
  sub_6D78(v8, v11, v12, v10);
  uint64_t v13 = sub_F4F10(v9, v8);
  sub_36A94(v13, &qword_189BA0);
  if (v1) {
    uint64_t v14 = v34;
  }
  else {
    uint64_t v14 = 0x646567676F4CLL;
  }
  if (v1) {
    uint64_t v15 = v1;
  }
  else {
    uint64_t v15 = 0xE600000000000000LL;
  }
  swift_retain();
  swift_bridgeObjectRetain(v3);
  uint64_t v16 = v44;
  uint64_t v45 = v4;
  HealthDataLogModel.init(snippetHeaderModel:date:unitLabel:dataValue:url:loggedButtonLabel:)( v7,  v2,  v16,  v3,  v4,  0,  v6,  v14,  v35,  v15);
  sub_A5DC(v36, v0 + 80);
  v42(v37, v36, v38);
  sub_35554(v35, v40, type metadata accessor for HealthDataLogModel);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.debug.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v41 = *(void *)(v0 + 304);
    os_log_type_t v43 = *(void (**)(uint64_t, uint64_t))(v0 + 464);
    uint64_t v39 = *(void *)(v0 + 272);
    uint64_t v21 = *(void *)(v0 + 248);
    uint64_t v20 = *(void *)(v0 + 256);
    uint64_t v22 = *(void *)(v0 + 240);
    uint64_t v23 = (_DWORD *)sub_A5E8(12LL);
    uint64_t v24 = sub_A5E8(32LL);
    uint64_t v46 = v24;
    *uint64_t v23 = 136315138;
    sub_35554(v20, v21, type metadata accessor for HealthDataLogModel);
    uint64_t v25 = String.init<A>(describing:)(v21, v22);
    *(void *)(v0 + sub_20004(v6, v1 + 176) = sub_39178(v25, v26, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v23 + 1, v23 + 3);
    swift_bridgeObjectRelease();
    sub_26F04(v20, type metadata accessor for HealthDataLogModel);
    sub_57EE8(&dword_0, v18, v19, "#GenerateLoggingResponseOutput: Snippet model %s");
    swift_arrayDestroy(v24, 1LL);
    sub_5050(v24);
    sub_5050((uint64_t)v23);

    v43(v41, v39);
  }

  else
  {
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 464);
    uint64_t v28 = *(void *)(v0 + 304);
    uint64_t v29 = *(void *)(v0 + 272);
    sub_26F04(*(void *)(v0 + 256), type metadata accessor for HealthDataLogModel);

    v27(v28, v29);
  }

  uint64_t v30 = *(void *)(v0 + 208);
  String.toSpeakableString.getter(*(void *)(v0 + 432), *(void *)(v0 + 440));
  sub_249D4();
  uint64_t v31 = type metadata accessor for SpeakableString(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v30, 0LL, 1LL, v31);
  unint64_t v32 = (void *)swift_task_alloc(dword_18B504);
  *(void *)(v0 + 496) = v32;
  *unint64_t v32 = v0;
  v32[1] = sub_57980;
  return sub_59270(*(_BYTE *)(v0 + 520), v45, 0, *(void *)(v0 + 208), 2LL, 0LL);
}

uint64_t sub_57980(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 496LL);
  *(void *)(*(void *)v1 + 504LL) = a1;
  uint64_t v3 = swift_task_dealloc(v2);
  sub_57F00(v3, &qword_189D00);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_579E0()
{
  uint64_t v1 = *(void **)(v0 + 504);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 264);
    uint64_t v3 = type metadata accessor for WellnessSnippets(0LL);
    *(void *)(v0 + 40) = v3;
    *(void *)(v0 + 48) = sub_20168();
    uint64_t v4 = sub_B76C((void *)(v0 + 16));
    sub_35554(v2, (uint64_t)v4, type metadata accessor for HealthDataLogModel);
    swift_storeEnumTagMultiPayload(v4, v3, 7LL);
    uint64_t v5 = dword_18B6FC;
    id v6 = v1;
    uint64_t v7 = (void *)swift_task_alloc(v5);
    *(void *)(v0 + 51_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_57BE0;
    return sub_5E844(*(void *)(v0 + 192), v0 + 16, (uint64_t)v6);
  }

  else
  {
    uint64_t v9 = *(void *)(v0 + 448);
    uint64_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v0 + 456);
    uint64_t v11 = *(void **)(v0 + 296);
    uint64_t v12 = *(void *)(v0 + 272);
    sub_A5DC(v9, v0 + 104);
    uint64_t v13 = v10(v11, v9, v12);
    Logger.logObject.getter(v13);
    os_log_type_t v14 = sub_A898();
    if (sub_A988(v14))
    {
      uint64_t v15 = (_WORD *)sub_A5E8(2LL);
      *uint64_t v15 = 0;
      sub_A940(&dword_0, v16, v17, "#GenerateLoggingResponseOutput: Invalid unit or dialog or response start value");
      sub_5050((uint64_t)v15);
    }

    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 464);
    uint64_t v19 = *(void *)(v0 + 368);
    uint64_t v106 = *(void *)(v0 + 360);
    uint64_t v108 = *(void *)(v0 + 384);
    uint64_t v20 = *(void *)(v0 + 344);
    uint64_t v21 = *(void *)(v0 + 296);
    uint64_t v23 = *(void *)(v0 + 264);
    uint64_t v22 = *(void *)(v0 + 272);
    uint64_t v24 = *(void *)(v0 + 192);

    swift_release();
    v18(v21, v22);
    sub_26F04(v23, type metadata accessor for HealthDataLogModel);
    sub_26F04(v20, type metadata accessor for SnippetHeaderModel);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v108, v106);
    *(void *)(v24 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0LL;
    *(_OWORD *)uint64_t v24 = 0u;
    *(_OWORD *)(v24 + sub_46370(v0 + 16) = 0u;
    sub_57E30();
    sub_A760();
    sub_A8EC();
    sub_A910();
    sub_A864();
    sub_A85C();
    sub_A8F4();
    sub_A78C();
    sub_A67C();
    uint64_t v25 = sub_A7C8();
    uint64_t v33 = sub_A970(v25, v26, v27, v28, v29, v30, v31, v32, v81);
    uint64_t v41 = sub_AAD8(v33, v34, v35, v36, v37, v38, v39, v40, v82, v88);
    uint64_t v49 = sub_A888(v41, v42, v43, v44, v45, v46, v47, v48, v83, v89, v94);
    uint64_t v57 = sub_A854(v49, v50, v51, v52, v53, v54, v55, v56, v84, v90, v95, v99);
    uint64_t v65 = sub_A84C(v57, v58, v59, v60, v61, v62, v63, v64, v85, v91, v96, v100, v103);
    uint64_t v73 = sub_A844(v65, v66, v67, v68, v69, v70, v71, v72, v86, v92, v97, v101, v104, v106);
    sub_A83C(v73, v74, v75, v76, v77, v78, v79, v80, v87, v93, v98, v102, v105, v107, v108);
    return sub_57E74(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_57BE0()
{
  uint64_t v1 = (void *)(v0 + 16);
  sub_20264(*(void *)(v0 + 512));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_57C20()
{
  uint64_t v1 = *(void **)(v0 + 504);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 368);
  uint64_t v5 = *(void *)(v0 + 344);
  uint64_t v6 = *(void *)(v0 + 264);
  swift_release();

  sub_26F04(v6, type metadata accessor for HealthDataLogModel);
  sub_26F04(v5, type metadata accessor for SnippetHeaderModel);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_57E30();
  sub_A760();
  sub_A8EC();
  sub_A910();
  sub_A864();
  sub_A85C();
  sub_A8F4();
  sub_A78C();
  sub_A67C();
  uint64_t v7 = sub_A7C8();
  uint64_t v15 = sub_A970(v7, v8, v9, v10, v11, v12, v13, v14, v64);
  uint64_t v23 = sub_AAD8(v15, v16, v17, v18, v19, v20, v21, v22, v65, v71);
  uint64_t v31 = sub_A888(v23, v24, v25, v26, v27, v28, v29, v30, v66, v72, v77);
  uint64_t v39 = sub_A854(v31, v32, v33, v34, v35, v36, v37, v38, v67, v73, v78, v82);
  uint64_t v47 = sub_A84C(v39, v40, v41, v42, v43, v44, v45, v46, v68, v74, v79, v83, v86);
  uint64_t v55 = sub_A844(v47, v48, v49, v50, v51, v52, v53, v54, v69, v75, v80, v84, v87, v89);
  sub_A83C(v55, v56, v57, v58, v59, v60, v61, v62, v70, v76, v81, v85, v88, v90, v91);
  return sub_57E74(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_57CE8(unsigned __int8 a1, void *a2)
{
  switch(a1)
  {
    case 0x9Bu:
      return 0x73726F6F6C66LL;
    case 0xA2u:
      uint64_t v3 = sub_57DD0(a2);
      sub_10A39C(v3, v4);
      uint64_t v2 = v5;
      swift_bridgeObjectRelease();
      break;
    case 0xADu:
      return 0x736568737570LL;
    default:
      return sub_57DD0(a2);
  }

  return v2;
}

uint64_t sub_57D88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_494C(&qword_18A448);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_57DD0(void *a1)
{
  id v1 = [a1 units];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_57E30()
{
  return swift_task_dealloc(*(void *)(v0 + 384));
}

uint64_t sub_57E74(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_57E90()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void sub_57EA0()
{
}

uint64_t sub_57EB0()
{
  return Logger.wellness.unsafeMutableAddressor();
}

uint64_t sub_57EC0()
{
  return (*(uint64_t (**)(void, void))(v0[46] + 8LL))(v0[48], v0[45]);
}

uint64_t sub_57ED0()
{
  return sub_56E38(v0, v1);
}

id sub_57EDC(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

void sub_57EE8(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_57EF4()
{
  return sub_57D88(v0, *(void *)(v1 + 120));
}

void sub_57F00(uint64_t a1, uint64_t *a2)
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_57F08( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_57F38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4) {
    goto LABEL_21;
  }
  sub_10F1C0(*(_WORD *)(a2 + 32));
  uint64_t v6 = sub_58FB4();
  if (v3 == v6 && v2 == v7)
  {
LABEL_20:
    sub_58FDC();
    goto LABEL_21;
  }

  sub_58F94(v3, v2, v6, v7);
  sub_58FE8();
  sub_6D64();
  sub_58F9C();
  if ((v3 & 1) != 0)
  {
LABEL_7:
    sub_2A184();
LABEL_21:
    sub_24A0C();
    return;
  }

  if (v4 == 1)
  {
LABEL_17:
    sub_2A184();
    goto LABEL_21;
  }

  uint64_t v9 = 17LL;
  while (1)
  {
    uint64_t v10 = v9 - 15;
    if (__OFADD__(v9 - 16, 1LL)) {
      break;
    }
    sub_10F1C0(*(_WORD *)(a2 + 2 * v9));
    uint64_t v11 = sub_58FB4();
    if (v3 == v11 && v2 == v12)
    {
      sub_2A184();
      goto LABEL_20;
    }

    uint64_t v3 = sub_58F94(v3, v2, v11, v12);
    sub_6D64();
    sub_58F9C();
    if ((v3 & 1) != 0) {
      goto LABEL_7;
    }
    ++v9;
    if (v10 == v4) {
      goto LABEL_17;
    }
  }

  __break(1u);
}

void sub_58030(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4) {
    goto LABEL_21;
  }
  sub_27CC8(*(_BYTE *)(a2 + 32));
  uint64_t v6 = sub_58FA4();
  if (v3 == v6 && v2 == v7)
  {
LABEL_20:
    sub_58FDC();
    goto LABEL_21;
  }

  sub_58F94(v3, v2, v6, v7);
  sub_58FE8();
  sub_6D64();
  sub_58F9C();
  if ((v3 & 1) != 0)
  {
LABEL_7:
    sub_2A184();
LABEL_21:
    sub_24A0C();
    return;
  }

  if (v4 == 1)
  {
LABEL_17:
    sub_2A184();
    goto LABEL_21;
  }

  uint64_t v9 = 33LL;
  while (1)
  {
    uint64_t v10 = v9 - 31;
    if (__OFADD__(v9 - 32, 1LL)) {
      break;
    }
    sub_27CC8(*(_BYTE *)(a2 + v9));
    uint64_t v11 = sub_58FA4();
    if (v3 == v11 && v2 == v12)
    {
      sub_2A184();
      goto LABEL_20;
    }

    uint64_t v3 = sub_58F94(v3, v2, v11, v12);
    sub_6D64();
    sub_58F9C();
    if ((v3 & 1) != 0) {
      goto LABEL_7;
    }
    ++v9;
    if (v10 == v4) {
      goto LABEL_17;
    }
  }

  __break(1u);
}

void sub_58128(char a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain(a2);
    uint64_t v5 = 0LL;
    uint64_t v6 = *(void *)&aCheckexicreate[8 * a1];
    uint64_t v7 = *(void *)&aStence[8 * a1];
    while (1)
    {
      uint64_t v8 = *(char *)(a2 + v5 + 32);
      uint64_t v9 = *(void *)&aCheckexicreate[8 * v8];
      if (v9 == v6 && *(void *)&aStence[8 * v8] == v7)
      {
        sub_2A184();
        sub_58F9C();
        uint64_t v12 = v7;
        goto LABEL_13;
      }

      char v11 = sub_58F94(v9, *(void *)&aStence[8 * v8], v6, v7);
      sub_58F9C();
      sub_249D4();
      if ((v11 & 1) != 0) {
        break;
      }
      if (v2 == ++v5)
      {
        sub_2A184();
        goto LABEL_14;
      }
    }

    uint64_t v12 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v12);
  }

LABEL_14:
  sub_D8FC();
}

  __break(1u);
  return result;
}

  sub_D8FC();
}

uint64_t sub_581F4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = a3[5];
  if (v7 == a1 && v8 == a2) {
    return 1LL;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0LL);
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  char v11 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v13 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    uint64_t v14 = *(v11 - 1);
    uint64_t v15 = *v11;
    BOOL v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0LL) & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v11 += 2;
    if (v13 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

BOOL sub_582B8(BOOL result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  int v3 = result;
  if (*(_BYTE *)(a2 + 32) == result) {
    return 1LL;
  }
  if (v2 == 1) {
    return 0LL;
  }
  for (uint64_t i = 33LL; ; ++i)
  {
    uint64_t v5 = i - 31;
    if (__OFADD__(i - 32, 1LL)) {
      break;
    }
    int v6 = *(unsigned __int8 *)(a2 + i);
    uint64_t result = v6 == v3;
    if (v6 == v3 || v5 == v2) {
      return result;
    }
  }

  __break(1u);
  return result;
}

void sub_58318(uint64_t a1, uint64_t a2)
{
}

void sub_58324(uint64_t a1, uint64_t a2)
{
}

void sub_58330(uint64_t a1, uint64_t a2)
{
}

void sub_5833C(uint64_t a1, uint64_t a2)
{
}

void sub_58348(unsigned __int16 a1, unsigned __int16 a2)
{
  uint64_t v3 = sub_10F1C0(a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_10F1C0(a2);
  if (v3 != v6 || v5 != v7) {
    sub_58F94(v3, v5, v6, v7);
  }
  sub_2A184();
  sub_249D4();
  sub_1EB0C();
}

void sub_583B8(uint64_t a1, uint64_t a2)
{
}

void sub_583C4(uint64_t a1, uint64_t a2)
{
}

void sub_583D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3();
  uint64_t v7 = v6;
  uint64_t v8 = ((uint64_t (*)(uint64_t))a3)(a2);
  if (v5 != v8 || v7 != v9) {
    sub_58F94(v5, v7, v8, v9);
  }
  sub_2A184();
  sub_249D4();
  sub_1EB0C();
}

void sub_58444(char a1, char a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)&aFirst_1[8 * a1];
  uint64_t v4 = qword_13A3D0[v2];
  uint64_t v5 = *(void *)&aFirst_1[8 * a2];
  uint64_t v6 = qword_13A3D0[a2];
  if (v3 != v5 || v4 != v6) {
    sub_58F94(v3, v4, v5, v6);
  }
  sub_2A184();
  sub_249D4();
  sub_1EB0C();
}

uint64_t sub_584B4(uint64_t a1, uint64_t a2)
{
  return sub_584EC( a1,  a2,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_MeasurementUnitType.DefinedValues,  &qword_18B4F0,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_MeasurementUnitType.DefinedValues);
}

uint64_t sub_584D0(uint64_t a1, uint64_t a2)
{
  return sub_584EC( a1,  a2,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_ListPosition.DefinedValues,  &qword_18B4F8,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_ListPosition.DefinedValues);
}

uint64_t sub_584EC( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  if (v13 == v11 && v14 == v12) {
    char v9 = 1;
  }
  else {
    char v9 = sub_58F94(v13, v14, v11, v12);
  }
  sub_2A184();
  sub_249D4();
  return v9 & 1;
}

uint64_t sub_585A4(uint64_t a1, uint64_t a2)
{
  return sub_584EC( a1,  a2,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_Decimal.DefinedValues,  &qword_18B4E8,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_Decimal.DefinedValues);
}

Swift::Bool __swiftcall isMedDosageUnitSynonym(userSuppliedUnit:systemSuppliedUnit:)( Swift::String userSuppliedUnit, Swift::String systemSuppliedUnit)
{
  object = systemSuppliedUnit._object;
  uint64_t countAndFlagsBits = systemSuppliedUnit._countAndFlagsBits;
  uint64_t v4 = userSuppliedUnit._object;
  uint64_t v5 = userSuppliedUnit._countAndFlagsBits;
  BOOL v6 = systemSuppliedUnit._countAndFlagsBits == 0x746163696C707061LL
    && systemSuppliedUnit._object == (void *)0xEB000000006E6F69LL;
  if (!v6 && (sub_58F84(0x746163696C707061LL, 0xEB000000006E6F69LL) & 1) == 0)
  {
    BOOL v7 = countAndFlagsBits == 7496034 && object == (void *)0xE300000000000000LL;
    if (!v7 && (sub_58F84(7496034LL, 0xE300000000000000LL) & 1) == 0)
    {
      BOOL v8 = countAndFlagsBits == 0x6764697274726163LL && object == (void *)0xE900000000000065LL;
      if (!v8 && (sub_58F84(0x6764697274726163LL, 0xE900000000000065LL) & 1) == 0)
      {
        BOOL v9 = countAndFlagsBits == 0x656369766564LL && object == (void *)0xE600000000000000LL;
        if (!v9
          && (sub_58F84(0x656369766564LL, 0xE600000000000000LL) & 1) == 0
          && (countAndFlagsBits != 1668508004 || object != (void *)0xE400000000000000LL))
        {
          char v11 = sub_58F84(1668508004LL, 0xE400000000000000LL);
          BOOL v12 = countAndFlagsBits == 1886351972 && object == (void *)0xE400000000000000LL;
          BOOL v13 = v12;
          if ((v11 & 1) == 0 && !v13 && (sub_58F84(1886351972LL, 0xE400000000000000LL) & 1) == 0)
          {
            BOOL v14 = countAndFlagsBits == 0x616D656E65LL && object == (void *)0xE500000000000000LL;
            if (!v14
              && (sub_58F84(0x616D656E65LL, 0xE500000000000000LL) & 1) == 0
              && (countAndFlagsBits != 0x656C75626F6C67LL || object != (void *)0xE700000000000000LL))
            {
              char v16 = sub_58F84(0x656C75626F6C67LL, 0xE700000000000000LL);
              BOOL v17 = countAndFlagsBits == 0x746E616C706D69LL && object == (void *)0xE700000000000000LL;
              BOOL v18 = v17;
              if ((v16 & 1) == 0 && !v18)
              {
                sub_58F84(0x746E616C706D69LL, 0xE700000000000000LL);
                sub_58FF4();
                BOOL v21 = v6 && object == v20;
                BOOL v22 = v21;
                if ((v19 & 1) == 0 && !v22)
                {
                  char v23 = sub_58F84(0x747265736E69LL, 0xE600000000000000LL);
                  BOOL v24 = countAndFlagsBits == 7629163 && object == (void *)0xE300000000000000LL;
                  BOOL v25 = v24;
                  if ((v23 & 1) == 0 && !v25)
                  {
                    sub_58F84(7629163LL, 0xE300000000000000LL);
                    sub_58FF4();
                    BOOL v28 = v6 && object == v27;
                    BOOL v29 = v28;
                    if ((v26 & 1) == 0 && !v29)
                    {
                      char v30 = sub_58F84(0x74656B636170LL, 0xE600000000000000LL);
                      BOOL v31 = countAndFlagsBits == 0x6863746170LL && object == (void *)0xE500000000000000LL;
                      BOOL v32 = v31;
                      if ((v30 & 1) == 0 && !v32)
                      {
                        sub_58F84(0x6863746170LL, 0xE500000000000000LL);
                        sub_59000();
                        BOOL v34 = v6;
                        if ((v33 & 1) == 0
                          && !v34
                          && (sub_58F84(0x6563656970LL, 0xE500000000000000LL) & 1) == 0
                          && (countAndFlagsBits != 0x656C636973706F70LL || object != (void *)0xE800000000000000LL))
                        {
                          char v36 = sub_58F84(0x656C636973706F70LL, 0xE800000000000000LL);
                          BOOL v37 = countAndFlagsBits == 0x706F6F6373LL && object == (void *)0xE500000000000000LL;
                          BOOL v38 = v37;
                          if ((v36 & 1) == 0 && !v38)
                          {
                            sub_58F84(0x706F6F6373LL, 0xE500000000000000LL);
                            sub_58FF4();
                            BOOL v41 = v6 && object == v40;
                            BOOL v42 = v41;
                            if ((v39 & 1) == 0 && !v42)
                            {
                              char v43 = sub_58F84(0x65676E6F7073LL, 0xE600000000000000LL);
                              BOOL v44 = countAndFlagsBits == 0x7961727073LL && object == (void *)0xE500000000000000LL;
                              BOOL v45 = v44;
                              if ((v43 & 1) == 0 && !v45)
                              {
                                sub_58F84(0x7961727073LL, 0xE500000000000000LL);
                                sub_59000();
                                BOOL v47 = v6;
                                if ((v46 & 1) == 0 && !v47)
                                {
                                  sub_58F84(0x6B63697473LL, 0xE500000000000000LL);
                                  sub_59000();
                                  BOOL v49 = v6;
                                  if ((v48 & 1) == 0
                                    && !v49
                                    && (sub_58F84(0x7069727473LL, 0xE500000000000000LL) & 1) == 0
                                    && (countAndFlagsBits != 0x7469736F70707573LL
                                     || object != (void *)0xEB0000000079726FLL))
                                  {
                                    sub_58F84(0x7469736F70707573LL, 0xEB0000000079726FLL);
                                    sub_58FF4();
                                    BOOL v53 = v6 && object == v52;
                                    BOOL v54 = v53;
                                    if ((v51 & 1) == 0
                                      && !v54
                                      && (sub_58F84(0x6E6F706D6174LL, 0xE600000000000000LL) & 1) == 0
                                      && (countAndFlagsBits != 0x6E656D7461657274LL
                                       || object != (void *)0xE900000000000074LL))
                                    {
                                      char v56 = sub_58F84(0x6E656D7461657274LL, 0xE900000000000074LL);
                                      BOOL v57 = countAndFlagsBits == 1953066613 && object == (void *)0xE400000000000000LL;
                                      BOOL v58 = v57;
                                      if ((v56 & 1) == 0 && !v58)
                                      {
                                        sub_58F84(1953066613LL, 0xE400000000000000LL);
                                        sub_59000();
                                        BOOL v60 = v6;
                                        if ((v59 & 1) == 0
                                          && !v60
                                          && (sub_58F84(1801677175LL, 0xE400000000000000LL) & 1) == 0)
                                        {
                                          BOOL v63 = countAndFlagsBits == 0x6974616C61686E69LL
                                             && object == (void *)0xEA00000000006E6FLL;
                                          if (v63 || (sub_58F84(0x6974616C61686E69LL, 0xEA00000000006E6FLL) & 1) != 0)
                                          {
                                            uint64_t v64 = sub_494C(&qword_18AF58);
                                            uint64_t inited = swift_initStackObject(v64, v89);
                                            *(_OWORD *)(inited + sub_46370(v0 + 16) = xmmword_13A300;
                                            *(void *)(inited + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0x6974616C61686E69LL;
                                            *(void *)(inited + 40) = 0xEA00000000006E6FLL;
                                            *(void *)(inited + 48) = 0x72656C61686E69LL;
                                            *(void *)(inited + 56) = 0xE700000000000000LL;
                                            *(void *)(inited + 64) = 1717990768LL;
                                            *(void *)(inited + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0xE400000000000000LL;
                                            sub_58FC4();
                                            *(void *)(v66 + 80) = v67;
                                            *(void *)(v66 + 88) = v68;
                                            uint64_t v69 = 6448494LL;
                                            unint64_t v70 = 0xE300000000000000LL;
LABEL_171:
                                            *(void *)(v66 + 96) = v69;
                                            *(void *)(v66 + 104) = v70;
LABEL_179:
                                            sub_581F4(v5, (uint64_t)v4, (void *)inited);
                                            sub_58F9C();
                                            goto LABEL_164;
                                          }

                                          BOOL v71 = countAndFlagsBits == 0x6F697463656A6E69LL
                                             && object == (void *)0xE90000000000006ELL;
                                          if (v71 || (sub_58F84(0x6F697463656A6E69LL, 0xE90000000000006ELL) & 1) != 0)
                                          {
                                            uint64_t v72 = sub_494C(&qword_18AF58);
                                            uint64_t v73 = swift_initStackObject(v72, v90);
                                            uint64_t inited = v73;
                                            *(_OWORD *)(v73 + sub_46370(v0 + 16) = xmmword_138D90;
                                            *(void *)(v73 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0x6F697463656A6E69LL;
                                            *(void *)(v73 + 40) = 0xE90000000000006ELL;
                                            uint64_t v74 = 1953458291LL;
                                            unint64_t v75 = 0xE400000000000000LL;
                                          }

                                          else
                                          {
                                            BOOL v76 = countAndFlagsBits == 0x65676E657A6F6CLL
                                               && object == (void *)0xE700000000000000LL;
                                            if (v76 || (sub_58F84(0x65676E657A6F6CLL, 0xE700000000000000LL) & 1) != 0)
                                            {
                                              uint64_t v77 = sub_494C(&qword_18AF58);
                                              uint64_t inited = swift_initStackObject(v77, v91);
                                              *(_OWORD *)(inited + sub_46370(v0 + 16) = xmmword_13A310;
                                              *(void *)(inited + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0x65676E657A6F6CLL;
                                              *(void *)(inited + 40) = 0xE700000000000000LL;
                                              *(void *)(inited + 48) = 1886351972LL;
                                              *(void *)(inited + 56) = 0xE400000000000000LL;
                                              *(void *)(inited + 64) = 0x6568636F7274LL;
                                              *(void *)(inited + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0xE600000000000000LL;
                                              *(void *)(inited + 80) = 0x656C6C6974736170LL;
                                              *(void *)(inited + 88) = 0xE800000000000000LL;
                                              goto LABEL_179;
                                            }

                                            BOOL v78 = countAndFlagsBits == 19565 && object == (void *)0xE200000000000000LL;
                                            if (v78 || (sub_58F84(19565LL, 0xE200000000000000LL) & 1) != 0)
                                            {
                                              uint64_t v79 = sub_494C(&qword_18AF58);
                                              uint64_t inited = swift_initStackObject(v79, v92);
                                              *(_OWORD *)(inited + sub_46370(v0 + 16) = xmmword_13A2F0;
                                              *(void *)(inited + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 19565LL;
                                              *(void *)(inited + 40) = 0xE200000000000000LL;
                                              *(void *)(inited + 48) = 0x74696C696C6C696DLL;
                                              *(void *)(inited + 56) = 0xEA00000000007265LL;
                                              *(void *)(inited + 64) = 0x74694C696C6C696DLL;
                                              *(void *)(inited + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0xEA00000000007265LL;
                                              goto LABEL_179;
                                            }

                                            BOOL v80 = countAndFlagsBits == 26477 && object == (void *)0xE200000000000000LL;
                                            if (!v80 && (sub_58F84(26477LL, 0xE200000000000000LL) & 1) == 0)
                                            {
                                              BOOL v82 = countAndFlagsBits == 0x74656C626174LL
                                                 && object == (void *)0xE600000000000000LL;
                                              if (!v82 && (sub_58F84(0x74656C626174LL, 0xE600000000000000LL) & 1) == 0)
                                              {
                                                BOOL v84 = countAndFlagsBits == 1818323318
                                                   && object == (void *)0xE400000000000000LL;
                                                if (!v84 && (sub_58F84(1818323318LL, 0xE400000000000000LL) & 1) == 0) {
                                                  goto LABEL_164;
                                                }
                                                uint64_t v85 = sub_494C(&qword_18AF58);
                                                uint64_t inited = swift_initStackObject(v85, v95);
                                                *(_OWORD *)(inited + sub_46370(v0 + 16) = xmmword_13A2F0;
                                                sub_58FC4();
                                                v86[4] = v87;
                                                v86[5] = v88;
                                                v86[6] = 6448494LL;
                                                v86[7] = 0xE300000000000000LL;
                                                v86[8] = 0x6974616C61686E69LL;
                                                v86[9] = 0xEA00000000006E6FLL;
                                                goto LABEL_179;
                                              }

                                              uint64_t v83 = sub_494C(&qword_18AF58);
                                              uint64_t v66 = swift_initStackObject(v83, v94);
                                              uint64_t inited = v66;
                                              *(_OWORD *)(v66 + sub_46370(v0 + 16) = xmmword_13A300;
                                              *(void *)(v66 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0x74656C626174LL;
                                              *(void *)(v66 + 40) = 0xE600000000000000LL;
                                              *(void *)(v66 + 48) = 6447476LL;
                                              *(void *)(v66 + 56) = 0xE300000000000000LL;
                                              *(void *)(v66 + 64) = 1819044208LL;
                                              *(void *)(v66 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 0xE400000000000000LL;
                                              *(void *)(v66 + 80) = 7364963LL;
                                              *(void *)(v66 + 88) = 0xE300000000000000LL;
                                              uint64_t v69 = 0x656C7573706163LL;
                                              unint64_t v70 = 0xE700000000000000LL;
                                              goto LABEL_171;
                                            }

                                            uint64_t v81 = sub_494C(&qword_18AF58);
                                            uint64_t v73 = swift_initStackObject(v81, v93);
                                            uint64_t inited = v73;
                                            *(_OWORD *)(v73 + sub_46370(v0 + 16) = xmmword_138D90;
                                            *(void *)(v73 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = 26477LL;
                                            *(void *)(v73 + 40) = 0xE200000000000000LL;
                                            uint64_t v74 = 0x617267696C6C696DLL;
                                            unint64_t v75 = 0xE90000000000006DLL;
                                          }

                                          *(void *)(v73 + 48) = v74;
                                          *(void *)(v73 + 56) = v75;
                                          goto LABEL_179;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  if (countAndFlagsBits != v5 || object != v4) {
    return _stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, v5, v4, 0LL);
  }
LABEL_164:
  sub_D8FC();
  return result;
}

uint64_t sub_58F6C(uint64_t a1, uint64_t a2)
{
  return sub_59018(a1, a2, (2 * a2) | 1);
}

uint64_t sub_58F78(uint64_t a1, uint64_t a2)
{
  return sub_59018(a1, a2, 2 * a2);
}

uint64_t sub_58F84(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_58F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
}

uint64_t sub_58F9C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_58FA4()
{
  return sub_27CC8(v0);
}

uint64_t sub_58FB4()
{
  return sub_10F1C0(v0);
}

  ;
}

uint64_t sub_58FDC()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_58FE8()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

  ;
}

uint64_t sub_5900C()
{
  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_59018@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(result + sub_46370(v0 + 16) = a2;
  *(void *)(result + 24) = a3;
  return result;
}

void sub_59024(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v6 = [objc_allocWithZone(SAUIAppPunchOut) init];
  URL._bridgeToObjectiveC()(v7);
  BOOL v9 = v8;
  [v6 setPunchOutUri:v8];

  id v10 = v6;
  uint64_t v11 = UUID.init()();
  uint64_t v12 = UUID.uuidString.getter(v11);
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_125B84(v12, v14, v10);

  id v15 = [v10 dictionary];
  if (v15)
  {
    char v16 = v15;
    BOOL v17 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
    id v32 = 0LL;
    id v18 = [v17 dataWithPropertyList:v16 format:200 options:0 error:&v32];
    id v19 = v32;
    if (v18)
    {
      uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
      unint64_t v22 = v21;

      Swift::String v23 = Data.base64EncodedString(options:)(0LL);
      String.toSpeakableString.getter(v23._countAndFlagsBits, v23._object);

      sub_A3CC(v20, v22);
      swift_bridgeObjectRelease(v23._object);
      uint64_t v24 = type metadata accessor for SpeakableString(0LL);
      uint64_t v25 = a1;
      uint64_t v26 = 0LL;
    }

    else
    {
      BOOL v28 = v19;
      uint64_t v29 = _convertNSErrorToError(_:)();

      swift_willThrow(v30);
      swift_errorRelease(v29);
      uint64_t v24 = type metadata accessor for SpeakableString(0LL);
      uint64_t v25 = a1;
      uint64_t v26 = 1LL;
    }

    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v25, v26, 1LL, v24);
  }

  else
  {
    uint64_t v27 = type metadata accessor for SpeakableString(0LL);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 1LL, 1LL, v27);
  }

uint64_t sub_59270(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 24) = a4;
  *(void *)(v6 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a6;
  *(_BYTE *)(v6 + 17_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7) = a3;
  *(void *)(v6 + sub_46370(v0 + 16) = a2;
  *(_BYTE *)(v6 + sub_20004(v6, v1 + 176) = a1;
  uint64_t v7 = sub_494C(&qword_189D00);
  *(void *)(v6 + 40) = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_592D8, 0LL, 0LL);
}

uint64_t sub_592D8()
{
  int v1 = *(unsigned __int8 *)(v0 + 176);
  if (((1 << (v1 + 97)) & 0x42008801) != 0)
  {
LABEL_9:
    if (qword_189AC8 != -1)
    {
      swift_once(&qword_189AC8, sub_59A10);
      LOBYTE(_s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v2, 0LL, 1LL, v1) = *(_BYTE *)(v0 + 176);
    }

    uint64_t v7 = *(void *)(v0 + 40);
    *(void *)(v0 + 48) = qword_19C248;
    uint64_t v8 = sub_27CC8(v1);
    uint64_t v10 = v9;
    sub_363E8();
    String.toSpeakableString.getter(v8, v10);
    swift_bridgeObjectRelease();
    uint64_t v11 = type metadata accessor for SpeakableString(0LL);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v7, 0LL, 1LL, v11);
    uint64_t v12 = (void *)swift_task_alloc(dword_190BBC);
    *(void *)(v0 + 56) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_59768;
    sub_59B28();
    return sub_130F90(v13, v14, v15, v16);
  }

  if (v1 == 162)
  {
    if (qword_189AC8 != -1) {
      swift_once(&qword_189AC8, sub_59A10);
    }
    *(void *)(v0 + 144) = qword_19C248;
    sub_363E8();
    BOOL v42 = (void *)sub_36B20();
    *(void *)(v0 + 15_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v42;
    *BOOL v42 = v0;
    v42[1] = sub_59954;
    sub_59B28();
    return sub_131384(v43, v44);
  }

  else
  {
    if (v1 != 173)
    {
LABEL_2:
      if ((v1 - 89) > 0x12)
      {
LABEL_12:
        switch(*(_BYTE *)(v0 + 176))
        {
          case 0x93:
            if (qword_189AC8 != -1) {
              swift_once(&qword_189AC8, sub_59A10);
            }
            *(void *)(v0 + 80) = qword_19C248;
            sub_363E8();
            BOOL v17 = (void *)sub_36B20();
            *(void *)(v0 + 88) = v17;
            sub_59AD8(v17, (uint64_t)sub_59844);
            sub_59B28();
            uint64_t result = sub_130AD0(v18, v19, v20, v21);
            break;
          case 0x96:
            if (qword_189AC8 != -1) {
              swift_once(&qword_189AC8, sub_59A10);
            }
            *(void *)(v0 + 96) = qword_19C248;
            sub_363E8();
            uint64_t v27 = (void *)sub_36B20();
            *(void *)(v0 + 104) = v27;
            sub_59AD8(v27, (uint64_t)sub_59888);
            sub_59B28();
            uint64_t result = sub_130C3C(v28, v29, v30, v31);
            break;
          case 0x97:
            if (qword_189AC8 != -1) {
              swift_once(&qword_189AC8, sub_59A10);
            }
            *(void *)(v0 + 11_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = qword_19C248;
            sub_363E8();
            id v32 = (void *)sub_36B20();
            *(void *)(v0 + 120) = v32;
            sub_59AD8(v32, (uint64_t)sub_598CC);
            sub_59B28();
            uint64_t result = sub_130D58(v33, v34, v35, v36);
            break;
          case 0x9B:
            if (qword_189AC8 != -1) {
              swift_once(&qword_189AC8, sub_59A10);
            }
            *(void *)(v0 + sub_A304(v0, v1 - 128) = qword_19C248;
            sub_363E8();
            BOOL v37 = (void *)sub_36B20();
            *(void *)(v0 + 136) = v37;
            sub_59AD8(v37, (uint64_t)sub_59910);
            sub_59B28();
            uint64_t result = sub_130E74(v38, v39, v40, v41);
            break;
          default:
            swift_task_dealloc(*(void *)(v0 + 40));
            uint64_t result = sub_59B00(0LL, *(uint64_t (**)(void))(v0 + 8));
            break;
        }

        return result;
      }

      if (((1 << (v1 - 89)) & 0x44181) == 0)
      {
        if (v1 == 105)
        {
          if (qword_189AC8 != -1) {
            swift_once(&qword_189AC8, sub_59A10);
          }
          *(void *)(v0 + 64) = qword_19C248;
          sub_363E8();
          uint64_t v2 = (void *)sub_36B20();
          *(void *)(v0 + 7_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v2;
          *uint64_t v2 = v0;
          v2[1] = sub_59800;
          sub_59B28();
          return sub_1329E0(v3, v4, v5);
        }

        goto LABEL_12;
      }

      goto LABEL_9;
    }

    if (qword_189AC8 != -1) {
      swift_once(&qword_189AC8, sub_59A10);
    }
    *(void *)(v0 + 160) = qword_19C248;
    sub_363E8();
    unint64_t v22 = (void *)sub_36B20();
    *(void *)(v0 + 168) = v22;
    sub_59AD8(v22, (uint64_t)sub_59998);
    sub_59B28();
    return sub_131E68(v23, v24, v25, v26);
  }

uint64_t sub_59768()
{
  uint64_t v2 = *v1;
  uint64_t v10 = v2;
  sub_59AF4(*(void *)(v2 + 56), &v10);
  uint64_t v3 = *(void *)(v2 + 40);
  if (v0)
  {
    swift_release();
    sub_36860();
    sub_59A88(v3);
    sub_59B28();
    return swift_task_switch(v4, v5, v6);
  }

  else
  {
    sub_59A88(*(void *)(v2 + 40));
    swift_release();
    swift_task_dealloc(*(void *)(v2 + 40));
    uint64_t v8 = sub_59B14();
    return sub_59B00(v8, v9);
  }

uint64_t sub_59800()
{
  if (v0) {
    sub_36860();
  }
  sub_59B20();
  uint64_t v3 = sub_59B14();
  return sub_59AC8(v3, v4);
}

uint64_t sub_59844()
{
  if (v0) {
    sub_36860();
  }
  sub_59B20();
  uint64_t v3 = sub_59B14();
  return sub_59AC8(v3, v4);
}

uint64_t sub_59888()
{
  if (v0) {
    sub_36860();
  }
  sub_59B20();
  uint64_t v3 = sub_59B14();
  return sub_59AC8(v3, v4);
}

uint64_t sub_598CC()
{
  if (v0) {
    sub_36860();
  }
  sub_59B20();
  uint64_t v3 = sub_59B14();
  return sub_59AC8(v3, v4);
}

uint64_t sub_59910()
{
  if (v0) {
    sub_36860();
  }
  sub_59B20();
  uint64_t v3 = sub_59B14();
  return sub_59AC8(v3, v4);
}

uint64_t sub_59954()
{
  if (v0) {
    sub_36860();
  }
  sub_59B20();
  uint64_t v3 = sub_59B14();
  return sub_59AC8(v3, v4);
}

uint64_t sub_59998()
{
  if (v0) {
    sub_36860();
  }
  sub_59B20();
  uint64_t v3 = sub_59B14();
  return sub_59AC8(v3, v4);
}

uint64_t sub_599DC()
{
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_59A10()
{
  uint64_t v0 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for WellnessLoggingCATsSimple(0LL);
  static CATOption.defaultMode.getter();
  uint64_t result = CATWrapperSimple.__allocating_init(options:globals:)(v2, 0LL);
  qword_19C248 = result;
  return result;
}

uint64_t sub_59A88(uint64_t a1)
{
  uint64_t v2 = sub_494C(&qword_189D00);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_59AC8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_59AD8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 16);
}

uint64_t sub_59AF4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_59B00(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_59B14()
{
  return v0;
}

uint64_t sub_59B20()
{
  return swift_task_dealloc(*(void *)(v0 + 40));
}

  ;
}

uint64_t type metadata accessor for WellnessUnsupportedCATs(uint64_t a1)
{
  uint64_t result = qword_18B508;
  if (!qword_18B508) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WellnessUnsupportedCATs);
  }
  return result;
}

uint64_t sub_59B74(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_19C250);
}

uint64_t sub_59BB0()
{
  return dispatch thunk of CATWrapper.execute(catId:parameters:)( 0xD000000000000027LL,  0x8000000000144830LL,  &_swiftEmptyArrayStorage);
}

uint64_t sub_59BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_59C24(a1, a2, a3);
}

uint64_t sub_59C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_494C(&qword_189CF8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_35468(a1, (uint64_t)v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t v13 = CATWrapper.init(templateDir:options:globals:)(v12, v9, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_41F24(a1);
  return v13;
}

uint64_t sub_59D24()
{
  return type metadata accessor for WellnessUnsupportedCATs(0LL);
}

void GenericBinaryButtonModel.invocationIdentifier.getter()
{
}

void GenericBinaryButtonModel.invocationIdentifier.setter(uint64_t a1, uint64_t a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

void GenericBinaryButtonModel.primaryButtonLabel.getter()
{
}

void GenericBinaryButtonModel.primaryButtonLabel.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + sub_46370(v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  sub_1EB0C();
}

void GenericBinaryButtonModel.secondaryButtonLabel.getter()
{
}

void GenericBinaryButtonModel.secondaryButtonLabel.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = a1;
  *(void *)(v2 + 40) = a2;
  sub_1EB0C();
}

uint64_t GenericBinaryButtonModel.isSmartEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t GenericBinaryButtonModel.isSmartEnabled.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 48) = result;
  return result;
}

void __swiftcall GenericBinaryButtonModel.init(invocationIdentifier:primaryButtonLabel:secondaryButtonLabel:isSmartEnabled:)( WellnessFlowPlugin::GenericBinaryButtonModel *__return_ptr retstr, Swift::String invocationIdentifier, Swift::String primaryButtonLabel, Swift::String secondaryButtonLabel, Swift::Bool isSmartEnabled)
{
  retstr->invocationIdentifier = invocationIdentifier;
  retstr->primaryButtonLabel = primaryButtonLabel;
  retstr->secondaryButtonLabel = secondaryButtonLabel;
  retstr->isSmartEnabled = isSmartEnabled;
}

uint64_t sub_59E40(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v4 = 0x8000000000144860LL;
    if (a2 == 0x8000000000144860LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x8000000000144860LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0xD000000000000012LL && a2 == 0x8000000000144880LL)
  {
    unint64_t v6 = 0x8000000000144880LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000000144880LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v7 = 0x80000000001448A0LL;
    if (a2 == 0x80000000001448A0LL) {
      goto LABEL_16;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x80000000001448A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if (a1 == 0x457472616D537369LL && a2 == 0xEE0064656C62616ELL)
  {
    swift_bridgeObjectRelease(a2);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x457472616D537369LL, 0xEE0064656C62616ELL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_59FF4()
{
  return 4LL;
}

uint64_t sub_59FFC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_5A034 + 4 * byte_13A450[a1]))( 0xD000000000000014LL,  0x8000000000144860LL);
}

uint64_t sub_5A034(uint64_t a1)
{
  return a1 - 2;
}

uint64_t sub_5A058()
{
  return 0x457472616D537369LL;
}

uint64_t sub_5A07C()
{
  return sub_59FFC(*v0);
}

uint64_t sub_5A084@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_59E40(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_5A0A8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_59FF4();
  *a1 = result;
  return result;
}

uint64_t sub_5A0CC(uint64_t a1)
{
  unint64_t v2 = sub_5A25C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_5A0F4(uint64_t a1)
{
  unint64_t v2 = sub_5A25C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GenericBinaryButtonModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_494C(&qword_18B558);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_500C(a1, v9);
  unint64_t v11 = sub_5A25C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for GenericBinaryButtonModel.CodingKeys,  &type metadata for GenericBinaryButtonModel.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *(void *)v3;
  uint64_t v13 = *(void *)(v3 + 8);
  char v24 = 0;
  sub_5A978(v12, v13, (uint64_t)&v24);
  if (!v2)
  {
    uint64_t v14 = *(void *)(v3 + 16);
    uint64_t v15 = *(void *)(v3 + 24);
    char v23 = 1;
    sub_5A978(v14, v15, (uint64_t)&v23);
    uint64_t v16 = *(void *)(v3 + 32);
    uint64_t v17 = *(void *)(v3 + 40);
    char v22 = 2;
    sub_5A978(v16, v17, (uint64_t)&v22);
    uint64_t v18 = *(unsigned __int8 *)(v3 + 48);
    char v21 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v21, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_5A25C()
{
  unint64_t result = qword_18B560;
  if (!qword_18B560)
  {
    unint64_t result = swift_getWitnessTable(&unk_13A5EC, &type metadata for GenericBinaryButtonModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18B560);
  }

  return result;
}

uint64_t GenericBinaryButtonModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_494C(&qword_18B568);
  __chkstk_darwin(v5);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_500C(a1, v6);
  unint64_t v8 = sub_5A25C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for GenericBinaryButtonModel.CodingKeys,  &type metadata for GenericBinaryButtonModel.CodingKeys,  v8,  v6,  v7);
  if (v2) {
    return sub_20300();
  }
  char v25 = 0;
  uint64_t v9 = sub_5A988((uint64_t)&v25);
  uint64_t v11 = v10;
  uint64_t v20 = v9;
  char v24 = 1;
  sub_1EC10(v9, v10);
  uint64_t v12 = sub_5A988((uint64_t)&v24);
  uint64_t v21 = v13;
  uint64_t v19 = v12;
  char v23 = 2;
  sub_1EC10(v12, v13);
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)(&v23, v5);
  uint64_t v18 = v14;
  char v22 = 3;
  sub_1EC10(v17, v14);
  char v15 = KeyedDecodingContainer.decode(_:forKey:)(&v22, v5);
  sub_5A968();
  sub_20300();
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v21);
  uint64_t result = sub_1EBF4();
  *(void *)a2 = v20;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + sub_46370(v0 + 16) = v19;
  *(void *)(a2 + 24) = v21;
  *(void *)(a2 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v17;
  *(void *)(a2 + 40) = v18;
  *(_BYTE *)(a2 + 48) = v15 & 1;
  return result;
}

double sub_5A4BC@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + sub_46370(v0 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v7;
    *(_BYTE *)(a2 + 48) = v8;
  }

  return result;
}

uint64_t sub_5A508(void *a1)
{
  return GenericBinaryButtonModel.encode(to:)(a1);
}

uint64_t destroy for GenericBinaryButtonModel(void *a1)
{
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t initializeWithCopy for GenericBinaryButtonModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + sub_46370(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for GenericBinaryButtonModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + sub_46370(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for GenericBinaryButtonModel(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + sub_46370(v0 + 16) = v3;
  *(_OWORD *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GenericBinaryButtonModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + sub_46370(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericBinaryButtonModel(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 49))
    {
      LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericBinaryButtonModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 49) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for GenericBinaryButtonModel()
{
  return &type metadata for GenericBinaryButtonModel;
}

uint64_t getEnumTagSinglePayload for GenericBinaryButtonModel.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for GenericBinaryButtonModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_5A828 + 4 * byte_13A459[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_5A85C + 4 * byte_13A454[v4]))();
}

uint64_t sub_5A85C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_5A864(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x5A86CLL);
  }
  return result;
}

uint64_t sub_5A878(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x5A880LL);
  }
  *(_BYTE *)__n128 result = a2 + 3;
  return result;
}

uint64_t sub_5A884(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_5A88C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GenericBinaryButtonModel.CodingKeys()
{
  return &type metadata for GenericBinaryButtonModel.CodingKeys;
}

unint64_t sub_5A8AC()
{
  unint64_t result = qword_18B570;
  if (!qword_18B570)
  {
    unint64_t result = swift_getWitnessTable(&unk_13A5C4, &type metadata for GenericBinaryButtonModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18B570);
  }

  return result;
}

unint64_t sub_5A8EC()
{
  unint64_t result = qword_18B578;
  if (!qword_18B578)
  {
    unint64_t result = swift_getWitnessTable(&unk_13A534, &type metadata for GenericBinaryButtonModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18B578);
  }

  return result;
}

unint64_t sub_5A92C()
{
  unint64_t result = qword_18B580[0];
  if (!qword_18B580[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_13A55C, &type metadata for GenericBinaryButtonModel.CodingKeys);
    atomic_store(result, qword_18B580);
  }

  return result;
}

uint64_t sub_5A968()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_5A978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_5A988(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_5A998()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 88));
}

ValueMetadata *type metadata accessor for GenericErrorFlow()
{
  return &type metadata for GenericErrorFlow;
}

void *sub_5A9B0@<X0>(void *__src@<X0>, void *a2@<X8>)
{
  return memcpy(a2, __src, 0xA0uLL);
}

uint64_t sub_5A9C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v3);
  sub_ADD58(a1);
  type metadata accessor for WellnessCATPatternsExecutor(0LL);
  sub_36E30();
  uint64_t v4 = sub_5B2C4();
  a1[8] = v1;
  a1[9] = (uint64_t)&off_17DC48;
  a1[5] = v4;
  type metadata accessor for WellnessLoggingCATPatternsExecutor(0LL);
  sub_36E30();
  uint64_t v5 = sub_5B2C4();
  a1[13] = v1;
  a1[14] = (uint64_t)&off_1806B8;
  a1[10] = v5;
  type metadata accessor for WellnessQueryingCATPatternsExecutor(0LL);
  sub_36E30();
  uint64_t result = sub_5B2C4();
  a1[18] = v1;
  a1[19] = (uint64_t)&off_17D960;
  a1[15] = result;
  return result;
}

uint64_t sub_5AA84(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_A178();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for GenericErrorFlow, v4);
}

uint64_t sub_5AAC4(uint64_t a1)
{
  v2[13] = a1;
  v2[14] = v1;
  uint64_t v3 = type metadata accessor for FlowUnhandledReason(0LL);
  v2[15] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[16] = v4;
  v2[17] = sub_A5C0(v4);
  uint64_t v5 = type metadata accessor for DialogPhase(0LL);
  v2[18] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[19] = v6;
  v2[20] = sub_D8CC(v6);
  v2[21] = sub_A5B8();
  uint64_t v7 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[22] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[23] = v8;
  v2[24] = sub_A5C0(v8);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  v2[25] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[26] = v10;
  v2[27] = sub_D8CC(v10);
  v2[28] = sub_A5B8();
  v2[29] = sub_A5B8();
  return swift_task_switch(sub_5AB84, 0LL, 0LL);
}

uint64_t sub_5AB84(uint64_t a1)
{
  uint64_t v2 = (void *)v1[29];
  uint64_t v3 = v1[25];
  uint64_t v4 = v1[26];
  uint64_t v5 = Logger.wellness.unsafeMutableAddressor(a1);
  v1[30] = v5;
  sub_A5DC(v5, (uint64_t)(v1 + 2));
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v4 + 16);
  v1[31] = v6;
  uint64_t v7 = v6(v2, v5, v3);
  uint64_t v8 = v2;
  Logger.logObject.getter(v7);
  os_log_type_t v9 = sub_A898();
  if (sub_46614(v9))
  {
    uint64_t v10 = v1[29];
    uint64_t v11 = v1[25];
    uint64_t v12 = v1[26];
    uint64_t v13 = (_DWORD *)sub_A5E8(12LL);
    uint64_t v14 = sub_A5E8(32LL);
    uint64_t v21 = v14;
    *uint64_t v13 = 136315138;
    v1[12] = sub_39178(0xD000000000000010LL, 0x800000000013A640LL, &v21);
    sub_A738((uint64_t)(v1 + 12), (uint64_t)(v1 + 13));
    sub_5B2B0(&dword_0, v15, v16, "Executing %s");
    sub_5B2DC();
    sub_5050(v14);
    sub_5050((uint64_t)v13);

    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  }

  else
  {
    uint64_t v10 = v1[29];
    uint64_t v11 = v1[25];
    uint64_t v18 = v1[26];

    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  }

  v17(v10, v11);
  v1[32] = v17;
  sub_500C((void *)(v1[14] + 40LL), *(void *)(v1[14] + 64LL));
  uint64_t v19 = (void *)swift_task_alloc(dword_18CCDC);
  v1[33] = v19;
  void *v19 = v1;
  v19[1] = sub_5AD18;
  return sub_764C8();
}

uint64_t sub_5AD18(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 264);
  *(void *)(*v2 + 27_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_5AEF4;
  }

  else
  {
    *(void *)(v4 + 280) = a1;
    uint64_t v6 = sub_5AD8C;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_5AD8C()
{
  uint64_t v1 = *(void **)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 152);
  uint64_t v7 = *(void **)(v0 + 112);
  static DialogPhase.error.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v3, v5);
  OutputGenerationManifest.init(dialogPhase:_:)(v4, sub_A633C, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
  id v8 = [v1 patternId];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v11 = v10;

  OutputGenerationManifest.responseViewId.setter(v9, v11);
  uint64_t v12 = v7[3];
  uint64_t v13 = v7[4];
  sub_500C(v7, v12);
  uint64_t v14 = dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)( v1,  v2,  v12,  v13);
  static ExecuteResponse.complete(next:)(v14);
  swift_release();

  uint64_t v15 = *(void *)(v0 + 192);
  uint64_t v16 = *(void *)(v0 + 168);
  uint64_t v18 = *(void *)(v0 + 224);
  uint64_t v17 = *(void *)(v0 + 232);
  uint64_t v19 = *(void *)(v0 + 216);
  uint64_t v20 = *(void *)(v0 + 160);
  uint64_t v21 = *(void *)(v0 + 136);
  sub_5B2D0(*(void *)(v0 + 184));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_5AEF4()
{
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = *(void (**)(void *, uint64_t, uint64_t))(v0 + 248);
  uint64_t v4 = *(void **)(v0 + 224);
  uint64_t v5 = *(void *)(v0 + 200);
  sub_A5DC(v2, v0 + 40);
  v3(v4, v2, v5);
  swift_errorRetain(v1);
  uint64_t v6 = swift_errorRetain(v1);
  uint64_t v7 = v4;
  Logger.logObject.getter(v6);
  os_log_type_t v8 = sub_A898();
  if (sub_46614(v8))
  {
    uint64_t v9 = *(void *)(v0 + 272);
    uint64_t v10 = (_DWORD *)sub_A5E8(12LL);
    uint64_t v11 = (void *)sub_A5E8(8LL);
    *uint64_t v10 = 138412290;
    swift_errorRetain(v9);
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(void *)(v0 + 88) = v12;
    sub_A738(v0 + 88, v0 + 96);
    *uint64_t v11 = v12;
    sub_5B2A8();
    sub_5B2A8();
    sub_5B2B0(&dword_0, v13, v14, "%@");
    sub_494C(&qword_189CB8);
    sub_5B2DC();
    sub_5050((uint64_t)v11);
    sub_5050((uint64_t)v10);

    sub_5B2A8();
  }

  else
  {
    sub_5B2A8();
    sub_5B2A8();
    sub_5B2A8();
  }

  uint64_t v15 = *(uint64_t (**)(os_log_s *, uint64_t, uint64_t))(v0 + 248);
  uint64_t v16 = *(void *)(v0 + 240);
  uint64_t v17 = *(os_log_s **)(v0 + 216);
  uint64_t v18 = *(void *)(v0 + 200);
  (*(void (**)(void, uint64_t))(v0 + 256))(*(void *)(v0 + 224), v18);
  sub_A5DC(v16, v0 + 64);
  uint64_t v19 = v15(v17, v16, v18);
  uint64_t v20 = v17;
  Logger.logObject.getter(v19);
  os_log_type_t v21 = sub_A898();
  if (os_log_type_enabled(v17, v21))
  {
    char v22 = (uint8_t *)sub_A5E8(2LL);
    *(_WORD *)char v22 = 0;
    _os_log_impl(&dword_0, v20, v21, "Sending to info domains because dialog pattern failed", v22, 2u);
    sub_5050((uint64_t)v22);
  }

  char v23 = *(void (**)(uint64_t, uint64_t))(v0 + 256);
  uint64_t v24 = *(void *)(v0 + 216);
  uint64_t v25 = *(void *)(v0 + 200);
  uint64_t v27 = *(void *)(v0 + 128);
  uint64_t v26 = *(void *)(v0 + 136);
  uint64_t v28 = *(void *)(v0 + 120);

  v23(v24, v25);
  (*(void (**)(uint64_t, void, uint64_t))(v27 + 104))( v26,  enum case for FlowUnhandledReason.needsInfoDomainFallback(_:),  v28);
  static ExecuteResponse.unhandled(reason:isComplete:)(v26, 0LL);
  uint64_t v29 = *(void *)(v0 + 136);
  uint64_t v31 = *(void *)(v0 + 224);
  uint64_t v30 = *(void *)(v0 + 232);
  uint64_t v32 = *(void *)(v0 + 216);
  uint64_t v33 = *(void *)(v0 + 192);
  uint64_t v35 = *(void *)(v0 + 160);
  uint64_t v34 = *(void *)(v0 + 168);
  sub_5B2D0(*(void *)(v0 + 128));
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_5B188(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_18B59C);
  *(void *)(v1 + sub_46370(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_A108;
  return sub_5AAC4(a1);
}

uint64_t sub_5B1D8(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  return _swift_stdlib_bridgeErrorToNSError(v1);
}

void sub_5B1F8(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *a1;
  uint64_t v9 = *a1 + 8;
  if (v6) {
    uint64_t v11 = v6;
  }
  else {
    uint64_t v11 = 0LL;
  }
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v8, v9);
  *a1 = v9;
  uint64_t v10 = *a2;
  if (*a2)
  {
    *uint64_t v10 = v7;
    *a2 = v10 + 1;
  }

  else
  {
  }

uint64_t sub_5B2A8()
{
  return swift_errorRelease(v0);
}

void sub_5B2B0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_5B2C4()
{
  return CATWrapper.__allocating_init(options:globals:)(v0, 0LL);
}

uint64_t sub_5B2D0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_5B2DC()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t type metadata accessor for WellnessQueryingCATs(uint64_t a1)
{
  uint64_t result = qword_18B5A0;
  if (!qword_18B5A0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WellnessQueryingCATs);
  }
  return result;
}

uint64_t sub_5B320(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_19C260);
}

uint64_t sub_5B35C()
{
  return type metadata accessor for WellnessQueryingCATs(0LL);
}

uint64_t BodyMassQueryModel.averageValue.getter()
{
  uint64_t v1 = sub_5E1F8();
  return sub_27A9C(v0 + *(int *)(v1 + 20));
}

uint64_t type metadata accessor for BodyMassQueryModel(uint64_t a1)
{
  uint64_t result = qword_18B670;
  if (!qword_18B670) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BodyMassQueryModel);
  }
  return result;
}

void BodyMassQueryModel.averageValue.setter()
{
  uint64_t v0 = sub_5E1F8();
  sub_27A40(*(int *)(v0 + 20));
  sub_1EB0C();
}

uint64_t (*BodyMassQueryModel.averageValue.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t BodyMassQueryModel.maxValue.getter()
{
  uint64_t v1 = sub_5E1F8();
  return sub_27A9C(v0 + *(int *)(v1 + 24));
}

void BodyMassQueryModel.maxValue.setter()
{
  uint64_t v0 = sub_5E1F8();
  sub_27A40(*(int *)(v0 + 24));
  sub_1EB0C();
}

uint64_t (*BodyMassQueryModel.maxValue.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t BodyMassQueryModel.minValue.getter()
{
  uint64_t v1 = sub_5E1F8();
  return sub_27A9C(v0 + *(int *)(v1 + 28));
}

void BodyMassQueryModel.minValue.setter()
{
  uint64_t v0 = sub_5E1F8();
  sub_27A40(*(int *)(v0 + 28));
  sub_1EB0C();
}

uint64_t (*BodyMassQueryModel.minValue.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t BodyMassQueryModel.value.getter()
{
  uint64_t v1 = sub_5E1F8();
  return sub_27A9C(v0 + *(int *)(v1 + 32));
}

void BodyMassQueryModel.value.setter()
{
  uint64_t v0 = sub_5E1F8();
  sub_27A40(*(int *)(v0 + 32));
  sub_1EB0C();
}

uint64_t (*BodyMassQueryModel.value.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BodyMassQueryModel.dateLabel.getter()
{
  uint64_t v1 = sub_5E1F8();
  sub_5E258(v0 + *(int *)(v1 + 36), v2, &qword_189D00);
  sub_A890();
}

void BodyMassQueryModel.dateLabel.setter()
{
  uint64_t v1 = sub_5E1F8();
  sub_5E244(v1, v0 + *(int *)(v1 + 36), &qword_189D00);
  sub_A890();
}

uint64_t (*BodyMassQueryModel.dateLabel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BodyMassQueryModel.averageValueString.getter()
{
  uint64_t v0 = sub_5E1F8();
  sub_27A30(*(int *)(v0 + 40));
  sub_1EB8C();
  sub_A890();
}

void BodyMassQueryModel.averageValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_5E1F8();
  sub_27AB4(*(int *)(v5 + 40));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*BodyMassQueryModel.averageValueString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BodyMassQueryModel.maxValueString.getter()
{
  uint64_t v0 = sub_5E1F8();
  sub_27A30(*(int *)(v0 + 44));
  sub_1EB8C();
  sub_A890();
}

void BodyMassQueryModel.maxValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_5E1F8();
  sub_27AB4(*(int *)(v5 + 44));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*BodyMassQueryModel.maxValueString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BodyMassQueryModel.minValueString.getter()
{
  uint64_t v0 = sub_5E1F8();
  sub_27A30(*(int *)(v0 + 48));
  sub_1EB8C();
  sub_A890();
}

void BodyMassQueryModel.minValueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_5E1F8();
  sub_27AB4(*(int *)(v5 + 48));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*BodyMassQueryModel.minValueString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BodyMassQueryModel.valueString.getter()
{
  uint64_t v0 = sub_5E1F8();
  sub_27A30(*(int *)(v0 + 52));
  sub_1EB8C();
  sub_A890();
}

void BodyMassQueryModel.valueString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_5E1F8();
  sub_27AB4(*(int *)(v5 + 52));
  *uint64_t v2 = a1;
  v2[1] = a2;
  sub_1EB0C();
}

uint64_t (*BodyMassQueryModel.valueString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BodyMassQueryModel.unitString.getter()
{
  uint64_t v1 = sub_5E1F8();
  sub_5E258(v0 + *(int *)(v1 + 56), v2, &qword_189D00);
  sub_A890();
}

void BodyMassQueryModel.unitString.setter()
{
  uint64_t v1 = sub_5E1F8();
  sub_5E244(v1, v0 + *(int *)(v1 + 56), &qword_189D00);
  sub_A890();
}

uint64_t (*BodyMassQueryModel.unitString.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

void BodyMassQueryModel.snippetHeaderModel.getter()
{
  uint64_t v1 = sub_5E1F8();
  sub_5E258(v0 + *(int *)(v1 + 60), v2, &qword_18A1A8);
  sub_A890();
}

void BodyMassQueryModel.snippetHeaderModel.setter()
{
  uint64_t v1 = sub_5E1F8();
  sub_5E244(v1, v0 + *(int *)(v1 + 60), &qword_18A1A8);
  sub_A890();
}

uint64_t (*BodyMassQueryModel.snippetHeaderModel.modify())(void)
{
  return PhoneRingsSnippet.body.getter;
}

uint64_t sub_5B8C8(uint64_t a1, unint64_t a2)
{
  BOOL v3 = a1 == 0x68636E7550707061LL && a2 == 0xEB0000000074756FLL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x68636E7550707061LL, 0xEB0000000074756FLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  BOOL v6 = a1 == 0x5665676172657661LL && a2 == 0xEC00000065756C61LL;
  if (v6
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x5665676172657661LL, 0xEC00000065756C61LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  BOOL v7 = a1 == 0x65756C615678616DLL && a2 == 0xE800000000000000LL;
  if (v7
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65756C615678616DLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2LL;
  }

  BOOL v8 = a1 == 0x65756C61566E696DLL && a2 == 0xE800000000000000LL;
  if (v8
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65756C61566E696DLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3LL;
  }

  BOOL v9 = a1 == 0x65756C6176LL && a2 == 0xE500000000000000LL;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6176LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 4LL;
  }

  BOOL v10 = a1 == 0x6562614C65746164LL && a2 == 0xE90000000000006CLL;
  if (v10
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6562614C65746164LL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 5LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v11 = 0x80000000001448F0LL;
    if (a2 == 0x80000000001448F0LL) {
      goto LABEL_41;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x80000000001448F0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
LABEL_41:
    swift_bridgeObjectRelease(v11);
    return 6LL;
  }

  BOOL v12 = a1 == 0x65756C615678616DLL && a2 == 0xEE00676E69727453LL;
  if (v12
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65756C615678616DLL, 0xEE00676E69727453LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 7LL;
  }

  else
  {
    BOOL v13 = a1 == 0x65756C61566E696DLL && a2 == 0xEE00676E69727453LL;
    if (v13
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65756C61566E696DLL, 0xEE00676E69727453LL, a1, a2, 0LL) & 1) != 0)
    {
      swift_bridgeObjectRelease(a2);
      return 8LL;
    }

    else
    {
      BOOL v14 = a1 == 0x72745365756C6176LL && a2 == 0xEB00000000676E69LL;
      if (v14
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x72745365756C6176LL, 0xEB00000000676E69LL, a1, a2, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(a2);
        return 9LL;
      }

      else
      {
        BOOL v15 = a1 == 0x6972745374696E75LL && a2 == 0xEA0000000000676ELL;
        if (v15
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6972745374696E75LL, 0xEA0000000000676ELL, a1, a2, 0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease(a2);
          return 10LL;
        }

        else if (a1 == 0xD000000000000012LL && a2 == 0x8000000000141630LL)
        {
          swift_bridgeObjectRelease(0x8000000000141630LL);
          return 11LL;
        }

        else
        {
          char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000000141630LL, a1, a2, 0LL);
          swift_bridgeObjectRelease(a2);
          if ((v16 & 1) != 0) {
            return 11LL;
          }
          else {
            return 12LL;
          }
        }
      }
    }
  }

uint64_t sub_5BD60()
{
  return 12LL;
}

uint64_t sub_5BD68(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_5BDA0 + 4 * byte_13A720[a1]))( 0xD000000000000012LL,  0x80000000001448F0LL);
}

uint64_t sub_5BDA0()
{
  return 0x68636E7550707061LL;
}

uint64_t sub_5BDC0()
{
  return 0x5665676172657661LL;
}

uint64_t sub_5BDE0()
{
  return 0x65756C615678616DLL;
}

uint64_t sub_5BE08()
{
  return 0x65756C6176LL;
}

uint64_t sub_5BE1C()
{
  return 0x6562614C65746164LL;
}

uint64_t sub_5BE38()
{
  return 0x65756C615678616DLL;
}

uint64_t sub_5BE68()
{
  return 0x72745365756C6176LL;
}

uint64_t sub_5BE88()
{
  return 0x6972745374696E75LL;
}

  ;
}

uint64_t sub_5BEB8()
{
  return sub_5BD68(*v0);
}

uint64_t sub_5BEC0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_5B8C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_5BEE4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_5BD60();
  *a1 = result;
  return result;
}

uint64_t sub_5BF08(uint64_t a1)
{
  unint64_t v2 = sub_5C25C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_5BF30(uint64_t a1)
{
  unint64_t v2 = sub_5C25C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void BodyMassQueryModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_494C(&qword_18B5F0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  BOOL v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_500C(a1, v9);
  unint64_t v11 = sub_5C25C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for BodyMassQueryModel.CodingKeys,  &type metadata for BodyMassQueryModel.CodingKeys,  v11,  v9,  v10);
  char v47 = 0;
  uint64_t v12 = type metadata accessor for AppPunchout(0LL);
  sub_A410( &qword_18AA98,  (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchout,  (uint64_t)&protocol conformance descriptor for AppPunchout);
  sub_5E21C(v3, (uint64_t)&v47, v5, v12);
  if (!v2)
  {
    uint64_t Model = (int *)type metadata accessor for BodyMassQueryModel(0LL);
    uint64_t v14 = sub_27A9C(v3 + Model[5]);
    char v46 = 1;
    sub_27A20(v14, v15, (uint64_t)&v46);
    uint64_t v16 = sub_27A9C(v3 + Model[6]);
    char v45 = 2;
    sub_27A20(v16, v17, (uint64_t)&v45);
    uint64_t v18 = sub_27A9C(v3 + Model[7]);
    char v44 = 3;
    sub_27A20(v18, v19, (uint64_t)&v44);
    uint64_t v20 = sub_27A9C(v3 + Model[8]);
    char v43 = 4;
    sub_27A20(v20, v21, (uint64_t)&v43);
    uint64_t v22 = v3 + Model[9];
    char v42 = 5;
    uint64_t v23 = type metadata accessor for SpeakableString(0LL);
    sub_A410( &qword_18AAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
    sub_5E21C(v22, (uint64_t)&v42, v5, v23);
    uint64_t v24 = sub_5E260(Model[10]);
    char v41 = 6;
    sub_27A10(v24, v25, (uint64_t)&v41);
    uint64_t v26 = sub_5E260(Model[11]);
    char v40 = 7;
    sub_27A10(v26, v27, (uint64_t)&v40);
    uint64_t v28 = sub_5E260(Model[12]);
    char v39 = 8;
    sub_27A10(v28, v29, (uint64_t)&v39);
    uint64_t v30 = sub_5E260(Model[13]);
    char v38 = 9;
    sub_27A10(v30, v31, (uint64_t)&v38);
    uint64_t v32 = v3 + Model[14];
    char v37 = 10;
    sub_5E21C(v32, (uint64_t)&v37, v5, v23);
    uint64_t v33 = v3 + Model[15];
    char v36 = 11;
    uint64_t v34 = type metadata accessor for SnippetHeaderModel(0LL);
    sub_A410( &qword_18AAA8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    sub_5E21C(v33, (uint64_t)&v36, v5, v34);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_1C6D8();
}

unint64_t sub_5C25C()
{
  unint64_t result = qword_18B5F8;
  if (!qword_18B5F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13A8EC, &type metadata for BodyMassQueryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18B5F8);
  }

  return result;
}

void BodyMassQueryModel.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v82 = a2;
  sub_494C(&qword_18A1A8);
  sub_6D20();
  __chkstk_darwin(v3);
  sub_6D30();
  uint64_t v84 = v4;
  sub_494C(&qword_189D00);
  sub_6D20();
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v93 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v92 = (char *)&v79 - v8;
  sub_494C(&qword_18A1A0);
  sub_6D20();
  __chkstk_darwin(v9);
  sub_6D30();
  uint64_t v94 = v10;
  uint64_t v11 = sub_494C(&qword_18B600);
  uint64_t v95 = *(void *)(v11 - 8);
  uint64_t v96 = v11;
  __chkstk_darwin(v11);
  sub_6D30();
  uint64_t v100 = v12;
  uint64_t Model = (int *)type metadata accessor for BodyMassQueryModel(0LL);
  sub_6D20();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for AppPunchout(0LL);
  sub_41C80();
  uint64_t v91 = v17;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v18, v19, v20, v17);
  sub_5E24C(Model[5]);
  uint64_t v90 = v21;
  *(_BYTE *)(v21 + 8) = 1;
  sub_5E24C(Model[6]);
  uint64_t v89 = v22;
  *(_BYTE *)(v22 + 8) = 1;
  sub_5E24C(Model[7]);
  uint64_t v88 = v23;
  *(_BYTE *)(v23 + 8) = 1;
  sub_5E24C(Model[8]);
  uint64_t v86 = v24;
  *(_BYTE *)(v24 + 8) = 1;
  uint64_t v25 = (uint64_t)&v16[Model[9]];
  uint64_t v26 = type metadata accessor for SpeakableString(0LL);
  uint64_t v85 = v25;
  sub_41C80();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v27, v28, v29, v26);
  uint64_t v30 = &v16[Model[10]];
  *(void *)uint64_t v30 = 0LL;
  *((void *)v30 + 1) = 0LL;
  uint64_t v31 = &v16[Model[11]];
  *(void *)uint64_t v31 = 0LL;
  *((void *)v31 + 1) = 0LL;
  uint64_t v32 = &v16[Model[12]];
  *(void *)uint64_t v32 = 0LL;
  *((void *)v32 + 1) = 0LL;
  uint64_t v33 = (uint64_t *)&v16[Model[13]];
  *uint64_t v33 = 0LL;
  v33[1] = 0LL;
  uint64_t v83 = &v16[Model[14]];
  sub_41C80();
  uint64_t v87 = v26;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v34, v35, v36, v26);
  uint64_t v37 = Model[15];
  uint64_t v99 = v16;
  uint64_t v38 = (uint64_t)&v16[v37];
  uint64_t v39 = type metadata accessor for SnippetHeaderModel(0LL);
  sub_41C80();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v40, v41, v42, v39);
  char v43 = a1;
  uint64_t v44 = a1[3];
  uint64_t v45 = a1[4];
  uint64_t v98 = v43;
  sub_500C(v43, v44);
  unint64_t v46 = sub_5C25C();
  char v47 = v97;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BodyMassQueryModel.CodingKeys,  &type metadata for BodyMassQueryModel.CodingKeys,  v46,  v44,  v45);
  if (v47)
  {
    uint64_t v78 = (uint64_t)v99;
  }

  else
  {
    uint64_t v97 = v30;
    uint64_t v81 = v31;
    BOOL v80 = v32;
    uint64_t v48 = (uint64_t)v92;
    uint64_t v79 = v38;
    uint64_t v49 = (uint64_t)v93;
    uint64_t v50 = v95;
    char v112 = 0;
    sub_A410( &qword_18AAB8,  (uint64_t (*)(uint64_t))&type metadata accessor for AppPunchout,  (uint64_t)&protocol conformance descriptor for AppPunchout);
    uint64_t v51 = v94;
    sub_5E238(v91, (uint64_t)&v112, v96, v91);
    sub_24D88(v51, (uint64_t)v99, &qword_18A1A0);
    char v111 = 1;
    uint64_t v52 = sub_5E200((uint64_t)&v111);
    sub_5E228(v52, v53);
    char v110 = 2;
    uint64_t v54 = sub_5E200((uint64_t)&v110);
    sub_5E228(v54, v55);
    char v109 = 3;
    uint64_t v56 = sub_5E200((uint64_t)&v109);
    sub_5E228(v56, v57);
    char v108 = 4;
    uint64_t v58 = sub_5E200((uint64_t)&v108);
    sub_5E228(v58, v59);
    char v107 = 5;
    sub_A410( &qword_18AAC0,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
    uint64_t v61 = v60;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v87, &v107, v96, v87);
    sub_24D88(v48, v85, &qword_189D00);
    char v106 = 6;
    uint64_t v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v106, v96);
    uint64_t v94 = v61;
    BOOL v63 = (uint64_t *)v97;
    uint64_t v65 = v64;
    swift_bridgeObjectRelease(*((void *)v97 + 1));
    *BOOL v63 = v62;
    v63[1] = v65;
    char v105 = 7;
    uint64_t v66 = sub_5E20C((uint64_t)&v105);
    uint64_t v68 = v67;
    uint64_t v69 = (uint64_t *)v81;
    swift_bridgeObjectRelease(*((void *)v81 + 1));
    *uint64_t v69 = v66;
    v69[1] = v68;
    v104[0] = 8;
    uint64_t v70 = sub_5E20C((uint64_t)v104);
    uint64_t v72 = v71;
    uint64_t v73 = (uint64_t *)v80;
    swift_bridgeObjectRelease(*((void *)v80 + 1));
    uint64_t *v73 = v70;
    v73[1] = v72;
    char v103 = 9;
    uint64_t v74 = sub_5E20C((uint64_t)&v103);
    uint64_t v76 = v75;
    swift_bridgeObjectRelease(v33[1]);
    *uint64_t v33 = v74;
    v33[1] = v76;
    char v102 = 10;
    sub_5E238(v87, (uint64_t)&v102, v96, v87);
    sub_24D88(v49, (uint64_t)v83, &qword_189D00);
    char v101 = 11;
    sub_A410( &qword_18AAC8,  type metadata accessor for SnippetHeaderModel,  (uint64_t)&protocol conformance descriptor for SnippetHeaderModel);
    uint64_t v77 = v96;
    sub_5E238(v39, (uint64_t)&v101, v96, v39);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v74, v77);
    uint64_t v78 = (uint64_t)v99;
    sub_24D88(v84, v79, &qword_18A1A8);
    sub_5C890(v78, v82);
  }

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v98);
  sub_182B4(v78, type metadata accessor for BodyMassQueryModel);
  sub_1C6D8();
}

uint64_t sub_5C890(uint64_t a1, uint64_t a2)
{
  uint64_t Model = type metadata accessor for BodyMassQueryModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Model - 8) + 16LL))(a2, a1, Model);
  return a2;
}

void sub_5C8D4()
{
}

void sub_5C900()
{
}

void sub_5C92C(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_5C940(void *a1)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for BodyMassQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for AppPunchout(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_494C(&qword_18A1A0);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = (char *)a1 + v10;
    BOOL v13 = (char *)a2 + v10;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = (char *)a1 + v11;
    uint64_t v15 = (char *)a2 + v11;
    *(void *)uint64_t v14 = *(void *)v15;
    v14[8] = v15[8];
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (char *)a1 + v16;
    uint64_t v19 = (char *)a2 + v16;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = (char *)a1 + v17;
    uint64_t v21 = (char *)a2 + v17;
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    uint64_t v22 = a3[9];
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = type metadata accessor for SpeakableString(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1LL, v25))
    {
      uint64_t v26 = sub_494C(&qword_189D00);
      memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16LL))(v23, v24, v25);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0LL, 1LL, v25);
    }

    uint64_t v27 = a3[10];
    uint64_t v28 = a3[11];
    uint64_t v29 = (uint64_t *)((char *)a1 + v27);
    uint64_t v30 = (uint64_t *)((char *)a2 + v27);
    uint64_t v31 = v30[1];
    *uint64_t v29 = *v30;
    v29[1] = v31;
    uint64_t v32 = (uint64_t *)((char *)a1 + v28);
    uint64_t v33 = (uint64_t *)((char *)a2 + v28);
    uint64_t v34 = v33[1];
    *uint64_t v32 = *v33;
    v32[1] = v34;
    uint64_t v35 = a3[12];
    uint64_t v36 = a3[13];
    uint64_t v37 = (uint64_t *)((char *)a1 + v35);
    uint64_t v38 = (uint64_t *)((char *)a2 + v35);
    uint64_t v39 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v39;
    uint64_t v40 = (uint64_t *)((char *)a1 + v36);
    uint64_t v41 = (uint64_t *)((char *)a2 + v36);
    uint64_t v42 = v41[1];
    *uint64_t v40 = *v41;
    v40[1] = v42;
    uint64_t v43 = a3[14];
    uint64_t v44 = (char *)a1 + v43;
    uint64_t v45 = (char *)a2 + v43;
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v42);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v45, 1LL, v25))
    {
      uint64_t v46 = sub_494C(&qword_189D00);
      memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16LL))(v44, v45, v25);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v44, 0LL, 1LL, v25);
    }

    uint64_t v47 = a3[15];
    uint64_t v48 = (char *)a1 + v47;
    uint64_t v49 = (char *)a2 + v47;
    uint64_t v50 = type metadata accessor for SnippetHeaderModel(0LL);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v49, 1LL, v50))
    {
      uint64_t v51 = sub_494C(&qword_18A1A8);
      memcpy(v48, v49, *(void *)(*(void *)(v51 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16LL))(v48, v49, v25);
      uint64_t v52 = *(int *)(v50 + 20);
      char v53 = &v48[v52];
      uint64_t v54 = &v49[v52];
      uint64_t v55 = *((void *)v54 + 1);
      *(void *)char v53 = *(void *)v54;
      *((void *)v53 + 1) = v55;
      uint64_t v56 = *(int *)(v50 + 24);
      char v57 = &v48[v56];
      uint64_t v58 = &v49[v56];
      uint64_t v59 = *((void *)v58 + 1);
      *(void *)char v57 = *(void *)v58;
      *((void *)v57 + 1) = v59;
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRetain(v59);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v48, 0LL, 1LL, v50);
    }
  }

  return a1;
}

uint64_t destroy for BodyMassQueryModel(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for AppPunchout(0LL);
  uint64_t v5 = a1 + a2[9];
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[11] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[12] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[13] + 8));
  uint64_t v7 = a1 + a2[14];
  uint64_t v8 = a1 + a2[15];
  uint64_t v9 = type metadata accessor for SnippetHeaderModel(0LL);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, 1LL, v9);
  if (!(_DWORD)result)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v8, v6);
    swift_bridgeObjectRelease(*(void *)(v8 + *(int *)(v9 + 20) + 8));
    return swift_bridgeObjectRelease(*(void *)(v8 + *(int *)(v9 + 24) + 8));
  }

  return result;
}

char *initializeWithCopy for BodyMassQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  BOOL v13 = &a2[v9];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1LL, v23))
  {
    uint64_t v24 = sub_494C(&qword_189D00);
    memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16LL))(v21, v22, v23);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0LL, 1LL, v23);
  }

  uint64_t v25 = a3[10];
  uint64_t v26 = a3[11];
  uint64_t v27 = &a1[v25];
  uint64_t v28 = &a2[v25];
  uint64_t v29 = *((void *)v28 + 1);
  *(void *)uint64_t v27 = *(void *)v28;
  *((void *)v27 + 1) = v29;
  uint64_t v30 = &a1[v26];
  uint64_t v31 = &a2[v26];
  uint64_t v32 = *((void *)v31 + 1);
  *(void *)uint64_t v30 = *(void *)v31;
  *((void *)v30 + 1) = v32;
  uint64_t v33 = a3[12];
  uint64_t v34 = a3[13];
  uint64_t v35 = &a1[v33];
  uint64_t v36 = &a2[v33];
  uint64_t v37 = *((void *)v36 + 1);
  *(void *)uint64_t v35 = *(void *)v36;
  *((void *)v35 + 1) = v37;
  uint64_t v38 = &a1[v34];
  uint64_t v39 = &a2[v34];
  uint64_t v40 = *((void *)v39 + 1);
  *(void *)uint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = v40;
  uint64_t v41 = a3[14];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v40);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v43, 1LL, v23))
  {
    uint64_t v44 = sub_494C(&qword_189D00);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16LL))(v42, v43, v23);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v42, 0LL, 1LL, v23);
  }

  uint64_t v45 = a3[15];
  uint64_t v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  uint64_t v48 = type metadata accessor for SnippetHeaderModel(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v47, 1LL, v48))
  {
    uint64_t v49 = sub_494C(&qword_18A1A8);
    memcpy(v46, v47, *(void *)(*(void *)(v49 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16LL))(v46, v47, v23);
    uint64_t v50 = *(int *)(v48 + 20);
    uint64_t v51 = &v46[v50];
    uint64_t v52 = &v47[v50];
    uint64_t v53 = *((void *)v52 + 1);
    *(void *)uint64_t v51 = *(void *)v52;
    *((void *)v51 + 1) = v53;
    uint64_t v54 = *(int *)(v48 + 24);
    uint64_t v55 = &v46[v54];
    uint64_t v56 = &v47[v54];
    uint64_t v57 = *((void *)v56 + 1);
    *(void *)uint64_t v55 = *(void *)v56;
    *((void *)v55 + 1) = v57;
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v57);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v46, 0LL, 1LL, v48);
  }

  return a1;
}

char *assignWithCopy for BodyMassQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  BOOL v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  v12[8] = v13[8];
  *(void *)uint64_t v12 = v14;
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[7];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)uint64_t v20 = v22;
  uint64_t v23 = a3[8];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = *(void *)v25;
  v24[8] = v25[8];
  *(void *)uint64_t v24 = v26;
  uint64_t v27 = a3[9];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = type metadata accessor for SpeakableString(0LL);
  int v31 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v28, 1LL, v30);
  int v32 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v29, 1LL, v30);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16LL))(v28, v29, v30);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v28, 0LL, 1LL, v30);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v33 = *(void *)(v30 - 8);
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v28, v30);
LABEL_12:
    uint64_t v34 = sub_494C(&qword_189D00);
    memcpy(v28, v29, *(void *)(*(void *)(v34 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v33 + 24))(v28, v29, v30);
LABEL_13:
  uint64_t v35 = a3[10];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  *(void *)uint64_t v36 = *(void *)v37;
  uint64_t v38 = *((void *)v37 + 1);
  uint64_t v39 = *((void *)v36 + 1);
  *((void *)v36 + 1) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  uint64_t v40 = a3[11];
  uint64_t v41 = &a1[v40];
  uint64_t v42 = &a2[v40];
  *(void *)uint64_t v41 = *(void *)v42;
  uint64_t v43 = *((void *)v42 + 1);
  uint64_t v44 = *((void *)v41 + 1);
  *((void *)v41 + 1) = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  uint64_t v45 = a3[12];
  uint64_t v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  *(void *)uint64_t v46 = *(void *)v47;
  uint64_t v48 = *((void *)v47 + 1);
  uint64_t v49 = *((void *)v46 + 1);
  *((void *)v46 + 1) = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease(v49);
  uint64_t v50 = a3[13];
  uint64_t v51 = &a1[v50];
  uint64_t v52 = &a2[v50];
  *(void *)uint64_t v51 = *(void *)v52;
  uint64_t v53 = *((void *)v52 + 1);
  uint64_t v54 = *((void *)v51 + 1);
  *((void *)v51 + 1) = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v54);
  uint64_t v55 = a3[14];
  uint64_t v56 = &a1[v55];
  uint64_t v57 = &a2[v55];
  int v58 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v55], 1LL, v30);
  int v59 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v57, 1LL, v30);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16LL))(v56, v57, v30);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v56, 0LL, 1LL, v30);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v60 = *(void *)(v30 - 8);
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v56, v30);
LABEL_18:
    uint64_t v61 = sub_494C(&qword_189D00);
    memcpy(v56, v57, *(void *)(*(void *)(v61 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v60 + 24))(v56, v57, v30);
LABEL_19:
  uint64_t v62 = a3[15];
  BOOL v63 = &a1[v62];
  uint64_t v64 = &a2[v62];
  uint64_t v65 = type metadata accessor for SnippetHeaderModel(0LL);
  int v66 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v63, 1LL, v65);
  int v67 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v64, 1LL, v65);
  if (!v66)
  {
    if (!v67)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 24LL))(v63, v64, v30);
      uint64_t v78 = *(int *)(v65 + 20);
      uint64_t v79 = &v63[v78];
      BOOL v80 = &v64[v78];
      *(void *)uint64_t v79 = *(void *)v80;
      uint64_t v81 = *((void *)v80 + 1);
      uint64_t v82 = *((void *)v79 + 1);
      *((void *)v79 + 1) = v81;
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRelease(v82);
      uint64_t v83 = *(int *)(v65 + 24);
      uint64_t v84 = &v63[v83];
      uint64_t v85 = &v64[v83];
      *(void *)uint64_t v84 = *(void *)v85;
      uint64_t v86 = *((void *)v85 + 1);
      uint64_t v87 = *((void *)v84 + 1);
      *((void *)v84 + 1) = v86;
      swift_bridgeObjectRetain(v86);
      swift_bridgeObjectRelease(v87);
      return a1;
    }

    sub_182B4((uint64_t)v63, type metadata accessor for SnippetHeaderModel);
    goto LABEL_24;
  }

  if (v67)
  {
LABEL_24:
    uint64_t v76 = sub_494C(&qword_18A1A8);
    memcpy(v63, v64, *(void *)(*(void *)(v76 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16LL))(v63, v64, v30);
  uint64_t v68 = *(int *)(v65 + 20);
  uint64_t v69 = &v63[v68];
  uint64_t v70 = &v64[v68];
  *(void *)uint64_t v69 = *(void *)v70;
  uint64_t v71 = *((void *)v70 + 1);
  *((void *)v69 + 1) = v71;
  uint64_t v72 = *(int *)(v65 + 24);
  uint64_t v73 = &v63[v72];
  uint64_t v74 = &v64[v72];
  *(void *)uint64_t v73 = *(void *)v74;
  uint64_t v75 = *((void *)v74 + 1);
  *((void *)v73 + 1) = v75;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRetain(v75);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v63, 0LL, 1LL, v65);
  return a1;
}

char *initializeWithTake for BodyMassQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  BOOL v13 = &a2[v9];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = type metadata accessor for SpeakableString(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1LL, v23))
  {
    uint64_t v24 = sub_494C(&qword_189D00);
    memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32LL))(v21, v22, v23);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0LL, 1LL, v23);
  }

  uint64_t v25 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(_OWORD *)&a1[v25] = *(_OWORD *)&a2[v25];
  uint64_t v26 = a3[13];
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  *(_OWORD *)&a1[v26] = *(_OWORD *)&a2[v26];
  uint64_t v27 = a3[14];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v27], 1LL, v23))
  {
    uint64_t v30 = sub_494C(&qword_189D00);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32LL))(v28, v29, v23);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v28, 0LL, 1LL, v23);
  }

  uint64_t v31 = a3[15];
  int v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v34 = type metadata accessor for SnippetHeaderModel(0LL);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v33, 1LL, v34))
  {
    uint64_t v35 = sub_494C(&qword_18A1A8);
    memcpy(v32, v33, *(void *)(*(void *)(v35 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32LL))(v32, v33, v23);
    *(_OWORD *)&v32[*(int *)(v34 + 20)] = *(_OWORD *)&v33[*(int *)(v34 + 20)];
    *(_OWORD *)&v32[*(int *)(v34 + 24)] = *(_OWORD *)&v33[*(int *)(v34 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v32, 0LL, 1LL, v34);
  }

  return a1;
}

char *assignWithTake for BodyMassQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppPunchout(0LL);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_494C(&qword_18A1A0);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  BOOL v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)BOOL v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = &a1[v12];
  uint64_t v16 = &a2[v12];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = a3[7];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v17];
  uint64_t v20 = &a2[v17];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = &a1[v18];
  uint64_t v22 = &a2[v18];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = a3[9];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = type metadata accessor for SpeakableString(0LL);
  int v27 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1LL, v26);
  int v28 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1LL, v26);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32LL))(v24, v25, v26);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0LL, 1LL, v26);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v29 = *(void *)(v26 - 8);
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v24, v26);
LABEL_12:
    uint64_t v30 = sub_494C(&qword_189D00);
    memcpy(v24, v25, *(void *)(*(void *)(v30 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v29 + 40))(v24, v25, v26);
LABEL_13:
  uint64_t v31 = a3[10];
  int v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v35 = *(void *)v33;
  uint64_t v34 = *((void *)v33 + 1);
  uint64_t v36 = *((void *)v32 + 1);
  *(void *)int v32 = v35;
  *((void *)v32 + 1) = v34;
  swift_bridgeObjectRelease(v36);
  uint64_t v37 = a3[11];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  uint64_t v41 = *(void *)v39;
  uint64_t v40 = *((void *)v39 + 1);
  uint64_t v42 = *((void *)v38 + 1);
  *(void *)uint64_t v38 = v41;
  *((void *)v38 + 1) = v40;
  swift_bridgeObjectRelease(v42);
  uint64_t v43 = a3[12];
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &a2[v43];
  uint64_t v47 = *(void *)v45;
  uint64_t v46 = *((void *)v45 + 1);
  uint64_t v48 = *((void *)v44 + 1);
  *(void *)uint64_t v44 = v47;
  *((void *)v44 + 1) = v46;
  swift_bridgeObjectRelease(v48);
  uint64_t v49 = a3[13];
  uint64_t v50 = &a1[v49];
  uint64_t v51 = &a2[v49];
  uint64_t v53 = *(void *)v51;
  uint64_t v52 = *((void *)v51 + 1);
  uint64_t v54 = *((void *)v50 + 1);
  *(void *)uint64_t v50 = v53;
  *((void *)v50 + 1) = v52;
  swift_bridgeObjectRelease(v54);
  uint64_t v55 = a3[14];
  uint64_t v56 = &a1[v55];
  uint64_t v57 = &a2[v55];
  int v58 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v55], 1LL, v26);
  int v59 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v57, 1LL, v26);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32LL))(v56, v57, v26);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v56, 0LL, 1LL, v26);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v60 = *(void *)(v26 - 8);
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v56, v26);
LABEL_18:
    uint64_t v61 = sub_494C(&qword_189D00);
    memcpy(v56, v57, *(void *)(*(void *)(v61 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v60 + 40))(v56, v57, v26);
LABEL_19:
  uint64_t v62 = a3[15];
  BOOL v63 = &a1[v62];
  uint64_t v64 = &a2[v62];
  uint64_t v65 = type metadata accessor for SnippetHeaderModel(0LL);
  int v66 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v63, 1LL, v65);
  int v67 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v64, 1LL, v65);
  if (!v66)
  {
    if (!v67)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 40LL))(v63, v64, v26);
      uint64_t v70 = *(int *)(v65 + 20);
      uint64_t v71 = &v63[v70];
      uint64_t v72 = &v64[v70];
      uint64_t v74 = *(void *)v72;
      uint64_t v73 = *((void *)v72 + 1);
      uint64_t v75 = *((void *)v71 + 1);
      *(void *)uint64_t v71 = v74;
      *((void *)v71 + 1) = v73;
      swift_bridgeObjectRelease(v75);
      uint64_t v76 = *(int *)(v65 + 24);
      uint64_t v77 = &v63[v76];
      uint64_t v78 = &v64[v76];
      uint64_t v80 = *(void *)v78;
      uint64_t v79 = *((void *)v78 + 1);
      uint64_t v81 = *((void *)v77 + 1);
      *(void *)uint64_t v77 = v80;
      *((void *)v77 + 1) = v79;
      swift_bridgeObjectRelease(v81);
      return a1;
    }

    sub_182B4((uint64_t)v63, type metadata accessor for SnippetHeaderModel);
    goto LABEL_24;
  }

  if (v67)
  {
LABEL_24:
    uint64_t v68 = sub_494C(&qword_18A1A8);
    memcpy(v63, v64, *(void *)(*(void *)(v68 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32LL))(v63, v64, v26);
  *(_OWORD *)&v63[*(int *)(v65 + 20)] = *(_OWORD *)&v64[*(int *)(v65 + 20)];
  *(_OWORD *)&v63[*(int *)(v65 + 24)] = *(_OWORD *)&v64[*(int *)(v65 + 24)];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v63, 0LL, 1LL, v65);
  return a1;
}

uint64_t getEnumTagSinglePayload for BodyMassQueryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_5DD48);
}

uint64_t sub_5DD48(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_494C(&qword_18A1A0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = a1;
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, a2, v7);
  }

  uint64_t v9 = sub_494C(&qword_189D00);
  if (*(_DWORD *)(*(void *)(v9 - 8) + 84LL) == (_DWORD)a2)
  {
    uint64_t v7 = v9;
    uint64_t v10 = a3[9];
LABEL_12:
    uint64_t v8 = a1 + v10;
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, a2, v7);
  }

  if ((_DWORD)a2 != 2147483646)
  {
    uint64_t v7 = sub_494C(&qword_18A1A8);
    uint64_t v10 = a3[15];
    goto LABEL_12;
  }

  unint64_t v11 = *(void *)(a1 + a3[10] + 8);
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  int v12 = v11 - 1;
  if (v12 < 0) {
    int v12 = -1;
  }
  return (v12 + 1);
}

uint64_t storeEnumTagSinglePayload for BodyMassQueryModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5DE30);
}

void sub_5DE30(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_494C(&qword_18A1A0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v11 = sub_494C(&qword_189D00);
    if (*(_DWORD *)(*(void *)(v11 - 8) + 84LL) == a3)
    {
      uint64_t v9 = v11;
      uint64_t v12 = a4[9];
    }

    else
    {
      if (a3 == 2147483646)
      {
        *(void *)(a1 + a4[10] + 8) = a2;
        sub_1EB0C();
        return;
      }

      uint64_t v9 = sub_494C(&qword_18A1A8);
      uint64_t v12 = a4[15];
    }

    uint64_t v10 = a1 + v12;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v10, a2, a2, v9);
}

void sub_5DEF4(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    v8[1] = "\t";
    v8[2] = "\t";
    v8[3] = "\t";
    v8[4] = "\t";
    sub_27758( 319LL,  (unint64_t *)&qword_18AB40,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString);
    if (v5 <= 0x3F)
    {
      uint64_t v9 = *(void *)(v4 - 8) + 64LL;
      uint64_t v10 = &unk_13A810;
      uint64_t v11 = &unk_13A810;
      uint64_t v12 = &unk_13A810;
      BOOL v13 = &unk_13A810;
      uint64_t v14 = v9;
      sub_27758(319LL, (unint64_t *)&qword_18AB48, type metadata accessor for SnippetHeaderModel);
      if (v7 <= 0x3F)
      {
        uint64_t v15 = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 12LL, v8, a1 + 16);
      }
    }
  }

uint64_t getEnumTagSinglePayload for BodyMassQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF5)
  {
    if (a2 + 11 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 11) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 12;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for BodyMassQueryModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF4) {
    return ((uint64_t (*)(void))((char *)&loc_5E0B8 + 4 * byte_13A731[v4]))();
  }
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_5E0EC + 4 * byte_13A72C[v4]))();
}

uint64_t sub_5E0EC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_5E0F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x5E0FCLL);
  }
  return result;
}

uint64_t sub_5E108(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x5E110LL);
  }
  *(_BYTE *)uint64_t result = a2 + 11;
  return result;
}

uint64_t sub_5E114(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_5E11C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BodyMassQueryModel.CodingKeys()
{
  return &type metadata for BodyMassQueryModel.CodingKeys;
}

unint64_t sub_5E13C()
{
  unint64_t result = qword_18B6D0;
  if (!qword_18B6D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_13A8C4, &type metadata for BodyMassQueryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18B6D0);
  }

  return result;
}

unint64_t sub_5E17C()
{
  unint64_t result = qword_18B6D8;
  if (!qword_18B6D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_13A834, &type metadata for BodyMassQueryModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18B6D8);
  }

  return result;
}

unint64_t sub_5E1BC()
{
  unint64_t result = qword_18B6E0;
  if (!qword_18B6E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_13A85C, &type metadata for BodyMassQueryModel.CodingKeys);
    atomic_store(result, &qword_18B6E0);
  }

  return result;
}

uint64_t sub_5E1F8()
{
  return type metadata accessor for BodyMassQueryModel(0LL);
}

uint64_t sub_5E200(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, *(void *)(v1 - 136));
}

uint64_t sub_5E20C(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, *(void *)(v1 - 136));
}

uint64_t sub_5E21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_5E228(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t sub_5E238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4);
}

void sub_5E244(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_5E24C(uint64_t a1@<X8>)
{
  *(void *)(v1 + a1) = 0LL;
}

void sub_5E258(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_5E260@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + a1);
}

void *sub_5E26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = a3;
  uint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    uint64_t v5 = 4LL;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      BOOL v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1LL)) {
        break;
      }
      id v9 = [v6 id];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      uint64_t v12 = v11;

      v17[2] = v10;
      v17[3] = v12;
      v17[0] = a2;
      v17[1] = v18;
      unint64_t v13 = sub_B6D8();
      LOBYTE(v9) = StringProtocol.contains<A>(_:)(v17, &type metadata for String, &type metadata for String, v13, v13);
      swift_bridgeObjectRelease(v12);
      if ((v9 & 1) != 0)
      {
        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRelease(a1);
        return v7;
      }

      ++v5;
      if (v8 == v4) {
        goto LABEL_17;
      }
    }

    __break(1u);
LABEL_13:
    if (a1 < 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

uint64_t sub_5E408(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + sub_46370(v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return sub_5F0F0((uint64_t)sub_5E418);
}

uint64_t sub_5E418()
{
  if (qword_189AD8 != -1) {
    swift_once(&qword_189AD8, sub_5EB08);
  }
  uint64_t v1 = (void *)swift_task_alloc(dword_18B0A4);
  *(void *)(v0 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_5E48C;
  return sub_3CC80();
}

uint64_t sub_5E48C()
{
  *(void *)(v2 + 40) = v1;
  *(void *)(v2 + 48) = v0;
  sub_36900(v3);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_5E4D0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  id v3 = [*(id *)(v0 + 40) dialog];
  unint64_t v4 = sub_5EBA0();
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  swift_bridgeObjectRetain(v2);
  id v6 = sub_5E26C(v5, v1, v2);
  swift_bridgeObjectRelease(v5);
  BOOL v7 = *(void **)(v0 + 40);
  if (v6)
  {
    id v8 = [v6 fullPrint];
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v11 = v10;
  }

  else
  {

    uint64_t v9 = 0LL;
    uint64_t v11 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v9, v11);
}

uint64_t sub_5E5BC()
{
  uint64_t v1 = sub_5F0E0();
  return sub_5F07C(v1, v2, v3);
}

uint64_t sub_5E5E4(uint64_t a1, uint64_t a2)
{
  _OWORD v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = sub_494C(&qword_189D00);
  v2[4] = sub_A5C0(*(void *)(v3 - 8));
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_5E628()
{
  if (qword_189AD8 != -1) {
    swift_once(&qword_189AD8, sub_5EB08);
  }
  uint64_t v1 = v0[4];
  String.toSpeakableString.getter(v0[2], v0[3]);
  uint64_t v2 = type metadata accessor for SpeakableString(0LL);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0LL, 1LL, v2);
  uint64_t v3 = (void *)swift_task_alloc(dword_18B09C);
  v0[5] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_5E6D0;
  return sub_3CB90(v0[4]);
}

uint64_t sub_5E6D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v2 + 40LL);
  *(void *)(*(void *)v2 + 48LL) = a1;
  sub_36900(v3);
  if (v1) {
    swift_errorRelease(v1);
  }
  sub_5F130();
  sub_A964();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_5E748()
{
  id v3 = [*(id *)(v2 + 48) dialog];
  unint64_t v4 = sub_5F108();
  sub_5F0FC(v4);
  sub_5F15C();
  if (v0 >> 62)
  {
    sub_5F098();
    uint64_t v7 = sub_5F138();
    sub_249D4();
    if (v7) {
      goto LABEL_3;
    }
LABEL_5:
    id v8 = *(void **)(v2 + 48);
    sub_249D4();

    goto LABEL_6;
  }

LABEL_3:
  sub_5F0AC();
  sub_370B0();
  uint64_t v5 = sub_249D4();
  id v6 = sub_5693C(v5, "fullPrint");
  sub_5F148();
  sub_5F140();
  sub_5F114();

LABEL_6:
  swift_task_dealloc(*(void *)(v2 + 32));
  uint64_t v9 = sub_5F120();
  return sub_5F088(v9, v10, v11);
}

  sub_5F0AC();
  sub_370B0();
  uint64_t v5 = sub_249D4();
  id v6 = sub_5693C(v5, "fullPrint");
  sub_5F148();
  sub_5F140();
  sub_5F114();

LABEL_6:
  uint64_t v9 = sub_5F120();
  return sub_5F088(v9, v10, v11);
}

  sub_5F0AC();
  sub_370B0();
  uint64_t v5 = sub_249D4();
  id v6 = sub_5693C(v5, "fullPrint");
  sub_5F148();
  sub_5F140();
  sub_5F114();

LABEL_6:
  uint64_t v9 = *(void *)(v2 + 32);
  swift_task_dealloc(*(void *)(v2 + 40));
  swift_task_dealloc(v9);
  uint64_t v10 = sub_5F120();
  return sub_5F088(v10, v11, v12);
}

  sub_398E0(0LL, (a1 & 0xC000000000000001LL) == 0, a1);
  if ((a1 & 0xC000000000000001LL) != 0) {
    return (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
  }
  else {
    return *(id *)(a1 + 32);
  }
}

  swift_release();
  return v53;
}

uint64_t sub_5E81C()
{
  uint64_t v1 = sub_5F0E0();
  return sub_5F07C(v1, v2, v3);
}

uint64_t sub_5E844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[3] = a2;
  v4[4] = a3;
  v4[2] = a1;
  uint64_t v5 = type metadata accessor for DialogPhase(0LL);
  v4[5] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[6] = v6;
  v4[7] = sub_D8CC(v6);
  v4[8] = swift_task_alloc(v3);
  uint64_t v7 = type metadata accessor for OutputGenerationManifest(0LL);
  void v4[9] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[10] = v8;
  v4[11] = sub_A5C0(v8);
  sub_A964();
  return sub_A5D0();
}

uint64_t sub_5E8B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = v8[7];
  uint64_t v9 = v8[8];
  uint64_t v11 = v8[5];
  uint64_t v12 = v8[6];
  unint64_t v13 = (void *)v8[4];
  static DialogPhase.completion.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v10, v9, v11);
  OutputGenerationManifest.init(dialogPhase:_:)(v10, sub_A633C, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v9, v11);
  id v14 = [v13 catId];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  uint64_t v17 = v16;

  OutputGenerationManifest.responseViewId.setter(v15, v17);
  if (qword_189AE0 != -1) {
    swift_once(&qword_189AE0, sub_5EBDC);
  }
  uint64_t v18 = (void *)v8[4];
  uint64_t v19 = qword_19C298;
  uint64_t v20 = unk_19C2A0;
  sub_500C(qword_19C280, qword_19C298);
  uint64_t v21 = sub_494C(&qword_18A460);
  uint64_t v22 = swift_allocObject(v21, 40LL, 7LL);
  *(_OWORD *)(v22 + sub_46370(v0 + 16) = xmmword_138BA0;
  *(void *)(v22 + 3_s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2) = v18;
  uint64_t v29 = v22;
  specialized Array._endMutation()(v22, v23, v24);
  v8[12] = v29;
  uint64_t v25 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)[1];
  id v26 = v18;
  int v27 = (void *)swift_task_alloc(v25);
  v8[13] = v27;
  *int v27 = v8;
  v27[1] = sub_5EA48;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)( v8[2],  v8[3],  v29,  v8[11],  v19,  v20);
}

uint64_t sub_5EA48()
{
  return sub_A5D0();
}

uint64_t sub_5EA94()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 56);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 80) + 8LL))(v1, *(void *)(v0 + 72));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_5EAF4(uint64_t a1)
{
  return sub_5EB1C( a1,  (void (*)(void))type metadata accessor for WellnessQueryingCATsSimple,  &qword_19C270);
}

uint64_t sub_5EB08(uint64_t a1)
{
  return sub_5EB1C(a1, (void (*)(void))type metadata accessor for WellnessCATsSimple, &qword_19C278);
}

uint64_t sub_5EB1C(uint64_t a1, void (*a2)(void), uint64_t *a3)
{
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2(0LL);
  static CATOption.defaultMode.getter();
  uint64_t result = CATWrapperSimple.__allocating_init(options:globals:)(v6, 0LL);
  *a3 = result;
  return result;
}

unint64_t sub_5EBA0()
{
  unint64_t result = qword_18B6F0;
  if (!qword_18B6F0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___DialogElement);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_18B6F0);
  }

  return result;
}