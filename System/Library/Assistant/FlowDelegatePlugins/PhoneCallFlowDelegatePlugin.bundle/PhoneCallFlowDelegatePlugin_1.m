uint64_t PhoneContactHeader.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_608B0 + 4 * byte_31F590[a1]))( 0x6C646E7542707061LL,  0xEB00000000644965LL);
}

uint64_t sub_608B0()
{
  return 0x49746361746E6F63LL;
}

uint64_t sub_608CC()
{
  return 0x4E79616C70736964LL;
}

uint64_t sub_608EC()
{
  return 0x656C646E6168LL;
}

uint64_t sub_60900()
{
  return 0x5074737269467369LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PhoneContactHeader.CodingKeys()
{
  return PhoneContactHeader.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PhoneContactHeader.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = PhoneContactHeader.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneContactHeader.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneContactHeader.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PhoneContactHeader.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneContactHeader.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  unint64_t v11 = lazy protocol witness table accessor for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_3F6EE0, &unk_3F6EE0, v11, v9, v10);
  uint64_t v12 = *(void *)v3;
  uint64_t v13 = *(void *)(v3 + 8);
  char v27 = 0;
  OUTLINED_FUNCTION_1_13(v12, v13, (uint64_t)&v27);
  if (!v2)
  {
    uint64_t v14 = *(void *)(v3 + 16);
    uint64_t v15 = *(void *)(v3 + 24);
    char v26 = 1;
    OUTLINED_FUNCTION_1_13(v14, v15, (uint64_t)&v26);
    uint64_t v16 = *(void *)(v3 + 32);
    uint64_t v17 = *(void *)(v3 + 40);
    char v25 = 2;
    OUTLINED_FUNCTION_1_13(v16, v17, (uint64_t)&v25);
    uint64_t v18 = *(void *)(v3 + 48);
    uint64_t v19 = *(void *)(v3 + 56);
    char v24 = 3;
    OUTLINED_FUNCTION_1_13(v18, v19, (uint64_t)&v24);
    uint64_t v20 = *(unsigned __int8 *)(v3 + 64);
    char v23 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v23, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t lazy protocol witness table accessor for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PhoneContactHeader.CodingKeys, &unk_3F6EE0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PhoneContactHeader.CodingKeys, &unk_3F6EE0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PhoneContactHeader.CodingKeys, &unk_3F6EE0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PhoneContactHeader.CodingKeys, &unk_3F6EE0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys);
  }

  return result;
}

void __swiftcall PhoneContactHeader.init(appBundleId:contactId:displayName:handle:isFirstPartyApp:)( PhoneCallFlowDelegatePlugin::PhoneContactHeader *__return_ptr retstr, Swift::String appBundleId, Swift::String contactId, Swift::String displayName, Swift::String handle, Swift::Bool isFirstPartyApp)
{
  retstr->appBundleId = appBundleId;
  retstr->contactId = contactId;
  retstr->displayName = displayName;
  retstr->handle = handle;
  retstr->isFirstPartyApp = isFirstPartyApp;
}

uint64_t PhoneContactHeader.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneContactHeader.CodingKeys>);
  __chkstk_darwin();
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  unint64_t v8 = lazy protocol witness table accessor for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_3F6EE0, &unk_3F6EE0, v8, v6, v7);
  if (v2) {
    return OUTLINED_FUNCTION_11_12();
  }
  char v29 = 0;
  uint64_t v9 = OUTLINED_FUNCTION_3_14((uint64_t)&v29);
  uint64_t v11 = v10;
  uint64_t v23 = v9;
  char v28 = 1;
  LogPrefix.tags.getter(v9, v10);
  uint64_t v12 = OUTLINED_FUNCTION_3_14((uint64_t)&v28);
  uint64_t v24 = v13;
  uint64_t v22 = v12;
  char v27 = 2;
  LogPrefix.tags.getter(v12, v13);
  uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)(&v27, v5);
  char v26 = 3;
  uint64_t v15 = v14;
  LogPrefix.tags.getter(v21, v14);
  uint64_t v19 = OUTLINED_FUNCTION_3_14((uint64_t)&v26);
  uint64_t v20 = v16;
  char v25 = 4;
  LogPrefix.tags.getter(v19, v16);
  char v17 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
  OUTLINED_FUNCTION_0_12();
  OUTLINED_FUNCTION_11_12();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_13_1();
  swift_bridgeObjectRelease();
  uint64_t result = OUTLINED_FUNCTION_4_1();
  *(void *)a2 = v23;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v22;
  *(void *)(a2 + 24) = v24;
  *(void *)(a2 + 32) = v21;
  *(void *)(a2 + 40) = v15;
  *(void *)(a2 + 48) = v19;
  *(void *)(a2 + 56) = v20;
  *(_BYTE *)(a2 + 64) = v17 & 1;
  return result;
}

void *protocol witness for Decodable.init(from:) in conformance PhoneContactHeader@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)PhoneContactHeader.init(from:)(a1, (uint64_t)__src);
  if (!v2) {
    return memcpy(a2, __src, 0x41uLL);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PhoneContactHeader(void *a1)
{
  return PhoneContactHeader.encode(to:)(a1);
}

uint64_t destroy for PhoneContactHeader(void *a1)
{
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for PhoneContactHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for PhoneContactHeader(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

void *__swift_memcpy65_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x41uLL);
}

uint64_t assignWithTake for PhoneContactHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhoneContactHeader(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 65))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhoneContactHeader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 65) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PhoneContactHeader()
{
  return &type metadata for PhoneContactHeader;
}

uint64_t storeEnumTagSinglePayload for PhoneContactHeader.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_6111C + 4 * byte_31F59A[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_61150 + 4 * byte_31F595[v4]))();
}

uint64_t sub_61150(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_61158(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x61160LL);
  }
  return result;
}

uint64_t sub_6116C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x61174LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_61178(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_61180(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PhoneContactHeader.CodingKeys()
{
  return &unk_3F6EE0;
}

uint64_t OUTLINED_FUNCTION_0_12()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_1_13(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

void OUTLINED_FUNCTION_2_9()
{
  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_3_14(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t LogPrefix.tags.getter(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t OUTLINED_FUNCTION_10_10()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 88));
}

uint64_t OUTLINED_FUNCTION_11_12()
{
  return __swift_destroy_boxed_opaque_existential_1(v0);
}

void static ContactNeedsValueGuardFlow.FlowState.== infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v83 = a1;
  v84 = (char *)a2;
  uint64_t v76 = type metadata accessor for UUID(0LL);
  uint64_t v74 = *(void *)(v76 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_16_5(v6, (uint64_t)v71);
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v81 = v7;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  uint64_t v73 = v8;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  uint64_t v77 = (uint64_t)&v71 - v9;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  v78 = (char *)&v71 - v10;
  uint64_t v79 = OUTLINED_FUNCTION_31_7();
  uint64_t v11 = *(void *)(v79 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_25_6();
  uint64_t v14 = v12 - v13;
  __chkstk_darwin();
  uint64_t v16 = (char *)&v71 - v15;
  uint64_t v18 = type metadata accessor for ContactNeedsValueGuardFlow.FlowState(0LL, a3, a4, v17);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_25_6();
  uint64_t v22 = v20 - v21;
  __chkstk_darwin();
  uint64_t v24 = (char *)&v71 - v23;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v18, v18, 0LL, 0LL);
  uint64_t v82 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v26 = __chkstk_darwin();
  char v28 = (char *)&v71 - v27;
  char v29 = (char *)&v71 + *(int *)(v26 + 48) - v27;
  uint64_t v80 = v19;
  OUTLINED_FUNCTION_19_6((uint64_t)&v71 - v27, v83);
  OUTLINED_FUNCTION_19_6((uint64_t)v29, (uint64_t)v84);
  v84 = v28;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v28, v18);
  if (!EnumCaseMultiPayload)
  {
    uint64_t v36 = v14;
    uint64_t v83 = v11;
    v71 = v16;
    v38 = v78;
    uint64_t v37 = v79;
    uint64_t v39 = v81;
    uint64_t v31 = (uint64_t)v84;
    OUTLINED_FUNCTION_19_6((uint64_t)v24, (uint64_t)v84);
    if (!OUTLINED_FUNCTION_18_8())
    {
      uint64_t v43 = v83;
      v44 = *(void (**)(char *, char *, uint64_t))(v83 + 32);
      uint64_t v45 = (uint64_t)v71;
      v46 = v24;
      uint64_t v47 = v37;
      v44(v71, v46, v37);
      v48 = v29;
      uint64_t v49 = v36;
      uint64_t v50 = ((uint64_t (*)(uint64_t, char *, uint64_t))v44)(v36, v48, v37);
      uint64_t v51 = (uint64_t)v38;
      uint64_t v52 = PluginAction.loggingId.getter(v50);
      uint64_t v53 = v77;
      PluginAction.loggingId.getter(v52);
      uint64_t v54 = v39;
      uint64_t v55 = v39 + *(int *)(v75 + 48);
      outlined init with copy of UUID?(v51, v39);
      outlined init with copy of UUID?(v53, v55);
      uint64_t v56 = v39;
      uint64_t v57 = v76;
      if (__swift_getEnumTagSinglePayload(v56, 1LL, v76) == 1)
      {
        outlined destroy of UUID?(v53, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined destroy of UUID?(v51, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v58 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
        v58(v49, v47);
        v58(v45, v47);
        int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v55, 1LL, v57);
        uint64_t v41 = v80;
        uint64_t v31 = (uint64_t)v84;
        if (EnumTagSinglePayload == 1)
        {
          outlined destroy of UUID?(v81, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          goto LABEL_11;
        }
      }

      else
      {
        uint64_t v60 = v73;
        outlined init with copy of UUID?(v54, v73);
        int v61 = __swift_getEnumTagSinglePayload(v55, 1LL, v57);
        uint64_t v41 = v80;
        uint64_t v62 = v74;
        uint64_t v31 = (uint64_t)v84;
        if (v61 != 1)
        {
          v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 32);
          uint64_t v82 = v49;
          uint64_t v66 = v60;
          uint64_t v67 = v72;
          v65(v72, v55, v57);
          lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          dispatch thunk of static Equatable.== infix(_:_:)(v66, v67, v57);
          v68 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
          v68(v67, v57);
          OUTLINED_FUNCTION_28_5(v77);
          OUTLINED_FUNCTION_28_5(v51);
          uint64_t v69 = v79;
          v70 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
          v70(v82, v79);
          v70((uint64_t)v71, v69);
          v68(v66, v57);
          OUTLINED_FUNCTION_28_5(v81);
          goto LABEL_11;
        }

        outlined destroy of UUID?(v77, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined destroy of UUID?(v51, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v63 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
        uint64_t v64 = v79;
        v63(v49, v79);
        v63((uint64_t)v71, v64);
        (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v60, v57);
      }

      outlined destroy of UUID?(v81, &demangling cache variable for type metadata for (UUID?, UUID?));
      goto LABEL_11;
    }

    (*(void (**)(char *, uint64_t))(v83 + 8))(v24, v37);
    goto LABEL_10;
  }

  if (EnumCaseMultiPayload != 1)
  {
    int v40 = OUTLINED_FUNCTION_18_8();
    uint64_t v31 = (uint64_t)v84;
    if (v40 == 2) {
      goto LABEL_8;
    }
LABEL_10:
    uint64_t v41 = v82;
    uint64_t v18 = TupleTypeMetadata2;
    goto LABEL_11;
  }

  uint64_t v31 = (uint64_t)v84;
  OUTLINED_FUNCTION_19_6(v22, (uint64_t)v84);
  v33 = (char *)(v22 + v32);
  if (OUTLINED_FUNCTION_18_8() != 1)
  {
    uint64_t v42 = OUTLINED_FUNCTION_4_3();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8LL))(v22 + v32, v42);
    goto LABEL_10;
  }

  uint64_t v34 = OUTLINED_FUNCTION_4_3();
  v35 = *(void (**)(char *, uint64_t))(*(void *)(v34 - 8) + 8LL);
  v35(&v29[v32], v34);
  v35(v33, v34);
LABEL_8:
  uint64_t v41 = v80;
LABEL_11:
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v31, v18);
  OUTLINED_FUNCTION_7_5();
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ContactNeedsValueGuardFlow<A>.FlowState( uint64_t a1, uint64_t a2, uint64_t a3)
{
  static ContactNeedsValueGuardFlow.FlowState.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t key path setter for ContactNeedsValueGuardFlow.flowState : <A>ContactNeedsValueGuardFlow<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (char *)&v9 - v5;
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v9 - v5, a1);
  return ContactNeedsValueGuardFlow.flowState.setter((uint64_t)v6);
}

uint64_t ContactNeedsValueGuardFlow.flow.getter()
{
  return swift_retain(*(void *)(v0 + *(void *)(*(void *)v0 + 104LL)));
}

uint64_t ContactNeedsValueGuardFlow.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + *(void *)(*(void *)v1 + 112LL), a1);
}

void ContactNeedsValueGuardFlow.__allocating_init(_:_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = &v11[-v7 - 8];
  swift_storeEnumTagMultiPayload(&v11[-v7 - 8], v9, 2LL);
  outlined init with copy of SignalProviding((uint64_t)a2, (uint64_t)v11);
  (*(void (**)(uint64_t, _BYTE *, _BYTE *))(v4 + 152))(a1, v8, v11);
  __swift_destroy_boxed_opaque_existential_1(a2);
  OUTLINED_FUNCTION_6();
}

void ContactNeedsValueGuardFlow.execute(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for ContactNeedsValueGuardFlow( 0LL,  *(void *)(*(void *)v4 + 80LL),  *(void *)(*(void *)v4 + 88LL),  a4);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContactNeedsValueGuardFlow<A>, v7);
  Flow.deferToExecuteAsync(_:)(a1, a2, v7, WitnessTable);
  OUTLINED_FUNCTION_24_0();
}

uint64_t protocol witness for Flow.execute(completion:) in conformance ContactNeedsValueGuardFlow<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176LL))();
}

uint64_t type metadata accessor for ContactNeedsValueGuardFlow( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for ContactNeedsValueGuardFlow);
}

uint64_t base witness table accessor for Flow in ContactNeedsValueGuardFlow<A>(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for ContactNeedsValueGuardFlow<A>, a1);
}

uint64_t sub_61A78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 128LL))();
}

uint64_t sub_61AA4()
{
  return 16LL;
}

__n128 sub_61AB0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for ContactNeedsValueGuardFlow( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ContactNeedsValueGuardFlow.FlowState( 319LL,  *(void *)(a1 + 80),  *(void *)(a1 + 88),  a4);
  if (v6 <= 0x3F)
  {
    v7[0] = *(void *)(result - 8) + 64LL;
    v7[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v7[2] = "(";
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 3LL, v7, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata instantiation function for ContactNeedsValueGuardFlow.FlowState( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24LL);
}

uint64_t type metadata completion function for ContactNeedsValueGuardFlow.FlowState(uint64_t a1)
{
  uint64_t result = type metadata accessor for PluginAction(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for Parse(319LL);
    if (v4 <= 0x3F)
    {
      swift_getTupleTypeLayout2(v5, &unk_31F8A8, *(void *)(result - 8) + 64LL);
      v6[1] = v5;
      swift_initEnumMetadataMultiPayload(a1, 0LL, 2LL, v6);
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ContactNeedsValueGuardFlow.FlowState( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = type metadata accessor for Parse(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16LL))(v15, v16, v17);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 1LL;
    }

    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(v5 + 64));
        return a1;
      }

      uint64_t v9 = type metadata accessor for PluginAction(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }

  return a1;
}

_BYTE *initializeWithTake for ContactNeedsValueGuardFlow.FlowState(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v12 = &a1[v11];
    uint64_t v13 = &a2[v11];
    uint64_t v14 = type metadata accessor for Parse(0LL);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
    uint64_t v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 1LL;
  }

  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      return a1;
    }

    uint64_t v7 = type metadata accessor for PluginAction(0LL);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
    uint64_t v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

_BYTE *assignWithTake for ContactNeedsValueGuardFlow.FlowState(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = *(void *)(a3 - 8);
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(a1, a3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v13 = &a1[v12];
      uint64_t v14 = &a2[v12];
      uint64_t v15 = type metadata accessor for Parse(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v15 - 8) + 32LL))(v13, v14, v15);
      uint64_t v9 = a1;
      uint64_t v10 = a3;
      uint64_t v11 = 1LL;
    }

    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(v6 + 64));
        return a1;
      }

      uint64_t v8 = type metadata accessor for PluginAction(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
      uint64_t v9 = a1;
      uint64_t v10 = a3;
      uint64_t v11 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }

  return a1;
}

uint64_t destructiveInjectEnumTag for ContactNeedsValueGuardFlow.FlowState( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)( char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t v5 = "UnsafeMutableRawPointer.initializeMemory with negative count";
    uint64_t v6 = 60LL;
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t v5 = "UnsafeMutableRawPointer.initializeMemory overlapping range";
    uint64_t v6 = 58LL;
  }

  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v5,  v6,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL);
  __break(1u);
  return result;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t v5 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v6 = 51LL;
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t v5 = "UnsafeMutablePointer.initialize overlapping range";
    uint64_t v6 = 49LL;
  }

  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v5,  v6,  2LL,  "Swift/UnsafePointer.swift",  25LL);
  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL);
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  if ((__len & 0x8000000000000000LL) != 0)
  {
    OUTLINED_FUNCTION_0_17();
    __src = (char *)OUTLINED_FUNCTION_1_18( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

uint64_t OUTLINED_FUNCTION_14_9(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

void OUTLINED_FUNCTION_16_5(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t OUTLINED_FUNCTION_17_13()
{
  return ContactNeedsValueGuardFlow.flowState.setter(v0);
}

uint64_t OUTLINED_FUNCTION_18_8()
{
  return swift_getEnumCaseMultiPayload(v1, v0);
}

uint64_t OUTLINED_FUNCTION_19_6(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_20_4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_26_3()
{
  return Logger.logObject.getter();
}

void OUTLINED_FUNCTION_28_5(uint64_t a1)
{
}

uint64_t OUTLINED_FUNCTION_30_4@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_31_7()
{
  return type metadata accessor for PluginAction(0LL);
}

uint64_t OUTLINED_FUNCTION_32_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for ContactNeedsValueGuardFlow.FlowState(0LL, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_34_7@<X0>( uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(v2, a1, v3);
}

Swift::Void __swiftcall INPersonContainingIntent.clearContactsSlotMatches()()
{
  uint64_t v2 = v1;
  uint64_t v3 = OUTLINED_FUNCTION_30_5(v0, v1);
  if (!v3)
  {
    OUTLINED_FUNCTION_10_11();
    return;
  }

  uint64_t v4 = v3;
  if ((unint64_t)v3 >> 62)
  {
    if (v3 >= 0) {
      v3 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v3);
    if (!v5) {
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFFF8LL));
    if (!v5)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_22_7( (uint64_t)_swiftEmptyArrayStorage,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
      OUTLINED_FUNCTION_18_9((uint64_t)_swiftEmptyArrayStorage);
      return;
    }
  }

  specialized ContiguousArray.reserveCapacity(_:)(v5);
  if ((v5 & 0x8000000000000000LL) == 0)
  {
    uint64_t v6 = 0LL;
    do
    {
      if ((v4 & 0xC000000000000001LL) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
      }
      else {
        id v7 = *(id *)(v4 + 8 * v6 + 32);
      }
      id v8 = v7;
      ++v6;
      outlined bridged method (mbgnn) of @objc INPerson.alternatives.setter((uint64_t)_swiftEmptyArrayStorage, v7);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v9);
      uint64_t v10 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
      uint64_t v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v8);
      specialized ContiguousArray._endMutation()(v11);
    }

    while (v5 != v6);
    goto LABEL_15;
  }

  __break(1u);
}

void INPersonContainingIntent.hasSiriMatches.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = OUTLINED_FUNCTION_30_5(a1, a2);
  if (!v2) {
    goto LABEL_12;
  }
  uint64_t v3 = v2;
  uint64_t v4 = v2 & 0xFFFFFFFFFFFFFF8LL;
  if (v2 >> 62)
  {
    if (OUTLINED_FUNCTION_25_7()) {
      goto LABEL_4;
    }
LABEL_11:
    OUTLINED_FUNCTION_39();
    goto LABEL_12;
  }

void INPersonContainingIntent.isFirstContactRelatedOrMyself.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = OUTLINED_FUNCTION_30_5(a1, a2);
  if (!v2) {
    goto LABEL_10;
  }
  unint64_t v3 = v2;
  uint64_t v4 = v2 & 0xFFFFFFFFFFFFFF8LL;
  if (v2 >> 62)
  {
    if (OUTLINED_FUNCTION_25_7()) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }

  if (!*(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8LL)))
  {
LABEL_9:
    OUTLINED_FUNCTION_39();
LABEL_10:
    uint64_t v6 = 0LL;
    goto LABEL_11;
  }

INPerson_optional __swiftcall INPersonContainingIntent.removeContact(at:)(Swift::Int at)
{
  uint64_t v3 = v2;
  uint64_t v5 = OUTLINED_FUNCTION_23_7(at, v1, v2);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = (uint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v20 = v6;
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0) {
      uint64_t v17 = v6;
    }
    else {
      uint64_t v17 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    Swift::Int v7 = _CocoaArrayWrapper.endIndex.getter(v17);
    OUTLINED_FUNCTION_62();
  }

  else
  {
    Swift::Int v7 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v7 <= at)
  {
    OUTLINED_FUNCTION_62();
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v10 = OUTLINED_FUNCTION_15_1();
    uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.siriPhone);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = OUTLINED_FUNCTION_7_0(22LL);
      uint64_t v15 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v19 = v15;
      *(_DWORD *)uint64_t v14 = 136315394;
      uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012LL, 0x8000000000347420LL, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v14 + 4);
      *(_WORD *)(v14 + 12) = 2048;
      uint64_t v18 = at;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v14 + 14);
      OUTLINED_FUNCTION_33_6( &dword_0,  v12,  v13,  "#INPersonContainingIntent.%s: Index %ld is greater than number of contacts. Leaving slot as-is.",  (uint8_t *)v14);
      OUTLINED_FUNCTION_17_0(v15);
      OUTLINED_FUNCTION_0_2(v15);
      OUTLINED_FUNCTION_0_2(v14);
    }

    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = specialized Array.remove(at:)(at);
    OUTLINED_FUNCTION_21_4(v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
    swift_bridgeObjectRelease();
  }

  uint64_t v16 = (objc_class *)v8;
  result.value.super.isa = v16;
  result.is_nil = v9;
  return result;
}

Swift::Void __swiftcall INPersonContainingIntent.replaceContact(at:person:)(Swift::Int at, INPerson person)
{
  uint64_t v3 = v2;
  uint64_t v6 = (*(uint64_t (**)())(v2 + 8))();
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = (uint64_t)_swiftEmptyArrayStorage;
  }
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0) {
      uint64_t v20 = v7;
    }
    else {
      uint64_t v20 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    Swift::Int v8 = _CocoaArrayWrapper.endIndex.getter(v20);
    OUTLINED_FUNCTION_62();
  }

  else
  {
    Swift::Int v8 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v8 <= at)
  {
    OUTLINED_FUNCTION_62();
    if (one-time initialization token for siriPhone == -1) {
      goto LABEL_15;
    }
  }

  else
  {
    Swift::Bool v9 = person.super.isa;
    uint64_t v23 = v7;
    if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v7)
      || v7 < 0
      || (v7 & 0x4000000000000000LL) != 0)
    {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
      uint64_t v23 = v7;
    }

    if (at < 0)
    {
      __break(1u);
    }

    else if (*(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFFF8LL)) > (unint64_t)at)
    {
      uint64_t v10 = *(void **)((char *)&stru_20.cmd + 8 * at + (v7 & 0xFFFFFFFFFFFFFF8LL));
      *(void *)((char *)&stru_20.cmd + 8 * at + (v7 & 0xFFFFFFFFFFFFFF8LL)) = v9;

      specialized Array._endMutation()(v11, v12, v13, v14);
      OUTLINED_FUNCTION_21_4(v23, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
      OUTLINED_FUNCTION_18_9(v23);
      return;
    }

    __break(1u);
  }

  swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
LABEL_15:
  uint64_t v15 = OUTLINED_FUNCTION_15_1();
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
  oslog = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v17))
  {
    uint64_t v18 = OUTLINED_FUNCTION_7_0(22LL);
    uint64_t v19 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v23 = v19;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x8000000000347440LL, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v18 + 4);
    *(_WORD *)(v18 + 12) = 2048;
    uint64_t v22 = at;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v18 + 14);
    OUTLINED_FUNCTION_33_6( &dword_0,  oslog,  v17,  "#INPersonContainingIntent.%s: Index %ld is greater than number of contacts. Leaving slot as-is.",  (uint8_t *)v18);
    OUTLINED_FUNCTION_17_0(v19);
    OUTLINED_FUNCTION_0_2(v19);
    OUTLINED_FUNCTION_0_2(v18);
  }

  else
  {
  }

Swift::Void __swiftcall INPersonContainingIntent.appendContact(person:)(INPerson person)
{
  uint64_t v3 = v2;
  uint64_t v5 = OUTLINED_FUNCTION_23_7((uint64_t)person.super.isa, v1, v2);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5) {
    uint64_t v6 = (void *)v5;
  }
  uint64_t v14 = (uint64_t)v6;
  uint64_t v7 = person.super.isa;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v7);
  unint64_t v9 = *(void *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFFF8LL));
  unint64_t v8 = *(void *)((char *)&dword_18 + (v14 & 0xFFFFFFFFFFFFFF8LL));
  if (v9 >= v8 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1LL);
  }
  uint64_t v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
  specialized Array._endMutation()(v10, v11, v12, v13);
  OUTLINED_FUNCTION_22_7(v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  swift_bridgeObjectRelease();
}

void key path setter for CallingIntent.callGroups : <A>A()
{
  uint64_t v0 = (void *)swift_bridgeObjectRetain();
  CallingIntent.callGroups.setter(v0);
}

void CallingIntent.callGroups.setter(void *a1)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v2 = OUTLINED_FUNCTION_15_1();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v6 = static os_log_type_t.debug.getter(v4, v5);
  if (os_log_type_enabled(v4, v6))
  {
    uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v8 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v9 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v16 = v8;
    if (a1) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = _swiftEmptyArrayStorage;
    }
    uint64_t v11 = OUTLINED_FUNCTION_49( v8,  (unint64_t *)&lazy cache variable for type metadata for INCallGroup,  &OBJC_CLASS___INCallGroup_ptr);
    swift_bridgeObjectRetain();
    uint64_t v12 = Array.description.getter(v10, v11);
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    uint64_t v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4);
    OUTLINED_FUNCTION_26_4();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v4, v6, "#CallingIntent Intent does not support callGroups, not setting %s", v7, 0xCu);
    OUTLINED_FUNCTION_17_0(v9);
    OUTLINED_FUNCTION_0_2(v9);
    OUTLINED_FUNCTION_0_2((uint64_t)v7);
  }

  else
  {

    OUTLINED_FUNCTION_26_4();
  }

  OUTLINED_FUNCTION_10_11();
}

void CallingIntent.callGroups.modify(void *a1, uint64_t a2, uint64_t a3)
{
  a1[2] = a3;
  a1[3] = v3;
  *a1 = 0LL;
  a1[1] = a2;
  OUTLINED_FUNCTION_32_5();
}

void CallingIntent.callGroups.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) != 0)
  {
    uint64_t v3 = (void *)OUTLINED_FUNCTION_8_1();
    CallingIntent.callGroups.setter(v3);
    OUTLINED_FUNCTION_16_6(v2);
  }

  else
  {
    CallingIntent.callGroups.setter((void *)*a1);
    OUTLINED_FUNCTION_2();
  }

void CallingIntent.populateCallIntentMetadata(resolvedApp:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)&v71[0])
  {
    __int128 v74 = v71[1];
    __int128 v75 = v72;
    __int128 v73 = v71[0];
    unsigned __int8 v7 = v72;
    BOOL v8 = v72 == 3;
    id v9 = objc_allocWithZone(&OBJC_CLASS___INStartCallRequestMetadata);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    OUTLINED_FUNCTION_8_1();
    uint64_t v65 = a2;
    (*(void (**)(id, uint64_t, uint64_t))(a3 + 80))([v9 initWithAppInferred:v8], a2, a3);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v10 = OUTLINED_FUNCTION_15_1();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.siriPhone);
    uint64_t v67 = *((void *)&v73 + 1);
    outlined init with take of AnnotatedApp?( (uint64_t)&v74,  (uint64_t)v76,  &demangling cache variable for type metadata for String?);
    uint64_t v68 = *((void *)&v75 + 1);
    swift_retain();
    outlined retain of Set<String>(&v67);
    outlined retain of String?((uint64_t)v76);
    outlined retain of Set<String>(&v68);
    id v11 = v3;
    swift_retain();
    outlined retain of Set<String>(&v67);
    outlined retain of String?((uint64_t)v76);
    outlined retain of Set<String>(&v68);
    id v12 = v11;
    unint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v15 = static os_log_type_t.debug.getter(v13, v14);
    if (os_log_type_enabled(v13, v15))
    {
      uint64_t v16 = OUTLINED_FUNCTION_7_0(22LL);
      os_log_type_t v17 = (void *)OUTLINED_FUNCTION_7_0(8LL);
      uint64_t v64 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v69 = v64;
      *(_DWORD *)uint64_t v16 = 136315394;
      uint64_t v18 = AppResolutionSource.description.getter(v7);
      uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v16 + 4);
      OUTLINED_FUNCTION_22();
      uint64_t v20 = swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_14_10(v20, v21, v22);
      uint64_t v23 = OUTLINED_FUNCTION_13_11();
      OUTLINED_FUNCTION_12_13(v23, v24, v25, v26);
      uint64_t v27 = OUTLINED_FUNCTION_22();
      OUTLINED_FUNCTION_14_10(v27, v28, v29);
      uint64_t v30 = OUTLINED_FUNCTION_13_11();
      OUTLINED_FUNCTION_12_13(v30, v31, v32, v33);
      *(_WORD *)(v16 + 12) = 2112;
      uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 72))(v65, a3);
      uint64_t v35 = v34;
      if (v34) {
        uint64_t v66 = v34;
      }
      else {
        uint64_t v66 = 0LL;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v16 + 14);
      *os_log_type_t v17 = v35;

      OUTLINED_FUNCTION_33_6( &dword_0,  v13,  v15,  "#CallingIntent did set callRequestMetadata: source=%s, callRequestMetadata=%@",  (uint8_t *)v16);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_17_0((uint64_t)v17);
      OUTLINED_FUNCTION_0_2((uint64_t)v17);
      OUTLINED_FUNCTION_17_0(v64);
      OUTLINED_FUNCTION_0_2(v64);
      OUTLINED_FUNCTION_0_2(v16);
      OUTLINED_FUNCTION_22();

      OUTLINED_FUNCTION_14_10(v57, v58, v59);
      uint64_t v60 = OUTLINED_FUNCTION_13_11();
      OUTLINED_FUNCTION_12_13(v60, v61, v62, v63);
    }

    else
    {
      uint64_t v36 = OUTLINED_FUNCTION_22();
      OUTLINED_FUNCTION_14_10(v36, v37, v38);
      uint64_t v39 = OUTLINED_FUNCTION_13_11();
      OUTLINED_FUNCTION_12_13(v39, v40, v41, v42);
      uint64_t v43 = OUTLINED_FUNCTION_22();
      OUTLINED_FUNCTION_14_10(v43, v44, v45);
      uint64_t v46 = OUTLINED_FUNCTION_13_11();
      OUTLINED_FUNCTION_12_13(v46, v47, v48, v49);
      uint64_t v50 = OUTLINED_FUNCTION_22();
      OUTLINED_FUNCTION_14_10(v50, v51, v52);
      uint64_t v53 = OUTLINED_FUNCTION_13_11();
      OUTLINED_FUNCTION_12_13(v53, v54, v55, v56);
    }
  }

void protocol witness for CallingIntent.callGroups.setter in conformance INStartAudioCallIntent(void *a1)
{
}

void protocol witness for CallingIntent.callGroups.modify in conformance INStartAudioCallIntent( void *a1, uint64_t a2, uint64_t a3)
{
  a1[2] = a2;
  a1[3] = a3;
  *a1 = 0LL;
  a1[1] = v3;
  OUTLINED_FUNCTION_32_5();
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)( unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL)) > result)
    {
      return result;
    }

    __break(1u);
  }

  return result;
}

void outlined bridged method (mbgnn) of @objc INPerson.alternatives.setter(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [a2 setAlternatives:isa];
}

void specialized protocol witness for Collection.subscript.read in conformance [A]()
{
  uint64_t v1 = OUTLINED_FUNCTION_2_10();
  uint64_t v2 = OUTLINED_FUNCTION_3_15((uint64_t)v1);
  specialized Array.subscript.read(v2, v3, v4);
  *(void *)(v0 + 32) = v5;
  OUTLINED_FUNCTION_6();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v1 = OUTLINED_FUNCTION_2_10();
  uint64_t v2 = OUTLINED_FUNCTION_3_15((uint64_t)v1);
  specialized Array.subscript.read(v2, v3, v4);
  *(void *)(v0 + 32) = v5;
  OUTLINED_FUNCTION_6();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v1 = OUTLINED_FUNCTION_2_10();
  uint64_t v2 = OUTLINED_FUNCTION_3_15((uint64_t)v1);
  specialized Array.subscript.read(v2, v3, v4);
  *(void *)(v0 + 32) = v5;
  OUTLINED_FUNCTION_6();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v1 = OUTLINED_FUNCTION_2_10();
  uint64_t v2 = OUTLINED_FUNCTION_3_15((uint64_t)v1);
  specialized Array.subscript.read(v2, v3, v4);
  *(void *)(v0 + 32) = v5;
  OUTLINED_FUNCTION_6();
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void specialized Array.subscript.read(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (v4) {
    uint64_t v5 = OUTLINED_FUNCTION_4_11();
  }
  else {
    uint64_t v5 = (uint64_t)OUTLINED_FUNCTION_6_16();
  }
  *unint64_t v3 = v5;
  OUTLINED_FUNCTION_6();
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_0_13(a1, a2, a3);
  if (v4) {
    uint64_t v5 = OUTLINED_FUNCTION_4_11();
  }
  else {
    uint64_t v5 = OUTLINED_FUNCTION_9_12();
  }
  *unint64_t v3 = v5;
  OUTLINED_FUNCTION_6();
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_0_13(a1, a2, a3);
  if (v4) {
    uint64_t v5 = OUTLINED_FUNCTION_4_11();
  }
  else {
    uint64_t v5 = OUTLINED_FUNCTION_9_12();
  }
  *unint64_t v3 = v5;
  OUTLINED_FUNCTION_6();
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_0_13(a1, a2, a3);
  if (v4) {
    uint64_t v5 = OUTLINED_FUNCTION_4_11();
  }
  else {
    uint64_t v5 = (uint64_t)OUTLINED_FUNCTION_6_16();
  }
  *unint64_t v3 = v5;
  OUTLINED_FUNCTION_6();
}

uint64_t Array.subscript.readspecialized (void *a1)
{
  return swift_release(*a1);
}

uint64_t outlined init with take of AnnotatedApp?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

void *outlined retain of Set<String>(void *a1)
{
  return a1;
}

uint64_t outlined retain of String?(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of String?(uint64_t a1)
{
  return a1;
}

void sub_6329C(void *a1@<X8>)
{
  *a1 = 0LL;
}

uint64_t sub_632A8()
{
  return 16LL;
}

__n128 sub_632B4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t OUTLINED_FUNCTION_0_13(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a2, (a3 & 0xC000000000000001LL) == 0, a3);
}

void *OUTLINED_FUNCTION_2_10()
{
  return malloc(0x28uLL);
}

uint64_t OUTLINED_FUNCTION_3_15(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_4_11()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

id OUTLINED_FUNCTION_6_16()
{
  return *(id *)(v0 + 8 * v1 + 32);
}

uint64_t OUTLINED_FUNCTION_9_12()
{
  return swift_retain(*(void *)(v0 + 8 * v1 + 32));
}

  ;
}

void *OUTLINED_FUNCTION_12_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  return outlined release of Set<String>((uint64_t *)va);
}

void *OUTLINED_FUNCTION_14_10(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return outlined release of Set<String>((uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_16_6(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t OUTLINED_FUNCTION_18_9(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t OUTLINED_FUNCTION_22_7@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

uint64_t OUTLINED_FUNCTION_23_7(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
}

uint64_t OUTLINED_FUNCTION_26_4()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t OUTLINED_FUNCTION_29_7()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v0);
}

uint64_t OUTLINED_FUNCTION_30_5(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

  ;
}

void OUTLINED_FUNCTION_33_6(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

void MicrophoneControlFlow.executeAction(currentCall:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  unsigned __int8 v8 = *(_BYTE *)(v3 + 56);
  PhoneCallControlAction.isMicrophoneAction.getter(v8);
  if ((v9 & 1) != 0)
  {
    uint64_t v57 = a3;
    uint64_t ObjectType = swift_getObjectType(a1);
    uint64_t v54 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 96);
    char v10 = v54(ObjectType, a2);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t typea = __swift_project_value_buffer(v11, (uint64_t)static Logger.siriPhone);
    id v12 = (os_log_s *)Logger.logObject.getter(typea);
    os_log_type_t v14 = static os_log_type_t.debug.getter(v12, v13);
    if (OUTLINED_FUNCTION_27_1(v14))
    {
      unsigned __int8 v53 = v8;
      os_log_type_t v15 = (uint8_t *)OUTLINED_FUNCTION_7_0(8LL);
      *(_DWORD *)os_log_type_t v15 = 67109120;
      LODWORD(v60[0]) = v10 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v60, (char *)v60 + 4, v15 + 4);
      _os_log_impl(&dword_0, v12, (os_log_type_t)a3, "#MicrophoneControlFlow isMicMuted = %{BOOL}d", v15, 8u);
      uint64_t v16 = (uint64_t)v15;
      unsigned __int8 v8 = v53;
      OUTLINED_FUNCTION_0_2(v16);
    }

    uint64_t v17 = PhoneCallControlAction.rawValue.getter(v8);
    if ((v10 & 1) != 0)
    {
      unint64_t v19 = 0x8000000000341D60LL;
      if (v17 != 0xD000000000000010LL || v18 != 0x8000000000341D60LL)
      {
        unint64_t v20 = 0xD000000000000010LL;
        goto LABEL_20;
      }
    }

    else
    {
      unint64_t v19 = 0xEE00656E6F68706FLL;
      if (v17 != 0x7263694D6574756DLL || v18 != 0xEE00656E6F68706FLL)
      {
        unint64_t v20 = 0x7263694D6574756DLL;
LABEL_20:
        os_log_type_t v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v20, v19, 0LL);
        swift_bridgeObjectRelease();
        if ((v36 & 1) == 0)
        {
          uint64_t v37 = swift_retain_n(v4, 2LL);
          uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
          os_log_type_t v40 = static os_log_type_t.debug.getter(v38, v39);
          if (OUTLINED_FUNCTION_27_1(v40))
          {
            uint64_t v41 = OUTLINED_FUNCTION_7_0(22LL);
            uint64_t v59 = OUTLINED_FUNCTION_7_0(64LL);
            v60[0] = v59;
            *(_DWORD *)uint64_t v41 = 136315394;
            if ((v10 & 1) != 0) {
              uint64_t v42 = 0x646574756DLL;
            }
            else {
              uint64_t v42 = 0x646574756D6E75LL;
            }
            os_log_type_t type = v36;
            if ((v10 & 1) != 0) {
              unint64_t v43 = 0xE500000000000000LL;
            }
            else {
              unint64_t v43 = 0xE700000000000000LL;
            }
            uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, v60);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v41 + 4);
            swift_bridgeObjectRelease();
            *(_WORD *)(v41 + 12) = 2080;
            uint64_t v44 = PhoneCallControlAction.description.getter(v8);
            uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, v60);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v41 + 14);
            OUTLINED_FUNCTION_3_16();
            swift_bridgeObjectRelease();
            _os_log_impl( &dword_0,  v38,  type,  "#MicrophoneControlFlow not changing mic state because mic is %s and action is %s",  (uint8_t *)v41,  0x16u);
            swift_arrayDestroy(v59, 2LL);
            OUTLINED_FUNCTION_0_2(v59);
            OUTLINED_FUNCTION_0_2(v41);
          }

          else
          {

            OUTLINED_FUNCTION_3_16();
          }

          goto LABEL_34;
        }

LABEL_34:
        *(void *)uint64_t v57 = 0LL;
        *(void *)(v57 + 8) = 0LL;
        *(void *)(v57 + 16) = 0LL;
        *(_OWORD *)(v57 + 24) = xmmword_31F950;
        return;
      }
    }

    swift_bridgeObjectRelease();
    goto LABEL_30;
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  uint64_t v22 = __swift_project_value_buffer(v21, (uint64_t)static Logger.siriPhone);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl( &dword_0,  v23,  v24,  "#MicrophoneControlFlow used to handle a call control not related to the microphone.",  v25,  2u);
    OUTLINED_FUNCTION_0_2((uint64_t)v25);
  }

  unint64_t v26 = lazy protocol witness table accessor for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError();
  uint64_t v27 = swift_allocError(&type metadata for ActionableCallControlFlow.ActionableCallControlFlowError, v26, 0LL, 0LL);
  *uint64_t v28 = v8;
  v28[40] = 0;
  swift_willThrow(v27, v28, v29, v30, v31, v32, v33, v34);
}

    OUTLINED_FUNCTION_50();
    os_log_type_t v6 = v33;
  }

  unint64_t v26 = dispatch_group_create();
  dispatch_group_enter(v26);
  uint64_t v27 = *(void *)(v6 + 16);
  uint64_t v28 = type metadata accessor for SignalGatherer(0LL);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v29 = SignalGatherer.init(signals:candidateAppBundleIds:)(v27, v1);
  uint64_t v30 = (void *)OUTLINED_FUNCTION_8_2((uint64_t)&unk_3F8EA0, 40LL);
  v30[2] = v1;
  v30[3] = v3;
  v30[4] = v26;
  swift_retain();
  uint64_t v31 = v26;
  dispatch thunk of SignalGatherer.gatherValuesAndTimings(completion:)( partial apply for closure #3 in AppSelectionUserPersonaCollector.getUserPersona(candidateApps:),  v30);
  swift_release(v30);
  OS_dispatch_group.wait()();
  swift_release(v29);

  swift_beginAccess(v4, v34, 0LL, 0LL);
  uint64_t v25 = *(unsigned int *)(v3 + 16);
  swift_release(v3);
  return v25;
}

  if (v7 < 0) {
    uint64_t v22 = v7;
  }
  else {
    uint64_t v22 = v7 & 0xFFFFFFFFFFFFFF8LL;
  }
  OUTLINED_FUNCTION_124();
  char v10 = _CocoaArrayWrapper.endIndex.getter(v22);
  OUTLINED_FUNCTION_4_1();
LABEL_9:
  uint64_t v11 = v10 + v8;
  if (__OFADD__(v10, v8))
  {
    __break(1u);
LABEL_39:
    OUTLINED_FUNCTION_124();
    os_log_type_t v14 = OUTLINED_FUNCTION_10_29();
    OUTLINED_FUNCTION_4_1();
    goto LABEL_17;
  }

  unsigned __int8 v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *uint64_t v4 = v7;
  char v10 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000LL) == 0 && (v7 & 0x4000000000000000LL) == 0)
  {
    uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8LL;
    char v10 = 1LL;
  }

  os_log_type_t v14 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8LL));
LABEL_17:
  if (v14 <= v11) {
    os_log_type_t v14 = v11;
  }
  OUTLINED_FUNCTION_124();
  unsigned __int8 v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1LL, v7);
  swift_bridgeObjectRelease();
  *uint64_t v4 = v7;
  uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8LL;
LABEL_20:
  os_log_type_t v15 = (void *)(v13 + 32 + 8 * v6);
  type metadata accessor for INPerson();
  __n128 result = swift_arrayDestroy(v15, v9);
  if (!v8)
  {
LABEL_28:
    *os_log_type_t v15 = v3;
    return specialized Array._endMutation()(result, v17, v18, v19);
  }

  if ((unint64_t)v7 >> 62)
  {
    OUTLINED_FUNCTION_124();
    unint64_t v20 = OUTLINED_FUNCTION_17_12();
    OUTLINED_FUNCTION_4_1();
  }

  else
  {
    unint64_t v20 = *(void *)(v13 + 16);
  }

  if (__OFSUB__(v20, v5))
  {
    __break(1u);
  }

  else
  {
    __n128 result = specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13 + 32 + 8 * v5, v20 - v5, v15 + 1);
    if (!((unint64_t)v7 >> 62))
    {
      uint64_t v21 = *(void *)(v13 + 16);
      goto LABEL_26;
    }
  }

  if (v7 < 0) {
    uint64_t v23 = v7;
  }
  else {
    uint64_t v23 = v13;
  }
  OUTLINED_FUNCTION_124();
  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter(v23);
  __n128 result = OUTLINED_FUNCTION_4_1();
LABEL_26:
  if (!__OFADD__(v21, v8))
  {
    *(void *)(v13 + 16) = v21 + v8;
    goto LABEL_28;
  }

  __break(1u);
  return result;
}

        swift_bridgeObjectRelease();
        uint64_t v3 = v72;
        if (v75)
        {
          uint64_t v4 = v76;
          if (!v37) {
            goto LABEL_43;
          }
        }

        else
        {
          if (v73 == v33) {
            uint64_t v38 = v37;
          }
          else {
            uint64_t v38 = 1;
          }
          uint64_t v4 = v76;
          if ((v38 & 1) != 0) {
            goto LABEL_43;
          }
        }
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      os_log_type_t v40 = swift_allocObject(v39, 40LL, 7LL);
      *(_OWORD *)(v40 + 16) = xmmword_31FE60;
      *(void *)(v40 + 32) = v24;
      v78 = v40;
      specialized Array._endMutation()(v40, v41, v42, v43);
      uint64_t v44 = swift_retain();
      unint64_t v45 = SiriKitDisambiguationItem.utterance.getter(v44);
      uint64_t v47 = v46;
      uint64_t v48 = type metadata accessor for SiriKitDisambiguationItem(0LL);
      swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
      uint64_t v49 = SiriKitDisambiguationItem.init(components:utterance:allowLineWrapForDisplayText:)(v78, v45, v47, 0LL);
      swift_release(v22);
      uint64_t v22 = v49;
LABEL_43:
      LOBYTE(v2) = v74;
      uint64_t v23 = swift_release(v24);
LABEL_44:
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
      os_log_type_t v51 = *(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
      uint64_t v50 = *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
      if (v51 >= v50 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1LL);
      }
      ++v20;
      uint64_t v52 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v51, v22);
      specialized Array._endMutation()(v52, v53, v54, v55);
      if (v20 == v4) {
        goto LABEL_83;
      }
    }
  }

  __break(1u);
  return result;
}

    OUTLINED_FUNCTION_50();
    a1 = v19;
    uint64_t v3 = v38;
    if (v7) {
      goto LABEL_7;
    }
LABEL_8:
    uint64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_48;
    }

    if (v11 >= v37) {
      return;
    }
    id v12 = *(void *)(v36 + 8 * v11);
    uint64_t v13 = v3 + 1;
    if (!v12)
    {
      OUTLINED_FUNCTION_12_77();
      if (v14 == v15) {
        return;
      }
      OUTLINED_FUNCTION_11_75();
      if (!v12)
      {
        OUTLINED_FUNCTION_12_77();
        if (v14 == v15) {
          return;
        }
        OUTLINED_FUNCTION_11_75();
        if (!v12)
        {
          OUTLINED_FUNCTION_12_77();
          if (v14 == v15) {
            return;
          }
          OUTLINED_FUNCTION_11_75();
          if (!v12) {
            break;
          }
        }
      }
    }

  OUTLINED_FUNCTION_49_19(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_displayDateTime);
  if ((v114 & 1) != 0)
  {
LABEL_16:
    OUTLINED_FUNCTION_49_19(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_displayTextColor);
    if ((v115 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }

uint64_t SwitchToFaceTimeControlFlow.__allocating_init(state:sharedGlobals:action:phoneCallControlCATsSimple:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return ActionableCallControlFlow.init(state:sharedGlobals:action:phoneCallControlCATsSimple:)(a1, a2, a3, a4);
}

uint64_t SwitchToFaceTimeControlFlow.__deallocating_deinit()
{
  uint64_t v0 = ActionableCallControlFlow.deinit();
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

unint64_t lazy protocol witness table accessor for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ActionableCallControlFlow.ActionableCallControlFlowError,  &type metadata for ActionableCallControlFlow.ActionableCallControlFlowError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError);
  }

  return result;
}

uint64_t type metadata accessor for MicrophoneControlFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin21MicrophoneControlFlow);
}

uint64_t OUTLINED_FUNCTION_3_16()
{
  return swift_release_n(v0, 2LL);
}

uint64_t specialized Collection.first.getter@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  swift_unknownObjectRetain(v3);
  swift_unknownObjectRetain(v5);
  LOBYTE(v6) = static AnyIndex.== infix(_:_:)(v3, v4, v5, v6);
  swift_unknownObjectRelease(v5);
  if ((v6 & 1) != 0)
  {
    uint64_t result = swift_unknownObjectRelease(v3);
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }

  else
  {
    dispatch thunk of _AnyCollectionBox.subscript.getter(v3, v4);
    return swift_unknownObjectRelease(v3);
  }

  return result;
}

void ContactUnsetRelationshipFlowStrategy.sharedGlobals.getter(uint64_t a1@<X8>)
{
}

void PhoneContactDisplayHintFactory.deviceState.getter(uint64_t a1@<X8>)
{
}

void ContactUnsetRelationshipFlowStrategy.labelTemplates.getter(uint64_t a1@<X8>)
{
}

void ContactUnsetRelationshipFlowStrategy.unsetRelationshipTemplates.getter(uint64_t a1@<X8>)
{
}

uint64_t ContactUnsetRelationshipFlowStrategy.displayTextCatFamily.getter()
{
  return swift_retain(*(void *)(v0 + 160));
}

uint64_t SearchCallHistorySharedGlobals.callHistoryPromptDialogProvider.getter()
{
  return swift_retain(*(void *)(v0 + 168));
}

uint64_t SearchCallHistorySharedGlobals.searchCallHistoryCATs.getter()
{
  return swift_retain(*(void *)(v0 + 176));
}

uint64_t ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  a8[20] = a5;
  a8[21] = a6;
  uint64_t v16 = type metadata accessor for CNContactStore( 255LL,  (unint64_t *)&lazy cache variable for type metadata for INIntentResponse,  &OBJC_CLASS___INIntentResponse_ptr);
  type metadata accessor for PhoneCallBaseCatTemplatingService(0LL, a7, v16, v17);
  outlined init with copy of SharedGlobalsProviding(a1, (uint64_t)v27);
  outlined init with copy of SharedGlobalsProviding(a3, (uint64_t)v26);
  OUTLINED_FUNCTION_60_4();
  default argument 0 of PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)();
  uint64_t v18 = OUTLINED_FUNCTION_60_4();
  default argument 4 of PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)( v20,  v18,  v19);
  swift_retain();
  swift_retain();
  OUTLINED_FUNCTION_60_4();
  default argument 6 of PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)();
  PhoneCallBaseCatTemplatingService.__allocating_init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)();
  uint64_t v22 = v21;
  __swift_destroy_boxed_opaque_existential_1(a4);
  OUTLINED_FUNCTION_62_1();
  __swift_destroy_boxed_opaque_existential_1(a2);
  uint64_t result = OUTLINED_FUNCTION_90();
  a8[22] = v22;
  return result;
}

uint64_t ContactUnsetRelationshipFlowStrategy.parseRequestedRelationship(resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  uint64_t v4 = OUTLINED_FUNCTION_82_0();
  v3[6] = v4;
  v3[7] = OUTLINED_FUNCTION_23(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for ParameterIdentifier(0LL);
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[9] = v6;
  v3[10] = OUTLINED_FUNCTION_23(v6);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t ContactUnsetRelationshipFlowStrategy.parseRequestedRelationship(resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v23;
  a22 = v24;
  a20 = v22;
  uint64_t v25 = *(void *)(v22 + 72);
  uint64_t v26 = *(void *)(v22 + 40);
  uint64_t v27 = *(void *)(v26 + 16);
  uint64_t v28 = type metadata accessor for ParameterResolutionRecord(0LL, v27);
  uint64_t v29 = ParameterResolutionRecord.parameter.getter(v28);
  uint64_t v30 = ParameterIdentifier.multicardinalIndex.getter(v29);
  char v32 = v31;
  OUTLINED_FUNCTION_72_0(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
  if ((v32 & 1) != 0) {
    uint64_t v33 = 0LL;
  }
  else {
    uint64_t v33 = v30;
  }
  uint64_t v34 = (void *)ParameterResolutionRecord.intent.getter(v28);
  uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v26 + 24) + 8LL) + 8LL))(v27);

  if (!v35) {
    goto LABEL_17;
  }
  if (v33 < 0) {
    goto LABEL_16;
  }
  if ((unint64_t)v35 >> 62)
  {
    uint64_t v54 = v35 >= 0 ? v35 & 0xFFFFFFFFFFFFFF8LL : v35;
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter(v54);
    OUTLINED_FUNCTION_62();
  }

  else
  {
    uint64_t v36 = *(void *)((char *)&dword_10 + (v35 & 0xFFFFFFFFFFFFFF8LL));
  }

  if (v33 >= v36)
  {
LABEL_16:
    OUTLINED_FUNCTION_62();
LABEL_17:
    uint64_t v48 = *(_OWORD **)(v22 + 56);
    _OWORD *v48 = xmmword_31D8B0;
    OUTLINED_FUNCTION_39_3((uint64_t)v48);
    lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError,  type metadata accessor for PhoneError,  (uint64_t)&protocol conformance descriptor for PhoneError);
    uint64_t v50 = OUTLINED_FUNCTION_17_14(v49);
    OUTLINED_FUNCTION_86_1(v50, v51);
    outlined destroy of PhoneError((uint64_t)v48);
    OUTLINED_FUNCTION_80_1();
    OUTLINED_FUNCTION_7_8();
    OUTLINED_FUNCTION_23_3();
    uint64_t v52 = *(uint64_t (**)(void))(v22 + 8);
    return OUTLINED_FUNCTION_5_8(v52);
  }

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v33, (v35 & 0xC000000000000001LL) == 0, v35);
  if ((v35 & 0xC000000000000001LL) != 0)
  {
    uint64_t v55 = OUTLINED_FUNCTION_9_0();
    id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v55, v56);
  }

  else
  {
    id v37 = *(id *)(v35 + 8 * v33 + 32);
  }

  uint64_t v38 = v37;
  OUTLINED_FUNCTION_62();
  id v39 = [v38 relationship];

  if (!v39) {
    goto LABEL_17;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v40 = OUTLINED_FUNCTION_15_1();
  uint64_t v41 = (os_log_s *)__swift_project_value_buffer(v40, (uint64_t)static Logger.siriPhone);
  id v42 = v39;
  Logger.logObject.getter(v42);
  os_log_type_t v43 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_63(v43))
  {
    uint64_t v44 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v45 = OUTLINED_FUNCTION_7_0(32LL);
    a10 = v45;
    *(_DWORD *)uint64_t v44 = 136315138;
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    *(void *)(v22 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &a10);
    OUTLINED_FUNCTION_85_1(v22 + 16, v22 + 24, (uint64_t)(v44 + 4));
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_57_0( &dword_0,  v41,  (os_log_type_t)v27,  "#ContactUnsetRelationshipFlowStrategy Detected unset relationship %s",  v44);
    OUTLINED_FUNCTION_17_0(v45);
    OUTLINED_FUNCTION_0_2(v45);
    OUTLINED_FUNCTION_0_2((uint64_t)v44);
  }

  else
  {
  }

  static RelationshipLabel.from(intentsRelationship:)((uint64_t)v42, *(uint64_t **)(v22 + 24));
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_10_0();
  uint64_t v52 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
  return OUTLINED_FUNCTION_5_8(v52);
}

uint64_t outlined destroy of PhoneError(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PhoneError(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t ContactUnsetRelationshipFlowStrategy.applyPersonToIntent(person:requestedRelationship:resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[33] = a5;
  v6[34] = v5;
  v6[31] = a2;
  v6[32] = a4;
  v6[30] = a1;
  uint64_t v7 = OUTLINED_FUNCTION_82_0();
  v6[35] = v7;
  v6[36] = OUTLINED_FUNCTION_23(*(void *)(v7 - 8));
  uint64_t v8 = type metadata accessor for ParameterIdentifier(0LL);
  v6[37] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v6[38] = v9;
  v6[39] = OUTLINED_FUNCTION_23(v9);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t ContactUnsetRelationshipFlowStrategy.applyPersonToIntent(person:requestedRelationship:resolveRecord:)()
{
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v0 + 320) = v4;
  uint64_t v5 = type metadata accessor for ParameterResolutionRecord(0LL, v4);
  uint64_t v6 = ParameterResolutionRecord.parameter.getter(v5);
  uint64_t v7 = ParameterIdentifier.multicardinalIndex.getter(v6);
  char v9 = v8;
  OUTLINED_FUNCTION_26_5(v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  if ((v9 & 1) != 0) {
    char v10 = 0LL;
  }
  else {
    char v10 = (uint8_t *)v7;
  }
  v11.super.Class isa = SAPerson.toINPerson()().super.isa;
  *(INPerson *)(v0 + 328) = v11;
  os_log_type_t v12 = v5;
  Class isa = v11.super.isa;
  os_log_type_t v14 = (void *)ParameterResolutionRecord.intent.getter(v5);
  uint64_t v15 = *(void *)(*(void *)(v3 + 24) + 8LL);
  uint64_t v54 = v4;
  uint64_t v16 = v4;
  uint64_t v17 = v10;
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v16, v15);

  uint64_t v19 = static DisambiguationItemUtils.getUpdatedPersonList(selectedIndex:selectedPerson:persons:)( (uint64_t)v17,  isa,  v18);
  OUTLINED_FUNCTION_4_1();
  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0) {
      uint64_t v51 = v19;
    }
    else {
      uint64_t v51 = v19 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v51);
    OUTLINED_FUNCTION_87_0();
  }

  else
  {
    uint64_t v20 = *(void *)((char *)&dword_10 + (v19 & 0xFFFFFFFFFFFFF8LL));
  }

  if (!v20)
  {
    OUTLINED_FUNCTION_87_0();
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v27 = OUTLINED_FUNCTION_15_1();
    uint64_t v28 = __swift_project_value_buffer(v27, (uint64_t)static Logger.siriPhone);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_7(v30))
    {
      char v31 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
      *(_WORD *)char v31 = 0;
      OUTLINED_FUNCTION_5( &dword_0,  v29,  v12,  "#ContactUnsetRelationshipFlowStrategy List is empty after updating contacts list",  v31);
      OUTLINED_FUNCTION_0_2((uint64_t)v31);
    }

    char v32 = *(_OWORD **)(v0 + 288);

    *char v32 = xmmword_31D8B0;
    OUTLINED_FUNCTION_39_3((uint64_t)v32);
    lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError,  type metadata accessor for PhoneError,  (uint64_t)&protocol conformance descriptor for PhoneError);
    OUTLINED_FUNCTION_17_14(v33);
    PhoneError.logged()(v34);
    outlined destroy of PhoneError((uint64_t)v32);
    OUTLINED_FUNCTION_80_1();

    swift_task_dealloc(*(void *)(v0 + 312));
    OUTLINED_FUNCTION_23_3();
    uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
    return v35();
  }

  uint64_t v21 = (void *)ParameterResolutionRecord.intent.getter(v5);
  *(void *)(v0 + 336) = v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v19, v54, v15);
  OUTLINED_FUNCTION_87_0();
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v22 = OUTLINED_FUNCTION_15_1();
  uint64_t v23 = (os_log_s *)__swift_project_value_buffer(v22, (uint64_t)static Logger.siriPhone);
  *(void *)(v0 + 344) = v23;
  id v24 = v21;
  Logger.logObject.getter(v24);
  os_log_type_t v25 = OUTLINED_FUNCTION_6_0();
  uint64_t v53 = (uint64_t)v17;
  if (os_log_type_enabled(v23, v25))
  {
    uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v52 = (void *)OUTLINED_FUNCTION_7_0(8LL);
    *(_DWORD *)uint64_t v17 = 138412290;
    *(void *)(v0 + 232) = v24;
    id v26 = v24;
    OUTLINED_FUNCTION_85_1(v0 + 232, v0 + 240, (uint64_t)(v17 + 4));
    *uint64_t v52 = v24;

    OUTLINED_FUNCTION_57_0(&dword_0, v23, v25, "#ContactUnsetRelationshipFlowStrategy updatedIntent: %@", v17);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_17_0((uint64_t)v52);
    OUTLINED_FUNCTION_0_2((uint64_t)v52);
    OUTLINED_FUNCTION_0_2((uint64_t)v17);
  }

  else
  {
  }

  INPerson.hasHandleValue.getter();
  if ((v36 & 1) != 0)
  {
    OUTLINED_FUNCTION_76_3();
    v55[3] = OUTLINED_FUNCTION_49( v37,  (unint64_t *)&lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
    v55[0] = v17;
    OUTLINED_FUNCTION_50_7((uint64_t)v55);
    uint64_t v38 = OUTLINED_FUNCTION_83_0();
    __swift_storeEnumTagSinglePayload((uint64_t)isa, 0LL, 1LL, v38);
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_46_0();
    uint64_t v35 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
    return v35();
  }

  uint64_t v40 = (uint64_t)v24;
  Logger.logObject.getter(v36);
  os_log_type_t v41 = OUTLINED_FUNCTION_6_0();
  if (os_log_type_enabled(v23, v41))
  {
    id v42 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
    *(_WORD *)id v42 = 0;
    OUTLINED_FUNCTION_5( &dword_0,  v23,  v41,  "#ContactUnsetRelationshipFlowStrategy Person has no handle value, so run ContactResolution",  v42);
    OUTLINED_FUNCTION_0_2((uint64_t)v42);
  }

  *(void *)(v0 + 48) = 0LL;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
  uint64_t v44 = type metadata accessor for ContactQuery(0LL);
  uint64_t v45 = swift_allocObject( v43,  ((*(unsigned __int8 *)(*(void *)(v44 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v44 - 8) + 80LL))
        + *(void *)(*(void *)(v44 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v44 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v45 + 16) = xmmword_31D870;
  INPerson.toContactQuery()();
  *(void *)(v0 + 56) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v0 + 64) = 2;
  *(void *)(v0 + 72) = 0LL;
  *(void *)(v0 + 80) = 0x1123030905050204LL;
  *(_WORD *)(v0 + 88) = 518;
  *(void *)(v0 + 96) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 104) = v45;
  *(void *)(v0 + 112) = _swiftEmptyArrayStorage;
  uint64_t v46 = ContactUnsetRelationshipFlowStrategy.app.getter();
  static ContactSlotResolver.makeMulticardinalResolver<A>(multicardinalIndex:rchFlowContext:sharedGlobals:)( v53,  0,  v46,  0LL,  0LL,  v54,  v0 + 120);
  OUTLINED_FUNCTION_38_1();
  *(void *)(v0 + 208) = &type metadata for PhoneCallDirectInvocationNLIntent;
  *(void *)(v0 + 216) = &protocol witness table for PhoneCallDirectInvocationNLIntent;
  uint64_t v47 = swift_allocObject(&unk_3F71E8, 120LL, 7LL);
  *(void *)(v0 + 184) = v47;
  outlined init with copy of PhoneCallDirectInvocationNLIntent(v0 + 16, v47 + 16);
  uint64_t v48 = (void *)swift_task_alloc(dword_439C14);
  *(void *)(v0 + 352) = v48;
  *(void *)(v0 + 360) = type metadata accessor for AnyIntentResolver(0LL, v54, v49, v50);
  void *v48 = v0;
  v48[1] = ContactUnsetRelationshipFlowStrategy.applyPersonToIntent(person:requestedRelationship:resolveRecord:);
  return AnyIntentResolver.resolve(skIntent:nlIntent:)(v40, v0 + 184);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void **)(v0 + 336);

  OUTLINED_FUNCTION_26_5(v0 + 120, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL));
  outlined destroy of PhoneCallDirectInvocationNLIntent((void *)(v0 + 16));
  OUTLINED_FUNCTION_90();
  swift_task_dealloc(*(void *)(v0 + 312));
  OUTLINED_FUNCTION_7_8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ContactUnsetRelationshipFlowStrategy.applyPersonToIntent(person:requestedRelationship:resolveRecord:)( void *a1)
{
  uint64_t v5 = v2[44];
  *uint64_t v6 = *v3;
  v2[46] = v1;
  swift_task_dealloc(v5);
  if (!v1)
  {

    __swift_destroy_boxed_opaque_existential_1(v2 + 23);
  }

  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_9_11(v7, v8, v9);
}

uint64_t ContactUnsetRelationshipFlowStrategy.applyPersonToIntent(person:requestedRelationship:resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint8_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v28;
  a24 = v29;
  a22 = v25;
  os_log_type_t v30 = *(os_log_s **)(v25 + 344);
  Logger.logObject.getter(*(id *)(v25 + 336));
  os_log_type_t v31 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_7(v31))
  {
    char v32 = *(void **)(v25 + 336);
    uint64_t v33 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v43 = (void *)OUTLINED_FUNCTION_7_0(8LL);
    *(_DWORD *)uint64_t v33 = 138412290;
    uint64_t v27 = v33 + 4;
    *(void *)(v25 + 224) = v32;
    id v34 = v32;
    uint64_t v35 = OUTLINED_FUNCTION_60_4();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v35, v36, v33 + 4);
    uint64_t v26 = (uint64_t)v43;
    *uint64_t v43 = v32;

    OUTLINED_FUNCTION_57_0(&dword_0, v30, v24, "#ContactUnsetRelationshipFlowStrategy CRR-updatedIntent %@", v33);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_17_0((uint64_t)v43);
    OUTLINED_FUNCTION_0_2((uint64_t)v43);
    OUTLINED_FUNCTION_0_2((uint64_t)v33);
  }

  else
  {
    uint64_t v37 = *(void **)(v25 + 336);
  }

  uint64_t v38 = *(void *)(v25 + 360);

  OUTLINED_FUNCTION_26_5(v25 + 120, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8LL));
  outlined destroy of PhoneCallDirectInvocationNLIntent((void *)(v25 + 16));
  OUTLINED_FUNCTION_76_3();
  a13 = OUTLINED_FUNCTION_49( v39,  (unint64_t *)&lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
  a10 = v27;
  OUTLINED_FUNCTION_50_7((uint64_t)&a10);
  uint64_t v40 = OUTLINED_FUNCTION_83_0();
  __swift_storeEnumTagSinglePayload(v26, 0LL, 1LL, v40);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  os_log_type_t v41 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
  return OUTLINED_FUNCTION_4_12(v41);
}

uint64_t ContactUnsetRelationshipFlowStrategy.app.getter()
{
  void (*v5)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v6;
  void v8[5];
  _BYTE v9[56];
  __int128 v10;
  void v11[4];
  uint64_t v12;
  uint64_t v13;
  void __dst[22];
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  memcpy(__dst, &static PhoneCallFeatureFlags.instance, sizeof(__dst));
  uint64_t v1 = type metadata accessor for PhoneCallFeatureManager();
  uint64_t inited = swift_initStackObject(v1, v9);
  v11[1] = &type metadata for PhoneCallFeatureFlags;
  v11[2] = &protocol witness table for PhoneCallFeatureFlags;
  *(void *)&char v10 = swift_allocObject(&unk_3F72B8, 192LL, 7LL);
  memcpy((void *)(v10 + 16), __dst, 0xB0uLL);
  outlined init with take of AppSelectionSignalComponent(&v10, inited + 16);
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v3);
  uint64_t v5 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 8);
  outlined retain of PhoneCallFeatureFlags(__dst);
  v5(v8, v3, v4);
  FirstPartyAnnotatedAppStore.getDefaultApp(for:)(v8, (uint64_t)&v10);
  swift_release(inited);
  __swift_destroy_boxed_opaque_existential_1(v8);
  uint64_t v13 = *((void *)&v10 + 1);
  uint64_t v6 = v10;
  outlined release of Set<String>(&v13);
  outlined init with take of String?((uint64_t)v11, (uint64_t)v8);
  outlined release of String?((uint64_t)v8);
  os_log_type_t v12 = v11[3];
  outlined release of Set<String>(&v12);
  return v6;
}

uint64_t ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[20] = a4;
  v5[21] = v4;
  v5[18] = a1;
  v5[19] = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v7 = OUTLINED_FUNCTION_23(*(void *)(v6 - 8));
  uint64_t v8 = OUTLINED_FUNCTION_70_1(v7);
  v5[23] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[24] = v9;
  v5[25] = OUTLINED_FUNCTION_23(v9);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:)()
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_10_2(*(void *)(v0 + 64));
  *(void *)(v1 + 208) = v2;
  *uint64_t v2 = v1;
  v2[1] = ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:);
  OUTLINED_FUNCTION_69_3();
  return OUTLINED_FUNCTION_22_8(v3, v4, v5, v6, v7);
}

{
  OUTLINED_FUNCTION_19_7();
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v2 = v0[20];
  uint64_t v1 = v0[21];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[28] = v3;
  v3[2] = *(void *)(v2 + 16);
  v3[3] = *(void *)(v2 + 24);
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[29] = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SAAceView]);
  *uint64_t v4 = v0;
  v4[1] = ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:);
  OUTLINED_FUNCTION_19_1();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  OUTLINED_FUNCTION_27_7();
  uint64_t v3 = *(void *)(v2 + 232);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 240) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_17_3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  OUTLINED_FUNCTION_51_3();
  uint64_t v13 = *(void *)(v0 + 192);
  uint64_t v1 = *(void **)(v0 + 168);
  os_log_type_t v12 = *(void *)(v0 + 136);
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  OUTLINED_FUNCTION_64();
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  OUTLINED_FUNCTION_64();
  uint64_t v2 = *(void *)(v0 + 80);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v2);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v2);
  OUTLINED_FUNCTION_20_5();
  uint64_t v3 = OUTLINED_FUNCTION_42_4();
  OUTLINED_FUNCTION_11_13(v3);
  *(double *)&uint64_t v4 = OUTLINED_FUNCTION_59_3();
  *(_OWORD *)(v0 + 96) = v4;
  OUTLINED_FUNCTION_81_1(v5, (uint64_t)&protocol witness table for AceOutput);
  uint64_t v6 = OUTLINED_FUNCTION_65_0();
  OUTLINED_FUNCTION_78_1(v6, v7, v8, v12, 1LL);
  OUTLINED_FUNCTION_62();
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v0 + 96,  &demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_40_3(v9, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  OUTLINED_FUNCTION_41_5(v13);
  OUTLINED_FUNCTION_62_1();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_7_8();
  char v10 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
  return OUTLINED_FUNCTION_4_12(v10);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_37_5();
  OUTLINED_FUNCTION_7_8();
  return OUTLINED_FUNCTION_6_17(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  (*(void (**)(void, void))(*(void *)(v0 + 192) + 8LL))(*(void *)(v0 + 200), *(void *)(v0 + 184));
  OUTLINED_FUNCTION_37_5();
  OUTLINED_FUNCTION_7_8();
  return OUTLINED_FUNCTION_6_17(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t closure #1 in ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SAAceView], Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin();
  uint64_t v9 = *(void *)(a2 + 176);
  uint64_t v10 = type metadata accessor for CNContactStore( 255LL,  (unint64_t *)&lazy cache variable for type metadata for INIntentResponse,  &OBJC_CLASS___INIntentResponse_ptr);
  v18[3] = type metadata accessor for PhoneCallBaseCatTemplatingService(0LL, a3, v10, v11);
  v18[4] = &protocol witness table for PhoneCallBaseCatTemplatingService<A, B>;
  v18[0] = v9;
  swift_retain();
  static StartCallViewBuilders.makeSiriSettingsButton(templatingService:sharedGlobals:)((uint64_t)v18, v19);
  __swift_destroy_boxed_opaque_existential_1(v18);
  uint64_t v12 = v20;
  uint64_t v13 = v21;
  __swift_project_boxed_opaque_existential_1(v19, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v6);
  uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = (v14 + 16) & ~v14;
  uint64_t v16 = swift_allocObject(&unk_3F7290, v15 + v8, v14 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))( v16 + v15,  (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v6);
  IdiomSensitiveViewBuilding.makeViews(_:)( (uint64_t)partial apply for closure #1 in closure #1 in ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:),  v16,  v12,  v13);
  swift_release(v16);
  return __swift_destroy_boxed_opaque_existential_1(v19);
}

uint64_t closure #1 in closure #1 in ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:)( uint64_t a1, char a2)
{
  uint64_t v5 = a1;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SAAceView], Error>);
    return CheckedContinuation.resume(throwing:)(&v5, v4);
  }

  else
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SAAceView], Error>);
    return CheckedContinuation.resume(returning:)(&v5, v2);
  }

uint64_t ContactUnsetRelationshipFlowStrategy.makeUnsupportedPlatformResponse(requestedRelationship:resolveRecord:)( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to static UnsetRelationshipOutputFactory.makeUnsupportedPlatformResponse(requestedRelationship:)[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = ContactUnsetRelationshipFlowStrategy.makeUnsupportedPlatformResponse(requestedRelationship:resolveRecord:);
  return static UnsetRelationshipOutputFactory.makeUnsupportedPlatformResponse(requestedRelationship:)(a1, a2);
}

uint64_t ContactUnsetRelationshipFlowStrategy.makeErrorResponse(error:app:intent:)(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for CATOption(0LL);
  v2[11] = OUTLINED_FUNCTION_23(*(void *)(v3 - 8));
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t ContactUnsetRelationshipFlowStrategy.makeErrorResponse(error:app:intent:)()
{
  uint64_t v1 = v0[11];
  type metadata accessor for StartCallCATsSimple(0LL);
  static CATOption.defaultMode.getter();
  CATWrapperSimple.__allocating_init(options:globals:)(v1, 0LL);
  static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)();
  uint64_t v3 = v2;
  v0[12] = v2;
  OUTLINED_FUNCTION_38_1();
  uint64_t v4 = *(int **)(*(void *)v3 + 128LL);
  uint64_t v7 = (uint64_t (*)(void *))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v0[13] = v5;
  *uint64_t v5 = v0;
  v5[1] = ContactUnsetRelationshipFlowStrategy.makeErrorResponse(error:app:intent:);
  return v7(v0 + 2);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_27_7();
  OUTLINED_FUNCTION_14_1(*(void *)(v0 + 104));
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v3)(void);
  if ((*(_BYTE *)(v0 + 56) & 1) != 0)
  {
    *(void *)(v0 + 64) = *(void *)(v0 + 16);
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl(v0 + 64, v1, &protocol self-conformance witness table for Error);
    OUTLINED_FUNCTION_10_0();
    return OUTLINED_FUNCTION_24_1(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 + 16), *(void *)(v0 + 72));
    OUTLINED_FUNCTION_10_0();
    uint64_t v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
    return OUTLINED_FUNCTION_24_1(v3);
  }

uint64_t ContactUnsetRelationshipFlowStrategy.actionForPromptForNameInput(_:resolveRecord:)()
{
  return ContactUnsetRelationshipFlowStrategy.actionForInput(_:)();
}

uint64_t ContactUnsetRelationshipFlowStrategy.actionForInput(_:)()
{
  uint64_t v1 = type metadata accessor for Parse(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  outlined init with copy of SharedGlobalsProviding(v0, (uint64_t)v10);
  Input.parse.getter(v5);
  unsigned __int8 v6 = ContactPromptResponseParser.parseResponse(from:)((uint64_t)v4);
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v7 = outlined destroy of ContactPromptResponseParser((uint64_t)v10);
  return static ActionForInput.cancel()(v7);
}

uint64_t ContactUnsetRelationshipFlowStrategy.parseUnsetRelationshipPersonFromResponse(input:resolveRecord:)( uint64_t a1, uint64_t a2)
{
  v3[54] = a2;
  v3[55] = v2;
  v3[53] = a1;
  uint64_t v4 = type metadata accessor for UnsetRelationshipPerson(0LL);
  v3[56] = v4;
  v3[57] = *(void *)(v4 - 8);
  v3[58] = OUTLINED_FUNCTION_28();
  v3[59] = OUTLINED_FUNCTION_28();
  v3[60] = OUTLINED_FUNCTION_28();
  v3[61] = OUTLINED_FUNCTION_28();
  v3[62] = OUTLINED_FUNCTION_28();
  v3[63] = OUTLINED_FUNCTION_28();
  uint64_t v5 = OUTLINED_FUNCTION_4_3();
  v3[64] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[65] = v6;
  v3[66] = OUTLINED_FUNCTION_23(v6);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t ContactUnsetRelationshipFlowStrategy.parseUnsetRelationshipPersonFromResponse(input:resolveRecord:)()
{
  uint64_t v1 = *(void *)(v0 + 528);
  uint64_t v2 = *(void *)(v0 + 520);
  uint64_t v3 = *(void **)(v0 + 440);
  uint64_t v4 = v3[3];
  uint64_t v5 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 72))(v4, v5);
  Input.parse.getter(v6);
  (*(void (**)(uint64_t))(*(void *)v6 + 192LL))(v1);
  swift_release(v6);
  OUTLINED_FUNCTION_26_5(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if (*(void *)(v0 + 80))
  {
    outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 + 56), v0 + 16);
    uint64_t v7 = *(void *)(OUTLINED_FUNCTION_34_8() + 16);
    swift_bridgeObjectRelease();
    uint64_t v8 = OUTLINED_FUNCTION_34_8();
    v115 = (_OWORD *)(v0 + 96);
    if (v7 == 1)
    {
      specialized Collection.first.getter(v8, v0 + 96);
      OUTLINED_FUNCTION_13_1();
      uint64_t v9 = v0 + 96;
    }

    else
    {
      uint64_t v17 = *(void *)(v8 + 16);
      if (v17)
      {
        uint64_t v18 = v8 + 32;
        swift_bridgeObjectRetain();
        while (1)
        {
          outlined init with copy of SharedGlobalsProviding(v18, v0 + 136);
          __swift_project_boxed_opaque_existential_1((void *)(v0 + 136), *(void *)(v0 + 160));
          uint64_t v19 = OUTLINED_FUNCTION_60_4();
          uint64_t v21 = v20(v19);
          if (v22)
          {
            uint64_t v23 = v21;
            unint64_t v24 = v22;
            swift_bridgeObjectRelease();
            uint64_t v25 = HIBYTE(v24) & 0xF;
            if ((v24 & 0x2000000000000000LL) == 0) {
              uint64_t v25 = v23 & 0xFFFFFFFFFFFFLL;
            }
            if (v25) {
              break;
            }
          }

          OUTLINED_FUNCTION_90();
          v18 += 40LL;
          if (!--v17)
          {
            OUTLINED_FUNCTION_13_1();
            goto LABEL_17;
          }
        }

        OUTLINED_FUNCTION_13_1();
        uint64_t v9 = v0 + 96;
        outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 + 136), (uint64_t)v115);
      }

      else
      {
LABEL_17:
        uint64_t v9 = v0 + 96;
        *(void *)(v0 + 128) = 0LL;
        _OWORD *v115 = 0u;
        *(_OWORD *)(v0 + 112) = 0u;
      }

      OUTLINED_FUNCTION_13_1();
    }

    outlined init with copy of SiriPhoneContact?( v9,  v0 + 176,  &demangling cache variable for type metadata for SiriPhoneContact?);
    uint64_t v27 = *(void *)(v0 + 200);
    if (v27)
    {
      uint64_t v28 = *(void *)(v0 + 208);
      uint64_t v29 = (void *)OUTLINED_FUNCTION_9_0();
      __swift_project_boxed_opaque_existential_1(v29, v30);
      char v31 = default argument 3 of SAUISayIt.init(message:dialogIdentifier:canUseServerTTS:listenAfterSpeaking:)( v27,  v28);
      char v32 = OUTLINED_FUNCTION_74_0(v31);
      Swift::String_optional v33 = SiriPhoneContact.getFirstName(filteredAlternatives:)(v32);
      os_log_t log = (os_log_t)v33.value._object;
      uint64_t type = v33.value._countAndFlagsBits;
      __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 176));
    }

    else
    {
      OUTLINED_FUNCTION_40_3(v26, &demangling cache variable for type metadata for SiriPhoneContact?);
      os_log_t log = 0LL;
      uint64_t type = 0LL;
    }

    outlined init with copy of SiriPhoneContact?( v9,  v0 + 216,  &demangling cache variable for type metadata for SiriPhoneContact?);
    uint64_t v35 = *(void *)(v0 + 240);
    if (v35)
    {
      uint64_t v36 = *(void *)(v0 + 248);
      OUTLINED_FUNCTION_84_0((void *)(v0 + 216));
      char v37 = default argument 3 of SAUISayIt.init(message:dialogIdentifier:canUseServerTTS:listenAfterSpeaking:)( v35,  v36);
      Swift::String_optional v38 = SiriPhoneContact.getLastName(filteredAlternatives:)(v37 & 1);
      uint64_t countAndFlagsBits = v38.value._countAndFlagsBits;
      object = v38.value._object;
      OUTLINED_FUNCTION_62_1();
    }

    else
    {
      OUTLINED_FUNCTION_88_1(v34, &demangling cache variable for type metadata for SiriPhoneContact?);
      uint64_t countAndFlagsBits = 0LL;
      object = 0LL;
    }

    outlined init with copy of SiriPhoneContact?( v9,  v0 + 256,  &demangling cache variable for type metadata for SiriPhoneContact?);
    uint64_t v41 = *(void *)(v0 + 280);
    if (v41)
    {
      uint64_t v42 = *(void *)(v0 + 288);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 256), *(void *)(v0 + 280));
      char v43 = default argument 3 of SAUISayIt.init(message:dialogIdentifier:canUseServerTTS:listenAfterSpeaking:)( v41,  v42);
      char v44 = OUTLINED_FUNCTION_74_0(v43);
      Swift::String_optional v45 = SiriPhoneContact.getMiddleName(filteredAlternatives:)(v44);
      uint64_t v46 = v45.value._countAndFlagsBits;
      uint64_t v47 = v45.value._object;
      __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 256));
    }

    else
    {
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v0 + 256,  &demangling cache variable for type metadata for SiriPhoneContact?);
      uint64_t v46 = 0LL;
      uint64_t v47 = 0LL;
    }

    outlined init with copy of SiriPhoneContact?( (uint64_t)v115,  v0 + 296,  &demangling cache variable for type metadata for SiriPhoneContact?);
    uint64_t v48 = *(void *)(v0 + 320);
    if (v48)
    {
      uint64_t v49 = *(void *)(v0 + 328);
      OUTLINED_FUNCTION_84_0((void *)(v0 + 296));
      char v50 = default argument 3 of SAUISayIt.init(message:dialogIdentifier:canUseServerTTS:listenAfterSpeaking:)( v48,  v49);
      Swift::String_optional v51 = SiriPhoneContact.getFullName(filteredAlternatives:)(v50 & 1);
      uint64_t v52 = v51.value._countAndFlagsBits;
      uint64_t v53 = v51.value._object;
      __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 296));
    }

    else
    {
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v0 + 296,  &demangling cache variable for type metadata for SiriPhoneContact?);
      uint64_t v52 = 0LL;
      uint64_t v53 = 0LL;
    }

    outlined init with copy of SiriPhoneContact?( (uint64_t)v115,  v0 + 336,  &demangling cache variable for type metadata for SiriPhoneContact?);
    uint64_t v55 = *(void *)(v0 + 360);
    if (v55)
    {
      OUTLINED_FUNCTION_84_0((void *)(v0 + 336));
      Swift::String_optional v56 = SiriPhoneContact.getNickName()();
      uint64_t v55 = v56.value._countAndFlagsBits;
      uint64_t v57 = v56.value._object;
      OUTLINED_FUNCTION_62_1();
    }

    else
    {
      OUTLINED_FUNCTION_88_1(v54, &demangling cache variable for type metadata for SiriPhoneContact?);
      uint64_t v57 = 0LL;
    }

    UnsetRelationshipPerson.init(firstName:lastName:middleName:fullName:nickname:)( type,  log,  countAndFlagsBits,  object,  v46,  v47,  v52,  v53,  v55,  v57);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v58 = *(void *)(v0 + 496);
    uint64_t v60 = *(void *)(v0 + 480);
    uint64_t v59 = *(void *)(v0 + 488);
    uint64_t v62 = *(void *)(v0 + 464);
    uint64_t v61 = *(void *)(v0 + 472);
    uint64_t v63 = OUTLINED_FUNCTION_15_1();
    __swift_project_value_buffer(v63, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_18_10(v58);
    OUTLINED_FUNCTION_18_10(v59);
    OUTLINED_FUNCTION_18_10(v60);
    OUTLINED_FUNCTION_18_10(v61);
    uint64_t v64 = OUTLINED_FUNCTION_18_10(v62);
    uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
    os_log_type_t v67 = static os_log_type_t.debug.getter(v65, v66);
    BOOL v68 = os_log_type_enabled(v65, v67);
    uint64_t v70 = *(void *)(v0 + 488);
    uint64_t v69 = *(void *)(v0 + 496);
    uint64_t v71 = *(void *)(v0 + 472);
    uint64_t v72 = *(void *)(v0 + 480);
    uint64_t v74 = *(void *)(v0 + 456);
    uint64_t v73 = *(void *)(v0 + 464);
    uint64_t v75 = *(void *)(v0 + 448);
    if (v68)
    {
      loga = v65;
      uint64_t v76 = OUTLINED_FUNCTION_7_0(62LL);
      uint64_t v111 = OUTLINED_FUNCTION_7_0(192LL);
      uint64_t v116 = v111;
      *(_DWORD *)uint64_t v76 = 136316418;
      *(void *)(v0 + 376) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD00000000000003ELL,  0x80000000003474F0LL,  &v116);
      uint64_t v77 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v0 + 384, v76 + 4);
      *(_WORD *)(v76 + 12) = 2080;
      uint64_t v78 = UnsetRelationshipPerson.firstName.getter(v77);
      uint64_t v80 = OUTLINED_FUNCTION_56_2(v78, v79);
      if (v82) {
        unint64_t v83 = 0xE000000000000000LL;
      }
      else {
        unint64_t v83 = v81;
      }
      *(void *)(v0 + 384) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v83, &v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 384, v0 + 392, v76 + 14);
      swift_bridgeObjectRelease();
      uint64_t v84 = (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 8))(v69, v75);
      *(_WORD *)(v76 + 22) = 2080;
      uint64_t v85 = UnsetRelationshipPerson.lastName.getter(v84);
      uint64_t v87 = OUTLINED_FUNCTION_56_2(v85, v86);
      *(void *)(v0 + 392) = OUTLINED_FUNCTION_21_5(v87);
      OUTLINED_FUNCTION_36_3(v0 + 392, v88, v89, v76 + 32);
      OUTLINED_FUNCTION_62();
      uint64_t v90 = OUTLINED_FUNCTION_25_8();
      *(_WORD *)(v76 + 32) = 2080;
      uint64_t v91 = UnsetRelationshipPerson.middleName.getter(v90);
      uint64_t v93 = OUTLINED_FUNCTION_56_2(v91, v92);
      *(void *)(v0 + 400) = OUTLINED_FUNCTION_21_5(v93);
      OUTLINED_FUNCTION_36_3(v0 + 400, v94, v95, v76 + 42);
      OUTLINED_FUNCTION_62();
      uint64_t v96 = OUTLINED_FUNCTION_25_8();
      *(_WORD *)(v76 + 42) = 2080;
      uint64_t v97 = UnsetRelationshipPerson.fullName.getter(v96);
      uint64_t v99 = OUTLINED_FUNCTION_56_2(v97, v98);
      *(void *)(v0 + 408) = OUTLINED_FUNCTION_21_5(v99);
      OUTLINED_FUNCTION_36_3(v0 + 408, v100, v101, v76 + 52);
      OUTLINED_FUNCTION_62();
      uint64_t v102 = OUTLINED_FUNCTION_25_8();
      *(_WORD *)(v76 + 52) = 2080;
      uint64_t v103 = UnsetRelationshipPerson.nickname.getter(v102);
      uint64_t v105 = OUTLINED_FUNCTION_56_2(v103, v104);
      *(void *)(v0 + 416) = OUTLINED_FUNCTION_21_5(v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424, v76 + 54);
      OUTLINED_FUNCTION_62();
      OUTLINED_FUNCTION_25_8();
      _os_log_impl( &dword_0,  loga,  v67,  "#ContactUnsetRelationshipFlowStrategy %s {\n firstName = %s\n lastName = %s\n middleName = %s\n fullName = %s\n nickname = %s\n }",  (uint8_t *)v76,  0x3Eu);
      swift_arrayDestroy(v111, 6LL);
      OUTLINED_FUNCTION_0_2(v111);
      OUTLINED_FUNCTION_0_2(v76);
    }

    else
    {

      OUTLINED_FUNCTION_44_5(v73);
      OUTLINED_FUNCTION_44_5(v71);
      OUTLINED_FUNCTION_44_5(v72);
      OUTLINED_FUNCTION_44_5(v70);
      OUTLINED_FUNCTION_44_5(v69);
    }

    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v115,  &demangling cache variable for type metadata for SiriPhoneContact?);
    uint64_t v106 = *(void *)(v0 + 448);
    uint64_t v107 = *(void *)(v0 + 424);
    OUTLINED_FUNCTION_71_1( *(void *)(v0 + 504),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 456) + 32LL));
    __swift_storeEnumTagSinglePayload(v107, 0LL, 1LL, v106);
    __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  }

  else
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v0 + 56,  &demangling cache variable for type metadata for PhoneCallNLIntent?);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v10 = OUTLINED_FUNCTION_15_1();
    uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.siriPhone);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
      *(_WORD *)uint64_t v14 = 0;
      OUTLINED_FUNCTION_5( &dword_0,  v12,  v13,  "#ContactUnsetRelationshipFlowStrategy expected only 1 SiriPhone contact",  v14);
      OUTLINED_FUNCTION_0_2((uint64_t)v14);
    }

    uint64_t v15 = *(void *)(v0 + 448);
    uint64_t v16 = *(void *)(v0 + 424);

    __swift_storeEnumTagSinglePayload(v16, 1LL, 1LL, v15);
  }

  uint64_t v108 = *(void *)(v0 + 464);
  swift_task_dealloc(*(void *)(v0 + 528));
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  swift_task_dealloc(v108);
  v109 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
  return v109();
}

uint64_t ContactUnsetRelationshipFlowStrategy.makePromptForPersonName(requestedRelationship:resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[19] = a4;
  v5[20] = v4;
  v5[17] = a1;
  v5[18] = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v5[21] = OUTLINED_FUNCTION_23(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for TemplatingResult(0LL);
  v5[22] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[23] = v8;
  v5[24] = OUTLINED_FUNCTION_23(v8);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t ContactUnsetRelationshipFlowStrategy.makePromptForPersonName(requestedRelationship:resolveRecord:)()
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_10_2(*(void *)(v0 + 40));
  *(void *)(v1 + 200) = v2;
  *uint64_t v2 = v1;
  v2[1] = ContactUnsetRelationshipFlowStrategy.makePromptForPersonName(requestedRelationship:resolveRecord:);
  OUTLINED_FUNCTION_69_3();
  return OUTLINED_FUNCTION_22_8(v3, v4, v5, v6, v7);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v2 = OUTLINED_FUNCTION_67_2();
  *uint64_t v3 = *v1;
  *(void *)(v4 + 208) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  OUTLINED_FUNCTION_52_4();
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v20 = *(void *)(v0 + 184);
  uint64_t v2 = *(void **)(v0 + 160);
  uint64_t v3 = *(void **)(v0 + 136);
  uint64_t v5 = v2[3];
  uint64_t v4 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v4);
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  OUTLINED_FUNCTION_66(v2);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  uint64_t v8 = *(void *)(v0 + 80);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v8);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v8);
  OUTLINED_FUNCTION_20_5();
  uint64_t v9 = OUTLINED_FUNCTION_42_4();
  OUTLINED_FUNCTION_11_13(v9);
  *(double *)&uint64_t v10 = OUTLINED_FUNCTION_59_3();
  *(_OWORD *)(v0 + 96) = v10;
  v3[3] = v11;
  v3[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v3);
  uint64_t v12 = OUTLINED_FUNCTION_65_0();
  uint64_t v16 = static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v12,  v13,  v14,  v15,  1LL,  0LL,  v1);
  OUTLINED_FUNCTION_88_1(v16, &demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_40_3(v17, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 56));
  OUTLINED_FUNCTION_41_5(v20);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_7_8();
  uint64_t v18 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
  return OUTLINED_FUNCTION_5_8(v18);
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(v0 + 192));
  OUTLINED_FUNCTION_23_3();
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ContactUnsetRelationshipFlowStrategy.actionForPromptForContactDisambiguationInput(_:resolveRecord:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v38 = OUTLINED_FUNCTION_4_3();
  uint64_t v4 = *(void *)(v38 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v34 - v7;
  uint64_t v9 = type metadata accessor for ActionForInput(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v37 = a1;
  uint64_t v15 = v2;
  uint64_t v16 = ContactUnsetRelationshipFlowStrategy.actionForInput(_:)();
  static ActionForInput.handle()(v16);
  lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type ActionForInput and conformance ActionForInput,  (uint64_t (*)(uint64_t))&type metadata accessor for ActionForInput,  (uint64_t)&protocol conformance descriptor for ActionForInput);
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v12, v9);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  uint64_t v19 = v18(v12, v9);
  if ((v17 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v39, v14, v9);
  }
  uint64_t v35 = v15;
  uint64_t v36 = v18;
  Input.parse.getter(v19);
  uint64_t v20 = v38;
  int v21 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v8, v38);
  int v22 = enum case for Parse.directInvocation(_:);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v4 + 8);
  v23(v8, v20);
  if (v21 == v22) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v39, v14, v9);
  }
  uint64_t v25 = v35[3];
  uint64_t v26 = v35[4];
  __swift_project_boxed_opaque_existential_1(v35, v25);
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 72))(v25, v26);
  Input.parse.getter(v27);
  (*(void (**)(void *__return_ptr, char *))(*(void *)v27 + 192LL))(v43, v6);
  swift_release(v27);
  v23(v6, v20);
  outlined init with copy of SiriPhoneContact?( (uint64_t)v43,  (uint64_t)v40,  &demangling cache variable for type metadata for PhoneCallNLIntent?);
  uint64_t v28 = v41;
  if (!v41)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v40,  &demangling cache variable for type metadata for PhoneCallNLIntent?);
    Swift::String_optional v33 = v36;
    goto LABEL_8;
  }

  uint64_t v29 = v42;
  OUTLINED_FUNCTION_66(v40);
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 24))(v28, v29);
  __swift_destroy_boxed_opaque_existential_1(v40);
  uint64_t v31 = *(void *)(v30 + 16);
  uint64_t v32 = swift_bridgeObjectRelease();
  Swift::String_optional v33 = v36;
  if (!v31)
  {
LABEL_8:
    static ActionForInput.ignore()(v32);
    goto LABEL_9;
  }

  static ActionForInput.handle()(v32);
LABEL_9:
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v43,  &demangling cache variable for type metadata for PhoneCallNLIntent?);
  return v33(v14, v9);
}

uint64_t ContactUnsetRelationshipFlowStrategy.makeDisambiguationItemContainer(contacts:resolveRecord:)( uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  OUTLINED_FUNCTION_19_1();
  return swift_task_switch(v2, v3, v4);
}

uint64_t ContactUnsetRelationshipFlowStrategy.makeDisambiguationItemContainer(contacts:resolveRecord:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v15 = *(void *)(v0 + 16);
    }
    else {
      uint64_t v15 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v15);
    OUTLINED_FUNCTION_4_1();
  }

  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL));
  }

  if (!v2) {
    goto LABEL_10;
  }
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)(v2);
  if ((v2 & 0x8000000000000000LL) == 0)
  {
    uint64_t v4 = 0LL;
    unint64_t v5 = v1 & 0xC000000000000001LL;
    uint64_t v6 = *(void *)(v0 + 16) + 32LL;
    do
    {
      if (v5) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, *(void *)(v0 + 16));
      }
      else {
        id v7 = *(id *)(v6 + 8 * v4);
      }
      uint64_t v8 = v7;
      ++v4;
      Class isa = SAPerson.toINPerson()().super.isa;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      uint64_t v11 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      uint64_t v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, isa);
      specialized ContiguousArray._endMutation()(v12);
    }

    while (v2 != v4);
LABEL_10:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicDisambiguationItemContainer<INPerson>);
    OUTLINED_FUNCTION_15_2(v13);
    uint64_t v14 = BasicDisambiguationItemContainer.init(_:_:)(_swiftEmptyArrayStorage, 0LL);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
  }

  __break(1u);
  return result;
}

uint64_t ContactUnsetRelationshipFlowStrategy.parseContactDisambiguationResult(input:paginatedItems:resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[18] = a3;
  v4[19] = v3;
  v4[16] = a1;
  v4[17] = a2;
  uint64_t v5 = type metadata accessor for PaginationRequest(0LL);
  v4[20] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[21] = v6;
  v4[22] = OUTLINED_FUNCTION_23(v6);
  uint64_t v7 = OUTLINED_FUNCTION_4_3();
  v4[23] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[24] = v8;
  v4[25] = OUTLINED_FUNCTION_23(v8);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t ContactUnsetRelationshipFlowStrategy.parseContactDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = (void *)v0[25];
  uint64_t v3 = (void *)v0[19];
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INPerson>);
  uint64_t v4 = PaginatedItemContainer.items.getter(v49);
  uint64_t v5 = v3[3];
  uint64_t v6 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 72))(v5, v6);
  outlined init with copy of SharedGlobalsProviding(v7 + 120, (uint64_t)(v0 + 3));
  OUTLINED_FUNCTION_38_1();
  outlined init with copy of SharedGlobalsProviding((uint64_t)v3, (uint64_t)(v0 + 8));
  v0[2] = v4;
  Input.parse.getter(v8);
  uint64_t v9 = ContactDisambiguationPromptResponseParser.parseDisambiguationResponse(from:)((uint64_t)v2);
  unsigned __int8 v11 = v10;
  OUTLINED_FUNCTION_91_0(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  outlined destroy of ContactDisambiguationPromptResponseParser((uint64_t)(v0 + 2));
  if (v11 == 255) {
    goto LABEL_9;
  }
  if (v11 != 2)
  {
    if (v11 == 1)
    {
      outlined copy of ContactDisambiguationPromptResponse(v9, 1u);
      INPerson.hasNameComponents.getter();
      if ((v12 & 1) != 0) {
        goto LABEL_14;
      }
      id v13 = [v9 _displayName];
      if (v13)
      {
        uint64_t v2 = v13;
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        unint64_t v16 = v15;
      }

      else
      {
        uint64_t v14 = 0LL;
        unint64_t v16 = 0LL;
      }

      char v24 = specialized Optional<A>.isNilOrEmpty.getter(v14, v16);
      OUTLINED_FUNCTION_62();
      if ((v24 & 1) != 0 && (id v25 = [v9 contactIdentifier]) != 0)
      {
        uint64_t v26 = v25;
        uint64_t v27 = (void *)v0[19];
        uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
        uint64_t v2 = v29;

        uint64_t v30 = v27 + 5;
        uint64_t v31 = v27[8];
        uint64_t v32 = v27[9];
        __swift_project_boxed_opaque_existential_1(v30, v31);
        uint64_t v48 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v32 + 8))(v28, v2, v31, v32);
        OUTLINED_FUNCTION_13_1();
        OUTLINED_FUNCTION_45_1();
        if (v48)
        {
          OUTLINED_FUNCTION_45_1();
          uint64_t v9 = (void *)v48;
        }
      }

      else
      {
LABEL_14:
        OUTLINED_FUNCTION_45_1();
      }

      goto LABEL_15;
    }

    outlined consume of ContactDisambiguationPromptResponse?(v9, v11);
LABEL_9:
    uint64_t v20 = v0[21];
    uint64_t v19 = v0[22];
    uint64_t v21 = v0[20];
    uint64_t v22 = static PaginationRequest.firstPage()();
    uint64_t v23 = OUTLINED_FUNCTION_49(v22, &lazy cache variable for type metadata for SAPerson, &OBJC_CLASS___SAPerson_ptr);
    static DisambiguationResult.paginate(_:)(v19, v23);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    goto LABEL_21;
  }

  LOBYTE(v2) = (_BYTE)v0 + 120;
  uint64_t v17 = PaginatedItemContainer.items.getter(v49);
  uint64_t v18 = OUTLINED_FUNCTION_49( v17,  (unint64_t *)&lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
  Array.subscript.getter(v9, v17, v18);
  OUTLINED_FUNCTION_62();
  outlined consume of ContactDisambiguationPromptResponse?(v9, 2u);
  uint64_t v9 = (void *)v0[15];
LABEL_15:
  Swift::String_optional v33 = v0 + 13;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v34 = OUTLINED_FUNCTION_15_1();
  uint64_t v35 = (os_log_s *)__swift_project_value_buffer(v34, (uint64_t)static Logger.siriPhone);
  id v36 = v9;
  Logger.logObject.getter(v36);
  os_log_type_t v37 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_63(v37))
  {
    uint64_t v38 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v39 = (void *)OUTLINED_FUNCTION_7_0(8LL);
    *(_DWORD *)uint64_t v38 = 138412290;
    v0[14] = v36;
    id v40 = v36;
    OUTLINED_FUNCTION_85_1((uint64_t)(v0 + 14), (uint64_t)(v0 + 15), (uint64_t)(v38 + 4));
    *uint64_t v39 = v36;

    Swift::String_optional v33 = v0 + 13;
    OUTLINED_FUNCTION_57_0(&dword_0, v35, (os_log_type_t)v2, "#ContactUnsetRelationshipStrategy Chosen person: %@", v38);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_17_0((uint64_t)v39);
    OUTLINED_FUNCTION_0_2((uint64_t)v39);
    OUTLINED_FUNCTION_0_2((uint64_t)v38);
  }

  else
  {

    uint64_t v35 = (os_log_s *)v36;
  }

  uint64_t v42 = OUTLINED_FUNCTION_49(v41, &lazy cache variable for type metadata for SAPerson, &OBJC_CLASS___SAPerson_ptr);
  id v43 = v36;
  SAPerson.init(person:)(v43);
  Swift::String_optional v45 = v44;
  v0[13] = v44;
  static DisambiguationResult.chosenItem(_:)(v33, v42);

LABEL_21:
  swift_task_dealloc(v0[25]);
  OUTLINED_FUNCTION_23_3();
  uint64_t v46 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
  return OUTLINED_FUNCTION_5_8(v46);
}

uint64_t ContactUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  uint64_t v6 = type metadata accessor for DialogPhase(0LL);
  v5[12] = OUTLINED_FUNCTION_23(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for OutputGenerationManifest(0LL);
  v5[13] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[14] = v8;
  v5[15] = OUTLINED_FUNCTION_23(v8);
  uint64_t v9 = OUTLINED_FUNCTION_42_4();
  v5[16] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[17] = v10;
  v5[18] = OUTLINED_FUNCTION_23(v10);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WindowedPaginationParameters?);
  v5[19] = OUTLINED_FUNCTION_23(*(void *)(v11 - 8));
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t ContactUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:)()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[10];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INPerson>);
  uint64_t v4 = PaginatedItemContainer.items.getter(v3);
  v0[20] = v4;
  uint64_t v5 = type metadata accessor for ParameterResolutionRecord(0LL, *(void *)(v2 + 16));
  uint64_t v6 = (void *)ParameterResolutionRecord.intent.getter(v5);
  ContactUnsetRelationshipFlowStrategy.getAppForDisplay(intent:)((uint64_t)v6, v2);

  uint64_t v7 = App.appIdentifier.getter();
  unint64_t v9 = v8;
  OUTLINED_FUNCTION_38_1();
  if (!v9)
  {
    uint64_t v7 = 0LL;
    unint64_t v9 = 0xE000000000000000LL;
  }

  type metadata accessor for CATGlobals(0LL);
  uint64_t v10 = CATGlobals.__allocating_init()();
  uint64_t v11 = type metadata accessor for ContactResolutionPatternGenerator(0LL);
  OUTLINED_FUNCTION_15_2(v11);
  v0[21] = ContactResolutionPatternGenerator.init(appBundleId:globals:)(v7, v9, v10);
  uint64_t v12 = type metadata accessor for WindowedPaginationParameters(0LL);
  __swift_storeEnumTagSinglePayload(v1, 1LL, 1LL, v12);
  v0[22] = v13;
  *id v13 = v0;
  v13[1] = ContactUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:);
  return ContactResolutionPatternGenerator.generateDetailedDisambiguationContactNames(contacts:contactPickerDirectInvocationID:contactSelectionDirectInvocationID:windowedPaginationParameters:)( v4,  0xD000000000000033LL,  0x8000000000347530LL,  0xD000000000000042LL,  0x8000000000347570LL,  v0[19]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  OUTLINED_FUNCTION_61_2();
  uint64_t v3 = v1[22];
  uint64_t v4 = *v2;
  v1[23] = v5;
  v1[24] = v0;
  uint64_t v6 = swift_task_dealloc(v3);
  OUTLINED_FUNCTION_40_3(v6, &demangling cache variable for type metadata for WindowedPaginationParameters?);
  swift_release(v1[21]);
  if (v0)
  {
    OUTLINED_FUNCTION_62();
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v7, v8, v9);
  }

  else
  {
    uint64_t v11 = (void *)swift_task_alloc(dword_42BF64);
    v1[25] = (uint64_t)v11;
    *uint64_t v11 = v4;
    v11[1] = ContactUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:);
    return ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:)(v1[18], v1[20], v1[10]);
  }

{
  uint64_t v0;
  uint64_t v0 = OUTLINED_FUNCTION_67_2();
  OUTLINED_FUNCTION_14_1(v0);
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  OUTLINED_FUNCTION_19_7();
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 96);

  OUTLINED_FUNCTION_91_0(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_26_5(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_92_0();
  swift_task_dealloc(v4);
  uint64_t v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
  return v5();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_58_2();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  return OUTLINED_FUNCTION_6_17(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  OUTLINED_FUNCTION_72_0(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  OUTLINED_FUNCTION_58_2();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  return OUTLINED_FUNCTION_30_6(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ContactUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:)( uint64_t a1)
{
  uint64_t v2 = v1[18];
  uint64_t v4 = (void *)v1[11];
  uint64_t v3 = v1[12];
  static DialogPhase.clarification.getter(a1);
  uint64_t v5 = swift_task_alloc(32LL);
  *(void *)(v5 + 16) = v2;
  OutputGenerationManifest.init(dialogPhase:_:)( v3,  partial apply for closure #1 in ContactUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:),  v5);
  OUTLINED_FUNCTION_92_0();
  uint64_t v6 = v4[3];
  uint64_t v7 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 136))(v6, v7);
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v8);
  uint64_t v10 = *(void *)(v9 + 8);
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  v1[26] = v11;
  *uint64_t v11 = v1;
  v11[1] = ContactUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)( v1[7],  v1[23],  v1[15],  v8,  v10);
}

uint64_t ContactUnsetRelationshipFlowStrategy.getAppForDisplay(intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = ContactUnsetRelationshipFlowStrategy.app.getter();
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 24) + 16LL) + 8LL))(*(void *)(a2 + 16));
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v6);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v10, v6, v7);
  uint64_t v8 = static UserFacingCallingAppUtils.getCommAppForLaunch(originalApp:preferredCallProvider:deviceState:)(v4, v5, v10);
  swift_release(v4);
  __swift_destroy_boxed_opaque_existential_1(v10);
  return v8;
}

uint64_t ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:), 0LL, 0LL);
}

uint64_t ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:)()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)swift_task_alloc(48LL);
  v0[6] = v4;
  v4[2] = *(void *)(v2 + 16);
  v4[3] = *(void *)(v2 + 24);
  v4[4] = v1;
  v4[5] = v3;
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[7] = v5;
  OUTLINED_FUNCTION_42_4();
  *uint64_t v5 = v0;
  v5[1] = ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:);
  OUTLINED_FUNCTION_19_1();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_27_7();
  OUTLINED_FUNCTION_14_1(*(void *)(v1 + 56));
  OUTLINED_FUNCTION_23_3();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ContactUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:)( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(v4, a2, v5);
  __swift_storeEnumTagSinglePayload((uint64_t)v4, 0LL, 1LL, v5);
  OutputGenerationManifest.nlContextUpdate.setter(v4);
  OutputGenerationManifest.canUseServerTTS.setter(0LL);
  return OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
}

uint64_t ContactUnsetRelationshipFlowStrategy.parsePromptToSaveRelationshipResponse(input:resolveRecord:)( uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  uint64_t v4 = OUTLINED_FUNCTION_82_0();
  v3[10] = v4;
  v3[11] = OUTLINED_FUNCTION_23(*(void *)(v4 - 8));
  uint64_t v5 = OUTLINED_FUNCTION_4_3();
  v3[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[13] = v6;
  v3[14] = OUTLINED_FUNCTION_23(v6);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t ContactUnsetRelationshipFlowStrategy.parsePromptToSaveRelationshipResponse(input:resolveRecord:)()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  outlined init with copy of SharedGlobalsProviding(v0[9], (uint64_t)(v0 + 2));
  Input.parse.getter(v3);
  unsigned __int8 v4 = ContactPromptResponseParser.parseResponse(from:)(v1);
  OUTLINED_FUNCTION_26_5(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  outlined destroy of ContactPromptResponseParser((uint64_t)(v0 + 2));
  if (v4 >= 3u)
  {
    uint64_t v9 = (void *)v0[11];
    *uint64_t v9 = 0LL;
    v9[1] = 0LL;
    OUTLINED_FUNCTION_39_3((uint64_t)v9);
    lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError,  type metadata accessor for PhoneError,  (uint64_t)&protocol conformance descriptor for PhoneError);
    uint64_t v11 = OUTLINED_FUNCTION_17_14(v10);
    OUTLINED_FUNCTION_86_1(v11, v12);
    outlined destroy of PhoneError((uint64_t)v9);
    OUTLINED_FUNCTION_80_1();
    OUTLINED_FUNCTION_7_8();
    OUTLINED_FUNCTION_23_3();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
  }

  else
  {
    uint64_t v5 = v0[7];
    uint64_t v6 = *(unsigned int *)*(&off_3F72D0 + (char)v4);
    uint64_t v7 = type metadata accessor for ConfirmationResponse(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104LL))(v5, v6, v7);
    OUTLINED_FUNCTION_23_3();
    OUTLINED_FUNCTION_7_8();
    uint64_t v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
  }

  return OUTLINED_FUNCTION_30_6(v8);
}

uint64_t ContactUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[20] = a5;
  v6[21] = v5;
  v6[18] = a2;
  v6[19] = a3;
  v6[17] = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v8 = OUTLINED_FUNCTION_23(*(void *)(v7 - 8));
  uint64_t v9 = OUTLINED_FUNCTION_70_1(v8);
  v6[23] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[24] = v10;
  v6[25] = OUTLINED_FUNCTION_23(v10);
  uint64_t v11 = (void *)swift_task_alloc(dword_4417D4);
  v6[26] = v11;
  *uint64_t v11 = v6;
  v11[1] = ContactUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:);
  uint64_t v12 = OUTLINED_FUNCTION_9_0();
  return static ConfirmationViewUtils.makeYesNoConfirmationView(labelTemplatesProvider:sharedGlobals:)(v12, v13);
}

uint64_t ContactUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)( uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 208);
  uint64_t v4 = *v2;
  *(void *)(v4 + 216) = a1;
  swift_task_dealloc(v3);
  if (v1)
  {
    swift_task_dealloc(*(void *)(v4 + 200));
    OUTLINED_FUNCTION_7_8();
    return OUTLINED_FUNCTION_6_17(*(uint64_t (**)(void))(v4 + 8));
  }

  else
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_17_3();
  }

uint64_t ContactUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)()
{
  uint64_t v3 = (void *)OUTLINED_FUNCTION_10_2(*(void *)(v1 + 48));
  v2[28] = v3;
  *uint64_t v3 = v2;
  v3[1] = ContactUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:);
  return v5(v2[25], v2[19], v2[18], v0, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = *(void *)(*(void *)v1 + 224LL);
  *(void *)(*(void *)v1 + 232LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_17_3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  uint64_t v18;
  OUTLINED_FUNCTION_51_3();
  uint64_t v17 = *(void *)(v0 + 216);
  uint64_t v18 = *(void *)(v0 + 192);
  uint64_t v1 = *(void **)(v0 + 168);
  uint64_t v3 = v1[3];
  uint64_t v2 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v2);
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  OUTLINED_FUNCTION_66(v1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  uint64_t v6 = *(void *)(v0 + 80);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v6);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v6);
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  ContactUnsetRelationshipFlowStrategy.contactNeedsConfirmationContext.getter();
  uint64_t v7 = OUTLINED_FUNCTION_42_4();
  OUTLINED_FUNCTION_11_13(v7);
  *(double *)&uint64_t v8 = OUTLINED_FUNCTION_59_3();
  *(_OWORD *)(v0 + 96) = v8;
  OUTLINED_FUNCTION_81_1(v9, (uint64_t)&protocol witness table for AceOutput);
  uint64_t v10 = OUTLINED_FUNCTION_65_0();
  OUTLINED_FUNCTION_78_1(v10, v11, v12, v17, v13);
  OUTLINED_FUNCTION_4_1();
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v0 + 96,  &demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_40_3(v14, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  OUTLINED_FUNCTION_41_5(v18);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 56));
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_7_8();
  unint64_t v15 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
  return OUTLINED_FUNCTION_4_12(v15);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_37_5();
  OUTLINED_FUNCTION_7_8();
  return OUTLINED_FUNCTION_6_17(*(uint64_t (**)(void))(v0 + 8));
}

PhoneCallFlowDelegatePlugin::PhoneCallSlotNames_optional ContactUnsetRelationshipFlowStrategy.contactNeedsConfirmationContext.getter()
{
  v0._uint64_t countAndFlagsBits = 0x73746361746E6F63LL;
  v0._object = (void *)0xE800000000000000LL;
  result.value = PhoneCallSlotNames.init(rawValue:)(v0).value;
  if ((result.value & 0xFE) == 4)
  {
    uint64_t v2 = specialized static PhoneCallNLContextProvider.makeSDAForConfirmation()();
    return (PhoneCallFlowDelegatePlugin::PhoneCallSlotNames_optional)NLContextUpdate.nluSystemDialogActs.setter(v2);
  }

  return result;
}

uint64_t closure #1 in ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:)( uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NLContextUpdate, Never>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin();
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v9);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 8))(v22, v9, v10);
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v11);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v12 + 184))(v21, v11, v12);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallNLContextProvider<INIntent, INIntentResponse>);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v14 = (void *)specialized PhoneCallNLContextProvider.init(deviceState:assistantProperties:)(v22, v21);
  specialized _arrayForceCast<A, B>(_:)(a3);
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v6);
  uint64_t v17 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = (v17 + 16) & ~v17;
  uint64_t v19 = swift_allocObject(&unk_3F7268, v18 + v8, v17 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))( v19 + v18,  (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v6);
  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t))(class metadata base offset for PhoneCallNLContextProvider + *v14 + 40))( 0x73746361746E6F63LL,  0xE800000000000000LL,  v16,  partial apply for closure #1 in closure #1 in ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:),  v19);
  swift_release(v19);
  swift_release(v14);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:)( uint64_t a1)
{
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NLContextUpdate, Never>);
  return CheckedContinuation.resume(returning:)(v3, v5);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_42BEB4);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return ContactUnsetRelationshipFlowStrategy.parseRequestedRelationship(resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.applyPersonToIntent(person:requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(dword_42BEC4);
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return ContactUnsetRelationshipFlowStrategy.applyPersonToIntent(person:requestedRelationship:resolveRecord:)( a1,  a2,  v11,  a4,  a5);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(dword_42BED4);
  *(void *)(v4 + 16) = v8;
  void *v8 = v4;
  v8[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:)( a1,  a2,  v9,  a4);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeUnsupportedPlatformResponse(requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_42BEEC);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return ContactUnsetRelationshipFlowStrategy.makeUnsupportedPlatformResponse(requestedRelationship:resolveRecord:)( a1,  a2);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:)(a1, a2, a3, a4);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseUnsetRelationshipPersonFromResponse(input:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_42BF04);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return ContactUnsetRelationshipFlowStrategy.parseUnsetRelationshipPersonFromResponse(input:resolveRecord:)(a1, a2);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makePromptForPersonName(requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(dword_42BF1C);
  *(void *)(v4 + 16) = v8;
  void *v8 = v4;
  v8[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return ContactUnsetRelationshipFlowStrategy.makePromptForPersonName(requestedRelationship:resolveRecord:)( a1,  a2,  v9,  a4);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForPersonNameOnEmptyParse(requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForPersonNameOnEmptyParse(requestedRelationship:resolveRecord:)[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForPersonNameOnEmptyParse(requestedRelationship:resolveRecord:)( a1,  a2,  a3,  a4,  a5);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForPersonNameOnLowConfidence(requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForPersonNameOnLowConfidence(requestedRelationship:resolveRecord:)[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForPersonNameOnLowConfidence(requestedRelationship:resolveRecord:)( a1,  a2,  a3,  a4,  a5);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeContactNotFoundResponse(requestedPerson:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to UnsupportedUnsetRelationshipFlowStrategyAsync.makeContactNotFoundResponse(requestedPerson:resolveRecord:)[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeContactNotFoundResponse(requestedPerson:resolveRecord:)( a1,  a2,  a3,  a4,  a5);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeDisambiguationItemContainer(contacts:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc(dword_42BF2C);
  *(void *)(v2 + 24) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeDisambiguationItemContainer(contacts:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return ContactUnsetRelationshipFlowStrategy.makeDisambiguationItemContainer(contacts:resolveRecord:)(a2);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeDisambiguationItemContainer(contacts:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1)
{
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *v3;
  *uint64_t v7 = v6;
  swift_task_dealloc(v5);
  if (!v1) {
    **(void **)(v2 + 16) = a1;
  }
  return OUTLINED_FUNCTION_24_1(*(uint64_t (**)(void))(v6 + 8));
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseContactDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_42BF3C);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return ContactUnsetRelationshipFlowStrategy.parseContactDisambiguationResult(input:paginatedItems:resolveRecord:)( a1,  a2,  a3);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makePromptForContactDisambiguation(paginatedItems:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(dword_42BF54);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return ContactUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:)( a1,  a2,  a3,  a4);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForContactDisambiguationOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForContactDisambiguationOnEmptyParse(paginatedItems:resolveRecord:)[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForContactDisambiguationOnEmptyParse(paginatedItems:resolveRecord:)( a1,  a2,  a3,  a4,  a5);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForContactDisambiguationOnLowConfidence(paginatedItems:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForContactDisambiguationOnLowConfidence(paginatedItems:resolveRecord:)[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForContactDisambiguationOnLowConfidence(paginatedItems:resolveRecord:)( a1,  a2,  a3,  a4,  a5);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parsePromptToSaveRelationshipResponse(input:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_42BF6C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return ContactUnsetRelationshipFlowStrategy.parsePromptToSaveRelationshipResponse(input:resolveRecord:)(a1, a2);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(dword_42BF74);
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return ContactUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)( a1,  a2,  a3,  v11,  a5);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnEmptyParse(person:requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnEmptyParse(person:requestedRelationship:resolveRecord:)[1]);
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnEmptyParse(person:requestedRelationship:resolveRecord:)( a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnLowConfidence(person:requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnLowConfidence(person:requestedRelationship:resolveRecord:)[1]);
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnLowConfidence(person:requestedRelationship:resolveRecord:)( a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to UnsupportedUnsetRelationshipFlowStrategyAsync.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:)[1]);
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:)( a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeSaveRelationshipRejectedResponse(person:requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to UnsupportedUnsetRelationshipFlowStrategyAsync.makeSaveRelationshipRejectedResponse(person:requestedRelationship:resolveRecord:)[1]);
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeSaveRelationshipRejectedResponse(person:requestedRelationship:resolveRecord:)( a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_42BEF4);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return ContactUnsetRelationshipFlowStrategy.makeErrorResponse(error:app:intent:)(a1);
}

uint64_t sub_680E4()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 120LL, 7LL);
}

uint64_t outlined init with copy of PhoneCallDirectInvocationNLIntent(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *outlined destroy of PhoneCallDirectInvocationNLIntent(void *a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:)( uint64_t a1)
{
  return closure #1 in ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:)( a1,  *(void *)(v1 + 32),  *(void *)(v1 + 16));
}

void outlined init with copy of SiriPhoneContact?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = OUTLINED_FUNCTION_9_0();
  v4(v3);
  OUTLINED_FUNCTION_2();
}

uint64_t outlined destroy of ContactDisambiguationPromptResponseParser(uint64_t a1)
{
  return a1;
}

void outlined consume of ContactDisambiguationPromptResponse?(id a1, unsigned __int8 a2)
{
  if (a2 != 0xFF) {
    outlined consume of ContactDisambiguationPromptResponse(a1, a2);
  }
}

void outlined consume of ContactDisambiguationPromptResponse(id a1, unsigned __int8 a2)
{
  if ((a2 | 2) == 3) {
}
  }

id outlined copy of ContactDisambiguationPromptResponse(id result, unsigned __int8 a2)
{
  if ((a2 | 2) == 3) {
    return result;
  }
  return result;
}

uint64_t partial apply for closure #1 in ContactUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:)( uint64_t a1)
{
  return closure #1 in ContactUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:)( a1,  *(void *)(v1 + 16));
}

uint64_t associated type witness table accessor for UnsupportedUnsetRelationshipFlowStrategyAsync.DisambiguationItemContainerType : DisambiguationItemContaining in ContactUnsetRelationshipFlowStrategy<A>( uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for BasicDisambiguationItemContainer<A>, a1);
}

uint64_t type metadata instantiation function for ContactUnsetRelationshipFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48LL);
}

uint64_t destroy for ContactUnsetRelationshipFlowStrategy(void *a1)
{
  return swift_release(a1[22]);
}

uint64_t initializeWithCopy for ContactUnsetRelationshipFlowStrategy(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  __int128 v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  __int128 v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  uint64_t v8 = *(void *)(a2 + 160);
  uint64_t v9 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = v8;
  *(void *)(a1 + 168) = v9;
  uint64_t v10 = *(void *)(a2 + 176);
  *(void *)(a1 + 176) = v10;
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  return a1;
}

void *assignWithCopy for ContactUnsetRelationshipFlowStrategy(void *a1, void *a2)
{
  uint64_t v4 = a1[20];
  a1[20] = a2[20];
  swift_retain();
  swift_release(v4);
  uint64_t v5 = a1[21];
  a1[21] = a2[21];
  swift_retain();
  swift_release(v5);
  uint64_t v6 = a2[22];
  uint64_t v7 = a1[22];
  a1[22] = v6;
  swift_retain();
  swift_release(v7);
  return a1;
}

void *__swift_memcpy184_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xB8uLL);
}

uint64_t assignWithTake for ContactUnsetRelationshipFlowStrategy(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 80));
  __int128 v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v6 = *(void *)(a2 + 160);
  uint64_t v7 = *(void *)(a1 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v6;
  swift_release(v7);
  uint64_t v8 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_release(v8);
  uint64_t v9 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_release(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactUnsetRelationshipFlowStrategy(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 184))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactUnsetRelationshipFlowStrategy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)PhoneCallFlowDelegatePlugin::PhoneCallSlotNames_optional result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 184) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 184) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for ContactUnsetRelationshipFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for ContactUnsetRelationshipFlowStrategy);
}

uint64_t outlined init with copy of DisambiguationItemWithDirectInvocationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DisambiguationItemWithDirectInvocationModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 64LL;
  for (uint64_t i = 10LL; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

void *specialized Dictionary.subscript.getter(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1LL << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a5 + 36) == a3)
  {
    char v5 = (uint64_t *)(*(void *)(a5 + 48) + 16 * a2);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    uint64_t v8 = *(void *)(*(void *)(a5 + 56) + 8 * a2);
    *PhoneCallFlowDelegatePlugin::PhoneCallSlotNames_optional result = v8;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    return (void *)v6;
  }

LABEL_8:
  __break(1u);
  return result;
}

  OUTLINED_FUNCTION_0_0();
}

      uint64_t v7 = 1;
      goto LABEL_23;
    }

    uint64_t v7 = 0;
LABEL_23:
    swift_bridgeObjectRelease_n(v2, 2LL);
    swift_release(v1);
  }

  else
  {
LABEL_31:
    uint64_t v7 = 0;
  }

  return v7 & 1;
}

    swift_bridgeObjectRelease();
LABEL_9:
    uint64_t v7 = v0 + 80;
    if (one-time initialization token for siriPhone == -1)
    {
LABEL_10:
      uint64_t v12 = OUTLINED_FUNCTION_15_1();
      uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
      uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
      uint64_t v16 = static os_log_type_t.debug.getter(v14, v15);
      if (os_log_type_enabled(v14, v16))
      {
        uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
        *(_WORD *)uint64_t v17 = 0;
        _os_log_impl(&dword_0, v14, v16, "#CallStateGuardFlow: Passed!", v17, 2u);
        OUTLINED_FUNCTION_0_2((uint64_t)v17);
      }

      uint64_t v18 = *(void *)(v0 + 112);

      uint64_t v19 = OUTLINED_FUNCTION_3_3(v18 + 64, v7);
      *(_BYTE *)(v18 + 64) = 0;
      static ExecuteResponse.complete()(v19);
      goto LABEL_18;
    }

  OUTLINED_FUNCTION_17_40(v12, (v11 & 0xC000000000000001LL) == 0);
  if ((v11 & 0xC000000000000001LL) != 0) {
    uint64_t v13 = (void *)OUTLINED_FUNCTION_38_3();
  }
  else {
    uint64_t v13 = *(id *)(v11 + 32);
  }
  uint64_t v14 = v13;
  OUTLINED_FUNCTION_62();
  uint64_t v15 = outlined bridged method (ob) of @objc INAddCallParticipantIntentResponse.invites.getter( v14,  (SEL *)&selRef_participants,  (unint64_t *)&lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
  if (v15)
  {
    uint64_t v16 = v15;
    goto LABEL_18;
  }

uint64_t partial apply for closure #1 in ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:)( uint64_t a1)
{
  return closure #1 in ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:)( a1,  *(void **)(v1 + 32),  *(void *)(v1 + 40));
}

uint64_t sub_68714()
{
  return objectdestroy_67Tm(&demangling cache variable for type metadata for CheckedContinuation<NLContextUpdate, Never>);
}

uint64_t partial apply for closure #1 in closure #1 in ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:)( uint64_t a1)
{
  return closure #1 in closure #1 in ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:)(a1);
}

uint64_t sub_68754()
{
  return objectdestroy_67Tm(&demangling cache variable for type metadata for CheckedContinuation<[SAAceView], Error>);
}

uint64_t objectdestroy_67Tm(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t partial apply for closure #1 in closure #1 in ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:)( uint64_t a1, char a2)
{
  char v3 = a2 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SAAceView], Error>);
  OUTLINED_FUNCTION_77();
  return closure #1 in closure #1 in ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:)( a1,  v3);
}

uint64_t sub_68800()
{
  return swift_deallocObject(v0, 192LL, 7LL);
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_4_12(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_6_17(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_11_13(uint64_t a1)
{
  return type metadata accessor for AceOutput(0LL);
}

uint64_t OUTLINED_FUNCTION_17_14(uint64_t a1)
{
  return swift_allocError(v1, a1, 0LL, 0LL);
}

uint64_t OUTLINED_FUNCTION_18_10(uint64_t a1)
{
  return v3(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_19_7()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 208);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 216) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_20_5()
{
  return specialized static PhoneCallNLContextProvider.makeNeedsValueContextFor(parameter:)( 0x73746361746E6F63LL,  (void *)0xE800000000000000LL);
}

uint64_t OUTLINED_FUNCTION_22_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_26_5@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

void *OUTLINED_FUNCTION_29_8@<X0>(uint64_t a1@<X8>)
{
  return __swift_project_boxed_opaque_existential_1((void *)(a1 + 120), *(void *)(a1 + 144));
}

uint64_t OUTLINED_FUNCTION_30_6(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_32_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_34_8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_36_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v5, v4, a4);
}

uint64_t OUTLINED_FUNCTION_37_5()
{
  return swift_task_dealloc(*(void *)(v0 + 200));
}

uint64_t OUTLINED_FUNCTION_39_3(uint64_t a1)
{
  return swift_storeEnumTagMultiPayload(a1, v1, 0LL);
}

uint64_t OUTLINED_FUNCTION_41_5@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_42_4()
{
  return type metadata accessor for NLContextUpdate(0LL);
}

uint64_t OUTLINED_FUNCTION_44_5(uint64_t a1)
{
  return v1(a1, v2);
}

void OUTLINED_FUNCTION_45_1()
{
}

uint64_t OUTLINED_FUNCTION_50_7(uint64_t a1)
{
  return IntentPromptAnswer.init(answeredValue:updatedIntent:)(a1, v2, v1);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_56_2(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_58_2()
{
  return swift_task_dealloc(*(void *)(v0 + 152));
}

double OUTLINED_FUNCTION_59_3()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 112) = 0u;
  *(void *)(v0 + 128) = 0LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_60_4()
{
  return v0;
}

void OUTLINED_FUNCTION_61_2()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_62_1()
{
  return __swift_destroy_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_67_2()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  return *(void *)(v2 + 200);
}

  ;
}

uint64_t OUTLINED_FUNCTION_70_1(uint64_t a1)
{
  *(void *)(v1 + 176) = a1;
  return type metadata accessor for TemplatingResult(0LL);
}

uint64_t OUTLINED_FUNCTION_71_1@<X0>( uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(v2, a1, v3);
}

uint64_t OUTLINED_FUNCTION_73_0()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_74_0(char a1)
{
  return a1 & 1;
}

void OUTLINED_FUNCTION_75_0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

  ;
}

uint64_t OUTLINED_FUNCTION_78_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( a1,  a2,  a3,  a4,  a5,  0LL,  v5);
}

uint64_t OUTLINED_FUNCTION_80_1()
{
  return swift_willThrow();
}

void *OUTLINED_FUNCTION_81_1@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v2[3] = a1;
  v2[4] = a2;
  return __swift_allocate_boxed_opaque_existential_1(v2);
}

uint64_t OUTLINED_FUNCTION_83_0()
{
  return type metadata accessor for IntentPromptAnswer(0LL, v0);
}

void *OUTLINED_FUNCTION_84_0(void *a1)
{
  return __swift_project_boxed_opaque_existential_1(a1, v1);
}

uint64_t OUTLINED_FUNCTION_85_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

uint64_t OUTLINED_FUNCTION_86_1(uint64_t a1, uint64_t a2)
{
  return PhoneError.logged()(a2);
}

void OUTLINED_FUNCTION_88_1(uint64_t a1, uint64_t *a2)
{
}

uint64_t OUTLINED_FUNCTION_91_0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t key path setter for PhoneFlow.state : <A, B>PhoneFlow<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (char *)&v10 - v6;
  (*(void (**)(char *, uint64_t))(v8 + 16))((char *)&v10 - v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 136LL))(v7);
}

void PhoneFlow.state.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = OUTLINED_FUNCTION_8_10(*(void *)(*v1 + 112), v7);
  uint64_t v6 = OUTLINED_FUNCTION_7_14(v4, *(void *)(v3 + 80), *(void *)(v3 + 88), v5);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, v1, v6);
  OUTLINED_FUNCTION_26_1();
}

void PhoneFlow.state.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 112);
  uint64_t v5 = OUTLINED_FUNCTION_5_9(v4, (uint64_t)v8);
  uint64_t v7 = OUTLINED_FUNCTION_7_14(v5, *(void *)(v3 + 80), *(void *)(v3 + 88), v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40LL))(v4, a1, v7);
  swift_endAccess(v8);
  OUTLINED_FUNCTION_26_1();
}

uint64_t (*PhoneFlow.state.modify(uint64_t a1))()
{
  return PhoneFlow.state.modify;
}

uint64_t key path setter for PhoneFlow.sharedGlobals : <A, B>PhoneFlow<A, B>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_BYTE *))(**(void **)a2 + 160LL))(v4);
}

void PhoneFlow.sharedGlobals.getter(uint64_t a1@<X8>)
{
}

void PhoneFlow.sharedGlobals.setter(__int128 *a1)
{
  uint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 120LL));
  OUTLINED_FUNCTION_5_9((uint64_t)v3, (uint64_t)v4);
  __swift_destroy_boxed_opaque_existential_1(v3);
  outlined init with take of AppSelectionSignalComponent(a1, (uint64_t)v3);
  swift_endAccess(v4);
  OUTLINED_FUNCTION_16_7();
}

uint64_t (*PhoneFlow.sharedGlobals.modify(uint64_t a1))()
{
  return static SingleResultVoicemailModel.resultViewID.modify;
}

uint64_t PhoneFlow.__allocating_init(sharedGlobals:)()
{
  uint64_t v0 = OUTLINED_FUNCTION_14_5();
  PhoneFlow.init(sharedGlobals:)();
  return v0;
}

void PhoneFlow.init(sharedGlobals:)()
{
  uint64_t v2 = v0 + v1;
  uint64_t v6 = OUTLINED_FUNCTION_7_14(v4, *(void *)(v3 + 80), *(void *)(v3 + 88), v5);
  swift_storeEnumTagMultiPayload(v2, v6, 5LL);
  OUTLINED_FUNCTION_20_6();
  OUTLINED_FUNCTION_6();
}

void PhoneFlow.__allocating_init(state:sharedGlobals:)(uint64_t a1)
{
}

void PhoneFlow.init(state:sharedGlobals:)(uint64_t a1)
{
  uint64_t v4 = v1 + v3;
  uint64_t v8 = OUTLINED_FUNCTION_7_14(v6, *(void *)(v5 + 80), *(void *)(v5 + 88), v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v4, a1, v8);
  OUTLINED_FUNCTION_20_6();
  OUTLINED_FUNCTION_6();
}

uint64_t PhoneFlow.on(input:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  uint64_t v3 = swift_retain();
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v7 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v12 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = *(void *)(v1 + 16);
    unint64_t v9 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    uint64_t v11 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v6 + 4);
    swift_release(v1);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v4, v5, "%s: on(input:) called. This should never happen.", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL);
    OUTLINED_FUNCTION_0_2(v7);
    OUTLINED_FUNCTION_0_2((uint64_t)v6);
  }

  else
  {

    swift_release(v0);
  }

  return 0LL;
}

void PhoneFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for PhoneFlow( 0LL,  *(void *)(*(void *)v2 + 80LL),  *(void *)(*(void *)v2 + 88LL),  *(void *)(*(void *)v2 + 96LL));
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for PhoneFlow<A, B>, v5);
  Flow.deferToExecuteAsync(_:)(a1, a2, v5, WitnessTable);
  OUTLINED_FUNCTION_16_7();
}

uint64_t PhoneFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return swift_task_switch(PhoneFlow.execute(), 0LL, 0LL);
}

uint64_t PhoneFlow.execute()()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  uint64_t v2 = swift_retain();
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 32);
  if (v5)
  {
    uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v8 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v13 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v10 = *(void *)(v6 + 16);
    unint64_t v9 = *(void *)(v6 + 24);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4);
    swift_bridgeObjectRelease();
    swift_release(v6);
    _os_log_impl(&dword_0, v3, v4, "%s: execute() called. This should never happen.", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL);
    OUTLINED_FUNCTION_0_2(v8);
    OUTLINED_FUNCTION_0_2((uint64_t)v7);
  }

  else
  {
    swift_release(*(void *)(v0 + 32));
  }

  static ExecuteResponse.complete()(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void PhoneFlow.onRCHFlowComplete(exitValue:)(void *a1)
{
  os_log_type_t v4 = (void *)type metadata accessor for RCHFlowResult( 0LL,  *(void *)(*(void *)v1 + 80LL),  *(void *)(*(void *)v1 + 88LL));
  uint64_t v5 = *(v4 - 1);
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_12();
  (*(void (**)(void *, void *, void *))(v5 + 16))(v2, a1, v4);
  if (OUTLINED_FUNCTION_4_13(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 88)) == enum case for RCHFlowResult.complete<A, B>(_:))
  {
    OUTLINED_FUNCTION_4_13(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 96));
    OUTLINED_FUNCTION_21_6();

    uint64_t v6 = v4;
    OUTLINED_FUNCTION_15_9((uint64_t)v6, v7, v8, v9);
  }

  else
  {
    OUTLINED_FUNCTION_4_13(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    PhoneFlow.onRCHFlowCompletedWithIntentResponse(_:)(0LL, v10, v11, v12);
  }

  OUTLINED_FUNCTION_16();
}

void PhoneFlow.onRCHFlowComplete(exitValue:)(uint64_t a1)
{
  os_log_type_t v4 = (void *)type metadata accessor for RCHFlowResult( 255LL,  *(void *)(*(void *)v1 + 80LL),  *(void *)(*(void *)v1 + 88LL));
  uint64_t v5 = (void *)type metadata accessor for ConditionalFlowResult(0LL, v4);
  uint64_t v6 = *(v5 - 1);
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_12();
  (*(void (**)(void *, uint64_t, void *))(v6 + 16))(v2, a1, v5);
  if (__swift_getEnumTagSinglePayload((uint64_t)v2, 1LL, (uint64_t)v4) == 1
    || (uint64_t v6 = *((void *)v4 - 1),
        OUTLINED_FUNCTION_4_13(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 88)) != enum case for RCHFlowResult.complete<A, B>(_:)))
  {
    OUTLINED_FUNCTION_4_13(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    PhoneFlow.onRCHFlowCompletedWithIntentResponse(_:)(0LL, v11, v12, v13);
  }

  else
  {
    OUTLINED_FUNCTION_4_13(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 96));
    OUTLINED_FUNCTION_21_6();

    id v7 = v4;
    OUTLINED_FUNCTION_15_9((uint64_t)v7, v8, v9, v10);
  }

  OUTLINED_FUNCTION_16();
}

uint64_t PhoneFlow.dismissSiri()()
{
  (*(void (**)(__int128 *__return_ptr))(*(void *)v0 + 152LL))(v5);
  uint64_t v1 = type metadata accessor for DismissSiriFlow();
  uint64_t v2 = swift_allocObject(v1, 56LL, 7LL);
  outlined init with take of AppSelectionSignalComponent(v5, v2 + 16);
  *(void *)&v5[0] = v2;
  uint64_t v3 = swift_allocObject(&unk_3F73F8, 32LL, 7LL);
  *(void *)(v3 + 16) = partial apply for closure #1 in PhoneFlow.dismissSiri();
  *(void *)(v3 + 24) = v0;
  lazy protocol witness table accessor for type DismissSiriFlow and conformance DismissSiriFlow();
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)( v5,  AnyIntentCarPlayRCHFlowProvider.makeRCHFlow(input:),  v3,  v1);
  swift_release(v3);
  return swift_release(*(void *)&v5[0]);
}

uint64_t closure #1 in PhoneFlow.dismissSiri()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (char *)&v9 - v5;
  swift_storeEnumTagMultiPayload((char *)&v9 - v5, v7, 7LL);
  return (*(uint64_t (**)(char *))(*(void *)a1 + 136LL))(v6);
}

void thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1, void (*a2)(void))
{
}

uint64_t PhoneFlow.checkShouldDismissSiri(intentResponse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(*v4 + 88);
  uint64_t v7 = type metadata accessor for PhoneCallFlowState(0LL, *(void *)(*v4 + 80), v6, a4);
  OUTLINED_FUNCTION_17_4();
  __chkstk_darwin();
  uint64_t v9 = (char *)&v12 - v8;
  char v10 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 96) + 8LL))(v6);
  if ((v10 & 1) != 0)
  {
    swift_storeEnumTagMultiPayload(v9, v7, 6LL);
    (*(void (**)(char *))(*v4 + 136))(v9);
  }

  return v10 & 1;
}

void PhoneFlow.onRCHFlowCompletedWithIntentResponse(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *v4;
  uint64_t v8 = OUTLINED_FUNCTION_7_14((uint64_t)a1, *(void *)(*v4 + 80), *(void *)(*v4 + 88), a4);
  OUTLINED_FUNCTION_17_4();
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_12();
  if (!a1
    || (uint64_t v9 = *(uint64_t (**)(void))(v7 + 240),
        id v10 = a1,
        LOBYTE(v9) = v9(),
        v10,
        (v9 & 1) == 0))
  {
    swift_storeEnumTagMultiPayload(v5, v8, 7LL);
    (*(void (**)(uint64_t))(*v4 + 136))(v5);
  }

  OUTLINED_FUNCTION_16();
}

void PhoneFlow.deinit()
{
  uint64_t v1 = *v0;
  uint64_t v2 = swift_bridgeObjectRelease();
  uint64_t v3 = (uint64_t)v0 + *(void *)(*v0 + 112);
  uint64_t v5 = OUTLINED_FUNCTION_7_14(v2, *(void *)(v1 + 80), *(void *)(v1 + 88), v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v3, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t *)((char *)v0 + *(void *)(*v0 + 120)));
  OUTLINED_FUNCTION_6();
}

uint64_t PhoneFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t protocol witness for Flow.on(input:) in conformance PhoneFlow<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192LL))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance PhoneFlow<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200LL))();
}

uint64_t protocol witness for Flow.execute() in conformance PhoneFlow<A, B>(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 208LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance ContactNeedsValueGuardFlow<A>;
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance PhoneFlow<A, B>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for PhoneFlow(0LL, a1[10], a1[11], a1[12]);
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t type metadata accessor for PhoneFlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PhoneFlow);
}

uint64_t partial apply for closure #1 in PhoneFlow.dismissSiri()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in PhoneFlow.dismissSiri()(v4, a2, a3, a4);
}

uint64_t sub_698C0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void AnyIntentCarPlayRCHFlowProvider.makeRCHFlow(input:)()
{
}

unint64_t lazy protocol witness table accessor for type DismissSiriFlow and conformance DismissSiriFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type DismissSiriFlow and conformance DismissSiriFlow;
  if (!lazy protocol witness table cache variable for type DismissSiriFlow and conformance DismissSiriFlow)
  {
    uint64_t v1 = type metadata accessor for DismissSiriFlow();
    unint64_t result = swift_getWitnessTable("ّ\r", v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DismissSiriFlow and conformance DismissSiriFlow);
  }

  return result;
}

void sub_69940(uint64_t a1)
{
}

void sub_69970(uint64_t a1)
{
}

uint64_t type metadata completion function for PhoneFlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = &unk_31FB88;
  uint64_t result = type metadata accessor for PhoneCallFlowState(319LL, *(void *)(a1 + 80), *(void *)(a1 + 88), a4);
  if (v6 <= 0x3F)
  {
    v7[1] = *(void *)(result - 8) + 64LL;
    v7[2] = &unk_31FBA0;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 3LL, v7, a1 + 104);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void OUTLINED_FUNCTION_1_14()
{
  *(void *)(v0 + 16) = 0x6F6C46656E6F6850LL;
  *(void *)(v0 + 24) = 0xE900000000000077LL;
}

uint64_t OUTLINED_FUNCTION_4_13@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_7_14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for PhoneCallFlowState(0LL, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_8_10@<X0>(uint64_t a1@<X8>, uint64_t a2, ...)
{
  return swift_beginAccess(v2 + a1, va, 0LL, 0LL);
}

__n128 OUTLINED_FUNCTION_9_13(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

  ;
}

void OUTLINED_FUNCTION_15_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

  ;
}

uint64_t OUTLINED_FUNCTION_19_8()
{
  return 24LL;
}

uint64_t OUTLINED_FUNCTION_20_6()
{
  return v1;
}

uint64_t key path setter for PlayVoiceMailAction.nextAction : PlayVoiceMailAction(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 136LL);
  uint64_t v4 = swift_unknownObjectRetain(*a1);
  return v3(v4, v2);
}

uint64_t PlayVoiceMailAction.nextAction.getter()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 16));
}

uint64_t PlayVoiceMailAction.nextAction.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_unknownObjectRelease(v5);
}

void PlayVoiceMailAction.nextAction.modify(uint64_t a1)
{
}

void PlayVoiceMailAction.debugDescription.getter()
{
}

void PlayVoiceMailAction.voicemailIdentifier.getter()
{
}

uint64_t PlayVoiceMailAction.aceServiceInvoker.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 72, a1);
}

uint64_t EmergencyCountdownOutputBuilder.displayTextCATsSimple.getter()
{
  return swift_retain(*(void *)(v0 + 112));
}

uint64_t PlayVoiceMailAction.__allocating_init(voicemailIdentifier:isLeadingSavedVoiceMailPostPrompt:aceServiceInvoker:searchCallHistoryCatFamily:)( uint64_t a1, uint64_t a2, char a3, __int128 *a4, uint64_t a5)
{
  uint64_t v11 = OUTLINED_FUNCTION_8_2(v5, 120LL);
  PlayVoiceMailAction.init(voicemailIdentifier:isLeadingSavedVoiceMailPostPrompt:aceServiceInvoker:searchCallHistoryCatFamily:)( a1,  a2,  a3,  a4,  a5);
  return v11;
}

void PlayVoiceMailAction.init(voicemailIdentifier:isLeadingSavedVoiceMailPostPrompt:aceServiceInvoker:searchCallHistoryCatFamily:)( uint64_t a1, uint64_t a2, char a3, __int128 *a4, uint64_t a5)
{
  *(void *)(v5 + 16) = 0LL;
  *(void *)(v5 + 24) = 0LL;
  *(void *)(v5 + 32) = 0xD000000000000013LL;
  *(void *)(v5 + 40) = 0x800000000031FBB0LL;
  *(void *)(v5 + 48) = a1;
  *(void *)(v5 + 56) = a2;
  *(_BYTE *)(v5 + 64) = a3;
  outlined init with take of AppSelectionSignalComponent(a4, v5 + 72);
  *(void *)(v5 + 112) = a5;
  OUTLINED_FUNCTION_2();
}

void PlayVoiceMailAction.run(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for INPlayVoicemailIntent( 0LL,  &lazy cache variable for type metadata for INPlayVoicemailIntent,  &OBJC_CLASS___INPlayVoicemailIntent_ptr);
  static INPlayVoicemailIntent.makeFirstPartyHandleIntent(identifier:)();
  id v21 = v6;
  if (v2[64] == 1)
  {
    uint64_t v7 = (void *)OUTLINED_FUNCTION_8_2((uint64_t)&unk_3F75A8, 48LL);
    v7[2] = a1;
    void v7[3] = a2;
    v7[4] = v21;
    v7[5] = v2;
    uint64_t v8 = *(void (**)(void, void *))(*(void *)v2 + 168LL);
    OUTLINED_FUNCTION_3_8();
    id v9 = v21;
    swift_retain();
    v8(partial apply for closure #1 in PlayVoiceMailAction.run(_:), v7);
  }

  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.siriPhone);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v14 = static os_log_type_t.debug.getter(v12, v13);
    if (os_log_type_enabled(v12, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_0, v12, v14, "#PlayVoiceMailAction Submitting play voicemail action", v15, 2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    uint64_t v16 = v3 + 9;
    uint64_t v18 = v3[12];
    uint64_t v17 = v3[13];
    __swift_project_boxed_opaque_existential_1(v16, v18);
    uint64_t v7 = (void *)OUTLINED_FUNCTION_8_2((uint64_t)&unk_3F7580, 32LL);
    v7[2] = a1;
    void v7[3] = a2;
    type metadata accessor for INPlayVoicemailIntent( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SABaseCommand,  &OBJC_CLASS___SABaseCommand_ptr);
    uint64_t v20 = v19;
    OUTLINED_FUNCTION_3_8();
    dispatch thunk of AceServiceInvoker.submit<A>(_:completion:)( v21,  partial apply for closure #2 in PlayVoiceMailAction.run(_:),  v7,  v20,  v18,  v17);
  }

  swift_release(v7);
}

void closure #1 in PlayVoiceMailAction.run(_:)( void *a1, char a2, void (*a3)(void), uint64_t a4, void *a5, void *a6)
{
  if ((a2 & 1) != 0)
  {
    a3(0LL);
  }

  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v12 = swift_allocObject(v11, 48LL, 7LL);
    *(_OWORD *)(v12 + 16) = xmmword_31FBC0;
    *(void *)(v12 + 32) = a1;
    *(void *)(v12 + 40) = a5;
    uint64_t v21 = v12;
    specialized Array._endMutation()(v12, v13, v14, v15);
    uint64_t v16 = a6 + 9;
    uint64_t v18 = a6[12];
    uint64_t v17 = a6[13];
    __swift_project_boxed_opaque_existential_1(v16, v18);
    uint64_t v19 = swift_allocObject(&unk_3F7608, 32LL, 7LL);
    *(void *)(v19 + 16) = a3;
    *(void *)(v19 + 24) = a4;
    outlined copy of Result<SABaseCommand, Error>(a1, 0);
    outlined copy of Result<SABaseCommand, Error>(a1, 0);
    id v20 = a5;
    swift_retain();
    dispatch thunk of AceServiceInvoker.submitAllSerial(_:_:)( v21,  partial apply for closure #1 in closure #1 in PlayVoiceMailAction.run(_:),  v19,  v18,  v17);
    swift_bridgeObjectRelease();
    swift_release(v19);
    outlined consume of Result<SABaseCommand, Error>(a1, 0);
  }

uint64_t closure #1 in closure #1 in PlayVoiceMailAction.run(_:)( uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SubmitCommandError(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  id v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of Result<TemplatingResult, Error>( a1,  (uint64_t)v5,  &demangling cache variable for type metadata for SubmitCommandError?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1LL, v6) == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v5,  &demangling cache variable for type metadata for SubmitCommandError?);
    return a2(0LL);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    lazy protocol witness table accessor for type PlayVoiceMailAction and conformance PlayVoiceMailAction( &lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for SubmitCommandError,  (uint64_t)&protocol conformance descriptor for SubmitCommandError);
    uint64_t v12 = swift_allocError(v6, v11, 0LL, 0LL);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v13, v9, v6);
    a2(v12);
    swift_errorRelease(v12);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

uint64_t closure #2 in PlayVoiceMailAction.run(_:)(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<SABaseCommand, SubmitCommandError>);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SubmitCommandError(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v32 - v13;
  outlined init with copy of Result<TemplatingResult, Error>( a1,  (uint64_t)v8,  &demangling cache variable for type metadata for Result<SABaseCommand, SubmitCommandError>);
  if (swift_getEnumCaseMultiPayload(v8, v6) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v8, v9);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v35 = a3;
    uint64_t v15 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
    uint64_t v16 = *(uint64_t (**)(char *, char *, uint64_t))(v10 + 16);
    uint64_t v17 = v16(v12, v14, v9);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v34 = a2;
      uint64_t v22 = v21;
      uint64_t v37 = v21;
      Swift::String_optional v33 = v16;
      *(_DWORD *)id v20 = 136315138;
      uint64_t v32 = v20 + 4;
      lazy protocol witness table accessor for type PlayVoiceMailAction and conformance PlayVoiceMailAction( &lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for SubmitCommandError,  (uint64_t)&protocol conformance descriptor for SubmitCommandError);
      uint64_t v24 = Error.localizedDescription.getter(v9, v23);
      uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v37);
      uint64_t v16 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v32);
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void (**)(char *, uint64_t))(v10 + 8);
      v26(v12, v9);
      _os_log_impl(&dword_0, v18, v19, "#PlayVoiceMailAction Error submitting play voicemail command %s", v20, 0xCu);
      swift_arrayDestroy(v22, 1LL);
      uint64_t v27 = v22;
      a2 = v34;
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
      uint64_t v26 = *(void (**)(char *, uint64_t))(v10 + 8);
      v26(v12, v9);
    }

    lazy protocol witness table accessor for type PlayVoiceMailAction and conformance PlayVoiceMailAction( &lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for SubmitCommandError,  (uint64_t)&protocol conformance descriptor for SubmitCommandError);
    uint64_t v30 = swift_allocError(v9, v29, 0LL, 0LL);
    v16(v31, v14, v9);
    a2(v30);
    swift_errorRelease(v30);
    return ((uint64_t (*)(char *, uint64_t))v26)(v14, v9);
  }

  else
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v8,  &demangling cache variable for type metadata for Result<SABaseCommand, SubmitCommandError>);
    return ((uint64_t (*)(void))a2)(0LL);
  }

uint64_t PlayVoiceMailAction.makeSummaryView(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(v2 + 112);
  uint64_t v6 = OUTLINED_FUNCTION_8_2((uint64_t)&unk_3F75D0, 32LL);
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(class metadata base offset for SearchCallHistoryCATs
                                                                       + *v5
                                                                       + 704);
  OUTLINED_FUNCTION_3_8();
  v7(partial apply for closure #1 in PlayVoiceMailAction.makeSummaryView(_:), v6);
  return swift_release(v6);
}

uint64_t closure #1 in PlayVoiceMailAction.makeSummaryView(_:)( uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  outlined init with copy of Result<TemplatingResult, Error>( a1,  (uint64_t)v10,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    uint64_t v11 = *v10;
    swift_errorRetain(*v10);
    a2(v11, 1LL);
    swift_errorRelease(v11);
    return swift_errorRelease(v11);
  }

  else
  {
    (*(void (**)(char *, void *, uint64_t))(v5 + 32))(v7, v10, v4);
    uint64_t v13 = type metadata accessor for ViewFactory(0LL);
    swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    uint64_t v14 = ViewFactory.init(ttsEnabled:)(1LL);
    uint64_t v15 = (void *)dispatch thunk of ViewFactory.makeSummaryView(templateResult:snippets:listenAfterSpeaking:canUseServerTTS:)( v7,  _swiftEmptyArrayStorage,  0LL,  0LL);
    swift_release(v14);
    a2((uint64_t)v15, 0LL);

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

void *PlayVoiceMailAction.deinit()
{
  return v0;
}

uint64_t PlayVoiceMailAction.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 120LL, 7LL);
}

uint64_t protocol witness for StaticAction.nextAction.setter in conformance PlayVoiceMailAction()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

void (*protocol witness for StaticAction.nextAction.modify in conformance PlayVoiceMailAction( void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 144LL))();
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t protocol witness for Action.nextAction.getter in conformance PlayVoiceMailAction()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t protocol witness for Action.run(_:) in conformance PlayVoiceMailAction()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160LL))();
}

uint64_t protocol witness for Action.run() in conformance PlayVoiceMailAction(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to Action.run()[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Action.run() in conformance PlayVoiceMailAction;
  return Action.run()(a1, a2);
}

uint64_t protocol witness for Action.run() in conformance PlayVoiceMailAction()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlayVoiceMailAction()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 40LL));
  return v1;
}

uint64_t sub_6A898()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t partial apply for closure #2 in PlayVoiceMailAction.run(_:)(uint64_t a1)
{
  return closure #2 in PlayVoiceMailAction.run(_:)(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24));
}

void type metadata accessor for INPlayVoicemailIntent(uint64_t a1, unint64_t *a2, void *a3)
{
  if (!*a2)
  {
    uint64_t v4 = objc_opt_self(*a3);
    atomic_store(swift_getObjCClassMetadata(v4), a2);
  }

  OUTLINED_FUNCTION_2();
}

uint64_t sub_6A8F8()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

void partial apply for closure #1 in PlayVoiceMailAction.run(_:)(void *a1, char a2)
{
}

uint64_t partial apply for closure #1 in PlayVoiceMailAction.makeSummaryView(_:)(uint64_t a1)
{
  return closure #1 in PlayVoiceMailAction.makeSummaryView(_:)(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16));
}

void base witness table accessor for Action in PlayVoiceMailAction(uint64_t a1, uint64_t a2)
{
}

uint64_t type metadata accessor for PlayVoiceMailAction()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin19PlayVoiceMailAction);
}

void base witness table accessor for CustomDebugStringConvertible in PlayVoiceMailAction( uint64_t a1, uint64_t a2)
{
}

uint64_t sub_6A9BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128LL))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in PlayVoiceMailAction.run(_:)(uint64_t a1)
{
  return closure #1 in closure #1 in PlayVoiceMailAction.run(_:)(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

id outlined copy of Result<SABaseCommand, Error>(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    return (id)swift_errorRetain(a1);
  }
  else {
    return a1;
  }
}

void outlined consume of Result<SABaseCommand, Error>(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    swift_errorRelease(a1);
  }
  else {
}
  }

void lazy protocol witness table accessor for type PlayVoiceMailAction and conformance PlayVoiceMailAction( unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  if (!*a1)
  {
    uint64_t v6 = a3(a2);
    atomic_store(swift_getWitnessTable(a4, v6), a1);
  }

  OUTLINED_FUNCTION_2();
}

uint64_t Collection.emptyToNil.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((dispatch thunk of Collection.isEmpty.getter() & 1) != 0)
  {
    uint64_t v5 = 1LL;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2, a1);
    uint64_t v5 = 0LL;
  }

  return __swift_storeEnumTagSinglePayload(a2, v5, 1LL, a1);
}

uint64_t Collection.unique<A>(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void *)(a2 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(class metadata base offset for KeyPath + v13 + 8);
  uint64_t v15 = static Array._allocateUninitialized(_:)(0LL, v14);
  if (Array._getCount()())
  {
    uint64_t v16 = (void *)Set.init(_nonEmptyArrayLiteral:)(v15, v14, a4);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = &_swiftEmptySetSingleton;
  }

  id v20 = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v5, a2);
  __chkstk_darwin();
  *(&v19 - 6) = a2;
  *(&v19 - 5) = a3;
  *(&v19 - 4) = a4;
  *(&v19 - 3) = (uint64_t)&v20;
  *(&v19 - 2) = a1;
  uint64_t v17 = Sequence.filter(_:)(partial apply for closure #1 in Collection.unique<A>(by:));
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t closure #1 in Collection.unique<A>(by:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(class metadata base offset for KeyPath + *a3 + 8LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)v18 - v13;
  swift_getAtKeyPath(v12, v15);
  uint64_t v16 = type metadata accessor for Set(0LL, v7, a6);
  LOBYTE(a6) = Set.insert(_:)(v14, v11, v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  return a6 & 1;
}

uint64_t Sequence<>.unique()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a1 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL);
  uint64_t v12 = static Array._allocateUninitialized(_:)(0LL, AssociatedTypeWitness);
  if (Array._getCount()())
  {
    uint64_t v13 = (void *)Set.init(_nonEmptyArrayLiteral:)(v12, AssociatedTypeWitness, a3);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = &_swiftEmptySetSingleton;
  }

  uint64_t v17 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a1);
  __chkstk_darwin();
  *(&v16 - 4) = a1;
  *(&v16 - 3) = a2;
  *(&v16 - 2) = a3;
  *(&v16 - 1) = (uint64_t)&v17;
  uint64_t v14 = Sequence.filter(_:)(partial apply for closure #1 in Sequence<>.unique());
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t closure #1 in Sequence<>.unique()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL);
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v16 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, AssociatedTypeWitness);
  uint64_t v14 = type metadata accessor for Set(0LL, AssociatedTypeWitness, a5);
  LOBYTE(a5) = Set.insert(_:)(v13, v11, v14);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, AssociatedTypeWitness);
  return a5 & 1;
}

uint64_t Sequence.asyncCompactMapSerial<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[7] = a5;
  v6[8] = v5;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  uint64_t v9 = type metadata accessor for Optional(0LL, a4);
  v6[9] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[10] = v10;
  v6[11] = OUTLINED_FUNCTION_23(v10);
  uint64_t v11 = *(void *)(a4 - 8);
  v6[12] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[13] = swift_task_alloc(v12);
  v6[14] = swift_task_alloc(v12);
  uint64_t v13 = OUTLINED_FUNCTION_5_10();
  v6[15] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v6[16] = v14;
  v6[17] = OUTLINED_FUNCTION_23(v14);
  uint64_t v15 = type metadata accessor for Optional(0LL, v13);
  v6[18] = OUTLINED_FUNCTION_23(*(void *)(v15 - 8));
  uint64_t v16 = *(void *)(a3 - 8);
  v6[19] = v16;
  v6[20] = OUTLINED_FUNCTION_23(v16);
  uint64_t v17 = OUTLINED_FUNCTION_5_10();
  v6[21] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v6[22] = v18;
  v6[23] = OUTLINED_FUNCTION_23(v18);
  return OUTLINED_FUNCTION_4_0();
}

uint64_t Sequence.asyncCompactMapSerial<A>(_:)()
{
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 40);
  *(void *)(v0 + 16) = static Array._allocateUninitialized(_:)(0LL, *(void *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v4, v6);
  dispatch thunk of Sequence.makeIterator()(v6, v5);
  uint64_t v7 = *(int **)(v0 + 184);
  uint64_t v8 = *(void *)(v0 + 168);
  uint64_t v9 = *(void *)(v0 + 144);
  uint64_t v10 = *(void *)(v0 + 120);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(*(void *)(v0 + 56), *(void *)(v0 + 40), v8);
  OUTLINED_FUNCTION_8_11(AssociatedConformanceWitness);
  if (__swift_getEnumTagSinglePayload(v9, 1LL, v10) == 1)
  {
    OUTLINED_FUNCTION_1_15();
    OUTLINED_FUNCTION_12_14();
    swift_task_dealloc(v8);
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_46_0();
    OUTLINED_FUNCTION_92_0();
    OUTLINED_FUNCTION_9_2();
    OUTLINED_FUNCTION_14_3();
    return OUTLINED_FUNCTION_2_11(v1, *(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    OUTLINED_FUNCTION_6_18();
    uint64_t v16 = (uint64_t (*)(void))((char *)v7 + *v7);
    uint64_t v13 = (void *)swift_task_alloc(v7[1]);
    uint64_t v14 = OUTLINED_FUNCTION_7_15(v13);
    return OUTLINED_FUNCTION_3_17(v14, v15, v16);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = *(void *)(*(void *)v1 + 192LL);
  *(void *)(*(void *)v1 + 20OUTLINED_FUNCTION_25_0(v0 + 16, (uint64_t)v2, 0LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    swift_bridgeObjectRelease();
  }
  return OUTLINED_FUNCTION_4_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumTagSinglePayload;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 48);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v1, 1LL, v2);
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 120);
  if (EnumTagSinglePayload == 1)
  {
    uint64_t v8 = *(void *)(v0 + 72);
    uint64_t v7 = *(void *)(v0 + 80);
    (*(void (**)(void, void))(v5 + 8))(*(void *)(v0 + 136), *(void *)(v0 + 120));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v8);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 104);
    uint64_t v9 = *(void *)(v0 + 112);
    uint64_t v11 = *(void *)(v0 + 96);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v9, v1, v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v9, v2);
    unint64_t v12 = type metadata accessor for Array(0LL, v2);
    Array.append(_:)(v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v2);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  }

  uint64_t v13 = *(int **)(v0 + 184);
  uint64_t v14 = *(void *)(v0 + 168);
  uint64_t v15 = *(void *)(v0 + 144);
  uint64_t v16 = *(void *)(v0 + 120);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(*(void *)(v0 + 56), *(void *)(v0 + 40), v14);
  OUTLINED_FUNCTION_8_11(AssociatedConformanceWitness);
  if (__swift_getEnumTagSinglePayload(v15, 1LL, v16) == 1)
  {
    OUTLINED_FUNCTION_1_15();
    OUTLINED_FUNCTION_12_14();
    swift_task_dealloc(v14);
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_46_0();
    OUTLINED_FUNCTION_92_0();
    OUTLINED_FUNCTION_9_2();
    OUTLINED_FUNCTION_14_3();
    return OUTLINED_FUNCTION_2_11(v5, *(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    OUTLINED_FUNCTION_6_18();
    uint64_t v22 = (uint64_t (*)(void))((char *)v13 + *v13);
    uint64_t v19 = (void *)swift_task_alloc(v13[1]);
    id v20 = OUTLINED_FUNCTION_7_15(v19);
    return OUTLINED_FUNCTION_3_17(v20, v21, v22);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 88);
  (*(void (**)(void, void))(*(void *)(v0 + 128) + 8LL))(*(void *)(v0 + 136), *(void *)(v0 + 120));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_14_3();
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Set.init(_nonEmptyArrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v48 = *(void *)(a2 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v47 = (char *)&v40 - v10;
  uint64_t v40 = v11;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v40 - v13;
  uint64_t v15 = Array.count.getter(v12);
  if (v15)
  {
    uint64_t v16 = v15;
    type metadata accessor for _SetStorage(0LL, a2, a3);
    uint64_t v17 = (void *)static _SetStorage.allocate(capacity:)(v16);
  }

  else
  {
    uint64_t v17 = &_swiftEmptySetSingleton;
  }

  Swift::Int v43 = Array._getCount()();
  if (v43)
  {
    uint64_t v18 = 0LL;
    uint64_t v46 = (char *)(v17 + 7);
    uint64_t v41 = v14;
    uint64_t v42 = v5;
    while (1)
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)(v18, IsNativeType, v5, a2);
      if (IsNativeType)
      {
        id v20 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v48 + 16);
        uint64_t result = v20( v14,  v5 + ((*(unsigned __int8 *)(v48 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))
                 + *(void *)(v48 + 72) * v18,
                   a2);
      }

      else
      {
        uint64_t result = _ArrayBuffer._getElementSlowPath(_:)(v18, v5, a2);
        if (v40 != 8) {
          goto LABEL_24;
        }
        uint64_t v39 = result;
        uint64_t v49 = result;
        id v20 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v48 + 16);
        v20(v14, (unint64_t)&v49, a2);
        uint64_t result = swift_unknownObjectRelease(v39);
      }

      BOOL v22 = __OFADD__(v18, 1LL);
      uint64_t v23 = v18 + 1;
      if (v22) {
        break;
      }
      uint64_t v24 = v48;
      char v44 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
      uint64_t v45 = v23;
      v44(v47, v14, a2);
      uint64_t v25 = dispatch thunk of Hashable._rawHashValue(seed:)(v17[5], a2, a3);
      uint64_t v26 = -1LL << *((_BYTE *)v17 + 32);
      unint64_t v27 = v25 & ~v26;
      unint64_t v28 = v27 >> 6;
      uint64_t v29 = *(void *)&v46[8 * (v27 >> 6)];
      uint64_t v30 = 1LL << v27;
      uint64_t v31 = *(void *)(v24 + 72);
      if (((1LL << v27) & v29) != 0)
      {
        uint64_t v32 = ~v26;
        while (1)
        {
          v20(v8, v17[6] + v31 * v27, a2);
          uint64_t v33 = a3;
          char v34 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v47, a2);
          uint64_t v35 = *(void (**)(char *, uint64_t))(v48 + 8);
          v35(v8, a2);
          if ((v34 & 1) != 0) {
            break;
          }
          unint64_t v27 = (v27 + 1) & v32;
          unint64_t v28 = v27 >> 6;
          uint64_t v29 = *(void *)&v46[8 * (v27 >> 6)];
          uint64_t v30 = 1LL << v27;
          a3 = v33;
          if ((v29 & (1LL << v27)) == 0)
          {
            uint64_t v14 = v41;
            uint64_t v5 = v42;
            goto LABEL_14;
          }
        }

        v35(v47, a2);
        a3 = v33;
        uint64_t v14 = v41;
        uint64_t v5 = v42;
      }

      else
      {
LABEL_14:
        uint64_t v36 = v47;
        *(void *)&v46[8 * v28] = v30 | v29;
        uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v44)(v17[6] + v31 * v27, v36, a2);
        uint64_t v37 = v17[2];
        BOOL v22 = __OFADD__(v37, 1LL);
        uint64_t v38 = v37 + 1;
        if (v22) {
          goto LABEL_23;
        }
        v17[2] = v38;
      }

      uint64_t v18 = v45;
      if (v45 == v43) {
        goto LABEL_21;
      }
    }

    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }

  else
  {
LABEL_21:
    swift_bridgeObjectRelease(v5);
    return (uint64_t)v17;
  }

  return result;
}

uint64_t partial apply for closure #1 in Collection.unique<A>(by:)(uint64_t a1)
{
  return closure #1 in Collection.unique<A>(by:)( a1,  *(void *)(v1 + 40),  *(void **)(v1 + 48),  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32)) & 1;
}

uint64_t partial apply for closure #1 in Sequence<>.unique()(uint64_t a1)
{
  return closure #1 in Sequence<>.unique()(a1, v1[5], v1[2], v1[3], v1[4]) & 1;
}

uint64_t OUTLINED_FUNCTION_1_15()
{
  return (*(uint64_t (**)(void, void))(v0[22] + 8LL))(v0[23], v0[21]);
}

uint64_t OUTLINED_FUNCTION_2_11(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_3_17(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_6_18()
{
  return (*(uint64_t (**)(void, void, void))(v0[16] + 32LL))(v0[17], v0[18], v0[15]);
}

uint64_t OUTLINED_FUNCTION_7_15(void *a1)
{
  *(void *)(v2 + 192) = a1;
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 88);
}

uint64_t OUTLINED_FUNCTION_8_11(uint64_t a1)
{
  return dispatch thunk of IteratorProtocol.next()(v1, a1);
}

uint64_t OUTLINED_FUNCTION_12_14()
{
  return swift_task_dealloc(v0);
}

id SCHRowCardSectionComponents.toCardSection()(uint64_t a1, uint64_t (**a2)(uint64_t, uint64_t))
{
  id v3 = [objc_allocWithZone(SFRowCardSection) init];
  [v3 setSeparatorStyle:4];
  uint64_t v4 = (void *)OUTLINED_FUNCTION_0_14(a2[2]);
  OUTLINED_FUNCTION_1_16((uint64_t)v4, "setLeadingText:");

  uint64_t v5 = (void *)OUTLINED_FUNCTION_0_14(a2[3]);
  OUTLINED_FUNCTION_1_16((uint64_t)v5, "setLeadingSubtitle:");

  uint64_t v6 = (void *)OUTLINED_FUNCTION_0_14(a2[4]);
  OUTLINED_FUNCTION_1_16((uint64_t)v6, "setTrailingText:");

  uint64_t v7 = (void *)OUTLINED_FUNCTION_0_14(a2[5]);
  OUTLINED_FUNCTION_1_16((uint64_t)v7, "setTrailingSubtitle:");

  uint64_t v8 = (void *)OUTLINED_FUNCTION_0_14(a2[6]);
  [v3 setImage:v8];

  return v3;
}

uint64_t Array<A>.toCardSnippet()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v1);
    uint64_t v4 = a1 + 32;
    do
    {
      outlined init with copy of SignalProviding(v4, (uint64_t)v13);
      uint64_t v5 = v14;
      uint64_t v6 = v15;
      __swift_project_boxed_opaque_existential_1(v13, v14);
      id v7 = SCHRowCardSectionComponents.toCardSection()(v5, v6);
      uint64_t v8 = __swift_destroy_boxed_opaque_existential_1(v13);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      uint64_t v9 = v16[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
      uint64_t v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
      specialized ContiguousArray._endMutation()(v10);
      v4 += 40LL;
      --v1;
    }

    while (v1);
    uint64_t v2 = v16;
  }

  type metadata accessor for SACardSnippet();
  uint64_t v11 = static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:)(v2, 1LL);
  swift_bridgeObjectRelease();
  return v11;
}

unint64_t type metadata accessor for SACardSnippet()
{
  unint64_t result = lazy cache variable for type metadata for SACardSnippet;
  if (!lazy cache variable for type metadata for SACardSnippet)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___SACardSnippet);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SACardSnippet);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_0_14@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

id OUTLINED_FUNCTION_1_16(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

Swift::String __swiftcall PhoneCallIntentClassNames.getClassName()()
{
  uint64_t v2 = v1;
  id v3 = [v1 _className];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  uint64_t v7 = v4;
  uint64_t v8 = v6;
  result._object = v8;
  result._uint64_t countAndFlagsBits = v7;
  return result;
}

Swift::String __swiftcall PhoneCallIntentClassNames.getTypeName()()
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType(v1);

  uint64_t v8 = ObjectType;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INIntent.Type);
  uint64_t v5 = String.init<A>(describing:)(&v8, v4);
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

id one-time initialization function for emptyAnswerCallIntent()
{
  id result = [objc_allocWithZone(INAnswerCallIntent) init];
  static PhoneCallIntentClassNames.emptyAnswerCallIntent = (uint64_t)result;
  return result;
}

id one-time initialization function for emptyAddCallParticipantIntent()
{
  id result = [objc_allocWithZone(INAddCallParticipantIntent) init];
  static PhoneCallIntentClassNames.emptyAddCallParticipantIntent = (uint64_t)result;
  return result;
}

id one-time initialization function for emptyHangUpCallIntent()
{
  id result = [objc_allocWithZone(INHangUpCallIntent) init];
  static PhoneCallIntentClassNames.emptyHangUpCallIntent = (uint64_t)result;
  return result;
}

id one-time initialization function for emptyIncomingCallSearchIntent()
{
  id result = [objc_allocWithZone(INIdentifyIncomingCallerIntent) init];
  static PhoneCallIntentClassNames.emptyIncomingCallSearchIntent = (uint64_t)result;
  return result;
}

id one-time initialization function for emptySearchCallHistoryIntent()
{
  id result = [objc_allocWithZone(INSearchCallHistoryIntent) init];
  static PhoneCallIntentClassNames.emptySearchCallHistoryIntent = (uint64_t)result;
  return result;
}

id one-time initialization function for emptyStartCallIntent()
{
  id result = [objc_allocWithZone(INStartCallIntent) init];
  static PhoneCallIntentClassNames.emptyStartCallIntent = (uint64_t)result;
  return result;
}

id one-time initialization function for emptyStartAudioCallIntent()
{
  id result = [objc_allocWithZone(INStartAudioCallIntent) init];
  static PhoneCallIntentClassNames.emptyStartAudioCallIntent = (uint64_t)result;
  return result;
}

id one-time initialization function for emptyStartVideoCallIntent()
{
  id result = [objc_allocWithZone(INStartVideoCallIntent) init];
  static PhoneCallIntentClassNames.emptyStartVideoCallIntent = (uint64_t)result;
  return result;
}

_UNKNOWN **static PhoneCallIntentClassNames.allCases.getter()
{
  return &outlined read-only object #0 of static PhoneCallIntentClassNames.allCases.getter;
}

unint64_t lazy protocol witness table accessor for type PhoneCallIntentClassNames and conformance PhoneCallIntentClassNames()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallIntentClassNames and conformance PhoneCallIntentClassNames;
  if (!lazy protocol witness table cache variable for type PhoneCallIntentClassNames and conformance PhoneCallIntentClassNames)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallIntentClassNames,  &type metadata for PhoneCallIntentClassNames);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallIntentClassNames and conformance PhoneCallIntentClassNames);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type [PhoneCallIntentClassNames] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [PhoneCallIntentClassNames] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PhoneCallIntentClassNames] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PhoneCallIntentClassNames]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [PhoneCallIntentClassNames] and conformance [A]);
  }

  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PhoneCallIntentClassNames( void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static PhoneCallIntentClassNames.allCases.getter;
}

uint64_t storeEnumTagSinglePayload for PhoneCallIntentClassNames(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_6BD88 + 4 * byte_31FCFD[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_6BDBC + 4 * byte_31FCF8[v4]))();
}

uint64_t sub_6BDBC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_6BDC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x6BDCCLL);
  }
  return result;
}

uint64_t sub_6BDD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x6BDE0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_6BDE4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6BDEC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PhoneCallIntentClassNames()
{
  return &type metadata for PhoneCallIntentClassNames;
}

uint64_t OUTLINED_FUNCTION_0_15()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v1, v0, v3, v2, 0LL);
}

uint64_t OUTLINED_FUNCTION_2_12()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t OUTLINED_FUNCTION_3_18()
{
  return swift_bridgeObjectRelease(v0);
}

id OUTLINED_FUNCTION_6_19(void *a1)
{
  return [a1 *(SEL *)(v1 + 1320)];
}

void *PhoneComponentInfo.name.unsafeMutableAddressor()
{
  return &static PhoneComponentInfo.name;
}

unint64_t static PhoneComponentInfo.name.getter()
{
  return 0xD000000000000011LL;
}

const char *PhoneComponentInfo.version.unsafeMutableAddressor()
{
  return "Phone";
}

uint64_t static PhoneComponentInfo.version.getter()
{
  return 0x656E6F6850LL;
}

void *PhoneComponentInfo.id.unsafeMutableAddressor()
{
  return &static PhoneComponentInfo.id;
}

uint64_t static PhoneComponentInfo.id.getter()
{
  return 1071806LL;
}

void static FileRadarUtils.tapToRadar(title:desc:reason:logger:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, os_log_s *a7)
{
  uint64_t v48 = a1;
  uint64_t v49 = a7;
  uint64_t v42 = a5;
  uint64_t v43 = a6;
  uint64_t v46 = a4;
  uint64_t v47 = a3;
  uint64_t v8 = OUTLINED_FUNCTION_15_1();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RadarFilingExtras?);
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_8();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for RadarFilingExtras(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_8();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = type metadata accessor for TTRComponentInfo(0LL);
  uint64_t v44 = *(void *)(v21 - 8);
  uint64_t v45 = v21;
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_8();
  uint64_t v24 = v23 - v22;
  if (AFIsInternalInstall() && AFProcessIsAssistantService())
  {
    uint64_t v25 = type metadata accessor for TapToRadarManager(0LL);
    OUTLINED_FUNCTION_15_2(v25);
    uint64_t v40 = a2;
    uint64_t v41 = TapToRadarManager.init()();
    TTRComponentInfo.init(componentName:componentVersion:componentID:)( 0xD000000000000011LL,  0x8000000000347700LL,  0x656E6F6850LL,  0xE500000000000000LL,  1071806LL);
    uint64_t v26 = v43;
    swift_bridgeObjectRetain();
    RadarFilingExtras.init(attachmentURLs:extensionIDs:deviceIDs:displayReason:)( _swiftEmptyArrayStorage,  _swiftEmptyArrayStorage,  0LL,  v42,  v26);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v15, v20, v16);
    __swift_storeEnumTagSinglePayload(v15, 0LL, 1LL, v16);
    (*(void (**)(char *, os_log_s *, uint64_t))(v9 + 16))( (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v49,  v8);
    uint64_t v27 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v28 = (v27 + 16) & ~v27;
    uint64_t v29 = swift_allocObject(&unk_3F7780, v28 + v10, v27 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v29 + v28, v11, v8);
    uint64_t v30 = v41;
    dispatch thunk of TapToRadarManager.createProblem(errStatus:userDefaultSuiteName:radarComponentInfo:title:description:radarFilingExtras:completion:)( v48,  v40,  0xD000000000000014LL,  0x8000000000346CB0LL,  v24,  v48,  v40,  v47,  v46,  v15,  partial apply for closure #1 in static FileRadarUtils.tapToRadar(title:desc:reason:logger:),  v29);
    swift_release(v30);
    swift_release(v29);
    outlined destroy of RadarFilingExtras?(v15);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v20, v16);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v24, v45);
LABEL_6:
    OUTLINED_FUNCTION_7_5();
    return;
  }

  uint64_t v31 = OUTLINED_FUNCTION_11(a2);
  uint64_t v49 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v49, v32))
  {
    uint64_t v33 = OUTLINED_FUNCTION_7_0(22LL);
    uint64_t v34 = OUTLINED_FUNCTION_7_0(64LL);
    uint64_t v51 = v34;
    *(_DWORD *)uint64_t v33 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v50 = OUTLINED_FUNCTION_5_12();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v33 + 4, v33 + 12);
    OUTLINED_FUNCTION_9_14();
    *(_WORD *)(v33 + 12) = 2080;
    id v35 = [(id)objc_opt_self(NSProcessInfo) processInfo];
    id v36 = [v35 processName];

    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    unint64_t v39 = v38;

    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v33 + 14, v33 + 22);
    swift_bridgeObjectRelease(v39);
    _os_log_impl( &dword_0,  v49,  v32,  "#FileRadarUtils tapToRadar: not an internal build. Skipping filing radar for %s, process=%s",  (uint8_t *)v33,  0x16u);
    swift_arrayDestroy(v34, 2LL);
    OUTLINED_FUNCTION_0_2(v34);
    OUTLINED_FUNCTION_0_2(v33);

    goto LABEL_6;
  }

  OUTLINED_FUNCTION_2_12();
  OUTLINED_FUNCTION_1_2(v49);
}

void static FileRadarUtils.autoBugCapture(errorType:errorSubType:subTypeContext:logger:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v36 = a1;
  uint64_t v37 = a3;
  uint64_t v12 = OUTLINED_FUNCTION_15_1();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (AFIsInternalInstall(v15) && AFProcessIsAssistantService())
  {
    uint64_t v17 = type metadata accessor for AutoBugCaptureManager(0LL);
    OUTLINED_FUNCTION_15_2(v17);
    uint64_t v18 = AutoBugCaptureManager.init(domain:sessionDuration:)(0x6E6F685069726953LL, 0xE900000000000065LL, 30.0);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))( (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a7,  v12);
    uint64_t v19 = *(unsigned __int8 *)(v13 + 80);
    uint64_t v20 = (v19 + 16) & ~v19;
    uint64_t v21 = swift_allocObject(&unk_3F77A8, v20 + v14, v19 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v21 + v20, v16, v12);
    dispatch thunk of AutoBugCaptureManager.generateSnapshot(errorType:errorSubType:subTypeContext:completion:)( v36,  a2,  v37,  a4,  a5,  a6,  partial apply for closure #1 in static FileRadarUtils.autoBugCapture(errorType:errorSubType:subTypeContext:logger:),  v21);
    swift_release(v21);
    swift_release(v18);
LABEL_6:
    OUTLINED_FUNCTION_7_5();
    return;
  }

  OUTLINED_FUNCTION_11(a2);
  uint64_t v22 = OUTLINED_FUNCTION_11(a4);
  unint64_t v38 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v23))
  {
    uint64_t v24 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v25 = OUTLINED_FUNCTION_7_0(96LL);
    uint64_t v40 = v25;
    *(_DWORD *)uint64_t v24 = 136315650;
    swift_bridgeObjectRetain();
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, a2, &v40);
    OUTLINED_FUNCTION_7_16(v39, v26, v27, v24 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v24 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v39 = OUTLINED_FUNCTION_5_12();
    OUTLINED_FUNCTION_7_16(v39, v28, v29, v24 + 22);
    OUTLINED_FUNCTION_9_14();
    *(_WORD *)(v24 + 22) = 2080;
    id v30 = [(id)objc_opt_self(NSProcessInfo) processInfo];
    id v31 = [v30 processName];

    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    unint64_t v34 = v33;

    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v24 + 24, v24 + 32);
    swift_bridgeObjectRelease(v34);
    _os_log_impl( &dword_0,  v38,  v23,  "#FileRadarUtils autoBugCapture: not an internal build. Skipping filing radar for %s/%s, process=%s",  (uint8_t *)v24,  0x20u);
    swift_arrayDestroy(v25, 3LL);
    OUTLINED_FUNCTION_0_2(v25);
    OUTLINED_FUNCTION_0_2(v24);

    goto LABEL_6;
  }

  OUTLINED_FUNCTION_2_12();
  swift_bridgeObjectRelease_n(a2, 2LL);
  OUTLINED_FUNCTION_1_2(v38);
}

void closure #1 in static FileRadarUtils.tapToRadar(title:desc:reason:logger:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(void), const char *a4)
{
  char v6 = a1;
  osos_log_t log = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v7 = a3();
  if (os_log_type_enabled(oslog, v7))
  {
    uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_7_0(8LL);
    *(_DWORD *)uint64_t v8 = 67109120;
    int v10 = v6 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 4, v8 + 8);
    _os_log_impl(&dword_0, oslog, v7, a4, v8, 8u);
    OUTLINED_FUNCTION_0_2((uint64_t)v8);
  }

  else
  {
  }

void partial apply for closure #1 in static FileRadarUtils.tapToRadar(title:desc:reason:logger:)(uint64_t a1)
{
}

uint64_t outlined destroy of RadarFilingExtras?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RadarFilingExtras?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t objectdestroyTm()
{
  uint64_t v1 = OUTLINED_FUNCTION_15_1();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void partial apply for closure #1 in static FileRadarUtils.autoBugCapture(errorType:errorSubType:subTypeContext:logger:)( uint64_t a1)
{
}

void partial apply for closure #1 in static FileRadarUtils.tapToRadar(title:desc:reason:logger:)( uint64_t a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(OUTLINED_FUNCTION_15_1() - 8) + 80LL);
  closure #1 in static FileRadarUtils.tapToRadar(title:desc:reason:logger:)(a1, v3 + ((v7 + 16) & ~v7), a2, a3);
}

ValueMetadata *type metadata accessor for PhoneComponentInfo()
{
  return &type metadata for PhoneComponentInfo;
}

ValueMetadata *type metadata accessor for FileRadarUtils()
{
  return &type metadata for FileRadarUtils;
}

uint64_t OUTLINED_FUNCTION_7_16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 96, v5, v4, a4);
}

uint64_t OUTLINED_FUNCTION_9_14()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t static HangUpCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v6 = OUTLINED_FUNCTION_0_16(a1, a2, a3, a4, a5, a6);
  return OUTLINED_FUNCTION_1_17(v6, v7, v8, v9, v10);
}

uint64_t specialized static HangUpCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  void (*v18)(__int128 *__return_ptr, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  __int128 v23[2];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INHangUpCallIntent>);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of SignalProviding(a3, (uint64_t)v23);
  uint64_t v14 = (void *)swift_allocObject(&unk_3F7830, 80LL, 7LL);
  v14[2] = a2;
  v14[3] = a4;
  outlined init with take of AppSelectionSignalComponent(v23, (uint64_t)(v14 + 4));
  v14[9] = a5;
  id v15 = a5;
  swift_retain();
  id v16 = a4;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  type metadata accessor for INHangUpCallIntent();
  Transformer.init(transform:)( partial apply for closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:previousIntentResponse:),  v14,  v17);
  uint64_t v18 = (void (*)(__int128 *__return_ptr, uint64_t))Transformer.transform.getter(v10);
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v18(v23, a1);
  swift_release(v20);
  return *(void *)&v23[0];
}

ValueMetadata *type metadata accessor for HangUpCallIntentConversion()
{
  return &type metadata for HangUpCallIntentConversion;
}

uint64_t sub_6C990()
{
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 32));
  return swift_deallocObject(v0, 80LL, 7LL);
}

void partial apply for closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:previousIntentResponse:)()
{
}

{
  closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:previousIntentResponse:)();
}

unint64_t type metadata accessor for INHangUpCallIntent()
{
  unint64_t result = lazy cache variable for type metadata for INHangUpCallIntent;
  if (!lazy cache variable for type metadata for INHangUpCallIntent)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___INHangUpCallIntent);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INHangUpCallIntent);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_0_16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_1_17(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  return specialized static HangUpCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)( a1,  a2,  a3,  a4,  a5);
}

uint64_t IncomingCallActionConfirmation.confirmationResponse.getter()
{
  uint64_t v1 = v0;
  type metadata accessor for IncomingCallActionConfirmation(0LL);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of IncomingCallActionConfirmation(v1, (uint64_t)v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v3, 1LL, v4);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(type metadata accessor for ConfirmationResponse(0LL)
                                                                       - 8)
                                                           + 104LL);
  if (EnumTagSinglePayload == 1)
  {
    OUTLINED_FUNCTION_45_2(enum case for ConfirmationResponse.rejected(_:), v6);
    return OUTLINED_FUNCTION_25_9();
  }

  else
  {
    OUTLINED_FUNCTION_45_2(enum case for ConfirmationResponse.confirmed(_:), v6);
    OUTLINED_FUNCTION_25_9();
    uint64_t v8 = type metadata accessor for Input(0LL);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8LL))(v3, v8);
  }

uint64_t type metadata accessor for IncomingCallActionConfirmation(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for IncomingCallActionConfirmation;
  if (!type metadata singleton initialization cache for IncomingCallActionConfirmation) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IncomingCallActionConfirmation);
  }
  return result;
}

uint64_t outlined init with copy of IncomingCallActionConfirmation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IncomingCallActionConfirmation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

id IncomingCallActionConfirmationStrategy.incomingCallIntentResponse.getter()
{
  return *(id *)(v0 + 24);
}

uint64_t IncomingCallActionConfirmationStrategy.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 32, a1);
}

void IncomingCallActionConfirmationStrategy.__allocating_init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)( uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, char a5, uint64_t a6, __int128 *a7)
{
}

uint64_t *IncomingCallActionConfirmationStrategy.init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)( uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, char a5, uint64_t a6, __int128 *a7)
{
  uint64_t v8 = v7;
  uint64_t v15 = *v8;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(FollowUpOfferType, Set<PhoneCallVerb>)>);
  uint64_t inited = swift_initStackObject(v16, v23);
  *(_OWORD *)(inited + 16) = xmmword_31D870;
  *(_BYTE *)(inited + 32) = 2;
  *(void *)(inited + 40) = specialized Set.init(_nonEmptyArrayLiteral:)();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<PhoneCallVerb>);
  unint64_t v19 = lazy protocol witness table accessor for type FollowUpOfferType and conformance FollowUpOfferType();
  v8[2] = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for FollowUpOfferType, v18, v19);
  v8[3] = a1;
  outlined init with take of AppSelectionSignalComponent(a2, (uint64_t)(v8 + 9));
  type metadata accessor for IncomingCallNLContextProvider(0LL, *(void *)(v15 + 80), *(void *)(v15 + 88), v20);
  v8[14] = UnsetRelationshipTemplatesWrapper.__allocating_init()();
  v8[15] = a4;
  *((_BYTE *)v8 + 128) = a5;
  outlined init with take of AppSelectionSignalComponent(a3, (uint64_t)(v8 + 4));
  v8[17] = a6;
  outlined init with take of AppSelectionSignalComponent(a7, (uint64_t)(v8 + 18));
  return v8;
}

uint64_t IncomingCallActionConfirmationStrategy.actionForInput(_:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for Parse(0LL) - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1((void *)v0 + 4, *((void *)v0 + 7));
  uint64_t v4 = OUTLINED_FUNCTION_23_8();
  Input.parse.getter(v4);
  (*(void (**)(__int128 *__return_ptr, char *))(*(void *)v4 + 192LL))(&v11, v3);
  swift_release(v4);
  OUTLINED_FUNCTION_26_5((uint64_t)v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  if (!v12)
  {
    uint64_t v5 = outlined destroy of SpeakableString?( (uint64_t)&v11,  &demangling cache variable for type metadata for PhoneCallNLIntent?);
    return static ActionForInput.ignore()(v5);
  }

  outlined init with take of AppSelectionSignalComponent(&v11, (uint64_t)v13);
  if (IncomingCallActionConfirmationStrategy.parsePhoneCallConfirmationFromIntent(intent:)(v13) == 5)
  {
    uint64_t v5 = __swift_destroy_boxed_opaque_existential_1(v13);
    return static ActionForInput.ignore()(v5);
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v7 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v7, (uint64_t)static Logger.siriPhone);
  os_log_type_t v8 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_7(v8))
  {
    uint64_t v9 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
    *(_WORD *)uint64_t v9 = 0;
    OUTLINED_FUNCTION_5( &dword_0,  v0,  (os_log_type_t)v0,  "#IncomingCallActionConfirmationStrategy received a value for phoneCallConfirmation.",  v9);
    OUTLINED_FUNCTION_0_2((uint64_t)v9);
  }

  static ActionForInput.handle()(v10);
  return __swift_destroy_boxed_opaque_existential_1(v13);
}

uint64_t IncomingCallActionConfirmationStrategy.parseConfirmationResponse(input:)(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  uint64_t v4 = type metadata accessor for Parse(0LL);
  v3[15] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[16] = v5;
  v3[17] = OUTLINED_FUNCTION_23(v5);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t IncomingCallActionConfirmationStrategy.parseConfirmationResponse(input:)()
{
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 136);
  __swift_project_boxed_opaque_existential_1( (void *)(*(void *)(v0 + 112) + 32LL),  *(void *)(*(void *)(v0 + 112) + 56LL));
  uint64_t v3 = OUTLINED_FUNCTION_23_8();
  Input.parse.getter(v3);
  uint64_t v4 = (void *)v3;
  (*(void (**)(uint64_t))(*(void *)v3 + 192LL))(v1);
  swift_release(v3);
  OUTLINED_FUNCTION_26_5(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if (!*(void *)(v0 + 80))
  {
    outlined destroy of SpeakableString?(v0 + 56, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    goto LABEL_5;
  }

  uint64_t v4 = *(void **)(v0 + 112);
  outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 + 56), v0 + 16);
  if (IncomingCallActionConfirmationStrategy.parsePhoneCallConfirmationFromIntent(intent:)((void *)(v0 + 16)))
  {
    __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
LABEL_5:
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v5 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v5, (uint64_t)static Logger.siriPhone);
    os_log_type_t v6 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_27_1(v6))
    {
      uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      OUTLINED_FUNCTION_47(v7);
      OUTLINED_FUNCTION_5_13(&dword_0, v8, v9, "#IncomingCallActionConfirmationStrategy confirmation prompt rejected.");
      OUTLINED_FUNCTION_0_2(v0 + 56);
    }

    uint64_t v10 = *(void *)(v0 + 96);

    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
    uint64_t v12 = v10;
    uint64_t v13 = 1LL;
    goto LABEL_15;
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v14 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v14, (uint64_t)static Logger.siriPhone);
  os_log_type_t v15 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_7(v15))
  {
    uint64_t v16 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
    *(_WORD *)uint64_t v16 = 0;
    OUTLINED_FUNCTION_5( &dword_0,  (os_log_s *)v4,  (os_log_type_t)(v0 + 56),  "#IncomingCallActionConfirmationStrategy phoneCallConfirmation = .yes",  v16);
    OUTLINED_FUNCTION_0_2((uint64_t)v16);
  }

  uint64_t v18 = *(void *)(v0 + 96);
  uint64_t v17 = *(void *)(v0 + 104);

  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  uint64_t v19 = type metadata accessor for Input(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16LL))(v18, v17, v19);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
  uint64_t v12 = v18;
  uint64_t v13 = 0LL;
LABEL_15:
  __swift_storeEnumTagSinglePayload(v12, v13, 1LL, v11);
  swift_task_dealloc(*(void *)(v0 + 136));
  uint64_t v20 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
  return OUTLINED_FUNCTION_6_17(v20);
}

uint64_t IncomingCallActionConfirmationStrategy.parsePhoneCallConfirmationFromIntent(intent:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 64))(v4, v5);
  if (result == 5)
  {
    uint64_t v7 = v1[2];
    uint64_t v8 = OUTLINED_FUNCTION_51_4(*(void *)(v3 + 80), *(void *)(v3 + 88));
    specialized Dictionary.subscript.getter(v8, v7);
    if (!v9) {
      return 5LL;
    }
    uint64_t v10 = v9;
    uint64_t v11 = a1[3];
    uint64_t v12 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v11);
    unsigned __int8 v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 104))(v11, v12);
    if (v13 == 17)
    {
      OUTLINED_FUNCTION_50();
      return 5LL;
    }

    unsigned __int8 v14 = v13;
    uint64_t v15 = specialized Set.contains(_:)(v13, v10);
    OUTLINED_FUNCTION_50();
    if ((v15 & 1) == 0) {
      return 5LL;
    }
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v16 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v16, (uint64_t)static Logger.siriPhone);
    os_log_type_t v17 = OUTLINED_FUNCTION_41();
    if (os_log_type_enabled((os_log_t)v15, v17))
    {
      uint64_t v18 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v19 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v23 = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v20 = PhoneCallVerb.rawValue.getter(v14);
      uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v18 + 4);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_57_0( &dword_0,  (os_log_s *)v15,  v17,  "Received verb: %s, treating this as .yes confirmation",  v18);
      OUTLINED_FUNCTION_17_0(v19);
      OUTLINED_FUNCTION_0_2(v19);
      OUTLINED_FUNCTION_0_2((uint64_t)v18);
    }

    return 0LL;
  }

  return result;
}

uint64_t IncomingCallActionConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)( uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v3[6] = *v2;
  return OUTLINED_FUNCTION_33_0((uint64_t)IncomingCallActionConfirmationStrategy.makePromptForConfirmation(itemToConfirm:));
}

uint64_t IncomingCallActionConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v1 = OUTLINED_FUNCTION_15_1();
  uint64_t v2 = (os_log_s *)__swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  uint64_t v3 = OUTLINED_FUNCTION_48();
  Logger.logObject.getter(v3);
  os_log_type_t v4 = OUTLINED_FUNCTION_41();
  if (os_log_type_enabled(v2, v4))
  {
    unsigned __int8 v13 = (uint64_t (*)(void, void))(v0 + 16);
    uint64_t v5 = *(void *)(v0 + 40);
    uint64_t v6 = *(void *)(v0 + 48);
    uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v8 = OUTLINED_FUNCTION_7_0(32LL);
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v14 = v8;
    *(_BYTE *)(v0 + 64) = OUTLINED_FUNCTION_51_4(*(void *)(v6 + 80), *(void *)(v6 + 88));
    uint64_t v9 = String.init<A>(describing:)(v0 + 64, &type metadata for FollowUpOfferType);
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4);
    OUTLINED_FUNCTION_62();
    OUTLINED_FUNCTION_31_1(v5);
    OUTLINED_FUNCTION_57_0( &dword_0,  v2,  v4,  "#IncomingCallActionConfirmationStrategy prompting user for confirmation on followUpOffer: %s",  v7);
    OUTLINED_FUNCTION_17_0(v8);
    OUTLINED_FUNCTION_0_2(v8);
    OUTLINED_FUNCTION_0_2((uint64_t)v7);
  }

  else
  {
    OUTLINED_FUNCTION_31_1(*(void *)(v0 + 40));
  }

  uint64_t v11 = (void *)OUTLINED_FUNCTION_0_1(*(void *)(**(void **)(v0 + 40) + 224LL));
  *(void *)(v0 + 56) = v11;
  *uint64_t v11 = v0;
  v11[1] = IncomingCallActionConfirmationStrategy.makePromptForConfirmation(itemToConfirm:);
  return v13(*(void *)(v0 + 24), *(void *)(v0 + 32));
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_27_7();
  OUTLINED_FUNCTION_14_1(*(void *)(v1 + 56));
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t IncomingCallActionConfirmationStrategy.makeConfirmationRejectedResponse()(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  v2[11] = *v1;
  uint64_t v3 = type metadata accessor for DialogPhase(0LL);
  v2[12] = OUTLINED_FUNCTION_23(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for CATOption(0LL);
  v2[13] = OUTLINED_FUNCTION_23(*(void *)(v4 - 8));
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t IncomingCallActionConfirmationStrategy.makeConfirmationRejectedResponse()()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v1 = OUTLINED_FUNCTION_15_1();
  uint64_t v2 = (os_log_s *)__swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  Logger.logObject.getter(v2);
  os_log_type_t v3 = OUTLINED_FUNCTION_6_0();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
    *(_WORD *)uint64_t v4 = 0;
    OUTLINED_FUNCTION_5( &dword_0,  v2,  v3,  "#IncomingCallActionConfirmationStrategy Submitting SiriKitFlow.Output to acknowledge rejection",  v4);
    OUTLINED_FUNCTION_0_2((uint64_t)v4);
  }

  if (one-time initialization token for announceTelephony != -1) {
    swift_once( &one-time initialization token for announceTelephony,  one-time initialization function for announceTelephony);
  }
  uint64_t v5 = (os_log_s *)__swift_project_value_buffer(v1, (uint64_t)static Logger.announceTelephony);
  uint64_t v6 = OUTLINED_FUNCTION_48();
  uint64_t v7 = v5;
  Logger.logObject.getter(v6);
  os_log_type_t v8 = OUTLINED_FUNCTION_6_0();
  BOOL v9 = os_log_type_enabled(v5, v8);
  uint64_t v11 = v0[10];
  uint64_t v10 = v0[11];
  if (v9)
  {
    uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v13 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v41 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    v0[7] = v11;
    uint64_t v15 = *(void *)(v10 + 80);
    uint64_t v14 = *(void *)(v10 + 88);
    uint64_t v17 = type metadata accessor for IncomingCallActionConfirmationStrategy(0LL, v15, v14, v16);
    swift_retain();
    uint64_t v18 = String.init<A>(describing:)(v0 + 7, v17);
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v12 + 4);
    OUTLINED_FUNCTION_31_1(v11);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_57_0(&dword_0, v7, v8, "#%s: User declined", v12);
    OUTLINED_FUNCTION_17_0(v13);
    OUTLINED_FUNCTION_0_2(v13);
    OUTLINED_FUNCTION_0_2((uint64_t)v12);
  }

  else
  {

    OUTLINED_FUNCTION_31_1(v11);
    uint64_t v15 = *(void *)(v10 + 80);
    uint64_t v14 = *(void *)(v10 + 88);
  }

  unsigned __int8 v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 24))(v15, v14);
  uint64_t v21 = FollowUpOfferType.rawValue.getter(v20);
  if (v21 == 0xD000000000000013LL && v22 == 0x8000000000343630LL)
  {
    uint64_t v23 = swift_bridgeObjectRelease();
  }

  else
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, 0xD000000000000013LL, 0x8000000000343630LL, 0LL);
    uint64_t v23 = OUTLINED_FUNCTION_62();
    if ((v24 & 1) == 0)
    {
      uint64_t v31 = v0[13];
      uint64_t v32 = v0[10] + 32LL;
      type metadata accessor for PhoneCallCommonCATsSimple(0LL);
      static CATOption.defaultMode.getter();
      uint64_t v33 = CATWrapperSimple.__allocating_init(options:globals:)(v31, 0LL);
      uint64_t v34 = swift_retain();
      static DialogPhase.canceled.getter(v34);
      outlined init with copy of SignalProviding(v32, (uint64_t)(v0 + 2));
      uint64_t v35 = type metadata accessor for DialogOutputFactory(0LL);
      swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
      DialogOutputFactory.init(dialog:dialogPhase:sharedGlobals:)();
      uint64_t v37 = v36;
      v0[14] = v36;
      swift_release(v33);
      unint64_t v38 = *(int **)(*(void *)v37 + 136LL);
      uint64_t v40 = (uint64_t (*)(void))((char *)v38 + *v38);
      uint64_t v39 = (void *)swift_task_alloc(v38[1]);
      v0[15] = v39;
      *uint64_t v39 = v0;
      v39[1] = IncomingCallActionConfirmationStrategy.makeConfirmationRejectedResponse();
      return v40(v0[9]);
    }
  }

  Logger.logObject.getter(v23);
  os_log_type_t v25 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_27_1(v25))
  {
    uint64_t v26 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
    OUTLINED_FUNCTION_47(v26);
    OUTLINED_FUNCTION_5_13( &dword_0,  v27,  v28,  "#IncomingCallActionConfirmationStrategy Offered to answer and user rejected -- allow HangUp flow to execute and provide dialog");
    OUTLINED_FUNCTION_0_2(v14);
  }

  type metadata accessor for EmptyOutput(0LL);
  static EmptyOutput.instance.getter();
  swift_task_dealloc(v0[13]);
  OUTLINED_FUNCTION_23_3();
  uint64_t v29 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
  return v29();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(void);
  uint64_t v2 = *v1;
  os_log_type_t v3 = *(void *)(*v1 + 120);
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_17_3();
  }

  else
  {
    swift_release(*(void *)(v2 + 112));
    swift_task_dealloc(*(void *)(v2 + 104));
    OUTLINED_FUNCTION_23_3();
    uint64_t v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
    return OUTLINED_FUNCTION_6_17(v5);
  }

{
  uint64_t v0;
  swift_release(*(void *)(v0 + 112));
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_7_8();
  return OUTLINED_FUNCTION_6_17(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t IncomingCallActionConfirmationStrategy.makeFlowCancelledResponse()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_33_0((uint64_t)IncomingCallActionConfirmationStrategy.makeFlowCancelledResponse());
}

uint64_t IncomingCallActionConfirmationStrategy.makeFlowCancelledResponse()()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v3 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v3, (uint64_t)static Logger.siriPhone);
  os_log_type_t v4 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_27_1(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
    OUTLINED_FUNCTION_47(v5);
    OUTLINED_FUNCTION_5_13( &dword_0,  v6,  v7,  "#IncomingCallActionConfirmationStrategy makeFlowCancelledResponse: cancellation = rejection");
    OUTLINED_FUNCTION_0_2(v1);
  }

  uint64_t v8 = v2[3];

  BOOL v9 = *(int **)(*(void *)v8 + 200LL);
  uint64_t v12 = (uint64_t (*)(void))((char *)v9 + *v9);
  uint64_t v10 = (void *)swift_task_alloc(v9[1]);
  v2[4] = v10;
  *uint64_t v10 = v2;
  v10[1] = IncomingCallActionConfirmationStrategy.makeFlowCancelledResponse();
  return v12(v2[2]);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_27_7();
  OUTLINED_FUNCTION_14_1(*(void *)(v1 + 32));
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t IncomingCallActionConfirmationStrategy.makeErrorResponse(_:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  return OUTLINED_FUNCTION_33_0((uint64_t)IncomingCallActionConfirmationStrategy.makeErrorResponse(_:));
}

uint64_t IncomingCallActionConfirmationStrategy.makeErrorResponse(_:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v3 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v3, (uint64_t)static Logger.siriPhone);
  os_log_type_t v4 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_27_1(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
    OUTLINED_FUNCTION_47(v5);
    OUTLINED_FUNCTION_5_13(&dword_0, v6, v7, "#IncomingCallActionConfirmationStrategy makeErrorResponse");
    OUTLINED_FUNCTION_0_2(v1);
  }

  uint64_t v8 = *(void *)(v2 + 16);

  swift_willThrow(v9, v10, v11, v12, v13, v14, v15, v16);
  swift_errorRetain(v8);
  return OUTLINED_FUNCTION_24_1(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t IncomingCallActionConfirmationStrategy.makePromptForConfirmationOutput(itemToConfirm:)( uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  v3[12] = *v2;
  uint64_t v4 = OUTLINED_FUNCTION_15_1();
  v3[13] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[14] = v5;
  v3[15] = OUTLINED_FUNCTION_23(v5);
  uint64_t v6 = type metadata accessor for DialogPhase(0LL);
  v3[16] = OUTLINED_FUNCTION_23(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[17] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[18] = v8;
  v3[19] = OUTLINED_FUNCTION_23(v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[20] = OUTLINED_FUNCTION_23(*(void *)(v9 - 8));
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t IncomingCallActionConfirmationStrategy.makePromptForConfirmationOutput(itemToConfirm:)()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = (void *)v0[11];
  uint64_t v3 = v0[12];
  uint64_t v4 = v2[12];
  uint64_t v5 = v2[13];
  OUTLINED_FUNCTION_49_0(v2 + 9);
  unsigned __int8 v6 = OUTLINED_FUNCTION_51_4(*(void *)(v3 + 80), *(void *)(v3 + 88));
  uint64_t v7 = FollowUpOfferType.rawValue.getter(v6);
  SpeakableString.init(print:speak:)(v7, v8, 0LL, 0LL);
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  __swift_storeEnumTagSinglePayload(v1, 0LL, 1LL, v9);
  uint64_t v10 = (void *)OUTLINED_FUNCTION_0_1(*(void *)(v5 + 16));
  v0[21] = v10;
  *uint64_t v10 = v0;
  v10[1] = IncomingCallActionConfirmationStrategy.makePromptForConfirmationOutput(itemToConfirm:);
  return v12(v0[20], v4, v5);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_27_7();
  OUTLINED_FUNCTION_14_1(*(void *)(v0 + 200));
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 104);
  unsigned __int8 v6 = *(void *)(v0 + 112);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  OUTLINED_FUNCTION_26_5(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  OUTLINED_FUNCTION_7_8();
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  uint64_t v7 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
  return v7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 120);
  swift_task_dealloc(*(void *)(v0 + 160));
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_7_8();
  swift_task_dealloc(v1);
  return OUTLINED_FUNCTION_24_1(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t IncomingCallActionConfirmationStrategy.makePromptForConfirmationOutput(itemToConfirm:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v5 = *(void *)(*v2 + 160);
  uint64_t v4 = *(void *)(*v2 + 168);
  *(void *)(v3 + 176) = a1;
  *(void *)(v3 + 184) = v1;
  swift_task_dealloc(v4);
  outlined destroy of SpeakableString?(v5, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_17_3();
}

void IncomingCallActionConfirmationStrategy.makePromptForConfirmationOutput(itemToConfirm:)()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[11];
  static DialogPhase.confirmation.getter();
  OutputGenerationManifest.init(dialogPhase:_:)( v1,  partial apply for closure #1 in IncomingCallActionConfirmationStrategy.makePromptForConfirmationOutput(itemToConfirm:),  v2);
  if (*(void *)(v2 + 120))
  {
    if (one-time initialization token for announceTelephony != -1) {
      swift_once( &one-time initialization token for announceTelephony,  one-time initialization function for announceTelephony);
    }
    uint64_t v3 = static Logger.announceTelephony;
  }

  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v3 = static Logger.siriPhone;
  }

  uint64_t v4 = (void *)v0[22];
  uint64_t v6 = v0[14];
  uint64_t v5 = v0[15];
  uint64_t v7 = v0[13];
  uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v11 = static os_log_type_t.debug.getter(v9, v10);
  BOOL v12 = os_log_type_enabled(v9, v11);
  uint64_t v13 = (void *)v0[22];
  if (!v12)
  {

LABEL_27:
    uint64_t v36 = (void *)v0[22];
    uint64_t v37 = (void *)v0[11];
    uint64_t v38 = v37[7];
    uint64_t v39 = v37[8];
    OUTLINED_FUNCTION_49_0(v37 + 4);
    (*(void (**)(uint64_t, uint64_t))(v39 + 136))(v38, v39);
    uint64_t v40 = v0[5];
    uint64_t v41 = v0[6];
    OUTLINED_FUNCTION_49_0(v0 + 2);
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v43 = OUTLINED_FUNCTION_8_2(v42, 40LL);
    *(_OWORD *)(v43 + 16) = xmmword_31FE60;
    *(void *)(v43 + 32) = v36;
    v59[0] = v43;
    specialized Array._endMutation()(v43, v44, v45, v46);
    uint64_t v47 = v59[0];
    v0[24] = v59[0];
    uint64_t v48 = *(void *)(v41 + 8);
    uint64_t v49 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)[1];
    id v50 = v36;
    uint64_t v51 = (void *)swift_task_alloc(v49);
    v0[25] = v51;
    *uint64_t v51 = v0;
    v51[1] = IncomingCallActionConfirmationStrategy.makePromptForConfirmationOutput(itemToConfirm:);
    dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)( v0[9],  v47,  v0[19],  v40,  v48);
    return;
  }

  os_log_type_t v55 = v11;
  Swift::String_optional v56 = v0;
  uint64_t v14 = OUTLINED_FUNCTION_7_0(22LL);
  uint64_t v54 = OUTLINED_FUNCTION_7_0(64LL);
  uint64_t v57 = v54;
  *(_DWORD *)uint64_t v14 = 136315394;
  id v15 = [v13 catId];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  unint64_t v18 = v17;

  v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v57);
  uint64_t v53 = v0 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v14 + 4);
  swift_bridgeObjectRelease();

  *(_WORD *)(v14 + 12) = 2080;
  id v19 = [v13 dialog];
  unint64_t v20 = type metadata accessor for DialogElement();
  uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);

  if (!((unint64_t)v21 >> 62))
  {
    uint64_t v22 = *(void *)((char *)&dword_10 + (v21 & 0xFFFFFFFFFFFFF8LL));
    if (v22) {
      goto LABEL_11;
    }
LABEL_25:
    OUTLINED_FUNCTION_50();
    char v24 = _swiftEmptyArrayStorage;
LABEL_26:
    uint64_t v0 = v56;
    uint64_t v32 = (void *)v56[22];
    uint64_t v33 = Array.description.getter(v24, &type metadata for String);
    unint64_t v35 = v34;
    OUTLINED_FUNCTION_62();
    v56[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v53, v56 + 9, v14 + 14);
    swift_bridgeObjectRelease();

    _os_log_impl( &dword_0,  v9,  v55,  "#IncomingCallActionConfirmationStrategy Follow-up offer: {\n    catId=%s,\n    dialog={\n        %s\n    }\n}",  (uint8_t *)v14,  0x16u);
    swift_arrayDestroy(v54, 2LL);
    OUTLINED_FUNCTION_0_2(v54);
    OUTLINED_FUNCTION_0_2(v14);

    goto LABEL_27;
  }

  if (v21 < 0) {
    uint64_t v31 = v21;
  }
  else {
    uint64_t v31 = v21 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v31);
  OUTLINED_FUNCTION_50();
  if (!v22) {
    goto LABEL_25;
  }
LABEL_11:
  uint64_t v58 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v22 & 0x8000000000000000LL) == 0)
  {
    uint64_t v52 = v9;
    uint64_t v23 = 0LL;
    char v24 = v58;
    do
    {
      if ((v21 & 0xC000000000000001LL) != 0) {
        id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v21);
      }
      else {
        id v25 = *(id *)(v21 + 8 * v23 + 32);
      }
      uint64_t v26 = v25;
      uint64_t v60 = v25;
      closure #2 in implicit closure #2 in IncomingCallActionConfirmationStrategy.makePromptForConfirmationOutput(itemToConfirm:)( &v60,  v59);

      uint64_t v27 = v59[0];
      uint64_t v28 = v59[1];
      uint64_t v58 = v24;
      unint64_t v29 = v24[2];
      if (v29 >= v24[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        char v24 = v58;
      }

      ++v23;
      v24[2] = v29 + 1;
      id v30 = &v24[2 * v29];
      v30[4] = v27;
      v30[5] = v28;
    }

    while (v22 != v23);
    OUTLINED_FUNCTION_50();
    uint64_t v9 = v52;
    goto LABEL_26;
  }

  __break(1u);
}

uint64_t closure #1 in IncomingCallActionConfirmationStrategy.makePromptForConfirmationOutput(itemToConfirm:)()
{
  uint64_t v1 = (char *)&v4 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  OutputGenerationManifest.canUseServerTTS.setter(0LL);
  BOOL v2 = IncomingCallActionConfirmationStrategy.shouldListenAfterSpeaking()();
  OutputGenerationManifest.listenAfterSpeaking.setter(v2);
  IncomingCallActionConfirmationStrategy.makeNLContextUpdate()();
  return OutputGenerationManifest.nlContextUpdate.setter(v1);
}

uint64_t closure #2 in implicit closure #2 in IncomingCallActionConfirmationStrategy.makePromptForConfirmationOutput(itemToConfirm:)@<X0>( void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  _StringGuts.grow(_:)(30LL);
  id v4 = objc_msgSend(v3, "id", 0);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease(0xE000000000000000LL);

  uint64_t v27 = v5;
  uint64_t v28 = v7;
  v8._uint64_t countAndFlagsBits = 0x72506C6C7566203ALL;
  v8._object = (void *)0xEC0000003D746E69LL;
  String.append(_:)(v8);
  id v9 = [v3 fullPrint];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  uint64_t v13 = String.debugDescription.getter(v10, v12);
  id v15 = v14;
  swift_bridgeObjectRelease(v12);
  v16._uint64_t countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v15);
  v17._uint64_t countAndFlagsBits = 0x70536C6C7566202CLL;
  v17._object = (void *)0xEC0000003D6B6165LL;
  String.append(_:)(v17);
  id v18 = [v3 fullSpeak];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v21 = v20;

  uint64_t v22 = String.debugDescription.getter(v19, v21);
  char v24 = v23;
  swift_bridgeObjectRelease(v21);
  v25._uint64_t countAndFlagsBits = v22;
  v25._object = v24;
  String.append(_:)(v25);
  uint64_t result = swift_bridgeObjectRelease(v24);
  *a2 = v27;
  a2[1] = v28;
  return result;
}

uint64_t IncomingCallActionConfirmationStrategy.makeNLContextUpdate()()
{
  return (*(uint64_t (**)(void, BOOL))(**(void **)(v0 + 112) + 96LL))( *(void *)(v0 + 24),  *(void *)(v0 + 120) != 0LL);
}

BOOL IncomingCallActionConfirmationStrategy.shouldListenAfterSpeaking()()
{
  uint64_t v2 = *(void *)(v1 + 120);
  if (one-time initialization token for announceTelephony != -1) {
    swift_once( &one-time initialization token for announceTelephony,  one-time initialization function for announceTelephony);
  }
  uint64_t v3 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v3, (uint64_t)static Logger.announceTelephony);
  os_log_type_t v4 = OUTLINED_FUNCTION_41();
  if (os_log_type_enabled(v0, v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_7_0(8LL);
    *(_DWORD *)uint64_t v5 = 67109120;
    BOOL v7 = v2 == 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, &v8, v5 + 4);
    _os_log_impl(&dword_0, v0, v4, "#IncomingCallActionConfirmationStrategy listenAfterSpeaking = %{BOOL}d", v5, 8u);
    OUTLINED_FUNCTION_0_2((uint64_t)v5);
  }

  return v2 == 0;
}

uint64_t IncomingCallActionConfirmationStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 72));
  swift_release(*(void *)(v0 + 112));

  swift_release(*(void *)(v0 + 136));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 144));
  return v0;
}

uint64_t IncomingCallActionConfirmationStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 184LL, 7LL);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.actionForInput(_:) in conformance IncomingCallActionConfirmationStrategy<A>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168LL))();
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance IncomingCallActionConfirmationStrategy<A>( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(*(void *)v2 + 176LL);
  id v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  BOOL v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *BOOL v7 = v3;
  v7[1] = protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance IncomingCallActionConfirmationStrategy<A>;
  return v9(a1, a2);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:) in conformance IncomingCallActionConfirmationStrategy<A>( uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *(int **)(*(void *)v2 + 192LL);
  id v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  BOOL v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *BOOL v7 = v3;
  v7[1] = protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance IncomingCallActionConfirmationStrategy<A>;
  return v9(a1, v5);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:) in conformance IncomingCallActionConfirmationStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = (void *)swift_task_alloc(async function pointer to PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:)[1]);
  *(void *)(v4 + 16) = v9;
  uint64_t v11 = type metadata accessor for IncomingCallActionConfirmationStrategy( 0LL,  *(void *)(a3 + 80),  *(void *)(a3 + 88),  v10);
  *id v9 = v4;
  v9[1] = protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance IncomingCallActionConfirmationStrategy<A>;
  return PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:)(a1, a2, v11, a4);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:) in conformance IncomingCallActionConfirmationStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = (void *)swift_task_alloc(async function pointer to PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:)[1]);
  *(void *)(v4 + 16) = v9;
  uint64_t v11 = type metadata accessor for IncomingCallActionConfirmationStrategy( 0LL,  *(void *)(a3 + 80),  *(void *)(a3 + 88),  v10);
  *id v9 = v4;
  v9[1] = protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance IncomingCallActionConfirmationStrategy<A>;
  return PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:)(a1, a2, v11, a4);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse() in conformance IncomingCallActionConfirmationStrategy<A>( uint64_t a1)
{
  uint64_t v4 = *(int **)(*(void *)v1 + 200LL);
  BOOL v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance IncomingCallActionConfirmationStrategy<A>;
  return v7(a1);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse() in conformance IncomingCallActionConfirmationStrategy<A>( uint64_t a1)
{
  uint64_t v4 = *(int **)(*(void *)v1 + 208LL);
  BOOL v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse() in conformance IncomingCallActionConfirmationStrategy<A>;
  return v7(a1);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse() in conformance IncomingCallActionConfirmationStrategy<A>()
{
  return OUTLINED_FUNCTION_3_0(v0[1]);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:) in conformance IncomingCallActionConfirmationStrategy<A>( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(*(void *)v2 + 216LL);
  id v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  BOOL v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *BOOL v7 = v3;
  v7[1] = protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance IncomingCallActionConfirmationStrategy<A>;
  return v9(a1, a2);
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[INScoredPerson]>);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    size_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 8);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v11 + 32);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((uint64_t)v13, v8);
  }

  swift_release(a4);
  return v11;
}

uint64_t partial apply for closure #1 in static CommonOutputs.promptCancelled(sharedGlobals:phoneCallCommonCATsSimple:)()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_432CEC);
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in static CommonOutputs.promptCancelled(sharedGlobals:phoneCallCommonCATsSimple:);
  return closure #1 in static CommonOutputs.promptCancelled(sharedGlobals:phoneCallCommonCATsSimple:)(v0);
}

uint64_t partial apply for closure #1 in static CommonOutputs.promptCancelled(sharedGlobals:phoneCallCommonCATsSimple:)( uint64_t a1)
{
  return v1[1](a1);
}

uint64_t type metadata accessor for IncomingCallActionConfirmationStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for IncomingCallActionConfirmationStrategy);
}

uint64_t partial apply for closure #1 in IncomingCallActionConfirmationStrategy.makePromptForConfirmationOutput(itemToConfirm:)()
{
  return closure #1 in IncomingCallActionConfirmationStrategy.makePromptForConfirmationOutput(itemToConfirm:)();
}

unint64_t lazy protocol witness table accessor for type IncomingCallActionConfirmation and conformance IncomingCallActionConfirmation()
{
  unint64_t result = lazy protocol witness table cache variable for type IncomingCallActionConfirmation and conformance IncomingCallActionConfirmation;
  if (!lazy protocol witness table cache variable for type IncomingCallActionConfirmation and conformance IncomingCallActionConfirmation)
  {
    uint64_t v1 = type metadata accessor for IncomingCallActionConfirmation(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for IncomingCallActionConfirmation, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IncomingCallActionConfirmation and conformance IncomingCallActionConfirmation);
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for IncomingCallActionConfirmation( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v7))
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      uint64_t v9 = type metadata accessor for Input(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t destroy for IncomingCallActionConfirmation(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
  uint64_t result = __swift_getEnumTagSinglePayload(a1, 1LL, v2);
  if (!(_DWORD)result)
  {
    uint64_t v4 = type metadata accessor for Input(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  }

  return result;
}

void *initializeWithCopy for IncomingCallActionConfirmation(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = type metadata accessor for Input(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
  }

  return a1;
}

void *assignWithCopy for IncomingCallActionConfirmation(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1LL, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6);
  if (!EnumTagSinglePayload)
  {
    if (!v8)
    {
      uint64_t v11 = type metadata accessor for Input(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 24LL))(a1, a2, v11);
      return a1;
    }

    outlined destroy of SpeakableString?( (uint64_t)a1,  &demangling cache variable for type metadata for (newInput: Input));
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  uint64_t v9 = type metadata accessor for Input(0LL);
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
  return a1;
}

void *initializeWithTake for IncomingCallActionConfirmation(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = type metadata accessor for Input(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
  }

  return a1;
}

void *assignWithTake for IncomingCallActionConfirmation(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1LL, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6);
  if (!EnumTagSinglePayload)
  {
    if (!v8)
    {
      uint64_t v11 = type metadata accessor for Input(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 40LL))(a1, a2, v11);
      return a1;
    }

    outlined destroy of SpeakableString?( (uint64_t)a1,  &demangling cache variable for type metadata for (newInput: Input));
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  uint64_t v9 = type metadata accessor for Input(0LL);
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for IncomingCallActionConfirmation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6F3FC);
}

uint64_t sub_6F3FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
  unsigned int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(a1, a2, v4);
  if (EnumTagSinglePayload >= 2) {
    return EnumTagSinglePayload - 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for IncomingCallActionConfirmation( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6F450);
}

uint64_t sub_6F450(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
  return __swift_storeEnumTagSinglePayload(a1, v5, a3, v6);
}

uint64_t getEnumTag for IncomingCallActionConfirmation(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
  return __swift_getEnumTagSinglePayload(a1, 1LL, v2);
}

uint64_t destructiveInjectEnumTag for IncomingCallActionConfirmation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
  return __swift_storeEnumTagSinglePayload(a1, a2, 1LL, v4);
}

uint64_t type metadata completion function for IncomingCallActionConfirmation(uint64_t a1)
{
  uint64_t result = type metadata accessor for Input(319LL);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256LL, *(void *)(result - 8) + 64LL, 1LL);
    return 0LL;
  }

  return result;
}

uint64_t type metadata completion function for IncomingCallActionConfirmationStrategy(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[1] = "\b";
  v2[2] = &unk_31FFC0;
  v2[3] = &unk_31FFC0;
  v2[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[5] = &unk_31FFD8;
  v2[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[7] = &unk_31FFC0;
  return swift_initClassMetadata2(a1, 0LL, 8LL, v2, a1 + 96);
}

uint64_t OUTLINED_FUNCTION_11_14(uint64_t a1)
{
  return swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL))
         + *(void *)(*(void *)(a1 - 8) + 72LL) * v2,
           *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) | 7LL);
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_23_8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 72))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_30_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return __swift_instantiateConcreteTypeFromMangledName(a5);
}

  ;
}

uint64_t OUTLINED_FUNCTION_38_7()
{
  return v0 + 32;
}

  ;
}

uint64_t OUTLINED_FUNCTION_45_2@<X0>( uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(v2, a1, v3);
}

uint64_t OUTLINED_FUNCTION_51_4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t DisambiguationReferenceResolver.referenceResolver.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1, a1);
}

uint64_t CallRecordToCallBackSlotTemplating.catFamily.getter()
{
  return swift_retain(*(void *)(v0 + 40));
}

void CallRecordToCallBackSlotTemplating.makeParameterPromptDialog(app:parameterName:intent:_:)()
{
  uint64_t v0 = OUTLINED_FUNCTION_8_12();
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_7_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_7_17();
  OUTLINED_FUNCTION_2_13(4LL);
  unint64_t v1 = lazy protocol witness table accessor for type PhoneError and conformance PhoneError();
  OUTLINED_FUNCTION_4_4(v0, v1);
  OUTLINED_FUNCTION_9_15();
  OUTLINED_FUNCTION_11_15(v0);
  OUTLINED_FUNCTION_12_15();
  OUTLINED_FUNCTION_6_20();
  OUTLINED_FUNCTION_5_14();
  OUTLINED_FUNCTION_10_13();
  OUTLINED_FUNCTION_58();
}

unint64_t lazy protocol witness table accessor for type PhoneError and conformance PhoneError()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneError and conformance PhoneError;
  if (!lazy protocol witness table cache variable for type PhoneError and conformance PhoneError)
  {
    uint64_t v1 = type metadata accessor for PhoneError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PhoneError, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError);
  }

  return result;
}

uint64_t outlined destroy of Result<TemplatingResult, Error>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void CallRecordToCallBackSlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:)()
{
  uint64_t v0 = OUTLINED_FUNCTION_8_12();
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_7_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_7_17();
  OUTLINED_FUNCTION_2_13(3LL);
  unint64_t v1 = lazy protocol witness table accessor for type PhoneError and conformance PhoneError();
  OUTLINED_FUNCTION_4_4(v0, v1);
  OUTLINED_FUNCTION_9_15();
  OUTLINED_FUNCTION_11_15(v0);
  OUTLINED_FUNCTION_12_15();
  OUTLINED_FUNCTION_6_20();
  OUTLINED_FUNCTION_5_14();
  OUTLINED_FUNCTION_10_13();
  OUTLINED_FUNCTION_58();
}

void CallRecordToCallBackSlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PhoneError(0LL);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_7_6();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v9 = (uint64_t *)((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  *(void *)uint64_t v3 = a2;
  *(void *)(v3 + 8) = a3;
  *(void *)(v3 + 16) = 2LL;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_BYTE *)(v3 + 56) = 1;
  swift_storeEnumTagMultiPayload(v3, v6, 2LL);
  unint64_t v10 = lazy protocol witness table accessor for type PhoneError and conformance PhoneError();
  uint64_t v11 = OUTLINED_FUNCTION_4_4(v6, v10);
  uint64_t v13 = v12;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_11_15(v13);
  OUTLINED_FUNCTION_12_15();
  *uint64_t v9 = v11;
  swift_storeEnumTagMultiPayload(v9, v7, 1LL);
  OUTLINED_FUNCTION_5_14();
  OUTLINED_FUNCTION_10_13();
  OUTLINED_FUNCTION_58();
}

uint64_t CallRecordToCallBackSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)(v9 + 40);
  uint64_t v12 = swift_allocObject(&unk_3F79D8, 32LL, 7LL);
  *(void *)(v12 + 16) = a8;
  *(void *)(v12 + 24) = a9;
  uint64_t v13 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(class metadata base offset for StartCallCATs
                                                                        + *v11
                                                                        + 1696);
  swift_retain();
  v13( partial apply for closure #1 in CallRecordToCallBackSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:),  v12);
  return swift_release(v12);
}

uint64_t closure #1 in CallRecordToCallBackSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)( uint64_t a1, void (*a2)(void *))
{
  uint64_t v5 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v11 = (uint64_t *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v13 = (uint64_t *)((char *)&v21 - v12);
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v11);
  if (swift_getEnumCaseMultiPayload(v11, v9) == 1)
  {
    *uint64_t v13 = *v11;
    uint64_t v14 = 1LL;
  }

  else
  {
    uint64_t v15 = (*(uint64_t (**)(char *, void *, uint64_t))(v6 + 32))(v8, v11, v5);
    uint64_t v16 = TemplatingResult.speak.getter(v15);
    uint64_t v17 = TemplatingResult.print.getter(v16);
    uint64_t v18 = TemplatingResult.behaviorAfterSpeaking.getter();
    uint64_t v19 = TemplatingResult.dialogIdentifier.getter(v18);
    TemplatingResult.init(templateIdentifier:speak:print:behaviorAfterSpeaking:dialogIdentifier:)( 0xD000000000000029LL,  0x80000000003477E0LL,  v16,  v17,  v2,  v19);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v14 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v13, v9, v14);
  a2(v13);
  return outlined destroy of Result<TemplatingResult, Error>((uint64_t)v13);
}

uint64_t sub_6FB94()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t partial apply for closure #1 in CallRecordToCallBackSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)( uint64_t a1)
{
  return closure #1 in CallRecordToCallBackSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)( a1,  *(void (**)(void *))(v1 + 16));
}

uint64_t CallRecordToCallBackSlotTemplating.init(deviceState:catFamily:)@<X0>( __int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = outlined init with take of AppSelectionSignalComponent(a1, a3);
  *(void *)(a3 + 40) = a2;
  return result;
}

void protocol witness for SlotTemplating.makeParameterPromptDialog(app:parameterName:intent:_:) in conformance CallRecordToCallBackSlotTemplating()
{
}

void protocol witness for SlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:) in conformance CallRecordToCallBackSlotTemplating()
{
}

void protocol witness for SlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:) in conformance CallRecordToCallBackSlotTemplating( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t protocol witness for SlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:) in conformance CallRecordToCallBackSlotTemplating( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CallRecordToCallBackSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
}

uint64_t destroy for CallRecordToCallBackSlotTemplating(void *a1)
{
  return swift_release(a1[5]);
}

uint64_t initializeWithCopy for CallRecordToCallBackSlotTemplating(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  swift_retain(v5);
  return a1;
}

void *assignWithCopy for CallRecordToCallBackSlotTemplating(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  uint64_t v5 = a1[5];
  a1[5] = v4;
  swift_retain();
  swift_release(v5);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CallRecordToCallBackSlotTemplating(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CallRecordToCallBackSlotTemplating(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CallRecordToCallBackSlotTemplating(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CallRecordToCallBackSlotTemplating()
{
  return &type metadata for CallRecordToCallBackSlotTemplating;
}

uint64_t outlined init with copy of Result<TemplatingResult, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_2_13@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 16) = a1;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_BYTE *)(v1 + 56) = 1;
  return swift_storeEnumTagMultiPayload(v1, v2, 2LL);
}

uint64_t OUTLINED_FUNCTION_6_20()
{
  void *v0 = v2;
  return swift_storeEnumTagMultiPayload(v0, v1, 1LL);
}

void OUTLINED_FUNCTION_7_17()
{
  *uint64_t v1 = v2;
  v1[1] = v0;
}

uint64_t OUTLINED_FUNCTION_8_12()
{
  return type metadata accessor for PhoneError(0LL);
}

uint64_t OUTLINED_FUNCTION_9_15()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_10_13()
{
  return outlined destroy of Result<TemplatingResult, Error>(v0);
}

uint64_t OUTLINED_FUNCTION_11_15@<X0>(uint64_t a1@<X8>)
{
  return PhoneError.logged()(a1);
}

uint64_t OUTLINED_FUNCTION_12_15()
{
  return outlined destroy of PhoneError(v0);
}

uint64_t one-time initialization function for encoder(uint64_t a1)
{
  return one-time initialization function for encoder( a1,  (uint64_t (*)(void))&type metadata accessor for JSONEncoder,  (uint64_t (*)(void))&JSONEncoder.init(),  &static DictionaryEncoderDecoder.encoder);
}

uint64_t one-time initialization function for decoder(uint64_t a1)
{
  return one-time initialization function for encoder( a1,  (uint64_t (*)(void))&type metadata accessor for JSONDecoder,  (uint64_t (*)(void))&JSONDecoder.init(),  &static DictionaryEncoderDecoder.decoder);
}

uint64_t one-time initialization function for encoder( uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = a2(0LL);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  uint64_t result = a3();
  *a4 = result;
  return result;
}

id static DictionaryEncoderDecoder.encode<A>(_:)(id a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for encoder != -1) {
    swift_once(&one-time initialization token for encoder, one-time initialization function for encoder);
  }
  dispatch thunk of JSONEncoder.encode<A>(_:)(a1, a2, a3);
  if (!v3)
  {
    uint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v24[0] = 0LL;
    id v9 = [v7 JSONObjectWithData:isa options:0 error:v24];

    id v10 = v24[0];
    if (v9)
    {
      id v11 = v24[0];
      _bridgeAnyObjectToAny(_:)(v24, v9);
      swift_unknownObjectRelease(v9);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      else {
        uint64_t v12 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
      }
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v12);
      a1 = v21;
      OUTLINED_FUNCTION_2_14();
      swift_bridgeObjectRelease();
    }

    else
    {
      a1 = v24[0];
      _convertNSErrorToError(_:)(v10);

      swift_willThrow(v13, v14, v15, v16, v17, v18, v19, v20);
      OUTLINED_FUNCTION_2_14();
    }
  }

  return a1;
}

void specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v33 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v32 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  int64_t v8 = 0LL;
  if (!v6) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v10 = v9 | (v8 << 6);
  while (1)
  {
    uint64_t v19 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v10, (uint64_t)v45);
    *(void *)&__int128 v44 = v21;
    *((void *)&v44 + 1) = v20;
    v42[2] = v44;
    v43[0] = v45[0];
    v43[1] = v45[1];
    *(void *)&v42[0] = v21;
    *((void *)&v42[0] + 1) = v20;
    swift_bridgeObjectRetain();
    swift_dynamicCast(&v34, v42, &type metadata for String);
    outlined init with take of Any(v43, v37);
    __int128 v38 = v34;
    __int128 v39 = v35;
    uint64_t v40 = v36;
    outlined init with take of Any(v37, v41);
    __int128 v34 = v38;
    __int128 v35 = v39;
    uint64_t v36 = v40;
    outlined init with take of Any(v41, v42);
    outlined init with take of Any(v42, &v38);
    Swift::Int v22 = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v23 = -1LL << *((_BYTE *)v3 + 32);
    unint64_t v24 = v22 & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)&v7[8 * (v24 >> 6)]) == 0)
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      while (++v25 != v28 || (v27 & 1) == 0)
      {
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)&v7[8 * v25];
        if (v30 != -1)
        {
          unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
          goto LABEL_38;
        }
      }

      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }

    unint64_t v26 = __clz(__rbit64((-1LL << v24) & ~*(void *)&v7[8 * (v24 >> 6)])) | v24 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_38:
    *(void *)&v7[(v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v26;
    uint64_t v31 = v3[6] + 40 * v26;
    *(_OWORD *)uint64_t v31 = v34;
    *(_OWORD *)(v31 + 16) = v35;
    *(void *)(v31 + 32) = v36;
    outlined init with take of Any(&v38, (_OWORD *)(v3[7] + 32 * v26));
    ++v3[2];
    if (v6) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      goto LABEL_42;
    }
    if (v11 >= v32) {
      goto LABEL_40;
    }
    unint64_t v12 = *(void *)(v33 + 8 * v11);
    int64_t v13 = v8 + 1;
    if (!v12)
    {
      OUTLINED_FUNCTION_4_14();
      if (v14 == v15) {
        goto LABEL_40;
      }
      OUTLINED_FUNCTION_3_19();
      if (!v12)
      {
        OUTLINED_FUNCTION_4_14();
        if (v14 == v15) {
          goto LABEL_40;
        }
        OUTLINED_FUNCTION_3_19();
        if (!v12)
        {
          OUTLINED_FUNCTION_4_14();
          if (v14 == v15) {
            goto LABEL_40;
          }
          OUTLINED_FUNCTION_3_19();
          if (!v12) {
            break;
          }
        }
      }
    }

LABEL_28:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v8 = v13;
  }

  int64_t v17 = v16 + 4;
  if (v17 >= v32)
  {
LABEL_40:
    swift_release(v3);
    outlined consume of [String : Any].Iterator._Variant(a1);
    return;
  }

  unint64_t v12 = *(void *)(v33 + 8 * v17);
  if (v12)
  {
    int64_t v13 = v17;
    goto LABEL_28;
  }

  while (!__OFADD__(v17, 1LL))
  {
    OUTLINED_FUNCTION_4_14();
    if (v14 == v15) {
      goto LABEL_40;
    }
    OUTLINED_FUNCTION_3_19();
    int64_t v17 = v18 + 1;
    if (v12) {
      goto LABEL_28;
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

    unint64_t v9 = (v19 - 1) & v19;
    char v15 = __clz(__rbit64(v19)) + (v8 << 6);
    goto LABEL_29;
  }

  __break(1u);
}

  if (objc_msgSend(v39, "preferredCallProvider", v69) == (char *)&dword_0 + 2)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v52 = OUTLINED_FUNCTION_15_1();
    uint64_t v53 = (os_log_s *)__swift_project_value_buffer(v52, (uint64_t)static Logger.siriPhone);
    uint64_t v54 = v39;
    Logger.logObject.getter(v54);
    os_log_type_t v55 = OUTLINED_FUNCTION_6_0();
    if (os_log_type_enabled(v53, v55))
    {
      Swift::String_optional v56 = OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v79 = v22;
      uint64_t v57 = (uint8_t *)v56;
      uint64_t v58 = (void *)OUTLINED_FUNCTION_7_0(8LL);
      *(_DWORD *)uint64_t v57 = 138412290;
      char v82 = v54;
      uint64_t v59 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v57 + 4);
      *uint64_t v58 = v54;

      _os_log_impl(&dword_0, v53, v55, "#PhoneCallFlowFactory Received FaceTime request for intent: %@", v57, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v58, 1LL);
      OUTLINED_FUNCTION_0_2((uint64_t)v58);
      uint64_t v60 = (uint64_t)v57;
      Swift::Int v22 = v79;
      OUTLINED_FUNCTION_0_2(v60);
    }

    else
    {

      uint64_t v53 = (os_log_s *)v54;
    }

    uint64_t v61 = v77;
    uint64_t v62 = v22;
    uint64_t v64 = RCHChildFlowProducersAsync.confirmIntentFlowProducer.getter(v77);
    if (v64) {
      uint64_t v65 = v63;
    }
    else {
      uint64_t v65 = 0LL;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16))(v72, v62, v61);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v76, v75, v74);
    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<INStartCallIntent, INStartCallIntentResponse>);
    OUTLINED_FUNCTION_15_2(v66);
    os_log_type_t v67 = OUTLINED_FUNCTION_124_1();
    OUTLINED_FUNCTION_29_0(v67, (uint64_t)&v82);
    BOOL v68 = (void *)OUTLINED_FUNCTION_8_2((uint64_t)&unk_3FC928, 80LL);
    OUTLINED_FUNCTION_87_4((uint64_t)v68);
    v68[7] = v64;
    v68[8] = v65;
    v68[9] = v67;
    RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter( partial apply for closure #3 in static PhoneCallFlowFactory.getStartCallProducers(skIntent:delegate:app:sharedGlobals:),  v68,  v61);
  }

  OUTLINED_FUNCTION_7_5();
}

    __break(1u);
LABEL_29:
    if (a3 < 0) {
      uint64_t v18 = a3;
    }
    else {
      uint64_t v18 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
    if (v19 != 2) {
      return 0LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v18);
  }

  while (v4);
LABEL_26:
  swift_bridgeObjectRelease();
  return v4;
}

  OUTLINED_FUNCTION_1_6();
  result.value._rawValue = v47;
  result.is_nil = v48;
  return result;
}

        uint64_t v73 = v32;
        uint64_t v33 = v28 - 1;
        __int128 v34 = &v7[2 * v28 + 2];
        __int128 v35 = v34[1];
        uint64_t v36 = *v34 == v2 && v35 == v27;
        if (v36 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v34, v35, v2, v27, 0LL) & 1) != 0)
        {
LABEL_33:
          uint64_t v37 = 0;
        }

        else
        {
          if (v28 != 1)
          {
            uint64_t v3 = v28 - 2;
            Swift::String_optional v56 = &v7[2 * v28 + 1];
            while (v3 < v28)
            {
              uint64_t v57 = *(v56 - 1);
              uint64_t v58 = *v56;
              if (v57 == v2 && v58 == v27)
              {
                uint64_t v37 = 0;
                uint64_t v33 = v3;
                goto LABEL_34;
              }

              --v33;
              if ((_stringCompareWithSmolCheck(_:_:expecting:)(v57, v58, v2, v27, 0LL) & 1) != 0) {
                goto LABEL_33;
              }
              --v3;
              v56 -= 2;
              if (v3 == -1)
              {
                uint64_t v33 = 0LL;
                goto LABEL_60;
              }
            }

            __break(1u);
LABEL_79:
            if (v3 < 0) {
              uint64_t v70 = v3;
            }
            else {
              uint64_t v70 = v3 & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain();
            uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter(v70);
            uint64_t v4 = (uint64_t)result;
            if (!result) {
              goto LABEL_83;
            }
            goto LABEL_3;
          }

  OUTLINED_FUNCTION_39();
  BOOL v29 = v15[2];
  if (v29)
  {
    *(void *)&uint64_t v89 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v29);
    uint64_t v30 = v15 + 4;
    do
    {
      OUTLINED_FUNCTION_9_66();
      __swift_project_boxed_opaque_existential_1(&v92, *((uint64_t *)&v93 + 1));
      uint64_t v31 = SiriPhoneContact.toINPerson()().super.isa;
      int64_t v32 = OUTLINED_FUNCTION_18();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v32);
      uint64_t v33 = *(void *)(v89 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v33);
      __int128 v34 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v31);
      specialized ContiguousArray._endMutation()(v34);
      v30 += 5;
      --v29;
    }

    while (v29);
    char v14 = v89;
    OUTLINED_FUNCTION_31_2();
  }

  else
  {
    OUTLINED_FUNCTION_31_2();
    char v14 = (uint64_t)_swiftEmptyArrayStorage;
  }

  __int128 v35 = OUTLINED_FUNCTION_1_77(v88);
  uint64_t v36 = *(void *)(v35 + 16);
  if (!v36)
  {
LABEL_39:
    swift_bridgeObjectRelease();
    uint64_t v16 = 0LL;
    goto LABEL_41;
  }

  uint64_t v37 = v35 + 32;
  while (1)
  {
    OUTLINED_FUNCTION_9_66();
    __int128 v38 = *((void *)&v93 + 1);
    __int128 v39 = v94;
    __swift_project_boxed_opaque_existential_1(&v92, *((uint64_t *)&v93 + 1));
    uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 368))(v38, v39);
    if ((v40 & 0xFF00) != 0x200) {
      break;
    }
    OUTLINED_FUNCTION_18();
LABEL_38:
    v37 += 40LL;
    if (!--v36) {
      goto LABEL_39;
    }
  }

  uint64_t v41 = v40;
  OUTLINED_FUNCTION_18();
  if ((v41 & 0x100) == 0) {
    goto LABEL_38;
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = 1LL;
LABEL_41:
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Transformer<[SmsGroup], [INCallGroup]?>);
  uint64_t v43 = (void (*)(__int128 *__return_ptr, __int128 *))Transformer.transform.getter(v42);
  __int128 v44 = v84[3];
  uint64_t v45 = v84[4];
  __swift_project_boxed_opaque_existential_1(v84, v44);
  *(void *)&uint64_t v92 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 136))(v44, v45);
  uint64_t v46 = v85;
  v43(&v89, &v92);
  if (v46)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_31_2();
    OUTLINED_FUNCTION_39();
    OUTLINED_FUNCTION_5_80();
    return;
  }

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_31_2();
  unint64_t v12 = v89;
  if (!(void)v89) {
    goto LABEL_55;
  }
  uint64_t v19 = v89 & 0xFFFFFFFFFFFFFF8LL;
LABEL_54:
  OUTLINED_FUNCTION_62();
LABEL_55:
  uint64_t v48 = 0LL;
LABEL_56:
  if (isa) {
    goto LABEL_61;
  }
  if ((unint64_t)v14 >> 62)
  {
    uint64_t v80 = v14 < 0 ? v14 : v14 & 0xFFFFFFFFFFFFFF8LL;
    swift_bridgeObjectRetain();
    uint64_t v51 = _CocoaArrayWrapper.endIndex.getter(v80);
    OUTLINED_FUNCTION_39();
  }

  else
  {
    uint64_t v51 = *(void *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v51 | v48)
  {
LABEL_61:
    uint64_t v53 = objc_allocWithZone(&OBJC_CLASS___NSNumber);
    uint64_t v54 = isa;
    os_log_type_t v55 = isa;
    Swift::String_optional v56 = [v53 initWithBool:v16];
    objc_allocWithZone(&OBJC_CLASS___INCallGroupConversationFilter);
    uint64_t v57 = (id)v48;
    uint64_t v52 = @nonobjc INCallGroupConversationFilter.init(__caller:participants:matchCallerAndParticipantsExactly:callGroup:)( v54,  v14,  v56,  (void *)v48);
  }

  else
  {
    OUTLINED_FUNCTION_39();
    uint64_t v52 = 0LL;
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v58 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v58, (uint64_t)static Logger.siriPhone);
  uint64_t v59 = v52;
  uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
  uint64_t v62 = static os_log_type_t.debug.getter(v60, v61);
  if (os_log_type_enabled(v60, v62))
  {
    uint64_t v63 = swift_slowAlloc(22LL, -1LL);
    uint64_t v64 = swift_slowAlloc(64LL, -1LL);
    *(void *)&uint64_t v92 = v64;
    *(_DWORD *)uint64_t v63 = 136315394;
    uint64_t v88 = (uint64_t (*)(uint64_t, uint64_t))v48;
    *(void *)&uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallGroupConversationFilter?>);
    uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallGroupConversationFilter?>.Type);
    uint64_t v66 = OUTLINED_FUNCTION_29_14(v65);
    BOOL v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, (uint64_t *)&v92);
    uint64_t v69 = OUTLINED_FUNCTION_69_6(v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v69, v70, v63 + 4, v71);
    swift_bridgeObjectRelease();
    *(_WORD *)(v63 + 12) = 2080;
    *(void *)&uint64_t v89 = v52;
    uint64_t v72 = v59;
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INCallGroupConversationFilter?);
    uint64_t v74 = OUTLINED_FUNCTION_29_14(v73);
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, (uint64_t *)&v92);
    uint64_t v77 = OUTLINED_FUNCTION_69_6(v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v77, v78, v63 + 14, v79);

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v60, v62, "%s --> %s", (uint8_t *)v63, 0x16u);
    swift_arrayDestroy(v64, 2LL);
    OUTLINED_FUNCTION_0_2(v64);
    OUTLINED_FUNCTION_0_2(v63);

    OUTLINED_FUNCTION_5_80();
  }

  else
  {

    OUTLINED_FUNCTION_5_80();
  }

  *char v82 = v52;
}

      unint64_t v25 = v137;
      if (v20 < v21)
      {
        if (v10 < v12) {
          goto LABEL_157;
        }
        if (v12 < v10)
        {
          uint64_t v37 = 16 * v10;
          __int128 v38 = 16 * v12;
          __int128 v39 = v10;
          uint64_t v40 = v12;
          do
          {
            if (v40 != --v39)
            {
              if (!v137) {
                goto LABEL_163;
              }
              uint64_t v41 = v137 + v37;
              uint64_t v42 = *(void *)(v137 + v38);
              uint64_t v43 = *(void *)(v137 + v38 + 8);
              *(_OWORD *)(v137 + v38) = *(_OWORD *)(v137 + v37 - 16);
              *(void *)(v41 - 16) = v42;
              *(void *)(v41 - 8) = v43;
            }

            ++v40;
            v37 -= 16LL;
            v38 += 16LL;
          }

          while (v40 < v39);
        }
      }
    }

    if (v10 < v5)
    {
      if (__OFSUB__(v10, v12)) {
        goto LABEL_154;
      }
      if (v10 - v12 < v126)
      {
        __int128 v44 = v12 + v126;
        if (__OFADD__(v12, v126)) {
          goto LABEL_158;
        }
        if (v44 >= v5) {
          __int128 v44 = v5;
        }
        if (v44 < v12) {
          goto LABEL_159;
        }
        if (v10 != v44)
        {
          v132 = v11;
          v135 = v12;
          uint64_t v45 = (uint64_t *)(v25 + 16 * v10);
          v129 = v44;
          do
          {
            uint64_t v46 = *(void *)(v25 + 16 * v10 + 8);
            uint64_t v47 = v135;
            uint64_t v48 = v45;
            do
            {
              id v50 = *(v48 - 2);
              uint64_t v49 = *(v48 - 1);
              if (*(void *)(v3 + 16))
              {
                uint64_t v51 = *v48;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v46);
                uint64_t v3 = v139;
                uint64_t v53 = 0.0;
                uint64_t v54 = 0.0;
                if ((v55 & 1) != 0) {
                  uint64_t v54 = *(double *)(*(void *)(v139 + 56) + 8 * v52);
                }
                if (*(void *)(v139 + 16))
                {
                  swift_bridgeObjectRetain();
                  Swift::String_optional v56 = specialized __RawDictionaryStorage.find<A>(_:)(v50, v49);
                  if ((v57 & 1) != 0) {
                    uint64_t v53 = *(double *)(*(void *)(v139 + 56) + 8 * v56);
                  }
                  swift_bridgeObjectRelease();
                }
              }

              else
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v54 = 0.0;
                uint64_t v53 = 0.0;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v53 >= v54) {
                break;
              }
              if (!v137) {
                goto LABEL_161;
              }
              uint64_t v58 = *v48;
              uint64_t v46 = v48[1];
              *(_OWORD *)uint64_t v48 = *((_OWORD *)v48 - 1);
              *(v48 - 1) = v46;
              *(v48 - 2) = v58;
              v48 -= 2;
              ++v47;
            }

            while (v10 != v47);
            ++v10;
            v45 += 2;
            unint64_t v25 = v137;
          }

          while (v10 != v129);
          unint64_t v10 = v129;
          int64_t v11 = v132;
          unint64_t v12 = v135;
        }
      }
    }

    if (v10 < v12) {
      goto LABEL_153;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0) {
      int64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v11 + 2) + 1LL,  1,  v11);
    }
    uint64_t v60 = *((void *)v11 + 2);
    uint64_t v59 = *((void *)v11 + 3);
    uint64_t v61 = v60 + 1;
    if (v60 >= v59 >> 1) {
      int64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v59 > 1),  v60 + 1,  1,  v11);
    }
    *((void *)v11 + 2) = v61;
    uint64_t v3 = (uint64_t)(v11 + 32);
    uint64_t v62 = &v11[16 * v60 + 32];
    *(void *)uint64_t v62 = v12;
    *((void *)v62 + 1) = v10;
    if (v60) {
      break;
    }
    uint64_t v61 = 1LL;
LABEL_108:
    uint64_t v5 = v128;
    uint64_t v3 = v139;
    if (v10 >= v128) {
      goto LABEL_116;
    }
  }

  v130 = v10;
  v133 = v11;
  while (1)
  {
    uint64_t v63 = v61 - 1;
    if (v61 >= 4)
    {
      BOOL v68 = v3 + 16 * v61;
      uint64_t v69 = *(void *)(v68 - 64);
      uint64_t v70 = *(void *)(v68 - 56);
      uint64_t v74 = __OFSUB__(v70, v69);
      uint64_t v71 = v70 - v69;
      if (v74) {
        goto LABEL_138;
      }
      uint64_t v73 = *(void *)(v68 - 48);
      uint64_t v72 = *(void *)(v68 - 40);
      uint64_t v74 = __OFSUB__(v72, v73);
      uint64_t v66 = v72 - v73;
      os_log_type_t v67 = v74;
      if (v74) {
        goto LABEL_139;
      }
      uint64_t v75 = v61 - 2;
      uint64_t v76 = (uint64_t *)(v3 + 16 * (v61 - 2));
      uint64_t v78 = *v76;
      uint64_t v77 = v76[1];
      uint64_t v74 = __OFSUB__(v77, v78);
      uint64_t v79 = v77 - v78;
      if (v74) {
        goto LABEL_140;
      }
      uint64_t v74 = __OFADD__(v66, v79);
      uint64_t v80 = v66 + v79;
      if (v74) {
        goto LABEL_142;
      }
      if (v80 >= v71)
      {
        uint64_t v98 = (uint64_t *)(v3 + 16 * v63);
        uint64_t v100 = *v98;
        uint64_t v99 = v98[1];
        uint64_t v74 = __OFSUB__(v99, v100);
        uint64_t v101 = v99 - v100;
        if (v74) {
          goto LABEL_148;
        }
        uint64_t v91 = v66 < v101;
        goto LABEL_97;
      }
    }

    else
    {
      if (v61 != 3)
      {
        uint64_t v92 = *((void *)v11 + 4);
        uint64_t v93 = *((void *)v11 + 5);
        uint64_t v74 = __OFSUB__(v93, v92);
        uint64_t v85 = v93 - v92;
        uint64_t v86 = v74;
        goto LABEL_91;
      }

      uint64_t v65 = *((void *)v11 + 4);
      uint64_t v64 = *((void *)v11 + 5);
      uint64_t v74 = __OFSUB__(v64, v65);
      uint64_t v66 = v64 - v65;
      os_log_type_t v67 = v74;
    }

    if ((v67 & 1) != 0) {
      goto LABEL_141;
    }
    uint64_t v75 = v61 - 2;
    unint64_t v81 = (uint64_t *)(v3 + 16 * (v61 - 2));
    unint64_t v83 = *v81;
    char v82 = v81[1];
    uint64_t v84 = __OFSUB__(v82, v83);
    uint64_t v85 = v82 - v83;
    uint64_t v86 = v84;
    if (v84) {
      goto LABEL_143;
    }
    uint64_t v87 = (uint64_t *)(v3 + 16 * v63);
    uint64_t v89 = *v87;
    uint64_t v88 = v87[1];
    uint64_t v74 = __OFSUB__(v88, v89);
    uint64_t v90 = v88 - v89;
    if (v74) {
      goto LABEL_145;
    }
    if (__OFADD__(v85, v90)) {
      goto LABEL_147;
    }
    if (v85 + v90 >= v66)
    {
      uint64_t v91 = v66 < v90;
LABEL_97:
      if (v91) {
        uint64_t v63 = v75;
      }
      goto LABEL_99;
    }

  OUTLINED_FUNCTION_78_21(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_aliases);
  if ((v65 & 1) != 0)
  {
LABEL_10:
    OUTLINED_FUNCTION_49_19(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_callRecordType);
    if ((v54 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }

    int64_t v8 = a2;
  }

  int64_t v13 = v8 & 1;
  if (one-time initialization token for siriPhone != -1) {
LABEL_35:
  }
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  uint64_t v30 = OUTLINED_FUNCTION_15_1();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.siriPhone);
  OUTLINED_FUNCTION_11_81();
  uint64_t v31 = OUTLINED_FUNCTION_11_81();
  int64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  uint64_t v33 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v32, v33))
  {
    __int128 v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    __int128 v35 = swift_slowAlloc(32LL, -1LL);
    uint64_t v45 = (void *)v35;
    *(_DWORD *)__int128 v34 = 136315138;
    uint64_t v43 = (uint64_t)v10;
    LOBYTE(v44) = (_DWORD)v13 != 0;
    OUTLINED_FUNCTION_11_81();
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<[String], Error>);
    uint64_t v37 = String.init<A>(describing:)(&v43, v36);
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, (uint64_t *)&v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v34 + 4);
    unint64_t v9 = a1;
    swift_bridgeObjectRelease();
    outlined consume of Result<[SAAceView], Error>((uint64_t)v10, v13);
    OUTLINED_FUNCTION_10_74();
    _os_log_impl(&dword_0, v32, v33, "IdiomSensitiveViewBuilder: Built views: %s", v34, 0xCu);
    swift_arrayDestroy(v35, 1LL);
    OUTLINED_FUNCTION_0_2(v35);
    OUTLINED_FUNCTION_0_2((uint64_t)v34);
  }

  else
  {
    outlined consume of Result<[SAAceView], Error>((uint64_t)v10, v13);
    OUTLINED_FUNCTION_10_74();
  }

  Signpost.OpenSignpost.end()();
  a7(v9, v13);
  OUTLINED_FUNCTION_10_74();
  OUTLINED_FUNCTION_38_5();
}

    OUTLINED_FUNCTION_31_1((uint64_t)v12);
    goto LABEL_29;
  }

  static SeasRulesHelper.getContactDonationInfo(phoneCallNLIntent:appBundleIds:)( *(void **)(v1 + 40),  *(void *)(v1 + 48));
  if (v6)
  {
    uint64_t v7 = v4;
    uint64_t v0 = v5;
    swift_bridgeObjectRelease();
    if ((v0 & 1) != 0 && !v7)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      int64_t v8 = OUTLINED_FUNCTION_15_1();
      __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
      unint64_t v9 = OUTLINED_FUNCTION_48();
      Logger.logObject.getter(v9);
      unint64_t v10 = OUTLINED_FUNCTION_15_16();
      int64_t v11 = OUTLINED_FUNCTION_33_47(v10);
      unint64_t v12 = *(void **)(v1 + 56);
      if (v11)
      {
        OUTLINED_FUNCTION_7_0(12LL);
        OUTLINED_FUNCTION_7_0(32LL);
        OUTLINED_FUNCTION_31_47();
        OUTLINED_FUNCTION_5_104(4.8149e-34);
        OUTLINED_FUNCTION_36_1();
        OUTLINED_FUNCTION_17_68();
        OUTLINED_FUNCTION_10_81();
        int64_t v13 = OUTLINED_FUNCTION_23_5();
        uint64_t v21 = OUTLINED_FUNCTION_3_122( v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v385,  (uint64_t)log,  v418,  (uint64_t)v434,  v451,  v467);
        OUTLINED_FUNCTION_22_62( v21,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  v386,  (uint64_t)logd,  v419,  (uint64_t)v435,  v452,  v468,  v482,  v491,  v499,  v507,  type,  v520,  v526,  v531);
        OUTLINED_FUNCTION_62();
        OUTLINED_FUNCTION_31_1((uint64_t)v12);
        BOOL v29 = "%s current contact only exists for 1p, skip app usage rule";
LABEL_27:
        OUTLINED_FUNCTION_46_34(&dword_0, (os_log_s *)v0, (os_log_type_t)v2, v29);
        OUTLINED_FUNCTION_8_24();
        OUTLINED_FUNCTION_0_2(v526);
        OUTLINED_FUNCTION_0_2(v521);
LABEL_29:

        v179 = *(uint64_t **)(v3 + 24);
        v180 = (unsigned int *)&enum case for AppMatchResolution.noMatchFound(_:);
        goto LABEL_30;
      }

      goto LABEL_28;
    }
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v47 = *(void *)(v1 + 48);
  uint64_t v48 = OUTLINED_FUNCTION_15_1();
  uint64_t v49 = __swift_project_value_buffer(v48, (uint64_t)static Logger.siriPhone);
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_11(v47);
  OUTLINED_FUNCTION_27_40();
  id v50 = OUTLINED_FUNCTION_15_16();
  uint64_t v51 = v50;
  uint64_t v52 = os_log_type_enabled((os_log_t)v0, v50);
  uint64_t v53 = *(void *)(v3 + 48);
  uint64_t v54 = *(void *)(v3 + 56);
  v522 = v49;
  if (v52)
  {
    uint64_t v2 = OUTLINED_FUNCTION_7_0(22LL);
    OUTLINED_FUNCTION_7_0(64LL);
    OUTLINED_FUNCTION_31_47();
    *(_DWORD *)uint64_t v2 = 136315394;
    v507 = v2 + 4;
    os_log_type_t v55 = v3;
    uint64_t v3 = *(void *)(v54 + 40);
    Swift::String_optional v56 = *(void **)(v54 + 56);
    v533 = 0LL;
    v534 = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_36_1();
    LODWORD(type) = v51;
    uint64_t v57 = OUTLINED_FUNCTION_37_41();
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v57, v58, v59, v56);
    OUTLINED_FUNCTION_10_81();
    uint64_t v60 = swift_bridgeObjectRelease();
    *(void *)(v55 + 16) = OUTLINED_FUNCTION_3_122( v60,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v385,  (uint64_t)log,  v418,  (uint64_t)v434,  v451,  v467);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v531, v55 + 24, v2 + 4);
    OUTLINED_FUNCTION_62();
    OUTLINED_FUNCTION_31_1(v54);
    *(_WORD *)(v2 + 12) = 2080;
    BOOL v68 = OUTLINED_FUNCTION_128();
    uint64_t v69 = Array.description.getter(v68, &type metadata for String);
    uint64_t v71 = v70;
    OUTLINED_FUNCTION_23_5();
    *(void *)(v3 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v71, &v532);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v531, v55 + 24, v2 + 14);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_7_4(v53);
    _os_log_impl(&dword_0, (os_log_t)v0, (os_log_type_t)v51, "%s candidate appIdToApp: %s", (uint8_t *)v2, 0x16u);
    OUTLINED_FUNCTION_12_24();
    OUTLINED_FUNCTION_0_2(v526);
    OUTLINED_FUNCTION_0_2(v2);
  }

  else
  {
    OUTLINED_FUNCTION_31_1(v54);
    OUTLINED_FUNCTION_7_4(v53);
  }

  uint64_t v72 = *(void *)(v3 + 56);
  uint64_t v73 = *(os_log_s **)(**(void **)(v72 + 16) + 80LL);
  uint64_t v74 = swift_bridgeObjectRetain();
  uint64_t v75 = ((uint64_t (*)(uint64_t, uint64_t))v73)(v74, 7LL);
  OUTLINED_FUNCTION_39();
  swift_retain_n(v72, 2LL);
  OUTLINED_FUNCTION_11(v75);
  OUTLINED_FUNCTION_27_40();
  uint64_t v76 = OUTLINED_FUNCTION_15_16();
  uint64_t v77 = v76;
  uint64_t v78 = os_log_type_enabled(v73, v76);
  uint64_t v79 = *(void *)(v3 + 56);
  if (v78)
  {
    uint64_t v80 = OUTLINED_FUNCTION_7_0(32LL);
    OUTLINED_FUNCTION_7_0(64LL);
    OUTLINED_FUNCTION_31_47();
    *(_DWORD *)uint64_t v80 = 136315650;
    v507 = v80 + 4;
    LODWORD(type) = v77;
    unint64_t v81 = *(void **)(v79 + 56);
    OUTLINED_FUNCTION_30_49();
    OUTLINED_FUNCTION_36_1();
    char v82 = OUTLINED_FUNCTION_37_41();
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v82, v83, v84, v81);
    swift_bridgeObjectRelease();
    uint64_t v85 = OUTLINED_FUNCTION_13_1();
    *(void *)(v3 + 16) = OUTLINED_FUNCTION_8_88( v85,  v86,  v87,  v88,  v89,  v90,  v91,  v92,  v385,  (uint64_t)log,  v418,  (uint64_t)v434,  v451,  v467);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v531, v3 + 24, v80 + 4);
    OUTLINED_FUNCTION_39();
    OUTLINED_FUNCTION_31_1(v79);
    *(_WORD *)(v80 + 12) = 2048;
    *(void *)(v3 + 16) = 7LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v531, v3 + 24, v80 + 14);
    *(_WORD *)(v80 + 22) = 2080;
    uint64_t v93 = type metadata accessor for NSNumber();
    uint64_t v94 = OUTLINED_FUNCTION_128();
    uint64_t v95 = Dictionary.description.getter(v94, &type metadata for String, v93, &protocol witness table for String);
    uint64_t v2 = v96;
    OUTLINED_FUNCTION_23_5();
    *(void *)(v3 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v2, &v532);
    OUTLINED_FUNCTION_4_106(v531, v97, v98, v80 + 32);
    OUTLINED_FUNCTION_13_1();
    OUTLINED_FUNCTION_7_4(v75);
    _os_log_impl(&dword_0, v73, (os_log_type_t)v77, "%s app usage in last %ld days: %s", (uint8_t *)v80, 0x20u);
    OUTLINED_FUNCTION_12_24();
    OUTLINED_FUNCTION_0_2(v526);
    OUTLINED_FUNCTION_0_2(v80);
  }

  else
  {
    OUTLINED_FUNCTION_31_1(*(void *)(v3 + 56));
    OUTLINED_FUNCTION_7_4(v75);
  }

  uint64_t v99 = specialized Sequence.max(by:)(v75);
  v527 = v100;
  if (!v100)
  {
    OUTLINED_FUNCTION_23_5();
    OUTLINED_FUNCTION_48();
    uint64_t v0 = OUTLINED_FUNCTION_27_40();
    v161 = static os_log_type_t.error.getter();
    v162 = OUTLINED_FUNCTION_33_47(v161);
    unint64_t v12 = *(void **)(v3 + 56);
    if (v162)
    {
      OUTLINED_FUNCTION_7_0(12LL);
      OUTLINED_FUNCTION_7_0(32LL);
      OUTLINED_FUNCTION_31_47();
      OUTLINED_FUNCTION_5_104(4.8149e-34);
      OUTLINED_FUNCTION_36_1();
      OUTLINED_FUNCTION_17_68();
      OUTLINED_FUNCTION_10_81();
      v163 = OUTLINED_FUNCTION_23_5();
      v171 = OUTLINED_FUNCTION_3_122( v163,  v164,  v165,  v166,  v167,  v168,  v169,  v170,  v385,  (uint64_t)log,  v418,  (uint64_t)v434,  v451,  v467);
      OUTLINED_FUNCTION_22_62( v171,  v172,  v173,  v174,  v175,  v176,  v177,  v178,  v390,  (uint64_t)logg,  v422,  (uint64_t)v439,  v456,  v472,  v482,  v491,  v499,  v507,  type,  v522,  0LL,  v531);
      OUTLINED_FUNCTION_62();
      OUTLINED_FUNCTION_31_1((uint64_t)v12);
      BOOL v29 = "%s can't find maxUsage app, this not expected";
      goto LABEL_27;
    }

    goto LABEL_28;
  }

  uint64_t v102 = (uint64_t)v99;
  uint64_t v103 = v101;
  OUTLINED_FUNCTION_11(v100);
  uint64_t v104 = v103;
  uint64_t v105 = specialized _NativeDictionary.filter(_:)(v75, v102, v527, v104);
  OUTLINED_FUNCTION_23_5();
  uint64_t v106 = specialized Sequence.max(by:)(v105);
  uint64_t v108 = v107;
  v110 = v109;
  swift_release(v105);
  if (!v108)
  {
    OUTLINED_FUNCTION_48();
    v184 = (os_log_s *)OUTLINED_FUNCTION_27_40();
    v186 = static os_log_type_t.debug.getter(v184, v185);
    v187 = os_log_type_enabled(v184, v186);
    v188 = *(void **)(v3 + 56);
    if (v187)
    {
      v189 = (_DWORD *)OUTLINED_FUNCTION_7_0(12LL);
      typef = OUTLINED_FUNCTION_7_0(32LL);
      v532 = typef;
      v510 = (uint64_t)v189;
      *v189 = 136315138;
      v485 = (uint64_t)(v189 + 1);
      v494 = v102;
      v191 = v188[4];
      v190 = v188[5];
      v192 = v3;
      v194 = v188[6];
      v193 = (void *)v188[7];
      v533 = 0LL;
      v534 = 0xE000000000000000LL;
      OUTLINED_FUNCTION_128();
      swift_bridgeObjectRetain();
      v195 = v194;
      uint64_t v3 = v192;
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v191, v190, v195, v193);
      uint64_t v102 = v494;
      swift_bridgeObjectRelease();
      v196 = OUTLINED_FUNCTION_23_5();
      *(void *)(v192 + 16) = OUTLINED_FUNCTION_3_122( v196,  v197,  v198,  v199,  v200,  v201,  v202,  v203,  v385,  (uint64_t)log,  v418,  (uint64_t)v434,  v451,  v467);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v531, v192 + 24, v485);
      OUTLINED_FUNCTION_62();
      OUTLINED_FUNCTION_31_1((uint64_t)v188);
      OUTLINED_FUNCTION_46_34(&dword_0, v184, v186, "%s can't find secondMaxUsage app, select max usage app");
      OUTLINED_FUNCTION_8_24();
      OUTLINED_FUNCTION_0_2(typef);
      OUTLINED_FUNCTION_0_2(v510);

      OUTLINED_FUNCTION_28_57( v494,  v204,  v205,  v206,  v207,  v208,  v209,  v210,  v391,  (uint64_t)logh,  v423,  (uint64_t)v440,  v457,  v473,  v485,  v494,  v103);
    }

    else
    {
      outlined consume of (key: String, value: NSNumber)?(v102, v527, v103);
      OUTLINED_FUNCTION_31_1((uint64_t)v188);
    }

    v179 = *(uint64_t **)(v3 + 24);

    goto LABEL_45;
  }

  v492 = v102;
  v500 = v103;
  swift_bridgeObjectRetain_n(v527, 4LL);
  uint64_t v111 = v104;
  swift_bridgeObjectRetain_n(v108, 4LL);
  v112 = v110;
  v113 = v111;
  v114 = v112;
  OUTLINED_FUNCTION_48();
  v115 = (os_log_t)v113;
  uint64_t v116 = v114;
  v117 = v115;
  v118 = v116;
  outlined copy of (key: String, value: NSNumber)?((uint64_t)v106, v108, v110);
  OUTLINED_FUNCTION_27_40();
  v119 = OUTLINED_FUNCTION_6_0();
  v120 = OUTLINED_FUNCTION_29_4(v119);
  v121 = (uint64_t)v106;
  v122 = *(void *)(v3 + 56);
  v508 = v108;
  uint64_t typea = v118;
  v453 = (uint64_t)v110;
  v469 = v121;
  if (v120)
  {
    v123 = OUTLINED_FUNCTION_7_0(52LL);
    v387 = OUTLINED_FUNCTION_7_0(16LL);
    v436 = (os_log_t)OUTLINED_FUNCTION_7_0(96LL);
    v532 = (uint64_t)v436;
    *(_DWORD *)v123 = 136316162;
    LODWORD(v418) = (_DWORD)v116;
    v483 = v117;
    v124 = v3;
    v125 = *(void *)(v122 + 32);
    uint64_t v3 = *(void *)(v122 + 40);
    v533 = 0LL;
    v534 = 0xE000000000000000LL;
    OUTLINED_FUNCTION_76_4();
    OUTLINED_FUNCTION_36_1();
    OUTLINED_FUNCTION_53_32(v125, v3);
    OUTLINED_FUNCTION_10_81();
    v126 = OUTLINED_FUNCTION_87_0();
    *(void *)(v124 + 16) = OUTLINED_FUNCTION_8_88( v126,  v127,  v128,  v129,  v130,  v131,  v132,  v133,  v387,  (uint64_t)v115,  v418,  (uint64_t)v436,  (uint64_t)v110,  v469);
    v134 = v124 + 24;
    OUTLINED_FUNCTION_4_106(v531, v135, v136, v123 + 12);
    OUTLINED_FUNCTION_39();
    OUTLINED_FUNCTION_31_1(v122);
    *(_WORD *)(v123 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v124 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v492, v527, &v532);
    OUTLINED_FUNCTION_4_106(v531, v137, v138, v123 + 22);
    OUTLINED_FUNCTION_32_10(v527);

    *(_WORD *)(v123 + 22) = 2112;
    *(void *)(v124 + 16) = v483;
    v139 = v483;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v531, v124 + 24, v123 + 24);
    v140 = (uint64_t)v388;
    *v388 = v500;
    OUTLINED_FUNCTION_7_4(v527);

    *(_WORD *)(v123 + 32) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v3 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v470, v108, &v532);
    OUTLINED_FUNCTION_4_106(v531, v141, v142, v123 + 42);
    v143 = OUTLINED_FUNCTION_32_10(v108);
    OUTLINED_FUNCTION_36_40( v143,  v144,  v145,  v146,  v147,  v148,  v149,  v150,  (uint64_t)v388,  (uint64_t)loge,  v420,  (uint64_t)v437,  v454,  v470,  (uint64_t)v483,  v492,  (uint64_t)v500,  v108,  typea);
    OUTLINED_FUNCTION_36_40( v151,  v152,  v153,  v154,  v155,  v156,  v157,  v158,  v389,  (uint64_t)logf,  v421,  (uint64_t)v438,  v455,  v471,  v484,  v493,  v501,  v509,  typee);
    *(_WORD *)(v123 + 42) = 2112;
    *(void *)(v3 + 16) = typea;
    v159 = typea;
    uint64_t v108 = v508;
    v117 = (os_log_s *)v482;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v531, v134, v123 + 44);
    *(void *)(v140 + 8) = v453;
    OUTLINED_FUNCTION_7_4(v508);

    _os_log_impl( &dword_0,  log,  (os_log_type_t)v418,  "%s find maxUsage %s:%@ and secondMaxUsage: %s:%@",  (uint8_t *)v123,  0x34u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v140, 2LL);
    OUTLINED_FUNCTION_0_2(v140);
    v115 = v434;
    OUTLINED_FUNCTION_74_14();
    OUTLINED_FUNCTION_0_2((uint64_t)v434);
    v160 = v123;
    v118 = typea;
    OUTLINED_FUNCTION_0_2(v160);
  }

  else
  {
    OUTLINED_FUNCTION_31_1(v122);
    swift_bridgeObjectRelease_n(v527, 4LL);

    swift_bridgeObjectRelease_n(v108, 4LL);
  }

  OUTLINED_FUNCTION_27_62();
  if (v211 == 0.0 || (OUTLINED_FUNCTION_52_30(), v213 = v212, OUTLINED_FUNCTION_27_62(), v213 / v214 >= 3.0))
  {
    swift_retain_n(*(void *)(v3 + 56), 2LL);
    OUTLINED_FUNCTION_11(v527);
    v267 = v117;
    OUTLINED_FUNCTION_27_40();
    v268 = OUTLINED_FUNCTION_6_0();
    v269 = os_log_type_enabled(v115, v268);
    v270 = v3;
    v271 = *(void **)(v3 + 56);
    if (v269)
    {
      v272 = OUTLINED_FUNCTION_7_0(32LL);
      v488 = OUTLINED_FUNCTION_7_0(64LL);
      v532 = v488;
      *(_DWORD *)v272 = 136315650;
      v273 = v271[4];
      v274 = v271[5];
      v525 = v267;
      v275 = v271[6];
      v276 = (void *)v271[7];
      v533 = 0LL;
      v534 = 0xE000000000000000LL;
      OUTLINED_FUNCTION_124();
      OUTLINED_FUNCTION_76_4();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v273, v274, v275, v276);
      OUTLINED_FUNCTION_87_0();
      v277 = swift_bridgeObjectRelease();
      *(void *)(v270 + 16) = OUTLINED_FUNCTION_3_122( v277,  v278,  v279,  v280,  v281,  v282,  v283,  v284,  v385,  (uint64_t)log,  v272 + 4,  (uint64_t)v115,  v453,  v469);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v531, v270 + 24, v427);
      OUTLINED_FUNCTION_62();
      OUTLINED_FUNCTION_31_1((uint64_t)v271);
      *(_WORD *)(v272 + 12) = 2048;
      *(void *)(v270 + 16) = 0x4008000000000000LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v531, v270 + 24, v272 + 14);
      *(_WORD *)(v272 + 22) = 2080;
      OUTLINED_FUNCTION_124();
      *(void *)(v270 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v492, v527, &v532);
      uint64_t v102 = v492;
      v267 = v525;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v531, v270 + 24, v272 + 24);
      OUTLINED_FUNCTION_32_10(v527);

      _os_log_impl(&dword_0, v444, v268, "%s maxUsage/secondMaxUsage >= %f, return resolved %s", (uint8_t *)v272, 0x20u);
      OUTLINED_FUNCTION_12_24();
      OUTLINED_FUNCTION_0_2(v488);
      OUTLINED_FUNCTION_0_2(v272);

      v285 = OUTLINED_FUNCTION_62();
      OUTLINED_FUNCTION_36_40( v285,  v286,  v287,  v288,  v289,  v290,  v291,  v292,  v395,  (uint64_t)logj,  v427,  (uint64_t)v444,  v460,  v476,  v488,  v492,  (uint64_t)v500,  v508,  typea);
      OUTLINED_FUNCTION_43_30( v293,  v294,  v295,  v296,  v297,  v298,  v299,  v300,  v396,  (uint64_t)logk,  v428,  (uint64_t)v445,  v461,  v477);
      OUTLINED_FUNCTION_28_57( v102,  v301,  v302,  v303,  v304,  v305,  v306,  v307,  v397,  (uint64_t)logl,  v429,  (uint64_t)v446,  v462,  v478,  v489,  v497,  v504);
    }

    else
    {
      uint64_t v102 = v492;
      outlined consume of (key: String, value: NSNumber)?(v492, v527, v500);
      OUTLINED_FUNCTION_29_49( v308,  v309,  v310,  v311,  v312,  v313,  v314,  v315,  v385,  (uint64_t)log,  v418,  (uint64_t)v434,  v453,  v469);
      OUTLINED_FUNCTION_87_0();

      OUTLINED_FUNCTION_31_1((uint64_t)v271);
      OUTLINED_FUNCTION_7_4(v527);
    }

    uint64_t v3 = v270;
    v179 = *(uint64_t **)(v270 + 24);

LABEL_45:
    *v179 = v102;
    v179[1] = v527;
    v180 = (unsigned int *)&enum case for AppMatchResolution.resolved(_:);
    goto LABEL_30;
  }

  OUTLINED_FUNCTION_52_30();
  v216 = v215;
  OUTLINED_FUNCTION_27_62();
  v218 = v216 / v217;
  v219 = swift_retain();
  OUTLINED_FUNCTION_55_30( v219,  v220,  v221,  v222,  v223,  v224,  v225,  v226,  v385,  (uint64_t)log,  v418,  (uint64_t)v434,  v453,  v469,  v482,  v492,  (uint64_t)v500,  v508,  (uint64_t)typea,  v522,  v527);
  v227 = v117;
  if (v218 >= 2.0)
  {
    v316 = swift_retain();
    OUTLINED_FUNCTION_55_30( v316,  v317,  v318,  v319,  v320,  v321,  v322,  v323,  v392,  (uint64_t)loga,  v424,  (uint64_t)v441,  v458,  v474,  v486,  v495,  v502,  v511,  typeb,  v523,  v528);
    v324 = v227;
    OUTLINED_FUNCTION_27_40();
    v325 = OUTLINED_FUNCTION_6_0();
    v326 = v325;
    v327 = os_log_type_enabled(v227, v325);
    v328 = v3;
    v329 = *(void *)(v3 + 56);
    if (v327)
    {
      v330 = OUTLINED_FUNCTION_7_0(42LL);
      v490 = OUTLINED_FUNCTION_7_0(64LL);
      v532 = v490;
      *(_DWORD *)v330 = 136315906;
      LODWORD(v447) = v326;
      v332 = *(void *)(v329 + 48);
      v331 = *(void **)(v329 + 56);
      OUTLINED_FUNCTION_30_49();
      OUTLINED_FUNCTION_124();
      v333 = OUTLINED_FUNCTION_39_33();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v333, v334, v332, v331);
      swift_bridgeObjectRelease();
      v335 = OUTLINED_FUNCTION_13_1();
      *(void *)(v328 + 16) = OUTLINED_FUNCTION_8_88( v335,  v336,  v337,  v338,  v339,  v340,  v341,  v342,  v398,  (uint64_t)logc,  v430,  (uint64_t)v447,  v463,  v479);
      OUTLINED_FUNCTION_4_106(v531, v343, v344, v330 + 12);
      OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_31_1(v329);
      *(_WORD *)(v330 + 12) = 2048;
      OUTLINED_FUNCTION_14_76(v330 + 14, v330 + 22, 0x4008000000000000LL);
      *(_WORD *)(v330 + 22) = 2048;
      OUTLINED_FUNCTION_14_76(v330 + 24, v330 + 32, 0x4000000000000000LL);
      *(_WORD *)(v330 + 32) = 2080;
      OUTLINED_FUNCTION_128();
      v345 = v498;
      *(void *)(v328 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v498, v530, &v532);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v531, v328 + 24, v330 + 34);
      OUTLINED_FUNCTION_32_10(v530);

      v346 = v431;
      OUTLINED_FUNCTION_35_36( &dword_0,  v431,  v347,  "%s maxUsage/secondMaxUsage <= %f and >= %f, return needsConfirmation %s",  v348,  v349,  v350,  v351,  v399,  (uint64_t)logm,  (uint64_t)v431,  v448);
      OUTLINED_FUNCTION_12_24();
      OUTLINED_FUNCTION_0_2(v490);
      OUTLINED_FUNCTION_0_2(v330);

      v352 = OUTLINED_FUNCTION_62();
      OUTLINED_FUNCTION_36_40( v352,  v353,  v354,  v355,  v356,  v357,  v358,  v359,  v400,  (uint64_t)logn,  v432,  (uint64_t)v449,  v464,  v480,  v490,  v498,  (uint64_t)v505,  v512,  typec);
      OUTLINED_FUNCTION_43_30( v360,  v361,  v362,  v363,  v364,  v365,  v366,  v367,  v401,  (uint64_t)logo,  v433,  (uint64_t)v450,  v465,  v481);
      outlined consume of (key: String, value: NSNumber)?(v345, v530, v506);
    }

    else
    {
      v345 = v498;
      outlined consume of (key: String, value: NSNumber)?(v498, v530, v505);
      OUTLINED_FUNCTION_29_49( v377,  v378,  v379,  v380,  v381,  v382,  v383,  v384,  v398,  (uint64_t)logc,  v430,  (uint64_t)v447,  v463,  v479);
      OUTLINED_FUNCTION_87_0();

      OUTLINED_FUNCTION_31_1(v329);
      OUTLINED_FUNCTION_7_4(v530);
    }

    uint64_t v3 = v328;
    v179 = *(uint64_t **)(v328 + 24);

    *v179 = v345;
    v179[1] = v530;
    v180 = (unsigned int *)&enum case for AppMatchResolution.needsConfirmation(_:);
  }

  else
  {
    OUTLINED_FUNCTION_11(v108);
    v228 = v118;
    v229 = swift_retain();
    OUTLINED_FUNCTION_55_30( v229,  v230,  v231,  v232,  v233,  v234,  v235,  v236,  v392,  (uint64_t)loga,  v424,  (uint64_t)v441,  v458,  v474,  v486,  v495,  v502,  v511,  typeb,  v523,  v528);
    v237 = v227;
    v238 = v228;
    OUTLINED_FUNCTION_27_40();
    v239 = OUTLINED_FUNCTION_6_0();
    v240 = OUTLINED_FUNCTION_29_4(v239);
    v241 = v3;
    v242 = *(void *)(v3 + 56);
    if (v240)
    {
      v524 = v237;
      v243 = OUTLINED_FUNCTION_7_0(42LL);
      v487 = OUTLINED_FUNCTION_7_0(96LL);
      v532 = v487;
      *(_DWORD *)v243 = 136315906;
      LODWORD(v442) = (_DWORD)v228;
      v533 = 0LL;
      v534 = 0xE000000000000000LL;
      OUTLINED_FUNCTION_76_4();
      OUTLINED_FUNCTION_124();
      v244 = OUTLINED_FUNCTION_39_33();
      OUTLINED_FUNCTION_53_32(v244, v245);
      swift_bridgeObjectRelease();
      v246 = swift_bridgeObjectRelease();
      *(void *)(v241 + 16) = OUTLINED_FUNCTION_8_88( v246,  v247,  v248,  v249,  v250,  v251,  v252,  v253,  v393,  v243 + 4,  v425,  (uint64_t)v442,  v459,  v475);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v531, v241 + 24, logi);
      OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_31_1(v242);
      *(_WORD *)(v243 + 12) = 2048;
      OUTLINED_FUNCTION_14_76(v243 + 14, v243 + 22, 0x4000000000000000LL);
      *(_WORD *)(v243 + 22) = 2080;
      swift_bridgeObjectRetain();
      v254 = v496;
      *(void *)(v241 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v496, v529, &v532);
      OUTLINED_FUNCTION_4_106(v531, v255, v256, v243 + 32);
      OUTLINED_FUNCTION_32_10(v529);

      *(_WORD *)(v243 + 32) = 2080;
      OUTLINED_FUNCTION_76_4();
      v257 = v475;
      *(void *)(v241 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v475, v108, &v532);
      OUTLINED_FUNCTION_4_106(v531, v258, v259, v243 + 42);
      OUTLINED_FUNCTION_32_10(v108);

      v260 = v426;
      OUTLINED_FUNCTION_35_36( &dword_0,  v426,  v261,  "%s maxUsage/secondMaxUsage <= %f, return needsDisambiguation between %s and %s",  v262,  v263,  v264,  v265,  v394,  (uint64_t)logi,  (uint64_t)v426,  v443);
      OUTLINED_FUNCTION_74_14();
      OUTLINED_FUNCTION_0_2(v487);
      v266 = v243;
      v237 = v524;
      OUTLINED_FUNCTION_0_2(v266);

      uint64_t v3 = v241;
    }

    else
    {
      OUTLINED_FUNCTION_31_1(v242);
      OUTLINED_FUNCTION_7_4(v529);

      OUTLINED_FUNCTION_7_4(v108);
      uint64_t v3 = v241;
      v254 = v496;
      v257 = v475;
    }

    v179 = *(uint64_t **)(v3 + 24);
    v368 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v369 = OUTLINED_FUNCTION_7_54(v368);
    *(_OWORD *)(v369 + 16) = xmmword_31D880;
    *(void *)(v369 + 32) = v254;
    *(void *)(v369 + 40) = v529;
    *(void *)(v369 + 48) = v257;
    *(void *)(v369 + 56) = v108;
    OUTLINED_FUNCTION_76_4();
    OUTLINED_FUNCTION_28_57( v254,  v370,  v371,  v372,  v373,  v374,  v375,  v376,  v393,  (uint64_t)logb,  v425,  (uint64_t)v442,  v459,  v475,  v487,  v496,  v503);

    outlined consume of (key: String, value: NSNumber)?(v257, v108, v466);
    OUTLINED_FUNCTION_87_0();

    *v179 = v369;
    v180 = (unsigned int *)&enum case for AppMatchResolution.needsDisambiguation(_:);
  }

      Swift::Int v22 = v5 + 1;
      if (__OFADD__(v5, 1LL)) {
        break;
      }
      ++v5;
      if (v22 == v4) {
        goto LABEL_46;
      }
    }

    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    if (a1 < 0) {
      uint64_t v23 = a1;
    }
    else {
      uint64_t v23 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease();
  }

uint64_t static DictionaryEncoderDecoder.decode<A>(type:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v24[0] = 0LL;
  id v9 = [v7 dataWithJSONObject:isa options:0 error:v24];

  id v10 = v24[0];
  if (v9)
  {
    uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
    unint64_t v13 = v12;

    if (one-time initialization token for decoder != -1) {
      swift_once(&one-time initialization token for decoder, one-time initialization function for decoder);
    }
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(a1, v11, v13, a3, a4);
    return outlined consume of Data._Representation(v11, v13);
  }

  else
  {
    char v15 = v10;
    _convertNSErrorToError(_:)(v10);

    return swift_willThrow(v16, v17, v18, v19, v20, v21, v22, v23, v24[0], v24[1], v24[2], v24[3], v24[4], v24[5]);
  }

uint64_t specialized DictionaryCodable.toDictionary()(uint64_t a1, uint64_t a2, double a3)
{
  v27[0] = a1;
  v27[1] = a2;
  *(double *)&v27[2] = a3;
  if (one-time initialization token for encoder != -1) {
    swift_once(&one-time initialization token for encoder, one-time initialization function for encoder);
  }
  unint64_t v3 = lazy protocol witness table accessor for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory();
  uint64_t v5 = dispatch thunk of JSONEncoder.encode<A>(_:)(v27, &type metadata for AnnounceVoicemailHintHistory, v3);
  unint64_t v7 = v6;
  int64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v28[0] = 0LL;
  id v10 = [v8 JSONObjectWithData:isa options:0 error:v28];

  id v11 = v28[0];
  if (v10)
  {
    id v12 = v28[0];
    _bridgeAnyObjectToAny(_:)(v28, v10);
    swift_unknownObjectRelease(v10);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    else {
      uint64_t v13 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    }
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v13);
    uint64_t v4 = v24;
    outlined consume of Data._Representation(v5, v7);
    swift_bridgeObjectRelease();
  }

  else
  {
    id v14 = v28[0];
    uint64_t v15 = _convertNSErrorToError(_:)(v11);

    swift_willThrow(v16, v17, v18, v19, v20, v21, v22, v23);
    outlined consume of Data._Representation(v5, v7);
    swift_errorRelease(v15);
    return Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }

  return v4;
}

uint64_t specialized DictionaryCodable.toDictionary()(uint64_t a1)
{
  uint64_t v25 = a1;
  if (one-time initialization token for encoder != -1) {
    swift_once(&one-time initialization token for encoder, one-time initialization function for encoder);
  }
  unint64_t v1 = lazy protocol witness table accessor for type OneTimeHintHistory and conformance OneTimeHintHistory();
  uint64_t v3 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v25, &type metadata for OneTimeHintHistory, v1);
  unint64_t v5 = v4;
  unint64_t v6 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v26[0] = 0LL;
  id v8 = [v6 JSONObjectWithData:isa options:0 error:v26];

  id v9 = v26[0];
  if (v8)
  {
    id v10 = v26[0];
    _bridgeAnyObjectToAny(_:)(v26, v8);
    swift_unknownObjectRelease(v8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    else {
      uint64_t v11 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    }
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v11);
    uint64_t v2 = v22;
    outlined consume of Data._Representation(v3, v5);
    swift_bridgeObjectRelease();
  }

  else
  {
    id v12 = v26[0];
    uint64_t v13 = _convertNSErrorToError(_:)(v9);

    swift_willThrow(v14, v15, v16, v17, v18, v19, v20, v21);
    outlined consume of Data._Representation(v3, v5);
    swift_errorRelease(v13);
    return Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }

  return v2;
}

uint64_t specialized DictionaryCodable.toDictionary()(char a1, uint64_t a2, double a3)
{
  v27[0] = a1 & 1;
  double v28 = a3;
  uint64_t v29 = a2;
  if (one-time initialization token for encoder != -1) {
    swift_once(&one-time initialization token for encoder, one-time initialization function for encoder);
  }
  unint64_t v3 = lazy protocol witness table accessor for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory();
  uint64_t v5 = dispatch thunk of JSONEncoder.encode<A>(_:)(v27, &type metadata for ForcedAppDisambiguationHistory, v3);
  unint64_t v7 = v6;
  id v8 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v30[0] = 0LL;
  id v10 = [v8 JSONObjectWithData:isa options:0 error:v30];

  id v11 = v30[0];
  if (v10)
  {
    id v12 = v30[0];
    _bridgeAnyObjectToAny(_:)(v30, v10);
    swift_unknownObjectRelease(v10);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    else {
      uint64_t v13 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    }
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v13);
    uint64_t v4 = v24;
    outlined consume of Data._Representation(v5, v7);
    swift_bridgeObjectRelease();
  }

  else
  {
    id v14 = v30[0];
    uint64_t v15 = _convertNSErrorToError(_:)(v11);

    swift_willThrow(v16, v17, v18, v19, v20, v21, v22, v23);
    outlined consume of Data._Representation(v5, v7);
    swift_errorRelease(v15);
    return Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }

  return v4;
}

uint64_t specialized DictionaryCodable.toDictionary()(uint64_t a1, double a2)
{
  *(double *)uint64_t v26 = a2;
  v26[1] = a1;
  if (one-time initialization token for encoder != -1) {
    swift_once(&one-time initialization token for encoder, one-time initialization function for encoder);
  }
  unint64_t v2 = lazy protocol witness table accessor for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory();
  uint64_t v4 = dispatch thunk of JSONEncoder.encode<A>(_:)( v26,  &type metadata for AppNameSpecifiedByUserSignalCollectionHistory,  v2);
  unint64_t v6 = v5;
  unint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v27[0] = 0LL;
  id v9 = [v7 JSONObjectWithData:isa options:0 error:v27];

  id v10 = v27[0];
  if (v9)
  {
    id v11 = v27[0];
    _bridgeAnyObjectToAny(_:)(v27, v9);
    swift_unknownObjectRelease(v9);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    else {
      uint64_t v12 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    }
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v12);
    uint64_t v3 = v23;
    outlined consume of Data._Representation(v4, v6);
    swift_bridgeObjectRelease();
  }

  else
  {
    id v13 = v27[0];
    uint64_t v14 = _convertNSErrorToError(_:)(v10);

    swift_willThrow(v15, v16, v17, v18, v19, v20, v21, v22);
    outlined consume of Data._Representation(v4, v6);
    swift_errorRelease(v14);
    return Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }

  return v3;
}

id DictionaryCodable.toDictionary()(uint64_t a1, uint64_t a2)
{
  return static DictionaryEncoderDecoder.encode<A>(_:)(v2, a1, *(void *)(a2 + 16));
}

id specialized static DictionaryCodable.fromDictionary(dictionary:)()
{
  unint64_t v1 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v20 = 0LL;
  id v3 = [v1 dataWithJSONObject:isa options:0 error:&v20];

  id v4 = v20;
  if (v3)
  {
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    unint64_t v7 = v6;

    if (one-time initialization token for decoder != -1) {
      swift_once(&one-time initialization token for decoder, one-time initialization function for decoder);
    }
    unint64_t v8 = lazy protocol witness table accessor for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v0, v5, v7, &type metadata for AnnounceVoicemailHintHistory, v8);
    outlined consume of Data._Representation(v5, v7);
    return v20;
  }

  else
  {
    id v9 = v4;
    uint64_t v10 = _convertNSErrorToError(_:)(v4);

    swift_willThrow(v11, v12, v13, v14, v15, v16, v17, v18);
    swift_errorRelease(v10);
    return 0LL;
  }

{
  uint64_t v0;
  void *v1;
  Class isa;
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v20;
  unint64_t v1 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v20 = 0LL;
  id v3 = [v1 dataWithJSONObject:isa options:0 error:&v20];

  id v4 = v20;
  if (v3)
  {
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    unint64_t v7 = v6;

    if (one-time initialization token for decoder != -1) {
      swift_once(&one-time initialization token for decoder, one-time initialization function for decoder);
    }
    unint64_t v8 = lazy protocol witness table accessor for type OneTimeHintHistory and conformance OneTimeHintHistory();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v0, v5, v7, &type metadata for OneTimeHintHistory, v8);
    outlined consume of Data._Representation(v5, v7);
    return v20;
  }

  else
  {
    id v9 = v4;
    uint64_t v10 = _convertNSErrorToError(_:)(v4);

    swift_willThrow(v11, v12, v13, v14, v15, v16, v17, v18);
    swift_errorRelease(v10);
    return 0LL;
  }

{
  uint64_t v0;
  void *v1;
  Class isa;
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v20;
  unint64_t v1 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v20 = 0LL;
  id v3 = [v1 dataWithJSONObject:isa options:0 error:&v20];

  id v4 = v20;
  if (v3)
  {
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    unint64_t v7 = v6;

    if (one-time initialization token for decoder != -1) {
      swift_once(&one-time initialization token for decoder, one-time initialization function for decoder);
    }
    unint64_t v8 = lazy protocol witness table accessor for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)( v0,  v5,  v7,  &type metadata for AppNameSpecifiedByUserSignalCollectionHistory,  v8);
    outlined consume of Data._Representation(v5, v7);
    return v20;
  }

  else
  {
    id v9 = v4;
    uint64_t v10 = _convertNSErrorToError(_:)(v4);

    swift_willThrow(v11, v12, v13, v14, v15, v16, v17, v18);
    swift_errorRelease(v10);
    return 0LL;
  }

uint64_t specialized static DictionaryCodable.fromDictionary(dictionary:)()
{
  unint64_t v1 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v20 = 0LL;
  id v3 = [v1 dataWithJSONObject:isa options:0 error:&v20];

  id v4 = v20;
  if (v3)
  {
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    unint64_t v7 = v6;

    if (one-time initialization token for decoder != -1) {
      swift_once(&one-time initialization token for decoder, one-time initialization function for decoder);
    }
    unint64_t v8 = lazy protocol witness table accessor for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v0, v5, v7, &type metadata for ForcedAppDisambiguationHistory, v8);
    outlined consume of Data._Representation(v5, v7);
    return v20;
  }

  else
  {
    id v9 = v4;
    uint64_t v10 = _convertNSErrorToError(_:)(v4);

    swift_willThrow(v11, v12, v13, v14, v15, v16, v17, v18);
    swift_errorRelease(v10);
    return 0LL;
  }

uint64_t static DictionaryCodable.fromDictionary(dictionary:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  static DictionaryEncoderDecoder.decode<A>(type:_:)(v5, a1, a2, *(void *)(a3 + 8));
  return __swift_storeEnumTagSinglePayload(a4, 0LL, 1LL, a2);
}

uint64_t protocol witness for DictionaryCodable.toDictionary() in conformance AnnounceVoicemailHintHistory()
{
  return specialized DictionaryCodable.toDictionary()(*(void *)v0, *(void *)(v0 + 8), *(double *)(v0 + 16));
}

void protocol witness for static DictionaryCodable.fromDictionary(dictionary:) in conformance AnnounceVoicemailHintHistory( uint64_t a1@<X8>)
{
  *(void *)a1 = specialized static DictionaryCodable.fromDictionary(dictionary:)();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4 & 1;
  OUTLINED_FUNCTION_2();
}

uint64_t protocol witness for DictionaryCodable.toDictionary() in conformance OneTimeHintHistory()
{
  return specialized DictionaryCodable.toDictionary()(*v0);
}

void protocol witness for static DictionaryCodable.fromDictionary(dictionary:) in conformance OneTimeHintHistory( uint64_t a1@<X8>)
{
  *(void *)a1 = specialized static DictionaryCodable.fromDictionary(dictionary:)();
  *(_BYTE *)(a1 + 8) = v2 & 1;
  OUTLINED_FUNCTION_2();
}

uint64_t protocol witness for DictionaryCodable.toDictionary() in conformance ForcedAppDisambiguationHistory()
{
  return specialized DictionaryCodable.toDictionary()(*(_BYTE *)v0, *(void *)(v0 + 16), *(double *)(v0 + 8));
}

void protocol witness for static DictionaryCodable.fromDictionary(dictionary:) in conformance ForcedAppDisambiguationHistory( uint64_t *a1@<X8>)
{
  *a1 = specialized static DictionaryCodable.fromDictionary(dictionary:)();
  a1[1] = v2;
  a1[2] = v3;
  OUTLINED_FUNCTION_2();
}

uint64_t protocol witness for DictionaryCodable.toDictionary() in conformance AppNameSpecifiedByUserSignalCollectionHistory()
{
  return specialized DictionaryCodable.toDictionary()(*(void *)(v0 + 8), *(double *)v0);
}

void protocol witness for static DictionaryCodable.fromDictionary(dictionary:) in conformance AppNameSpecifiedByUserSignalCollectionHistory( id *a1@<X8>)
{
  *a1 = specialized static DictionaryCodable.fromDictionary(dictionary:)();
  a1[1] = v2;
  OUTLINED_FUNCTION_2();
}

ValueMetadata *type metadata accessor for DictionaryEncoderDecoder()
{
  return &type metadata for DictionaryEncoderDecoder;
}

unint64_t lazy protocol witness table accessor for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory()
{
  unint64_t result = lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory;
  if (!lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AppNameSpecifiedByUserSignalCollectionHistory,  &type metadata for AppNameSpecifiedByUserSignalCollectionHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory;
  if (!lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AppNameSpecifiedByUserSignalCollectionHistory,  &type metadata for AppNameSpecifiedByUserSignalCollectionHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory;
  if (!lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AppNameSpecifiedByUserSignalCollectionHistory,  &type metadata for AppNameSpecifiedByUserSignalCollectionHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory;
  if (!lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AppNameSpecifiedByUserSignalCollectionHistory,  &type metadata for AppNameSpecifiedByUserSignalCollectionHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory;
  if (!lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AppNameSpecifiedByUserSignalCollectionHistory,  &type metadata for AppNameSpecifiedByUserSignalCollectionHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory;
  if (!lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AppNameSpecifiedByUserSignalCollectionHistory,  &type metadata for AppNameSpecifiedByUserSignalCollectionHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory()
{
  unint64_t result = lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory;
  if (!lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ForcedAppDisambiguationHistory,  &type metadata for ForcedAppDisambiguationHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory;
  if (!lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ForcedAppDisambiguationHistory,  &type metadata for ForcedAppDisambiguationHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory;
  if (!lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ForcedAppDisambiguationHistory,  &type metadata for ForcedAppDisambiguationHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory;
  if (!lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ForcedAppDisambiguationHistory,  &type metadata for ForcedAppDisambiguationHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory;
  if (!lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ForcedAppDisambiguationHistory,  &type metadata for ForcedAppDisambiguationHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory;
  if (!lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ForcedAppDisambiguationHistory,  &type metadata for ForcedAppDisambiguationHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type OneTimeHintHistory and conformance OneTimeHintHistory()
{
  unint64_t result = lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory;
  if (!lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for OneTimeHintHistory,  &type metadata for OneTimeHintHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory;
  if (!lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for OneTimeHintHistory,  &type metadata for OneTimeHintHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory;
  if (!lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for OneTimeHintHistory,  &type metadata for OneTimeHintHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory;
  if (!lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for OneTimeHintHistory,  &type metadata for OneTimeHintHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory;
  if (!lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for OneTimeHintHistory,  &type metadata for OneTimeHintHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AnnounceVoicemailHintHistory,  &type metadata for AnnounceVoicemailHintHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AnnounceVoicemailHintHistory,  &type metadata for AnnounceVoicemailHintHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AnnounceVoicemailHintHistory,  &type metadata for AnnounceVoicemailHintHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AnnounceVoicemailHintHistory,  &type metadata for AnnounceVoicemailHintHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AnnounceVoicemailHintHistory,  &type metadata for AnnounceVoicemailHintHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AnnounceVoicemailHintHistory,  &type metadata for AnnounceVoicemailHintHistory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_2_14()
{
  return outlined consume of Data._Representation(v1, v0);
}

  ;
}

  ;
}

void static PhoneCallNLContextProvider.makeNeedsValueContextFor(parameter:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v4 = OUTLINED_FUNCTION_8_2(v3, 48LL);
  *(_OWORD *)(v4 + 16) = xmmword_31D870;
  uint64_t v24 = OUTLINED_FUNCTION_33_7();
  uint64_t v25 = v5;
  v23[0] = 32LL;
  v23[1] = 0xE100000000000000LL;
  v22[0] = 95LL;
  v22[1] = 0xE100000000000000LL;
  lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_32_7((uint64_t)v23, (uint64_t)v22, v6, v7, v8, v9, (uint64_t)&type metadata for String);
  OUTLINED_FUNCTION_70_2();
  OUTLINED_FUNCTION_31_3();
  uint64_t v24 = v10;
  uint64_t v25 = v11;
  OUTLINED_FUNCTION_3_20();
  Swift::String v26 = String.uppercased()();
  OUTLINED_FUNCTION_99_0(v26);
  OUTLINED_FUNCTION_129();
  OUTLINED_FUNCTION_70_2();
  uint64_t v12 = v25;
  *(void *)(v4 + 32) = v24;
  *(void *)(v4 + 40) = v12;
  OUTLINED_FUNCTION_82_2();
  if (a2)
  {
    OUTLINED_FUNCTION_124();
    int value = OUTLINED_FUNCTION_120_1().value;
    if (value == 10)
    {
      uint64_t v19 = OUTLINED_FUNCTION_8_2(v3, 48LL);
      *(_OWORD *)(v19 + 16) = xmmword_31D870;
      PhoneCallNLConstants.canonicalName.getter(7u);
      *(void *)(v19 + 32) = v20;
      *(void *)(v19 + 40) = v21;
      OUTLINED_FUNCTION_52_5();
      OUTLINED_FUNCTION_104_1();
      goto LABEL_7;
    }

    if (value == 19)
    {
LABEL_5:
      uint64_t v14 = OUTLINED_FUNCTION_8_2(v3, 64LL);
      *(_OWORD *)(v14 + 16) = xmmword_31D880;
      PhoneCallNLConstants.canonicalName.getter(3u);
      *(void *)(v14 + 32) = v15;
      *(void *)(v14 + 40) = v16;
      PhoneCallNLConstants.canonicalName.getter(5u);
      *(void *)(v14 + 48) = v17;
      *(void *)(v14 + 56) = v18;
      OUTLINED_FUNCTION_52_5();
      OUTLINED_FUNCTION_104_1();
      static PhoneCallNLContextProvider.makeSDAForNeedsValueForContact()();
      OUTLINED_FUNCTION_83_1();
    }
  }

void static PhoneCallNLContextProvider.makeGenericConfirmationContextFor(parameter:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    v3._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_119();
    if ((PhoneCallSlotNames.init(rawValue:)(v3).value & 0xFE) == 4)
    {
      static PhoneCallNLContextProvider.makeSDAForConfirmation()();
      OUTLINED_FUNCTION_83_1();
    }
  }

  OUTLINED_FUNCTION_6();
}

void PhoneCallNLContextProvider.__allocating_init(deviceState:assistantProperties:)(void *a1, void *a2)
{
}

void PhoneCallNLContextProvider.assistantProperties.getter(uint64_t a1@<X8>)
{
}

void PhoneCallNLContextProvider.deviceState.getter(uint64_t a1@<X8>)
{
}

void PhoneCallNLContextProvider.init(deviceState:assistantProperties:)(void *a1, void *a2)
{
}

void PhoneCallNLContextProvider.makeContextForHandleIntent(intent:handleIntentResponse:_:)( uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v8 = v7 - v6;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v9 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v9, (uint64_t)static Logger.siriPhone);
  os_log_type_t v10 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_63(v10))
  {
    uint64_t v11 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
    *(_WORD *)uint64_t v11 = 0;
    OUTLINED_FUNCTION_5(&dword_0, v3, v4, "#PhoneCallNLContextProvider makeContextForHandleIntent", v11);
    OUTLINED_FUNCTION_0_2((uint64_t)v11);
  }

  static PhoneCallNLContextProvider.makeContextForHandleIntent(intent:handleIntentResponse:)();
  a3(v8);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v8,  &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_58();
}

void static PhoneCallNLContextProvider.makeContextForHandleIntent(intent:handleIntentResponse:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v70 = v5;
  uint64_t v6 = OUTLINED_FUNCTION_65_1();
  uint64_t v7 = type metadata accessor for RREntity(v6);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  uint64_t v80 = v9;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  uint64_t v76 = (char *)&v63 - v10;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  uint64_t v12 = (char *)&v63 - v11;
  uint64_t v13 = OUTLINED_FUNCTION_42_4();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v17 = v16 - v15;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v18 = OUTLINED_FUNCTION_15_1();
  uint64_t v74 = __swift_project_value_buffer(v18, (uint64_t)static Logger.siriPhone);
  uint64_t v19 = (os_log_s *)v74;
  Logger.logObject.getter(v74);
  os_log_type_t v20 = OUTLINED_FUNCTION_6_0();
  BOOL v21 = OUTLINED_FUNCTION_7(v20);
  uint64_t v71 = v12;
  if (v21)
  {
    uint64_t v22 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
    *(_WORD *)uint64_t v22 = 0;
    OUTLINED_FUNCTION_5(&dword_0, v19, v0, "#PhoneCallNLContextProvider makeContextForHandleIntent", v22);
    OUTLINED_FUNCTION_0_2((uint64_t)v22);
  }

  NLContextUpdate.init()();
  uint64_t ObjectType = swift_getObjectType(v2);
  uint64_t v24 = dynamic_cast_existential_1_conditional((uint64_t)v2, ObjectType, (uint64_t)&protocol descriptor for CallingIntent);
  if (!v24) {
    goto LABEL_34;
  }
  uint64_t v26 = v25;
  uint64_t v75 = v8;
  swift_getObjectType(v24);
  char v27 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v26 + 8) + 8LL) + 8LL);
  id v67 = v2;
  uint64_t v28 = OUTLINED_FUNCTION_119();
  uint64_t v29 = v27(v28);
  if (!v29)
  {
    uint64_t v61 = _swiftEmptyArrayStorage;
LABEL_31:
    if (v61[2])
    {
      NLContextUpdate.rrEntities.setter();

      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v4, v17, v13);
      uint64_t v62 = 0LL;
LABEL_35:
      __swift_storeEnumTagSinglePayload(v4, v62, 1LL, v13);
      OUTLINED_FUNCTION_7_5();
      return;
    }

    swift_bridgeObjectRelease();

LABEL_34:
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v13);
    uint64_t v62 = 1LL;
    goto LABEL_35;
  }

  uint64_t v31 = v29;
  uint64_t v66 = v4;
  if ((unint64_t)v29 >> 62)
  {
    if (v29 >= 0) {
      v29 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter(v29);
  }

  else
  {
    uint64_t v32 = *(void *)((char *)&dword_10 + (v29 & 0xFFFFFFFFFFFFFF8LL));
  }

  uint64_t v34 = v75;
  uint64_t v33 = (uint64_t)v76;
  uint64_t v35 = (uint64_t)v71;
  uint64_t v63 = v17;
  uint64_t v64 = v14;
  uint64_t v65 = v13;
  if (!v32)
  {
    unint64_t v81 = _swiftEmptyArrayStorage;
LABEL_30:
    OUTLINED_FUNCTION_39();
    uint64_t v13 = v65;
    uint64_t v4 = v66;
    uint64_t v17 = v63;
    uint64_t v14 = v64;
    uint64_t v61 = v81;
    goto LABEL_31;
  }

  uint64_t v36 = v32;
  if (v32 >= 1)
  {
    uint64_t v37 = 0LL;
    unint64_t v81 = _swiftEmptyArrayStorage;
    unint64_t v79 = v31 & 0xC000000000000001LL;
    *(void *)&__int128 v30 = 136315138LL;
    __int128 v69 = v30;
    BOOL v68 = (char *)&type metadata for Any + 8;
    uint64_t v38 = v70;
    uint64_t v72 = v32;
    uint64_t v73 = v31;
    do
    {
      if (v79) {
        id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, v31);
      }
      else {
        id v39 = *(id *)(v31 + 8 * v37 + 32);
      }
      uint64_t v40 = v39;
      INPerson.toRREntity()();
      if (__swift_getEnumTagSinglePayload(v38, 1LL, v7) == 1)
      {

        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v38,  &demangling cache variable for type metadata for RREntity?);
      }

      else
      {
        uint64_t v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32);
        v78(v35, v38, v7);
        uint64_t v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 16);
        uint64_t v41 = v77(v33, v35, v7);
        uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
        os_log_type_t v44 = static os_log_type_t.debug.getter(v42, v43);
        if (os_log_type_enabled(v42, v44))
        {
          uint64_t v45 = v7;
          uint64_t v46 = v33;
          uint64_t v47 = OUTLINED_FUNCTION_7_0(12LL);
          uint64_t v48 = OUTLINED_FUNCTION_7_0(32LL);
          uint64_t v82 = v48;
          *(_DWORD *)uint64_t v47 = v69;
          lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type RREntity and conformance RREntity,  (uint64_t (*)(uint64_t))&type metadata accessor for RREntity,  (uint64_t)&protocol conformance descriptor for RREntity);
          uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter(v45, v49);
          *(void *)(v47 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v82);
          OUTLINED_FUNCTION_62();
          uint64_t v52 = v46;
          uint64_t v7 = v45;
          uint64_t v35 = (uint64_t)v71;
          OUTLINED_FUNCTION_130(v52);
          OUTLINED_FUNCTION_57_0( &dword_0,  v42,  v44,  "#PhoneCallNLv4ContextProvider makeContextForHandleIntent appending RREntity %s",  (uint8_t *)v47);
          swift_arrayDestroy(v48, 1LL);
          uint64_t v53 = v48;
          uint64_t v38 = v70;
          OUTLINED_FUNCTION_0_2(v53);
          OUTLINED_FUNCTION_0_2(v47);
        }

        else
        {
          OUTLINED_FUNCTION_130(v33);
        }

        v77(v80, v35, v7);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v81);
        uint64_t v36 = v72;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          uint64_t v34 = v75;
          os_log_type_t v55 = v81;
        }

        else
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          os_log_type_t v55 = v59;
          uint64_t v34 = v75;
        }

        unint64_t v57 = v55[2];
        unint64_t v56 = v55[3];
        if (v57 >= v56 >> 1)
        {
          OUTLINED_FUNCTION_112(v56);
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          os_log_type_t v55 = v60;
        }

        v55[2] = v57 + 1;
        unint64_t v58 = (*(unsigned __int8 *)(v34 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
        unint64_t v81 = v55;
        v78((uint64_t)v55 + v58 + *(void *)(v34 + 72) * v57, v80, v7);

        OUTLINED_FUNCTION_130(v35);
        uint64_t v33 = (uint64_t)v76;
        uint64_t v31 = v73;
      }

      ++v37;
    }

    while (v36 != v37);
    goto LABEL_30;
  }

  __break(1u);
}

void PhoneCallNLContextProvider.makeContextForConfirmIntent(intent:confirmIntentResponse:_:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v3 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v3, (uint64_t)static Logger.siriPhone);
  os_log_type_t v4 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_63(v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
    *(_WORD *)uint64_t v5 = 0;
    OUTLINED_FUNCTION_5(&dword_0, v0, v2, "#PhoneCallNLContextProvider makeContextForConfirmIntent", v5);
    OUTLINED_FUNCTION_0_2((uint64_t)v5);
  }

  static PhoneCallNLContextProvider.makeContextForConfirmIntent()();
  uint64_t v6 = OUTLINED_FUNCTION_42_4();
  OUTLINED_FUNCTION_62_2(v6);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v1,  &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_58();
}

void static PhoneCallNLContextProvider.makeContextForConfirmIntent()()
{
}

{
  uint64_t v0;
  static PhoneCallNLContextProvider.makeGenericConfirmationNLv3Context()();
  OUTLINED_FUNCTION_119();
  static PhoneCallNLContextProvider.makeSDAForConfirmation()();
  NLContextUpdate.nluSystemDialogActs.setter(v0);
  OUTLINED_FUNCTION_16();
}

void PhoneCallNLContextProvider.makeNeedsConfirmationContextFor(intent:parameter:resolutionResult:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  char v27 = (char *)&a9 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v28 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v28, (uint64_t)static Logger.siriPhone);
  os_log_type_t v29 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_35_3(v29))
  {
    __int128 v30 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
    OUTLINED_FUNCTION_133(v30);
    OUTLINED_FUNCTION_24_5(&dword_0, v31, v32, "#PhoneCallNLContextProvider makeNeedsConfirmationContextFor");
    OUTLINED_FUNCTION_0_2(v21);
  }

  static PhoneCallNLContextProvider.needsConfirmationContext(parameter:resolutionResult:)();
  v25(v27);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v27,  &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_7_5();
}

void static PhoneCallNLContextProvider.needsConfirmationContext(parameter:resolutionResult:)()
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = OUTLINED_FUNCTION_42_4();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_7_6();
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v11 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v11, (uint64_t)static Logger.siriPhone);
  os_log_type_t v12 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_35_3(v12))
  {
    uint64_t v13 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
    OUTLINED_FUNCTION_133(v13);
    OUTLINED_FUNCTION_24_5(&dword_0, v14, v15, "#PhoneCallNLContextProvider needsConfirmationContext");
    OUTLINED_FUNCTION_0_2(v2);
  }

  static PhoneCallNLContextProvider.makeGenericConfirmationContextFor(parameter:)(v6, v4);
  OUTLINED_FUNCTION_124();
  if ((OUTLINED_FUNCTION_120_1().value & 0xFE) == 4)
  {
    uint64_t v43 = v10;
    uint64_t v16 = NLContextUpdate.weightedPromptResponseTargets.getter();
    if (v16) {
      uint64_t v17 = (void *)v16;
    }
    else {
      uint64_t v17 = _swiftEmptyArrayStorage;
    }
    PhoneCallNLConstants.canonicalName.getter(3u);
    unint64_t v19 = v18;
    uint64_t v21 = v20;
    PhoneCallNLConstants.canonicalName.getter(0xDu);
    uint64_t v26 = v17[2];
    uint64_t v27 = v26 + 2;
    if (__OFADD__(v26, 2LL))
    {
      __break(1u);
    }

    else
    {
      uint64_t v6 = v23;
      unint64_t v40 = v19;
      uint64_t v41 = v22;
      uint64_t v28 = swift_bridgeObjectRetain();
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v28);
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || (__int128 v30 = v17, v27 > v17[3] >> 1))
      {
        if (v26 <= v27) {
          uint64_t v31 = v26 + 2;
        }
        else {
          uint64_t v31 = v26;
        }
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v31,  1LL,  (uint64_t)v17,  &demangling cache variable for type metadata for _ContiguousArrayStorage<String>,  (void (*)(void, uint64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:),  (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
        __int128 v30 = v32;
      }

      uint64_t v26 = v30[2];
      unint64_t v19 = v30[3];
      uint64_t v27 = v26 + 1;
      OUTLINED_FUNCTION_124();
      uint64_t v42 = v8;
      if (v26 < v19 >> 1) {
        goto LABEL_17;
      }
    }

    OUTLINED_FUNCTION_113_0( v19 > 1,  v27,  v24,  v25,  &demangling cache variable for type metadata for _ContiguousArrayStorage<String>,  (void (*)(void, uint64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:),  (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
    __int128 v30 = v38;
LABEL_17:
    v30[2] = v27;
    uint64_t v33 = &v30[2 * v26];
    v33[4] = v40;
    v33[5] = v21;
    unint64_t v34 = v30[3];
    swift_bridgeObjectRetain();
    if (v27 >= v34 >> 1)
    {
      OUTLINED_FUNCTION_113_0( v34 > 1,  v26 + 2,  v35,  v36,  &demangling cache variable for type metadata for _ContiguousArrayStorage<String>,  (void (*)(void, uint64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:),  (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
      __int128 v30 = v39;
    }

    uint64_t v8 = v42;
    v30[2] = v26 + 2;
    uint64_t v37 = &v30[2 * v27];
    v37[4] = v41;
    v37[5] = v6;
    OUTLINED_FUNCTION_62();
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_13_1();
    NLContextUpdate.weightedPromptResponseTargets.setter(v30);
    uint64_t v10 = v43;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v8, v1, v9);
  __swift_storeEnumTagSinglePayload(v8, 0LL, 1LL, v9);
  OUTLINED_FUNCTION_7_5();
}

void PhoneCallNLContextProvider.makeNeedsValueContextFor(intent:parameter:resolutionResult:_:)()
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_7_6();
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v7 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v7, (uint64_t)static Logger.siriPhone);
  os_log_type_t v8 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_35_3(v8))
  {
    uint64_t v9 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
    OUTLINED_FUNCTION_133(v9);
    OUTLINED_FUNCTION_24_5(&dword_0, v10, v11, "#PhoneCallNLContextProvider makeNeedsValueContextFor");
    OUTLINED_FUNCTION_0_2(v2);
  }

  static PhoneCallNLContextProvider.makeNeedsValueContextFor(parameter:)(v6, v4);
  uint64_t v12 = OUTLINED_FUNCTION_42_4();
  OUTLINED_FUNCTION_62_2(v12);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v1,  &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_7_5();
}

uint64_t PhoneCallNLContextProvider.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:_:)()
{
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  os_log_type_t v8 = v7;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v9 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v9, (uint64_t)static Logger.siriPhone);
  os_log_type_t v10 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_35_3(v10))
  {
    uint64_t v11 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
    OUTLINED_FUNCTION_133(v11);
    OUTLINED_FUNCTION_24_5(&dword_0, v12, v13, "#PhoneCallNLContextProvider makeNeedsDisambiguationContextFor");
    OUTLINED_FUNCTION_0_2(v1);
  }

  id v14 = [v8 disambiguationItems];
  uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, (char *)&type metadata for Any + 8);

  uint64_t v16 = *(void *)(v15 + 16);
  OUTLINED_FUNCTION_87_0();
  uint64_t v17 = &selRef_alternatives;
  if (v16) {
    uint64_t v17 = &selRef_disambiguationItems;
  }
  id v18 = [v8 *v17];
  static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, (char *)&type metadata for Any + 8);

  uint64_t v19 = OUTLINED_FUNCTION_8_2((uint64_t)&unk_3F7AB8, 32LL);
  *(void *)(v19 + 16) = v6;
  *(void *)(v19 + 24) = v4;
  uint64_t v20 = *(void (**)(uint64_t))(class metadata base offset for PhoneCallNLContextProvider + *v2 + 40);
  OUTLINED_FUNCTION_95_1();
  uint64_t v21 = OUTLINED_FUNCTION_119();
  v20(v21);
  OUTLINED_FUNCTION_23_5();
  return swift_release(v19);
}

void closure #1 in PhoneCallNLContextProvider.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:_:)( uint64_t a1, void (*a2)(char *))
{
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(v5, a1, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0LL, 1LL, v6);
  a2(v5);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v5,  &demangling cache variable for type metadata for NLContextUpdate?);
}

void PhoneCallNLContextProvider.makeEnableAppForSiriContextFor(app:_:)( uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = OUTLINED_FUNCTION_42_4();
  OUTLINED_FUNCTION_88(v2, 0LL, v5, v4);
  a2(v2);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v2,  &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16();
}

void static PhoneCallNLContextProvider.makeTCCConfirmationContext(app:)()
{
  id v0 = [objc_allocWithZone(SAAceConfirmationContext) init];
  [v0 setReason:SAAceConfirmationReasonAUTHORIZE_SIRIKIT_APPValue];
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v2 = OUTLINED_FUNCTION_8_2(v1, 40LL);
  *(_OWORD *)(v2 + 16) = xmmword_31FE60;
  *(void *)(v2 + 32) = v0;
  uint64_t v15 = v2;
  specialized Array._endMutation()(v2, v3, v4, v5);
  id v14 = v0;
  NLContextUpdate.conversationStateAttachments.setter(v15);
  uint64_t v6 = type metadata accessor for MachineUtteranceBuilder(0LL);
  OUTLINED_FUNCTION_15_2(v6);
  MachineUtteranceBuilder.init()();
  uint64_t v7 = App.appIdentifier.getter();
  uint64_t v9 = dispatch thunk of MachineUtteranceBuilder.addMappingIfPresent(node:value:)( 0x656D614E707061LL,  0xE700000000000000LL,  v7,  v8);
  OUTLINED_FUNCTION_76();
  uint64_t v10 = OUTLINED_FUNCTION_50();
  uint64_t v11 = dispatch thunk of MachineUtteranceBuilder.build()(v10);
  uint64_t v13 = v12;
  swift_release(v9);
  NLContextUpdate.nlInput.setter(v11, v13);
  static PhoneCallNLContextProvider.makeSDAForConfirmation()();
  OUTLINED_FUNCTION_83_1();
}

void static PhoneCallNLContextProvider.makeGenericConfirmationNLv3Context()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v2 = OUTLINED_FUNCTION_8_2(v1, 64LL);
  *(_OWORD *)(v2 + 16) = xmmword_31D880;
  OUTLINED_FUNCTION_33_7();
  OUTLINED_FUNCTION_135_0();
  uint64_t v13 = 95LL;
  uint64_t v14 = v0;
  lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_10_14((uint64_t)&v15, (uint64_t)&v13);
  OUTLINED_FUNCTION_23_5();
  OUTLINED_FUNCTION_31_3();
  uint64_t v17 = v3;
  uint64_t v18 = v4;
  OUTLINED_FUNCTION_3_20();
  v19._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_78_2();
  OUTLINED_FUNCTION_71_2(v19);
  OUTLINED_FUNCTION_87_0();
  OUTLINED_FUNCTION_23_5();
  uint64_t v5 = v18;
  *(void *)(v2 + 32) = v17;
  *(void *)(v2 + 40) = v5;
  uint64_t v17 = OUTLINED_FUNCTION_58_3();
  uint64_t v18 = v6;
  uint64_t v15 = 32LL;
  uint64_t v16 = v0;
  uint64_t v13 = 95LL;
  uint64_t v14 = v0;
  OUTLINED_FUNCTION_10_14((uint64_t)&v15, (uint64_t)&v13);
  OUTLINED_FUNCTION_23_5();
  OUTLINED_FUNCTION_31_3();
  uint64_t v17 = v7;
  uint64_t v18 = v8;
  OUTLINED_FUNCTION_3_20();
  v20._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_71_2(v20);
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_4_1();
  uint64_t v9 = v18;
  *(void *)(v2 + 48) = v17;
  *(void *)(v2 + 56) = v9;
  OUTLINED_FUNCTION_82_2();
  uint64_t v10 = OUTLINED_FUNCTION_8_2(v1, 48LL);
  *(_OWORD *)(v10 + 16) = xmmword_31D870;
  OUTLINED_FUNCTION_31_3();
  *(void *)(v10 + 32) = v11;
  *(void *)(v10 + 40) = v12;
  OUTLINED_FUNCTION_52_5();
  OUTLINED_FUNCTION_104_1();
  OUTLINED_FUNCTION_33_1();
}

void PhoneCallNLContextProvider.makeNeedsDisambiguationContextFor(parameter:items:completion:)()
{
  uint64_t v42 = v1;
  uint64_t v41 = v2;
  uint64_t v36 = v3;
  id v39 = v4;
  uint64_t v40 = v5;
  unint64_t v34 = v0;
  uint64_t v33 = *v0;
  uint64_t v6 = OUTLINED_FUNCTION_42_4();
  uint64_t v37 = *(void *)(v6 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v35 = v7;
  uint64_t v8 = OUTLINED_FUNCTION_65_1();
  type metadata accessor for CATOption(v8);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v32 = v9;
  uint64_t v38 = swift_allocBox(v6);
  uint64_t v11 = v10;
  NLContextUpdate.init()();
  OUTLINED_FUNCTION_74_1();
  OUTLINED_FUNCTION_84_1();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v13 = OUTLINED_FUNCTION_8_2(v12, 64LL);
  *(_OWORD *)(v13 + 16) = xmmword_31D880;
  uint64_t v47 = OUTLINED_FUNCTION_58_3();
  uint64_t v48 = v14;
  uint64_t v45 = 32LL;
  unint64_t v46 = 0xE100000000000000LL;
  *(void *)&v44[0] = 95LL;
  *((void *)&v44[0] + 1) = 0xE100000000000000LL;
  lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_59_4((uint64_t)&v45, (uint64_t)v44);
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_31_3();
  uint64_t v47 = v15;
  uint64_t v48 = v16;
  OUTLINED_FUNCTION_3_20();
  Swift::String v17 = String.uppercased()();
  String.append(_:)(v17);
  OUTLINED_FUNCTION_129();
  OUTLINED_FUNCTION_4_1();
  uint64_t v18 = v48;
  *(void *)(v13 + 32) = v47;
  *(void *)(v13 + 40) = v18;
  uint64_t v47 = OUTLINED_FUNCTION_33_7();
  uint64_t v48 = v19;
  uint64_t v45 = 32LL;
  unint64_t v46 = 0xE100000000000000LL;
  *(void *)&v44[0] = 95LL;
  *((void *)&v44[0] + 1) = 0xE100000000000000LL;
  OUTLINED_FUNCTION_59_4((uint64_t)&v45, (uint64_t)v44);
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_31_3();
  uint64_t v47 = v20;
  uint64_t v48 = v21;
  OUTLINED_FUNCTION_3_20();
  Swift::String v22 = String.uppercased()();
  String.append(_:)(v22);
  OUTLINED_FUNCTION_50();
  swift_bridgeObjectRelease();
  uint64_t v23 = v48;
  *(void *)(v13 + 48) = v47;
  *(void *)(v13 + 56) = v23;
  OUTLINED_FUNCTION_82_2();
  swift_bridgeObjectRetain();
  v24._uint64_t countAndFlagsBits = v40;
  v24._object = v39;
  if ((PhoneCallSlotNames.init(rawValue:)(v24).value & 0xFE) == 4)
  {
    uint64_t v25 = specialized _arrayConditionalCast<A, B>(_:)(v36);
    if (v25)
    {
      unint64_t v26 = (unint64_t)v25;
      OUTLINED_FUNCTION_146();
      outlined init with copy of SharedGlobalsProviding((uint64_t)v0 + v27, (uint64_t)&v45);
      outlined init with copy of SharedGlobalsProviding((uint64_t)v0 + *(void *)(v39[248] + *v0 + 24LL), (uint64_t)v44);
      outlined init with copy of SharedGlobalsProviding((uint64_t)&v45, (uint64_t)&v47);
      type metadata accessor for PhoneCallDisplayTextCATs(0LL);
      static CATOption.defaultMode.getter();
      type metadata accessor for CATGlobals(0LL);
      outlined init with copy of SharedGlobalsProviding((uint64_t)v44, (uint64_t)v43);
      uint64_t v28 = CATGlobals.__allocating_init(device:)(v43);
      uint64_t v29 = CATWrapper.__allocating_init(options:globals:)(v32, v28);
      __swift_destroy_boxed_opaque_existential_1(&v45);
      v49[5] = v29;
      outlined init with take of AppSelectionSignalComponent(v44, (uint64_t)v49);
      __int128 v30 = (void *)OUTLINED_FUNCTION_8_2((uint64_t)&unk_3F7AE0, 64LL);
      v30[2] = v38;
      v30[3] = v26;
      id v30[4] = v34;
      v30[5] = v41;
      v30[6] = v42;
      v30[7] = v33;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      OUTLINED_FUNCTION_95_1();
      PhoneContactDisplayHintFactory.build(for:_:)( v26,  (void (*)(char *))partial apply for closure #1 in PhoneCallNLContextProvider.makeNeedsDisambiguationContextFor(parameter:items:completion:),  (uint64_t)v30);
      OUTLINED_FUNCTION_39();
      swift_release(v30);
      outlined destroy of PhoneContactDisplayHintFactory(&v47);
    }

    uint64_t v31 = v38;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v35, v11, v6);
    v41(v35);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v6);
    uint64_t v31 = v38;
  }

  swift_release(v31);
  OUTLINED_FUNCTION_7_5();
}

void *specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v11 = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v2);
  if (!v2) {
    return v11;
  }
  for (uint64_t i = a1 + 32; ; i += 32LL)
  {
    outlined init with copy of Any(i, (uint64_t)v10);
    type metadata accessor for INPerson();
    uint64_t v4 = swift_dynamicCast(&v9, v10, (char *)&type metadata for Any + 8);
    if (!(_DWORD)v4) {
      break;
    }
    id v5 = v9;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v4);
    uint64_t v6 = v11[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
    uint64_t v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v5);
    specialized ContiguousArray._endMutation()(v7);
    if (!--v2) {
      return v11;
    }
  }

  id v9 = 0LL;
  swift_release(v11);

  return 0LL;
}

uint64_t closure #1 in PhoneCallNLContextProvider.makeNeedsDisambiguationContextFor(parameter:items:completion:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(_BYTE *))
{
  uint64_t v8 = type metadata accessor for NLContextUpdate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = &v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v12 = swift_projectBox(a2);
  swift_beginAccess(v12, v27, 33LL, 0LL);
  uint64_t v13 = swift_bridgeObjectRetain();
  NLContextUpdate.displayHints.setter(v13);
  swift_endAccess(v27);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v15 = swift_allocObject(v14, 80LL, 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_320080;
  PhoneCallNLConstants.canonicalName.getter(3u);
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v17;
  PhoneCallNLConstants.canonicalName.getter(5u);
  *(void *)(v15 + 48) = v18;
  *(void *)(v15 + 56) = v19;
  PhoneCallNLConstants.canonicalName.getter(0xDu);
  *(void *)(v15 + 64) = v20;
  *(void *)(v15 + 72) = v21;
  swift_beginAccess(v12, v27, 33LL, 0LL);
  NLContextUpdate.weightedPromptResponseTargets.setter(v15);
  NLContextUpdate.weightedPromptStrict.setter(1LL);
  swift_endAccess(v27);
  static PhoneCallNLContextProvider.getRREntities(persons:deviceState:)();
  uint64_t v23 = v22;
  swift_beginAccess(v12, v27, 33LL, 0LL);
  NLContextUpdate.rrEntities.setter(v23);
  swift_endAccess(v27);
  uint64_t v24 = static PhoneCallNLContextProvider.makeSDAForDisambiguateContact(contacts:)(a3);
  swift_beginAccess(v12, v27, 33LL, 0LL);
  NLContextUpdate.nluSystemDialogActs.setter(v24);
  swift_endAccess(v27);
  swift_beginAccess(v12, v27, 0LL, 0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  a5(v11);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
}

void static PhoneCallNLContextProvider.getRREntities(persons:deviceState:)()
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v33 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v4 = OUTLINED_FUNCTION_22_5();
  uint64_t v5 = type metadata accessor for RREntity(v4);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  uint64_t v36 = v7;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v12 = UUID.init()(v11);
  uint64_t v32 = UUID.uuidString.getter(v12);
  uint64_t v34 = v13;
  OUTLINED_FUNCTION_117_0(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  if (!((unint64_t)v2 >> 62))
  {
    uint64_t v14 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_3;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_129();
    OUTLINED_FUNCTION_7_5();
    return;
  }

  if (v2 < 0) {
    uint64_t v28 = v2;
  }
  else {
    uint64_t v28 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v28);
  if (!v14) {
    goto LABEL_21;
  }
LABEL_3:
  if (v14 >= 1)
  {
    uint64_t v15 = 0LL;
    unint64_t v35 = v2 & 0xC000000000000001LL;
    uint64_t v16 = (char *)_swiftEmptyArrayStorage;
    uint64_t v30 = v14;
    uint64_t v31 = v2;
    do
    {
      if (v35) {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v2);
      }
      else {
        id v17 = *(id *)(v2 + 8 * v15 + 32);
      }
      uint64_t v18 = v17;
      INPerson.toRREntity()();
      if (__swift_getEnumTagSinglePayload(v0, 1LL, v5) == 1)
      {

        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v0,  &demangling cache variable for type metadata for RREntity?);
      }

      else
      {
        uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 32);
        v19(v9, v0, v5);
        uint64_t v20 = v34;
        swift_bridgeObjectRetain();
        uint64_t v21 = v33;
        GroupIdentifier.init(id:seq:)(v32, v20, v15);
        uint64_t v22 = type metadata accessor for GroupIdentifier(0LL);
        OUTLINED_FUNCTION_88(v21, 0LL, v23, v22);
        RREntity.group.setter(v21);
        (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v36, v9, v5);
        if ((OUTLINED_FUNCTION_140() & 1) == 0)
        {
          OUTLINED_FUNCTION_107_0();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v16 = v26;
        }

        unint64_t v25 = *((void *)v16 + 2);
        unint64_t v24 = *((void *)v16 + 3);
        if (v25 >= v24 >> 1)
        {
          OUTLINED_FUNCTION_85_2(v24);
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v16 = v27;
        }

        *((void *)v16 + 2) = v25 + 1;
        v19( &v16[((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
             + *(void *)(v6 + 72) * v25],
          v36,
          v5);

        (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
        uint64_t v14 = v30;
        uint64_t v2 = v31;
      }

      ++v15;
    }

    while (v14 != v15);
    goto LABEL_21;
  }

  __break(1u);
}

uint64_t static PhoneCallNLContextProvider.makeSDAForDisambiguateContact(contacts:)(unint64_t a1)
{
  uint64_t v89 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL);
  uint64_t v88 = *(void *)(v89 - 8);
  __chkstk_darwin();
  uint64_t v87 = (char *)&v83 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v86 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions(0LL);
  uint64_t v85 = *(void *)(v86 - 8);
  __chkstk_darwin();
  unint64_t v83 = (char *)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v84 = (char *)&v83 - v4;
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v102 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v95 = (char *)&v83 - v8;
  __chkstk_darwin();
  uint64_t v10 = (char *)&v83 - v9;
  __chkstk_darwin();
  uint64_t v12 = (char *)&v83 - v11;
  uint64_t v108 = _swiftEmptyArrayStorage;
  uint64_t v98 = a1;
  if (a1 >> 62)
  {
    if (v98 < 0) {
      uint64_t v82 = v98;
    }
    else {
      uint64_t v82 = v98 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v82);
    uint64_t v13 = result;
  }

  else
  {
    uint64_t v13 = *(void *)((char *)&dword_10 + (v98 & 0xFFFFFFFFFFFFF8LL));
    uint64_t result = swift_bridgeObjectRetain();
  }

  if (v13)
  {
    if (v13 < 1)
    {
      __break(1u);
      return result;
    }

    uint64_t v16 = 0LL;
    unint64_t v96 = v98 & 0xC000000000000001LL;
    uint64_t v92 = v107;
    *(void *)&__int128 v15 = 136315138LL;
    __int128 v91 = v15;
    uint64_t v90 = (char *)&type metadata for Any + 8;
    uint64_t v97 = v13;
    uint64_t v93 = v12;
    uint64_t v94 = v6;
    do
    {
      if (v96) {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v98);
      }
      else {
        id v17 = *(id *)(v98 + 8 * v16 + 32);
      }
      uint64_t v18 = v17;
      uint64_t v101 = v16;
      uint64_t v19 = type metadata accessor for UsoTaskBuilder_call_common_PhoneCall(0LL);
      swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
      uint64_t v20 = UsoTaskBuilder_call_common_PhoneCall.init()();
      uint64_t v21 = type metadata accessor for UsoEntityBuilder_common_PhoneCall(0LL);
      swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
      uint64_t v105 = UsoEntityBuilder_common_PhoneCall.init()();
      uint64_t v22 = type metadata accessor for UsoEntityBuilder_common_Person(0LL);
      swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
      uint64_t v104 = UsoEntityBuilder_common_Person.init()();
      uint64_t v23 = type metadata accessor for UsoEntityBuilder_common_PhoneNumber(0LL);
      swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
      uint64_t v103 = UsoEntityBuilder_common_PhoneNumber.init()();
      id v24 = [v18 personHandle];
      if (v24
        && (unint64_t v25 = v24, v26 = [v24 label], v25, v26))
      {
        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        unint64_t v29 = v28;
      }

      else
      {
        uint64_t v27 = 0LL;
        unint64_t v29 = 0xE000000000000000LL;
      }

      uint64_t v30 = v103;
      dispatch thunk of UsoEntityBuilder_common_PhoneNumber.setLabel(value:)(v27, v29);
      swift_bridgeObjectRelease();
      id v100 = v18;
      id v31 = [v18 displayName];
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      uint64_t v34 = v33;

      uint64_t v35 = v104;
      dispatch thunk of UsoEntityBuilder_common_Person.setName(value:)(v32, v34);
      swift_bridgeObjectRelease();
      uint64_t v36 = swift_retain();
      dispatch thunk of UsoEntityBuilder_common_Person.setSpecifyingContactAddress(value:)( v36,  &protocol witness table for UsoEntityBuilder_common_PhoneNumber);
      swift_release(v30);
      uint64_t v37 = swift_retain();
      uint64_t v38 = v105;
      dispatch thunk of UsoEntityBuilder_common_PhoneCall.addRecipients(value:)( v37,  &protocol witness table for UsoEntityBuilder_common_Person);
      swift_release(v35);
      dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)(v38);
      UsoTaskBuilder.toUserStatedTaskDialogAct()();
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v99 = v20;
      uint64_t v39 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v39, (uint64_t)static Logger.siriPhone);
      uint64_t v40 = *(uint64_t (**)(char *, char *, uint64_t))(v6 + 16);
      uint64_t v41 = v40(v10, v12, v5);
      uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
      os_log_type_t v44 = static os_log_type_t.debug.getter(v42, v43);
      if (os_log_type_enabled(v42, v44))
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        unint64_t v46 = v10;
        uint64_t v47 = swift_slowAlloc(32LL, -1LL);
        v107[0] = v47;
        *(_DWORD *)uint64_t v45 = v91;
        uint64_t v48 = (uint64_t)v95;
        v40(v95, v46, v5);
        uint64_t v49 = specialized String.init(describing:)( v48,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UserDialogAct,  (unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UserDialogAct);
        uint64_t v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, v107);
        uint64_t v6 = v94;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v92, v45 + 4);
        swift_bridgeObjectRelease();
        unint64_t v51 = *(void (**)(char *, uint64_t))(v6 + 8);
        v51(v46, v5);
        _os_log_impl( &dword_0,  v42,  v44,  "#PhoneCallNLContextProvider Building UserStatedTask for start call disambiguation: %s",  v45,  0xCu);
        swift_arrayDestroy(v47, 1LL);
        uint64_t v52 = v47;
        uint64_t v10 = v46;
        uint64_t v12 = v93;
        swift_slowDealloc(v52, -1LL, -1LL);
        swift_slowDealloc(v45, -1LL, -1LL);
      }

      else
      {
        unint64_t v51 = *(void (**)(char *, uint64_t))(v6 + 8);
        v51(v10, v5);
      }

      uint64_t v53 = v101;
      v40(v102, v12, v5);
      uint64_t v54 = v108;
      if ((swift_isUniquelyReferenced_nonNull_native(v108) & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v54 = v56;
      }

      unint64_t v55 = v54[2];
      if (v55 >= v54[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v54 = v57;
      }

      uint64_t v16 = v53 + 1;
      v54[2] = v55 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))( (unint64_t)v54 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
      + *(void *)(v6 + 72) * v55,
        v102,
        v5);
      swift_release(v103);
      swift_release(v104);
      swift_release(v99);

      swift_release(v105);
      uint64_t v108 = v54;
      v51(v12, v5);
    }

    while (v97 != v16);
  }

  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v58 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v58, (uint64_t)static Logger.siriPhone);
  uint64_t v59 = v108;
  uint64_t v60 = swift_bridgeObjectRetain_n(v108, 2LL);
  uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
  os_log_type_t v63 = static os_log_type_t.debug.getter(v61, v62);
  if (os_log_type_enabled(v61, v63))
  {
    uint64_t v64 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v65 = swift_slowAlloc(32LL, -1LL);
    v107[0] = v65;
    *(_DWORD *)uint64_t v64 = 136315138;
    uint64_t v66 = swift_bridgeObjectRetain();
    uint64_t v67 = Array.description.getter(v66, v5);
    unint64_t v69 = v68;
    swift_bridgeObjectRelease();
    uint64_t v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v69, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107, v64 + 4);
    swift_bridgeObjectRelease_n(v59, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( &dword_0,  v61,  v63,  "#PhoneCallNLContextProvider Returning SystemGaveOptions for start call disambiguation: %s",  v64,  0xCu);
    swift_arrayDestroy(v65, 1LL);
    swift_slowDealloc(v65, -1LL, -1LL);
    swift_slowDealloc(v64, -1LL, -1LL);
  }

  else
  {

    uint64_t v70 = swift_bridgeObjectRelease_n(v59, 2LL);
  }

  uint64_t v71 = v84;
  Siri_Nlu_External_SystemGaveOptions.init()(v70);
  swift_beginAccess(&v108, v107, 0LL, 0LL);
  uint64_t v72 = Siri_Nlu_External_SystemGaveOptions.choices.setter(v108);
  uint64_t v73 = v87;
  Siri_Nlu_External_SystemDialogAct.init()(v72);
  uint64_t v74 = v85;
  uint64_t v75 = v83;
  uint64_t v76 = v86;
  (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v83, v71, v86);
  Siri_Nlu_External_SystemDialogAct.gaveOptions.setter(v75);
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  uint64_t v78 = v88;
  uint64_t v79 = *(unsigned __int8 *)(v88 + 80);
  uint64_t v80 = (v79 + 32) & ~v79;
  uint64_t v81 = swift_allocObject(v77, v80 + *(void *)(v88 + 72), v79 | 7);
  *(_OWORD *)(v81 + 16) = xmmword_31D870;
  (*(void (**)(uint64_t, char *, uint64_t))(v78 + 32))(v81 + v80, v73, v89);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v71, v76);
  return v81;
}

void static PhoneCallNLContextProvider.makeGenericConfirmationContextForSearchingCallHistory()()
{
}

uint64_t static PhoneCallNLContextProvider.buildVoiceMailListFollowUpOfferContext()()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v2 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v2, (uint64_t)static Logger.siriPhone);
  os_log_type_t v3 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_7(v3))
  {
    uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
    *(_WORD *)uint64_t v4 = 0;
    OUTLINED_FUNCTION_5(&dword_0, v0, v1, "#PhoneCallNLContextProvider buildVoiceMailListFollowUpOfferContext", v4);
    OUTLINED_FUNCTION_0_2((uint64_t)v4);
  }

  static PhoneCallNLContextProvider.buildSingleVoiceMailFollowUpOfferContext()();
  uint64_t v6 = (void (*)(void *, void))NLContextUpdate.weightedPromptResponseOptions.modify(v36);
  if (*v5)
  {
    uint64_t v7 = v5;
    String.uppercased()();
    unint64_t v8 = lazy protocol witness table accessor for type String and conformance String();
    __int128 v15 = OUTLINED_FUNCTION_28_6( v8,  v9,  v10,  v11,  v12,  v13,  (uint64_t)&type metadata for String,  v14,  (uint64_t)&type metadata for String,  v8,  v8,  v8,  95LL,  0xE100000000000000LL,  32);
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v15, v16, v17, v18, v19, v20, v21, v21);
    OUTLINED_FUNCTION_4_1();
    PhoneCallNLConstants.canonicalName.getter(0xEu);
    uint64_t v34 = v22;
    uint64_t v35 = v23;
    OUTLINED_FUNCTION_3_20();
    Swift::String v37 = String.uppercased()();
    OUTLINED_FUNCTION_71_2(v37);
    OUTLINED_FUNCTION_23_5();
    OUTLINED_FUNCTION_4_1();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v24 = *(void *)(*v7 + 16LL);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    uint64_t v25 = *v7;
    *(void *)(v25 + 16) = v24 + 1;
    uint64_t v26 = v25 + 16 * v24;
    *(void *)(v26 + 32) = v34;
    *(void *)(v26 + 40) = v35;
  }

  v6(v36, 0LL);
  id v27 = [objc_allocWithZone(SAAceConfirmationContext) init];
  [v27 setReason:SAAceConfirmationReasonCONTINUE_READINGValue];
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v29 = OUTLINED_FUNCTION_8_2(v28, 40LL);
  *(_OWORD *)(v29 + 16) = xmmword_31FE60;
  *(void *)(v29 + 32) = v27;
  v36[0] = v29;
  specialized Array._endMutation()(v29, v30, v31, v32);
  return NLContextUpdate.conversationStateAttachments.setter(v36[0]);
}

void static PhoneCallNLContextProvider.makeSDAForConfirmation()()
{
  uint64_t v87 = v2;
  uint64_t v4 = v3;
  uint64_t v97 = type metadata accessor for PhoneError(0LL);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  unint64_t v96 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  uint64_t v95 = (void (**)(uint64_t, char *))((char *)&v85 - v6);
  uint64_t v93 = (char *)OUTLINED_FUNCTION_15_1();
  uint64_t v94 = *((void *)v93 - 1);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v102 = OUTLINED_FUNCTION_92_2(v7);
  uint64_t v98 = *(void *)(v102 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  uint64_t v86 = v8;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  uint64_t v90 = (char *)&v85 - v9;
  uint64_t v10 = OUTLINED_FUNCTION_65_1();
  uint64_t v103 = type metadata accessor for Siri_Nlu_External_SystemOffered(v10);
  uint64_t v101 = *(void *)(v103 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  uint64_t v89 = v11;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  uint64_t v13 = (char *)&v85 - v12;
  uint64_t v14 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v99 = v14;
  uint64_t v100 = v15;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  uint64_t v88 = v16;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  uint64_t v18 = (char *)&v85 - v17;
  type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v19 = OUTLINED_FUNCTION_81_2();
  uint64_t v20 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed(v19);
  uint64_t v21 = *(char **)(v20 - 8);
  __chkstk_darwin();
  uint64_t v23 = (char *)&v85 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v25 = (char *)&v85 - v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_20_0();
  uint64_t v26 = OUTLINED_FUNCTION_136();
  uint64_t v27 = OUTLINED_FUNCTION_15_2(v26);
  uint64_t v28 = v4();
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v30 = OUTLINED_FUNCTION_8_2(v29, 40LL);
  *(_OWORD *)(v30 + 16) = xmmword_31FE60;
  *(void *)(v30 + 32) = v28;
  OUTLINED_FUNCTION_115(v30, v31, v32, v33);
  uint64_t v34 = OUTLINED_FUNCTION_114();
  OUTLINED_FUNCTION_88(v0, 1LL, v35, v34);
  uint64_t v92 = v28;
  swift_retain();
  uint64_t v36 = static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)(v27, v0);
  OUTLINED_FUNCTION_62();
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v0,  &demangling cache variable for type metadata for UsoBuilderOptions?);
  Siri_Nlu_External_UserWantedToProceed.init()();
  OUTLINED_FUNCTION_98_2();
  if (v25)
  {
    uint64_t v65 = v94;
    uint64_t v66 = (uint64_t)v96;
    uint64_t v67 = v91;
    uint64_t v68 = v97;
    OUTLINED_FUNCTION_117_0(*((uint64_t (**)(uint64_t, uint64_t))v21 + 1));
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v69 = __swift_project_value_buffer((uint64_t)v93, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_142(v67, v69, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v65 + 16));
    uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserWantedToProceed.Type);
    uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserWantedToProceed.Type.Type);
    OUTLINED_FUNCTION_148(v70);
    OUTLINED_FUNCTION_66_1();
    uint64_t v71 = OUTLINED_FUNCTION_126();
    uint64_t v73 = OUTLINED_FUNCTION_145_0(v71, v72);
    swift_storeEnumTagMultiPayload(v73, v68, 5LL);
    OUTLINED_FUNCTION_134_0();
    outlined destroy of PhoneError(v66);
    lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError,  type metadata accessor for PhoneError,  (uint64_t)&protocol conformance descriptor for PhoneError);
    Error.localizedDescription.getter(v68, v74);
    OUTLINED_FUNCTION_94_1();
    uint64_t v75 = OUTLINED_FUNCTION_151();
    uint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
    os_log_type_t v77 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_93(v77))
    {
      uint64_t v78 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v79 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v105 = v79;
      OUTLINED_FUNCTION_75_1(4.8149e-34);
      uint64_t v80 = OUTLINED_FUNCTION_101_0();
      OUTLINED_FUNCTION_53_3(v80);
      OUTLINED_FUNCTION_149_0();
      OUTLINED_FUNCTION_57_0(&dword_0, v76, (os_log_type_t)v68, "%s", v78);
      OUTLINED_FUNCTION_17_0(v79);
      OUTLINED_FUNCTION_0_2(v79);
      OUTLINED_FUNCTION_0_2((uint64_t)v78);
    }

    else
    {
      OUTLINED_FUNCTION_26_4();
    }

    OUTLINED_FUNCTION_141_0();
    OUTLINED_FUNCTION_116();
    OUTLINED_FUNCTION_50_8( (uint64_t)"Fatal error",  v81,  v82,  v83,  v84,  (uint64_t)"PhoneCallFlowDelegatePlugin/PhoneLog.swift");
    __break(1u);
  }

  else
  {
    uint64_t v91 = v36;
    uint64_t v37 = Siri_Nlu_External_UserWantedToProceed.reference.setter(v1);
    Siri_Nlu_External_UserDialogAct.init()(v37);
    uint64_t v95 = (void (**)(uint64_t, char *))v21;
    uint64_t v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((void *)v21 + 2);
    uint64_t v94 = 0LL;
    unint64_t v96 = (char *)v20;
    OUTLINED_FUNCTION_142((uint64_t)v23, 0LL, v38);
    uint64_t v39 = Siri_Nlu_External_UserDialogAct.wantedToProceed.setter(v23);
    Siri_Nlu_External_SystemOffered.init()(v39);
    uint64_t v40 = v99;
    uint64_t v41 = v100;
    uint64_t v42 = *(void (**)(uint64_t, char *, uint64_t))(v100 + 16);
    uint64_t v43 = v88;
    uint64_t v97 = (uint64_t)v18;
    v42(v88, v18, v99);
    uint64_t v44 = Siri_Nlu_External_SystemOffered.offeredAct.setter(v43);
    uint64_t v45 = (uint64_t)v90;
    Siri_Nlu_External_SystemDialogAct.init()(v44);
    uint64_t v46 = v101;
    uint64_t v47 = v89;
    (*(void (**)(uint64_t, char *, uint64_t))(v101 + 16))(v89, v13, v103);
    uint64_t v48 = (uint8_t *)v45;
    Siri_Nlu_External_SystemDialogAct.offered.setter(v47);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v49 = (os_log_s *)OUTLINED_FUNCTION_12_1((uint64_t)v93, (uint64_t)static Logger.siriPhone);
    os_log_type_t v51 = static os_log_type_t.debug.getter(v49, v50);
    BOOL v52 = OUTLINED_FUNCTION_87(v51);
    uint64_t v53 = v102;
    if (v52)
    {
      uint64_t v48 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v54 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v105 = v54;
      uint64_t v93 = v13;
      *(_DWORD *)uint64_t v48 = 136315138;
      OUTLINED_FUNCTION_22_0(v45, (uint64_t)&v104);
      uint64_t v55 = v98;
      uint64_t v56 = v86;
      OUTLINED_FUNCTION_103_0(v86, v45, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 16));
      uint64_t v57 = specialized String.init(describing:)( v56,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_SystemDialogAct,  &lazy protocol witness table cache variable for type Siri_Nlu_External_SystemDialogAct and conformance Siri_Nlu_External_SystemDialogAct,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_SystemDialogAct);
      uint64_t v59 = OUTLINED_FUNCTION_132_0(v57, v58);
      uint64_t v60 = OUTLINED_FUNCTION_137(v59);
      uint64_t v40 = v99;
      uint64_t v41 = v100;
      uint64_t v13 = v93;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v60, v61, v48 + 4);
      uint64_t v53 = v102;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_57_0(&dword_0, v49, OS_LOG_TYPE_DEFAULT, v87, v48);
      OUTLINED_FUNCTION_17_0(v54);
      uint64_t v62 = v54;
      uint64_t v46 = v101;
      OUTLINED_FUNCTION_0_2(v62);
      OUTLINED_FUNCTION_0_2((uint64_t)v48);
    }

    else
    {

      uint64_t v55 = v98;
    }

    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
    uint64_t v64 = OUTLINED_FUNCTION_39_5(v63, *(void *)(v55 + 72));
    *(_OWORD *)(v64 + 16) = xmmword_31D870;
    OUTLINED_FUNCTION_22_0(v45, (uint64_t)&v105);
    OUTLINED_FUNCTION_103_0((uint64_t)&v48[v64], v45, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 16));
    swift_release(v92);
    swift_release(v91);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v13, v103);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v97, v40);
    v95[1](v94, v96);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v45, v53);
    OUTLINED_FUNCTION_7_5();
  }

uint64_t static PhoneCallNLContextProvider.makeContextForPlayingVoicemails()()
{
  return OUTLINED_FUNCTION_83_1();
}

void static PhoneCallNLContextProvider.makeSDAForNeedsValueForContact()()
{
  uint64_t v74 = type metadata accessor for PhoneError(0LL);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v73 = (char *)&v70 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  uint64_t v72 = (char *)&v70 - v2;
  uint64_t v78 = (char *)OUTLINED_FUNCTION_15_1();
  uint64_t v71 = *((void *)v78 - 1);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v79 = OUTLINED_FUNCTION_92_2(v3);
  uint64_t v4 = *(void *)(v79 - 8);
  __chkstk_darwin();
  uint64_t v5 = OUTLINED_FUNCTION_81_2();
  type metadata accessor for Siri_Nlu_External_UsoGraph(v5);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v8 = v7 - v6;
  uint64_t v80 = type metadata accessor for Siri_Nlu_External_SystemPrompted(0LL);
  uint64_t v9 = *(void *)(v80 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  uint64_t v77 = v10;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  uint64_t v12 = (os_log_s *)((char *)&v70 - v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for UsoTaskBuilder_call_common_PhoneCall(0LL);
  OUTLINED_FUNCTION_15_2(v16);
  uint64_t v17 = UsoTaskBuilder_call_common_PhoneCall.init()();
  uint64_t v18 = type metadata accessor for UsoEntityBuilder_common_PhoneCall(0LL);
  OUTLINED_FUNCTION_15_2(v18);
  uint64_t v19 = UsoEntityBuilder_common_PhoneCall.init()();
  uint64_t v20 = type metadata accessor for UsoEntityBuilder_common_Person(0LL);
  OUTLINED_FUNCTION_15_2(v20);
  uint64_t v21 = UsoEntityBuilder_common_Person.init()();
  dispatch thunk of UsoEntityBuilder_common_PhoneCall.addRecipients(value:)( v21,  &protocol witness table for UsoEntityBuilder_common_Person);
  uint64_t v22 = v21;
  uint64_t v23 = (uint64_t)v12;
  swift_release(v22);
  uint64_t v75 = v19;
  dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)(v19);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v25 = OUTLINED_FUNCTION_8_2(v24, 40LL);
  *(_OWORD *)(v25 + 16) = xmmword_31FE60;
  *(void *)(v25 + 32) = v17;
  OUTLINED_FUNCTION_115(v25, v26, v27, v28);
  uint64_t v29 = OUTLINED_FUNCTION_114();
  OUTLINED_FUNCTION_88(v15, 1LL, v30, v29);
  uint64_t v76 = v17;
  swift_retain();
  uint64_t v31 = static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)(v17, v15);
  OUTLINED_FUNCTION_62();
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v15,  &demangling cache variable for type metadata for UsoBuilderOptions?);
  Siri_Nlu_External_SystemPrompted.init()();
  OUTLINED_FUNCTION_98_2();
  if (v15)
  {
    uint64_t v49 = v71;
    uint64_t v50 = (uint64_t)v73;
    uint64_t v51 = v70;
    uint64_t v52 = v74;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v23, v80);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v53 = __swift_project_value_buffer((uint64_t)v78, (uint64_t)static Logger.siriPhone);
    os_log_type_t v54 = v51;
    OUTLINED_FUNCTION_142(v51, v53, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 16));
    uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUSystemPrompted.Type);
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUSystemPrompted.Type.Type);
    OUTLINED_FUNCTION_148(v55);
    OUTLINED_FUNCTION_66_1();
    uint64_t v56 = OUTLINED_FUNCTION_126();
    unint64_t v58 = OUTLINED_FUNCTION_145_0(v56, v57);
    swift_storeEnumTagMultiPayload(v58, v52, 5LL);
    OUTLINED_FUNCTION_134_0();
    outlined destroy of PhoneError(v50);
    lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError,  type metadata accessor for PhoneError,  (uint64_t)&protocol conformance descriptor for PhoneError);
    Error.localizedDescription.getter(v52, v59);
    OUTLINED_FUNCTION_94_1();
    uint64_t v60 = OUTLINED_FUNCTION_151();
    uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_93(v62))
    {
      uint64_t v63 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v64 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v82 = v64;
      OUTLINED_FUNCTION_75_1(4.8149e-34);
      uint64_t v65 = OUTLINED_FUNCTION_101_0();
      OUTLINED_FUNCTION_53_3(v65);
      OUTLINED_FUNCTION_149_0();
      OUTLINED_FUNCTION_57_0(&dword_0, v61, v54, "%s", v63);
      OUTLINED_FUNCTION_17_0(v64);
      OUTLINED_FUNCTION_0_2(v64);
      OUTLINED_FUNCTION_0_2((uint64_t)v63);
    }

    else
    {
      OUTLINED_FUNCTION_26_4();
    }

    OUTLINED_FUNCTION_141_0();
    OUTLINED_FUNCTION_116();
    OUTLINED_FUNCTION_50_8( (uint64_t)"Fatal error",  v66,  v67,  v68,  v69,  (uint64_t)"PhoneCallFlowDelegatePlugin/PhoneLog.swift");
    __break(1u);
  }

  else
  {
    uint64_t v32 = v12;
    Siri_Nlu_External_SystemPrompted.target.setter(v8);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    OUTLINED_FUNCTION_12_1((uint64_t)v78, (uint64_t)static Logger.siriPhone);
    os_log_type_t v33 = OUTLINED_FUNCTION_6_0();
    if (os_log_type_enabled(v12, v33))
    {
      uint64_t v74 = v9;
      uint64_t v34 = OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v78 = (char *)v12;
      uint64_t v35 = (uint8_t *)v34;
      uint64_t v36 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v82 = v36;
      *(_DWORD *)uint64_t v35 = 136315138;
      uint64_t v73 = (char *)(v35 + 4);
      OUTLINED_FUNCTION_22_0((uint64_t)v78, (uint64_t)&v81);
      uint64_t v37 = v77;
      (*(void (**)(uint64_t, char *, uint64_t))(v74 + 16))(v77, v78, v80);
      uint64_t v38 = specialized String.init(describing:)( v37,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_SystemPrompted,  &lazy protocol witness table cache variable for type Siri_Nlu_External_SystemPrompted and conformance Siri_Nlu_External_SystemPrompted,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_SystemPrompted);
      uint64_t v40 = OUTLINED_FUNCTION_132_0(v38, v39);
      uint64_t v41 = OUTLINED_FUNCTION_137(v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v41, v42, v73);
      uint64_t v9 = v74;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_57_0( &dword_0,  v32,  v33,  "#PhoneCallNLContextProvider Returning NLUSystemPrompted for prompt for start call: %s",  v35);
      OUTLINED_FUNCTION_17_0(v36);
      OUTLINED_FUNCTION_0_2(v36);
      uint64_t v43 = (uint64_t)v35;
      uint64_t v23 = (uint64_t)v78;
      OUTLINED_FUNCTION_0_2(v43);
    }

    else
    {

      uint64_t v37 = v77;
    }

    Siri_Nlu_External_SystemDialogAct.init()(v44);
    OUTLINED_FUNCTION_22_0(v23, (uint64_t)&v82);
    uint64_t v45 = v80;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v37, v23, v80);
    Siri_Nlu_External_SystemDialogAct.prompted.setter(v37);
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
    uint64_t v47 = v23;
    uint64_t v48 = OUTLINED_FUNCTION_39_5(v46, *(void *)(v4 + 72));
    *(_OWORD *)(v48 + 16) = xmmword_31D870;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v48 + v0, v0, v79);
    swift_release(v76);
    swift_release(v75);
    swift_release(v31);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v47, v45);
    OUTLINED_FUNCTION_7_5();
  }

void static PhoneCallNLContextProvider.buildSingleVoiceMailFollowUpOfferContext()()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v3 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v3, (uint64_t)static Logger.siriPhone);
  os_log_type_t v4 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_7(v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
    *(_WORD *)uint64_t v5 = 0;
    OUTLINED_FUNCTION_5(&dword_0, v0, v1, "#PhoneCallNLContextProvider buildSingleVoiceMailFollowUpOfferContext", v5);
    OUTLINED_FUNCTION_0_2((uint64_t)v5);
  }

  NLContextUpdate.init()();
  OUTLINED_FUNCTION_74_1();
  OUTLINED_FUNCTION_84_1();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v7 = OUTLINED_FUNCTION_8_2(v6, 80LL);
  *(_OWORD *)(v7 + 16) = xmmword_320080;
  String.uppercased()();
  OUTLINED_FUNCTION_135_0();
  unint64_t v8 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v16 = OUTLINED_FUNCTION_28_6( v8,  v9,  v10,  v11,  v12,  v13,  v14,  v15,  (uint64_t)&type metadata for String,  v8,  v8,  v8,  95LL,  v2,  v55);
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v16,  v17,  v18,  v19,  v20,  v21,  &type metadata for String,  &type metadata for String);
  OUTLINED_FUNCTION_13_1();
  PhoneCallNLConstants.canonicalName.getter(0xEu);
  uint64_t v60 = v22;
  uint64_t v63 = v23;
  OUTLINED_FUNCTION_3_20();
  v66._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_71_2(v66);
  OUTLINED_FUNCTION_70_2();
  OUTLINED_FUNCTION_13_1();
  *(void *)(v7 + 32) = v60;
  *(void *)(v7 + 40) = v63;
  Swift::String v24 = String.uppercased()();
  OUTLINED_FUNCTION_16_8( v24._countAndFlagsBits,  (uint64_t)v24._object,  v25,  v26,  v27,  v28,  v29,  v30,  v43,  v45,  v47,  v49,  v51,  v53,  v56,  v58,  v60,  v63);
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_125_0();
  uint64_t v61 = v31;
  uint64_t v64 = v32;
  OUTLINED_FUNCTION_3_20();
  v67._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_71_2(v67);
  OUTLINED_FUNCTION_70_2();
  OUTLINED_FUNCTION_13_1();
  *(void *)(v7 + 48) = v61;
  *(void *)(v7 + 56) = v64;
  uint64_t v33 = OUTLINED_FUNCTION_33_7();
  OUTLINED_FUNCTION_16_8(v33, v34, v35, v36, v37, v38, v39, v40, v44, v46, v48, v50, v52, v54, v57, v59, v61, v64);
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_31_3();
  uint64_t v62 = v41;
  uint64_t v65 = v42;
  OUTLINED_FUNCTION_3_20();
  Swift::String v68 = String.uppercased()();
  OUTLINED_FUNCTION_71_2(v68);
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_50();
  *(void *)(v7 + 64) = v62;
  *(void *)(v7 + 72) = v65;
  OUTLINED_FUNCTION_82_2();
  NLContextUpdate.weightedPromptStrict.setter(0LL);
  OUTLINED_FUNCTION_33_1();
}

void static PhoneCallNLContextProvider.buildSingleGroupFaceTimeInviteFollowUpOfferContext()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v1 = OUTLINED_FUNCTION_8_2(v0, 64LL);
  *(_OWORD *)(v1 + 16) = xmmword_31D880;
  OUTLINED_FUNCTION_31_3();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v3;
  OUTLINED_FUNCTION_125_0();
  *(void *)(v1 + 48) = v4;
  *(void *)(v1 + 56) = v5;
  OUTLINED_FUNCTION_52_5();
  uint64_t v6 = OUTLINED_FUNCTION_8_2(v0, 80LL);
  *(_OWORD *)(v6 + 16) = xmmword_320080;
  v22._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_58_3();
  v22._object = v7;
  uint64_t v20 = 32LL;
  unint64_t v21 = 0xE100000000000000LL;
  uint64_t v18 = 95LL;
  unint64_t v19 = 0xE100000000000000LL;
  lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_10_14((uint64_t)&v20, (uint64_t)&v18);
  OUTLINED_FUNCTION_23_5();
  OUTLINED_FUNCTION_31_3();
  v22._uint64_t countAndFlagsBits = v8;
  v22._object = v9;
  OUTLINED_FUNCTION_3_20();
  v23._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_78_2();
  OUTLINED_FUNCTION_99_0(v23);
  OUTLINED_FUNCTION_87_0();
  OUTLINED_FUNCTION_23_5();
  object = v22._object;
  *(void *)(v6 + 32) = v22._countAndFlagsBits;
  *(void *)(v6 + 40) = object;
  v22._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_33_7();
  v22._object = v11;
  uint64_t v20 = 32LL;
  unint64_t v21 = 0xE100000000000000LL;
  uint64_t v18 = 95LL;
  unint64_t v19 = 0xE100000000000000LL;
  OUTLINED_FUNCTION_10_14((uint64_t)&v20, (uint64_t)&v18);
  OUTLINED_FUNCTION_23_5();
  OUTLINED_FUNCTION_31_3();
  v22._uint64_t countAndFlagsBits = v12;
  v22._object = v13;
  OUTLINED_FUNCTION_3_20();
  v24._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_78_2();
  OUTLINED_FUNCTION_99_0(v24);
  OUTLINED_FUNCTION_87_0();
  OUTLINED_FUNCTION_23_5();
  uint64_t v14 = v22._object;
  *(void *)(v6 + 48) = v22._countAndFlagsBits;
  *(void *)(v6 + 56) = v14;
  Swift::String v22 = String.uppercased()();
  uint64_t v20 = 32LL;
  unint64_t v21 = 0xE100000000000000LL;
  uint64_t v18 = 95LL;
  unint64_t v19 = 0xE100000000000000LL;
  OUTLINED_FUNCTION_10_14((uint64_t)&v20, (uint64_t)&v18);
  OUTLINED_FUNCTION_23_5();
  OUTLINED_FUNCTION_125_0();
  v22._uint64_t countAndFlagsBits = v15;
  v22._object = v16;
  OUTLINED_FUNCTION_3_20();
  v25._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_99_0(v25);
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_4_1();
  uint64_t v17 = v22._object;
  *(void *)(v6 + 64) = v22._countAndFlagsBits;
  *(void *)(v6 + 72) = v17;
  OUTLINED_FUNCTION_82_2();
  static PhoneCallNLContextProvider.makeSDAForConfirmation()();
  OUTLINED_FUNCTION_83_1();
  OUTLINED_FUNCTION_38_5();
}

void static PhoneCallNLContextProvider.makeNLContextUpdateForDisambiguation(apps:device:)()
{
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  unint64_t v6 = v5;
  uint64_t v63 = v7;
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  uint64_t v57 = v10;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  uint64_t v12 = (os_log_s *)((char *)&v57 - v11);
  uint64_t v13 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions(0LL);
  uint64_t v65 = *(void *)(v13 - 8);
  uint64_t v66 = v13;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  uint64_t v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v64 = (char *)&v57 - v16;
  uint64_t v17 = OUTLINED_FUNCTION_42_4();
  uint64_t v60 = *(void *)(v17 - 8);
  uint64_t v61 = v17;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_22_5();
  uint64_t v18 = type metadata accessor for AppInfoBuilder();
  swift_initStackObject(v18, &v74);
  unint64_t v67 = v6;
  Swift::String v68 = v4;
  specialized static PhoneContactDisplayHintFactory.build(for:deviceState:appInfoBuilder:)();
  uint64_t v58 = v19;
  NLContextUpdate.init()();
  OUTLINED_FUNCTION_74_1();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v21 = OUTLINED_FUNCTION_8_2(v20, 80LL);
  *(_OWORD *)(v21 + 16) = xmmword_320080;
  if (one-time initialization token for appName != -1) {
    swift_once(&one-time initialization token for appName, one-time initialization function for appName);
  }
  *(void *)(v21 + 32) = TerminalOntologyNode.name.getter();
  *(void *)(v21 + 40) = v22;
  if (one-time initialization token for reference != -1) {
    swift_once(&one-time initialization token for reference, one-time initialization function for reference);
  }
  uint64_t v62 = v9;
  *(void *)(v21 + 48) = TerminalOntologyNode.name.getter();
  *(void *)(v21 + 56) = v23;
  if (one-time initialization token for confirmation != -1) {
    swift_once(&one-time initialization token for confirmation, one-time initialization function for confirmation);
  }
  *(void *)(v21 + 64) = TerminalOntologyNode.name.getter();
  *(void *)(v21 + 72) = v24;
  NLContextUpdate.weightedPromptResponseTargets.setter(v21);
  uint64_t v25 = OUTLINED_FUNCTION_8_2(v20, 48LL);
  __int128 v59 = xmmword_31D870;
  *(_OWORD *)(v25 + 16) = xmmword_31D870;
  uint64_t v70 = OUTLINED_FUNCTION_33_7();
  uint64_t v71 = v26;
  v69[0] = 32LL;
  v69[1] = 0xE100000000000000LL;
  uint64_t v72 = 95LL;
  unint64_t v73 = 0xE100000000000000LL;
  char v55 = (void *)lazy protocol witness table accessor for type String and conformance String();
  uint64_t v56 = v55;
  *(void *)&__int128 v54 = &type metadata for String;
  *((void *)&v54 + 1) = v55;
  OUTLINED_FUNCTION_32_7((uint64_t)v69, (uint64_t)&v72, v27, v28, v29, v30, (uint64_t)&type metadata for String);
  os_log_type_t v32 = v31;
  OUTLINED_FUNCTION_70_2();
  OUTLINED_FUNCTION_31_3();
  uint64_t v70 = v33;
  uint64_t v71 = v34;
  OUTLINED_FUNCTION_3_20();
  Swift::String v35 = String.uppercased()();
  String.append(_:)(v35);
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_39();
  uint64_t v36 = v71;
  *(void *)(v25 + 32) = v70;
  *(void *)(v25 + 40) = v36;
  NLContextUpdate.weightedPromptResponseOptions.setter(v25);
  OUTLINED_FUNCTION_104_1();
  NLContextUpdate.displayHints.setter(v58);
  __chkstk_darwin();
  __int128 v54 = *(_OWORD *)((char *)v2 + class metadata base offset for PhoneCallNLContextProvider);
  char v55 = v68;
  uint64_t v56 = v2;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17SiriAppResolution0E0CG_0D8NLUTypes0D27_Nlu_External_UserDialogActVs5NeverOTg5( (void (*)(uint64_t *))partial apply for closure #1 in static PhoneCallNLContextProvider.makeNLContextUpdateForDisambiguation(apps:device:),  (uint64_t)(&v57 - 6),  v67);
  uint64_t v38 = v37;
  uint64_t v39 = v64;
  Siri_Nlu_External_SystemGaveOptions.init()(v37);
  uint64_t v40 = Siri_Nlu_External_SystemGaveOptions.choices.setter(v38);
  Siri_Nlu_External_SystemDialogAct.init()(v40);
  (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v15, v39, v66);
  uint64_t v41 = v12;
  Siri_Nlu_External_SystemDialogAct.gaveOptions.setter(v15);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v42 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v42, (uint64_t)static Logger.siriPhone);
  os_log_type_t v43 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_63(v43))
  {
    uint64_t v44 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v45 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v70 = v45;
    *(_DWORD *)uint64_t v44 = 136315138;
    uint64_t v58 = v44 + 4;
    OUTLINED_FUNCTION_22_0((uint64_t)v12, (uint64_t)v69);
    uint64_t v46 = (uint64_t)v12;
    uint64_t v47 = v62;
    uint64_t v48 = v57;
    OUTLINED_FUNCTION_103_0(v57, v46, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 16));
    uint64_t v49 = specialized String.init(describing:)( v48,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_SystemDialogAct,  &lazy protocol witness table cache variable for type Siri_Nlu_External_SystemDialogAct and conformance Siri_Nlu_External_SystemDialogAct,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_SystemDialogAct);
    uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v58);
    OUTLINED_FUNCTION_87_0();
    OUTLINED_FUNCTION_57_0( &dword_0,  v41,  v32,  "#PhoneCallNLContextProvider makeNLContextUpdateForDisambiguation: sending disambiguation system dialog acts: %s",  v44);
    OUTLINED_FUNCTION_17_0(v45);
    OUTLINED_FUNCTION_0_2(v45);
    OUTLINED_FUNCTION_0_2((uint64_t)v44);
  }

  else
  {

    uint64_t v46 = (uint64_t)v12;
    uint64_t v47 = v62;
  }

  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  uint64_t v52 = OUTLINED_FUNCTION_39_5(v51, *(void *)(v47 + 72));
  *(_OWORD *)(v52 + 16) = v59;
  OUTLINED_FUNCTION_22_0(v46, (uint64_t)&v70);
  OUTLINED_FUNCTION_103_0((uint64_t)v41 + v52, v46, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 16));
  NLContextUpdate.nluSystemDialogActs.setter(v52);
  static PhoneReferenceResolution.appsToRrEntities(apps:device:)(v67, v68);
  NLContextUpdate.rrEntities.setter(v53);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v64, v66);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 32))(v63, v1, v61);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v8);
  OUTLINED_FUNCTION_7_5();
}

uint64_t closure #1 in static PhoneCallNLContextProvider.makeNLContextUpdateForDisambiguation(apps:device:)@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v60 = a3;
  uint64_t v62 = a4;
  uint64_t v56 = type metadata accessor for PhoneError(0LL);
  __chkstk_darwin();
  char v55 = (uint64_t *)((char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  __int128 v54 = (char *)&v50 - v7;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v52 = *(void *)(v8 - 8);
  uint64_t v53 = v8;
  __chkstk_darwin();
  uint64_t v51 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Locale(0LL);
  uint64_t v58 = *(void *)(v10 - 8);
  uint64_t v59 = v10;
  __chkstk_darwin();
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v57 = type metadata accessor for Siri_Nlu_External_UserStatedTask(0LL);
  uint64_t v15 = *(void *)(v57 - 8);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin();
  uint64_t v20 = (char *)&v50 - v19;
  uint64_t v21 = *a1;
  Siri_Nlu_External_UserStatedTask.init()(v18);
  uint64_t v23 = a2[3];
  uint64_t v22 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v23);
  dispatch thunk of DeviceState.siriLocale.getter(v23, v22);
  uint64_t v24 = v61;
  static PhoneCallNLContextProvider.createUsoGraph(for:locale:)(v21, (uint64_t)v12);
  if (v24)
  {
    uint64_t v29 = v52;
    uint64_t v28 = v53;
    uint64_t v30 = (uint64_t)v54;
    os_log_type_t v31 = v55;
    os_log_type_t v32 = v51;
    uint64_t v33 = v56;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v12, v59);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v34 = __swift_project_value_buffer(v28, (uint64_t)static Logger.siriPhone);
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v32, v34, v28);
    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserWantedToProceed.Type);
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserWantedToProceed.Type.Type);
    uint64_t v36 = String.init<A>(describing:)(&v66, v35);
    uint64_t v38 = v37;
    swift_getErrorValue(v24, v65, v64);
    uint64_t v39 = Error.localizedDescription.getter(v64[1], v64[2]);
    *os_log_type_t v31 = v36;
    v31[1] = v38;
    v31[2] = v39;
    v31[3] = v40;
    swift_storeEnumTagMultiPayload(v31, v33, 5LL);
    PhoneError.logged()(v30);
    outlined destroy of PhoneError((uint64_t)v31);
    lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError,  type metadata accessor for PhoneError,  (uint64_t)&protocol conformance descriptor for PhoneError);
    uint64_t v42 = Error.localizedDescription.getter(v33, v41);
    unint64_t v44 = v43;
    outlined destroy of PhoneError(v30);
    uint64_t v45 = swift_bridgeObjectRetain_n(v44, 2LL);
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v49 = swift_slowAlloc(32LL, -1LL);
      uint64_t v66 = v49;
      *(_DWORD *)uint64_t v48 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v63 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v48 + 4);
      swift_bridgeObjectRelease_n(v44, 3LL);
      _os_log_impl(&dword_0, v46, v47, "%s", v48, 0xCu);
      swift_arrayDestroy(v49, 1LL);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v44, 2LL);
    }

    static SiriKitLifecycle._logCrashToEventBus(_:)(v42, v44);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v42,  v44,  "PhoneCallFlowDelegatePlugin/PhoneLog.swift",  42LL,  2LL);
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v58 + 8))(v12, v59);
    uint64_t v25 = Siri_Nlu_External_UserStatedTask.task.setter(v14);
    Siri_Nlu_External_UserDialogAct.init()(v25);
    uint64_t v26 = v57;
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, v20, v57);
    Siri_Nlu_External_UserDialogAct.userStatedTask.setter(v17);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v20, v26);
  }

  return result;
}

uint64_t static PhoneCallNLContextProvider.createUsoGraph(for:locale:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UsoEntityBuilder_common_PhoneCall(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  uint64_t v4 = UsoEntityBuilder_common_PhoneCall.init()();
  uint64_t v5 = App.toUsoEntityBuilder(locale:)(a2);
  dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoAssociatedApp(value:)( v5,  &protocol witness table for UsoEntityBuilder_common_App);
  swift_release(v5);
  uint64_t v6 = type metadata accessor for UsoTaskBuilder_call_common_PhoneCall(0LL);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  uint64_t v7 = UsoTaskBuilder_call_common_PhoneCall.init()();
  dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)(v4);
  UsoTaskBuilder.asUsoGraph()();
  swift_release(v4);
  return swift_release(v7);
}

void PhoneCallNLContextProvider.__allocating_init()()
{
}

void PhoneCallNLContextProvider.init()()
{
}

uint64_t PhoneCallNLContextProvider.__ivar_destroyer()
{
  __swift_destroy_boxed_opaque_existential_1((void *)((char *)v0
                                                      + *(void *)(class metadata base offset for PhoneCallNLContextProvider
                                                                  + *v0
                                                                  + 16)));
  return __swift_destroy_boxed_opaque_existential_1((void *)((char *)v0
                                                             + *(void *)(class metadata base offset for PhoneCallNLContextProvider
                                                                         + *v0
                                                                         + 24)));
}

void PhoneCallNLContextProvider.deinit()
{
  uint64_t v1 = (void *)DefaultNLContextProvider.deinit();
  OUTLINED_FUNCTION_146();
  __swift_destroy_boxed_opaque_existential_1((void *)(v2 + v3));
  __swift_destroy_boxed_opaque_existential_1((void *)((char *)v1 + *(void *)(*(void *)(v0 + 1984) + *v1 + 24LL)));
  OUTLINED_FUNCTION_2();
}

uint64_t PhoneCallNLContextProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 96LL, 7LL);
}

void specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

{
  void (*v0)(uint64_t, uint64_t, void *);
  void *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void (*v9)(void, uint64_t, void *, uint64_t);
  uint64_t v10;
  uint64_t v3 = OUTLINED_FUNCTION_73_1();
  *uint64_t v1 = v2;
  if (!v3)
  {
    OUTLINED_FUNCTION_79_0();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v4,  v5,  v6,  v7,  v8,  v9,  v0);
    *uint64_t v1 = v10;
  }

  OUTLINED_FUNCTION_16();
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

{
  uint64_t (*v0)(void);
  void *v1;
  uint64_t v2;
  int v3;
  uint64_t v3 = OUTLINED_FUNCTION_73_1();
  *uint64_t v1 = v2;
  if (!v3)
  {
    OUTLINED_FUNCTION_79_0();
    *uint64_t v1 = v0();
  }

  OUTLINED_FUNCTION_16();
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  uint64_t *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v1 = *v0;
  uint64_t v2 = OUTLINED_FUNCTION_140();
  void *v0 = v1;
  if (!v2)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    void *v0 = v3;
  }

void specialized Array._makeUniqueAndReserveCapacityIfNotUnique()( uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = v3;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native) {
    *uint64_t v1 = a1(isUniquelyReferenced_nonNull_native, *(void *)(v3 + 16) + 1LL, 1LL, v3);
  }
  OUTLINED_FUNCTION_6();
}

void specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
}

{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(void, uint64_t, void *, uint64_t);
  uint64_t v3;
  uint64_t *v4;
  void (*v5)(uint64_t, uint64_t, void *);
  unint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  OUTLINED_FUNCTION_122_1();
  if (!(v8 ^ v9 | v7))
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v6 > 1,  v1,  1LL,  v3,  v4,  v2,  v5);
    void *v0 = v10;
  }

{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

{
  void *v0;
  uint64_t (*v1)(BOOL);
  unint64_t v2;
  char v3;
  char v4;
  char v5;
  OUTLINED_FUNCTION_121_1();
  if (!(v4 ^ v5 | v3)) {
    void *v0 = v1(v2 > 1);
  }
}

{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

{
  void *v0;
  uint64_t (*v1)(BOOL);
  unint64_t v2;
  char v3;
  char v4;
  char v5;
  OUTLINED_FUNCTION_121_1();
  if (!(v4 ^ v5 | v3)) {
    void *v0 = v1(v2 > 1);
  }
}

{
  void *v0;
  char v1;
  char v2;
  char v3;
  uint64_t v4;
  OUTLINED_FUNCTION_122_1();
  if (!(v2 ^ v3 | v1))
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    void *v0 = v4;
  }

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  unint64_t v2 = *(void *)((char *)&dword_18 + (*v1 & 0xFFFFFFFFFFFFF8LL));
  return result;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(void, uint64_t, void *, uint64_t), void (*a7)(uint64_t, uint64_t, void *))
{
  char v10 = a1;
  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_13_17();
    if (v12 != v13)
    {
      OUTLINED_FUNCTION_40_4();
      if (v12)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_15_10();
    }
  }

  else
  {
    uint64_t v11 = a2;
  }

  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (v15)
  {
    uint64_t v16 = OUTLINED_FUNCTION_30_7(a1, a2, a3, a4, a5);
    uint64_t v17 = (void *)OUTLINED_FUNCTION_8_2(v16, 16 * v15 + 32);
    size_t v18 = _swift_stdlib_malloc_size(v17);
    v17[2] = v14;
    v17[3] = 2 * ((uint64_t)(v18 - 32) / 16);
  }

  else
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
  }

  uint64_t v19 = v17 + 4;
  if ((v10 & 1) != 0)
  {
    a7(a4 + 32, v14, v19);
    OUTLINED_FUNCTION_17_15();
  }

  else
  {
    a6(0LL, v14, v19, a4);
  }

  OUTLINED_FUNCTION_16();
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)( uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    char v10 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v11 = 51LL;
    goto LABEL_11;
  }

  uint64_t v6 = (char *)(a4 + 8 * a1 + 32);
  uint64_t v7 = &__dst[8 * v4];
  if (v6 >= v7 || &v6[8 * v4] <= __dst)
  {
    memcpy(__dst, v6, 8 * v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  char v10 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v11 = 49LL;
LABEL_11:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v10,  v11,  2LL,  "Swift/UnsafePointer.swift",  25LL);
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v6;
  char *v7;
  char *result;
  const char *v10;
  uint64_t v11;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if ((v4 & 0x8000000000000000LL) != 0)
  {
LABEL_9:
    char v10 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v11 = 51LL;
    goto LABEL_11;
  }

  uint64_t v6 = (char *)(a4 + a1 + 32);
  uint64_t v7 = &__dst[v4];
  if (v6 >= &__dst[v4] || &v6[v4] <= __dst)
  {
    memcpy(__dst, v6, v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  char v10 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v11 = 49LL;
LABEL_11:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v10,  v11,  2LL,  "Swift/UnsafePointer.swift",  25LL);
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if ((v4 & 0x8000000000000000LL) != 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_17();
    OUTLINED_FUNCTION_64_0();
    goto LABEL_11;
  }

  uint64_t v5 = (char *)(a4 + a1 + 32);
  uint64_t v6 = &__dst[v4];
  if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
  {
    memcpy(__dst, v5, v4);
    OUTLINED_FUNCTION_39();
    return v6;
  }

  OUTLINED_FUNCTION_0_17();
  OUTLINED_FUNCTION_63_2();
LABEL_11:
  uint64_t result = (char *)OUTLINED_FUNCTION_5_15(v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

void specialized _ArrayBuffer._copyContents(subRange:initializing:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(void))
{
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (a2 - a1 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_17();
    OUTLINED_FUNCTION_64_0();
    goto LABEL_11;
  }

  a5(0LL);
  OUTLINED_FUNCTION_34_9();
  if (v7) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v6 > a3;
  }
  if (!v8)
  {
    OUTLINED_FUNCTION_86_2();
    OUTLINED_FUNCTION_39();
    OUTLINED_FUNCTION_26_1();
    return;
  }

  OUTLINED_FUNCTION_0_17();
  OUTLINED_FUNCTION_63_2();
LABEL_11:
  OUTLINED_FUNCTION_5_15(v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_17();
    uint64_t result = (char *)OUTLINED_FUNCTION_1_18( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }

  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_2_15(a3, result);
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_17();
    uint64_t result = (char *)OUTLINED_FUNCTION_1_18( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }

  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_2_15(a3, result);
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_17();
    uint64_t result = (char *)OUTLINED_FUNCTION_1_18( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }

  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_2_15(a3, result);
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_17();
    uint64_t result = (char *)OUTLINED_FUNCTION_1_18( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }

  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_2_15(a3, result);
  }

  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL);
    __break(1u);
  }

  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }

  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL);
    __break(1u);
  }

  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }

  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL);
    __break(1u);
  }

  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }

  return __src;
}

void specialized UnsafeMutablePointer.moveInitialize(from:count:)(uint64_t a1, uint64_t a2)
{
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_17();
    OUTLINED_FUNCTION_1_18( (uint64_t)"Fatal error",  v7,  v8,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v9,  v10,  (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }

  else
  {
    OUTLINED_FUNCTION_106_0();
    if (v5 && (__swift_instantiateConcreteTypeFromMangledName(v4), OUTLINED_FUNCTION_138(), !v6 & v5))
    {
      if (v3 == v2)
      {
        OUTLINED_FUNCTION_26_1();
      }

      else
      {
        OUTLINED_FUNCTION_37_7();
        OUTLINED_FUNCTION_56_3();
      }
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(v4);
      OUTLINED_FUNCTION_37_7();
      OUTLINED_FUNCTION_55_3();
    }
  }

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_17();
    OUTLINED_FUNCTION_1_18( (uint64_t)"Fatal error",  v7,  v8,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v9,  v10,  (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }

  else
  {
    OUTLINED_FUNCTION_106_0();
    if (v5 && (v4(0LL), OUTLINED_FUNCTION_138(), !v6 & v5))
    {
      if (v3 == v2)
      {
        OUTLINED_FUNCTION_26_1();
      }

      else
      {
        OUTLINED_FUNCTION_37_7();
        OUTLINED_FUNCTION_56_3();
      }
    }

    else
    {
      v4(0LL);
      OUTLINED_FUNCTION_37_7();
      OUTLINED_FUNCTION_55_3();
    }
  }

uint64_t sub_7707C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void partial apply for closure #1 in PhoneCallNLContextProvider.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:_:)( uint64_t a1)
{
}

uint64_t sub_770A8()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t partial apply for closure #1 in PhoneCallNLContextProvider.makeNeedsDisambiguationContextFor(parameter:items:completion:)( uint64_t a1)
{
  return closure #1 in PhoneCallNLContextProvider.makeNeedsDisambiguationContextFor(parameter:items:completion:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void (**)(_BYTE *))(v1 + 40));
}

void *outlined destroy of PhoneContactDisplayHintFactory(void *a1)
{
  return a1;
}

uint64_t specialized String.init(describing:)(uint64_t a1)
{
  return specialized String.init(describing:)( a1,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UserDialogAct,  (unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UserDialogAct);
}

{
  return specialized String.init(describing:)( a1,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_SystemPrompted,  &lazy protocol witness table cache variable for type Siri_Nlu_External_SystemPrompted and conformance Siri_Nlu_External_SystemPrompted,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_SystemPrompted);
}

{
  return specialized String.init(describing:)( a1,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_SystemDialogAct,  &lazy protocol witness table cache variable for type Siri_Nlu_External_SystemDialogAct and conformance Siri_Nlu_External_SystemDialogAct,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_SystemDialogAct);
}

uint64_t specialized String.init(describing:)( uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  uint64_t v8 = a2(0LL);
  v15[3] = v8;
  lazy protocol witness table accessor for type UUID and conformance UUID(a3, a2, a4);
  v15[4] = v9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(boxed_opaque_existential_1, a1, v8);
  type metadata accessor for SiriNLUTypesPrintUtils(0LL);
  v14[0] = static SiriNLUTypesPrintUtils.printableProtoObject(object:)(v15);
  v14[1] = v11;
  uint64_t v12 = String.init<A>(_:)( v14,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  __swift_destroy_boxed_opaque_existential_1(v15);
  return v12;
}

void specialized static PhoneContactDisplayHintFactory.build(for:deviceState:appInfoBuilder:)()
{
  uint64_t v87 = v0;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SemanticValue?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v77 = v3;
  uint64_t v4 = OUTLINED_FUNCTION_65_1();
  uint64_t v78 = type metadata accessor for DisplayHint(v4);
  uint64_t v76 = *(void *)(v78 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v85 = v5;
  uint64_t v6 = OUTLINED_FUNCTION_65_1();
  uint64_t v88 = type metadata accessor for SemanticValue(v6);
  uint64_t v90 = *(void *)(v88 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  uint64_t v75 = v7;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  uint64_t v84 = (char *)&v70 - v8;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  uint64_t v89 = (char *)&v70 - v9;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  uint64_t v11 = (char *)&v70 - v10;
  uint64_t v12 = type metadata accessor for Locale(0LL);
  uint64_t v82 = *(void *)(v12 - 8);
  uint64_t v83 = v12;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v81 = v13;
  uint64_t v14 = OUTLINED_FUNCTION_65_1();
  uint64_t v15 = type metadata accessor for OrdinalDisplayHintsBuilder(v14);
  uint64_t v73 = *(void *)(v15 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v72 = v16;
  v95[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0) {
      uint64_t v55 = v2;
    }
    else {
      uint64_t v55 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_128();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v55);
    if (v17) {
      goto LABEL_3;
    }
LABEL_34:
    OUTLINED_FUNCTION_23_5();
    uint64_t v19 = _swiftEmptyArrayStorage;
    goto LABEL_35;
  }

  uint64_t v17 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
  OUTLINED_FUNCTION_128();
  if (!v17) {
    goto LABEL_34;
  }
LABEL_3:
  if (v17 < 1)
  {
    __break(1u);
    return;
  }

  uint64_t v71 = v15;
  uint64_t v18 = 0LL;
  unint64_t v86 = v2 & 0xC000000000000001LL;
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v79 = v2;
  uint64_t v80 = v17;
  uint64_t v74 = v11;
  do
  {
    if (v86)
    {
      uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v2);
    }

    else
    {
      uint64_t v20 = *(void *)(v2 + 8 * v18 + 32);
      OUTLINED_FUNCTION_95_1();
    }

    OUTLINED_FUNCTION_95_1();
    uint64_t v21 = v20;
    if (App.isFirstParty()())
    {
      uint64_t v21 = static UserFacingCallingAppUtils.getCommAppForLaunch(originalApp:preferredCallProvider:deviceState:)( v20,  0LL,  v87);
      OUTLINED_FUNCTION_76();
    }

    uint64_t v22 = App.appIdentifier.getter();
    if (v23)
    {
      uint64_t v24 = v22;
      uint64_t v25 = v23;
      uint64_t v26 = v87[3];
      uint64_t v27 = v87[4];
      __swift_project_boxed_opaque_existential_1(v87, v26);
      uint64_t v28 = v81;
      dispatch thunk of DeviceState.siriLocale.getter(v26, v27);
      uint64_t v29 = type metadata accessor for AppInfoBuilder();
      swift_initStackObject(v29, &v91);
      uint64_t v30 = AppInfoBuilder.getAppName(_:requestedLocale:)(v21, v28);
      uint64_t v32 = v31;
      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v28, v83);
      if (v32)
      {
        uint64_t v33 = v21;
        if (one-time initialization token for applicationId != -1) {
          swift_once( &one-time initialization token for applicationId,  one-time initialization function for applicationId);
        }
        uint64_t v34 = TerminalOntologyNode.name.getter();
        uint64_t v35 = v74;
        SemanticValue.init(string:label:)(v24, v25, v34, v36);
        if (one-time initialization token for appName != -1) {
          swift_once(&one-time initialization token for appName, one-time initialization function for appName);
        }
        uint64_t v37 = TerminalOntologyNode.name.getter();
        SemanticValue.init(string:label:)(v30, v32, v37, v38);
        uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
        v39(v84, v35, v88);
        uint64_t v40 = v35;
        if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v19 = v51;
        }

        uint64_t v2 = v79;
        unint64_t v42 = v19[2];
        unint64_t v41 = v19[3];
        if (v42 >= v41 >> 1)
        {
          OUTLINED_FUNCTION_112(v41);
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v19 = v52;
        }

        v19[2] = v42 + 1;
        uint64_t v43 = v88;
        (*(void (**)(unint64_t, char *, uint64_t))(v90 + 32))( (unint64_t)v19 + ((*(unsigned __int8 *)(v90 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80))
        + *(void *)(v90 + 72) * v42,
          v84,
          v88);
        uint64_t v44 = v77;
        v39((char *)v77, v40, v43);
        __swift_storeEnumTagSinglePayload(v44, 0LL, 1LL, v43);
        uint64_t v45 = v75;
        v39(v75, v89, v43);
        DisplayHint.init(idValue:displayValue:)(v44, v45);
        uint64_t v46 = v95[0];
        if ((OUTLINED_FUNCTION_140() & 1) == 0)
        {
          OUTLINED_FUNCTION_107_0();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v46 = v53;
        }

        unint64_t v48 = *(void *)(v46 + 16);
        unint64_t v47 = *(void *)(v46 + 24);
        if (v48 >= v47 >> 1)
        {
          OUTLINED_FUNCTION_85_2(v47);
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v46 = v54;
        }

        *(void *)(v46 + 16) = v48 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v76 + 32))( v46 + ((*(unsigned __int8 *)(v76 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80))
        + *(void *)(v76 + 72) * v48,
          v85,
          v78);
        OUTLINED_FUNCTION_76();
        swift_release(v33);
        v95[0] = v46;
        uint64_t v49 = *(void (**)(char *, uint64_t))(v90 + 8);
        uint64_t v50 = v88;
        v49(v89, v88);
        v49(v40, v50);
      }

      else
      {
        OUTLINED_FUNCTION_13_1();
        OUTLINED_FUNCTION_76();
        swift_release(v21);
        uint64_t v2 = v79;
      }

      uint64_t v17 = v80;
    }

    else
    {
      OUTLINED_FUNCTION_76();
      swift_release(v21);
    }

    ++v18;
  }

  while (v17 != v18);
  OUTLINED_FUNCTION_23_5();
  uint64_t v15 = v71;
LABEL_35:
  if (one-time initialization token for reference != -1) {
    swift_once(&one-time initialization token for reference, one-time initialization function for reference);
  }
  uint64_t v56 = TerminalOntologyNode.name.getter();
  uint64_t v57 = v72;
  OrdinalDisplayHintsBuilder.init(referenceNode:)(v56, v58);
  uint64_t v59 = OrdinalDisplayHintsBuilder.build(for:)(v19);
  OUTLINED_FUNCTION_70_2();
  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v57, v15);
  specialized Array.append<A>(contentsOf:)(v59);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v60 = OUTLINED_FUNCTION_15_1();
  uint64_t v61 = (os_log_s *)OUTLINED_FUNCTION_12_1(v60, (uint64_t)static Logger.siriPhone);
  os_log_type_t v63 = static os_log_type_t.debug.getter(v61, v62);
  if (OUTLINED_FUNCTION_87(v63))
  {
    uint64_t v64 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v65 = OUTLINED_FUNCTION_7_0(32LL);
    v94[0] = v65;
    *(_DWORD *)uint64_t v64 = 136315138;
    OUTLINED_FUNCTION_22_0((uint64_t)v95, (uint64_t)v93);
    uint64_t v66 = OUTLINED_FUNCTION_128();
    uint64_t v67 = Array.description.getter(v66, v78);
    unint64_t v69 = v68;
    OUTLINED_FUNCTION_23_5();
    uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v69, v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v64 + 4);
    OUTLINED_FUNCTION_87_0();
    OUTLINED_FUNCTION_57_0(&dword_0, v61, (os_log_type_t)v15, "Built display hints for app disambiguation: %s'", v64);
    OUTLINED_FUNCTION_17_0(v65);
    OUTLINED_FUNCTION_0_2(v65);
    OUTLINED_FUNCTION_0_2((uint64_t)v64);
  }

  OUTLINED_FUNCTION_22_0((uint64_t)v95, (uint64_t)v94);
  OUTLINED_FUNCTION_7_5();
}

uint64_t partial apply for closure #1 in static PhoneCallNLContextProvider.makeNLContextUpdateForDisambiguation(apps:device:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in static PhoneCallNLContextProvider.makeNLContextUpdateForDisambiguation(apps:device:)( a1,  *(void **)(v2 + 32),  *(void *)(v2 + 40),  a2);
}

uint64_t type metadata completion function for PhoneCallNLContextProvider(uint64_t a1)
{
  v2[0] = "(";
  v2[1] = "(";
  return swift_initClassMetadata2(a1, 0LL, 2LL, v2, class metadata base offset for PhoneCallNLContextProvider + a1 + 16);
}

uint64_t type metadata accessor for PhoneCallNLContextProvider( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for PhoneCallNLContextProvider);
}

unint64_t type metadata accessor for INPerson()
{
  unint64_t result = lazy cache variable for type metadata for INPerson;
  if (!lazy cache variable for type metadata for INPerson)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___INPerson);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INPerson);
  }

  return result;
}

  ;
}

uint64_t OUTLINED_FUNCTION_1_18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 55LL, 2LL, a7, 25LL);
}

void *OUTLINED_FUNCTION_2_15@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

void OUTLINED_FUNCTION_3_20()
{
  v0._uint64_t countAndFlagsBits = 0x2E65756C61562ELL;
  v0._object = (void *)0xE700000000000000LL;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_10_14(uint64_t a1, uint64_t a2)
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(a1, a2, 0LL, 0LL, 0LL, 1LL, v2, v2);
}

uint64_t OUTLINED_FUNCTION_16_8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  a17 = a1;
  a18 = a2;
  a15 = 32LL;
  a16 = v20;
  a13 = v19;
  a14 = v20;
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&a15, &a13, 0LL, 0LL, 0LL, 1LL, v18, v18);
}

uint64_t OUTLINED_FUNCTION_17_15()
{
  *(void *)(v0 + 16) = 0LL;
  return swift_bridgeObjectRelease(v0);
}

void OUTLINED_FUNCTION_24_5(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

char *OUTLINED_FUNCTION_28_6( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  return &a15;
}

uint64_t OUTLINED_FUNCTION_32_7( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(a1, a2, 0LL, 0LL, 0LL, 1LL, a7, a7);
}

uint64_t OUTLINED_FUNCTION_33_7()
{
  return String.uppercased()()._countAndFlagsBits;
}

  ;
}

BOOL OUTLINED_FUNCTION_35_3(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_37_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_39_5@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return swift_allocObject(a1, ((v2 + 32) & ~v2) + a2, v2 | 7);
}

uint64_t OUTLINED_FUNCTION_44_6()
{
  return 0LL;
}

  ;
}

uint64_t OUTLINED_FUNCTION_50_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, v6, v7, a6, 42LL, 2LL);
}

uint64_t OUTLINED_FUNCTION_52_5()
{
  return NLContextUpdate.weightedPromptResponseTargets.setter(v0);
}

uint64_t OUTLINED_FUNCTION_53_3(uint64_t a1)
{
  *(void *)(v3 - 176) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 176, v3 - 168, v2, v1);
}

uint64_t OUTLINED_FUNCTION_55_3()
{
  return ((uint64_t (*)(void))swift_arrayInitWithTakeFrontToBack)();
}

uint64_t OUTLINED_FUNCTION_56_3()
{
  return ((uint64_t (*)(void))swift_arrayInitWithTakeBackToFront)();
}

uint64_t OUTLINED_FUNCTION_58_3()
{
  return String.uppercased()()._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_59_4(uint64_t a1, uint64_t a2)
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(a1, a2, 0LL, 0LL, 0LL, 1LL, v2, v2);
}

uint64_t OUTLINED_FUNCTION_62_2(uint64_t a1)
{
  return v1(v2);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_70_2()
{
  return swift_bridgeObjectRelease(v0);
}

void OUTLINED_FUNCTION_71_2(Swift::String a1)
{
}

uint64_t OUTLINED_FUNCTION_72_2()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_73_1()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

void OUTLINED_FUNCTION_74_1()
{
}

uint64_t OUTLINED_FUNCTION_75_1(float a1)
{
  *uint64_t v2 = a1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t OUTLINED_FUNCTION_78_2()
{
  return String.uppercased()()._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_81_2()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_82_2()
{
  return NLContextUpdate.weightedPromptResponseOptions.setter();
}

uint64_t OUTLINED_FUNCTION_83_1()
{
  return NLContextUpdate.nluSystemDialogActs.setter();
}

uint64_t OUTLINED_FUNCTION_84_1()
{
  return NLContextUpdate.weightedPromptTargetDomain.setter();
}

BOOL OUTLINED_FUNCTION_85_2@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_86_2()
{
  return swift_arrayInitWithCopy(v0);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_92_2@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL);
}

uint64_t OUTLINED_FUNCTION_94_1()
{
  return outlined destroy of PhoneError(v0);
}

uint64_t OUTLINED_FUNCTION_98_2()
{
  return static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)(v0, 0LL);
}

void OUTLINED_FUNCTION_99_0(Swift::String a1)
{
}

uint64_t OUTLINED_FUNCTION_101_0()
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0, v1, (uint64_t *)(v2 - 152));
}

  ;
}

uint64_t OUTLINED_FUNCTION_103_0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_104_1()
{
  return NLContextUpdate.weightedPromptStrict.setter(1LL);
}

void OUTLINED_FUNCTION_105_0(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * (a1 / v3);
}

  ;
}

void OUTLINED_FUNCTION_110_1(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

BOOL OUTLINED_FUNCTION_112@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void OUTLINED_FUNCTION_113_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(void, uint64_t, void *, uint64_t), void (*a7)(uint64_t, uint64_t, void *))
{
}

uint64_t OUTLINED_FUNCTION_114()
{
  return type metadata accessor for UsoBuilderOptions(0LL);
}

uint64_t OUTLINED_FUNCTION_115(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 - 152) = a1;
  return specialized Array._endMutation()(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_117_0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

PhoneCallFlowDelegatePlugin::PhoneCallSlotNames_optional OUTLINED_FUNCTION_120_1()
{
  v2._uint64_t countAndFlagsBits = v1;
  v2._object = v0;
  return PhoneCallSlotNames.init(rawValue:)(v2);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_123()
{
  return String.uppercased()()._countAndFlagsBits;
}

void OUTLINED_FUNCTION_125_0()
{
}

uint64_t OUTLINED_FUNCTION_126()
{
  return Error.localizedDescription.getter(*(void *)(v0 - 120), *(void *)(v0 - 112));
}

uint64_t OUTLINED_FUNCTION_127()
{
  return String.uppercased()()._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_130(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_131_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2LL, a7, 24LL);
}

uint64_t OUTLINED_FUNCTION_132_0(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 152));
}

_WORD *OUTLINED_FUNCTION_133(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_134_0()
{
  return PhoneError.logged()(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_136()
{
  return v0(0LL);
}

uint64_t OUTLINED_FUNCTION_137(uint64_t a1)
{
  *(void *)(v1 - 184) = a1;
  return v1 - 184;
}

  ;
}

void OUTLINED_FUNCTION_139()
{
}

uint64_t OUTLINED_FUNCTION_140()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t OUTLINED_FUNCTION_141_0()
{
  return static SiriKitLifecycle._logCrashToEventBus(_:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_143()
{
  return NLContextUpdate.init()();
}

size_t OUTLINED_FUNCTION_144(const void *ptr)
{
  return _swift_stdlib_malloc_size(ptr);
}

void *OUTLINED_FUNCTION_145_0(uint64_t a1, uint64_t a2)
{
  *uint64_t v4 = v2;
  v4[1] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return v4;
}

uint64_t OUTLINED_FUNCTION_148(uint64_t a1)
{
  return String.init<A>(describing:)(v1 - 152, a1);
}

uint64_t OUTLINED_FUNCTION_149_0()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t one-time initialization function for faceTimeUsoApp()
{
  uint64_t result = closure #1 in variable initialization expression of static AddOrCallPromptForValueStrategy.faceTimeUsoApp();
  static AddOrCallPromptForValueStrategy.faceTimeUsoApp = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static AddOrCallPromptForValueStrategy.faceTimeUsoApp()
{
  uint64_t v0 = type metadata accessor for UsoIdentifier(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for UsoEntityBuilder_common_App(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t v5 = UsoEntityBuilder_common_App.init()();
  dispatch thunk of UsoEntityBuilder_common_App.setName(value:)(0x656D695465636146LL, 0xE800000000000000LL);
  UsoIdentifier.init(value:appBundleId:namespace:)( 0xD000000000000012LL,  0x80000000003479B0LL,  0x746163696C707041LL,  0xEC000000736E6F69LL,  0x64695F6D657469LL,  0xE700000000000000LL);
  dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v5;
}

void EmergencyCountdownOutputBuilder.sharedGlobals.getter(uint64_t a1@<X8>)
{
}

uint64_t CallingIntentContinueInAppStrategy.phoneCallDisplayTextCATsSimple.getter()
{
  return swift_retain(*(void *)(v0 + 64));
}

uint64_t ParticipantOutputProvider.cats.getter()
{
  return swift_retain(*(void *)(v0 + 72));
}

uint64_t ParticipantOutputProvider.startCallCats.getter()
{
  return swift_retain(*(void *)(v0 + 80));
}

void ParticipantOutputProvider.startCallCatPatterns.getter(uint64_t a1@<X8>)
{
}

#error "78184: call analysis failed (funcsize=28)"
#error "781E0: call analysis failed (funcsize=23)"
void AddOrCallPromptForValueStrategy.actionForInput(_:)()
{
  os_log_s *v0;
  os_log_s *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  _WORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  os_log_s *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  OUTLINED_FUNCTION_29_2();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for Parse(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<OngoingCallConfirmIntentFlow.Action>);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (unsigned __int8 *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = (char *)&v38 - v13;
  Input.parse.getter(v12);
  AddOrCallPromptForValueStrategy.parsePromptResponse(from:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(unsigned __int8 *, char *, uint64_t))(v9 + 16))(v11, v14, v8);
  uint64_t v15 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v9 + 88))(v11, v8);
  if (v15 == enum case for PromptResult.answered<A>(_:))
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v9 + 96))(v11, v8);
    uint64_t v16 = *v11;
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v17 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v17, (uint64_t)static Logger.siriPhone);
    uint64_t v18 = OUTLINED_FUNCTION_6_0();
    if (os_log_type_enabled(v0, v18))
    {
      unint64_t v41 = v16;
      uint64_t v19 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v20 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v39 = v0;
      uint64_t v40 = v3;
      *(_DWORD *)uint64_t v19 = 136315138;
      uint64_t v43 = v20;
      if (v41) {
        uint64_t v21 = 0x6C61436F54646461LL;
      }
      else {
        uint64_t v21 = 0x6C6C614377656ELL;
      }
      uint64_t v22 = v14;
      if (v41) {
        uint64_t v23 = 0xE90000000000006CLL;
      }
      else {
        uint64_t v23 = 0xE700000000000000LL;
      }
      unint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v43);
      LOBYTE(v16) = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v19 + 4);
      uint64_t v14 = v22;
      uint64_t v1 = v39;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_57_0(&dword_0, v0, v18, "#AddOrCallPromptForValueStrategy received response: %s", v19);
      OUTLINED_FUNCTION_17_0(v20);
      OUTLINED_FUNCTION_0_2(v20);
      OUTLINED_FUNCTION_0_2((uint64_t)v19);
    }

    *((_BYTE *)v1 + 16) = v16;
    static ActionForInput.handle()(v24);
LABEL_19:
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    goto LABEL_25;
  }

  if (v15 == enum case for PromptResult.cancelled<A>(_:))
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v25 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v25, (uint64_t)static Logger.siriPhone);
    uint64_t v26 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_93(v26))
    {
      uint64_t v27 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      *uint64_t v27 = 0;
      OUTLINED_FUNCTION_38_8(&dword_0, v28, v29, "#AddOrCallPromptForValueStrategy response is cancellation");
      OUTLINED_FUNCTION_0_2((uint64_t)v27);
    }

    static ActionForInput.cancel()(v30);
    goto LABEL_19;
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v31 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v31, (uint64_t)static Logger.siriPhone);
  uint64_t v32 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_93(v32))
  {
    uint64_t v33 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
    void *v33 = 0;
    OUTLINED_FUNCTION_38_8(&dword_0, v34, v35, "#AddOrCallPromptForValueStrategy response not recognized, ignoring");
    OUTLINED_FUNCTION_0_2((uint64_t)v33);
  }

  static ActionForInput.ignore()(v36);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v9 + 8);
  v37(v14, v8);
  v37((char *)v11, v8);
LABEL_25:
  OUTLINED_FUNCTION_7_5();
}

uint64_t AddOrCallPromptForValueStrategy.parseValueResponse(input:)()
{
  *(void *)(v1 + 16) = v0;
  return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.parseValueResponse(input:));
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(*(void *)(v0 + 16) + 16LL));
}

uint64_t AddOrCallPromptForValueStrategy.makePromptForValue()(uint64_t a1)
{
  v2[395] = v1;
  v2[389] = a1;
  uint64_t v3 = type metadata accessor for DialogPhase(0LL);
  v2[401] = OUTLINED_FUNCTION_23(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[407] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[413] = v5;
  v2[419] = OUTLINED_FUNCTION_23(v5);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v2[425] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[431] = v7;
  v2[437] = OUTLINED_FUNCTION_23(v7);
  uint64_t v8 = type metadata accessor for CommonDirectAction(0LL);
  v2[443] = v8;
  v2[449] = OUTLINED_FUNCTION_23(*(void *)(v8 - 8));
  uint64_t v9 = type metadata accessor for NLContextUpdate(0LL);
  v2[455] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[461] = v10;
  v2[467] = OUTLINED_FUNCTION_23(v10);
  OUTLINED_FUNCTION_19_1();
  return swift_task_switch(v11, v12, v13);
}

uint64_t AddOrCallPromptForValueStrategy.makePromptForValue()()
{
  uint64_t v1 = *(void *)(v0 + 3160);
  AddOrCallPromptForValueStrategy.getNLContextUpdate()();
  OUTLINED_FUNCTION_48();
  uint64_t v2 = type metadata accessor for CNContactStore( 255LL,  &lazy cache variable for type metadata for DialogExecutionResult,  &OBJC_CLASS___DialogExecutionResult_ptr);
  swift_asyncLet_begin( v0 + 656,  0LL,  v2,  &async function pointer to partial apply for implicit closure #1 in AddOrCallPromptForValueStrategy.makePromptForValue(),  v1);
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_48_3();
  swift_asyncLet_begin(v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_48_3();
  swift_asyncLet_begin(v8, v9, v10, v11, v12);
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_48_3();
  swift_asyncLet_begin(v13, v14, v15, v16, v17);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ButtonConfigurationModel>);
  uint64_t v19 = type metadata accessor for ButtonConfigurationModel(0LL);
  *(void *)(v0 + 3784) = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void *)(v20 + 72);
  *(void *)(v0 + 3832) = v21;
  LODWORD(v20) = *(_DWORD *)(v20 + 80);
  *(_DWORD *)(v0 + 4032) = v20;
  uint64_t v22 = swift_allocObject( v18,  ((v20 + 32LL) & ~(unint64_t)v20) + 3 * v21,  v20 | 7LL);
  *(void *)(v0 + 3880) = v22;
  *(_OWORD *)(v22 + 16) = xmmword_320080;
  return swift_asyncLet_get_throwing( v0 + 1936,  v0 + 3016,  AddOrCallPromptForValueStrategy.makePromptForValue(),  v0 + 2896);
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(v1 + 3928) = v0;
  if (v0) {
    return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
  }
  else {
    return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v1 = *(void *)(v0 + 3784);
  uint64_t v2 = *(void *)(v0 + 3592);
  uint64_t v3 = *(void *)(v0 + 3544);
  uint64_t v22 = *(void *)(v0 + 3496);
  uint64_t v23 = *(void *)(v0 + 3448);
  uint64_t v24 = *(void *)(v0 + 3400);
  uint64_t v4 = *(void **)(v0 + 3160);
  uint64_t v5 = (void *)(*(void *)(v0 + 3880)
                + ((*(unsigned __int8 *)(v0 + 4032) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 4032)));
  uint64_t v6 = *(void *)(v0 + 3016);
  uint64_t v7 = *(void *)(v0 + 3024);
  uint64_t v8 = OUTLINED_FUNCTION_53_4();
  OUTLINED_FUNCTION_15_2(v8);
  uint64_t v9 = swift_bridgeObjectRetain();
  UsoTaskBuilder_call_common_PhoneCall.init()(v9);
  UsoTaskBuilder.toUserStatedTaskDialogAct()();
  OUTLINED_FUNCTION_38_1();
  swift_storeEnumTagMultiPayload(v2, v3, 4LL);
  uint64_t v10 = v4 + 3;
  uint64_t v11 = v4[6];
  uint64_t v12 = v4[7];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  CommonDirectAction.toSAIntentGroupRunSiriKitExecutor(deviceState:)((void *)(v0 + 2616));
  uint64_t v14 = v13;
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 2616));
  outlined destroy of CommonDirectAction(v2, type metadata accessor for CommonDirectAction);
  UUID.init()(v15);
  *uint64_t v5 = v6;
  v5[1] = v7;
  uint64_t v16 = [objc_allocWithZone(SABaseCommand) init];
  uint64_t v17 = type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SABaseCommand,  &OBJC_CLASS___SABaseCommand_ptr);
  *(void *)(v0 + 3936) = v17;
  CodableAceObject.init(wrappedValue:)(v16, v17);
  *((_BYTE *)v5 + *(int *)(v1 + 3OUTLINED_FUNCTION_14_1(*((void *)*v1 + 2)) = 1;
  uint64_t v18 = type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor,  &OBJC_CLASS___SAIntentGroupRunSiriKitExecutor_ptr);
  *(void *)(v0 + 3944) = v18;
  CodableAceObject.init(wrappedValue:)(v14, v18);
  uint64_t v19 = (char *)v5 + *(int *)(v1 + 28);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 32);
  *(void *)(v0 + 3952) = v20;
  v20(v19, v22, v24);
  return swift_asyncLet_get_throwing( v0 + 1296,  v0 + 3032,  AddOrCallPromptForValueStrategy.makePromptForValue(),  v0 + 3216);
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(v1 + 3960) = v0;
  if (v0) {
    return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
  }
  else {
    return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 3952);
  uint64_t v18 = *(void *)(v0 + 3944);
  uint64_t v16 = *(void *)(v0 + 3936);
  uint64_t v1 = *(void *)(v0 + 3784);
  uint64_t v2 = *(void *)(v0 + 3592);
  uint64_t v3 = *(void *)(v0 + 3544);
  uint64_t v15 = *(void *)(v0 + 3496);
  uint64_t v17 = *(void *)(v0 + 3400);
  uint64_t v4 = *(void **)(v0 + 3160);
  uint64_t v5 = (void *)(*(void *)(v0 + 3880)
                + *(void *)(v0 + 3832)
                + ((*(unsigned __int8 *)(v0 + 4032) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 4032)));
  uint64_t v6 = v4 + 3;
  uint64_t v14 = *(void *)(v0 + 3032);
  uint64_t v7 = *(void *)(v0 + 3040);
  swift_bridgeObjectRetain();
  AddOrCallPromptForValueStrategy.addParticipantDialogAct()();
  swift_storeEnumTagMultiPayload(v2, v3, 4LL);
  uint64_t v8 = v4[6];
  uint64_t v9 = v4[7];
  __swift_project_boxed_opaque_existential_1(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  CommonDirectAction.toSAIntentGroupRunSiriKitExecutor(deviceState:)((void *)(v0 + 2696));
  uint64_t v11 = v10;
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 2696));
  outlined destroy of CommonDirectAction(v2, type metadata accessor for CommonDirectAction);
  UUID.init()(v12);
  *uint64_t v5 = v14;
  v5[1] = v7;
  CodableAceObject.init(wrappedValue:)([objc_allocWithZone(SABaseCommand) init], v16);
  *((_BYTE *)v5 + *(int *)(v1 + 3OUTLINED_FUNCTION_14_1(*((void *)*v1 + 2)) = 1;
  CodableAceObject.init(wrappedValue:)(v11, v18);
  v19((char *)v5 + *(int *)(v1 + 28), v15, v17);
  return swift_asyncLet_get_throwing( v0 + 16,  v0 + 3048,  AddOrCallPromptForValueStrategy.makePromptForValue(),  v0 + 3456);
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(v1 + 3968) = v0;
  if (v0) {
    return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
  }
  else {
    return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  void *boxed_opaque_existential_1;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 3952);
  uint64_t v24 = *(void *)(v0 + 3936);
  uint64_t v27 = *(void *)(v0 + 3944);
  uint64_t v28 = *(void *)(v0 + 3880);
  uint64_t v1 = *(void *)(v0 + 3784);
  uint64_t v31 = *(void *)(v0 + 3736);
  uint64_t v2 = *(void *)(v0 + 3592);
  uint64_t v23 = *(void *)(v0 + 3496);
  uint64_t v25 = *(void *)(v0 + 3400);
  uint64_t v26 = *(void *)(v0 + 3208);
  uint64_t v3 = *(void *)(v0 + 3160);
  uint64_t v4 = (void *)(v28
  uint64_t v5 = (void *)(v3 + 24);
  uint64_t v22 = *(void *)(v0 + 3048);
  uint64_t v6 = *(void *)(v0 + 3056);
  swift_storeEnumTagMultiPayload(v2, *(void *)(v0 + 3544), 7LL);
  uint64_t v7 = v3;
  uint64_t v29 = v3;
  uint64_t v8 = *(void *)(v3 + 48);
  uint64_t v9 = *(void *)(v7 + 56);
  __swift_project_boxed_opaque_existential_1(v5, v8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  swift_bridgeObjectRetain();
  v10(v8, v9);
  CommonDirectAction.toSAIntentGroupRunSiriKitExecutor(deviceState:)((void *)(v0 + 2776));
  uint64_t v12 = v11;
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 2776));
  outlined destroy of CommonDirectAction(v2, type metadata accessor for CommonDirectAction);
  UUID.init()(v13);
  *uint64_t v4 = v22;
  v4[1] = v6;
  CodableAceObject.init(wrappedValue:)([objc_allocWithZone(SABaseCommand) init], v24);
  *((_BYTE *)v4 + *(int *)(v1 + 3OUTLINED_FUNCTION_14_1(*((void *)*v1 + 2)) = 1;
  CodableAceObject.init(wrappedValue:)(v12, v27);
  uint64_t v14 = v30((char *)v4 + *(int *)(v1 + 28), v23, v25);
  static DialogPhase.clarification.getter(v14);
  uint64_t v15 = swift_task_alloc(48LL);
  *(void *)(v15 + 16) = v31;
  *(void *)(v15 + 24) = v28;
  *(_BYTE *)(v15 + 32) = 0;
  OutputGenerationManifest.init(dialogPhase:_:)( v26,  partial apply for closure #1 in AddOrCallPromptForValueStrategy.makePromptForValue(),  v15);
  swift_task_dealloc(v15);
  outlined init with copy of SharedGlobalsProviding(v29 + 88, v0 + 2856);
  uint64_t v16 = *(_OWORD *)(v0 + 2880);
  *(_OWORD *)(v0 + 3976) = v16;
  *(void *)(v0 + 3992) = __swift_project_boxed_opaque_existential_1((void *)(v0 + 2856), v16);
  uint64_t v17 = type metadata accessor for PhoneSnippetDataModels(0LL);
  *(void *)(v0 + 2960) = v17;
  *(void *)(v0 + 2968) = lazy protocol witness table accessor for type PhoneSnippetDataModels and conformance PhoneSnippetDataModels();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 2936));
  void *boxed_opaque_existential_1 = v28;
  *((_BYTE *)boxed_opaque_existential_1 + 8) = 0;
  swift_storeEnumTagMultiPayload(boxed_opaque_existential_1, v17, 6LL);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v20 = swift_allocObject(v19, 40LL, 7LL);
  *(void *)(v0 + 4000) = v20;
  *(_OWORD *)(v20 + 16) = xmmword_31FE60;
  return swift_asyncLet_get_throwing( v0 + 656,  v0 + 3064,  AddOrCallPromptForValueStrategy.makePromptForValue(),  v0 + 3696);
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(v1 + 4008) = v0;
  if (v0) {
    return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
  }
  else {
    return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
  }
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v6 = *v0;
  uint64_t v1 = (void *)(v6 + 2936);
  OUTLINED_FUNCTION_22_9(*(void *)(v6 + 4024), &v6);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v1);
  OUTLINED_FUNCTION_19_1();
  return swift_task_switch(v2, v3, v4);
}

{
  void *v0;
  (*(void (**)(void, void))(v0[413] + 8LL))(v0[419], v0[407]);
  __swift_destroy_boxed_opaque_existential_1(v0 + 357);
  return OUTLINED_FUNCTION_11_16();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  OUTLINED_FUNCTION_10_15();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  OUTLINED_FUNCTION_10_15();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  OUTLINED_FUNCTION_10_15();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 3736);
  uint64_t v2 = *(void *)(v0 + 3160);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 3688) + 8LL))(v1, *(void *)(v0 + 3640));
  swift_release_n(v2, 5LL);
  swift_task_dealloc(v1);
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  return OUTLINED_FUNCTION_6_17(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 3880);
  *(void *)(v1 + 16) = 0LL;
  swift_release(v1);
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  OUTLINED_FUNCTION_10_15();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  OUTLINED_FUNCTION_10_15();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  OUTLINED_FUNCTION_10_15();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_3_21();
  OUTLINED_FUNCTION_25_10();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  OUTLINED_FUNCTION_9_2();
  return OUTLINED_FUNCTION_5_16(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  outlined destroy of CommonDirectAction( *(void *)(v0 + 3880)
  + ((*(unsigned __int8 *)(v0 + 4032) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 4032)),
    type metadata accessor for ButtonConfigurationModel);
  OUTLINED_FUNCTION_55_4();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_11_16();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  OUTLINED_FUNCTION_10_15();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  OUTLINED_FUNCTION_10_15();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  OUTLINED_FUNCTION_10_15();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_3_21();
  OUTLINED_FUNCTION_25_10();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  OUTLINED_FUNCTION_9_2();
  return OUTLINED_FUNCTION_5_16(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 3880)
     + ((*(unsigned __int8 *)(v0 + 4032) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 4032));
  outlined destroy of CommonDirectAction( v1 + *(void *)(v0 + 3832),  type metadata accessor for ButtonConfigurationModel);
  outlined destroy of CommonDirectAction(v1, type metadata accessor for ButtonConfigurationModel);
  OUTLINED_FUNCTION_55_4();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_11_16();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  OUTLINED_FUNCTION_10_15();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  OUTLINED_FUNCTION_10_15();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  OUTLINED_FUNCTION_10_15();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_3_21();
  OUTLINED_FUNCTION_25_10();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  OUTLINED_FUNCTION_9_2();
  return OUTLINED_FUNCTION_5_16(*(uint64_t (**)(void))(v0 + 8));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v1 = v0[500];
  uint64_t v2 = v0[419];
  uint64_t v3 = v0[413];
  uint64_t v4 = v0[407];
  *(void *)(v1 + 16) = 0LL;
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  __swift_destroy_boxed_opaque_existential_1(v0 + 367);
  __swift_destroy_boxed_opaque_existential_1(v0 + 357);
  return OUTLINED_FUNCTION_11_16();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  OUTLINED_FUNCTION_10_15();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  OUTLINED_FUNCTION_10_15();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  OUTLINED_FUNCTION_10_15();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_3_21();
  OUTLINED_FUNCTION_25_10();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  OUTLINED_FUNCTION_9_2();
  return OUTLINED_FUNCTION_5_16(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AddOrCallPromptForValueStrategy.makePromptForValue()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v23 = v22[500];
  uint64_t v24 = (void *)v22[383];
  *(void *)(v23 + 32) = v24;
  uint64_t v31 = v23;
  specialized Array._endMutation()(a1, a2, a3, a4);
  v22[502] = v31;
  uint64_t v25 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)[1];
  id v26 = v24;
  uint64_t v27 = (void *)swift_task_alloc(v25);
  v22[503] = v27;
  *uint64_t v27 = v22;
  v27[1] = AddOrCallPromptForValueStrategy.makePromptForValue();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)( v22[389],  v22 + 367,  v31,  v22[419],  v22[497],  v22[498],  v28,  v29,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22);
}

uint64_t implicit closure #1 in AddOrCallPromptForValueStrategy.makePromptForValue()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(implicit closure #1 in AddOrCallPromptForValueStrategy.makePromptForValue(), 0LL, 0LL);
}

uint64_t implicit closure #1 in AddOrCallPromptForValueStrategy.makePromptForValue()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2(*(void *)(**(void **)(*(void *)(v0 + 24) + 72LL)
                                                  + class metadata base offset for OngoingCallCATsSimple));
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_27_8( v1,  (uint64_t)implicit closure #1 in AddOrCallPromptForValueStrategy.makePromptForValue(),  v4);
  return OUTLINED_FUNCTION_3_0(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  OUTLINED_FUNCTION_7_18();
  if (v1) {
    return OUTLINED_FUNCTION_24_1(*(uint64_t (**)(void))(v3 + 8));
  }
  *(void *)(v2 + 40) = v0;
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_9_11(v5, v6, v7);
}

{
  uint64_t v0;
  **(void **)(v0 + 16) = *(void *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t implicit closure #2 in AddOrCallPromptForValueStrategy.makePromptForValue()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(implicit closure #2 in AddOrCallPromptForValueStrategy.makePromptForValue(), 0LL, 0LL);
}

uint64_t implicit closure #2 in AddOrCallPromptForValueStrategy.makePromptForValue()()
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_10_2(*(void *)(class metadata base offset for PhoneCallDisplayTextCATsSimple
                                                  + v1
                                                  + 216));
  *(void *)(v0 + 32) = v2;
  uint64_t v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_27_8( v2,  (uint64_t)implicit closure #2 in AddOrCallPromptForValueStrategy.makePromptForValue(),  v5);
  return OUTLINED_FUNCTION_3_0(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  OUTLINED_FUNCTION_7_18();
  if (v1) {
    return OUTLINED_FUNCTION_24_1(*(uint64_t (**)(void))(v3 + 8));
  }
  *(void *)(v2 + 40) = v0;
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_9_11(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v1 = *(uint64_t **)(v0 + 16);
  uint64_t v2 = dispatch thunk of LabelExecutionResult.subscript.getter();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_38_1();
  *uint64_t v1 = v2;
  v1[1] = v4;
  return OUTLINED_FUNCTION_6_17(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t implicit closure #3 in AddOrCallPromptForValueStrategy.makePromptForValue()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(implicit closure #3 in AddOrCallPromptForValueStrategy.makePromptForValue(), 0LL, 0LL);
}

uint64_t implicit closure #3 in AddOrCallPromptForValueStrategy.makePromptForValue()()
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_10_2(*(void *)(class metadata base offset for PhoneCallDisplayTextCATsSimple
                                                  + v1
                                                  + 8));
  *(void *)(v0 + 32) = v2;
  uint64_t v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_27_8( v2,  (uint64_t)implicit closure #3 in AddOrCallPromptForValueStrategy.makePromptForValue(),  v5);
  return OUTLINED_FUNCTION_3_0(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  OUTLINED_FUNCTION_7_18();
  if (v1) {
    return OUTLINED_FUNCTION_24_1(*(uint64_t (**)(void))(v3 + 8));
  }
  *(void *)(v2 + 40) = v0;
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_9_11(v5, v6, v7);
}

uint64_t implicit closure #4 in AddOrCallPromptForValueStrategy.makePromptForValue()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(implicit closure #4 in AddOrCallPromptForValueStrategy.makePromptForValue(), 0LL, 0LL);
}

uint64_t implicit closure #4 in AddOrCallPromptForValueStrategy.makePromptForValue()()
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_10_2(*(void *)(class metadata base offset for PhoneCallDisplayTextCATsSimple
                                                  + v1
                                                  + 56));
  *(void *)(v0 + 32) = v2;
  uint64_t v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_27_8( v2,  (uint64_t)implicit closure #3 in AddOrCallPromptForValueStrategy.makePromptForValue(),  v5);
  return OUTLINED_FUNCTION_3_0(v3);
}

uint64_t closure #1 in AddOrCallPromptForValueStrategy.makePromptForValue()( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  OutputGenerationManifest.canUseServerTTS.setter(0LL);
  OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
  uint64_t v9 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL))(v8, a2, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0LL, 1LL, v9);
  OutputGenerationManifest.nlContextUpdate.setter(v8);
  unint64_t v10 = StackedButtonsModel.responseViewId.getter(a3, a4);
  return OutputGenerationManifest.responseViewId.setter(v10, v11);
}

void AddOrCallPromptForValueStrategy.parsePromptResponse(from:)()
{
  uint64_t v52 = v0;
  uint64_t v53 = v2;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v46 = *(void *)(v5 - 8);
  uint64_t v47 = v5;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v45 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CommonDirectAction?);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  uint64_t v7 = OUTLINED_FUNCTION_22_5();
  uint64_t v8 = type metadata accessor for CommonDirectAction(v7);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  uint64_t v48 = v9;
  __chkstk_darwin();
  uint64_t v11 = (char *)&v45 - v10;
  __chkstk_darwin();
  uint64_t v49 = (uint64_t)&v45 - v12;
  uint64_t v51 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v13 = *(void *)(v51 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  uint64_t v50 = v14;
  __chkstk_darwin();
  uint64_t v16 = (char *)&v45 - v15;
  uint64_t v17 = type metadata accessor for Parse(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin();
  uint64_t v20 = (uint64_t *)((char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v21 = v4;
  (*(void (**)(void *, uint64_t, uint64_t))(v18 + 16))(v20, v4, v17);
  int v22 = (*(uint64_t (**)(void *, uint64_t))(v18 + 88))(v20, v17);
  if (v22 == enum case for Parse.NLv3IntentOnly(_:))
  {
    OUTLINED_FUNCTION_19_9(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
    goto LABEL_14;
  }

  int v23 = v22;
  if (v22 == enum case for Parse.directInvocation(_:))
  {
    OUTLINED_FUNCTION_19_9(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 96));
    uint64_t v24 = v51;
    (*(void (**)(char *, void *, uint64_t))(v13 + 32))(v16, v20, v51);
    static CommonDirectAction.from(_:)((uint64_t)v16, v1);
    if (__swift_getEnumTagSinglePayload((uint64_t)v1, 1LL, v8) == 1)
    {
      outlined destroy of PhoneCallNLIntent?( (uint64_t)v1,  &demangling cache variable for type metadata for CommonDirectAction?);
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v25 = OUTLINED_FUNCTION_15_1();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.siriPhone);
      uint64_t v26 = v50;
      uint64_t v27 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 16))(v50, v16, v24);
      uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
        uint64_t v31 = OUTLINED_FUNCTION_7_0(32LL);
        v57[0] = v31;
        *(_DWORD *)uint64_t v30 = 136315138;
        uint64_t v32 = Parse.DirectInvocation.identifier.getter();
        uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v30 + 4);
        swift_bridgeObjectRelease();
        uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
        v34(v50, v24);
        OUTLINED_FUNCTION_17_0(v31);
        OUTLINED_FUNCTION_0_2(v31);
        OUTLINED_FUNCTION_0_2((uint64_t)v30);

        v34((uint64_t)v16, v24);
      }

      else
      {

        uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
        v39(v26, v24);
        v39((uint64_t)v16, v24);
      }

      goto LABEL_23;
    }

    uint64_t v35 = v49;
    outlined init with take of CommonDirectAction((uint64_t)v1, v49);
    outlined init with copy of CommonDirectAction(v35, (uint64_t)v11);
    if (swift_getEnumCaseMultiPayload(v11, v8) == 7)
    {
      OUTLINED_FUNCTION_42_5(v35);
      OUTLINED_FUNCTION_17_16();
      OUTLINED_FUNCTION_42_5((uint64_t)v11);
      uint64_t v36 = (unsigned int *)&enum case for PromptResult.cancelled<A>(_:);
LABEL_24:
      uint64_t v43 = *v36;
      uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<OngoingCallConfirmIntentFlow.Action>);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 104LL))(v53, v43, v44);
      goto LABEL_25;
    }

    outlined destroy of CommonDirectAction((uint64_t)v11, type metadata accessor for CommonDirectAction);
    uint64_t v40 = v48;
    outlined init with copy of CommonDirectAction(v35, v48);
    if (swift_getEnumCaseMultiPayload(v40, v8) == 4)
    {
      uint64_t v41 = v45;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v45, v40, v47);
      uint64_t v42 = OUTLINED_FUNCTION_23_9();
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v42 + 216LL))(&v54, v41);
      OUTLINED_FUNCTION_38_1();
      if (v56)
      {
        OUTLINED_FUNCTION_49_4();
        __swift_destroy_boxed_opaque_existential_1(v57);
        OUTLINED_FUNCTION_44_7();
        outlined destroy of CommonDirectAction(v35, type metadata accessor for CommonDirectAction);
        OUTLINED_FUNCTION_17_16();
        goto LABEL_25;
      }

      OUTLINED_FUNCTION_44_7();
      outlined destroy of CommonDirectAction(v35, type metadata accessor for CommonDirectAction);
      OUTLINED_FUNCTION_17_16();
      goto LABEL_22;
    }

    OUTLINED_FUNCTION_42_5(v35);
    OUTLINED_FUNCTION_17_16();
    OUTLINED_FUNCTION_42_5(v40);
LABEL_23:
    uint64_t v36 = (unsigned int *)&enum case for PromptResult.unanswered<A>(_:);
    goto LABEL_24;
  }

  if (v22 == enum case for Parse.NLv4IntentOnly(_:))
  {
    OUTLINED_FUNCTION_19_9(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 96));
    swift_unknownObjectRelease(*v20);
  }

  else
  {
    int v37 = enum case for Parse.uso(_:);
    OUTLINED_FUNCTION_19_9(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
    if (v23 != v37) {
      goto LABEL_23;
    }
  }

uint64_t AddOrCallPromptForValueStrategy.getAction(from:)@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  if (PhoneCallNLIntent.isOutgoingCall()())
  {
    *a2 = 0;
LABEL_5:
    uint64_t v4 = enum case for PromptResult.answered<A>(_:);
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<OngoingCallConfirmIntentFlow.Action>);
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104LL))(a2, v4, v5);
  }

  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_37_4();
  if (PhoneCallNLIntent.isAddParticipant()())
  {
    *a2 = 1;
    goto LABEL_5;
  }

  OUTLINED_FUNCTION_43_2();
  Swift::Bool v7 = PhoneCallNLIntent.hasCallConfirmation(_:)(PhoneCallFlowDelegatePlugin_PhoneCallConfirmation_no);
  outlined init with copy of SharedGlobalsProviding((uint64_t)a1, (uint64_t)v12);
  if (v7)
  {
    __swift_destroy_boxed_opaque_existential_1(v12);
  }

  else
  {
    __swift_project_boxed_opaque_existential_1(v12, v12[3]);
    Swift::Bool v8 = PhoneCallNLIntent.hasCallConfirmation(_:)(PhoneCallFlowDelegatePlugin_PhoneCallConfirmation_cancel);
    __swift_destroy_boxed_opaque_existential_1(v12);
    if (!v8)
    {
      uint64_t v9 = (unsigned int *)&enum case for PromptResult.unanswered<A>(_:);
      goto LABEL_11;
    }
  }

  uint64_t v9 = (unsigned int *)&enum case for PromptResult.cancelled<A>(_:);
LABEL_11:
  uint64_t v10 = *v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<OngoingCallConfirmIntentFlow.Action>);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104LL))(a2, v10, v11);
}

void AddOrCallPromptForValueStrategy.getNLContextUpdate()()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v40 = v2;
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions(0LL);
  uint64_t v38 = *(void *)(v3 - 8);
  uint64_t v39 = v3;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  uint64_t v37 = v4;
  uint64_t v5 = __chkstk_darwin();
  Swift::Bool v7 = (char *)&v33 - v6;
  Siri_Nlu_External_SystemGaveOptions.init()(v5);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserDialogAct>);
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v10 = swift_allocObject( v8,  ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL))
        + 3LL * *(void *)(*(void *)(v9 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_320080;
  uint64_t v11 = OUTLINED_FUNCTION_53_4();
  uint64_t v12 = OUTLINED_FUNCTION_15_2(v11);
  UsoTaskBuilder_call_common_PhoneCall.init()(v12);
  UsoTaskBuilder.toUserStatedTaskDialogAct()();
  OUTLINED_FUNCTION_38_1();
  AddOrCallPromptForValueStrategy.faceTimeDialogAct()();
  AddOrCallPromptForValueStrategy.addParticipantDialogAct()();
  Siri_Nlu_External_SystemGaveOptions.choices.setter(v10);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v13 = OUTLINED_FUNCTION_15_1();
  uint64_t v14 = (os_log_s *)OUTLINED_FUNCTION_12_1(v13, (uint64_t)static Logger.siriPhone);
  os_log_type_t v16 = static os_log_type_t.debug.getter(v14, v15);
  if (os_log_type_enabled(v14, v16))
  {
    uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v35 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v41 = v35;
    uint64_t v36 = v1;
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v34 = v17 + 4;
    uint64_t v18 = swift_beginAccess(v7, &v42, 32LL, 0LL);
    uint64_t v19 = Siri_Nlu_External_SystemGaveOptions.choices.getter(v18);
    swift_endAccess(&v42);
    uint64_t v20 = Array.description.getter(v19, v9);
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v41);
    uint64_t v1 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v34);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_57_0(&dword_0, v14, v16, "Returning NLUSystemGaveOptions: %s", v17);
    uint64_t v23 = v35;
    OUTLINED_FUNCTION_17_0(v35);
    OUTLINED_FUNCTION_0_2(v23);
    OUTLINED_FUNCTION_0_2((uint64_t)v17);
  }

  uint64_t v24 = v40;
  Siri_Nlu_External_SystemDialogAct.init()(v25);
  swift_beginAccess(v7, &v42, 0LL, 0LL);
  uint64_t v26 = v37;
  uint64_t v27 = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v37, v7, v39);
  uint64_t v28 = Siri_Nlu_External_SystemDialogAct.gaveOptions.setter(v26);
  NLContextUpdate.init()(v28);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  uint64_t v30 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v31 = (v30 + 32) & ~v30;
  uint64_t v32 = swift_allocObject(v29, v31 + *(void *)(v1 + 72), v30 | 7);
  *(_OWORD *)(v32 + 16) = xmmword_31D870;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v32 + v31, v24, v0);
  NLContextUpdate.nluSystemDialogActs.setter(v32);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v24, v0);
  OUTLINED_FUNCTION_19_9(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
  OUTLINED_FUNCTION_7_5();
}

uint64_t AddOrCallPromptForValueStrategy.faceTimeDialogAct()()
{
  uint64_t v0 = OUTLINED_FUNCTION_53_4();
  uint64_t v1 = OUTLINED_FUNCTION_15_2(v0);
  uint64_t v2 = UsoTaskBuilder_call_common_PhoneCall.init()(v1);
  uint64_t v3 = type metadata accessor for UsoEntityBuilder_common_PhoneCall(0LL);
  OUTLINED_FUNCTION_15_2(v3);
  uint64_t v4 = UsoEntityBuilder_common_PhoneCall.init()();
  if (one-time initialization token for faceTimeUsoApp != -1) {
    swift_once(&one-time initialization token for faceTimeUsoApp, one-time initialization function for faceTimeUsoApp);
  }
  dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoAssociatedApp(value:)( static AddOrCallPromptForValueStrategy.faceTimeUsoApp,  &protocol witness table for UsoEntityBuilder_common_App);
  dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)(v4);
  UsoTaskBuilder.toUserStatedTaskDialogAct()();
  swift_release(v2);
  return swift_release(v4);
}

uint64_t AddOrCallPromptForValueStrategy.addParticipantDialogAct()()
{
  uint64_t v1 = type metadata accessor for ListOperators(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v3 = OUTLINED_FUNCTION_22_5();
  uint64_t v4 = type metadata accessor for UsoTaskBuilder_update_common_PhoneCall(v3);
  OUTLINED_FUNCTION_15_2(v4);
  uint64_t updated = UsoTaskBuilder_update_common_PhoneCall.init()();
  uint64_t v6 = type metadata accessor for UsoEntityBuilder_common_PhoneCall(0LL);
  OUTLINED_FUNCTION_15_2(v6);
  uint64_t v7 = UsoEntityBuilder_common_PhoneCall.init()();
  uint64_t v8 = type metadata accessor for UsoEntityBuilder_common_Person(0LL);
  OUTLINED_FUNCTION_15_2(v8);
  uint64_t v9 = UsoEntityBuilder_common_Person.init()();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v0, enum case for ListOperators.addToSet(_:), v1);
  dispatch thunk of UsoEntityBuilder_common_PhoneCall.addRecipientsListExpression(operatorValue:operand:)( v0,  v9,  &protocol witness table for UsoEntityBuilder_common_Person);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceTarget.setTarget(value:)(v7);
  UsoTaskBuilder.toUserStatedTaskDialogAct()();
  swift_release(updated);
  swift_release(v7);
  return swift_release(v9);
}

void *AddOrCallPromptForValueStrategy.deinit()
{
  return v0;
}

uint64_t AddOrCallPromptForValueStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 128LL, 7LL);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.actionForInput(_:) in conformance AddOrCallPromptForValueStrategy()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160LL))();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance AddOrCallPromptForValueStrategy( uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v5 = *(int **)(*(void *)v2 + 168LL);
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)v5 + *v5);
  uint64_t v6 = (void *)swift_task_alloc(v5[1]);
  *(void *)(v3 + 24) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance AddOrCallPromptForValueStrategy;
  return v8(a2);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance AddOrCallPromptForValueStrategy( char a1)
{
  uint64_t v4 = *v2;
  uint64_t v7 = v4;
  uint64_t v5 = *v2;
  OUTLINED_FUNCTION_22_9(*(void *)(v4 + 24), &v7);
  if (!v1) {
    **(_BYTE **)(v4 + 16) = a1;
  }
  return OUTLINED_FUNCTION_24_1(*(uint64_t (**)(void))(v5 + 8));
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makePromptForValue() in conformance AddOrCallPromptForValueStrategy( uint64_t a1)
{
  uint64_t v4 = *(int **)(*(void *)v1 + 176LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance AddOrCallPromptForValueStrategy;
  return v7(a1);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance AddOrCallPromptForValueStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse()[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance AddOrCallPromptForValueStrategy;
  return PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse()(a1, a2, a3);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence() in conformance AddOrCallPromptForValueStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence()[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance AddOrCallPromptForValueStrategy;
  return PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence()(a1, a2, a3);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance AddOrCallPromptForValueStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to PromptForValueFlowStrategyAsync.makeFlowCancelledResponse()[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance AddOrCallPromptForValueStrategy;
  return PromptForValueFlowStrategyAsync.makeFlowCancelledResponse()(a1, a2, a3);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance AddOrCallPromptForValueStrategy()
{
  uint64_t v3 = *v0;
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_22_9(*(void *)(v3 + 16), &v3);
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeErrorResponse(_:) in conformance AddOrCallPromptForValueStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to PromptForValueFlowStrategyAsync.makeErrorResponse(_:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance AddOrCallPromptForValueStrategy;
  return PromptForValueFlowStrategyAsync.makeErrorResponse(_:)(a1, a2, a3, a4);
}

uint64_t specialized AddOrCallPromptForValueStrategy.init(sharedGlobals:ongoingCallCats:ongoingCallCATsSimple:phoneCallDisplayTextCATsSimple:responseGenerator:)( __int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a6 + 112) = a7;
  *(void *)(a6 + 120) = a8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(a6 + 88));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32LL))(boxed_opaque_existential_1, a5, a7);
  *(_BYTE *)(a6 + 16) = 2;
  outlined init with take of AppSelectionSignalComponent(a1, a6 + 24);
  *(void *)(a6 + 64) = a2;
  *(void *)(a6 + 72) = a3;
  *(void *)(a6 + 80) = a4;
  return a6;
}

uint64_t partial apply for implicit closure #1 in AddOrCallPromptForValueStrategy.makePromptForValue()()
{
  uint64_t v0 = swift_task_alloc(dword_42C7F4);
  uint64_t v1 = (void *)OUTLINED_FUNCTION_53_2(v0);
  uint64_t v2 = OUTLINED_FUNCTION_18_12(v1);
  return implicit closure #1 in AddOrCallPromptForValueStrategy.makePromptForValue()(v2, v3);
}

uint64_t partial apply for implicit closure #2 in AddOrCallPromptForValueStrategy.makePromptForValue()()
{
  uint64_t v0 = swift_task_alloc(dword_42C80C);
  uint64_t v1 = (void *)OUTLINED_FUNCTION_53_2(v0);
  uint64_t v2 = OUTLINED_FUNCTION_18_12(v1);
  return implicit closure #2 in AddOrCallPromptForValueStrategy.makePromptForValue()(v2, v3);
}

uint64_t partial apply for implicit closure #3 in AddOrCallPromptForValueStrategy.makePromptForValue()()
{
  uint64_t v0 = swift_task_alloc(dword_42C81C);
  uint64_t v1 = (void *)OUTLINED_FUNCTION_53_2(v0);
  uint64_t v2 = OUTLINED_FUNCTION_18_12(v1);
  return implicit closure #3 in AddOrCallPromptForValueStrategy.makePromptForValue()(v2, v3);
}

uint64_t partial apply for implicit closure #4 in AddOrCallPromptForValueStrategy.makePromptForValue()()
{
  uint64_t v0 = swift_task_alloc(dword_42C82C);
  uint64_t v1 = (void *)OUTLINED_FUNCTION_53_2(v0);
  uint64_t v2 = OUTLINED_FUNCTION_18_12(v1);
  return implicit closure #4 in AddOrCallPromptForValueStrategy.makePromptForValue()(v2, v3);
}

void outlined destroy of CommonDirectAction(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0LL);
  OUTLINED_FUNCTION_15_0(*(void *)(v2 - 8));
  OUTLINED_FUNCTION_2();
}

uint64_t partial apply for closure #1 in AddOrCallPromptForValueStrategy.makePromptForValue()(uint64_t a1)
{
  return closure #1 in AddOrCallPromptForValueStrategy.makePromptForValue()( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(_BYTE *)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type PhoneSnippetDataModels and conformance PhoneSnippetDataModels()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels and conformance PhoneSnippetDataModels;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels and conformance PhoneSnippetDataModels)
  {
    uint64_t v1 = type metadata accessor for PhoneSnippetDataModels(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PhoneSnippetDataModels, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels and conformance PhoneSnippetDataModels);
  }

  return result;
}

uint64_t type metadata accessor for AddOrCallPromptForValueStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin31AddOrCallPromptForValueStrategy);
}

uint64_t outlined init with take of CommonDirectAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonDirectAction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CommonDirectAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonDirectAction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_1_19()
{
  return ((uint64_t (*)(void))swift_asyncLet_finish)();
}

uint64_t OUTLINED_FUNCTION_2_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_21()
{
  return (*(uint64_t (**)(void, void))(v0[461] + 8LL))(v0[467], v0[455]);
}

uint64_t OUTLINED_FUNCTION_7_18()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (uint64_t *)(v1 - 8);
  *uint64_t v3 = *v0;
  uint64_t v4 = *(void *)(v2 + 32);
  *uint64_t v3 = *v0;
  return swift_task_dealloc(v4);
}

uint64_t OUTLINED_FUNCTION_10_15()
{
  return swift_release(*(void *)(v0 + 3160));
}

uint64_t OUTLINED_FUNCTION_11_16()
{
  return swift_asyncLet_finish();
}

uint64_t OUTLINED_FUNCTION_17_16()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_18_12(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_19_9@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_20_7()
{
  return specialized AddOrCallPromptForValueStrategy.init(sharedGlobals:ongoingCallCats:ongoingCallCATsSimple:phoneCallDisplayTextCATsSimple:responseGenerator:)( v4,  v3,  v2,  v1,  v7,  v0,  v5,  v6);
}

uint64_t OUTLINED_FUNCTION_22_9@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v2;
  return swift_task_dealloc(a1);
}

uint64_t OUTLINED_FUNCTION_23_9()
{
  uint64_t v1 = *(void **)(v0 - 184);
  uint64_t v2 = v1[6];
  uint64_t v3 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(v2, v3);
}

void OUTLINED_FUNCTION_38_8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void OUTLINED_FUNCTION_42_5(uint64_t a1)
{
}

void *OUTLINED_FUNCTION_43_2()
{
  return __swift_project_boxed_opaque_existential_1(v0, v0[3]);
}

uint64_t OUTLINED_FUNCTION_44_7()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_49_4()
{
  return AddOrCallPromptForValueStrategy.getAction(from:)((void *)(v0 - 128), *(_BYTE **)(v0 - 176));
}

uint64_t OUTLINED_FUNCTION_53_4()
{
  return type metadata accessor for UsoTaskBuilder_call_common_PhoneCall(0LL);
}

uint64_t OUTLINED_FUNCTION_55_4()
{
  *(void *)(v0 + 16) = 0LL;
  return swift_release(v0);
}

uint64_t MainFlow.parse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = OUTLINED_FUNCTION_4_3();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

void MainFlow.sharedGlobals.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = OUTLINED_FUNCTION_4_15();
  outlined init with copy of SharedGlobalsProviding(v1 + *(int *)(v3 + 20), a1);
}

uint64_t type metadata accessor for MainFlow(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MainFlow;
  if (!type metadata singleton initialization cache for MainFlow) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MainFlow);
  }
  return result;
}

uint64_t MainFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = OUTLINED_FUNCTION_4_15();
  lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type MainFlow and conformance MainFlow,  type metadata accessor for MainFlow,  (uint64_t)&protocol conformance descriptor for MainFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
}

uint64_t MainFlow.execute()(uint64_t a1)
{
  v2[20] = a1;
  v2[21] = v1;
  uint64_t v3 = type metadata accessor for CATOption(0LL);
  v2[22] = OUTLINED_FUNCTION_23(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for ExecuteResponse(0LL);
  v2[23] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  _BYTE v2[24] = v5;
  v2[25] = OUTLINED_FUNCTION_23(v5);
  return swift_task_switch(MainFlow.execute(), 0LL, 0LL);
}

uint64_t MainFlow.execute()()
{
  uint64_t v1 = v0 + 96;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v2 = (void *)(v0 + 144);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v3, (uint64_t)static Logger.siriPhone);
  outlined init with copy of SharedGlobalsProviding(v0 + 16, v0 + 56);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v7 = static os_log_type_t.debug.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v21 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v10 = *(void *)(v0 + 80);
    uint64_t v11 = __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v10);
    uint64_t DynamicType = swift_getDynamicType(v11, v10, 1LL);
    uint64_t v13 = _typeName(_:qualified:)(DynamicType, 0LL);
    *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v8 + 4);
    uint64_t v1 = v0 + 96;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 56));
    _os_log_impl(&dword_0, v5, v7, "#MainFlow Pushing %s.", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL);
    OUTLINED_FUNCTION_0_2(v9);
    uint64_t v15 = (uint64_t)v8;
    uint64_t v2 = (void *)(v0 + 144);
    OUTLINED_FUNCTION_0_2(v15);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 56));
  }

  outlined init with copy of SharedGlobalsProviding(v0 + 16, v1);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Flow);
  type metadata accessor for AnyFlow(0LL);
  if (swift_dynamicCast(v2, v1, v16))
  {
    uint64_t v17 = *v2;
    static ExecuteResponse.complete(next:)(*v2);
    swift_release(v17);
  }

  else
  {
    uint64_t v18 = __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
    static ExecuteResponse.complete<A>(next:)(v18);
  }

  (*(void (**)(void, void, void))(*(void *)(v0 + 192) + 32LL))( *(void *)(v0 + 160),  *(void *)(v0 + 200),  *(void *)(v0 + 184));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  uint64_t v19 = *(void *)(v0 + 176);
  swift_task_dealloc(*(void *)(v0 + 200));
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MainFlow.makeNextFlow()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t v95 = a1;
  uint64_t v4 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v90 = *(void *)(v4 - 8);
  uint64_t v91 = v4;
  __chkstk_darwin();
  uint64_t v89 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for PhoneError(0LL);
  __chkstk_darwin();
  uint64_t v93 = (_OWORD *)((char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v96 = type metadata accessor for Parse(0LL);
  uint64_t v8 = *(void *)(v96 - 8);
  __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v94 = (char *)&v80 - v11;
  type metadata accessor for MainFlow(0LL);
  __chkstk_darwin();
  uint64_t v88 = (uint64_t)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v14 = (char *)&v80 - v13;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
  outlined init with copy of MainFlow(v3, (uint64_t)v14, type metadata accessor for MainFlow);
  uint64_t v92 = v16;
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v20 = static os_log_type_t.debug.getter(v18, v19);
  if (os_log_type_enabled(v18, v20))
  {
    unint64_t v86 = v10;
    uint64_t v21 = swift_slowAlloc(12LL, -1LL);
    uint64_t v87 = v6;
    unint64_t v22 = (uint8_t *)v21;
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v84 = v2;
    uint64_t v24 = v23;
    uint64_t v99 = v23;
    uint64_t v85 = v3;
    *(_DWORD *)unint64_t v22 = 136315138;
    uint64_t v83 = v8;
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v81 = v22 + 4;
    uint64_t v82 = v25;
    uint64_t v26 = (uint64_t)v94;
    uint64_t v27 = v96;
    v25(v94, (uint64_t)v14, v96);
    uint64_t v28 = String.init(describing:)(v26);
    uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v99);
    uint64_t v3 = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v81);
    uint64_t v10 = v86;
    swift_bridgeObjectRelease();
    outlined destroy of MainFlow((uint64_t)v14, type metadata accessor for MainFlow);
    _os_log_impl(&dword_0, v18, v20, "#MainFlow Executing MainFlow with parse: %s", v22, 0xCu);
    swift_arrayDestroy(v24, 1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
    uint64_t v30 = v22;
    uint64_t v6 = v87;
    swift_slowDealloc(v30, -1LL, -1LL);

    uint64_t v32 = v82;
    uint64_t v31 = v83;
    v82((char *)v10, v3, v27);
  }

  else
  {
    outlined destroy of MainFlow((uint64_t)v14, type metadata accessor for MainFlow);

    uint64_t v31 = v8;
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v27 = v96;
    v32((char *)v10, v3, v96);
  }

  int v33 = (*(uint64_t (**)(void *, uint64_t))(v31 + 88))(v10, v27);
  if (v33 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(void *, uint64_t))(v31 + 8))(v10, v27);
    return MainFlow.makeFlowForIntent()((uint64_t)v95);
  }

  int v35 = v33;
  if (v33 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(void *, uint64_t))(v31 + 96))(v10, v27);
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    uint64_t v37 = swift_release(*(void *)((char *)v10 + *(int *)(v36 + 48)));
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl(&dword_0, v38, v39, "#MainFlow Encountered NLv3PlusServerConversion. This is unexpected!!!", v40, 2u);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    uint64_t v41 = (uint64_t)v93;
    swift_storeEnumTagMultiPayload(v93, v6, 23LL);
    lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError,  type metadata accessor for PhoneError,  (uint64_t)&protocol conformance descriptor for PhoneError);
    swift_allocError(v6, v42, 0LL, 0LL);
    PhoneError.logged()(v43);
    outlined destroy of MainFlow(v41, type metadata accessor for PhoneError);
    swift_willThrow(v44, v45, v46, v47, v48, v49, v50, v51);
    uint64_t v52 = type metadata accessor for NLIntent(0LL);
    return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v52 - 8) + 8LL))(v10, v52);
  }

  else if (v33 == enum case for Parse.directInvocation(_:))
  {
    (*(void (**)(void *, uint64_t))(v31 + 96))(v10, v27);
    uint64_t v54 = (uint64_t)v89;
    uint64_t v53 = v90;
    uint64_t v55 = v10;
    uint64_t v56 = v91;
    (*(void (**)(char *, void *, uint64_t))(v90 + 32))(v89, v55, v91);
    MainFlow.makeFlowForDirectInvocation(_:)(v54, v95);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v54, v56);
  }

  else
  {
    if (v33 == enum case for Parse.NLv4IntentOnly(_:))
    {
      (*(void (**)(void *, uint64_t))(v31 + 96))(v10, v27);
      swift_unknownObjectRelease(*v10);
      return MainFlow.makeFlowForIntent()((uint64_t)v95);
    }

    int v57 = enum case for Parse.uso(_:);
    (*(void (**)(void *, uint64_t))(v31 + 8))(v10, v27);
    if (v35 == v57) {
      return MainFlow.makeFlowForIntent()((uint64_t)v95);
    }
    uint64_t v58 = v88;
    outlined init with copy of MainFlow(v3, v88, type metadata accessor for MainFlow);
    uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
    os_log_type_t v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v63 = swift_slowAlloc(32LL, -1LL);
      uint64_t v64 = v32;
      uint64_t v65 = v63;
      uint64_t v99 = v63;
      uint64_t v87 = v6;
      *(_DWORD *)uint64_t v62 = 136315138;
      uint64_t v66 = (uint64_t)v94;
      v64(v94, v58, v27);
      uint64_t v67 = String.init(describing:)(v66);
      uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, &v99);
      uint64_t v6 = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v62 + 4);
      swift_bridgeObjectRelease();
      outlined destroy of MainFlow(v58, type metadata accessor for MainFlow);
      _os_log_impl(&dword_0, v60, v61, "#MainFlow No flow for parse: %s", v62, 0xCu);
      swift_arrayDestroy(v65, 1LL);
      swift_slowDealloc(v65, -1LL, -1LL);
      swift_slowDealloc(v62, -1LL, -1LL);
    }

    else
    {
      outlined destroy of MainFlow(v58, type metadata accessor for MainFlow);
    }

    uint64_t v69 = (uint64_t)v93;
    *uint64_t v93 = xmmword_3201A0;
    swift_storeEnumTagMultiPayload(v69, v6, 0LL);
    lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError,  type metadata accessor for PhoneError,  (uint64_t)&protocol conformance descriptor for PhoneError);
    swift_allocError(v6, v70, 0LL, 0LL);
    PhoneError.logged()(v71);
    outlined destroy of MainFlow(v69, type metadata accessor for PhoneError);
    return swift_willThrow(v72, v73, v74, v75, v76, v77, v78, v79);
  }

void MainFlow.makeFlowForDirectInvocation(_:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  v125 = a2;
  uint64_t v123 = type metadata accessor for PhoneError(0LL);
  __chkstk_darwin();
  v124 = (uint64_t *)&v115[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  type metadata accessor for CATOption(0LL);
  __chkstk_darwin();
  v118 = &v115[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  v122 = &v115[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  uint64_t v11 = &v115[-v10];
  __chkstk_darwin();
  uint64_t v13 = &v115[-v12];
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v119 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v119, (uint64_t)static Logger.siriPhone);
  unint64_t v14 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16);
  v14(v13, a1, v7);
  uint64_t v135 = a1;
  v120 = v14;
  uint64_t v15 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v14)(v11, a1, v7);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v18 = static os_log_type_t.debug.getter(v16, v17);
  int v19 = v18;
  BOOL v20 = os_log_type_enabled(v16, v18);
  uint64_t v126 = v3;
  uint64_t v121 = v7;
  if (v20)
  {
    uint64_t v21 = swift_slowAlloc(22LL, -1LL);
    uint64_t v117 = swift_slowAlloc(64LL, -1LL);
    uint64_t v129 = v117;
    *(_DWORD *)uint64_t v21 = 136315394;
    int v116 = v19;
    uint64_t v22 = ((uint64_t (*)(void))Parse.DirectInvocation.identifier.getter)();
    *(void *)&v128[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v128, (char *)v128 + 8, v21 + 4);
    swift_bridgeObjectRelease();
    uint64_t v24 = *(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8);
    uint64_t v25 = v24(v13, v7);
    *(_WORD *)(v21 + 12) = 2080;
    *(void *)&v128[0] = Parse.DirectInvocation.userData.getter(v25);
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]?);
    uint64_t v27 = String.init<A>(describing:)(v128, v26);
    *(void *)&v128[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v128, (char *)v128 + 8, v21 + 14);
    swift_bridgeObjectRelease();
    v24(v11, v7);
    _os_log_impl( &dword_0,  v16,  (os_log_type_t)v116,  "#MainFlow Making flow for DirectInvocation(identifier=%s, payload=%s)",  (uint8_t *)v21,  0x16u);
    uint64_t v29 = v117;
    swift_arrayDestroy(v117, 2LL);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {
    uint64_t v30 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
    v30(v13, v7);
    v30(v11, v7);
  }

  uint64_t v31 = v135;
  uint64_t v33 = Parse.DirectInvocation.userData.getter(v32);
  if (!v33) {
    uint64_t v33 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  }
  uint64_t v34 = v33;
  uint64_t v36 = ((uint64_t (*)(void))Parse.DirectInvocation.identifier.getter)();
  uint64_t v37 = v35;
  if (v36 == 0xD000000000000034LL && v35 == 0x80000000003420C0LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000034LL, 0x80000000003420C0LL, v36, v35, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    StartAudioCallDirectAction.init(from:)(v34, v131);
    uint64_t countAndFlagsBits = outlined init with take of StartAudioCallDirectAction?((uint64_t)v131, (uint64_t)v132);
    if (v132[1])
    {
      memcpy(__dst, v132, sizeof(__dst));
      uint64_t v39 = type metadata accessor for MainFlow(0LL);
      uint64_t v40 = (void *)(v126 + *(int *)(v39 + 20));
      default argument 2 of PhoneCallFlow.init(state:sharedGlobals:appFinder:eligibleAppsFinder:)(&v129, v39);
      uint64_t v41 = static CarPlayDirectInvocationFlowFactory.makeStartAudioCallDirectInvocationFlow(directAction:sharedGlobals:appFinder:)( __dst,  v40,  &v129);
      __swift_destroy_boxed_opaque_existential_1(&v129);
      uint64_t v42 = type metadata accessor for AnyFlow(0LL);
      uint64_t v43 = v125;
      v125[3] = v42;
      v43[4] = (uint64_t)&protocol witness table for AnyFlow;
      outlined release of StartAudioCallDirectAction?((uint64_t)v131);
LABEL_33:
      *uint64_t v43 = v41;
      return;
    }

    goto LABEL_66;
  }

  if (v36 == 0xD000000000000034LL && v37 == 0x8000000000342080LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000034LL, 0x8000000000342080LL, v36, v37, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    PhoneCallFlowDelegatePlugin::StartCallDirectAction_optional v44 = StartCallDirectAction.init(from:)((Swift::OpaquePointer)v34);
    uint64_t countAndFlagsBits = v44.value.appBundleId._countAndFlagsBits;
    if (v44.value.appBundleId._object)
    {
      uint64_t v45 = type metadata accessor for MainFlow(0LL);
      uint64_t v46 = (void *)(v126 + *(int *)(v45 + 20));
      default argument 2 of PhoneCallFlow.init(state:sharedGlobals:appFinder:eligibleAppsFinder:)(&v129, v45);
      v134[0] = v44;
      memset(&v134[1], 0, 24);
      *(_OWORD *)&v134[2].value.appBundleId._object = xmmword_3201B0;
      *(_OWORD *)&v134[3].value.appBundleId._object = xmmword_3201B0;
      swift_bridgeObjectRetain();
      uint64_t v41 = static CarPlayDirectInvocationFlowFactory.makeStartAudioCallDirectInvocationFlow(directAction:sharedGlobals:appFinder:)( &v134[0].value.appBundleId._countAndFlagsBits,  v46,  &v129);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data?(0LL, 0xF000000000000000LL);
      outlined consume of Data?(0LL, 0xF000000000000000LL);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(&v129);
LABEL_18:
      uint64_t v47 = type metadata accessor for AnyFlow(0LL);
      uint64_t v43 = v125;
      v125[3] = v47;
      v43[4] = (uint64_t)&protocol witness table for AnyFlow;
      goto LABEL_33;
    }

    goto LABEL_66;
  }

  if (one-time initialization token for identifier != -1) {
    swift_once(&one-time initialization token for identifier, one-time initialization function for identifier);
  }
  BOOL v48 = static IdentifyIncomingCallerDirectAction.identifier == v36 && *(void *)algn_478288 == v37;
  if (v48
    || (_stringCompareWithSmolCheck(_:_:expecting:)( static IdentifyIncomingCallerDirectAction.identifier,  *(void *)algn_478288,  v36,  v37,  0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for announceTelephony != -1) {
      swift_once( &one-time initialization token for announceTelephony,  one-time initialization function for announceTelephony);
    }
    uint64_t v49 = __swift_project_value_buffer(v119, (uint64_t)static Logger.announceTelephony);
    uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.info.getter();
    BOOL v52 = os_log_type_enabled(v50, v51);
    uint64_t v53 = v121;
    if (v52)
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl(&dword_0, v50, v51, "#MainFlow CallKit announcement directInvocation received.", v54, 2u);
      swift_slowDealloc(v54, -1LL, -1LL);
    }

    uint64_t v55 = (uint64_t)v122;
    v120(v122, v135, v53);
    uint64_t countAndFlagsBits = specialized IdentifyIncomingCallerDirectAction.__allocating_init(invocation:contactStore:)( v55,  (uint64_t)[objc_allocWithZone(CNContactStore) init]);
    if (!countAndFlagsBits) {
      goto LABEL_66;
    }
    uint64_t v56 = countAndFlagsBits;
    uint64_t v57 = type metadata accessor for AnnounceCallFlow();
    uint64_t v58 = type metadata accessor for MainFlow(0LL);
    outlined init with copy of SharedGlobalsProviding(v126 + *(int *)(v58 + 20), (uint64_t)&v129);
    uint64_t v59 = swift_retain();
    uint64_t v60 = AnnounceCallFlow.__allocating_init(directAction:sharedGlobals:)(v59, &v129);
    goto LABEL_32;
  }

  if (v36 == 0xD000000000000046LL && v37 == 0x80000000003479D0LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000046LL, 0x80000000003479D0LL, v36, v37, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v63 = (uint64_t)v122;
    v120(v122, v31, v121);
    uint64_t countAndFlagsBits = (uint64_t)specialized AnnounceIncomingCallNotificationDirectAction.__allocating_init(invocation:contactStore:)( v63,  (uint64_t)[objc_allocWithZone(CNContactStore) init]);
    if (!countAndFlagsBits) {
      goto LABEL_66;
    }
    uint64_t v56 = countAndFlagsBits;
    uint64_t v57 = type metadata accessor for AnnounceCallFlow();
    uint64_t v64 = type metadata accessor for MainFlow(0LL);
    outlined init with copy of SharedGlobalsProviding(v126 + *(int *)(v64 + 20), (uint64_t)&v129);
    uint64_t v65 = swift_retain();
    default argument 2 of PhoneCallFlow.init(state:sharedGlobals:appFinder:eligibleAppsFinder:)(v128, v65);
    AnnounceCallFlow.__allocating_init(directAction:sharedGlobals:appFinder:)(v56, &v129, v128);
LABEL_32:
    uint64_t v41 = v60;
    os_log_type_t v61 = v125;
    v125[3] = v57;
    uint64_t v43 = v61;
    lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type AnnounceCallFlow and conformance AnnounceCallFlow,  (uint64_t (*)(uint64_t))type metadata accessor for AnnounceCallFlow,  (uint64_t)&protocol conformance descriptor for AnnounceCallFlow);
    v43[4] = v62;
    swift_release(v56);
    goto LABEL_33;
  }

  if (one-time initialization token for identifier != -1) {
    swift_once(&one-time initialization token for identifier, one-time initialization function for identifier);
  }
  uint64_t v66 = *(void *)&static AnnounceVoicemailDirectAction.identifier[16];
  uint64_t v67 = *(void **)&static AnnounceVoicemailDirectAction.identifier[24];
  uint64_t v129 = *(void *)static AnnounceVoicemailDirectAction.identifier;
  uint64_t v130 = *(void *)&static AnnounceVoicemailDirectAction.identifier[8];
  swift_bridgeObjectRetain();
  v68._uint64_t countAndFlagsBits = 46LL;
  v68._object = (void *)0xE100000000000000LL;
  String.append(_:)(v68);
  swift_bridgeObjectRetain();
  v69._uint64_t countAndFlagsBits = v66;
  v69._object = v67;
  String.append(_:)(v69);
  swift_bridgeObjectRelease();
  if (v129 == v36 && v130 == v37)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v71 = _stringCompareWithSmolCheck(_:_:expecting:)(v129, v130, v36, v37, 0LL);
    swift_bridgeObjectRelease();
    if ((v71 & 1) == 0)
    {
      if (one-time initialization token for identifier != -1) {
        swift_once(&one-time initialization token for identifier, one-time initialization function for identifier);
      }
      BOOL v72 = static AnnounceDropInCallDirectAction.identifier == v36 && unk_477C50 == v37;
      if (v72
        || (_stringCompareWithSmolCheck(_:_:expecting:)( static AnnounceDropInCallDirectAction.identifier,  unk_477C50,  v36,  v37,  0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = AnnounceDropInCallDirectAction.init(from:)(v34);
        if ((v73 & 1) == 0)
        {
          uint64_t v74 = countAndFlagsBits;
          uint64_t v75 = type metadata accessor for MainFlow(0LL);
          outlined init with copy of SharedGlobalsProviding(v126 + *(int *)(v75 + 20), (uint64_t)&v129);
          uint64_t v76 = type metadata accessor for AnnounceCallBellCATPatternsExecutor(0LL);
          uint64_t v77 = v118;
          static CATOption.defaultMode.getter(v76);
          uint64_t v78 = CATWrapper.__allocating_init(options:globals:)(v77, 0LL);
          uint64_t v79 = type metadata accessor for ResponseFactory(0LL);
          swift_allocObject(v79, *(unsigned int *)(v79 + 48), *(unsigned __int16 *)(v79 + 52));
          uint64_t v80 = ResponseFactory.init()();
          uint64_t v81 = type metadata accessor for AnnounceDropInCallFlow(0LL);
          uint64_t v82 = swift_allocObject(v81, *(unsigned int *)(v81 + 48), *(unsigned __int16 *)(v81 + 52));
          uint64_t v41 = specialized AnnounceDropInCallFlow.init(announcementType:sharedGlobals:announceCallBellCatPatterns:responseGenerator:)( v74,  &v129,  v78,  v80,  v82);
          uint64_t v43 = v125;
          v125[3] = v81;
          lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type AnnounceDropInCallFlow and conformance AnnounceDropInCallFlow,  type metadata accessor for AnnounceDropInCallFlow,  (uint64_t)&protocol conformance descriptor for AnnounceDropInCallFlow);
          v43[4] = v83;
          goto LABEL_33;
        }

        goto LABEL_66;
      }

      swift_bridgeObjectRelease();
      if (v36 == 0xD00000000000002CLL && v37 == 0x8000000000347A20LL)
      {
        swift_bridgeObjectRelease();
      }

      else
      {
        char v96 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002CLL, 0x8000000000347A20LL, v36, v37, 0LL);
        uint64_t countAndFlagsBits = swift_bridgeObjectRelease();
        if ((v96 & 1) == 0) {
          goto LABEL_66;
        }
      }

      uint64_t v97 = (void *)(v126 + *(int *)(type metadata accessor for MainFlow(0LL) + 20));
      uint64_t v98 = v97[3];
      uint64_t v99 = v97[4];
      __swift_project_boxed_opaque_existential_1(v97, v98);
      uint64_t v100 = (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 56))(v98, v99);
      LOBYTE(v98) = (*(uint64_t (**)(uint64_t))(*(void *)v100 + 200LL))(v100);
      uint64_t countAndFlagsBits = swift_release(v100);
      if ((v98 & 1) != 0)
      {
        uint64_t v41 = static HangUpDirectInvocationFlowFactory.makeHangUpFlow(sharedGlobals:)(v97);
        goto LABEL_18;
      }

LABEL_66:
      uint64_t v101 = Parse.DirectInvocation.identifier.getter(countAndFlagsBits);
      uint64_t v103 = v123;
      uint64_t v102 = (uint64_t)v124;
      uint64_t *v124 = v101;
      *(void *)(v102 + 8) = v104;
      swift_storeEnumTagMultiPayload(v102, v103, 0LL);
      lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError,  type metadata accessor for PhoneError,  (uint64_t)&protocol conformance descriptor for PhoneError);
      swift_allocError(v103, v105, 0LL, 0LL);
      PhoneError.logged()(v106);
      outlined destroy of MainFlow(v102, type metadata accessor for PhoneError);
      swift_willThrow(v107, v108, v109, v110, v111, v112, v113, v114);
      return;
    }
  }

  swift_bridgeObjectRelease();
  uint64_t v84 = swift_bridgeObjectRelease();
  uint64_t v85 = Parse.DirectInvocation.userData.getter(v84);
  uint64_t v86 = v127;
  uint64_t v87 = specialized static DICodable.from(_:)(v85);
  swift_bridgeObjectRelease();
  if (!v86)
  {
    uint64_t v88 = type metadata accessor for MainFlow(0LL);
    outlined init with copy of SharedGlobalsProviding(v126 + *(int *)(v88 + 20), (uint64_t)&v129);
    uint64_t v89 = one-time initialization token for instance;
    swift_retain();
    if (v89 != -1) {
      swift_once(&one-time initialization token for instance, one-time initialization function for instance);
    }
    uint64_t v90 = (void *)static SiriPhoneDefaults.instance;
    id v91 = objc_allocWithZone(&OBJC_CLASS___CNContactStore);
    id v92 = v90;
    id v93 = [v91 init];
    outlined init with copy of SharedGlobalsProviding((uint64_t)&v129, (uint64_t)v128);
    uint64_t v94 = type metadata accessor for AnnounceVoicemailFlow();
    uint64_t v41 = swift_allocObject(v94, 152LL, 7LL);
    *(void *)(v41 + 56) = &type metadata for SiriPhoneDefaults;
    *(void *)(v41 + 64) = &protocol witness table for SiriPhoneDefaults;
    *(void *)(v41 + 32) = v90;
    *(void *)(v41 + 136) = type metadata accessor for CNContactStore( 0LL,  &lazy cache variable for type metadata for CNContactStore,  &OBJC_CLASS___CNContactStore_ptr);
    *(void *)(v41 + 144) = &protocol witness table for CNContactStore;
    *(void *)(v41 + 112) = v93;
    *(void *)(v41 + 16) = v87;
    *(_BYTE *)(v41 + 24) = 0;
    outlined init with take of AppSelectionSignalComponent(v128, v41 + 72);
    __swift_destroy_boxed_opaque_existential_1(&v129);
    uint64_t v43 = v125;
    v125[3] = v94;
    lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type AnnounceVoicemailFlow and conformance AnnounceVoicemailFlow,  (uint64_t (*)(uint64_t))type metadata accessor for AnnounceVoicemailFlow,  (uint64_t)&protocol conformance descriptor for AnnounceVoicemailFlow);
    v43[4] = v95;
    swift_release(v87);
    goto LABEL_33;
  }

uint64_t MainFlow.makeFlowForIntent()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v25 = type metadata accessor for Parse(0LL);
  uint64_t v2 = *(void *)(v25 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for Input(0LL);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (void *)(v1 + *(int *)(type metadata accessor for MainFlow(0LL) + 20));
  uint64_t v9 = v7[3];
  uint64_t v8 = v7[4];
  __swift_project_boxed_opaque_existential_1(v7, v9);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 72))(v9, v8);
  uint64_t v12 = v7[3];
  uint64_t v11 = v7[4];
  __swift_project_boxed_opaque_existential_1(v7, v12);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v11 + 120))(&v28, v12, v11);
  (*(void (**)(void *__return_ptr, uint64_t, __int128 *))(*(void *)v10 + 184LL))(v31, v1, &v28);
  swift_release(v10);
  __swift_destroy_boxed_opaque_existential_1(&v28);
  outlined init with copy of AnyPhoneNLIntent?((uint64_t)v31, (uint64_t)&v28);
  if (v29)
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPhoneNLIntent);
    type metadata accessor for PhoneCallControlNLIntent();
    if ((swift_dynamicCast(v27, &v28, v13) & 1) != 0)
    {
      swift_release(v27[0]);
      (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v1, v25);
      Input.init(parse:)(v4);
      outlined init with copy of SharedGlobalsProviding((uint64_t)v7, (uint64_t)&v28);
      default argument 2 of PhoneCallFlow.init(state:sharedGlobals:appFinder:eligibleAppsFinder:)(v27, v14);
      uint64_t v15 = type metadata accessor for PhoneCallControlFlow(0LL);
      swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
      uint64_t v16 = PhoneCallControlFlow.init(input:sharedGlobals:appFinder:)((uint64_t)v6, &v28, (uint64_t)v27);
      uint64_t v29 = v15;
      lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type PhoneCallControlFlow and conformance PhoneCallControlFlow,  type metadata accessor for PhoneCallControlFlow,  (uint64_t)&protocol conformance descriptor for PhoneCallControlFlow);
      uint64_t v30 = v17;
      *(void *)&__int128 v28 = v16;
      outlined destroy of UUID?((uint64_t)v31, &demangling cache variable for type metadata for AnyPhoneNLIntent?);
      return outlined init with take of AppSelectionSignalComponent(&v28, v26);
    }
  }

  else
  {
    outlined destroy of UUID?((uint64_t)&v28, &demangling cache variable for type metadata for AnyPhoneNLIntent?);
  }

  uint64_t v19 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v1, v25);
  Input.init(parse:)(v4);
  outlined init with copy of SharedGlobalsProviding((uint64_t)v7, (uint64_t)&v28);
  default argument 2 of PhoneCallFlow.init(state:sharedGlobals:appFinder:eligibleAppsFinder:)(v27, v20);
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  uint64_t v21 = static EligibleAppFinder.instance;
  swift_retain();
  uint64_t v22 = specialized PhoneCallFlow.__allocating_init(input:sharedGlobals:appFinder:eligibleAppsFinder:)( (uint64_t)v6,  &v28,  v27,  v21);
  uint64_t v29 = type metadata accessor for PhoneCallFlow(0LL);
  lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type PhoneCallFlow and conformance PhoneCallFlow,  type metadata accessor for PhoneCallFlow,  (uint64_t)&protocol conformance descriptor for PhoneCallFlow);
  uint64_t v30 = v23;
  *(void *)&__int128 v28 = v22;
  outlined destroy of UUID?((uint64_t)v31, &demangling cache variable for type metadata for AnyPhoneNLIntent?);
  return outlined init with take of AppSelectionSignalComponent(&v28, v19);
}

uint64_t specialized static DICodable.from(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AnnounceVoicemailDirectAction();
  if (!a1) {
    Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  }
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v24 = 0LL;
  id v6 = [v4 dataWithPropertyList:isa format:200 options:0 error:&v24];

  id v7 = v24;
  if (v6)
  {
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
    unint64_t v10 = v9;

    uint64_t v11 = type metadata accessor for PropertyListDecoder(0LL);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v12 = PropertyListDecoder.init()();
    lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type AnnounceVoicemailDirectAction and conformance AnnounceVoicemailDirectAction,  (uint64_t (*)(uint64_t))type metadata accessor for AnnounceVoicemailDirectAction,  (uint64_t)&protocol conformance descriptor for AnnounceVoicemailDirectAction);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&v25, v3, v8, v10, v3, v13);
    swift_release(v12);
    uint64_t result = outlined consume of Data._Representation(v8, v10);
    if (!v1) {
      return v25;
    }
  }

  else
  {
    uint64_t v15 = v7;
    _convertNSErrorToError(_:)(v7);

    return swift_willThrow(v16, v17, v18, v19, v20, v21, v22, v23);
  }

  return result;
}

uint64_t MainFlow.init(parse:sharedGlobals:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = OUTLINED_FUNCTION_4_3();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a3, a1, v6);
  uint64_t v7 = a3 + *(int *)(OUTLINED_FUNCTION_4_15() + 20);
  return outlined init with take of AppSelectionSignalComponent(a2, v7);
}

uint64_t protocol witness for Flow.execute() in conformance MainFlow(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_42C9B4);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for Flow.execute() in conformance ContactNeedsValueGuardFlow<A>;
  return MainFlow.execute()(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for MainFlow(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v10);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Parse(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    __int128 v9 = *(_OWORD *)((char *)a2 + v8 + 24);
    *(_OWORD *)((char *)a1 + v8 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
  }

  return a1;
}

uint64_t destroy for MainFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Parse(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  return __swift_destroy_boxed_opaque_existential_1((void *)(a1 + *(int *)(a2 + 20)));
}

uint64_t initializeWithCopy for MainFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Parse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  __int128 v8 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v8;
  (**(void (***)(void))(v8 - 8))();
  return a1;
}

uint64_t assignWithCopy for MainFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Parse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  __swift_assign_boxed_opaque_existential_1((void *)(a1 + *(int *)(a3 + 20)), (void *)(a2 + *(int *)(a3 + 20)));
  return a1;
}

uint64_t initializeWithTake for MainFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Parse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  __int128 v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  return a1;
}

uint64_t assignWithTake for MainFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Parse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + v7));
  __int128 v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MainFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_7D0E4);
}

uint64_t sub_7D0E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = OUTLINED_FUNCTION_4_3();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v8) = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MainFlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_7D168);
}

uint64_t sub_7D168(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = OUTLINED_FUNCTION_4_3();
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return __swift_storeEnumTagSinglePayload(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for MainFlow(uint64_t a1)
{
  uint64_t result = type metadata accessor for Parse(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "(";
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t specialized PhoneCallFlow.__allocating_init(input:sharedGlobals:appFinder:eligibleAppsFinder:)( uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for PhoneCallFlow.State(0LL);
  __chkstk_darwin();
  __int128 v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Input(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, a1, v11);
  swift_storeEnumTagMultiPayload(v10, v8, 0LL);
  outlined init with copy of SharedGlobalsProviding((uint64_t)a2, (uint64_t)v24);
  outlined init with copy of SharedGlobalsProviding((uint64_t)a3, (uint64_t)v23);
  uint64_t v13 = type metadata accessor for PhoneCallFlow(0LL);
  uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  swift_retain();
  uint64_t v15 = specialized PhoneCallFlow.init(state:sharedGlobals:appFinder:eligibleAppsFinder:)( (uint64_t)v10,  v24,  v23,  a4,  v14);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.siriPhone);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v20 = static os_log_type_t.debug.getter(v18, v19);
  if (os_log_type_enabled(v18, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl(&dword_0, v18, v20, "#PhoneCallFlow state is initialized.", v21, 2u);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  swift_release(a4);

  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a2);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  return v15;
}

uint64_t specialized PhoneCallFlow.init(state:sharedGlobals:appFinder:eligibleAppsFinder:)( uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  v14[3] = type metadata accessor for EligibleAppFinder();
  v14[4] = &protocol witness table for EligibleAppFinder;
  v14[0] = a4;
  *(void *)(a5 + 176) = _swiftEmptyArrayStorage;
  outlined init with copy of SharedGlobalsProviding((uint64_t)a3, a5 + 16);
  outlined init with copy of MainFlow( a1,  a5 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin13PhoneCallFlow_state,  type metadata accessor for PhoneCallFlow.State);
  outlined init with copy of SharedGlobalsProviding((uint64_t)a2, a5 + 56);
  outlined init with copy of SharedGlobalsProviding((uint64_t)v14, a5 + 96);
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v10);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v11 + 216))(v13, v10, v11);
  __swift_destroy_boxed_opaque_existential_1(v14);
  __swift_destroy_boxed_opaque_existential_1(a3);
  outlined destroy of MainFlow(a1, type metadata accessor for PhoneCallFlow.State);
  outlined init with take of AppSelectionSignalComponent(v13, a5 + 136);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return a5;
}

void outlined init with copy of MainFlow(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  OUTLINED_FUNCTION_2();
}

uint64_t specialized IdentifyIncomingCallerDirectAction.__allocating_init(invocation:contactStore:)( uint64_t a1, uint64_t a2)
{
  uint64_t v36 = type metadata accessor for CNContactStore( 0LL,  &lazy cache variable for type metadata for CNContactStore,  &OBJC_CLASS___CNContactStore_ptr);
  uint64_t v37 = &protocol witness table for CNContactStore;
  v35[0] = a2;
  uint64_t v4 = Parse.DirectInvocation.userData.getter(v36);
  if (v4)
  {
    uint64_t v5 = v4;
    if (one-time initialization token for announceTelephony != -1) {
      swift_once( &one-time initialization token for announceTelephony,  one-time initialization function for announceTelephony);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v6, (uint64_t)static Logger.announceTelephony);
    uint64_t v7 = swift_bridgeObjectRetain_n(v5, 2LL);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v10 = static os_log_type_t.debug.getter(v8, v9);
    if (os_log_type_enabled(v8, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v32 = a1;
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      v34[0] = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v13 = swift_bridgeObjectRetain();
      uint64_t v14 = Dictionary.description.getter( v13,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
      unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v11 + 4);
      swift_bridgeObjectRelease_n(v5, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v8, v10, "#IdentifyIncomingCallerDirectAction: Direct Invocation payload: %s.", v11, 0xCu);
      swift_arrayDestroy(v12, 1LL);
      uint64_t v17 = v12;
      a1 = v32;
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v5, 2LL);
    }

    outlined init with copy of SharedGlobalsProviding((uint64_t)v35, (uint64_t)v34);
    uint64_t v25 = type metadata accessor for IdentifyIncomingCallerDirectAction();
    uint64_t v26 = swift_allocObject(v25, 139LL, 7LL);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v34, v34[3]);
    __chkstk_darwin();
    __int128 v28 = (uint64_t *)((char *)&v32 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(uint64_t *))(v29 + 16))(v28);
    uint64_t v24 = specialized IdentifyIncomingCallerDirectAction.init(from:contactStore:)(v5, *v28, v26);
    __swift_destroy_boxed_opaque_existential_1(v34);
    __swift_destroy_boxed_opaque_existential_1(v35);
    uint64_t v30 = type metadata accessor for Parse.DirectInvocation(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8LL))(a1, v30);
  }

  else
  {
    if (one-time initialization token for announceTelephony != -1) {
      swift_once( &one-time initialization token for announceTelephony,  one-time initialization function for announceTelephony);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    uint64_t v19 = __swift_project_value_buffer(v18, (uint64_t)static Logger.announceTelephony);
    os_log_type_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_0, v20, v21, "#IdentifyIncomingCallerDirectAction: No userData in DirectInvocation.", v22, 2u);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    __swift_destroy_boxed_opaque_existential_1(v35);
    uint64_t v23 = type metadata accessor for Parse.DirectInvocation(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8LL))(a1, v23);
    return 0LL;
  }

  return v24;
}

void *specialized AnnounceIncomingCallNotificationDirectAction.__allocating_init(invocation:contactStore:)( uint64_t a1, uint64_t a2)
{
  uint64_t v63 = type metadata accessor for CNContactStore( 0LL,  &lazy cache variable for type metadata for CNContactStore,  &OBJC_CLASS___CNContactStore_ptr);
  uint64_t v64 = &protocol witness table for CNContactStore;
  v62[0] = a2;
  uint64_t v4 = Parse.DirectInvocation.userData.getter(v63);
  if (!v4)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v14, v15)) {
      goto LABEL_24;
    }
    unint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v16 = 0;
    uint64_t v17 = "#AnnounceIncomingCallNotificationDirectAction: No userData.";
LABEL_23:
    _os_log_impl(&dword_0, v14, v15, v17, v16, 2u);
    swift_slowDealloc(v16, -1LL, -1LL);
LABEL_24:

    __swift_destroy_boxed_opaque_existential_1(v62);
    uint64_t v22 = type metadata accessor for Parse.DirectInvocation(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8LL))(a1, v22);
    return 0LL;
  }

  uint64_t v5 = v4;
  specialized Dictionary.subscript.getter(0x6C646E7542707061LL, 0xEB00000000644965LL, v4, v58);
  if (!v59)
  {
    swift_bridgeObjectRelease();
    outlined destroy of UUID?((uint64_t)v58, &demangling cache variable for type metadata for Any?);
LABEL_13:
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    uint64_t v19 = __swift_project_value_buffer(v18, (uint64_t)static Logger.siriPhone);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v14, v15)) {
      goto LABEL_24;
    }
    unint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v16 = 0;
    uint64_t v17 = "#AnnounceIncomingCallNotificationDirectAction: No App bundleId.";
    goto LABEL_23;
  }

  if ((swift_dynamicCast(&v60, v58, (char *)&type metadata for Any + 8) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }

  uint64_t v7 = v60;
  unint64_t v6 = v61;
  specialized Dictionary.subscript.getter(0x6163696669746F6ELL, 0xEC0000006E6F6974LL, v5, v58);
  swift_bridgeObjectRelease();
  if (!v59)
  {
    swift_bridgeObjectRelease();
    outlined destroy of UUID?((uint64_t)v58, &demangling cache variable for type metadata for Any?);
LABEL_19:
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.siriPhone);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v14, v15)) {
      goto LABEL_24;
    }
    unint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v16 = 0;
    uint64_t v17 = "#AnnounceIncomingCallNotificationDirectAction: No notification data in UserData.";
    goto LABEL_23;
  }

  if ((swift_dynamicCast(&v60, v58, (char *)&type metadata for Any + 8) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }

  uint64_t v8 = v60;
  unint64_t v9 = v61;
  type metadata accessor for CNContactStore( 0LL,  &lazy cache variable for type metadata for NSKeyedUnarchiver,  &OBJC_CLASS___NSKeyedUnarchiver_ptr);
  uint64_t v10 = type metadata accessor for CNContactStore( 0LL,  &lazy cache variable for type metadata for UNNotification,  &OBJC_CLASS___UNNotification_ptr);
  uint64_t v11 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v10, v8, v9, v10);
  uint64_t v25 = v11;
  if (!v11)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v38 = type metadata accessor for Logger(0LL);
    uint64_t v39 = __swift_project_value_buffer(v38, (uint64_t)static Logger.siriPhone);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl( &dword_0,  v14,  v40,  "#AnnounceIncomingCallNotificationDirectAction: No notification in archived data.",  v41,  2u);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    outlined consume of Data._Representation(v8, v9);
    goto LABEL_24;
  }

  uint64_t v57 = v8;
  uint64_t v26 = one-time initialization token for siriPhone;
  id v27 = v11;
  if (v26 != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v28 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v28, (uint64_t)static Logger.siriPhone);
  id v29 = v27;
  swift_bridgeObjectRetain_n(v6, 2LL);
  id v30 = v29;
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v33 = static os_log_type_t.debug.getter(v31, v32);
  int v34 = v33;
  uint64_t v56 = v30;
  if (os_log_type_enabled(v31, v33))
  {
    uint64_t v35 = swift_slowAlloc(22LL, -1LL);
    uint64_t v53 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v54 = swift_slowAlloc(32LL, -1LL);
    v58[0] = v54;
    *(_DWORD *)uint64_t v35 = 136315394;
    int v52 = v34;
    swift_bridgeObjectRetain();
    uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, v58);
    os_log_type_t v51 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v35 + 4);
    swift_bridgeObjectRelease_n(v6, 3LL);
    *(_WORD *)(v35 + 12) = 2112;
    unint64_t v55 = v9;
    uint64_t v60 = (uint64_t)v30;
    id v36 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v35 + 14);
    uint64_t v37 = v53;
    *uint64_t v53 = v25;

    _os_log_impl( &dword_0,  v51,  (os_log_type_t)v52,  "#AnnounceIncomingCallNotificationDirectAction: initialized with bundleID: %s and notification %@.",  (uint8_t *)v35,  0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v37, 1LL);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_arrayDestroy(v54, 1LL);
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v6, 2LL);
  }

  uint64_t v42 = v57;
  outlined init with copy of SharedGlobalsProviding((uint64_t)v62, (uint64_t)v58);
  uint64_t v43 = type metadata accessor for AnnounceIncomingCallNotificationDirectAction();
  PhoneCallFlowDelegatePlugin::StartCallDirectAction_optional v44 = (void *)swift_allocObject(v43, 112LL, 7LL);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v58, v59);
  __chkstk_darwin();
  uint64_t v46 = (uint64_t *)((char *)&v50 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v47 + 16))(v46);
  BOOL v48 = v56;
  uint64_t v23 = specialized AnnounceIncomingCallNotificationDirectAction.init(appBundleId:notification:contactStore:)( v7,  v6,  v56,  *v46,  v44);
  __swift_destroy_boxed_opaque_existential_1(v58);
  outlined consume of Data._Representation(v42, v9);

  __swift_destroy_boxed_opaque_existential_1(v62);
  uint64_t v49 = type metadata accessor for Parse.DirectInvocation(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8LL))(a1, v49);
  return v23;
}

uint64_t specialized AnnounceDropInCallFlow.init(announcementType:sharedGlobals:announceCallBellCatPatterns:responseGenerator:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for DialogPhase(0LL);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for AnnounceCallBellCATPatternsExecutor(0LL);
  uint64_t v21 = &protocol witness table for AnnounceCallBellCATPatternsExecutor;
  *(void *)&__int128 v19 = a3;
  uint64_t v17 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v18 = &protocol witness table for ResponseFactory;
  *(void *)&__int128 v16 = a4;
  static DialogPhase.completion.getter(v17);
  OutputGenerationManifest.init(dialogPhase:_:)( v13,  closure #1 in variable initialization expression of UnsupportedCallFlowOutputFactory.completionOutputManifest,  0LL);
  *(void *)(a5 + 144) = a1;
  outlined init with copy of SharedGlobalsProviding((uint64_t)a2, a5 + 104);
  type metadata accessor for AnnounceCallBellCATs(0LL);
  static CATOption.defaultMode.getter();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)(v11, 0LL);
  __swift_destroy_boxed_opaque_existential_1(a2);
  *(void *)(a5 + 16) = v14;
  outlined init with take of AppSelectionSignalComponent(&v19, a5 + 24);
  outlined init with take of AppSelectionSignalComponent(&v16, a5 + 64);
  return a5;
}

uint64_t outlined init with take of StartAudioCallDirectAction?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StartAudioCallDirectAction?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of StartAudioCallDirectAction?(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of StartAudioCallDirectAction?( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data?(a5, a6);
    outlined consume of Data?(a7, a8);
    return swift_unknownObjectRelease(a9);
  }

  return result;
}

void *specialized AnnounceIncomingCallNotificationDirectAction.init(appBundleId:notification:contactStore:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  v34[3] = type metadata accessor for CNContactStore( 0LL,  &lazy cache variable for type metadata for CNContactStore,  &OBJC_CLASS___CNContactStore_ptr);
  v34[4] = &protocol witness table for CNContactStore;
  v34[0] = a4;
  a5[11] = 0LL;
  a5[7] = a1;
  a5[8] = a2;
  id v10 = [a3 request];
  id v11 = [v10 identifier];

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v14 = v13;

  a5[9] = v12;
  a5[10] = v14;
  a5[12] = a3;
  outlined init with copy of SharedGlobalsProviding((uint64_t)v34, (uint64_t)(a5 + 2));
  id v15 = a3;
  id v16 = [v15 request];
  id v17 = [v16 content];

  id v18 = [v17 communicationContext];
  if (!v18)
  {
    id v24 = 0LL;
    a5[13] = 1LL;
LABEL_13:
    uint64_t v25 = (*(uint64_t (**)(id))(*a5 + 264LL))(v24);

    goto LABEL_14;
  }

  __int128 v19 = (char *)[v18 capabilities];
  uint64_t v20 = 1LL;
  if (v19 == (_BYTE *)&dword_0 + 1) {
    uint64_t v20 = 2LL;
  }
  a5[13] = v20;
  id v21 = [v18 sender];
  if (!v21)
  {
    id v26 = [v18 recipients];
    uint64_t v27 = type metadata accessor for CNContactStore( 0LL,  &lazy cache variable for type metadata for _UNNotificationContact,  &OBJC_CLASS____UNNotificationContact_ptr);
    uint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v27);

    if ((unint64_t)v28 >> 62)
    {
      if (v28 < 0) {
        uint64_t v32 = v28;
      }
      else {
        uint64_t v32 = v28 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      id v24 = (id)_CocoaArrayWrapper.endIndex.getter(v32);
      swift_bridgeObjectRelease();
      if (!v24) {
        goto LABEL_12;
      }
    }

    else
    {
      id v24 = *(id *)((char *)&dword_10 + (v28 & 0xFFFFFFFFFFFFF8LL));
      if (!v24)
      {
LABEL_12:
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
    }

    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (v28 & 0xC000000000000001LL) == 0, v28);
    if ((v28 & 0xC000000000000001LL) != 0) {
      id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v28);
    }
    else {
      id v29 = *(id *)(v28 + 32);
    }
    id v24 = v29;
    goto LABEL_12;
  }

  id v22 = v21;
  uint64_t v23 = *(uint64_t (**)(id))(*a5 + 264LL);
  id v24 = v21;
  uint64_t v25 = v23(v22);

LABEL_14:
  __swift_destroy_boxed_opaque_existential_1(v34);
  swift_beginAccess(a5 + 11, &v33, 1LL, 0LL);
  id v30 = (void *)a5[11];
  a5[11] = v25;

  return a5;
}

uint64_t specialized IdentifyIncomingCallerDirectAction.init(from:contactStore:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v50 = type metadata accessor for CNContactStore( 0LL,  &lazy cache variable for type metadata for CNContactStore,  &OBJC_CLASS___CNContactStore_ptr);
  os_log_type_t v51 = &protocol witness table for CNContactStore;
  *(void *)&__int128 v49 = a2;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_BYTE *)(a3 + 136) = 1;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(SKIPhoneAnnounceIncomingCallerDirectInvocationPayloadKeyCallUUID);
  specialized Dictionary.subscript.getter(v6, v7, a1, &v47);
  swift_bridgeObjectRelease();
  if (v48)
  {
    int v8 = swift_dynamicCast(v46, &v47, (char *)&type metadata for Any + 8);
    if (v8) {
      uint64_t v9 = v46[0];
    }
    else {
      uint64_t v9 = 0LL;
    }
    if (v8) {
      uint64_t v10 = v46[1];
    }
    else {
      uint64_t v10 = 0LL;
    }
  }

  else
  {
    outlined destroy of UUID?((uint64_t)&v47, &demangling cache variable for type metadata for Any?);
    uint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
  }

  swift_beginAccess(a3 + 56, v46, 1LL, 0LL);
  *(void *)(a3 + 56) = v9;
  *(void *)(a3 + 64) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(SKIPhoneAnnounceIncomingCallerDirectInvocationPayloadKeyCallProviderBundleId);
  specialized Dictionary.subscript.getter(v11, v12, a1, &v47);
  swift_bridgeObjectRelease();
  if (v48)
  {
    int v13 = swift_dynamicCast(v45, &v47, (char *)&type metadata for Any + 8);
    if (v13) {
      uint64_t v14 = v45[0];
    }
    else {
      uint64_t v14 = 0LL;
    }
    if (v13) {
      uint64_t v15 = v45[1];
    }
    else {
      uint64_t v15 = 0LL;
    }
  }

  else
  {
    outlined destroy of UUID?((uint64_t)&v47, &demangling cache variable for type metadata for Any?);
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
  }

  swift_beginAccess(a3 + 72, v45, 1LL, 0LL);
  *(void *)(a3 + 72) = v14;
  *(void *)(a3 + 80) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(SKIPhoneAnnounceIncomingCallerDirectInvocationPayloadKeyCallProviderIdentifier);
  specialized Dictionary.subscript.getter(v16, v17, a1, &v47);
  swift_bridgeObjectRelease();
  if (v48)
  {
    int v18 = swift_dynamicCast(v44, &v47, (char *)&type metadata for Any + 8);
    if (v18) {
      uint64_t v19 = v44[0];
    }
    else {
      uint64_t v19 = 0LL;
    }
    if (v18) {
      uint64_t v20 = v44[1];
    }
    else {
      uint64_t v20 = 0LL;
    }
  }

  else
  {
    outlined destroy of UUID?((uint64_t)&v47, &demangling cache variable for type metadata for Any?);
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
  }

  swift_beginAccess(a3 + 88, v44, 1LL, 0LL);
  *(void *)(a3 + 88) = v19;
  *(void *)(a3 + 96) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(SKIPhoneAnnounceIncomingCallerDirectInvocationPayloadKeyCallerContactIdentifiers);
  specialized Dictionary.subscript.getter(v21, v22, a1, &v47);
  swift_bridgeObjectRelease();
  if (v48)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    else {
      uint64_t v23 = 0LL;
    }
  }

  else
  {
    outlined destroy of UUID?((uint64_t)&v47, &demangling cache variable for type metadata for Any?);
    uint64_t v23 = 0LL;
  }

  swift_beginAccess(a3 + 104, v43, 1LL, 0LL);
  *(void *)(a3 + 104) = v23;
  swift_bridgeObjectRelease();
  if (one-time initialization token for handleTypeKey != -1) {
    swift_once(&one-time initialization token for handleTypeKey, one-time initialization function for handleTypeKey);
  }
  uint64_t v24 = static IdentifyIncomingCallerDirectAction.handleTypeKey;
  uint64_t v25 = unk_43EF10;
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.getter(v24, v25, a1, &v47);
  swift_bridgeObjectRelease();
  if (v48)
  {
    if ((swift_dynamicCast(v42, &v47, (char *)&type metadata for Any + 8) & 1) != 0)
    {
      char v26 = 0;
      uint64_t v27 = v42[0];
      goto LABEL_37;
    }
  }

  else
  {
    outlined destroy of UUID?((uint64_t)&v47, &demangling cache variable for type metadata for Any?);
  }

  uint64_t v27 = 0LL;
  char v26 = 1;
LABEL_37:
  swift_beginAccess(a3 + 128, v42, 1LL, 0LL);
  *(void *)(a3 + outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 - 168), v0 - 128) = v27;
  *(_BYTE *)(a3 + 136) = v26;
  if (one-time initialization token for handleValueKey != -1) {
    swift_once(&one-time initialization token for handleValueKey, one-time initialization function for handleValueKey);
  }
  uint64_t v28 = static IdentifyIncomingCallerDirectAction.handleValueKey;
  uint64_t v29 = unk_43EF20;
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.getter(v28, v29, a1, &v47);
  swift_bridgeObjectRelease();
  if (v48)
  {
    int v30 = swift_dynamicCast(v41, &v47, (char *)&type metadata for Any + 8);
    if (v30) {
      uint64_t v31 = v41[0];
    }
    else {
      uint64_t v31 = 0LL;
    }
    if (v30) {
      uint64_t v32 = v41[1];
    }
    else {
      uint64_t v32 = 0LL;
    }
  }

  else
  {
    outlined destroy of UUID?((uint64_t)&v47, &demangling cache variable for type metadata for Any?);
    uint64_t v31 = 0LL;
    uint64_t v32 = 0LL;
  }

  swift_beginAccess(a3 + 112, v41, 1LL, 0LL);
  *(void *)(a3 + 112) = v31;
  *(void *)(a3 + 120) = v32;
  swift_bridgeObjectRelease();
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(SKIPhoneAnnounceIncomingCallerDirectInvocationPayloadKeyIsVideo);
  specialized Dictionary.subscript.getter(v33, v34, a1, &v47);
  swift_bridgeObjectRelease();
  if (v48)
  {
    if ((swift_dynamicCast(&v40, &v47, (char *)&type metadata for Any + 8) & 1) != 0)
    {
      char v35 = v40;
      goto LABEL_52;
    }
  }

  else
  {
    outlined destroy of UUID?((uint64_t)&v47, &demangling cache variable for type metadata for Any?);
  }

  char v35 = 0;
LABEL_52:
  *(_BYTE *)(a3 + 137) = v35;
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(SKIPhoneAnnounceIncomingCallerDirectInvocationPayloadKeyIsCallerIdBlocked);
  specialized Dictionary.subscript.getter(v36, v37, a1, &v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v48)
  {
    outlined destroy of UUID?((uint64_t)&v47, &demangling cache variable for type metadata for Any?);
    goto LABEL_56;
  }

  if ((swift_dynamicCast(&v40, &v47, (char *)&type metadata for Any + 8) & 1) == 0)
  {
LABEL_56:
    char v38 = 0;
    goto LABEL_57;
  }

  char v38 = v40;
LABEL_57:
  *(_BYTE *)(a3 + 138) = v38;
  outlined init with take of AppSelectionSignalComponent(&v49, a3 + 16);
  return a3;
}

uint64_t OUTLINED_FUNCTION_4_15()
{
  return type metadata accessor for MainFlow(0LL);
}

uint64_t protocol witness for SPHCallStateSnapshot.callState.getter in conformance CallStateEnvironmentProvider()
{
  return dispatch thunk of CallStateEnvironmentProvider.callState.getter();
}

uint64_t protocol witness for SPHCallStateSnapshot.isDropInCall.getter in conformance CallStateEnvironmentProvider()
{
  return dispatch thunk of CallStateEnvironmentProvider.isDropInCall.getter() & 1;
}

id protocol witness for SPHCallStateSnapshot.callState.getter in conformance AFCallStateSnapshot()
{
  return @nonobjc AFCallStateSnapshot.callState.getter();
}

id @nonobjc AFCallStateSnapshot.callState.getter()
{
  return [v0 callState];
}

unint64_t protocol witness for SPHCallStateSnapshot.isDropInCall.getter in conformance AFCallStateSnapshot()
{
  return (unint64_t)@nonobjc AFCallStateSnapshot.isDropInCall.getter() & 1;
}

id @nonobjc AFCallStateSnapshot.isDropInCall.getter()
{
  return [v0 isDropInCall];
}

uint64_t AFCallState.debugDescription.getter(char a1)
{
  v2._object = (void *)0x8000000000347A50LL;
  v2._uint64_t countAndFlagsBits = 0xD000000000000018LL;
  String.append(_:)(v2);
  if ((a1 & 1) != 0) {
    uint64_t v3 = 1702195828LL;
  }
  else {
    uint64_t v3 = 0x65736C6166LL;
  }
  OUTLINED_FUNCTION_1_20(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x6E6573202020200ALL;
  v4._object = (void *)0xED00003D676E6964LL;
  String.append(_:)(v4);
  if ((a1 & 2) != 0) {
    uint64_t v5 = 1702195828LL;
  }
  else {
    uint64_t v5 = 0x65736C6166LL;
  }
  OUTLINED_FUNCTION_1_20(v5);
  swift_bridgeObjectRelease();
  v6._object = (void *)0xED00003D676E6967LL;
  v6._uint64_t countAndFlagsBits = 0x6E6972202020200ALL;
  String.append(_:)(v6);
  if ((a1 & 4) != 0) {
    uint64_t v7 = 1702195828LL;
  }
  else {
    uint64_t v7 = 0x65736C6166LL;
  }
  if ((a1 & 4) != 0) {
    unint64_t v8 = 0xE400000000000000LL;
  }
  else {
    unint64_t v8 = 0xE500000000000000LL;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 10506LL;
  v10._object = (void *)0xE200000000000000LL;
  String.append(_:)(v10);
  return 0LL;
}

uint64_t specialized OptionSet<>.formIntersection(_:)(uint64_t result)
{
  *v1 &= result;
  return result;
}

BOOL specialized SetAlgebra.isSubset(of:)(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

uint64_t OUTLINED_FUNCTION_0_18(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

void OUTLINED_FUNCTION_1_20(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t specialized BurstVoicemailFinding.find(identifiers:)(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  uint64_t v2 = (void *)swift_task_alloc(dword_42CAD4);
  *(void *)(v1 + 40) = v2;
  *uint64_t v2 = v1;
  v2[1] = specialized BurstVoicemailFinding.find(identifiers:);
  return BurstVoicemailFinder.fetchVoicemails()();
}

{
  OUTLINED_FUNCTION_1_21(a1);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

void specialized BurstVoicemailFinding.find(identifiers:)()
{
  uint64_t v1 = (uint64_t *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized Set.init<A>(_:)(v3);
  uint64_t v5 = (uint64_t)specialized _ArrayProtocol.filter(_:)(v2, v4);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v6 = *v1;
  uint64_t v7 = OUTLINED_FUNCTION_15_1();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n(v6, 2LL);
  uint64_t v8 = swift_bridgeObjectRetain_n(v5, 2LL);
  unint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v11 = static os_log_type_t.debug.getter(v9, v10);
  BOOL v12 = os_log_type_enabled(v9, v11);
  uint64_t v13 = *v1;
  if (!v12)
  {
    OUTLINED_FUNCTION_7_4(*v1);
    OUTLINED_FUNCTION_7_4(v5);
LABEL_18:

    (*(void (**)(uint64_t))(v0 + 8))(v5);
    return;
  }

  os_log_type_t v38 = v11;
  uint64_t v14 = OUTLINED_FUNCTION_7_0(22LL);
  uint64_t v37 = OUTLINED_FUNCTION_7_0(64LL);
  uint64_t v40 = v37;
  *(_DWORD *)uint64_t v14 = 136315394;
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = Array.description.getter(v15, &type metadata for String);
  unint64_t v18 = v17;
  OUTLINED_FUNCTION_62();
  *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v40);
  uint64_t v36 = (uint64_t *)(v0 + 24);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v14 + 4);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_4(v13);
  uint64_t v39 = (uint8_t *)v14;
  *(_WORD *)(v14 + 12) = 2080;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0) {
      uint64_t v33 = v5;
    }
    else {
      uint64_t v33 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v33);
    OUTLINED_FUNCTION_39();
  }

  else
  {
    uint64_t v19 = *(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v20 = _swiftEmptyArrayStorage;
  if (!v19)
  {
LABEL_17:
    uint64_t v30 = Array.description.getter(v20, &type metadata for String);
    unint64_t v32 = v31;
    OUTLINED_FUNCTION_62();
    *uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v36, v1, v39 + 14);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_7_4(v5);
    _os_log_impl(&dword_0, v9, v38, "#BurstVoicemailFinder Looking for %s identifiers, found %s.", v39, 0x16u);
    swift_arrayDestroy(v37, 2LL);
    OUTLINED_FUNCTION_0_2(v37);
    OUTLINED_FUNCTION_0_2((uint64_t)v39);
    goto LABEL_18;
  }

  uint64_t v41 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v19 & 0x8000000000000000LL) == 0)
  {
    uint64_t v34 = (uint64_t *)(v0 + 32);
    uint64_t v35 = v0;
    uint64_t v21 = 0LL;
    uint64_t v20 = v41;
    do
    {
      if ((v5 & 0xC000000000000001LL) != 0) {
        id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v5);
      }
      else {
        id v22 = *(id *)(v5 + 8 * v21 + 32);
      }
      uint64_t v23 = v22;
      id v24 = [v22 identifier];
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      uint64_t v27 = v26;

      uint64_t v41 = v20;
      unint64_t v28 = v20[2];
      if (v28 >= v20[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v20 = v41;
      }

      ++v21;
      v20[2] = v28 + 1;
      uint64_t v29 = &v20[2 * v28];
      v29[4] = v25;
      v29[5] = v27;
    }

    while (v19 != v21);
    uint64_t v1 = v34;
    uint64_t v0 = v35;
    goto LABEL_17;
  }

  __break(1u);
}

uint64_t BurstVoicemailFinding.find(identifiers:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 32) = a1;
  uint64_t v6 = *(int **)(a3 + 16);
  unint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 40) = v7;
  *uint64_t v7 = v3;
  v7[1] = BurstVoicemailFinding.find(identifiers:);
  return v9(a2, a3);
}

uint64_t BurstVoicemailFinding.find(identifiers:)(uint64_t a1)
{
  return OUTLINED_FUNCTION_5_7();
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)(*(void *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  uint64_t v7 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_15_11();
      swift_bridgeObjectRelease();
      v4 += 16LL;
      --v3;
    }

    while (v3);
    OUTLINED_FUNCTION_39();
    return v7;
  }

  else
  {
    uint64_t v5 = v2;
    OUTLINED_FUNCTION_39();
  }

  return v5;
}

void *specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v10 = Set.init(minimumCapacity:)(*(void *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  uint64_t result = specialized _NativeDictionary.makeIterator()(v11);
  uint64_t v2 = v11[1];
  int64_t v3 = v11[3];
  uint64_t v4 = v12;
  int64_t v5 = (unint64_t)(v11[2] + 64LL) >> 6;
  if (!v12) {
    goto LABEL_3;
  }
LABEL_2:
  v4 &= v4 - 1;
  while (1)
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_15_11();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v6 = v3 + 1;
    if (__OFADD__(v3, 1LL)) {
      break;
    }
    if (v6 >= v5) {
      goto LABEL_21;
    }
    uint64_t v7 = *(void *)(v2 + 8 * v6);
    int64_t v8 = v3 + 1;
    if (!v7)
    {
      int64_t v8 = v3 + 2;
      if (v3 + 2 >= v5) {
        goto LABEL_21;
      }
      uint64_t v7 = *(void *)(v2 + 8 * v8);
      if (!v7)
      {
        int64_t v8 = v3 + 3;
        if (v3 + 3 >= v5) {
          goto LABEL_21;
        }
        uint64_t v7 = *(void *)(v2 + 8 * v8);
        if (!v7)
        {
          int64_t v8 = v3 + 4;
          if (v3 + 4 >= v5) {
            goto LABEL_21;
          }
          uint64_t v7 = *(void *)(v2 + 8 * v8);
          if (!v7)
          {
            int64_t v8 = v3 + 5;
            if (v3 + 5 >= v5) {
              goto LABEL_21;
            }
            uint64_t v7 = *(void *)(v2 + 8 * v8);
            if (!v7)
            {
              int64_t v9 = v3 + 6;
              while (v9 < v5)
              {
                uint64_t v7 = *(void *)(v2 + 8 * v9++);
                if (v7)
                {
                  int64_t v8 = v9 - 1;
                  goto LABEL_18;
                }
              }

LABEL_21:
              OUTLINED_FUNCTION_22();
              return (void *)v10;
            }
          }
        }
      }
    }

  __break(1u);
  return result;
}

              return swift_release(v4);
            }
          }
        }
      }
    }

    a2 = a1;
    goto LABEL_47;
  }

  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, a3 - a2, a4);
  uint64_t v16 = &a4[v15];
  if ((char *)a3 - (char *)a2 < 8 || a1 >= a2)
  {
LABEL_47:
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4, v16 - a4, a2);
    return 1LL;
  }

  uint64_t v40 = a3 - 1;
  p_base_props = &CameraControlFlow.base_props;
  Swift::String v69 = (unint64_t)a1;
  uint64_t v70 = a4;
  char v73 = v8;
  while (1)
  {
    uint64_t v76 = v16;
    uint64_t v42 = v16 - 1;
    PhoneCallFlowDelegatePlugin::StartCallDirectAction_optional v44 = a2 - 1;
    uint64_t v43 = *(a2 - 1);
    uint64_t v45 = *(v16 - 1);
    uint64_t v75 = v43;
    uint64_t v46 = (const char *)p_base_props[243];
    BOOL v72 = v45;
    __int128 v47 = [v45 v46];
    if (!v47) {
      goto LABEL_52;
    }
    uint64_t v48 = v47;
    __int128 v49 = v78;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v50 = *(void (**)(id *, char *, uint64_t))(v77 + 32);
    os_log_type_t v51 = (uint64_t)v74;
    v50(v74, v49, v8);
    __swift_storeEnumTagSinglePayload(v51, 0LL, 1LL, v8);
    int v52 = objc_msgSend(v75, (SEL)p_base_props[243]);
    if (!v52) {
      goto LABEL_54;
    }
    uint64_t v53 = v52;
    uint64_t v54 = a2;
    unint64_t v55 = v78;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v56 = (uint64_t)v71;
    uint64_t v57 = v55;
    uint64_t v58 = v73;
    v50(v71, v57, v73);
    __swift_storeEnumTagSinglePayload(v56, 0LL, 1LL, v58);
    uint64_t result = __swift_getEnumTagSinglePayload(v56, 1LL, v58);
    if ((_DWORD)result == 1) {
      goto LABEL_55;
    }
    uint64_t v60 = v40 + 1;
    unint64_t v61 = (uint64_t)v74;
    uint64_t v62 = static Date.< infix(_:_:)(v74, v56);
    uint64_t v63 = v56;
    uint64_t v64 = v62;
    uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
    v65(v63, v58);
    v65(v61, v58);

    if ((v64 & 1) != 0)
    {
      uint64_t v66 = v60 != v54 || v40 >= v54;
      a2 = v44;
      uint64_t v16 = v76;
    }

    else
    {
      uint64_t v66 = v60 != v76 || v40 >= v76;
      PhoneCallFlowDelegatePlugin::StartCallDirectAction_optional v44 = v42;
      uint64_t v16 = v42;
      a2 = v54;
    }

    p_base_props = (__objc2_prop_list **)(&CameraControlFlow + 64);
    if (v66) {
      *uint64_t v40 = *v44;
    }
    --v40;
    a4 = v70;
    uint64_t v67 = v16 > v70 && (unint64_t)a2 > v69;
    int64_t v8 = v73;
    if (!v67) {
      goto LABEL_47;
    }
  }

  OUTLINED_FUNCTION_50();
LABEL_22:
  OUTLINED_FUNCTION_7_1();
}

      ++v4;
      if (v7 == v3) {
        goto LABEL_29;
      }
    }

    __break(1u);
LABEL_25:
    if (a1 < 0) {
      id v22 = a1;
    }
    else {
      id v22 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    int64_t v3 = _CocoaArrayWrapper.endIndex.getter(v22);
  }

    os_log_type_t v11 = (v19 - 1) & v19;
  }

  uint64_t v20 = v17 + 2;
  if (v20 < v35)
  {
    uint64_t v19 = *(void *)(v36 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        uint64_t v14 = v20 + 1;
        if (__OFADD__(v20, 1LL)) {
          goto LABEL_45;
        }
        if (v14 >= v35) {
          goto LABEL_35;
        }
        uint64_t v19 = *(void *)(v36 + 8 * v14);
        ++v20;
        if (v19) {
          goto LABEL_21;
        }
      }
    }

    uint64_t v14 = v20;
    goto LABEL_21;
  }

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (OUTLINED_FUNCTION_12_38())
  {
    OUTLINED_FUNCTION_13_33();
    if (!v64) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v76 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v76, (uint64_t)static Logger.siriPhone);
    uint64_t v77 = OUTLINED_FUNCTION_41();
    if (OUTLINED_FUNCTION_7_7(v77))
    {
      uint64_t v78 = (_DWORD *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v79 = OUTLINED_FUNCTION_7_0(32LL);
      *(void *)&v332 = v79;
      char *v78 = 136315138;
      uint64_t v80 = (uint64_t)(v78 + 1);
      *(void *)&v329 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallCapability>);
      uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallCapability>.Type);
      uint64_t v89 = OUTLINED_FUNCTION_14_27( v81,  v82,  v83,  v84,  v85,  v86,  v87,  v88,  v241,  v251,  v261,  v271,  v4,  v290,  v297,  v298,  v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,  v307,  v308,  v309,  v310,  v311,  v312,  v313,  v314,  v315,  v316,  v317,  v318,  v319,  v320,  v321,  v322,  v323,  v324,  v325,  (uint64_t)v326,  v327,  v328,  v329);
      *(void *)&v329 = OUTLINED_FUNCTION_24_17( v89,  v90,  v91,  v92,  v93,  v94,  v95,  v96,  v242,  v252,  v262,  v272,  v282,  v291,  v297,  v298,  v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,  v307,  v308,  v309,  v310,  v311,  v312,  v313,  v314,  v315,  v316,  v317,  v318,  v319,  v320,  v321,  v322,  v323,  v324,  v325,  (uint64_t)v326,  v327,  v328,  v329,  *((uint64_t *)&v329 + 1),  v330,
                           *((uint64_t *)&v330 + 1),
                           v331,
                           *((uint64_t *)&v331 + 1),
                           v332);
      OUTLINED_FUNCTION_18_27((uint64_t)&v329, v50 + 8, (uint64_t)(v78 + 1));
      OUTLINED_FUNCTION_70_2();
      OUTLINED_FUNCTION_3_46(&dword_0, v97, v98, "#%s has audio call semantic");
      OUTLINED_FUNCTION_11_34();
      OUTLINED_FUNCTION_0_2(v79);
      OUTLINED_FUNCTION_0_2((uint64_t)v78);

LABEL_26:
      uint64_t v99 = 0;
      goto LABEL_56;
    }
}

  OUTLINED_FUNCTION_7_5();
}

  if (!v42)
  {
    uint64_t v48 = (int)v14;
    if (v43) {
      goto LABEL_18;
    }
    goto LABEL_27;
  }

  OUTLINED_FUNCTION_23_35();
  uint64_t v48 = (int)v14;
LABEL_23:
  OUTLINED_FUNCTION_14_44(v120[8]);
  if ((v43 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_24:
  __int128 v49 = v120;
  OUTLINED_FUNCTION_14_44(v120[9]);
  if ((v44 & 1) != 0) {
    goto LABEL_29;
  }
LABEL_32:
  if (!(_DWORD)v111)
  {
    uint64_t v50 = v110;
    goto LABEL_37;
  }

  OUTLINED_FUNCTION_23_35();
  uint64_t v50 = v110;
LABEL_34:
  OUTLINED_FUNCTION_14_44(v49[11]);
  os_log_type_t v51 = (int)v112;
LABEL_43:
  if (v48)
  {
LABEL_44:
    int v52 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
    v52(v46 + v49[13], v47);
    if ((v51 & 1) != 0)
    {
      v52(v46 + v49[14], v47);
LABEL_46:
LABEL_52:
      (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v46 + v49[15], v107);
      if ((v50 & 1) == 0) {
        goto LABEL_49;
      }
      goto LABEL_48;
    }

    goto LABEL_51;
  }

  __break(1u);
}

    uint64_t v2 = (v12 - 1) & v12;
    uint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v5 = v13;
LABEL_22:
    uint64_t v15 = *(void *)(*(void *)(v6 + 48) + 16 * v10);
    uint64_t v16 = *(void **)(*(void *)(v6 + 56) + 8 * v10);
    OUTLINED_FUNCTION_128();
    unint64_t v17 = v16;
    [v8 doubleValue];
    uint64_t v19 = v18;
    [v17 doubleValue];
    if (v19 < v20)
    {

      uint64_t result = (id)swift_bridgeObjectRelease();
      int64_t v8 = v17;
      id v24 = v15;
    }

    else
    {

      uint64_t result = (id)swift_bridgeObjectRelease();
    }
  }

  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

void *specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (v3)
  {
    while (1)
    {
      unint64_t v4 = 0LL;
      unint64_t v20 = v2 & 0xC000000000000001LL;
      uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8LL;
      while (v20)
      {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v2);
LABEL_7:
        uint64_t v7 = v6;
        unint64_t v8 = v4 + 1;
        if (__OFADD__(v4, 1LL)) {
          goto LABEL_15;
        }
        uint64_t v9 = v2;
        id v10 = [v6 identifier];
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        uint64_t v13 = v12;

        specialized Set.contains(_:)(v11, v13, a2);
        LOBYTE(v10) = v14;
        uint64_t v15 = swift_bridgeObjectRelease();
        if ((v10 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
          uint64_t v16 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
          uint64_t v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v7);
          specialized ContiguousArray._endMutation()(v17);
        }

        else
        {
        }

        uint64_t v2 = v9;
        ++v4;
        if (v8 == v3) {
          goto LABEL_20;
        }
      }

      if (v4 < *(void *)(v5 + 16)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      if (v2 < 0) {
        uint64_t v18 = v2;
      }
      else {
        uint64_t v18 = v2 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v18);
      if (!v3) {
        goto LABEL_20;
      }
    }

    id v6 = *(id *)(v2 + 8 * v4 + 32);
    goto LABEL_7;
  }

{
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  char v16;
  id v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_39;
  }
  for (uint64_t i = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL)); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter(v24))
  {
    uint64_t v26 = v3;
    uint64_t v5 = 0LL;
    id v6 = v3 & 0xC000000000000001LL;
    uint64_t v7 = v3 & 0xFFFFFFFFFFFFFF8LL;
    v3 += 32LL;
    uint64_t v30 = i;
    unint64_t v31 = a2;
    unint64_t v28 = v7;
    uint64_t v29 = v6;
    uint64_t v27 = v3;
    while (1)
    {
      if (v6)
      {
        unint64_t v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v26);
      }

      else
      {
        if (v5 >= *(void *)(v7 + 16))
        {
          __break(1u);
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }

        unint64_t v8 = *(id *)(v3 + 8 * v5);
      }

      uint64_t v9 = v8;
      if (__OFADD__(v5++, 1LL)) {
        goto LABEL_37;
      }
      if (a2)
      {
        outlined bridged method (pb) of @objc INStartCallIntentResponse.restrictedContacts.getter((void *)a2);
        if (v11) {
          break;
        }
      }

LABEL_27:
      if (v5 == i) {
        goto LABEL_43;
      }
    }

    uint64_t v12 = v11;
    if ((unint64_t)v11 >> 62)
    {
      if (v11 >= 0) {
        uint64_t v23 = v11 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v23 = v11;
      }
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v23);
      if (!v13)
      {
LABEL_25:
        unint64_t v20 = swift_bridgeObjectRelease_n(v12, 2LL);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
        uint64_t v21 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
        id v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v9);
        specialized ContiguousArray._endMutation()(v22);
        goto LABEL_26;
      }
    }

    else
    {
      uint64_t v13 = *(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFFF8LL));
      swift_bridgeObjectRetain();
      if (!v13) {
        goto LABEL_25;
      }
    }

    if ((v12 & 0xC000000000000001LL) != 0) {
      char v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v12);
    }
    else {
      char v14 = *(id *)(v12 + 32);
    }
    uint64_t v15 = v14;
    type metadata accessor for INPerson();
    uint64_t v16 = static NSObject.== infix(_:_:)(v15, v9);

    if ((v16 & 1) != 0)
    {
LABEL_15:

      swift_bridgeObjectRelease_n(v12, 2LL);
LABEL_26:
      uint64_t i = v30;
      a2 = v31;
      uint64_t v7 = v28;
      id v6 = v29;
      uint64_t v3 = v27;
      goto LABEL_27;
    }

    if (v13 == 1) {
      goto LABEL_25;
    }
    a2 = 5LL;
    while (1)
    {
      uint64_t v17 = (v12 & 0xC000000000000001LL) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2 - 4, v12)
          : *(id *)(v12 + 8 * a2);
      uint64_t v3 = (uint64_t)v17;
      uint64_t v18 = a2 - 3;
      if (__OFADD__(a2 - 4, 1LL)) {
        break;
      }
      uint64_t v19 = static NSObject.== infix(_:_:)(v17, v9);

      if ((v19 & 1) != 0) {
        goto LABEL_15;
      }
      ++a2;
      if (v18 == v13) {
        goto LABEL_25;
      }
    }

uint64_t AnnounceIncomingCallerOutputStrategy.incomingCallCats.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1, a1);
}

uint64_t BurstNotificationSearchManager.voicemailFinder.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 40, a1);
}

uint64_t BurstVoicemailFinder.fetchVoicemails()()
{
  *(void *)(v1 + 456) = v0;
  OUTLINED_FUNCTION_19_1();
  return swift_task_switch(v2, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  OUTLINED_FUNCTION_29();
  uint64_t v4 = v2[61];
  *uint64_t v5 = *v3;
  v2[62] = v1;
  swift_task_dealloc(v4);
  if (!v1)
  {
    id v6 = v2[60];
    v2[63] = v0;
    swift_release(v6);
  }

  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_9_11(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v1 = *(void **)(v0 + 504);
  if (v1
    && (uint64_t v2 = v1,
        (uint64_t v3 = outlined bridged method (ob) of @objc INSearchCallHistoryIntentResponse.callRecords.getter(v2)) != 0))
  {
    uint64_t v4 = (void *)v3;
  }

  else
  {

    swift_bridgeObjectRelease();
    uint64_t v4 = _swiftEmptyArrayStorage;
  }

  id v6 = *(void **)(v0 + 464);
  uint64_t v5 = *(void *)(v0 + 472);
  Signpost.OpenSignpost.end()();
  OUTLINED_FUNCTION_22();
  swift_release(v5);

  return (*(uint64_t (**)(void *))(v0 + 8))(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  swift_release(*(void *)(v0 + 480));
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v1 = *(void *)(v0 + 496);
  uint64_t v2 = OUTLINED_FUNCTION_15_1();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v5 = static os_log_type_t.error.getter();
  id v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 496);
  if (v6)
  {
    unint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v9 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v16 = v9;
    *(_DWORD *)unint64_t v8 = 136315138;
    *(void *)(v0 + 440) = v7;
    swift_errorRetain(v7);
    id v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v11 = String.init<A>(describing:)(v0 + 440, v10);
    *(void *)(v0 + 448) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 448, v0 + 456, v8 + 4);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_9_16();
    OUTLINED_FUNCTION_9_16();
    _os_log_impl(&dword_0, v4, v5, "#BurstVoicemailFinder Encountered error submitting HandleIntent: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL);
    OUTLINED_FUNCTION_0_2(v9);
    OUTLINED_FUNCTION_0_2((uint64_t)v8);
  }

  else
  {
    OUTLINED_FUNCTION_9_16();
    OUTLINED_FUNCTION_9_16();
  }

  swift_errorRelease(*(void *)(v0 + 496));
  uint64_t v13 = *(void *)(v0 + 376);
  char v14 = *(void **)(v0 + 464);
  Signpost.OpenSignpost.end()();
  swift_release(v13);
  OUTLINED_FUNCTION_22();

  return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t BurstVoicemailFinder.fetchVoicemails()(uint64_t a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_49( a1,  &lazy cache variable for type metadata for INSearchCallHistoryIntent,  &OBJC_CLASS___INSearchCallHistoryIntent_ptr);
  OUTLINED_FUNCTION_49( v2,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
  NSNumber.init(BOOLeanLiteral:)(0);
  OUTLINED_FUNCTION_19_1();
  v22.is_nil = 16;
  v20.super.super.Class isa = INSearchCallHistoryIntent.__allocating_init(__dateCreated:recipient:callCapabilities:callTypes:unseen:)( v21,  v22,  v3,  v4,  v23).super.super.isa;
  *(INSearchCallHistoryIntent *)(v1 + 464) = v20;
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  uint64_t v5 = *(void *)(v1 + 456);
  memcpy((void *)(v1 + 16), &static PhoneCallFeatureFlags.instance, 0xB0uLL);
  uint64_t v6 = type metadata accessor for PhoneCallFeatureManager();
  uint64_t inited = swift_initStackObject(v6, v1 + 192);
  *(void *)(v1 + 320) = &type metadata for PhoneCallFeatureFlags;
  *(void *)(v1 + 328) = &protocol witness table for PhoneCallFeatureFlags;
  uint64_t v8 = swift_allocObject(&unk_3F7CE0, 192LL, 7LL);
  *(void *)(v1 + 296) = v8;
  memcpy((void *)(v8 + 16), (const void *)(v1 + 16), 0xB0uLL);
  outlined init with take of AppSelectionSignalComponent((__int128 *)(v1 + 296), inited + 16);
  outlined retain of PhoneCallFeatureFlags((void *)(v1 + 16));
  FirstPartyAnnotatedAppStore.getDefaultApp(for:)((void *)(v5 + 40), v1 + 248);
  swift_setDeallocating(inited);
  __swift_destroy_boxed_opaque_existential_1((void *)(inited + 16));
  uint64_t v10 = *(void *)(v1 + 248);
  uint64_t v9 = *(void *)(v1 + 256);
  *(void *)(v1 + 472) = v10;
  *(void *)(v1 + 424) = v9;
  outlined release of Set<String>((void *)(v1 + 424));
  outlined init with take of String?(v1 + 264, v1 + 408);
  outlined release of String?(v1 + 408);
  *(void *)(v1 + 432) = *(void *)(v1 + 288);
  outlined release of Set<String>((void *)(v1 + 432));
  static Signpost.begin(_:)();
  *(void *)(v1 + 376) = v11;
  *(void *)(v1 + 384) = v12;
  *(void *)(v1 + 392) = v13;
  *(_WORD *)(v1 + 400) = v14;
  outlined init with copy of SignalProviding(v5, v1 + 336);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandleIntentSubmitter<INSearchCallHistoryIntent, INSearchCallHistoryIntentResponse>);
  uint64_t v16 = swift_allocObject(v15, 56LL, 7LL);
  *(void *)(v1 + 480) = v16;
  outlined init with take of AppSelectionSignalComponent((__int128 *)(v1 + 336), v16 + 16);
  uint64_t v17 = (void *)swift_task_alloc(unk_42CAEC);
  *(void *)(v1 + 488) = v17;
  *uint64_t v17 = v1;
  v17[1] = BurstVoicemailFinder.fetchVoicemails();
  return v19(v10, v20.super.super.isa);
}

INSearchCallHistoryIntent __swiftcall INSearchCallHistoryIntent.__allocating_init(__dateCreated:recipient:callCapabilities:callTypes:unseen:)( INDateComponentsRange_optional __dateCreated, INPerson_optional recipient, INCallCapabilityOptions callCapabilities, INCallRecordTypeOptions callTypes, NSNumber_optional unseen)
{
  uint64_t v6 = *(void **)&__dateCreated.is_nil;
  Class isa = __dateCreated.value.super.isa;
  id v8 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithDateCreated:__dateCreated.value.super.isa recipient:*(void *)&__dateCreated.is_nil callCapabilities:recipient.value.super.isa callTypes:*(void *)&recipient.is_nil unseen:callCapabilities];

  return (INSearchCallHistoryIntent)v8;
}

uint64_t BurstNotificationSearchManager.init(sharedGlobals:voicemailFinder:)@<X0>( __int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  return outlined init with take of AppSelectionSignalComponent(a2, a3 + 40);
}

uint64_t protocol witness for BurstVoicemailFinding.find(identifiers:) in conformance BurstVoicemailFinder( uint64_t a1)
{
  INCallCapabilityOptions v3 = (void *)swift_task_alloc(unk_42CB04);
  *(void *)(v1 + 16) = v3;
  *INCallCapabilityOptions v3 = v1;
  v3[1] = protocol witness for BurstVoicemailFinding.find(identifiers:) in conformance BurstVoicemailFinder;
  return v5(a1);
}

uint64_t protocol witness for BurstVoicemailFinding.fetchVoicemails() in conformance BurstVoicemailFinder()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_42CAD4);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for BurstVoicemailFinding.fetchVoicemails() in conformance BurstVoicemailFinder;
  return BurstVoicemailFinder.fetchVoicemails()();
}

uint64_t protocol witness for BurstVoicemailFinding.fetchVoicemails() in conformance BurstVoicemailFinder( uint64_t a1)
{
  uint64_t v4 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t specialized HandleIntentSubmitter.submit(app:intent:)(uint64_t a1, uint64_t a2)
{
  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  return swift_task_switch(specialized HandleIntentSubmitter.submit(app:intent:), 0LL, 0LL);
}

uint64_t specialized HandleIntentSubmitter.submit(app:intent:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v1 = v0[14];
  INCallCapabilityOptions v3 = (void *)v0[15];
  uint64_t v2 = v0[16];
  uint64_t v4 = OUTLINED_FUNCTION_15_1();
  v0[17] = __swift_project_value_buffer(v4, (uint64_t)static Logger.siriPhone);
  swift_retain_n(v2, 2LL);
  swift_retain_n(v1, 2LL);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v7 = static os_log_type_t.debug.getter(v5, v6);
  BOOL v8 = os_log_type_enabled(v5, v7);
  uint64_t v9 = (void *)v0[15];
  uint64_t v10 = v0[16];
  uint64_t v11 = v0[14];
  if (v8)
  {
    uint64_t v12 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v40 = OUTLINED_FUNCTION_7_0(96LL);
    uint64_t v41 = v40;
    *(_DWORD *)uint64_t v12 = 136315650;
    os_log_type_t type = v7;
    v0[9] = v10;
    swift_retain();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandleIntentSubmitter<INSearchCallHistoryIntent, INSearchCallHistoryIntentResponse>);
    uint64_t v14 = String.init<A>(describing:)(v0 + 9, v13);
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11, v12 + 4);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_31_1(v10);
    *(_WORD *)(v12 + 12) = 2080;
    v0[11] = v11;
    uint64_t v16 = type metadata accessor for App(0LL);
    unint64_t v17 = lazy protocol witness table accessor for type App and conformance App();
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
    v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13, v12 + 14);
    OUTLINED_FUNCTION_62();
    OUTLINED_FUNCTION_31_1(v11);
    *(_WORD *)(v12 + 22) = 2080;
    id v20 = [v9 typeName];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    unint64_t v23 = v22;

    v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 13, v0 + 14, v12 + 24);
    swift_bridgeObjectRelease();

    _os_log_impl( &dword_0,  v5,  type,  "#%s Submitting single HandleIntent for app: %s, intent: %s",  (uint8_t *)v12,  0x20u);
    swift_arrayDestroy(v40, 3LL);
    OUTLINED_FUNCTION_0_2(v40);
    OUTLINED_FUNCTION_0_2(v12);
  }

  else
  {
    OUTLINED_FUNCTION_31_1(v0[16]);
    OUTLINED_FUNCTION_31_1(v11);
  }

  uint64_t v25 = (void *)v0[15];
  id v24 = (void *)v0[16];
  specialized HandleIntentSubmitter.applyAppToIntent(app:intent:)(v0[14], v25);
  OUTLINED_FUNCTION_49( v26,  &lazy cache variable for type metadata for SAIntentGroupHandleIntent,  &OBJC_CLASS___SAIntentGroupHandleIntent_ptr);
  id v27 = v25;
  OUTLINED_FUNCTION_19_1();
  SAIntentGroupHandleIntent.init(intent:appIdentifier:)(v28, v29, v30);
  uint64_t v32 = v31;
  v0[18] = v31;
  uint64_t v33 = v24 + 2;
  uint64_t v35 = v24[5];
  uint64_t v34 = v24[6];
  __swift_project_boxed_opaque_existential_1(v33, v35);
  uint64_t v36 = (void *)swift_task_alloc(async function pointer to AceServiceInvokerAsync.submit<A>(_:)[1]);
  v0[19] = v36;
  uint64_t v37 = OUTLINED_FUNCTION_49( (uint64_t)v36,  &lazy cache variable for type metadata for SAIntentGroupHandleIntentCompleted,  &OBJC_CLASS___SAIntentGroupHandleIntentCompleted_ptr);
  *uint64_t v36 = v0;
  v36[1] = specialized HandleIntentSubmitter.submit(app:intent:);
  return AceServiceInvokerAsync.submit<A>(_:)(v32, v35, v37, v34);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  OUTLINED_FUNCTION_29();
  uint64_t v4 = v2[19];
  *uint64_t v5 = *v3;
  v2[20] = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    v2[21] = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_9_11(v6, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v1 = *(void **)(v0 + 168);
  uint64_t v2 = *(void **)(v0 + 144);
  INCallCapabilityOptions v3 = specialized HandleIntentSubmitter.makeIntentResponse(from:)(v1);

  return (*(uint64_t (**)(id))(v0 + 8))(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v1 = *(void *)(v0 + 160);
  swift_retain();
  swift_errorRetain(v1);
  swift_retain();
  uint64_t v2 = swift_errorRetain(v1);
  INCallCapabilityOptions v3 = (os_log_s *)Logger.logObject.getter(v2);
  uint64_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 160);
    uint64_t v6 = *(void *)(v0 + 128);
    os_log_type_t v7 = OUTLINED_FUNCTION_7_0(22LL);
    uint64_t v26 = OUTLINED_FUNCTION_7_0(64LL);
    *(_DWORD *)os_log_type_t v7 = 136315394;
    *(void *)(v0 + 56) = v6;
    swift_retain();
    BOOL v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandleIntentSubmitter<INSearchCallHistoryIntent, INSearchCallHistoryIntentResponse>);
    uint64_t v9 = String.init<A>(describing:)(v0 + 56, v8);
    *(void *)(v0 + 40) = OUTLINED_FUNCTION_16_9(v9, v10, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v7 + 4);
    OUTLINED_FUNCTION_62();
    OUTLINED_FUNCTION_31_1(v6);
    *(_WORD *)(v7 + 12) = 2080;
    swift_getErrorValue(v5, v0 + 48, v0 + 16);
    uint64_t v12 = Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
    *(void *)(v0 + 64) = OUTLINED_FUNCTION_16_9(v12, v13, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v7 + 14);
    OUTLINED_FUNCTION_62();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl(&dword_0, v3, v4, "#%s makeIntentResponse threw an error: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v26, 2LL);
    OUTLINED_FUNCTION_0_2(v26);
    OUTLINED_FUNCTION_0_2(v7);
  }

  else
  {
    unint64_t v15 = *(void *)(v0 + 160);
    OUTLINED_FUNCTION_31_1(*(void *)(v0 + 128));
    swift_errorRelease(v15);
    swift_errorRelease(v15);
  }

  uint64_t v16 = *(void **)(v0 + 144);
  swift_willThrow(v17, v18, v19, v20, v21, v22, v23, v24);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void specialized HandleIntentSubmitter.applyAppToIntent(app:intent:)(int a1, id a2)
{
  id v3 = [a2 _metadata];
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = [v3 copy];

    _bridgeAnyObjectToAny(_:)(&v18, v5);
    swift_unknownObjectRelease(v5);
    type metadata accessor for CNContactStore( 0LL,  &lazy cache variable for type metadata for _INPBIntentMetadata,  &OBJC_CLASS____INPBIntentMetadata_ptr);
    else {
      uint64_t v6 = 0LL;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  uint64_t v7 = App.appIdentifier.getter();
  if (v8)
  {
    uint64_t v9 = v8;
    if (!v6)
    {
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }

    uint64_t v10 = v7;
    unint64_t v18 = 0LL;
    unint64_t v19 = 0xE000000000000000LL;
    id v11 = v6;
    _StringGuts.grow(_:)(21LL);
    swift_bridgeObjectRelease();
    unint64_t v18 = 0xD000000000000013LL;
    unint64_t v19 = 0x8000000000347A90LL;
    v12._uint64_t countAndFlagsBits = v10;
    v12._object = v9;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v11 setLaunchId:v13];
  }

  else
  {
    if (!v6) {
      goto LABEL_16;
    }
    id v11 = v6;
  }

  id v14 = v11;
  App.systemExtensionBundleId.getter();
  if (v15)
  {
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v16 = 0LL;
  }

  [v14 setSystemExtensionBundleId:v16];

LABEL_16:
  [a2 _setMetadata:v6];
}

id specialized HandleIntentSubmitter.makeIntentResponse(from:)(void *a1)
{
  id result = [a1 intentResponse];
  if (!result)
  {
    __break(1u);
    goto LABEL_11;
  }

  id v3 = result;
  id v4 = [result typeName];

  id result = [a1 intentResponse];
  if (!result)
  {
LABEL_11:
    __break(1u);
    return result;
  }

  id v5 = result;
  Class isa = (Class)[result data];

  if (isa)
  {
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(isa);
    unint64_t v9 = v8;

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v7, v9);
  }

  id v10 = (id)INIntentResponseCreate(v4, isa);

  if (v10)
  {
    uint64_t v11 = objc_opt_self(&OBJC_CLASS___INSearchCallHistoryIntentResponse);
    id result = (id)swift_dynamicCastObjCClass(v10, v11);
    if (result) {
      return result;
    }
  }

  return 0LL;
}

uint64_t outlined bridged method (ob) of @objc INSearchCallHistoryIntentResponse.callRecords.getter(void *a1)
{
  id v2 = [a1 callRecords];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INCallRecord,  &OBJC_CLASS___INCallRecord_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t sub_80898()
{
  return swift_deallocObject(v0, 192LL, 7LL);
}

uint64_t destroy for BurstVoicemailFinder(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 5);
}

uint64_t initializeWithCopy for BurstVoicemailFinder(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

void *assignWithCopy for BurstVoicemailFinder(void *a1, void *a2)
{
  return a1;
}

void *__swift_memcpy80_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for BurstVoicemailFinder(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for BurstVoicemailFinder(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BurstVoicemailFinder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)id result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BurstVoicemailFinder()
{
  return &type metadata for BurstVoicemailFinder;
}

unint64_t lazy protocol witness table accessor for type App and conformance App()
{
  unint64_t result = lazy protocol witness table cache variable for type App and conformance App;
  if (!lazy protocol witness table cache variable for type App and conformance App)
  {
    uint64_t v1 = type metadata accessor for App(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for App, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type App and conformance App);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_1_21(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 - 8) = *v1;
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v2 - 8) = *v1;
  *(void *)(v3 + 48) = a1;
  return swift_task_dealloc(v4);
}

uint64_t OUTLINED_FUNCTION_9_16()
{
  return swift_errorRelease(v0);
}

void OUTLINED_FUNCTION_15_11()
{
}

uint64_t OUTLINED_FUNCTION_16_9(uint64_t a1, unint64_t a2, uint64_t a3, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::Properties_optional __swiftcall PhoneCallControlCATsSimple.Properties.init(rawValue:)( Swift::String rawValue)
{
  uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._rawValue = &outlined read-only object #0 of PhoneCallControlCATsSimple.Properties.init(rawValue:);
  OUTLINED_FUNCTION_33_3(v2, countAndFlagsBits);
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_2();
  return result;
}

uint64_t PhoneCallControlCATsSimple.Properties.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_80BF4 + 4 * byte_320310[a1]))( 0xD00000000000001CLL,  0x8000000000341C00LL);
}

uint64_t sub_80BF4(uint64_t a1)
{
  return a1 + 11;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallControlCATsSimple.Properties( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance PhoneCallControlCATsSimple.Properties()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallControlCATsSimple.Properties( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallControlCATsSimple.Properties( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallControlCATsSimple.Properties@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::Properties_optional *a2@<X8>)
{
  result.int value = PhoneCallControlCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallControlCATsSimple.Properties()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_38();
  uint64_t *v0 = PhoneCallControlCATsSimple.Properties.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_2();
}

uint64_t PhoneCallControlCATsSimple.callControl(callControlAction:)(uint64_t a1)
{
  void v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PhoneCallControlCATsSimple.callControl(callControlAction:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_15_3(v2);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_25_11(v3);
  __int128 v5 = OUTLINED_FUNCTION_24_6(v4, (__n128)xmmword_31D870);
  uint64_t v6 = OUTLINED_FUNCTION_32_3((uint64_t)v5, (uint64_t)"callControlAction");
  OUTLINED_FUNCTION_27_6(v6, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_26_0();
  uint64_t v9 = OUTLINED_FUNCTION_3_22(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_41_1(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v11);
  }

  Swift::String v12 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 48) = v12;
  OUTLINED_FUNCTION_30(v12, (uint64_t)PhoneCallControlCATsSimple.callControl(callControlAction:));
  uint64_t v13 = OUTLINED_FUNCTION_40(v1 + 11);
  return OUTLINED_FUNCTION_25_5(v13, v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_0();
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v1, v2, v3);
  }

  else
  {
    OUTLINED_FUNCTION_22_1();
    OUTLINED_FUNCTION_23_3();
    __int128 v5 = OUTLINED_FUNCTION_17();
    return OUTLINED_FUNCTION_8_3(v5, v6);
  }

PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::CallControlDialogIds_optional __swiftcall PhoneCallControlCATsSimple.CallControlDialogIds.init(rawValue:)( Swift::String rawValue)
{
  uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._rawValue = &outlined read-only object #0 of PhoneCallControlCATsSimple.CallControlDialogIds.init(rawValue:);
  OUTLINED_FUNCTION_33_3(v2, countAndFlagsBits);
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_2();
  return result;
}

uint64_t PhoneCallControlCATsSimple.CallControlDialogIds.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_80E58 + 4 * byte_320316[a1]))( 1701736260LL,  0xE400000000000000LL);
}

uint64_t sub_80E58()
{
  return 0x43656C6261736964LL;
}

uint64_t sub_80E7C()
{
  return 0x48656C6261736964LL;
}

uint64_t sub_80E9C()
{
  return 0x6143656C62616E65LL;
}

uint64_t sub_80EBC()
{
  return 0x6F48656C62616E65LL;
}

uint64_t sub_80ED8()
{
  return 0x7263694D6574756DLL;
}

unint64_t sub_80EFC()
{
  return 0xD000000000000010LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallControlCATsSimple.CallControlDialogIds()
{
  specialized == infix<A>(_:_:)();
}

void protocol witness for Hashable.hashValue.getter in conformance PhoneCallControlCATsSimple.CallControlDialogIds()
{
}

void protocol witness for Hashable.hash(into:) in conformance PhoneCallControlCATsSimple.CallControlDialogIds( uint64_t a1)
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallControlCATsSimple.CallControlDialogIds( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::CallControlDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallControlCATsSimple.CallControlDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::CallControlDialogIds_optional *a2@<X8>)
{
  result.int value = PhoneCallControlCATsSimple.CallControlDialogIds.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallControlCATsSimple.CallControlDialogIds()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_38();
  uint64_t *v0 = PhoneCallControlCATsSimple.CallControlDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_2();
}

uint64_t PhoneCallControlCATsSimple.callControlAsLabels(callControlAction:)(uint64_t a1)
{
  void v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PhoneCallControlCATsSimple.callControlAsLabels(callControlAction:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_15_3(v0);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_25_11(v1);
  uint64_t v3 = OUTLINED_FUNCTION_24_6(v2, (__n128)xmmword_31D870);
  uint64_t v4 = OUTLINED_FUNCTION_32_3((uint64_t)v3, (uint64_t)"callControlAction");
  OUTLINED_FUNCTION_27_6(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  uint64_t v7 = OUTLINED_FUNCTION_3_22(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_41_1(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v9);
  }

  uint64_t v10 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_35_4(v10);
  lazy protocol witness table accessor for type PhoneCallControlCATsSimple.CallControlDialogIds and conformance PhoneCallControlCATsSimple.CallControlDialogIds();
  OUTLINED_FUNCTION_34_4((uint64_t)PhoneCallControlCATsSimple.callControl(callControlAction:));
  OUTLINED_FUNCTION_26_6();
  return OUTLINED_FUNCTION_8_13(v11, v12, v13, v14, v15, v16);
}

unint64_t lazy protocol witness table accessor for type PhoneCallControlCATsSimple.CallControlDialogIds and conformance PhoneCallControlCATsSimple.CallControlDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.CallControlDialogIds and conformance PhoneCallControlCATsSimple.CallControlDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.CallControlDialogIds and conformance PhoneCallControlCATsSimple.CallControlDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallControlCATsSimple.CallControlDialogIds,  &type metadata for PhoneCallControlCATsSimple.CallControlDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.CallControlDialogIds and conformance PhoneCallControlCATsSimple.CallControlDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.CallControlDialogIds and conformance PhoneCallControlCATsSimple.CallControlDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.CallControlDialogIds and conformance PhoneCallControlCATsSimple.CallControlDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallControlCATsSimple.CallControlDialogIds,  &type metadata for PhoneCallControlCATsSimple.CallControlDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.CallControlDialogIds and conformance PhoneCallControlCATsSimple.CallControlDialogIds);
  }

  return result;
}

uint64_t PhoneCallControlCATsSimple.unsupportedCallControl(unsupportedReason:)(uint64_t a1)
{
  void v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PhoneCallControlCATsSimple.unsupportedCallControl(unsupportedReason:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_15_3(v2);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_25_11(v3);
  uint64_t v5 = OUTLINED_FUNCTION_24_6(v4, (__n128)xmmword_31D870);
  uint64_t v6 = OUTLINED_FUNCTION_32_3((uint64_t)v5, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_27_6(v6, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_26_0();
  uint64_t v9 = OUTLINED_FUNCTION_3_22(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_41_1(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v11);
  }

  uint64_t v12 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 48) = v12;
  OUTLINED_FUNCTION_30(v12, (uint64_t)PhoneCallControlCATsSimple.unsupportedCallControl(unsupportedReason:));
  uint64_t v13 = OUTLINED_FUNCTION_40(v1 + 22);
  return OUTLINED_FUNCTION_25_5(v13, v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_0();
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v1, v2, v3);
  }

  else
  {
    OUTLINED_FUNCTION_22_1();
    OUTLINED_FUNCTION_23_3();
    uint64_t v5 = OUTLINED_FUNCTION_17();
    return OUTLINED_FUNCTION_8_3(v5, v6);
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_23_3();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds.init(rawValue:)(uint64_t a1, uint64_t a2)
{
  v2._rawValue = &outlined read-only object #0 of PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds.init(rawValue:);
  PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds.init(rawValue:)(a1, a2, v2);
}

uint64_t PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds.rawValue.getter()
{
  return 0x6576697463416F6ELL;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds( uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds( uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 3) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t PhoneCallControlCATsSimple.unsupportedCallControlAsLabels(unsupportedReason:)(uint64_t a1)
{
  void v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PhoneCallControlCATsSimple.unsupportedCallControlAsLabels(unsupportedReason:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_15_3(v0);
  Swift::OpaquePointer v2 = (__n128 *)OUTLINED_FUNCTION_25_11(v1);
  uint64_t v3 = OUTLINED_FUNCTION_24_6(v2, (__n128)xmmword_31D870);
  uint64_t v4 = OUTLINED_FUNCTION_32_3((uint64_t)v3, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_27_6(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  uint64_t v7 = OUTLINED_FUNCTION_3_22(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_41_1(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v9);
  }

  uint64_t v10 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_35_4(v10);
  lazy protocol witness table accessor for type PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds();
  OUTLINED_FUNCTION_34_4((uint64_t)PhoneCallControlCATsSimple.callControl(callControlAction:));
  OUTLINED_FUNCTION_26_6();
  return OUTLINED_FUNCTION_8_13(v11, v12, v13, v14, v15, v16);
}

unint64_t lazy protocol witness table accessor for type PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds,  &type metadata for PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds,  &type metadata for PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds);
  }

  return result;
}

uint64_t PhoneCallControlCATsSimple.unsupportedHoldAction(unsupportedReason:)(uint64_t a1)
{
  void v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PhoneCallControlCATsSimple.unsupportedHoldAction(unsupportedReason:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_15_3(v2);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_25_11(v3);
  uint64_t v5 = OUTLINED_FUNCTION_24_6(v4, (__n128)xmmword_31D870);
  uint64_t v6 = OUTLINED_FUNCTION_32_3((uint64_t)v5, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_27_6(v6, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_26_0();
  uint64_t v9 = OUTLINED_FUNCTION_3_22(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_41_1(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v11);
  }

  uint64_t v12 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 48) = v12;
  OUTLINED_FUNCTION_30(v12, (uint64_t)PhoneCallControlCATsSimple.callControl(callControlAction:));
  uint64_t v13 = OUTLINED_FUNCTION_40(v1 + 21);
  return OUTLINED_FUNCTION_25_5(v13, v14, v15, v16);
}

PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedHoldActionDialogIds_optional __swiftcall PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds.init(rawValue:);
  PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds.init(rawValue:)( rawValue._countAndFlagsBits,  (uint64_t)rawValue._object,  v1);
  return result;
}

uint64_t PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x636972656E6567LL;
  }
  if (a1 == 1) {
    return 0xD000000000000017LL;
  }
  return 0xD000000000000016LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds( char *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedHoldActionDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedHoldActionDialogIds_optional *a2@<X8>)
{
  result.int value = PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds()
{
  char v1 = OUTLINED_FUNCTION_38();
  uint64_t *v0 = PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_2();
}

uint64_t PhoneCallControlCATsSimple.unsupportedHoldActionAsLabels(unsupportedReason:)(uint64_t a1)
{
  void v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PhoneCallControlCATsSimple.unsupportedHoldActionAsLabels(unsupportedReason:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_15_3(v0);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_25_11(v1);
  uint64_t v3 = OUTLINED_FUNCTION_24_6(v2, (__n128)xmmword_31D870);
  uint64_t v4 = OUTLINED_FUNCTION_32_3((uint64_t)v3, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_27_6(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  uint64_t v7 = OUTLINED_FUNCTION_3_22(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_41_1(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v9);
  }

  uint64_t v10 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_35_4(v10);
  lazy protocol witness table accessor for type PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds();
  OUTLINED_FUNCTION_34_4((uint64_t)PhoneCallControlCATsSimple.callControl(callControlAction:));
  OUTLINED_FUNCTION_26_6();
  return OUTLINED_FUNCTION_8_13(v11, v12, v13, v14, v15, v16);
}

unint64_t lazy protocol witness table accessor for type PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds,  &type metadata for PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds,  &type metadata for PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds);
  }

  return result;
}

uint64_t PhoneCallControlCATsSimple.unsupportedIntent(unsupportedIntent:)(uint64_t a1)
{
  void v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PhoneCallControlCATsSimple.unsupportedIntent(unsupportedIntent:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_15_3(v2);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_25_11(v3);
  uint64_t v5 = OUTLINED_FUNCTION_24_6(v4, (__n128)xmmword_31D870);
  uint64_t v6 = OUTLINED_FUNCTION_32_3((uint64_t)v5, (uint64_t)"unsupportedIntent");
  OUTLINED_FUNCTION_27_6(v6, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_26_0();
  uint64_t v9 = OUTLINED_FUNCTION_3_22(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_41_1(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v11);
  }

  uint64_t v12 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 48) = v12;
  OUTLINED_FUNCTION_30(v12, (uint64_t)PhoneCallControlCATsSimple.callControl(callControlAction:));
  uint64_t v13 = OUTLINED_FUNCTION_40(v1 + 17);
  return OUTLINED_FUNCTION_25_5(v13, v14, v15, v16);
}

PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedIntentDialogIds_optional __swiftcall PhoneCallControlCATsSimple.UnsupportedIntentDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of PhoneCallControlCATsSimple.UnsupportedIntentDialogIds.init(rawValue:);
  PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds.init(rawValue:)( rawValue._countAndFlagsBits,  (uint64_t)rawValue._object,  v1);
  return result;
}

void PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds.init(rawValue:)( uint64_t a1, uint64_t a2, Swift::OpaquePointer a3)
{
}

uint64_t PhoneCallControlCATsSimple.UnsupportedIntentDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6F5665676E616863LL;
  }
  if (a1 == 1) {
    return 0x6C6F566B63656863LL;
  }
  return 0x636972656E6567LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds( unsigned __int8 *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedIntentDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedIntentDialogIds_optional *a2@<X8>)
{
  result.int value = PhoneCallControlCATsSimple.UnsupportedIntentDialogIds.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds()
{
  char v1 = OUTLINED_FUNCTION_38();
  uint64_t *v0 = PhoneCallControlCATsSimple.UnsupportedIntentDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_2();
}

uint64_t PhoneCallControlCATsSimple.unsupportedIntentAsLabels(unsupportedIntent:)(uint64_t a1)
{
  void v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PhoneCallControlCATsSimple.unsupportedIntentAsLabels(unsupportedIntent:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_15_3(v0);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_25_11(v1);
  uint64_t v3 = OUTLINED_FUNCTION_24_6(v2, (__n128)xmmword_31D870);
  uint64_t v4 = OUTLINED_FUNCTION_32_3((uint64_t)v3, (uint64_t)"unsupportedIntent");
  OUTLINED_FUNCTION_27_6(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  uint64_t v7 = OUTLINED_FUNCTION_3_22(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_41_1(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v9);
  }

  uint64_t v10 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_35_4(v10);
  lazy protocol witness table accessor for type PhoneCallControlCATsSimple.UnsupportedIntentDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds();
  OUTLINED_FUNCTION_34_4((uint64_t)PhoneCallControlCATsSimple.callControl(callControlAction:));
  OUTLINED_FUNCTION_26_6();
  return OUTLINED_FUNCTION_8_13(v11, v12, v13, v14, v15, v16);
}

unint64_t lazy protocol witness table accessor for type PhoneCallControlCATsSimple.UnsupportedIntentDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedIntentDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedIntentDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallControlCATsSimple.UnsupportedIntentDialogIds,  &type metadata for PhoneCallControlCATsSimple.UnsupportedIntentDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedIntentDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedIntentDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedIntentDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallControlCATsSimple.UnsupportedIntentDialogIds,  &type metadata for PhoneCallControlCATsSimple.UnsupportedIntentDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedIntentDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds);
  }

  return result;
}

uint64_t PhoneCallControlCATsSimple.unsupportedSpeakerphoneAction(unsupportedReason:)(uint64_t a1)
{
  void v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PhoneCallControlCATsSimple.unsupportedSpeakerphoneAction(unsupportedReason:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_15_3(v2);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_25_11(v3);
  uint64_t v5 = OUTLINED_FUNCTION_24_6(v4, (__n128)xmmword_31D870);
  uint64_t v6 = OUTLINED_FUNCTION_32_3((uint64_t)v5, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_27_6(v6, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_26_0();
  uint64_t v9 = OUTLINED_FUNCTION_3_22(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_41_1(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v11);
  }

  uint64_t v12 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 48) = v12;
  OUTLINED_FUNCTION_30(v12, (uint64_t)PhoneCallControlCATsSimple.callControl(callControlAction:));
  uint64_t v13 = OUTLINED_FUNCTION_40(v1 + 29);
  return OUTLINED_FUNCTION_25_5(v13, v14, v15, v16);
}

void PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds.init(rawValue:)( uint64_t a1, uint64_t a2)
{
  v2._rawValue = &outlined read-only object #0 of PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds.init(rawValue:);
  PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds.init(rawValue:)(a1, a2, v2);
}

void PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds.init(rawValue:)( uint64_t a1, uint64_t a2, Swift::OpaquePointer a3)
{
}

unint64_t PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds.rawValue.getter()
{
  return 0xD000000000000023LL;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds( uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds( void *a1@<X8>)
{
  *a1 = 0xD000000000000023LL;
  a1[1] = v2;
  OUTLINED_FUNCTION_2();
}

uint64_t PhoneCallControlCATsSimple.unsupportedSpeakerphoneActionAsLabels(unsupportedReason:)(uint64_t a1)
{
  void v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PhoneCallControlCATsSimple.unsupportedSpeakerphoneActionAsLabels(unsupportedReason:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_15_3(v0);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_25_11(v1);
  uint64_t v3 = OUTLINED_FUNCTION_24_6(v2, (__n128)xmmword_31D870);
  uint64_t v4 = OUTLINED_FUNCTION_32_3((uint64_t)v3, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_27_6(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  uint64_t v7 = OUTLINED_FUNCTION_3_22(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_41_1(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v9);
  }

  uint64_t v10 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_35_4(v10);
  lazy protocol witness table accessor for type PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds();
  OUTLINED_FUNCTION_34_4((uint64_t)PhoneCallControlCATsSimple.callControl(callControlAction:));
  OUTLINED_FUNCTION_26_6();
  return OUTLINED_FUNCTION_8_13(v11, v12, v13, v14, v15, v16);
}

unint64_t lazy protocol witness table accessor for type PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds,  &type metadata for PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds,  &type metadata for PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds);
  }

  return result;
}

uint64_t PhoneCallControlCATsSimple.unsupportedSwitchToFaceTime(unsupportedReason:)(uint64_t a1)
{
  void v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PhoneCallControlCATsSimple.unsupportedSwitchToFaceTime(unsupportedReason:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_15_3(v2);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_25_11(v3);
  uint64_t v5 = OUTLINED_FUNCTION_24_6(v4, (__n128)xmmword_31D870);
  uint64_t v6 = OUTLINED_FUNCTION_32_3((uint64_t)v5, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_27_6(v6, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_26_0();
  uint64_t v9 = OUTLINED_FUNCTION_3_22(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_41_1(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v11);
  }

  uint64_t v12 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 48) = v12;
  OUTLINED_FUNCTION_30(v12, (uint64_t)PhoneCallControlCATsSimple.callControl(callControlAction:));
  uint64_t v13 = OUTLINED_FUNCTION_40(v1 + 27);
  return OUTLINED_FUNCTION_25_5(v13, v14, v15, v16);
}

PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedSwitchToFaceTimeDialogIds_optional __swiftcall PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds.init(rawValue:)( Swift::String rawValue)
{
  uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._rawValue = &outlined read-only object #0 of PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds.init(rawValue:);
  OUTLINED_FUNCTION_33_3(v2, countAndFlagsBits);
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_2();
  return result;
}

uint64_t PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_81ECC + 4 * byte_32031D[a1]))( 0xD00000000000001ALL,  0x8000000000341E10LL);
}

uint64_t sub_81ECC()
{
  return v0 - 2;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedSwitchToFaceTimeDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedSwitchToFaceTimeDialogIds_optional *a2@<X8>)
{
  result.int value = PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_38();
  uint64_t *v0 = PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_2();
}

uint64_t PhoneCallControlCATsSimple.unsupportedSwitchToFaceTimeAsLabels(unsupportedReason:)(uint64_t a1)
{
  void v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PhoneCallControlCATsSimple.unsupportedSwitchToFaceTimeAsLabels(unsupportedReason:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_15_3(v0);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_25_11(v1);
  uint64_t v3 = OUTLINED_FUNCTION_24_6(v2, (__n128)xmmword_31D870);
  uint64_t v4 = OUTLINED_FUNCTION_32_3((uint64_t)v3, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_27_6(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  uint64_t v7 = OUTLINED_FUNCTION_3_22(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_41_1(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v9);
  }

  uint64_t v10 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_35_4(v10);
  lazy protocol witness table accessor for type PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds();
  OUTLINED_FUNCTION_34_4((uint64_t)PhoneCallControlCATsSimple.callControl(callControlAction:));
  OUTLINED_FUNCTION_26_6();
  return OUTLINED_FUNCTION_8_13(v11, v12, v13, v14, v15, v16);
}

unint64_t lazy protocol witness table accessor for type PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds,  &type metadata for PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds,  &type metadata for PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds);
  }

  return result;
}

void AnnounceGroupFaceTimeInviteCATsSimple.__allocating_init(useResponseMode:options:)()
{
}

void AnnounceGroupFaceTimeInviteCATsSimple.init(useResponseMode:options:)()
{
}

unint64_t lazy protocol witness table accessor for type PhoneCallControlCATsSimple.Properties and conformance PhoneCallControlCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.Properties and conformance PhoneCallControlCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.Properties and conformance PhoneCallControlCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallControlCATsSimple.Properties,  &type metadata for PhoneCallControlCATsSimple.Properties);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.Properties and conformance PhoneCallControlCATsSimple.Properties);
  }

  return result;
}

uint64_t type metadata accessor for PhoneCallControlCATsSimple(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for PhoneCallControlCATsSimple;
  if (!type metadata singleton initialization cache for PhoneCallControlCATsSimple) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PhoneCallControlCATsSimple);
  }
  return result;
}

uint64_t type metadata completion function for PhoneCallControlCATsSimple(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for PhoneCallControlCATsSimple);
}

uint64_t ObjC metadata update function for PhoneCallControlCATsSimple()
{
  return type metadata accessor for PhoneCallControlCATsSimple(0LL);
}

uint64_t storeEnumTagSinglePayload for PhoneCallControlCATsSimple.Properties( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_82444 + 4 * byte_32032C[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_82478 + 4 * byte_320327[v4]))();
}

uint64_t sub_82478(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_82480(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x82488LL);
  }
  return result;
}

uint64_t sub_82494(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x8249CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_824A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_824A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for PhoneCallControlCATsSimple.Properties()
{
}

uint64_t storeEnumTagSinglePayload for PhoneCallControlCATsSimple.CallControlDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_8250C + 4 * byte_320336[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_82540 + 4 * byte_320331[v4]))();
}

uint64_t sub_82540(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_82548(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x82550LL);
  }
  return result;
}

uint64_t sub_8255C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x82564LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_82568(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_82570(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for PhoneCallControlCATsSimple.CallControlDialogIds()
{
}

void type metadata accessor for PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds()
{
}

void type metadata accessor for PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_825FC + 4 * byte_320340[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_82630 + 4 * byte_32033B[v4]))();
}

uint64_t sub_82630(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_82638(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x82640LL);
  }
  return result;
}

uint64_t sub_8264C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x82654LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_82658(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_82660(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for PhoneCallControlCATsSimple.UnsupportedIntentDialogIds()
{
}

uint64_t getEnumTagSinglePayload for PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds( unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_82708 + 4 * byte_320345[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_82728 + 4 * byte_32034A[v4]))();
  }
}

_BYTE *sub_82708(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_82728(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_82730(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_82738(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_82740(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_82748(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void type metadata accessor for PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds()
{
}

uint64_t getEnumTagSinglePayload for PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF6) {
    return ((uint64_t (*)(void))((char *)&loc_82834 + 4 * byte_320354[v4]))();
  }
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_82868 + 4 * byte_32034F[v4]))();
}

uint64_t sub_82868(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_82870(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x82878LL);
  }
  return result;
}

uint64_t sub_82884(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x8288CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 9;
  return result;
}

uint64_t sub_82890(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_82898(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds()
{
}

uint64_t OUTLINED_FUNCTION_3_22(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_8_13( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

__n128 *OUTLINED_FUNCTION_24_6(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

  ;
}

uint64_t OUTLINED_FUNCTION_35_4(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

void *one-time initialization function for instance()
{
  return memcpy(&static PhoneCallFeatureFlags.instance, v1, 0xB0uLL);
}

unint64_t PhoneCallFeatureFlags.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureFlagsKey>);
  uint64_t v19 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v19 + 16) = xmmword_31D870;
  *(void *)(v19 + 56) = &type metadata for SiriInCallFeature;
  *(void *)(v19 + 64) = lazy protocol witness table accessor for type SiriInCallFeature and conformance SiriInCallFeature();
  uint64_t v18 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v18 + 16) = xmmword_31D870;
  *(void *)(v18 + 56) = &type metadata for TelephonyUtilitiesFeature;
  *(void *)(v18 + 64) = lazy protocol witness table accessor for type TelephonyUtilitiesFeature and conformance TelephonyUtilitiesFeature();
  uint64_t v17 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v17 + 16) = xmmword_31D870;
  *(void *)(v17 + 56) = &type metadata for IDSFeature;
  *(void *)(v17 + 64) = lazy protocol witness table accessor for type IDSFeature and conformance IDSFeature();
  uint64_t v16 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v16 + 16) = xmmword_31D870;
  *(void *)(v16 + 56) = &type metadata for SiriPhoneFeature;
  unint64_t v3 = lazy protocol witness table accessor for type SiriPhoneFeature and conformance SiriPhoneFeature();
  *(void *)(v16 + 64) = v3;
  *(_BYTE *)(v16 + 32) = 3;
  uint64_t v15 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_31D870;
  *(void *)(v15 + 56) = &type metadata for SiriPhoneFeature;
  *(void *)(v15 + 64) = v3;
  *(_BYTE *)(v15 + 32) = 4;
  uint64_t v14 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v14 + 16) = xmmword_31D870;
  *(void *)(v14 + 56) = &type metadata for SiriPhoneFeature;
  *(void *)(v14 + 64) = v3;
  *(_BYTE *)(v14 + 32) = 6;
  uint64_t v4 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v4 + 16) = xmmword_31D870;
  *(void *)(v4 + 56) = &type metadata for SiriPhoneFeature;
  *(void *)(v4 + 64) = v3;
  *(_BYTE *)(v4 + 32) = 8;
  uint64_t v13 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v13 + 16) = xmmword_31D870;
  *(void *)(v13 + 56) = &type metadata for SiriPlaybackControlFeature;
  *(void *)(v13 + 64) = lazy protocol witness table accessor for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature();
  uint64_t v5 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_31D870;
  *(void *)(v5 + 56) = &type metadata for SiriPhoneFeature;
  *(void *)(v5 + 64) = v3;
  *(_BYTE *)(v5 + 32) = 11;
  uint64_t v6 = swift_allocObject(v2, 112LL, 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_31D880;
  *(void *)(v6 + 56) = &type metadata for SiriPhoneFeature;
  *(void *)(v6 + 64) = v3;
  *(_BYTE *)(v6 + 32) = 5;
  *(void *)(v6 + 96) = &type metadata for PommesFeature;
  *(void *)(v6 + 104) = lazy protocol witness table accessor for type PommesFeature and conformance PommesFeature();
  uint64_t v7 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_31D870;
  *(void *)(v7 + 56) = &type metadata for SiriPhoneFeature;
  *(void *)(v7 + 64) = v3;
  *(_BYTE *)(v7 + 32) = 7;
  uint64_t v8 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_31D870;
  *(void *)(v8 + 56) = &type metadata for SiriPhoneFeature;
  *(void *)(v8 + 64) = v3;
  *(_BYTE *)(v8 + 32) = 9;
  uint64_t v9 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_31D870;
  *(void *)(v9 + 56) = &type metadata for SiriPhoneFeature;
  *(void *)(v9 + 64) = v3;
  *(_BYTE *)(v9 + 32) = 10;
  uint64_t v10 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_31D870;
  *(void *)(v10 + 56) = &type metadata for SiriPhoneFeature;
  *(void *)(v10 + 64) = v3;
  *(_BYTE *)(v10 + 32) = 12;
  LOBYTE(OUTLINED_FUNCTION_8_10(*(void *)(*(void *)v1 + 120LL), v3) = static RFFeatureFlags.ResponseFramework.SMART.getter();
  uint64_t v11 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_31D870;
  *(void *)(v11 + 56) = &type metadata for AppProtection;
  unint64_t result = lazy protocol witness table accessor for type AppProtection and conformance AppProtection();
  *(void *)(v11 + 64) = result;
  *(void *)a1 = 0xD000000000000012LL;
  *(void *)(a1 + 8) = 0x8000000000346B40LL;
  *(_BYTE *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0xD000000000000014LL;
  *(void *)(a1 + 32) = 0x8000000000346B60LL;
  *(_BYTE *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v18;
  *(void *)(a1 + 64) = v17;
  *(void *)(a1 + 72) = v16;
  *(void *)(a1 + 80) = v15;
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = v13;
  *(void *)(a1 + 112) = v5;
  *(void *)(a1 + 120) = v6;
  *(void *)(a1 + outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 - 168), v0 - 128) = v7;
  *(void *)(a1 + 136) = v8;
  *(void *)(a1 + 144) = v9;
  *(void *)(a1 + 152) = v10;
  *(_BYTE *)(a1 + 160) = v3 & 1;
  *(_DWORD *)(a1 + 161) = *(_DWORD *)v20;
  *(_DWORD *)(a1 + 164) = *(_DWORD *)&v20[3];
  *(void *)(a1 + 168) = v11;
  return result;
}

void *PhoneCallFeatureFlags.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  return &static PhoneCallFeatureFlags.instance;
}

uint64_t static PhoneCallFeatureFlags.instance.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  return outlined init with copy of PhoneCallFeatureFlags((uint64_t)&static PhoneCallFeatureFlags.instance, a1);
}

uint64_t outlined init with copy of PhoneCallFeatureFlags(uint64_t a1, uint64_t a2)
{
  return a2;
}

void one-time initialization function for userDefaults()
{
  id v0 = objc_allocWithZone(&OBJC_CLASS___NSUserDefaults);
  @nonobjc NSUserDefaults.init(suiteName:)(0xD000000000000014LL, 0x8000000000346CB0LL);
  static PhoneCallFeatureFlags.userDefaults = v1;
}

uint64_t *PhoneCallFeatureFlags.userDefaults.unsafeMutableAddressor()
{
  if (one-time initialization token for userDefaults != -1) {
    swift_once(&one-time initialization token for userDefaults, one-time initialization function for userDefaults);
  }
  return &static PhoneCallFeatureFlags.userDefaults;
}

uint64_t static PhoneCallFeatureFlags.userDefaults.getter()
{
  if (one-time initialization token for userDefaults != -1) {
    swift_once(&one-time initialization token for userDefaults, one-time initialization function for userDefaults);
  }
  uint64_t v0 = static PhoneCallFeatureFlags.userDefaults;
  id v1 = (id)static PhoneCallFeatureFlags.userDefaults;
  return v0;
}

uint64_t PhoneCallFeatureFlags.forceCallsToHandle.getter()
{
  return specialized UserDefaultsSetting.wrappedValue.getter(*(void *)v0, *(void *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t UserDefaultsSetting.wrappedValue.getter@<X0>( uint64_t a1@<X0>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (one-time initialization token for userDefaults != -1) {
    swift_once(&one-time initialization token for userDefaults, one-time initialization function for userDefaults);
  }
  uint64_t v6 = (void *)static PhoneCallFeatureFlags.userDefaults;
  if (static PhoneCallFeatureFlags.userDefaults)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    id v8 = [v6 valueForKey:v7];

    if (v8)
    {
      _bridgeAnyObjectToAny(_:)(v12, v8);
      swift_unknownObjectRelease(v8);
    }

    else
    {
      memset(v12, 0, sizeof(v12));
    }

    outlined init with take of Any?((uint64_t)v12, (uint64_t)v13);
  }

  else
  {
    memset(v13, 0, sizeof(v13));
  }

  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  int v11 = swift_dynamicCast(a4, v13, v10);
  return __swift_storeEnumTagSinglePayload(a4, v11 ^ 1u, 1LL, a3);
}

  ;
}

void PhoneCallFeatureFlags.siriInCallFlag.getter()
{
  if (v1)
  {
    uint64_t v3 = OUTLINED_FUNCTION_5_17(v2);
    while (1)
    {
      uint64_t v11 = OUTLINED_FUNCTION_3_23(v3, v4, v5, v6, v7, v8, v9, v10, v33);
      uint64_t v19 = OUTLINED_FUNCTION_4_16(v11, v12, v13, v14, v15, v16, v17, v18, v34);
      uint64_t v27 = OUTLINED_FUNCTION_2_17(v19, v20, v21, v22, v23, v24, v25, v26, v35);
      if ((v0 & 1) == 0) {
        break;
      }
      OUTLINED_FUNCTION_7_19();
      if (v32)
      {
        OUTLINED_FUNCTION_1_22(v3, v4, v5, v6, v7);
        goto LABEL_9;
      }
    }

    OUTLINED_FUNCTION_1_22(v27, v28, v29, v30, v31);
  }

void OSFeatureFlag.wrappedValue.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of SignalProviding(v2, (uint64_t)v4);
      char v3 = isFeatureEnabled(_:)(v4);
      __swift_destroy_boxed_opaque_existential_1(v4);
      if ((v3 & 1) == 0) {
        break;
      }
      v2 += 40LL;
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }

    swift_bridgeObjectRelease();
  }

void PhoneCallFeatureFlags.siriLagunaFlag.getter()
{
  if (v1)
  {
    uint64_t v3 = OUTLINED_FUNCTION_5_17(v2);
    while (1)
    {
      uint64_t v11 = OUTLINED_FUNCTION_3_23(v3, v4, v5, v6, v7, v8, v9, v10, v33);
      uint64_t v19 = OUTLINED_FUNCTION_4_16(v11, v12, v13, v14, v15, v16, v17, v18, v34);
      uint64_t v27 = OUTLINED_FUNCTION_2_17(v19, v20, v21, v22, v23, v24, v25, v26, v35);
      if ((v0 & 1) == 0) {
        break;
      }
      OUTLINED_FUNCTION_7_19();
      if (v32)
      {
        OUTLINED_FUNCTION_1_22(v3, v4, v5, v6, v7);
        goto LABEL_9;
      }
    }

    OUTLINED_FUNCTION_1_22(v27, v28, v29, v30, v31);
  }

void PhoneCallFeatureFlags.faceTimeUninstallFlag.getter()
{
  if (v1)
  {
    uint64_t v3 = OUTLINED_FUNCTION_5_17(v2);
    while (1)
    {
      uint64_t v11 = OUTLINED_FUNCTION_3_23(v3, v4, v5, v6, v7, v8, v9, v10, v33);
      uint64_t v19 = OUTLINED_FUNCTION_4_16(v11, v12, v13, v14, v15, v16, v17, v18, v34);
      uint64_t v27 = OUTLINED_FUNCTION_2_17(v19, v20, v21, v22, v23, v24, v25, v26, v35);
      if ((v0 & 1) == 0) {
        break;
      }
      OUTLINED_FUNCTION_7_19();
      if (v32)
      {
        OUTLINED_FUNCTION_1_22(v3, v4, v5, v6, v7);
        goto LABEL_9;
      }
    }

    OUTLINED_FUNCTION_1_22(v27, v28, v29, v30, v31);
  }

void PhoneCallFeatureFlags.answerCallNotificationOnLockedScreenFlag.getter()
{
  if (v1)
  {
    uint64_t v3 = OUTLINED_FUNCTION_5_17(v2);
    while (1)
    {
      uint64_t v11 = OUTLINED_FUNCTION_3_23(v3, v4, v5, v6, v7, v8, v9, v10, v33);
      uint64_t v19 = OUTLINED_FUNCTION_4_16(v11, v12, v13, v14, v15, v16, v17, v18, v34);
      uint64_t v27 = OUTLINED_FUNCTION_2_17(v19, v20, v21, v22, v23, v24, v25, v26, v35);
      if ((v0 & 1) == 0) {
        break;
      }
      OUTLINED_FUNCTION_7_19();
      if (v32)
      {
        OUTLINED_FUNCTION_1_22(v3, v4, v5, v6, v7);
        goto LABEL_9;
      }
    }

    OUTLINED_FUNCTION_1_22(v27, v28, v29, v30, v31);
  }

void PhoneCallFeatureFlags.quickStopCallBellFlag.getter()
{
  if (v1)
  {
    uint64_t v3 = OUTLINED_FUNCTION_5_17(v2);
    while (1)
    {
      uint64_t v11 = OUTLINED_FUNCTION_3_23(v3, v4, v5, v6, v7, v8, v9, v10, v33);
      uint64_t v19 = OUTLINED_FUNCTION_4_16(v11, v12, v13, v14, v15, v16, v17, v18, v34);
      uint64_t v27 = OUTLINED_FUNCTION_2_17(v19, v20, v21, v22, v23, v24, v25, v26, v35);
      if ((v0 & 1) == 0) {
        break;
      }
      OUTLINED_FUNCTION_7_19();
      if (v32)
      {
        OUTLINED_FUNCTION_1_22(v3, v4, v5, v6, v7);
        goto LABEL_9;
      }
    }

    OUTLINED_FUNCTION_1_22(v27, v28, v29, v30, v31);
  }

void PhoneCallFeatureFlags.cancelCallBellFlag.getter()
{
  if (v1)
  {
    uint64_t v3 = OUTLINED_FUNCTION_5_17(v2);
    while (1)
    {
      uint64_t v11 = OUTLINED_FUNCTION_3_23(v3, v4, v5, v6, v7, v8, v9, v10, v33);
      uint64_t v19 = OUTLINED_FUNCTION_4_16(v11, v12, v13, v14, v15, v16, v17, v18, v34);
      uint64_t v27 = OUTLINED_FUNCTION_2_17(v19, v20, v21, v22, v23, v24, v25, v26, v35);
      if ((v0 & 1) == 0) {
        break;
      }
      OUTLINED_FUNCTION_7_19();
      if (v32)
      {
        OUTLINED_FUNCTION_1_22(v3, v4, v5, v6, v7);
        goto LABEL_9;
      }
    }

    OUTLINED_FUNCTION_1_22(v27, v28, v29, v30, v31);
  }

void PhoneCallFeatureFlags.shouldEnableSRRRefactor.getter()
{
  if (v1)
  {
    uint64_t v3 = OUTLINED_FUNCTION_5_17(v2);
    while (1)
    {
      uint64_t v11 = OUTLINED_FUNCTION_3_23(v3, v4, v5, v6, v7, v8, v9, v10, v33);
      uint64_t v19 = OUTLINED_FUNCTION_4_16(v11, v12, v13, v14, v15, v16, v17, v18, v34);
      uint64_t v27 = OUTLINED_FUNCTION_2_17(v19, v20, v21, v22, v23, v24, v25, v26, v35);
      if ((v0 & 1) == 0) {
        break;
      }
      OUTLINED_FUNCTION_7_19();
      if (v32)
      {
        OUTLINED_FUNCTION_1_22(v3, v4, v5, v6, v7);
        goto LABEL_9;
      }
    }

    OUTLINED_FUNCTION_1_22(v27, v28, v29, v30, v31);
  }

void PhoneCallFeatureFlags.useEntitySpansForBusinessCallFlag.getter()
{
  if (v1)
  {
    uint64_t v3 = OUTLINED_FUNCTION_5_17(v2);
    while (1)
    {
      uint64_t v11 = OUTLINED_FUNCTION_3_23(v3, v4, v5, v6, v7, v8, v9, v10, v33);
      uint64_t v19 = OUTLINED_FUNCTION_4_16(v11, v12, v13, v14, v15, v16, v17, v18, v34);
      uint64_t v27 = OUTLINED_FUNCTION_2_17(v19, v20, v21, v22, v23, v24, v25, v26, v35);
      if ((v0 & 1) == 0) {
        break;
      }
      OUTLINED_FUNCTION_7_19();
      if (v32)
      {
        OUTLINED_FUNCTION_1_22(v3, v4, v5, v6, v7);
        goto LABEL_9;
      }
    }

    OUTLINED_FUNCTION_1_22(v27, v28, v29, v30, v31);
  }

void PhoneCallFeatureFlags.shouldEnableCompositionFlowForAllLocales.getter()
{
  if (v1)
  {
    uint64_t v3 = OUTLINED_FUNCTION_5_17(v2);
    while (1)
    {
      uint64_t v11 = OUTLINED_FUNCTION_3_23(v3, v4, v5, v6, v7, v8, v9, v10, v33);
      uint64_t v19 = OUTLINED_FUNCTION_4_16(v11, v12, v13, v14, v15, v16, v17, v18, v34);
      uint64_t v27 = OUTLINED_FUNCTION_2_17(v19, v20, v21, v22, v23, v24, v25, v26, v35);
      if ((v0 & 1) == 0) {
        break;
      }
      OUTLINED_FUNCTION_7_19();
      if (v32)
      {
        OUTLINED_FUNCTION_1_22(v3, v4, v5, v6, v7);
        goto LABEL_9;
      }
    }

    OUTLINED_FUNCTION_1_22(v27, v28, v29, v30, v31);
  }

uint64_t PhoneCallFeatureFlags.smartUIFlag.getter()
{
  return *(unsigned __int8 *)(v0 + 160);
}

uint64_t PhoneCallFeatureFlags.smartUIFlag.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 160) = result;
  return result;
}

Swift::Void (__swiftcall *PhoneCallFeatureFlags.smartUIFlag.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void PhoneCallFeatureFlags.protectedAppsFlag.getter()
{
  if (v1)
  {
    uint64_t v3 = OUTLINED_FUNCTION_5_17(v2);
    while (1)
    {
      uint64_t v11 = OUTLINED_FUNCTION_3_23(v3, v4, v5, v6, v7, v8, v9, v10, v33);
      uint64_t v19 = OUTLINED_FUNCTION_4_16(v11, v12, v13, v14, v15, v16, v17, v18, v34);
      uint64_t v27 = OUTLINED_FUNCTION_2_17(v19, v20, v21, v22, v23, v24, v25, v26, v35);
      if ((v0 & 1) == 0) {
        break;
      }
      OUTLINED_FUNCTION_7_19();
      if (v32)
      {
        OUTLINED_FUNCTION_1_22(v3, v4, v5, v6, v7);
        goto LABEL_9;
      }
    }

    OUTLINED_FUNCTION_1_22(v27, v28, v29, v30, v31);
  }

void SiriPhoneFeature.domain.getter()
{
}

void SiriPhoneFeature.hashValue.getter(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  OUTLINED_FUNCTION_13_3(a1);
  Hasher._combine(_:)(v1);
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

void protocol witness for Hashable.hashValue.getter in conformance SiriPhoneFeature()
{
}

void PommesFeature.domain.getter()
{
}

void PommesFeature.feature.getter()
{
}

void SiriPlaybackControlFeature.domain.getter()
{
}

void SiriPlaybackControlFeature.feature.getter()
{
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance SiriPlaybackControlFeature()
{
  return "SiriPlaybackControls";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance SiriPlaybackControlFeature()
{
  return "quick_stop_call_bell";
}

void SiriInCallFeature.domain.getter()
{
}

void SiriInCallFeature.feature.getter()
{
}

void SharedNeedsValueContext.NeedsValueCase.hash(into:)()
{
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance SiriInCallFeature()
{
  return "SiriInCall";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance SiriInCallFeature()
{
  return "blushing_phantom";
}

void TelephonyUtilitiesFeature.domain.getter()
{
}

void TelephonyUtilitiesFeature.feature.getter()
{
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance TelephonyUtilitiesFeature()
{
  return "TelephonyUtilities";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance TelephonyUtilitiesFeature()
{
  return "Laguna";
}

void IDSFeature.domain.getter()
{
}

void IDSFeature.feature.getter()
{
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance IDSFeature()
{
  return "IDS";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance IDSFeature()
{
  return "FaceTimeUninstall";
}

void AppProtection.domain.getter()
{
}

void AppProtection.feature.getter()
{
}

void PommesFeature.hashValue.getter(uint64_t a1)
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PommesFeature(uint64_t a1)
{
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance AppProtection()
{
  return "AppProtection";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance AppProtection()
{
  return "protected_apps";
}

uint64_t destroy for PhoneCallFeatureFlags(void *a1)
{
  return swift_bridgeObjectRelease(a1[21]);
}

uint64_t initializeWithCopy for PhoneCallFeatureFlags(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 88) = v10;
  uint64_t v11 = *(void *)(a2 + 96);
  uint64_t v12 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v11;
  *(void *)(a1 + 104) = v12;
  uint64_t v15 = *(void *)(a2 + 112);
  uint64_t v16 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = v15;
  *(void *)(a1 + 120) = v16;
  uint64_t v17 = *(void *)(a2 + 128);
  uint64_t v18 = *(void *)(a2 + 136);
  *(void *)(a1 + outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 - 168), v0 - 128) = v17;
  *(void *)(a1 + 136) = v18;
  uint64_t v13 = *(void *)(a2 + 144);
  uint64_t v21 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = v13;
  *(void *)(a1 + 152) = v21;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  uint64_t v19 = v13;
  uint64_t v20 = *(void *)(a2 + 168);
  *(void *)(a1 + 168) = v20;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v20);
  return a1;
}

uint64_t assignWithCopy for PhoneCallFeatureFlags(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 72);
  uint64_t v15 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(void *)(a2 + 80);
  uint64_t v17 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = *(void *)(a2 + 88);
  uint64_t v19 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = *(void *)(a2 + 96);
  uint64_t v21 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = *(void *)(a2 + 104);
  uint64_t v23 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = *(void *)(a2 + 112);
  uint64_t v25 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = *(void *)(a2 + 120);
  uint64_t v27 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  uint64_t v28 = *(void *)(a2 + 128);
  uint64_t v29 = *(void *)(a1 + 128);
  *(void *)(a1 + outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 - 168), v0 - 128) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  uint64_t v30 = *(void *)(a2 + 136);
  uint64_t v31 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  uint64_t v32 = *(void *)(a2 + 144);
  uint64_t v33 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  uint64_t v34 = *(void *)(a2 + 152);
  uint64_t v35 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  uint64_t v36 = *(void *)(a2 + 168);
  uint64_t v37 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  return a1;
}

void *__swift_memcpy176_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xB0uLL);
}

uint64_t assignWithTake for PhoneCallFeatureFlags(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRelease(*(void *)(a1 + 48));
  uint64_t v8 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(*(void *)(a1 + 64));
  uint64_t v9 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(*(void *)(a1 + 80));
  uint64_t v10 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(*(void *)(a1 + 96));
  uint64_t v11 = *(void *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(*(void *)(a1 + 112));
  uint64_t v12 = *(void *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(*(void *)(a1 + 128));
  uint64_t v13 = *(void *)(a1 + 136);
  *(_OWORD *)(a1 + outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 - 168), v0 - 128) = *(_OWORD *)(a2 + 128);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(*(void *)(a1 + 144));
  uint64_t v14 = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  uint64_t v15 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhoneCallFeatureFlags(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 176))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhoneCallFeatureFlags(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0LL;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 176) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 176) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for PhoneCallFeatureFlags()
{
}

uint64_t getEnumTagSinglePayload for SiriPhoneFeature(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF4)
  {
    if (a2 + 12 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 12) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 13;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for SiriPhoneFeature(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF3) {
    return ((uint64_t (*)(void))((char *)&loc_83EDC + 4 * byte_3208E2[v4]))();
  }
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_83F10 + 4 * byte_3208DD[v4]))();
}

uint64_t sub_83F10(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_83F18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x83F20LL);
  }
  return result;
}

uint64_t sub_83F2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x83F34LL);
  }
  *(_BYTE *)unint64_t result = a2 + 12;
  return result;
}

uint64_t sub_83F38(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_83F40(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for SiriPhoneFeature()
{
}

void type metadata accessor for PommesFeature()
{
}

void type metadata accessor for SiriPlaybackControlFeature()
{
}

void type metadata accessor for SiriInCallFeature()
{
}

void type metadata accessor for TelephonyUtilitiesFeature()
{
}

void type metadata accessor for IDSFeature()
{
}

uint64_t storeEnumTagSinglePayload for PommesFeature(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_83FD8 + 4 * byte_3208E7[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_83FF8 + 4 * byte_3208EC[v4]))();
  }
}

_BYTE *sub_83FD8(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_83FF8(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_84000(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_84008(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_84010(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_84018(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void type metadata accessor for AppProtection()
{
}

uint64_t type metadata instantiation function for UserDefaultsSetting(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16LL);
}

uint64_t initializeBufferWithCopyOfBuffer for UserDefaultsSetting(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for UserDefaultsSetting(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for UserDefaultsSetting(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for UserDefaultsSetting(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 17))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserDefaultsSetting(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for UserDefaultsSetting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UserDefaultsSetting);
}

void type metadata accessor for OSFeatureFlag()
{
}

void *OUTLINED_FUNCTION_1_22(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return outlined release of Set<String>((uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_2_17( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return __swift_destroy_boxed_opaque_existential_1(&a9);
}

uint64_t OUTLINED_FUNCTION_3_23( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return outlined init with copy of SignalProviding(v9, (uint64_t)&a9);
}

uint64_t OUTLINED_FUNCTION_4_16( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return isFeatureEnabled(_:)(&a9);
}

  ;
}

  ;
}

  ;
}

  ;
}

Swift::Int OUTLINED_FUNCTION_11_17()
{
  return Hasher._finalize()();
}

void OUTLINED_FUNCTION_12_16()
{
}

uint64_t key path setter for RedirectToCompanionFlow.state : RedirectToCompanionFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of RedirectToCompanionFlow.State(a1, (uint64_t)v5);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 104LL))(v5);
}

void RedirectToCompanionFlow.state.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23RedirectToCompanionFlow_state;
  swift_beginAccess(v3, v4, 0LL, 0LL);
  outlined init with copy of RedirectToCompanionFlow.State(v3, a1);
  OUTLINED_FUNCTION_16_7();
}

uint64_t outlined init with copy of RedirectToCompanionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RedirectToCompanionFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for RedirectToCompanionFlow.State(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for RedirectToCompanionFlow.State,  (uint64_t)&nominal type descriptor for RedirectToCompanionFlow.State);
}

void RedirectToCompanionFlow.state.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23RedirectToCompanionFlow_state;
  OUTLINED_FUNCTION_5_9(v3, (uint64_t)v4);
  outlined assign with take of RedirectToCompanionFlow.State(a1, v3);
  swift_endAccess(v4);
  OUTLINED_FUNCTION_16_7();
}

uint64_t outlined assign with take of RedirectToCompanionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RedirectToCompanionFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t (*RedirectToCompanionFlow.state.modify(uint64_t a1))()
{
  return static SingleResultVoicemailModel.resultViewID.modify;
}

uint64_t RedirectToCompanionFlow.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding( v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23RedirectToCompanionFlow_sharedGlobals,  a1);
}

uint64_t RedirectToCompanionFlow.__allocating_init(parse:sharedGlobals:)(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for Parse(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v9 = v8 - v7;
  type metadata accessor for RedirectToCompanionFlow.State(0LL);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v12 = v11 - v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  Input.init(parse:)(v9);
  uint64_t v13 = OUTLINED_FUNCTION_3_4();
  __swift_storeEnumTagSinglePayload(v12, 0LL, 2LL, v13);
  outlined init with copy of SignalProviding((uint64_t)a2, (uint64_t)v16);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, _BYTE *))(v2 + 120))(v12, v16);
  __swift_destroy_boxed_opaque_existential_1(a2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return v14;
}

uint64_t RedirectToCompanionFlow.__allocating_init(state:sharedGlobals:)(uint64_t a1, __int128 *a2)
{
  uint64_t v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  outlined init with take of RedirectToCompanionFlow.State( a1,  v5 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23RedirectToCompanionFlow_state);
  outlined init with take of AppSelectionSignalComponent( a2,  v5 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23RedirectToCompanionFlow_sharedGlobals);
  return v5;
}

uint64_t RedirectToCompanionFlow.init(state:sharedGlobals:)(uint64_t a1, __int128 *a2)
{
  return v2;
}

uint64_t outlined init with take of RedirectToCompanionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RedirectToCompanionFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

BOOL RedirectToCompanionFlow.on(input:)()
{
  uint64_t v1 = v0;
  type metadata accessor for RedirectToCompanionFlow.State(0LL);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v4 = v3 - v2;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = __swift_project_value_buffer(v5, (uint64_t)static Logger.siriPhone);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v9 = static os_log_type_t.debug.getter(v7, v8);
  if (os_log_type_enabled(v7, v9))
  {
    uint64_t v10 = OUTLINED_FUNCTION_7_0(22LL);
    uint64_t v11 = OUTLINED_FUNCTION_7_0(64LL);
    uint64_t v22 = v11;
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v12 = OUTLINED_FUNCTION_8_15(v11, 0x8000000000347D30LL, &v22);
    OUTLINED_FUNCTION_4_17(v12, v13, v14, v10 + 12);
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x7475706E69286E6FLL, 0xEA0000000000293ALL, &v22);
    OUTLINED_FUNCTION_4_17(v21, v15, v16, v10 + 22);
    _os_log_impl(&dword_0, v7, v9, "%s:%s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2LL);
    OUTLINED_FUNCTION_0_2(v11);
    OUTLINED_FUNCTION_0_2(v10);
  }

  (*(void (**)(uint64_t))(*(void *)v1 + 96LL))(v17);
  uint64_t v18 = OUTLINED_FUNCTION_3_4();
  BOOL v19 = __swift_getEnumTagSinglePayload(v4, 2LL, v18) == 0;
  outlined destroy of RedirectToCompanionFlow.State(v4);
  return v19;
}

uint64_t RedirectToCompanionFlow.execute()(uint64_t a1)
{
  v2[7] = a1;
  _BYTE v2[8] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentityCheckFlowStrategy.HandoffConfiguration?);
  v2[9] = OUTLINED_FUNCTION_23(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for UserIdentityCheckFlowStrategy(0LL);
  v2[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[11] = v5;
  v2[12] = OUTLINED_FUNCTION_23(v5);
  uint64_t v6 = type metadata accessor for ExecuteOnRemoteDeviceSpecification(0LL);
  v2[13] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[14] = v7;
  v2[15] = OUTLINED_FUNCTION_23(v7);
  uint64_t v8 = type metadata accessor for UserIdentityCheckFlowStrategy.HandoffConfiguration(0LL);
  v2[16] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[17] = v9;
  v2[18] = OUTLINED_FUNCTION_23(v9);
  uint64_t v10 = type metadata accessor for CompanionDeviceInfoRequirement(0LL);
  v2[19] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[20] = v11;
  v2[21] = OUTLINED_FUNCTION_23(v11);
  uint64_t v12 = type metadata accessor for FlowUnhandledReason(0LL);
  v2[22] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[23] = v13;
  _BYTE v2[24] = OUTLINED_FUNCTION_23(v13);
  uint64_t v14 = type metadata accessor for RedirectToCompanionFlow.State(0LL);
  v2[25] = OUTLINED_FUNCTION_23(*(void *)(v14 - 8));
  uint64_t v15 = OUTLINED_FUNCTION_3_4();
  v2[26] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v2[27] = v16;
  unint64_t v17 = (*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[28] = swift_task_alloc(v17);
  v2[29] = swift_task_alloc(v17);
  return swift_task_switch(RedirectToCompanionFlow.execute(), 0LL, 0LL);
}

uint64_t RedirectToCompanionFlow.execute()()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v5 = static os_log_type_t.debug.getter(v3, v4);
  if (os_log_type_enabled(v3, v5))
  {
    uint64_t v6 = OUTLINED_FUNCTION_7_0(22LL);
    uint64_t v7 = OUTLINED_FUNCTION_7_0(64LL);
    v57[0] = v7;
    *(_DWORD *)uint64_t v6 = 136315394;
    *(void *)(v0 + 40) = OUTLINED_FUNCTION_8_15(v7, 0x8000000000347D30LL, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v6 + 4);
    *(_WORD *)(v6 + 12) = 2080;
    *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0x2865747563657865LL,  0xE900000000000029LL,  v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 14);
    _os_log_impl(&dword_0, v3, v5, "%s:%s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2LL);
    OUTLINED_FUNCTION_0_2(v7);
    OUTLINED_FUNCTION_0_2(v6);
  }

  uint64_t v9 = *(void *)(v0 + 200);
  uint64_t v8 = *(void *)(v0 + 208);
  (*(void (**)(void))(**(void **)(v0 + 64) + 96LL))();
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v9, 2LL, v8);
  if ((_DWORD)EnumTagSinglePayload)
  {
    if ((_DWORD)EnumTagSinglePayload == 1)
    {
      uint64_t v11 = *(void *)(v0 + 200);
      static ExecuteResponse.complete()(EnumTagSinglePayload);
      outlined destroy of RedirectToCompanionFlow.State(v11);
    }

    else
    {
      uint64_t v34 = *(void *)(v0 + 184);
      uint64_t v33 = *(void *)(v0 + 192);
      uint64_t v35 = *(void *)(v0 + 176);
      (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))( v33,  enum case for FlowUnhandledReason.needsServerExecution(_:),  v35);
      static ExecuteResponse.unhandled(reason:)(v33);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    }
  }

  else
  {
    uint64_t v12 = *(void *)(v0 + 232);
    uint64_t v14 = *(void *)(v0 + 208);
    uint64_t v13 = *(void *)(v0 + 216);
    uint64_t v15 = *(void *)(v0 + 160);
    uint64_t v16 = *(void *)(v0 + 168);
    uint64_t v17 = *(void *)(v0 + 152);
    uint64_t v50 = *(void *)(v0 + 136);
    uint64_t v51 = *(void *)(v0 + 128);
    uint64_t v47 = *(void *)(v0 + 224);
    uint64_t v48 = *(void *)(v0 + 120);
    uint64_t v45 = *(void *)(v0 + 144);
    uint64_t v46 = *(void *)(v0 + 112);
    uint64_t v49 = *(void *)(v0 + 104);
    uint64_t v52 = *(void *)(v0 + 96);
    uint64_t v53 = *(void *)(v0 + 88);
    uint64_t v18 = *(void *)(v0 + 72);
    uint64_t v54 = *(void *)(v0 + 80);
    uint64_t v56 = *(void *)(v0 + 64);
    uint64_t v55 = v13;
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 32))(v12, *(void *)(v0 + 200), v14);
    type metadata accessor for CompanionCompatibilityCheckFlowStrategy(0LL);
    (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))( v16,  enum case for CompanionDeviceInfoRequirement.supportsPeerToPeerHandoff(_:),  v17);
    uint64_t v19 = static CompanionCompatibilityCheckFlowStrategy.require(_:redirectToServerOnFailure:)(v16, 1LL);
    OUTLINED_FUNCTION_9_17(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
    uint64_t v20 = type metadata accessor for SimpleHandoffStrategy();
    uint64_t v21 = swift_allocObject(v20, 16LL, 7LL);
    v57[3] = v20;
    v57[4] = lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy( &lazy protocol witness table cache variable for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy,  v22,  (uint64_t (*)(uint64_t))type metadata accessor for SimpleHandoffStrategy,  (uint64_t)&protocol conformance descriptor for SimpleHandoffStrategy);
    v57[0] = v21;
    uint64_t v23 = swift_retain();
    UserIdentityCheckFlowStrategy.HandoffConfiguration.init(companionCompatiblityCheck:handoffStrategy:)(v23, v57);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v47, v12, v14);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v46 + 104))( v48,  enum case for ExecuteOnRemoteDeviceSpecification.userCompanion(_:),  v49);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v57, v24);
    uint64_t v25 = type metadata accessor for ExecuteOnRemoteFlow(0LL);
    swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    *(void *)(v0 + 16) = ExecuteOnRemoteFlow.init(inputToExecute:device:outputPublisher:)(v47, v48, v57);
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonFlowGuard>);
    uint64_t v27 = *(void *)(type metadata accessor for CommonFlowGuard(0LL) - 8);
    uint64_t v28 = swift_allocObject( v26,  ((*(unsigned __int8 *)(v27 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))
          + 2LL * *(void *)(v27 + 72),
            *(unsigned __int8 *)(v27 + 80) | 7LL);
    *(_OWORD *)(v28 + 16) = xmmword_31D880;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v18, v45, v51);
    __swift_storeEnumTagSinglePayload(v18, 0LL, 1LL, v51);
    UserIdentityCheckFlowStrategy.init(allowsAnonymousUser:allowsUserInteraction:handoffConfiguration:requireSpeechProfile:)( 0LL,  1LL,  v18,  1LL);
    static CommonFlowGuard.ensuringUserIdentity(using:)(v52);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
    static CommonFlowGuard.ensuringUserHasSupportedCompanion(using:)(v19);
    uint64_t v29 = static CommonGuardFlowUtils.makeGuardFlow(withGuards:)(v28);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 24) = v29;
    uint64_t v30 = type metadata accessor for GuardFlow(0LL);
    uint64_t v31 = Flow.guarded<A>(by:)(v0 + 24, v25, v30, &protocol witness table for ExecuteOnRemoteFlow);
    swift_release(v29);
    swift_release(*(void *)(v0 + 16));
    *(void *)(v0 + 32) = v31;
    swift_retain();
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConditionalFlow<ExecuteOnRemoteFlowResult>);
    lazy protocol witness table accessor for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>();
    static ExecuteResponse.ongoing<A>(next:childCompletion:)( v0 + 32,  partial apply for closure #1 in RedirectToCompanionFlow.execute(),  v56,  v32);
    swift_release(v56);
    swift_release(v19);
    OUTLINED_FUNCTION_9_17(*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8));
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v12, v14);
    swift_release(v31);
  }

  uint64_t v36 = *(void *)(v0 + 224);
  uint64_t v38 = *(void *)(v0 + 192);
  uint64_t v37 = *(void *)(v0 + 200);
  uint64_t v39 = *(void *)(v0 + 168);
  uint64_t v40 = *(void *)(v0 + 144);
  uint64_t v41 = *(void *)(v0 + 120);
  uint64_t v42 = *(void *)(v0 + 96);
  uint64_t v43 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t UnsetRelationshipTemplatesWrapper.__allocating_init()()
{
  return swift_allocObject(v0, 16LL, 7LL);
}

uint64_t closure #1 in RedirectToCompanionFlow.execute()(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = a2;
  uint64_t v3 = type metadata accessor for ExecuteOnRemoteFlowResult(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v53 - v7;
  __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v53 - v9);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v53 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConditionalFlowResult<ExecuteOnRemoteFlowResult>);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for RedirectToCompanionFlow.State(0LL);
  __chkstk_darwin();
  uint64_t v57 = (uint64_t)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v53 - v16;
  outlined init with copy of ConditionalFlowResult<ExecuteOnRemoteFlowResult>(a1, (uint64_t)v14);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (result: ExecuteOnRemoteFlowResult));
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1LL, v18) == 1)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)static Logger.siriPhone);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl( &dword_0,  v21,  v22,  "ExecuteOnRemote guard flows failed, assuming a server redirect or handoff should have happened, doing nothing.",  v23,  2u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    uint64_t v24 = type metadata accessor for Input(0LL);
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 1LL, 2LL, v24);
    outlined destroy of ConditionalFlowResult<ExecuteOnRemoteFlowResult>((uint64_t)v14);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v12, v14, v3);
    uint64_t v25 = *(void (**)(uint64_t *, char *, uint64_t))(v4 + 16);
    v25(v10, v12, v3);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v4 + 88))(v10, v3) == enum case for ExecuteOnRemoteFlowResult.remoteFlowFailure(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v4 + 96))(v10, v3);
      uint64_t v26 = *v10;
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v27 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v27, (uint64_t)static Logger.siriPhone);
      swift_errorRetain(v26);
      uint64_t v28 = swift_errorRetain(v26);
      uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v56 = swift_slowAlloc(32LL, -1LL);
        uint64_t v59 = v26;
        uint64_t v60 = v56;
        *(_DWORD *)uint64_t v31 = 136315138;
        uint64_t v55 = v31 + 4;
        swift_errorRetain(v26);
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v33 = String.init<A>(describing:)(&v59, v32);
        uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v55);
        swift_bridgeObjectRelease();
        swift_errorRelease(v26);
        swift_errorRelease(v26);
        _os_log_impl( &dword_0,  v29,  v30,  "ExecuteOnRemote failed with an error=%s: Possible server redirect. Will redirect this input to server as a fallback.",  v31,  0xCu);
        uint64_t v35 = v56;
        swift_arrayDestroy(v56, 1LL);
        swift_slowDealloc(v35, -1LL, -1LL);
        swift_slowDealloc(v31, -1LL, -1LL);
      }

      else
      {

        swift_errorRelease(v26);
        swift_errorRelease(v26);
      }

      swift_errorRelease(v26);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v3);
      uint64_t v49 = type metadata accessor for Input(0LL);
      __swift_storeEnumTagSinglePayload((uint64_t)v17, 2LL, 2LL, v49);
    }

    else
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v36 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v36, (uint64_t)static Logger.siriPhone);
      uint64_t v37 = ((uint64_t (*)(char *, char *, uint64_t))v25)(v8, v12, v3);
      uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
      os_log_type_t v40 = static os_log_type_t.debug.getter(v38, v39);
      int v41 = v40;
      if (os_log_type_enabled(v38, v40))
      {
        uint64_t v42 = swift_slowAlloc(12LL, -1LL);
        LODWORD(v55) = v41;
        uint64_t v43 = (uint8_t *)v42;
        uint64_t v56 = swift_slowAlloc(32LL, -1LL);
        uint64_t v60 = v56;
        uint64_t v54 = v43;
        *(_DWORD *)uint64_t v43 = 136315138;
        uint64_t v53 = v43 + 4;
        v25((uint64_t *)v6, v8, v3);
        uint64_t v44 = String.init<A>(describing:)(v6, v3);
        uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v53);
        swift_bridgeObjectRelease();
        uint64_t v46 = *(void (**)(char *, uint64_t))(v4 + 8);
        v46(v8, v3);
        uint64_t v47 = v54;
        _os_log_impl(&dword_0, v38, (os_log_type_t)v55, "ExecuteOnRemote flow completed with: %s", v54, 0xCu);
        uint64_t v48 = v56;
        swift_arrayDestroy(v56, 1LL);
        swift_slowDealloc(v48, -1LL, -1LL);
        swift_slowDealloc(v47, -1LL, -1LL);
      }

      else
      {

        uint64_t v46 = *(void (**)(char *, uint64_t))(v4 + 8);
        v46(v8, v3);
      }

      v46(v12, v3);
      uint64_t v50 = type metadata accessor for Input(0LL);
      __swift_storeEnumTagSinglePayload((uint64_t)v17, 1LL, 2LL, v50);
      v46((char *)v10, v3);
    }
  }

  uint64_t v51 = v57;
  outlined init with copy of RedirectToCompanionFlow.State((uint64_t)v17, v57);
  (*(void (**)(uint64_t))(*(void *)v58 + 104LL))(v51);
  return outlined destroy of RedirectToCompanionFlow.State((uint64_t)v17);
}

void RedirectToCompanionFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RedirectToCompanionFlow(0LL);
  uint64_t v5 = lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy( &lazy protocol witness table cache variable for type RedirectToCompanionFlow and conformance RedirectToCompanionFlow,  255LL,  type metadata accessor for RedirectToCompanionFlow,  (uint64_t)&protocol conformance descriptor for RedirectToCompanionFlow);
  Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
  OUTLINED_FUNCTION_16_7();
}

uint64_t RedirectToCompanionFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1((void *)(v0
                                                      + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23RedirectToCompanionFlow_sharedGlobals));
  return v0;
}

uint64_t RedirectToCompanionFlow.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1((void *)(v0
                                                      + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23RedirectToCompanionFlow_sharedGlobals));
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

void (*protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance RedirectToCompanionFlow( void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SiriEnvironmentLocating<>.siriEnvironment.modify();
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t protocol witness for Flow.on(input:) in conformance RedirectToCompanionFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128LL))() & 1;
}

uint64_t protocol witness for Flow.execute() in conformance RedirectToCompanionFlow(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 136LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance ContactNeedsValueGuardFlow<A>;
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance RedirectToCompanionFlow( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for RedirectToCompanionFlow(0LL);
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t UnsetRelationshipTemplatesWrapper.deinit()
{
  return v0;
}

uint64_t protocol witness for HandoffSessionToCompanionFlowStrategyAsync.makeHandoffResponse() in conformance SimpleHandoffStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to HandoffSessionToCompanionFlowStrategyAsync.makeHandoffResponse()[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.execute() in conformance ContactNeedsValueGuardFlow<A>;
  return HandoffSessionToCompanionFlowStrategyAsync.makeHandoffResponse()(a1, a2, a3);
}

uint64_t outlined destroy of RedirectToCompanionFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RedirectToCompanionFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for SimpleHandoffStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin21SimpleHandoffStrategy);
}

uint64_t partial apply for closure #1 in RedirectToCompanionFlow.execute()(uint64_t a1)
{
  return closure #1 in RedirectToCompanionFlow.execute()(a1, v1);
}

unint64_t lazy protocol witness table accessor for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>;
  if (!lazy protocol witness table cache variable for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ConditionalFlow<ExecuteOnRemoteFlowResult>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ConditionalFlow<A>, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>);
  }

  return result;
}

uint64_t type metadata accessor for RedirectToCompanionFlow(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for RedirectToCompanionFlow,  (uint64_t)&nominal type descriptor for RedirectToCompanionFlow);
}

uint64_t lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy( unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t base witness table accessor for Flow in RedirectToCompanionFlow()
{
  return lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy( &lazy protocol witness table cache variable for type RedirectToCompanionFlow and conformance RedirectToCompanionFlow,  255LL,  type metadata accessor for RedirectToCompanionFlow,  (uint64_t)&protocol conformance descriptor for RedirectToCompanionFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in RedirectToCompanionFlow()
{
  return lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy( &lazy protocol witness table cache variable for type RedirectToCompanionFlow and conformance RedirectToCompanionFlow,  255LL,  type metadata accessor for RedirectToCompanionFlow,  (uint64_t)&protocol conformance descriptor for RedirectToCompanionFlow);
}

uint64_t sub_85940(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 96LL))();
}

uint64_t ObjC metadata update function for RedirectToCompanionFlow()
{
  return type metadata accessor for RedirectToCompanionFlow(0LL);
}

uint64_t type metadata completion function for RedirectToCompanionFlow(uint64_t a1)
{
  uint64_t result = type metadata accessor for RedirectToCompanionFlow.State(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "(";
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for RedirectToCompanionFlow.State( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for Input(0LL);
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 2LL, v7))
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 2LL, v7);
    }
  }

  return a1;
}

uint64_t destroy for RedirectToCompanionFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input(0LL);
  uint64_t result = __swift_getEnumTagSinglePayload(a1, 2LL, v2);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  }
  return result;
}

void *initializeWithCopy for RedirectToCompanionFlow.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 2LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 2LL, v6);
  }

  return a1;
}

void *assignWithCopy for RedirectToCompanionFlow.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 2LL, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 2LL, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 2LL, v6);
  return a1;
}

void *initializeWithTake for RedirectToCompanionFlow.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 2LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 2LL, v6);
  }

  return a1;
}

void *assignWithTake for RedirectToCompanionFlow.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 2LL, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 2LL, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 2LL, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for RedirectToCompanionFlow.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_85DF4);
}

uint64_t sub_85DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = OUTLINED_FUNCTION_3_4();
  unsigned int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(a1, a2, v4);
  if (EnumTagSinglePayload >= 3) {
    return EnumTagSinglePayload - 2;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for RedirectToCompanionFlow.State( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_85E40);
}

uint64_t sub_85E40(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = OUTLINED_FUNCTION_3_4();
  return __swift_storeEnumTagSinglePayload(a1, v5, a3, v6);
}

uint64_t getEnumTag for RedirectToCompanionFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input(0LL);
  return __swift_getEnumTagSinglePayload(a1, 2LL, v2);
}

uint64_t destructiveInjectEnumTag for RedirectToCompanionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Input(0LL);
  return __swift_storeEnumTagSinglePayload(a1, a2, 2LL, v4);
}

uint64_t type metadata completion function for RedirectToCompanionFlow.State(uint64_t a1)
{
  uint64_t result = type metadata accessor for Input(319LL);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256LL, *(void *)(result - 8) + 64LL, 2LL);
    return 0LL;
  }

  return result;
}

uint64_t outlined init with copy of ConditionalFlowResult<ExecuteOnRemoteFlowResult>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConditionalFlowResult<ExecuteOnRemoteFlowResult>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ConditionalFlowResult<ExecuteOnRemoteFlowResult>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConditionalFlowResult<ExecuteOnRemoteFlowResult>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_4_17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 80, v5, v4, a4);
}

uint64_t OUTLINED_FUNCTION_8_15(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000083LL, a2, a3);
}

uint64_t OUTLINED_FUNCTION_9_17@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t PhoneCallSlotNames.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_86020 + 4 * byte_320FA0[a1]))( 7368801LL,  0xE300000000000000LL);
}

uint64_t sub_86020()
{
  return 0x756F526F69647561LL;
}

uint64_t sub_8603C()
{
  return 0x74616E6974736564LL;
}

unint64_t sub_86060()
{
  return 0xD000000000000015LL;
}

uint64_t sub_86210()
{
  return 0x7069636974726170LL;
}

void one-time initialization function for startAudioCallParameters(uint64_t a1)
{
}

void *PhoneCallSlotNames.startAudioCallParameters.unsafeMutableAddressor()
{
  if (one-time initialization token for startAudioCallParameters != -1) {
    swift_once( &one-time initialization token for startAudioCallParameters,  one-time initialization function for startAudioCallParameters);
  }
  return &static PhoneCallSlotNames.startAudioCallParameters;
}

uint64_t static PhoneCallSlotNames.startAudioCallParameters.getter()
{
  return static PhoneCallSlotNames.startAudioCallParameters.getter( &one-time initialization token for startAudioCallParameters,  &static PhoneCallSlotNames.startAudioCallParameters);
}

void one-time initialization function for startCallParameters(uint64_t a1)
{
}

void one-time initialization function for startAudioCallParameters(uint64_t a1, Class *a2, void *a3)
{
  id v4 = [objc_allocWithZone(*a2) init];
  uint64_t v5 = INIntent.parameterMetadata.getter();

  *a3 = v5;
}

void *PhoneCallSlotNames.startCallParameters.unsafeMutableAddressor()
{
  if (one-time initialization token for startCallParameters != -1) {
    swift_once( &one-time initialization token for startCallParameters,  one-time initialization function for startCallParameters);
  }
  return &static PhoneCallSlotNames.startCallParameters;
}

uint64_t static PhoneCallSlotNames.startCallParameters.getter()
{
  return static PhoneCallSlotNames.startAudioCallParameters.getter( &one-time initialization token for startCallParameters,  &static PhoneCallSlotNames.startCallParameters);
}

uint64_t static PhoneCallSlotNames.startAudioCallParameters.getter(void *a1, void *a2)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  return swift_bridgeObjectRetain(*a2);
}

uint64_t PhoneCallSlotNames.parameterIdentifier.getter(unsigned __int8 a1)
{
  uint64_t v1 = PhoneCallSlotNames.rawValue.getter(a1);
  return ParameterIdentifier.init(_:)(v1);
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallSlotNames( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type PhoneCallSlotNames and conformance PhoneCallSlotNames()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallSlotNames and conformance PhoneCallSlotNames;
  if (!lazy protocol witness table cache variable for type PhoneCallSlotNames and conformance PhoneCallSlotNames)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallSlotNames,  &type metadata for PhoneCallSlotNames);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallSlotNames and conformance PhoneCallSlotNames);
  }

  return result;
}

void protocol witness for Hashable.hashValue.getter in conformance PhoneCallSlotNames()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallSlotNames(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallSlotNames(uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::PhoneCallSlotNames_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallSlotNames@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallSlotNames_optional *a2@<X8>)
{
  result.int value = PhoneCallSlotNames.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallSlotNames@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = PhoneCallSlotNames.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for PhoneCallSlotNames(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xED)
  {
    if (a2 + 19 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 19) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 20;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for PhoneCallSlotNames(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEC) {
    return ((uint64_t (*)(void))((char *)&loc_86544 + 4 * byte_320FB9[v4]))();
  }
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_86578 + 4 * byte_320FB4[v4]))();
}

uint64_t sub_86578(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_86580(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x86588LL);
  }
  return result;
}

uint64_t sub_86594(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x8659CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 19;
  return result;
}

uint64_t sub_865A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_865A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PhoneCallSlotNames()
{
  return &type metadata for PhoneCallSlotNames;
}

uint64_t SingleIntentCacheProvider.deinit()
{
  return v0;
}

uint64_t SingleIntentCacheProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

double SingleIntentCacheProvider.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, 32LL, 7LL);
  double result = NAN;
  *(_OWORD *)(v1 + 16) = xmmword_31D890;
  return result;
}

double SingleIntentCacheProvider.init()()
{
  double result = NAN;
  *(_OWORD *)(v0 + 16) = xmmword_31D890;
  return result;
}

void PhoneCallControlNLTransformer.__allocating_init(cacheProvider:)(void *a1)
{
}

void PhoneCallControlNLTransformer.init(cacheProvider:)(void *a1)
{
}

uint64_t PhoneCallControlNLTransformer.deinit()
{
  return v0;
}

uint64_t PhoneCallControlNLTransformer.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

void *specialized PhoneCallControlNLTransformer.init(cacheProvider:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  a2[5] = a3;
  a2[6] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2 + 2);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32LL))(boxed_opaque_existential_1, a1, a3);
  a2[7] = type metadata accessor for PhoneCallControlNLTransformer();
  a2[8] = &outlined read-only object #0 of specialized PhoneCallControlNLTransformer.init(cacheProvider:);
  a2[9] = 0LL;
  a2[10] = 0LL;
  return a2;
}

uint64_t outlined destroy of Siri_Nlu_External_UserDialogAct?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for SingleIntentCacheProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin25SingleIntentCacheProvider);
}

uint64_t type metadata accessor for PhoneCallControlNLTransformer()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin29PhoneCallControlNLTransformer);
}

uint64_t OUTLINED_FUNCTION_3_24()
{
  return swift_errorRelease(v0);
}

uint64_t OUTLINED_FUNCTION_4_18()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_8_16(uint64_t a1)
{
  *(void *)(v2 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 112, v2 - 104, *(void *)(v2 - 224), v1 + 12);
}

uint64_t OUTLINED_FUNCTION_9_18(uint64_t a1)
{
  *(void *)(v4 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 112, v3, v1, v2 + 32);
}

uint64_t OUTLINED_FUNCTION_11_18(uint64_t a1)
{
  return swift_retain_n(a1, 2LL);
}

uint64_t OUTLINED_FUNCTION_12_17(uint64_t a1)
{
  *(void *)(v4 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 112, v3, v1, v2 + 22);
}

uint64_t OUTLINED_FUNCTION_17_17()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 232) + 8LL))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_18_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v6 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 112, v5, v4, a4);
}

uint64_t OUTLINED_FUNCTION_19_10(uint64_t a1)
{
  *(void *)(v2 - 112) = 0LL;
  *(void *)(v2 - 104) = 0xE000000000000000LL;
  *(void *)(v2 - 96) = a1;
  return swift_bridgeObjectRetain(v1);
}

void *OUTLINED_FUNCTION_20_8()
{
  return specialized PhoneCallControlNLTransformer.init(cacheProvider:)(v3, v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_24_7()
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( *(void *)(v0 - 112),  *(void *)(v0 - 104),  (uint64_t *)(v0 - 96));
}

uint64_t OUTLINED_FUNCTION_26_7()
{
  return swift_errorRetain(v0);
}

uint64_t OUTLINED_FUNCTION_29_9(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_30_8()
{
  *(void *)(v1 - 112) = 0LL;
  *(void *)(v1 - 104) = 0xE000000000000000LL;
  return swift_bridgeObjectRetain(v0);
}

void OUTLINED_FUNCTION_31_8(void *a1, os_log_s *a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_34_10(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 96));
}

void OUTLINED_FUNCTION_38_9(float a1)
{
  *uint64_t v1 = a1;
  *(void *)(v4 - 224) = v1 + 1;
  *(void *)(v4 - 192) = v3;
  *(void *)(v4 - 184) = v2;
}

uint64_t key path setter for PhoneCallProvider.Builder.preferredCallProvider : PhoneCallProvider.Builder( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of SpeakableString?(a1, (uint64_t)v5);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 112LL))(v5);
}

void PhoneCallProvider.Builder.preferredCallProvider.getter(uint64_t a1@<X8>)
{
}

uint64_t outlined init with copy of SpeakableString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void PhoneCallProvider.Builder.preferredCallProvider.setter(uint64_t a1)
{
}

uint64_t outlined assign with take of SpeakableString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

void PhoneCallProvider.Builder.preferredCallProvider.modify(uint64_t a1)
{
}

uint64_t key path setter for PhoneCallProvider.Builder.providerName : PhoneCallProvider.Builder( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of SpeakableString?(a1, (uint64_t)v5);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 136LL))(v5);
}

void PhoneCallProvider.Builder.providerName.getter(uint64_t a1@<X8>)
{
}

void PhoneCallProvider.Builder.providerName.setter(uint64_t a1)
{
}

void PhoneCallProvider.Builder.providerName.modify(uint64_t a1)
{
}

uint64_t key path setter for PhoneCallProvider.Builder.providerBundleId : PhoneCallProvider.Builder( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of SpeakableString?(a1, (uint64_t)v5);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 160LL))(v5);
}

void PhoneCallProvider.Builder.providerBundleId.getter(uint64_t a1@<X8>)
{
}

void PhoneCallProvider.Builder.preferredCallProvider.getter(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *a1;
  OUTLINED_FUNCTION_25_0(v4, (uint64_t)v5, 0LL);
  outlined init with copy of SpeakableString?(v4, a2);
  OUTLINED_FUNCTION_60_2();
}

void PhoneCallProvider.Builder.providerBundleId.setter(uint64_t a1)
{
}

void PhoneCallProvider.Builder.preferredCallProvider.setter(uint64_t a1, void *a2)
{
  uint64_t v4 = v2 + *a2;
  OUTLINED_FUNCTION_5_9(v4, (uint64_t)v5);
  outlined assign with take of SpeakableString?(a1, v4);
  swift_endAccess(v5);
  OUTLINED_FUNCTION_60_2();
}

void PhoneCallProvider.Builder.providerBundleId.modify(uint64_t a1)
{
}

void PhoneCallProvider.Builder.__allocating_init()()
{
}

void PhoneCallProvider.Builder.init()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin17PhoneCallProvider7Builder_preferredCallProvider;
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_15_12(v1);
  OUTLINED_FUNCTION_15_12(v0 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin17PhoneCallProvider7Builder_providerName);
  OUTLINED_FUNCTION_15_12(v0 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin17PhoneCallProvider7Builder_providerBundleId);
  OUTLINED_FUNCTION_6();
}

void PhoneCallProvider.Builder.__allocating_init(preferredCallProvider:)()
{
}

void PhoneCallProvider.Builder.init(preferredCallProvider:)(uint64_t a1)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin17PhoneCallProvider7Builder_preferredCallProvider;
  uint64_t v5 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_14(v4, 1LL);
  OUTLINED_FUNCTION_14(v2 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin17PhoneCallProvider7Builder_providerName, 1LL);
  OUTLINED_FUNCTION_14( v2 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin17PhoneCallProvider7Builder_providerBundleId,  1LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(v1, a1, v5);
  OUTLINED_FUNCTION_14(v1, 0LL);
  OUTLINED_FUNCTION_5_9(v4, (uint64_t)v6);
  outlined assign with take of SpeakableString?(v1, v4);
  swift_endAccess(v6);
  OUTLINED_FUNCTION_16();
}

void PhoneCallProvider.Builder.withPreferredCallProvider(_:)()
{
}

void PhoneCallProvider.Builder.withPreferredCallProvider(print:speak:)()
{
  uint64_t v0 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_13_4(v0);
  OUTLINED_FUNCTION_33_8(*(uint64_t (**)(uint64_t))(v1 + 112));
  UsoEntity_common_Person.usoPerson.getter();
  OUTLINED_FUNCTION_16();
}

void PhoneCallProvider.Builder.withProviderName(_:)()
{
}

void PhoneCallProvider.Builder.withProviderName(print:speak:)()
{
  uint64_t v0 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_13_4(v0);
  OUTLINED_FUNCTION_33_8(*(uint64_t (**)(uint64_t))(v1 + 136));
  UsoEntity_common_Person.usoPerson.getter();
  OUTLINED_FUNCTION_16();
}

void PhoneCallProvider.Builder.withProviderBundleId(_:)()
{
}

void PhoneCallProvider.Builder.withProviderBundleId(print:speak:)()
{
  uint64_t v0 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_13_4(v0);
  OUTLINED_FUNCTION_33_8(*(uint64_t (**)(uint64_t))(v1 + 160));
  UsoEntity_common_Person.usoPerson.getter();
  OUTLINED_FUNCTION_16();
}

void PhoneCallProvider.Builder.build()()
{
  uint64_t v0 = type metadata accessor for PhoneCallProvider(0LL);
  OUTLINED_FUNCTION_15_2(v0);
  uint64_t v1 = UsoEntity_common_Person.usoPerson.getter();
  PhoneCallProvider.init(builder:)(v1);
  OUTLINED_FUNCTION_2();
}

void PhoneCallProvider.__allocating_init(builder:)()
{
}

uint64_t type metadata accessor for PhoneCallProvider(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for PhoneCallProvider,  (uint64_t)&nominal type descriptor for PhoneCallProvider);
}

uint64_t PhoneCallProvider.Builder.deinit()
{
  return v0;
}

uint64_t PhoneCallProvider.Builder.__deallocating_deinit()
{
  return PhoneCallProvider.Builder.__deallocating_deinit((void (*)(void))PhoneCallProvider.Builder.deinit);
}

unint64_t static PhoneCallProvider.catTypeName.getter()
{
  return 0xD000000000000012LL;
}

uint64_t key path setter for PhoneCallProvider.mockGlobals : PhoneCallProvider(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 136LL);
  id v4 = *a1;
  return v3(v2);
}

void *PhoneCallProvider.mockGlobals.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

void PhoneCallProvider.mockGlobals.setter(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = a1;

  OUTLINED_FUNCTION_60_2();
}

void PhoneCallProvider.mockGlobals.modify(uint64_t a1)
{
}

uint64_t PhoneCallProvider.preferredCallProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return OUTLINED_FUNCTION_10_17( a1,  OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_preferredCallProvider);
}

uint64_t PhoneCallProvider.providerName.getter@<X0>(uint64_t a1@<X8>)
{
  return OUTLINED_FUNCTION_10_17(a1, OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerName);
}

uint64_t PhoneCallProvider.providerBundleId.getter@<X0>(uint64_t a1@<X8>)
{
  return OUTLINED_FUNCTION_10_17(a1, OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerBundleId);
}

uint64_t *PhoneCallProvider.init(builder:)(uint64_t a1)
{
  id v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_7_6();
  v1[2] = 0LL;
  (*(void (**)(void))(*(void *)a1 + 104LL))();
  uint64_t v4 = OUTLINED_FUNCTION_19_11(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_preferredCallProvider);
  (*(void (**)(uint64_t))(*(void *)a1 + 128LL))(v4);
  uint64_t v5 = OUTLINED_FUNCTION_19_11(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerName);
  (*(void (**)(uint64_t))(*(void *)a1 + 152LL))(v5);
  uint64_t v6 = OUTLINED_FUNCTION_19_11(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerBundleId);
  if (((*(uint64_t (**)(uint64_t))(*v1 + 160))(v6) & 1) == 0)
  {
    uint64_t v7 = (void *)static Log.siriDialogEngine.getter();
    static os_log_type_t.error.getter();
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
    *(_OWORD *)(v9 + 16) = xmmword_31D870;
    uint64_t v16 = *v2;
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallProvider.Type);
    uint64_t v11 = String.init<A>(describing:)(&v16, v10);
    uint64_t v13 = v12;
    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v9 + 32) = v11;
    *(void *)(v9 + 40) = v13;
    os_log(_:dso:log:type:_:)("Building an instance of %s without all required inputs", v15);

    swift_bridgeObjectRelease();
  }

  swift_release(a1);
  return v2;
}

uint64_t outlined destroy of SpeakableString?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t outlined init with take of SpeakableString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void PhoneCallProvider.__allocating_init(preferredCallProvider:providerName:providerBundleId:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for PhoneCallProvider.Builder(0LL);
  uint64_t v9 = OUTLINED_FUNCTION_15_2(v8);
  PhoneCallProvider.Builder.init()();
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 192LL))(a1);
  OUTLINED_FUNCTION_38_1();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 208LL))(a2);
  swift_release(v10);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 224LL))(a3);
  OUTLINED_FUNCTION_38_1();
  (*(void (**)(uint64_t))(v4 + 152))(v12);
  outlined destroy of SpeakableString?(a3);
  outlined destroy of SpeakableString?(a2);
  outlined destroy of SpeakableString?(a1);
  OUTLINED_FUNCTION_16();
}

uint64_t type metadata accessor for PhoneCallProvider.Builder(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for PhoneCallProvider.Builder,  (uint64_t)&nominal type descriptor for PhoneCallProvider.Builder);
}

Swift::Bool __swiftcall PhoneCallProvider.allRequiredInputsHaveValues()()
{
  uint64_t v2 = OUTLINED_FUNCTION_26_0();
  Swift::Bool v3 = __swift_getEnumTagSinglePayload(v0, 1LL, v2) != 1;
  outlined destroy of SpeakableString?(v0);
  return v3;
}

uint64_t PhoneCallProvider.getProperty(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v29 - v9;
  __chkstk_darwin();
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v13 = "preferredCallProvider";
  if (a1 == 0xD000000000000015LL && (OUTLINED_FUNCTION_32_8(), v18)
    || (OUTLINED_FUNCTION_1_3(0xD000000000000015LL, (unint64_t)(v13 - 32) | 0x8000000000000000LL) & 1) != 0)
  {
    outlined init with copy of SpeakableString?( v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_preferredCallProvider,  (uint64_t)v12);
    uint64_t v14 = OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_27_9((uint64_t)v12);
    if (!v18)
    {
      uint64_t v16 = OUTLINED_FUNCTION_23_10();
      return (*(uint64_t (**)(void *, char *, uint64_t))(*(void *)(v14 - 8) + 32LL))(v16, v12, v14);
    }

    uint64_t v15 = (uint64_t)v12;
  }

  else
  {
    BOOL v18 = a1 == 0x72656469766F7270LL && a2 == 0xEC000000656D614ELL;
    if (v18 || (OUTLINED_FUNCTION_1_3(0x72656469766F7270LL, 0xEC000000656D614ELL) & 1) != 0)
    {
      outlined init with copy of SpeakableString?( v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerName,  (uint64_t)v10);
      uint64_t v19 = OUTLINED_FUNCTION_26_0();
      OUTLINED_FUNCTION_27_9((uint64_t)v10);
      if (!v18)
      {
        uint64_t v20 = OUTLINED_FUNCTION_23_10();
        return (*(uint64_t (**)(void *, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))(v20, v10, v19);
      }

      uint64_t v15 = (uint64_t)v10;
    }

    else
    {
      uint64_t v21 = "providerBundleId";
      if (a1 != 0xD000000000000010LL || (OUTLINED_FUNCTION_32_8(), !v18))
      {
        if ((OUTLINED_FUNCTION_1_3(0xD000000000000010LL, (unint64_t)(v21 - 32) | 0x8000000000000000LL) & 1) == 0)
        {
          uint64_t v24 = 0xD000000000000011LL;
          uint64_t v25 = "isFirstPartyPhone";
          if (a1 == 0xD000000000000011LL && (OUTLINED_FUNCTION_32_8(), v18)
            || (OUTLINED_FUNCTION_1_3(v24, (unint64_t)(v25 - 32) | 0x8000000000000000LL) & 1) != 0)
          {
            UsoEntity_common_Person.usoPerson.getter();
            char v26 = specialized PhoneCallProviderProperties.isFirstPartyPhone.getter();
          }

          else
          {
            if (a1 != 0x6954656361467369LL || a2 != 0xEA0000000000656DLL)
            {
              uint64_t result = OUTLINED_FUNCTION_1_3(0x6954656361467369LL, 0xEA0000000000656DLL);
              if ((result & 1) == 0) {
                goto LABEL_8;
              }
            }

            UsoEntity_common_Person.usoPerson.getter();
            char v26 = specialized PhoneCallProviderProperties.isFaceTime.getter();
          }

          char v28 = v26;
          uint64_t result = OUTLINED_FUNCTION_38_1();
          *(void *)(a3 + 24) = &type metadata for Bool;
          *(_BYTE *)a3 = v28 & 1;
          return result;
        }
      }

      outlined init with copy of SpeakableString?( v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerBundleId,  (uint64_t)v8);
      uint64_t v22 = OUTLINED_FUNCTION_26_0();
      OUTLINED_FUNCTION_27_9((uint64_t)v8);
      if (!v18)
      {
        uint64_t v23 = OUTLINED_FUNCTION_23_10();
        return (*(uint64_t (**)(void *, char *, uint64_t))(*(void *)(v22 - 8) + 32LL))(v23, v8, v22);
      }

      uint64_t v15 = (uint64_t)v8;
    }
  }

  uint64_t result = outlined destroy of SpeakableString?(v15);
LABEL_8:
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return result;
}

uint64_t specialized PhoneCallProviderProperties.isFirstPartyPhone.getter()
{
  uint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of SpeakableString?( v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_preferredCallProvider,  (uint64_t)v2);
  uint64_t v3 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)v2, 1LL, v3) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v2);
    uint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v4 = SpeakableString.print.getter();
    uint64_t v5 = v6;
    (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  }

  uint64_t v7 = INPreferredCallProviderGetBackingType(1LL);
  switch((_DWORD)v7)
  {
    case 4:
      uint64_t v8 = @"THIRD_PARTY_PROVIDER";
      goto LABEL_10;
    case 3:
      uint64_t v8 = @"FACETIME_PROVIDER";
      goto LABEL_10;
    case 2:
      uint64_t v8 = @"TELEPHONY_PROVIDER";
LABEL_10:
      uint64_t v9 = v8;
      goto LABEL_12;
  }

  uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  v7));
LABEL_12:
  uint64_t v10 = v8;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v13 = v12;

  if (v5)
  {
    if (v4 == v11 && v5 == v13) {
      char v15 = 1;
    }
    else {
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v11, v13, 0LL);
    }
    swift_bridgeObjectRelease();
  }

  else
  {
    char v15 = 0;
  }

  swift_bridgeObjectRelease();
  return v15 & 1;
}

uint64_t specialized PhoneCallProviderProperties.isFaceTime.getter()
{
  uint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of SpeakableString?( v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_preferredCallProvider,  (uint64_t)v2);
  uint64_t v3 = OUTLINED_FUNCTION_26_0();
  if (__swift_getEnumTagSinglePayload((uint64_t)v2, 1LL, v3) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v2);
    uint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v4 = SpeakableString.print.getter();
    uint64_t v5 = v6;
    (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  }

  uint64_t v7 = INPreferredCallProviderGetBackingType(2LL);
  switch((_DWORD)v7)
  {
    case 4:
      uint64_t v8 = @"THIRD_PARTY_PROVIDER";
      goto LABEL_10;
    case 3:
      uint64_t v8 = @"FACETIME_PROVIDER";
      goto LABEL_10;
    case 2:
      uint64_t v8 = @"TELEPHONY_PROVIDER";
LABEL_10:
      uint64_t v9 = v8;
      goto LABEL_12;
  }

  uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  v7));
LABEL_12:
  uint64_t v10 = v8;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v13 = v12;

  if (v5)
  {
    if (v4 == v11 && v5 == v13) {
      char v15 = 1;
    }
    else {
      char v15 = OUTLINED_FUNCTION_1_3(v4, v5);
    }
    swift_bridgeObjectRelease();
  }

  else
  {
    char v15 = 0;
  }

  swift_bridgeObjectRelease();
  return v15 & 1;
}

PhoneCallFlowDelegatePlugin::PhoneCallProvider::CodingKeys_optional __swiftcall PhoneCallProvider.CodingKeys.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallProvider.CodingKeys.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallProvider::CodingKeys_optional)3;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallProvider::CodingKeys_optional)v3;
  }
}

void PhoneCallProvider.CodingKeys.rawValue.getter(char a1)
{
  if (a1) {
    OUTLINED_FUNCTION_35_5(0xD000000000000010LL);
  }
  else {
    OUTLINED_FUNCTION_38_2();
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallProvider.CodingKeys( char *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance PhoneCallProvider.CodingKeys()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallProvider.CodingKeys(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallProvider.CodingKeys( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::PhoneCallProvider::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallProvider.CodingKeys@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallProvider::CodingKeys_optional *a2@<X8>)
{
  result.int value = PhoneCallProvider.CodingKeys.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallProvider.CodingKeys( void *a1@<X8>)
{
  *a1 = v3;
  a1[1] = v4;
  OUTLINED_FUNCTION_2();
}

void protocol witness for CodingKey.stringValue.getter in conformance PhoneCallProvider.CodingKeys()
{
}

PhoneCallFlowDelegatePlugin::PhoneCallProvider::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance PhoneCallProvider.CodingKeys@<W0>( uint64_t a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallProvider::CodingKeys_optional *a2@<X8>)
{
  result.int value = PhoneCallProvider.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->int value = result.value;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PhoneCallProvider.CodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneCallProvider.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneCallProvider.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PhoneCallProvider.deinit()
{
  OUTLINED_FUNCTION_17_7(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_preferredCallProvider);
  OUTLINED_FUNCTION_17_7(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerName);
  OUTLINED_FUNCTION_17_7(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerBundleId);
  return v0;
}

uint64_t PhoneCallProvider.__deallocating_deinit()
{
  return PhoneCallProvider.Builder.__deallocating_deinit((void (*)(void))PhoneCallProvider.deinit);
}

uint64_t PhoneCallProvider.Builder.__deallocating_deinit(void (*a1)(void))
{
  return swift_deallocClassInstance( v1,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
}

uint64_t PhoneCallProvider.encode(to:)(void *a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneCallProvider.CodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_7_6();
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  unint64_t v10 = lazy protocol witness table accessor for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for PhoneCallProvider.CodingKeys,  &type metadata for PhoneCallProvider.CodingKeys,  v10,  v8,  v9);
  uint64_t v11 = v4 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_preferredCallProvider;
  char v15 = 0;
  type metadata accessor for SpeakableString(0LL);
  lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
  OUTLINED_FUNCTION_7_20(v11, (uint64_t)&v15);
  if (!v2)
  {
    char v14 = 1;
    OUTLINED_FUNCTION_7_20( v4 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerName,  (uint64_t)&v14);
    char v13 = 2;
    OUTLINED_FUNCTION_7_20( v4 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerBundleId,  (uint64_t)&v13);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
}

unint64_t lazy protocol witness table accessor for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallProvider.CodingKeys,  &type metadata for PhoneCallProvider.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallProvider.CodingKeys,  &type metadata for PhoneCallProvider.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallProvider.CodingKeys,  &type metadata for PhoneCallProvider.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallProvider.CodingKeys,  &type metadata for PhoneCallProvider.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys);
  }

  return result;
}

uint64_t PhoneCallProvider.__allocating_init(from:)(void *a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  PhoneCallProvider.init(from:)(a1);
  return v3;
}

uint64_t PhoneCallProvider.init(from:)(void *a1)
{
  uint64_t v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  __chkstk_darwin();
  v30[2] = (char *)v30 - v6;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneCallProvider.CodingKeys>);
  uint64_t v7 = *(void *)(v31 - 8);
  __chkstk_darwin();
  uint64_t v32 = v1;
  uint64_t v33 = a1;
  *(void *)(v1 + 16) = 0LL;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  unint64_t v10 = lazy protocol witness table accessor for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for PhoneCallProvider.CodingKeys,  &type metadata for PhoneCallProvider.CodingKeys,  v10,  v8,  v9);
  if (v2)
  {
    uint64_t v20 = v32;
    uint64_t v17 = v33;

    uint64_t v18 = type metadata accessor for PhoneCallProvider(0LL);
    swift_deallocPartialClassInstance( v20,  v18,  *(unsigned int *)(*(void *)v20 + 48LL),  *(unsigned __int16 *)(*(void *)v20 + 52LL));
    uint64_t v29 = v17;
  }

  else
  {
    v30[0] = v5;
    v30[1] = v7;
    type metadata accessor for SpeakableString(0LL);
    char v36 = 0;
    lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
    uint64_t v12 = v11;
    uint64_t v13 = OUTLINED_FUNCTION_26_8();
    OUTLINED_FUNCTION_28_7(v13, v14, v15, v16);
    uint64_t v20 = v32;
    OUTLINED_FUNCTION_19_11(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_preferredCallProvider);
    char v35 = 1;
    uint64_t v21 = OUTLINED_FUNCTION_26_8();
    OUTLINED_FUNCTION_28_7(v21, v22, v23, v24);
    OUTLINED_FUNCTION_19_11(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerName);
    char v34 = 2;
    uint64_t v25 = OUTLINED_FUNCTION_26_8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v25, v26, v27, v28, v12);
    OUTLINED_FUNCTION_4_19();
    OUTLINED_FUNCTION_19_11(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerBundleId);
    uint64_t v29 = v33;
  }

  __swift_destroy_boxed_opaque_existential_1(v29);
  return v20;
}

void base witness table accessor for Decodable in PhoneCallProvider()
{
}

void base witness table accessor for Encodable in PhoneCallProvider()
{
}

uint64_t protocol witness for static CATType.catTypeName.getter in conformance PhoneCallProvider()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t protocol witness for static CATType.isDialogType.getter in conformance PhoneCallProvider()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t protocol witness for CATType.mockGlobals.getter in conformance PhoneCallProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128LL))();
}

uint64_t protocol witness for CATType.mockGlobals.setter in conformance PhoneCallProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136LL))();
}

void (*protocol witness for CATType.mockGlobals.modify in conformance PhoneCallProvider( void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 144LL))();
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t protocol witness for CATType.getProperty(_:) in conformance PhoneCallProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168LL))();
}

uint64_t protocol witness for PhoneCallProviderProperties.preferredCallProvider.getter in conformance PhoneCallProvider@<X0>( uint64_t a1@<X8>)
{
  return outlined init with copy of SpeakableString?( *v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_preferredCallProvider,  a1);
}

uint64_t protocol witness for PhoneCallProviderProperties.providerName.getter in conformance PhoneCallProvider@<X0>( uint64_t a1@<X8>)
{
  return outlined init with copy of SpeakableString?( *v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerName,  a1);
}

uint64_t protocol witness for PhoneCallProviderProperties.providerBundleId.getter in conformance PhoneCallProvider@<X0>( uint64_t a1@<X8>)
{
  return outlined init with copy of SpeakableString?( *v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerBundleId,  a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PhoneCallProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 184))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PhoneCallProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176LL))();
}

void sub_88510(uint64_t a1)
{
}

void sub_88538(uint64_t a1)
{
}

void sub_88560(uint64_t a1)
{
}

void sub_88588(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = (*(uint64_t (**)(void))(**(void **)a1 + 128LL))();
  OUTLINED_FUNCTION_2();
}

uint64_t ObjC metadata update function for PhoneCallProvider()
{
  return type metadata accessor for PhoneCallProvider(0LL);
}

void type metadata completion function for PhoneCallProvider(uint64_t a1)
{
  uint64_t v4 = "\b";
  type metadata accessor for SpeakableString?(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(v2 - 8) + 64LL;
    uint64_t v6 = v5;
    uint64_t v7 = v5;
    swift_updateClassMetadata2(a1, 256LL, 4LL, &v4, a1 + 80);
  }

void type metadata accessor for SpeakableString?(uint64_t a1)
{
  if (!lazy cache variable for type metadata for SpeakableString?)
  {
    uint64_t v2 = type metadata accessor for SpeakableString(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for SpeakableString?);
    }
  }

uint64_t ObjC metadata update function for PhoneCallProvider.Builder()
{
  return type metadata accessor for PhoneCallProvider.Builder(0LL);
}

void type metadata completion function for PhoneCallProvider.Builder(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    void v4[2] = v4[0];
    swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
  }

uint64_t storeEnumTagSinglePayload for PhoneCallProvider.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = 1;
  }
  else {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_88754 + 4 * byte_321125[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_88788 + 4 * asc_321120[v4]))();
}

uint64_t sub_88788(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_88790(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x88798LL);
  }
  return result;
}

uint64_t sub_887A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x887ACLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_887B0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_887B8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PhoneCallProvider.CodingKeys()
{
  return &type metadata for PhoneCallProvider.CodingKeys;
}

uint64_t OUTLINED_FUNCTION_2_18@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return outlined init with copy of SpeakableString?(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL));
}

uint64_t OUTLINED_FUNCTION_4_19()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 120) + 8LL))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_6_22()
{
  return SpeakableString.init(print:speak:)(v3, v2, v1, v0);
}

uint64_t OUTLINED_FUNCTION_7_20(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, v2, v3, v4);
}

uint64_t OUTLINED_FUNCTION_10_17@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return outlined init with copy of SpeakableString?(v2 + a2, a1);
}

uint64_t UsoEntity_common_Person.usoPerson.getter()
{
  return swift_retain(v0);
}

uint64_t OUTLINED_FUNCTION_15_12(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 1LL, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_19_11@<X0>(uint64_t a1@<X8>)
{
  return outlined init with take of SpeakableString?(v2, v1 + a1);
}

void *OUTLINED_FUNCTION_23_10()
{
  v0[3] = v1;
  return __swift_allocate_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_26_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_28_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, v4);
}

  ;
}

uint64_t OUTLINED_FUNCTION_33_8@<X0>(uint64_t (*a1)(uint64_t)@<X8>)
{
  return a1(v1);
}

uint64_t OUTLINED_FUNCTION_35_5@<X0>(uint64_t a1@<X8>)
{
  if (v1 == 1) {
    return 0x72656469766F7270LL;
  }
  else {
    return a1;
  }
}

uint64_t OUTLINED_FUNCTION_37_8@<X0>(uint64_t (*a1)(uint64_t)@<X8>)
{
  return a1(v1);
}

const char *ExecutionPathConstants.enUSLocale.unsafeMutableAddressor()
{
  return "en-US";
}

uint64_t static ExecutionPathConstants.enUSLocale.getter()
{
  return 0x53552D6E65LL;
}

const char *ExecutionPathConstants.koKRLocale.unsafeMutableAddressor()
{
  return "ko-KR";
}

uint64_t static ExecutionPathConstants.koKRLocale.getter()
{
  return 0x524B2D6F6BLL;
}

uint64_t static ExecutionPath.isCompositionFlowEnabled(sharedGlobals:)(void *a1)
{
  uint64_t v2 = type metadata accessor for Locale(0LL);
  uint64_t v64 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = &v62[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v3);
  uint64_t v7 = &v62[-v6];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 56))(v8, v9);
  int v63 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 216LL))(v10);
  swift_release(v10);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v12 + 8))(v83, v11, v12);
  uint64_t v13 = v84;
  uint64_t v14 = v85;
  __swift_project_boxed_opaque_existential_1(v83, v84);
  LOBYTE(v10) = dispatch thunk of DeviceState.isPhone.getter(v13, v14);
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v80);
  if ((v10 & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1(v80);
    __swift_destroy_boxed_opaque_existential_1(v83);
    outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v77);
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1(v77);
    outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v74);
LABEL_5:
    __swift_destroy_boxed_opaque_existential_1(v74);
    outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v71);
LABEL_6:
    char v20 = 0;
    goto LABEL_7;
  }

  uint64_t v15 = v81;
  uint64_t v16 = v82;
  __swift_project_boxed_opaque_existential_1(v80, v81);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v16 + 8))(v77, v15, v16);
  uint64_t v17 = v78;
  uint64_t v18 = v79;
  __swift_project_boxed_opaque_existential_1(v77, v78);
  char v19 = dispatch thunk of DeviceState.isPad.getter(v17, v18);
  __swift_destroy_boxed_opaque_existential_1(v77);
  __swift_destroy_boxed_opaque_existential_1(v80);
  __swift_destroy_boxed_opaque_existential_1(v83);
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v77);
  if ((v19 & 1) != 0) {
    goto LABEL_4;
  }
  uint64_t v34 = v78;
  uint64_t v35 = v79;
  __swift_project_boxed_opaque_existential_1(v77, v78);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v35 + 8))(v74, v34, v35);
  uint64_t v36 = v75;
  uint64_t v37 = v76;
  __swift_project_boxed_opaque_existential_1(v74, v75);
  char v38 = dispatch thunk of DeviceState.isCarPlay.getter(v36, v37);
  __swift_destroy_boxed_opaque_existential_1(v74);
  __swift_destroy_boxed_opaque_existential_1(v77);
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v74);
  if ((v38 & 1) != 0) {
    goto LABEL_5;
  }
  uint64_t v39 = v75;
  uint64_t v40 = v76;
  __swift_project_boxed_opaque_existential_1(v74, v75);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v40 + 8))(v71, v39, v40);
  uint64_t v41 = v72;
  uint64_t v42 = v73;
  __swift_project_boxed_opaque_existential_1(v71, v72);
  char v43 = dispatch thunk of DeviceState.isMac.getter(v41, v42);
  __swift_destroy_boxed_opaque_existential_1(v71);
  __swift_destroy_boxed_opaque_existential_1(v74);
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v71);
  if ((v43 & 1) != 0) {
    goto LABEL_6;
  }
  uint64_t v44 = v72;
  uint64_t v45 = v73;
  __swift_project_boxed_opaque_existential_1(v71, v72);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v45 + 8))(v68, v44, v45);
  uint64_t v46 = v69;
  uint64_t v47 = v70;
  __swift_project_boxed_opaque_existential_1(v68, v69);
  char v48 = dispatch thunk of DeviceState.isWatch.getter(v46, v47);
  __swift_destroy_boxed_opaque_existential_1(v68);
  char v20 = v48 ^ 1;
LABEL_7:
  __swift_destroy_boxed_opaque_existential_1(v71);
  uint64_t v21 = a1[3];
  uint64_t v22 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v21);
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 56))(v21, v22);
  LOBYTE(v21) = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 240LL))(v23);
  swift_release(v23);
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v68);
  if ((v21 & 1) != 0)
  {
    char v24 = 1;
  }

  else
  {
    uint64_t v25 = v69;
    uint64_t v26 = v70;
    __swift_project_boxed_opaque_existential_1(v68, v69);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v26 + 8))(v65, v25, v26);
    uint64_t v27 = v66;
    uint64_t v28 = v67;
    __swift_project_boxed_opaque_existential_1(v65, v66);
    uint64_t v29 = DeviceState.siriInputLocale.getter(v27, v28);
    uint64_t v30 = Locale.identifier.getter(v29);
    uint64_t v32 = v31;
    (*(void (**)(_BYTE *, uint64_t))(v64 + 8))(v7, v2);
    if (v30 == 0x53552D6E65LL && v32 == 0xE500000000000000LL)
    {
      swift_bridgeObjectRelease(0xE500000000000000LL);
      char v24 = 1;
    }

    else
    {
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, 0x53552D6E65LL, 0xE500000000000000LL, 0LL);
      swift_bridgeObjectRelease(v32);
    }

    __swift_destroy_boxed_opaque_existential_1(v65);
  }

  __swift_destroy_boxed_opaque_existential_1(v68);
  uint64_t v49 = a1[3];
  uint64_t v50 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v49);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v50 + 8))(v65, v49, v50);
  uint64_t v51 = v66;
  uint64_t v52 = v67;
  __swift_project_boxed_opaque_existential_1(v65, v66);
  uint64_t v53 = DeviceState.siriInputLocale.getter(v51, v52);
  uint64_t v54 = Locale.identifier.getter(v53);
  uint64_t v56 = v55;
  (*(void (**)(_BYTE *, uint64_t))(v64 + 8))(v5, v2);
  if (v54 == 0x524B2D6F6BLL && v56 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    char v59 = 0;
  }

  else
  {
    char v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v54, v56, 0x524B2D6F6BLL, 0xE500000000000000LL, 0LL);
    swift_bridgeObjectRelease(v56);
    char v59 = v58 ^ 1;
  }

  __swift_destroy_boxed_opaque_existential_1(v65);
  if (v20 & 1 | ((v63 & 1) == 0)) {
    char v60 = 0;
  }
  else {
    char v60 = v24 & v59;
  }
  return v60 & 1;
}

BOOL static ExecutionPath.__derived_enum_equals(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  switch(a1)
  {
    case 5u:
      return a2 == 5;
    case 4u:
      return a2 == 4;
    case 3u:
      return a2 == 3;
  }

  return a1 == a2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ExecutionPath( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static ExecutionPath.__derived_enum_equals(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type ExecutionPath.FallbackLocation and conformance ExecutionPath.FallbackLocation()
{
  unint64_t result = lazy protocol witness table cache variable for type ExecutionPath.FallbackLocation and conformance ExecutionPath.FallbackLocation;
  if (!lazy protocol witness table cache variable for type ExecutionPath.FallbackLocation and conformance ExecutionPath.FallbackLocation)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ExecutionPath.FallbackLocation,  &type metadata for ExecutionPath.FallbackLocation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ExecutionPath.FallbackLocation and conformance ExecutionPath.FallbackLocation);
  }

  return result;
}

void type metadata accessor for ExecutionPathConstants()
{
}

uint64_t getEnumTagSinglePayload for ExecutionPath(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFB)
  {
    unsigned int v6 = *a1;
    if (v6 >= 3) {
      unsigned int v7 = v6 - 2;
    }
    else {
      unsigned int v7 = 0;
    }
    if (v7 >= 4) {
      return v7 - 3;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    unsigned int v2 = a2 + 5;
    if (a2 + 5 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_88F84 + 4 * asc_3213C0[v4]))();
  }

uint64_t storeEnumTagSinglePayload for ExecutionPath(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 5;
  if (a3 + 5 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    LODWORD(OUTLINED_FUNCTION_5_18(v3, v4, v5) = v4;
  }
  else {
    LODWORD(OUTLINED_FUNCTION_5_18(v3, v4, v5) = 0;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_89030 + 4 * byte_3213CA[v5]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_89064 + 4 * byte_3213C5[v5]))();
}

uint64_t sub_89064(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8906C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x89074LL);
  }
  return result;
}

uint64_t sub_89080(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x89088LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_8908C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_89094(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for ExecutionPath(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 3) {
    return v1 - 2;
  }
  else {
    return 0LL;
  }
}

_BYTE *destructiveInjectEnumTag for ExecutionPath(_BYTE *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 2;
  }
  return result;
}

void type metadata accessor for ExecutionPath()
{
}

uint64_t storeEnumTagSinglePayload for ExecutionPath.FallbackLocation( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = 1;
  }
  else {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_8911C + 4 * byte_3213D4[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_89150 + 4 * byte_3213CF[v4]))();
}

uint64_t sub_89150(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_89158(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x89160LL);
  }
  return result;
}

uint64_t sub_8916C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x89174LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_89178(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_89180(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ExecutionPath.FallbackLocation()
{
}

uint64_t OUTLINED_FUNCTION_12_18(uint64_t a1, uint64_t *a2)
{
  return outlined destroy of SpeakableString?(v2 - 88, a2);
}

uint64_t OUTLINED_FUNCTION_13_18(void *a1)
{
  return v1;
}

void static PhoneStartCallIntent.makeForSlotTemplating(intent:isRelationshipRequest:)(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_10_18();
  specialized static PhoneStartCallIntent.makeForSlotTemplating(intent:isRelationshipRequest:)(v1, v2, v3, v4, v5);
}

void PhoneStartCallIntent.__allocating_init(intent:isRelationshipRequest:)(uint64_t a1)
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_18();
  specialized PhoneStartCallIntent.__allocating_init(intent:isRelationshipRequest:)(v1, v2, v3, v4, v5);
}

void static PhoneCallGroup.make(groupName:groupId:)( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v18 - v10;
  if (a4) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = 0LL;
  }
  if (a4) {
    unint64_t v13 = a4;
  }
  else {
    unint64_t v13 = 0xE000000000000000LL;
  }
  if (a2) {
    uint64_t v14 = a1;
  }
  else {
    uint64_t v14 = 0LL;
  }
  if (a2) {
    unint64_t v15 = a2;
  }
  else {
    unint64_t v15 = 0xE000000000000000LL;
  }
  uint64_t v16 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = v12 & 0xFFFFFFFFFFFFLL;
  }
  if (v16) {
    goto LABEL_19;
  }
  uint64_t v17 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = v14 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
LABEL_19:
    type metadata accessor for PhoneCallGroup(0LL);
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_6_1();
    String.toSpeakableString.getter(v14, v15);
    OUTLINED_FUNCTION_23_5();
    OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_6_23((uint64_t)v11);
    String.toSpeakableString.getter(v12, v13);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_6_23((uint64_t)v9);
    PhoneCallGroup.__allocating_init(groupName:groupId:)((uint64_t)v11, (uint64_t)v9);
  }

  else
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_6_1();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_23_5();
  }

  OUTLINED_FUNCTION_7_5();
}

uint64_t static DialogCalendar.make(date:)(uint64_t a1)
{
  double v2 = Date.timeIntervalSince1970.getter(a1);
  uint64_t v3 = type metadata accessor for DialogCalendar.Builder(0LL);
  OUTLINED_FUNCTION_15_2(v3);
  DialogCalendar.Builder.init(secs:)(v2);
  dispatch thunk of DialogCalendar.Builder.build()();
  OUTLINED_FUNCTION_38_6();
  return v1;
}

void specialized PhoneStartCallIntent.__allocating_init(intent:isRelationshipRequest:)( void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = 0x4E574F4E4B4E55LL;
  uint64_t v11 = type metadata accessor for Locale(0LL);
  uint64_t v99 = *(void *)(v11 - 8);
  uint64_t v100 = v11;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v98 = v13 - v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  uint64_t v94 = (uint64_t)v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v93 = (uint64_t)v90 - v15;
  __chkstk_darwin();
  uint64_t v92 = (uint64_t)v90 - v16;
  __chkstk_darwin();
  uint64_t v91 = (uint64_t)v90 - v17;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 24);
  uint64_t v19 = (uint64_t)a1;
  uint64_t v95 = a5;
  uint64_t v96 = a4;
  uint64_t v20 = v18(a4, a5);
  if (!v20)
  {
    OUTLINED_FUNCTION_1_23();
    goto LABEL_10;
  }

  int BackingType = INCallCapabilityGetBackingType(v20);
  if (BackingType == 2)
  {
    uint64_t v22 = @"VIDEO_CALL";
  }

  else
  {
    if (BackingType != 1)
    {
      OUTLINED_FUNCTION_26_9();
      objc_claimAutoreleasedReturnValue([v24 stringWithFormat:@"(unknown: %i)"]);
      OUTLINED_FUNCTION_13_19();
      goto LABEL_9;
    }

    uint64_t v22 = @"AUDIO_CALL";
  }

  uint64_t v23 = v22;
LABEL_9:
  id v25 = OUTLINED_FUNCTION_4_20();
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);

LABEL_10:
  OUTLINED_FUNCTION_0_19(v19);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_24_8();
  uint64_t v27 = OUTLINED_FUNCTION_5_20(*(uint64_t (**)(void))(v26 + 32));
  if (!v27)
  {
    OUTLINED_FUNCTION_1_23();
    goto LABEL_21;
  }

  int v28 = INCallAudioRouteGetBackingType(v27);
  switch(v28)
  {
    case 4:
      uint64_t v29 = @"HEY_SIRI_AUDIO_ROUTE";
      break;
    case 3:
      uint64_t v29 = @"BLUETOOTH_AUDIO_ROUTE";
      break;
    case 2:
      uint64_t v29 = @"SPEAKERPHONE_AUDIO_ROUTE";
      break;
    default:
      OUTLINED_FUNCTION_26_9();
      objc_claimAutoreleasedReturnValue([v31 stringWithFormat:@"(unknown: %i)"]);
      OUTLINED_FUNCTION_13_19();
      goto LABEL_20;
  }

  uint64_t v30 = v29;
LABEL_20:
  id v32 = OUTLINED_FUNCTION_4_20();
  static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  OUTLINED_FUNCTION_23_11();
LABEL_21:
  uint64_t v33 = v92;
  OUTLINED_FUNCTION_0_19(v19);
  OUTLINED_FUNCTION_7_21(v33);
  uint64_t v34 = *(void *)(v95 + 8);
  uint64_t v35 = OUTLINED_FUNCTION_5_20(*(uint64_t (**)(void))(*(void *)(v34 + 16) + 8LL));
  if (!v35)
  {
    OUTLINED_FUNCTION_1_23();
    goto LABEL_32;
  }

  int v36 = INPreferredCallProviderGetBackingType(v35);
  switch(v36)
  {
    case 4:
      uint64_t v37 = @"THIRD_PARTY_PROVIDER";
      break;
    case 3:
      uint64_t v37 = @"FACETIME_PROVIDER";
      break;
    case 2:
      uint64_t v37 = @"TELEPHONY_PROVIDER";
      break;
    default:
      OUTLINED_FUNCTION_26_9();
      objc_claimAutoreleasedReturnValue([v39 stringWithFormat:@"(unknown: %i)"]);
      OUTLINED_FUNCTION_13_19();
      goto LABEL_31;
  }

  char v38 = v37;
LABEL_31:
  id v40 = OUTLINED_FUNCTION_4_20();
  static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  OUTLINED_FUNCTION_23_11();
LABEL_32:
  OUTLINED_FUNCTION_0_19(v19);
  OUTLINED_FUNCTION_24_8();
  uint64_t v42 = OUTLINED_FUNCTION_5_20(*(uint64_t (**)(void))(v41 + 16));
  if (v42)
  {
    switch(INCallDestinationTypeGetBackingType(v42))
    {
      case 1u:
        char v43 = @"NORMAL_DESTINATION";
        goto LABEL_41;
      case 2u:
        char v43 = @"EMERGENCY_DESTINATION";
        goto LABEL_41;
      case 3u:
        char v43 = @"VOICEMAIL_DESTINATION";
        goto LABEL_41;
      case 4u:
        char v43 = @"REDIAL_DESTINATION";
        goto LABEL_41;
      case 5u:
        char v43 = @"CALL_BACK_DESTINATION";
LABEL_41:
        uint64_t v45 = v43;
        break;
      default:
        OUTLINED_FUNCTION_26_9();
        objc_claimAutoreleasedReturnValue([v44 stringWithFormat:@"(unknown: %i)"]);
        OUTLINED_FUNCTION_13_19();
        break;
    }

    id v46 = OUTLINED_FUNCTION_4_20();
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
  }

  uint64_t v47 = v94;
  OUTLINED_FUNCTION_0_19(v10);
  OUTLINED_FUNCTION_7_21(v47);
  unint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)(v34 + 8) + 8LL))(v96);
  v90[1] = a3;
  if (v48)
  {
    unint64_t v49 = v48;
    unint64_t v104 = (unint64_t)_swiftEmptyArrayStorage;
    if (v48 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v50 = OUTLINED_FUNCTION_15_4();
      if (v50) {
        goto LABEL_46;
      }
    }

    else
    {
      uint64_t v50 = *(void *)((char *)&dword_10 + (v48 & 0xFFFFFFFFFFFFFF8LL));
      swift_bridgeObjectRetain();
      if (v50)
      {
LABEL_46:
        uint64_t v97 = type metadata accessor for PhonePerson(0LL);
        if (v50 < 1)
        {
          __break(1u);
          goto LABEL_78;
        }

        v90[0] = a1;
        uint64_t v51 = 0LL;
        unint64_t v52 = v49 & 0xC000000000000001LL;
        char v53 = a2 & 1;
        unint64_t v54 = v49;
        do
        {
          if (v52) {
            id v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v51, v49);
          }
          else {
            id v55 = OUTLINED_FUNCTION_27_10(v49 + 8 * v51);
          }
          uint64_t v56 = v55;
          static Device.current.getter(v101);
          uint64_t v57 = v102;
          uint64_t v58 = v103;
          __swift_project_boxed_opaque_existential_1(v101, v102);
          uint64_t v59 = v98;
          dispatch thunk of DeviceState.siriLocale.getter(v57, v58);
          __swift_destroy_boxed_opaque_existential_1(v101);
          static PhonePerson.make(phonePerson:options:locale:)(v56, v53, v59);
          uint64_t v61 = v60;
          (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v59, v100);

          if (v61)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v62);
            unint64_t v64 = *(void *)((char *)&dword_10 + (v104 & 0xFFFFFFFFFFFFFF8LL));
            unint64_t v63 = *(void *)((char *)&dword_18 + (v104 & 0xFFFFFFFFFFFFFF8LL));
            if (v64 >= v63 >> 1) {
              OUTLINED_FUNCTION_3_25(v64 + 1, v63);
            }
            uint64_t v65 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v64, v61);
            specialized Array._endMutation()(v65, v66, v67, v68);
          }

          ++v51;
          unint64_t v49 = v54;
        }

        while (v50 != v51);
        OUTLINED_FUNCTION_4_1();
        a1 = (void *)v90[0];
        goto LABEL_59;
      }
    }

    OUTLINED_FUNCTION_4_1();
LABEL_59:
    OUTLINED_FUNCTION_4_1();
  }

  type metadata accessor for PhonePersonList();
  uint64_t v69 = OUTLINED_FUNCTION_22_10();
  unint64_t v70 = OUTLINED_FUNCTION_5_20(*(uint64_t (**)(void))(v95 + 40));
  if (v70)
  {
    unint64_t v71 = v70;
    v101[0] = _swiftEmptyArrayStorage;
    if (v70 >> 62)
    {
      OUTLINED_FUNCTION_6_1();
      uint64_t v72 = OUTLINED_FUNCTION_15_4();
      if (v72)
      {
LABEL_63:
        type metadata accessor for PhoneCallGroup(0LL);
        if (v72 >= 1)
        {
          for (uint64_t i = 0LL; i != v72; ++i)
          {
            if ((v71 & 0xC000000000000001LL) != 0) {
              id v74 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v71);
            }
            else {
              id v74 = OUTLINED_FUNCTION_27_10(v71 + 8 * i);
            }
            uint64_t v75 = v74;
            uint64_t v76 = outlined bridged method (pb) of @objc INCallGroup.groupName.getter(v74);
            unint64_t v78 = v77;
            uint64_t v79 = outlined bridged method (pb) of @objc INCallGroup.groupId.getter(v75);
            static PhoneCallGroup.make(groupName:groupId:)(v76, v78, v79, v80);
            uint64_t v82 = v81;

            swift_bridgeObjectRelease();
            uint64_t v83 = OUTLINED_FUNCTION_23_5();
            if (v82)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v83);
              unint64_t v85 = *(void *)((char *)&dword_10 + (v101[0] & 0xFFFFFFFFFFFFFF8LL));
              unint64_t v84 = *(void *)((char *)&dword_18 + (v101[0] & 0xFFFFFFFFFFFFFF8LL));
              if (v85 >= v84 >> 1) {
                OUTLINED_FUNCTION_3_25(v85 + 1, v84);
              }
              uint64_t v86 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v85, v82);
              specialized Array._endMutation()(v86, v87, v88, v89);
            }
          }

          goto LABEL_75;
        }

LABEL_78:
        __break(1u);
        JUMPOUT(0x89AA0LL);
      }
    }

    else
    {
      uint64_t v72 = *(void *)((char *)&dword_10 + (v70 & 0xFFFFFFFFFFFFFF8LL));
      OUTLINED_FUNCTION_6_1();
      if (v72) {
        goto LABEL_63;
      }
    }

            v58((char *)v205, v204);
            unint64_t v70 = v174 + v173;
            unint64_t v63 = v175 - 1;
            if (v175 == 1)
            {
              v146 = OUTLINED_FUNCTION_18_36((uint64_t)&v199);
              unint64_t v64 = v179;
              goto LABEL_101;
            }
          }
        }

        id v32 = v30;
      }

      OUTLINED_FUNCTION_39();
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v32,  &demangling cache variable for type metadata for UtteranceSpan?);
      unint64_t v54 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
      unint64_t v52 = v1;
      char v53 = v201;
      goto LABEL_24;
    }

    OUTLINED_FUNCTION_39();
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v2,  &demangling cache variable for type metadata for UtteranceAlignment?);
  }

  else
  {
    OUTLINED_FUNCTION_39();
  }

void specialized static PhoneStartCallIntent.makeForSlotTemplating(intent:isRelationshipRequest:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for Locale(0LL);
  uint64_t v51 = *(void *)(v7 - 8);
  uint64_t v52 = v7;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v10 = v9 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for PhoneStartCallIntent.Builder(0LL);
  OUTLINED_FUNCTION_15_2(v14);
  PhoneStartCallIntent.Builder.init()();
  uint64_t v50 = v15;
  unint64_t v16 = OUTLINED_FUNCTION_14_11(v15, *(void *)(a5 + 8));
  if (!v16)
  {
LABEL_18:
    type metadata accessor for PhonePersonList();
    uint64_t v36 = OUTLINED_FUNCTION_22_10();
    uint64_t v37 = v50;
    uint64_t v38 = (*(uint64_t (**)(void))(*(void *)v50 + 352LL))();
    swift_release(v50);
    uint64_t v39 = swift_release(v36);
    uint64_t v40 = OUTLINED_FUNCTION_14_11(v39, *(void *)(a5 + 16));
    if (!v40)
    {
      OUTLINED_FUNCTION_1_23();
LABEL_29:
      OUTLINED_FUNCTION_0_19(v37);
      uint64_t v45 = OUTLINED_FUNCTION_26_0();
      __swift_storeEnumTagSinglePayload(v13, 0LL, 1LL, v45);
      uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 320LL))(v13);
      swift_release(v38);
      uint64_t v47 = outlined destroy of SpeakableString?(v13);
      (*(void (**)(uint64_t))(*(void *)v46 + 376LL))(v47);
      OUTLINED_FUNCTION_38_6();
      OUTLINED_FUNCTION_7_5();
      return;
    }

    uint64_t v41 = INPreferredCallProviderGetBackingType(v40);
    switch((_DWORD)v41)
    {
      case 4:
        uint64_t v42 = @"THIRD_PARTY_PROVIDER";
        break;
      case 3:
        uint64_t v42 = @"FACETIME_PROVIDER";
        break;
      case 2:
        uint64_t v42 = @"TELEPHONY_PROVIDER";
        break;
      default:
        objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"(unknown: %i)", v41));
        OUTLINED_FUNCTION_13_19();
        goto LABEL_28;
    }

    char v43 = v42;
LABEL_28:
    id v44 = OUTLINED_FUNCTION_4_20();
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);

    goto LABEL_29;
  }

  unint64_t v17 = v16;
  unint64_t v56 = (unint64_t)_swiftEmptyArrayStorage;
  if (!(v16 >> 62))
  {
    uint64_t v18 = *(void *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain();
    if (v18) {
      goto LABEL_4;
    }
LABEL_16:
    OUTLINED_FUNCTION_62();
LABEL_17:
    OUTLINED_FUNCTION_62();
    goto LABEL_18;
  }

  swift_bridgeObjectRetain();
  uint64_t v18 = OUTLINED_FUNCTION_15_4();
  if (!v18) {
    goto LABEL_16;
  }
LABEL_4:
  uint64_t v49 = a5;
  type metadata accessor for PhonePerson(0LL);
  if (v18 >= 1)
  {
    uint64_t v48 = v13;
    uint64_t v19 = 0LL;
    unint64_t v20 = v17 & 0xC000000000000001LL;
    char v21 = a2 & 1;
    unint64_t v22 = v17;
    do
    {
      if (v20) {
        id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v17);
      }
      else {
        id v23 = OUTLINED_FUNCTION_27_10(v17 + 8 * v19);
      }
      id v24 = v23;
      static Device.current.getter(v53);
      uint64_t v25 = v54;
      uint64_t v26 = v55;
      __swift_project_boxed_opaque_existential_1(v53, v54);
      dispatch thunk of DeviceState.siriLocale.getter(v25, v26);
      __swift_destroy_boxed_opaque_existential_1(v53);
      static PhonePerson.make(phonePerson:options:locale:)(v24, v21, v10);
      uint64_t v28 = v27;
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v10, v52);

      if (v28)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
        unint64_t v31 = *(void *)((char *)&dword_10 + (v56 & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v30 = *(void *)((char *)&dword_18 + (v56 & 0xFFFFFFFFFFFFFF8LL));
        if (v31 >= v30 >> 1) {
          OUTLINED_FUNCTION_3_25(v31 + 1, v30);
        }
        uint64_t v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v28);
        specialized Array._endMutation()(v32, v33, v34, v35);
      }

      ++v19;
      unint64_t v17 = v22;
    }

    while (v18 != v19);
    OUTLINED_FUNCTION_62();
    uint64_t v13 = v48;
    a5 = v49;
    goto LABEL_17;
  }

  __break(1u);
}

uint64_t OUTLINED_FUNCTION_0_19(uint64_t a1)
{
  return SpeakableString.init(print:speak:)(a1, v1, 0LL, 0LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_3_25@<X0>(uint64_t a1@<X1>, unint64_t a2@<X8>)
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a2 > 1, a1, 1LL);
}

id OUTLINED_FUNCTION_4_20()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_23(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 0LL, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_7_21(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 0LL, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_10_18()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_12_19(uint64_t a1)
{
  return swift_getObjectType(a1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_14_11(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a2 + 8))(v2);
}

uint64_t OUTLINED_FUNCTION_22_10()
{
  return PhonePersonList.__allocating_init(list:)(v0);
}

void OUTLINED_FUNCTION_23_11()
{
}

uint64_t OUTLINED_FUNCTION_24_8()
{
  return *(void *)(v2 - 168);
}

  ;
}

uint64_t Collection<>.isAddOrNewCall.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_5_1();
  char v8 = 0;
  uint64_t v4 = *(void *)(v3 + 8);
  unint64_t v5 = lazy protocol witness table accessor for type OngoingCallOfferOptions and conformance OngoingCallOfferOptions();
  LOBYTE(OUTLINED_FUNCTION_5_18(v2, v3, v4) = Sequence<>.contains(_:)(&v8, a1, v4, v5);
  OUTLINED_FUNCTION_19_12(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  char v6 = 0;
  if ((v4 & 1) != 0) {
    char v6 = Collection<>.isAnyNewCall.getter();
  }
  OUTLINED_FUNCTION_4_13(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  return v6 & 1;
}

unint64_t lazy protocol witness table accessor for type OngoingCallOfferOptions and conformance OngoingCallOfferOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type OngoingCallOfferOptions and conformance OngoingCallOfferOptions;
  if (!lazy protocol witness table cache variable for type OngoingCallOfferOptions and conformance OngoingCallOfferOptions)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for OngoingCallOfferOptions,  &type metadata for OngoingCallOfferOptions);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OngoingCallOfferOptions and conformance OngoingCallOfferOptions);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type OngoingCallOfferOptions and conformance OngoingCallOfferOptions;
  if (!lazy protocol witness table cache variable for type OngoingCallOfferOptions and conformance OngoingCallOfferOptions)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for OngoingCallOfferOptions,  &type metadata for OngoingCallOfferOptions);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OngoingCallOfferOptions and conformance OngoingCallOfferOptions);
  }

  return result;
}

uint64_t Collection<>.isAnyNewCall.getter()
{
  char v9 = 2;
  uint64_t v3 = *(void *)(v2 + 8);
  unint64_t v4 = lazy protocol witness table accessor for type OngoingCallOfferOptions and conformance OngoingCallOfferOptions();
  char v5 = Sequence<>.contains(_:)(&v9, v0, v3, v4);
  OUTLINED_FUNCTION_19_12(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_13(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    char v6 = 1;
  }

  else
  {
    char v8 = 1;
    char v6 = Sequence<>.contains(_:)(&v8, v0, v3, v4);
    OUTLINED_FUNCTION_4_13(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  }

  return v6 & 1;
}

uint64_t OngoingCallOfferOptions.rawValue.getter(char a1)
{
  if (!a1) {
    return OUTLINED_FUNCTION_21_11();
  }
  if (a1 == 1) {
    return 0x654E646E41646E65LL;
  }
  return 0x4E646E41646C6F68LL;
}

void static OngoingCallOfferOptions.from(rchRecord:callStateProvider:nlIntent:)( uint64_t a1, void *a2, uint64_t a3)
{
  char v6 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INStartCallIntent, INStartCallIntentResponse>);
  uint64_t v7 = *(v6 - 1);
  __chkstk_darwin();
  char v9 = &v95[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  uint64_t v11 = &v95[-v10];
  uint64_t v12 = (void *)OUTLINED_FUNCTION_28_8();
  uint64_t v13 = (void *)IntentResolutionRecord.intentResponse.getter(v6);
  static EmergencyUtils.requiresEmergencyConfirmation(intent:intentResponse:)(v12, v13);
  char v15 = v14;

  if ((v15 & 1) != 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v16 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v16, (uint64_t)static Logger.siriPhone);
    os_log_type_t v17 = OUTLINED_FUNCTION_41();
    if (OUTLINED_FUNCTION_10(v17))
    {
      uint64_t v18 = (_WORD *)OUTLINED_FUNCTION_1_0();
      OUTLINED_FUNCTION_47(v18);
      OUTLINED_FUNCTION_2_2(&dword_0, v19, v20, "#OngoingCallOfferOptions Emergency call only offers endAndNewCall");
      OUTLINED_FUNCTION_0_2((uint64_t)v9);
    }

    specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #3 of static OngoingCallOfferOptions.from(rchRecord:callStateProvider:nlIntent:));
    return;
  }

  uint64_t v21 = IntentResolutionRecord.app.getter(v6);
  Swift::Bool v22 = App.isFirstParty()();
  swift_release(v21);
  if (v22)
  {
    id v23 = (void *)OUTLINED_FUNCTION_28_8();
    outlined bridged method (ob) of @objc INStartCallIntent.contacts.getter(v23);
    if (v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = (uint64_t)_swiftEmptyArrayStorage;
    }
    if ((unint64_t)v25 >> 62)
    {
      if (v25 < 0) {
        uint64_t v94 = v25;
      }
      else {
        uint64_t v94 = v25 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter(v94);
      OUTLINED_FUNCTION_62();
    }

    else
    {
      uint64_t v26 = *(void *)((char *)&dword_10 + (v25 & 0xFFFFFFFFFFFFF8LL));
    }

    OUTLINED_FUNCTION_62();
    uint64_t v27 = *(void (**)(_BYTE *, uint64_t, void *))(v7 + 16);
    v27(v11, a1, v6);
    if (v26 >= 2)
    {
      (*(void (**)(_BYTE *, void *))(v7 + 8))(v11, v6);
LABEL_21:
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v35 = OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_12_1(v35, (uint64_t)static Logger.siriPhone);
      os_log_type_t v36 = OUTLINED_FUNCTION_41();
      if (OUTLINED_FUNCTION_10(v36))
      {
        uint64_t v37 = (_WORD *)OUTLINED_FUNCTION_1_0();
        OUTLINED_FUNCTION_47(v37);
        OUTLINED_FUNCTION_2_2(&dword_0, v38, v39, "#OngoingCallOfferOptions Group call only offers endAndNewCall");
        OUTLINED_FUNCTION_0_2((uint64_t)v9);
      }

      uint64_t v40 = &outlined read-only object #1 of static OngoingCallOfferOptions.from(rchRecord:callStateProvider:nlIntent:);
LABEL_26:
      specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)v40);
      return;
    }

    uint64_t v33 = (void *)IntentResolutionRecord.intent.getter(v6);
    Swift::Bool v34 = INStartCallIntent.isGroupCall()();

    uint64_t v105 = *(void (**)(_BYTE *, void *))(v7 + 8);
    v105(v11, v6);
    if (v34) {
      goto LABEL_21;
    }
    uint64_t v41 = a2[3];
    uint64_t v42 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v41);
    uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 24))(v41, v42);
    if (!v43)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v50 = OUTLINED_FUNCTION_15_1();
      uint64_t v51 = (void *)OUTLINED_FUNCTION_12_1(v50, (uint64_t)static Logger.siriPhone);
      os_log_type_t v52 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_10(v52))
      {
        char v53 = (_WORD *)OUTLINED_FUNCTION_1_0();
        OUTLINED_FUNCTION_47(v53);
        OUTLINED_FUNCTION_2_2( &dword_0,  v54,  v55,  "#OngoingCallOfferOptions There's no ongoing call, but OngoingCall Flows are in use. Classify as .holdAndNewCall.");
        OUTLINED_FUNCTION_0_2((uint64_t)v9);
      }

      uint64_t v40 = &outlined read-only object #0 of static OngoingCallOfferOptions.from(rchRecord:callStateProvider:nlIntent:);
      goto LABEL_26;
    }

    uint64_t v45 = v43;
    uint64_t v46 = v44;
    uint64_t v102 = v27;
    uint64_t v110 = &_swiftEmptySetSingleton;
    outlined init with copy of Result<TemplatingResult, Error>( a3,  (uint64_t)v107,  &demangling cache variable for type metadata for PhoneCallNLIntent?);
    uint64_t v47 = v108;
    if (v108)
    {
      uint64_t v48 = v109;
      OUTLINED_FUNCTION_42(v107);
      int v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 32))(v47, v48);
      __swift_destroy_boxed_opaque_existential_1(v107);
    }

    else
    {
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v107,  &demangling cache variable for type metadata for PhoneCallNLIntent?);
      int v49 = 2;
    }

    unint64_t v56 = (void *)OUTLINED_FUNCTION_28_8();
    uint64_t v101 = (char *)[v56 preferredCallProvider];

    uint64_t ObjectType = swift_getObjectType(v45);
    char v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 32))(ObjectType, v46);
    uint64_t v103 = ObjectType;
    uint64_t v104 = v46;
    if ((v58 & 1) != 0 && v49 == 2
      || (SPHCall.isFTAudio.getter(ObjectType, v46), (v59 & 1) != 0) && v49 != 2 && (v49 & 1) == 0)
    {
      char v60 = 0;
    }

    else
    {
      SPHCall.isFTVideo.getter(ObjectType, v104);
      char v60 = v61 ^ 1 | (v49 == 2) | ((v49 & 1) == 0);
    }

    uint64_t v62 = a2[3];
    uint64_t v63 = a2[4];
    OUTLINED_FUNCTION_42(a2);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v63 + 40))(v107, v62, v63);
    uint64_t v64 = v108;
    uint64_t v65 = v109;
    OUTLINED_FUNCTION_42(v107);
    int v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 24))(v64, v65);
    __swift_destroy_boxed_opaque_existential_1(v107);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v67 = OUTLINED_FUNCTION_15_1();
    __swift_project_value_buffer(v67, (uint64_t)static Logger.siriPhone);
    uint64_t v68 = swift_unknownObjectRetain(v45);
    uint64_t v69 = (os_log_s *)Logger.logObject.getter(v68);
    os_log_type_t v71 = static os_log_type_t.debug.getter(v69, v70);
    int v72 = v71;
    if (os_log_type_enabled(v69, v71))
    {
      uint64_t v73 = swift_slowAlloc(24LL, -1LL);
      int v98 = v72;
      uint64_t v74 = v73;
      uint64_t v99 = swift_slowAlloc(32LL, -1LL);
      v107[0] = v99;
      *(_DWORD *)uint64_t v74 = 67109634;
      uint64_t v75 = v103;
      int v96 = v49;
      char v76 = v60;
      uint64_t v77 = v104;
      os_log_t v97 = v69;
      SPHCall.isFTAudio.getter(v103, v104);
      LODWORD(v106) = v78 & 1;
      int v100 = v66;
      OUTLINED_FUNCTION_41_6(v78, v79, v74 + 4, v74 + 8);
      *(_WORD *)(v74 + 8) = 1024;
      uint64_t v80 = v77;
      char v60 = v76;
      SPHCall.isFTVideo.getter(v75, v80);
      LODWORD(v106) = v81 & 1;
      OUTLINED_FUNCTION_41_6(v81, v82, v74 + 10, v74 + 14);
      OUTLINED_FUNCTION_33_9();
      *(_WORD *)(v74 + 14) = 2080;
      LOBYTE(v106) = v96;
      uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallAVMode?);
      uint64_t v84 = String.init<A>(describing:)(&v106, v83);
      uint64_t v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107, v74 + 16);
      LOBYTE(v66) = v100;
      swift_bridgeObjectRelease();
      os_log_t v86 = v97;
      _os_log_impl( &dword_0,  v97,  (os_log_type_t)v98,  "#OngoingCallOfferOptions isFTAudio: %{BOOL}d isFTVideo %{BOOL}d requestedAVMode: %s",  (uint8_t *)v74,  0x18u);
      uint64_t v87 = v99;
      swift_arrayDestroy(v99, 1LL);
      OUTLINED_FUNCTION_0_2(v87);
      OUTLINED_FUNCTION_0_2(v74);
    }

    else
    {

      OUTLINED_FUNCTION_33_9();
    }

    char v88 = (v101 != (_BYTE *)&dword_0 + 2) | ~(_BYTE)v66 | v60;
    uint64_t v89 = v102;
    if ((v88 & 1) == 0) {
      specialized Set._Variant.insert(_:)(v107, 0LL);
    }
    char v90 = (*(uint64_t (**)(uint64_t))(v104 + 192))(v103);
    v89(v9, a1, v6);
    if ((v90 & 1) != 0)
    {
      uint64_t v91 = (void *)IntentResolutionRecord.intent.getter(v6);
      uint64_t v92 = (char *)[v91 callCapability];

      OUTLINED_FUNCTION_18_14();
      if (v92 == (_BYTE *)&dword_0 + 1)
      {
        uint64_t v93 = 2LL;
LABEL_55:
        specialized Set._Variant.insert(_:)(v107, v93);
        OUTLINED_FUNCTION_33_9();
        return;
      }
    }

    else
    {
      OUTLINED_FUNCTION_18_14();
    }

    uint64_t v93 = 1LL;
    goto LABEL_55;
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v28 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v28, (uint64_t)static Logger.siriPhone);
  os_log_type_t v29 = OUTLINED_FUNCTION_41();
  if (OUTLINED_FUNCTION_10(v29))
  {
    unint64_t v30 = (_WORD *)OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_47(v30);
    OUTLINED_FUNCTION_2_2(&dword_0, v31, v32, "#OngoingCallOfferOptions 3P call only offers endAndNewCall");
    OUTLINED_FUNCTION_0_2((uint64_t)v9);
  }

  specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #2 of static OngoingCallOfferOptions.from(rchRecord:callStateProvider:nlIntent:));
}

PhoneCallFlowDelegatePlugin::OngoingCallOfferOptions_optional __swiftcall OngoingCallOfferOptions.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of OngoingCallOfferOptions.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return (PhoneCallFlowDelegatePlugin::OngoingCallOfferOptions_optional)3;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::OngoingCallOfferOptions_optional)v3;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance OngoingCallOfferOptions( unsigned __int8 *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance OngoingCallOfferOptions()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance OngoingCallOfferOptions(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance OngoingCallOfferOptions(uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::OngoingCallOfferOptions_optional protocol witness for RawRepresentable.init(rawValue:) in conformance OngoingCallOfferOptions@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::OngoingCallOfferOptions_optional *a2@<X8>)
{
  result.int value = OngoingCallOfferOptions.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance OngoingCallOfferOptions@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = OngoingCallOfferOptions.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OngoingCallOfferOptions()
{
  return OngoingCallOfferOptions.rawValue.getter(*v0);
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), a2);
  uint64_t v8 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v14 = *v3;
    *unint64_t v3 = 0x8000000000000000LL;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *unint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(void *)(v10 + 8 * v9) != a2);
  }

  uint64_t result = 0LL;
LABEL_8:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v3 = v2;
  uint64_t v26 = a2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = OUTLINED_FUNCTION_29_3();
    unint64_t v9 = __CocoaSet.member(for:)(v8, v7);
    OUTLINED_FUNCTION_31_2();
    if (v9)
    {
      OUTLINED_FUNCTION_4_1();
      OUTLINED_FUNCTION_31_2();
      uint64_t v24 = v9;
      OUTLINED_FUNCTION_46_5();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v25, &v24, (char *)&type metadata for Swift.AnyObject + 8);
      *a1 = v25;
      swift_unknownObjectRelease(v9);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Bool v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    uint64_t v25 = v22;
    if (*(void *)(v22 + 24) <= *(void *)(v22 + 16))
    {
      OUTLINED_FUNCTION_29_3();
      specialized _NativeSet.resize(capacity:)();
      id v23 = v25;
    }

    else
    {
      id v23 = v22;
      OUTLINED_FUNCTION_29_3();
    }

    specialized _NativeSet._unsafeInsertNew(_:)(a2, v23);
    *unint64_t v3 = v23;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }

  else
  {
    uint64_t v10 = *(void *)(v6 + 40);
    uint64_t v11 = OUTLINED_FUNCTION_46_5();
    lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type App and conformance App,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  (uint64_t)&protocol conformance descriptor for App);
    uint64_t v13 = v12;
    swift_bridgeObjectRetain();
    dispatch thunk of Hashable._rawHashValue(seed:)(v10, v11, v13);
    OUTLINED_FUNCTION_32_9();
    uint64_t v16 = v15 & ~v14;
    if (((*(void *)(v6 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
    {
      os_log_type_t v17 = ~v14;
      lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type App and conformance App,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  (uint64_t)&protocol conformance descriptor for App);
      while (1)
      {
        uint64_t v25 = *(void *)(*(void *)(v6 + 48) + 8 * v16);
        if ((dispatch thunk of static Equatable.== infix(_:_:)(&v25, &v26, v11) & 1) != 0) {
          break;
        }
        uint64_t v16 = (v16 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0) {
          goto LABEL_11;
        }
      }

      OUTLINED_FUNCTION_31_2();
      OUTLINED_FUNCTION_4_1();
      *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v16);
      swift_retain();
      return 0LL;
    }

BOOL specialized Set._Variant.insert(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  OUTLINED_FUNCTION_12_20(*(void *)(*v2 + 40LL), a2);
  Hasher._combine(_:)(0LL);
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_32_9();
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = (1LL << v6) & *(void *)(v3 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56);
  if (!v7)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    uint64_t v10 = *v2;
    *Swift::String v2 = 0x8000000000000000LL;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v6, isUniquelyReferenced_nonNull_native);
    *Swift::String v2 = v10;
    swift_bridgeObjectRelease();
  }

  return v7 == 0;
}

uint64_t specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease(a1);
    return (uint64_t)&_swiftEmptySetSingleton;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<App>);
  uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
  uint64_t v24 = v4;
  uint64_t v5 = __CocoaSet.makeIterator()(a1);
  uint64_t v6 = __CocoaSet.Iterator.next()(v5);
  if (!v6)
  {
LABEL_16:
    swift_release(v5);
    return v4;
  }

  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for App(0LL);
  while (1)
  {
    uint64_t v22 = v7;
    swift_dynamicCast(&v23, &v22, (char *)&type metadata for Swift.AnyObject + 8);
    uint64_t v4 = v24;
    if (*(void *)(v24 + 24) <= *(void *)(v24 + 16))
    {
      specialized _NativeSet.resize(capacity:)();
      uint64_t v4 = v24;
    }

    uint64_t v9 = v23;
    uint64_t v22 = v23;
    uint64_t v10 = *(void *)(v4 + 40);
    lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type App and conformance App,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  (uint64_t)&protocol conformance descriptor for App);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v10, v8, v11);
    uint64_t v13 = v4 + 56;
    uint64_t v14 = -1LL << *(_BYTE *)(v4 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1LL << v15) & ~*(void *)(v4 + 56 + 8 * (v15 >> 6))) == 0) {
      break;
    }
    unint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v4 + 56 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_15:
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    *(void *)(*(void *)(v4 + 48) + 8 * v17) = v9;
    ++*(void *)(v4 + 16);
    uint64_t v7 = __CocoaSet.Iterator.next()(result);
    if (!v7) {
      goto LABEL_16;
    }
  }

  char v18 = 0;
  unint64_t v19 = (unint64_t)(63 - v14) >> 6;
  while (++v16 != v19 || (v18 & 1) == 0)
  {
    BOOL v20 = v16 == v19;
    if (v16 == v19) {
      unint64_t v16 = 0LL;
    }
    v18 |= v20;
    uint64_t v21 = *(void *)(v13 + 8 * v16);
    if (v21 != -1)
    {
      unint64_t v17 = __clz(__rbit64(~v21)) + (v16 << 6);
      goto LABEL_15;
    }
  }

  __break(1u);
  return result;
}

void specialized _NativeSet._unsafeInsertNew(_:)(char a1, uint64_t a2)
{
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x654E646E41646E65LL;
    }
    else {
      uint64_t v3 = 0x4E646E41646C6F68LL;
    }
    if (a1 == 1) {
      unint64_t v4 = 0xED00006C6C614377LL;
    }
    else {
      unint64_t v4 = 0xEE006C6C61437765LL;
    }
  }

  else
  {
    unint64_t v4 = 0xE300000000000000LL;
    uint64_t v3 = 6579297LL;
  }

  String.hash(into:)(v9, v3, v4);
  OUTLINED_FUNCTION_62();
  Swift::Int v5 = OUTLINED_FUNCTION_11_17();
  unint64_t v6 = OUTLINED_FUNCTION_0_20(v5);
  unint64_t v7 = OUTLINED_FUNCTION_1_24(v6);
  *(_BYTE *)(v8 + v7) = a1;
  OUTLINED_FUNCTION_25_12();
  OUTLINED_FUNCTION_17_18();
}

void specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    OUTLINED_FUNCTION_45_4();
    swift_bridgeObjectRetain();
    String.hash(into:)(v10, a1, a2);
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    OUTLINED_FUNCTION_47_5();
  }

  Swift::Int v5 = OUTLINED_FUNCTION_11_17();
  unint64_t v6 = OUTLINED_FUNCTION_0_20(v5);
  unint64_t v7 = OUTLINED_FUNCTION_1_24(v6);
  uint64_t v9 = (void *)(v8 + 16 * v7);
  *uint64_t v9 = a1;
  v9[1] = a2;
  OUTLINED_FUNCTION_25_12();
  OUTLINED_FUNCTION_17_18();
}

void specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  uint64_t v4 = OUTLINED_FUNCTION_46_5();
  lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type App and conformance App,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  (uint64_t)&protocol conformance descriptor for App);
  uint64_t v6 = dispatch thunk of Hashable._rawHashValue(seed:)(v3, v4, v5);
  unint64_t v7 = OUTLINED_FUNCTION_0_20(v6);
  unint64_t v8 = OUTLINED_FUNCTION_1_24(v7);
  *(void *)(v9 + 8 * v8) = a1;
  OUTLINED_FUNCTION_25_12();
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, char a2)
{
  unint64_t v3 = result;
  unint64_t v4 = *(void *)(*v2 + 16);
  unint64_t v5 = *(void *)(*v2 + 24);
  if (v5 <= v4 || (a2 & 1) == 0)
  {
    if ((a2 & 1) != 0)
    {
      specialized _NativeSet.resize(capacity:)();
      goto LABEL_8;
    }

    if (v5 <= v4)
    {
      specialized _NativeSet.copyAndResize(capacity:)(v4 + 1);
LABEL_8:
      uint64_t v6 = *v2;
      Hasher.init(_seed:)(v11, *(void *)(*v2 + 40));
      Hasher._combine(_:)(0LL);
      uint64_t result = Hasher._finalize()();
      unint64_t v3 = result & ~(-1LL << *(_BYTE *)(v6 + 32));
      if (((*(void *)(v6 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v3) & 1) != 0) {
        goto LABEL_12;
      }
      goto LABEL_9;
    }

    uint64_t result = (uint64_t)specialized _NativeSet.copy()();
  }

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v14 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    *(void *)(*(void *)(v4 + 48) + 8 * i) = *(void *)(*(void *)(v2 + 48) + 8 * i);
    if (v12) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  unint64_t v12 = -1LL;
  if (v10 < 64) {
    unint64_t v12 = ~(-1LL << v10);
  }
  int64_t v13 = v12 & v11;
  unint64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    BOOL v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    *uint64_t v22 = *v20;
    v22[1] = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain(v21);
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    unint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    int64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      int64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        int64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OngoingCallOfferOptions>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v14 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    *(_BYTE *)(*(void *)(v4 + 48) + i) = *(_BYTE *)(*(void *)(v2 + 48) + i);
    if (v12) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  unint64_t v12 = -1LL;
  if (v10 < 64) {
    unint64_t v12 = ~(-1LL << v10);
  }
  int64_t v13 = v12 & v11;
  unint64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    *(_OWORD *)(*(void *)(v4 + 48) + 16 * i) = *(_OWORD *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    unint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    int64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      int64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        int64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<App>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  unint64_t v12 = -1LL;
  if (v10 < 64) {
    unint64_t v12 = ~(-1LL << v10);
  }
  int64_t v13 = v12 & v11;
  unint64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    *(void *)(*(void *)(v4 + 48) + 8 * i) = *(void *)(*(void *)(v2 + 48) + 8 * i);
    uint64_t result = (void *)swift_retain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    unint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    int64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      int64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        int64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)
                 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?>);
  unint64_t v5 = *v0;
  uint64_t v6 = static _SetStorage.copy(original:)(*v0);
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release(v5);
LABEL_30:
    *uint64_t v1 = v7;
    return result;
  }

  uint64_t v24 = v1;
  uint64_t result = (void *)(v6 + 56);
  int64_t v9 = v5 + 56;
  uint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  unint64_t v12 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  int64_t v13 = 1LL << *(_BYTE *)(v5 + 32);
  unint64_t v14 = -1LL;
  if (v13 < 64) {
    unint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v5 + 56);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  if (!v15) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v17 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v17 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v12 << 6))
  {
    uint64_t v22 = *(void *)(v2 + 72) * i;
    outlined init with copy of Result<TemplatingResult, Error>( *(void *)(v5 + 48) + v22,  (uint64_t)v4,  &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    uint64_t result = (void *)outlined init with take of UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?( (uint64_t)v4,  *(void *)(v7 + 48) + v22);
    if (v15) {
      goto LABEL_11;
    }
LABEL_12:
    unint64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v19 >= v16) {
      goto LABEL_28;
    }
    BOOL v20 = *(void *)(v9 + 8 * v19);
    ++v12;
    if (!v20)
    {
      unint64_t v12 = v19 + 1;
      if (v19 + 1 >= v16) {
        goto LABEL_28;
      }
      BOOL v20 = *(void *)(v9 + 8 * v12);
      if (!v20)
      {
        unint64_t v12 = v19 + 2;
        if (v19 + 2 >= v16) {
          goto LABEL_28;
        }
        BOOL v20 = *(void *)(v9 + 8 * v12);
        if (!v20) {
          break;
        }
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SharedNeedsValueContext.NeedsValueCase>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  if (v12) {
    goto LABEL_24;
  }
  while (1)
  {
    unint64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v14 >= v13) {
      goto LABEL_26;
    }
    unint64_t v12 = *(void *)(v6 + 8 * v14);
    ++v9;
    if (!v12)
    {
      int64_t v9 = v14 + 1;
      if (v14 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v12 = *(void *)(v6 + 8 * v9);
      if (!v12)
      {
        int64_t v9 = v14 + 2;
        if (v14 + 2 >= v13) {
          goto LABEL_26;
        }
        unint64_t v12 = *(void *)(v6 + 8 * v9);
        if (!v12) {
          break;
        }
      }
    }

    do
LABEL_24:
      v12 &= v12 - 1;
    while (v12);
  }

  unint64_t v15 = v14 + 3;
  if (v15 >= v13) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v6 + 8 * v15);
  if (v12)
  {
    int64_t v9 = v15;
    goto LABEL_24;
  }

  while (1)
  {
    int64_t v9 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v12 = *(void *)(v6 + 8 * v9);
    ++v15;
    if (v12) {
      goto LABEL_24;
    }
  }

LABEL_32:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    uint64_t v10 = (v21 - 1) & v21;
    int64_t v16 = __clz(__rbit64(v21)) + (v9 << 6);
    goto LABEL_33;
  }

  __break(1u);
}

    uint64_t v11 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v10 << 6);
    goto LABEL_33;
  }

  __break(1u);
}

  OUTLINED_FUNCTION_69_12(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_callProvider);
  if ((v21 & 1) != 0)
  {
LABEL_14:
    OUTLINED_FUNCTION_49_19(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_displayName);
    if ((v113 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }

        char v88 = v0[41];
        uint64_t v87 = v0[42];
        uint64_t v89 = v0[32];
        uint64_t v103 = v0[34];
        outlined init with copy of CommonDirectAction?( v106,  v89,  &demangling cache variable for type metadata for ConfirmationResponse?);
        char v90 = ParameterResolutionRecord.intent.getter(v87);
        NeedsConfirmationAnswer.init(answeredValue:updatedIntent:)(v89, v90, v88);

        OUTLINED_FUNCTION_10_0();
        OUTLINED_FUNCTION_92_0();
        uint64_t v91 = OUTLINED_FUNCTION_14_3();
        OUTLINED_FUNCTION_36_41(v91, v92, v93, v94, v95, v96, v97, v98, v100, v101, v103);
        swift_task_dealloc();
        OUTLINED_FUNCTION_25();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v99 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
        return v99();
      }

      os_log_type_t v52 = v0[27];
      uint64_t v51 = v0[28];
      outlined destroy of UUID?(v0[34], &demangling cache variable for type metadata for ConfirmationResponse?);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v52);
    }

    outlined destroy of UUID?( v0[31],  &demangling cache variable for type metadata for (ConfirmationResponse?, ConfirmationResponse?));
    goto LABEL_22;
  }

  Swift::Bool v34 = (os_log_s *)v0[26];
  uint64_t v35 = (*(uint64_t (**)(os_log_s *, os_log_s *, void))(v0[25] + 16LL))(v34, v109, v0[24]);
  Logger.logObject.getter(v35);
  os_log_type_t v36 = OUTLINED_FUNCTION_24();
  if (OUTLINED_FUNCTION_27_1(v36))
  {
    uint64_t v37 = v0 + 17;
    uint64_t v38 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v39 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v110 = v39;
    *(_DWORD *)uint64_t v38 = 136315138;
    *uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000A2LL, 0x8000000000352990LL, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v37, v108, v38 + 4);
    OUTLINED_FUNCTION_57_0(&dword_0, v34, (os_log_type_t)v29, "%s", v38);
    OUTLINED_FUNCTION_17_0(v39);
    OUTLINED_FUNCTION_0_2(v39);
    OUTLINED_FUNCTION_0_2((uint64_t)v38);
  }

  static SiriKitLifecycle._logCrashToEventBus(_:)(0xD0000000000000A2LL, 0x8000000000352990LL);
  return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD0000000000000A2LL,  0x8000000000352990LL,  "PhoneCallFlowDelegatePlugin/PhoneLog.swift",  42LL,  2LL);
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = result;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v28 = v2;
  int64_t v7 = 0LL;
  uint64_t v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 56;
  if (!v11) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v14 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    uint64_t v19 = *(void *)(*(void *)(v3 + 48) + 8 * i);
    uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v19);
    uint64_t v20 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v13 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v13 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v13 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    *(void *)(*(void *)(v6 + 48) + 8 * v2__swift_destroy_boxed_opaque_existential_1(v0 + 3) = v19;
    ++*(void *)(v6 + 16);
    if (v11) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v16 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= v12) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v7;
    if (!v17)
    {
      int64_t v7 = v16 + 1;
      if (v16 + 1 >= v12) {
        goto LABEL_35;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v7);
      if (!v17)
      {
        int64_t v7 = v16 + 2;
        if (v16 + 2 >= v12) {
          goto LABEL_35;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v7);
        if (!v17) {
          break;
        }
      }
    }

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<App>);
  unint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  int64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v31 = v2;
  uint64_t v32 = v3 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  uint64_t v9 = v8 & *(void *)(v3 + 56);
  uint64_t v33 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0LL;
  if (!v9) {
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    int64_t v18 = *(void *)(*(void *)(v3 + 48) + 8 * i);
    uint64_t v19 = *(void *)(v6 + 40);
    uint64_t v20 = type metadata accessor for App(0LL);
    lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type App and conformance App,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  (uint64_t)&protocol conformance descriptor for App);
    unint64_t v22 = v21;
    swift_retain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v19, v20, v22);
    unint64_t v23 = -1LL << *(_BYTE *)(v6 + 32);
    char v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6))) == 0)
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v23) >> 6;
      while (++v25 != v28 || (v27 & 1) == 0)
      {
        os_log_type_t v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0LL;
        }
        v27 |= v29;
        unint64_t v30 = *(void *)(v10 + 8 * v25);
        if (v30 != -1)
        {
          BOOL v26 = __clz(__rbit64(~v30)) + (v25 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    BOOL v26 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v10 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
    *(void *)(*(void *)(v6 + 48) + 8 * v26) = v18;
    ++*(void *)(v6 + 16);
    if (v9) {
      goto LABEL_9;
    }
LABEL_10:
    unint64_t v15 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      goto LABEL_39;
    }
    if (v15 >= v33) {
      goto LABEL_35;
    }
    int64_t v16 = *(void *)(v32 + 8 * v15);
    ++v12;
    if (!v16)
    {
      int64_t v12 = v15 + 1;
      if (v15 + 1 >= v33) {
        goto LABEL_35;
      }
      int64_t v16 = *(void *)(v32 + 8 * v12);
      if (!v16)
      {
        int64_t v12 = v15 + 2;
        if (v15 + 2 >= v33) {
          goto LABEL_35;
        }
        int64_t v16 = *(void *)(v32 + 8 * v12);
        if (!v16) {
          break;
        }
      }
    }

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t i;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  void v55[9];
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues(0LL);
  int v49 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v48 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)
                 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v46 - v9;
  unint64_t v11 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    int64_t v12 = a1;
  }
  else {
    int64_t v12 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?>);
  uint64_t v13 = static _SetStorage.resize(original:capacity:move:)(v11, v12, 0LL);
  unint64_t v14 = v13;
  if (!*(void *)(v11 + 16))
  {
    uint64_t result = swift_release(v11);
LABEL_40:
    *uint64_t v2 = v14;
    return result;
  }

  uint64_t v47 = v2;
  unint64_t v15 = 1LL << *(_BYTE *)(v11 + 32);
  int64_t v16 = *(void *)(v11 + 56);
  uint64_t v50 = v11 + 56;
  if (v15 < 64) {
    unint64_t v17 = ~(-1LL << v15);
  }
  else {
    unint64_t v17 = -1LL;
  }
  int64_t v18 = v17 & v16;
  uint64_t v51 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v19 = v13 + 56;
  uint64_t result = swift_retain();
  unint64_t v21 = 0LL;
  if (!v18) {
    goto LABEL_10;
  }
LABEL_9:
  char v53 = v21;
  uint64_t v54 = (v18 - 1) & v18;
  for (unint64_t i = __clz(__rbit64(v18)) | (v21 << 6); ; unint64_t i = __clz(__rbit64(v24)) + (v25 << 6))
  {
    uint64_t v27 = *(void *)(v11 + 48);
    os_log_type_t v52 = *(void *)(v6 + 72);
    outlined init with copy of Result<TemplatingResult, Error>( v27 + v52 * i,  (uint64_t)v10,  &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    Hasher.init(_seed:)(v55, *(void *)(v14 + 40));
    outlined init with copy of Result<TemplatingResult, Error>( (uint64_t)v10,  (uint64_t)v8,  &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1LL, v4) == 1)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      uint64_t v28 = v10;
      os_log_type_t v29 = v14;
      unint64_t v30 = v6;
      uint64_t v31 = v49;
      uint64_t v32 = v11;
      uint64_t v33 = v4;
      Swift::Bool v34 = v48;
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v48, v8, v33);
      Hasher._combine(_:)(1u);
      lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues);
      dispatch thunk of Hashable.hash(into:)(v55, v33, v35);
      os_log_type_t v36 = *(void (**)(char *, uint64_t))(v31 + 8);
      uint64_t v6 = v30;
      unint64_t v14 = v29;
      uint64_t v10 = v28;
      uint64_t v37 = v34;
      uint64_t v4 = v33;
      unint64_t v11 = v32;
      v36(v37, v4);
    }

    uint64_t result = Hasher._finalize()();
    uint64_t v38 = -1LL << *(_BYTE *)(v14 + 32);
    uint64_t v39 = result & ~v38;
    uint64_t v40 = v39 >> 6;
    if (((-1LL << v39) & ~*(void *)(v19 + 8 * (v39 >> 6))) == 0)
    {
      uint64_t v42 = 0;
      uint64_t v43 = (unint64_t)(63 - v38) >> 6;
      int64_t v18 = v54;
      while (++v40 != v43 || (v42 & 1) == 0)
      {
        uint64_t v44 = v40 == v43;
        if (v40 == v43) {
          uint64_t v40 = 0LL;
        }
        v42 |= v44;
        uint64_t v45 = *(void *)(v19 + 8 * v40);
        if (v45 != -1)
        {
          uint64_t v41 = __clz(__rbit64(~v45)) + (v40 << 6);
          goto LABEL_36;
        }
      }

      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }

    uint64_t v41 = __clz(__rbit64((-1LL << v39) & ~*(void *)(v19 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0LL;
    int64_t v18 = v54;
LABEL_36:
    *(void *)(v19 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v41;
    uint64_t result = outlined init with take of UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?( (uint64_t)v10,  *(void *)(v14 + 48) + v41 * v52);
    ++*(void *)(v14 + 16);
    unint64_t v21 = v53;
    if (v18) {
      goto LABEL_9;
    }
LABEL_10:
    unint64_t v23 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      goto LABEL_42;
    }
    if (v23 >= v51) {
      goto LABEL_38;
    }
    char v24 = *(void *)(v50 + 8 * v23);
    unint64_t v25 = v21 + 1;
    if (!v24)
    {
      unint64_t v25 = v21 + 2;
      if (v21 + 2 >= v51) {
        goto LABEL_38;
      }
      char v24 = *(void *)(v50 + 8 * v25);
      if (!v24)
      {
        unint64_t v25 = v21 + 3;
        if (v21 + 3 >= v51) {
          goto LABEL_38;
        }
        char v24 = *(void *)(v50 + 8 * v25);
        if (!v24) {
          break;
        }
      }
    }

LABEL_40:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  if (v8 < 0) {
    unint64_t v30 = v8;
  }
  else {
    unint64_t v30 = v8 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  unint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v30);
  OUTLINED_FUNCTION_87_0();
LABEL_8:
  int64_t v12 = v11 - v3;
  if (__OFSUB__(v11, v3))
  {
    __break(1u);
  }

  else
  {
    int64_t v7 = *v4;
    uint64_t v33 = v3;
    if (!((unint64_t)*v4 >> 62))
    {
      uint64_t v13 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8LL));
      goto LABEL_11;
    }
  }

  OUTLINED_FUNCTION_128();
  uint64_t v13 = OUTLINED_FUNCTION_10_29();
  OUTLINED_FUNCTION_23_5();
LABEL_11:
  unint64_t v14 = v13 + v12;
  if (__OFADD__(v13, v12))
  {
    __break(1u);
LABEL_47:
    if (v7 < 0) {
      uint64_t v31 = v7;
    }
    else {
      uint64_t v31 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_128();
    unint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v31);
    OUTLINED_FUNCTION_23_5();
    int64_t v7 = *v4;
    goto LABEL_19;
  }

  int64_t v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *uint64_t v4 = v7;
  uint64_t v13 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000LL) == 0 && (v7 & 0x4000000000000000LL) == 0)
  {
    int64_t v16 = v7 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v13 = 1LL;
  }

  uint64_t v32 = v6;
  uint64_t v6 = v5;
  unint64_t v5 = v12;
  int64_t v12 = v11;
  unint64_t v11 = v9;
  uint64_t v9 = v8;
  unint64_t v17 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8LL));
LABEL_19:
  if (v17 <= v14) {
    unint64_t v17 = v14;
  }
  OUTLINED_FUNCTION_128();
  *uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v13, v17, 1LL, v7);
  swift_bridgeObjectRelease();
  int64_t v16 = *v4 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v8 = v9;
  uint64_t v9 = v11;
  unint64_t v11 = v12;
  int64_t v12 = v5;
  unint64_t v5 = v6;
  uint64_t v6 = v32;
LABEL_22:
  int64_t v18 = v16 + 32;
  uint64_t v19 = v16 + 32 + 8 * v6;
  type metadata accessor for INPerson();
  uint64_t result = swift_arrayDestroy(v19, v33);
  if (!v12) {
    goto LABEL_30;
  }
  Swift::Bool v34 = v12;
  if ((unint64_t)*v4 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v21 = OUTLINED_FUNCTION_10_29();
    swift_bridgeObjectRelease();
  }

  else
  {
    unint64_t v21 = *(void *)((char *)&dword_10 + (*v4 & 0xFFFFFFFFFFFFF8LL));
  }

  if (__OFSUB__(v21, v5))
  {
    __break(1u);
    goto LABEL_53;
  }

  uint64_t result = specialized UnsafeMutablePointer.moveInitialize(from:count:)(v18 + 8 * v5, v21 - v5, v19 + 8 * v11);
  if ((unint64_t)*v4 >> 62)
  {
LABEL_53:
    swift_bridgeObjectRetain();
    unint64_t v22 = OUTLINED_FUNCTION_17_12();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_28;
  }

  unint64_t v22 = *(void *)((char *)&dword_10 + (*v4 & 0xFFFFFFFFFFFFF8LL));
LABEL_28:
  if (__OFADD__(v22, v34))
  {
    __break(1u);
    goto LABEL_55;
  }

  *(void *)((char *)&dword_10 + (*v4 & 0xFFFFFFFFFFFFF8LL)) = v22 + v34;
LABEL_30:
  if (v11 < 1)
  {
LABEL_35:
    BOOL v26 = OUTLINED_FUNCTION_87_0();
    return specialized Array._endMutation()(v26, v27, v28, v29);
  }

  if (v9)
  {
    unint64_t v23 = swift_bridgeObjectRetain();
    specialized _copyCollectionToContiguousArray<A>(_:)(v23);
    unint64_t v25 = v24;
    OUTLINED_FUNCTION_87_0();
    specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)( v25 + 32,  *(void *)(v25 + 16),  v11,  v19);
    swift_release(v25);
    goto LABEL_35;
  }

  if (*(void *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFFF8LL)) == v11)
  {
    swift_arrayInitWithCopy(v19);
    goto LABEL_35;
  }

  uint64_t v43 = "Range requires lowerBound <= upperBound";
  uint64_t v44 = "Swift/Range.swift";
  uint64_t v45 = 39LL;
  uint64_t v46 = 17LL;
LABEL_42:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v43, v45, 2LL, v44, v46);
  __break(1u);
  return result;
}

  if (v51)
  {
    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v46 + v49[14], v47);
    goto LABEL_46;
  }

      uint64_t v50 = v10;
LABEL_41:
      swift_release(v50);
      a1 = v56;
      if (v55 == ++v9)
      {
        swift_bridgeObjectRelease(v56);
        return v62;
      }
    }
  }

  __break(1u);
  return result;
}

      uint64_t v10 = v12;
      if ((v23 & 1) != 0)
      {
        unint64_t v11 = v124;
        if (v8 < v124) {
          goto LABEL_176;
        }
        if (v124 >= v8)
        {
          uint64_t v3 = v125;
        }

        else
        {
          uint64_t v37 = (uint64_t *)(v120 + 8 * v8);
          uint64_t v38 = v8;
          uint64_t v39 = v124;
          uint64_t v40 = (uint64_t *)(v9 + 8 * v124);
          uint64_t v3 = v125;
          do
          {
            if (v39 != --v38)
            {
              if (!v9) {
                goto LABEL_182;
              }
              uint64_t v41 = *v40;
              *uint64_t v40 = *v37;
              *uint64_t v37 = v41;
            }

            ++v39;
            --v37;
            ++v40;
          }

          while (v39 < v38);
        }
      }

      else
      {
        unint64_t v11 = v124;
        uint64_t v3 = v125;
      }
    }

    if (v8 < v3)
    {
      if (__OFSUB__(v8, v11)) {
        goto LABEL_174;
      }
      if (v8 - v11 < v122)
      {
        if (__OFADD__(v11, v122)) {
          goto LABEL_177;
        }
        if (v11 + v122 >= v3) {
          uint64_t v42 = v3;
        }
        else {
          uint64_t v42 = v11 + v122;
        }
        if (v42 < v11) {
          goto LABEL_178;
        }
        if (v8 != v42)
        {
          uint64_t v119 = v10;
          uint64_t v43 = (void *)(v120 + 8 * v8);
          uint64_t v123 = v42;
          do
          {
            uint64_t v44 = *(void *)(v9 + 8 * v8);
            uint64_t v45 = v11;
            uint64_t v126 = v43;
            uint64_t v46 = v43;
            while (1)
            {
              uint64_t v47 = *v46;
              swift_retain();
              swift_retain();
              uint64_t v48 = App.appIdentifier.getter();
              uint64_t v50 = v49 ? v48 : 0LL;
              uint64_t v51 = v49 ? v49 : 0xE000000000000000LL;
              os_log_type_t v52 = App.appIdentifier.getter();
              if (v53)
              {
                uint64_t v54 = v53;
              }

              else
              {
                os_log_type_t v52 = 0LL;
                uint64_t v54 = 0xE000000000000000LL;
              }

              if (v52 == v50 && v54 == v51) {
                break;
              }
              unint64_t v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v54, v50, v51, 1LL);
              swift_release(v44);
              swift_release(v47);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v56 & 1) == 0) {
                goto LABEL_80;
              }
              uint64_t v9 = v128;
              if (!v128) {
                goto LABEL_180;
              }
              uint64_t v57 = *v46;
              uint64_t v44 = v46[1];
              uint64_t *v46 = v44;
              v46[1] = v57;
              --v46;
              if (v8 == ++v45) {
                goto LABEL_81;
              }
            }

            swift_release(v44);
            swift_release(v47);
            swift_bridgeObjectRelease_n(v51, 2LL);
LABEL_80:
            uint64_t v9 = v128;
LABEL_81:
            ++v8;
            uint64_t v43 = v126 + 1;
            unint64_t v11 = v124;
          }

          while (v8 != v123);
          uint64_t v8 = v123;
          uint64_t v10 = v119;
        }
      }
    }

    if (v8 < v11) {
      goto LABEL_173;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v10 + 2) + 1LL,  1,  v10);
    }
    char v59 = *((void *)v10 + 2);
    char v58 = *((void *)v10 + 3);
    char v60 = v59 + 1;
    uint64_t v9 = v128;
    if (v59 >= v58 >> 1)
    {
      uint64_t v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v58 > 1),  v59 + 1,  1,  v10);
      uint64_t v9 = v128;
      uint64_t v10 = v108;
    }

    *((void *)v10 + 2) = v60;
    char v61 = v10 + 32;
    uint64_t v62 = &v10[16 * v59 + 32];
    *(void *)uint64_t v62 = v11;
    *((void *)v62 + 1) = v8;
    if (v59) {
      break;
    }
    char v60 = 1LL;
LABEL_131:
    uint64_t v3 = v125;
    if (v8 >= v125) {
      goto LABEL_140;
    }
  }

  while (1)
  {
    uint64_t v63 = v60 - 1;
    if (v60 >= 4)
    {
      uint64_t v68 = &v61[16 * v60];
      uint64_t v69 = *((void *)v68 - 8);
      uint64_t v70 = *((void *)v68 - 7);
      uint64_t v74 = __OFSUB__(v70, v69);
      os_log_type_t v71 = v70 - v69;
      if (v74) {
        goto LABEL_158;
      }
      uint64_t v73 = *((void *)v68 - 6);
      int v72 = *((void *)v68 - 5);
      uint64_t v74 = __OFSUB__(v72, v73);
      int v66 = v72 - v73;
      uint64_t v67 = v74;
      if (v74) {
        goto LABEL_159;
      }
      uint64_t v75 = v60 - 2;
      char v76 = &v61[16 * v60 - 32];
      uint64_t v78 = *(void *)v76;
      uint64_t v77 = *((void *)v76 + 1);
      uint64_t v74 = __OFSUB__(v77, v78);
      uint64_t v79 = v77 - v78;
      if (v74) {
        goto LABEL_160;
      }
      uint64_t v74 = __OFADD__(v66, v79);
      uint64_t v80 = v66 + v79;
      if (v74) {
        goto LABEL_162;
      }
      if (v80 >= v71)
      {
        int v98 = &v61[16 * v63];
        int v100 = *(void *)v98;
        uint64_t v99 = *((void *)v98 + 1);
        uint64_t v74 = __OFSUB__(v99, v100);
        uint64_t v101 = v99 - v100;
        if (v74) {
          goto LABEL_168;
        }
        uint64_t v91 = v66 < v101;
        goto LABEL_120;
      }
    }

    else
    {
      if (v60 != 3)
      {
        uint64_t v92 = *((void *)v10 + 4);
        uint64_t v93 = *((void *)v10 + 5);
        uint64_t v74 = __OFSUB__(v93, v92);
        unint64_t v85 = v93 - v92;
        os_log_t v86 = v74;
        goto LABEL_114;
      }

      uint64_t v65 = *((void *)v10 + 4);
      uint64_t v64 = *((void *)v10 + 5);
      uint64_t v74 = __OFSUB__(v64, v65);
      int v66 = v64 - v65;
      uint64_t v67 = v74;
    }

    if ((v67 & 1) != 0) {
      goto LABEL_161;
    }
    uint64_t v75 = v60 - 2;
    uint64_t v81 = &v61[16 * v60 - 32];
    uint64_t v83 = *(void *)v81;
    uint64_t v82 = *((void *)v81 + 1);
    uint64_t v84 = __OFSUB__(v82, v83);
    unint64_t v85 = v82 - v83;
    os_log_t v86 = v84;
    if (v84) {
      goto LABEL_163;
    }
    uint64_t v87 = &v61[16 * v63];
    uint64_t v89 = *(void *)v87;
    char v88 = *((void *)v87 + 1);
    uint64_t v74 = __OFSUB__(v88, v89);
    char v90 = v88 - v89;
    if (v74) {
      goto LABEL_165;
    }
    if (__OFADD__(v85, v90)) {
      goto LABEL_167;
    }
    if (v85 + v90 >= v66)
    {
      uint64_t v91 = v66 < v90;
LABEL_120:
      if (v91) {
        uint64_t v63 = v75;
      }
      goto LABEL_122;
    }

  OUTLINED_FUNCTION_49_19(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_openCallRecordAction);
  if ((v120 & 1) != 0)
  {
LABEL_22:
    OUTLINED_FUNCTION_49_19(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_callDuration);
    if ((v121 & 1) == 0) {
      goto LABEL_23;
    }
    goto LABEL_42;
  }

    if (v13 < v3)
    {
      if (__OFSUB__(v13, v8)) {
        goto LABEL_157;
      }
      if (v13 - v8 < v120)
      {
        if (__OFADD__(v8, v120)) {
          goto LABEL_160;
        }
        if (v8 + v120 >= v3) {
          uint64_t v39 = v3;
        }
        else {
          uint64_t v39 = v8 + v120;
        }
        if (v39 < v8)
        {
LABEL_161:
          __break(1u);
          goto LABEL_162;
        }

        if (v13 != v39)
        {
          v122 = v10;
          v124 = v39;
          uint64_t v40 = (uint64_t *)(v118 + 8 * v13);
          do
          {
            uint64_t v41 = *(void *)(v9 + 8 * v13);
            uint64_t v42 = v40;
            while (1)
            {
              uint64_t v43 = v13;
              uint64_t v44 = *v42;
              uint64_t v45 = objc_opt_self(v11[422]);
              if (swift_dynamicCastObjCClass(v41, v45))
              {
                uint64_t v46 = 0LL;
              }

              else
              {
                uint64_t v47 = objc_opt_self(v12[440]);
                uint64_t v46 = swift_dynamicCastObjCClass(v41, v47) ? 1LL : 2LL;
              }

              uint64_t v48 = objc_opt_self(v11[422]);
              if (swift_dynamicCastObjCClass(v44, v48)) {
                break;
              }
              int v49 = objc_opt_self(v12[440]);
              if (swift_dynamicCastObjCClass(v44, v49))
              {
                uint64_t v13 = v43;
                if (v46) {
                  goto LABEL_65;
                }
              }

              else
              {
                uint64_t v13 = v43;
                if (v46 > 1) {
                  goto LABEL_65;
                }
              }

              if (!v9) {
                goto LABEL_163;
              }
              uint64_t v50 = *v42;
              uint64_t v41 = v42[1];
              *uint64_t v42 = v41;
              v42[1] = v50;
              --v42;
              if (v13 == ++v8) {
                goto LABEL_65;
              }
            }

            uint64_t v13 = v43;
LABEL_65:
            ++v13;
            ++v40;
            uint64_t v8 = v125;
          }

          while (v13 != v124);
          uint64_t v13 = v124;
          uint64_t v10 = v122;
        }
      }
    }

    if (v13 < v8) {
      goto LABEL_156;
    }
    uint64_t v126 = v13;
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v10 + 2) + 1LL,  1,  v10);
    }
    os_log_type_t v52 = *((void *)v10 + 2);
    uint64_t v51 = *((void *)v10 + 3);
    char v53 = v52 + 1;
    if (v52 >= v51 >> 1) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v51 > 1),  v52 + 1,  1,  v10);
    }
    *((void *)v10 + 2) = v53;
    uint64_t v54 = v10 + 32;
    uint64_t v55 = &v10[16 * v52 + 32];
    *(void *)uint64_t v55 = v8;
    *((void *)v55 + 1) = v126;
    if (!v52)
    {
      char v53 = 1LL;
LABEL_115:
      uint64_t v8 = v126;
      uint64_t v3 = v127;
      if (v126 >= v127) {
        goto LABEL_123;
      }
      continue;
    }

    break;
  }

  while (2)
  {
    unint64_t v56 = v53 - 1;
    if (v53 >= 4)
    {
      char v61 = &v54[16 * v53];
      uint64_t v62 = *((void *)v61 - 8);
      uint64_t v63 = *((void *)v61 - 7);
      uint64_t v67 = __OFSUB__(v63, v62);
      uint64_t v64 = v63 - v62;
      if (v67) {
        goto LABEL_141;
      }
      int v66 = *((void *)v61 - 6);
      uint64_t v65 = *((void *)v61 - 5);
      uint64_t v67 = __OFSUB__(v65, v66);
      char v59 = v65 - v66;
      char v60 = v67;
      if (v67) {
        goto LABEL_142;
      }
      uint64_t v68 = v53 - 2;
      uint64_t v69 = &v54[16 * v53 - 32];
      os_log_type_t v71 = *(void *)v69;
      uint64_t v70 = *((void *)v69 + 1);
      uint64_t v67 = __OFSUB__(v70, v71);
      int v72 = v70 - v71;
      if (v67) {
        goto LABEL_143;
      }
      uint64_t v67 = __OFADD__(v59, v72);
      uint64_t v73 = v59 + v72;
      if (v67) {
        goto LABEL_145;
      }
      if (v73 >= v64)
      {
        uint64_t v91 = &v54[16 * v56];
        uint64_t v93 = *(void *)v91;
        uint64_t v92 = *((void *)v91 + 1);
        uint64_t v67 = __OFSUB__(v92, v93);
        uint64_t v94 = v92 - v93;
        if (v67) {
          goto LABEL_151;
        }
        uint64_t v84 = v59 < v94;
      }

      else
      {
LABEL_86:
        if ((v60 & 1) != 0) {
          goto LABEL_144;
        }
        uint64_t v68 = v53 - 2;
        uint64_t v74 = &v54[16 * v53 - 32];
        char v76 = *(void *)v74;
        uint64_t v75 = *((void *)v74 + 1);
        uint64_t v77 = __OFSUB__(v75, v76);
        uint64_t v78 = v75 - v76;
        uint64_t v79 = v77;
        if (v77) {
          goto LABEL_146;
        }
        uint64_t v80 = &v54[16 * v56];
        uint64_t v82 = *(void *)v80;
        uint64_t v81 = *((void *)v80 + 1);
        uint64_t v67 = __OFSUB__(v81, v82);
        uint64_t v83 = v81 - v82;
        if (v67) {
          goto LABEL_148;
        }
        if (__OFADD__(v78, v83)) {
          goto LABEL_150;
        }
        if (v78 + v83 < v59) {
          goto LABEL_98;
        }
        uint64_t v84 = v59 < v83;
      }

      if (v84) {
        unint64_t v56 = v68;
      }
    }

    else
    {
      if (v53 == 3)
      {
        char v58 = *((void *)v10 + 4);
        uint64_t v57 = *((void *)v10 + 5);
        uint64_t v67 = __OFSUB__(v57, v58);
        char v59 = v57 - v58;
        char v60 = v67;
        goto LABEL_86;
      }

      unint64_t v85 = *((void *)v10 + 4);
      os_log_t v86 = *((void *)v10 + 5);
      uint64_t v67 = __OFSUB__(v86, v85);
      uint64_t v78 = v86 - v85;
      uint64_t v79 = v67;
LABEL_98:
      if ((v79 & 1) != 0) {
        goto LABEL_147;
      }
      uint64_t v87 = &v54[16 * v56];
      uint64_t v89 = *(void *)v87;
      char v88 = *((void *)v87 + 1);
      uint64_t v67 = __OFSUB__(v88, v89);
      char v90 = v88 - v89;
      if (v67) {
        goto LABEL_149;
      }
      if (v90 < v78) {
        goto LABEL_115;
      }
    }

    uint64_t v95 = v56 - 1;
    if (v56 - 1 >= v53)
    {
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }

    if (!v9) {
      goto LABEL_164;
    }
    int v96 = v10;
    os_log_t v97 = v9;
    int v98 = &v54[16 * v95];
    uint64_t v99 = *(void *)v98;
    int v100 = v54;
    uint64_t v101 = v56;
    uint64_t v102 = &v54[16 * v56];
    uint64_t v103 = *((void *)v102 + 1);
    uint64_t v104 = v97;
    specialized _merge<A>(low:mid:high:buffer:by:)( (char *)(v97 + 8LL * *(void *)v98),  (char *)(v97 + 8LL * *(void *)v102),  v97 + 8 * v103,  v128);
    if (!v1)
    {
      if (v103 < v99) {
        goto LABEL_138;
      }
      if (v101 > *((void *)v96 + 2)) {
        goto LABEL_139;
      }
      *(void *)int v98 = v99;
      *(void *)&v100[16 * v95 + 8] = v103;
      uint64_t v105 = *((void *)v96 + 2);
      if (v101 >= v105) {
        goto LABEL_140;
      }
      uint64_t v10 = v96;
      char v53 = v105 - 1;
      memmove(v102, v102 + 16, 16 * (v105 - 1 - v101));
      uint64_t v54 = v100;
      *((void *)v96 + 2) = v105 - 1;
      uint64_t v9 = v104;
      unint64_t v11 = &_sScP7utilityScPvgZ_ptr;
      int64_t v12 = &_sScP7utilityScPvgZ_ptr;
      if (v105 <= 2) {
        goto LABEL_115;
      }
      continue;
    }

    break;
  }

Swift::Int specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    uint64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v33, v20, v21);
    Swift::Int result = Hasher._finalize()();
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v24);
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    unint64_t v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
    *unint64_t v30 = v20;
    v30[1] = v21;
    ++*(void *)(v6 + 16);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= v32) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v32) {
        goto LABEL_35;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v16 + 2;
        if (v16 + 2 >= v32) {
          goto LABEL_35;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v13);
        if (!v17) {
          break;
        }
      }
    }

{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  Swift::Int v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int *v25;
  uint64_t v26[9];
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SharedNeedsValueContext.NeedsValueCase>);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = result;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
    goto LABEL_35;
  }

  unint64_t v24 = v3;
  unint64_t v25 = v2;
  uint64_t v7 = 0LL;
  uint64_t v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    unint64_t v10 = ~(-1LL << v9);
  }
  else {
    unint64_t v10 = -1LL;
  }
  uint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  int64_t v13 = result + 56;
  if (v11)
  {
LABEL_22:
    while (1)
    {
      Hasher.init(_seed:)(v26, *(void *)(v6 + 40));
      Hasher._combine(_:)(0LL);
      Swift::Int result = Hasher._finalize()();
      int64_t v16 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v17 = result & ~v16;
      int64_t v18 = v17 >> 6;
      if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) == 0) {
        break;
      }
      uint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_31:
      v11 &= v11 - 1;
      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      ++*(void *)(v6 + 16);
      if (!v11) {
        goto LABEL_9;
      }
    }

    uint64_t v20 = 0;
    uint64_t v21 = (unint64_t)(63 - v16) >> 6;
    while (++v18 != v21 || (v20 & 1) == 0)
    {
      uint64_t v22 = v18 == v21;
      if (v18 == v21) {
        int64_t v18 = 0LL;
      }
      v20 |= v22;
      unint64_t v23 = *(void *)(v13 + 8 * v18);
      if (v23 != -1)
      {
        uint64_t v19 = __clz(__rbit64(~v23)) + (v18 << 6);
        goto LABEL_31;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_9:
    unint64_t v14 = v7 + 1;
    if (!__OFADD__(v7, 1LL))
    {
      if (v14 < v12)
      {
        uint64_t v11 = *(void *)(v8 + 8 * v14);
        ++v7;
        if (v11) {
          goto LABEL_22;
        }
        uint64_t v7 = v14 + 1;
        if (v14 + 1 < v12)
        {
          uint64_t v11 = *(void *)(v8 + 8 * v7);
          if (v11) {
            goto LABEL_22;
          }
          uint64_t v7 = v14 + 2;
          if (v14 + 2 < v12)
          {
            uint64_t v11 = *(void *)(v8 + 8 * v7);
            if (v11) {
              goto LABEL_22;
            }
            unint64_t v15 = v14 + 3;
            if (v15 < v12)
            {
              uint64_t v11 = *(void *)(v8 + 8 * v15);
              if (v11)
              {
                uint64_t v7 = v15;
                goto LABEL_22;
              }

              while (1)
              {
                uint64_t v7 = v15 + 1;
                if (__OFADD__(v15, 1LL)) {
                  goto LABEL_38;
                }
                if (v7 >= v12) {
                  break;
                }
                uint64_t v11 = *(void *)(v8 + 8 * v7);
                ++v15;
                if (v11) {
                  goto LABEL_22;
                }
              }
            }
          }
        }
      }

      Swift::Int result = swift_release(v24);
      uint64_t v2 = v25;
LABEL_35:
      *uint64_t v2 = v6;
      return result;
    }
  }

  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

void specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OngoingCallOfferOptions>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *uint64_t v2 = v5;
    return;
  }

  uint64_t v6 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v7 = v3 + 56;
  uint64_t v8 = -1LL;
  if (v6 < 64) {
    uint64_t v8 = ~(-1LL << v6);
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v10 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  int64_t v11 = 0LL;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    specialized _NativeSet._unsafeInsertNew(_:)(*(_BYTE *)(*(void *)(v3 + 48) + i), v5);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v14 >= v10) {
      goto LABEL_25;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v10) {
        goto LABEL_25;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v10) {
          goto LABEL_25;
        }
        unint64_t v15 = *(void *)(v7 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *uint64_t v2 = v5;
    return;
  }

  uint64_t v6 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v7 = v3 + 56;
  uint64_t v8 = -1LL;
  if (v6 < 64) {
    uint64_t v8 = ~(-1LL << v6);
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v10 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  int64_t v11 = 0LL;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    unint64_t v17 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
    int64_t v18 = *v17;
    uint64_t v19 = v17[1];
    swift_bridgeObjectRetain();
    specialized _NativeSet._unsafeInsertNew(_:)(v18, v19, v5);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v14 >= v10) {
      goto LABEL_25;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v10) {
        goto LABEL_25;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v10) {
          goto LABEL_25;
        }
        unint64_t v15 = *(void *)(v7 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }

void outlined bridged method (ob) of @objc INStartCallIntent.contacts.getter(void *a1)
{
  id v2 = [a1 contacts];

  if (v2)
  {
    unint64_t v3 = type metadata accessor for INPerson();
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);
  }

  OUTLINED_FUNCTION_2();
}

uint64_t storeEnumTagSinglePayload for OngoingCallOfferOptions(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = 1;
  }
  else {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_8D35C + 4 * byte_3214F5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_8D390 + 4 * byte_3214F0[v4]))();
}

uint64_t sub_8D390(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8D398(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x8D3A0LL);
  }
  return result;
}

uint64_t sub_8D3AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x8D3B4LL);
  }
  *(_BYTE *)Swift::Int result = a2 + 2;
  return result;
}

uint64_t sub_8D3B8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_8D3C0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OngoingCallOfferOptions()
{
  return &type metadata for OngoingCallOfferOptions;
}

void specialized Optional<A>.hash(into:)(uint64_t a1)
{
  uint64_t v5 = v2;
  type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues(0LL);
  OUTLINED_FUNCTION_44_8();
  __chkstk_darwin();
  OUTLINED_FUNCTION_5_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v9 = v8 - v7;
  OUTLINED_FUNCTION_16_10(v5, v8 - v7);
  if (__swift_getEnumTagSinglePayload(v9, 1LL, v1) == 1)
  {
    OUTLINED_FUNCTION_47_5();
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v3, v9, v1);
    OUTLINED_FUNCTION_45_4();
    lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues);
    dispatch thunk of Hashable.hash(into:)(a1, v1, v10);
    OUTLINED_FUNCTION_4_13(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  }

uint64_t OUTLINED_FUNCTION_0_20(uint64_t a1)
{
  return _HashTable.nextHole(atOrAfter:)(a1 & ~(-1LL << *(_BYTE *)(v1 + 32)), v1 + 56, ~(-1LL << *(_BYTE *)(v1 + 32)));
}

unint64_t OUTLINED_FUNCTION_1_24(unint64_t result)
{
  *(void *)(v1 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  return result;
}

uint64_t OUTLINED_FUNCTION_7_22(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t OUTLINED_FUNCTION_10_19@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  *uint64_t v1 = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t OUTLINED_FUNCTION_11_19()
{
  void *v0 = 0x8000000000000000LL;
  return swift_bridgeObjectRetain(v1);
}

void *OUTLINED_FUNCTION_12_20(uint64_t a1, uint64_t a2, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, a1);
}

void OUTLINED_FUNCTION_16_10(uint64_t a1, uint64_t a2)
{
}

  ;
}

uint64_t OUTLINED_FUNCTION_18_14()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 144))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_19_12@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v3, v2, v1);
}

uint64_t OUTLINED_FUNCTION_20_9(uint64_t a1, ...)
{
  return String.hash(into:)(va, v2, v1);
}

uint64_t OUTLINED_FUNCTION_26_10()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t OUTLINED_FUNCTION_28_8()
{
  return IntentResolutionRecord.intent.getter();
}

  ;
}

uint64_t OUTLINED_FUNCTION_33_9()
{
  return swift_unknownObjectRelease(v0);
}

void OUTLINED_FUNCTION_35_6()
{
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_41_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 136, v4, a3, a4);
}

  ;
}

void OUTLINED_FUNCTION_45_4()
{
}

uint64_t OUTLINED_FUNCTION_46_5()
{
  return type metadata accessor for App(0LL);
}

void OUTLINED_FUNCTION_47_5()
{
}

uint64_t AppSelectionUserPersonaCollector.__allocating_init(userPersonaSignal:)(uint64_t a1)
{
  uint64_t result = OUTLINED_FUNCTION_8_2(v1, 24LL);
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t TrialSmartAppSelectionConfigProvider.init(trialConfigSource:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t AppSelectionUserPersonaCollector.getUserPersona(candidateApps:)(uint64_t a1)
{
  uint64_t v6 = v2;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v1 = (void *)a1;
    }
    else {
      uint64_t v1 = (void *)(a1 & 0xFFFFFFFFFFFFFF8LL);
    }
    OUTLINED_FUNCTION_6_1();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v1);
    if (v8) {
      goto LABEL_3;
    }
LABEL_20:
    uint64_t v1 = _swiftEmptyArrayStorage;
    goto LABEL_21;
  }

  uint64_t v8 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  OUTLINED_FUNCTION_6_1();
  if (!v8) {
    goto LABEL_20;
  }
LABEL_3:
  if (v8 < 1) {
    goto LABEL_38;
  }
  uint64_t v9 = 0LL;
  uint64_t v1 = _swiftEmptyArrayStorage;
  do
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      uint64_t v10 = OUTLINED_FUNCTION_5_21(v9);
    }

    else
    {
      uint64_t v10 = *(void *)(a1 + 8 * v9 + 32);
      swift_retain();
    }

    uint64_t v11 = App.appIdentifier.getter();
    uint64_t v13 = v12;
    swift_release(v10);
    if (v13)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v1) & 1) == 0)
      {
        OUTLINED_FUNCTION_1_25(0LL, v1[2] + 1LL);
        uint64_t v1 = v17;
      }

      unint64_t v15 = v1[2];
      unint64_t v14 = v1[3];
      if (v15 >= v14 >> 1)
      {
        OUTLINED_FUNCTION_1_25(v14 > 1, v15 + 1);
        uint64_t v1 = v18;
      }

      v1[2] = v15 + 1;
      int64_t v16 = &v1[2 * v15];
      v16[4] = v11;
      v16[5] = v13;
    }

    ++v9;
  }

  while (v8 != v9);
LABEL_21:
  OUTLINED_FUNCTION_50();
  uint64_t v3 = OUTLINED_FUNCTION_8_2((uint64_t)&unk_3F8E78, 20LL);
  *(_DWORD *)(v3 + 16) = 0;
  uint64_t v4 = v3 + 16;
  if (v8)
  {
    unint64_t v5 = a1 & 0xC000000000000001LL;
    uint64_t v33 = v6;
    if ((a1 & 0xC000000000000001LL) != 0) {
      goto LABEL_39;
    }
    uint64_t v19 = *(void *)(a1 + 32);
    OUTLINED_FUNCTION_6_1();
    swift_retain();
    while (1)
    {
      Swift::Bool v20 = App.isFirstParty()();
      swift_release(v19);
      if (!v20) {
        break;
      }
      if (v8 == 1)
      {
LABEL_33:
        swift_release(v3);
        OUTLINED_FUNCTION_50();
        swift_bridgeObjectRelease();
        return 1LL;
      }

      uint64_t v21 = 5LL;
      while (1)
      {
        if (v5)
        {
          uint64_t v22 = OUTLINED_FUNCTION_5_21(v21 - 4);
        }

        else
        {
          uint64_t v22 = *(void *)(a1 + 8 * v21);
          swift_retain();
        }

        uint64_t v23 = v21 - 3;
        if (__OFADD__(v21 - 4, 1LL)) {
          break;
        }
        Swift::Bool v24 = App.isFirstParty()();
        swift_release(v22);
        if (!v24) {
          goto LABEL_34;
        }
        ++v21;
        if (v23 == v8) {
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      OUTLINED_FUNCTION_6_1();
      uint64_t v19 = OUTLINED_FUNCTION_5_21(0LL);
    }

void closure #3 in AppSelectionUserPersonaCollector.getUserPersona(candidateApps:)( uint64_t a1, uint64_t a2, uint64_t a3, dispatch_group_s *a4)
{
  uint64_t v54 = a3;
  uint64_t v55 = a2;
  uint64_t v6 = type metadata accessor for SignalGatheringResults(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  unint64_t v56 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SignalGatherer.ValuesWithTimings(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v14 = (char *)&v47 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<SignalGatherer.ValuesWithTimings, SignalGathererError>);
  __chkstk_darwin();
  unint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of Result<SignalGatherer.ValuesWithTimings, SignalGathererError>(a1, (uint64_t)v17);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    uint64_t v19 = __swift_project_value_buffer(v18, (uint64_t)static Logger.siriPhone);
    Swift::Bool v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v22 = static os_log_type_t.debug.getter(v20, v21);
    if (os_log_type_enabled(v20, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl( &dword_0,  v20,  v22,  "#AppSelectionUserPersonaCollector#getUserPersona gathering user persona signal value failed",  v23,  2u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    outlined destroy of Result<SignalGatherer.ValuesWithTimings, SignalGathererError>((uint64_t)v17);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v17, v9);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v53 = v7;
    uint64_t v24 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v24, (uint64_t)static Logger.siriPhone);
    uint64_t v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 16))(v12, v14, v9);
    char v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v28 = static os_log_type_t.debug.getter(v26, v27);
    int v29 = v28;
    if (os_log_type_enabled(v26, v28))
    {
      int v52 = v29;
      unint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v51 = swift_slowAlloc(32LL, -1LL);
      v58[0] = v51;
      int v49 = v30;
      os_log_t v50 = v26;
      *(_DWORD *)unint64_t v30 = 136315138;
      uint64_t v48 = v30 + 4;
      uint64_t v31 = SignalGatherer.ValuesWithTimings.values.getter();
      uint64_t v32 = type metadata accessor for SignalValue(0LL);
      uint64_t v33 = v6;
      Swift::Bool v34 = a4;
      uint64_t v35 = Dictionary.description.getter(v31, &type metadata for String, v32, &protocol witness table for String);
      unint64_t v37 = v36;
      swift_bridgeObjectRelease();
      uint64_t v38 = v35;
      a4 = v34;
      uint64_t v6 = v33;
      *(void *)to = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v37, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(to, v58, v48);
      swift_bridgeObjectRelease();
      uint64_t v39 = *(void (**)(char *, uint64_t))(v10 + 8);
      v39(v12, v9);
      uint64_t v40 = v49;
      char v26 = v50;
      _os_log_impl( &dword_0,  v50,  (os_log_type_t)v52,  "#AppSelectionUserPersonaCollector#getUserPersona gathered user persona value: %s",  v49,  0xCu);
      uint64_t v41 = v51;
      swift_arrayDestroy(v51, 1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    else
    {
      uint64_t v39 = *(void (**)(char *, uint64_t))(v10 + 8);
      v39(v12, v9);
    }

    uint64_t v42 = (Swift::Int32 *)(v54 + 16);
    uint64_t v43 = SignalGatherer.ValuesWithTimings.values.getter();
    uint64_t v44 = v55;
    swift_bridgeObjectRetain();
    uint64_t v45 = v56;
    SignalGatheringResults.init(values:candidateAppBundleIds:)(v43, v44);
    to[0] = 0;
    if (one-time initialization token for userPersonaKey != -1) {
      swift_once(&one-time initialization token for userPersonaKey, one-time initialization function for userPersonaKey);
    }
    SignalGatheringResults.extract(name:for:to:)( (Swift::String)static CommsAppSelectionAppIndependentSignalsKeys.userPersonaKey,  (Swift::String_optional)0,  to);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v45, v6);
    v39(v14, v9);
    Swift::Int32 v46 = to[0];
    swift_beginAccess(v42, v58, 1LL, 0LL);
    *uint64_t v42 = v46;
  }

  dispatch_group_leave(a4);
}

uint64_t AppSelectionUserPersonaCollector.deinit()
{
  return v0;
}

uint64_t AppSelectionUserPersonaCollector.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t protocol witness for AppSelectionUserPersonaCollecting.getUserPersona(candidateApps:) in conformance AppSelectionUserPersonaCollector()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96LL))();
}

uint64_t sub_8DE70()
{
  return swift_deallocObject(v0, 20LL, 7LL);
}

uint64_t sub_8DE80()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void partial apply for closure #3 in AppSelectionUserPersonaCollector.getUserPersona(candidateApps:)( uint64_t a1)
{
}

uint64_t type metadata accessor for AppSelectionUserPersonaCollector()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin32AppSelectionUserPersonaCollector);
}

uint64_t outlined init with copy of Result<SignalGatherer.ValuesWithTimings, SignalGathererError>( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<SignalGatherer.ValuesWithTimings, SignalGathererError>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Result<SignalGatherer.ValuesWithTimings, SignalGathererError>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<SignalGatherer.ValuesWithTimings, SignalGathererError>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void OUTLINED_FUNCTION_1_25(uint64_t a1, uint64_t a2)
{
}

uint64_t OUTLINED_FUNCTION_3_26()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 16));
}

double SlotTemplating.toAnySlotTemplating()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v8, v3, a1);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL);
  AnySlotTemplating.init<A>(delegate:)((uint64_t)v8, AssociatedTypeWitness, a1, a2, (void (**)())v14);
  __int128 v11 = v14[1];
  *a3 = v14[0];
  a3[1] = v11;
  double result = *(double *)&v15;
  __int128 v13 = v16;
  a3[2] = v15;
  a3[3] = v13;
  return result;
}

uint64_t AnySlotTemplating.init<A>(delegate:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (**a5)()@<X8>)
{
  uint64_t v32 = implicit closure #1 in AnySlotTemplating.init<A>(delegate:)(a1, a2, a3, a4);
  uint64_t v9 = v8;
  uint64_t v10 = OUTLINED_FUNCTION_0_21();
  unint64_t v14 = implicit closure #3 in AnySlotTemplating.init<A>(delegate:)(v10, v11, v12, v13);
  __int128 v16 = v15;
  uint64_t v17 = OUTLINED_FUNCTION_0_21();
  uint64_t v21 = implicit closure #5 in AnySlotTemplating.init<A>(delegate:)(v17, v18, v19, v20);
  uint64_t v23 = v22;
  uint64_t v24 = OUTLINED_FUNCTION_0_21();
  os_log_type_t v28 = implicit closure #7 in AnySlotTemplating.init<A>(delegate:)(v24, v25, v26, v27);
  unint64_t v30 = v29;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
  *a5 = v32;
  a5[1] = v9;
  a5[2] = (void (*)())v14;
  a5[3] = v16;
  a5[4] = v21;
  a5[5] = v23;
  a5[6] = v28;
  a5[7] = v30;
  return result;
}

void (*implicit closure #1 in AnySlotTemplating.init<A>(delegate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v7 + 16))(v9);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (v10 + 40) & ~v10;
  uint64_t v12 = (char *)swift_allocObject(&unk_3F8FA8, v11 + v8, v10 | 7);
  *((void *)v12 + 2) = a2;
  *((void *)v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 3) = a3;
  *((void *)v12 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], v9, a3);
  return partial apply for implicit closure #2 in implicit closure #1 in AnySlotTemplating.init<A>(delegate:);
}

void (*implicit closure #3 in AnySlotTemplating.init<A>(delegate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v7 + 16))(v9);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (v10 + 40) & ~v10;
  uint64_t v12 = (char *)swift_allocObject(&unk_3F8F80, v11 + v8, v10 | 7);
  *((void *)v12 + 2) = a2;
  *((void *)v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 3) = a3;
  *((void *)v12 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], v9, a3);
  return partial apply for implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:);
}

void (*implicit closure #5 in AnySlotTemplating.init<A>(delegate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v7 + 16))(v9);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (v10 + 40) & ~v10;
  uint64_t v12 = (char *)swift_allocObject(&unk_3F8F58, v11 + v8, v10 | 7);
  *((void *)v12 + 2) = a2;
  *((void *)v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 3) = a3;
  *((void *)v12 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], v9, a3);
  return partial apply for implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:);
}

void (*implicit closure #7 in AnySlotTemplating.init<A>(delegate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v7 + 16))(v9);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (v10 + 40) & ~v10;
  uint64_t v12 = (char *)swift_allocObject(&unk_3F8F30, v11 + v8, v10 | 7);
  *((void *)v12 + 2) = a2;
  *((void *)v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 3) = a3;
  *((void *)v12 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], v9, a3);
  return partial apply for implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:);
}

void AnySlotTemplating.makeParameterPromptDialog(app:parameterName:intent:_:)()
{
}

void AnySlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
}

void AnySlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)( uint64_t a1)
{
}

void AnySlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
}

void protocol witness for SlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:) in conformance AnySlotTemplating<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
}

void protocol witness for SlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:) in conformance AnySlotTemplating<A>( uint64_t a1)
{
}

void protocol witness for SlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:) in conformance AnySlotTemplating<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
}

uint64_t destroy for AnySlotTemplating(void *a1)
{
  return swift_release(a1[7]);
}

uint64_t initializeWithCopy for AnySlotTemplating(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v3;
  __int128 v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  uint64_t v4 = *(void *)(a2 + 56);
  __int128 v7 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v7;
  *(void *)(a1 + 56) = v4;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v4);
  return a1;
}

void *assignWithCopy for AnySlotTemplating(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_retain(v8);
  swift_release(v9);
  uint64_t v11 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v12 = a1[7];
  a1[6] = v11;
  a1[7] = v10;
  swift_retain(v10);
  swift_release(v12);
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AnySlotTemplating(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  uint64_t v5 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_release(v5);
  uint64_t v6 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = a2[2];
  swift_release(v6);
  uint64_t v7 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = a2[3];
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnySlotTemplating(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 64))
    {
      LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnySlotTemplating(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for AnySlotTemplating(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnySlotTemplating);
}

void partial apply for implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:)()
{
}

void partial apply for implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:)()
{
}

void partial apply for implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
}

uint64_t objectdestroyTm_0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) - 8LL);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v4, v5);
}

void partial apply for implicit closure #2 in implicit closure #1 in AnySlotTemplating.init<A>(delegate:)()
{
}

uint64_t OUTLINED_FUNCTION_0_21()
{
  return v0;
}

  ;
}

uint64_t Transformer<>.VoiceTriggerAudioRouteBehavior.init<A>(for:isEmergencyCallIntent:sharedGlobals:)( uint64_t a1, char a2, void *a3)
{
  uint64_t v6 = type metadata accessor for CNContactStore( 0LL,  &lazy cache variable for type metadata for INAnswerCallIntent,  &OBJC_CLASS___INAnswerCallIntent_ptr);
  if (swift_dynamicCastMetatype(a1, v6))
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)static Logger.siriPhone);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v11 = static os_log_type_t.debug.getter(v9, v10);
    if (os_log_type_enabled(v9, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl( &dword_0,  v9,  v11,  "#VoiceTriggerAudioRouteBehavior heySiriAudioRoute is enabled for INAnswerCallIntent.",  v12,  2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v14 = type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INStartCallIntent,  &OBJC_CLASS___INStartCallIntent_ptr);
    uint64_t v15 = swift_dynamicCastMetatype(a1, v14);
    uint64_t v13 = 2LL;
    if (v15 && (a2 & 1) != 0)
    {
      uint64_t v16 = a3[3];
      uint64_t v17 = a3[4];
      __swift_project_boxed_opaque_existential_1(a3, v16);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v17 + 8))(v22, v16, v17);
      uint64_t v18 = a3[3];
      uint64_t v19 = a3[4];
      __swift_project_boxed_opaque_existential_1(a3, v18);
      uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 112))(v18, v19);
      uint64_t v13 = static Transformer<>.VoiceTriggerAudioRouteBehavior.chooseBehaviorForEmergencyCall(deviceState:currentRequest:)( v22,  v20);
      swift_release(v20);
      __swift_destroy_boxed_opaque_existential_1(v22);
    }
  }

  __swift_destroy_boxed_opaque_existential_1(a3);
  return v13;
}

uint64_t static Transformer<>.VoiceTriggerAudioRouteBehavior.chooseBehaviorForEmergencyCall(deviceState:currentRequest:)( void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AudioDestination(0LL);
  uint64_t v91 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v84 = (uint64_t)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AudioDestination?, AudioDestination?));
  __chkstk_darwin();
  uint64_t v7 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v90 = (uint64_t)&v79 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  OUTLINED_FUNCTION_15();
  uint64_t v87 = v11;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  OUTLINED_FUNCTION_15();
  uint64_t v86 = v12;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  OUTLINED_FUNCTION_15();
  uint64_t v85 = v13;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  OUTLINED_FUNCTION_15();
  uint64_t v88 = v14;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  uint64_t v16 = (char *)&v79 - v15;
  __chkstk_darwin();
  uint64_t v18 = (char *)&v79 - v17;
  __chkstk_darwin();
  uint64_t v20 = (char *)&v79 - v19;
  uint64_t v21 = __chkstk_darwin();
  uint64_t v23 = (char *)&v79 - v22;
  if (a2) {
    CurrentRequest.audioDestination.getter(v21);
  }
  else {
    __swift_storeEnumTagSinglePayload((uint64_t)&v79 - v22, 1LL, 1LL, v4);
  }
  uint64_t v83 = v10;
  uint64_t v93 = v16;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v24 = type metadata accessor for Logger(0LL);
  uint64_t v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.siriPhone);
  uint64_t v26 = OUTLINED_FUNCTION_5_22((uint64_t)v23);
  uint64_t v92 = v25;
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v29 = static os_log_type_t.debug.getter(v27, v28);
  if (os_log_type_enabled(v27, v29))
  {
    uint64_t v80 = v7;
    uint64_t v81 = v23;
    unint64_t v30 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v31 = OUTLINED_FUNCTION_7_0(32LL);
    v95[0] = v31;
    *(_DWORD *)unint64_t v30 = 136315138;
    outlined init with copy of AudioDestination?((uint64_t)v20, (uint64_t)v18);
    uint64_t v32 = OUTLINED_FUNCTION_0_4((uint64_t)v18);
    uint64_t v82 = v4;
    if (v73)
    {
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v18,  &demangling cache variable for type metadata for AudioDestination?);
      unint64_t v35 = 0xE300000000000000LL;
      uint64_t v33 = 7104878LL;
    }

    else
    {
      uint64_t v33 = AudioDestination.aceValue.getter(v32);
      unint64_t v35 = v34;
      OUTLINED_FUNCTION_11_20((uint64_t)v18, *(uint64_t (**)(uint64_t, uint64_t))(v91 + 8));
    }

    uint64_t v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease();
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v20,  &demangling cache variable for type metadata for AudioDestination?);
    _os_log_impl(&dword_0, v27, v29, "#VoiceTriggerAudioRouteBehavior audioDestination = %s", v30, 0xCu);
    swift_arrayDestroy(v31, 1LL);
    OUTLINED_FUNCTION_0_2(v31);
    OUTLINED_FUNCTION_0_2((uint64_t)v30);

    uint64_t v23 = v81;
    uint64_t v4 = v82;
    uint64_t v7 = v80;
  }

  else
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v20,  &demangling cache variable for type metadata for AudioDestination?);
  }

  uint64_t v36 = a1[3];
  unint64_t v37 = (void (*)(uint64_t, uint64_t))a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v36);
  char v38 = dispatch thunk of DeviceState.isPhone.getter(v36, v37);
  outlined init with copy of SharedGlobalsProviding((uint64_t)a1, (uint64_t)v95);
  uint64_t v39 = (uint64_t)v93;
  if ((v38 & 1) == 0)
  {
    OUTLINED_FUNCTION_14_12();
    goto LABEL_20;
  }

  uint64_t v40 = v96;
  uint64_t v41 = v97;
  uint64_t v42 = __swift_project_boxed_opaque_existential_1(v95, v96);
  DeviceState.isAnyCar.getter( v40,  v41,  (uint64_t)v42,  v43,  v44,  v45,  v46,  v47,  v79,  (uint64_t)v80,  (uint64_t)v81,  v82,  (uint64_t)v83,  v84,  v85,  v86,  v87,  v88,  v89,  v90);
  LOBYTE(v40) = v48;
  uint64_t v49 = OUTLINED_FUNCTION_14_12();
  if ((v40 & 1) != 0)
  {
LABEL_20:
    unint64_t v56 = &demangling cache variable for type metadata for AudioDestination?;
    uint64_t v57 = v39;
LABEL_21:
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v57,  v56);
    goto LABEL_22;
  }

  uint64_t v50 = v88;
  static AudioDestination.builtInSpeaker.getter(v49);
  OUTLINED_FUNCTION_4_21();
  uint64_t v51 = v89;
  uint64_t v52 = v90;
  uint64_t v53 = v90 + *(int *)(v89 + 48);
  outlined init with copy of AudioDestination?(v39, v90);
  OUTLINED_FUNCTION_10_20();
  OUTLINED_FUNCTION_0_4(v52);
  if (v73)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v50,  &demangling cache variable for type metadata for AudioDestination?);
    OUTLINED_FUNCTION_0_4(v53);
    uint64_t v55 = v86;
    uint64_t v54 = v87;
    if (v73)
    {
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v90,  &demangling cache variable for type metadata for AudioDestination?);
      OUTLINED_FUNCTION_5_22(v39);
LABEL_40:
      OUTLINED_FUNCTION_9_19(v55);
      uint64_t v75 = v39;
      goto LABEL_41;
    }

    goto LABEL_29;
  }

  uint64_t v72 = v85;
  OUTLINED_FUNCTION_5_22(v52);
  OUTLINED_FUNCTION_0_4(v53);
  if (v73)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v50,  &demangling cache variable for type metadata for AudioDestination?);
    OUTLINED_FUNCTION_11_20(v72, *(uint64_t (**)(uint64_t, uint64_t))(v91 + 8));
    uint64_t v55 = v86;
    uint64_t v54 = v87;
LABEL_29:
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v90,  &demangling cache variable for type metadata for (AudioDestination?, AudioDestination?));
    uint64_t v78 = OUTLINED_FUNCTION_5_22(v39);
    goto LABEL_30;
  }

  OUTLINED_FUNCTION_2_20();
  lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type AudioDestination and conformance AudioDestination,  (uint64_t (*)(uint64_t))&type metadata accessor for AudioDestination,  (uint64_t)&protocol conformance descriptor for AudioDestination);
  OUTLINED_FUNCTION_7_23(v72);
  OUTLINED_FUNCTION_6_24();
  OUTLINED_FUNCTION_1_26(v88);
  v37(v72, v4);
  uint64_t v51 = v89;
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v52,  &demangling cache variable for type metadata for AudioDestination?);
  uint64_t v55 = v86;
  uint64_t v78 = OUTLINED_FUNCTION_5_22(v39);
  uint64_t v54 = v87;
  if ((v53 & 1) != 0) {
    goto LABEL_40;
  }
LABEL_30:
  static AudioDestination.builtInReceiver.getter(v78);
  OUTLINED_FUNCTION_4_21();
  uint64_t v74 = (uint64_t)&v7[*(int *)(v51 + 48)];
  outlined init with copy of AudioDestination?(v55, (uint64_t)v7);
  OUTLINED_FUNCTION_10_20();
  OUTLINED_FUNCTION_0_4((uint64_t)v7);
  if (!v73)
  {
    uint64_t v76 = (uint64_t)v83;
    outlined init with copy of AudioDestination?((uint64_t)v7, (uint64_t)v83);
    OUTLINED_FUNCTION_0_4(v74);
    if (!v77)
    {
      OUTLINED_FUNCTION_2_20();
      lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type AudioDestination and conformance AudioDestination,  (uint64_t (*)(uint64_t))&type metadata accessor for AudioDestination,  (uint64_t)&protocol conformance descriptor for AudioDestination);
      OUTLINED_FUNCTION_7_23(v76);
      OUTLINED_FUNCTION_6_24();
      OUTLINED_FUNCTION_1_26(v87);
      OUTLINED_FUNCTION_1_26(v55);
      OUTLINED_FUNCTION_1_26(v39);
      v37(v76, v4);
      OUTLINED_FUNCTION_1_26((uint64_t)v7);
      if ((v74 & 1) != 0) {
        goto LABEL_42;
      }
LABEL_22:
      uint64_t v59 = 0LL;
      goto LABEL_23;
    }

    OUTLINED_FUNCTION_9_19(v54);
    OUTLINED_FUNCTION_9_19(v55);
    OUTLINED_FUNCTION_9_19(v39);
    OUTLINED_FUNCTION_11_20(v76, *(uint64_t (**)(uint64_t, uint64_t))(v91 + 8));
    goto LABEL_38;
  }

  OUTLINED_FUNCTION_1_26(v54);
  OUTLINED_FUNCTION_1_26(v55);
  OUTLINED_FUNCTION_1_26(v39);
  OUTLINED_FUNCTION_0_4(v74);
  if (!v73)
  {
LABEL_38:
    unint64_t v56 = &demangling cache variable for type metadata for (AudioDestination?, AudioDestination?);
    uint64_t v57 = (uint64_t)v7;
    goto LABEL_21;
  }

  uint64_t v75 = (uint64_t)v7;
LABEL_41:
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v75,  &demangling cache variable for type metadata for AudioDestination?);
LABEL_42:
  uint64_t v59 = 1LL;
LABEL_23:
  char v60 = (os_log_s *)Logger.logObject.getter(v58);
  os_log_type_t v62 = static os_log_type_t.debug.getter(v60, v61);
  if (os_log_type_enabled(v60, v62))
  {
    uint64_t v63 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v64 = OUTLINED_FUNCTION_7_0(32LL);
    v95[0] = v64;
    *(_DWORD *)uint64_t v63 = 136315138;
    LOBYTE(v94) = v59;
    type metadata accessor for Transformer<PhoneCallNLIntent, INCallAudioRoute><>.VoiceTriggerAudioRouteBehavior( 0LL,  v65,  v66,  v67);
    uint64_t v69 = String.init<A>(describing:)(&v94, v68);
    uint64_t v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v63 + 4, v63 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl( &dword_0,  v60,  v62,  "#VoiceTriggerAudioRouteBehavior chose %s for HS-initiated emergency call",  v63,  0xCu);
    swift_arrayDestroy(v64, 1LL);
    OUTLINED_FUNCTION_0_2(v64);
    OUTLINED_FUNCTION_0_2((uint64_t)v63);
  }

  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v23,  &demangling cache variable for type metadata for AudioDestination?);
  return v59;
}

uint64_t static Transformer<>.transformer<A>(intentType:sharedGlobals:previousIntent:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = (void *)swift_allocObject(&unk_3F8FD0, 80LL, 7LL);
  v7[2] = a4;
  void v7[3] = a1;
  outlined init with take of AppSelectionSignalComponent(v11, (uint64_t)(v7 + 4));
  v7[9] = a3;
  id v8 = a3;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  type metadata accessor for INCallAudioRoute(0LL);
  return Transformer.init(transform:)( partial apply for closure #1 in static Transformer<>.transformer<A>(intentType:sharedGlobals:previousIntent:),  v7,  v9);
}

void closure #1 in static Transformer<>.transformer<A>(intentType:sharedGlobals:previousIntent:)( void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  Swift::Bool v10 = PhoneCallNLIntent.isEmergencyCall()();
  outlined init with copy of SharedGlobalsProviding((uint64_t)a3, (uint64_t)v52);
  Transformer<>.VoiceTriggerAudioRouteBehavior.init<A>(for:isEmergencyCallIntent:sharedGlobals:)(a2, v10, v52);
  uint64_t v11 = a3[3];
  uint64_t v12 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 8))(v52, v11, v12);
  __swift_project_boxed_opaque_existential_1(v52, v52[3]);
  DeviceState.isVoiceTrigger.getter();
  if ((v13 & 1) == 0)
  {
    if (a4)
    {
      id v14 = [a4 _metadata];
      if (v14)
      {
        uint64_t v15 = v14;
        [v14 triggerMethod];
      }
    }
  }

  __swift_destroy_boxed_opaque_existential_1(v52);
  uint64_t v16 = a3[3];
  uint64_t v17 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v16);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 112))(v16, v17);
  if (!v18)
  {
LABEL_13:
    uint64_t v31 = a1[3];
    uint64_t v32 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v31);
    uint64_t v33 = (char *)&loc_8F5F4
        + *((int *)qword_8FE78 + (*(unsigned __int8 (**)(uint64_t, uint64_t))(v32 + 48))(v31, v32));
    __asm { BR              X10 }
  }

  uint64_t v19 = v18;
  if ((CurrentRequest.isInAmbient.getter() & 1) == 0)
  {
    swift_release(v19);
    goto LABEL_13;
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.siriPhone);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v24 = static os_log_type_t.debug.getter(v22, v23);
  if (os_log_type_enabled(v22, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v25 = 136315138;
    v52[0] = v26;
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute>);
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute>.Type);
    uint64_t v28 = String.init<A>(describing:)(&v53, v27);
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v25 + 4);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v22, v24, "#%s Request is made in ambient mode. Routing to HS audio route.", v25, 0xCu);
    swift_arrayDestroy(v26, 1LL);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  uint64_t v30 = _INCallAudioRouteHeySiriAudioRoute;
  swift_release(v19);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v34 = type metadata accessor for Logger(0LL);
  uint64_t v35 = __swift_project_value_buffer(v34, (uint64_t)static Logger.siriPhone);
  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v38 = static os_log_type_t.debug.getter(v36, v37);
  if (os_log_type_enabled(v36, v38))
  {
    uint64_t v51 = a5;
    uint64_t v39 = swift_slowAlloc(22LL, -1LL);
    uint64_t v40 = swift_slowAlloc(64LL, -1LL);
    v52[0] = v40;
    *(_DWORD *)uint64_t v39 = 136315394;
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute>);
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute>.Type);
    uint64_t v42 = String.init<A>(describing:)(&v53, v41);
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v39 + 4);
    swift_bridgeObjectRelease();
    *(_WORD *)(v39 + 12) = 2080;
    if (!v30)
    {
      unint64_t v46 = 0xE700000000000000LL;
      uint64_t v47 = 0x4E574F4E4B4E55LL;
LABEL_29:
      uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v46, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v39 + 14);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v36, v38, "#%s --> %s", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy(v40, 2LL);
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_slowDealloc(v39, -1LL, -1LL);

      a5 = v51;
      goto LABEL_30;
    }

    uint64_t BackingType = INCallAudioRouteGetBackingType(v30);
    switch((_DWORD)BackingType)
    {
      case 4:
        uint64_t v45 = @"HEY_SIRI_AUDIO_ROUTE";
        break;
      case 3:
        uint64_t v45 = @"BLUETOOTH_AUDIO_ROUTE";
        break;
      case 2:
        uint64_t v45 = @"SPEAKERPHONE_AUDIO_ROUTE";
        break;
      default:
        uint64_t v45 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  BackingType));
        goto LABEL_28;
    }

    char v48 = v45;
LABEL_28:
    uint64_t v49 = v45;
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    unint64_t v46 = v50;

    goto LABEL_29;
  }

LABEL_30:
  *a5 = v30;
}

uint64_t sub_8FE8C()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

void partial apply for closure #1 in static Transformer<>.transformer<A>(intentType:sharedGlobals:previousIntent:)( void *a1@<X0>, void *a2@<X8>)
{
}

uint64_t outlined init with copy of AudioDestination?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Transformer<PhoneCallNLIntent, INCallAudioRoute><>.VoiceTriggerAudioRouteBehavior( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!lazy cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute><>.VoiceTriggerAudioRouteBehavior)
  {
    unint64_t v4 = type metadata accessor for Transformer<>.VoiceTriggerAudioRouteBehavior(0LL, a2, a3, a4);
    if (!v5) {
      atomic_store( v4,  (unint64_t *)&lazy cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute><>.VoiceTriggerAudioRouteBehavior);
    }
  }

uint64_t type metadata accessor for Transformer<>.VoiceTriggerAudioRouteBehavior( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Transformer<>.VoiceTriggerAudioRouteBehavior);
}

uint64_t type metadata instantiation function for Transformer<>.VoiceTriggerAudioRouteBehavior( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 0LL);
}

uint64_t storeEnumTagSinglePayload for Transformer<>.VoiceTriggerAudioRouteBehavior( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = 1;
  }
  else {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_8FFC0 + 4 * byte_3216F5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_8FFF4 + 4 * byte_3216F0[v4]))();
}

uint64_t sub_8FFF4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8FFFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x90004LL);
  }
  return result;
}

uint64_t sub_90010(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x90018LL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_9001C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_90024(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in Transformer<A, B><>.VoiceTriggerAudioRouteBehavior()
{
}

void OUTLINED_FUNCTION_1_26(uint64_t a1)
{
}

uint64_t OUTLINED_FUNCTION_2_20()
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(v2 - 160) + 32LL))( *(void *)(v2 - 216),  v0,  v1);
}

uint64_t OUTLINED_FUNCTION_4_21()
{
  return __swift_storeEnumTagSinglePayload(v1, 0LL, 1LL, v0);
}

uint64_t OUTLINED_FUNCTION_6_24()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_7_23(uint64_t a1)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, v2, v1);
}

void OUTLINED_FUNCTION_9_19(uint64_t a1)
{
}

uint64_t OUTLINED_FUNCTION_10_20()
{
  return outlined init with copy of AudioDestination?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_11_20@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_14_12()
{
  return outlined init with copy of AudioDestination?(v0, v1);
}

uint64_t OnDeviceCarPlayWithInputFlowStrategy.rchFlowProvider.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t ContactNeedsConfirmationFlowStrategy.sharedGlobals.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of SignalProviding(v2 + *(int *)(a1 + 36), a2);
}

uint64_t ContactUnsupportedFlowStrategy.makeUnsupportedValueOutput(resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  void v4[5] = v3;
  void v4[2] = a1;
  void v4[3] = a2;
  return swift_task_switch(ContactUnsupportedFlowStrategy.makeUnsupportedValueOutput(resolveRecord:), 0LL, 0LL);
}

uint64_t ContactUnsupportedFlowStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v1 = v0[4];
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL);
  uint64_t v5 = type metadata accessor for ParameterResolutionRecord(0LL, AssociatedTypeWitness);
  uint64_t v6 = ParameterResolutionRecord.app.getter(v5);
  v0[6] = v6;
  uint64_t v7 = ParameterResolutionRecord.intent.getter(v5);
  v0[7] = v7;
  uint64_t v8 = ParameterResolutionRecord.result.getter(v5);
  v0[8] = v8;
  uint64_t v9 = *(int **)(v2 + 48);
  uint64_t v12 = (int *)((char *)v9 + *v9);
  Swift::Bool v10 = (void *)swift_task_alloc(v9[1]);
  v0[9] = v10;
  *Swift::Bool v10 = v0;
  v10[1] = ContactUnsupportedFlowStrategy.makeUnsupportedValueOutput(resolveRecord:);
  return ((uint64_t (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v12)(v0[2], v6, v7, v8, v3, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v2 = *(void *)(*v1 + 72);
  uint64_t v3 = *v1;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(ContactUnsupportedFlowStrategy.makeUnsupportedValueOutput(resolveRecord:), 0LL, 0LL);
  }
  uint64_t v5 = *(void **)(v3 + 56);
  uint64_t v6 = *(void *)(v3 + 48);

  swift_release(v6);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v1 = *(void **)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 48);

  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ContactUnsupportedFlowStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)( uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  uint64_t v4 = type metadata accessor for ParameterIdentifier(0LL);
  v3[8] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[9] = v5;
  v3[10] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( ContactUnsupportedFlowStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:),  0LL,  0LL);
}

uint64_t ContactUnsupportedFlowStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  char v48 = (uint64_t *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL);
  uint64_t v2 = type metadata accessor for ParameterResolutionRecord(0LL, AssociatedTypeWitness);
  uint64_t v3 = (os_log_s *)ParameterResolutionRecord.intent.getter(v2);
  uint64_t v4 = (void *)ParameterResolutionRecord.result.getter(v2);
  uint64_t v5 = ContactUnsupportedFlowStrategy.isMultipleContactsUnsupported(intentResolutionResult:)(v4);

  if ((v5 & 1) != 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v6 = OUTLINED_FUNCTION_15_1();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_9();
    os_log_type_t v7 = OUTLINED_FUNCTION_6_0();
    if (os_log_type_enabled((os_log_t)v5, v7))
    {
      uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v1 = OUTLINED_FUNCTION_7_0(32LL);
      *(_DWORD *)uint64_t v8 = 136315138;
      uint64_t v9 = OUTLINED_FUNCTION_0_22( (uint64_t)"makeUpdatedIntentForUnsupportedValue(resolveRecord:)",  (uint64_t)v3,  (uint64_t)v48,  AssociatedTypeWitness,  v53);
      uint64_t *v48 = v9;
      uint64_t v3 = (os_log_s *)v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v48, v0 + 40, v8 + 4);
      OUTLINED_FUNCTION_57_0(&dword_0, (os_log_s *)v5, v7, "%s: Unsupported multiple contacts => clear slot.", v8);
      OUTLINED_FUNCTION_5_23();
      OUTLINED_FUNCTION_0_2(v1);
      OUTLINED_FUNCTION_0_2((uint64_t)v8);
    }

    uint64_t v16 = OUTLINED_FUNCTION_4_22( v10,  v11,  v12,  (uint64_t)&protocol requirements base descriptor for ResolveContactOutputProviding,  (uint64_t)&associated conformance descriptor for ResolveContactOutputProviding.ResolveContactOutputProviding.IntentType: NCRResolvableIntent,  v13,  v14,  v15,  v46,  (uint64_t)v48,  AssociatedTypeWitness);
    (*(void (**)(void *, uint64_t))(*(void *)(v16 + 8) + 16LL))(_swiftEmptyArrayStorage, v1);
  }

  else
  {
    uint64_t v17 = (void *)ParameterResolutionRecord.result.getter(v2);
    id v18 = [v17 alternatives];

    uint64_t v19 = (os_log_s *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, (char *)&type metadata for Any + 8);
    uint64_t v20 = *((void *)v19 + 2);
    uint64_t v21 = swift_bridgeObjectRelease();
    if (v20)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v27 = OUTLINED_FUNCTION_15_1();
      __swift_project_value_buffer(v27, (uint64_t)static Logger.siriPhone);
      OUTLINED_FUNCTION_9();
      os_log_type_t v28 = OUTLINED_FUNCTION_6_0();
      if (os_log_type_enabled(v19, v28))
      {
        unint64_t v29 = v3;
        uint64_t v30 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
        uint64_t v55 = OUTLINED_FUNCTION_7_0(32LL);
        *(_DWORD *)uint64_t v30 = 136315138;
        *(void *)(v0 + 16) = OUTLINED_FUNCTION_0_22( (uint64_t)"makeUpdatedIntentForUnsupportedValue(resolveRecord:)",  v46,  (uint64_t)v48,  AssociatedTypeWitness,  v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v30 + 4);
        OUTLINED_FUNCTION_57_0(&dword_0, v19, v28, "%s: Unsupported with alternatives => leave slot as-is.", v30);
        swift_arrayDestroy(v55, 1LL);
        OUTLINED_FUNCTION_0_2(v55);
        uint64_t v31 = (uint64_t)v30;
        uint64_t v3 = v29;
        OUTLINED_FUNCTION_0_2(v31);
      }
    }

    else
    {
      uint64_t v32 = *(void *)(OUTLINED_FUNCTION_4_22( v21,  v22,  v23,  (uint64_t)&protocol requirements base descriptor for ResolveContactOutputProviding,  (uint64_t)&associated conformance descriptor for ResolveContactOutputProviding.ResolveContactOutputProviding.IntentType: NCRResolvableIntent,  v24,  v25,  v26,  v46,  (uint64_t)v48,  AssociatedTypeWitness)
                      + 8);
      uint64_t v33 = (*(uint64_t (**)(void, uint64_t))(v32 + 8))(0LL, v32);
      if (v33)
      {
        uint64_t v54 = v33;
        if (one-time initialization token for siriPhone != -1) {
          swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
        }
        uint64_t v47 = v3;
        uint64_t v34 = OUTLINED_FUNCTION_15_1();
        __swift_project_value_buffer(v34, (uint64_t)static Logger.siriPhone);
        OUTLINED_FUNCTION_9();
        os_log_type_t v35 = OUTLINED_FUNCTION_6_0();
        if (os_log_type_enabled(v3, v35))
        {
          uint64_t v36 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
          uint64_t v56 = OUTLINED_FUNCTION_7_0(32LL);
          *(_DWORD *)uint64_t v36 = 136315138;
          *(void *)(v0 + 24) = OUTLINED_FUNCTION_0_22( (uint64_t)"makeUpdatedIntentForUnsupportedValue(resolveRecord:)",  (uint64_t)v3,  v49,  v52,  v54);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v50, v36 + 4);
          OUTLINED_FUNCTION_57_0( &dword_0,  v3,  v35,  "%s: Unsupported with NO alternatives => remove unsupported value.",  v36);
          OUTLINED_FUNCTION_5_23();
          OUTLINED_FUNCTION_0_2(v56);
          OUTLINED_FUNCTION_0_2((uint64_t)v36);
        }

        uint64_t v38 = *(void *)(v0 + 72);
        uint64_t v37 = *(void *)(v0 + 80);
        uint64_t v39 = *(void *)(v0 + 64);
        uint64_t v40 = ParameterResolutionRecord.parameter.getter(v2);
        uint64_t v41 = ParameterIdentifier.multicardinalIndex.getter(v40);
        char v43 = v42;
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
        if ((v43 & 1) != 0) {
          unint64_t v44 = 0LL;
        }
        else {
          unint64_t v44 = v41;
        }

        uint64_t v3 = v47;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v54, v52, v32);
        swift_bridgeObjectRelease();
      }
    }
  }

  swift_task_dealloc(*(void *)(v0 + 80));
  return (*(uint64_t (**)(os_log_s *))(v0 + 8))(v3);
}

uint64_t ContactUnsupportedFlowStrategy.isMultipleContactsUnsupported(intentResolutionResult:)(void *a1)
{
  uint64_t v2 = objc_opt_self(&OBJC_CLASS___INAddCallParticipantParticipantResolutionResult);
  if (swift_dynamicCastObjCClass(a1, v2)) {
    return [a1 unsupportedReason] == (char *)&dword_0 + 2;
  }
  uint64_t v3 = objc_opt_self(&OBJC_CLASS___INStartCallContactResolutionResult);
  uint64_t result = swift_dynamicCastObjCClass(a1, v3);
  if (result) {
    return [a1 unsupportedReason] == (char *)&dword_0 + 2;
  }
  return result;
}

uint64_t ContactUnsupportedFlowStrategy.init(outputProvider:sharedGlobals:)@<X0>( uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = a5 + *(int *)(type metadata accessor for ContactUnsupportedFlowStrategy(0LL, a3, a4, v9) + 36);
  return outlined init with take of AppSelectionSignalComponent(a2, v10);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_type_t v7 = (void *)swift_task_alloc(dword_42D644);
  *(void *)(v3 + 16) = v7;
  *os_log_type_t v7 = v3;
  v7[1] = protocol witness for Flow.execute() in conformance ContactNeedsValueGuardFlow<A>;
  return ContactUnsupportedFlowStrategy.makeUnsupportedValueOutput(resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_42D64C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return ContactUnsupportedFlowStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(a1, a2);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  return UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)(a1, a2, a3, a4);
}

uint64_t type metadata accessor for ContactUnsupportedFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for ContactUnsupportedFlowStrategy);
}

uint64_t type metadata completion function for ContactUnsupportedFlowStrategy(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "(";
    swift_initStructMetadata(a1, 0LL, 2LL, v4, a1 + 32);
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ContactUnsupportedFlowStrategy( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 40 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain(v9);
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v12 = *(void *)(v11 + 24);
    *(void *)(v10 + 24) = v12;
    *(void *)(v10 + 32) = *(void *)(v11 + 32);
    (**(void (***)(void))(v12 - 8))();
  }

  return v4;
}

uint64_t destroy for ContactUnsupportedFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8LL);
  (*(void (**)(void))(v3 + 8))();
  return __swift_destroy_boxed_opaque_existential_1((void *)((a1 + *(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8LL));
}

uint64_t initializeWithCopy for ContactUnsupportedFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v9 = *(void *)(v8 + 24);
  *(void *)(v7 + 24) = v9;
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  (**(void (***)(void))(v9 - 8))();
  return a1;
}

uint64_t assignWithCopy for ContactUnsupportedFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  __swift_assign_boxed_opaque_existential_1( (void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFFFF8LL),  (void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFFFF8LL));
  return a1;
}

uint64_t initializeWithTake for ContactUnsupportedFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v9 = *(void *)(v8 + 32);
  __int128 v10 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(void *)(v7 + 32) = v9;
  return a1;
}

uint64_t assignWithTake for ContactUnsupportedFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8LL;
  __swift_destroy_boxed_opaque_existential_1((void *)v7);
  __int128 v9 = *(_OWORD *)v8;
  __int128 v10 = *(_OWORD *)(v8 + 16);
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  *(_OWORD *)unint64_t v7 = v9;
  *(_OWORD *)(v7 + 16) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactUnsupportedFlowStrategy(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(v5 + 64);
  if (v7 >= a2)
  {
    if (v6 < 0x7FFFFFFF)
    {
      unint64_t v13 = *(void *)((char *)&dword_18 + ((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8LL));
      if (v13 >= 0xFFFFFFFF) {
        LODWORD(v1__swift_destroy_boxed_opaque_existential_1(v0 + 3) = -1;
      }
      return (v13 + 1);
    }

    else
    {
      return __swift_getEnumTagSinglePayload(a1, v6, v4);
    }
  }

  else
  {
    if (((((v8 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 40) & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = a2 - v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_90DF0 + 4 * byte_3217A0[v11]))();
  }

void storeEnumTagSinglePayload for ContactUnsupportedFlowStrategy( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0;
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFD8) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
  }

  if (a2 > v6)
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFD8)
    {
      unsigned int v10 = ~v6 + a2;
      bzero(a1, ((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 40);
      *a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t sub_90F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_BYTE *)(v5 + v6) = 0;
  if ((_DWORD)a2)
  {
    if (a3 < 0x7FFFFFFF)
    {
      unint64_t v8 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      if ((a2 & 0x80000000) != 0)
      {
        *(_OWORD *)(v8 + 8) = 0u;
        *(_OWORD *)(v8 + 24) = 0u;
        *(void *)unint64_t v8 = a2 ^ 0x80000000;
      }

      else
      {
        *(void *)(v8 + 24) = (a2 - 1);
      }
    }

    else
    {
      return __swift_storeEnumTagSinglePayload(v5, a2, a3, a4);
    }
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_0_22@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000034LL,  (a1 - 32) | 0x8000000000000000LL,  (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_4_22( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return swift_getAssociatedConformanceWitness(v11, v12, a11);
}

uint64_t DeviceState.isAuthenticatedForPhone.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnlockDevicePolicy(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static UnlockDevicePolicy.default.getter(v6);
  LOBYTE(a2) = dispatch thunk of DeviceState.isAuthenticated(for:)(v8, a1, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return a2 & 1;
}

uint64_t protocol witness for UnlockDeviceFlowStrategyAsync.authenticationPolicy.getter in conformance DefaultUnlockDeviceFlowStrategyAsync()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80LL))();
}

uint64_t protocol witness for UnlockDeviceFlowStrategyAsync.makePromptForDeviceUnlock() in conformance DefaultUnlockDeviceFlowStrategyAsync( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to UnlockDeviceFlowStrategyAsync.makePromptForDeviceUnlock()[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Action.run() in conformance PlayVoiceMailAction;
  return UnlockDeviceFlowStrategyAsync.makePromptForDeviceUnlock()(a1, a2, a3);
}

uint64_t type metadata accessor for DefaultUnlockDeviceFlowStrategyAsync()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin36DefaultUnlockDeviceFlowStrategyAsync);
}

uint64_t AnnotatedApp.launchId.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t PhoneIncomingCall.latestCallRecord.getter()
{
  return swift_retain(*(void *)(v0 + 32));
}

uint64_t SiriInferenceContactSlotResolver.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 40, a1);
}

uint64_t key path setter for PhoneIntentsRestrictedGuardFlow.state : PhoneIntentsRestrictedGuardFlow( char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess(*a2 + 80, v5, 1LL, 0LL);
  *(_BYTE *)(v3 + 80) = v2;
  return result;
}

uint64_t PhoneIntentsRestrictedGuardFlow.state.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t PhoneIntentsRestrictedGuardFlow.exitValue.getter()
{
  char v0 = OUTLINED_FUNCTION_8_8();
  return (v0 == 2) | v0 & 1u;
}

uint64_t PhoneIntentsRestrictedGuardFlow.__allocating_init(selectedIntent:app:sharedGlobals:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))(v4 + 144))(2LL, a1, a2, a3, v11);
  __swift_destroy_boxed_opaque_existential_1(a4);
  return v9;
}

uint64_t PhoneIntentsRestrictedGuardFlow.__allocating_init(state:selectedIntent:app:sharedGlobals:)( char a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t v11 = swift_allocObject(v5, 81LL, 7LL);
  *(_BYTE *)(v11 + 80) = a1;
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  *(void *)(v11 + 32) = a4;
  outlined init with take of AppSelectionSignalComponent(a5, v11 + 40);
  return v11;
}

uint64_t PhoneIntentsRestrictedGuardFlow.init(state:selectedIntent:app:sharedGlobals:)( char a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  *(_BYTE *)(v5 + 80) = a1;
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  *(void *)(v5 + 32) = a4;
  outlined init with take of AppSelectionSignalComponent(a5, v5 + 40);
  return v5;
}

uint64_t PhoneIntentsRestrictedGuardFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return swift_task_switch(PhoneIntentsRestrictedGuardFlow.execute(), 0LL, 0LL);
}

uint64_t PhoneIntentsRestrictedGuardFlow.execute()()
{
  uint64_t v1 = OUTLINED_FUNCTION_8_8();
  char locked = PhoneIntentsRestrictedGuardFlow.requiresINIntentsRestrictedWhileLockedAuthentication()();
  uint64_t v3 = *(void *)(v0 + 64);
  if ((locked & 1) == 0)
  {
    uint64_t v1 = swift_beginAccess(v3 + 80, v0 + 16, 1LL, 0LL);
    *(_BYTE *)(v3 + 80) = 0;
LABEL_6:
    static ExecuteResponse.complete()(v1);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *(void *)(v3 + 72);
  __swift_project_boxed_opaque_existential_1((void *)(v3 + 40), v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 104))(v4, v5);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v6);
  SiriKitFlowFactoryProtocol.makeAuthenticationGuardFlow()(v6, v7);
  uint64_t v9 = v8;
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)( v9,  partial apply for closure #1 in PhoneIntentsRestrictedGuardFlow.execute(),  v3);
  swift_release(v3);
  swift_release(v9);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static PhoneIntentsRestrictedGuardFlow.State.__derived_enum_equals(_:_:)(char a1, char a2)
{
  BOOL v2 = a2 == 2 && a1 == 2;
  if (a1 == 2 || a2 == 2) {
    return v2;
  }
  else {
    return static GuardFlowResult.== infix(_:_:)(a1 & 1, a2 & 1);
  }
}

uint64_t closure #1 in PhoneIntentsRestrictedGuardFlow.execute()(char *a1, uint64_t a2)
{
  char v3 = *a1;
  uint64_t result = swift_beginAccess(a2 + 80, v5, 1LL, 0LL);
  *(_BYTE *)(a2 + 80) = v3;
  return result;
}

uint64_t PhoneIntentsRestrictedGuardFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PhoneIntentsRestrictedGuardFlow();
  unint64_t v5 = lazy protocol witness table accessor for type PhoneIntentsRestrictedGuardFlow and conformance PhoneIntentsRestrictedGuardFlow();
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
}

uint64_t PhoneIntentsRestrictedGuardFlow.requiresINIntentsRestrictedWhileLockedAuthentication()()
{
  uint64_t v1 = v0;
  BOOL v2 = v0 + 5;
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[9];
  __swift_project_boxed_opaque_existential_1(v0 + 5, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 152))(&v142, v3, v4);
  uint64_t v5 = v146;
  __swift_project_boxed_opaque_existential_1(&v142, v145);
  uint64_t v6 = App.appIdentifier.getter();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(v5 + 16))(&v147, v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = outlined init with take of AnnotatedApp?( (uint64_t)&v147,  (uint64_t)&v153,  &demangling cache variable for type metadata for AnnotatedApp?);
  if (!(void)v153)
  {
    OUTLINED_FUNCTION_11_6(v7);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v62 = OUTLINED_FUNCTION_15_1();
    uint64_t v63 = OUTLINED_FUNCTION_4_23(v62, (uint64_t)static Logger.siriPhone);
    uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
    os_log_type_t v65 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v67 = OUTLINED_FUNCTION_7_0(32LL);
      *(void *)&__int128 v156 = v67;
      *(_DWORD *)uint64_t v66 = 136315138;
      uint64_t v142 = *v1;
      uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneIntentsRestrictedGuardFlow.Type);
      uint64_t v69 = String.init<A>(describing:)(&v142, v68);
      uint64_t v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, (uint64_t *)&v156);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v66 + 4);
      OUTLINED_FUNCTION_0_3();
      swift_bridgeObjectRelease();
      _os_log_impl( &dword_0,  v64,  v65,  "#%s Couldn't find cached AnnotatedApp, cannot determine if INIntentsRestrictedWhileLocked is set for this intent + app",  v66,  0xCu);
      swift_arrayDestroy(v67, 1LL);
      OUTLINED_FUNCTION_0_2(v67);
      OUTLINED_FUNCTION_0_2((uint64_t)v66);
    }

    else
    {

      OUTLINED_FUNCTION_0_3();
    }

    return 0LL;
  }

  __int128 v156 = v153;
  __int128 v157 = v154;
  __int128 v158 = v155;
  OUTLINED_FUNCTION_11_6(v7);
  uint64_t v8 = *((void *)&v158 + 1);
  uint64_t v9 = v0[2];
  uint64_t v10 = v1[3];
  swift_bridgeObjectRetain();
  specialized Set.contains(_:)(v9, v10, v8);
  LOBYTE(v__swift_destroy_boxed_opaque_existential_1(v0 + 9) = v11;
  swift_bridgeObjectRelease();
  if ((v9 & 1) == 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v71 = OUTLINED_FUNCTION_15_1();
    uint64_t v72 = OUTLINED_FUNCTION_4_23(v71, (uint64_t)static Logger.siriPhone);
    uint64_t v30 = (void *)Logger.logObject.getter(v72);
    os_log_type_t v74 = static os_log_type_t.debug.getter(v30, v73);
    BOOL v33 = OUTLINED_FUNCTION_93(v74);
    if (v33)
    {
      uint64_t v41 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v42 = OUTLINED_FUNCTION_7_0(32LL);
      OUTLINED_FUNCTION_9_20(4.8149e-34);
      uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneIntentsRestrictedGuardFlow.Type);
      uint64_t v77 = OUTLINED_FUNCTION_12_21(v75, v76);
      uint64_t v85 = OUTLINED_FUNCTION_16_11(v77, v78, v79, v80, v81, v82, v83, v84, v135);
      OUTLINED_FUNCTION_6_25(v85, v86, v87, v88, v89, v90, v91, v92, v138, v142);
      OUTLINED_FUNCTION_0_3();
      swift_bridgeObjectRelease();
      uint64_t v61 = "#%s Intent is not restricted";
      goto LABEL_17;
    }

uint64_t partial apply for closure #1 in PhoneIntentsRestrictedGuardFlow.execute()(char *a1)
{
  return closure #1 in PhoneIntentsRestrictedGuardFlow.execute()(a1, v1);
}

uint64_t type metadata accessor for PhoneIntentsRestrictedGuardFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin31PhoneIntentsRestrictedGuardFlow);
}

unint64_t lazy protocol witness table accessor for type PhoneIntentsRestrictedGuardFlow and conformance PhoneIntentsRestrictedGuardFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneIntentsRestrictedGuardFlow and conformance PhoneIntentsRestrictedGuardFlow;
  if (!lazy protocol witness table cache variable for type PhoneIntentsRestrictedGuardFlow and conformance PhoneIntentsRestrictedGuardFlow)
  {
    uint64_t v1 = type metadata accessor for PhoneIntentsRestrictedGuardFlow();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PhoneIntentsRestrictedGuardFlow, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneIntentsRestrictedGuardFlow and conformance PhoneIntentsRestrictedGuardFlow);
  }

  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneIntentsRestrictedGuardFlow.State( char *a1, char *a2)
{
  return static PhoneIntentsRestrictedGuardFlow.State.__derived_enum_equals(_:_:)(*a1, *a2);
}

uint64_t PhoneIntentsRestrictedGuardFlow.deinit()
{
  return v0;
}

uint64_t PhoneIntentsRestrictedGuardFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 81LL, 7LL);
}

uint64_t protocol witness for Flow.on(input:) in conformance PhoneIntentsRestrictedGuardFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152LL))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance PhoneIntentsRestrictedGuardFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168LL))();
}

uint64_t protocol witness for Flow.execute() in conformance PhoneIntentsRestrictedGuardFlow(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 160LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance ContactNeedsValueGuardFlow<A>;
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance PhoneIntentsRestrictedGuardFlow@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 136LL))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_91BFC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = OUTLINED_FUNCTION_8_8();
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for PhoneIntentsRestrictedGuardFlow.State( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE)
  {
    unsigned int v6 = *a1;
    BOOL v7 = v6 >= 2;
    unsigned int v8 = v6 - 2;
    if (!v7) {
      unsigned int v8 = -1;
    }
    if (v8 + 1 >= 2) {
      return v8;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    unsigned int v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_91C78 + 4 * asc_3218C0[v4]))();
  }

uint64_t storeEnumTagSinglePayload for PhoneIntentsRestrictedGuardFlow.State( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    LODWORD(OUTLINED_FUNCTION_5_18(v3, v4, v5) = v4;
  }
  else {
    LODWORD(OUTLINED_FUNCTION_5_18(v3, v4, v5) = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_91D20 + 4 * byte_3218CA[v5]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_91D54 + 4 * byte_3218C5[v5]))();
}

uint64_t sub_91D54(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_91D5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x91D64LL);
  }
  return result;
}

uint64_t sub_91D70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x91D78LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_91D7C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_91D84(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for PhoneIntentsRestrictedGuardFlow.State(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 2) {
    return v1 - 1;
  }
  else {
    return 0LL;
  }
}

_BYTE *destructiveInjectEnumTag for PhoneIntentsRestrictedGuardFlow.State(_BYTE *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneIntentsRestrictedGuardFlow.State()
{
  return &type metadata for PhoneIntentsRestrictedGuardFlow.State;
}

void *OUTLINED_FUNCTION_3_27( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  *(void *)(v28 - 96) = a28;
  return outlined release of Set<String>((void *)(v28 - 96));
}

uint64_t OUTLINED_FUNCTION_4_23(uint64_t a1, uint64_t a2)
{
  return swift_retain_n(v2, 2LL);
}

uint64_t OUTLINED_FUNCTION_6_25( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a10 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a10, v12 + 8, v11, v10);
}

void *OUTLINED_FUNCTION_7_24(uint64_t a1, ...)
{
  return (*(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 8))((uint64_t *)va, v1, v2);
}

void OUTLINED_FUNCTION_9_20(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t OUTLINED_FUNCTION_12_21(uint64_t a1, uint64_t a2, ...)
{
  return String.init<A>(describing:)(va, a1);
}

uint64_t OUTLINED_FUNCTION_13_20(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, ...)
{
  return outlined init with take of AnnotatedApp?(a1, (uint64_t)va, a3);
}

uint64_t OUTLINED_FUNCTION_14_13( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  return swift_release(a27);
}

uint64_t OUTLINED_FUNCTION_16_11( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &a9);
}

uint64_t OUTLINED_FUNCTION_17_19(uint64_t a1, ...)
{
  return outlined release of String?((uint64_t)va);
}

uint64_t AnnounceCallsContext.invocationType.getter(uint64_t a1, char a2)
{
  return a2 & 1;
}

Swift::Bool __swiftcall AnnounceCallsContext.isIncomingAudioCallNotification()()
{
  return ([v0 callCapability] == (char *)&dword_0 + 1) & v1;
}

BOOL static AppAndDeviceRestriction.AppCategory.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t AnnounceCallsContext.description.getter(void *a1, char a2)
{
  char v3 = a2 & 1;
  v15[0] = 0LL;
  v15[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(39LL);
  v4._object = (void *)0x8000000000348200LL;
  v4._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v4);
  id v5 = a1;
  id v6 = [v5 description];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  v10._uint64_t countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);

  swift_bridgeObjectRelease(v9);
  v11._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  v11._object = (void *)0x8000000000348220LL;
  String.append(_:)(v11);
  char v14 = v3;
  _print_unlocked<A, B>(_:_:)( &v14,  v15,  &type metadata for AnnounceCallInvocationType,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v12._uint64_t countAndFlagsBits = 32010LL;
  v12._object = (void *)0xE200000000000000LL;
  String.append(_:)(v12);
  return v15[0];
}

PhoneCallFlowDelegatePlugin::AnnounceCallsContext __swiftcall AnnounceCallsContext.init(incomingCall:invocationType:)( INCallRecord incomingCall, PhoneCallFlowDelegatePlugin::AnnounceCallInvocationType invocationType)
{
  PhoneCallFlowDelegatePlugin::AnnounceCallInvocationType v2 = invocationType & 1;
  result.incomingCall = incomingCall;
  result.invocationType = v2;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnnounceCallsContext()
{
  return AnnounceCallsContext.description.getter(*(void **)v0, *(_BYTE *)(v0 + 8));
}

void AppAndDeviceRestriction.AppCategory.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int PhoneCallActivityNotificationFlow.State.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceCallInvocationType( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static AppAndDeviceRestriction.AppCategory.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnounceCallInvocationType()
{
  return PhoneCallActivityNotificationFlow.State.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance AnnounceCallInvocationType(uint64_t a1)
{
}

void *IdentifyIncomingCallerOutputStrategy.announceCallsContext.getter()
{
  char v1 = *(void **)(v0 + 40);
  id v2 = v1;
  return v1;
}

uint64_t OutputPublisherWrapper.outputPublisherAsync.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 56, a1);
}

uint64_t IncomingCallActionHandleIntentFlowStrategy.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 96, a1);
}

uint64_t IncomingCallActionHandleIntentFlowStrategy.audioSessionManager.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 136, a1);
}

uint64_t AnswerCallOutputStrategy.init(device:incomingCallCats:announceCallsContext:audioSessionManager:entitlementChecker:)@<X0>( __int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, __int128 *a5@<X4>, __int128 *a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)(a7 + 24) = type metadata accessor for AnswerCallCATsSimple(0LL);
  *(void *)(a7 + 32) = &protocol witness table for AnswerCallCATsSimple;
  *(void *)a7 = a2;
  *(void *)(a7 + 40) = a3;
  *(_BYTE *)(a7 + 48) = a4;
  outlined init with take of AppSelectionSignalComponent(a1, a7 + 56);
  outlined init with take of AppSelectionSignalComponent(a5, a7 + 96);
  return outlined init with take of AppSelectionSignalComponent(a6, a7 + 136);
}

uint64_t AnswerCallOutputStrategy.makeCallConnectedSound(intentResponse:)(void *a1, uint64_t a2)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  id v6 = (os_log_s *)OUTLINED_FUNCTION_12_1(v5, (uint64_t)static Logger.siriPhone);
  os_log_type_t v8 = static os_log_type_t.debug.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    uint64_t v9 = (uint8_t *)OUTLINED_FUNCTION_1_0();
    *(_WORD *)uint64_t v9 = 0;
    OUTLINED_FUNCTION_5(&dword_0, v6, v8, "#AnswerCallOutputStrategy makeCallConnectedSound:", v9);
    OUTLINED_FUNCTION_0_2((uint64_t)v9);
  }

  Swift::String v11 = *(void **)(v2 + 40);
  if (!v11)
  {
    char v14 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v27 = static os_log_type_t.debug.getter(v14, v26);
    if (os_log_type_enabled(v14, v27))
    {
      uint64_t v28 = (uint8_t *)OUTLINED_FUNCTION_1_0();
      *(_WORD *)uint64_t v28 = 0;
      OUTLINED_FUNCTION_5( &dword_0,  v14,  v27,  "This is not a follow-up to a call announcement - not sending answer chime",  v28);
      OUTLINED_FUNCTION_0_2((uint64_t)v28);
    }

    goto LABEL_24;
  }

  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  char v14 = v11;
  char v15 = a1;
  if (v13(ObjectType, a2) != 2)
  {
    if (one-time initialization token for announceTelephony != -1) {
      swift_once( &one-time initialization token for announceTelephony,  one-time initialization function for announceTelephony);
    }
    OUTLINED_FUNCTION_12_1(v5, (uint64_t)static Logger.announceTelephony);
    os_log_type_t v29 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_7(v29))
    {
      uint64_t v30 = (_WORD *)OUTLINED_FUNCTION_1_0();
      *uint64_t v30 = 0;
      OUTLINED_FUNCTION_3_2( &dword_0,  v31,  v32,  "Siri did not find an incoming call when attempting to answer - not sending answer chime");
      OUTLINED_FUNCTION_0_2((uint64_t)v30);

      return 0LL;
    }

LABEL_24:
    return 0LL;
  }

  if (one-time initialization token for announceTelephony != -1) {
    swift_once( &one-time initialization token for announceTelephony,  one-time initialization function for announceTelephony);
  }
  uint64_t v16 = (os_log_s *)OUTLINED_FUNCTION_12_1(v5, (uint64_t)static Logger.announceTelephony);
  os_log_type_t v18 = static os_log_type_t.debug.getter(v16, v17);
  if (os_log_type_enabled(v16, v18))
  {
    uint64_t v19 = (uint8_t *)OUTLINED_FUNCTION_1_0();
    *(_WORD *)uint64_t v19 = 0;
    OUTLINED_FUNCTION_5(&dword_0, v16, v18, "Call was answered - sending answer chime.", v19);
    OUTLINED_FUNCTION_0_2((uint64_t)v19);
  }

  if (-[os_log_s preferredCallProvider](v14, "preferredCallProvider") == (char *)&dword_0 + 2)
  {
    Logger.logObject.getter(2LL);
    os_log_type_t v20 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_7(v20))
    {
      uint64_t v21 = (_WORD *)OUTLINED_FUNCTION_1_0();
      *uint64_t v21 = 0;
      OUTLINED_FUNCTION_3_2(&dword_0, v22, v23, "This is a FT call - sending answer chime with ID nil.");
      OUTLINED_FUNCTION_0_2((uint64_t)v21);
    }

    uint64_t v24 = 0LL;
    uint64_t v25 = 0LL;
  }

  else
  {
    id v33 = -[os_log_s identifier](v14, "identifier");
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    uint64_t v25 = v34;
  }

  type metadata accessor for SAUIPlayNotificationSound();
  static String._unconditionallyBridgeFromObjectiveC(_:)(SANotificationTypeConnectedCallValue);
  SAUIPlayNotificationSound.init(notificationId:soundType:)(v24, v25);
  uint64_t v36 = v35;

  return v36;
}

BOOL AnswerCallOutputStrategy.shouldCloseAssistantEarly(intentResponse:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[10];
  uint64_t v6 = v2[11];
  __swift_project_boxed_opaque_existential_1(v2 + 7, v5);
  if ((dispatch thunk of DeviceState.isWatch.getter(v5, v6) & 1) == 0) {
    return 0LL;
  }
  uint64_t ObjectType = swift_getObjectType(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(ObjectType, a2) == 2;
}

BOOL AnswerCallOutputStrategy.shouldShowIntentHandledDialog(intentResponse:)(void *a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  char v5 = IncomingCallIntentResponse.isIncomingCall.getter(ObjectType, a2);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = (os_log_s *)__swift_project_value_buffer(v6, (uint64_t)static Logger.siriPhone);
  id v8 = a1;
  uint64_t v9 = v7;
  Logger.logObject.getter(v8);
  os_log_type_t v10 = OUTLINED_FUNCTION_6_0();
  if (os_log_type_enabled(v7, v10))
  {
    uint64_t v11 = OUTLINED_FUNCTION_7_0(22LL);
    Swift::String v12 = (void *)OUTLINED_FUNCTION_7_0(8LL);
    uint64_t v17 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v19 = v17;
    *(_DWORD *)uint64_t v11 = 136315394;
    if ((v5 & 1) != 0) {
      uint64_t v13 = 0x6F7420544F4ELL;
    }
    else {
      uint64_t v13 = 28532LL;
    }
    if ((v5 & 1) != 0) {
      unint64_t v14 = 0xE600000000000000LL;
    }
    else {
      unint64_t v14 = 0xE200000000000000LL;
    }
    uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v11 + 4);
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2112;
    uint64_t v18 = (uint64_t)v8;
    id v15 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v11 + 14);
    *Swift::String v12 = v8;

    _os_log_impl( &dword_0,  v9,  v10,  "#AnswerCallOutputStrategy AnswerCall decided %s send AddViews because intentResponse %@ is incoming call.",  (uint8_t *)v11,  0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v12, 1LL);
    OUTLINED_FUNCTION_0_2((uint64_t)v12);
    swift_arrayDestroy(v17, 1LL);
    OUTLINED_FUNCTION_0_2(v17);
    OUTLINED_FUNCTION_0_2(v11);
  }

  else
  {
  }

  return (v5 & 1) == 0;
}

uint64_t AnswerCallOutputStrategy.shouldAllowAppToInitiateRecordingTemporarily(sharedGlobals:app:)( void *a1, uint64_t a2)
{
  v38[1] = a2;
  uint64_t v3 = type metadata accessor for AudioSource(0LL);
  uint64_t v40 = *(void *)(v3 - 8);
  __chkstk_darwin();
  char v5 = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AudioSource?, AudioSource?));
  __chkstk_darwin();
  id v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioSource?);
  __chkstk_darwin();
  os_log_type_t v10 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  Swift::String v12 = (char *)v38 - v11;
  __chkstk_darwin();
  unint64_t v14 = (char *)v38 - v13;
  uint64_t v16 = a1[3];
  uint64_t v15 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 112))(v16, v15);
  if (v17)
  {
    uint64_t v18 = v17;
    CurrentRequest.audioSource.getter();
    uint64_t v19 = swift_release(v18);
  }

  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_11_21((uint64_t)v14, 1LL);
  }

  static AudioSource.bluetoothDoAPDevice.getter(v19);
  OUTLINED_FUNCTION_11_21((uint64_t)v12, 0LL);
  uint64_t v20 = (uint64_t)&v8[*(int *)(v6 + 48)];
  outlined init with copy of AudioSource?((uint64_t)v14, (uint64_t)v8);
  outlined init with copy of AudioSource?((uint64_t)v12, v20);
  OUTLINED_FUNCTION_6_26((uint64_t)v8);
  if (v21)
  {
    OUTLINED_FUNCTION_7_25((uint64_t)v12);
    OUTLINED_FUNCTION_7_25((uint64_t)v14);
    OUTLINED_FUNCTION_6_26(v20);
    if (v21)
    {
      outlined destroy of SpeakableString?((uint64_t)v8, &demangling cache variable for type metadata for AudioSource?);
      goto LABEL_14;
    }

BOOL protocol witness for IncomingCallFlowOutputStrategy.shouldShowIntentHandledDialog(intentResponse:) in conformance AnswerCallOutputStrategy( void *a1, uint64_t a2)
{
  return AnswerCallOutputStrategy.shouldShowIntentHandledDialog(intentResponse:)(a1, a2);
}

unint64_t type metadata accessor for SAUIPlayNotificationSound()
{
  unint64_t result = lazy cache variable for type metadata for SAUIPlayNotificationSound;
  if (!lazy cache variable for type metadata for SAUIPlayNotificationSound)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___SAUIPlayNotificationSound);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAUIPlayNotificationSound);
  }

  return result;
}

uint64_t outlined init with copy of AudioSource?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioSource?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AudioSource and conformance AudioSource()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioSource and conformance AudioSource;
  if (!lazy protocol witness table cache variable for type AudioSource and conformance AudioSource)
  {
    uint64_t v1 = type metadata accessor for AudioSource(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AudioSource, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AudioSource and conformance AudioSource);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AnnounceCallInvocationType and conformance AnnounceCallInvocationType()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceCallInvocationType and conformance AnnounceCallInvocationType;
  if (!lazy protocol witness table cache variable for type AnnounceCallInvocationType and conformance AnnounceCallInvocationType)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AnnounceCallInvocationType,  &type metadata for AnnounceCallInvocationType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnnounceCallInvocationType and conformance AnnounceCallInvocationType);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AnnounceCallsContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for AnnounceCallsContext(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  char v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t assignWithTake for AnnounceCallsContext(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnnounceCallsContext(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 9))
    {
      LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnnounceCallsContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 9) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for AnnounceCallsContext()
{
}

uint64_t storeEnumTagSinglePayload for AnnounceCallInvocationType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = 1;
  }
  else {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_92D78 + 4 * byte_3219B5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_92DAC + 4 * asc_3219B0[v4]))();
}

uint64_t sub_92DAC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_92DB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x92DBCLL);
  }
  return result;
}

uint64_t sub_92DC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x92DD0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_92DD4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_92DDC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for AnnounceCallInvocationType()
{
}

uint64_t destroy for AnswerCallOutputStrategy(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 56));
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 96));
  return __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 136));
}

uint64_t initializeWithCopy for AnswerCallOutputStrategy(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  char v5 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  __int128 v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v6;
  uint64_t v7 = v6;
  id v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  id v9 = v5;
  v8(a1 + 56, a2 + 56, v7);
  __int128 v10 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 120) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 96, a2 + 96);
  __int128 v11 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 160) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 136, a2 + 136);
  return a1;
}

uint64_t assignWithCopy for AnswerCallOutputStrategy(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(void **)(a2 + 40);
  char v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  id v6 = v4;

  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  __swift_assign_boxed_opaque_existential_1((void *)(a1 + 56), (void *)(a2 + 56));
  __swift_assign_boxed_opaque_existential_1((void *)(a1 + 96), (void *)(a2 + 96));
  __swift_assign_boxed_opaque_existential_1((void *)(a1 + 136), (void *)(a2 + 136));
  return a1;
}

uint64_t assignWithTake for AnswerCallOutputStrategy(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  id v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;

  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 56));
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 96));
  __int128 v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  *(void *)(a1 + outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 - 168), v0 - 128) = *(void *)(a2 + 128);
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 136));
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnswerCallOutputStrategy(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 176))
    {
      LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnswerCallOutputStrategy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0LL;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 176) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 176) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for AnswerCallOutputStrategy()
{
}

uint64_t OUTLINED_FUNCTION_6_26(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_7_25(uint64_t a1)
{
  return outlined destroy of SpeakableString?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_8_17(uint64_t a1)
{
  return outlined destroy of SpeakableString?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_11_21(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1LL, v2);
}

uint64_t OutputPublisherWrapper.outputPublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 16, a1);
}

uint64_t CallingIntentContinueInAppStrategy.startCallCATsSimple.getter()
{
  return swift_retain(*(void *)(v0 + 56));
}

uint64_t PhoneCallStrategy.catPatternFamily.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 64, a1);
}

uint64_t PhoneCallStrategy.responseGenerator.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 104, a1);
}

uint64_t PhoneCallStrategy.appInfoBuilder.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 144, a1);
}

uint64_t PhoneCallStrategy.ttsEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 184);
}

uint64_t PhoneCallStrategy.__allocating_init(catFamily:catPatternFamily:responseGenerator:appInfoBuilder:deviceState:)( uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v11 = swift_allocObject(v5, 185LL, 7LL);
  PhoneCallStrategy.init(catFamily:catPatternFamily:responseGenerator:appInfoBuilder:deviceState:)(a1, a2, a3, a4, a5);
  return v11;
}

uint64_t PhoneCallStrategy.init(catFamily:catPatternFamily:responseGenerator:appInfoBuilder:deviceState:)( uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v6 = v5;
  *(void *)(v5 + 56) = a1;
  outlined init with copy of SignalProviding((uint64_t)a2, v5 + 64);
  outlined init with copy of SignalProviding((uint64_t)a3, v5 + 104);
  outlined init with copy of SignalProviding((uint64_t)a4, v5 + 144);
  uint64_t v12 = v5 + 16;
  outlined init with copy of SignalProviding((uint64_t)a5, v12);
  uint64_t v13 = *(void *)(v6 + 40);
  __swift_project_boxed_opaque_existential_1((void *)v12, v13);
  swift_retain();
  LOBYTE(v12) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v13);
  swift_release(a1);
  __swift_destroy_boxed_opaque_existential_1(a5);
  __swift_destroy_boxed_opaque_existential_1(a4);
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a2);
  *(_BYTE *)(v6 + 184) = v12 & 1;
  return v6;
}

void *PhoneCallStrategy.deinit()
{
  return v0;
}

uint64_t PhoneCallStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 185LL, 7LL);
}

uint64_t type metadata completion function for PhoneCallStrategy(uint64_t a1)
{
  v2[0] = "(";
  v2[1] = &unk_321B30;
  void v2[2] = "(";
  v2[3] = "(";
  v2[4] = "(";
  v2[5] = &unk_321B48;
  return swift_initClassMetadata2(a1, 0LL, 6LL, v2, a1 + 120);
}

uint64_t type metadata accessor for PhoneCallStrategy(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for PhoneCallStrategy);
}

uint64_t specialized PhoneCallStrategy.init(catFamily:catPatternFamily:responseGenerator:appInfoBuilder:deviceState:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12 = a8;
  void v27[3] = a8;
  id v27[4] = a11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL))( boxed_opaque_existential_1,  a2,  v12);
  v26[3] = a7;
  id v26[4] = a10;
  uint64_t v20 = __swift_allocate_boxed_opaque_existential_1(v26);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32LL))(v20, a3, a7);
  v25[3] = a9;
  v25[4] = a12;
  char v21 = __swift_allocate_boxed_opaque_existential_1(v25);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a9 - 8) + 32LL))(v21, a4, a9);
  *(void *)(a6 + 56) = a1;
  outlined init with copy of SignalProviding((uint64_t)v27, a6 + 64);
  outlined init with copy of SignalProviding((uint64_t)v26, a6 + 104);
  outlined init with copy of SignalProviding((uint64_t)v25, a6 + 144);
  outlined init with copy of SignalProviding((uint64_t)a5, a6 + 16);
  uint64_t v22 = *(void *)(a6 + 40);
  __swift_project_boxed_opaque_existential_1((void *)(a6 + 16), v22);
  swift_retain();
  LOBYTE(v1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v22);
  swift_release(a1);
  __swift_destroy_boxed_opaque_existential_1(a5);
  __swift_destroy_boxed_opaque_existential_1(v25);
  __swift_destroy_boxed_opaque_existential_1(v26);
  __swift_destroy_boxed_opaque_existential_1(v27);
  *(_BYTE *)(a6 + 184) = v12 & 1;
  return a6;
}

uint64_t OUTLINED_FUNCTION_0_23( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return specialized PhoneCallStrategy.init(catFamily:catPatternFamily:responseGenerator:appInfoBuilder:deviceState:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12);
}

PhoneCallFlowDelegatePlugin::SuggestionsCATsSimple::Properties_optional __swiftcall SuggestionsCATsSimple.Properties.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of SuggestionsCATsSimple.Properties.init(rawValue:),  v3);
  OUTLINED_FUNCTION_27_2();
  if (v1 >= 3) {
    return (PhoneCallFlowDelegatePlugin::SuggestionsCATsSimple::Properties_optional)3;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::SuggestionsCATsSimple::Properties_optional)v1;
  }
}

void SuggestionsCATsSimple.Properties.rawValue.getter(char a1)
{
  if (!a1) {
    OUTLINED_FUNCTION_38_2();
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SuggestionsCATsSimple.Properties( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance SuggestionsCATsSimple.Properties()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SuggestionsCATsSimple.Properties( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SuggestionsCATsSimple.Properties( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::SuggestionsCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.Properties@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SuggestionsCATsSimple::Properties_optional *a2@<X8>)
{
  result.int value = SuggestionsCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SuggestionsCATsSimple.Properties( void *a1@<X8>)
{
  *a1 = v3;
  a1[1] = v4;
}

uint64_t SuggestionsCATsSimple.phoneCall_StartCall(name:hasReference:thirdPartyAppName:)( uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v3;
  *(_BYTE *)(v4 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a2;
  *(void *)(v4 + 16) = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 40) = OUTLINED_FUNCTION_12_0(v5);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t SuggestionsCATsSimple.phoneCall_StartCall(name:hasReference:thirdPartyAppName:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_8_2(v2, 176LL);
  v0[6] = v3;
  uint64_t v4 = OUTLINED_FUNCTION_4_24(v3, (__n128)xmmword_320080);
  OUTLINED_FUNCTION_27_6((uint64_t)v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  uint64_t v7 = OUTLINED_FUNCTION_45_0(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_41_1(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    id v9 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v9);
  }

  unint64_t v10 = v0[3];
  OUTLINED_FUNCTION_0_24();
  v3[6].n128_u8[0] = v11;
  v3[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v3[8].n128_u64[0] = 0xD000000000000011LL;
  uint64_t v12 = OUTLINED_FUNCTION_37_9((uint64_t)"thirdPartyAppName");
  if (v10)
  {
    uint64_t v12 = type metadata accessor for SirikitApp(v12);
  }

  else
  {
    v3[9].n128_u64[1] = 0LL;
    v3[10].n128_u64[0] = 0LL;
  }

  v3[9].n128_u64[0] = v10;
  v3[10].n128_u64[1] = v12;
  OUTLINED_FUNCTION_18_2();
  uint64_t v13 = (void *)swift_task_alloc(v1);
  v0[7] = v13;
  *uint64_t v13 = v0;
  v13[1] = SuggestionsCATsSimple.phoneCall_StartCall(name:hasReference:thirdPartyAppName:);
  return OUTLINED_FUNCTION_12_22(0xD00000000000001FLL, 0x8000000000341FB0LL, (uint64_t)v3, v15);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_10_6();
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v1, v2, v3);
  }

  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_23_3();
    uint64_t v5 = OUTLINED_FUNCTION_17();
    return OUTLINED_FUNCTION_8_3(v5, v6);
  }

BOOL SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.init(rawValue:);
  return SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.init(rawValue:)(a1, v1);
}

unint64_t SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.rawValue.getter()
{
  return OUTLINED_FUNCTION_17_8();
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.PhoneCall_StartCallDialogIds@<W0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t SuggestionsCATsSimple.phoneCall_StartCallAsLabels(name:hasReference:thirdPartyAppName:)( uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v3;
  *(_BYTE *)(v4 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a2;
  *(void *)(v4 + 16) = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 40) = OUTLINED_FUNCTION_12_0(v5);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t SuggestionsCATsSimple.phoneCall_StartCallAsLabels(name:hasReference:thirdPartyAppName:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_8_2(v2, 176LL);
  v0[6] = v3;
  uint64_t v4 = OUTLINED_FUNCTION_4_24(v3, (__n128)xmmword_320080);
  OUTLINED_FUNCTION_27_6((uint64_t)v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  uint64_t v7 = OUTLINED_FUNCTION_45_0(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_41_1(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    id v9 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v9);
  }

  unint64_t v10 = v0[3];
  OUTLINED_FUNCTION_0_24();
  v3[6].n128_u8[0] = v11;
  v3[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v3[8].n128_u64[0] = 0xD000000000000011LL;
  uint64_t v12 = OUTLINED_FUNCTION_37_9((uint64_t)"thirdPartyAppName");
  if (v10)
  {
    uint64_t v12 = type metadata accessor for SirikitApp(v12);
  }

  else
  {
    v3[9].n128_u64[1] = 0LL;
    v3[10].n128_u64[0] = 0LL;
  }

  v3[9].n128_u64[0] = v10;
  v3[10].n128_u64[1] = v12;
  OUTLINED_FUNCTION_18_2();
  uint64_t v13 = (void *)swift_task_alloc(v1);
  v0[7] = v13;
  lazy protocol witness table accessor for type SuggestionsCATsSimple.PhoneCall_StartCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartCallDialogIds();
  *uint64_t v13 = v0;
  v13[1] = SuggestionsCATsSimple.phoneCall_StartCallAsLabels(name:hasReference:thirdPartyAppName:);
  OUTLINED_FUNCTION_38_2();
  return OUTLINED_FUNCTION_11_22( v14,  v15,  (uint64_t)v3,  (uint64_t)&type metadata for SuggestionsCATsSimple.PhoneCall_StartCallDialogIds,  v16,  v18);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_10_6();
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v1, v2, v3);
  }

  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_23_3();
    uint64_t v5 = OUTLINED_FUNCTION_17();
    return OUTLINED_FUNCTION_8_3(v5, v6);
  }

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.PhoneCall_StartCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartCallDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartCallDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartCallDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.PhoneCall_StartCallDialogIds,  &type metadata for SuggestionsCATsSimple.PhoneCall_StartCallDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartCallDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartCallDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartCallDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.PhoneCall_StartCallDialogIds,  &type metadata for SuggestionsCATsSimple.PhoneCall_StartCallDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartCallDialogIds);
  }

  return result;
}

uint64_t SuggestionsCATsSimple.phoneCall_StartFTCall(name:hasReference:)(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 64) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = OUTLINED_FUNCTION_12_0(v4);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t SuggestionsCATsSimple.phoneCall_StartFTCall(name:hasReference:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_8_2(v1, 128LL);
  *(void *)(v0 + 40) = v2;
  uint64_t v3 = OUTLINED_FUNCTION_4_24(v2, (__n128)xmmword_31D880);
  OUTLINED_FUNCTION_27_6((uint64_t)v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_26_0();
  uint64_t v6 = OUTLINED_FUNCTION_3_22(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_41_1(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    char v8 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v8);
  }

  OUTLINED_FUNCTION_0_24();
  v2[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v2[6].n128_u8[0] = v9;
  unint64_t v10 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v10;
  *unint64_t v10 = v0;
  v10[1] = SuggestionsCATsSimple.phoneCall_StartFTCall(name:hasReference:);
  OUTLINED_FUNCTION_38_2();
  return OUTLINED_FUNCTION_12_22(0xD000000000000021LL, v11, (uint64_t)v2, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_0();
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v1, v2, v3);
  }

  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_23_3();
    uint64_t v5 = OUTLINED_FUNCTION_17();
    return OUTLINED_FUNCTION_8_3(v5, v6);
  }

BOOL SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds.init(rawValue:);
  return SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds@<W0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds@<X0>( void *a1@<X8>)
{
  unint64_t result = SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.rawValue.getter();
  *a1 = 0xD000000000000010LL;
  a1[1] = v3;
  return result;
}

uint64_t SuggestionsCATsSimple.phoneCall_StartFTCallAsLabels(name:hasReference:)(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 64) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = OUTLINED_FUNCTION_12_0(v4);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t SuggestionsCATsSimple.phoneCall_StartFTCallAsLabels(name:hasReference:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_8_2(v1, 128LL);
  *(void *)(v0 + 40) = v2;
  uint64_t v3 = OUTLINED_FUNCTION_4_24(v2, (__n128)xmmword_31D880);
  OUTLINED_FUNCTION_27_6((uint64_t)v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_26_0();
  uint64_t v6 = OUTLINED_FUNCTION_3_22(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_41_1(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    char v8 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v8);
  }

  OUTLINED_FUNCTION_0_24();
  v2[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v2[6].n128_u8[0] = v9;
  unint64_t v10 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  *(void *)(v0 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v10;
  lazy protocol witness table accessor for type SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds();
  *unint64_t v10 = v0;
  v10[1] = SuggestionsCATsSimple.phoneCall_StartFTCallAsLabels(name:hasReference:);
  OUTLINED_FUNCTION_38_2();
  return OUTLINED_FUNCTION_11_22( 0xD000000000000021LL,  v11,  (uint64_t)v2,  (uint64_t)&type metadata for SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds,  v12,  v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_0();
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v1, v2, v3);
  }

  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_23_3();
    uint64_t v5 = OUTLINED_FUNCTION_17();
    return OUTLINED_FUNCTION_8_3(v5, v6);
  }

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds,  &type metadata for SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds,  &type metadata for SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds);
  }

  return result;
}

uint64_t SuggestionsCATsSimple.phoneCall_StartGFTCall()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCall();
  OUTLINED_FUNCTION_38_2();
  return v3(0xD000000000000022LL);
}

uint64_t SuggestionsCATsSimple.phoneCall_StartGFTCall()(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  uint64_t v6 = swift_task_dealloc(v4);
  if (!v1) {
    uint64_t v6 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

BOOL SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds.init(rawValue:);
  return SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.init(rawValue:)(a1, v1);
}

BOOL SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.init(rawValue:)( Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v4._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  _findStringSwitchCase(cases:string:)(cases, v4);
  OUTLINED_FUNCTION_27_2();
  return v2 != 0;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds@<W0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels()()
{
  *(void *)(v0 + 16) = v1;
  lazy protocol witness table accessor for type SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds();
  *Swift::OpaquePointer v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  return v3(0xD000000000000022LL);
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds,  &type metadata for SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds,  &type metadata for SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.Properties and conformance SuggestionsCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.Properties and conformance SuggestionsCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.Properties and conformance SuggestionsCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.Properties,  &type metadata for SuggestionsCATsSimple.Properties);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.Properties and conformance SuggestionsCATsSimple.Properties);
  }

  return result;
}

uint64_t type metadata accessor for SuggestionsCATsSimple(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for SuggestionsCATsSimple;
  if (!type metadata singleton initialization cache for SuggestionsCATsSimple) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SuggestionsCATsSimple);
  }
  return result;
}

uint64_t type metadata completion function for SuggestionsCATsSimple(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for SuggestionsCATsSimple);
}

uint64_t ObjC metadata update function for SuggestionsCATsSimple()
{
  return type metadata accessor for SuggestionsCATsSimple(0LL);
}

uint64_t storeEnumTagSinglePayload for SuggestionsCATsSimple.Properties( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = 1;
  }
  else {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_94188 + 4 * byte_321B65[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_941BC + 4 * byte_321B60[v4]))();
}

uint64_t sub_941BC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_941C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x941CCLL);
  }
  return result;
}

uint64_t sub_941D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x941E0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_941E4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_941EC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for SuggestionsCATsSimple.Properties()
{
}

void type metadata accessor for SuggestionsCATsSimple.PhoneCall_StartCallDialogIds()
{
}

void type metadata accessor for SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for SuggestionsCATsSimple.PhoneCall_StartCallDialogIds( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_94260 + 4 * byte_321B6A[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_94280 + 4 * byte_321B6F[v4]))();
  }
}

_BYTE *sub_94260(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_94280(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_94288(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_94290(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_94298(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_942A0(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void type metadata accessor for SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds()
{
}

void OUTLINED_FUNCTION_0_24()
{
  *(_BYTE *)(v0 + 9__swift_destroy_boxed_opaque_existential_1(v0 + 3) = 0;
  *(_WORD *)(v0 + 94) = -5120;
}

__n128 *OUTLINED_FUNCTION_4_24(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 1701667182LL;
  result[2].n128_u64[1] = 0xE400000000000000LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_11_22( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t OUTLINED_FUNCTION_12_22(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_37_9@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 136) = (a1 - 32) | 0x8000000000000000LL;
  return 0LL;
}

uint64_t (*default argument 2 of DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:)())()
{
  return closure #1 in default argument 2 of DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:);
}

uint64_t DictionaryBackedCache.__allocating_init(timeToLiveInSeconds:capacity:nowDateProvider:)()
{
  uint64_t v1 = swift_allocObject(v0, 56LL, 7LL);
  DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:)();
  return v1;
}

void *DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:)()
{
  uint64_t v5 = *v1;
  uint64_t v6 = *(void *)(*v1 + 80LL);
  uint64_t v8 = OUTLINED_FUNCTION_4_25(v7, *(void *)(*v1 + 88LL));
  uint64_t v9 = type metadata accessor for Date(255LL);
  uint64_t v10 = OUTLINED_FUNCTION_1_27(0LL, v8, v9, (uint64_t)"value expirationDate ");
  v1[2] = Dictionary.init(minimumCapacity:)(v3, v6, v10, *(void *)(v5 + 96));
  v1[3] = v4;
  v1[4] = v3;
  v1[5] = v2;
  v1[6] = v0;
  return v1;
}

uint64_t DictionaryBackedCache.count.getter()
{
  uint64_t v2 = (void *)*v0;
  uint64_t v3 = OUTLINED_FUNCTION_22_0((uint64_t)(v0 + 2), (uint64_t)v10);
  uint64_t v4 = v0[2];
  uint64_t v5 = v2[10];
  OUTLINED_FUNCTION_4_25(v3, v2[11]);
  uint64_t v6 = OUTLINED_FUNCTION_3_28();
  swift_bridgeObjectRetain();
  uint64_t v7 = OUTLINED_FUNCTION_1_27(0LL, v1, v6, (uint64_t)"value expirationDate ");
  uint64_t v8 = Dictionary.count.getter(v4, v5, v7, v2[12]);
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    uint64_t v1 = type metadata accessor for Date(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }

  return result;
}

{
  unint64_t result;
  uint64_t v1;
  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    uint64_t v1 = type metadata accessor for Date(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }

  return result;
}

void DictionaryBackedCache.put(key:value:)()
{
  uint64_t v2 = v0;
  uint64_t v26 = v3;
  uint64_t v24 = v4;
  double v5 = *v0;
  OUTLINED_FUNCTION_4_25(v4, *(void *)(*(void *)v0 + 88LL));
  uint64_t v6 = OUTLINED_FUNCTION_3_28();
  uint64_t v25 = v1;
  uint64_t v7 = OUTLINED_FUNCTION_1_27(255LL, v1, v6, (uint64_t)"value expirationDate ");
  OUTLINED_FUNCTION_8_18(v7);
  OUTLINED_FUNCTION_10_21();
  __chkstk_darwin();
  uint64_t v9 = (char *)&v22 - v8;
  uint64_t v10 = *(void *)(*(void *)&v5 + 80LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v22 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = v6;
  uint64_t v23 = *(void *)(v6 - 8);
  OUTLINED_FUNCTION_17_2();
  uint64_t v13 = __chkstk_darwin();
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*((void (**)(uint64_t))v2 + 5))(v13);
  OUTLINED_FUNCTION_22_0((uint64_t)(v2 + 2), (uint64_t)&v29);
  uint64_t v16 = *(void *)(*(void *)&v5 + 96LL);
  uint64_t v17 = swift_bridgeObjectRetain();
  uint64_t v18 = Dictionary.count.getter(v17, v10, v1, v16);
  swift_bridgeObjectRelease();
  if (v18 == *((void *)v2 + 4)) {
    DictionaryBackedCache.evict(at:)();
  }
  uint64_t v19 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v22, v24, v10);
  uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v25 - 8) + 16LL))(v9, v26);
  Date.addingTimeInterval(_:)(v20, v2[3]);
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 0LL, 1LL, v1);
  OUTLINED_FUNCTION_5_9((uint64_t)(v2 + 2), (uint64_t)v28);
  uint64_t v21 = type metadata accessor for Dictionary(0LL, v10, v1, v16);
  Dictionary.subscript.setter(v9, v19, v21);
  swift_endAccess(v28);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v27);
  OUTLINED_FUNCTION_7_5();
}

uint64_t DictionaryBackedCache.remove(key:)(uint64_t a1)
{
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_25(a1, *(void *)(*v1 + 88));
  uint64_t v5 = OUTLINED_FUNCTION_3_28();
  uint64_t v6 = OUTLINED_FUNCTION_1_27(255LL, v2, v5, (uint64_t)"value expirationDate ");
  OUTLINED_FUNCTION_8_18(v6);
  OUTLINED_FUNCTION_10_21();
  __chkstk_darwin();
  uint64_t v8 = &v19[-v7 - 8];
  uint64_t v9 = *(void *)(v4 + 80);
  __chkstk_darwin();
  uint64_t v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v11, a1, v9);
  OUTLINED_FUNCTION_12_23();
  __swift_storeEnumTagSinglePayload(v13, v14, v15, v2);
  OUTLINED_FUNCTION_5_9((uint64_t)(v1 + 2), (uint64_t)v19);
  uint64_t v16 = type metadata accessor for Dictionary(0LL, v9, v2, *(void *)(v4 + 96));
  Dictionary.subscript.setter(v8, v11, v16);
  return swift_endAccess(v19);
}

void DictionaryBackedCache.evict(at:)()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 80LL);
  uint64_t v4 = OUTLINED_FUNCTION_4_25(v3, *(void *)(*v0 + 88LL));
  uint64_t v26 = type metadata accessor for Date(255LL);
  uint64_t v27 = v4;
  uint64_t v5 = OUTLINED_FUNCTION_1_27(255LL, v4, v26, (uint64_t)"value expirationDate ");
  uint64_t v6 = OUTLINED_FUNCTION_1_27(255LL, v2, v5, (uint64_t)"key value ");
  uint64_t v7 = type metadata accessor for Optional(0LL, v6);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v11 = type metadata accessor for Optional(0LL, v2);
  uint64_t v28 = *(void *)(v11 - 8);
  uint64_t v29 = v11;
  OUTLINED_FUNCTION_10_21();
  __chkstk_darwin();
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v25 = *(void *)(v2 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_7_26(v14, (uint64_t)v24);
  if ((DictionaryBackedCache.evictStaleEntries(at:)() & 1) == 0)
  {
    OUTLINED_FUNCTION_22_0((uint64_t)(v0 + 2), (uint64_t)&v31);
    uint64_t v30 = v0[2];
    uint64_t v15 = type metadata accessor for Dictionary(0LL, v2, v5, *(void *)(v1 + 96));
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v15);
    Collection.randomElement()(v15, WitnessTable);
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1LL, v6) == 1)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      OUTLINED_FUNCTION_12_23();
      __swift_storeEnumTagSinglePayload(v17, v18, v19, v2);
    }

    else
    {
      uint64_t v20 = &v10[*(int *)(v6 + 48) + *(int *)(v5 + 48)];
      uint64_t v21 = v25;
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
      v22(v13, v10, v2);
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0LL, 1LL, v2);
      (*(void (**)(char *))(*(void *)(v26 - 8) + 8LL))(v20);
      OUTLINED_FUNCTION_5_24(*(void *)(v27 - 8));
      if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1LL, v2) != 1)
      {
        uint64_t v23 = (uint64_t)v24;
        v22(v24, v13, v2);
        (*(void (**)(uint64_t))(*v0 + 192LL))(v23);
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v2);
        goto LABEL_7;
      }
    }

    (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v29);
  }

uint64_t DictionaryBackedCache.evictStaleEntries(at:)()
{
  uint64_t v60 = v2;
  uint64_t v61 = v3;
  uint64_t v5 = v4;
  uint64_t v6 = *v0;
  uint64_t v7 = *(void *)(*v0 + 80LL);
  uint64_t v8 = *(void *)(*v0 + 88LL);
  type metadata accessor for Optional(255LL, v8);
  uint64_t v51 = OUTLINED_FUNCTION_3_28();
  uint64_t v52 = v1;
  uint64_t v9 = OUTLINED_FUNCTION_1_27(255LL, v1, v51, (uint64_t)"value expirationDate ");
  uint64_t v10 = OUTLINED_FUNCTION_1_27(0LL, v7, v9, (uint64_t)"key value ");
  uint64_t v49 = *(void *)(v10 - 8);
  uint64_t v50 = v10;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  uint64_t v48 = v11;
  __chkstk_darwin();
  uint64_t v47 = (char *)&v42 - v12;
  OUTLINED_FUNCTION_22_0((uint64_t)(v0 + 2), (uint64_t)&v59);
  unint64_t v46 = v0;
  uint64_t v13 = v0[2];
  v58[2] = v7;
  uint64_t v58[3] = v8;
  uint64_t v14 = *(void *)(v6 + 96);
  v58[4] = v14;
  v58[5] = v5;
  swift_bridgeObjectRetain();
  uint64_t v54 = v9;
  uint64_t v55 = v7;
  uint64_t v43 = v14;
  uint64_t v15 = ((uint64_t (*)(BOOL (*)(uint64_t, uint64_t), void *, uint64_t, uint64_t, uint64_t, uint64_t))Dictionary.filter(_:))( partial apply for closure #1 in DictionaryBackedCache.evictStaleEntries(at:),  v58,  v13,  v7,  v9,  v14);
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v44 = v15 + 64;
  uint64_t v17 = 1LL << *(_BYTE *)(v15 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v45 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v53 = v15;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v21 = 0LL;
  uint64_t v23 = v54;
  uint64_t v22 = v55;
  uint64_t v24 = v47;
  uint64_t v25 = v48;
  if (!v19) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v56 = (v19 - 1) & v19;
  int64_t v57 = v21;
  for (unint64_t i = __clz(__rbit64(v19)) | (v21 << 6); ; unint64_t i = __clz(__rbit64(v28)) + (v29 << 6))
  {
    uint64_t v31 = v53;
    uint64_t v32 = *(void *)(v22 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v32 + 16))( v24,  *(void *)(v53 + 48) + *(void *)(v32 + 72) * i,  v22);
    uint64_t v33 = *(void *)(v23 - 8);
    unint64_t v34 = *(void *)(v31 + 56) + *(void *)(v33 + 72) * i;
    uint64_t v35 = v50;
    char v36 = &v24[*(int *)(v50 + 48)];
    (*(void (**)(char *, unint64_t, uint64_t))(v33 + 16))(v36, v34, v23);
    uint64_t v37 = &v36[*(int *)(v23 + 48)];
    uint64_t v38 = v25 + *(int *)(v35 + 48);
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v25, v24, v22);
    uint64_t v39 = v38 + *(int *)(v23 + 48);
    OUTLINED_FUNCTION_9_21(*(void *)(v52 - 8));
    (*(void (**)(uint64_t, char *))(*(void *)(v51 - 8) + 32LL))(v39, v37);
    (*(void (**)(uint64_t))(*v46 + 192LL))(v25);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(v25, v35);
    unint64_t v19 = v56;
    int64_t v21 = v57;
    if (v56) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v27 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
      __break(1u);
      goto LABEL_21;
    }

    if (v27 >= v45) {
      goto LABEL_19;
    }
    unint64_t v28 = *(void *)(v44 + 8 * v27);
    int64_t v29 = v21 + 1;
    if (!v28)
    {
      int64_t v29 = v21 + 2;
      if (v21 + 2 >= v45) {
        goto LABEL_19;
      }
      unint64_t v28 = *(void *)(v44 + 8 * v29);
      if (!v28) {
        break;
      }
    }

BOOL closure #1 in DictionaryBackedCache.evictStaleEntries(at:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a3;
  uint64_t v8 = type metadata accessor for Optional(255LL, a5);
  uint64_t v9 = type metadata accessor for Date(255LL);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255LL, v8, v9, "value expirationDate ", 0LL);
  uint64_t v11 = swift_getTupleTypeMetadata2(0LL, a4, TupleTypeMetadata2, "key value ", 0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v20 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16LL))((char *)&v20 - v13, a1, a4);
  uint64_t v15 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v16 = &v14[*(int *)(v11 + 48) + v15];
  uint64_t v17 = a2 + v15;
  (*(void (**)(void))(*(void *)(v8 - 8) + 16LL))();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL))(v16, v17, v9);
  unint64_t v18 = lazy protocol witness table accessor for type Date and conformance Date();
  LOBYTE(a__swift_destroy_boxed_opaque_existential_1(v0 + 2) = dispatch thunk of static Comparable.< infix(_:_:)(v21, v16, v9, v18);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return (a2 & 1) == 0;
}

uint64_t DictionaryBackedCache.deinit()
{
  return v0;
}

uint64_t DictionaryBackedCache.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t type metadata completion function for DictionaryBackedCache(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.Int64 + 64;
  void v2[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[3] = (char *)&value witness table for () + 64;
  return swift_initClassMetadata2(a1, 0LL, 4LL, v2, a1 + 104);
}

uint64_t type metadata accessor for DictionaryBackedCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DictionaryBackedCache);
}

BOOL partial apply for closure #1 in DictionaryBackedCache.evictStaleEntries(at:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in DictionaryBackedCache.evictStaleEntries(at:)(a1, a2, v2[5], v2[2], v2[3]);
}

uint64_t OUTLINED_FUNCTION_1_27(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_getTupleTypeMetadata2(a1, a2, a3, a4, 0LL);
}

uint64_t OUTLINED_FUNCTION_3_28()
{
  return type metadata accessor for Date(255LL);
}

uint64_t OUTLINED_FUNCTION_4_25(uint64_t a1, uint64_t a2)
{
  return type metadata accessor for Optional(255LL, a2);
}

uint64_t OUTLINED_FUNCTION_6_27()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 200) + 8LL))(v0, v1);
}

void OUTLINED_FUNCTION_7_26(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 160) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t OUTLINED_FUNCTION_8_18(uint64_t a1)
{
  return type metadata accessor for Optional(0LL, a1);
}

uint64_t OUTLINED_FUNCTION_9_21@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(v1, v2);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_13_21(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1LL, v1);
}

  ;
}

uint64_t _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lF11SiriKitFlow010TemplatingA0V_s5Error_pSaySo9SAAceViewCGTg5( void (*a1)(uint64_t *__return_ptr, char *))
{
  uint64_t v3 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of Result<TemplatingResult, Error>(v1, (uint64_t)v9);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
  a1(&v13, v6);
  uint64_t v10 = v13;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v10;
}

id static StartCallViewBuilders.makeCallCancelSlotConfirmationButtonsBuilder(intent:templatingService:sharedGlobals:app:intentResolutionResult:isDirectInvocation:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v16 = static os_log_type_t.debug.getter(v14, v15);
  if (os_log_type_enabled(v14, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl( &dword_0,  v14,  v16,  "#StartCallViewBuilders Providing CallCancelSlotConfirmationButtonsBuilder",  v17,  2u);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  uint64_t v18 = a3[3];
  uint64_t v19 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v18);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  id v21 = a1;
  swift_retain();
  v20(v18, v19);
  outlined init with copy of SignalProviding((uint64_t)a3, a7 + 80);
  *(void *)a7 = v21;
  *(void *)(a7 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = a2;
  *(void *)(a7 + 56) = a4;
  *(void *)(a7 + 64) = a5;
  *(_BYTE *)(a7 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a6 & 1;
  swift_retain();
  return a5;
}

uint64_t CallCancelSlotConfirmationButtonsBuilder.makeViewsForWatch(utteranceViews:_:)( uint64_t a1, void (*a2)(void (*)(uint64_t a1), void *))
{
  uint64_t v5 = (void *)OUTLINED_FUNCTION_8_2((uint64_t)&unk_3F9A38, 160LL);
  OUTLINED_FUNCTION_0_25(v5, v6, v7, v8, v9, v10, v11, v12, v14, v15[0]);
  v5[19] = a1;
  OUTLINED_FUNCTION_3_29();
  swift_bridgeObjectRetain();
  a2(partial apply for closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForWatch(utteranceViews:_:), v5);
  return swift_release(v5);
}

void closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForWatch(utteranceViews:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = v12[0];
  uint64_t v9 = v12[1];
  uint64_t v11 = v12[2];
  uint64_t v10 = v12[3];
  outlined init with take of Result<(call: String, cancel: String), Error>(a1, (uint64_t)v13);
  if ((v13[32] & 1) != 0)
  {
    outlined retain of Result<(call: String, cancel: String), Error>(a1);
  }

  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    closure #1 in closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForWatch(utteranceViews:_:)( v8,  v9,  v11,  v10,  a4,  a5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_6_28();
  OUTLINED_FUNCTION_33_1();
}

uint64_t closure #1 in closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForWatch(utteranceViews:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10 = [objc_allocWithZone(SASTItemGroup) init];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v12 = swift_allocObject(v11, 48LL, 7LL);
  *(_OWORD *)(v12 + 16) = xmmword_31FBC0;
  type metadata accessor for CNContactStore( 0LL,  &lazy cache variable for type metadata for SASTButtonItem,  &OBJC_CLASS___SASTButtonItem_ptr);
  uint64_t v13 = swift_allocObject(v11, 40LL, 7LL);
  *(_OWORD *)(v13 + 16) = xmmword_31FE60;
  swift_bridgeObjectRetain();
  uint64_t v14 = CallCancelSlotConfirmationButtonsBuilder.getConfirmButtonCommand()();
  *(void *)(v13 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v14;
  specialized Array._endMutation()(v14, v15, v16, v17);
  SASTButtonItem.init(label:commands:centered:)(a1, a2, v13, 1);
  *(void *)(v12 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v18;
  uint64_t v19 = swift_allocObject(v11, 40LL, 7LL);
  *(_OWORD *)(v19 + 16) = xmmword_31FE60;
  swift_bridgeObjectRetain();
  uint64_t v20 = CallCancelSlotConfirmationButtonsBuilder.getDenyButtonCommand()();
  *(void *)(v19 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v20;
  specialized Array._endMutation()(v20, v21, v22, v23);
  SASTButtonItem.init(label:commands:centered:)(a3, a4, v19, 1);
  *(void *)(v12 + 40) = v24;
  specialized Array._endMutation()(v24, v25, v26, v27);
  outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter(v12, (uint64_t)v10);
  type metadata accessor for SiriKitAceViewBuilder(0LL);
  uint64_t v28 = dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)(a5 + 16);
  uint64_t v29 = dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)(a6);
  swift_release(v28);
  uint64_t v30 = dispatch thunk of SiriKitAceViewBuilder.addButtonGroup(buttonGroup:)(v10);
  uint64_t v31 = swift_release(v29);
  uint64_t v32 = dispatch thunk of SiriKitAceViewBuilder.build()(v31);

  swift_release(v30);
  return v32;
}

uint64_t CallCancelSlotConfirmationButtonsBuilder.getConfirmButtonCommand()()
{
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(_BYTE *)(v0 + 72) == 1)
  {
    swift_storeEnumTagMultiPayload(v3, v1, 6LL);
    type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SKIDirectInvocationPayload,  &OBJC_CLASS___SKIDirectInvocationPayload_ptr);
    CommonDirectAction.identifier.getter();
    SKIDirectInvocationPayload.__allocating_init(identifier:)();
    uint64_t v5 = v4;
    CommonDirectAction.userData.getter();
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v6);
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(v8, v5);
    id v9 = SKIDirectInvocationPayload.toStartLocalRequest(deviceState:)((void *)(v0 + 16));

    outlined destroy of CommonDirectAction((uint64_t)v3);
    return (uint64_t)v9;
  }

  else
  {
    if (one-time initialization token for confirmUtterance != -1) {
      swift_once( &one-time initialization token for confirmUtterance,  one-time initialization function for confirmUtterance);
    }
    return static CasinoFactory.makeSendCommandsFromMachineUtterance(machineUtterance:)( static PhoneStartRequestUtterances.confirmUtterance,  qword_477F40);
  }

uint64_t CallCancelSlotConfirmationButtonsBuilder.getDenyButtonCommand()()
{
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(_BYTE *)(v0 + 72) == 1)
  {
    swift_storeEnumTagMultiPayload(v3, v1, 7LL);
    type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SKIDirectInvocationPayload,  &OBJC_CLASS___SKIDirectInvocationPayload_ptr);
    CommonDirectAction.identifier.getter();
    SKIDirectInvocationPayload.__allocating_init(identifier:)();
    uint64_t v5 = v4;
    CommonDirectAction.userData.getter();
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v6);
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(v8, v5);
    id v9 = SKIDirectInvocationPayload.toStartLocalRequest(deviceState:)((void *)(v0 + 16));

    outlined destroy of CommonDirectAction((uint64_t)v3);
    return (uint64_t)v9;
  }

  else
  {
    if (one-time initialization token for cancelUtterance != -1) {
      swift_once( &one-time initialization token for cancelUtterance,  one-time initialization function for cancelUtterance);
    }
    return static CasinoFactory.makeSendCommandsFromMachineUtterance(machineUtterance:)( static PhoneStartRequestUtterances.cancelUtterance,  qword_477F30);
  }

uint64_t FaceTimeSettingsBuilder.makeViewsForMac(utteranceViews:_:)( uint64_t a1, uint64_t (*a2)(void *, void))
{
  return a2(&_swiftEmptyArrayStorage, 0LL);
}

void CallCancelSlotConfirmationButtonsBuilder.makeViewsForCar(utteranceViews:_:)(uint64_t a1)
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_8_2((uint64_t)&unk_3F9A10, 152LL);
  OUTLINED_FUNCTION_0_25(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12);
  id v10 = *(void (**)(uint64_t (*)(uint64_t), void *))(class metadata base offset for PhoneCallBaseCatTemplatingService
                                                                         + *v1
                                                                         + 128);
  swift_retain();
  v10(partial apply for closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForCar(utteranceViews:_:), v2);
  swift_release(v2);
  OUTLINED_FUNCTION_5_25();
}

uint64_t closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForCar(utteranceViews:_:)( uint64_t a1, void (*a2)(uint64_t, void))
{
  uint64_t v3 = _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lF11SiriKitFlow010TemplatingA0V_s5Error_pSaySo9SAAceViewCGTg5((void (*)(uint64_t *__return_ptr, char *))partial apply for closure #1 in closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForCar(utteranceViews:_:));
  char v5 = v4 & 1;
  a2(v3, v4 & 1);
  return outlined consume of Result<[SAAceView], Error>(v3, v5);
}

void closure #1 in closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForCar(utteranceViews:_:)( uint64_t a1@<X1>, void *a2@<X8>)
{
  char v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Locale(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin();
  id v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (void *)TemplatingResult.print.getter(v8);
  if (v11[2])
  {
    char v36 = a2;
    uint64_t v12 = v11[4];
    uint64_t v13 = v11[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    id v14 = CallCancelSlotConfirmationButtonsBuilder.makeConfirmOption(label:)( v12,  v13,  &SAUIConfirmationOptionConfirmationOptionTypeCONFIRMValue,  &SAUIConfirmationOptionIconTypeNewCallValue,  (uint64_t (*)(uint64_t))CallCancelSlotConfirmationButtonsBuilder.getConfirmButtonCommand());
    swift_bridgeObjectRelease();
    id v15 = [*(id *)(a1 + 64) itemToConfirm];
    _bridgeAnyObjectToAny(_:)(v37, v15);
    swift_unknownObjectRelease(v15);
    type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
    else {
      uint64_t v16 = 0LL;
    }
    type metadata accessor for PhonePerson(0LL);
    static Device.current.getter(v37);
    uint64_t v17 = v38;
    uint64_t v18 = v39;
    __swift_project_boxed_opaque_existential_1(v37, v38);
    dispatch thunk of DeviceState.siriLocale.getter(v17, v18);
    __swift_destroy_boxed_opaque_existential_1(v37);
    static PhonePerson.make(phonePerson:options:locale:)(v16, 0, (uint64_t)v10);
    uint64_t v20 = v19;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if (v20)
    {
      uint64_t v21 = swift_retain();
      dispatch thunk of DialogPerson.fullName.getter(v21);
      swift_release(v20);
      uint64_t v22 = type metadata accessor for SpeakableString(0LL);
      if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1LL, v22) != 1)
      {
        uint64_t v23 = SpeakableString.print.getter();
        uint64_t v24 = v25;
        (*(void (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8LL))(v5, v22);
        goto LABEL_10;
      }

      outlined destroy of SpeakableString?((uint64_t)v5);
    }

    uint64_t v23 = 0LL;
    uint64_t v24 = 0LL;
LABEL_10:
    type metadata accessor for CNContactStore( 0LL,  &lazy cache variable for type metadata for SAPhoneCallConfirmationSnippet,  &OBJC_CLASS___SAPhoneCallConfirmationSnippet_ptr);
    id v26 = v14;
    SAPhoneCallConfirmationSnippet.init(confirmOption:confirmationDisplayText:)(v26, v23, v24);
    uint64_t v28 = v27;
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v30 = swift_allocObject(v29, 40LL, 7LL);
    *(_OWORD *)(v30 + 16) = xmmword_31FE60;
    *(void *)(v30 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v28;
    v37[0] = v30;
    specialized Array._endMutation()(v30, v31, v32, v33);
    uint64_t v34 = v37[0];
    swift_release(v20);

    *char v36 = v34;
    return;
  }

  __break(1u);
}

void CallCancelSlotConfirmationButtonsBuilder.makeViewsForIOS(utteranceViews:_:)(uint64_t a1)
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_8_2((uint64_t)&unk_3F99E8, 152LL);
  OUTLINED_FUNCTION_0_25(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
  OUTLINED_FUNCTION_3_29();
  v1(partial apply for closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForIOS(utteranceViews:_:), v2);
  swift_release(v2);
  OUTLINED_FUNCTION_5_25();
}

void closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForIOS(utteranceViews:_:)(uint64_t a1)
{
  uint64_t v2 = v6[0];
  uint64_t v3 = v6[1];
  uint64_t v5 = v6[2];
  uint64_t v4 = v6[3];
  outlined init with take of Result<(call: String, cancel: String), Error>(a1, (uint64_t)v7);
  if ((v7[32] & 1) != 0)
  {
    outlined retain of Result<(call: String, cancel: String), Error>(a1);
  }

  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    closure #1 in closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForIOS(utteranceViews:_:)( v2,  v3,  v5,  v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_6_28();
  OUTLINED_FUNCTION_33_1();
}

void *closure #1 in closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForIOS(utteranceViews:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = CallCancelSlotConfirmationButtonsBuilder.makeConfirmOption(label:)( a1,  a2,  &SAUIConfirmationOptionConfirmationOptionTypeCONFIRMValue,  &SAUIConfirmationOptionIconTypeNewCallValue,  (uint64_t (*)(uint64_t))CallCancelSlotConfirmationButtonsBuilder.getConfirmButtonCommand());
  id v7 = CallCancelSlotConfirmationButtonsBuilder.makeConfirmOption(label:)( a3,  a4,  &SAUIConfirmationOptionConfirmationOptionTypeDENYValue,  &SAUIConfirmationOptionIconTypeCancelValue,  (uint64_t (*)(uint64_t))CallCancelSlotConfirmationButtonsBuilder.getDenyButtonCommand());
  uint64_t v8 = CallCancelSlotConfirmationButtonsBuilder.makeCompactConfirmationView(denyOption:confirmOption:)(v7, v6);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v11 = swift_allocObject(v10, 40LL, 7LL);
    *(_OWORD *)(v11 + 16) = xmmword_31FE60;
    *(void *)(v11 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v9;
    uint64_t v22 = v11;
    specialized Array._endMutation()(v11, v12, v13, v14);
    uint64_t v15 = v22;
  }

  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.siriPhone);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl( &dword_0,  v18,  v19,  "#CallCancelSlotConfirmationButtonsBuilder Failed to build compact confirmation view",  v20,  2u);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    return _swiftEmptyArrayStorage;
  }

  return (void *)v15;
}

id CallCancelSlotConfirmationButtonsBuilder.makeConfirmOption(label:)( uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a3);
  uint64_t v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a4);
  uint64_t v15 = v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v17 = OUTLINED_FUNCTION_8_2(v16, 40LL);
  *(_OWORD *)(v17 + 16) = xmmword_31FE60;
  uint64_t v18 = swift_bridgeObjectRetain();
  uint64_t v19 = a5(v18);
  *(void *)(v17 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v19;
  specialized Array._endMutation()(v19, v20, v21, v22);
  return SAUIConfirmationOption.init(label:type:iconType:commands:)(a1, a2, v10, v12, v13, v15);
}

uint64_t CallCancelSlotConfirmationButtonsBuilder.makeCompactConfirmationView(denyOption:confirmOption:)( void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v57 = type metadata accessor for Image(0LL);
  uint64_t v6 = *(void *)(v57 - 8);
  __chkstk_darwin();
  uint64_t v8 = (uint64_t *)((char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.siriPhone);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v13 = static os_log_type_t.debug.getter(v11, v12);
  if (os_log_type_enabled(v11, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl( &dword_0,  v11,  v13,  "#CallCancelSlotConfirmationButtonsBuilder Making compact call confirmation view snippet.",  v14,  2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  id v15 = [*(id *)(v2 + 64) itemToConfirm];
  _bridgeAnyObjectToAny(_:)(&v59, v15);
  swift_unknownObjectRelease(v15);
  type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
  id v53 = a2;
  id v54 = a1;
  uint64_t v55 = v8;
  uint64_t v56 = v6;
  id v16 = v58;
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v19 = static os_log_type_t.debug.getter(v17, v18);
  if (os_log_type_enabled(v17, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v21 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v20 = 138412290;
    uint64_t v59 = (uint64_t)v16;
    id v22 = v16;
    id v23 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v20 + 4);
    uint64_t v24 = v22;
    *uint64_t v21 = v22;

    _os_log_impl(&dword_0, v17, v19, "#CallCancelSlotConfirmationButtonsBuilder Person to confirm: %@", v20, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v21, 1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {

    uint64_t v24 = v16;
    uint64_t v17 = (os_log_s *)v16;
  }

  id v26 = (void *)(v3 + 16);
  __swift_project_boxed_opaque_existential_1((void *)(v3 + 16), *(void *)(v3 + 40));
  DeviceState.isStandaloneIOS.getter();
  char v28 = v27;
  uint64_t v29 = *(void *)(v3 + 40);
  uint64_t v30 = *(void *)(v3 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v3 + 16), v29);
  char v31 = DeviceState.isAuthenticatedForPhone.getter(v29, v30);
  uint64_t v32 = v55;
  INPerson.buildDisplayImage(supportsCompactView:isDeviceLocked:)(v28 & 1, (v31 & 1) == 0, v55);
  id v33 = static PhoneCasinoFactory.makeConfirmationCardSection(person:image:sharedGlobals:)( v24,  (uint64_t)v32,  (void *)(v3 + 80));
  type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SACardSnippet,  &OBJC_CLASS___SACardSnippet_ptr);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v35 = swift_allocObject(v34, 40LL, 7LL);
  *(_OWORD *)(v35 + 16) = xmmword_31FE60;
  *(void *)(v35 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v33;
  uint64_t v59 = v35;
  specialized Array._endMutation()(v35, v36, v37, v38);
  uint64_t v39 = v59;
  uint64_t v40 = *(void **)v3;
  uint64_t v41 = *(void *)(v3 + 56);
  id v42 = v33;
  uint64_t v43 = static UserFacingCallingAppUtils.getCommAppForLaunch(originalApp:preferredCallProvider:deviceState:)( v41,  (uint64_t)[v40 preferredCallProvider],  v26);
  type metadata accessor for CNContactStore( 0LL,  &lazy cache variable for type metadata for SAUISash,  &OBJC_CLASS___SAUISash_ptr);
  SAUISash.init(app:)(v43);
  int64_t v45 = v44;
  type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOptions,  &OBJC_CLASS___SAUIConfirmationOptions_ptr);
  id v46 = v53;
  id v47 = v54;
  id v48 = v54;
  SAUIConfirmationOptions.init(denyOption:confirmOption:)(v47, v46);
  uint64_t v50 = (void *)v49;
  static SACardSnippet.makeFromCardSectionsWithConfirmationOptions(cardSections:intent:sash:confirmationOptions:)( v39,  (uint64_t)v40,  (uint64_t)v45,  v49);
  uint64_t v25 = v51;

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t *, uint64_t))(v56 + 8))(v32, v57);
  return v25;
}

uint64_t protocol witness for IdiomSensitiveViewBuilder.sharedGlobals.getter in conformance CallCancelSlotConfirmationButtonsBuilder@<X0>( uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 80, a1);
}

_UNKNOWN **sub_96544()
{
  return &protocol witness table for CallCancelSlotConfirmationButtonsBuilder;
}

uint64_t destroy for CallCancelSlotConfirmationButtonsBuilder(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 80));
}

uint64_t initializeWithCopy for CallCancelSlotConfirmationButtonsBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v5;
  uint64_t v6 = a1 + 16;
  uint64_t v7 = a2 + 16;
  __int128 v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v8;
  uint64_t v9 = v8;
  uint64_t v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  id v11 = v4;
  swift_retain(v5);
  v10(v6, v7, v9);
  uint64_t v12 = *(void *)(a2 + 56);
  os_log_type_t v13 = *(void **)(a2 + 64);
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v13;
  *(_BYTE *)(a1 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_BYTE *)(a2 + 72);
  uint64_t v14 = a2 + 80;
  __int128 v15 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v15;
  uint64_t v16 = v15;
  uint64_t v17 = **(void (***)(uint64_t, uint64_t, uint64_t))(v15 - 8);
  swift_retain(v12);
  id v18 = v13;
  v17(a1 + 80, v14, v16);
  return a1;
}

uint64_t assignWithCopy for CallCancelSlotConfirmationButtonsBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release(v7);
  __swift_assign_boxed_opaque_existential_1((void *)(a1 + 16), (void *)(a2 + 16));
  uint64_t v8 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release(v8);
  uint64_t v9 = *(void **)(a2 + 64);
  uint64_t v10 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v9;
  id v11 = v9;

  *(_BYTE *)(a1 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_BYTE *)(a2 + 72);
  __swift_assign_boxed_opaque_existential_1((void *)(a1 + 80), (void *)(a2 + 80));
  return a1;
}

void *__swift_memcpy120_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x78uLL);
}

uint64_t assignWithTake for CallCancelSlotConfirmationButtonsBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(void *)(a2 + 8);
  swift_release(v5);
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 16));
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v8 = *(void *)(a1 + 56);
  *(void *)(a1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_release(v8);
  uint64_t v9 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);

  *(_BYTE *)(a1 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_BYTE *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 80));
  __int128 v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v10;
  *(void *)(a1 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(void *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for CallCancelSlotConfirmationButtonsBuilder(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 120))
    {
      LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CallCancelSlotConfirmationButtonsBuilder( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(_OWORD *)(result + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 120) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CallCancelSlotConfirmationButtonsBuilder()
{
  return &type metadata for CallCancelSlotConfirmationButtonsBuilder;
}

uint64_t outlined init with copy of CallCancelSlotConfirmationButtonsBuilder(uint64_t a1, uint64_t a2)
{
  return a2;
}

void partial apply for closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForIOS(utteranceViews:_:)( uint64_t a1)
{
}

uint64_t outlined init with take of Result<(call: String, cancel: String), Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<(call: String, cancel: String), Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of Result<(call: String, cancel: String), Error>(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of Result<(call: String, cancel: String), Error>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0) {
    return swift_errorRetain(a1);
  }
  swift_bridgeObjectRetain(a2);
  return swift_bridgeObjectRetain(a4);
}

uint64_t outlined consume of Result<[SAAceView], Error>(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  else {
    return swift_bridgeObjectRelease(a1);
  }
}

uint64_t outlined destroy of CommonDirectAction(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CommonDirectAction(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t objectdestroyTm_1()
{
  swift_release(*(void *)(v0 + 40));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 48));
  swift_release(*(void *)(v0 + 88));

  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 112));
  return swift_deallocObject(v0, 152LL, 7LL);
}

uint64_t partial apply for closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForCar(utteranceViews:_:)( uint64_t a1)
{
  return closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForCar(utteranceViews:_:)( a1,  *(void (**)(uint64_t, void))(v1 + 16));
}

void partial apply for closure #1 in closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForCar(utteranceViews:_:)( void *a1@<X8>)
{
}

uint64_t sub_969E8()
{
  swift_release(*(void *)(v0 + 40));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 48));
  swift_release(*(void *)(v0 + 88));

  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 112));
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 160LL, 7LL);
}

void partial apply for closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForWatch(utteranceViews:_:)( uint64_t a1)
{
}

void *OUTLINED_FUNCTION_0_25( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char __src)
{
  a1[2] = v11;
  a1[3] = v10;
  return memcpy(a1 + 4, &__src, 0x78uLL);
}

uint64_t OUTLINED_FUNCTION_2_21(uint64_t a1, ...)
{
  return outlined init with copy of CallCancelSlotConfirmationButtonsBuilder(v1, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_3_29()
{
  return swift_retain(v0);
}

uint64_t OUTLINED_FUNCTION_6_28()
{
  return outlined consume of Result<[SAAceView], Error>(v0, v1);
}

uint64_t OUTLINED_FUNCTION_7_27()
{
  return v0(v1, v2);
}

void YesNoConfirmationModel.yesAction.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  CodableAceObject.wrappedValue.getter(v0);
  OUTLINED_FUNCTION_2();
}

uint64_t type metadata accessor for YesNoConfirmationModel(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for YesNoConfirmationModel;
  if (!type metadata singleton initialization cache for YesNoConfirmationModel) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for YesNoConfirmationModel);
  }
  return result;
}

void key path setter for YesNoConfirmationModel.yesAction : YesNoConfirmationModel(id *a1)
{
  id v1 = *a1;
  YesNoConfirmationModel.yesAction.setter();
}

void YesNoConfirmationModel.yesAction.setter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  OUTLINED_FUNCTION_14_4(v0);
  OUTLINED_FUNCTION_2();
}

void YesNoConfirmationModel.yesAction.modify()
{
  id v1 = OUTLINED_FUNCTION_3_1();
  void *v0 = v1;
  OUTLINED_FUNCTION_1_28();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  v1[4] = OUTLINED_FUNCTION_12_9(v2);
  OUTLINED_FUNCTION_6();
}

uint64_t YesNoConfirmationModel.noText.getter()
{
  return v1;
}

uint64_t key path setter for YesNoConfirmationModel.noText : YesNoConfirmationModel(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRetain();
  return YesNoConfirmationModel.noText.setter(v1);
}

uint64_t YesNoConfirmationModel.noText.setter(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  return OUTLINED_FUNCTION_15_5(v1, v2, v3, v4, v5, v6, v7, v8, a1);
}

void YesNoConfirmationModel.noText.modify()
{
  uint64_t v1 = OUTLINED_FUNCTION_3_1();
  void *v0 = v1;
  OUTLINED_FUNCTION_1_28();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  v1[4] = OUTLINED_FUNCTION_13_12(v2);
  OUTLINED_FUNCTION_6();
}

void YesNoConfirmationModel.noAction.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  CodableAceObject.wrappedValue.getter(v0);
  OUTLINED_FUNCTION_2();
}

void key path setter for YesNoConfirmationModel.noAction : YesNoConfirmationModel(id *a1)
{
  id v1 = *a1;
  YesNoConfirmationModel.noAction.setter();
}

void YesNoConfirmationModel.noAction.setter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  OUTLINED_FUNCTION_14_4(v0);
  OUTLINED_FUNCTION_2();
}

void YesNoConfirmationModel.noAction.modify()
{
  id v1 = OUTLINED_FUNCTION_3_1();
  void *v0 = v1;
  OUTLINED_FUNCTION_1_28();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  v1[4] = OUTLINED_FUNCTION_12_9(v2);
  OUTLINED_FUNCTION_6();
}

uint64_t YesNoConfirmationModel.responseViewId.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(OUTLINED_FUNCTION_1_28() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

void YesNoConfirmationModel.responseViewId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(OUTLINED_FUNCTION_1_28() + 32));
  swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  OUTLINED_FUNCTION_6();
}

Swift::Void (__swiftcall *YesNoConfirmationModel.responseViewId.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void YesNoConfirmationModel.init(yesText:yesAction:noText:noAction:)( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  os_log_type_t v13 = (void *)(a7 + *(int *)(OUTLINED_FUNCTION_1_28() + 32));
  *os_log_type_t v13 = 0xD000000000000011LL;
  v13[1] = 0x8000000000346B80LL;
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  Loggable.init(wrappedValue:)(&v16, &type metadata for String);
  unint64_t v14 = type metadata accessor for SAIntentGroupRunSiriKitExecutor();
  id v15 = a3;
  CodableAceObject.init(wrappedValue:)(v15, v14);
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  Loggable.init(wrappedValue:)(&v16, &type metadata for String);
  CodableAceObject.init(wrappedValue:)(a6, v14);
}

uint64_t YesNoConfirmationModel.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x74786554736579LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74786554736579LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6F69746341736579LL && a2 == 0xE90000000000006ELL)
  {
    unint64_t v8 = 0xE90000000000006ELL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F69746341736579LL, 0xE90000000000006ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x747865546F6ELL && a2 == 0xE600000000000000LL)
  {
    unint64_t v10 = 0xE600000000000000LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x747865546F6ELL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0x6E6F697463416F6ELL && a2 == 0xE800000000000000LL)
  {
    unint64_t v12 = 0xE800000000000000LL;
    goto LABEL_32;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697463416F6ELL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3LL;
  }

  if (a1 == 0x65736E6F70736572LL && a2 == 0xEE00644977656956LL)
  {
    swift_bridgeObjectRelease(0xEE00644977656956LL);
    return 4LL;
  }

  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65736E6F70736572LL, 0xEE00644977656956LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t YesNoConfirmationModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_97194 + 4 * byte_321F30[a1]))( 0x74786554736579LL,  0xE700000000000000LL);
}

uint64_t sub_97194()
{
  return 0x6F69746341736579LL;
}

uint64_t sub_971B0()
{
  return 0x747865546F6ELL;
}

uint64_t sub_971C4()
{
  return 0x6E6F697463416F6ELL;
}

uint64_t sub_971DC()
{
  return 0x65736E6F70736572LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance YesNoConfirmationModel.CodingKeys()
{
  return YesNoConfirmationModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance YesNoConfirmationModel.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = YesNoConfirmationModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance YesNoConfirmationModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance YesNoConfirmationModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void YesNoConfirmationModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<YesNoConfirmationModel.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  unint64_t v12 = lazy protocol witness table accessor for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_3F9B38, &unk_3F9B38, v12, v10, v11);
  v17[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  lazy protocol witness table accessor for type Loggable<String> and conformance <A> Loggable<A>( &lazy protocol witness table cache variable for type Loggable<String> and conformance <A> Loggable<A>,  (uint64_t)&protocol conformance descriptor for <A> Loggable<A>);
  OUTLINED_FUNCTION_4_5();
  if (!v2)
  {
    uint64_t v16 = type metadata accessor for YesNoConfirmationModel(0LL);
    v17[3] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>(&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>);
    OUTLINED_FUNCTION_4_5();
    v17[2] = 2;
    OUTLINED_FUNCTION_4_5();
    v17[1] = 3;
    OUTLINED_FUNCTION_4_5();
    os_log_type_t v13 = (uint64_t *)(v3 + *(int *)(v16 + 32));
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    v17[0] = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v17, v5);
  }

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  OUTLINED_FUNCTION_7_1();
}

unint64_t lazy protocol witness table accessor for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for YesNoConfirmationModel.CodingKeys, &unk_3F9B38);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for YesNoConfirmationModel.CodingKeys, &unk_3F9B38);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable("m{\r", &unk_3F9B38);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for YesNoConfirmationModel.CodingKeys, &unk_3F9B38);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys);
  }

  return result;
}

void YesNoConfirmationModel.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v51 = *(void *)(v3 - 8);
  uint64_t v52 = v3;
  __chkstk_darwin();
  uint64_t v50 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  id v54 = (char *)&v43 - v5;
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v53 = *(void *)(v57 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v55 = (char *)&v43 - v8;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<YesNoConfirmationModel.CodingKeys>);
  uint64_t v9 = *(void *)(v56 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = type metadata accessor for YesNoConfirmationModel(0LL);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v16 = v15 - v14;
  id v18 = (uint64_t *)(v15 - v14 + *(int *)(v17 + 32));
  *id v18 = 0xD000000000000011LL;
  v18[1] = 0x8000000000346B80LL;
  uint64_t v59 = v18;
  uint64_t v20 = a1[3];
  uint64_t v19 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v20);
  unint64_t v21 = lazy protocol witness table accessor for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys();
  uint64_t v58 = v12;
  id v22 = v60;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_3F9B38, &unk_3F9B38, v21, v20, v19);
  if (v22)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_bridgeObjectRelease();
  }

  else
  {
    id v23 = v54;
    id v46 = v7;
    uint64_t v47 = v13;
    uint64_t v48 = v9;
    uint64_t v24 = v16;
    uint64_t v60 = a1;
    char v65 = 0;
    uint64_t v25 = lazy protocol witness table accessor for type Loggable<String> and conformance <A> Loggable<A>( &lazy protocol witness table cache variable for type Loggable<String> and conformance <A> Loggable<A>,  (uint64_t)&protocol conformance descriptor for <A> Loggable<A>);
    id v26 = v55;
    uint64_t v27 = v56;
    uint64_t v28 = v57;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v57, &v65, v56, v57, v25);
    uint64_t v44 = v25;
    uint64_t v45 = v24;
    uint64_t v29 = *(void (**)(uint64_t, char *, uint64_t))(v53 + 32);
    v29(v24, v26, v28);
    char v64 = 1;
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>(&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>);
    OUTLINED_FUNCTION_2_4(v30, (uint64_t)&v64);
    uint64_t v31 = v9;
    uint64_t v32 = *(void (**)(uint64_t, char *, uint64_t))(v51 + 32);
    v32(v45 + *(int *)(v47 + 20), v23, v31);
    char v63 = 2;
    id v33 = v46;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v28, &v63, v27, v28, v44);
    id v54 = (char *)v32;
    uint64_t v55 = 0LL;
    uint64_t v34 = v47;
    uint64_t v35 = ((uint64_t (*)(uint64_t, char *, uint64_t))v29)(v45 + *(int *)(v47 + 24), v33, v28);
    char v62 = 3;
    uint64_t v36 = v50;
    OUTLINED_FUNCTION_2_4(v35, (uint64_t)&v62);
    uint64_t v37 = *(int *)(v34 + 28);
    uint64_t v38 = v45;
    ((void (*)(uint64_t, char *, void))v54)(v45 + v37, v36, v32);
    char v61 = 4;
    uint64_t v39 = KeyedDecodingContainer.decode(_:forKey:)(&v61, v27);
    uint64_t v41 = v40;
    OUTLINED_FUNCTION_0_5();
    id v42 = v59;
    swift_bridgeObjectRelease();
    *id v42 = v39;
    v42[1] = v41;
    outlined init with copy of YesNoConfirmationModel(v38, v49);
    __swift_destroy_boxed_opaque_existential_1(v60);
    outlined destroy of YesNoConfirmationModel(v38);
  }

  OUTLINED_FUNCTION_7_1();
}

uint64_t outlined init with copy of YesNoConfirmationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for YesNoConfirmationModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of YesNoConfirmationModel(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for YesNoConfirmationModel(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void instantiation function for generic protocol witness table for YesNoConfirmationModel(uint64_t a1)
{
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v2;
}

void base witness table accessor for Decodable in YesNoConfirmationModel()
{
}

void base witness table accessor for Encodable in YesNoConfirmationModel()
{
}

void lazy protocol witness table accessor for type YesNoConfirmationModel and conformance YesNoConfirmationModel( unint64_t *a1)
{
  if (!*a1)
  {
    uint64_t v2 = type metadata accessor for YesNoConfirmationModel(255LL);
    atomic_store(OUTLINED_FUNCTION_110(v2), a1);
  }

  OUTLINED_FUNCTION_2();
}

void protocol witness for Decodable.init(from:) in conformance YesNoConfirmationModel( void *a1@<X0>, uint64_t a2@<X8>)
{
}

void protocol witness for Encodable.encode(to:) in conformance YesNoConfirmationModel(void *a1)
{
}

void sub_97A8C()
{
  uint64_t *v0 = YesNoConfirmationModel.yesText.getter();
  v0[1] = v1;
  OUTLINED_FUNCTION_2();
}

void sub_97AB0()
{
  void *v0 = v1;
  OUTLINED_FUNCTION_2();
}

void sub_97AD4()
{
  uint64_t *v0 = YesNoConfirmationModel.noText.getter();
  v0[1] = v1;
  OUTLINED_FUNCTION_2();
}

void sub_97AF8()
{
  void *v0 = v1;
  OUTLINED_FUNCTION_2();
}

char *initializeBufferWithCopyOfBuffer for YesNoConfirmationModel(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    v13(v10, v11, v12);
    v8(&a1[a3[6]], &a2[a3[6]], v7);
    v13(&a1[a3[7]], &a2[a3[7]], v12);
    uint64_t v14 = a3[8];
    uint64_t v15 = &a1[v14];
    uint64_t v16 = &a2[v14];
    uint64_t v17 = *((void *)v16 + 1);
    *(void *)uint64_t v15 = *(void *)v16;
    *((void *)v15 + 1) = v17;
    swift_bridgeObjectRetain();
  }

  return a1;
}

uint64_t destroy for YesNoConfirmationModel(uint64_t a1, int *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v5(a1, v4);
  uint64_t v6 = a1 + a2[5];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  v5(a1 + a2[6], v4);
  v8(a1 + a2[7], v7);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for YesNoConfirmationModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL);
  v12(v9, v10, v11);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v12(a1 + a3[7], a2 + a3[7], v11);
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for YesNoConfirmationModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24LL);
  v12(v9, v10, v11);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v12(a1 + a3[7], a2 + a3[7], v11);
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for YesNoConfirmationModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL);
  v12(v9, v10, v11);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v12(a1 + a3[7], a2 + a3[7], v11);
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for YesNoConfirmationModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40LL);
  v12(v9, v10, v11);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v12(a1 + a3[7], a2 + a3[7], v11);
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for YesNoConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_98088);
}

uint64_t sub_98088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = a1;
    return __swift_getEnumTagSinglePayload(v8, a2, v7);
  }

  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  if (*(_DWORD *)(*(void *)(v9 - 8) + 84LL) == (_DWORD)a2)
  {
    uint64_t v7 = v9;
    uint64_t v8 = a1 + *(int *)(a3 + 20);
    return __swift_getEnumTagSinglePayload(v8, a2, v7);
  }

  unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 11) = -1;
  }
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for YesNoConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_98140);
}

void sub_98140(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = a1;
LABEL_5:
    __swift_storeEnumTagSinglePayload(v10, a2, a2, v9);
    return;
  }

  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84LL) == a3)
  {
    uint64_t v9 = v11;
    uint64_t v10 = a1 + *(int *)(a4 + 20);
    goto LABEL_5;
  }

  *(void *)(a1 + *(int *)(a4 + 32) + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = (a2 - 1);
  OUTLINED_FUNCTION_6();
}

void type metadata completion function for YesNoConfirmationModel(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    uint64_t v7 = v4;
    type metadata accessor for CodableAceObject<SAIntentGroupRunSiriKitExecutor>(319LL);
    if (v6 <= 0x3F)
    {
      uint64_t v8 = *(void *)(v5 - 8) + 64LL;
      uint64_t v9 = v4;
      uint64_t v10 = v8;
      uint64_t v11 = &unk_321FF8;
      swift_initStructMetadata(a1, 256LL, 5LL, &v7, a1 + 16);
    }
  }

uint64_t storeEnumTagSinglePayload for YesNoConfirmationModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = 1;
  }
  else {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_982BC + 4 * byte_321F3A[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_982F0 + 4 * byte_321F35[v4]))();
}

uint64_t sub_982F0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_982F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x98300LL);
  }
  return result;
}

uint64_t sub_9830C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x98314LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_98318(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_98320(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for YesNoConfirmationModel.CodingKeys()
{
  return &unk_3F9B38;
}

uint64_t OUTLINED_FUNCTION_1_28()
{
  return type metadata accessor for YesNoConfirmationModel(0LL);
}

void one-time initialization function for instance()
{
  static CallStateNotificationManager.instance = CallStateNotificationManager.__allocating_init()();
  OUTLINED_FUNCTION_2();
}

{
  id v0;
  uint64_t v1;
  uint64_t v0 = objc_allocWithZone(&OBJC_CLASS___NSUserDefaults);
  @nonobjc NSUserDefaults.init(suiteName:)(0xD000000000000014LL, 0x8000000000346CB0LL);
  static SiriPhoneDefaults.instance = v1;
}

uint64_t CallStateNotificationManager.__allocating_init()()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  int v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin();
  unint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue,  &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v9);
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t v10 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  uint64_t v12 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A],  &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v11, v12, v4, v10);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v0);
  uint64_t v13 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001CLL,  0x8000000000322180LL,  v8,  v6,  v3,  0LL);
  id v14 = [objc_allocWithZone(TUCallCenter) initWithQueue:v13];
  return (*(uint64_t (**)(uint64_t, id))(v16 + 160))(v13, v14);
}

uint64_t *CallStateNotificationManager.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  return &static CallStateNotificationManager.instance;
}

uint64_t static CallStateNotificationManager.instance.getter()
{
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  return swift_retain();
}

uint64_t one-time initialization function for defaultLoggingTaskTimeout()
{
  uint64_t v0 = OUTLINED_FUNCTION_13_22();
  __swift_allocate_value_buffer(v0, static CallStateNotificationManager.defaultLoggingTaskTimeout);
  *(void *)__swift_project_value_buffer(v0, (uint64_t)static CallStateNotificationManager.defaultLoggingTaskTimeout) = 1LL;
  return (*(uint64_t (**)(void))(*(void *)(v0 - 8) + 104LL))();
}

uint64_t CallStateNotificationManager.defaultLoggingTaskTimeout.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultLoggingTaskTimeout != -1) {
    swift_once( &one-time initialization token for defaultLoggingTaskTimeout,  one-time initialization function for defaultLoggingTaskTimeout);
  }
  uint64_t v0 = OUTLINED_FUNCTION_13_22();
  return __swift_project_value_buffer(v0, (uint64_t)static CallStateNotificationManager.defaultLoggingTaskTimeout);
}

uint64_t static CallStateNotificationManager.defaultLoggingTaskTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultLoggingTaskTimeout != -1) {
    swift_once( &one-time initialization token for defaultLoggingTaskTimeout,  one-time initialization function for defaultLoggingTaskTimeout);
  }
  uint64_t v2 = OUTLINED_FUNCTION_13_22();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static CallStateNotificationManager.defaultLoggingTaskTimeout);
  return OUTLINED_FUNCTION_55_1(a1, v3, v2, *(uint64_t (**)(void))(*(void *)(v2 - 8) + 16LL));
}

void key path setter for CallStateNotificationManager.tasks : CallStateNotificationManager()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  CallStateNotificationManager.tasks.setter(v0);
}

void CallStateNotificationManager.tasks.didset()
{
  uint64_t v1 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  uint64_t v3 = swift_retain();
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v6 = static os_log_type_t.debug.getter(v4, v5);
  if (os_log_type_enabled(v4, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v7 = 134217984;
    swift_beginAccess(v1 + 32, v9, 0LL, 0LL);
    uint64_t v8 = *(void *)(*(void *)(v1 + 32) + 16LL);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, v9, v7 + 4);
    swift_release(v1);
    _os_log_impl(&dword_0, v4, v6, "#CallStateNotificationManager task count %ld", v7, 0xCu);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {

    swift_release(v1);
  }

uint64_t CallStateNotificationManager.tasks.getter()
{
  return swift_bridgeObjectRetain();
}

void CallStateNotificationManager.tasks.setter(uint64_t a1)
{
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a1;
  swift_bridgeObjectRelease();
  CallStateNotificationManager.tasks.didset();
}

uint64_t key path setter for CallStateNotificationManager.didRegisterNotificationObservers : CallStateNotificationManager( char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess(*a2 + 40, v5, 1LL, 0LL);
  *(_BYTE *)(v3 + 40) = v2;
  return result;
}

uint64_t CallStateNotificationManager.didRegisterNotificationObservers.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

void CallStateNotificationManager.__allocating_init(queue:callCenter:)()
{
}

uint64_t CallStateNotificationManager.init(queue:callCenter:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = OUTLINED_FUNCTION_12();
  uint64_t v7 = type metadata accessor for CallStateOneTimeTask(0LL);
  uint64_t v8 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v9 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v6, v7, v8);
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v9;
  *(_BYTE *)(v3 + 40) = 0;
  *(void *)(v3 + 16) = a1;
  uint64_t v10 = OUTLINED_FUNCTION_8_2((uint64_t)&unk_3F9C28, 24LL);
  *(void *)(v10 + 16) = a2;
  uint64_t v11 = OUTLINED_FUNCTION_10_22((uint64_t)&unk_3F9C50);
  *(void *)(v11 + 16) = partial apply for closure #1 in CallStateNotificationManager.init(queue:callCenter:);
  *(void *)(v11 + 24) = v10;
  v21[4] = AnyIntentCarPlayRCHFlowProvider.makeRCHFlow(input:);
  uint64_t v22 = v11;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256LL;
  v21[2] = thunk for @escaping @callee_guaranteed () -> ();
  v21[3] = &block_descriptor;
  uint64_t v12 = _Block_copy(v21);
  uint64_t v13 = v22;
  id v14 = a2;
  uint64_t v15 = a1;
  swift_retain();
  swift_release(v13);
  dispatch_sync(v15, v12);
  _Block_release(v12);
  isEscapingClosureAtFileLocation = (os_log_s *)swift_isEscapingClosureAtFileLocation(v11, "", 120LL, 42LL, 20LL, 1LL);
  swift_release(v11);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else if (one-time initialization token for siriPhone == -1)
  {
    goto LABEL_3;
  }

  swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
LABEL_3:
  uint64_t v17 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v17, (uint64_t)static Logger.siriPhone);
  os_log_type_t v18 = OUTLINED_FUNCTION_6_0();
  if (os_log_type_enabled(isEscapingClosureAtFileLocation, v18))
  {
    uint64_t v19 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl(&dword_0, isEscapingClosureAtFileLocation, v18, "#CallStateNotificationManager initialized", v19, 2u);
    OUTLINED_FUNCTION_0_2((uint64_t)v19);
  }

  swift_release(v10);
  return v3;
}

uint64_t type metadata accessor for CallStateOneTimeTask(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for CallStateOneTimeTask;
  if (!type metadata singleton initialization cache for CallStateOneTimeTask) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CallStateOneTimeTask);
  }
  return result;
}

uint64_t sub_98CAC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id partial apply for closure #1 in CallStateNotificationManager.init(queue:callCenter:)()
{
  return [*(id *)(v0 + 16) registerWithCompletionHandler:0];
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

Swift::Void __swiftcall CallStateNotificationManager.callStateChanged(_:)(NSNotification a1)
{
  uint64_t v5 = v4;
  uint64_t v6 = OUTLINED_FUNCTION_42_6();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v8 = OUTLINED_FUNCTION_44_3();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_32();
  uint64_t v10 = OUTLINED_FUNCTION_10_22((uint64_t)&unk_3F9CA0);
  *(void *)(v10 + 16) = v5;
  *(void *)(v10 + 24) = v1;
  _BYTE v17[5] = partial apply for closure #1 in CallStateNotificationManager.callStateChanged(_:);
  uint64_t v18 = v10;
  v17[1] = _NSConcreteStackBlock;
  v17[2] = 1107296256LL;
  uint64_t v11 = OUTLINED_FUNCTION_22_11((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
  id v12 = v5;
  uint64_t v13 = swift_retain();
  static DispatchQoS.unspecified.getter(v13);
  v17[0] = _swiftEmptyArrayStorage;
  uint64_t v14 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( &lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = OUTLINED_FUNCTION_43_3();
  uint64_t v16 = OUTLINED_FUNCTION_41_7((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v17, v15, v16, v6, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v3);
  _Block_release(v11);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v6);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v3, v8);
  swift_release(v18);
  OUTLINED_FUNCTION_7_5();
}

void closure #1 in CallStateNotificationManager.callStateChanged(_:)(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = [a1 object];
  if (v8)
  {
    id v9 = v8;
    _bridgeAnyObjectToAny(_:)(v34, v8);
    swift_unknownObjectRelease(v9);
  }

  else
  {
    memset(v34, 0, sizeof(v34));
  }

  outlined init with take of Any?((uint64_t)v34, (uint64_t)v35);
  if (!v35[3])
  {
    outlined destroy of Any?((uint64_t)v35);
    goto LABEL_12;
  }

  type metadata accessor for CNContactStore( 0LL,  &lazy cache variable for type metadata for TUCall,  &OBJC_CLASS___TUCall_ptr);
  if ((swift_dynamicCast(&v33, v35, (char *)&type metadata for Any + 8) & 1) == 0)
  {
LABEL_12:
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v24 = __swift_project_value_buffer(v4, (uint64_t)static Logger.siriPhone);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl( &dword_0,  v25,  v26,  "#CallStateNotificationManager received CallStatusChanged notification without a TUCall",  v27,  2u);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    goto LABEL_18;
  }

  uint64_t v10 = v33;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v11 = __swift_project_value_buffer(v4, (uint64_t)static Logger.siriPhone);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v11, v4);
  id v12 = v10;
  uint64_t v13 = (void *)Logger.logObject.getter(v12);
  os_log_type_t v15 = static os_log_type_t.debug.getter(v13, v14);
  if (!os_log_type_enabled((os_log_t)v13, v15))
  {

    uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    goto LABEL_17;
  }

  uint64_t v32 = a2;
  uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v31 = swift_slowAlloc(32LL, -1LL);
  v35[0] = v31;
  *(_DWORD *)uint64_t v16 = 136315138;
  id v17 = (id)TUStringForCallStatus([v12 callStatus]);
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v30 = v16 + 4;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    unint64_t v21 = v20;

    *(void *)&v34[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, (char *)v34 + 8, v30);

    swift_bridgeObjectRelease();
    _os_log_impl( &dword_0,  (os_log_t)v13,  v15,  "#CallStateNotificationManager received CallStatusChanged, status = %s",  v16,  0xCu);
    uint64_t v22 = v31;
    swift_arrayDestroy(v31, 1LL);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);

    uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    a2 = v32;
LABEL_17:
    uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112LL))(v23);
    uint64_t v25 = (os_log_s *)v12;
    specialized Sequence.forEach(_:)(v28, v25);
    swift_bridgeObjectRelease();
LABEL_18:

    return;
  }

  __break(1u);
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void *a2)
{
  uint64_t v4 = v17[0];
  uint64_t v5 = v17[1];
  int64_t v6 = v17[3];
  unint64_t v7 = v17[4];
  int64_t v8 = (unint64_t)(v17[2] + 64LL) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  if (!v7) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v11 = v10 | (v6 << 6);
  while (1)
  {
    uint64_t v16 = *(void *)(*(void *)(v4 + 56) + 8 * v11);
    swift_retain(v16);
    (*(void (**)(id))(*(void *)v16 + 200))([a2 callStatus]);
    uint64_t result = swift_release(v16);
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v12 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      break;
    }
    if (v12 >= v8) {
      goto LABEL_21;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    int64_t v14 = v6 + 1;
    if (!v13)
    {
      int64_t v14 = v6 + 2;
      if (v6 + 2 >= v8) {
        goto LABEL_21;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v6 + 3;
        if (v6 + 3 >= v8) {
          goto LABEL_21;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v6 + 4;
          if (v6 + 4 >= v8) {
            goto LABEL_21;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v6 + 5;
            if (v6 + 5 >= v8) {
              goto LABEL_21;
            }
            unint64_t v13 = *(void *)(v5 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v6 + 6;
              while (v15 < v8)
              {
                unint64_t v13 = *(void *)(v5 + 8 * v15++);
                if (v13)
                {
                  int64_t v14 = v15 - 1;
                  goto LABEL_18;
                }
              }

{
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  OUTLINED_FUNCTION_6_3();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v10))
  {
    uint64_t v5 = 4LL;
    while (1)
    {
      int64_t v6 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      unint64_t v7 = v6;
      int64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1LL)) {
        break;
      }
      [v6 setRelationship:a2];

      ++v5;
      if (v8 == v4) {
        goto LABEL_9;
      }
    }

    __break(1u);
LABEL_11:
    if (a1 < 0) {
      unint64_t v10 = a1;
    }
    else {
      unint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_6_3();
  }

void CallStateNotificationManager.addTask(timeout:task:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = OUTLINED_FUNCTION_13_22();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin();
  unint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = *(dispatch_queue_s **)(v0 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v6, v7);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = (v12 + 32) & ~v12;
  unint64_t v14 = (v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v15 = swift_allocObject(&unk_3F9CF0, v14 + 8, v12 | 7);
  *(void *)(v15 + 16) = v4;
  *(void *)(v15 + 24) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v15 + v13, v10, v7);
  *(void *)(v15 + v14) = v0;
  uint64_t v16 = OUTLINED_FUNCTION_10_22((uint64_t)&unk_3F9D18);
  *(void *)(v16 + 16) = partial apply for closure #1 in CallStateNotificationManager.addTask(timeout:task:);
  *(void *)(v16 + 24) = v15;
  v19[4] = thunk for @callee_guaranteed () -> ()partial apply;
  uint64_t v20 = v16;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256LL;
  id v17 = OUTLINED_FUNCTION_22_11((uint64_t)thunk for @escaping @callee_guaranteed () -> ());
  uint64_t v18 = v20;
  OUTLINED_FUNCTION_3_8();
  UsoEntity_common_Person.usoPerson.getter();
  swift_retain();
  swift_release(v18);
  dispatch_sync(v11, v17);
  _Block_release(v17);
  LOBYTE(OUTLINED_FUNCTION_2_18(v1, v2) = swift_isEscapingClosureAtFileLocation(v16, "", 120LL, 69LL, 25LL, 1LL);
  swift_release(v15);
  swift_release(v16);
  if ((v2 & 1) != 0) {
    __break(1u);
  }
  else {
    OUTLINED_FUNCTION_7_5();
  }
}

uint64_t closure #1 in CallStateNotificationManager.addTask(timeout:task:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for CallStateOneTimeTask(0LL);
  uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  swift_retain();
  CallStateOneTimeTask.init(task:)();
  (*(void (**)(uint64_t))(*(void *)v7 + 208LL))(a3);
  uint64_t v8 = swift_allocObject(&unk_3F9EB8, 24LL, 7LL);
  swift_weakInit(v8 + 16, a4);
  uint64_t v9 = swift_allocObject(&unk_3F9D68, 24LL, 7LL);
  swift_weakInit(v9 + 16, v7);
  uint64_t v10 = swift_allocObject(&unk_3F9EE0, 32LL, 7LL);
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = v8;
  unint64_t v11 = *(void (**)(uint64_t (*)(), uint64_t))(*(void *)v7 + 216LL);
  swift_retain();
  swift_retain();
  v11(partial apply for closure #1 in closure #1 in CallStateNotificationManager.addTask(timeout:task:), v10);
  swift_release(v8);
  swift_release(v9);
  swift_release(v10);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
  uint64_t v13 = swift_retain_n(v7, 2LL);
  unint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v16 = static os_log_type_t.debug.getter(v14, v15);
  if (os_log_type_enabled(v14, v16))
  {
    id v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    v25[0] = v18;
    *(_DWORD *)id v17 = 136315138;
    uint64_t v19 = type metadata accessor for UUID(0LL);
    uint64_t v20 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(v19, v20);
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v17 + 4);
    swift_release_n(v7, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v14, v16, "#CallStateNotificationManager adding task: %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v7, 2LL);
  }

  swift_beginAccess(a4 + 32, v25, 33LL, 0LL);
  swift_retain();
  specialized Dictionary._Variant.setValue(_:forKey:)();
  swift_endAccess(v25);
  CallStateNotificationManager.tasks.didset();
  return swift_release(v7);
}

void CallStateOneTimeTask.__allocating_init(task:)()
{
}

uint64_t closure #1 in closure #1 in CallStateNotificationManager.addTask(timeout:task:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = a2 + 16;
    swift_beginAccess(v6, &v9, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v6);
    if (Strong)
    {
      uint64_t v8 = Strong;
      CallStateNotificationManager.removeTask(_:)();
      swift_release(v8);
    }

    return swift_release(v5);
  }

  return result;
}

void CallStateNotificationManager.removeTask(_:)()
{
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v6 = OUTLINED_FUNCTION_42_6();
  uint64_t v27 = *(void *)(v6 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  uint64_t v7 = OUTLINED_FUNCTION_44_3();
  uint64_t v25 = *(void *)(v7 - 8);
  uint64_t v26 = v7;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_32();
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v8 = OUTLINED_FUNCTION_15_1();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
  uint64_t v9 = OUTLINED_FUNCTION_11_18(v5);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v12 = static os_log_type_t.debug.getter(v10, v11);
  if (os_log_type_enabled(v10, v12))
  {
    uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v14 = OUTLINED_FUNCTION_7_0(32LL);
    *(_DWORD *)uint64_t v13 = 136315138;
    v29[0] = v14;
    uint64_t v15 = OUTLINED_FUNCTION_12();
    uint64_t v16 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v15, v16);
    uint64_t v28 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v13 + 4);
    OUTLINED_FUNCTION_31_1(v5);
    uint64_t v3 = v0;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_57_0(&dword_0, v10, v12, "#CallStateNotificationManager removing task: %s", v13);
    OUTLINED_FUNCTION_17_0(v14);
    OUTLINED_FUNCTION_0_2(v14);
    OUTLINED_FUNCTION_0_2((uint64_t)v13);
  }

  else
  {

    OUTLINED_FUNCTION_31_1(v5);
  }

  uint64_t v19 = OUTLINED_FUNCTION_10_22((uint64_t)&unk_3F9E18);
  *(void *)(v19 + 16) = v3;
  *(void *)(v19 + 24) = v5;
  v29[4] = (uint64_t)partial apply for closure #1 in CallStateNotificationManager.removeTask(_:);
  uint64_t v30 = v19;
  v29[0] = (uint64_t)_NSConcreteStackBlock;
  v29[1] = 1107296256LL;
  uint64_t v20 = OUTLINED_FUNCTION_22_11((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
  swift_retain();
  uint64_t v21 = OUTLINED_FUNCTION_3_8();
  static DispatchQoS.unspecified.getter(v21);
  uint64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v22 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( &lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v23 = OUTLINED_FUNCTION_43_3();
  uint64_t v24 = OUTLINED_FUNCTION_41_7((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v23, v24, v6, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v2);
  _Block_release(v20);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v1, v6);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v2, v26);
  swift_release(v30);
  OUTLINED_FUNCTION_7_5();
}

void closure #1 in CallStateNotificationManager.removeTask(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_uuid;
  swift_beginAccess(a1 + 32, v7, 33LL, 0LL);
  uint64_t v4 = specialized Dictionary._Variant.removeValue(forKey:)(v3);
  swift_endAccess(v7);
  swift_release(v4);
  CallStateNotificationManager.tasks.didset();
  uint64_t v5 = *(void *)((*(uint64_t (**)(void))(*(void *)a1 + 112LL))() + 16);
  uint64_t v6 = swift_bridgeObjectRelease();
}

void CallStateNotificationManager.startObservingNotifications()()
{
  uint64_t v2 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v3 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v3, (uint64_t)static Logger.siriPhone);
  os_log_type_t v4 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_29_4(v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v6 = OUTLINED_FUNCTION_7_0(32LL);
    v25[0] = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v7 = OUTLINED_FUNCTION_47_0(29LL, 0x8000000000348480LL, v25);
    OUTLINED_FUNCTION_18_15(v7, v8, v9, v10, v11, v12, v13, v14, v24, v25[0]);
    OUTLINED_FUNCTION_57_0(&dword_0, v0, v1, "#CallStateNotificationManager %s", v5);
    OUTLINED_FUNCTION_17_0(v6);
    OUTLINED_FUNCTION_0_2(v6);
    OUTLINED_FUNCTION_0_2((uint64_t)v5);
  }

  uint64_t v15 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
  id v16 = [v15 defaultCenter];
  OUTLINED_FUNCTION_26_11(v16, v17, v18, v19, TUCallCenterCallStatusChangedNotification);

  id v20 = [v15 defaultCenter];
  OUTLINED_FUNCTION_26_11(v20, v21, v22, v23, TUCallCenterVideoCallStatusChangedNotification);

  OUTLINED_FUNCTION_3_3((uint64_t)v2 + 40, (uint64_t)v25);
  *((_BYTE *)v2 + 40) = 1;
  OUTLINED_FUNCTION_67_3();
}

void CallStateNotificationManager.stopObservingNotifications()()
{
  uint64_t v2 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v3 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v3, (uint64_t)static Logger.siriPhone);
  os_log_type_t v4 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_29_4(v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v6 = OUTLINED_FUNCTION_7_0(32LL);
    v23[0] = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v7 = OUTLINED_FUNCTION_47_0(28LL, 0x8000000000348460LL, v23);
    OUTLINED_FUNCTION_18_15(v7, v8, v9, v10, v11, v12, v13, v14, v22, v23[0]);
    OUTLINED_FUNCTION_57_0(&dword_0, v0, v1, "#CallStateNotificationManager %s", v5);
    OUTLINED_FUNCTION_17_0(v6);
    OUTLINED_FUNCTION_0_2(v6);
    OUTLINED_FUNCTION_0_2((uint64_t)v5);
  }

  uint64_t v15 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
  id v16 = [v15 defaultCenter];
  OUTLINED_FUNCTION_31_9(v16, v17, v18, TUCallCenterCallStatusChangedNotification);

  id v19 = [v15 defaultCenter];
  OUTLINED_FUNCTION_31_9(v19, v20, v21, TUCallCenterVideoCallStatusChangedNotification);

  OUTLINED_FUNCTION_3_3((uint64_t)v2 + 40, (uint64_t)v23);
  *((_BYTE *)v2 + 40) = 0;
  OUTLINED_FUNCTION_67_3();
}

void CallStateNotificationManager.deinit()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v1 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v1, (uint64_t)static Logger.siriPhone);
  os_log_type_t v2 = OUTLINED_FUNCTION_6_0();
  if (os_log_type_enabled((os_log_t)v0, v2))
  {
    uint64_t v3 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_0, (os_log_t)v0, v2, "#CallStateNotificationManager deinit", v3, 2u);
    OUTLINED_FUNCTION_0_2((uint64_t)v3);
  }

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6();
}

uint64_t CallStateNotificationManager.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 41LL, 7LL);
}

uint64_t CallStateOneTimeTask.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_uuid;
  uint64_t v4 = OUTLINED_FUNCTION_12();
  return OUTLINED_FUNCTION_55_1(a1, v3, v4, *(uint64_t (**)(void))(*(void *)(v4 - 8) + 16LL));
}

uint64_t CallStateOneTimeTask.task.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_task);
  UsoEntity_common_Person.usoPerson.getter();
  return v1;
}

void (*CallStateOneTimeTask.isActive.didset())(void)
{
  uint64_t v1 = (_BYTE *)(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_isActive);
  uint64_t result = (void (*)(void))swift_beginAccess( v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_isActive,  v6,  0LL,  0LL);
  if ((*v1 & 1) == 0)
  {
    uint64_t result = (void (*)(void))(*(uint64_t (**)(void (*)(void)))(*(void *)v0 + 144LL))(result);
    if (result)
    {
      uint64_t v4 = (uint64_t)result;
      uint64_t v5 = v3;
      result();
      return (void (*)(void))outlined consume of (@escaping @callee_guaranteed () -> ())?(v4, v5);
    }
  }

  return result;
}

uint64_t CallStateOneTimeTask.isActive.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_isActive);
  OUTLINED_FUNCTION_25_0( v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_isActive,  (uint64_t)v3,  0LL);
  return *v1;
}

void (*CallStateOneTimeTask.isActive.setter(char a1))(void)
{
  uint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_isActive);
  OUTLINED_FUNCTION_3_3(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_isActive, (uint64_t)v5);
  *uint64_t v3 = a1;
  return CallStateOneTimeTask.isActive.didset();
}

uint64_t key path getter for CallStateOneTimeTask.teardownHandler : CallStateOneTimeTask@<X0>( uint64_t a1@<X0>, void (**a2)()@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144LL))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject(&unk_3F9E90, 32LL, 7LL);
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    uint64_t v7 = AnyIntentCarPlayRCHFlowProvider.makeRCHFlow(input:);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  *a2 = v7;
  a2[1] = (void (*)())result;
  return result;
}

uint64_t key path setter for CallStateOneTimeTask.teardownHandler : CallStateOneTimeTask( uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject(&unk_3F9E68, 32LL, 7LL);
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = AnyIntentCarPlayRCHFlowProvider.makeRCHFlow(input:);
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  uint64_t v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_teardownHandler);
  swift_beginAccess(v7, v11, 1LL, 0LL);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v3, v4);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v8, v9);
}

uint64_t CallStateOneTimeTask.teardownHandler.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_teardownHandler);
  OUTLINED_FUNCTION_25_0( v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_teardownHandler,  (uint64_t)v4,  0LL);
  uint64_t v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(*v1, v1[1]);
  return v2;
}

uint64_t key path setter for CallStateOneTimeTask.timer : CallStateOneTimeTask(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)(*a2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_timer);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = v2;
  swift_unknownObjectRetain(v2);
  return swift_unknownObjectRelease(v4);
}

uint64_t CallStateOneTimeTask.timer.getter()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_timer);
  OUTLINED_FUNCTION_25_0( v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_timer,  (uint64_t)v3,  0LL);
  return swift_unknownObjectRetain(*v1);
}

void CallStateOneTimeTask.init(task:)()
{
  *(_BYTE *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_isActive) = 1;
  uint64_t v4 = (void *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_teardownHandler);
  *uint64_t v4 = 0LL;
  v4[1] = 0LL;
  *(void *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_timer) = 0LL;
  uint64_t v5 = (void *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_task);
  *uint64_t v5 = v2;
  v5[1] = v0;
  OUTLINED_FUNCTION_6();
}

uint64_t CallStateOneTimeTask.callStateDidChange(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 120LL))();
  if ((result & 1) != 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v1
                                                + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_task))(a1);
    if ((result & 1) != 0)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v5 = OUTLINED_FUNCTION_15_1();
      __swift_project_value_buffer(v5, (uint64_t)static Logger.siriPhone);
      uint64_t v6 = OUTLINED_FUNCTION_11_18(v1);
      uint64_t v7 = (void *)Logger.logObject.getter(v6);
      os_log_type_t v9 = static os_log_type_t.debug.getter(v7, v8);
      if (OUTLINED_FUNCTION_33_10(v9))
      {
        uint64_t v10 = (_DWORD *)OUTLINED_FUNCTION_7_0(12LL);
        uint64_t v11 = OUTLINED_FUNCTION_7_0(32LL);
        *uint64_t v10 = 136315138;
        OUTLINED_FUNCTION_12();
        uint64_t v12 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v13 = OUTLINED_FUNCTION_38_11(v12);
        uint64_t v16 = OUTLINED_FUNCTION_16_9(v13, v14, v15);
        OUTLINED_FUNCTION_17_20(v16, v17, v18, v19, v20, v21, v22, v23, v27, v11);
        OUTLINED_FUNCTION_31_1(v1);
        OUTLINED_FUNCTION_62();
        OUTLINED_FUNCTION_21_12(&dword_0, v24, v25, "#CallStateOneTimeTask executed %s");
        OUTLINED_FUNCTION_17_0(v11);
        OUTLINED_FUNCTION_0_2(v11);
        OUTLINED_FUNCTION_0_2((uint64_t)v10);
      }

      else
      {

        OUTLINED_FUNCTION_31_1(v1);
      }

      uint64_t v26 = (_BYTE *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_isActive);
      OUTLINED_FUNCTION_3_3( v2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_isActive,  (uint64_t)v28);
      *uint64_t v26 = 0;
      return (uint64_t)CallStateOneTimeTask.isActive.didset();
    }
  }

  return result;
}

void CallStateOneTimeTask.setTimeout(timeout:)()
{
  uint64_t v1 = v0;
  uint64_t v77 = v2;
  uint64_t v73 = OUTLINED_FUNCTION_42_6();
  uint64_t v81 = *(void *)(v73 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v64 = v3;
  uint64_t v4 = OUTLINED_FUNCTION_65_1();
  uint64_t v5 = type metadata accessor for DispatchQoS(v4);
  uint64_t v79 = *(void *)(v5 - 8);
  uint64_t v80 = v5;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v78 = v6;
  uint64_t v7 = OUTLINED_FUNCTION_13_22();
  uint64_t v75 = *(void *)(v7 - 8);
  uint64_t v76 = v7;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  os_log_type_t v74 = (uint64_t *)((char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v72 = (uint64_t)&v60 - v9;
  uint64_t v10 = OUTLINED_FUNCTION_65_1();
  uint64_t v71 = type metadata accessor for DispatchTime(v10);
  uint64_t v66 = *(void *)(v71 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  uint64_t v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v70 = (char *)&v60 - v13;
  uint64_t v14 = OUTLINED_FUNCTION_65_1();
  uint64_t v69 = type metadata accessor for DispatchQoS.QoSClass(v14);
  uint64_t v67 = *(void *)(v69 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v63 = v15;
  uint64_t v16 = OUTLINED_FUNCTION_65_1();
  uint64_t v17 = type metadata accessor for OS_dispatch_source.TimerFlags(v16);
  uint64_t v68 = *(void *)(v17 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v65 = v18;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v19 = OUTLINED_FUNCTION_15_1();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.siriPhone);
  uint64_t v20 = OUTLINED_FUNCTION_11_18(v0);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v23 = static os_log_type_t.debug.getter(v21, v22);
  if (os_log_type_enabled(v21, v23))
  {
    uint64_t v24 = OUTLINED_FUNCTION_7_0(22LL);
    uint64_t v61 = v17;
    uint64_t v25 = v24;
    uint64_t v26 = OUTLINED_FUNCTION_7_0(64LL);
    v83[0] = v26;
    *(_DWORD *)uint64_t v25 = 136315394;
    uint64_t v82 = OUTLINED_FUNCTION_47_0(20LL, 0x8000000000348330LL, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83, v25 + 4);
    *(_WORD *)(v25 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    char v62 = v12;
    uint64_t v27 = OUTLINED_FUNCTION_12();
    uint64_t v28 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v29 = v27;
    uint64_t v1 = v0;
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter(v29, v28);
    uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v83);
    uint64_t v12 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83, v25 + 14);
    OUTLINED_FUNCTION_31_1(v0);
    OUTLINED_FUNCTION_62();
    _os_log_impl(&dword_0, v21, v23, "#CallStateOneTimeTask %s %s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v26, 2LL);
    OUTLINED_FUNCTION_0_2(v26);
    uint64_t v32 = v25;
    uint64_t v17 = v61;
    OUTLINED_FUNCTION_0_2(v32);
  }

  else
  {

    OUTLINED_FUNCTION_31_1(v0);
  }

  type metadata accessor for CNContactStore( 0LL,  &lazy cache variable for type metadata for OS_dispatch_source,  &OBJC_CLASS___OS_dispatch_source_ptr);
  v83[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v33 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( &lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags,  (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  uint64_t v34 = OUTLINED_FUNCTION_43_3();
  uint64_t v35 = OUTLINED_FUNCTION_41_7((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A]);
  uint64_t v36 = v65;
  dispatch thunk of SetAlgebra.init<A>(_:)(v83, v34, v35, v17, v33);
  type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue,  &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v37 = v67;
  uint64_t v38 = v63;
  uint64_t v39 = v69;
  (*(void (**)(uint64_t, void, uint64_t))(v67 + 104))( v63,  enum case for DispatchQoS.QoSClass.utility(_:),  v69);
  uint64_t v40 = (void *)static OS_dispatch_queue.global(qos:)(v38);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
  uint64_t v41 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v36, v40);

  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v36, v17);
  uint64_t ObjectType = swift_getObjectType(v41);
  static DispatchTime.now()();
  uint64_t v43 = v70;
  + infix(_:_:)(v12, v77);
  uint64_t v44 = *(void (**)(char *, uint64_t))(v66 + 8);
  uint64_t v45 = v12;
  uint64_t v46 = v71;
  v44(v45, v71);
  uint64_t v47 = v72;
  default argument 1 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v72);
  uint64_t v48 = v74;
  default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v74);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v43, v47, v48, ObjectType);
  uint64_t v49 = *(void (**)(void *, uint64_t))(v75 + 8);
  uint64_t v50 = v48;
  uint64_t v51 = v76;
  v49(v50, v76);
  v49((void *)v47, v51);
  v44(v43, v46);
  uint64_t v52 = OUTLINED_FUNCTION_8_2((uint64_t)&unk_3F9D68, 24LL);
  swift_weakInit(v52 + 16, v1);
  v83[4] = (uint64_t)partial apply for closure #1 in CallStateOneTimeTask.setTimeout(timeout:);
  uint64_t v84 = v52;
  v83[0] = (uint64_t)_NSConcreteStackBlock;
  v83[1] = 1107296256LL;
  v83[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  void v83[3] = (uint64_t)&block_descriptor_25;
  uint64_t v53 = _Block_copy(v83);
  uint64_t v54 = swift_retain();
  uint64_t v55 = v78;
  static DispatchQoS.unspecified.getter(v54);
  uint64_t v56 = v64;
  default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v55, v56, v53, ObjectType);
  _Block_release(v53);
  (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v56, v73);
  (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v55, v80);
  uint64_t v57 = v84;
  swift_release(v52);
  swift_release(v57);
  OS_dispatch_source.resume()();
  uint64_t v58 = (uint64_t *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_timer);
  OUTLINED_FUNCTION_3_3(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_timer, (uint64_t)v83);
  uint64_t v59 = *v58;
  *uint64_t v58 = v41;
  swift_unknownObjectRelease(v59);
  OUTLINED_FUNCTION_7_5();
}

uint64_t default argument 1 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)@<X0>( uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for DispatchTimeInterval.never(_:);
  uint64_t v3 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL))(a1, v2, v3);
}

uint64_t default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)@<X0>( void *a1@<X8>)
{
  *a1 = 0LL;
  uint64_t v2 = enum case for DispatchTimeInterval.nanoseconds(_:);
  uint64_t v3 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL))(a1, v2, v3);
}

uint64_t closure #1 in CallStateOneTimeTask.setTimeout(timeout:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v6 = static os_log_type_t.debug.getter(v4, v5);
  if (os_log_type_enabled(v4, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_0, v4, v6, "#CallStateOneTimeTask timed out", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  swift_beginAccess(v1, v12, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v9 = result;
    uint64_t v10 = (_BYTE *)(result + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_isActive);
    swift_beginAccess( result + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_isActive,  &v11,  1LL,  0LL);
    *uint64_t v10 = 0;
    CallStateOneTimeTask.isActive.didset();
    return swift_release(v9);
  }

  return result;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = UsoEntity_common_Person.usoPerson.getter();
  v1(v3);
  return swift_release(v2);
}

uint64_t default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v1 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( &lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v3 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A],  &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t CallStateOneTimeTask.setTeardownHandler(_:)()
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_teardownHandler);
  OUTLINED_FUNCTION_3_3((uint64_t)v3, (uint64_t)v7);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  *uint64_t v3 = v2;
  v3[1] = v0;
  OUTLINED_FUNCTION_3_8();
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v4, v5);
}

uint64_t CallStateOneTimeTask.deinit()
{
  uint64_t v1 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v2 = OUTLINED_FUNCTION_15_1();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  uint64_t v3 = OUTLINED_FUNCTION_11_18(v0);
  uint64_t v4 = (void *)Logger.logObject.getter(v3);
  os_log_type_t v6 = static os_log_type_t.debug.getter(v4, v5);
  if (OUTLINED_FUNCTION_33_10(v6))
  {
    uint64_t v7 = (_DWORD *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v8 = OUTLINED_FUNCTION_7_0(32LL);
    *uint64_t v7 = 136315138;
    OUTLINED_FUNCTION_12();
    uint64_t v9 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v10 = OUTLINED_FUNCTION_38_11(v9);
    uint64_t v13 = OUTLINED_FUNCTION_16_9(v10, v11, v12);
    OUTLINED_FUNCTION_17_20(v13, v14, v15, v16, v17, v18, v19, v20, v26, v8);
    OUTLINED_FUNCTION_31_1(v0);
    OUTLINED_FUNCTION_62();
    OUTLINED_FUNCTION_21_12(&dword_0, v21, v22, "#CallStateOneTimeTask deinit %s");
    OUTLINED_FUNCTION_17_0(v8);
    OUTLINED_FUNCTION_0_2(v8);
    OUTLINED_FUNCTION_0_2((uint64_t)v7);
  }

  else
  {

    OUTLINED_FUNCTION_31_1(v0);
  }

  uint64_t v23 = v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_uuid;
  uint64_t v24 = OUTLINED_FUNCTION_12();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8LL))(v23, v24);
  swift_release(*(void *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_task + 8));
  outlined consume of (@escaping @callee_guaranteed () -> ())?( *(void *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_teardownHandler),  *(void *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_teardownHandler + 8));
  swift_unknownObjectRelease(*(void *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_timer));
  return v1;
}

uint64_t CallStateOneTimeTask.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_9B210()
{
  OUTLINED_FUNCTION_37();
  uint64_t v1 = OUTLINED_FUNCTION_34_3();
  return swift_deallocObject(v1, v2, v3);
}

void partial apply for closure #1 in CallStateNotificationManager.callStateChanged(_:)()
{
}

uint64_t sub_9B238()
{
  uint64_t v1 = OUTLINED_FUNCTION_13_22();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  OUTLINED_FUNCTION_37();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in CallStateNotificationManager.addTask(timeout:task:)()
{
  uint64_t v1 = *(void *)(OUTLINED_FUNCTION_13_22() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return closure #1 in CallStateNotificationManager.addTask(timeout:task:)( *(void *)(v0 + 16),  *(void *)(v0 + 24),  v0 + v2,  *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t outlined copy of (@escaping @callee_guaranteed () -> ())?(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_9B314()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t partial apply for closure #1 in CallStateOneTimeTask.setTimeout(timeout:)()
{
  return closure #1 in CallStateOneTimeTask.setTimeout(timeout:)(v0);
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> ())?(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

void sub_9B350()
{
  void *v0 = (*(uint64_t (**)(void))(v1 + 112))();
  OUTLINED_FUNCTION_2();
}

void sub_9B378()
{
  _BYTE *v0 = (*(uint64_t (**)(void))(v1 + 136))() & 1;
  OUTLINED_FUNCTION_2();
}

void sub_9B3A4()
{
  _BYTE *v0 = (*(uint64_t (**)(void))(v1 + 120))() & 1;
  OUTLINED_FUNCTION_2();
}

void sub_9B3CC(char *a1)
{
}

void sub_9B3F4()
{
  void *v0 = (*(uint64_t (**)(void))(v1 + 168))();
  OUTLINED_FUNCTION_2();
}

uint64_t type metadata accessor for CallStateNotificationManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin28CallStateNotificationManager);
}

uint64_t ObjC metadata update function for CallStateOneTimeTask()
{
  return type metadata accessor for CallStateOneTimeTask(0LL);
}

uint64_t type metadata completion function for CallStateOneTimeTask(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for () + 64;
    void v4[2] = &unk_3221D8;
    void v4[3] = &unk_3221F0;
    v4[4] = &unk_322208;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void partial apply for closure #1 in CallStateNotificationManager.removeTask(_:)()
{
}

uint64_t sub_9B4E8()
{
  uint64_t v0 = OUTLINED_FUNCTION_34_3();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t objectdestroy_35Tm()
{
  uint64_t v1 = OUTLINED_FUNCTION_34_3();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t partial apply for closure #1 in closure #1 in CallStateNotificationManager.addTask(timeout:task:)()
{
  return closure #1 in closure #1 in CallStateNotificationManager.addTask(timeout:task:)( *(void *)(v0 + 16),  *(void *)(v0 + 24));
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]( unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_10_22(uint64_t a1)
{
  return swift_allocObject(a1, 32LL, 7LL);
}

uint64_t OUTLINED_FUNCTION_13_22()
{
  return type metadata accessor for DispatchTimeInterval(0LL);
}

uint64_t OUTLINED_FUNCTION_16_12()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t OUTLINED_FUNCTION_17_20( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, &a10, v11, v10);
}

uint64_t OUTLINED_FUNCTION_18_15( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, &a10, v11, v10);
}

  ;
}

void *OUTLINED_FUNCTION_22_11@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a1;
  *(void *)(v2 - 104) = v1;
  return _Block_copy((const void *)(v2 - 128));
}

id OUTLINED_FUNCTION_26_11(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend(a1, *(SEL *)(v7 + 1696), v5, v6, a5, 0);
}

id OUTLINED_FUNCTION_31_9(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(a1, *(SEL *)(v5 + 1680), v4, a4, 0);
}

BOOL OUTLINED_FUNCTION_33_10(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_38_11(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t OUTLINED_FUNCTION_41_7(unint64_t *a1)
{
  return lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](a1, v1);
}

uint64_t OUTLINED_FUNCTION_42_6()
{
  return type metadata accessor for DispatchWorkItemFlags(0LL);
}

uint64_t OUTLINED_FUNCTION_43_3()
{
  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t PhoneIncomingCall.Builder.incomingCall.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

void PhoneCallNLv4Contact.contactReference.setter(char a1)
{
  *(_BYTE *)(v1 + swift_weakDestroy(v0 + 16) = a1;
  OUTLINED_FUNCTION_60_2();
}

void PhoneCallMetrics.Builder.timeToEstablish.modify(uint64_t a1)
{
}

uint64_t PhoneIncomingCall.Builder.unknownCaller.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

void PhoneIncomingCall.Builder.unknownCaller.setter(char a1)
{
  *(_BYTE *)(v1 + 17) = a1;
  OUTLINED_FUNCTION_60_2();
}

void PhoneIncomingCall.Builder.unknownCaller.modify(uint64_t a1)
{
}

uint64_t key path setter for PhoneIncomingCall.Builder.latestCallRecord : PhoneIncomingCall.Builder( void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 160LL);
  uint64_t v3 = swift_retain(*a1);
  return v2(v3);
}

uint64_t PhoneIncomingCall.Builder.latestCallRecord.getter()
{
  return swift_retain();
}

void PhoneIncomingCall.Builder.latestCallRecord.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  *(void *)(v1 + 24) = a1;
  swift_release(v3);
  OUTLINED_FUNCTION_60_2();
}

void PhoneCallNLv4Contact.contactId.modify(uint64_t a1)
{
}

uint64_t PhoneIncomingCall.Builder.__allocating_init()()
{
  uint64_t result = OUTLINED_FUNCTION_8_2(v0, 32LL);
  *(_WORD *)(result + swift_weakDestroy(v0 + 16) = 0;
  *(void *)(result + 24) = 0LL;
  return result;
}

uint64_t PhoneIncomingCall.Builder.init()()
{
  uint64_t result = v0;
  *(_WORD *)(v0 + swift_weakDestroy(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0LL;
  return result;
}

uint64_t PhoneIncomingCall.Builder.withIncomingCall(_:)()
{
  return swift_retain();
}

uint64_t PhoneIncomingCall.Builder.withUnknownCaller(_:)()
{
  return swift_retain();
}

uint64_t PhoneIncomingCall.Builder.withLatestCallRecord(_:)()
{
  uint64_t v1 = *(void (**)(uint64_t))(*(void *)v0 + 160LL);
  uint64_t v2 = swift_retain();
  v1(v2);
  return OUTLINED_FUNCTION_27_0(v0);
}

uint64_t PhoneIncomingCall.Builder.withLatestCallRecord(_:)(uint64_t a1)
{
  if (a1) {
    a1 = (*(uint64_t (**)(void))(*(void *)a1 + 1176LL))();
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 160LL))(a1);
  return OUTLINED_FUNCTION_27_0(v1);
}

void PhoneIncomingCall.Builder.build()()
{
  uint64_t v0 = type metadata accessor for PhoneIncomingCall();
  OUTLINED_FUNCTION_8_2(v0, 40LL);
  uint64_t v1 = swift_retain();
  PhoneIncomingCall.init(builder:)(v1);
  OUTLINED_FUNCTION_2();
}

void PhoneIncomingCall.__allocating_init(builder:)(uint64_t a1)
{
}

uint64_t type metadata accessor for PhoneIncomingCall()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin17PhoneIncomingCall);
}

unint64_t static PhoneIncomingCall.catTypeName.getter()
{
  return 0xD000000000000012LL;
}

uint64_t PhoneIncomingCall.incomingCall.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t PhoneIncomingCall.unknownCaller.getter()
{
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t PhoneIncomingCall.init(builder:)(uint64_t a1)
{
  uint64_t v2 = v1;
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = 0LL;
  *(_BYTE *)(v2 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104LL))(a1) & 1;
  *(_BYTE *)(v2 + 25) = OUTLINED_FUNCTION_13_23() & 1;
  uint64_t v4 = OUTLINED_FUNCTION_11_23();
  swift_release(a1);
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v4;
  return v2;
}

uint64_t PhoneIncomingCall.__allocating_init(incomingCall:unknownCaller:latestCallRecord:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for PhoneIncomingCall.Builder();
  uint64_t v9 = OUTLINED_FUNCTION_8_2(v8, 32LL);
  *(_WORD *)(v9 + swift_weakDestroy(v0 + 16) = 0;
  *(void *)(v9 + 24) = 0LL;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 184LL))(a1);
  swift_release(v9);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 192LL))(a2);
  swift_release(v10);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 200LL))(a3);
  swift_release(v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(v4 + 152))(v12);
  swift_release(a3);
  return v13;
}

uint64_t type metadata accessor for PhoneIncomingCall.Builder()
{
  return objc_opt_self(&OBJC_CLASS____TtCC27PhoneCallFlowDelegatePlugin17PhoneIncomingCall7Builder);
}

uint64_t PhoneIncomingCall.getProperty(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v5 = result == 0x676E696D6F636E69LL && a2 == 0xEC0000006C6C6143LL;
  if (v5
    || (v7 = result, uint64_t result = OUTLINED_FUNCTION_1_3(0x676E696D6F636E69LL, 0xEC0000006C6C6143LL), (result & 1) != 0))
  {
    char v8 = *(_BYTE *)(v3 + 24);
LABEL_13:
    *(void *)(a3 + 24) = &type metadata for Bool;
    *(_BYTE *)a3 = v8;
    return result;
  }

  BOOL v9 = v7 == 0x436E776F6E6B6E75LL && a2 == 0xED000072656C6C61LL;
  if (v9 || (uint64_t result = OUTLINED_FUNCTION_1_3(0x436E776F6E6B6E75LL, 0xED000072656C6C61LL), (result & 1) != 0))
  {
    char v8 = *(_BYTE *)(v3 + 25);
    goto LABEL_13;
  }

  if ((v7 == 0xD000000000000010LL && a2 == 0x8000000000342060LL
     || (uint64_t result = OUTLINED_FUNCTION_1_3(0xD000000000000010LL, 0x8000000000342060LL), (result & 1) != 0))
    && (uint64_t v10 = *(void *)(v3 + 32)) != 0)
  {
    *(void *)(a3 + 24) = type metadata accessor for PhoneCallRecord(0LL);
    *(void *)a3 = v10;
    return swift_retain();
  }

  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + swift_weakDestroy(v0 + 16) = 0u;
  }

  return result;
}

PhoneCallFlowDelegatePlugin::PhoneIncomingCall::CodingKeys_optional __swiftcall PhoneIncomingCall.CodingKeys.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of PhoneIncomingCall.CodingKeys.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return (PhoneCallFlowDelegatePlugin::PhoneIncomingCall::CodingKeys_optional)3;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneIncomingCall::CodingKeys_optional)v3;
  }
}

uint64_t PhoneIncomingCall.CodingKeys.rawValue.getter(char a1)
{
  if (!a1) {
    return OUTLINED_FUNCTION_1_29();
  }
  OUTLINED_FUNCTION_15_14();
  if (v2 == 1) {
    return v1;
  }
  else {
    return 0xD000000000000010LL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PhoneIncomingCall.CodingKeys( char *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance PhoneIncomingCall.CodingKeys()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneIncomingCall.CodingKeys(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneIncomingCall.CodingKeys( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::PhoneIncomingCall::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneIncomingCall.CodingKeys@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneIncomingCall::CodingKeys_optional *a2@<X8>)
{
  result.int value = PhoneIncomingCall.CodingKeys.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PhoneIncomingCall.CodingKeys( uint64_t *a1@<X8>)
{
  *a1 = PhoneIncomingCall.CodingKeys.rawValue.getter(*v1);
  a1[1] = v3;
  OUTLINED_FUNCTION_2();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PhoneIncomingCall.CodingKeys()
{
  return PhoneIncomingCall.CodingKeys.rawValue.getter(*v0);
}

PhoneCallFlowDelegatePlugin::PhoneIncomingCall::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance PhoneIncomingCall.CodingKeys@<W0>( uint64_t a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneIncomingCall::CodingKeys_optional *a2@<X8>)
{
  result.int value = PhoneIncomingCall.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->int value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneIncomingCall.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneIncomingCall.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PhoneIncomingCall.deinit()
{
  swift_release(*(void *)(v0 + 32));
  return v0;
}

uint64_t PhoneIncomingCall.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t PhoneIncomingCall.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneIncomingCall.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  char v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  unint64_t v11 = lazy protocol witness table accessor for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for PhoneIncomingCall.CodingKeys,  &type metadata for PhoneIncomingCall.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *(unsigned __int8 *)(v3 + 24);
  char v21 = 0;
  OUTLINED_FUNCTION_6_29(v12, (uint64_t)&v21);
  if (!v2)
  {
    uint64_t v13 = *(unsigned __int8 *)(v3 + 25);
    char v20 = 1;
    OUTLINED_FUNCTION_6_29(v13, (uint64_t)&v20);
    uint64_t v19 = *(void *)(v3 + 32);
    char v18 = 2;
    uint64_t v14 = type metadata accessor for PhoneCallRecord(0LL);
    lazy protocol witness table accessor for type PlayVoiceMailAction and conformance PlayVoiceMailAction( &lazy protocol witness table cache variable for type PhoneCallRecord and conformance PhoneCallRecord,  255LL,  type metadata accessor for PhoneCallRecord,  (uint64_t)&protocol conformance descriptor for PhoneCallRecord);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, v14, v15);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t lazy protocol witness table accessor for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneIncomingCall.CodingKeys,  &type metadata for PhoneIncomingCall.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneIncomingCall.CodingKeys,  &type metadata for PhoneIncomingCall.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneIncomingCall.CodingKeys,  &type metadata for PhoneIncomingCall.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneIncomingCall.CodingKeys,  &type metadata for PhoneIncomingCall.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys);
  }

  return result;
}

uint64_t PhoneIncomingCall.__allocating_init(from:)(void *a1)
{
  uint64_t v3 = swift_allocObject(v1, 40LL, 7LL);
  PhoneIncomingCall.init(from:)(a1);
  return v3;
}

uint64_t PhoneIncomingCall.init(from:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneIncomingCall.CodingKeys>);
  __chkstk_darwin();
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = 0LL;
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  unint64_t v8 = lazy protocol witness table accessor for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for PhoneIncomingCall.CodingKeys,  &type metadata for PhoneIncomingCall.CodingKeys,  v8,  v6,  v7);
  if (v2)
  {

    uint64_t v11 = type metadata accessor for PhoneIncomingCall();
    swift_deallocPartialClassInstance(v1, v11, 40LL, 7LL);
  }

  else
  {
    char v16 = 0;
    *(_BYTE *)(v1 + 24) = OUTLINED_FUNCTION_10_23((uint64_t)&v16) & 1;
    char v15 = 1;
    *(_BYTE *)(v1 + 25) = OUTLINED_FUNCTION_10_23((uint64_t)&v15) & 1;
    uint64_t v9 = type metadata accessor for PhoneCallRecord(0LL);
    char v14 = 2;
    lazy protocol witness table accessor for type PlayVoiceMailAction and conformance PlayVoiceMailAction( &lazy protocol witness table cache variable for type PhoneCallRecord and conformance PhoneCallRecord,  255LL,  type metadata accessor for PhoneCallRecord,  (uint64_t)&protocol conformance descriptor for PhoneCallRecord);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v9, &v14, v5, v9, v10);
    OUTLINED_FUNCTION_8_4();
    *(void *)(v3 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v13;
  }

  __swift_destroy_boxed_opaque_existential_1(a1);
  return v3;
}

void base witness table accessor for Decodable in PhoneIncomingCall(uint64_t a1, uint64_t a2)
{
}

void base witness table accessor for Encodable in PhoneIncomingCall(uint64_t a1, uint64_t a2)
{
}

void sub_9C338(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = (*(uint64_t (**)(void))(**(void **)a1 + 104LL))() & 1;
  OUTLINED_FUNCTION_2();
}

void sub_9C368()
{
}

void sub_9C388(_BYTE *a1@<X8>)
{
  *a1 = OUTLINED_FUNCTION_13_23() & 1;
  OUTLINED_FUNCTION_2();
}

void sub_9C3B0()
{
}

void sub_9C3D0(uint64_t *a1@<X8>)
{
  *a1 = OUTLINED_FUNCTION_11_23();
  OUTLINED_FUNCTION_2();
}

void sub_9C3F8(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = (*(uint64_t (**)(void))(**(void **)a1 + 128LL))();
  OUTLINED_FUNCTION_2();
}

uint64_t storeEnumTagSinglePayload for PhoneIncomingCall.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = 1;
  }
  else {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_9C474 + 4 * byte_322235[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_9C4A8 + 4 * byte_322230[v4]))();
}

uint64_t sub_9C4A8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_9C4B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x9C4B8LL);
  }
  return result;
}

uint64_t sub_9C4C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x9C4CCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_9C4D0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_9C4D8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PhoneIncomingCall.CodingKeys()
{
  return &type metadata for PhoneIncomingCall.CodingKeys;
}

uint64_t OUTLINED_FUNCTION_1_29()
{
  return 0x676E696D6F636E69LL;
}

uint64_t OUTLINED_FUNCTION_6_29(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_10_23(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_11_23()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
}

uint64_t OUTLINED_FUNCTION_13_23()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t OUTLINED_FUNCTION_14_14()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

  ;
}

void IdentifyIncomingCallerOutputStrategy.incomingCallCats.getter(uint64_t a1@<X8>)
{
}

uint64_t IdentifyIncomingCallerOutputStrategy.init(incomingCallCats:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = type metadata accessor for IdentifyIncomingCallerCATsSimple(0LL);
  *(void *)(a2 + 24) = result;
  *(void *)(a2 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = &protocol witness table for IdentifyIncomingCallerCATsSimple;
  *(void *)a2 = a1;
  *(void *)(a2 + 40) = 0LL;
  *(_BYTE *)(a2 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0;
  return result;
}

uint64_t IdentifyIncomingCallerOutputStrategy.makePromptForConfirmationFlow<A>(app:intentResponse:sharedGlobals:)( uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  v46[0] = type metadata accessor for PhoneError(0LL);
  __chkstk_darwin();
  uint64_t v10 = (void *)((char *)v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v12 = (char *)v46 - v11;
  unsigned __int8 v13 = OUTLINED_FUNCTION_2_22();
  uint64_t v14 = FollowUpOfferType.rawValue.getter(v13);
  if (v14 == 0xD000000000000011LL && v15 == 0x8000000000343650LL) {
    goto LABEL_10;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, 0xD000000000000011LL, 0x8000000000343650LL, 0LL);
  OUTLINED_FUNCTION_62();
  if ((v16 & 1) != 0) {
    goto LABEL_11;
  }
  unsigned __int8 v17 = OUTLINED_FUNCTION_2_22();
  uint64_t v18 = FollowUpOfferType.rawValue.getter(v17);
  if (v18 == 0x4C41435F44414552LL && v19 == 0xE90000000000004CLL)
  {
LABEL_10:
    swift_bridgeObjectRelease();
  }

  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, 0x4C41435F44414552LL, 0xE90000000000004CLL, 0LL);
    OUTLINED_FUNCTION_62();
    if ((v21 & 1) == 0) {
      goto LABEL_21;
    }
  }

uint64_t IncomingCallActionConfirmationFlowAdapter.exitValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for PromptResult.cancelled<A>(_:);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<IncomingCallActionConfirmation>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL))(a1, v2, v3);
}

void CallingIntentContinueInAppStrategy.sharedGlobals.getter(uint64_t a1@<X8>)
{
}

void IncomingCallActionConfirmationFlowAdapter.__allocating_init(_:)(__int128 *a1)
{
  uint64_t v3 = swift_allocObject(v1, 56LL, 7LL);
  outlined init with take of AppSelectionSignalComponent(a1, v3 + 16);
  OUTLINED_FUNCTION_2();
}

uint64_t HandleIntentSubmitter.init(aceServiceInvoker:)(__int128 *a1)
{
  return v1;
}

uint64_t IncomingCallActionConfirmationFlowAdapter.on(input:)(uint64_t a1)
{
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v3);
  return dispatch thunk of Flow.on(input:)(a1, v3, v4) & 1;
}

uint64_t IncomingCallActionConfirmationFlowAdapter.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IncomingCallActionConfirmationFlowAdapter();
  lazy protocol witness table accessor for type PlayVoiceMailAction and conformance PlayVoiceMailAction( &lazy protocol witness table cache variable for type IncomingCallActionConfirmationFlowAdapter and conformance IncomingCallActionConfirmationFlowAdapter,  v5,  (uint64_t (*)(uint64_t))type metadata accessor for IncomingCallActionConfirmationFlowAdapter,  (uint64_t)&protocol conformance descriptor for IncomingCallActionConfirmationFlowAdapter);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v6);
}

uint64_t IncomingCallActionConfirmationFlowAdapter.execute()(uint64_t a1)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch(IncomingCallActionConfirmationFlowAdapter.execute(), 0LL, 0LL);
}

uint64_t IncomingCallActionConfirmationFlowAdapter.execute()()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v2);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Flow.execute()[1]);
  v0[4] = v4;
  *uint64_t v4 = v0;
  v4[1] = IncomingCallActionConfirmationFlowAdapter.execute();
  return dispatch thunk of Flow.execute()(v0[2], v2, v3);
}

{
  uint64_t *v0;
  uint64_t v2;
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 32));
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t HandleIntentSubmitter.deinit()
{
  return v0;
}

uint64_t protocol witness for Flow.on(input:) in conformance IncomingCallActionConfirmationFlowAdapter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104LL))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance IncomingCallActionConfirmationFlowAdapter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112LL))();
}

uint64_t protocol witness for Flow.execute() in conformance IncomingCallActionConfirmationFlowAdapter( uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 120LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance IncomingCallActionConfirmationFlowAdapter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88LL))();
}

uint64_t type metadata accessor for IncomingCallActionConfirmationFlowAdapter()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin41IncomingCallActionConfirmationFlowAdapter);
}

void destroy for IdentifyIncomingCallerOutputStrategy(uint64_t a1)
{
}

uint64_t initializeWithCopy for IdentifyIncomingCallerOutputStrategy(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_BYTE *)(a2 + 48);
  id v6 = v5;
  return a1;
}

uint64_t assignWithCopy for IdentifyIncomingCallerOutputStrategy(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(void **)(a2 + 40);
  uint64_t v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  id v6 = v4;

  *(_BYTE *)(a1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for IdentifyIncomingCallerOutputStrategy(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  id v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;

  *(_BYTE *)(a1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for IdentifyIncomingCallerOutputStrategy(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 49))
    {
      LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentifyIncomingCallerOutputStrategy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(_BYTE *)(result + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 4__swift_destroy_boxed_opaque_existential_1(v0 + 9) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 4__swift_destroy_boxed_opaque_existential_1(v0 + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IdentifyIncomingCallerOutputStrategy()
{
  return &type metadata for IdentifyIncomingCallerOutputStrategy;
}

uint64_t OUTLINED_FUNCTION_2_22()
{
  return v2(v1, v0);
}

uint64_t HoldControlFlow.executeAction(currentCall:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned __int8 v12 = *(_BYTE *)(v4 + 56);
  PhoneCallControlAction.isHoldAction.getter(v12);
  if ((v13 & 1) == 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v28 = __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.error.getter();
    uint64_t v15 = v30;
    if (os_log_type_enabled(v29, v30))
    {
      id v31 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
      *(_WORD *)id v31 = 0;
      _os_log_impl( &dword_0,  v29,  (os_log_type_t)v15,  "#HoldControlFlow used to handle a call control not related to hold.",  v31,  2u);
      OUTLINED_FUNCTION_0_2((uint64_t)v31);
    }

    unint64_t v32 = lazy protocol witness table accessor for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError();
    OUTLINED_FUNCTION_4_4((uint64_t)&type metadata for ActionableCallControlFlow.ActionableCallControlFlowError, v32);
    OUTLINED_FUNCTION_5_26();
    char v27 = 0;
    *char v20 = v12;
    goto LABEL_13;
  }

  uint64_t v93 = a3;
  uint64_t v94 = v11;
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v15 = a1;
  SPHCall.isFTVideo.getter(ObjectType, a2);
  if ((v16 & 1) != 0)
  {
    unint64_t v17 = lazy protocol witness table accessor for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError();
    OUTLINED_FUNCTION_4_4((uint64_t)&type metadata for ActionableCallControlFlow.ActionableCallControlFlowError, v17);
    OUTLINED_FUNCTION_5_26();
    unint64_t v19 = OUTLINED_FUNCTION_4_26(v18, (uint64_t)&type metadata for ActionableCallControlFlow.UnsupportedHoldActionReason);
    *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v19;
    char v27 = 1;
    *(_BYTE *)a1 = 1;
LABEL_13:
    *(_BYTE *)(v15 + 40) = v27;
    return swift_willThrow(v19, v20, v21, v22, v23, v24, v25, v26);
  }

  uint64_t v92 = v8;
  uint64_t v33 = *(uint8_t **)(a2 + 16);
  if (OUTLINED_FUNCTION_3_30() == 3 || OUTLINED_FUNCTION_3_30() == 4)
  {
    unint64_t v34 = lazy protocol witness table accessor for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError();
    OUTLINED_FUNCTION_4_4((uint64_t)&type metadata for ActionableCallControlFlow.ActionableCallControlFlowError, v34);
    OUTLINED_FUNCTION_5_26();
    unint64_t v19 = OUTLINED_FUNCTION_4_26(v35, (uint64_t)&type metadata for ActionableCallControlFlow.UnsupportedHoldActionReason);
    *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v19;
    *(_BYTE *)a1 = 2;
LABEL_12:
    char v27 = 1;
    goto LABEL_13;
  }

  uint64_t v91 = v33;
  uint64_t v15 = a1;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 192))(ObjectType, a2) & 1) == 0)
  {
    unint64_t v44 = lazy protocol witness table accessor for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError();
    OUTLINED_FUNCTION_4_4((uint64_t)&type metadata for ActionableCallControlFlow.ActionableCallControlFlowError, v44);
    OUTLINED_FUNCTION_5_26();
    unint64_t v19 = OUTLINED_FUNCTION_4_26(v45, (uint64_t)&type metadata for ActionableCallControlFlow.UnsupportedHoldActionReason);
    *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v19;
    *(_BYTE *)a1 = 0;
    goto LABEL_12;
  }

  uint64_t v87 = ObjectType;
  LODWORD(v8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = OUTLINED_FUNCTION_8_19(ObjectType);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v89 = __swift_project_value_buffer(v92, (uint64_t)static Logger.siriPhone);
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v89);
  os_log_type_t v39 = static os_log_type_t.debug.getter(v37, v38);
  BOOL v40 = os_log_type_enabled(v37, v39);
  uint64_t v90 = v9;
  if (v40)
  {
    int v41 = (int)v88;
    BOOL v86 = (_DWORD)v88 == 2;
    id v42 = v37;
    uint64_t v43 = (uint8_t *)OUTLINED_FUNCTION_7_0(8LL);
    *(_DWORD *)uint64_t v43 = 67109120;
    LODWORD(v97) = v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, (char *)&v97 + 4, v43 + 4);
    _os_log_impl(&dword_0, v42, v39, "#HoldControlFlow isHeld = %{BOOL}d", v43, 8u);
    OUTLINED_FUNCTION_0_2((uint64_t)v43);
  }

  else
  {

    int v41 = (int)v88;
  }

  uint64_t v46 = PhoneCallControlAction.rawValue.getter(v12);
  if (v41 != 2)
  {
    BOOL v51 = v46 == 0x6F48656C62616E65LL && v47 == 0xEA0000000000646CLL;
    uint64_t v49 = v92;
    uint64_t v50 = v90;
    if (v51)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      _stringCompareWithSmolCheck(_:_:expecting:)(v46, v47, 0x6F48656C62616E65LL, 0xEA0000000000646CLL, 0LL);
      OUTLINED_FUNCTION_7_28();
      if ((v39 & 1) == 0) {
        goto LABEL_33;
      }
    }

    uint64_t v65 = *(void (**)(uint64_t, uint64_t))(a2 + 200);
    goto LABEL_45;
  }

  BOOL v48 = v46 == 0x48656C6261736964LL && v47 == 0xEB00000000646C6FLL;
  uint64_t v49 = v92;
  uint64_t v50 = v90;
  if (v48)
  {
    swift_bridgeObjectRelease();
LABEL_42:
    uint64_t v65 = *(void (**)(uint64_t, uint64_t))(a2 + 208);
LABEL_45:
    uint64_t v66 = v87;
    v65(v87, a2);
    goto LABEL_48;
  }

  _stringCompareWithSmolCheck(_:_:expecting:)(v46, v47, 0x48656C6261736964LL, 0xEB00000000646C6FLL, 0LL);
  OUTLINED_FUNCTION_7_28();
  if ((v39 & 1) != 0) {
    goto LABEL_42;
  }
LABEL_33:
  uint64_t v52 = swift_retain_n(v4, 2LL);
  uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
  os_log_type_t v55 = static os_log_type_t.debug.getter(v53, v54);
  int v56 = v55;
  if (os_log_type_enabled(v53, v55))
  {
    uint64_t v57 = OUTLINED_FUNCTION_7_0(22LL);
    BOOL v86 = v56;
    uint64_t v58 = v57;
    uint64_t v85 = OUTLINED_FUNCTION_7_0(64LL);
    uint64_t v97 = v85;
    *(_DWORD *)uint64_t v58 = 136315394;
    if ((_DWORD)v88 == 2) {
      uint64_t v59 = 0x646C6F68206E6FLL;
    }
    else {
      uint64_t v59 = 0x646C6F682066666FLL;
    }
    if ((_DWORD)v88 == 2) {
      unint64_t v60 = 0xE700000000000000LL;
    }
    else {
      unint64_t v60 = 0xE800000000000000LL;
    }
    uint64_t v83 = v58 + 4;
    os_log_t v84 = v53;
    uint64_t v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, &v97);
    uint64_t v88 = &v96;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v83);
    swift_bridgeObjectRelease();
    *(_WORD *)(v58 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    uint64_t v61 = PhoneCallControlAction.description.getter(v12);
    uint64_t v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, &v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v88, v58 + 14);
    OUTLINED_FUNCTION_6_8();
    swift_bridgeObjectRelease();
    os_log_t v63 = v84;
    _os_log_impl( &dword_0,  v84,  (os_log_type_t)v86,  "#HoldControlFlow not changing hold status because call is %s and action is %s",  (uint8_t *)v58,  0x16u);
    uint64_t v64 = v85;
    swift_arrayDestroy(v85, 2LL);
    OUTLINED_FUNCTION_0_2(v64);
    OUTLINED_FUNCTION_0_2(v58);
  }

  else
  {

    OUTLINED_FUNCTION_6_8();
  }

  uint64_t v66 = v87;
LABEL_48:
  uint64_t v67 = v94;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v94, v89, v49);
  uint64_t v68 = swift_unknownObjectRetain_n(a1, 2LL);
  uint64_t v69 = (void *)Logger.logObject.getter(v68);
  os_log_type_t v71 = static os_log_type_t.debug.getter(v69, v70);
  if (!os_log_type_enabled((os_log_t)v69, v71))
  {

    OUTLINED_FUNCTION_9_22();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v67, v49);
    goto LABEL_52;
  }

  os_log_type_t v72 = v71;
  uint64_t v73 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
  uint64_t v74 = OUTLINED_FUNCTION_7_0(32LL);
  uint64_t v97 = v74;
  *(_DWORD *)uint64_t v73 = 136315138;
  uint64_t v75 = OUTLINED_FUNCTION_8_19(v66);
  id v76 = (id)TUStringForCallStatus(v75);
  if (v76)
  {
    uint64_t v77 = v76;
    uint64_t v91 = v73 + 4;
    uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
    unint64_t v80 = v79;

    uint64_t v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v80, &v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v91);
    OUTLINED_FUNCTION_9_22();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, (os_log_t)v69, v72, "#HoldControlFlow: After applying action, callStatus=%s", v73, 0xCu);
    swift_arrayDestroy(v74, 1LL);
    OUTLINED_FUNCTION_0_2(v74);
    OUTLINED_FUNCTION_0_2((uint64_t)v73);

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v94, v92);
LABEL_52:
    uint64_t v81 = v93;
    *uint64_t v93 = 0LL;
    v81[1] = 0LL;
    v81[2] = 0LL;
    *(_OWORD *)(v81 + __swift_destroy_boxed_opaque_existential_1(v0 + 3) = xmmword_31F950;
    return result;
  }

  uint64_t result = swift_unknownObjectRelease(a1);
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason()
{
  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ActionableCallControlFlow.UnsupportedHoldActionReason,  &type metadata for ActionableCallControlFlow.UnsupportedHoldActionReason);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ActionableCallControlFlow.UnsupportedHoldActionReason,  &type metadata for ActionableCallControlFlow.UnsupportedHoldActionReason);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ActionableCallControlFlow.UnsupportedHoldActionReason,  &type metadata for ActionableCallControlFlow.UnsupportedHoldActionReason);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ActionableCallControlFlow.UnsupportedHoldActionReason,  &type metadata for ActionableCallControlFlow.UnsupportedHoldActionReason);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason);
  }

  return result;
}

uint64_t type metadata accessor for HoldControlFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin15HoldControlFlow);
}

uint64_t OUTLINED_FUNCTION_3_30()
{
  return v0(v2, v1);
}

unint64_t OUTLINED_FUNCTION_4_26@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 24) = a2;
  return lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason();
}

uint64_t OUTLINED_FUNCTION_7_28()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_8_19(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 120))(a1, v1);
}

uint64_t OUTLINED_FUNCTION_9_22()
{
  return swift_unknownObjectRelease_n(v0, 2LL);
}

uint64_t key path setter for NLTransformer.nlIntentHistory : NLTransformer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess(*a2 + 64, v6, 1LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 64);
  *(void *)(v3 + 64) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t key path setter for NLTransformer.currentTransformation : NLTransformer(uint64_t a1, void *a2)
{
  uint64_t v3 = *a2 + 72LL;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  outlined assign with take of PhoneCallNLIntent?( (uint64_t)v6,  v3,  (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
  return swift_endAccess(v5);
}

uint64_t NLTransformer.referenceResolver.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 120, a1);
}

void NLTransformer.__allocating_init(referenceResolver:featureManager:)(void *a1, uint64_t a2)
{
}

void NLTransformer.init(referenceResolver:featureManager:)(void *a1, uint64_t a2)
{
}

void NLTransformer.__allocating_init(referenceResolver:featureManager:)( void *a1, uint64_t a2, void (*a3)(char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v7);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v11 + 16))(v10);
  a3(v10, a2, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1(a1);
  OUTLINED_FUNCTION_58();
}

void NLTransformer.transformToPhoneCallNLIntent(userDialogAct:)()
{
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v67 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_20_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v10 = OUTLINED_FUNCTION_24_9();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  char v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  OUTLINED_FUNCTION_40_6();
  uint64_t v65 = v15;
  uint64_t v66 = v14;
  uint64_t v64 = v16;
  int v63 = v17;
  static ConversionUtils.toUserParse(from:)(v4);
  OUTLINED_FUNCTION_35((uint64_t)v0, 1LL, v10);
  if (v39)
  {
    outlined destroy of PhoneCallNLIntent?( (uint64_t)v0,  &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v18 = OUTLINED_FUNCTION_15_1();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_11_18((uint64_t)v0);
    uint64_t v19 = OUTLINED_FUNCTION_69_4(v4);
    char v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = OUTLINED_FUNCTION_7_0(22LL);
      uint64_t v23 = (os_log_s *)OUTLINED_FUNCTION_7_0(64LL);
      unint64_t v62 = v23;
      *(_DWORD *)uint64_t v22 = 136315394;
      uint64_t v61 = v22 + 4;
      uint64_t v25 = v0[4];
      uint64_t v24 = v0[5];
      uint64_t v27 = v0[6];
      uint64_t v26 = (void *)v0[7];
      OUTLINED_FUNCTION_33_11((uint64_t)v23);
      OUTLINED_FUNCTION_48_0();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v25, v24, v27, v26);
      OUTLINED_FUNCTION_34_0();
      OUTLINED_FUNCTION_39();
      uint64_t v28 = OUTLINED_FUNCTION_20_10();
      uint64_t v29 = OUTLINED_FUNCTION_15_15(v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v29, v30, v61);
      OUTLINED_FUNCTION_31_1((uint64_t)v0);
      OUTLINED_FUNCTION_39();
      *(_WORD *)(v22 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
      uint64_t v68 = v4;
      swift_unknownObjectRetain(v4);
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
      uint64_t v32 = OUTLINED_FUNCTION_52_6(v31, v31);
      uint64_t v34 = OUTLINED_FUNCTION_89(v32, v33);
      OUTLINED_FUNCTION_39_6(v34, v35, v36, v22 + 22);
      OUTLINED_FUNCTION_68_4(v4);
      OUTLINED_FUNCTION_62();
      OUTLINED_FUNCTION_33_6( &dword_0,  v20,  v21,  "%s couldn't transform UserDialogAct %s into UserParse to get the UDAs.",  (uint8_t *)v22);
      uint64_t v37 = v62;
      OUTLINED_FUNCTION_77_3();
      OUTLINED_FUNCTION_0_2((uint64_t)v37);
      OUTLINED_FUNCTION_0_2(v22);
    }

    else
    {

      OUTLINED_FUNCTION_68_4(v4);
      OUTLINED_FUNCTION_31_1((uint64_t)v0);
    }

    goto LABEL_16;
  }

  uint64_t v38 = (*(uint64_t (**)(char *, void *, uint64_t))(v11 + 32))(v13, v0, v10);
  Siri_Nlu_External_UserParse.userDialogActs.getter(v38);
  specialized Collection.first.getter();
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_35((uint64_t)v7, 1LL, v8);
  if (v39)
  {
    outlined destroy of PhoneCallNLIntent?( (uint64_t)v7,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v40 = OUTLINED_FUNCTION_15_1();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.siriPhone);
    uint64_t v41 = OUTLINED_FUNCTION_11_18((uint64_t)v0);
    id v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.error.getter();
    int v44 = v43;
    if (os_log_type_enabled(v42, v43))
    {
      unint64_t v62 = v42;
      uint64_t v45 = OUTLINED_FUNCTION_7_0(12LL);
      int v60 = v44;
      uint64_t v46 = (uint8_t *)v45;
      uint64_t v47 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v61 = v47;
      *(_DWORD *)uint64_t v46 = 136315138;
      uint64_t v58 = v46 + 4;
      uint64_t v59 = v46;
      uint64_t v49 = v2[4];
      uint64_t v48 = v2[5];
      uint64_t v50 = v2[6];
      OUTLINED_FUNCTION_33_11(v47);
      OUTLINED_FUNCTION_6_1();
      OUTLINED_FUNCTION_48_0();
      OUTLINED_FUNCTION_90_1(v49, v48, v50);
      OUTLINED_FUNCTION_50();
      OUTLINED_FUNCTION_34_0();
      uint64_t v51 = OUTLINED_FUNCTION_8_20();
      uint64_t v52 = OUTLINED_FUNCTION_15_15(v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v52, v53, v58);
      OUTLINED_FUNCTION_31_1((uint64_t)v2);
      OUTLINED_FUNCTION_62();
      id v42 = v62;
      uint64_t v54 = v59;
      OUTLINED_FUNCTION_57_0(&dword_0, v62, (os_log_type_t)v60, "%s no user dialog act found in userParse.", v59);
      uint64_t v55 = v61;
      OUTLINED_FUNCTION_17_0(v61);
      OUTLINED_FUNCTION_0_2(v55);
      OUTLINED_FUNCTION_0_2((uint64_t)v54);
    }

    else
    {
      OUTLINED_FUNCTION_31_1((uint64_t)v2);
    }

    OUTLINED_FUNCTION_65_2();
LABEL_16:
    OUTLINED_FUNCTION_28_9();
    goto LABEL_17;
  }

  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v1, v7, v8);
  (*(void (**)(uint64_t))(*v0 + 216LL))(v1);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v8);
  OUTLINED_FUNCTION_65_2();
LABEL_17:
  uint64_t v56 = v66;
  Signpost.OpenSignpost.end()();
  swift_release(v56);
  OUTLINED_FUNCTION_7_5();
}

void specialized Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
}

{
  specialized Array.init<A>(_:)(a1, a2, a3, a4, specialized _copyCollectionToContiguousArray<A>(_:));
}

void specialized Array.init<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  uint64_t v10 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v11 = OUTLINED_FUNCTION_69_4(a1);
  uint64_t v12 = (void *)swift_dynamicCastClass(v11, v10);
  if (!v12)
  {
    OUTLINED_FUNCTION_78_3();
    uint64_t v12 = _swiftEmptyArrayStorage;
  }

  uint64_t v13 = v12[2];
  uint64_t v14 = swift_release(v12);
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v14 = a1;
  if (v13 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease(v14);
LABEL_2:
    a5(a1, a2, a3, a4);
    goto LABEL_9;
  }

  if (!swift_dynamicCastClass(a1, v10)) {
    OUTLINED_FUNCTION_78_3();
  }
LABEL_9:
  OUTLINED_FUNCTION_78_3();
  OUTLINED_FUNCTION_58();
}

void static NLTransformer.computeHash(_:)()
{
}

{
  NLIntent.hashValue.getter();
  OUTLINED_FUNCTION_2();
}

void TransformationResult.init(hash:nlIntent:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  outlined init with take of PhoneCallNLIntent?( a2,  (uint64_t)(a3 + 1),  &demangling cache variable for type metadata for PhoneCallNLIntent?);
}

uint64_t static NLTransformer.computeHash(_:)()
{
  uint64_t v37 = v4;
  uint64_t v38 = v5;
  uint64_t v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v8 = (os_log_s *)OUTLINED_FUNCTION_23_12();
  uint64_t v9 = *((void *)v8 - 1);
  __chkstk_darwin();
  OUTLINED_FUNCTION_61_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v10 = OUTLINED_FUNCTION_24_9();
  OUTLINED_FUNCTION_60_5();
  __chkstk_darwin();
  OUTLINED_FUNCTION_7_6();
  uint64_t v11 = type metadata accessor for NLTransformer();
  static ConversionUtils.toUserParse(from:)(v7);
  OUTLINED_FUNCTION_35(v0, 1LL, v10);
  if (v22)
  {
    outlined destroy of PhoneCallNLIntent?( v0,  &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v12 = OUTLINED_FUNCTION_15_1();
    uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v17 = OUTLINED_FUNCTION_7_0(32LL);
      *(_DWORD *)uint64_t v16 = 136315138;
      OUTLINED_FUNCTION_33_11(v17);
      OUTLINED_FUNCTION_91_2(v11, (uint64_t)&outlined read-only object #0 of static NLTransformer.computeHash(_:));
      uint64_t v35 = OUTLINED_FUNCTION_8_20();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v16 + 4);
      OUTLINED_FUNCTION_62();
      OUTLINED_FUNCTION_57_0( &dword_0,  v14,  v15,  "%s computeHash Couldn't transform UserDialogAct into UserParse to get the UDAs. Fallback to legacy hashValue.",  v16);
      OUTLINED_FUNCTION_17_0(v17);
      OUTLINED_FUNCTION_0_2(v17);
      OUTLINED_FUNCTION_0_2((uint64_t)v16);
    }

    OUTLINED_FUNCTION_84_2();
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
    uint64_t v19 = OUTLINED_FUNCTION_52_6(v18, v18);
    uint64_t v20 = ((uint64_t (*)(uint64_t))String.hashValue.getter)(v19);
    OUTLINED_FUNCTION_62();
  }

  else
  {
    uint64_t v21 = OUTLINED_FUNCTION_56_4(v1, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
    Siri_Nlu_External_UserParse.userDialogActs.getter(v21);
    specialized Collection.first.getter();
    OUTLINED_FUNCTION_62();
    OUTLINED_FUNCTION_35(v3, 1LL, (uint64_t)v8);
    if (v22)
    {
      outlined destroy of PhoneCallNLIntent?( v3,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v23 = OUTLINED_FUNCTION_15_1();
      uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
      Logger.logObject.getter(v24);
      os_log_type_t v25 = OUTLINED_FUNCTION_55_5();
      if (os_log_type_enabled(v8, v25))
      {
        uint64_t v26 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
        uint64_t v27 = OUTLINED_FUNCTION_7_0(32LL);
        *(_DWORD *)uint64_t v26 = 136315138;
        uint64_t v35 = 0LL;
        v36[0] = 0xE000000000000000LL;
        v36[1] = v27;
        OUTLINED_FUNCTION_91_2(v11, (uint64_t)&outlined read-only object #0 of static NLTransformer.computeHash(_:));
        uint64_t v28 = OUTLINED_FUNCTION_8_20();
        uint64_t v29 = OUTLINED_FUNCTION_15_15(v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v29, v30, v26 + 4);
        OUTLINED_FUNCTION_62();
        OUTLINED_FUNCTION_57_0( &dword_0,  v8,  v25,  "%s computeHash No user dialog act found in userParse. Fallback to legacy hashValue",  v26);
        OUTLINED_FUNCTION_17_0(v27);
        OUTLINED_FUNCTION_0_2(v27);
        OUTLINED_FUNCTION_0_2((uint64_t)v26);
      }

      OUTLINED_FUNCTION_84_2();
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
      uint64_t v32 = OUTLINED_FUNCTION_52_6(v31, v31);
      uint64_t v20 = ((uint64_t (*)(uint64_t))String.hashValue.getter)(v32);
      OUTLINED_FUNCTION_62();
    }

    else
    {
      uint64_t v33 = OUTLINED_FUNCTION_51_5(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
      uint64_t v20 = ((uint64_t (*)(uint64_t))Siri_Nlu_External_UserDialogAct.hashValue.getter)(v33);
      OUTLINED_FUNCTION_71_3(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
    }

    OUTLINED_FUNCTION_81_3(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }

  return v20;
}

void NLTransformer.deinit()
{
}

uint64_t NLTransformer.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 160LL, 7LL);
}

uint64_t AnnounceVoicemailReadingState.voicemailsRead.getter()
{
  return *(void *)v0;
}

uint64_t TransformationResult.hash.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

void TransformationResult.nlIntent.getter(uint64_t a1@<X8>)
{
}

void TransformationResult.nlIntent.setter(uint64_t a1)
{
}

Swift::Void (__swiftcall *TransformationResult.nlIntent.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t specialized NLTransformer.__allocating_init(referenceResolver:featureManager:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a4 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for NLTransformer();
  uint64_t v13 = swift_allocObject(v12, 160LL, 7LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  uint64_t v14 = specialized NLTransformer.init(referenceResolver:featureManager:)((uint64_t)v11, a2, v13, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a4);
  return v14;
}

uint64_t specialized NLTransformer.init(referenceResolver:featureManager:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a4;
  uint64_t v10 = *(void *)(a4 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v54[3] = v13;
  v54[4] = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v54);
  (*(void (**)(void *, uint64_t, uint64_t))(v10 + 32))(boxed_opaque_existential_1, a1, v6);
  *(void *)(a3 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = type metadata accessor for NLTransformer();
  *(void *)(a3 + 40) = &outlined read-only object #0 of specialized NLTransformer.init(referenceResolver:featureManager:);
  *(void *)(a3 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0LL;
  *(void *)(a3 + 56) = 0LL;
  *(void *)(a3 + 64) = _swiftEmptyArrayStorage;
  *(_OWORD *)(a3 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
  *(_OWORD *)(a3 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
  *(_OWORD *)(a3 + 104) = xmmword_31D8A0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v16, (uint64_t)static Logger.siriPhone);
  uint64_t v17 = swift_retain_n(a3, 2LL);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v20 = static os_log_type_t.debug.getter(v18, v19);
  int v21 = v20;
  if (os_log_type_enabled(v18, v20))
  {
    int v46 = v21;
    char v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v45 = v23;
    uint64_t v47 = boxed_opaque_existential_1;
    uint64_t v48 = v10;
    *(_DWORD *)char v22 = 136315138;
    os_log_type_t v43 = v22 + 4;
    int v44 = v22;
    uint64_t v24 = a2;
    uint64_t v49 = v12;
    uint64_t v50 = v6;
    uint64_t v25 = *(void *)(a3 + 32);
    uint64_t v26 = *(void *)(a3 + 40);
    uint64_t v27 = a5;
    uint64_t v28 = *(void *)(a3 + 48);
    uint64_t v29 = *(void **)(a3 + 56);
    uint64_t v51 = 0LL;
    unint64_t v52 = 0xE000000000000000LL;
    uint64_t v53 = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v30 = v25;
    a2 = v24;
    uint64_t v31 = v28;
    a5 = v27;
    uint64_t v6 = v50;
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v30, v26, v31, v29);
    uint64_t v10 = v48;
    swift_bridgeObjectRelease();
    uint64_t v12 = v49;
    swift_bridgeObjectRelease();
    uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, &v53);
    boxed_opaque_existential_1 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v43);
    swift_release_n(a3, 2LL);
    swift_bridgeObjectRelease();
    uint64_t v32 = v44;
    _os_log_impl( &dword_0,  v18,  (os_log_type_t)v46,  "%s is initialized, this function should be only be called once for each makeFlowFor",  v44,  0xCu);
    uint64_t v33 = v45;
    swift_arrayDestroy(v45, 1LL);
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a3, 2LL);
  }

  uint64_t v34 = type metadata accessor for NLv4Transformer(0LL);
  uint64_t v35 = swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  (*(void (**)(char *, void *, uint64_t))(v10 + 16))(v12, boxed_opaque_existential_1, v6);
  swift_retain();
  *(void *)(a3 + swift_weakDestroy(v0 + 16) = specialized NLv4Transformer.init(referenceResolver:featureManager:)( (uint64_t)v12,  a2,  v35,  v6,  a5);
  outlined init with copy of SignalProviding((uint64_t)v54, a3 + 120);
  uint64_t v36 = type metadata accessor for SingleIntentCacheProvider();
  uint64_t v37 = swift_allocObject(v36, 32LL, 7LL);
  *(_OWORD *)(v37 + swift_weakDestroy(v0 + 16) = xmmword_31D890;
  uint64_t v38 = type metadata accessor for PhoneCallControlNLTransformer();
  char v39 = (void *)swift_allocObject(v38, 88LL, 7LL);
  specialized PhoneCallControlNLTransformer.init(cacheProvider:)(v37, v39);
  uint64_t v41 = v40;
  swift_release(a2);
  __swift_destroy_boxed_opaque_existential_1(v54);
  *(void *)(a3 + 24) = v41;
  return a3;
}

uint64_t type metadata accessor for NLTransformer()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin13NLTransformer);
}

void sub_9E7B8(uint64_t *a1@<X8>)
{
  *a1 = OUTLINED_FUNCTION_13_23();
  OUTLINED_FUNCTION_2();
}

void sub_9E7E0(uint64_t a1)
{
}

void *assignWithTake for TransformationResult(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  uint64_t v4 = a1 + 1;
  if (a1[4]) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 1);
  }
  __int128 v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)(a2 + 8);
  *((_OWORD *)v4 + 1) = v5;
  v4[4] = *(void *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for TransformationResult()
{
  return &type metadata for TransformationResult;
}

void outlined assign with take of PhoneCallNLIntent?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = OUTLINED_FUNCTION_25_13(a1, a2, a3);
  OUTLINED_FUNCTION_43_0(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 40LL));
  OUTLINED_FUNCTION_2();
}

uint64_t OUTLINED_FUNCTION_8_20()
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( *(void *)(v0 - 104),  *(void *)(v0 - 96),  (uint64_t *)(v0 - 88));
}

uint64_t OUTLINED_FUNCTION_9_23(uint64_t a1, float a2)
{
  *uint64_t v2 = a2;
  *(void *)(v4 - 144) = v2 + 1;
  *(void *)(v4 - 136) = v2;
  uint64_t v5 = *(void *)(v3 + 56);
  *(void *)(v4 - 104) = 0LL;
  *(void *)(v4 - 96) = 0xE000000000000000LL;
  *(void *)(v4 - 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a1;
  return swift_bridgeObjectRetain(v5);
}

uint64_t OUTLINED_FUNCTION_12_24()
{
  return swift_arrayDestroy(v0, 2LL);
}

BOOL OUTLINED_FUNCTION_14_15(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_15_15(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t OUTLINED_FUNCTION_16_13(float a1)
{
  *uint64_t v2 = a1;
  return swift_bridgeObjectRetain(*(void *)(v1 + 56));
}

uint64_t OUTLINED_FUNCTION_19_14(uint64_t a1)
{
  *(void *)(v2 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 104, v2 - 96, *(void *)(v2 - 144), v1);
}

uint64_t OUTLINED_FUNCTION_20_10()
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( *(void *)(v0 - 104),  *(void *)(v0 - 96),  (uint64_t *)(v0 - 88));
}

uint64_t OUTLINED_FUNCTION_22_12()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 184) + 96LL))(v0, *(void *)(v1 - 176));
}

uint64_t OUTLINED_FUNCTION_23_12()
{
  return type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
}

uint64_t OUTLINED_FUNCTION_24_9()
{
  return type metadata accessor for Siri_Nlu_External_UserParse(0LL);
}

void OUTLINED_FUNCTION_26_12()
{
}

double OUTLINED_FUNCTION_28_9()
{
  uint64_t v1 = *(void *)(v0 - 112);
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
  double result = 0.0;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_33_11(uint64_t result)
{
  *(void *)(v1 - 104) = 0LL;
  *(void *)(v1 - 96) = 0xE000000000000000LL;
  *(void *)(v1 - 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_39_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v6 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 104, v5 + 8, v4, a4);
}

uint64_t OUTLINED_FUNCTION_41_8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_44_9()
{
  return 0LL;
}

void *OUTLINED_FUNCTION_50_9( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  return outlined init with copy of TransformationResult((uint64_t *)va1, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_51_5@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v3, v2, v1);
}

uint64_t OUTLINED_FUNCTION_52_6(uint64_t a1, uint64_t a2)
{
  return String.init<A>(describing:)(v2 - 104, a2);
}

  ;
}

BOOL OUTLINED_FUNCTION_54_2(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t OUTLINED_FUNCTION_55_5()
{
  return static os_log_type_t.error.getter();
}

uint64_t OUTLINED_FUNCTION_56_4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

void OUTLINED_FUNCTION_58_4(uint64_t a1, uint64_t *a2)
{
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_67_4()
{
  *(void *)(v1 - 120) = 0LL;
  *(void *)(v1 - 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xE000000000000000LL;
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_68_4(uint64_t a1)
{
  return swift_unknownObjectRelease_n(a1, 2LL);
}

uint64_t OUTLINED_FUNCTION_69_4(uint64_t a1)
{
  return swift_unknownObjectRetain_n(a1, 2LL);
}

uint64_t OUTLINED_FUNCTION_70_3(uint64_t a1, uint64_t a2)
{
  return __swift_project_value_buffer(a1, a2);
}

uint64_t OUTLINED_FUNCTION_71_3@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_73_2()
{
  return type metadata accessor for NLIntent(0LL);
}

void *OUTLINED_FUNCTION_74_2()
{
  return outlined init with copy of TransformationResult(v0, (void *)(v1 - 136));
}

uint64_t OUTLINED_FUNCTION_76_4()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_77_3()
{
  return swift_arrayDestroy(v0, 2LL);
}

uint64_t OUTLINED_FUNCTION_78_3()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_80_2( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return outlined destroy of TransformationResult((uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_81_3@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_82_3()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_84_2()
{
  *(void *)(v1 - 104) = v0;
  return swift_unknownObjectRetain(v0);
}

void OUTLINED_FUNCTION_88_2(uint64_t a1)
{
}

void OUTLINED_FUNCTION_90_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void OUTLINED_FUNCTION_91_2(uint64_t a1, uint64_t a2)
{
}

void key path setter for INPersonCodable.wrappedValue : INPersonCodable(id *a1)
{
}

void INPersonCodable.wrappedValue.setter(void *a1)
{
  *uint64_t v1 = a1;
  OUTLINED_FUNCTION_2();
}

void INPersonCodable.wrappedValue.modify(void **a1)
{
  uint64_t v2 = *v1;
  *a1 = *v1;
  a1[1] = v1;
  id v3 = v2;
  OUTLINED_FUNCTION_2();
}

void INPersonCodable.wrappedValue.modify(uint64_t a1, char a2)
{
  id v3 = *(void **)a1;
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v4 = *v2;
  if ((a2 & 1) != 0)
  {
    id v5 = v3;

    *uint64_t v2 = v5;
  }

  else
  {

    *uint64_t v2 = v3;
  }

void INPersonCodable.init(from:)(uint64_t a1, unint64_t a2)
{
  id v4 = objc_allocWithZone(&OBJC_CLASS____INPBContact);
  outlined copy of Data._Representation(a1, a2);
  @nonobjc _INPBContact.init(data:)(a1, a2);
  uint64_t v6 = v5;
  id v7 = (id)INIntentSlotValueTransformFromContact();

  if (v7)
  {
    outlined consume of Data._Representation(a1, a2);
    OUTLINED_FUNCTION_6();
  }

  else
  {
    __break(1u);
  }

id INPersonCodable.data.getter()
{
  id result = (id)INIntentSlotValueTransformToContact();
  if (!result)
  {
    __break(1u);
    goto LABEL_5;
  }

  id result = (id)outlined bridged method (ob) of @objc PBCodable.data.getter(result);
  if (v1 >> 60 == 15) {
LABEL_5:
  }
    __break(1u);
  return result;
}

void INPersonCodable.init(from:)(void *a1)
{
  if (v1)
  {
    OUTLINED_FUNCTION_11_12();
  }

  else
  {
    __swift_project_boxed_opaque_existential_1(v12, v12[3]);
    unint64_t v2 = lazy protocol witness table accessor for type Data and conformance Data();
    OUTLINED_FUNCTION_4_27((uint64_t)&type metadata for Data, (uint64_t)&type metadata for Data, v2);
    id v3 = objc_allocWithZone(&OBJC_CLASS____INPBContact);
    outlined copy of Data._Representation(v10, v11);
    @nonobjc _INPBContact.init(data:)(v10, v11);
    id v5 = v4;
    id v6 = (id)INIntentSlotValueTransformFromContact();

    if (v6)
    {
      uint64_t v7 = outlined consume of Data._Representation(v10, v11);
      OUTLINED_FUNCTION_9_24(v7, v8, v9);
      OUTLINED_FUNCTION_11_12();
    }

    else
    {
      __break(1u);
    }
  }

id INPersonCodable.encode(to:)(void *a1)
{
  id result = (id)INIntentSlotValueTransformToContact(v1);
  if (result)
  {
    id result = (id)outlined bridged method (ob) of @objc PBCodable.data.getter(result);
    if (v3 >> 60 != 15)
    {
      uint64_t v4 = (uint64_t)result;
      unint64_t v5 = v3;
      v12[0] = result;
      v12[1] = v3;
      uint64_t v6 = v14;
      uint64_t v7 = v15;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v13, v14);
      unint64_t v8 = lazy protocol witness table accessor for type Data and conformance Data();
      dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(v12, &type metadata for Data, v8, v6, v7);
      uint64_t v9 = outlined consume of Data?(v4, v5);
      return (id)OUTLINED_FUNCTION_9_24(v9, v10, v11);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t one-time initialization function for transformer()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Data, INPerson>);
  __swift_allocate_value_buffer(v0, static INPersonCodable.transformer);
  __swift_project_value_buffer(v0, (uint64_t)static INPersonCodable.transformer);
  type metadata accessor for INPlayVoicemailIntent( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
  return Transformer.init(transform:reverseTransform:)( closure #1 in variable initialization expression of static INPersonCodable.transformer,  0LL,  closure #2 in variable initialization expression of static INPersonCodable.transformer,  0LL,  &type metadata for Data,  v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoEntity_common_Agent, INPerson?>);
  __swift_allocate_value_buffer(v0, static Transformer<>.transformer);
  __swift_project_value_buffer(v0, (uint64_t)static Transformer<>.transformer);
  uint64_t v1 = type metadata accessor for UsoEntity_common_Agent(0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INPerson?);
  return Transformer.init(transform:)( closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer,  0LL,  v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_noVerb_common_PhoneNumber, UsoTask?>);
  __swift_allocate_value_buffer(v0, static Transformer<>.transformer);
  __swift_project_value_buffer(v0, (uint64_t)static Transformer<>.transformer);
  uint64_t v1 = type metadata accessor for UsoTask_noVerb_common_PhoneNumber(0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoTask?);
  return Transformer.init(transform:)( closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer,  0LL,  v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<String?, PersonNameComponents?>);
  __swift_allocate_value_buffer(v0, static Transformer<>.transformer);
  __swift_project_value_buffer(v0, (uint64_t)static Transformer<>.transformer);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  return Transformer.init(transform:)( closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer,  0LL,  v1);
}

void closure #1 in variable initialization expression of static INPersonCodable.transformer( uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  id v5 = objc_allocWithZone(&OBJC_CLASS____INPBContact);
  outlined copy of Data._Representation(v3, v4);
  outlined copy of Data._Representation(v3, v4);
  @nonobjc _INPBContact.init(data:)(v3, v4);
  uint64_t v7 = v6;
  id v8 = (id)INIntentSlotValueTransformFromContact();

  if (v8)
  {
    outlined consume of Data._Representation(v3, v4);
    *a2 = v8;
  }

  else
  {
    __break(1u);
  }

void closure #2 in variable initialization expression of static INPersonCodable.transformer( id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = *a1;
  id v4 = (id)INIntentSlotValueTransformToContact();
  if (v4)
  {
    uint64_t v5 = outlined bridged method (ob) of @objc PBCodable.data.getter(v4);
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = v5;
      uint64_t v8 = v6;

      *a2 = v7;
      a2[1] = v8;
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t INPersonCodable.transformer.unsafeMutableAddressor()
{
  return INPersonCodable.transformer.unsafeMutableAddressor( &one-time initialization token for transformer,  &demangling cache variable for type metadata for Transformer<Data, INPerson>,  (uint64_t)static INPersonCodable.transformer,  (uint64_t)one-time initialization function for transformer);
}

uint64_t static INPersonCodable.transformer.getter@<X0>(uint64_t a1@<X8>)
{
  return static INPersonCodable.transformer.getter( &one-time initialization token for transformer,  &demangling cache variable for type metadata for Transformer<Data, INPerson>,  (uint64_t)static INPersonCodable.transformer,  (uint64_t)one-time initialization function for transformer,  a1);
}

void protocol witness for Decodable.init(from:) in conformance INPersonCodable( void *a1@<X0>, void *a2@<X8>)
{
  if (!v2) {
    *a2 = v4;
  }
}

id protocol witness for Encodable.encode(to:) in conformance INPersonCodable(void *a1)
{
  return INPersonCodable.encode(to:)(a1);
}

void key path setter for INPersonArrayCodable.wrappedValue : INPersonArrayCodable()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  INPersonArrayCodable.wrappedValue.setter(v0);
}

void INPersonArrayCodable.wrappedValue.setter(uint64_t a1)
{
  *uint64_t v1 = a1;
  OUTLINED_FUNCTION_2();
}

void INPersonArrayCodable.wrappedValue.modify(void *a1)
{
  *a1 = *v1;
  a1[1] = v1;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_2();
}

uint64_t INPersonArrayCodable.wrappedValue.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  id v3 = (void *)a1[1];
  if ((a2 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_1();
    swift_bridgeObjectRelease();
    *id v3 = v2;
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *id v3 = v2;
  }

  return result;
}

PhoneCallFlowDelegatePlugin::INPersonArrayCodable __swiftcall INPersonArrayCodable.init(from:)( Swift::OpaquePointer from)
{
  uint64_t v2 = *((void *)from._rawValue + 2);
  if (v2)
  {
    OUTLINED_FUNCTION_8_1();
    id v3 = (unint64_t *)((char *)from._rawValue + 40);
    do
    {
      uint64_t v4 = *(v3 - 1);
      unint64_t v5 = *v3;
      id v6 = objc_allocWithZone(&OBJC_CLASS____INPBContact);
      OUTLINED_FUNCTION_10_24();
      OUTLINED_FUNCTION_10_24();
      @nonobjc _INPBContact.init(data:)(v4, v5);
      uint64_t v8 = v7;
      id v9 = (id)INIntentSlotValueTransformFromContact();

      uint64_t v10 = outlined consume of Data._Representation(v4, v5);
      if (v9)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
        unint64_t v12 = *(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v11 = *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        if (v12 >= v11 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1LL);
        }
        uint64_t v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v9);
        specialized Array._endMutation()(v13, v14, v15, v16);
      }

      v3 += 2;
      --v2;
    }

    while (v2);
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  return (PhoneCallFlowDelegatePlugin::INPersonArrayCodable)_swiftEmptyArrayStorage;
}

void INPersonArrayCodable.data.getter()
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v1 = (id)INIntentSlotValueTransformToContacts();

  if (!v1) {
    goto LABEL_23;
  }
  type metadata accessor for INPlayVoicemailIntent( 0LL,  &lazy cache variable for type metadata for _INPBContact,  &OBJC_CLASS____INPBContact_ptr);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0) {
      uint64_t v17 = v3;
    }
    else {
      uint64_t v17 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_8_1();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v17);
    if (v4) {
      goto LABEL_4;
    }
LABEL_21:
    swift_bridgeObjectRelease_n(v3, 2LL);
    return;
  }

  uint64_t v4 = *(void *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFF8LL));
  OUTLINED_FUNCTION_8_1();
  if (!v4) {
    goto LABEL_21;
  }
LABEL_4:
  if (v4 >= 1)
  {
    uint64_t v5 = 0LL;
    id v6 = _swiftEmptyArrayStorage;
    do
    {
      if ((v3 & 0xC000000000000001LL) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
      }
      else {
        id v7 = *(id *)(v3 + 8 * v5 + 32);
      }
      uint64_t v8 = v7;
      uint64_t v9 = outlined bridged method (pb) of @objc PBCodable.data.getter(v7);
      unint64_t v11 = v10;

      if (v11 >> 60 != 15)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
        {
          OUTLINED_FUNCTION_11_24(0LL, v6[2] + 1LL);
          id v6 = v15;
        }

        unint64_t v13 = v6[2];
        unint64_t v12 = v6[3];
        if (v13 >= v12 >> 1)
        {
          OUTLINED_FUNCTION_11_24(v12 > 1, v13 + 1);
          id v6 = v16;
        }

        void v6[2] = v13 + 1;
        uint64_t v14 = &v6[2 * v13];
        v14[4] = v9;
        void v14[5] = v11;
      }

      ++v5;
    }

    while (v4 != v5);
    goto LABEL_21;
  }

  __break(1u);
LABEL_23:
  __break(1u);
}

void *INPersonArrayCodable.init(from:)(void *a1)
{
  if (v2)
  {
    OUTLINED_FUNCTION_11_12();
  }

  else
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
    uint64_t v4 = lazy protocol witness table accessor for type [Data] and conformance <A> [A]( &lazy protocol witness table cache variable for type [Data] and conformance <A> [A],  (void (*)(void))lazy protocol witness table accessor for type Data and conformance Data,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    OUTLINED_FUNCTION_4_27(v3, v3, v4);
    rawValue = INPersonArrayCodable.init(from:)(from).persons._rawValue;
    OUTLINED_FUNCTION_11_6((uint64_t)rawValue);
    OUTLINED_FUNCTION_11_12();
  }

  return rawValue;
}

uint64_t INPersonArrayCodable.encode(to:)(void *a1)
{
  uint64_t v8 = v1;
  uint64_t v2 = v10;
  uint64_t v3 = v11;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v9, v10);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  uint64_t v5 = lazy protocol witness table accessor for type [Data] and conformance <A> [A]( &lazy protocol witness table cache variable for type [Data] and conformance <A> [A],  (void (*)(void))lazy protocol witness table accessor for type Data and conformance Data,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(&v8, v4, v5, v2, v3);
  uint64_t v6 = swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_11_6(v6, v8);
}

void one-time initialization function for transformer()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<[Data], [INPerson]>);
  __swift_allocate_value_buffer(v0, static INPersonArrayCodable.transformer);
  __swift_project_value_buffer(v0, (uint64_t)static INPersonArrayCodable.transformer);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  Transformer.init(transform:reverseTransform:)( closure #1 in variable initialization expression of static INPersonArrayCodable.transformer,  0LL,  closure #2 in variable initialization expression of static INPersonArrayCodable.transformer,  0LL,  v1,  v2);
  OUTLINED_FUNCTION_2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<IncomingCallIntentResponse, Input>);
  OUTLINED_FUNCTION_139_9(v0);
  __swift_project_value_buffer(v0, (uint64_t)&static Transformer<>.transformer);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IncomingCallIntentResponse);
  type metadata accessor for Input(0LL);
  Transformer.init(transform:)( closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer,  0LL,  v1);
  OUTLINED_FUNCTION_2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Siri_Nlu_External_UserDialogAct, UserDialogActParse>);
  OUTLINED_FUNCTION_139_9(v0);
  __swift_project_value_buffer(v0, (uint64_t)&static Transformer<>.transformer);
  uint64_t v1 = OUTLINED_FUNCTION_20_56();
  Transformer.init(transform:)( closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer,  0LL,  v1);
  OUTLINED_FUNCTION_2();
}

PhoneCallFlowDelegatePlugin::INPersonArrayCodable closure #1 in variable initialization expression of static INPersonArrayCodable.transformer@<X0>( PhoneCallFlowDelegatePlugin::INPersonArrayCodable *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  result.persons._rawValue = INPersonArrayCodable.init(from:)((Swift::OpaquePointer)v2).persons._rawValue;
  a1->persons._rawValue = result.persons._rawValue;
  return result;
}

uint64_t closure #2 in variable initialization expression of static INPersonArrayCodable.transformer@<X0>( void *a1@<X8>)
{
  uint64_t v3 = v2;
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t INPersonArrayCodable.transformer.unsafeMutableAddressor()
{
  return INPersonCodable.transformer.unsafeMutableAddressor( &one-time initialization token for transformer,  &demangling cache variable for type metadata for Transformer<[Data], [INPerson]>,  (uint64_t)static INPersonArrayCodable.transformer,  (uint64_t)one-time initialization function for transformer);
}

uint64_t INPersonCodable.transformer.unsafeMutableAddressor(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (*a1 != -1LL) {
    swift_once(a1, a4);
  }
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  return __swift_project_value_buffer(v6, a3);
}

uint64_t static INPersonArrayCodable.transformer.getter@<X0>(uint64_t a1@<X8>)
{
  return static INPersonCodable.transformer.getter( &one-time initialization token for transformer,  &demangling cache variable for type metadata for Transformer<[Data], [INPerson]>,  (uint64_t)static INPersonArrayCodable.transformer,  (uint64_t)one-time initialization function for transformer,  a1);
}

uint64_t static INPersonCodable.transformer.getter@<X0>( void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a4);
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v9 = __swift_project_value_buffer(v8, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(a5, v9, v8);
}

void *protocol witness for Decodable.init(from:) in conformance INPersonArrayCodable@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = INPersonArrayCodable.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance INPersonArrayCodable(void *a1)
{
  return INPersonArrayCodable.encode(to:)(a1);
}

void @nonobjc _INPBContact.init(data:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    Class isa = 0LL;
  }

  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a1, a2);
  }

  [v2 initWithData:isa];

  OUTLINED_FUNCTION_6();
}

uint64_t outlined copy of Data._Representation(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

uint64_t outlined bridged method (pb) of @objc PBCodable.data.getter(void *a1)
{
  id v1 = [a1 data];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t lazy protocol witness table accessor for type [Data] and conformance <A> [A]( unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Data]);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

void sub_9FA44(id *a1@<X0>, id *a2@<X8>)
{
  *a2 = AnnounceCallsContext.incomingCall.getter(*a1);
  OUTLINED_FUNCTION_2();
}

void sub_9FA6C(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = AppNameSpecifiedByUserSignalCollectionHistory.apps.getter(*a1);
  OUTLINED_FUNCTION_2();
}

ValueMetadata *type metadata accessor for INPersonCodable()
{
  return &type metadata for INPersonCodable;
}

ValueMetadata *type metadata accessor for INPersonArrayCodable()
{
  return &type metadata for INPersonArrayCodable;
}

void *OUTLINED_FUNCTION_0_26(void *a1)
{
  return __swift_project_boxed_opaque_existential_1(a1, a1[3]);
}

uint64_t OUTLINED_FUNCTION_1_30()
{
  return dispatch thunk of Decoder.singleValueContainer()(v0, v1);
}

void *OUTLINED_FUNCTION_2_23(void *a1)
{
  return __swift_project_boxed_opaque_existential_1(a1, a1[3]);
}

uint64_t OUTLINED_FUNCTION_4_27(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)(a1, a2, a3, v3, v4);
}

uint64_t OUTLINED_FUNCTION_9_24(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_10_24()
{
  return outlined copy of Data._Representation(v0, v1);
}

void OUTLINED_FUNCTION_11_24(uint64_t a1, uint64_t a2)
{
}

unint64_t key path setter for AnnounceVoicemailReadingFlow.state : AnnounceVoicemailReadingFlow( unint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess(*a2 + 16, v6, 1LL, 0LL);
  unint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v2;
  outlined copy of AnnounceVoicemailReadingFlow.State(v2);
  return outlined consume of AnnounceVoicemailReadingFlow.State(v4);
}

unint64_t AnnounceVoicemailReadingFlow.state.getter()
{
  unint64_t v1 = *(void *)(v0 + 16);
  outlined copy of AnnounceVoicemailReadingFlow.State(v1);
  return v1;
}

unint64_t outlined copy of AnnounceVoicemailReadingFlow.State(unint64_t result)
{
  if (result >= 3) {
    return swift_bridgeObjectRetain(result);
  }
  return result;
}

uint64_t key path setter for AnnounceVoicemailReadingFlow.readingState : AnnounceVoicemailReadingFlow( uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  __int128 v11 = *((_OWORD *)a1 + 1);
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  char v6 = *((_BYTE *)a1 + 48);
  uint64_t v7 = *a2;
  swift_beginAccess(*a2 + 24, v12, 1LL, 0LL);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(void *)(v7 + 64);
  *(void *)(v7 + 24) = v3;
  *(void *)(v7 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v2;
  *(_OWORD *)(v7 + 40) = v11;
  *(void *)(v7 + 56) = v5;
  *(void *)(v7 + 64) = v4;
  *(_BYTE *)(v7 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v6;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v9);
  return swift_bridgeObjectRelease(v8);
}

uint64_t AnnounceVoicemailReadingFlow.readingState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 56);
  uint64_t v5 = *(void *)(v1 + 64);
  char v6 = *(_BYTE *)(v1 + 72);
  *(void *)a1 = *(void *)(v1 + 24);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v3;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v1 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v4;
  *(void *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v6;
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_48_0();
}

void AnnounceVoicemailReadingFlow.exitValue.getter(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_20_11(a1);
  OUTLINED_FUNCTION_12_25((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v10, v11, v12, v9, v13);
  OUTLINED_FUNCTION_29_10();
}

void AnnounceVoicemailReadingFlow.__allocating_init(synchronousBurstIndex:voicemail:hintHistory:burstNotificationManager:sharedGlobals:announceVoicemailCats:)()
{
  double v8 = OUTLINED_FUNCTION_5_28();
  specialized AnnounceVoicemailReadingFlow.__allocating_init(synchronousBurstIndex:voicemail:hintHistory:burstNotificationManager:sharedGlobals:announceVoicemailCats:)( v9,  v10,  v11,  v12,  v13,  v14,  v15,  v16,  v8,  v18,  v19);
  __swift_destroy_boxed_opaque_existential_1(v0);
  OUTLINED_FUNCTION_4_28();
}

void AnnounceVoicemailReadingFlow.__allocating_init(state:readingState:hintHistory:burstNotificationManager:sharedGlobals:announceVoicemailCats:)()
{
  uint64_t v23 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  double v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v17 = swift_allocObject(v0, 200LL, 7LL);
  uint64_t v19 = v6[3];
  uint64_t v18 = v6[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v19);
  OUTLINED_FUNCTION_13_24();
  __chkstk_darwin();
  OUTLINED_FUNCTION_1_31(v20, v21, v22);
  specialized AnnounceVoicemailReadingFlow.init(state:readingState:hintHistory:burstNotificationManager:sharedGlobals:announceVoicemailCats:)( v16,  v14,  v12,  v10,  v1,  v4,  v23,  v17,  v8,  v19,  v18);
  __swift_destroy_boxed_opaque_existential_1(v6);
  OUTLINED_FUNCTION_4_28();
}

void AnnounceVoicemailReadingFlow.init(state:readingState:hintHistory:burstNotificationManager:sharedGlobals:announceVoicemailCats:)()
{
  double v8 = OUTLINED_FUNCTION_5_28();
  specialized AnnounceVoicemailReadingFlow.init(state:readingState:hintHistory:burstNotificationManager:sharedGlobals:announceVoicemailCats:)( v9,  v10,  v11,  v12,  v13,  v14,  v15,  v16,  v8,  v18,  v19);
  __swift_destroy_boxed_opaque_existential_1(v0);
  OUTLINED_FUNCTION_4_28();
}

uint64_t AnnounceVoicemailReadingFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AnnounceVoicemailReadingFlow();
  unint64_t v5 = lazy protocol witness table accessor for type AnnounceVoicemailReadingFlow and conformance AnnounceVoicemailReadingFlow();
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
}

uint64_t AnnounceVoicemailReadingFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 56__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v1;
  *(void *)(v2 + 560) = a1;
  return swift_task_switch(AnnounceVoicemailReadingFlow.execute(), 0LL, 0LL);
}

uint64_t AnnounceVoicemailReadingFlow.execute()()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v1 = *(void *)(v0 + 568);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = (os_log_s *)__swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  *(void *)(v0 + 576) = v3;
  uint64_t v4 = swift_retain_n(v1, 2LL);
  unint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v7 = static os_log_type_t.debug.getter(v5, v6);
  BOOL v8 = os_log_type_enabled(v5, v7);
  uint64_t v9 = *(void *)(v0 + 568);
  if (v8)
  {
    uint64_t v10 = (_DWORD *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v11 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v60 = v11;
    *uint64_t v10 = 136315138;
    *(void *)(v0 + 544) = OUTLINED_FUNCTION_14_14();
    uint64_t v12 = String.init<A>(describing:)(v0 + 544, &type metadata for AnnounceVoicemailReadingFlow.State);
    *(void *)(v0 + 55__swift_destroy_boxed_opaque_existential_1(v0 + 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 552, v0 + 560, v10 + 1);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_31_1(v9);
    OUTLINED_FUNCTION_30_9(&dword_0, v5, v7, "#AnnounceVoicemailReadingFlow .execute, state=%s");
    swift_arrayDestroy(v11, 1LL);
    OUTLINED_FUNCTION_0_2(v11);
    OUTLINED_FUNCTION_0_2((uint64_t)v10);
  }

  else
  {
    OUTLINED_FUNCTION_31_1(*(void *)(v0 + 568));
  }

  uint64_t v14 = OUTLINED_FUNCTION_14_14();
  if (!v14)
  {
    uint64_t v16 = *(void **)(v0 + 568);
    static Signpost.begin(_:)();
    *(void *)(v0 + 584) = v17;
    *(void *)(v0 + 59__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v18;
    *(void *)(v0 + 600) = v19;
    *(_WORD *)(v0 + 66) = v20;
    uint64_t v21 = v16[16];
    uint64_t v22 = v16[17];
    __swift_project_boxed_opaque_existential_1(v16 + 13, v21);
    uint64_t v23 = *(void (**)(void))(*v16 + 160LL);
    *(void *)(v0 + 60__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v23;
    v23();
    uint64_t v24 = *(void *)(v0 + 48);
    uint64_t v25 = *(void *)(v0 + 56);
    *(void *)(v0 + 6swift_weakDestroy(v0 + 16) = v25;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_33_12();
    uint64_t v26 = *(int **)(v22 + 8);
    uint64_t v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v26 + *v26);
    uint64_t v27 = (void *)swift_task_alloc(v26[1]);
    *(void *)(v0 + 624) = v27;
    *uint64_t v27 = v0;
    v27[1] = AnnounceVoicemailReadingFlow.execute();
    return v58(v24, v25, v21, v22);
  }

  unint64_t v15 = v14;
  if (v14 == 1)
  {
    BOOL v29 = AnnounceVoicemailReadingFlow.shouldAttemptToReadHint.getter();
    BOOL v30 = v29;
    Logger.logObject.getter(v29);
    os_log_type_t v31 = OUTLINED_FUNCTION_6_0();
    BOOL v32 = os_log_type_enabled(v3, v31);
    if (!v30)
    {
      if (v32)
      {
        uint64_t v55 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
        *(_WORD *)uint64_t v55 = 0;
        _os_log_impl( &dword_0,  v3,  v31,  "#AnnounceVoicemailReadingFlow Not attempting to read hint for voicemail announcement.",  v55,  2u);
        OUTLINED_FUNCTION_0_2((uint64_t)v55);
      }

      uint64_t v56 = *(void *)(v0 + 568);

      OUTLINED_FUNCTION_25_0(v56 + 16, v0 + 440, 1LL);
      unint64_t v57 = *(void *)(v56 + 16);
      *(void *)(v56 + swift_weakDestroy(v0 + 16) = 2LL;
      outlined consume of AnnounceVoicemailReadingFlow.State(v57);
      static ExecuteResponse.replan(requireInput:)(0LL);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    if (v32)
    {
      uint64_t v33 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl( &dword_0,  v3,  v31,  "#AnnounceVoicemailReadingFlow Attempting to read hint for voicemail announcement.",  v33,  2u);
      OUTLINED_FUNCTION_0_2((uint64_t)v33);
    }

    uint64_t v34 = *(void **)(v0 + 568);

    uint64_t v35 = v34[22];
    uint64_t v36 = v34[23];
    __swift_project_boxed_opaque_existential_1(v34 + 19, v35);
    (*(void (**)(uint64_t, uint64_t))(v36 + 16))(v35, v36);
    __int128 v59 = *(_OWORD *)(v0 + 264);
    uint64_t v37 = *(void *)(v0 + 264);
    uint64_t v38 = __swift_project_boxed_opaque_existential_1((void *)(v0 + 240), v37);
    *(_OWORD *)(v0 + 400) = v59;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 376));
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v37 - 8) + 16LL))( boxed_opaque_existential_1,  v38,  v37);
    uint64_t v40 = type metadata accessor for SimpleOutputFlow(0LL);
    OUTLINED_FUNCTION_15_2(v40);
    swift_retain();
    uint64_t v41 = SimpleOutputFlow.init(outputPublisher:_:)( v0 + 376,  partial apply for implicit closure #4 in implicit closure #3 in AnnounceVoicemailReadingFlow.execute(),  v34);
    __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 240));
    *(void *)(v0 + 52__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v41;
    uint64_t v42 = OUTLINED_FUNCTION_10_22((uint64_t)&unk_3FA348);
    *(void *)(v42 + swift_weakDestroy(v0 + 16) = partial apply for implicit closure #6 in implicit closure #5 in AnnounceVoicemailReadingFlow.execute();
    *(void *)(v42 + 24) = v34;
    swift_retain();
    static ExecuteResponse.ongoing<A>(next:childCompletion:)( v0 + 528,  partial apply for thunk for @escaping @callee_guaranteed () -> (),  v42,  v40);
    uint64_t v43 = v42;
    goto LABEL_16;
  }

  if (v14 != 2)
  {
    int v44 = *(void **)(v0 + 568);
    uint64_t v45 = v44[22];
    uint64_t v46 = v44[23];
    __swift_project_boxed_opaque_existential_1(v44 + 19, v45);
    (*(void (**)(uint64_t, uint64_t))(v46 + 16))(v45, v46);
    uint64_t v47 = *(void *)(v0 + 312);
    uint64_t v48 = *(void *)(v0 + 320);
    uint64_t v49 = __swift_project_boxed_opaque_existential_1((void *)(v0 + 288), v47);
    *(void *)(v0 + 360) = v47;
    *(void *)(v0 + 36__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v48;
    uint64_t v50 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 336));
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v47 - 8) + 16LL))(v50, v49, v47);
    uint64_t v51 = OUTLINED_FUNCTION_10_22((uint64_t)&unk_3FA370);
    *(void *)(v51 + swift_weakDestroy(v0 + 16) = v44;
    *(void *)(v51 + 24) = v15;
    uint64_t v52 = type metadata accessor for SimpleOutputFlow(0LL);
    OUTLINED_FUNCTION_15_2(v52);
    swift_retain();
    outlined copy of AnnounceVoicemailReadingFlow.State(v15);
    uint64_t v41 = SimpleOutputFlow.init(outputPublisher:_:)( v0 + 336,  partial apply for closure #1 in AnnounceVoicemailReadingFlow.announcementProducer(voicemails:),  v51);
    __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 288));
    *(void *)(v0 + 536) = v41;
    uint64_t v53 = OUTLINED_FUNCTION_10_22((uint64_t)&unk_3FA398);
    *(void *)(v53 + swift_weakDestroy(v0 + 16) = v44;
    *(void *)(v53 + 24) = v15;
    uint64_t v54 = OUTLINED_FUNCTION_10_22((uint64_t)&unk_3FA3C0);
    *(void *)(v54 + swift_weakDestroy(v0 + 16) = partial apply for closure #1 in AnnounceVoicemailReadingFlow.announcementCompleted(voicemails:);
    *(void *)(v54 + 24) = v53;
    swift_retain();
    outlined copy of AnnounceVoicemailReadingFlow.State(v15);
    static ExecuteResponse.ongoing<A>(next:childCompletion:)( v0 + 536,  thunk for @escaping @callee_guaranteed () -> ()partial apply,  v54,  v52);
    outlined consume of AnnounceVoicemailReadingFlow.State(v15);
    uint64_t v43 = v54;
LABEL_16:
    swift_release(v43);
    swift_release(v41);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  static ExecuteResponse.complete()(2LL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_s *v6;
  uint64_t v7;
  os_log_type_t v8;
  void (*v9)(void);
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  os_log_type_t v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  os_log_type_t v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v37 = (void *)(v0 + 520);
  uint64_t v1 = *(void *)(v0 + 656);
  uint64_t v2 = *(void *)(v0 + 648);
  uint64_t v3 = *(void *)(v0 + 640);
  uint64_t v4 = *(void *)(v0 + 568);
  OUTLINED_FUNCTION_25_0(v4 + 24, v0 + 416, 33LL);
  AnnounceVoicemailReadingState.update(_:)(v3, v2, v1, v0 + 184);
  swift_endAccess(v0 + 416);
  outlined release of AnnounceVoicemailReadingState(v0 + 184);
  unint64_t v5 = swift_retain_n(v4, 2LL);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  BOOL v8 = static os_log_type_t.debug.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    uint64_t v9 = *(void (**)(void))(v0 + 608);
    uint64_t v36 = *(void *)(v0 + 568);
    uint64_t v10 = (_DWORD *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v11 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v38 = v11;
    *uint64_t v10 = 136315138;
    v9();
    AnnounceVoicemailReadingState.description.getter();
    unint64_t v13 = v12;
    unint64_t v15 = v14;
    OUTLINED_FUNCTION_33_12();
    *(void *)(v0 + 51__swift_destroy_boxed_opaque_existential_1(v0 + 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v37, v10 + 1);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_31_1(v36);
    OUTLINED_FUNCTION_30_9(&dword_0, v6, v8, "#AnnounceVoicemailReadingFlow Updated reading state: %s");
    swift_arrayDestroy(v11, 1LL);
    OUTLINED_FUNCTION_0_2(v11);
    OUTLINED_FUNCTION_0_2((uint64_t)v10);
  }

  else
  {
    OUTLINED_FUNCTION_31_1(*(void *)(v0 + 568));
  }

  (*(void (**)(void))(v0 + 608))();
  uint64_t v16 = *(void *)(v0 + 80);
  *(void *)(v0 + 520) = v16;
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = OUTLINED_FUNCTION_61_1();
    outlined release of Set<String>(v37);
  }

  else
  {
    uint64_t v17 = *(void *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v18 = OUTLINED_FUNCTION_33_12();
  if (v17 == *(void *)(v0 + 72))
  {
    uint64_t v19 = v0 + 488;
    __int16 v20 = *(void **)(v0 + 576);
    swift_bridgeObjectRelease();
    uint64_t v21 = OUTLINED_FUNCTION_34_0();
    Logger.logObject.getter(v21);
    uint64_t v22 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_7(v22))
    {
      uint64_t v23 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      *uint64_t v23 = 0;
      OUTLINED_FUNCTION_16_14( &dword_0,  v24,  v25,  "#AnnounceVoicemailReadingFlow Found no incoming voicemails in burst. Try hinting.");
      OUTLINED_FUNCTION_0_2((uint64_t)v23);
    }

    uint64_t v26 = 1LL;
  }

  else
  {
    uint64_t v19 = v0 + 464;
    uint64_t v27 = *(void **)(v0 + 576);
    Logger.logObject.getter(v18);
    uint64_t v28 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_7(v28))
    {
      BOOL v29 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      *BOOL v29 = 0;
      OUTLINED_FUNCTION_16_14( &dword_0,  v30,  v31,  "#AnnounceVoicemailReadingFlow Found incoming voicemails in burst. Back to reading.");
      OUTLINED_FUNCTION_0_2((uint64_t)v29);
    }

    uint64_t v26 = *(void *)(v0 + 632);

    OUTLINED_FUNCTION_34_0();
  }

  BOOL v32 = *(void *)(v0 + 584);
  uint64_t v33 = *(void *)(v0 + 568);
  OUTLINED_FUNCTION_25_0(v33 + 16, v19, 1LL);
  uint64_t v34 = *(void *)(v33 + 16);
  *(void *)(v33 + swift_weakDestroy(v0 + 16) = v26;
  outlined consume of AnnounceVoicemailReadingFlow.State(v34);
  Signpost.OpenSignpost.end()();
  static ExecuteResponse.replan(requireInput:)(0LL);
  swift_release(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AnnounceVoicemailReadingFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *(void **)v4;
  uint64_t v6 = *(void *)(*(void *)v4 + 624LL);
  v5[79] = a1;
  v5[80] = a2;
  v5[81] = a3;
  v5[82] = a4;
  swift_task_dealloc(v6);
  swift_bridgeObjectRelease();
  return swift_task_switch(AnnounceVoicemailReadingFlow.execute(), 0LL, 0LL);
}

void AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)( unint64_t a1, void (*a2)(void *), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<TemplatingResult, Error>, Output>);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = a1 >> 62;
  if (!(a1 >> 62))
  {
    uint64_t v13 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
    OUTLINED_FUNCTION_48_0();
    if (v13) {
      goto LABEL_3;
    }
LABEL_22:
    OUTLINED_FUNCTION_34_0();
    type metadata accessor for EmptyOutput(0LL);
    static EmptyOutput.instance.getter(v53);
    LOBYTE(v54) = 0;
    a2(v53);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v53,  &demangling cache variable for type metadata for Result<Output, Error>);
    goto LABEL_23;
  }

  OUTLINED_FUNCTION_6_30();
  uint64_t v13 = OUTLINED_FUNCTION_61_1();
  if (!v13) {
    goto LABEL_22;
  }
LABEL_3:
  uint64_t v47 = (void (*)(void))a2;
  uint64_t v50 = v9;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (a1 & 0xC000000000000001LL) == 0, a1);
  uint64_t v51 = v8;
  uint64_t v48 = a3;
  uint64_t v49 = v11;
  if ((a1 & 0xC000000000000001LL) != 0) {
    id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
  }
  else {
    id v14 = *(id *)(a1 + 32);
  }
  unint64_t v15 = v14;
  OUTLINED_FUNCTION_34_0();
  uint64_t v16 = OUTLINED_FUNCTION_10_22((uint64_t)&unk_3FA4E8);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)(v16 + 24) = v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<TemplatingResult, Error>);
  OUTLINED_FUNCTION_15_2(v17);
  OUTLINED_FUNCTION_3_8();
  id v18 = v15;
  uint64_t v19 = Future.init(_:)( partial apply for closure #1 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:),  v16);
  v53[0] = v19;
  lazy protocol witness table accessor for type Future<TemplatingResult, Error> and conformance Future<A, B>( &lazy protocol witness table cache variable for type Future<TemplatingResult, Error> and conformance Future<A, B>,  &demangling cache variable for type metadata for Future<TemplatingResult, Error>,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
  uint64_t v21 = Publisher.eraseToAnyPublisher()(v17, v20);
  swift_release(v19);
  if (v13 < 1)
  {
    __break(1u);
    goto LABEL_26;
  }

  if (!v12)
  {
    uint64_t v22 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
    if (!v22)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }

    OUTLINED_FUNCTION_48_0();
LABEL_11:
    if (v22 >= v13)
    {
      id v46 = v18;
      if ((a1 & 0xC000000000000001LL) != 0 && v13 != 1)
      {
        uint64_t v22 = type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INCallRecord,  &OBJC_CLASS___INCallRecord_ptr);
        Swift::Int v23 = 1LL;
        do
        {
          Swift::Int v24 = v23 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v23);
          Swift::Int v23 = v24;
        }

        while (v13 != v24);
      }

      uint64_t v25 = v21;
      if (v12)
      {
        OUTLINED_FUNCTION_6_30();
        uint64_t v26 = _CocoaArrayWrapper.subscript.getter(1LL, v13, v22);
        uint64_t v27 = v30;
        uint64_t v28 = v31;
        unint64_t v29 = v32;
        swift_bridgeObjectRelease_n(a1, 2LL);
      }

      else
      {
        uint64_t v26 = a1 & 0xFFFFFFFFFFFFFF8LL;
        uint64_t v27 = (a1 & 0xFFFFFFFFFFFFFF8LL) + 32;
        uint64_t v28 = 1LL;
        unint64_t v29 = (2 * v13) | 1;
      }

      if ((uint64_t)(v29 >> 1) >= v28)
      {
        v53[0] = v28;
        v53[1] = v29 >> 1;
        v53[2] = v26;
        void v53[3] = v27;
        v53[4] = v28;
        unint64_t v54 = v29;
        OUTLINED_FUNCTION_3_8();
        swift_unknownObjectRetain(v26);
        specialized Sequence.reduce<A>(_:_:)(v25, v53, v4);
        uint64_t v34 = v33;
        swift_unknownObjectRelease(v26);
        uint64_t v52 = v34;
        uint64_t v35 = OUTLINED_FUNCTION_10_22((uint64_t)&unk_3FA510);
        id v36 = v46;
        *(void *)(v35 + swift_weakDestroy(v0 + 16) = v4;
        *(void *)(v35 + 24) = v36;
        OUTLINED_FUNCTION_3_8();
        id v46 = v36;
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<TemplatingResult, Error>);
        uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output);
        lazy protocol witness table accessor for type Future<TemplatingResult, Error> and conformance Future<A, B>( &lazy protocol witness table cache variable for type AnyPublisher<TemplatingResult, Error> and conformance AnyPublisher<A, B>,  &demangling cache variable for type metadata for AnyPublisher<TemplatingResult, Error>,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
        char v39 = v49;
        Publisher.map<A>(_:)( partial apply for closure #3 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:),  v35,  v37,  v38,  v40);
        swift_release(v35);
        uint64_t v41 = OUTLINED_FUNCTION_10_22((uint64_t)&unk_3FA538);
        uint64_t v42 = v47;
        uint64_t v43 = v48;
        *(void *)(v41 + swift_weakDestroy(v0 + 16) = v47;
        *(void *)(v41 + 24) = v43;
        uint64_t v44 = OUTLINED_FUNCTION_10_22((uint64_t)&unk_3FA560);
        *(void *)(v44 + swift_weakDestroy(v0 + 16) = v42;
        *(void *)(v44 + 24) = v43;
        lazy protocol witness table accessor for type Future<TemplatingResult, Error> and conformance Future<A, B>( &lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<TemplatingResult, Error>, Output> and conformance Publishers.Map<A, B>,  &demangling cache variable for type metadata for Publishers.Map<AnyPublisher<TemplatingResult, Error>, Output>,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
        OUTLINED_FUNCTION_23_6();
        uint64_t v45 = v51;
        Publisher.sink(receiveCompletion:receiveValue:)( partial apply for specialized closure #1 in Publisher.sink(receiveResultCompletion:),  v41,  partial apply for specialized closure #2 in Publisher.sink(receiveResultCompletion:),  v44,  v51,  v42);

        swift_unknownObjectRelease(v26);
        swift_release(v25);
        swift_release(v34);
        swift_release(v41);
        swift_release(v44);
        (*(void (**)(char *, uint64_t))(v50 + 8))(v39, v45);
        OUTLINED_FUNCTION_31_10();
LABEL_23:
        OUTLINED_FUNCTION_7_5();
        return;
      }

      goto LABEL_27;
    }

uint64_t closure #1 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)( uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  double v29;
  void v30[3];
  uint64_t v31;
  uint64_t v32;
  void v33[2];
  uint64_t v34;
  void v35[8];
  uint64_t v8 = type metadata accessor for Locale(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin();
  unint64_t v12 = (uint64_t *)((char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = (void *)a3[18];
  id v14 = *(void (**)(void *__return_ptr, uint64_t))(*a3 + 160LL);
  v14(v33, v10);
  uint64_t result = outlined release of AnnounceVoicemailReadingState((uint64_t)v33);
  if (__OFADD__(v34, v33[0]))
  {
    __break(1u);
  }

  else
  {
    unint64_t v29 = (double)(v34 + v33[0]);
    v14(v35, result);
    outlined release of AnnounceVoicemailReadingState((uint64_t)v35);
    uint64_t v28 = v35[0] > 0LL;
    uint64_t v16 = type metadata accessor for AppInfoBuilder();
    uint64_t v17 = swift_allocObject(v16, 16LL, 7LL);
    id v18 = a4;
    static Device.current.getter(v30);
    uint64_t v27 = a2;
    uint64_t v19 = v31;
    uint64_t v20 = v32;
    __swift_project_boxed_opaque_existential_1(v30, v31);
    dispatch thunk of DeviceState.siriLocale.getter(v19, v20);
    __swift_destroy_boxed_opaque_existential_1(v30);
    swift_retain();
    specialized static PhoneCallRecord.getBuilder(callRecord:options:appInfoBuilder:locale:)(v18, 0LL, v17, v12);
    uint64_t v22 = v21;
    Swift::Int v23 = type metadata accessor for PhoneCallRecord(0LL);
    swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    PhoneCallRecord.init(builder:)(v22);
    uint64_t v25 = v24;

    (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
    swift_release_n(v17, 2LL);
    (*(void (**)(double, void, BOOL, uint64_t, uint64_t, uint64_t))(*v13
                                                                              + class metadata base offset for AnnounceVoicemailCATs))( COERCE_DOUBLE(*(void *)&v29),  0LL,  v28,  v25,  a1,  v27);
    return swift_release(v25);
  }

  return result;
}

uint64_t closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v10);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 40) & ~v13;
  unint64_t v15 = (char *)swift_allocObject(&unk_3FA5B0, v14 + v12, v13 | 7);
  *((void *)v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = a2;
  *((void *)v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 3) = a3;
  *((void *)v15 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))( &v15[v14],  (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v10);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<TemplatingResult, Error>);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  swift_retain();
  id v17 = a4;
  uint64_t result = Future.init(_:)( partial apply for closure #1 in closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:),  v15);
  *a5 = result;
  return result;
}

uint64_t closure #1 in closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v47 = a6;
  uint64_t v11 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin();
  uint64_t v48 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Locale(0LL);
  uint64_t v45 = *(void *)(v14 - 8);
  uint64_t v46 = v14;
  uint64_t v15 = __chkstk_darwin();
  id v17 = (uint64_t *)((char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v18 = (void *)a3[18];
  (*(void (**)(void *__return_ptr, uint64_t))(*a3 + 160LL))(v52, v15);
  uint64_t result = outlined release of AnnounceVoicemailReadingState((uint64_t)v52);
  uint64_t v20 = v53 + v52[0];
  if (__OFADD__(v53, v52[0]))
  {
    __break(1u);
  }

  else
  {
    BOOL v21 = __OFADD__(v20, a4);
    uint64_t v22 = v20 + a4;
    if (!v21)
    {
      double v44 = (double)v22;
      uint64_t v23 = type metadata accessor for AppInfoBuilder();
      uint64_t v24 = swift_allocObject(v23, 16LL, 7LL);
      uint64_t v43 = v18;
      uint64_t v25 = v24;
      id v26 = a5;
      static Device.current.getter(v49);
      uint64_t v42 = a1;
      uint64_t v28 = v50;
      uint64_t v27 = v51;
      __swift_project_boxed_opaque_existential_1(v49, v50);
      dispatch thunk of DeviceState.siriLocale.getter(v28, v27);
      __swift_destroy_boxed_opaque_existential_1(v49);
      swift_retain();
      specialized static PhoneCallRecord.getBuilder(callRecord:options:appInfoBuilder:locale:)(v26, 0LL, v25, v17);
      uint64_t v30 = v29;
      uint64_t v31 = type metadata accessor for PhoneCallRecord(0LL);
      swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
      PhoneCallRecord.init(builder:)(v30);
      uint64_t v33 = v32;

      (*(void (**)(void *, uint64_t))(v45 + 8))(v17, v46);
      swift_release_n(v25, 2LL);
      uint64_t v34 = v48;
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v48, v47, v11);
      uint64_t v35 = *(unsigned __int8 *)(v12 + 80);
      uint64_t v36 = (v35 + 16) & ~v35;
      unint64_t v37 = (v13 + v36 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v38 = swift_allocObject(&unk_3FA5D8, v37 + 16, v35 | 7);
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v38 + v36, v34, v11);
      char v39 = (void *)(v38 + v37);
      uint64_t v40 = v43;
      *char v39 = v42;
      v39[1] = a2;
      uint64_t v41 = *(void (**)(void, void, uint64_t, uint64_t, void (*)(uint64_t), uint64_t))(*v40 + class metadata base offset for AnnounceVoicemailCATs);
      swift_retain();
      v41( *(void *)&v44,  0LL,  1LL,  v33,  partial apply for closure #1 in closure #1 in closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:),  v38);
      swift_release(v38);
      return swift_release(v33);
    }
  }

  __break(1u);
  return result;
}

void closure #1 in closure #1 in closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)( uint64_t a1, uint64_t a2, void (*a3)(char *))
{
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v14 - v10;
  uint64_t v12 = type metadata accessor for TemplatingResult(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v11, a2, v12);
  swift_storeEnumTagMultiPayload(v11, v7, 0LL);
  uint64_t v13 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 1LL, 1LL, v13);
  specialized Result<>.merge(with:behaviorAfterSpeaking:)();
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v6,  &demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  a3(v9);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v9,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v11,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
}

void specialized Sequence.reduce<A>(_:_:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.FlatMap<Future<TemplatingResult, Error>, AnyPublisher<TemplatingResult, Error>>);
  uint64_t v40 = *(void *)(v7 - 8);
  uint64_t v41 = v7;
  __chkstk_darwin();
  char v39 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 == v10)
  {
    swift_retain();
LABEL_6:
    swift_release(a3);
    return;
  }

  if (v10 < v9) {
    goto LABEL_21;
  }
  if (v9 < v10)
  {
    uint64_t v11 = a2[4];
    uint64_t v38 = a2[3];
    uint64_t v12 = a2[5] >> 1;
    swift_retain();
    if (v11 == v12) {
      goto LABEL_6;
    }
    uint64_t v33 = a2;
    uint64_t v34 = v3;
    outlined retain of Zip2Sequence<Range<Int>, ArraySlice<INCallRecord>>((uint64_t)a2);
    uint64_t v13 = v9 + 1;
    uint64_t v36 = v9;
    uint64_t v37 = a3;
    uint64_t v35 = v12;
    while (v11 < v12)
    {
      uint64_t v14 = *(void **)(v38 + 8 * v11);
      uint64_t v46 = a1;
      uint64_t v15 = (void *)swift_allocObject(&unk_3FA588, 40LL, 7LL);
      uint64_t v45 = a1;
      uint64_t v16 = v15;
      void v15[2] = a3;
      v15[3] = v13 - 1;
      v15[4] = v14;
      id v44 = v14;
      uint64_t v17 = swift_retain();
      uint64_t v43 = static Subscribers.Demand.unlimited.getter(v17);
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<TemplatingResult, Error>);
      uint64_t v18 = type metadata accessor for TemplatingResult(0LL);
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<TemplatingResult, Error>);
      lazy protocol witness table accessor for type Future<TemplatingResult, Error> and conformance Future<A, B>( &lazy protocol witness table cache variable for type AnyPublisher<TemplatingResult, Error> and conformance AnyPublisher<A, B>,  &demangling cache variable for type metadata for AnyPublisher<TemplatingResult, Error>,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      uint64_t v20 = v10;
      uint64_t v22 = v21;
      lazy protocol witness table accessor for type Future<TemplatingResult, Error> and conformance Future<A, B>( &lazy protocol witness table cache variable for type Future<TemplatingResult, Error> and conformance Future<A, B>,  &demangling cache variable for type metadata for Future<TemplatingResult, Error>,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
      uint64_t v23 = v39;
      uint64_t v24 = v22;
      uint64_t v10 = v20;
      Publisher.flatMap<A, B>(maxPublishers:_:)( v43,  partial apply for closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:),  v16,  v42,  v18,  v19,  v24,  v25);
      swift_release(v16);
      lazy protocol witness table accessor for type Future<TemplatingResult, Error> and conformance Future<A, B>( &lazy protocol witness table cache variable for type Publishers.FlatMap<Future<TemplatingResult, Error>, AnyPublisher<TemplatingResult, Error>> and conformance Publishers.FlatMap<A, B>,  &demangling cache variable for type metadata for Publishers.FlatMap<Future<TemplatingResult, Error>, AnyPublisher<TemplatingResult, Error>>,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
      uint64_t v26 = v41;
      uint64_t v28 = Publisher.eraseToAnyPublisher()(v41, v27);
      id v29 = v44;

      (*(void (**)(char *, uint64_t))(v40 + 8))(v23, v26);
      swift_release(v45);

      if (v10 == v13)
      {
        outlined release of Zip2Sequence<Range<Int>, ArraySlice<INCallRecord>>((uint64_t)v33);
        uint64_t v31 = v37;
        goto LABEL_18;
      }

      if (v13 < v36 || v13 >= v10) {
        goto LABEL_20;
      }
      ++v11;
      ++v13;
      a1 = v28;
      uint64_t v12 = v35;
      a3 = v37;
      if (v35 == v11)
      {
        outlined release of Zip2Sequence<Range<Int>, ArraySlice<INCallRecord>>((uint64_t)v33);
        uint64_t v31 = a3;
LABEL_18:
        swift_release(v31);
        return;
      }
    }

    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }

  __break(1u);
}

uint64_t closure #3 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  id v66 = a3;
  uint64_t v70 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin();
  uint64_t v69 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AceOutput(0LL);
  uint64_t v67 = *(void *)(v7 - 8);
  __chkstk_darwin();
  os_log_type_t v71 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.siriPhone);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v68 = a1;
  uint64_t v16 = v15(v12, a1, v9);
  uint64_t v65 = v14;
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v19 = static os_log_type_t.debug.getter(v17, v18);
  if (os_log_type_enabled(v17, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v64 = swift_slowAlloc(32LL, -1LL);
    v77[0] = v64;
    int v63 = v20;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v61 = v20 + 4;
    uint64_t v21 = TemplatingResult.sections.getter();
    uint64_t v22 = type metadata accessor for TemplatingSection(0LL);
    uint64_t v23 = Array.description.getter(v21, v22);
    os_log_t v62 = v17;
    uint64_t v24 = v7;
    uint64_t v25 = a4;
    uint64_t v26 = v23;
    unint64_t v28 = v27;
    swift_bridgeObjectRelease();
    uint64_t v29 = v26;
    a4 = v25;
    uint64_t v7 = v24;
    *(void *)&__int128 v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v28, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, (char *)&v74 + 8, v61);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    os_log_t v30 = v62;
    uint64_t v31 = v63;
    _os_log_impl(&dword_0, v62, v19, "#AnnounceVoicemailReadingFlow announcement = %s", v63, 0xCu);
    uint64_t v32 = v64;
    swift_arrayDestroy(v64, 1LL);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  uint64_t v33 = v70;
  uint64_t v34 = v70[22];
  uint64_t v35 = v70[23];
  __swift_project_boxed_opaque_existential_1(v70 + 19, v34);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v35 + 8))(v77, v34, v35);
  uint64_t v36 = v33[22];
  uint64_t v37 = v33[23];
  __swift_project_boxed_opaque_existential_1(v33 + 19, v36);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v37 + 8))(&v74, v36, v37);
  uint64_t v38 = v75;
  __swift_project_boxed_opaque_existential_1(&v74, v75);
  LOBYTE(v3__swift_destroy_boxed_opaque_existential_1(v0 + 8) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v38);
  uint64_t v39 = type metadata accessor for NLContextUpdate(0LL);
  uint64_t v40 = v69;
  __swift_storeEnumTagSinglePayload(v69, 1LL, 1LL, v39);
  uint64_t v73 = 0LL;
  memset(v72, 0, sizeof(v72));
  uint64_t v41 = v71;
  static AceOutputHelper.makeConfirmedViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v68,  v77,  v38 & 1,  _swiftEmptyArrayStorage,  0LL,  0LL,  v40,  _swiftEmptyArrayStorage,  v72);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v72,  &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v40,  &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1(v77);
  uint64_t v42 = __swift_destroy_boxed_opaque_existential_1(&v74);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*v33 + 160LL))(v77, v42);
  uint64_t result = outlined release of AnnounceVoicemailReadingState((uint64_t)v77);
  if (__OFADD__(v78, v77[0]))
  {
    __break(1u);
  }

  else if (v78 + v77[0])
  {
    a4[3] = v7;
    a4[4] = &protocol witness table for AceOutput;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
    return (*(uint64_t (**)(void *, char *, uint64_t))(v67 + 32))(boxed_opaque_existential_1, v41, v7);
  }

  else
  {
    uint64_t v45 = (os_log_s *)Logger.logObject.getter(result);
    os_log_type_t v47 = static os_log_type_t.debug.getter(v45, v46);
    if (os_log_type_enabled(v45, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl( &dword_0,  v45,  v47,  "#AnnounceVoicemailReadingFlow Sending SAUIPlayNotification sound first because this is the initial notification announcement.",  v48,  2u);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v50 = swift_allocObject(v49, 40LL, 7LL);
    *(_OWORD *)(v50 + swift_weakDestroy(v0 + 16) = xmmword_31FE60;
    type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SAUIPlayNotificationSound,  &OBJC_CLASS___SAUIPlayNotificationSound_ptr);
    id v51 = [v66 identifier];
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    uint64_t v54 = v53;

    static String._unconditionallyBridgeFromObjectiveC(_:)(SANotificationTypeIncomingMessageValue);
    SAUIPlayNotificationSound.init(notificationId:soundType:)(v52, v54);
    *(void *)(v50 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v55;
    *(void *)&__int128 v74 = v50;
    specialized Array._endMutation()(v55, v56, v57, v58);
    uint64_t v59 = v74;
    uint64_t v75 = v7;
    id v76 = &protocol witness table for AceOutput;
    __swift_allocate_boxed_opaque_existential_1(&v74);
    AceOutput.copyAndPrepend(commands:)(v59);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v41, v7);
    return outlined init with take of AppSelectionSignalComponent(&v74, (uint64_t)a4);
  }

  return result;
}

uint64_t closure #1 in AnnounceVoicemailReadingFlow.announcementCompleted(voicemails:)( uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = 0LL;
  outlined consume of AnnounceVoicemailReadingFlow.State(v4);
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t result = swift_beginAccess(a1 + 24, &v11, 1LL, 0LL);
  uint64_t v7 = *(void *)(a1 + 24);
  BOOL v8 = __OFADD__(v7, v5);
  uint64_t v9 = v7 + v5;
  if (v8) {
    __break(1u);
  }
  else {
    *(void *)(a1 + 24) = v9;
  }
  return result;
}

BOOL AnnounceVoicemailReadingFlow.shouldAttemptToReadHint.getter()
{
  uint64_t v1 = (uint64_t)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v0 + 160LL))(&v6);
  uint64_t v2 = v9 - v8;
  if (__OFSUB__(v9, v8))
  {
    __break(1u);
  }

  else
  {
    uint64_t v1 = v7;
    unint64_t v10 = v7;
    if (!(v7 >> 62))
    {
      uint64_t v3 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8LL));
      goto LABEL_4;
    }
  }

  if (v1 >= 0) {
    uint64_t v5 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    uint64_t v5 = v1;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v5);
  outlined release of Set<String>(&v10);
LABEL_4:
  outlined release of AnnounceVoicemailReadingState((uint64_t)&v6);
  return v2 == v3;
}

void AnnounceVoicemailReadingFlow.makeHint(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Future<TemplatingResult, Error>, Output>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<TemplatingResult, Error>);
  OUTLINED_FUNCTION_15_2(v9);
  OUTLINED_FUNCTION_3_8();
  uint64_t v15 = Future.init(_:)(partial apply for closure #1 in AnnounceVoicemailReadingFlow.makeHint(completion:), v2);
  OUTLINED_FUNCTION_3_8();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output);
  lazy protocol witness table accessor for type Future<TemplatingResult, Error> and conformance Future<A, B>( &lazy protocol witness table cache variable for type Future<TemplatingResult, Error> and conformance Future<A, B>,  &demangling cache variable for type metadata for Future<TemplatingResult, Error>,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
  Publisher.map<A>(_:)( partial apply for closure #2 in AnnounceVoicemailReadingFlow.makeHint(completion:),  v2,  v9,  v10,  v11);
  swift_release(v2);
  swift_release(v15);
  uint64_t v12 = OUTLINED_FUNCTION_10_22((uint64_t)&unk_3FA498);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  uint64_t v13 = OUTLINED_FUNCTION_10_22((uint64_t)&unk_3FA4C0);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  lazy protocol witness table accessor for type Future<TemplatingResult, Error> and conformance Future<A, B>( &lazy protocol witness table cache variable for type Publishers.Map<Future<TemplatingResult, Error>, Output> and conformance Publishers.Map<A, B>,  &demangling cache variable for type metadata for Publishers.Map<Future<TemplatingResult, Error>, Output>,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  OUTLINED_FUNCTION_23_6();
  Publisher.sink(receiveCompletion:receiveValue:)( partial apply for specialized closure #1 in Publisher.sink(receiveResultCompletion:),  v12,  partial apply for specialized closure #2 in Publisher.sink(receiveResultCompletion:),  v13,  v5,  &v15);
  swift_release(v12);
  swift_release(v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  OUTLINED_FUNCTION_31_10();
  OUTLINED_FUNCTION_7_5();
}

uint64_t closure #1 in AnnounceVoicemailReadingFlow.makeHint(completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)(a3 + 144);
  uint64_t v7 = *(void *)(a3 + 80);
  (*(void (**)(void *__return_ptr))(*(void *)a3 + 160LL))(v12);
  uint64_t result = outlined release of AnnounceVoicemailReadingState((uint64_t)v12);
  if (__OFADD__(v7, v12[0]))
  {
    __break(1u);
  }

  else
  {
    double v9 = (double)(v7 + v12[0]);
    uint64_t v10 = *(void *)(a3 + 88);
    uint64_t v11 = AnnounceVoicemailHintHistory.daysSinceLastHint.getter(*(double *)(a3 + 96));
    return (*(uint64_t (**)(void, void, double, void, double, void, uint64_t, uint64_t))(class metadata base offset for AnnounceVoicemailCATs + *v6 + 32))( *(void *)&v9,  0LL,  (double)v11,  0LL,  (double)v10,  0LL,  a1,  a2);
  }

  return result;
}

void *closure #2 in AnnounceVoicemailReadingFlow.makeHint(completion:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = (char *)v39 - v13;
  uint64_t v15 = *(void *)(TemplatingResult.sections.getter(v12) + 16);
  swift_bridgeObjectRelease();
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v17 = v16(v14, a1, v8);
  if (v15)
  {
    uint64_t v18 = *(void *)(TemplatingResult.print.getter(v17) + 16);
    swift_bridgeObjectRelease();
    uint64_t v19 = v16(v11, (uint64_t)v14, v8);
    if (v18)
    {
      uint64_t v20 = *(void (**)(char *, uint64_t))(v9 + 8);
      v20(v11, v8);
      v20(v14, v8);
LABEL_11:
      swift_beginAccess(a2 + 24, v47, 1LL, 0LL);
      *(_BYTE *)(a2 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 1;
      os_log_t v30 = (void *)(a2 + 152);
      uint64_t v31 = *(void *)(a2 + 176);
      uint64_t v32 = *(void *)(a2 + 184);
      __swift_project_boxed_opaque_existential_1((void *)(a2 + 152), v31);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v32 + 8))(v43, v31, v32);
      uint64_t v34 = *(void *)(a2 + 176);
      uint64_t v33 = *(void *)(a2 + 184);
      __swift_project_boxed_opaque_existential_1(v30, v34);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v33 + 8))(v41, v34, v33);
      uint64_t v35 = v42;
      __swift_project_boxed_opaque_existential_1(v41, v42);
      char v36 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v35);
      uint64_t v37 = type metadata accessor for NLContextUpdate(0LL);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 1LL, 1LL, v37);
      uint64_t v38 = type metadata accessor for AceOutput(0LL);
      memset(v39, 0, sizeof(v39));
      uint64_t v40 = 0LL;
      uint64_t v45 = v38;
      uint64_t v46 = &protocol witness table for AceOutput;
      __swift_allocate_boxed_opaque_existential_1(&v44);
      static AceOutputHelper.makeConfirmedViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( a1,  v43,  v36 & 1,  _swiftEmptyArrayStorage,  0LL,  0LL,  v7,  _swiftEmptyArrayStorage,  v39);
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v39,  &demangling cache variable for type metadata for FlowActivity?);
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v7,  &demangling cache variable for type metadata for NLContextUpdate?);
      __swift_destroy_boxed_opaque_existential_1(v43);
      __swift_destroy_boxed_opaque_existential_1(v41);
      return (void *)outlined init with take of AppSelectionSignalComponent(&v44, (uint64_t)a3);
    }

    uint64_t v28 = *(void *)(TemplatingResult.speak.getter(v19) + 16);
    swift_bridgeObjectRelease();
    uint64_t v29 = *(void (**)(char *, uint64_t))(v9 + 8);
    v29(v11, v8);
    v29(v14, v8);
    if (v28) {
      goto LABEL_11;
    }
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  uint64_t v22 = __swift_project_value_buffer(v21, (uint64_t)static Logger.siriPhone);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v25 = static os_log_type_t.debug.getter(v23, v24);
  if (os_log_type_enabled(v23, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl( &dword_0,  v23,  v25,  "#AnnounceVoicemailReadingFlow CAT hint rules resulted in no output, returning EmptyOutput",  v26,  2u);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  type metadata accessor for EmptyOutput(0LL);
  return static EmptyOutput.instance.getter(a3);
}

unint64_t AnnounceVoicemailReadingFlow.hintCompleted()()
{
  unint64_t v1 = *(void *)(v0 + 16);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = 2LL;
  return outlined consume of AnnounceVoicemailReadingFlow.State(v1);
}

void AnnounceVoicemailReadingFlow.deinit()
{
}

uint64_t AnnounceVoicemailReadingFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 200LL, 7LL);
}

uint64_t protocol witness for Flow.on(input:) in conformance AnnounceVoicemailReadingFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 224LL))() & 1;
}

uint64_t protocol witness for Flow.execute() in conformance AnnounceVoicemailReadingFlow(uint64_t a1)
{
  unint64_t v4 = *(int **)(**(void **)v1 + 240LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance ContactNeedsValueGuardFlow<A>;
  return v7(a1);
}

double protocol witness for Flow.exitValue.getter in conformance AnnounceVoicemailReadingFlow@<D0>( uint64_t a1@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)v1 + 208LL))(v5);
  __int128 v3 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  double result = *(double *)&v6;
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v6;
  *(_BYTE *)(a1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v7;
  return result;
}

uint64_t specialized AnnounceVoicemailReadingFlow.__allocating_init(synchronousBurstIndex:voicemail:hintHistory:burstNotificationManager:sharedGlobals:announceVoicemailCats:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11)
{
  v32[3] = a10;
  v32[4] = a11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v32);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32LL))( boxed_opaque_existential_1,  a5,  a10);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v22 = swift_allocObject(v21, 40LL, 7LL);
  *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = xmmword_31FE60;
  *(void *)(v22 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a2;
  v33[0] = v22;
  specialized Array._endMutation()(v22, v23, v24, v25);
  uint64_t v26 = v33[0];
  id v27 = a2;
  static AnnounceVoicemailReadingState.makeInitialState(synchronousBurstIndex:voicemail:)(a1, v27, (uint64_t)v33);
  outlined init with copy of SharedGlobalsProviding((uint64_t)v32, (uint64_t)v31);
  outlined init with copy of SharedGlobalsProviding((uint64_t)a6, (uint64_t)v30);
  uint64_t v28 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, _BYTE *, _BYTE *, uint64_t, double))(a8 + 216))( v26,  v33,  a3,  a4,  v31,  v30,  a7,  a9);

  __swift_destroy_boxed_opaque_existential_1(a6);
  __swift_destroy_boxed_opaque_existential_1(v32);
  return v28;
}

uint64_t specialized AnnounceVoicemailReadingFlow.init(state:readingState:hintHistory:burstNotificationManager:sharedGlobals:announceVoicemailCats:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11)
{
  *(void *)(a8 + outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 - 168), v0 - 128) = a10;
  *(void *)(a8 + 136) = a11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(a8 + 104));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32LL))( boxed_opaque_existential_1,  a5,  a10);
  __int128 v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a8 + 24) = *(_OWORD *)a2;
  *(void *)(a8 + 19__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
  *(void *)(a8 + swift_weakDestroy(v0 + 16) = a1;
  *(_OWORD *)(a8 + 40) = v21;
  *(_OWORD *)(a8 + 56) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a8 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_BYTE *)(a2 + 48);
  *(void *)(a8 + 80) = a3;
  *(void *)(a8 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a4;
  *(double *)(a8 + 96) = a9;
  *(void *)(a8 + 144) = a7;
  outlined init with take of AppSelectionSignalComponent(a6, a8 + 152);
  return a8;
}

uint64_t type metadata accessor for AnnounceVoicemailReadingFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin28AnnounceVoicemailReadingFlow);
}

unint64_t lazy protocol witness table accessor for type AnnounceVoicemailReadingFlow and conformance AnnounceVoicemailReadingFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailReadingFlow and conformance AnnounceVoicemailReadingFlow;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailReadingFlow and conformance AnnounceVoicemailReadingFlow)
  {
    uint64_t v1 = type metadata accessor for AnnounceVoicemailReadingFlow();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AnnounceVoicemailReadingFlow, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailReadingFlow and conformance AnnounceVoicemailReadingFlow);
  }

  return result;
}

unint64_t outlined consume of AnnounceVoicemailReadingFlow.State(unint64_t result)
{
  if (result >= 3) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_A27C4()
{
  uint64_t v1 = OUTLINED_FUNCTION_34_3();
  return swift_deallocObject(v1, v2, v3);
}

void partial apply for thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
}

uint64_t outlined release of AnnounceVoicemailReadingState(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  swift_bridgeObjectRelease(*(void *)(a1 + 40));
  swift_bridgeObjectRelease(v2);
  return a1;
}

void partial apply for closure #1 in AnnounceVoicemailReadingFlow.announcementProducer(voicemails:)( void (*a1)(void *), uint64_t a2)
{
}

uint64_t objectdestroy_3Tm_0()
{
  uint64_t v0 = OUTLINED_FUNCTION_34_3();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t partial apply for closure #1 in AnnounceVoicemailReadingFlow.announcementCompleted(voicemails:)()
{
  return closure #1 in AnnounceVoicemailReadingFlow.announcementCompleted(voicemails:)( *(void *)(v0 + 16),  *(void *)(v0 + 24));
}

uint64_t sub_A2878@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = OUTLINED_FUNCTION_14_14();
  *a1 = result;
  return result;
}

void sub_A28A4(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_20_11(a1);
  OUTLINED_FUNCTION_12_25((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v10, v11, v12, v9, v13);
  OUTLINED_FUNCTION_29_10();
}

uint64_t *initializeBufferWithCopyOfBuffer for AnnounceVoicemailReadingFlow.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = v3;
  return a1;
}

unint64_t destroy for AnnounceVoicemailReadingFlow.State(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

unint64_t *assignWithCopy for AnnounceVoicemailReadingFlow.State( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_bridgeObjectRetain(v4);
    }
  }

  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v3);
    *a1 = *a2;
  }

  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRelease(v3);
  }

  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for AnnounceVoicemailReadingFlow.State( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v3);
LABEL_5:
    *a1 = v4;
    return a1;
  }

  *a1 = v4;
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnnounceVoicemailReadingFlow.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AnnounceVoicemailReadingFlow.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 2;
    }
  }

  return result;
}

uint64_t getEnumTag for AnnounceVoicemailReadingFlow.State(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (v1 + 1);
}

void *destructiveInjectEnumTag for AnnounceVoicemailReadingFlow.State(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }

  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }

  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for AnnounceVoicemailReadingFlow.State()
{
  return &type metadata for AnnounceVoicemailReadingFlow.State;
}

uint64_t partial apply for closure #1 in AnnounceVoicemailReadingFlow.makeHint(completion:)( uint64_t a1, uint64_t a2)
{
  return closure #1 in AnnounceVoicemailReadingFlow.makeHint(completion:)(a1, a2, v2);
}

void *partial apply for closure #2 in AnnounceVoicemailReadingFlow.makeHint(completion:)@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #2 in AnnounceVoicemailReadingFlow.makeHint(completion:)(a1, v2, a2);
}

uint64_t specialized closure #1 in Publisher.sink(receiveResultCompletion:)(void *a1)
{
  return specialized closure #1 in Publisher.sink(receiveResultCompletion:)(*a1);
}

uint64_t partial apply for specialized closure #1 in Publisher.sink(receiveResultCompletion:)(void *a1)
{
  return specialized closure #1 in Publisher.sink(receiveResultCompletion:)(a1);
}

uint64_t partial apply for specialized closure #2 in Publisher.sink(receiveResultCompletion:)(uint64_t a1)
{
  return specialized closure #2 in Publisher.sink(receiveResultCompletion:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)( uint64_t a1, uint64_t a2)
{
  return closure #1 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)( a1,  a2,  *(void **)(v2 + 16),  *(void **)(v2 + 24));
}

uint64_t objectdestroy_21Tm()
{
  uint64_t v1 = OUTLINED_FUNCTION_34_3();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t partial apply for closure #3 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #3 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)( a1,  *(void **)(v2 + 16),  *(void **)(v2 + 24),  a2);
}

uint64_t outlined retain of Zip2Sequence<Range<Int>, ArraySlice<INCallRecord>>(uint64_t a1)
{
  return a1;
}

uint64_t sub_A2B8C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t partial apply for closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)( a1,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void **)(v2 + 32),  a2);
}

void lazy protocol witness table accessor for type Future<TemplatingResult, Error> and conformance Future<A, B>( unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  OUTLINED_FUNCTION_2();
}

uint64_t outlined release of Zip2Sequence<Range<Int>, ArraySlice<INCallRecord>>(uint64_t a1)
{
  return a1;
}

uint64_t sub_A2C24()
{
  uint64_t v1 = OUTLINED_FUNCTION_19_15();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  OUTLINED_FUNCTION_26_13();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(OUTLINED_FUNCTION_19_15() - 8) + 80LL);
  return closure #1 in closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)( a1,  a2,  *(void **)(v2 + 16),  *(void *)(v2 + 24),  *(void **)(v2 + 32),  v2 + ((v5 + 40) & ~v5));
}

uint64_t sub_A2CE8()
{
  uint64_t v1 = OUTLINED_FUNCTION_19_15();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)( uint64_t a1)
{
  uint64_t v3 = *(void *)(OUTLINED_FUNCTION_19_15() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  closure #1 in closure #1 in closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)( a1,  v1 + v4,  *(void (**)(char *))(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL)));
}

uint64_t OUTLINED_FUNCTION_1_31@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))( (char *)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
}

uint64_t OUTLINED_FUNCTION_3_31(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 - 104) = v5;
  return __swift_mutable_project_boxed_opaque_existential_1(a5, *(void *)(a5 + 24));
}

  ;
}

uint64_t OUTLINED_FUNCTION_6_30()
{
  return swift_bridgeObjectRetain(v0);
}

__n128 OUTLINED_FUNCTION_12_25( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10, __int128 a11, __n128 a12, char a13)
{
  *(_OWORD *)uint64_t v13 = a10;
  *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = a11;
  __n128 result = a12;
  *(__n128 *)(v13 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a12;
  *(_BYTE *)(v13 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a13;
  return result;
}

  ;
}

void OUTLINED_FUNCTION_16_14(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_19_15()
{
  return type metadata accessor for TemplatingResult(0LL);
}

void *OUTLINED_FUNCTION_20_11(uint64_t a1, ...)
{
  return (*(void *(**)(uint64_t *__return_ptr))(*(void *)v1 + 160LL))((uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_26_13()
{
  return swift_release(*(void *)(v0 + 16));
}

  ;
}

void OUTLINED_FUNCTION_30_9(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_31_10()
{
  uint64_t v2 = *(void *)(v0 + 192);
  *(void *)(v0 + 19__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v1;
  return swift_release(v2);
}

uint64_t OUTLINED_FUNCTION_33_12()
{
  return outlined release of AnnounceVoicemailReadingState(v0);
}

void *SmartAppSelectionFeatureManager.forcedDisambiguationMinimalInterval.unsafeMutableAddressor()
{
  return &static SmartAppSelectionFeatureManager.forcedDisambiguationMinimalInterval;
}

uint64_t static SmartAppSelectionFeatureManager.appNameSpecifiedByUserMinimalInterval.getter()
{
  return 28LL;
}

void *SmartAppSelectionFeatureManager.appNameSpecifiedByUserMinimalInterval.unsafeMutableAddressor()
{
  return &static SmartAppSelectionFeatureManager.appNameSpecifiedByUserMinimalInterval;
}

void SmartAppSelectionFeatureManager.__allocating_init(sharedGlobals:trialSmartAppSelectionConfigProvider:diagnosticLogPermission:)( __int128 *a1, uint64_t a2, uint64_t a3)
{
}

Swift::Bool __swiftcall SmartAppSelectionFeatureManager.isAppNameSpecifiedByUserSignalCollectionEnabled()()
{
  if ((((uint64_t (*)(void))(*v0)[18])() & 1) != 0)
  {
    SmartAppSelectionFeatureManager.isLongEnoughSinceLastAppNameSpecifiedByUserSignalCollected()();
    if ((v3 & 1) != 0)
    {
      if (((*(uint64_t (**)(uint64_t, void **))(*v0[2] + 96LL))(1LL, v0 + 3) & 1) != 0)
      {
        if (one-time initialization token for siriPhone != -1) {
          swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
        }
        uint64_t v4 = OUTLINED_FUNCTION_15_1();
        uint64_t v5 = OUTLINED_FUNCTION_4_23(v4, (uint64_t)static Logger.siriPhone);
        Logger.logObject.getter(v5);
        os_log_type_t v6 = OUTLINED_FUNCTION_15_16();
        if (OUTLINED_FUNCTION_33_10(v6))
        {
          OUTLINED_FUNCTION_7_0(12LL);
          uint64_t v68 = OUTLINED_FUNCTION_7_29();
          OUTLINED_FUNCTION_0_27(4.8149e-34);
          OUTLINED_FUNCTION_36_1();
          OUTLINED_FUNCTION_3_32();
          OUTLINED_FUNCTION_13_1();
          uint64_t v7 = OUTLINED_FUNCTION_129();
          uint64_t v12 = OUTLINED_FUNCTION_9_25(v7, v8, v9, v10, v11);
          OUTLINED_FUNCTION_1_32(v12, v13, v14, v15);
          OUTLINED_FUNCTION_0_3();
          OUTLINED_FUNCTION_62();
          OUTLINED_FUNCTION_21_12( &dword_0,  v16,  v17,  "%s appNameSpecifiedByUser signal collection is enabled for current request");
          OUTLINED_FUNCTION_14_16(v18, v19, v20, v21, v22, v23, v24, v25, v65, v66, v68);
          OUTLINED_FUNCTION_0_2(12LL);
          OUTLINED_FUNCTION_0_2(v2);

          goto LABEL_18;
        }

void SmartAppSelectionFeatureManager.isLongEnoughSinceLastAppNameSpecifiedByUserSignalCollected()()
{
  uint64_t v1 = OUTLINED_FUNCTION_30_10();
  Date.timeIntervalSince1970.getter(v1);
  OUTLINED_FUNCTION_28_10();
  v4[0] = v0;
  v4[1] = _swiftEmptyArrayStorage;
  unint64_t v2 = lazy protocol witness table accessor for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory();
  OUTLINED_FUNCTION_33_13( 3LL,  (uint64_t)v4,  (uint64_t)&type metadata for AppNameSpecifiedByUserSignalCollectionHistory,  v2,  (uint64_t)v5);
  uint64_t v3 = v5[1];
  __swift_destroy_boxed_opaque_existential_1(v6);
  AppNameSpecifiedByUserSignalCollectionHistory.daysSinceLastShowed.getter(v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_26_14();
}

uint64_t protocol witness for SmartAppSelectionFeature.isAppSelectionEnabled() in conformance SmartAppSelectionFeatureManager()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136LL))() & 1;
}

uint64_t OUTLINED_FUNCTION_0_27(float a1)
{
  *unint64_t v2 = a1;
  return swift_bridgeObjectRetain(*(void *)(v1 + 96));
}

uint64_t OUTLINED_FUNCTION_1_32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v6 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)((uint64_t *)va, va1, a3, v4);
}

void OUTLINED_FUNCTION_3_32()
{
}

uint64_t OUTLINED_FUNCTION_7_29()
{
  return swift_slowAlloc(32LL, -1LL);
}

uint64_t OUTLINED_FUNCTION_9_25(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_14_16( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return swift_arrayDestroy(a11, 1LL);
}

uint64_t OUTLINED_FUNCTION_15_16()
{
  return static os_log_type_t.debug.getter();
}

uint64_t OUTLINED_FUNCTION_16_15( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(_WORD *)(v12 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
  a12 = 28LL;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a12, v13, v12 + 14, v12 + 22);
}

uint64_t OUTLINED_FUNCTION_18_16(float a1)
{
  *uint64_t v2 = a1;
  return swift_bridgeObjectRetain(*(void *)(v1 + 96));
}

uint64_t OUTLINED_FUNCTION_19_16()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  __swift_project_boxed_opaque_existential_1(v0 + 3, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_22_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v6 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)((uint64_t *)va, va1, a4, v4 + 12);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_28_10()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void OUTLINED_FUNCTION_29_11(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_30_10()
{
  return static Date.distantPast.getter();
}

uint64_t OUTLINED_FUNCTION_31_11()
{
  return swift_retain_n(v0, 2LL);
}

void OUTLINED_FUNCTION_33_13( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
}

uint64_t OUTLINED_FUNCTION_34_11()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

void *OUTLINED_FUNCTION_37_10()
{
  return __swift_project_boxed_opaque_existential_1(v1, v0);
}

void *StartAudioCallDirectAction.identifier.unsafeMutableAddressor()
{
  return &static StartAudioCallDirectAction.identifier;
}

uint64_t StartAudioCallDirectAction.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (!*(void *)(a1 + 16)
    || (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x6449707061LL, 0xE500000000000000LL), (v5 & 1) == 0)
    || (uint64_t v6 = outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v63),
        (OUTLINED_FUNCTION_0_28( v6,  v7,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String,  v8,  v9,  v10,  v11,  v58,  v61,  v63) & 1) == 0))
  {
    uint64_t result = OUTLINED_FUNCTION_62();
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v24 = 0LL;
    uint64_t v25 = 0LL;
    uint64_t v27 = 0LL;
    unint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
    unint64_t v30 = 0LL;
LABEL_12:
    uint64_t v31 = 0LL;
    goto LABEL_13;
  }

  uint64_t v12 = v59;
  uint64_t v13 = v62;
  uint64_t v14 = OUTLINED_FUNCTION_27_15();
  double v22 = OUTLINED_FUNCTION_17_21(v14 & 0xFFFFFFFFFFFFLL | 0x7954000000000000LL, 0xEE00656D614E6570LL, v15);
  if (v64)
  {
    int v23 = OUTLINED_FUNCTION_0_28( v16,  v17,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String,  v18,  v19,  v20,  v21,  v59,  v62,  v63);
    if (v23) {
      uint64_t v24 = v59;
    }
    else {
      uint64_t v24 = 0LL;
    }
    if (v23) {
      uint64_t v25 = v62;
    }
    else {
      uint64_t v25 = 0LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_15_17(v16, v17, v22);
    uint64_t v24 = 0LL;
    uint64_t v25 = 0LL;
  }

  uint64_t v32 = OUTLINED_FUNCTION_27_15();
  double v40 = OUTLINED_FUNCTION_17_21(v32 & 0xFFFFFFFFFFFFLL | 0x6144000000000000LL, 0xEA00000000006174LL, v33);
  if (v64)
  {
    int v41 = OUTLINED_FUNCTION_0_28( v34,  v35,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Data,  v36,  v37,  v38,  v39,  v59,  v62,  v63);
    if (v41) {
      uint64_t v27 = v59;
    }
    else {
      uint64_t v27 = 0LL;
    }
    if (v41) {
      unint64_t v28 = v62;
    }
    else {
      unint64_t v28 = 0xF000000000000000LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_15_17(v34, v35, v40);
    uint64_t v27 = 0LL;
    unint64_t v28 = 0xF000000000000000LL;
  }

  double v48 = OUTLINED_FUNCTION_17_21(0x746E65746E496C6ELL, 0xE800000000000000LL, &v63);
  if (v64)
  {
    int v49 = OUTLINED_FUNCTION_0_28( v42,  v43,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Data,  v44,  v45,  v46,  v47,  v59,  v62,  v63);
    if (v49) {
      uint64_t v29 = v59;
    }
    else {
      uint64_t v29 = 0LL;
    }
    if (v49) {
      unint64_t v30 = v62;
    }
    else {
      unint64_t v30 = 0xF000000000000000LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_15_17(v42, v43, v48);
    uint64_t v29 = 0LL;
    unint64_t v30 = 0xF000000000000000LL;
  }

  OUTLINED_FUNCTION_17_21(0x6C61694472657375LL, 0xED0000746341676FLL, &v63);
  uint64_t v50 = OUTLINED_FUNCTION_62();
  if (!v64)
  {
    uint64_t result = OUTLINED_FUNCTION_15_17(v50, v51);
    goto LABEL_12;
  }

  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
  uint64_t result = OUTLINED_FUNCTION_0_28(v52, v53, (uint64_t)&type metadata for Any + 8, v52, v54, v55, v56, v57, v59, v62, v63);
  uint64_t v31 = v60;
  if (!(_DWORD)result) {
    uint64_t v31 = 0LL;
  }
LABEL_13:
  *a2 = v12;
  a2[1] = v13;
  a2[2] = v24;
  a2[3] = v25;
  a2[4] = v27;
  a2[5] = v28;
  a2[6] = v29;
  a2[7] = v30;
  a2[8] = v31;
  return result;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v6);
    specialized Dictionary._Variant.setValue(_:forKey:)();
    return OUTLINED_FUNCTION_39();
  }

  else
  {
    outlined destroy of Any?(a1);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v6);
    OUTLINED_FUNCTION_39();
    return outlined destroy of Any?((uint64_t)v6);
  }

unint64_t static StartAudioCallDirectAction.identifier.getter()
{
  return 0xD000000000000034LL;
}

void LocalEmergencyCallDisambiguationModel.appBundleId.getter()
{
}

void StartAudioCallDirectAction.intentTypeName.getter()
{
}

void StartAudioCallDirectAction.intentData.getter()
{
}

void StartAudioCallDirectAction.nlIntent.getter()
{
}

uint64_t StartAudioCallDirectAction.userDialogAct.getter()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 64));
}

uint64_t StartAudioCallDirectAction.init(appId:intentTypeName:intentData:nlIntent:userDialogAct:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  return result;
}

void *StartAudioCallDirectAction.toDictionary()()
{
  unint64_t v28 = &_swiftEmptyDictionarySingleton;
  OUTLINED_FUNCTION_26_15(v0[1]);
  specialized Dictionary.subscript.setter((uint64_t)v27, 0x6449707061LL, 0xE500000000000000LL);
  uint64_t v1 = v0[3];
  if (v1)
  {
    uint64_t v2 = OUTLINED_FUNCTION_26_15(v1);
    uint64_t v10 = OUTLINED_FUNCTION_18_17(v2, v3, v4, v5, v6, v7, v8, v9, v26, v27[0]);
    specialized Dictionary.subscript.setter( (uint64_t)v10,  v11 & 0xFFFFFFFFFFFFLL | 0x7954000000000000LL,  0xEE00656D614E6570LL);
  }

  unint64_t v12 = v0[5];
  if (v12 >> 60 != 15)
  {
    uint64_t v13 = OUTLINED_FUNCTION_25_15(v0[4], v12);
    uint64_t v21 = OUTLINED_FUNCTION_18_17(v13, v14, v15, v16, v17, v18, v19, v20, v26, v27[0]);
    specialized Dictionary.subscript.setter( (uint64_t)v21,  v22 & 0xFFFFFFFFFFFFLL | 0x6144000000000000LL,  0xEA00000000006174LL);
  }

  unint64_t v23 = v0[7];
  if (v23 >> 60 != 15)
  {
    OUTLINED_FUNCTION_25_15(v0[6], v23);
    specialized Dictionary.subscript.setter((uint64_t)v27, 0x746E65746E496C6ELL, 0xE800000000000000LL);
  }

  uint64_t v24 = v0[8];
  if (v24)
  {
    void v27[3] = swift_getObjectType(v24);
    v27[0] = v24;
    swift_unknownObjectRetain(v24);
    specialized Dictionary.subscript.setter((uint64_t)v27, 0x6C61694472657375LL, 0xED0000746341676FLL);
  }

  return v28;
}

void StartAudioCallDirectAction.toStartLocalRequest(deviceState:)(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = StartAudioCallDirectAction.toDictionary()();
  specialized _dictionaryUpCast<A, B, C, D>(_:)((uint64_t)v4);
  uint64_t v6 = v5;
  OUTLINED_FUNCTION_39();
  outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(v6, v3);
  SKIDirectInvocationPayload.toStartLocalRequest(deviceState:)(a1);

  OUTLINED_FUNCTION_6();
}

void StartAudioCallDirectAction.startAudioCallIntent.getter()
{
  if (v28[1]) {
    String._bridgeToObjectiveC()();
  }
  uint64_t v1 = &demangling cache variable for type metadata for Data?;
  OUTLINED_FUNCTION_3_33(v0 + 32, (uint64_t)v26);
  OUTLINED_FUNCTION_3_33((uint64_t)v26, (uint64_t)v29);
  if (v29[1] >> 60 == 15LL) {
    Class isa = 0LL;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  id v3 = (id)OUTLINED_FUNCTION_28_11();
  OUTLINED_FUNCTION_23_14();

  if (&demangling cache variable for type metadata for Data?)
  {
    id v4 = &demangling cache variable for type metadata for Data?;
    OUTLINED_FUNCTION_21_14(&OBJC_CLASS___INStartCallIntent_ptr);
    uint64_t v6 = v5;

    if (v6)
    {
      unint64_t v7 = (unint64_t)INStartCallIntent.toStartAudioCallIntent()();

      if (v7)
      {
        if (one-time initialization token for siriPhone != -1) {
          swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
        }
        uint64_t v8 = OUTLINED_FUNCTION_15_1();
        OUTLINED_FUNCTION_12_1(v8, (uint64_t)static Logger.siriPhone);
        os_log_type_t v9 = OUTLINED_FUNCTION_41();
        if (OUTLINED_FUNCTION_10(v9))
        {
          unint64_t v12 = (_WORD *)OUTLINED_FUNCTION_1_0();
          *unint64_t v12 = 0;
          uint64_t v13 = "#StartAudioCallDirectAction Received INStartCallIntent from directAction, converting to INStartAudioCallIntent";
LABEL_18:
          OUTLINED_FUNCTION_12_26(&dword_0, v10, v11, v13);
          OUTLINED_FUNCTION_0_2((uint64_t)v12);

          goto LABEL_25;
        }

        goto LABEL_24;
      }
    }

    id v4 = v4;
    OUTLINED_FUNCTION_21_14(&OBJC_CLASS___INStartAudioCallIntent_ptr);
    uint64_t v15 = v14;

    if (v15)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v16 = OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_12_1(v16, (uint64_t)static Logger.siriPhone);
      os_log_type_t v17 = OUTLINED_FUNCTION_41();
      if (OUTLINED_FUNCTION_10(v17))
      {
        unint64_t v12 = (_WORD *)OUTLINED_FUNCTION_1_0();
        *unint64_t v12 = 0;
        uint64_t v13 = "#StartAudioCallDirectAction Received INStartAudioCallIntent from directAction";
        goto LABEL_18;
      }

void specialized INIntent.typed<A>(as:)()
{
}

{
  specialized INIntent.typed<A>(as:)(&OBJC_CLASS___INStartAudioCallIntent_ptr);
}

{
  specialized INIntent.typed<A>(as:)(&OBJC_CLASS___INStartVideoCallIntent_ptr);
}

void specialized INIntent.typed<A>(as:)(void *a1)
{
  uint64_t v3 = objc_opt_self(*a1);
  if (swift_dynamicCastObjCClass(v1, v3))
  {
    id v4 = v1;
  }

  else
  {
    id v5 = (id)INTypedIntentWithIntent(v1);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = objc_opt_self(*a1);
      if (!swift_dynamicCastObjCClass(v6, v7)) {
    }
      }
  }

  OUTLINED_FUNCTION_6();
}

void StartAudioCallDirectAction.startCallIntent.getter()
{
  if (v22[1]) {
    String._bridgeToObjectiveC()();
  }
  uint64_t v1 = &demangling cache variable for type metadata for Data?;
  OUTLINED_FUNCTION_3_33(v0 + 32, (uint64_t)v20);
  OUTLINED_FUNCTION_3_33((uint64_t)v20, (uint64_t)v23);
  if (v23[1] >> 60 == 15LL) {
    Class isa = 0LL;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  id v3 = (id)OUTLINED_FUNCTION_28_11();
  OUTLINED_FUNCTION_23_14();

  if (&demangling cache variable for type metadata for Data?
    && (id v4 = &demangling cache variable for type metadata for Data?,
        OUTLINED_FUNCTION_21_14(&OBJC_CLASS___INStartCallIntent_ptr),
        uint64_t v6 = v5,
        v4,
        v6))
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v7 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v7, (uint64_t)static Logger.siriPhone);
    os_log_type_t v8 = OUTLINED_FUNCTION_41();
    if (OUTLINED_FUNCTION_10(v8))
    {
      os_log_type_t v9 = (_WORD *)OUTLINED_FUNCTION_1_0();
      *os_log_type_t v9 = 0;
      OUTLINED_FUNCTION_12_26( &dword_0,  v10,  v11,  "#StartAudioCallDirectAction Received INStartCallIntent from directAction");
      OUTLINED_FUNCTION_0_2((uint64_t)v9);
    }

    else
    {

      uint64_t v1 = v4;
    }
  }

  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v12 = OUTLINED_FUNCTION_15_1();
    uint64_t v13 = (void *)OUTLINED_FUNCTION_12_1(v12, (uint64_t)static Logger.siriPhone);
    os_log_type_t v15 = static os_log_type_t.debug.getter(v13, v14);
    if (OUTLINED_FUNCTION_7(v15))
    {
      uint64_t v16 = (_WORD *)OUTLINED_FUNCTION_1_0();
      *uint64_t v16 = 0;
      OUTLINED_FUNCTION_3_2( &dword_0,  v17,  v18,  "#StartAudioCallDirectAction Didn't receive initial siriKitIntent, using default INStartCallIntent");
      OUTLINED_FUNCTION_0_2((uint64_t)v16);
    }

    id v19 = objc_allocWithZone(&OBJC_CLASS___INStartCallIntent);
    @nonobjc INStartCallIntent.init(callRecordFilter:callRecordToCallBack:audioRoute:destinationType:preferredCallProvider:contacts:ttyType:callCapability:)( 0LL,  0LL,  0LL,  1LL,  1LL,  0LL,  0LL,  1LL);
  }

  OUTLINED_FUNCTION_13_25();
}

void @nonobjc INStartAudioCallIntent.init(destinationType:contacts:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    OUTLINED_FUNCTION_24_10( a1,  (unint64_t *)&lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
    v4.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }

  else
  {
    v4.super.Class isa = 0LL;
  }

  [v2 initWithDestinationType:a1 contacts:v4.super.isa];
  OUTLINED_FUNCTION_23_14();
  OUTLINED_FUNCTION_6();
}

id @nonobjc INStartCallIntent.init(callRecordFilter:callRecordToCallBack:audioRoute:destinationType:preferredCallProvider:contacts:ttyType:callCapability:)( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  os_log_type_t v9 = v8;
  if (a6)
  {
    OUTLINED_FUNCTION_24_10( (uint64_t)a1,  (unint64_t *)&lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
    v17.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }

  else
  {
    v17.super.Class isa = 0LL;
  }

  id v18 = [v9 initWithCallRecordFilter:a1 callRecordToCallBack:a2 audioRoute:a3 destinationType:a4 preferredCallProvider:a5 contacts:v17.super.isa ttyTyp e:a7 callCapability:a8];

  return v18;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v3 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

{
  Swift::Int v2;
  _BYTE v4[72];
  OUTLINED_FUNCTION_2_24(a1);
  specialized Array<A>.hash(into:)((uint64_t)v4, a1);
  uint64_t v2 = OUTLINED_FUNCTION_11_17();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v2 = v1;
  NSArray v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v7);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = OUTLINED_FUNCTION_11_17();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

uint64_t outlined copy of Data?(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(result, a2);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void *a1)
{
  Swift::Int v2 = OUTLINED_FUNCTION_11_17();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = FollowUpOfferType.rawValue.getter(a1);
  String.hash(into:)(v6, v2, v3);
  OUTLINED_FUNCTION_62();
  Swift::Int v4 = OUTLINED_FUNCTION_11_17();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  Swift::Int v2;
  _BYTE v4[72];
  OUTLINED_FUNCTION_2_24(a1);
  String.hash(into:)(v4, 0xD000000000000015LL, a1);
  uint64_t v2 = OUTLINED_FUNCTION_11_17();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)()
{
  return OUTLINED_FUNCTION_7_30((uint64_t)"emergencyConfirmation");
}

{
  return OUTLINED_FUNCTION_7_30((uint64_t)"intentHandledResponse");
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v5 = type metadata accessor for ContactQuery(0LL);
  uint64_t v29 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  os_log_type_t v9 = (char *)&v22 - v8;
  uint64_t v10 = v2 + 64;
  uint64_t v11 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v11;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v13 = ~v11;
    uint64_t v14 = *(void *)(a1 + 16);
    id v25 = v2 + 64;
    uint64_t v26 = v2;
    uint64_t v23 = v14;
    uint64_t v24 = ~v11;
    do
    {
      os_log_type_t v15 = *(void *)(*(void *)(v2 + 48) + 8 * result);
      if (*(void *)(v15 + 16) == v14)
      {
        if (!v14 || v15 == a1) {
          return result;
        }
        uint64_t v27 = result;
        uint64_t v16 = v29;
        NSArray v17 = (*(unsigned __int8 *)(v29 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
        swift_bridgeObjectRetain();
        unint64_t v28 = *(void *)(v16 + 72);
        id v18 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
        while (1)
        {
          v18(v9, v15 + v17, v5);
          id v19 = a1;
          v18(v7, a1 + v17, v5);
          lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( (unint64_t *)&lazy protocol witness table cache variable for type ContactQuery and conformance ContactQuery,  (uint64_t (*)(uint64_t))&type metadata accessor for ContactQuery,  (uint64_t)&protocol conformance descriptor for ContactQuery);
          uint64_t v20 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v7, v5);
          os_log_type_t v21 = *(void (**)(char *, uint64_t))(v29 + 8);
          v21(v7, v5);
          v21(v9, v5);
          if ((v20 & 1) == 0) {
            break;
          }
          v17 += v28;
          --v14;
          a1 = v19;
          if (!v14)
          {
            swift_bridgeObjectRelease();
            return v27;
          }
        }

        swift_bridgeObjectRelease();
        uint64_t v2 = v26;
        unint64_t result = v27;
        a1 = v19;
        uint64_t v13 = v24;
        uint64_t v10 = v25;
        uint64_t v14 = v23;
      }

      unint64_t result = (result + 1) & v13;
    }

    while (((*(void *)(v10 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0);
  }

  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v3 = v2;
  NSArray v17 = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_log_type_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  uint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v14 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v17, v5);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0) {
        break;
      }
      uint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(void *a1, uint64_t a2)
{
  uint64_t v55 = type metadata accessor for ContactActionType(0LL);
  uint64_t v51 = *(void *)(v55 - 8);
  __chkstk_darwin();
  unint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (int *)type metadata accessor for ContactResolverConfigHashable(0LL);
  __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v52 = v2;
  uint64_t v11 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v12 = a2 & ~v11;
  uint64_t v50 = v2 + 64;
  if (((*(void *)(v2 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
  {
    uint64_t v44 = ~v11;
    uint64_t v13 = v7[7];
    uint64_t v47 = (char *)a1 + v7[6];
    uint64_t v48 = v13;
    uint64_t v14 = v7[8];
    int v49 = a1;
    uint64_t v46 = (char *)a1 + v14;
    uint64_t v45 = *(void *)(v8 + 72);
    uint64_t v53 = v7;
    do
    {
      outlined init with copy of ContactResolverConfigHashable(*(void *)(v52 + 48) + v45 * v12, (uint64_t)v10);
      Hasher.init(_seed:)(v56, 0LL);
      uint64_t v15 = *v10;
      uint64_t v16 = v10[1];
      swift_bridgeObjectRetain();
      String.hash(into:)(v56, v15, v16);
      swift_bridgeObjectRelease();
      uint64_t v17 = v10[2];
      uint64_t v18 = v10[3];
      swift_bridgeObjectRetain();
      String.hash(into:)(v56, v17, v18);
      swift_bridgeObjectRelease();
      uint64_t v19 = type metadata accessor for Locale(0LL);
      uint64_t v20 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( &lazy protocol witness table cache variable for type Locale and conformance Locale,  (uint64_t (*)(uint64_t))&type metadata accessor for Locale,  (uint64_t)&protocol conformance descriptor for Locale);
      dispatch thunk of Hashable.hash(into:)(v56, v19, v20);
      uint64_t v21 = *(uint64_t *)((char *)v10 + v7[7]);
      Hasher._combine(_:)(*(void *)(v21 + 16));
      uint64_t v23 = *(void *)(v21 + 16);
      if (v23)
      {
        swift_bridgeObjectRetain();
        uint64_t v24 = (uint64_t *)(v21 + 40);
        do
        {
          uint64_t v25 = *(v24 - 1);
          uint64_t v26 = *v24;
          swift_bridgeObjectRetain();
          String.hash(into:)(v56, v25, v26);
          swift_bridgeObjectRelease();
          v24 += 2;
          --v23;
        }

        while (v23);
        uint64_t v22 = swift_bridgeObjectRelease();
      }

      ContactResolverConfig.actionType.getter(v22);
      uint64_t v27 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( &lazy protocol witness table cache variable for type ContactActionType and conformance ContactActionType,  (uint64_t (*)(uint64_t))&type metadata accessor for ContactActionType,  (uint64_t)&protocol conformance descriptor for ContactActionType);
      uint64_t v28 = v55;
      dispatch thunk of Hashable.hash(into:)(v56, v55, v27);
      uint64_t v29 = *(void (**)(char *, uint64_t))(v51 + 8);
      v29(v6, v28);
      Swift::Int v54 = Hasher._finalize()();
      Hasher.init(_seed:)(v56, 0LL);
      unint64_t v30 = v49;
      uint64_t v31 = *v49;
      uint64_t v32 = v49[1];
      swift_bridgeObjectRetain();
      String.hash(into:)(v56, v31, v32);
      swift_bridgeObjectRelease();
      uint64_t v33 = v30[2];
      uint64_t v34 = v30[3];
      swift_bridgeObjectRetain();
      String.hash(into:)(v56, v33, v34);
      swift_bridgeObjectRelease();
      dispatch thunk of Hashable.hash(into:)(v56, v19, v20);
      uint64_t v35 = *(void *)((char *)v30 + v48);
      Hasher._combine(_:)(*(void *)(v35 + 16));
      uint64_t v37 = *(void *)(v35 + 16);
      if (v37)
      {
        swift_bridgeObjectRetain();
        uint64_t v38 = (uint64_t *)(v35 + 40);
        do
        {
          uint64_t v39 = *(v38 - 1);
          uint64_t v40 = *v38;
          swift_bridgeObjectRetain();
          String.hash(into:)(v56, v39, v40);
          swift_bridgeObjectRelease();
          v38 += 2;
          --v37;
        }

        while (v37);
        uint64_t v36 = swift_bridgeObjectRelease();
      }

      ContactResolverConfig.actionType.getter(v36);
      uint64_t v41 = v55;
      dispatch thunk of Hashable.hash(into:)(v56, v55, v27);
      v29(v6, v41);
      Swift::Int v42 = Hasher._finalize()();
      outlined destroy of ContactResolverConfigHashable((uint64_t)v10);
      if (v54 == v42) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v44;
      uint64_t v7 = v53;
    }

    while (((*(void *)(v50 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0);
  }

  return v12;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a2 & ~(-1LL << *(_BYTE *)(v2 + 32));
  if (((*(void *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v3) & 1) != 0) {
    __asm { BR              X9 }
  }

  return a2 & ~(-1LL << *(_BYTE *)(v2 + 32));
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1)
{
  return a1 & ~(-1LL << *(_BYTE *)(v1 + 32));
}

uint64_t destroy for StartAudioCallDirectAction(uint64_t *a1)
{
  unint64_t v2 = a1[5];
  if (v2 >> 60 != 15) {
    outlined consume of Data._Representation(a1[4], v2);
  }
  unint64_t v3 = a1[7];
  if (v3 >> 60 != 15) {
    outlined consume of Data._Representation(a1[6], v3);
  }
  return swift_unknownObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for StartAudioCallDirectAction(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v4;
  uint64_t v5 = a2[3];
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = a2[2];
  *(void *)(a1 + 24) = v5;
  unint64_t v6 = a2 + 4;
  unint64_t v7 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_OWORD *)v6;
  }

  else
  {
    uint64_t v8 = *v6;
    outlined copy of Data._Representation(*v6, v7);
    *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v8;
    *(void *)(a1 + 40) = v7;
  }

  uint64_t v9 = a2 + 6;
  unint64_t v10 = a2[7];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_OWORD *)v9;
  }

  else
  {
    uint64_t v11 = *v9;
    outlined copy of Data._Representation(*v9, a2[7]);
    *(void *)(a1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v11;
    *(void *)(a1 + 56) = v10;
  }

  uint64_t v12 = a2[8];
  *(void *)(a1 + 64) = v12;
  swift_unknownObjectRetain(v12);
  return a1;
}

void *assignWithCopy for StartAudioCallDirectAction(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2 + 4;
  unint64_t v5 = a2[5];
  if (a1[5] >> 60 == 15LL)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *v4;
      outlined copy of Data._Representation(*v4, a2[5]);
      a1[4] = v6;
      a1[5] = v5;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v5 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)(a1 + 4));
LABEL_6:
    *((_OWORD *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_OWORD *)v4;
    goto LABEL_8;
  }

  uint64_t v7 = *v4;
  outlined copy of Data._Representation(*v4, a2[5]);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  a1[4] = v7;
  a1[5] = v5;
  outlined consume of Data._Representation(v8, v9);
LABEL_8:
  unint64_t v10 = a2 + 6;
  unint64_t v11 = a2[7];
  if (a1[7] >> 60 != 15LL)
  {
    if (v11 >> 60 != 15)
    {
      uint64_t v13 = *v10;
      outlined copy of Data._Representation(*v10, a2[7]);
      uint64_t v14 = a1[6];
      unint64_t v15 = a1[7];
      a1[6] = v13;
      a1[7] = v11;
      outlined consume of Data._Representation(v14, v15);
      goto LABEL_15;
    }

    outlined destroy of Data((uint64_t)(a1 + 6));
    goto LABEL_13;
  }

  if (v11 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 3) = *(_OWORD *)v10;
    goto LABEL_15;
  }

  uint64_t v12 = *v10;
  outlined copy of Data._Representation(*v10, a2[7]);
  a1[6] = v12;
  a1[7] = v11;
LABEL_15:
  uint64_t v16 = a1[8];
  uint64_t v17 = a2[8];
  a1[8] = v17;
  swift_unknownObjectRetain(v17);
  swift_unknownObjectRelease(v16);
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy72_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x48uLL);
}

void *assignWithTake for StartAudioCallDirectAction(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2 + 4;
  unint64_t v7 = a1[5];
  if (v7 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v8 = a2[5];
  if (v8 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)(a1 + 4));
LABEL_4:
    *((_OWORD *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = *v6;
    goto LABEL_6;
  }

  uint64_t v9 = a1[4];
  a1[4] = *(void *)v6;
  a1[5] = v8;
  outlined consume of Data._Representation(v9, v7);
LABEL_6:
  unint64_t v10 = a2 + 6;
  unint64_t v11 = a1[7];
  if (v11 >> 60 != 15)
  {
    unint64_t v12 = a2[7];
    if (v12 >> 60 != 15)
    {
      uint64_t v13 = a1[6];
      a1[6] = *v10;
      a1[7] = v12;
      outlined consume of Data._Representation(v13, v11);
      goto LABEL_11;
    }

    outlined destroy of Data((uint64_t)(a1 + 6));
  }

  *((_OWORD *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 3) = *(_OWORD *)v10;
LABEL_11:
  uint64_t v14 = a1[8];
  a1[8] = a2[8];
  swift_unknownObjectRelease(v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartAudioCallDirectAction(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 72))
    {
      LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StartAudioCallDirectAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for StartAudioCallDirectAction()
{
  return &type metadata for StartAudioCallDirectAction;
}

uint64_t OUTLINED_FUNCTION_0_28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  return swift_dynamicCast(&a9, &a11, a3, a4, 6LL);
}

void *OUTLINED_FUNCTION_2_24(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, *(void *)(v1 + 40));
}

uint64_t OUTLINED_FUNCTION_3_33(uint64_t a1, uint64_t a2)
{
  return outlined init with take of String?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_7_30@<X0>(uint64_t a1@<X8>)
{
  return specialized __RawDictionaryStorage.find<A>(_:)((a1 - 32) | 0x8000000000000000LL);
}

void OUTLINED_FUNCTION_12_26(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

  ;
}

uint64_t OUTLINED_FUNCTION_15_17(uint64_t a1, uint64_t a2, ...)
{
  return outlined destroy of Any?((uint64_t)va);
}

double OUTLINED_FUNCTION_17_21@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return specialized Dictionary.subscript.getter(a1, a2, v3, a3);
}

char *OUTLINED_FUNCTION_18_17( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

void OUTLINED_FUNCTION_23_14()
{
}

void OUTLINED_FUNCTION_24_10(uint64_t a1, unint64_t *a2, void *a3)
{
}

uint64_t OUTLINED_FUNCTION_26_15(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t OUTLINED_FUNCTION_28_11()
{
  return INIntentCreate(v1, v0);
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    unint64_t v4 = type metadata accessor for LSApplicationExtensionRecord();
    uint64_t v5 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( &lazy protocol witness table cache variable for type LSApplicationExtensionRecord and conformance NSObject,  (uint64_t (*)(uint64_t))type metadata accessor for LSApplicationExtensionRecord,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)Set.Iterator.init(_cocoa:)(v33, v3, v4, v5);
    uint64_t v1 = v33[0];
    uint64_t v31 = v33[1];
    uint64_t v7 = v33[2];
    int64_t v8 = v33[3];
    uint64_t v9 = v33[4];
  }

  else
  {
    uint64_t v10 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v31 = a1 + 56;
    uint64_t v7 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    uint64_t v9 = v12 & *(void *)(a1 + 56);
    uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain();
    int64_t v8 = 0LL;
  }

  int64_t v30 = (unint64_t)(v7 + 64) >> 6;
  uint64_t v29 = _swiftEmptyArrayStorage;
LABEL_11:
  int64_t v13 = v8;
  unint64_t v14 = v9;
  while (1)
  {
    if (v1 < 0)
    {
      uint64_t v16 = __CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
      if (!v16) {
        goto LABEL_43;
      }
      uint64_t v17 = v16;
      uint64_t v32 = v16;
      type metadata accessor for LSApplicationExtensionRecord();
      swift_unknownObjectRetain(v17);
      swift_dynamicCast(&v34, &v32, (char *)&type metadata for Swift.AnyObject + 8);
      id v18 = v34;
      swift_unknownObjectRelease(v17);
      int64_t v8 = v13;
      uint64_t v9 = v14;
      if (!v18) {
        goto LABEL_43;
      }
      goto LABEL_30;
    }

    if (!v14) {
      break;
    }
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v15 = __clz(__rbit64(v14)) | (v13 << 6);
    int64_t v8 = v13;
LABEL_29:
    id v18 = *(id *)(*(void *)(v1 + 48) + 8 * v15);
    if (!v18) {
      goto LABEL_43;
    }
LABEL_30:
    uint64_t v21 = outlined bridged method (pb) of @objc LSBundleRecord.bundleIdentifier.getter(v18);
    uint64_t v23 = v22;

    int64_t v13 = v8;
    unint64_t v14 = v9;
    if (v23)
    {
      uint64_t v25 = (uint64_t)v29;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v29);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v29[2] + 1LL,  1LL,  (uint64_t)v29);
        uint64_t v25 = isUniquelyReferenced_nonNull_native;
      }

      unint64_t v27 = *(void *)(v25 + 16);
      unint64_t v26 = *(void *)(v25 + 24);
      if (v27 >= v26 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v26 > 1,  v27 + 1,  1LL,  v25);
        uint64_t v25 = isUniquelyReferenced_nonNull_native;
      }

      *(void *)(v25 + swift_weakDestroy(v0 + 16) = v27 + 1;
      uint64_t v29 = (void *)v25;
      uint64_t v28 = v25 + 16 * v27;
      *(void *)(v28 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v21;
      *(void *)(v28 + 40) = v23;
      goto LABEL_11;
    }
  }

  int64_t v8 = v13 + 1;
  if (!__OFADD__(v13, 1LL))
  {
    if (v8 >= v30) {
      goto LABEL_43;
    }
    unint64_t v19 = *(void *)(v31 + 8 * v8);
    if (!v19)
    {
      int64_t v20 = v13 + 2;
      if (v13 + 2 >= v30) {
        goto LABEL_43;
      }
      unint64_t v19 = *(void *)(v31 + 8 * v20);
      if (v19) {
        goto LABEL_27;
      }
      int64_t v20 = v13 + 3;
      if (v13 + 3 >= v30) {
        goto LABEL_43;
      }
      unint64_t v19 = *(void *)(v31 + 8 * v20);
      if (v19) {
        goto LABEL_27;
      }
      int64_t v20 = v13 + 4;
      if (v13 + 4 >= v30) {
        goto LABEL_43;
      }
      unint64_t v19 = *(void *)(v31 + 8 * v20);
      if (v19)
      {
LABEL_27:
        int64_t v8 = v20;
      }

      else
      {
        int64_t v8 = v13 + 5;
        if (v13 + 5 >= v30) {
          goto LABEL_43;
        }
        unint64_t v19 = *(void *)(v31 + 8 * v8);
        if (!v19)
        {
          int64_t v24 = v13 + 6;
          while (v24 < v30)
          {
            unint64_t v19 = *(void *)(v31 + 8 * v24++);
            if (v19)
            {
              int64_t v8 = v24 - 1;
              goto LABEL_28;
            }
          }

uint64_t one-time initialization function for instance()
{
  uint64_t v0 = type metadata accessor for ThirdPartyAnnotatedAppStore();
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DictionaryBackedCache<String, AnnotatedApp>);
  swift_allocObject(v2, 56LL, 7LL);
  uint64_t result = specialized DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:)( 5LL,  (uint64_t)closure #1 in default argument 2 of DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:),  0LL,  1.0);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = result;
  static ThirdPartyAnnotatedAppStore.instance = v1;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v0 = type metadata accessor for EligibleAppFinder();
  OUTLINED_FUNCTION_10_22(v0);
  uint64_t result = EligibleAppFinder.().init()();
  static EligibleAppFinder.instance = result;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v0 = type metadata accessor for AppResolutionProvider();
  swift_allocObject(v0, 72LL, 7LL);
  uint64_t result = AppResolutionProvider.().init()();
  static AppResolutionProvider.instance = result;
  return result;
}

{
  return CallStateProvider.init()(static CallStateProvider.instance);
}

uint64_t *ThirdPartyAnnotatedAppStore.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  return &static ThirdPartyAnnotatedAppStore.instance;
}

uint64_t static ThirdPartyAnnotatedAppStore.instance.getter()
{
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  return swift_retain();
}

void ThirdPartyAnnotatedAppStore.getApp(for:)(uint64_t a1@<X0>, os_log_s *a2@<X1>, uint64_t *a3@<X8>)
{
  void (*v10)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(void *, uint64_t *);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void v50[5];
  void v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v5 = v3;
  int64_t v8 = *(os_log_s **)(v3 + 16);
  int v49 = a1;
  v50[0] = a2;
  uint64_t v10 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(*(void *)v8 + 176LL);
  swift_retain();
  v10(&v52, &v49);
  swift_release(v8);
  uint64_t v11 = v52;
  if (v52)
  {
    uint64_t v12 = v53;
    int64_t v13 = v54;
    unint64_t v14 = v55;
    uint64_t v43 = v57;
    uint64_t v44 = v56;
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    unint64_t v15 = OUTLINED_FUNCTION_15_1();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_23_6();
    uint64_t v16 = OUTLINED_FUNCTION_151();
    Logger.logObject.getter(v16);
    uint64_t v17 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_29_5(v17))
    {
      uint64_t v45 = v13;
      id v18 = OUTLINED_FUNCTION_7_0(22LL);
      Swift::Int v42 = OUTLINED_FUNCTION_7_0(64LL);
      uint64_t v52 = v42;
      *(_DWORD *)id v18 = 136315394;
      int v49 = v5;
      uint64_t v41 = a1;
      unint64_t v19 = type metadata accessor for ThirdPartyAnnotatedAppStore();
      swift_retain();
      int64_t v20 = String.init<A>(describing:)(&v49, v19);
      int v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v18 + 4);
      OUTLINED_FUNCTION_8_6();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
      OUTLINED_FUNCTION_48_0();
      int v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, (unint64_t)a2, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v18 + 14);
      OUTLINED_FUNCTION_32_10((uint64_t)a2);
      OUTLINED_FUNCTION_13_26(&dword_0, v8, v22, "#%s Found cached AnnotatedApp for %s.");
      OUTLINED_FUNCTION_42_2(v42);
      OUTLINED_FUNCTION_0_2(v42);
      uint64_t v23 = v18;
      int64_t v13 = v45;
      OUTLINED_FUNCTION_0_2(v23);
    }

    else
    {

      OUTLINED_FUNCTION_7_4((uint64_t)a2);
      OUTLINED_FUNCTION_8_6();
    }

    uint64_t v32 = v43;
    uint64_t v31 = v44;
  }

  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    int64_t v24 = OUTLINED_FUNCTION_15_1();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_23_6();
    uint64_t v25 = OUTLINED_FUNCTION_151();
    Logger.logObject.getter(v25);
    unint64_t v26 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_29_5(v26))
    {
      unint64_t v27 = OUTLINED_FUNCTION_7_0(22LL);
      uint64_t v47 = OUTLINED_FUNCTION_7_0(64LL);
      int v49 = v5;
      uint64_t v52 = v47;
      *(_DWORD *)unint64_t v27 = 136315394;
      type metadata accessor for ThirdPartyAnnotatedAppStore();
      OUTLINED_FUNCTION_41_9();
      uint64_t v28 = String.init<A>(describing:)(&v49, v4);
      int v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v27 + 4);
      OUTLINED_FUNCTION_8_6();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
      OUTLINED_FUNCTION_48_0();
      int v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v27 + 14);
      OUTLINED_FUNCTION_32_10((uint64_t)a2);
      OUTLINED_FUNCTION_13_26(&dword_0, v8, v30, "#%s Searching for AnnotatedApp for %s on device.");
      OUTLINED_FUNCTION_42_2(v47);
      OUTLINED_FUNCTION_0_2(v47);
      OUTLINED_FUNCTION_0_2(v27);
    }

    else
    {

      OUTLINED_FUNCTION_7_4((uint64_t)a2);
      OUTLINED_FUNCTION_8_6();
    }

    static Signpost.begin(_:)();
    uint64_t v34 = v33;
    uint64_t v35 = a1;
    ThirdPartyAnnotatedAppStore.findApp(identifier:)(a1, a2, &v52);
    uint64_t v36 = v52;
    uint64_t v37 = v55;
    uint64_t v46 = v54;
    uint64_t v48 = v53;
    uint64_t v31 = v56;
    uint64_t v32 = v57;
    uint64_t v38 = *(void *)(v5 + 16);
    v51[0] = v35;
    v51[1] = a2;
    outlined init with take of AnnotatedApp?( (uint64_t)&v52,  (uint64_t)&v49,  &demangling cache variable for type metadata for AnnotatedApp?);
    uint64_t v39 = *(void (**)(void *, uint64_t *))(*(void *)v38 + 184LL);
    swift_retain();
    v39(v51, &v49);
    swift_release(v38);
    unint64_t v14 = v37;
    uint64_t v11 = v36;
    uint64_t v12 = v48;
    Signpost.OpenSignpost.end()();
    uint64_t v40 = v34;
    int64_t v13 = v46;
    swift_release(v40);
  }

  *a3 = v11;
  a3[1] = v12;
  a3[2] = v13;
  a3[3] = v14;
  a3[4] = v31;
  a3[5] = v32;
}

void ThirdPartyAnnotatedAppStore.findApp(identifier:)(uint64_t a1@<X0>, os_log_s *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = v3;
  id v9 = ThirdPartyAnnotatedAppStore.getApplicationRecord(identifier:)(a1, (uint64_t)a2);
  if (v9)
  {
    uint64_t v11 = v9;
    uint64_t v12 = v10;
    id v13 = [v9 applicationExtensionRecords];
    unint64_t v14 = type metadata accessor for LSApplicationExtensionRecord();
    uint64_t v15 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( &lazy protocol witness table cache variable for type LSApplicationExtensionRecord and conformance NSObject,  (uint64_t (*)(uint64_t))type metadata accessor for LSApplicationExtensionRecord,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v13, v14, v15);

    Swift::Int v17 = ThirdPartyAnnotatedAppStore.getExtensionBundleId(extensions:)(v16);
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    type metadata accessor for App(0LL);
    swift_bridgeObjectRetain();
    uint64_t v20 = App.__allocating_init(appIdentifier:pluginIdentifier:)(a1, a2, v17, v19);
    id v21 = [v12 supportedIntents];
    uint64_t v22 = OUTLINED_FUNCTION_38_12((uint64_t)v21);

    id v23 = [v12 actionsRestrictedWhileLocked];
    uint64_t v24 = OUTLINED_FUNCTION_38_12((uint64_t)v23);

    uint64_t v25 = App.appIdentifier.getter();
    uint64_t v27 = v26;
  }

  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v28 = OUTLINED_FUNCTION_15_1();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.siriPhone);
    uint64_t v29 = OUTLINED_FUNCTION_23_6();
    Logger.logObject.getter(v29);
    os_log_type_t v30 = OUTLINED_FUNCTION_6_0();
    if (os_log_type_enabled(a2, v30))
    {
      uint64_t v31 = (_DWORD *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v32 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v35 = v5;
      uint64_t v36 = v32;
      *uint64_t v31 = 136315138;
      type metadata accessor for ThirdPartyAnnotatedAppStore();
      OUTLINED_FUNCTION_41_9();
      uint64_t v33 = String.init<A>(describing:)(&v35, v4);
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v31 + 1);
      OUTLINED_FUNCTION_8_6();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_45_5(&dword_0, a2, v30, "#%s No app found");
      swift_arrayDestroy(v32, 1LL);
      OUTLINED_FUNCTION_0_2(v32);
      OUTLINED_FUNCTION_0_2((uint64_t)v31);
    }

    else
    {

      OUTLINED_FUNCTION_8_6();
    }

    uint64_t v20 = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v25 = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v24 = 0LL;
  }

  *a3 = v20;
  a3[1] = v22;
  a3[2] = v25;
  a3[3] = v27;
  a3[4] = 0LL;
  a3[5] = v24;
}

Swift::Int ThirdPartyAnnotatedAppStore.getExtensionBundleId(extensions:)(uint64_t a1)
{
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    uint64_t v29 = swift_bridgeObjectRetain();
    uint64_t v1 = (void *)specialized _NativeSet.filter(_:)(v29);
    goto LABEL_30;
  }

  uint64_t v1 = &_swiftEmptySetSingleton;
  uint64_t v35 = (unint64_t *)&_swiftEmptySetSingleton;
  if (a1 < 0) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = __CocoaSet.makeIterator()(v2);
  uint64_t v4 = __CocoaSet.Iterator.next()(v3);
  if (!v4)
  {
LABEL_28:
    swift_release(v3);
LABEL_30:
    specialized Sequence.compactMap<A>(_:)((uint64_t)v1);
    uint64_t v31 = v30;
    swift_release(v1);
    if (*(void *)(v31 + 16))
    {
      uint64_t v32 = *(void *)(v31 + 32);
      OUTLINED_FUNCTION_48_0();
    }

    else
    {
      uint64_t v32 = 0LL;
    }

    swift_bridgeObjectRelease();
    return v32;
  }

  uint64_t v5 = v4;
  type metadata accessor for LSApplicationExtensionRecord();
  uint64_t v6 = INIntentsServiceExtensionPointName;
  while (1)
  {
    uint64_t v33 = v5;
    swift_dynamicCast(v34, &v33, (char *)&type metadata for Swift.AnyObject + 8);
    id v7 = [v34[0] extensionPointRecord];
    id v8 = [v7 identifier];

    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v11 = v10;

    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    if (v9 == v12 && v11 == v13) {
      break;
    }
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v12, v13, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0) {
      goto LABEL_14;
    }

LABEL_26:
    uint64_t v5 = __CocoaSet.Iterator.next()(result);
    if (!v5)
    {
      uint64_t v1 = v35;
      goto LABEL_28;
    }
  }

  OUTLINED_FUNCTION_7_4(v11);
LABEL_14:
  id v17 = v34[0];
  uint64_t v18 = v35;
  unint64_t v19 = v35[2];
  if (v35[3] <= v19)
  {
    specialized _NativeSet.resize(capacity:)(v19 + 1);
    uint64_t v18 = v35;
  }

  Swift::Int result = NSObject._rawHashValue(seed:)(v18[5]);
  uint64_t v20 = (char *)(v18 + 7);
  uint64_t v21 = -1LL << *((_BYTE *)v18 + 32);
  unint64_t v22 = result & ~v21;
  unint64_t v23 = v22 >> 6;
  if (((-1LL << v22) & ~v18[(v22 >> 6) + 7]) != 0)
  {
    unint64_t v24 = __clz(__rbit64((-1LL << v22) & ~v18[(v22 >> 6) + 7])) | v22 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_25:
    *(void *)&v20[(v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v24;
    *(void *)(v18[6] + 8 * v24) = v17;
    ++v18[2];
    goto LABEL_26;
  }

  char v25 = 0;
  unint64_t v26 = (unint64_t)(63 - v21) >> 6;
  while (++v23 != v26 || (v25 & 1) == 0)
  {
    BOOL v27 = v23 == v26;
    if (v23 == v26) {
      unint64_t v23 = 0LL;
    }
    v25 |= v27;
    uint64_t v28 = *(void *)&v20[8 * v23];
    if (v28 != -1)
    {
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

id ThirdPartyAnnotatedAppStore.getApplicationRecord(identifier:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone(&OBJC_CLASS___LSApplicationRecord);
  OUTLINED_FUNCTION_8_1();
  id v5 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, 0);
  if (![(id)objc_opt_self(INAppInfo) appInfoWithApplicationRecord:v5])
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v7 = OUTLINED_FUNCTION_15_1();
    id v8 = (os_log_s *)__swift_project_value_buffer(v7, (uint64_t)static Logger.siriPhone);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_39_7(v9))
    {
      uint64_t v10 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      *uint64_t v10 = 0;
      OUTLINED_FUNCTION_25_16(&dword_0, v9, v11, "Error initializing INAppInfo");
      OUTLINED_FUNCTION_0_2((uint64_t)v10);
    }

    uint64_t v12 = swift_bridgeObjectRetain_n(a2, 2LL);
    Logger.logObject.getter(v12);
    os_log_type_t v13 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_39_7(v8))
    {
      unint64_t v14 = (_DWORD *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v15 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v23 = v15;
      *unint64_t v14 = 136315138;
      uint64_t v16 = OUTLINED_FUNCTION_8_1();
      uint64_t v22 = OUTLINED_FUNCTION_24_11(v16, v17, v18, v19, v20, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v14 + 1);
      OUTLINED_FUNCTION_32_10(a2);
      OUTLINED_FUNCTION_45_5(&dword_0, v8, v13, "Error INAppInfo id is: %s");
      swift_arrayDestroy(v15, 1LL);
      OUTLINED_FUNCTION_0_2(v15);
      OUTLINED_FUNCTION_0_2((uint64_t)v14);
    }

    else
    {

      OUTLINED_FUNCTION_7_4(a2);
    }

    return 0LL;
  }

  return v5;
}

uint64_t ThirdPartyAnnotatedAppStore.deinit()
{
  return v0;
}

uint64_t ThirdPartyAnnotatedAppStore.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t protocol witness for AnnotatedAppStoring.getApp(for:) in conformance ThirdPartyAnnotatedAppStore@<X0>( uint64_t a1@<X8>)
{
  (*(void (**)(void *__return_ptr))(**(void **)v1 + 120LL))(v4);
  return outlined init with take of AnnotatedApp?( (uint64_t)v4,  a1,  &demangling cache variable for type metadata for AnnotatedApp?);
}

void specialized _NativeSet.resize(capacity:)()
{
  uint64_t v2 = OUTLINED_FUNCTION_0_29();
  uint64_t v3 = v2;
  if (*(void *)(v1 + 16))
  {
    int64_t v4 = 0LL;
    uint64_t v6 = (uint64_t *)(v1 + 56);
    uint64_t v5 = *(void *)(v1 + 56);
    uint64_t v7 = 1LL << *(_BYTE *)(v1 + 32);
    uint64_t v24 = -1LL << v7;
    char v25 = v0;
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & v5;
    uint64_t v26 = 1LL << *(_BYTE *)(v1 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v2 + 56;
    if ((v8 & v5) == 0) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v12 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v4 << 6))
    {
      uint64_t v17 = *(void *)(*(void *)(v1 + 48) + 8 * i);
      unint64_t v18 = static Hasher._hash(seed:_:)(*(void *)(v3 + 40), v17) & ~(-1LL << *(_BYTE *)(v3 + 32));
      if (((-1LL << v18) & ~*(void *)(v11 + 8 * (v18 >> 6))) == 0)
      {
        OUTLINED_FUNCTION_10_25();
        while (1)
        {
          OUTLINED_FUNCTION_26_16();
          if (v23)
          {
            if ((v20 & 1) != 0) {
              break;
            }
          }

          if (v21 == v22) {
            uint64_t v21 = 0LL;
          }
          if (*(void *)(v11 + 8 * v21) != -1LL)
          {
            OUTLINED_FUNCTION_4_29();
            goto LABEL_31;
          }
        }

        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_5_29();
LABEL_31:
      *(void *)(v11 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      *(void *)(*(void *)(v3 + 48) + 8 * v1__swift_destroy_boxed_opaque_existential_1(v0 + 9) = v17;
      ++*(void *)(v3 + 16);
      if (v9) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v4 + 1;
      if (__OFADD__(v4, 1LL)) {
        goto LABEL_39;
      }
      if (v14 >= v10) {
        goto LABEL_33;
      }
      unint64_t v15 = v6[v14];
      ++v4;
      if (!v15)
      {
        int64_t v4 = v14 + 1;
        if (v14 + 1 >= v10) {
          goto LABEL_33;
        }
        unint64_t v15 = v6[v4];
        if (!v15)
        {
          int64_t v4 = v14 + 2;
          if (v14 + 2 >= v10) {
            goto LABEL_33;
          }
          unint64_t v15 = v6[v4];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v10)
            {
LABEL_33:
              if (v26 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0LL, v10, (void *)(v1 + 56));
              }
              else {
                *uint64_t v6 = v24;
              }
              uint64_t v0 = v25;
              *(void *)(v1 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v15 = v6[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v4 = v16 + 1;
                if (__OFADD__(v16, 1LL)) {
                  goto LABEL_40;
                }
                if (v4 >= v10) {
                  goto LABEL_33;
                }
                unint64_t v15 = v6[v4];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }

            int64_t v4 = v16;
          }
        }
      }

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  _BYTE v38[72];
  OUTLINED_FUNCTION_2_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = OUTLINED_FUNCTION_0_29();
  if (*(void *)(v1 + 16))
  {
    OUTLINED_FUNCTION_31_12();
    uint64_t v36 = (uint64_t)v0;
    uint64_t v37 = v3;
    OUTLINED_FUNCTION_35_8();
    uint64_t v6 = v5 & v4;
    uint64_t v8 = (unint64_t)(v7 + 63) >> 6;
    unint64_t v9 = v2 + 56;
    swift_retain(v1);
    int64_t v10 = 0LL;
    if (!v6) {
      goto LABEL_4;
    }
LABEL_3:
    OUTLINED_FUNCTION_27_16();
    while (1)
    {
      uint64_t v21 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v14);
      uint64_t v22 = *v21;
      char v23 = v21[1];
      OUTLINED_FUNCTION_36_5(v11, v12, v13);
      String.hash(into:)(v38, v22, v23);
      Hasher._finalize()();
      OUTLINED_FUNCTION_15_18();
      if (v24)
      {
        OUTLINED_FUNCTION_10_25();
        while (1)
        {
          OUTLINED_FUNCTION_26_16();
          if (v24)
          {
            if ((v25 & 1) != 0) {
              break;
            }
          }

          if (v26 == v27) {
            uint64_t v26 = 0LL;
          }
          if (*(void *)(v9 + 8 * v26) != -1LL)
          {
            OUTLINED_FUNCTION_4_29();
            goto LABEL_28;
          }
        }

        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_5_29();
LABEL_28:
      OUTLINED_FUNCTION_37_3();
      *(void *)(v9 + v28) |= v29;
      uint64_t v31 = (void *)(*(void *)(v2 + 48) + 16 * v30);
      *uint64_t v31 = v22;
      v31[1] = v23;
      OUTLINED_FUNCTION_17_22();
      if (v6) {
        goto LABEL_3;
      }
LABEL_4:
      unint64_t v15 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        goto LABEL_36;
      }
      if (v15 >= v8) {
        goto LABEL_30;
      }
      ++v10;
      if (!v37[v15])
      {
        int64_t v10 = v15 + 1;
        if (v15 + 1 >= v8) {
          goto LABEL_30;
        }
        OUTLINED_FUNCTION_40_7();
        if (!v17)
        {
          int64_t v10 = v16 + 2;
          if (v16 + 2 >= v8) {
            goto LABEL_30;
          }
          OUTLINED_FUNCTION_40_7();
          if (!v19)
          {
            char v20 = v18 + 3;
            if (v20 >= v8)
            {
LABEL_30:
              OUTLINED_FUNCTION_16_3();
              uint64_t v0 = (void *)v36;
              OUTLINED_FUNCTION_7_31();
              if (v33 ^ v34 | v24) {
                OUTLINED_FUNCTION_46_6(v32, v35, v36, v37);
              }
              else {
                OUTLINED_FUNCTION_20_12(v32, v35, v36, v37);
              }
              *(void *)(v1 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            if (!v37[v20])
            {
              while (1)
              {
                int64_t v10 = v20 + 1;
                if (__OFADD__(v20, 1LL)) {
                  goto LABEL_37;
                }
                if (v10 >= v8) {
                  goto LABEL_30;
                }
                ++v20;
                if (v37[v10]) {
                  goto LABEL_17;
                }
              }
            }

            int64_t v10 = v20;
          }
        }
      }

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  OUTLINED_FUNCTION_2_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OngoingCallOfferOptions>);
  uint64_t v5 = OUTLINED_FUNCTION_0_29();
  if (*(void *)(v1 + 16))
  {
    OUTLINED_FUNCTION_3_34();
    uint64_t v6 = 0LL;
    if (!v4) {
      goto LABEL_4;
    }
LABEL_3:
    OUTLINED_FUNCTION_28_12();
    while (1)
    {
      specialized _NativeSet._unsafeInsertNew(_:)(*(_BYTE *)(*(void *)(v1 + 48) + v7), v5);
      if (v4) {
        goto LABEL_3;
      }
LABEL_4:
      uint64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1LL))
      {
        __break(1u);
LABEL_26:
        __break(1u);
        return;
      }

      if (v8 >= v3) {
        goto LABEL_20;
      }
      ++v6;
      if (!v2[v8])
      {
        uint64_t v6 = v8 + 1;
        if (v8 + 1 >= v3) {
          goto LABEL_20;
        }
        if (!v2[v6])
        {
          uint64_t v6 = v8 + 2;
          if (v8 + 2 >= v3) {
            goto LABEL_20;
          }
          if (!v2[v6])
          {
            unint64_t v9 = v8 + 3;
            if (v9 >= v3)
            {
LABEL_20:
              OUTLINED_FUNCTION_16_3();
              OUTLINED_FUNCTION_7_31();
              if (v12 ^ v13 | v11) {
                *uint64_t v2 = -1LL << v10;
              }
              else {
                OUTLINED_FUNCTION_21_15(v10);
              }
              *(void *)(v1 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            if (!v2[v9])
            {
              while (1)
              {
                uint64_t v6 = v9 + 1;
                if (__OFADD__(v9, 1LL)) {
                  goto LABEL_26;
                }
                if (v6 >= v3) {
                  goto LABEL_20;
                }
                ++v9;
                if (v2[v6]) {
                  goto LABEL_17;
                }
              }
            }

            uint64_t v6 = v9;
          }
        }
      }

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  OUTLINED_FUNCTION_2_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  uint64_t v5 = OUTLINED_FUNCTION_0_29();
  if (*(void *)(v1 + 16))
  {
    OUTLINED_FUNCTION_3_34();
    uint64_t v6 = 0LL;
    if (!v4) {
      goto LABEL_4;
    }
LABEL_3:
    OUTLINED_FUNCTION_28_12();
    while (1)
    {
      specialized _NativeSet._unsafeInsertNew(_:)( *(void *)(*(void *)(v1 + 48) + 16 * v7),  *(void *)(*(void *)(v1 + 48) + 16 * v7 + 8),  v5);
      if (v4) {
        goto LABEL_3;
      }
LABEL_4:
      uint64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1LL))
      {
        __break(1u);
LABEL_26:
        __break(1u);
        return;
      }

      if (v8 >= v3) {
        goto LABEL_20;
      }
      ++v6;
      if (!v2[v8])
      {
        uint64_t v6 = v8 + 1;
        if (v8 + 1 >= v3) {
          goto LABEL_20;
        }
        if (!v2[v6])
        {
          uint64_t v6 = v8 + 2;
          if (v8 + 2 >= v3) {
            goto LABEL_20;
          }
          if (!v2[v6])
          {
            unint64_t v9 = v8 + 3;
            if (v9 >= v3)
            {
LABEL_20:
              OUTLINED_FUNCTION_16_3();
              OUTLINED_FUNCTION_7_31();
              if (v12 ^ v13 | v11) {
                *uint64_t v2 = -1LL << v10;
              }
              else {
                OUTLINED_FUNCTION_21_15(v10);
              }
              *(void *)(v1 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            if (!v2[v9])
            {
              while (1)
              {
                uint64_t v6 = v9 + 1;
                if (__OFADD__(v9, 1LL)) {
                  goto LABEL_26;
                }
                if (v6 >= v3) {
                  goto LABEL_20;
                }
                ++v9;
                if (v2[v6]) {
                  goto LABEL_17;
                }
              }
            }

            uint64_t v6 = v9;
          }
        }
      }

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  int64_t v32;
  void *v33;
  OUTLINED_FUNCTION_2_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<App>);
  uint64_t v2 = OUTLINED_FUNCTION_0_29();
  if (*(void *)(v1 + 16))
  {
    OUTLINED_FUNCTION_31_12();
    uint64_t v33 = v5;
    if (v3 < 64) {
      uint64_t v6 = ~(-1LL << v3);
    }
    else {
      uint64_t v6 = -1LL;
    }
    uint64_t v7 = v6 & v4;
    uint64_t v32 = (unint64_t)(v3 + 63) >> 6;
    uint64_t v8 = v2 + 56;
    swift_retain();
    unint64_t v9 = 0LL;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    OUTLINED_FUNCTION_27_16();
    while (1)
    {
      uint64_t v17 = *(void *)(*(void *)(v1 + 48) + 8 * v10);
      unint64_t v18 = *(void *)(v2 + 40);
      unint64_t v19 = type metadata accessor for App(0LL);
      char v20 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( &lazy protocol witness table cache variable for type App and conformance App,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  (uint64_t)&protocol conformance descriptor for App);
      uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v19, v20) & ~(-1LL << *(_BYTE *)(v2 + 32));
      if (((-1LL << v21) & ~*(void *)(v8 + 8 * (v21 >> 6))) == 0)
      {
        OUTLINED_FUNCTION_10_25();
        while (1)
        {
          OUTLINED_FUNCTION_26_16();
          if (v25)
          {
            if ((v22 & 1) != 0) {
              break;
            }
          }

          if (v23 == v24) {
            char v23 = 0LL;
          }
          if (*(void *)(v8 + 8 * v23) != -1LL)
          {
            OUTLINED_FUNCTION_4_29();
            goto LABEL_31;
          }
        }

        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_5_29();
LABEL_31:
      OUTLINED_FUNCTION_37_3();
      *(void *)(v8 + v26) |= v27;
      *(void *)(*(void *)(v2 + 48) + 8 * v2__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v17;
      OUTLINED_FUNCTION_17_22();
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      uint64_t v11 = v9 + 1;
      if (__OFADD__(v9, 1LL)) {
        goto LABEL_39;
      }
      if (v11 >= v32) {
        goto LABEL_33;
      }
      ++v9;
      if (!v33[v11])
      {
        unint64_t v9 = v11 + 1;
        if (v11 + 1 >= v32) {
          goto LABEL_33;
        }
        OUTLINED_FUNCTION_40_7();
        if (!v13)
        {
          unint64_t v9 = v12 + 2;
          if (v12 + 2 >= v32) {
            goto LABEL_33;
          }
          OUTLINED_FUNCTION_40_7();
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v32)
            {
LABEL_33:
              OUTLINED_FUNCTION_16_3();
              OUTLINED_FUNCTION_7_31();
              if (v30 ^ v31 | v25) {
                OUTLINED_FUNCTION_46_6(v29, (uint64_t)v0, v32, v33);
              }
              else {
                OUTLINED_FUNCTION_20_12(v29, (uint64_t)v0, v32, v33);
              }
              *(void *)(v1 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            if (!v33[v16])
            {
              while (1)
              {
                unint64_t v9 = v16 + 1;
                if (__OFADD__(v16, 1LL)) {
                  goto LABEL_40;
                }
                if (v9 >= v32) {
                  goto LABEL_33;
                }
                ++v16;
                if (v33[v9]) {
                  goto LABEL_20;
                }
              }
            }

            unint64_t v9 = v16;
          }
        }
      }

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  OUTLINED_FUNCTION_2_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SharedNeedsValueContext.NeedsValueCase>);
  uint64_t v2 = OUTLINED_FUNCTION_0_29();
  uint64_t v5 = v2;
  if (!*(void *)(v1 + 16)) {
    goto LABEL_34;
  }
  uint64_t v24 = v0;
  char v25 = v1;
  uint64_t v6 = 0LL;
  uint64_t v7 = (void *)(v1 + 56);
  uint64_t v8 = 1LL << *(_BYTE *)(v1 + 32);
  if (v8 < 64) {
    unint64_t v9 = ~(-1LL << v8);
  }
  else {
    unint64_t v9 = -1LL;
  }
  int64_t v10 = v9 & *(void *)(v1 + 56);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v12 = v2 + 56;
  if (v10)
  {
LABEL_19:
    while (1)
    {
      OUTLINED_FUNCTION_36_5(v2, v3, v4);
      Hasher._combine(_:)(0LL);
      unint64_t v15 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(v5 + 32));
      if (((-1LL << v15) & ~*(void *)(v12 + 8 * (v15 >> 6))) == 0) {
        break;
      }
      OUTLINED_FUNCTION_5_29();
LABEL_28:
      v10 &= v10 - 1;
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      OUTLINED_FUNCTION_17_22();
      if (!v10) {
        goto LABEL_6;
      }
    }

    while (1)
    {
      OUTLINED_FUNCTION_26_16();
      if (v20)
      {
        if ((v17 & 1) != 0) {
          break;
        }
      }

      if (v18 == v19) {
        unint64_t v18 = 0LL;
      }
      if (*(void *)(v12 + 8 * v18) != -1LL)
      {
        OUTLINED_FUNCTION_4_29();
        goto LABEL_28;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_6:
    os_log_type_t v13 = v6 + 1;
    if (!__OFADD__(v6, 1LL))
    {
      if (v13 < v11)
      {
        int64_t v10 = v7[v13];
        ++v6;
        if (v10) {
          goto LABEL_19;
        }
        uint64_t v6 = v13 + 1;
        if (v13 + 1 < v11)
        {
          int64_t v10 = v7[v6];
          if (v10) {
            goto LABEL_19;
          }
          uint64_t v6 = v13 + 2;
          if (v13 + 2 < v11)
          {
            int64_t v10 = v7[v6];
            if (v10) {
              goto LABEL_19;
            }
            int64_t v14 = v13 + 3;
            if (v14 < v11)
            {
              int64_t v10 = v7[v14];
              if (v10)
              {
                uint64_t v6 = v14;
                goto LABEL_19;
              }

              while (1)
              {
                uint64_t v6 = v14 + 1;
                if (__OFADD__(v14, 1LL)) {
                  goto LABEL_37;
                }
                if (v6 >= v11) {
                  break;
                }
                int64_t v10 = v7[v6];
                ++v14;
                if (v10) {
                  goto LABEL_19;
                }
              }
            }
          }
        }
      }

      OUTLINED_FUNCTION_7_31();
      if (v22 ^ v23 | v20) {
        *uint64_t v7 = -1LL << v21;
      }
      else {
        specialized UnsafeMutablePointer.assign(repeating:count:)(0LL, (unint64_t)(v21 + 63) >> 6, v7);
      }
      uint64_t v0 = v24;
      *(void *)(v25 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_34:
      OUTLINED_FUNCTION_16_3();
      uint64_t *v0 = v5;
      OUTLINED_FUNCTION_38_5();
      return;
    }
  }

  __break(1u);
LABEL_37:
  __break(1u);
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LSApplicationExtensionRecord>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v30 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0LL;
    if (!v10) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      uint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * i);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) == 0)
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v21) >> 6;
        while (++v23 != v26 || (v25 & 1) == 0)
        {
          BOOL v27 = v23 == v26;
          if (v23 == v26) {
            unint64_t v23 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v23);
          if (v28 != -1)
          {
            unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v24 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
      *(void *)(*(void *)(v6 + 48) + 8 * v24) = v20;
      ++*(void *)(v6 + 16);
      if (v10) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v17 = v14 + 1;
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_41;
      }
      if (v17 >= v11) {
        goto LABEL_35;
      }
      unint64_t v18 = v8[v17];
      ++v14;
      if (!v18)
      {
        int64_t v14 = v17 + 1;
        if (v17 + 1 >= v11) {
          goto LABEL_35;
        }
        unint64_t v18 = v8[v14];
        if (!v18)
        {
          int64_t v14 = v17 + 2;
          if (v17 + 2 >= v11) {
            goto LABEL_35;
          }
          unint64_t v18 = v8[v14];
          if (!v18)
          {
            int64_t v19 = v17 + 3;
            if (v19 >= v11)
            {
LABEL_35:
              swift_release(v3);
              uint64_t v2 = v30;
              uint64_t v29 = 1LL << *(_BYTE *)(v3 + 32);
              if (v29 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)( 0LL,  (unint64_t)(v29 + 63) >> 6,  (void *)(v3 + 56));
              }
              else {
                void *v8 = -1LL << v29;
              }
              *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v18 = v8[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v14 = v19 + 1;
                if (__OFADD__(v19, 1LL)) {
                  goto LABEL_42;
                }
                if (v14 >= v11) {
                  goto LABEL_35;
                }
                unint64_t v18 = v8[v14];
                ++v19;
                if (v18) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v14 = v19;
          }
        }
      }

void specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues(0LL);
  uint64_t v44 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v43 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)
                 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v10 = (char *)&v41 - v9;
  uint64_t v11 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v12 = a1;
  }
  else {
    uint64_t v12 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?>);
  uint64_t v13 = static _SetStorage.resize(original:capacity:move:)(v11, v12, 1LL);
  if (*(void *)(v11 + 16))
  {
    Swift::Int v42 = v2;
    uint64_t v46 = (void *)(v11 + 56);
    OUTLINED_FUNCTION_35_8();
    unint64_t v16 = v15 & v14;
    int64_t v45 = (unint64_t)(v17 + 63) >> 6;
    uint64_t v18 = v13 + 56;
    swift_retain();
    unint64_t v19 = v16;
    int64_t v20 = 0LL;
    uint64_t v47 = v11;
    if (!v16) {
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v48 = (v19 - 1) & v19;
    int64_t v49 = v20;
    for (unint64_t i = __clz(__rbit64(v19)) | (v20 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v24 << 6))
    {
      uint64_t v26 = *(void *)(v11 + 48);
      uint64_t v27 = *(void *)(v6 + 72);
      outlined init with take of AnnotatedApp?( v26 + v27 * i,  (uint64_t)v10,  &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
      Hasher.init(_seed:)(v50, *(void *)(v13 + 40));
      outlined init with copy of UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?((uint64_t)v10, (uint64_t)v8);
      if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1LL, v4) == 1)
      {
        Hasher._combine(_:)(0);
      }

      else
      {
        uint64_t v28 = v13;
        uint64_t v29 = v10;
        uint64_t v30 = v6;
        uint64_t v32 = v43;
        uint64_t v31 = v44;
        (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v43, v8, v4);
        Hasher._combine(_:)(1u);
        uint64_t v33 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( &lazy protocol witness table cache variable for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues);
        dispatch thunk of Hashable.hash(into:)(v50, v4, v33);
        unint64_t v34 = *(void (**)(char *, uint64_t))(v31 + 8);
        uint64_t v6 = v30;
        unint64_t v10 = v29;
        uint64_t v13 = v28;
        v34(v32, v4);
      }

      Hasher._finalize()();
      OUTLINED_FUNCTION_15_18();
      if (v35)
      {
        OUTLINED_FUNCTION_10_25();
        while (1)
        {
          OUTLINED_FUNCTION_26_16();
          if (v35)
          {
            if ((v37 & 1) != 0) {
              break;
            }
          }

          if (v38 == v39) {
            uint64_t v38 = 0LL;
          }
          if (*(void *)(v18 + 8 * v38) != -1LL)
          {
            OUTLINED_FUNCTION_4_29();
            goto LABEL_34;
          }
        }

        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_5_29();
LABEL_34:
      *(void *)(v18 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v36;
      outlined init with take of AnnotatedApp?( (uint64_t)v10,  *(void *)(v13 + 48) + v36 * v27,  &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
      OUTLINED_FUNCTION_17_22();
      uint64_t v11 = v47;
      unint64_t v19 = v48;
      int64_t v20 = v49;
      if (v48) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v22 = v20 + 1;
      if (__OFADD__(v20, 1LL)) {
        goto LABEL_42;
      }
      if (v22 >= v45) {
        goto LABEL_36;
      }
      unint64_t v23 = v46[v22];
      int64_t v24 = v20 + 1;
      if (!v23)
      {
        int64_t v24 = v20 + 2;
        if (v20 + 2 >= v45) {
          goto LABEL_36;
        }
        unint64_t v23 = v46[v24];
        if (!v23)
        {
          int64_t v24 = v20 + 3;
          if (v20 + 3 >= v45) {
            goto LABEL_36;
          }
          unint64_t v23 = v46[v24];
          if (!v23)
          {
            uint64_t v25 = v20 + 4;
            if (v20 + 4 >= v45)
            {
LABEL_36:
              swift_release(v11);
              uint64_t v2 = v42;
              uint64_t v40 = 1LL << *(_BYTE *)(v11 + 32);
              if (v40 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0LL, (unint64_t)(v40 + 63) >> 6, v46);
              }
              else {
                void *v46 = -1LL << v40;
              }
              *(void *)(v11 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v23 = v46[v25];
            if (!v23)
            {
              while (1)
              {
                int64_t v24 = v25 + 1;
                if (__OFADD__(v25, 1LL)) {
                  goto LABEL_43;
                }
                if (v24 >= v45) {
                  goto LABEL_36;
                }
                unint64_t v23 = v46[v24];
                ++v25;
                if (v23) {
                  goto LABEL_20;
                }
              }
            }

            int64_t v24 = v20 + 4;
          }
        }
      }

unint64_t type metadata accessor for LSApplicationExtensionRecord()
{
  unint64_t result = lazy cache variable for type metadata for LSApplicationExtensionRecord;
  if (!lazy cache variable for type metadata for LSApplicationExtensionRecord)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LSApplicationExtensionRecord);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LSApplicationExtensionRecord);
  }

  return result;
}

Swift::Int specialized _NativeSet.filter(_:)(uint64_t a1)
{
  char v3 = *(_BYTE *)(a1 + 32);
  unsigned int v4 = v3 & 0x3F;
  unint64_t v5 = (1LL << v3) + 63;
  uint64_t v6 = v5 >> 6;
  uint64_t v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD || (swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8LL) & 1) != 0)
  {
    __chkstk_darwin();
    uint64_t v8 = (uint64_t *)((char *)&v20 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0LL, v6, v8);
    Swift::Int v9 = specialized closure #1 in _NativeSet.filter(_:)((Swift::Int)v8, v6, a1);
    uint64_t v10 = swift_release(a1);
    if (v1) {
      swift_willThrow(v10, v11, v12, v13, v14, v15, v16, v17);
    }
  }

  else
  {
    uint64_t v18 = (void *)swift_slowAlloc(v7, -1LL);
    specialized UnsafeMutablePointer.assign(repeating:count:)(0LL, v6, v18);
    Swift::Int v9 = specialized closure #1 in _NativeSet.filter(_:)((Swift::Int)v18, v6, a1);
    swift_release(a1);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  return v9;
}

Swift::Int specialized closure #1 in _NativeSet.filter(_:)(Swift::Int result, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = (unint64_t *)result;
  uint64_t v27 = 0LL;
  int64_t v4 = 0LL;
  uint64_t v5 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(a3 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = INIntentsServiceExtensionPointName;
  while (v7)
  {
    unint64_t v9 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_20:
    id v14 = *(id *)(*(void *)(a3 + 48) + 8 * v10);
    id v15 = [v14 extensionPointRecord];
    id v16 = [v15 identifier];

    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    uint64_t v19 = v18;

    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    if (v17 == v20 && v19 == v21)
    {

      unint64_t result = swift_bridgeObjectRelease_n(v19, 2LL);
LABEL_27:
      *(unint64_t *)((char *)v26 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v10;
      if (__OFADD__(v27++, 1LL))
      {
        __break(1u);
LABEL_30:
        swift_retain();
        return specialized _NativeSet.extractSubset(using:count:)(v26, a2, v27, a3);
      }
    }

    else
    {
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v20, v21, 0LL);

      swift_bridgeObjectRelease();
      unint64_t result = swift_bridgeObjectRelease();
      if ((v23 & 1) != 0) {
        goto LABEL_27;
      }
    }
  }

  int64_t v11 = v4 + 1;
  if (__OFADD__(v4, 1LL))
  {
    __break(1u);
    goto LABEL_32;
  }

  if (v11 >= v29) {
    goto LABEL_30;
  }
  unint64_t v12 = *(void *)(v28 + 8 * v11);
  ++v4;
  if (v12) {
    goto LABEL_19;
  }
  int64_t v4 = v11 + 1;
  if (v11 + 1 >= v29) {
    goto LABEL_30;
  }
  unint64_t v12 = *(void *)(v28 + 8 * v4);
  if (v12) {
    goto LABEL_19;
  }
  int64_t v4 = v11 + 2;
  if (v11 + 2 >= v29) {
    goto LABEL_30;
  }
  unint64_t v12 = *(void *)(v28 + 8 * v4);
  if (v12)
  {
LABEL_19:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
    goto LABEL_20;
  }

  int64_t v13 = v11 + 3;
  if (v13 >= v29) {
    goto LABEL_30;
  }
  unint64_t v12 = *(void *)(v28 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_19;
  }

  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v4 >= v29) {
      goto LABEL_30;
    }
    unint64_t v12 = *(void *)(v28 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_19;
    }
  }

Swift::Int specialized _NativeSet.extractSubset(using:count:)( unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    unint64_t v9 = &_swiftEmptySetSingleton;
LABEL_35:
    swift_release(v4);
    return (Swift::Int)v9;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LSApplicationExtensionRecord>);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  unint64_t v9 = (void *)result;
  int64_t v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  Swift::Int v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }

    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_35;
    }
    unint64_t v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_35;
      }
      unint64_t v16 = v29[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_35;
        }
        unint64_t v16 = v29[v11];
        if (!v16) {
          break;
        }
      }
    }

uint64_t outlined bridged method (pb) of @objc LSBundleRecord.bundleIdentifier.getter(void *a1)
{
  id v1 = [a1 bundleIdentifier];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t OUTLINED_FUNCTION_0_29()
{
  return static _SetStorage.resize(original:capacity:move:)(v1, v0, 1LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_3_34()
{
  return swift_retain(v0);
}

  ;
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_13_26(void *a1, os_log_s *a2, uint64_t a3, const char *a4)
{
}

  ;
}

void OUTLINED_FUNCTION_17_22()
{
}

uint64_t OUTLINED_FUNCTION_20_12@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, void *a4)
{
  return specialized UnsafeMutablePointer.assign(repeating:count:)(0LL, (unint64_t)(a1 + 63) >> 6, a4);
}

uint64_t OUTLINED_FUNCTION_24_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, (uint64_t *)va);
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_32_10(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3LL);
}

  ;
}

  ;
}

  ;
}

void *OUTLINED_FUNCTION_36_5(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, *(void *)(v3 + 40));
}

uint64_t OUTLINED_FUNCTION_38_12(uint64_t a1)
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)(a1, v1, v2);
}

BOOL OUTLINED_FUNCTION_39_7(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t OUTLINED_FUNCTION_41_9()
{
  return swift_retain(v0);
}

void OUTLINED_FUNCTION_45_5(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

void OUTLINED_FUNCTION_46_6(char a1@<W8>, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 = -1LL << a1;
}

void SiriKitDisambiguationList.description.getter()
{
  v21[1] = 0LL;
  v21[2] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(96LL);
  OUTLINED_FUNCTION_4_30(0xD000000000000018LL, (uint64_t)"{ shouldReadItemsInVox: ");
  if ((SiriKitDisambiguationList.shouldReadItemsInVox.getter() & 1) != 0) {
    uint64_t v1 = 1702195828LL;
  }
  else {
    uint64_t v1 = 0x65736C6166LL;
  }
  OUTLINED_FUNCTION_11_25(v1);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_4_30(0xD000000000000029LL, (uint64_t)", requestUnlockForEmptyOrDuplicateItems: ");
  if ((SiriKitDisambiguationList.requestUnlockForEmptyOrDuplicateItems.getter() & 1) != 0) {
    uint64_t v2 = 1702195828LL;
  }
  else {
    uint64_t v2 = 0x65736C6166LL;
  }
  OUTLINED_FUNCTION_11_25(v2);
  OUTLINED_FUNCTION_34_0();
  v3._object = (void *)0x8000000000348940LL;
  v3._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  String.append(_:)(v3);
  uint64_t v4 = SiriKitDisambiguationList.disambiguationItems.getter();
  uint64_t v5 = v4;
  if (!((unint64_t)v4 >> 62))
  {
    uint64_t v6 = *(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8LL));
    if (v6) {
      goto LABEL_9;
    }
LABEL_21:
    OUTLINED_FUNCTION_39();
    uint64_t v8 = _swiftEmptyArrayStorage;
LABEL_22:
    v21[0] = v8;
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    unint64_t v16 = lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v17 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v15, v16);
    id v19 = v18;
    OUTLINED_FUNCTION_34_0();
    v20._uint64_t countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    OUTLINED_FUNCTION_50();
    OUTLINED_FUNCTION_8_21();
    OUTLINED_FUNCTION_18_7();
    return;
  }

  if (v4 >= 0) {
    v4 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v4);
  if (!v6) {
    goto LABEL_21;
  }
LABEL_9:
  v21[0] = _swiftEmptyArrayStorage;
  OUTLINED_FUNCTION_6_31();
  if ((v6 & 0x8000000000000000LL) == 0)
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = (void *)v21[0];
    do
    {
      if ((v5 & 0xC000000000000001LL) != 0) {
        uint64_t v0 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
      }
      else {
        OUTLINED_FUNCTION_12_27(v5 + 8 * v7);
      }
      SiriKitDisambiguationItem.description.getter();
      uint64_t v10 = v9;
      uint64_t v12 = v11;
      swift_release(v0);
      v21[0] = v8;
      unint64_t v13 = v8[2];
      if (v13 >= v8[3] >> 1)
      {
        uint64_t v0 = v21;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v8 = (void *)v21[0];
      }

      ++v7;
      v8[2] = v13 + 1;
      unint64_t v14 = &v8[2 * v13];
      v14[4] = v10;
      void v14[5] = v12;
    }

    while (v6 != v7);
    OUTLINED_FUNCTION_39();
    goto LABEL_22;
  }

  __break(1u);
}

void SiriKitDisambiguationItem.description.getter()
{
  v26[1] = 0LL;
  void v26[2] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(58LL);
  v1._object = (void *)0x8000000000348960LL;
  v1._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v1);
  uint64_t v2 = SiriKitDisambiguationItem.components.getter();
  uint64_t v3 = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 >= 0) {
      v2 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v2);
  }

  else
  {
    uint64_t v4 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v4)
  {
    v26[0] = _swiftEmptyArrayStorage;
    OUTLINED_FUNCTION_6_31();
    if (v4 < 0)
    {
      __break(1u);
      return;
    }

    uint64_t v5 = 0LL;
    uint64_t v6 = (void *)v26[0];
    do
    {
      if ((v3 & 0xC000000000000001LL) != 0) {
        uint64_t v0 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
      }
      else {
        OUTLINED_FUNCTION_12_27(v3 + 8 * v5);
      }
      uint64_t v7 = SiriKitDisambiguationItemComponent.description.getter();
      uint64_t v9 = v8;
      swift_release(v0);
      v26[0] = v6;
      unint64_t v10 = v6[2];
      if (v10 >= v6[3] >> 1)
      {
        uint64_t v0 = v26;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v6 = (void *)v26[0];
      }

      ++v5;
      _OWORD v6[2] = v10 + 1;
      uint64_t v11 = &v6[2 * v10];
      void v11[4] = v7;
      v11[5] = v9;
    }

    while (v4 != v5);
    OUTLINED_FUNCTION_34_0();
  }

  else
  {
    OUTLINED_FUNCTION_34_0();
    uint64_t v6 = _swiftEmptyArrayStorage;
  }

  v26[0] = v6;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  unint64_t v13 = lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v14 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v12, v13);
  unint64_t v16 = v15;
  OUTLINED_FUNCTION_50();
  v17._uint64_t countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_4_30(0xD000000000000017LL, (uint64_t)" ]\ncontactIdentifiers: ");
  uint64_t v18 = SiriKitDisambiguationItem.contactIdentifiers.getter();
  if (v18) {
    id v19 = (void *)v18;
  }
  else {
    id v19 = _swiftEmptyArrayStorage;
  }
  v20._uint64_t countAndFlagsBits = Array.description.getter(v19, &type metadata for String);
  String.append(_:)(v20);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_50();
  v21._uint64_t countAndFlagsBits = 0x6172676F6E6F6D0ALL;
  v21._object = (void *)0xEB00000000203A6DLL;
  String.append(_:)(v21);
  uint64_t v22 = SiriKitDisambiguationItem.monogramLetters.getter();
  if (v23)
  {
    unint64_t v24 = v23;
  }

  else
  {
    uint64_t v22 = 7104878LL;
    unint64_t v24 = 0xE300000000000000LL;
  }

  unint64_t v25 = v24;
  String.append(_:)(*(Swift::String *)&v22);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_8_21();
  OUTLINED_FUNCTION_18_7();
}

void protocol witness for CustomStringConvertible.description.getter in conformance SiriKitDisambiguationList()
{
}

uint64_t SiriKitDisambiguationItemComponent.description.getter()
{
  uint64_t v0 = SiriKitDisambiguationItemComponent.print.getter();
  OUTLINED_FUNCTION_9_26(v0, v1);
  OUTLINED_FUNCTION_1_33();
  OUTLINED_FUNCTION_2_9();
  uint64_t v2 = OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_7_32(v2, 0x80000000003489A0LL);
  uint64_t v3 = SiriKitDisambiguationItemComponent.printOnLockScreen.getter();
  OUTLINED_FUNCTION_9_26(v3, v4);
  OUTLINED_FUNCTION_1_33();
  OUTLINED_FUNCTION_2_9();
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_13_27(0x3A6B61657073202CLL);
  uint64_t v5 = SiriKitDisambiguationItemComponent.speak.getter();
  OUTLINED_FUNCTION_9_26(v5, v6);
  OUTLINED_FUNCTION_1_33();
  OUTLINED_FUNCTION_2_9();
  uint64_t v7 = OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_7_32(v7, 0x80000000003489C0LL);
  uint64_t v8 = SiriKitDisambiguationItemComponent.speakOnLockScreen.getter();
  OUTLINED_FUNCTION_9_26(v8, v9);
  OUTLINED_FUNCTION_1_33();
  OUTLINED_FUNCTION_2_9();
  OUTLINED_FUNCTION_50();
  v10._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  v10._object = (void *)0x80000000003489E0LL;
  String.append(_:)(v10);
  if ((SiriKitDisambiguationItemComponent.allowedOnLockScreen.getter() & 1) != 0) {
    uint64_t v11 = 1702195828LL;
  }
  else {
    uint64_t v11 = 0x65736C6166LL;
  }
  OUTLINED_FUNCTION_11_25(v11);
  OUTLINED_FUNCTION_34_0();
  v12._uint64_t countAndFlagsBits = 0x42746E697270202CLL;
  v12._object = (void *)0xED0000203A65756CLL;
  String.append(_:)(v12);
  char v13 = SiriKitDisambiguationItemComponent.printBlue.getter();
  BOOL v14 = (v13 & 1) == 0;
  if ((v13 & 1) != 0) {
    uint64_t v15 = 1702195828LL;
  }
  else {
    uint64_t v15 = 0x65736C6166LL;
  }
  if (v14) {
    unint64_t v16 = 0xE500000000000000LL;
  }
  else {
    unint64_t v16 = 0xE400000000000000LL;
  }
  unint64_t v17 = v16;
  String.append(_:)(*(Swift::String *)&v15);
  OUTLINED_FUNCTION_39();
  v18._uint64_t countAndFlagsBits = 32032LL;
  v18._object = (void *)0xE200000000000000LL;
  String.append(_:)(v18);
  return 0LL;
}

void protocol witness for CustomStringConvertible.description.getter in conformance SiriKitDisambiguationItem()
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriKitDisambiguationItemComponent()
{
  return SiriKitDisambiguationItemComponent.description.getter();
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_1_33()
{
  return swift_bridgeObjectRelease(v0);
}

void OUTLINED_FUNCTION_4_30(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

void OUTLINED_FUNCTION_6_31()
{
}

void OUTLINED_FUNCTION_7_32(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0xD000000000000015LL;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

void OUTLINED_FUNCTION_8_21()
{
  v0._uint64_t countAndFlagsBits = 32010LL;
  v0._object = (void *)0xE200000000000000LL;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_9_26(uint64_t a1, uint64_t a2)
{
  return String.debugDescription.getter(a1, a2);
}

void OUTLINED_FUNCTION_11_25(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_12_27@<X0>(uint64_t a1@<X8>)
{
  return swift_retain(*(void *)(a1 + 32));
}

void OUTLINED_FUNCTION_13_27(uint64_t a1)
{
  unint64_t v1 = 0xE900000000000020LL;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t UsoTaskBuilder.asUsoGraph()()
{
  uint64_t v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v4 = swift_allocObject(v3, 40LL, 7LL);
  *(_OWORD *)(v4 + ++*(void *)(v0 + 16) = xmmword_31FE60;
  *(void *)(v4 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v0;
  uint64_t v13 = v4;
  specialized Array._endMutation()(v4, v5, v6, v7);
  uint64_t v8 = v13;
  uint64_t v9 = type metadata accessor for UsoBuilderOptions(0LL);
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 1LL, 1LL, v9);
  swift_retain();
  uint64_t v10 = static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)(v8, v2);
  swift_bridgeObjectRelease();
  outlined destroy of UsoBuilderOptions?((uint64_t)v2);
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)(v10, 0LL);
  return swift_release(v10);
}

uint64_t outlined destroy of UsoBuilderOptions?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t UsoTaskBuilder.toUserStatedTaskDialogAct()()
{
  uint64_t v1 = &v11[-((v0 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v2 = type metadata accessor for Siri_Nlu_External_UserStatedTask(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = __chkstk_darwin();
  uint64_t v8 = &v11[-v7];
  Siri_Nlu_External_UserStatedTask.init()(v6);
  UsoTaskBuilder.asUsoGraph()();
  uint64_t v9 = Siri_Nlu_External_UserStatedTask.task.setter(v1);
  Siri_Nlu_External_UserDialogAct.init()(v9);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 16))(v5, v8, v2);
  Siri_Nlu_External_UserDialogAct.userStatedTask.setter(v5);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v8, v2);
}

void static NLv4JoinTransformer.transform(joinTask:)(uint64_t *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (contact: PhoneCallNLv4Contact, contactQuery: ContactQuery));
  uint64_t v142 = *(void (**)(__int128 *))(v3 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  uint64_t v5 = (char *)&v134 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v134 - v6;
  __chkstk_darwin();
  uint64_t v9 = (char *)&v134 - v8;
  uint64_t v10 = type metadata accessor for ContactQuery(0LL);
  uint64_t v143 = *(void *)(v10 - 8);
  uint64_t v144 = v10;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  uint64_t v135 = (__int128 *)v11;
  OUTLINED_FUNCTION_33();
  uint64_t v12 = __chkstk_darwin();
  uint64_t v141 = (char *)&v134 - v13;
  BOOL v14 = dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter(&v148, v12);
  uint64_t v15 = (__int128 *)v148;
  if (!(void)v148)
  {
    Swift::String v20 = _swiftEmptyArrayStorage;
    uint64_t v150 = 0LL;
    __int128 v148 = 0u;
    __int128 v149 = 0u;
    a1[3] = (uint64_t)&type metadata for PhoneCallNLv4Intent;
    a1[4] = (uint64_t)&protocol witness table for PhoneCallNLv4Intent;
    *a1 = OUTLINED_FUNCTION_8_2((uint64_t)&unk_3FA720, 120LL);
    uint64_t v133 = _swiftEmptyArrayStorage;
    OUTLINED_FUNCTION_8_22();
    unint64_t v23 = (__int128 *)_swiftEmptyArrayStorage;
LABEL_100:
    PhoneCallNLv4Intent.init(contactQueries:contacts:app:phoneCallAVMode:phoneCallAttributes:phoneCallAudioRoute:phoneCallCapability:phoneCallConfirmation:phoneCallDestinationType:phoneCallNoun:phoneCallPreferredProvider:phoneCallReference:phoneCallVerb:voiceMailVerb:voiceMailNoun:smsGroups:references:)( (uint64_t)v23,  (uint64_t)v20,  v21,  2,  0LL,  4,  2,  5,  v22,  v132,  (uint64_t)v133,  (uint64_t)_swiftEmptyArrayStorage);
    return;
  }

  uint64_t v140 = v9;
  uint64_t v16 = dispatch thunk of UsoEntity_common_PhoneCall.sender.getter(v14);
  uint64_t v137 = a1;
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(agent: UsoEntity_common_Agent, contactRole: PhoneCallContactRole)>);
    uint64_t v19 = OUTLINED_FUNCTION_8_2(v18, 48LL);
    *(_OWORD *)(v19 + ++*(void *)(v0 + 16) = xmmword_31D870;
    *(void *)(v19 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v17;
    uint64_t v136 = (void *)v19;
    *(_BYTE *)(v19 + 40) = 0;
  }

  else
  {
    uint64_t v136 = _swiftEmptyArrayStorage;
  }

  unint64_t v24 = v15;
  uint64_t v25 = dispatch thunk of UsoEntity_common_PhoneCall.recipients.getter();
  if (v25) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = (uint64_t)_swiftEmptyArrayStorage;
  }
  *(void *)&__int128 v148 = _swiftEmptyArrayStorage;
  if ((unint64_t)v26 >> 62)
  {
    if (v26 < 0) {
      uint64_t v59 = v26;
    }
    else {
      uint64_t v59 = v26 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v59);
  }

  else
  {
    uint64_t v27 = *(void *)((char *)&dword_10 + (v26 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain();
  }

  uint64_t v138 = (uint64_t *)v7;
  if (v27)
  {
    if (v27 < 1)
    {
      __break(1u);
      goto LABEL_102;
    }

    for (uint64_t i = 0LL; i != v27; ++i)
    {
      if ((v26 & 0xC000000000000001LL) != 0)
      {
        uint64_t v29 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v26);
        uint64_t v15 = (__int128 *)v29;
      }

      else
      {
        uint64_t v29 = OUTLINED_FUNCTION_12_27(v26 + 8 * i);
      }

      dispatch thunk of CodeGenListEntry.entry.getter(&v147, v29);
      uint64_t v30 = OUTLINED_FUNCTION_38_1();
      if (v147)
      {
        uint64_t v15 = &v148;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
        OUTLINED_FUNCTION_21_16();
        if (v32) {
          OUTLINED_FUNCTION_3_25(v1 + 1, v31);
        }
        uint64_t v33 = OUTLINED_FUNCTION_37_11();
        specialized Array._endMutation()(v33, v34, v35, v36);
      }
    }

    OUTLINED_FUNCTION_50();
    unint64_t v37 = v148;
  }

  else
  {
    OUTLINED_FUNCTION_50();
    unint64_t v37 = (unint64_t)_swiftEmptyArrayStorage;
  }

  uint64_t v145 = v5;
  uint64_t v146 = v3;
  OUTLINED_FUNCTION_50();
  if (v37 >> 62)
  {
    OUTLINED_FUNCTION_25_2();
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter(v15);
    OUTLINED_FUNCTION_39();
  }

  else
  {
    uint64_t v38 = *(void *)((char *)&dword_10 + (v37 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v139 = v24;
  if (!v38)
  {
    uint64_t v45 = OUTLINED_FUNCTION_39();
    uint64_t v46 = v24;
    goto LABEL_37;
  }

  *(void *)&__int128 v148 = _swiftEmptyArrayStorage;
  OUTLINED_FUNCTION_17_23();
  if (v38 < 0)
  {
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }

  uint64_t v39 = 0LL;
  uint64_t v40 = v148;
  uint64_t v1 = 2LL;
  do
  {
    if ((v37 & 0xC000000000000001LL) != 0)
    {
      uint64_t v41 = OUTLINED_FUNCTION_25_17();
    }

    else
    {
      uint64_t v41 = *(void *)(v37 + 8 * v39 + 32);
      swift_retain();
    }

    *(void *)&__int128 v148 = v40;
    unint64_t v43 = *(void *)(v40 + 16);
    unint64_t v42 = *(void *)(v40 + 24);
    if (v43 >= v42 >> 1)
    {
      OUTLINED_FUNCTION_20_13(v42);
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v40 = v148;
    }

    ++v39;
    *(void *)(v40 + ++*(void *)(v0 + 16) = v43 + 1;
    uint64_t v44 = v40 + 16 * v43;
    *(void *)(v44 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v41;
    *(_BYTE *)(v44 + 40) = 2;
  }

  while (v38 != v39);
  uint64_t v45 = OUTLINED_FUNCTION_39();
  uint64_t v46 = v139;
LABEL_37:
  uint64_t v47 = dispatch thunk of UsoEntity_common_PhoneCall.participants.getter(v45);
  if (v47) {
    unint64_t v48 = v47;
  }
  else {
    unint64_t v48 = (unint64_t)_swiftEmptyArrayStorage;
  }
  *(void *)&__int128 v148 = _swiftEmptyArrayStorage;
  if (!(v48 >> 62))
  {
    uint64_t v49 = *(void *)((char *)&dword_10 + (v48 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain();
    if (v49) {
      goto LABEL_42;
    }
LABEL_59:
    OUTLINED_FUNCTION_39();
    uint64_t v58 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_60;
  }

  OUTLINED_FUNCTION_25_2();
  uint64_t v49 = _CocoaArrayWrapper.endIndex.getter(v46);
  if (!v49) {
    goto LABEL_59;
  }
LABEL_42:
  if (v49 < 1)
  {
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }

  for (uint64_t j = 0LL; j != v49; ++j)
  {
    if ((v48 & 0xC000000000000001LL) != 0) {
      uint64_t v51 = OUTLINED_FUNCTION_25_17();
    }
    else {
      uint64_t v51 = OUTLINED_FUNCTION_12_27(v48 + 8 * j);
    }
    dispatch thunk of CodeGenListEntry.entry.getter(&v147, v51);
    uint64_t v52 = OUTLINED_FUNCTION_38_1();
    if (v147)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v52);
      OUTLINED_FUNCTION_21_16();
      if (v32) {
        OUTLINED_FUNCTION_3_25(v1 + 1, v53);
      }
      uint64_t v54 = OUTLINED_FUNCTION_37_11();
      specialized Array._endMutation()(v54, v55, v56, v57);
    }
  }

  OUTLINED_FUNCTION_39();
  uint64_t v58 = v148;
LABEL_60:
  OUTLINED_FUNCTION_39();
  if (!((unint64_t)v58 >> 62))
  {
    uint64_t v60 = *(void *)((char *)&dword_10 + (v58 & 0xFFFFFFFFFFFFF8LL));
    if (v60) {
      goto LABEL_62;
    }
LABEL_75:
    OUTLINED_FUNCTION_129();
    *(void *)&__int128 v148 = v136;
    specialized Array.append<A>(contentsOf:)();
    specialized Array.append<A>(contentsOf:)();
    uint64_t v67 = (char *)_swiftEmptyArrayStorage;
    unint64_t v147 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v68 = *(void *)(v148 + 16);
    uint64_t v69 = v146;
    if (v68)
    {
      uint64_t v70 = (unsigned __int8 *)(v148 + 40);
      os_log_type_t v71 = v141;
      do
      {
        uint64_t v72 = *((void *)v70 - 1);
        int v73 = *v70;
        OUTLINED_FUNCTION_29_3();
        uint64_t v74 = UsoEntity_common_Agent.asCommonGroup()();
        if (v74)
        {
          uint64_t v75 = v74;
          uint64_t v76 = swift_retain();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v76);
          unint64_t v78 = *(void *)((char *)&dword_10 + (v147 & 0xFFFFFFFFFFFFFF8LL));
          unint64_t v77 = *(void *)((char *)&dword_18 + (v147 & 0xFFFFFFFFFFFFFF8LL));
          if (v78 >= v77 >> 1) {
            OUTLINED_FUNCTION_3_25(v78 + 1, v77);
          }
          uint64_t v79 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v78, v75);
          specialized Array._endMutation()(v79, v80, v81, v82);
          OUTLINED_FUNCTION_31_2();
          uint64_t v83 = v75;
        }

        else
        {
          uint64_t v84 = type metadata accessor for PhoneCallNLv4Contact();
          uint64_t v85 = (void *)OUTLINED_FUNCTION_8_2(v84, 346LL);
          uint64_t v86 = OUTLINED_FUNCTION_29_3();
          uint64_t v87 = specialized PhoneCallNLv4Contact.init(contactConvertible:contactRole:)(v86, v73, v85);
          UsoEntity_common_Agent.toContactQuery()(v87, v88, v89, v90, v91);
          uint64_t v92 = (uint64_t)v140;
          uint64_t v93 = &v140[*(int *)(v69 + 48)];
          *(void *)uint64_t v140 = v87;
          (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v93, v71, v144);
          if ((swift_isUniquelyReferenced_nonNull_native(v67) & 1) == 0)
          {
            OUTLINED_FUNCTION_33_15();
            uint64_t v67 = v97;
          }

          unint64_t v94 = *((void *)v67 + 2);
          if (v94 >= *((void *)v67 + 3) >> 1)
          {
            OUTLINED_FUNCTION_33_15();
            uint64_t v67 = v98;
          }

          *((void *)v67 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v94 + 1;
          OUTLINED_FUNCTION_36_6();
          outlined init with take of (contact: PhoneCallNLv4Contact, contactQuery: ContactQuery)( v92,  (uint64_t)&v67[v95 + *(void *)(v96 + 72) * v94]);
          uint64_t v83 = v72;
        }

        swift_release(v83);
        v70 += 16;
        --v68;
      }

      while (v68);
    }

    OUTLINED_FUNCTION_39();
    uint64_t v99 = *((void *)v67 + 2);
    if (!v99) {
      goto LABEL_98;
    }
    *(void *)&__int128 v148 = _swiftEmptyArrayStorage;
    OUTLINED_FUNCTION_36_1();
    specialized ContiguousArray.reserveCapacity(_:)(v99);
    OUTLINED_FUNCTION_36_6();
    uint64_t v101 = (uint64_t)&v67[v100];
    uint64_t v103 = *(void *)(v102 + 72);
    uint64_t v140 = &v67[v100];
    uint64_t v141 = v67;
    uint64_t v104 = v138;
    uint64_t v106 = v143;
    uint64_t v105 = v144;
    do
    {
      outlined init with copy of Result<TemplatingResult, Error>( v101,  (uint64_t)v104,  &demangling cache variable for type metadata for (contact: PhoneCallNLv4Contact, contactQuery: ContactQuery));
      OUTLINED_FUNCTION_29_12();
      uint64_t v107 = *v104;
      *uint64_t v108 = *v104;
      uint64_t v109 = *(void (**)(__int128 *))(v106 + 16);
      v109(&v148);
      swift_retain();
      (*(void (**)(__int128 *, uint64_t))(v106 + 8))(&v148, v105);
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v104,  &demangling cache variable for type metadata for (contact: PhoneCallNLv4Contact, contactQuery: ContactQuery));
      uint64_t v110 = &v148;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v111);
      uint64_t v112 = v103;
      uint64_t v113 = *(void *)(v148 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v113);
      uint64_t v114 = v113;
      uint64_t v103 = v112;
      uint64_t v115 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v114, v107);
      specialized ContiguousArray._endMutation()(v115);
      v101 += v112;
      --v99;
    }

    while (v99);
    uint64_t v142 = v109;
    uint64_t v116 = (void *)v148;
    uint64_t v117 = v141;
    OUTLINED_FUNCTION_129();
    uint64_t v118 = *((void *)v117 + 2);
    if (v118)
    {
      uint64_t v136 = v116;
      *(void *)&__int128 v148 = _swiftEmptyArrayStorage;
      OUTLINED_FUNCTION_36_1();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v119 = (uint64_t)v138;
      uint64_t v121 = v143;
      uint64_t v120 = v144;
      uint64_t v122 = v135;
      uint64_t v123 = (uint64_t)v140;
      do
      {
        uint64_t v124 = v123;
        OUTLINED_FUNCTION_35_9(v123, v119);
        OUTLINED_FUNCTION_29_12();
        v142(v110);
        uint64_t v125 = *(void (**)(uint64_t, __int128 *, uint64_t))(v121 + 32);
        v125((uint64_t)v122, v110, v120);
        OUTLINED_FUNCTION_13_5(v119);
        uint64_t v110 = (__int128 *)v148;
        if ((swift_isUniquelyReferenced_nonNull_native(v148) & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v110 = (__int128 *)v148;
        }

        unint64_t v127 = *((void *)v110 + 2);
        unint64_t v126 = *((void *)v110 + 3);
        if (v127 >= v126 >> 1)
        {
          OUTLINED_FUNCTION_20_13(v126);
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v110 = (__int128 *)v148;
        }

        *((void *)v110 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v127 + 1;
        uint64_t v121 = v143;
        uint64_t v120 = v144;
        v125( (uint64_t)v110 + ((*(unsigned __int8 *)(v121 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80))
        + *(void *)(v143 + 72) * v127,
          v122,
          v144);
        *(void *)&__int128 v148 = v110;
        uint64_t v123 = v124 + v112;
        --v118;
      }

      while (v118);
      swift_bridgeObjectRelease_n(v141, 2LL);
    }

    else
    {
LABEL_98:
      OUTLINED_FUNCTION_129();
      uint64_t v110 = (__int128 *)_swiftEmptyArrayStorage;
    }

    specialized _arrayForceCast<A, B>(_:)();
    Swift::String v20 = v128;
    swift_bridgeObjectRelease();
    uint64_t v150 = 0LL;
    __int128 v148 = 0u;
    __int128 v149 = 0u;
    specialized _arrayForceCast<A, B>(_:)();
    uint64_t v130 = v129;
    OUTLINED_FUNCTION_76();
    swift_bridgeObjectRelease();
    uint64_t v131 = v137;
    v137[3] = (uint64_t)&type metadata for PhoneCallNLv4Intent;
    v131[4] = (uint64_t)&protocol witness table for PhoneCallNLv4Intent;
    *uint64_t v131 = OUTLINED_FUNCTION_8_2((uint64_t)&unk_3FA720, 120LL);
    uint64_t v133 = v130;
    OUTLINED_FUNCTION_8_22();
    unint64_t v23 = v110;
    goto LABEL_100;
  }

  if (v58 < 0) {
    uint64_t v66 = v58;
  }
  else {
    uint64_t v66 = v58 & 0xFFFFFFFFFFFFFF8LL;
  }
  OUTLINED_FUNCTION_36_1();
  uint64_t v60 = _CocoaArrayWrapper.endIndex.getter(v66);
  OUTLINED_FUNCTION_129();
  if (!v60) {
    goto LABEL_75;
  }
LABEL_62:
  *(void *)&__int128 v148 = _swiftEmptyArrayStorage;
  OUTLINED_FUNCTION_17_23();
  if ((v60 & 0x8000000000000000LL) == 0)
  {
    uint64_t v61 = 0LL;
    uint64_t v62 = v148;
    do
    {
      if ((v58 & 0xC000000000000001LL) != 0)
      {
        uint64_t v63 = specialized _ArrayBuffer._getElementSlowPath(_:)(v61, v58);
      }

      else
      {
        uint64_t v63 = *(void *)(v58 + 8 * v61 + 32);
        swift_retain();
      }

      *(void *)&__int128 v148 = v62;
      unint64_t v64 = *(void *)(v62 + 16);
      if (v64 >= *(void *)(v62 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v62 = v148;
      }

      ++v61;
      *(void *)(v62 + ++*(void *)(v0 + 16) = v64 + 1;
      uint64_t v65 = v62 + 16 * v64;
      *(void *)(v65 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v63;
      *(_BYTE *)(v65 + 40) = 1;
    }

    while (v60 != v61);
    goto LABEL_75;
  }

LABEL_104:
  __break(1u);
}

uint64_t sub_A94DC()
{
  if (*(void *)(v0 + 56)) {
    __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 32));
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 120LL, 7LL);
}

uint64_t outlined init with take of (contact: PhoneCallNLv4Contact, contactQuery: ContactQuery)( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (contact: PhoneCallNLv4Contact, contactQuery: ContactQuery));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for NLv4JoinTransformer()
{
  return &type metadata for NLv4JoinTransformer;
}

uint64_t outlined consume of PhoneCallEmergencyType(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t outlined copy of PhoneCallEmergencyType(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

void *OUTLINED_FUNCTION_6_32(uint64_t a1)
{
  return static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)((void *)(v1 + 352), a1, v2, v2);
}

  ;
}

void OUTLINED_FUNCTION_17_23()
{
}

void OUTLINED_FUNCTION_19_17(uint64_t a1, uint64_t a2)
{
}

BOOL OUTLINED_FUNCTION_20_13@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_22_14(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

  ;
}

uint64_t OUTLINED_FUNCTION_30_11(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_31_13()
{
  return swift_retain(v0);
}

void OUTLINED_FUNCTION_33_15()
{
}

uint64_t OUTLINED_FUNCTION_34_13(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1LL, v2);
}

void OUTLINED_FUNCTION_35_9(uint64_t a1, uint64_t a2)
{
}

  ;
}

uint64_t OUTLINED_FUNCTION_37_11()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v0);
}

uint64_t App.toUsoEntityBuilder(locale:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for UsoEntityBuilder_common_App(0LL);
  OUTLINED_FUNCTION_15_2(v7);
  uint64_t v8 = UsoEntityBuilder_common_App.init()();
  uint64_t v9 = type metadata accessor for AppInformationResolver(0LL);
  OUTLINED_FUNCTION_15_2(v9);
  uint64_t v10 = swift_retain();
  uint64_t v11 = AppInformationResolver.init(app:)(v10);
  uint64_t v12 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)(a1);
  uint64_t v14 = v13;
  swift_release(v11);
  if (v14)
  {
    dispatch thunk of UsoEntityBuilder_common_App.setName(value:)(v12, v14);
    swift_bridgeObjectRelease();
  }

  uint64_t v15 = App.appIdentifier.getter();
  if (v16)
  {
    uint64_t v17 = v15;
    uint64_t v18 = v16;
    uint64_t v19 = dispatch thunk of UsoEntityBuilder_common_App.name.getter();
    if (v19)
    {
      uint64_t v20 = v19;
      UsoIdentifier.init(value:appBundleId:namespace:)( v17,  v18,  0x746163696C707041LL,  0xEC000000736E6F69LL,  0x64695F6D657469LL,  0xE700000000000000LL);
      dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)(v6);
      swift_release(v20);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
    }

    else
    {
      swift_bridgeObjectRelease();
    }
  }

  return v8;
}

Swift::Bool __swiftcall App.isPhoneFirstPartyApp()()
{
  uint64_t v1 = App.appIdentifier.getter();
  static PhoneCallAppNameConstants.isPhone(appId:)(v1, v2);
  OUTLINED_FUNCTION_27_2();
  return v0 & 1;
}

void App.getAppName(forLocale:appInfoBuilder:)(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, a1, v4, v5);
  OUTLINED_FUNCTION_6();
}

uint64_t App.toSpeakableStringAppName(forLocale:appInfoBuilder:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(v3, a1, v6, v7);
  if (v9)
  {
    SpeakableString.init(print:speak:)(v8, v9, 0LL, 0LL);
    uint64_t v10 = 0LL;
  }

  else
  {
    uint64_t v10 = 1LL;
  }

  uint64_t v11 = type metadata accessor for SpeakableString(0LL);
  return __swift_storeEnumTagSinglePayload(a3, v10, 1LL, v11);
}

uint64_t App.settingsUrl.getter()
{
  char v0 = (uint8_t *)0xD000000000000010LL;
  uint64_t v1 = type metadata accessor for PhoneError(0LL);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = App.appIdentifier.getter();
  static PhoneCallAppNameConstants.isPhone(appId:)(v5, v6);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    if (App.isFaceTime()())
    {
      return 0xD000000000000013LL;
    }

    else
    {
      uint64_t v10 = App.appIdentifier.getter();
      if (v11)
      {
        String.append(_:)(*(Swift::String *)&v10);
        swift_bridgeObjectRelease();
        return 0x666572702D707061LL;
      }

      else
      {
        if (one-time initialization token for siriPhone != -1) {
          swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
        }
        uint64_t v12 = type metadata accessor for Logger(0LL);
        uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
        uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
        os_log_type_t v15 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v14, v15))
        {
          char v0 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)char v0 = 0;
          _os_log_impl(&dword_0, v14, v15, "#App+SiriKitPhone missing app identifier when getting settingsUrl", v0, 2u);
          swift_slowDealloc(v0, -1LL, -1LL);
        }

        swift_storeEnumTagMultiPayload(v4, v1, 19LL);
        unint64_t v16 = lazy protocol witness table accessor for type PhoneError and conformance PhoneError();
        swift_allocError(v1, v16, 0LL, 0LL);
        PhoneError.logged()(v17);
        uint64_t v18 = outlined destroy of SingleResultCallHistoryModel(v4, type metadata accessor for PhoneError);
        swift_willThrow(v18, v19, v20, v21, v22, v23, v24, v25);
      }
    }
  }

  return (uint64_t)v0;
}

uint64_t App.toAppDescription(deviceState:appInfoBuilder:)@<X0>( void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v45 = (int *)type metadata accessor for AppDescription(0LL);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v41 = v6;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v43 = *(void *)(v7 - 8);
  uint64_t v44 = v7;
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v42 = v8;
  uint64_t v40 = type metadata accessor for CommonDirectAction(0LL);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v11 = (uint64_t *)(v10 - v9);
  uint64_t v12 = type metadata accessor for Locale(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v16 = v15 - v14;
  uint64_t v18 = a1[3];
  uint64_t v17 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v18);
  dispatch thunk of DeviceState.siriLocale.getter(v18, v17);
  uint64_t v19 = a2[3];
  uint64_t v20 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v19);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 16))(v3, v16, v19, v20);
  uint64_t v23 = v22;
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v12);
  if (!v23) {
    goto LABEL_5;
  }
  uint64_t v24 = App.appIdentifier.getter();
  if (!v25)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v37 = 1LL;
    uint64_t v32 = (uint64_t)v45;
    uint64_t v36 = a3;
    return __swift_storeEnumTagSinglePayload(v36, v37, 1LL, v32);
  }

  uint64_t v26 = v25;
  *uint64_t v11 = v24;
  v11[1] = v25;
  uint64_t v39 = v24;
  swift_storeEnumTagMultiPayload(v11, v40, 3LL);
  swift_bridgeObjectRetain();
  CommonDirectAction.toSAIntentGroupRunSiriKitExecutor(deviceState:)(a1);
  uint64_t v27 = v21;
  uint64_t v29 = v28;
  outlined destroy of SingleResultCallHistoryModel((uint64_t)v11, type metadata accessor for CommonDirectAction);
  BOOL v30 = App.isFirstParty()();
  BOOL v31 = v30;
  UUID.init()(v30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v41, v42, v44);
  uint64_t v32 = (uint64_t)v45;
  uint64_t v33 = (uint64_t *)(v41 + v45[5]);
  uint64_t *v33 = v27;
  v33[1] = v23;
  uint64_t v34 = (uint64_t *)(v41 + v45[6]);
  *uint64_t v34 = v39;
  v34[1] = v26;
  *(_BYTE *)(v41 + v45[7]) = v31;
  unint64_t v35 = type metadata accessor for SAIntentGroupRunSiriKitExecutor();
  CodableAceObject.init(wrappedValue:)(v29, v35);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
  uint64_t v36 = a3;
  outlined init with take of AppDescription(v41, a3);
  uint64_t v37 = 0LL;
  return __swift_storeEnumTagSinglePayload(v36, v37, 1LL, v32);
}

void Unmanaged<>.stringValue.getter(void *a1)
{
  id v2 = a1;
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);

  OUTLINED_FUNCTION_6();
}

uint64_t outlined init with take of AppDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppDescription(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

PhoneCallFlowDelegatePlugin::UnsupportedFlowCATPatternsIdentifiers_optional __swiftcall UnsupportedFlowCATPatternsIdentifiers.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of UnsupportedFlowCATPatternsIdentifiers.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7) {
    return (PhoneCallFlowDelegatePlugin::UnsupportedFlowCATPatternsIdentifiers_optional)7;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::UnsupportedFlowCATPatternsIdentifiers_optional)v3;
  }
}

uint64_t UnsupportedFlowCATPatternsIdentifiers.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_A9E90 + 4 * byte_3229C0[a1]))( 0xD000000000000021LL,  0x8000000000341990LL);
}

  ;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance UnsupportedFlowCATPatternsIdentifiers( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance UnsupportedFlowCATPatternsIdentifiers()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UnsupportedFlowCATPatternsIdentifiers( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance UnsupportedFlowCATPatternsIdentifiers( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::UnsupportedFlowCATPatternsIdentifiers_optional protocol witness for RawRepresentable.init(rawValue:) in conformance UnsupportedFlowCATPatternsIdentifiers@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::UnsupportedFlowCATPatternsIdentifiers_optional *a2@<X8>)
{
  result.int value = UnsupportedFlowCATPatternsIdentifiers.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance UnsupportedFlowCATPatternsIdentifiers( uint64_t *a1@<X8>)
{
  *a1 = UnsupportedFlowCATPatternsIdentifiers.rawValue.getter(*v1);
  a1[1] = v3;
  OUTLINED_FUNCTION_2();
}

void StartCallErrorWithCodeDownTimeRestrictionEnabledParameters.contacts.setter()
{
  *uint64_t v1 = v0;
  OUTLINED_FUNCTION_2();
}

uint64_t StartCallErrorWithCodeAirplaneModeEnabledParameters.isEmergency.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

void UnsupportedFlowSearchCallHistoryParameters.nonDefaultAppName.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnsupportedFlowSearchCallHistoryParameters(0LL);
  outlined init with copy of Result<TemplatingResult, Error>( v1 + *(int *)(v3 + 24),  a1,  &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_2();
}

uint64_t type metadata accessor for UnsupportedFlowSearchCallHistoryParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for UnsupportedFlowSearchCallHistoryParameters,  (uint64_t)&nominal type descriptor for UnsupportedFlowSearchCallHistoryParameters);
}

uint64_t UnsupportedFlowSearchCallHistoryParameters.nonDefaultAppName.setter()
{
  uint64_t v2 = OUTLINED_FUNCTION_32_11();
  uint64_t v3 = type metadata accessor for UnsupportedFlowSearchCallHistoryParameters(v2);
  return OUTLINED_FUNCTION_16_16(v0, v1 + *(int *)(v3 + 24));
}

Swift::Void (__swiftcall *UnsupportedFlowSearchCallHistoryParameters.nonDefaultAppName.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t UnsupportedFlowSearchCallHistoryParameters.supportsAppLaunch.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(OUTLINED_FUNCTION_21_17() + 28));
}

void UnsupportedFlowSearchCallHistoryParameters.asKeyValuePairs()()
{
  uint64_t v3 = v2 - v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_8_2(v4, 224LL);
  OUTLINED_FUNCTION_42_1((__n128 *)v5, (__n128)xmmword_31F580);
  uint64_t v6 = *v0;
  if (*v0)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(0LL);
    uint64_t v8 = v6;
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v7 = 0LL;
    *(void *)(v5 + 56) = 0LL;
    *(void *)(v5 + 64) = 0LL;
  }

  *(void *)(v5 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v8;
  *(void *)(v5 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v7;
  *(void *)(v5 + 80) = 0x6D6563696F567369LL;
  *(void *)(v5 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0xEB000000006C6961LL;
  *(_BYTE *)(v5 + 96) = *((_BYTE *)v0 + 8);
  *(void *)(v5 + 120) = &type metadata for Bool;
  *(void *)(v5 + outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 - 168), v0 - 128) = 0xD000000000000011LL;
  *(void *)(v5 + 136) = 0x8000000000346FE0LL;
  uint64_t v9 = OUTLINED_FUNCTION_21_17();
  outlined init with copy of Result<TemplatingResult, Error>( (uint64_t)v0 + *(int *)(v9 + 24),  v3,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_26_0();
  if (__swift_getEnumTagSinglePayload(v3, 1LL, v10) == 1)
  {
    swift_retain();
    outlined destroy of UUID?(v3, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
  }

  else
  {
    *(void *)(v5 + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v10;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v5 + 144));
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))( boxed_opaque_existential_1,  v3,  v10);
    swift_retain();
  }

  *(void *)(v5 + 176) = 0xD000000000000011LL;
  *(void *)(v5 + 184) = 0x8000000000346FC0LL;
  char v12 = *((_BYTE *)v0 + *(int *)(v9 + 28));
  *(void *)(v5 + 2++*(void *)(v0 + 16) = &type metadata for Bool;
  *(_BYTE *)(v5 + 19__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v12;
  OUTLINED_FUNCTION_7_5();
}

void UnsupportedFlowSearchCallHistoryParameters.init(device:isVoicemail:nonDefaultAppName:supportsAppLaunch:)( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)a5 = a1;
  *(_BYTE *)(a5 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = a2;
  uint64_t v8 = OUTLINED_FUNCTION_21_17();
  outlined init with take of SpeakableString?(a3, a5 + *(int *)(v8 + 24));
  *(_BYTE *)(a5 + *(int *)(v8 + 28)) = a4;
  OUTLINED_FUNCTION_6();
}

uint64_t HangUpTipGenerator.key.getter()
{
  return *v0;
}

void UnsupportedFlowUnsupportedEmergencyContactCallParameters.thirdPartyAppName.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnsupportedFlowUnsupportedEmergencyContactCallParameters(0LL);
  outlined init with copy of Result<TemplatingResult, Error>( v1 + *(int *)(v3 + 20),  a1,  &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_2();
}

uint64_t type metadata accessor for UnsupportedFlowUnsupportedEmergencyContactCallParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for UnsupportedFlowUnsupportedEmergencyContactCallParameters,  (uint64_t)&nominal type descriptor for UnsupportedFlowUnsupportedEmergencyContactCallParameters);
}

uint64_t UnsupportedFlowUnsupportedEmergencyContactCallParameters.thirdPartyAppName.setter()
{
  uint64_t v2 = OUTLINED_FUNCTION_32_11();
  uint64_t v3 = type metadata accessor for UnsupportedFlowUnsupportedEmergencyContactCallParameters(v2);
  return OUTLINED_FUNCTION_16_16(v0, v1 + *(int *)(v3 + 20));
}

Swift::Void (__swiftcall *UnsupportedFlowUnsupportedEmergencyContactCallParameters.thirdPartyAppName.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t UnsupportedFlowUnsupportedEmergencyContactCallParameters.asKeyValuePairs()()
{
  uint64_t v3 = v2 - v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_8_2(v4, 128LL);
  *(_OWORD *)(v5 + ++*(void *)(v0 + 16) = xmmword_31D880;
  *(void *)(v5 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0x6954656361467369LL;
  *(void *)(v5 + 40) = 0xEA0000000000656DLL;
  *(_BYTE *)(v5 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = *v0;
  uint64_t v6 = (void *)(v5 + 96);
  *(void *)(v5 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = &type metadata for Bool;
  *(void *)(v5 + 80) = 0xD000000000000011LL;
  *(void *)(v5 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0x8000000000347000LL;
  uint64_t v7 = type metadata accessor for UnsupportedFlowUnsupportedEmergencyContactCallParameters(0LL);
  outlined init with copy of Result<TemplatingResult, Error>( (uint64_t)&v0[*(int *)(v7 + 20)],  v3,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_26_0();
  if (__swift_getEnumTagSinglePayload(v3, 1LL, v8) == 1)
  {
    outlined destroy of UUID?(v3, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v5 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
  }

  else
  {
    *(void *)(v5 + 120) = v8;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v6);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))( boxed_opaque_existential_1,  v3,  v8);
  }

  return v5;
}

uint64_t UnsupportedFlowUnsupportedEmergencyContactCallParameters.init(isFaceTime:thirdPartyAppName:)@<X0>( char a1@<W0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  *a3 = a1;
  return outlined init with take of SpeakableString?(a2, v4);
}

void UnsupportedFlowUnsupportedOnDeviceTypeParameters.asKeyValuePairs()(unint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_8_2(v2, 80LL);
  OUTLINED_FUNCTION_42_1(v3, (__n128)xmmword_31D870);
  if (a1)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState(0LL);
    unint64_t v5 = a1;
  }

  else
  {
    unint64_t v5 = 0LL;
    uint64_t v4 = 0LL;
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  v3[3].n128_u64[0] = v5;
  v3[4].n128_u64[1] = v4;
  swift_retain();
  OUTLINED_FUNCTION_2();
}

uint64_t UnsupportedFlowCATPatternsExecutor.deleteCallHistory()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(33LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

uint64_t UnsupportedFlowCATPatternsExecutor.searchCallHistory(isVoicemail:supportsAppLaunch:_:)( char a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v4;
  *(void *)(v5 + ++*(void *)(v0 + 16) = a3;
  *(_BYTE *)(v5 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 9) = a2;
  *(_BYTE *)(v5 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a1;
  uint64_t v6 = OUTLINED_FUNCTION_21_17();
  *(void *)(v5 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = OUTLINED_FUNCTION_7_33(v6);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t UnsupportedFlowCATPatternsExecutor.searchCallHistory(isVoicemail:supportsAppLaunch:_:)()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void (**)(uint64_t))(v0 + 16);
  char v4 = *(_BYTE *)(v0 + 89);
  char v5 = *(_BYTE *)(v0 + 88);
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_17_24(v6);
  *(void *)uint64_t v1 = 0LL;
  *(_BYTE *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v5;
  *(_BYTE *)(v1 + *(int *)(v2 + 28)) = v4;
  v3(v1);
  UnsupportedFlowSearchCallHistoryParameters.asKeyValuePairs()();
  *(void *)(v0 + 56) = v7;
  uint64_t v8 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 64) = v8;
  void *v8 = v0;
  v8[1] = UnsupportedFlowCATPatternsExecutor.searchCallHistory(isVoicemail:supportsAppLaunch:_:);
  OUTLINED_FUNCTION_27_3();
  return v10(0xD000000000000021LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_6_33();
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_25_18();
  OUTLINED_FUNCTION_23_3();
  uint64_t v0 = OUTLINED_FUNCTION_22_15();
  return OUTLINED_FUNCTION_4_31(v0, v1);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_25_18();
  OUTLINED_FUNCTION_23_3();
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t UnsupportedFlowCATPatternsExecutor.startCallEmergency()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(34LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

uint64_t UnsupportedFlowCATPatternsExecutor.startCallEmergencyInRetailStore()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(47LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

uint64_t UnsupportedFlowCATPatternsExecutor.unsupportedEmergencyContactCall(isFaceTime:_:)( char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v3;
  *(void *)(v4 + ++*(void *)(v0 + 16) = a2;
  *(_BYTE *)(v4 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a1;
  uint64_t v5 = type metadata accessor for UnsupportedFlowUnsupportedEmergencyContactCallParameters(0LL);
  *(void *)(v4 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = OUTLINED_FUNCTION_7_33(v5);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t UnsupportedFlowCATPatternsExecutor.unsupportedEmergencyContactCall(isFaceTime:_:)()
{
  uint64_t v1 = *(_BYTE **)(v0 + 48);
  unint64_t v2 = *(void (**)(_BYTE *))(v0 + 16);
  char v3 = *(_BYTE *)(v0 + 88);
  uint64_t v4 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_17_24(v4);
  *uint64_t v1 = v3;
  v2(v1);
  uint64_t v5 = UnsupportedFlowUnsupportedEmergencyContactCallParameters.asKeyValuePairs()();
  *(void *)(v0 + 56) = v5;
  uint64_t v6 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 64) = v6;
  *uint64_t v6 = v0;
  v6[1] = UnsupportedFlowCATPatternsExecutor.unsupportedEmergencyContactCall(isFaceTime:_:);
  OUTLINED_FUNCTION_27_3();
  return OUTLINED_FUNCTION_12_28(0xD00000000000002FLL, v7, v5, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_6_33();
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_25_18();
  OUTLINED_FUNCTION_23_3();
  uint64_t v0 = OUTLINED_FUNCTION_22_15();
  return OUTLINED_FUNCTION_4_31(v0, v1);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_25_18();
  OUTLINED_FUNCTION_23_3();
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v0 + 8));
}

void outlined destroy of UnsupportedFlowSearchCallHistoryParameters()
{
  uint64_t v0 = OUTLINED_FUNCTION_32_11();
  uint64_t v2 = v1(v0);
  OUTLINED_FUNCTION_2_0(v2);
  OUTLINED_FUNCTION_2();
}

uint64_t UnsupportedFlowCATPatternsExecutor.unsupportedOnDeviceType(_:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  OUTLINED_FUNCTION_19_1();
  return swift_task_switch(v4, v5, v6);
}

uint64_t UnsupportedFlowCATPatternsExecutor.unsupportedOnDeviceType(_:)()
{
  *(void *)(v0 + ++*(void *)(v0 + 16) = 0LL;
  (*(void (**)(uint64_t))(v0 + 24))(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  char v3 = (__n128 *)OUTLINED_FUNCTION_8_2(v2, 80LL);
  *(void *)(v0 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v3;
  OUTLINED_FUNCTION_42_1(v3, (__n128)xmmword_31D870);
  uint64_t v4 = 0LL;
  if (v1)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState(0LL);
  }

  else
  {
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  *(void *)(v0 + 56) = v1;
  v3[3].n128_u64[0] = v1;
  v3[4].n128_u64[1] = v4;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc(v5);
  *(void *)(v0 + 64) = v6;
  *uint64_t v6 = v0;
  v6[1] = UnsupportedFlowCATPatternsExecutor.unsupportedOnDeviceType(_:);
  OUTLINED_FUNCTION_27_3();
  return OUTLINED_FUNCTION_12_28(0xD000000000000027LL, v7, (uint64_t)v3, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  swift_release(*(void *)(v0 + 56));
  unint64_t v1 = OUTLINED_FUNCTION_22_15();
  return OUTLINED_FUNCTION_4_31(v1, v2);
}

{
  uint64_t v0;
  swift_release(*(void *)(v0 + 56));
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t UnsupportedFlowCATPatternsExecutor.unsupportedOnDeviceType(_:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 64);
  *(void *)(*v2 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v1;
  swift_task_dealloc(v5);
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v4 + 80) = a1;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v6, v7, v8);
}

uint64_t UnsupportedFlowCATPatternsExecutor.unsupportedThirdPartyCall()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCall();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(41LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

void UnsupportedFlowCATPatternsExecutor.__allocating_init(templateDir:options:globals:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void UnsupportedFlowCATPatternsExecutor.init(templateDir:options:globals:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = OUTLINED_FUNCTION_32_11();
  uint64_t v7 = type metadata accessor for CATOption(v6);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v11 = v10 - v9;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v14 = v13 - v12;
  outlined init with copy of Result<TemplatingResult, Error>( v3,  v13 - v12,  (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, a2, v7);
  CATWrapper.init(templateDir:options:globals:)(v14, v11, a3);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a2, v7);
  outlined destroy of UUID?(v3, (uint64_t *)&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_7_5();
}

unint64_t lazy protocol witness table accessor for type UnsupportedFlowCATPatternsIdentifiers and conformance UnsupportedFlowCATPatternsIdentifiers()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsupportedFlowCATPatternsIdentifiers and conformance UnsupportedFlowCATPatternsIdentifiers;
  if (!lazy protocol witness table cache variable for type UnsupportedFlowCATPatternsIdentifiers and conformance UnsupportedFlowCATPatternsIdentifiers)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for UnsupportedFlowCATPatternsIdentifiers,  &type metadata for UnsupportedFlowCATPatternsIdentifiers);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedFlowCATPatternsIdentifiers and conformance UnsupportedFlowCATPatternsIdentifiers);
  }

  return result;
}

uint64_t protocol witness for UnsupportedFlowCATPatternsExecuting.deleteCallHistory() in conformance UnsupportedFlowCATPatternsExecutor()
{
  unint64_t v2 = *(int **)(**v0 + class metadata base offset for UnsupportedFlowCATPatternsExecutor);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  return v5();
}

uint64_t protocol witness for UnsupportedFlowCATPatternsExecuting.searchCallHistory(isVoicemail:supportsAppLaunch:_:) in conformance UnsupportedFlowCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(int **)(class metadata base offset for UnsupportedFlowCATPatternsExecutor + **v4 + 8);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc(v10[1]);
  *(void *)(v5 + ++*(void *)(v0 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  return v13(a1, a2, a3, a4);
}

uint64_t protocol witness for UnsupportedFlowCATPatternsExecuting.startCallEmergency() in conformance UnsupportedFlowCATPatternsExecutor()
{
  unint64_t v2 = *(int **)(class metadata base offset for UnsupportedFlowCATPatternsExecutor + **v0 + 16);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  return v5();
}

uint64_t protocol witness for UnsupportedFlowCATPatternsExecuting.startCallEmergencyInRetailStore() in conformance UnsupportedFlowCATPatternsExecutor()
{
  unint64_t v2 = *(int **)(class metadata base offset for UnsupportedFlowCATPatternsExecutor + **v0 + 24);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  return v5();
}

uint64_t protocol witness for UnsupportedFlowCATPatternsExecuting.unsupportedEmergencyContactCall(isFaceTime:_:) in conformance UnsupportedFlowCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for UnsupportedFlowCATPatternsExecutor + **v3 + 32);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  return v11(a1, a2, a3);
}

uint64_t protocol witness for UnsupportedFlowCATPatternsExecuting.unsupportedOnDeviceType(_:) in conformance UnsupportedFlowCATPatternsExecutor( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for UnsupportedFlowCATPatternsExecutor + **v2 + 40);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  return v9(a1, a2);
}

uint64_t protocol witness for UnsupportedFlowCATPatternsExecuting.unsupportedThirdPartyCall() in conformance UnsupportedFlowCATPatternsExecutor()
{
  unint64_t v2 = *(int **)(class metadata base offset for UnsupportedFlowCATPatternsExecutor + **v0 + 48);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  return v5();
}

uint64_t storeEnumTagSinglePayload for UnsupportedFlowCATPatternsIdentifiers( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = 1;
  }
  else {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_AB074 + 4 * byte_3229CC[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_AB0A8 + 4 * byte_3229C7[v4]))();
}

uint64_t sub_AB0A8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_AB0B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xAB0B8LL);
  }
  return result;
}

uint64_t sub_AB0C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xAB0CCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_AB0D0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_AB0D8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnsupportedFlowCATPatternsIdentifiers()
{
  return &type metadata for UnsupportedFlowCATPatternsIdentifiers;
}

uint64_t initializeBufferWithCopyOfBuffer for UnsupportedFlowSearchCallHistoryParameters( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16LL) & ~(unint64_t)v3);
    swift_retain();
  }

  else
  {
    uint64_t v7 = a1;
    *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *((_BYTE *)a2 + 8);
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SpeakableString(0LL);
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1LL, v11))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0LL, 1LL, v11);
    }

    *(_BYTE *)(v7 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  }

  return v7;
}

uint64_t destroy for UnsupportedFlowSearchCallHistoryParameters(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for SpeakableString(0LL);
  uint64_t result = __swift_getEnumTagSinglePayload(v4, 1LL, v5);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }
  return result;
}

uint64_t initializeWithCopy for UnsupportedFlowSearchCallHistoryParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0LL, 1LL, v9);
  }

  *(_BYTE *)(a1 + *(int *)(a3 + 28)) = *(_BYTE *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t *assignWithCopy for UnsupportedFlowSearchCallHistoryParameters(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_retain();
  swift_release(v6);
  *((_BYTE *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *((_BYTE *)a2 + 8);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1LL, v10);
  int v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1LL, v10);
  if (!EnumTagSinglePayload)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v8, v9, v10);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v12)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0LL, 1LL, v10);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t initializeWithTake for UnsupportedFlowSearchCallHistoryParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0LL, 1LL, v9);
  }

  *(_BYTE *)(a1 + *(int *)(a3 + 28)) = *(_BYTE *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t *assignWithTake for UnsupportedFlowSearchCallHistoryParameters(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  *((_BYTE *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *((_BYTE *)a2 + 8);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1LL, v10);
  int v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1LL, v10);
  if (!EnumTagSinglePayload)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v12)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0LL, 1LL, v10);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t getEnumTagSinglePayload for UnsupportedFlowSearchCallHistoryParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_AB67C);
}

void sub_AB67C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    OUTLINED_FUNCTION_6();
  }

  else
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_3(a1 + *(int *)(a3 + 24), a2, v6);
  }

uint64_t storeEnumTagSinglePayload for UnsupportedFlowSearchCallHistoryParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_AB6FC);
}

void sub_AB6FC(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 2147483646)
  {
    *a1 = a2;
    OUTLINED_FUNCTION_6();
  }

  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_32_6((uint64_t)a1 + *(int *)(a4 + 24), a2, a2, v7);
  }

void type metadata completion function for UnsupportedFlowSearchCallHistoryParameters(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = &unk_322B08;
  type metadata accessor for SpeakableString?(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(v2 - 8) + 64LL;
    void v4[3] = &unk_322B08;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
  }

uint64_t *initializeBufferWithCopyOfBuffer for UnsupportedFlowUnsupportedEmergencyContactCallParameters( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v10 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for SpeakableString(0LL);
    if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1LL, v8))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
      __swift_storeEnumTagSinglePayload((uint64_t)v6, 0LL, 1LL, v8);
    }
  }

  return v3;
}

uint64_t destroy for UnsupportedFlowUnsupportedEmergencyContactCallParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for SpeakableString(0LL);
  uint64_t result = __swift_getEnumTagSinglePayload(v2, 1LL, v3);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  }
  return result;
}

_BYTE *initializeWithCopy for UnsupportedFlowUnsupportedEmergencyContactCallParameters( _BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1LL, v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0LL, 1LL, v7);
  }

  return a1;
}

_BYTE *assignWithCopy for UnsupportedFlowUnsupportedEmergencyContactCallParameters( _BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v5, 1LL, v7);
  int v9 = __swift_getEnumTagSinglePayload((uint64_t)v6, 1LL, v7);
  if (!EnumTagSinglePayload)
  {
    uint64_t v10 = *(void *)(v7 - 8);
    if (!v9)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v5, v6, v7);
      return a1;
    }

    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v5, v7);
    goto LABEL_6;
  }

  if (v9)
  {
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v11 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0LL, 1LL, v7);
  return a1;
}

_BYTE *initializeWithTake for UnsupportedFlowUnsupportedEmergencyContactCallParameters( _BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1LL, v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0LL, 1LL, v7);
  }

  return a1;
}

_BYTE *assignWithTake for UnsupportedFlowUnsupportedEmergencyContactCallParameters( _BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v5, 1LL, v7);
  int v9 = __swift_getEnumTagSinglePayload((uint64_t)v6, 1LL, v7);
  if (!EnumTagSinglePayload)
  {
    uint64_t v10 = *(void *)(v7 - 8);
    if (!v9)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v5, v6, v7);
      return a1;
    }

    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v5, v7);
    goto LABEL_6;
  }

  if (v9)
  {
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v11 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0LL, 1LL, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnsupportedFlowUnsupportedEmergencyContactCallParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_ABC68);
}

void sub_ABC68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 254)
  {
    OUTLINED_FUNCTION_6();
  }

  else
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_3(a1 + *(int *)(a3 + 20), a2, v6);
  }

uint64_t storeEnumTagSinglePayload for UnsupportedFlowUnsupportedEmergencyContactCallParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_ABCDC);
}

void sub_ABCDC(_BYTE *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 254)
  {
    *a1 = a2 + 1;
    OUTLINED_FUNCTION_6();
  }

  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_32_6((uint64_t)&a1[*(int *)(a4 + 20)], a2, a2, v7);
  }

void type metadata completion function for UnsupportedFlowUnsupportedEmergencyContactCallParameters( uint64_t a1)
{
  v4[0] = &unk_322B08;
  type metadata accessor for SpeakableString?(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
  }

uint64_t *initializeBufferWithCopyOfBuffer for UnsupportedFlowUnsupportedOnDeviceTypeParameters( uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for UnsupportedFlowUnsupportedOnDeviceTypeParameters(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v3);
  return a1;
}

uint64_t *assignWithTake for UnsupportedFlowUnsupportedOnDeviceTypeParameters(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnsupportedFlowUnsupportedOnDeviceTypeParameters( uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      uint64_t v3 = *a1;
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnsupportedFlowUnsupportedOnDeviceTypeParameters( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for UnsupportedFlowUnsupportedOnDeviceTypeParameters()
{
  return &type metadata for UnsupportedFlowUnsupportedOnDeviceTypeParameters;
}

uint64_t type metadata accessor for UnsupportedFlowCATPatternsExecutor(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for UnsupportedFlowCATPatternsExecutor,  (uint64_t)&nominal type descriptor for UnsupportedFlowCATPatternsExecutor);
}

uint64_t type metadata completion function for UnsupportedFlowCATPatternsExecutor(uint64_t a1)
{
  return swift_initClassMetadata2( a1,  0LL,  0LL,  v2,  a1 + class metadata base offset for UnsupportedFlowCATPatternsExecutor);
}

uint64_t ObjC metadata update function for UnsupportedFlowCATPatternsExecutor()
{
  return type metadata accessor for UnsupportedFlowCATPatternsExecutor(0LL);
}

uint64_t OUTLINED_FUNCTION_2_26(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_4_31(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_6_33()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 64);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_7_33(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t OUTLINED_FUNCTION_12_28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_16_16(uint64_t a1, uint64_t a2)
{
  return outlined assign with take of SpeakableString?(a1, a2);
}

uint64_t OUTLINED_FUNCTION_17_24(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1LL, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_22_15()
{
  return *(void *)(v0 + 80);
}

uint64_t OUTLINED_FUNCTION_31_14()
{
  return swift_release(*v0);
}

uint64_t OUTLINED_FUNCTION_32_11()
{
  return 0LL;
}

id static SPHCallHandleFormatting.normalizedHandle(for:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = [a1 value];
  if (!v6) {
    return 0LL;
  }
  uint64_t v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  unint64_t v10 = v9;
  swift_bridgeObjectRelease(v9);
  uint64_t v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000LL) == 0) {
    uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
  }
  if (!v11)
  {

    return 0LL;
  }

  int v12 = (char *)[a1 type];
  if (v12 == (_BYTE *)&dword_0 + 1)
  {
    id v19 = [(id)objc_opt_self(TUHandle) normalizedEmailAddressHandleForValue:v7];
  }

  else
  {
    if (v12 == (_BYTE *)&dword_0 + 2)
    {
      uint64_t v13 = PNCopyBestGuessCountryCodeForNumber(v7);
      if (v13)
      {
        uint64_t v14 = (void *)v13;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        uint64_t v16 = v15;

        uint64_t v17 = (void *)objc_opt_self(&OBJC_CLASS___TUHandle);
      }

      else
      {
        uint64_t v17 = (void *)objc_opt_self(&OBJC_CLASS___TUHandle);
        (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
        if (!v20)
        {
          NSString v21 = 0LL;
          goto LABEL_17;
        }

        uint64_t v16 = v20;
      }

      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v16);
LABEL_17:
      id v18 = [v17 normalizedPhoneNumberHandleForValue:v7 isoCountryCode:v21];

      return v18;
    }

    id v19 = [(id)objc_opt_self(TUHandle) normalizedGenericHandleForValue:v7];
  }

  id v18 = v19;

  return v18;
}

uint64_t static SPHCallHandleFormatter.countryCode.getter()
{
  id v0 = (id)TUNetworkCountryCode();
  if (!v0)
  {
    id v0 = (id)TUHomeCountryCode();
    if (!v0) {
      return 0LL;
    }
  }

  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);

  return v1;
}

uint64_t protocol witness for static SPHCallHandleFormatting.countryCode.getter in conformance SPHCallHandleFormatter()
{
  return static SPHCallHandleFormatter.countryCode.getter();
}

uint64_t type metadata accessor for SPHCallHandleFormatter()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin22SPHCallHandleFormatter);
}

uint64_t static PhoneCallControlRequestSupportPolicy.unsupportedSwitchToFaceTimeReason(for:action:sharedGlobals:)( uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v7 = PhoneCallControlAction.rawValue.getter(a3);
  if (v7 == 0xD000000000000015LL && v8 == 0x80000000003467E0LL)
  {
    uint64_t v10 = OUTLINED_FUNCTION_18_18(0x80000000003467E0LL);
    OUTLINED_FUNCTION_7_34(v10, v11, v12, v13, v14, v15, v16, v17, v108, v110, v111);
  }

  else
  {
    char v18 = OUTLINED_FUNCTION_4_32(v7, v8, v9, 0x80000000003467E0LL);
    uint64_t v19 = OUTLINED_FUNCTION_62();
    uint64_t v27 = OUTLINED_FUNCTION_7_34(v19, v20, v21, v22, v23, v24, v25, v26, v108, v110, v111);
    if ((v18 & 1) == 0)
    {
      OUTLINED_FUNCTION_13_28(v27, v28, v29, v30, v31, v32, v33, v34, v109, v110, v111);
      goto LABEL_11;
    }
  }

  OUTLINED_FUNCTION_17_25(v117);
  OUTLINED_FUNCTION_12_29();
  OUTLINED_FUNCTION_17_25(v114);
  OUTLINED_FUNCTION_12_29();
  uint64_t v35 = v112;
  uint64_t v36 = v113;
  OUTLINED_FUNCTION_17_25(&v110);
  uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 32))(v35, v36);
  __swift_destroy_boxed_opaque_existential_1(&v110);
  uint64_t v38 = __swift_destroy_boxed_opaque_existential_1(v114);
  OUTLINED_FUNCTION_13_28(v38, v39, v40, v41, v42, v43, v44, v45, v109, v110, v111);
  if ((v37 & 1) != 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v46 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v46, (uint64_t)static Logger.siriPhone);
    os_log_type_t v47 = OUTLINED_FUNCTION_41();
    if (OUTLINED_FUNCTION_87(v47))
    {
      unint64_t v48 = (_WORD *)OUTLINED_FUNCTION_1_0();
      OUTLINED_FUNCTION_9_27(v48);
      OUTLINED_FUNCTION_0_30( &dword_0,  v49,  v50,  "#PhoneCallControlRequestSupportPolicy cannot switch to FaceTime Audio because it is restricted in region.");
      uint64_t v51 = 6LL;
LABEL_65:
      OUTLINED_FUNCTION_0_2(v37);
      goto LABEL_66;
    }

    uint64_t v51 = 6LL;
    goto LABEL_66;
  }

uint64_t static PhoneCallControlRequestSupportPolicy.unsupportedCameraControlReason(for:action:sharedGlobals:)( uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6 = PhoneCallControlAction.rawValue.getter(a3);
  if (v6 == 0xD000000000000015LL && v7 == 0x80000000003467E0LL)
  {
    uint64_t v9 = OUTLINED_FUNCTION_18_18(0x80000000003467E0LL);
LABEL_5:
    OUTLINED_FUNCTION_7_34(v9, v10, v11, v12, v13, v14, v15, v16, v63, v65, v66);
    goto LABEL_6;
  }

  char v17 = OUTLINED_FUNCTION_4_32(v6, v7, v8, 0x80000000003467E0LL);
  uint64_t v9 = swift_bridgeObjectRelease();
  if ((v17 & 1) != 0) {
    goto LABEL_5;
  }
  uint64_t v33 = PhoneCallControlAction.rawValue.getter(a3);
  if (v33 == 0x43656C6261736964LL && v34 == 0xED00006172656D61LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, 0x43656C6261736964LL, 0xED00006172656D61LL, 0LL);
    uint64_t v37 = swift_bridgeObjectRelease();
    if ((v36 & 1) == 0)
    {
      uint64_t v45 = OUTLINED_FUNCTION_7_34(v37, v38, v39, v40, v41, v42, v43, v44, v63, v65, v66);
LABEL_20:
      OUTLINED_FUNCTION_13_28(v45, v46, v47, v48, v49, v50, v51, v52, v64, v65, v66);
      return 10LL;
    }
  }

  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 144))(ObjectType, a2);
  char v55 = v54;
  uint64_t v45 = OUTLINED_FUNCTION_7_34(v54, v56, v57, v58, v59, v60, v61, v62, v63, v65, v66);
  if ((v55 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_6:
  OUTLINED_FUNCTION_49_0(v70);
  OUTLINED_FUNCTION_11_26();
  OUTLINED_FUNCTION_49_0(v69);
  OUTLINED_FUNCTION_11_26();
  uint64_t v18 = v67;
  uint64_t v19 = v68;
  OUTLINED_FUNCTION_49_0(&v65);
  uint64_t v20 = (os_log_s *)(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 32))(v18, v19);
  __swift_destroy_boxed_opaque_existential_1(&v65);
  uint64_t v21 = __swift_destroy_boxed_opaque_existential_1(v69);
  OUTLINED_FUNCTION_13_28(v21, v22, v23, v24, v25, v26, v27, v28, v64, v65, v66);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v29 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v29, (uint64_t)static Logger.siriPhone);
  os_log_type_t v30 = OUTLINED_FUNCTION_41();
  if (os_log_type_enabled(v20, v30))
  {
    uint64_t v31 = (uint8_t *)OUTLINED_FUNCTION_1_0();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl( &dword_0,  v20,  v30,  "#PhoneCallControlRequestSupportPolicy cannot switch to FaceTime Audio because it is restricted in region",  v31,  2u);
    OUTLINED_FUNCTION_0_2((uint64_t)v31);
  }

  return 6LL;
}

ValueMetadata *type metadata accessor for PhoneCallControlRequestSupportPolicy()
{
  return &type metadata for PhoneCallControlRequestSupportPolicy;
}

void OUTLINED_FUNCTION_0_30(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_4_32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0xD000000000000015LL, a4, 0LL);
}

uint64_t OUTLINED_FUNCTION_7_34( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  return outlined init with copy of SignalProviding(v11, (uint64_t)va);
}

_WORD *OUTLINED_FUNCTION_9_27(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_11_26()
{
  return v0(v1, v2);
}

uint64_t OUTLINED_FUNCTION_12_29()
{
  return v0(v1, v2);
}

uint64_t OUTLINED_FUNCTION_13_28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_15_19()
{
  return PhoneCallControlAction.rawValue.getter(v0);
}

void *OUTLINED_FUNCTION_17_25(void *a1)
{
  return __swift_project_boxed_opaque_existential_1(a1, v1);
}

uint64_t OUTLINED_FUNCTION_18_18@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(a1);
}

void DestinationTypeSlotTemplating.init(deviceState:catFamily:)( __int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 40) = a2;
  OUTLINED_FUNCTION_2();
}

void CallCapabilitySlotTemplating.makeParameterPromptDialog(app:parameterName:intent:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t CallCapabilitySlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = v14 - v13;
  id v16 = [a4 itemToConfirm];
  _bridgeAnyObjectToAny(_:)(v29, v16);
  swift_unknownObjectRelease(v16);
  type metadata accessor for INCallCapability(0LL);
  else {
    id v17 = [a5 callCapability];
  }
  uint64_t v18 = *(void **)(v8 + 40);
  if (v17)
  {
    uint64_t BackingType = INCallCapabilityGetBackingType(v17);
    if ((_DWORD)BackingType == 2)
    {
      uint64_t v20 = @"VIDEO_CALL";
    }

    else
    {
      if ((_DWORD)BackingType != 1)
      {
        uint64_t v20 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  BackingType));
        goto LABEL_12;
      }

      uint64_t v20 = @"AUDIO_CALL";
    }

    uint64_t v23 = v20;
LABEL_12:
    uint64_t v24 = v20;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    uint64_t v21 = v25;

    goto LABEL_13;
  }

  uint64_t v21 = 0xE700000000000000LL;
  uint64_t v22 = 0x4E574F4E4B4E55LL;
LABEL_13:
  OUTLINED_FUNCTION_1_34(v22, v21);
  uint64_t v26 = type metadata accessor for SpeakableString(0LL);
  __swift_storeEnumTagSinglePayload(v15, 0LL, 1LL, v26);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs + *v18 + 32))( v15,  a7,  a8);
  return outlined destroy of SpeakableString?(v15);
}

void CallCapabilitySlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CallCapabilitySlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v47 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v15 = v14 - v13;
  type metadata accessor for Locale(0LL);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = type metadata accessor for SpeakableString(0LL);
  uint64_t v48 = *(void *)(v19 - 8);
  uint64_t v49 = v19;
  __chkstk_darwin();
  uint64_t v21 = &v46[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  uint64_t v23 = &v46[-v22];
  uint64_t v24 = (char *)[a4 unsupportedReason];
  if (v24 == (_BYTE *)&dword_0 + 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs
  }
                                                       + **(void **)(v10 + 40)
                                                       + 1568))( a8,  a9);
  if (v24 == (_BYTE *)&dword_0 + 2)
  {
    uint64_t v36 = type metadata accessor for AppInfoBuilder();
    uint64_t inited = swift_initStackObject(v36, v51);
    OUTLINED_FUNCTION_0_31();
    uint64_t v38 = AppInfoBuilder.getAppName(_:requestedLocale:)(v47, v18);
    uint64_t v40 = v39;
    swift_release(inited);
    OUTLINED_FUNCTION_3_35();
    if (v40) {
      uint64_t v41 = v38;
    }
    else {
      uint64_t v41 = 0LL;
    }
    if (v40) {
      uint64_t v42 = v40;
    }
    else {
      uint64_t v42 = 0xE000000000000000LL;
    }
    OUTLINED_FUNCTION_1_34(v41, v42);
    uint64_t v43 = *(void **)(v10 + 40);
    uint64_t v45 = v48;
    uint64_t v44 = v49;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v48 + 16))(v15, v21, v49);
    __swift_storeEnumTagSinglePayload(v15, 0LL, 1LL, v44);
    OUTLINED_FUNCTION_4_33(*(uint64_t (**)(uint64_t, void, void))(class metadata base offset for StartCallCATs
                                                                             + *v43
                                                                             + 1536));
    outlined destroy of SpeakableString?(v15);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v45 + 8))(v21, v44);
  }

  else if (v24 == (_BYTE *)&dword_0 + 3)
  {
    uint64_t v25 = type metadata accessor for AppInfoBuilder();
    uint64_t v26 = swift_initStackObject(v25, v50);
    OUTLINED_FUNCTION_0_31();
    uint64_t v27 = AppInfoBuilder.getAppName(_:requestedLocale:)(v47, v18);
    uint64_t v29 = v28;
    swift_release(v26);
    OUTLINED_FUNCTION_3_35();
    if (v29) {
      uint64_t v30 = v27;
    }
    else {
      uint64_t v30 = 0LL;
    }
    if (v29) {
      uint64_t v31 = v29;
    }
    else {
      uint64_t v31 = 0xE000000000000000LL;
    }
    OUTLINED_FUNCTION_1_34(v30, v31);
    uint64_t v32 = *(void **)(v10 + 40);
    uint64_t v34 = v48;
    uint64_t v33 = v49;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v48 + 16))(v15, v23, v49);
    __swift_storeEnumTagSinglePayload(v15, 0LL, 1LL, v33);
    OUTLINED_FUNCTION_4_33(*(uint64_t (**)(uint64_t, void, void))(class metadata base offset for StartCallCATs
                                                                             + *v32
                                                                             + 1504));
    outlined destroy of SpeakableString?(v15);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v34 + 8))(v23, v33);
  }

  else
  {
    return (*(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                       + **(void **)(v10 + 40)
                                                       + 1472))( a8,  a9);
  }

void protocol witness for SlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:) in conformance CallCapabilitySlotTemplating( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t protocol witness for SlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:) in conformance CallCapabilitySlotTemplating( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CallCapabilitySlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
}

ValueMetadata *type metadata accessor for CallCapabilitySlotTemplating()
{
  return &type metadata for CallCapabilitySlotTemplating;
}

uint64_t OUTLINED_FUNCTION_0_31()
{
  *(void *)(v3 - 15__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v2;
  *(void *)(v3 - 144) = v0;
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  return dispatch thunk of DeviceState.siriLocale.getter(v4, v5);
}

uint64_t OUTLINED_FUNCTION_1_34(uint64_t a1, uint64_t a2)
{
  return SpeakableString.init(print:speak:)(a1, a2, 0LL, 0LL);
}

uint64_t OUTLINED_FUNCTION_3_35()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_4_33@<X0>(uint64_t (*a1)(uint64_t, void, void)@<X8>)
{
  return a1(v1, *(void *)(v2 - 152), *(void *)(v2 - 144));
}

PhoneCallFlowDelegatePlugin::PhoneCallCommonCATs::Properties_optional __swiftcall PhoneCallCommonCATs.Properties.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallCommonCATs.Properties.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallCommonCATs::Properties_optional)4;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallCommonCATs::Properties_optional)v3;
  }
}

uint64_t PhoneCallCommonCATs.Properties.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_AD27C + 4 * byte_322CB0[a1]))( 0xD000000000000016LL,  0x8000000000342170LL);
}

void sub_AD27C()
{
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallCommonCATs.Properties( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance PhoneCallCommonCATs.Properties()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallCommonCATs.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallCommonCATs.Properties( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::PhoneCallCommonCATs::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallCommonCATs.Properties@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallCommonCATs::Properties_optional *a2@<X8>)
{
  result.int value = PhoneCallCommonCATs.Properties.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallCommonCATs.Properties@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = PhoneCallCommonCATs.Properties.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t PhoneCallCommonCATs.orList(items:completion:)(unint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  unint64_t v3 = (__n128 *)OUTLINED_FUNCTION_8_2(v2, 80LL);
  OUTLINED_FUNCTION_0_32(v3, (__n128)xmmword_31D870);
  v3[4].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v3[3].n128_u64[0] = a1;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_38_2();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)(0xD000000000000016LL);
  return swift_bridgeObjectRelease();
}

uint64_t PhoneCallCommonCATs.orList(items:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)PhoneCallCommonCATs.orList(items:));
}

uint64_t PhoneCallCommonCATs.orList(items:)()
{
  uint64_t v2 = v1[3];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_8_2(v3, 80LL);
  v1[5] = (uint64_t)v4;
  OUTLINED_FUNCTION_0_32(v4, (__n128)xmmword_31D870);
  v4[4].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v4[3].n128_u64[0] = v2;
  OUTLINED_FUNCTION_19_0();
  uint64_t v5 = (uint64_t **)swift_task_alloc(v0);
  v1[6] = (uint64_t)v5;
  *uint64_t v5 = v1;
  v5[1] = (uint64_t *)PhoneCallCommonCATs.orList(items:);
  return OUTLINED_FUNCTION_6_15(v1[2], 0xD000000000000016LL, 0x8000000000342170LL, (uint64_t)v4, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v5 = *v1;
  uint64_t v2 = v5;
  OUTLINED_FUNCTION_39_0(&v5);
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_17_3();
  }

  else
  {
    swift_bridgeObjectRelease();
    return OUTLINED_FUNCTION_16_1((uint64_t (*)(void))v1[1]);
  }

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  __n128 *v4;
  void *v5;
  uint64_t (*v7)(unint64_t);
  uint64_t v2 = v1[2];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_8_2(v3, 80LL);
  v1[4] = v4;
  OUTLINED_FUNCTION_0_32(v4, (__n128)xmmword_31D870);
  v4[4].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v4[3].n128_u64[0] = v2;
  OUTLINED_FUNCTION_19_0();
  uint64_t v5 = (void *)swift_task_alloc(v0);
  v1[5] = v5;
  *uint64_t v5 = v1;
  v5[1] = PhoneCallCommonCATs.orList(items:);
  OUTLINED_FUNCTION_38_2();
  return v7(0xD000000000000016LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_39_0(v4);
  *(void *)(v2 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v6, v7, v8);
  }

  else
  {
    swift_bridgeObjectRelease();
    return OUTLINED_FUNCTION_8_3(v0, *(uint64_t (**)(void))(v3 + 8));
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PhoneCallCommonCATs.orList(items:)(uint64_t a1)
{
  *(void *)(v2 + ++*(void *)(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_33_0((uint64_t)PhoneCallCommonCATs.orList(items:));
}

uint64_t PhoneCallCommonCATs.orList(items:)(unint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_8_2(v2, 80LL);
  OUTLINED_FUNCTION_0_32(v3, (__n128)xmmword_31D870);
  v3[4].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v3[3].n128_u64[0] = a1;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_38_2();
  dispatch thunk of CATWrapper.execute(catId:parameters:)(0xD000000000000016LL, v4, v3);
  return swift_bridgeObjectRelease();
}

void PhoneCallCommonCATs.orListForPics(contactNamesNotFromPics:contactNameOfPics:inferenceSource:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_8_2(v12, 176LL);
  *(_OWORD *)(v13 + ++*(void *)(v0 + 16) = xmmword_320080;
  OUTLINED_FUNCTION_14_17(v13, 0xD000000000000017LL);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  *(void *)(v13 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a1;
  *(void *)(v13 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v14;
  *(void *)(v13 + 80) = 0xD000000000000011LL;
  *(void *)(v13 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0x8000000000348B30LL;
  outlined init with copy of SpeakableString?( a2,  (uint64_t)v11,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = OUTLINED_FUNCTION_26_0();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1LL, v15) == 1)
  {
    swift_bridgeObjectRetain();
    outlined destroy of SpeakableString?( (uint64_t)v11,  &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v13 + 96) = 0u;
    *(_OWORD *)(v13 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
  }

  else
  {
    *(void *)(v13 + 120) = v15;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v13 + 96));
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v15 - 8) + 32LL))( boxed_opaque_existential_1,  v11,  v15);
    swift_bridgeObjectRetain();
  }

  OUTLINED_FUNCTION_9_28();
  *(void *)(v13 + outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 - 168), v0 - 128) = v17;
  *(void *)(v13 + 136) = v18;
  outlined init with copy of SpeakableString?( a3,  (uint64_t)v9,  &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1LL, v15) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v9, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v13 + 144) = 0u;
    *(_OWORD *)(v13 + 160) = 0u;
  }

  else
  {
    *(void *)(v13 + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v15;
    uint64_t v19 = __swift_allocate_boxed_opaque_existential_1((void *)(v13 + 144));
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v15 - 8) + 32LL))(v19, v9, v15);
  }

  OUTLINED_FUNCTION_38_2();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)(v20);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_5();
}

uint64_t PhoneCallCommonCATs.orListForPics(contactNamesNotFromPics:contactNameOfPics:inferenceSource:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  void v5[2] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v5[7] = OUTLINED_FUNCTION_18_0(v6);
  v5[8] = swift_task_alloc(v4);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PhoneCallCommonCATs.orListForPics(contactNamesNotFromPics:contactNameOfPics:inferenceSource:)()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[3];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_8_2(v3, 176LL);
  v0[9] = v4;
  *(_OWORD *)(v4 + ++*(void *)(v0 + 16) = xmmword_320080;
  OUTLINED_FUNCTION_14_17(v4, 0xD000000000000017LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  *(void *)(v4 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v2;
  *(void *)(v4 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v5;
  *(void *)(v4 + 80) = 0xD000000000000011LL;
  *(void *)(v4 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0x8000000000348B30LL;
  OUTLINED_FUNCTION_33_16(v5, v6, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_26_0();
  int v7 = OUTLINED_FUNCTION_10_26(v1);
  uint64_t v8 = (_OWORD *)v0[8];
  if (v7 == 1)
  {
    uint64_t v9 = OUTLINED_FUNCTION_20_14();
    OUTLINED_FUNCTION_35_10(v9, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
  }

  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_36_7();
    OUTLINED_FUNCTION_25_19((uint64_t)v10);
    OUTLINED_FUNCTION_20_14();
  }

  uint64_t v11 = v0[7];
  OUTLINED_FUNCTION_4_34();
  outlined init with copy of SpeakableString?( v12,  v11,  &demangling cache variable for type metadata for SpeakableString?);
  if (OUTLINED_FUNCTION_10_26(v11) == 1)
  {
    outlined destroy of SpeakableString?(v0[7], &demangling cache variable for type metadata for SpeakableString?);
    _OWORD *v8 = 0u;
    v8[1] = 0u;
  }

  else
  {
    uint64_t v13 = OUTLINED_FUNCTION_32_12();
    OUTLINED_FUNCTION_26_17((uint64_t)v13);
  }

  uint64_t v14 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  v0[10] = v14;
  *uint64_t v14 = v0;
  v14[1] = PhoneCallCommonCATs.orListForPics(contactNamesNotFromPics:contactNameOfPics:inferenceSource:);
  return v16(v0[2], 0xD00000000000001DLL, 0x8000000000342190LL, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v5 = *v1;
  uint64_t v2 = v5;
  OUTLINED_FUNCTION_39_0(&v5);
  *(void *)(v2 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_17_3();
  }

  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_23_3();
    OUTLINED_FUNCTION_7_8();
    return OUTLINED_FUNCTION_16_1((uint64_t (*)(void))v1[1]);
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_7_8();
  return OUTLINED_FUNCTION_16_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _OWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t (*v16)(unint64_t, unint64_t, uint64_t);
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[2];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_8_2(v3, 176LL);
  v0[8] = v4;
  *(_OWORD *)(v4 + ++*(void *)(v0 + 16) = xmmword_320080;
  OUTLINED_FUNCTION_14_17(v4, 0xD000000000000017LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  *(void *)(v4 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v2;
  *(void *)(v4 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v5;
  *(void *)(v4 + 80) = 0xD000000000000011LL;
  *(void *)(v4 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0x8000000000348B30LL;
  OUTLINED_FUNCTION_33_16(v5, v6, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_26_0();
  int v7 = OUTLINED_FUNCTION_10_26(v1);
  uint64_t v8 = (_OWORD *)v0[7];
  if (v7 == 1)
  {
    uint64_t v9 = OUTLINED_FUNCTION_20_14();
    OUTLINED_FUNCTION_35_10(v9, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
  }

  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_36_7();
    OUTLINED_FUNCTION_25_19((uint64_t)v10);
    OUTLINED_FUNCTION_20_14();
  }

  uint64_t v11 = v0[6];
  OUTLINED_FUNCTION_4_34();
  outlined init with copy of SpeakableString?( v12,  v11,  &demangling cache variable for type metadata for SpeakableString?);
  if (OUTLINED_FUNCTION_10_26(v11) == 1)
  {
    outlined destroy of SpeakableString?(v0[6], &demangling cache variable for type metadata for SpeakableString?);
    _OWORD *v8 = 0u;
    v8[1] = 0u;
  }

  else
  {
    uint64_t v13 = OUTLINED_FUNCTION_32_12();
    OUTLINED_FUNCTION_26_17((uint64_t)v13);
  }

  uint64_t v14 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executeDialog(catId:parameters:));
  v0[9] = v14;
  *uint64_t v14 = v0;
  v14[1] = PhoneCallCommonCATs.orListForPics(contactNamesNotFromPics:contactNameOfPics:inferenceSource:);
  return v16(0xD00000000000001DLL, 0x8000000000342190LL, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_39_0(v4);
  *(void *)(v2 + 80) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v6, v7, v8);
  }

  else
  {
    uint64_t v10 = *(void *)(v2 + 48);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_23_3();
    swift_task_dealloc(v10);
    return OUTLINED_FUNCTION_8_3(v0, *(uint64_t (**)(void))(v3 + 8));
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_7_8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PhoneCallCommonCATs.orListForPics(contactNamesNotFromPics:contactNameOfPics:inferenceSource:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  void v4[5] = v3;
  void v4[2] = a1;
  void v4[3] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  void v4[6] = OUTLINED_FUNCTION_18_0(v5);
  v4[7] = swift_task_alloc(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

void PhoneCallCommonCATs.orListForPics(contactNamesNotFromPics:contactNameOfPics:inferenceSource:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v11 = OUTLINED_FUNCTION_8_2(v10, 176LL);
  *(_OWORD *)(v11 + ++*(void *)(v0 + 16) = xmmword_320080;
  OUTLINED_FUNCTION_14_17(v11, 0xD000000000000017LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  *(void *)(v11 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a1;
  *(void *)(v11 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v12;
  *(void *)(v11 + 80) = 0xD000000000000011LL;
  *(void *)(v11 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0x8000000000348B30LL;
  outlined init with copy of SpeakableString?( a2,  (uint64_t)v9,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_26_0();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1LL, v13) == 1)
  {
    OUTLINED_FUNCTION_20_14();
    outlined destroy of SpeakableString?((uint64_t)v9, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v11 + 96) = 0u;
    *(_OWORD *)(v11 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
  }

  else
  {
    *(void *)(v11 + 120) = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v11 + 96));
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v13 - 8) + 32LL))( boxed_opaque_existential_1,  v9,  v13);
    OUTLINED_FUNCTION_20_14();
  }

  OUTLINED_FUNCTION_9_28();
  *(void *)(v11 + outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 - 168), v0 - 128) = v15;
  *(void *)(v11 + 136) = v16;
  outlined init with copy of SpeakableString?( a3,  (uint64_t)v7,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1LL, v13);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    OUTLINED_FUNCTION_35_10(EnumTagSinglePayload, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v11 + 144) = 0u;
    *(_OWORD *)(v11 + 160) = 0u;
  }

  else
  {
    *(void *)(v11 + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v13;
    uint64_t v18 = __swift_allocate_boxed_opaque_existential_1((void *)(v11 + 144));
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v13 - 8) + 32LL))(v18, v7, v13);
  }

  OUTLINED_FUNCTION_38_2();
  dispatch thunk of CATWrapper.execute(catId:parameters:)(v19, v20, v11);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_5();
}

uint64_t PhoneCallCommonCATs.phoneFeaturesUnavailable(completion:)()
{
  return OUTLINED_FUNCTION_13(40LL);
}

uint64_t PhoneCallCommonCATs.phoneFeaturesUnavailable()(uint64_t a1)
{
  uint64_t v3 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = UnsupportedFlowCATs.deleteVoicemail();
  return OUTLINED_FUNCTION_6_15(a1, 0xD000000000000028LL, 0x80000000003421B0LL, (uint64_t)_swiftEmptyArrayStorage, v5);
}

uint64_t PhoneCallCommonCATs.phoneFeaturesUnavailable()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executeDialog(catId:parameters:));
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  OUTLINED_FUNCTION_38_2();
  return OUTLINED_FUNCTION_4_2(0xD000000000000028LL, v2, (uint64_t)_swiftEmptyArrayStorage, v4);
}

{
  return OUTLINED_FUNCTION_14_6(40LL, 0x80000000003421B0LL, (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t PhoneCallCommonCATs.promptCancelled(completion:)()
{
  return OUTLINED_FUNCTION_13(31LL);
}

uint64_t PhoneCallCommonCATs.promptCancelled()(uint64_t a1)
{
  uint64_t v3 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return OUTLINED_FUNCTION_6_15(a1, 0xD00000000000001FLL, 0x80000000003421E0LL, (uint64_t)_swiftEmptyArrayStorage, v5);
}

uint64_t PhoneCallCommonCATs.promptCancelled()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executeDialog(catId:parameters:));
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  OUTLINED_FUNCTION_38_2();
  return OUTLINED_FUNCTION_4_2(0xD00000000000001FLL, v2, (uint64_t)_swiftEmptyArrayStorage, v4);
}

{
  return OUTLINED_FUNCTION_14_6(31LL, 0x80000000003421E0LL, (uint64_t)_swiftEmptyArrayStorage);
}

unint64_t lazy protocol witness table accessor for type PhoneCallCommonCATs.Properties and conformance PhoneCallCommonCATs.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallCommonCATs.Properties and conformance PhoneCallCommonCATs.Properties;
  if (!lazy protocol witness table cache variable for type PhoneCallCommonCATs.Properties and conformance PhoneCallCommonCATs.Properties)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallCommonCATs.Properties,  &type metadata for PhoneCallCommonCATs.Properties);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallCommonCATs.Properties and conformance PhoneCallCommonCATs.Properties);
  }

  return result;
}

uint64_t type metadata completion function for PhoneCallCommonCATs(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for PhoneCallCommonCATs);
}

uint64_t ObjC metadata update function for PhoneCallCommonCATs()
{
  return type metadata accessor for PhoneCallCommonCATs(0LL);
}

uint64_t storeEnumTagSinglePayload for PhoneCallCommonCATs.Properties( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = 1;
  }
  else {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_AE31C + 4 * byte_322CB9[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_AE350 + 4 * byte_322CB4[v4]))();
}

uint64_t sub_AE350(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_AE358(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xAE360LL);
  }
  return result;
}

uint64_t sub_AE36C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xAE374LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_AE378(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_AE380(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PhoneCallCommonCATs.Properties()
{
  return &type metadata for PhoneCallCommonCATs.Properties;
}

__n128 *OUTLINED_FUNCTION_0_32(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x736D657469LL;
  result[2].n128_u64[1] = 0xE500000000000000LL;
  return result;
}

void OUTLINED_FUNCTION_4_34()
{
  *(void *)(v0 + outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 - 168), v0 - 128) = 0x636E657265666E69LL;
  *(void *)(v0 + 136) = 0xEF656372756F5365LL;
}

  ;
}

uint64_t OUTLINED_FUNCTION_10_26(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_14_17@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(result + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a2;
  *(void *)(result + 40) = (v2 - 32) | 0x8000000000000000LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_20_14()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_26_17(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))(a1, v2, v1);
}

void *OUTLINED_FUNCTION_32_12()
{
  *(void *)(v2 + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v0;
  return __swift_allocate_boxed_opaque_existential_1(v1);
}

uint64_t OUTLINED_FUNCTION_33_16(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return outlined init with copy of SpeakableString?(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_35_10(uint64_t a1, uint64_t *a2)
{
  return outlined destroy of SpeakableString?(v2, a2);
}

void *OUTLINED_FUNCTION_36_7()
{
  *(void *)(v2 + 120) = v0;
  return __swift_allocate_boxed_opaque_existential_1(v1);
}

PhoneCallFlowDelegatePlugin::LabelTemplatesProvider __swiftcall LabelTemplatesProvider.init()()
{
  uint64_t v0 = 0LL;
  uint64_t v1 = 0LL;
  uint64_t v2 = 0LL;
  uint64_t v3 = 0LL;
  result.noLabel.value._object = v3;
  result.noLabel.value._uint64_t countAndFlagsBits = v2;
  result.yesLabel.value._object = v1;
  result.yesLabel.value._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t LabelTemplatesProviding.yesAndNo()(uint64_t a1, uint64_t a2)
{
  v3[183] = v2;
  v3[177] = a2;
  v3[171] = a1;
  uint64_t v4 = *(void *)(a1 - 8);
  v3[189] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v3[195] = v5;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[201] = swift_task_alloc(v6);
  v3[207] = swift_task_alloc(v6);
  return swift_task_switch(LabelTemplatesProviding.yesAndNo(), 0LL, 0LL);
}

uint64_t LabelTemplatesProviding.yesAndNo()()
{
  uint64_t v1 = v0[207];
  uint64_t v2 = v0[201];
  uint64_t v3 = v0[189];
  uint64_t v4 = v0[177];
  uint64_t v5 = v0[171];
  uint64_t v11 = *(void (**)(uint64_t))(v3 + 16);
  uint64_t v12 = v0[183];
  v11(v1);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = OUTLINED_FUNCTION_15_20((uint64_t)&unk_3FAB08);
  v0[213] = v7;
  *(void *)(v7 + ++*(void *)(v0 + 16) = v5;
  *(void *)(v7 + 24) = v4;
  uint64_t v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  v8(v7 + v6, v1, v5);
  swift_retain();
  swift_asyncLet_begin( v0 + 82,  0LL,  &type metadata for String,  &async function pointer to partial apply for implicit closure #1 in LabelTemplatesProviding.yesAndNo(),  v7);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v2, v12, v5);
  uint64_t v9 = OUTLINED_FUNCTION_15_20((uint64_t)&unk_3FAB30);
  v0[214] = v9;
  *(void *)(v9 + ++*(void *)(v0 + 16) = v5;
  *(void *)(v9 + 24) = v4;
  v8(v9 + v6, v2, v5);
  swift_retain();
  swift_asyncLet_begin( v0 + 2,  0LL,  &type metadata for String,  &async function pointer to partial apply for implicit closure #2 in LabelTemplatesProviding.yesAndNo(),  v9);
  return swift_asyncLet_get_throwing(v0 + 82, v0 + 169, LabelTemplatesProviding.yesAndNo(), v0 + 178);
}

{
  uint64_t v0;
  void *v1;
  v1[215] = v0;
  if (v0) {
    return OUTLINED_FUNCTION_1_19();
  }
  v1[216] = v1[169];
  v1[217] = v1[170];
  swift_bridgeObjectRetain();
  return swift_asyncLet_get_throwing(v1 + 2, v1 + 167, LabelTemplatesProviding.yesAndNo(), v1 + 196);
}

{
  uint64_t v0;
  void *v1;
  v1[218] = v0;
  if (v0) {
    return swift_task_switch(LabelTemplatesProviding.yesAndNo(), 0LL, 0LL);
  }
  v1[219] = v1[167];
  v1[220] = v1[168];
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)LabelTemplatesProviding.yesAndNo());
}

{
  OUTLINED_FUNCTION_11_27();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)LabelTemplatesProviding.yesAndNo());
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 1712);
  uint64_t v2 = *(void *)(v0 + 1656);
  swift_release_n(*(void *)(v0 + 1704), 2LL);
  swift_release(v1);
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_10_0();
  return (*(uint64_t (**)(void, void, void, void))(v0 + 8))( *(void *)(v0 + 1728),  *(void *)(v0 + 1736),  *(void *)(v0 + 1752),  *(void *)(v0 + 1760));
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)LabelTemplatesProviding.yesAndNo());
}

{
  OUTLINED_FUNCTION_11_27();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)LabelTemplatesProviding.yesAndNo());
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_9_29();
  swift_release(v0);
  OUTLINED_FUNCTION_10_0();
  swift_task_dealloc(v2);
  return OUTLINED_FUNCTION_5_31(*(uint64_t (**)(void))(v1 + 8));
}

{
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)LabelTemplatesProviding.yesAndNo());
}

{
  OUTLINED_FUNCTION_11_27();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)LabelTemplatesProviding.yesAndNo());
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_9_29();
  swift_release(v0);
  OUTLINED_FUNCTION_10_0();
  swift_task_dealloc(v2);
  return OUTLINED_FUNCTION_5_31(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t implicit closure #1 in LabelTemplatesProviding.yesAndNo()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + ++*(void *)(v0 + 16) = a1;
  uint64_t v7 = *(int **)(a4 + 8);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)v7 + *v7);
  uint64_t v8 = (void *)swift_task_alloc(v7[1]);
  *(void *)(v4 + 24) = v8;
  void *v8 = v4;
  v8[1] = implicit closure #1 in LabelTemplatesProviding.yesAndNo();
  return v10(a3, a4);
}

uint64_t implicit closure #1 in LabelTemplatesProviding.yesAndNo()()
{
  if (v1) {
    return OUTLINED_FUNCTION_5_31(*(uint64_t (**)(void))(v3 + 8));
  }
  *(void *)(v4 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v2;
  *(void *)(v4 + 40) = v0;
  return OUTLINED_FUNCTION_2_26((uint64_t)implicit closure #1 in LabelTemplatesProviding.yesAndNo(), 0LL, 0LL);
}

uint64_t partial apply for implicit closure #1 in LabelTemplatesProviding.yesAndNo()()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_42ED04);
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  uint64_t v2 = OUTLINED_FUNCTION_12_30(v1);
  return implicit closure #1 in LabelTemplatesProviding.yesAndNo()(v2, v3, v4, v5);
}

uint64_t implicit closure #2 in LabelTemplatesProviding.yesAndNo()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + ++*(void *)(v0 + 16) = a1;
  uint64_t v7 = *(int **)(a4 + 16);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)v7 + *v7);
  uint64_t v8 = (void *)swift_task_alloc(v7[1]);
  *(void *)(v4 + 24) = v8;
  void *v8 = v4;
  v8[1] = implicit closure #2 in LabelTemplatesProviding.yesAndNo();
  return v10(a3, a4);
}

uint64_t implicit closure #2 in LabelTemplatesProviding.yesAndNo()()
{
  if (v1) {
    return OUTLINED_FUNCTION_5_31(*(uint64_t (**)(void))(v3 + 8));
  }
  *(void *)(v4 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v2;
  *(void *)(v4 + 40) = v0;
  return OUTLINED_FUNCTION_2_26((uint64_t)implicit closure #2 in LabelTemplatesProviding.yesAndNo(), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void **)(v0 + 16);
  *uint64_t v2 = *(void *)(v0 + 40);
  v2[1] = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t objectdestroyTm_2()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8LL);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t partial apply for implicit closure #2 in LabelTemplatesProviding.yesAndNo()()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_42ED14);
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  uint64_t v2 = OUTLINED_FUNCTION_12_30(v1);
  return implicit closure #2 in LabelTemplatesProviding.yesAndNo()(v2, v3, v4, v5);
}

uint64_t LabelTemplatesProvider.yes()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + ++*(void *)(v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return OUTLINED_FUNCTION_33_0((uint64_t)LabelTemplatesProvider.yes());
}

uint64_t LabelTemplatesProvider.yes()()
{
  if (*(void *)(v0 + 24))
  {
    OUTLINED_FUNCTION_13_29();
    uint64_t v1 = OUTLINED_FUNCTION_16_17();
    return OUTLINED_FUNCTION_2_27(v1, v2, v3);
  }

  else
  {
    uint64_t v5 = (void *)swift_task_alloc(async function pointer to static LabelTemplates.yes()[1]);
    *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v5;
    *uint64_t v5 = v0;
    v5[1] = LabelTemplatesProvider.yes();
    return static LabelTemplates.yes()();
  }

uint64_t LabelTemplatesProvider.no()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + ++*(void *)(v0 + 16) = a3;
  *(void *)(v4 + 24) = a4;
  return OUTLINED_FUNCTION_33_0((uint64_t)LabelTemplatesProvider.no());
}

uint64_t LabelTemplatesProvider.no()()
{
  if (*(void *)(v0 + 24))
  {
    OUTLINED_FUNCTION_13_29();
    uint64_t v1 = OUTLINED_FUNCTION_16_17();
    return OUTLINED_FUNCTION_2_27(v1, v2, v3);
  }

  else
  {
    uint64_t v5 = (void *)swift_task_alloc(async function pointer to static LabelTemplates.no()[1]);
    *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v5;
    *uint64_t v5 = v0;
    v5[1] = LabelTemplatesProvider.no();
    return static LabelTemplates.no()();
  }

uint64_t LabelTemplatesProvider.no()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 32);
  uint64_t v8 = *v3;
  swift_task_dealloc(v7);
  if (v2) {
    return (*(uint64_t (**)(void))(v8 + 8))();
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain(*(void *)(v6 + 24));
  return v10(a1, a2);
}

uint64_t LabelTemplatesProvider.openApp(appDisplayInfo:)(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to static LabelTemplates.openApp(appDisplayInfo:)[1]);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = LabelTemplatesProvider.openApp(appDisplayInfo:);
  return static LabelTemplates.openApp(appDisplayInfo:)(a1);
}

uint64_t LabelTemplatesProvider.openApp(appDisplayInfo:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = OUTLINED_FUNCTION_22_2();
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }

  return OUTLINED_FUNCTION_2_27(v6, v7, *(uint64_t (**)(void))(v3 + 8));
}

uint64_t protocol witness for LabelTemplatesProviding.yes() in conformance LabelTemplatesProvider()
{
  uint64_t v2 = *v0;
  uint64_t v3 = v0[1];
  uint64_t v4 = (void *)swift_task_alloc(dword_42ED24);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = protocol witness for LabelTemplatesProviding.yes() in conformance LabelTemplatesProvider;
  return LabelTemplatesProvider.yes()(v2, v3);
}

uint64_t protocol witness for LabelTemplatesProviding.no() in conformance LabelTemplatesProvider()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_42ED2C);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = protocol witness for LabelTemplatesProviding.yes() in conformance LabelTemplatesProvider;
  return LabelTemplatesProvider.no()((uint64_t)v4, v5, v2, v3);
}

uint64_t protocol witness for LabelTemplatesProviding.openApp(appDisplayInfo:) in conformance LabelTemplatesProvider( uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_42ED34);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for LabelTemplatesProviding.yes() in conformance LabelTemplatesProvider;
  return LabelTemplatesProvider.openApp(appDisplayInfo:)(a1);
}

uint64_t destroy for LabelTemplatesProvider(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

void *initializeWithCopy for LabelTemplatesProvider(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for LabelTemplatesProvider(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for LabelTemplatesProvider(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for LabelTemplatesProvider(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD((*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v1, v2, v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LabelTemplatesProvider( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + ++*(void *)(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0;
    }
    if (a2) {
      *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LabelTemplatesProvider()
{
  return &type metadata for LabelTemplatesProvider;
}

uint64_t OUTLINED_FUNCTION_2_27(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_3_36()
{
  uint64_t v2 = *v0;
  unint64_t v3 = (uint64_t *)(v1 - 8);
  *unint64_t v3 = *v0;
  uint64_t v4 = *(void *)(v2 + 24);
  *unint64_t v3 = *v0;
  return swift_task_dealloc(v4);
}

uint64_t OUTLINED_FUNCTION_9_29()
{
  return swift_release_n(*(void *)(v0 + 1704), 2LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_11_27()
{
  return swift_release(*(void *)(v0 + 1712));
}

uint64_t OUTLINED_FUNCTION_12_30(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_13_29()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_15_20(uint64_t a1)
{
  return swift_allocObject(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_16_17()
{
  return v0;
}

uint64_t ModelDecisionEvaluator.forcedDisambiguationPrediction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin22ModelDecisionEvaluator_forcedDisambiguationPrediction;
  uint64_t v4 = OUTLINED_FUNCTION_1_35();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t ModelDecisionEvaluator.userChosenApp.getter()
{
  return swift_retain(*(void *)(v0
                                + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin22ModelDecisionEvaluator_userChosenApp));
}

void ModelDecisionEvaluator.__allocating_init(forcedDisambiguationPrediction:userChosenApp:)( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  uint64_t v5 = OUTLINED_FUNCTION_1_35();
  OUTLINED_FUNCTION_2_28(v5);
  *(void *)(v4 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin22ModelDecisionEvaluator_userChosenApp) = a2;
  OUTLINED_FUNCTION_6();
}

void ModelDecisionEvaluator.init(forcedDisambiguationPrediction:userChosenApp:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = OUTLINED_FUNCTION_1_35();
  OUTLINED_FUNCTION_2_28(v4);
  *(void *)(v2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin22ModelDecisionEvaluator_userChosenApp) = a2;
  OUTLINED_FUNCTION_6();
}

Swift::String_optional __swiftcall ModelDecisionEvaluator.getPredictedApp()()
{
  uint64_t v2 = OUTLINED_FUNCTION_1_35();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_5_1();
  (*(void (**)(unint64_t *, uint64_t, uint64_t))(v3 + 16))( v1,  v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin22ModelDecisionEvaluator_forcedDisambiguationPrediction,  v2);
  int v4 = (*(uint64_t (**)(unint64_t *, uint64_t))(v3 + 88))(v1, v2);
  BOOL v5 = v4 == enum case for AppResolverResult.resolved(_:) || v4 == enum case for AppResolverResult.needsConfirmation(_:);
  if (v5)
  {
    unint64_t v9 = 0xD000000000000015LL;
    OUTLINED_FUNCTION_11_28(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 96));
    uint64_t v7 = v1;
    unint64_t v6 = *v1;
    unint64_t v10 = v7[1];
    uint64_t v8 = "com.apple.InCallService";
    if (v6 == 0xD000000000000017LL && (OUTLINED_FUNCTION_8_23((uint64_t)"com.apple.InCallService"), v5)
      || (OUTLINED_FUNCTION_0_33(0xD000000000000017LL, (uint64_t)v8) & 1) != 0
      || (uint64_t v11 = 0xD000000000000012LL, v12 = "com.apple.Carousel", v6 == 0xD000000000000012LL)
      && (OUTLINED_FUNCTION_8_23((uint64_t)"com.apple.Carousel"), v5)
      || (OUTLINED_FUNCTION_0_33(v11, (uint64_t)v12) & 1) != 0
      || (uint64_t v15 = 0xD000000000000013LL, v16 = "com.apple.NanoPhone", v6 == 0xD000000000000013LL)
      && (OUTLINED_FUNCTION_8_23((uint64_t)"com.apple.NanoPhone"), v5)
      || (OUTLINED_FUNCTION_0_33(v15, (uint64_t)v16) & 1) != 0
      || v6 == 0xD000000000000015LL && v10 == 0x8000000000348BF0LL
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v10, 0xD000000000000015LL, 0x8000000000348BF0LL, 0LL) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      unint64_t v10 = 0x8000000000348BF0LL;
    }

    else
    {
      unint64_t v9 = v6;
    }
  }

  else
  {
    OUTLINED_FUNCTION_11_28(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    unint64_t v9 = 0LL;
    unint64_t v10 = 0LL;
  }

  uint64_t v13 = v9;
  uint64_t v14 = (void *)v10;
  result.value._object = v14;
  result.value._uint64_t countAndFlagsBits = v13;
  return result;
}

Swift::Bool __swiftcall ModelDecisionEvaluator.isDecisionCorrect()()
{
  uint64_t v2 = OUTLINED_FUNCTION_1_35();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_5_1();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))( v1,  v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin22ModelDecisionEvaluator_forcedDisambiguationPrediction,  v2);
  int v4 = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v1, v2);
  if (v4 == enum case for AppResolverResult.resolved(_:) || v4 == enum case for AppResolverResult.needsConfirmation(_:))
  {
    OUTLINED_FUNCTION_4_13(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 96));
    uint64_t v6 = *v1;
    uint64_t v7 = v1[1];
    uint64_t v8 = App.appIdentifier.getter();
    char v10 = ModelDecisionEvaluator.bundlesMatchOrEquivalent(_:_:)(v6, v7, v8, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v10 & 1;
  }

  if (v4 != enum case for AppResolverResult.needsDisambiguation(_:))
  {
    if (v4 == enum case for AppResolverResult.noMatchFound(_:))
    {
      char v10 = App.isFirstParty()();
      return v10 & 1;
    }

    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.siriPhone);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_0, v22, v23, "#ModelDecisionEvaluator isDecisionCorrect: unknown prediction state", v24, 2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    OUTLINED_FUNCTION_4_13(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
LABEL_21:
    char v10 = 0;
    return v10 & 1;
  }

  OUTLINED_FUNCTION_4_13(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 96));
  uint64_t v11 = *v1;
  uint64_t v12 = *(void *)(*v1 + 16);
  if (!v12)
  {
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }

  swift_bridgeObjectRetain();
  uint64_t v13 = v11 + 40;
  while (1)
  {
    swift_bridgeObjectRetain();
    App.appIdentifier.getter();
    uint64_t v15 = v14;
    uint64_t v16 = OUTLINED_FUNCTION_119();
    char v19 = ModelDecisionEvaluator.bundlesMatchOrEquivalent(_:_:)(v16, v17, v18, v15);
    OUTLINED_FUNCTION_34_0();
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0) {
      break;
    }
    v13 += 16LL;
    if (!--v12)
    {
      OUTLINED_FUNCTION_2_12();
      goto LABEL_21;
    }
  }

  OUTLINED_FUNCTION_2_12();
  char v10 = 1;
  return v10 & 1;
}

Swift::Bool __swiftcall ModelDecisionEvaluator.isConfirmation()()
{
  return ModelDecisionEvaluator.isConfirmation()(&enum case for AppResolverResult.needsConfirmation(_:));
}

Swift::Bool __swiftcall ModelDecisionEvaluator.isDisambiguation()()
{
  return ModelDecisionEvaluator.isConfirmation()(&enum case for AppResolverResult.needsDisambiguation(_:));
}

BOOL ModelDecisionEvaluator.isConfirmation()(_DWORD *a1)
{
  uint64_t v3 = OUTLINED_FUNCTION_1_35();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))( (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin22ModelDecisionEvaluator_forcedDisambiguationPrediction,  v3);
  uint64_t v6 = OUTLINED_FUNCTION_119();
  BOOL v8 = v7(v6) == *a1;
  uint64_t v9 = OUTLINED_FUNCTION_119();
  v10(v9);
  return v8;
}

uint64_t ModelDecisionEvaluator.description.getter()
{
  else {
    uint64_t v1 = 0x65736C6166LL;
  }
  OUTLINED_FUNCTION_1_20(v1);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_6_34(0xD000000000000014LL, (uint64_t)", isDisambiguation: ");
  else {
    uint64_t v2 = 0x65736C6166LL;
  }
  OUTLINED_FUNCTION_1_20(v2);
  OUTLINED_FUNCTION_34_0();
  v3._object = (void *)0x8000000000348C50LL;
  v3._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  String.append(_:)(v3);
  char v4 = OUTLINED_FUNCTION_13_30(*(uint64_t (**)(void))(*(void *)v0 + 120LL));
  BOOL v5 = (v4 & 1) == 0;
  if ((v4 & 1) != 0) {
    uint64_t v6 = 1702195828LL;
  }
  else {
    uint64_t v6 = 0x65736C6166LL;
  }
  if (v5) {
    unint64_t v7 = 0xE500000000000000LL;
  }
  else {
    unint64_t v7 = 0xE400000000000000LL;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  return 0LL;
}

uint64_t ModelDecisionEvaluator.bundlesMatchOrEquivalent(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    if (a4)
    {
      if (a1 == a3 && a2 == a4) {
        return 1LL;
      }
      uint64_t v7 = OUTLINED_FUNCTION_119();
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a3, a4, 0LL) & 1) != 0) {
        return 1LL;
      }
    }
  }

  else if (!a4)
  {
    return 1LL;
  }

  uint64_t v9 = OUTLINED_FUNCTION_119();
  static PhoneCallAppNameConstants.isPhone(appId:)(v9, v10);
  if ((v11 & 1) != 0)
  {
    static PhoneCallAppNameConstants.isPhone(appId:)(a3, a4);
    if ((v12 & 1) != 0) {
      return 1LL;
    }
  }

  return 0LL;
}

uint64_t ModelDecisionEvaluator.deinit()
{
  uint64_t v1 = OUTLINED_FUNCTION_1_35();
  OUTLINED_FUNCTION_2_0(v1);
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin22ModelDecisionEvaluator_userChosenApp));
  return v0;
}

uint64_t ModelDecisionEvaluator.__deallocating_deinit()
{
  uint64_t v1 = OUTLINED_FUNCTION_1_35();
  OUTLINED_FUNCTION_2_0(v1);
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin22ModelDecisionEvaluator_userChosenApp));
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t ObjC metadata update function for ModelDecisionEvaluator()
{
  return type metadata accessor for ModelDecisionEvaluator(0LL);
}

uint64_t type metadata accessor for ModelDecisionEvaluator(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for ModelDecisionEvaluator;
  if (!type metadata singleton initialization cache for ModelDecisionEvaluator) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ModelDecisionEvaluator);
  }
  return result;
}

uint64_t type metadata completion function for ModelDecisionEvaluator(uint64_t a1)
{
  uint64_t result = type metadata accessor for AppResolverResult(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_0_33@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, a1, (a2 - 32) | 0x8000000000000000LL, 0LL);
}

uint64_t OUTLINED_FUNCTION_1_35()
{
  return type metadata accessor for AppResolverResult(0LL);
}

uint64_t OUTLINED_FUNCTION_2_28(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32LL))(v2, v1, a1);
}

void OUTLINED_FUNCTION_6_34(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

unint64_t OUTLINED_FUNCTION_8_23@<X0>(uint64_t a1@<X8>)
{
  return (a1 - 32) | 0x8000000000000000LL;
}

uint64_t OUTLINED_FUNCTION_11_28@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_13_30@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1();
}

uint64_t SemanticValue.init(string:nlNode:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6 = PhoneCallNLConstants.rawValue.getter(a3);
  SemanticValue.label.setter(v6, v7);
  PhoneCallNLConstants.canonicalName.getter(a3);
  return SemanticValue.nodeClass.setter();
}

uint64_t key path setter for PhoneIntentRCHFlow.state : <A, B>PhoneIntentRCHFlow<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for PhoneIntentRCHFlow.State(0LL, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8), a4);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = &v13[-v8 - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(&v13[-v8 - 8], a1, v6);
  uint64_t v10 = *(void *)a2 + *(void *)(**(void **)a2 + 120LL);
  swift_beginAccess(v10, v13, 33LL, 0LL);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v7 + 40))(v10, v9, v6);
  return swift_endAccess(v13);
}

uint64_t PhoneIntentRCHFlow.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 120);
  swift_beginAccess(v4, v8, 0LL, 0LL);
  uint64_t v6 = type metadata accessor for PhoneIntentRCHFlow.State(0LL, *(void *)(v3 + 80), *(void *)(v3 + 88), v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, v4, v6);
}

uint64_t type metadata accessor for PhoneIntentRCHFlow.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for PhoneIntentRCHFlow.State);
}

void PhoneIntentRCHFlow.exitValue.getter(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = type metadata accessor for PhoneIntentRCHFlow.State(0LL, *(void *)(*v2 + 80), *(void *)(*v2 + 88), a1);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin();
  uint64_t v9 = (uint64_t *)((char *)&v14 - v8);
  (*(void (**)(uint64_t))(v4 + 128))(v7);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v5);
  if (EnumCaseMultiPayload == 2)
  {
    *(void *)a2 = *v9;
    *(_BYTE *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0;
    uint64_t v12 = OUTLINED_FUNCTION_3_37();
    OUTLINED_FUNCTION_7_35(v12);
  }

  else if (EnumCaseMultiPayload == 3)
  {
    uint64_t v11 = OUTLINED_FUNCTION_3_37();
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)(v11 - 8) + 32LL))(a2, v9, v11);
  }

  else
  {
    uint64_t v13 = OUTLINED_FUNCTION_3_37();
    OUTLINED_FUNCTION_7_35(v13);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  }

  OUTLINED_FUNCTION_58();
}

uint64_t specialized PhoneIntentRCHFlow.__allocating_init(phoneCallNLIntent:app:rchFlowProvider:sharedGlobals:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneIntentRCHFlow<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>.State);
  __chkstk_darwin();
  uint64_t v13 = &v17[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v13);
  swift_storeEnumTagMultiPayload(v13, v11, 0LL);
  outlined init with copy of SignalProviding((uint64_t)a5, (uint64_t)v17);
  uint64_t v14 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, _BYTE *))(v5 + 160))(v13, a2, a3, a4, v17);
  __swift_destroy_boxed_opaque_existential_1(a5);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v14;
}

void PhoneIntentRCHFlow.__allocating_init(phoneCallNLIntent:app:rchFlowProvider:sharedGlobals:)()
{
  uint64_t v8 = OUTLINED_FUNCTION_24_12(v6, *(void *)(v1 + 80), *(void *)(v1 + 88), v7);
  __chkstk_darwin();
  uint64_t v10 = &v13[-v9 - 8];
  outlined init with copy of SignalProviding((uint64_t)v5, (uint64_t)&v13[-v9 - 8]);
  uint64_t v11 = swift_storeEnumTagMultiPayload(v10, v8, 0LL);
  OUTLINED_FUNCTION_22_16(v11, (uint64_t)v13);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, _BYTE *))(v1 + 160))(v10, v4, v3, v2, v13);
  __swift_destroy_boxed_opaque_existential_1(v0);
  __swift_destroy_boxed_opaque_existential_1(v5);
  OUTLINED_FUNCTION_58();
}

void PhoneIntentRCHFlow.__allocating_init(state:app:rchFlowProvider:sharedGlobals:)()
{
}

void *specialized PhoneIntentRCHFlow.init(state:app:rchFlowProvider:sharedGlobals:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  void v5[2] = a2;
  v5[3] = a3;
  v5[4] = a4;
  outlined init with take of AppSelectionSignalComponent(a5, (uint64_t)(v5 + 5));
  return v5;
}

void PhoneIntentRCHFlow.init(state:app:rchFlowProvider:sharedGlobals:)()
{
  uint64_t v6 = (char *)v1 + *(void *)(*v1 + 120LL);
  uint64_t v8 = type metadata accessor for PhoneIntentRCHFlow.State(0LL, *(void *)(*v1 + 80LL), *(void *)(*v1 + 88LL), v7);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v5, v8);
  v1[2] = v4;
  v1[3] = v3;
  v1[4] = v2;
  outlined init with take of AppSelectionSignalComponent(v0, (uint64_t)(v1 + 5));
  OUTLINED_FUNCTION_58();
}

uint64_t PhoneIntentRCHFlow.execute(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for PhoneIntentRCHFlow( 0LL,  *(void *)(*(void *)v4 + 80LL),  *(void *)(*(void *)v4 + 88LL),  a4);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for PhoneIntentRCHFlow<A, B>, v7);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v7, WitnessTable);
}

uint64_t type metadata accessor for PhoneIntentRCHFlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PhoneIntentRCHFlow);
}

uint64_t PhoneIntentRCHFlow.execute()(uint64_t a1)
{
  v2[36] = a1;
  v2[37] = v1;
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for CATOption(0LL);
  uint64_t v5 = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v2[38] = v5;
  uint64_t v6 = *(void *)(v3 + 80);
  v2[39] = v6;
  uint64_t v7 = *(void *)(v3 + 88);
  v2[40] = v7;
  uint64_t v9 = OUTLINED_FUNCTION_24_12(v5, v6, v7, v8);
  v2[41] = v9;
  v2[42] = *(void *)(v9 - 8);
  v2[43] = OUTLINED_FUNCTION_28();
  v2[44] = OUTLINED_FUNCTION_28();
  v2[45] = OUTLINED_FUNCTION_28();
  return swift_task_switch(PhoneIntentRCHFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 392);
  *(void *)(*v2 + 400) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = PhoneIntentRCHFlow.execute();
  }

  else
  {

    *(void *)(v4 + 40__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a1;
    uint64_t v6 = PhoneIntentRCHFlow.execute();
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

void PhoneIntentRCHFlow.execute()()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 328);
  (*(void (**)(void))(**(void **)(v0 + 296) + 128LL))();
  uint64_t v3 = (char *)sub_B020C + 4 * word_322E30[swift_getEnumCaseMultiPayload(v1, v2)];
  __asm { BR              X10 }

void sub_B020C()
{
  uint64_t v36 = v1;
  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v4 = *(void **)(v0 + 296);
  outlined init with take of AppSelectionSignalComponent(*(__int128 **)(v0 + 360), v38);
  uint64_t v5 = v4[2];
  *(void *)(v0 + 36__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v5;
  uint64_t v6 = v4[8];
  uint64_t v7 = v4[9];
  __swift_project_boxed_opaque_existential_1(v4 + 5, v6);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 80);
  swift_retain();
  v8(v6, v7);
  SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)(v38, v5, 0LL, 0LL, v3);
  uint64_t v10 = v9;
  outlined destroy of SKTransformer(v0 + 56);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v11 = OUTLINED_FUNCTION_12_31();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.siriPhone);
  uint64_t v12 = OUTLINED_FUNCTION_48();
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v15 = static os_log_type_t.debug.getter(v13, v14);
  if (os_log_type_enabled(v13, v15))
  {
    uint64_t v34 = *(void *)(v0 + 320);
    uint64_t v16 = v10;
    uint64_t v17 = *(void *)(v0 + 312);
    uint64_t v18 = *(void *)(v0 + 296);
    char v19 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v20 = OUTLINED_FUNCTION_7_0(32LL);
    *(void *)(v2 + 24) = v20;
    *(_DWORD *)char v19 = 136315138;
    *(void *)(v0 + 27__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v18;
    uint64_t v22 = type metadata accessor for PhoneIntentRCHFlow(0LL, v17, v34, v21);
    swift_retain();
    uint64_t v23 = v22;
    uint64_t v10 = v16;
    uint64_t v24 = ((uint64_t (*)(uint64_t))String.init<A>(describing:))(v23);
    *(void *)(v0 + 280) = OUTLINED_FUNCTION_15_21(v24, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v35, v0 + 288, v19 + 4);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_31_1(v18);
    _os_log_impl(&dword_0, v13, v15, "#%s Resolving SKIntent:", v19, 0xCu);
    OUTLINED_FUNCTION_17_0(v20);
    OUTLINED_FUNCTION_0_2(v20);
    OUTLINED_FUNCTION_0_2((uint64_t)v19);
  }

  else
  {
    OUTLINED_FUNCTION_31_1(*(void *)(v0 + 296));
  }

  uint64_t v26 = v4[8];
  uint64_t v27 = v4[9];
  __swift_project_boxed_opaque_existential_1(v4 + 5, v26);
  (*(void (**)(uint64_t, uint64_t))(v27 + 88))(v26, v27);
  uint64_t v28 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1(v36, *(void *)(v0 + 40));
  if (v10) {
    id v29 = v10;
  }
  else {
    id v29 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  }
  *(void *)(v0 + 376) = v10;
  *(void *)(v0 + 384) = v29;
  uint64_t v30 = *(int **)(v28 + 8);
  uint64_t v31 = v30[1];
  uint64_t v37 = (char *)v30 + *v30;
  id v32 = v10;
  uint64_t v33 = (void *)swift_task_alloc(v31);
  *(void *)(v0 + 39__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v33;
  void *v33 = v0;
  v33[1] = PhoneIntentRCHFlow.execute();
  *(void *)(v2 + ++*(void *)(v0 + 16) = v28;
  __asm { BR              X8 }

uint64_t PhoneIntentRCHFlow.execute()()
{
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v3 = *(void *)(v0 + 344);
  uint64_t v2 = *(void **)(v0 + 352);
  uint64_t v4 = *(void *)(v0 + 328);
  uint64_t v5 = *(void *)(v0 + 336);
  uint64_t v6 = *(void *)(v0 + 296);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  *uint64_t v2 = v1;
  swift_storeEnumTagMultiPayload(v2, v4, 1LL);
  (*(void (**)(uint64_t, void *, uint64_t))(v5 + 32))(v3, v2, v4);
  uint64_t v7 = (void *)(v6 + *(void *)(*(void *)v6 + 120LL));
  OUTLINED_FUNCTION_5_9((uint64_t)v7, v0 + 136);
  (*(void (**)(void *, uint64_t, uint64_t))(v5 + 40))(v7, v3, v4);
  swift_endAccess(v0 + 136);
  OUTLINED_FUNCTION_17_26();
  OUTLINED_FUNCTION_22();

  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 96));
  OUTLINED_FUNCTION_6_35();
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 344);
  uint64_t v2 = *(void **)(v0 + 352);
  uint64_t v4 = *(void *)(v0 + 328);
  uint64_t v5 = *(void *)(v0 + 336);
  uint64_t v6 = *(void *)(v0 + 296);

  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  *uint64_t v2 = v1;
  swift_storeEnumTagMultiPayload(v2, v4, 2LL);
  (*(void (**)(uint64_t, void *, uint64_t))(v5 + 32))(v3, v2, v4);
  uint64_t v7 = v6 + *(void *)(*(void *)v6 + 120LL);
  OUTLINED_FUNCTION_5_9(v7, v0 + 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v7, v3, v4);
  swift_endAccess(v0 + 160);
  OUTLINED_FUNCTION_17_26();
  OUTLINED_FUNCTION_22();

  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 96));
  OUTLINED_FUNCTION_6_35();
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t (*implicit closure #5 in PhoneIntentRCHFlow.execute()(uint64_t a1))()
{
  return partial apply for implicit closure #6 in implicit closure #5 in PhoneIntentRCHFlow.execute();
}

void PhoneIntentRCHFlow.childRCHFlowComplete(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)v4 + 80LL);
  uint64_t v7 = *(void *)(*(void *)v4 + 88LL);
  uint64_t v8 = type metadata accessor for PhoneIntentRCHFlow.State(0LL, v6, v7, a4);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin();
  uint64_t v13 = &v17[-v12 - 8];
  uint64_t v14 = type metadata accessor for RCHFlowResult(0LL, v6, v7);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))(v13, a1, v14);
  swift_storeEnumTagMultiPayload(v13, v8, 3LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v11, v13, v8);
  uint64_t v15 = v4 + *(void *)(*(void *)v4 + 120LL);
  OUTLINED_FUNCTION_5_9(v15, (uint64_t)v17);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v9 + 40))(v15, v11, v8);
  swift_endAccess(v17);
  OUTLINED_FUNCTION_58();
}

void *specialized PhoneIntentRCHFlow.deinit()
{
  return v0;
}

void *PhoneIntentRCHFlow.deinit()
{
  uint64_t v1 = *v0;
  swift_release(v0[2]);
  swift_release(v0[4]);
  uint64_t v2 = __swift_destroy_boxed_opaque_existential_1(v0 + 5);
  uint64_t v3 = (char *)v0 + *(void *)(*v0 + 120LL);
  uint64_t v5 = OUTLINED_FUNCTION_24_12(v2, *(void *)(v1 + 80), *(void *)(v1 + 88), v4);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v3, v5);
  return v0;
}

uint64_t PhoneIntentRCHFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t protocol witness for Flow.on(input:) in conformance PhoneIntentRCHFlow<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168LL))() & 1;
}

uint64_t protocol witness for Flow.execute() in conformance PhoneIntentRCHFlow<A, B>(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 184LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance ContactNeedsValueGuardFlow<A>;
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance PhoneIntentRCHFlow<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152LL))();
}

uint64_t AddCallParticipantRCHFlow.__allocating_init(phoneCallNLIntent:app:sharedGlobals:)( void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v10);
  OUTLINED_FUNCTION_22_16(v6, (uint64_t)v9);
  uint64_t v7 = specialized PhoneIntentRCHFlow.__allocating_init(phoneCallNLIntent:app:rchFlowProvider:sharedGlobals:)( v10,  a2,  (uint64_t)implicit closure #1 in AddCallParticipantRCHFlow.init(phoneCallNLIntent:app:sharedGlobals:),  0LL,  v9);
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v7;
}

void AddCallParticipantRCHFlow.__allocating_init(state:app:sharedGlobals:)( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = outlined init with copy of PhoneIntentRCHFlow<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>.State( a1,  (uint64_t)v8);
  OUTLINED_FUNCTION_22_16(v9, (uint64_t)v11);
  (*(void (**)(_BYTE *, uint64_t, uint64_t (*)(), void, _BYTE *))(v3 + 160))( v8,  a2,  implicit closure #1 in AddCallParticipantRCHFlow.init(state:app:sharedGlobals:),  0LL,  v11);
  __swift_destroy_boxed_opaque_existential_1(a3);
  outlined destroy of PhoneIntentRCHFlow<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>.State(a1);
  OUTLINED_FUNCTION_16();
}

void AddCallParticipantRCHFlow.__allocating_init(state:app:rchFlowProvider:sharedGlobals:)()
{
  uint64_t v0 = OUTLINED_FUNCTION_9_30();
  specialized PhoneIntentRCHFlow.init(state:app:rchFlowProvider:sharedGlobals:)(v0, v1, v2, v3, v4);
  OUTLINED_FUNCTION_16();
}

uint64_t AddCallParticipantRCHFlow.__deallocating_deinit()
{
  uint64_t v0 = specialized PhoneIntentRCHFlow.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t outlined init with copy of PhoneIntentRCHFlow<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>.State( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneIntentRCHFlow<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>.State);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PhoneIntentRCHFlow<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>.State( uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneIntentRCHFlow<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>.State);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_B10E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 128LL))();
}

uint64_t sub_B1110()
{
  return 16LL;
}

__n128 sub_B111C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for PhoneIntentRCHFlow( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v7[1] = (char *)&value witness table for () + 64;
  v7[2] = "(";
  uint64_t result = type metadata accessor for PhoneIntentRCHFlow.State(319LL, *(void *)(a1 + 80), *(void *)(a1 + 88), a4);
  if (v6 <= 0x3F)
  {
    void v7[3] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 4LL, v7, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata completion function for PhoneIntentRCHFlow.State(uint64_t a1)
{
  v4[0] = "(";
  v4[1] = "\b";
  void v4[2] = "\b";
  uint64_t result = type metadata accessor for RCHFlowResult(319LL, *(void *)(a1 + 16), *(void *)(a1 + 24));
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(result - 8) + 64LL;
    swift_initEnumMetadataMultiPayload(a1, 0LL, 4LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PhoneIntentRCHFlow.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    uint64_t v5 = (char *)&loc_B1290 + 4 * byte_322E38[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = v6 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain(v6);
  return v7;
}

void destroy for PhoneIntentRCHFlow.State(void *a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
      __swift_destroy_boxed_opaque_existential_1(a1);
      break;
    case 1u:

      break;
    case 2u:
      swift_errorRelease(*a1);
      break;
    case 3u:
      uint64_t v4 = type metadata accessor for RCHFlowResult(0LL, *(void *)(a2 + 16), *(void *)(a2 + 24));
      (*(void (**)(void *, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
      break;
    default:
      return;
  }

void initializeWithCopy for PhoneIntentRCHFlow.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = (char *)sub_B1448 + 4 * byte_322E40[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }

uint64_t sub_B1448()
{
  __int128 v3 = *(_OWORD *)(v2 + 24);
  *(_OWORD *)(v0 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(v0, v2);
  swift_storeEnumTagMultiPayload(v0, v1, 0LL);
  return v0;
}

uint64_t assignWithCopy for PhoneIntentRCHFlow.State(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(result, a3);
    uint64_t v5 = (char *)&loc_B155C + 4 * byte_322E44[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  return result;
}

void *initializeWithTake for PhoneIntentRCHFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 3)
  {
    uint64_t v6 = type metadata accessor for RCHFlowResult(0LL, *(void *)(a3 + 16), *(void *)(a3 + 24));
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 3LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *assignWithTake for PhoneIntentRCHFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = *(void *)(a3 - 8);
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, a3);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 3)
    {
      uint64_t v7 = type metadata accessor for RCHFlowResult(0LL, *(void *)(a3 + 16), *(void *)(a3 + 24));
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 3LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }

  return a1;
}

uint64_t type metadata accessor for AddCallParticipantRCHFlow(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for AddCallParticipantRCHFlow;
  if (!type metadata singleton initialization cache for AddCallParticipantRCHFlow) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AddCallParticipantRCHFlow);
  }
  return result;
}

uint64_t type metadata completion function for AddCallParticipantRCHFlow(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 256LL, 0LL, v2, a1 + 200);
}

uint64_t outlined init with take of PhoneIntentRCHFlow<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>.State( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneIntentRCHFlow<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>.State);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_1_36()
{
  return swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
}

uint64_t OUTLINED_FUNCTION_3_37()
{
  return type metadata accessor for RCHFlowResult(0LL, v1, v0);
}

uint64_t OUTLINED_FUNCTION_6_35()
{
  return swift_task_dealloc(*(void *)(v0 + 360));
}

uint64_t OUTLINED_FUNCTION_7_35(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 104LL))(v1, v2, a1);
}

uint64_t OUTLINED_FUNCTION_9_30()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_12_31()
{
  return type metadata accessor for Logger(0LL);
}

uint64_t OUTLINED_FUNCTION_15_21(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 + 24));
}

uint64_t OUTLINED_FUNCTION_17_26()
{
  return static ExecuteResponse.replan(requireInput:)(0LL);
}

void OUTLINED_FUNCTION_19_18(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_22_16(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of SignalProviding(v2, a2);
}

uint64_t OUTLINED_FUNCTION_24_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for PhoneIntentRCHFlow.State(0LL, a2, a3, a4);
}

uint64_t AceServiceInvokerAsync.submitWithBargeInDetection<A>(_:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  void v4[2] = a3;
  uint64_t v9 = objc_opt_self(&OBJC_CLASS___SAUIAddViews);
  if (OUTLINED_FUNCTION_1_37(v9) || (uint64_t v10 = objc_opt_self(&OBJC_CLASS___SAUIAddDialogs), OUTLINED_FUNCTION_1_37(v10)))
  {
    uint64_t v11 = (void *)swift_task_alloc(async function pointer to AceServiceInvokerAsync.submit<A>(_:)[1]);
    void v4[3] = v11;
    unint64_t v12 = type metadata accessor for SABaseCommand();
    *uint64_t v11 = v4;
    v11[1] = AceServiceInvokerAsync.submitWithBargeInDetection<A>(_:);
    uint64_t v13 = a1;
    uint64_t v14 = a2;
  }

  else
  {
    uint64_t v16 = (void *)swift_task_alloc(async function pointer to AceServiceInvokerAsync.submit<A>(_:)[1]);
    void v4[5] = v16;
    *uint64_t v16 = v4;
    v16[1] = AceServiceInvokerAsync.submitWithBargeInDetection<A>(_:);
    uint64_t v13 = a1;
    uint64_t v14 = a2;
    unint64_t v12 = a3;
  }

  return AceServiceInvokerAsync.submit<A>(_:)(v13, v14, v12, a4);
}

uint64_t AceServiceInvokerAsync.submitWithBargeInDetection<A>(_:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a1;
  swift_task_dealloc();
  if (v1) {
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else {
    return swift_task_switch(AceServiceInvokerAsync.submitWithBargeInDetection<A>(_:), 0LL, 0LL);
  }
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v4 = *(void *)(*v2 + 40);
  uint64_t v5 = *v2;
  uint64_t v6 = swift_task_dealloc(v4);
  if (!v1) {
    uint64_t v6 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t AceServiceInvokerAsync.submitWithBargeInDetection<A>(_:)()
{
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = swift_dynamicCastUnknownClass(v1, *(void *)(v0 + 16));
  if (!v2) {
    goto LABEL_15;
  }
  uint64_t v3 = v2;
  id v4 = [v1 encodedClassName];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v8 = 0LL;
  }

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(SABaseCommandClassIdentifier);
  if (!v8)
  {
    uint64_t v14 = *(void **)(v0 + 32);
    OUTLINED_FUNCTION_4_1();

    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
  }

  uint64_t v11 = *(void **)(v0 + 32);
  if (v6 != v9 || v8 != v10)
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v9, v10, 0LL);
    OUTLINED_FUNCTION_4_1();
    swift_bridgeObjectRelease();

    if ((v13 & 1) != 0) {
      goto LABEL_15;
    }
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
  }

  OUTLINED_FUNCTION_4_1();
  swift_bridgeObjectRelease();

LABEL_15:
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.siriPhone);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v20 = static os_log_type_t.debug.getter(v18, v19);
  if (os_log_type_enabled(v18, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl( &dword_0,  v18,  v20,  "#AceServiceInvokerAsync Received simulated response, throwing InferredBargeInError",  v21,  2u);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  uint64_t v22 = *(void **)(v0 + 32);

  unint64_t v23 = lazy protocol witness table accessor for type InferredBargeInError and conformance InferredBargeInError();
  uint64_t v24 = swift_allocError(&type metadata for InferredBargeInError, v23, 0LL, 0LL);
  swift_willThrow(v24, v25, v26, v27, v28, v29, v30, v31);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t lazy protocol witness table accessor for type InferredBargeInError and conformance InferredBargeInError()
{
  unint64_t result = lazy protocol witness table cache variable for type InferredBargeInError and conformance InferredBargeInError;
  if (!lazy protocol witness table cache variable for type InferredBargeInError and conformance InferredBargeInError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for InferredBargeInError,  &type metadata for InferredBargeInError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type InferredBargeInError and conformance InferredBargeInError);
  }

  return result;
}

ValueMetadata *type metadata accessor for InferredBargeInError()
{
  return &type metadata for InferredBargeInError;
}

uint64_t OUTLINED_FUNCTION_1_37(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

uint64_t static CallControlEventState.__derived_enum_equals(_:_:)(__int16 a1, __int16 a2)
{
  if (a1 & 0x100 | a2 & 0x100) {
    return (unsigned __int16)(a1 & 0x100 & a2 & 0x100) >> 8;
  }
  if ((a1 & 1) != 0)
  {
    if ((a2 & 1) != 0) {
      return 1LL;
    }
  }

  else if ((a2 & 1) == 0)
  {
    return 1LL;
  }

  return 0LL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CallControlEventState( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static CallControlEventState.__derived_enum_equals(_:_:)( *a1 | (unsigned __int16)(a1[1] << 8),  *a2 | (unsigned __int16)(a2[1] << 8));
}

BOOL CallControlEventFailureReason.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of CallControlEventFailureReason.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

uint64_t CallControlEventFailureReason.rawValue.getter()
{
  return 0x56495443415F4F4ELL;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance CallControlEventFailureReason@<W0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = CallControlEventFailureReason.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CallControlEventFailureReason( char *a1@<X8>)
{
  a1[15] = -18;
}

uint64_t SiriKitEventSending.sendCallControlEvent(action:target:state:)( unsigned __int8 a1, unsigned __int8 a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = SiriKitEventSending.getTaskType(for:target:)(a1, a2);
  uint64_t v11 = v10;
  uint64_t v12 = SiriKitEventSending.getTaskName(for:)(a1);
  uint64_t v14 = v13;
  type metadata accessor for SiriKitEvent(0LL);
  uint64_t v15 = swift_allocObject(&unk_3FAE00, 34LL, 7LL);
  if ((a3 & 0x100) != 0) {
    uint64_t v16 = 2LL;
  }
  else {
    uint64_t v16 = 4LL;
  }
  *(void *)(v15 + ++*(void *)(v0 + 16) = v12;
  *(void *)(v15 + 24) = v14;
  *(_BYTE *)(v15 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a3;
  *(_BYTE *)(v15 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 3) = HIBYTE(a3) & 1;
  uint64_t v17 = 70LL;
  if ((a3 & 0x100) != 0) {
    uint64_t v17 = 1LL;
  }
  uint64_t v18 = SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)( v16,  v9,  v11,  v17,  partial apply for closure #1 in SiriKitEventSending.sendCallControlEvent(action:target:state:),  v15);
  dispatch thunk of SiriKitEventSending.send(_:)(v18, a4, a5);
  return swift_release(v18);
}

uint64_t SiriKitEventSending.getTaskType(for:target:)(unsigned __int8 a1, unsigned __int8 a2)
{
  if (a1 == 11) {
    return 0LL;
  }
  uint64_t v5 = PhoneCallControlAction.rawValue.getter(a1);
  if (v5 == 0xD000000000000011LL && v6 == 0x8000000000346840LL) {
    goto LABEL_5;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, 0xD000000000000011LL, 0x8000000000346840LL, 0LL);
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0) {
    goto LABEL_10;
  }
  uint64_t v8 = PhoneCallControlAction.rawValue.getter(a1);
  if (v8 == 0xD000000000000010LL && v9 == 0x80000000003467C0LL)
  {
LABEL_5:
    swift_bridgeObjectRelease();
LABEL_10:
    strcpy((char *)v17, "CallControl.");
    BYTE5(v17[1]) = 0;
    HIWORD(v17[1]) = -5120;
    v11._uint64_t countAndFlagsBits = PhoneCallControlAction.description.getter(a1);
    String.append(_:)(v11);
    goto LABEL_11;
  }

  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, 0xD000000000000010LL, 0x80000000003467C0LL, 0LL);
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0) {
    goto LABEL_10;
  }
  if (a2 == 5) {
    return 0LL;
  }
  PhoneCallControlNLIntent.Target.rawValue.getter(a2);
  unint64_t v12 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v13 = StringProtocol.capitalized.getter(&type metadata for String, v12);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  strcpy((char *)v17, "CallControl.");
  BYTE5(v17[1]) = 0;
  HIWORD(v17[1]) = -5120;
  v16._uint64_t countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
LABEL_11:
  swift_bridgeObjectRelease();
  return v17[0];
}

uint64_t SiriKitEventSending.getTaskName(for:)(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_B20F8 + 4 * byte_322FA0[a1]))( 28239LL,  0xE200000000000000LL);
}

uint64_t sub_B20F8()
{
  return 6710863LL;
}

uint64_t sub_B2108()
{
  return 0LL;
}

uint64_t closure #1 in SiriKitEventSending.sendCallControlEvent(action:target:state:)( uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  uint64_t result = dispatch thunk of SiriKitEvent.SiriKitEventBuilder.parameterName.setter(a2, a3);
  if ((a4 & 0x101) == 0) {
    return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter( 0x56495443415F4F4ELL,  0xEE004C4C41435F45LL);
  }
  return result;
}

uint64_t sub_B2188()
{
  return swift_deallocObject(v0, 34LL, 7LL);
}

uint64_t partial apply for closure #1 in SiriKitEventSending.sendCallControlEvent(action:target:state:)( uint64_t a1)
{
  return closure #1 in SiriKitEventSending.sendCallControlEvent(action:target:state:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(unsigned __int8 *)(v1 + 32) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 33) << 8));
}

unint64_t lazy protocol witness table accessor for type CallControlEventFailureReason and conformance CallControlEventFailureReason()
{
  unint64_t result = lazy protocol witness table cache variable for type CallControlEventFailureReason and conformance CallControlEventFailureReason;
  if (!lazy protocol witness table cache variable for type CallControlEventFailureReason and conformance CallControlEventFailureReason)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CallControlEventFailureReason,  &type metadata for CallControlEventFailureReason);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CallControlEventFailureReason and conformance CallControlEventFailureReason);
  }

  return result;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CallControlEventState(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  unsigned int v2 = a2 + 0xFFFF;
  else {
    unsigned int v3 = 4;
  }
  if (v2 < 0xFF0000) {
    unsigned int v3 = 1;
  }
  if (v2 >= 0x10000) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_B225C + 4 * byte_322FAC[v4]))();
}

uint64_t storeEnumTagSinglePayload for CallControlEventState(_WORD *a1, int a2, int a3)
{
  unsigned int v3 = a3 + 0xFFFF;
  else {
    int v4 = 4;
  }
  if (v3 < 0xFF0000) {
    int v4 = 1;
  }
  if (v3 >= 0x10000) {
    LODWORD(OUTLINED_FUNCTION_3_31(v1, v2, v3, v4, v5) = v4;
  }
  else {
    LODWORD(OUTLINED_FUNCTION_3_31(v1, v2, v3, v4, v5) = 0;
  }
  if (a3) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (!a2) {
    return ((uint64_t (*)(void))((char *)sub_B2320 + 4 * byte_322FB6[v5]))();
  }
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_B2300 + 4 * byte_322FB1[v5]))();
}

uint64_t sub_B2300(uint64_t result)
{
  *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v1;
  return result;
}

uint64_t sub_B2320(uint64_t result)
{
  *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0;
  return result;
}

uint64_t sub_B2328(uint64_t result)
{
  *(_DWORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v1;
  return result;
}

uint64_t sub_B2330(uint64_t result)
{
  *(_WORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v1;
  return result;
}

uint64_t sub_B2338(uint64_t result)
{
  *(_WORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0;
  return result;
}

uint64_t sub_B2340(uint64_t result)
{
  *(_DWORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0;
  return result;
}

uint64_t getEnumTag for CallControlEventState(unsigned __int8 *a1)
{
  if (a1[1]) {
    return (*a1 | (a1[1] << 8)) - 255;
  }
  else {
    return 0LL;
  }
}

_BYTE *destructiveInjectEnumTag for CallControlEventState(_BYTE *result, int a2)
{
  if (a2)
  {
    *unint64_t result = a2 - 1;
    unsigned int v2 = ((a2 - 1) >> 8) + 1;
  }

  else
  {
    LOBYTE(OUTLINED_FUNCTION_2_18(v1, v2) = 0;
  }

  result[1] = v2;
  return result;
}

ValueMetadata *type metadata accessor for CallControlEventState()
{
  return &type metadata for CallControlEventState;
}

uint64_t storeEnumTagSinglePayload for CallControlEventFailureReason(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_B23E0 + 4 * byte_322FBB[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_B2400 + 4 * byte_322FC0[v4]))();
  }
}

_BYTE *sub_B23E0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_B2400(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_B2408(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_B2410(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_B2418(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_B2420(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CallControlEventFailureReason()
{
  return &type metadata for CallControlEventFailureReason;
}

id static StartAudioCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v6 = (void *)OUTLINED_FUNCTION_0_16(a1, a2, a3, a4, a5, a6);
  return OUTLINED_FUNCTION_3_38(v6, v7, v8, v9, v10, v11, v12, v13);
}

id specialized static StartAudioCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)( void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v33)(uint64_t *__return_ptr, void *);
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  id v49;
  os_log_type_t v50;
  int v51;
  BOOL v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  os_log_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  id v77;
  os_log_s *v78;
  os_log_s *v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  id v83;
  os_log_type_t v84;
  uint8_t *v85;
  void *v86;
  id v87;
  uint64_t (**v88)(uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  os_log_t v93;
  int v94;
  uint64_t v95;
  uint64_t *v96;
  void *v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t (**v103)(uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  void *v116;
  uint64_t v117[3];
  uint64_t v105 = a8;
  uint64_t v106 = a2;
  uint64_t v107 = a4;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallDestinationType>);
  uint64_t v13 = *(uint64_t (***)(uint64_t, uint64_t))(v12 - 8);
  __chkstk_darwin();
  uint64_t v14 = *(void *)(a7 - 8);
  __chkstk_darwin();
  Swift::String v16 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a6, a7);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (PhoneCallNLIntent.hasAnyConfirmation()())
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    uint64_t v18 = (os_log_s *)__swift_project_value_buffer(v17, (uint64_t)static Logger.siriPhone);
    id v19 = v107;
    id v20 = v107;
    Logger.logObject.getter(v20);
    os_log_type_t v21 = OUTLINED_FUNCTION_6_0();
    if (os_log_type_enabled(v18, v21))
    {
      uint64_t v22 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v23 = OUTLINED_FUNCTION_7_0(32LL);
      v117[0] = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v100 = v14;
      uint64_t v111 = (uint64_t)v107;
      id v24 = v20;
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartAudioCallIntent?);
      uint64_t v26 = String.init<A>(describing:)(&v111, v25);
      uint64_t v101 = v16;
      uint64_t v111 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v117);
      uint64_t v14 = v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v22 + 4);

      id v19 = v107;
      Swift::String v16 = v101;
      swift_bridgeObjectRelease();
      _os_log_impl( &dword_0,  v18,  v21,  "#StartAudioCallIntentConversion is confirmation, returning previousIntent: %s.",  v22,  0xCu);
      OUTLINED_FUNCTION_17_0(v23);
      OUTLINED_FUNCTION_0_2(v23);
      OUTLINED_FUNCTION_0_2((uint64_t)v22);
    }

    else
    {
    }

    uint64_t v36 = v20;
  }

  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    os_log_type_t v103 = v13;
    uint64_t v28 = type metadata accessor for Logger(0LL);
    uint64_t v104 = __swift_project_value_buffer(v28, (uint64_t)static Logger.siriPhone);
    uint64_t v29 = (os_log_s *)v104;
    Logger.logObject.getter(v104);
    os_log_type_t v30 = OUTLINED_FUNCTION_6_0();
    uint64_t v31 = v30;
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v13 = (uint64_t (**)(uint64_t, uint64_t))OUTLINED_FUNCTION_7_0(2LL);
      *(_WORD *)uint64_t v13 = 0;
      OUTLINED_FUNCTION_17_27( &dword_0,  v29,  (os_log_type_t)v31,  "#StartAudioCallIntentConversion called with NLv4IntentOnly");
      OUTLINED_FUNCTION_0_2((uint64_t)v13);
    }

    OUTLINED_FUNCTION_7_36();
    (*(void (**)(uint64_t *__return_ptr, uint64_t (**)(uint64_t, uint64_t), uint64_t))(v31 + 8))( v117,  v13,  v31);
    OUTLINED_FUNCTION_7_36();
    uint64_t v102 = OUTLINED_FUNCTION_6_2(*(uint64_t (**)(uint64_t, uint64_t))(v31 + 72));
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
    type metadata accessor for INCallDestinationType(0LL);
    Transformer.init(transform:)( partial apply for closure #1 in static Transformer<>.transformer(sharedGlobals:previousIntent:),  0LL,  v32);
    uint64_t v115 = _swiftEmptyArrayStorage;
    uint64_t v33 = (void (*)(uint64_t *__return_ptr, void *))Transformer.transform.getter(v12);
    uint64_t v35 = v34;
    v33(&v111, a1);
    uint64_t v100 = v14;
    uint64_t v99 = a7;
    swift_release(v35);
    uint64_t v37 = v111;
    uint64_t v38 = a1[4];
    OUTLINED_FUNCTION_4_35();
    uint64_t v39 = OUTLINED_FUNCTION_6_2(*(uint64_t (**)(uint64_t, uint64_t))(v38 + 128));
    uint64_t v115 = (void *)v39;
    OUTLINED_FUNCTION_4_35();
    swift_bridgeObjectRetain();
    os_log_type_t v98 = PhoneCallNLIntent.isEmergencyContactCall()();
    uint64_t v40 = a1[3];
    uint64_t v41 = a1[4];
    OUTLINED_FUNCTION_4_35();
    PhoneCallNLIntent.getPersons()(v40, v41);
    uint64_t v43 = v42;
    uint64_t v44 = objc_allocWithZone(&OBJC_CLASS___INStartAudioCallIntent);
    @nonobjc INStartAudioCallIntent.init(destinationType:contacts:)(v37, v43);
    uint64_t v46 = v45;
    uint64_t v47 = v106;
    uint64_t v48 = (void *)specialized static NLv4IntentConversion.setIntentMetadata(for:sharedGlobals:app:previousIntent:)();

    uint64_t v116 = v48;
    outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)&v111);
    uint64_t v49 = v48;
    swift_retain_n(v47, 2LL);
    swift_bridgeObjectRetain();
    uint64_t v107 = v49;
    OUTLINED_FUNCTION_16_18();
    uint64_t v50 = OUTLINED_FUNCTION_6_0();
    uint64_t v51 = v50;
    uint64_t v52 = os_log_type_enabled((os_log_t)v48, v50);
    uint64_t v101 = v16;
    if (v52)
    {
      unint64_t v53 = OUTLINED_FUNCTION_7_0(42LL);
      uint64_t v54 = (void *)OUTLINED_FUNCTION_7_0(8LL);
      uint64_t v92 = v39;
      uint64_t v97 = v54;
      char v55 = OUTLINED_FUNCTION_7_0(96LL);
      uint64_t v95 = v55;
      *(_DWORD *)unint64_t v53 = 138413058;
      uint64_t v94 = v51;
      uint64_t v93 = (os_log_t)v48;
      uint64_t v56 = v107;
      uint64_t v108 = (uint64_t)v107;
      uint64_t v109 = v55;
      uint64_t v96 = &v109;
      uint64_t v57 = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v53 + 4);
      *uint64_t v97 = v56;
      uint64_t v47 = v106;

      *(_WORD *)(v53 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
      uint64_t v58 = dispatch thunk of App.debugDescription.getter();
      uint64_t v108 = OUTLINED_FUNCTION_18_19(v58, v59);
      uint64_t v60 = v96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, v96, v53 + 14);
      OUTLINED_FUNCTION_14_18();
      OUTLINED_FUNCTION_62();
      *(_WORD *)(v53 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
      uint64_t v91 = v53 + 24;
      uint64_t v62 = v113;
      uint64_t v61 = v114;
      __swift_project_boxed_opaque_existential_1(&v111, v113);
      uint64_t v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 24))(v62, v61);
      uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriPhoneContact);
      uint64_t v65 = Array.description.getter(v63, v64);
      uint64_t v67 = v66;
      swift_bridgeObjectRelease();
      uint64_t v108 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v67, &v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, v60, v91);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(&v111);
      *(_WORD *)(v53 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
      uint64_t v68 = type metadata accessor for ContactQuery(0LL);
      os_log_type_t v69 = Array.debugDescription.getter(v92, v68);
      uint64_t v108 = OUTLINED_FUNCTION_18_19(v69, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, v96, v53 + 34);
      OUTLINED_FUNCTION_26_4();
      OUTLINED_FUNCTION_62();
      uint64_t v71 = v93;
      _os_log_impl( &dword_0,  v93,  (os_log_type_t)v94,  "#StartAudioCallIntentConversion starts with intent:%@ resolvedApp:%s phoneCallNLIntent=%s contactQueries=%s",  (uint8_t *)v53,  0x2Au);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v72 = v97;
      OUTLINED_FUNCTION_17_0((uint64_t)v97);
      OUTLINED_FUNCTION_0_2((uint64_t)v72);
      char v73 = v95;
      swift_arrayDestroy(v95, 3LL);
      OUTLINED_FUNCTION_0_2(v73);
      uint64_t v74 = v53;
      Swift::String v16 = v101;
      OUTLINED_FUNCTION_0_2(v74);
    }

    else
    {
      OUTLINED_FUNCTION_14_18();
      uint64_t v75 = v107;

      __swift_destroy_boxed_opaque_existential_1(&v111);
      OUTLINED_FUNCTION_26_4();
    }

    a7 = v99;
    OUTLINED_FUNCTION_22_0((uint64_t)&v115, (uint64_t)&v111);
    uint64_t v76 = (uint64_t)v115;
    uint64_t v77 = v107;
    specialized static NLv4IntentConversion.updateSiriKitIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:nlIntent:sharedGlobals:contactGroupResolver:)( (uint64_t)v77,  v76,  v98,  v47,  a1,  (uint64_t)a3,  (uint64_t)v16,  a7,  v105);

    swift_bridgeObjectRelease();
    outlined bridged method (pb) of @objc INStartAudioCallIntent.contacts.getter(v77);
    os_log_type_t v79 = v78;
    uint64_t v80 = one-time initialization token for instance;
    uint64_t v81 = v77;
    if (v80 != -1) {
      swift_once(&one-time initialization token for instance, one-time initialization function for instance);
    }
    uint64_t v82 = static EligibleAppFinder.instance;
    swift_retain();
    specialized static AppSelectionSignalsGatheringHelper.triggerSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:smartAppSelection:eligibleAppsFinder:skIntent:)( a3,  (uint64_t)v79,  a1,  0LL,  v82);
    swift_release(v82);

    OUTLINED_FUNCTION_62();
    uint64_t v83 = v81;
    OUTLINED_FUNCTION_16_18();
    os_log_type_t v84 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_29_5(v84))
    {
      uint64_t v85 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v86 = (void *)OUTLINED_FUNCTION_7_0(8LL);
      *(_DWORD *)uint64_t v85 = 138412290;
      uint64_t v109 = (uint64_t)v83;
      uint64_t v87 = v83;
      a7 = v99;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110, v85 + 4);
      *uint64_t v86 = v107;

      _os_log_impl(&dword_0, v79, (os_log_type_t)v16, "#StartAudioCallIntentConversion ends with %@", v85, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_17_0((uint64_t)v86);
      OUTLINED_FUNCTION_0_2((uint64_t)v86);
      OUTLINED_FUNCTION_0_2((uint64_t)v85);
    }

    else
    {
    }

    uint64_t v14 = v100;
    uint64_t v88 = v103;

    OUTLINED_FUNCTION_11_29();
    OUTLINED_FUNCTION_19_9(v88[1]);
    __swift_destroy_boxed_opaque_existential_1(v117);
    OUTLINED_FUNCTION_22_0((uint64_t)&v116, (uint64_t)&v109);
    id v19 = v116;
    Swift::String v16 = v101;
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, a7);
  return v19;
}

ValueMetadata *type metadata accessor for StartAudioCallIntentConversion()
{
  return &type metadata for StartAudioCallIntentConversion;
}

id OUTLINED_FUNCTION_3_38( void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return specialized static StartAudioCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
}

void *OUTLINED_FUNCTION_4_35()
{
  return __swift_project_boxed_opaque_existential_1(v1, v0);
}

void *OUTLINED_FUNCTION_7_36()
{
  return __swift_project_boxed_opaque_existential_1(v0, v0[3]);
}

uint64_t OUTLINED_FUNCTION_11_29()
{
  return swift_release(*(void *)(v0 - 272));
}

uint64_t OUTLINED_FUNCTION_14_18()
{
  return swift_release_n(v0, 2LL);
}

uint64_t OUTLINED_FUNCTION_16_18()
{
  return Logger.logObject.getter();
}

void OUTLINED_FUNCTION_17_27(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_18_19(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 216));
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSObject);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }

  return result;
}

void *ConfirmationViewTemplate.yes.getter@<X0>(void *a1@<X8>)
{
  return outlined init with copy of ConfirmationViewTemplate.Button(v1, a1);
}

void *outlined init with copy of ConfirmationViewTemplate.Button(void *a1, void *a2)
{
  return a2;
}

void *ConfirmationViewTemplate.no.getter@<X0>(void *a1@<X8>)
{
  return outlined init with copy of ConfirmationViewTemplate.Button((void *)(v1 + 56), a1);
}

void ConfirmationViewTemplate.subtitle.getter()
{
}

void ConfirmationViewTemplate.style.getter()
{
}

double static ConfirmationViewTemplate.makeDefaultConfirmationViewTemplate(labels:sharedGlobals:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v18 = v21[1];
  __int128 v19 = v21[0];
  __int128 v17 = v21[2];
  uint64_t v11 = v22;
  __swift_destroy_boxed_opaque_existential_1(v23);
  OUTLINED_FUNCTION_4_36();
  static ConfirmationViewTemplate.Button.makeDefaultNoButton(label:deviceState:)(a3, a4, v20, v23);
  __int128 v15 = v23[1];
  __int128 v16 = v23[0];
  __int128 v14 = v23[2];
  uint64_t v12 = v24;
  __swift_destroy_boxed_opaque_existential_1(v20);
  *(_OWORD *)a6 = v19;
  *(_OWORD *)(a6 + ++*(void *)(v0 + 16) = v18;
  *(_OWORD *)(a6 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v17;
  *(void *)(a6 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v11;
  *(_OWORD *)(a6 + 56) = v16;
  *(_OWORD *)(a6 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v15;
  *(_OWORD *)(a6 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v14;
  *(void *)(a6 + 104) = v12;
  double result = 0.0;
  *(_OWORD *)(a6 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
  *(_OWORD *)(a6 + outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 - 168), v0 - 128) = 0u;
  *(_OWORD *)(a6 + 144) = 0u;
  return result;
}

uint64_t static ConfirmationViewTemplate.Button.makeDefaultYesButton(label:deviceState:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  return static ConfirmationViewTemplate.Button.makeDefaultYesButton(label:deviceState:)( a1,  a2,  a3,  &SAUIConfirmationOptionConfirmationOptionTypeCONFIRMValue,  6LL,  a4);
}

uint64_t static ConfirmationViewTemplate.Button.makeDefaultNoButton(label:deviceState:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  return static ConfirmationViewTemplate.Button.makeDefaultYesButton(label:deviceState:)( a1,  a2,  a3,  &SAUIConfirmationOptionConfirmationOptionTypeDENYValue,  7LL,  a4);
}

uint64_t static ConfirmationViewTemplate.Button.makeDefaultYesButton(label:deviceState:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v12 = type metadata accessor for CommonDirectAction(0LL);
  __chkstk_darwin();
  __int128 v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a4);
  uint64_t v17 = v16;
  uint64_t v18 = swift_storeEnumTagMultiPayload(v14, v12, a5);
  OUTLINED_FUNCTION_24_10( v18,  (unint64_t *)&lazy cache variable for type metadata for SKIDirectInvocationPayload,  &OBJC_CLASS___SKIDirectInvocationPayload_ptr);
  swift_bridgeObjectRetain();
  CommonDirectAction.identifier.getter();
  SKIDirectInvocationPayload.__allocating_init(identifier:)();
  id v20 = v19;
  CommonDirectAction.userData.getter();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v21);
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(v23, v20);
  id v24 = SKIDirectInvocationPayload.toStartLocalRequest(deviceState:)(a3);

  uint64_t result = outlined destroy of CommonDirectAction((uint64_t)v14);
  *a6 = a1;
  a6[1] = a2;
  a6[2] = v15;
  a6[3] = v17;
  a6[4] = 0LL;
  a6[5] = 0LL;
  a6[6] = v24;
  return result;
}

__n128 ConfirmationViewTemplate.init(yes:no:title:subtitle:style:)@<Q0>( uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  __int128 v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  uint64_t v11 = *((void *)a2 + 3);
  uint64_t v12 = *((void *)a2 + 6);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 48);
  *(_OWORD *)a9 = *(_OWORD *)a1;
  *(void *)(a9 + ++*(void *)(v0 + 16) = v13;
  *(void *)(a9 + 24) = v14;
  *(_OWORD *)(a9 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_OWORD *)(a1 + 32);
  *(void *)(a9 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v15;
  *(_OWORD *)(a9 + 56) = v9;
  *(void *)(a9 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v10;
  *(void *)(a9 + 80) = v11;
  __n128 result = (__n128)a2[2];
  *(__n128 *)(a9 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = result;
  *(void *)(a9 + 104) = v12;
  *(void *)(a9 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a3;
  *(void *)(a9 + 120) = a4;
  *(void *)(a9 + outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 - 168), v0 - 128) = a5;
  *(void *)(a9 + 136) = a6;
  *(void *)(a9 + 144) = a7;
  *(void *)(a9 + 15__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a8;
  return result;
}

uint64_t ConfirmationViewTemplate.Button.confirmationOptionTypes.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_6_3();
  return v1;
}

uint64_t ConfirmationViewTemplate.Button.command.getter()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 48));
}

void ConfirmationViewTemplate.Button.asSASTButtonItem.getter(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = OUTLINED_FUNCTION_5_32(v4);
  *(_OWORD *)(v5 + ++*(void *)(v0 + 16) = xmmword_31FE60;
  uint64_t v6 = v1[6];
  *(void *)(v5 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v6;
  OUTLINED_FUNCTION_3_39(v5, v7, v8, v9);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain(v6);
  SASTButtonItem.init(label:commands:centered:)(v2, v3, v10, 1);
}

id ConfirmationViewTemplate.Button.asConfirmationOption.getter(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = OUTLINED_FUNCTION_5_32(v8);
  *(_OWORD *)(v9 + ++*(void *)(v0 + 16) = xmmword_31FE60;
  uint64_t v10 = v1[6];
  *(void *)(v9 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v10;
  OUTLINED_FUNCTION_3_39(v9, v11, v12, v13);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain(v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return SAUIConfirmationOption.init(label:type:iconType:commands:)(v2, v3, v4, v5, v6, v7);
}

double ConfirmationViewTemplate.Button.init(label:confirmationOptionTypes:command:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  __int128 v16 = v18[1];
  *(_OWORD *)a8 = v18[0];
  *(_OWORD *)(a8 + ++*(void *)(v0 + 16) = v16;
  double result = *(double *)&v19;
  *(_OWORD *)(a8 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v19;
  *(void *)(a8 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v20;
  return result;
}

uint64_t specialized ConfirmationViewTemplate.Button.init(label:confirmationOptionTypes:command:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

uint64_t destroy for ConfirmationViewTemplate(void *a1)
{
  return swift_bridgeObjectRelease(a1[19]);
}

void *initializeWithCopy for ConfirmationViewTemplate(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v7 = a2[6];
  uint64_t v6 = a2[7];
  a1[6] = v7;
  a1[7] = v6;
  uint64_t v9 = a2[8];
  uint64_t v8 = a2[9];
  a1[8] = v9;
  a1[9] = v8;
  uint64_t v11 = a2[10];
  uint64_t v10 = a2[11];
  a1[10] = v11;
  a1[11] = v10;
  uint64_t v12 = a2[12];
  uint64_t v13 = a2[13];
  a1[12] = v12;
  a1[13] = v13;
  uint64_t v14 = a2[15];
  a1[14] = a2[14];
  a1[15] = v14;
  uint64_t v15 = a2[17];
  a1[16] = a2[16];
  a1[17] = v15;
  uint64_t v17 = a2[19];
  a1[18] = a2[18];
  a1[19] = v17;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_unknownObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_unknownObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v17);
  return a1;
}

void *assignWithCopy for ConfirmationViewTemplate(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[6];
  uint64_t v11 = a1[6];
  a1[6] = v10;
  swift_unknownObjectRetain(v10);
  swift_unknownObjectRelease(v11);
  a1[7] = a2[7];
  uint64_t v12 = a2[8];
  uint64_t v13 = a1[8];
  a1[8] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[9] = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a1[10];
  a1[10] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[11] = a2[11];
  uint64_t v16 = a2[12];
  uint64_t v17 = a1[12];
  a1[12] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = a2[13];
  uint64_t v19 = a1[13];
  a1[13] = v18;
  swift_unknownObjectRetain(v18);
  swift_unknownObjectRelease(v19);
  a1[14] = a2[14];
  uint64_t v20 = a2[15];
  uint64_t v21 = a1[15];
  a1[15] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  a1[16] = a2[16];
  uint64_t v22 = a2[17];
  uint64_t v23 = a1[17];
  a1[17] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  a1[18] = a2[18];
  uint64_t v24 = a2[19];
  uint64_t v25 = a1[19];
  a1[19] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  return a1;
}

void *__swift_memcpy160_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA0uLL);
}

void *assignWithTake for ConfirmationViewTemplate(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = a1[3];
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  a1[4] = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(a1[5]);
  uint64_t v8 = a1[6];
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 5) = *(_OWORD *)(a2 + 40);
  swift_unknownObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v10 = a1[8];
  a1[7] = *(void *)(a2 + 56);
  a1[8] = v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a2 + 80);
  uint64_t v12 = a1[10];
  a1[9] = *(void *)(a2 + 72);
  a1[10] = v11;
  swift_bridgeObjectRelease(v12);
  a1[11] = *(void *)(a2 + 88);
  swift_bridgeObjectRelease(a1[12]);
  uint64_t v13 = a1[13];
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  swift_unknownObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 120);
  uint64_t v15 = a1[15];
  a1[14] = *(void *)(a2 + 112);
  a1[15] = v14;
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(void *)(a2 + 136);
  uint64_t v17 = a1[17];
  a1[16] = *(void *)(a2 + 128);
  a1[17] = v16;
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = *(void *)(a2 + 152);
  uint64_t v19 = a1[19];
  a1[18] = *(void *)(a2 + 144);
  a1[19] = v18;
  swift_bridgeObjectRelease(v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationViewTemplate(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 160))
    {
      LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationViewTemplate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 15__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(_OWORD *)(result + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 160) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 160) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ConfirmationViewTemplate()
{
  return &type metadata for ConfirmationViewTemplate;
}

uint64_t destroy for ConfirmationViewTemplate.Button(void *a1)
{
  return swift_unknownObjectRelease(a1[6]);
}

void *initializeWithCopy for ConfirmationViewTemplate.Button(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[6];
  a1[6] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_unknownObjectRetain(v6);
  return a1;
}

void *assignWithCopy for ConfirmationViewTemplate.Button(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[6];
  uint64_t v11 = a1[6];
  a1[6] = v10;
  swift_unknownObjectRetain(v10);
  swift_unknownObjectRelease(v11);
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + ++*(void *)(v0 + 16) = v3;
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v4;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for ConfirmationViewTemplate.Button(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = a1[3];
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  a1[4] = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(a1[5]);
  uint64_t v8 = a1[6];
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 5) = *(_OWORD *)(a2 + 40);
  swift_unknownObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationViewTemplate.Button(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationViewTemplate.Button(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ConfirmationViewTemplate.Button()
{
  return &type metadata for ConfirmationViewTemplate.Button;
}

uint64_t OUTLINED_FUNCTION_3_39(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Array._endMutation()(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_4_36()
{
  return v2(v0, v1);
}

uint64_t OutputPublisherWrapper.__allocating_init(outputPublisher:outputPublisherAsync:)( __int128 *a1, __int128 *a2)
{
  uint64_t v5 = swift_allocObject(v2, 96LL, 7LL);
  outlined init with take of AppSelectionSignalComponent(a1, v5 + 16);
  outlined init with take of AppSelectionSignalComponent(a2, v5 + 56);
  return v5;
}

uint64_t OutputPublisherWrapper.init(outputPublisher:outputPublisherAsync:)(__int128 *a1, __int128 *a2)
{
  return v2;
}

void *PhoneProtectedAppCheckStrategy.protectedAppCheck(_:appsToBeUnlocked:)(uint64_t a1, void *a2)
{
  if ((PhoneProtectedAppCheckStrategy.shouldDisableProtectedAppsCheck()() & 1) != 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v4 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v4, (uint64_t)static Logger.siriPhone);
    os_log_type_t v5 = OUTLINED_FUNCTION_41();
    if (OUTLINED_FUNCTION_87(v5))
    {
      uint64_t v6 = (_DWORD *)OUTLINED_FUNCTION_7_0(12LL);
      OUTLINED_FUNCTION_7_0(32LL);
      OUTLINED_FUNCTION_12_32();
      *uint64_t v6 = 136315138;
      uint64_t v7 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000026LL, 0x8000000000348D30LL, &v19);
      OUTLINED_FUNCTION_0_34(v7, v8, v9, v10, v11, v12, v13, v14, v18, v19);
      OUTLINED_FUNCTION_9_4( &dword_0,  v15,  v16,  "#PhoneProtectedAppCheckStrategy %s ProtectedAppCheck disabled, returning empty!");
      OUTLINED_FUNCTION_8_24();
      OUTLINED_FUNCTION_0_2(v2);
      OUTLINED_FUNCTION_0_2((uint64_t)v6);
    }

    return _swiftEmptyArrayStorage;
  }

  else
  {
    swift_bridgeObjectRetain();
  }

  return a2;
}

void PhoneProtectedAppCheckStrategy.protectedAppCheck(_:didProduce:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v4 = OUTLINED_FUNCTION_15_1();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v5 = swift_retain_n(a1, 2LL);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v8 = static os_log_type_t.debug.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    uint64_t v9 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v10 = OUTLINED_FUNCTION_7_0(96LL);
    uint64_t v32 = v10;
    *(_DWORD *)uint64_t v9 = 136315650;
    uint64_t v11 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020LL, 0x8000000000348D60LL, &v32);
    OUTLINED_FUNCTION_10_28(v11, v12, v13, v9 + 12, v14, v15, v16, v17, v11);
    *(_WORD *)(v9 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    uint64_t v18 = type metadata accessor for ProtectedAppStatus(0LL);
    uint64_t v19 = swift_bridgeObjectRetain();
    Array.description.getter(v19, v18);
    uint64_t v20 = swift_bridgeObjectRelease();
    uint64_t v21 = OUTLINED_FUNCTION_11_30(v20);
    OUTLINED_FUNCTION_10_28(v21, v22, v23, v9 + 22, v24, v25, v26, v27, v21);
    OUTLINED_FUNCTION_14_19();
    uint64_t v28 = swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    uint64_t v29 = ProtectedAppCheck.appIDs.getter(v28);
    Array.description.getter(v29, &type metadata for String);
    uint64_t v30 = swift_bridgeObjectRelease();
    uint64_t v31 = OUTLINED_FUNCTION_11_30(v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v9 + 24);
    OUTLINED_FUNCTION_0_3();
    swift_bridgeObjectRelease();
    _os_log_impl( &dword_0,  v6,  v8,  "#PhoneProtectedAppCheckStrategy %s called with status %s for %s",  (uint8_t *)v9,  0x20u);
    swift_arrayDestroy(v10, 3LL);
    OUTLINED_FUNCTION_0_2(v10);
    OUTLINED_FUNCTION_0_2(v9);
  }

  else
  {

    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_14_19();
  }

uint64_t PhoneProtectedAppCheckStrategy.shouldDisableProtectedAppsCheck()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(v2, v3);
  LOBYTE(OUTLINED_FUNCTION_2_18(v1, v2) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 256LL))(v4);
  swift_release(v4);
  if ((v2 & 1) != 0)
  {
    uint64_t v5 = v1 + 2;
    OUTLINED_FUNCTION_7_37();
    if (PhoneCallNLIntent.isEmergencyCall()())
    {
      OUTLINED_FUNCTION_15_22();
      if (!v6) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v7 = OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_12_1(v7, (uint64_t)static Logger.siriPhone);
      os_log_type_t v8 = OUTLINED_FUNCTION_41();
      if (OUTLINED_FUNCTION_87(v8))
      {
        uint64_t v9 = (_DWORD *)OUTLINED_FUNCTION_7_0(12LL);
        OUTLINED_FUNCTION_7_0(32LL);
        OUTLINED_FUNCTION_12_32();
        *uint64_t v9 = 136315138;
        uint64_t v11 = OUTLINED_FUNCTION_2_29(v10);
        OUTLINED_FUNCTION_0_34(v11, v12, v13, v14, v15, v16, v17, v18, v56, v57);
        uint64_t v21 = "#PhoneProtectedAppCheckStrategy %s isEmergency = true";
LABEL_19:
        OUTLINED_FUNCTION_9_4(&dword_0, v19, v20, v21);
        OUTLINED_FUNCTION_8_24();
        OUTLINED_FUNCTION_0_2(v3);
        OUTLINED_FUNCTION_0_2((uint64_t)v9);

        uint64_t v36 = 1LL;
        goto LABEL_22;
      }
    }

    else
    {
      OUTLINED_FUNCTION_7_37();
      if (PhoneCallNLIntent.isOutgoingCallExcludeCallBackAndRedial()()
        || (uint64_t v37 = v1[5],
            uint64_t v1 = (void *)v1[6],
            __swift_project_boxed_opaque_existential_1(v5, v37),
            PhoneCallNLIntent.isSearchCallOrVoiceMail()()))
      {
        uint64_t v36 = 0LL;
        goto LABEL_22;
      }

      OUTLINED_FUNCTION_15_22();
      if (!v6) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v38 = OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_12_1(v38, (uint64_t)static Logger.siriPhone);
      os_log_type_t v39 = OUTLINED_FUNCTION_41();
      if (OUTLINED_FUNCTION_87(v39))
      {
        uint64_t v9 = (_DWORD *)OUTLINED_FUNCTION_7_0(12LL);
        OUTLINED_FUNCTION_7_0(32LL);
        OUTLINED_FUNCTION_12_32();
        *uint64_t v9 = 136315138;
        uint64_t v41 = OUTLINED_FUNCTION_2_29(v40);
        OUTLINED_FUNCTION_0_34(v41, v42, v43, v44, v45, v46, v47, v48, v56, v57);
        uint64_t v21 = "#PhoneProtectedAppCheckStrategy %s Not a calling or call history request";
        goto LABEL_19;
      }
    }
  }

  else
  {
    OUTLINED_FUNCTION_15_22();
    if (!v6) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v22 = OUTLINED_FUNCTION_15_1();
    uint64_t v23 = (os_log_s *)OUTLINED_FUNCTION_12_1(v22, (uint64_t)static Logger.siriPhone);
    os_log_type_t v25 = static os_log_type_t.debug.getter(v23, v24);
    if (os_log_type_enabled(v23, v25))
    {
      uint64_t v26 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      OUTLINED_FUNCTION_7_0(32LL);
      OUTLINED_FUNCTION_12_32();
      *(_DWORD *)uint64_t v26 = 136315138;
      uint64_t v28 = OUTLINED_FUNCTION_2_29(v27);
      OUTLINED_FUNCTION_0_34(v28, v29, v30, v31, v32, v33, v34, v35, v56, v57);
      _os_log_impl(&dword_0, v23, v25, "#PhoneProtectedAppCheckStrategy %s ProtectedApps is disabled", v26, 0xCu);
      uint64_t v36 = 1LL;
      OUTLINED_FUNCTION_8_24();
      OUTLINED_FUNCTION_0_2(v3);
      OUTLINED_FUNCTION_0_2((uint64_t)v26);

      goto LABEL_22;
    }
  }

  uint64_t v36 = 1LL;
LABEL_22:
  OUTLINED_FUNCTION_15_22();
  if (!v6) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v49 = OUTLINED_FUNCTION_15_1();
  uint64_t v50 = (os_log_s *)OUTLINED_FUNCTION_12_1(v49, (uint64_t)static Logger.siriPhone);
  os_log_type_t v52 = static os_log_type_t.debug.getter(v50, v51);
  if (os_log_type_enabled(v50, v52))
  {
    uint64_t v53 = OUTLINED_FUNCTION_7_0(18LL);
    uint64_t v54 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v57 = v54;
    *(_DWORD *)uint64_t v53 = 136315394;
    uint64_t v56 = OUTLINED_FUNCTION_2_29(v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v53 + 4);
    *(_WORD *)(v53 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 1024;
    LODWORD(v56) = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, (char *)&v56 + 4, v53 + 14);
    _os_log_impl(&dword_0, v50, v52, "#PhoneProtectedAppCheckStrategy %s --> %{BOOL}d", (uint8_t *)v53, 0x12u);
    swift_arrayDestroy(v54, 1LL);
    OUTLINED_FUNCTION_0_2(v54);
    OUTLINED_FUNCTION_0_2(v53);
  }

  return v36;
}

uint64_t OutputPublisherWrapper.deinit()
{
  return v0;
}

uint64_t OutputPublisherWrapper.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 96LL, 7LL);
}

uint64_t protocol witness for ProtectedAppCheckStrategy.protectedAppCheck(_:appsToBeUnlocked:) in conformance PhoneProtectedAppCheckStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104LL))();
}

uint64_t type metadata accessor for PhoneProtectedAppCheckStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin30PhoneProtectedAppCheckStrategy);
}

uint64_t OUTLINED_FUNCTION_0_34( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, &a10, v11, v10);
}

uint64_t OUTLINED_FUNCTION_2_29(uint64_t a1, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000021LL,  (v1 - 32) | 0x8000000000000000LL,  (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_7_37()
{
  uint64_t v2 = *(void *)(v0 + 40);
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_8_24()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t OUTLINED_FUNCTION_10_28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, v10, v9, a4);
}

uint64_t OUTLINED_FUNCTION_11_30(uint64_t a1, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v2, (uint64_t *)va);
}

  ;
}

uint64_t OUTLINED_FUNCTION_14_19()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

  ;
}

uint64_t static SeasRulesHelper.getContactDonationInfo(phoneCallNLIntent:appBundleIds:)( void *a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(OUTLINED_FUNCTION_7_27() + 16);
  swift_bridgeObjectRelease();
  if (v4 == 1)
  {
    uint64_t v5 = OUTLINED_FUNCTION_7_27();
    if (!*(void *)(v5 + 16)) {
      goto LABEL_23;
    }
    outlined init with copy of SignalProviding(v5 + 32, (uint64_t)v40);
    swift_bridgeObjectRelease();
    uint64_t v6 = v41;
    uint64_t v7 = v42;
    __swift_project_boxed_opaque_existential_1(v40, v41);
    uint64_t v2 = SiriPhoneContact.getVocabularyAppsBundleSet()(v6, v7);
    __swift_destroy_boxed_opaque_existential_1(v40);
    if (one-time initialization token for siriPhone != -1) {
LABEL_24:
    }
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    uint64_t v8 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
    uint64_t v9 = OUTLINED_FUNCTION_2_30();
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v12 = static os_log_type_t.debug.getter(v10, v11);
    if (os_log_type_enabled(v10, v12))
    {
      uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      unint64_t v14 = a2;
      uint64_t v15 = OUTLINED_FUNCTION_7_0(32LL);
      v40[0] = v15;
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v16 = swift_bridgeObjectRetain();
      uint64_t v17 = v2;
      uint64_t v18 = Set.description.getter(v16, &type metadata for String, &protocol witness table for String);
      unint64_t v20 = v19;
      swift_bridgeObjectRelease();
      uint64_t v21 = v18;
      uint64_t v2 = v17;
      uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v20, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v13 + 4);
      swift_bridgeObjectRelease_n(v17, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v10, v12, "#SeasContactInSingleAppRule: vocabularyAppsBundleSet %s", v13, 0xCu);
      swift_arrayDestroy(v15, 1LL);
      uint64_t v22 = v15;
      a2 = v14;
      OUTLINED_FUNCTION_0_2(v22);
      OUTLINED_FUNCTION_0_2((uint64_t)v13);
    }

    else
    {

      swift_bridgeObjectRelease_n(v2, 2LL);
    }

    specialized Set.contains(_:)(0x73746361746E6F43LL, 0xE800000000000000LL, v2);
    uint64_t v29 = *(void *)(a2 + 16);
    if (v29)
    {
      uint64_t v30 = v2;
      type metadata accessor for App(0LL);
      swift_bridgeObjectRetain();
      uint64_t v31 = 0LL;
      uint64_t v38 = 0LL;
      uint64_t v32 = (uint64_t *)(a2 + 40);
      a2 = 0xE000000000000000LL;
      while (1)
      {
        uint64_t v33 = *(v32 - 1);
        uint64_t v2 = *v32;
        OUTLINED_FUNCTION_2_30();
        uint64_t v34 = App.__allocating_init(appIdentifier:)(v33, v2);
        Swift::Bool v35 = App.isFirstParty()();
        swift_release(v34);
        if (v35 || (specialized Set.contains(_:)(v33, v2, v30), (v36 & 1) == 0))
        {
          swift_bridgeObjectRelease();
        }

        else
        {
          swift_bridgeObjectRelease();
          if (__OFADD__(v31++, 1LL))
          {
            __break(1u);
LABEL_23:
            __break(1u);
            goto LABEL_24;
          }

          a2 = v2;
          uint64_t v38 = v33;
        }

        v32 += 2;
        if (!--v29)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v38;
        }
      }
    }

    swift_bridgeObjectRelease();
    return 0LL;
  }

  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
    os_log_type_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_0, v25, v26, "#SeasRulesHelper contacts is not equal 1, return nil", v27, 2u);
      OUTLINED_FUNCTION_0_2((uint64_t)v27);
    }

    return 0LL;
  }

PhoneCallFlowDelegatePlugin::ContactDonationInfo __swiftcall ContactDonationInfo.init()()
{
  uint64_t v0 = 0LL;
  uint64_t v1 = (void *)0xE000000000000000LL;
  Swift::Int v2 = 0LL;
  Swift::Bool v3 = 0;
  result.contactInNumberOfThirdPartyApps = v2;
  result.thirdPartyAppId._object = v1;
  result.thirdPartyAppId._uint64_t countAndFlagsBits = v0;
  result.contactExistsInFirstParty = v3;
  return result;
}

uint64_t ContactDonationInfo.thirdPartyAppId.getter(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t ContactDonationInfo.thirdPartyAppId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(v2[1]);
  *Swift::Int v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t ContactDonationInfo.contactInNumberOfThirdPartyApps.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t ContactDonationInfo.contactInNumberOfThirdPartyApps.setter(uint64_t result)
{
  *(void *)(v1 + ++*(void *)(v0 + 16) = result;
  return result;
}

uint64_t ContactDonationInfo.contactExistsInFirstParty.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return a4 & 1;
}

uint64_t ContactDonationInfo.contactExistsInFirstParty.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 24) = result;
  return result;
}

Swift::Void (__swiftcall *ContactDonationInfo.contactExistsInFirstParty.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

PhoneCallFlowDelegatePlugin::ContactDonationInfo __swiftcall ContactDonationInfo.init(thirdPartyAppId:contactInNumberOfThirdPartyApps:contactExistsInFirstParty:)( Swift::String thirdPartyAppId, Swift::Int contactInNumberOfThirdPartyApps, Swift::Bool contactExistsInFirstParty)
{
  Swift::Bool v3 = contactExistsInFirstParty;
  result.thirdPartyAppId = thirdPartyAppId;
  result.contactInNumberOfThirdPartyApps = contactInNumberOfThirdPartyApps;
  result.contactExistsInFirstParty = v3;
  return result;
}

ValueMetadata *type metadata accessor for SeasRulesHelper()
{
  return &type metadata for SeasRulesHelper;
}

uint64_t initializeWithCopy for ContactDonationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v3;
  *(void *)(a1 + ++*(void *)(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for ContactDonationInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + ++*(void *)(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ContactDonationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + ++*(void *)(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactDonationInfo(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 25))
    {
      LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactDonationInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0LL;
    *(void *)(result + ++*(void *)(v0 + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 2__swift_destroy_boxed_opaque_existential_1(v0 + 5) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 2__swift_destroy_boxed_opaque_existential_1(v0 + 5) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ContactDonationInfo()
{
  return &type metadata for ContactDonationInfo;
}

uint64_t OUTLINED_FUNCTION_2_30()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

__int128 *CommsAppSelectionAppIndependentSignalsKeys.userPersonaKey.unsafeMutableAddressor()
{
  if (one-time initialization token for userPersonaKey != -1) {
    swift_once(&one-time initialization token for userPersonaKey, one-time initialization function for userPersonaKey);
  }
  return &static CommsAppSelectionAppIndependentSignalsKeys.userPersonaKey;
}

const char *CommsAppSelectionAppIndependentSignalsKeys.requestOriginLocaleKey.unsafeMutableAddressor()
{
  return "raw.locale";
}

uint64_t static CommsAppSelectionAppIndependentSignalsKeys.requestOriginLocaleKey.getter()
{
  return 0x61636F6C2E776172LL;
}

const char *CommsAppSelectionAppIndependentSignalsKeys.requestOriginLanguageKey.unsafeMutableAddressor()
{
  return "raw.language";
}

uint64_t static CommsAppSelectionAppIndependentSignalsKeys.requestOriginLanguageKey.getter()
{
  return 0x676E616C2E776172LL;
}

void *CommsAppSelectionAppIndependentSignalsKeys.communicationTypeKey.unsafeMutableAddressor()
{
  return &static CommsAppSelectionAppIndependentSignalsKeys.communicationTypeKey;
}

unint64_t static CommsAppSelectionAppIndependentSignalsKeys.communicationTypeKey.getter()
{
  return 0xD000000000000015LL;
}

uint64_t one-time initialization function for userPersonaKey()
{
  uint64_t v0 = type metadata accessor for DomainUseCase(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = (*(uint64_t (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for DomainUseCase.phoneCall(_:),  v0);
  uint64_t v5 = DomainUseCase.rawValue.getter(v4);
  uint64_t v7 = v6;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v17 = v5;
  uint64_t v18 = v7;
  swift_bridgeObjectRetain(v7);
  v8._uint64_t countAndFlagsBits = 46LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  uint64_t v9 = swift_bridgeObjectRelease(v7);
  uint64_t v11 = v17;
  uint64_t v10 = v18;
  uint64_t v12 = static DomainUserPersonaSignal.signalName.getter(v9);
  unint64_t v14 = v13;
  uint64_t v17 = v11;
  uint64_t v18 = v10;
  swift_bridgeObjectRetain(v10);
  v15._uint64_t countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v10);
  uint64_t result = swift_bridgeObjectRelease(v14);
  static CommsAppSelectionAppIndependentSignalsKeys.userPersonaKey = v17;
  unk_4779B0 = v18;
  return result;
}

uint64_t static CommsAppSelectionAppIndependentSignalsKeys.userPersonaKey.getter()
{
  if (one-time initialization token for userPersonaKey != -1) {
    swift_once(&one-time initialization token for userPersonaKey, one-time initialization function for userPersonaKey);
  }
  uint64_t v0 = static CommsAppSelectionAppIndependentSignalsKeys.userPersonaKey;
  swift_bridgeObjectRetain();
  return v0;
}

ValueMetadata *type metadata accessor for CommsAppSelectionAppIndependentSignalsKeys()
{
  return &type metadata for CommsAppSelectionAppIndependentSignalsKeys;
}

Swift::Bool __swiftcall ResponseMode.isDisplayMode()()
{
  return ResponseMode.isDisplayMode()( (void (*)(uint64_t))&static ResponseMode.displayOnly.getter,  (void (*)(uint64_t))&static ResponseMode.displayForward.getter);
}

Swift::Bool __swiftcall ResponseMode.isVoiceMode()()
{
  return ResponseMode.isDisplayMode()( (void (*)(uint64_t))&static ResponseMode.voiceOnly.getter,  (void (*)(uint64_t))&static ResponseMode.voiceForward.getter);
}

uint64_t ResponseMode.isDisplayMode()(void (*a1)(uint64_t), void (*a2)(uint64_t))
{
  uint64_t v5 = v2;
  uint64_t v6 = type metadata accessor for ResponseMode(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin();
  uint64_t v12 = (char *)&v17 - v11;
  a1(v10);
  LOBYTE(a1) = static ResponseMode.== infix(_:_:)(v5, v12);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v7 + 8);
  OUTLINED_FUNCTION_0_35();
  uint64_t v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v5, v6);
  if ((a1 & 1) != 0)
  {
    char v15 = 1;
  }

  else
  {
    a2(v14);
    char v15 = static ResponseMode.== infix(_:_:)(v9, v12);
    OUTLINED_FUNCTION_0_35();
  }

  v13(v9, v6);
  return v15 & 1;
}

uint64_t OUTLINED_FUNCTION_0_35()
{
  return v2(v1, v0);
}

uint64_t String.init(describing:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v2);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v6 + 16))(v5);
  uint64_t v7 = specialized String.init(describing:)((uint64_t)v5, v2, v3);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v7;
}

uint64_t String.init(describing:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Parse(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_8();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for USOParse(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_32();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, a1, v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v4 + 88))(v7, v3) == enum case for Parse.uso(_:))
  {
    OUTLINED_FUNCTION_81_3(v7, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 96));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v1, v7, v8);
    strcpy((char *)v21, ".uso parse: ");
    BYTE5(v21[1]) = 0;
    HIWORD(v21[1]) = -5120;
    type metadata accessor for SiriNLUTypesPrintUtils(0LL);
    uint64_t v19 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
    uint64_t v20 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( &lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UserParse,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UserParse);
    __swift_allocate_boxed_opaque_existential_1(&v17);
    USOParse.userParse.getter();
    uint64_t v10 = static SiriNLUTypesPrintUtils.printableProtoObject(object:)(&v17);
    uint64_t v12 = v11;
    __swift_destroy_boxed_opaque_existential_1(&v17);
    v13._uint64_t countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    OUTLINED_FUNCTION_23_5();
    uint64_t v17 = v21[0];
    unint64_t v18 = v21[1];
    uint64_t v14 = String.init<A>(_:)( &v17,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
    OUTLINED_FUNCTION_81_3(a1, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v8);
  }

  else
  {
    char v15 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v15(v7, v3);
    uint64_t v17 = 0LL;
    unint64_t v18 = 0xE000000000000000LL;
    _print_unlocked<A, B>(_:_:)( a1,  &v17,  v3,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v14 = String.init<A>(_:)( &v17,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
    v15(a1, v3);
  }

  return v14;
}

void Siri_Nlu_External_UserParse.preferredUserDialogAct.getter(uint64_t a1@<X8>)
{
  uint64_t v51 = a1;
  uint64_t v48 = type metadata accessor for Siri_Nlu_External_CorrectionOutcome.CorrectionType(0LL);
  uint64_t v50 = *(void *)(v48 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_10_1();
  uint64_t v47 = v4;
  __chkstk_darwin(v5);
  uint64_t v49 = (char *)&v45 - v6;
  uint64_t v46 = type metadata accessor for Siri_Nlu_External_CorrectionOutcome(0LL);
  uint64_t v7 = *(void *)(v46 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin(v8);
  uint64_t v9 = OUTLINED_FUNCTION_22_5();
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UserParse(v9);
  uint64_t v52 = *(void *)(v10 - 8);
  uint64_t v53 = v10;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_8();
  uint64_t v14 = v13 - v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_10_1();
  uint64_t v45 = v16;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v45 - v18;
  uint64_t v20 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v23 = __chkstk_darwin(v22);
  os_log_type_t v25 = (char *)&v45 - v24;
  uint64_t v26 = Siri_Nlu_External_UserParse.userDialogActs.getter(v23);
  uint64_t v56 = v26;
  specialized Collection.first.getter();
  if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1LL, v20) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v19);
LABEL_17:
    uint64_t v44 = v56;
    OUTLINED_FUNCTION_16_19();
    swift_bridgeObjectRelease(v44);
    return;
  }

  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v25, v19, v20);
  unint64_t v27 = *(void *)(v26 + 16);
  uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v14, v1, v53);
  if (v27 < 2)
  {
    OUTLINED_FUNCTION_9_31();
    OUTLINED_FUNCTION_3_40();
    goto LABEL_15;
  }

  uint64_t v29 = Siri_Nlu_External_UserParse.correctionOutcome.getter(v28);
  Siri_Nlu_External_CorrectionOutcome.type.getter(v29);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v46);
  uint64_t v30 = v47;
  uint64_t v31 = v48;
  (*(void (**)(uint64_t, void, uint64_t))(v50 + 104))( v47,  enum case for Siri_Nlu_External_CorrectionOutcome.CorrectionType.userInitiated(_:),  v48);
  lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( &lazy protocol witness table cache variable for type Siri_Nlu_External_CorrectionOutcome.CorrectionType and conformance Siri_Nlu_External_CorrectionOutcome.CorrectionType,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_CorrectionOutcome.CorrectionType,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_CorrectionOutcome.CorrectionType);
  OUTLINED_FUNCTION_11_31();
  OUTLINED_FUNCTION_11_31();
  uint64_t v33 = v54;
  uint64_t v32 = v55;
  uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
  v34(v30, v31);
  v34((uint64_t)v49, v31);
  OUTLINED_FUNCTION_9_31();
  uint64_t v35 = OUTLINED_FUNCTION_3_40();
  if (v32 != v33)
  {
LABEL_15:
    OUTLINED_FUNCTION_7_38();
    goto LABEL_16;
  }

  char v36 = Siri_Nlu_External_UserDialogAct.hasRejected.getter(v35);
  OUTLINED_FUNCTION_7_38();
  if ((v36 & 1) == 0)
  {
LABEL_16:
    OUTLINED_FUNCTION_19_19();
    goto LABEL_17;
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v37 = type metadata accessor for Logger(0LL);
  uint64_t v38 = __swift_project_value_buffer(v37, (uint64_t)static Logger.siriPhone);
  uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
  os_log_type_t v40 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v41 = 0;
    _os_log_impl(&dword_0, v39, v40, "#NLUUserParse detected a correction! Skipping first UserRejected", v41, 2u);
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  uint64_t v42 = v56;
  if (!*(void *)(v56 + 16))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v43 = v45;
  OUTLINED_FUNCTION_16_19();
  if (__swift_getEnumTagSinglePayload(v43, 1LL, v20) != 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v43);
    if (*(void *)(v42 + 16))
    {
      specialized Array.replaceSubrange<A>(_:with:)(0LL, 1LL);
      OUTLINED_FUNCTION_19_19();
      goto LABEL_17;
    }

    goto LABEL_19;
  }

uint64_t Siri_Nlu_External_UserDialogAct.isRejectedOrCancelled.getter()
{
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v5 = v4 - v3;
  char v7 = Siri_Nlu_External_UserDialogAct.hasRejected.getter(v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v5, v0, v1);
  if ((v7 & 1) != 0) {
    char v9 = 1;
  }
  else {
    char v9 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v8);
  }
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
  return v9 & 1;
}

uint64_t Siri_Nlu_External_UserDialogAct.siriKitConfirmationState.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = Siri_Nlu_External_UserDialogAct.hasAccepted.getter(a1);
  if ((v3 & 1) != 0)
  {
    uint64_t v4 = (unsigned int *)&enum case for SiriKitConfirmationState.confirmed(_:);
LABEL_5:
    uint64_t v6 = *v4;
    uint64_t v7 = OUTLINED_FUNCTION_12_33();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104LL);
    uint64_t v9 = a2;
    uint64_t v10 = v6;
    return v8(v9, v10, v7);
  }

  uint64_t v5 = Siri_Nlu_External_UserDialogAct.hasRejected.getter(v3);
  if ((v5 & 1) != 0)
  {
    uint64_t v4 = (unsigned int *)&enum case for SiriKitConfirmationState.rejected(_:);
    goto LABEL_5;
  }

  char v11 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v5);
  uint64_t v7 = OUTLINED_FUNCTION_12_33();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104LL);
  if ((v11 & 1) != 0) {
    uint64_t v12 = (unsigned int *)&enum case for SiriKitConfirmationState.cancelled(_:);
  }
  else {
    uint64_t v12 = (unsigned int *)&enum case for SiriKitConfirmationState.unset(_:);
  }
  uint64_t v10 = *v12;
  uint64_t v9 = a2;
  return v8(v9, v10, v7);
}

uint64_t Siri_Nlu_External_UserParse.siriKitConfirmationState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = OUTLINED_FUNCTION_22_5();
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserDialogAct(v4);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_32();
  Siri_Nlu_External_UserParse.userDialogActs.getter(v7);
  specialized Collection.first.getter();
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v1, 1LL, v5) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v1);
    uint64_t v8 = enum case for SiriKitConfirmationState.unset(_:);
    uint64_t v9 = OUTLINED_FUNCTION_12_33();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104LL))(a1, v8, v9);
  }

  else
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v2, v1, v5);
    Siri_Nlu_External_UserDialogAct.siriKitConfirmationState.getter(v11, a1);
    return OUTLINED_FUNCTION_81_3(v2, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  }

void specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16LL);
  if (v5 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (__OFADD__(v5, v8))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (!swift_isUniquelyReferenced_nonNull_native(*v2) || v5 - v7 > *(void *)(v4 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v4 = v9;
  }

  uint64_t v10 = *(void *)(type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL) - 8);
  uint64_t v11 = v4 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  uint64_t v12 = *(void *)(v10 + 72);
  swift_arrayDestroy(v11 + v12 * a1, v7);
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v13 = *(void *)(v4 + 16);
  if (__OFSUB__(v13, a2)) {
    goto LABEL_19;
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v11 + v12 * a2, v13 - a2);
  uint64_t v14 = *(void *)(v4 + 16);
  BOOL v15 = __OFADD__(v14, v8);
  uint64_t v16 = v14 - v7;
  if (!v15)
  {
    *(void *)(v4 + ++*(void *)(v0 + 16) = v16;
LABEL_13:
    *uint64_t v2 = v4;
    return;
  }

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    if (!((unint64_t)*v4 >> 62))
    {
      uint64_t v10 = *(void *)((char *)&dword_10 + (*v4 & 0xFFFFFFFFFFFFF8LL));
      goto LABEL_4;
    }
  }

  swift_bridgeObjectRetain();
  uint64_t v10 = OUTLINED_FUNCTION_17_12();
  swift_bridgeObjectRelease();
LABEL_4:
  if (v10 < v5)
  {
    __break(1u);
    goto LABEL_39;
  }

  uint64_t v3 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  uint64_t v9 = (unint64_t)v8 >> 62;
  if (!((unint64_t)v8 >> 62))
  {
    uint64_t v11 = *(void *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFF8LL));
    goto LABEL_8;
  }

{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    uint64_t v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      uint64_t v9 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8LL));
      goto LABEL_4;
    }
  }

  OUTLINED_FUNCTION_124();
  uint64_t v9 = OUTLINED_FUNCTION_17_12();
  OUTLINED_FUNCTION_4_1();
LABEL_4:
  if (v9 < v5)
  {
    __break(1u);
    goto LABEL_32;
  }

  uint64_t v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  uint64_t v8 = 1 - v9;
  if (__OFSUB__(1LL, v9))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  uint64_t v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    uint64_t v10 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8LL));
    goto LABEL_9;
  }

LABEL_55:
  __break(1u);
  return result;
}

    uint64_t v99 = 0;
    uint64_t v80 = 1LL;
    goto LABEL_56;
  }

  if (BYTE4(v261) & 1 | !v41)
  {
    uint64_t v63 = a1[3];
    OUTLINED_FUNCTION_13_18(a1);
    if (PhoneCallNLIntent.isRedialOrCallBack()())
    {
      OUTLINED_FUNCTION_13_33();
      if (!v64) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v100 = OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_12_1(v100, (uint64_t)static Logger.siriPhone);
      uint64_t v101 = OUTLINED_FUNCTION_41();
      if (!OUTLINED_FUNCTION_10(v101)) {
        goto LABEL_53;
      }
      uint64_t v67 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
      *(_WORD *)uint64_t v67 = 0;
      uint64_t v68 = "Not setting callCapability because this is a redial or call_back request that doesn't specify audio or video filter.";
      goto LABEL_52;
    }

    uint64_t v124 = v290;
    if (v290)
    {
      swift_retain();
      LOBYTE(v6__swift_destroy_boxed_opaque_existential_1(v0 + 3) = v290;
      if (App.isFaceTime()())
      {
        outlined init with take of AnnotatedApp?( (uint64_t)&v323,  (uint64_t)&v329,  &demangling cache variable for type metadata for AnnotatedApp?);
        if ((void)v329)
        {
          v333 = v330;
          v334 = v331;
          v332 = v329;
          if (v331 == 3)
          {
            uint64_t v125 = v51[107];
            OUTLINED_FUNCTION_22_4();
            OUTLINED_FUNCTION_36();
            OUTLINED_FUNCTION_8_1();
            OUTLINED_FUNCTION_76_4();
            if (v125 != -1) {
              swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
            }
            unint64_t v126 = OUTLINED_FUNCTION_15_1();
            OUTLINED_FUNCTION_12_1(v126, (uint64_t)static Logger.siriPhone);
            unint64_t v127 = OUTLINED_FUNCTION_41();
            if (OUTLINED_FUNCTION_7_7(v127))
            {
              uint64_t v128 = (_DWORD *)OUTLINED_FUNCTION_7_0(12LL);
              uint64_t v129 = OUTLINED_FUNCTION_7_0(32LL);
              v297 = v129;
              *uint64_t v128 = 136315138;
              uint64_t v80 = (uint64_t)(v128 + 1);
              v342 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallCapability>);
              uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallCapability>.Type);
              uint64_t v131 = String.init<A>(describing:)(&v342, v130);
              v342 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v131, v132, &v297);
              OUTLINED_FUNCTION_18_27((uint64_t)&v342, (uint64_t)&v343, (uint64_t)(v128 + 1));
              OUTLINED_FUNCTION_70_2();
              OUTLINED_FUNCTION_3_46( &dword_0,  v133,  v134,  "#%s: FaceTime predicted by app selection. Setting the callCapability to audio");
              OUTLINED_FUNCTION_11_34();
              OUTLINED_FUNCTION_0_2(v129);
              OUTLINED_FUNCTION_0_2((uint64_t)v128);

              OUTLINED_FUNCTION_26_23( v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v241,  v251,  v261,  v271,  v281,  v290);
              uint64_t v143 = swift_release(v332);
              OUTLINED_FUNCTION_10_34( v143,  v144,  v145,  v146,  v147,  v148,  v149,  v150,  v244,  v254,  v264,  v274,  v284,  v293,  v297,  v298,  v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,  v307,  v308,  v309,  v310,  v311,  v312,  v313,  v314,  v315,  v316,  v317,  v318,  v319,  v320,  v321,  v322,  v323,  v324,  v325,  (uint64_t)v326,  v327,  v328,  v329,  *((uint64_t *)&v329 + 1),  v330,
                *((uint64_t *)&v330 + 1),
                v331,
                *((uint64_t *)&v331 + 1),
                v332,
                *((uint64_t *)&v332 + 1));
              OUTLINED_FUNCTION_23_20((uint64_t)&v333, v151, &demangling cache variable for type metadata for String?);
              uint64_t v152 = OUTLINED_FUNCTION_28_20();
              OUTLINED_FUNCTION_9_37( v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v245,  v255,  v265,  v275,  v285,  v294,  v297,  v298,  v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,  v307,  v308,  v309,  v310,  v311,  v312,  v313,  v314,  v315,  v316,  v317,  v318,  v319,  v320,  v321,  v322,  v323,  v324,  v325,  (uint64_t)v326,  v327,  v328,  v329,  *((uint64_t *)&v329 + 1),  v330,
                *((uint64_t *)&v330 + 1),
                v331,
                *((uint64_t *)&v331 + 1),
                v332,
                *((uint64_t *)&v332 + 1),
                v333,
                *((uint64_t *)&v333 + 1),
                v334,
                *((uint64_t *)&v334 + 1));
              goto LABEL_26;
            }

            swift_release(v290);
            v180 = swift_release(v332);
            OUTLINED_FUNCTION_10_34( v180,  v181,  v182,  v183,  v184,  v185,  v186,  v187,  v241,  v251,  v261,  v271,  v281,  v290,  v297,  v298,  v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,  v307,  v308,  v309,  v310,  v311,  v312,  v313,  v314,  v315,  v316,  v317,  v318,  v319,  v320,  v321,  v322,  v323,  v324,  v325,  (uint64_t)v326,  v327,  v328,  v329,  *((uint64_t *)&v329 + 1),  v330,
              *((uint64_t *)&v330 + 1),
              v331,
              *((uint64_t *)&v331 + 1),
              v332,
              *((uint64_t *)&v332 + 1));
            OUTLINED_FUNCTION_23_20((uint64_t)&v333, v188, &demangling cache variable for type metadata for String?);
            v189 = OUTLINED_FUNCTION_28_20();
            OUTLINED_FUNCTION_9_37( v189,  v190,  v191,  v192,  v193,  v194,  v195,  v196,  v247,  v257,  v267,  v277,  v287,  v296,  v297,  v298,  v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,  v307,  v308,  v309,  v310,  v311,  v312,  v313,  v314,  v315,  v316,  v317,  v318,  v319,  v320,  v321,  v322,  v323,  v324,  v325,  (uint64_t)v326,  v327,  v328,  v329,  *((uint64_t *)&v329 + 1),  v330,
              *((uint64_t *)&v330 + 1),
              v331,
              *((uint64_t *)&v331 + 1),
              v332,
              *((uint64_t *)&v332 + 1),
              v333,
              *((uint64_t *)&v333 + 1),
              v334,
              *((uint64_t *)&v334 + 1));
            goto LABEL_55;
          }

          v160 = v332;
          OUTLINED_FUNCTION_8_1();
          OUTLINED_FUNCTION_76_4();
          OUTLINED_FUNCTION_22_4();
          OUTLINED_FUNCTION_36();
          v161 = swift_release(v160);
          OUTLINED_FUNCTION_10_34( v161,  v162,  v163,  v164,  v165,  v166,  v167,  v168,  v241,  v251,  v261,  v271,  v281,  v290,  v297,  v298,  v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,  v307,  v308,  v309,  v310,  v311,  v312,  v313,  v314,  v315,  v316,  v317,  v318,  v319,  v320,  v321,  v322,  v323,  v324,  v325,  (uint64_t)v326,  v327,  v328,  v329,  *((uint64_t *)&v329 + 1),  v330,
            *((uint64_t *)&v330 + 1),
            v331,
            *((uint64_t *)&v331 + 1),
            v332,
            *((uint64_t *)&v332 + 1));
          OUTLINED_FUNCTION_23_20((uint64_t)&v333, v169, &demangling cache variable for type metadata for String?);
          v170 = OUTLINED_FUNCTION_28_20();
          OUTLINED_FUNCTION_9_37( v170,  v171,  v172,  v173,  v174,  v175,  v176,  v177,  v246,  v256,  v266,  v276,  v286,  v295,  v297,  v298,  v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,  v307,  v308,  v309,  v310,  v311,  v312,  v313,  v314,  v315,  v316,  v317,  v318,  v319,  v320,  v321,  v322,  v323,  v324,  v325,  (uint64_t)v326,  v327,  v328,  v329,  *((uint64_t *)&v329 + 1),  v330,
            *((uint64_t *)&v330 + 1),
            v331,
            *((uint64_t *)&v331 + 1),
            v332,
            *((uint64_t *)&v332 + 1),
            v333,
            *((uint64_t *)&v333 + 1),
            v334,
            *((uint64_t *)&v334 + 1));
        }
      }

      swift_release(v124);
    }

    OUTLINED_FUNCTION_13_33();
    if (!v64) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    v178 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v178, (uint64_t)static Logger.siriPhone);
    v179 = OUTLINED_FUNCTION_41();
    if (!OUTLINED_FUNCTION_10(v179)) {
      goto LABEL_53;
    }
    uint64_t v67 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
    *(_WORD *)uint64_t v67 = 0;
    uint64_t v68 = "Not setting callCapability because the user has not specified one or specified video on a audio only device.";
    goto LABEL_52;
  }

  OUTLINED_FUNCTION_13_33();
  if (!v64) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v102 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v102, (uint64_t)static Logger.siriPhone);
  os_log_type_t v103 = OUTLINED_FUNCTION_41();
  if (OUTLINED_FUNCTION_7_7(v103))
  {
    uint64_t v104 = (_DWORD *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v105 = OUTLINED_FUNCTION_7_0(32LL);
    *(void *)&v332 = v105;
    *uint64_t v104 = 136315138;
    *(void *)&v329 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallCapability>);
    uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallCapability>.Type);
    uint64_t v114 = OUTLINED_FUNCTION_14_27( v106,  v107,  v108,  v109,  v110,  v111,  v112,  v113,  v241,  v251,  v261,  v271,  v4,  v290,  v297,  v298,  v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,  v307,  v308,  v309,  v310,  v311,  v312,  v313,  v314,  v315,  v316,  v317,  v318,  v319,  v320,  v321,  v322,  v323,  v324,  v325,  (uint64_t)v326,  v327,  v328,  v329);
    *(void *)&v329 = OUTLINED_FUNCTION_24_17( v114,  v115,  v116,  v117,  v118,  v119,  v120,  v121,  v243,  v253,  v263,  v273,  v283,  v292,  v297,  v298,  v299,  v300,  v301,  v302,  v303,  v304,  v305,  v306,  v307,  v308,  v309,  v310,  v311,  v312,  v313,  v314,  v315,  v316,  v317,  v318,  v319,  v320,  v321,  v322,  v323,  v324,  v325,  (uint64_t)v326,  v327,  v328,  v329,  *((uint64_t *)&v329 + 1),  v330,
                         *((uint64_t *)&v330 + 1),
                         v331,
                         *((uint64_t *)&v331 + 1),
                         v332);
    OUTLINED_FUNCTION_18_27((uint64_t)&v329, v50 + 8, (uint64_t)(v104 + 1));
    OUTLINED_FUNCTION_70_2();
    OUTLINED_FUNCTION_3_46(&dword_0, v122, v123, "#%s has video call semantic");
    swift_arrayDestroy(v105, 1LL);
    OUTLINED_FUNCTION_0_2(v105);
    OUTLINED_FUNCTION_0_2((uint64_t)v104);
  }

  uint64_t v99 = 0;
  uint64_t v80 = 2LL;
LABEL_56:
  OUTLINED_FUNCTION_13_33();
  if (!v64) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  v197 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v197, (uint64_t)static Logger.siriPhone);
  v198 = OUTLINED_FUNCTION_41();
  if (os_log_type_enabled(v49, v198))
  {
    v199 = OUTLINED_FUNCTION_7_0(22LL);
    v200 = OUTLINED_FUNCTION_7_0(64LL);
    v303 = v200;
    *(_DWORD *)v199 = 136315394;
    v298 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallCapability>);
    v201 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallCapability>.Type);
    v202 = String.init<A>(describing:)(&v298, v201);
    v298 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v202, v203, &v303);
    OUTLINED_FUNCTION_15_29(v298, v204, v205, v199 + 12, v206, v207, v208, v209, v241, v251, v261);
    swift_bridgeObjectRelease();
    *(_WORD *)(v199 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    if ((v99 & 1) != 0)
    {
      v210 = 0xE700000000000000LL;
      v211 = 0x4E574F4E4B4E55LL;
LABEL_69:
      v298 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v211, v210, &v303);
      OUTLINED_FUNCTION_15_29(v298, v225, v226, v199 + 22, v227, v228, v229, v230, v248, v258, v268);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v49, v198, "#%s --> %s", (uint8_t *)v199, 0x16u);
      swift_arrayDestroy(v200, 2LL);
      OUTLINED_FUNCTION_0_2(v200);
      OUTLINED_FUNCTION_0_2(v199);

      OUTLINED_FUNCTION_26_23(v231, v232, v233, v234, v235, v236, v237, v238, v249, v259, v269, v271, v281, v290);
      outlined release of AnnotatedApp?(&v323);
      goto LABEL_70;
    }

    uint64_t BackingType = INCallCapabilityGetBackingType(v80);
    if ((_DWORD)BackingType == 2)
    {
      v221 = @"VIDEO_CALL";
    }

    else
    {
      if ((_DWORD)BackingType != 1)
      {
        v248 = BackingType;
        v221 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)"));
        goto LABEL_68;
      }

      v221 = @"AUDIO_CALL";
    }

    v222 = v221;
LABEL_68:
    v223 = v221;
    v211 = static String._unconditionallyBridgeFromObjectiveC(_:)(v223);
    v210 = v224;

    goto LABEL_69;
  }

  outlined release of AnnotatedApp?(&v323);

  OUTLINED_FUNCTION_26_23(v212, v213, v214, v215, v216, v217, v218, v219, v241, v251, v261, v271, v281, v290);
LABEL_70:
  *v278 = v80;
  return __swift_destroy_boxed_opaque_existential_1(&v318);
}

      OUTLINED_FUNCTION_31_1((uint64_t)v2);
      goto LABEL_56;
    }

    outlined init with take of AppSelectionSignalComponent(&v197, (uint64_t)v199);
    if (OUTLINED_FUNCTION_110_10())
    {
      OUTLINED_FUNCTION_109_10();
      uint64_t v82 = v81;
      os_log_type_t v84 = v83;
      OUTLINED_FUNCTION_152_0();
      if (!v84)
      {
        OUTLINED_FUNCTION_155_4(&v197);
        uint64_t v82 = v85;
        os_log_type_t v84 = v86;
      }

      OUTLINED_FUNCTION_78_18();
      uint64_t v87 = v2[3];
      if (v87)
      {
        OUTLINED_FUNCTION_25_1();
        uint64_t v88 = App.appIdentifier.getter();
        if (v89)
        {
          if (v84)
          {
            if (v88 == v82 && v89 == v84)
            {
              OUTLINED_FUNCTION_62();
              OUTLINED_FUNCTION_39();
            }

            else
            {
              uint64_t v91 = _stringCompareWithSmolCheck(_:_:expecting:)(v88, v89, v82, v84, 0LL);
              OUTLINED_FUNCTION_62();
              OUTLINED_FUNCTION_39();
              if ((v91 & 1) == 0)
              {
                OUTLINED_FUNCTION_16_3();
LABEL_61:
                uint64_t v145 = v187;
                uint64_t v144 = v188;
                uint64_t v146 = v186;
                unint64_t v147 = PhoneAppResolutionOnDeviceFlowStrategy.resolveAppByQuery(phoneCallIntent:)(v199);
                AppResolutionAction.result.getter(v147);
                OUTLINED_FUNCTION_38_1();
                __int128 v148 = OUTLINED_FUNCTION_140_8();
                if (v149(v148) != enum case for AppResolutionResult.selected(_:))
                {
                  OUTLINED_FUNCTION_41_2((uint64_t)v146, *(uint64_t (**)(uint64_t, uint64_t))(v145 + 8));
                  OUTLINED_FUNCTION_11_18((uint64_t)v2);
                  OUTLINED_FUNCTION_62_18();
                  v168 = OUTLINED_FUNCTION_41();
                  if (OUTLINED_FUNCTION_50_12(v144))
                  {
                    v169 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
                    v195 = (os_log_s *)OUTLINED_FUNCTION_7_0(32LL);
                    v196 = v195;
                    v194 = v169;
                    *(_DWORD *)v169 = 136315138;
                    v193 = v169 + 4;
                    v170 = v14;
                    v171 = (uint64_t)v2;
                    v172 = v2[44];
                    v173 = v2[45];
                    v174 = *(void *)(v171 + 368);
                    *(void *)&v197 = 0LL;
                    *((void *)&v197 + 1) = 0xE000000000000000LL;
                    OUTLINED_FUNCTION_128();
                    OUTLINED_FUNCTION_76_4();
                    v175 = v172;
                    uint64_t v14 = v170;
                    OUTLINED_FUNCTION_26_49(v175, v173, v174);
                    OUTLINED_FUNCTION_23_5();
                    OUTLINED_FUNCTION_87_0();
                    v177 = OUTLINED_FUNCTION_10_3(v197, v176, (uint64_t *)&v196);
                    v178 = OUTLINED_FUNCTION_69_6(v177);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(v178, v179, v193);
                    OUTLINED_FUNCTION_31_1(v171);
                    OUTLINED_FUNCTION_62();
                    v180 = v194;
                    OUTLINED_FUNCTION_57_0( &dword_0,  v144,  v168,  "%s parseConfirmationResponse: User changed to an invalid app, re-run Flow to present error dialog",  v194);
                    v181 = (uint64_t)v195;
                    OUTLINED_FUNCTION_17_0((uint64_t)v195);
                    OUTLINED_FUNCTION_0_2(v181);
                    OUTLINED_FUNCTION_0_2((uint64_t)v180);
                  }

                  else
                  {

                    OUTLINED_FUNCTION_31_1((uint64_t)v2);
                  }

                  OUTLINED_FUNCTION_102_7();
                  static AppConfirmationResponse.ignore()();
                  goto LABEL_73;
                }

                OUTLINED_FUNCTION_41_2((uint64_t)v146, *(uint64_t (**)(uint64_t, uint64_t))(v145 + 96));
                uint64_t v150 = *(void *)v146;
                OUTLINED_FUNCTION_11_18((uint64_t)v2);
                OUTLINED_FUNCTION_11_18(v150);
                OUTLINED_FUNCTION_62_18();
                uint64_t v151 = OUTLINED_FUNCTION_64_1();
                if (OUTLINED_FUNCTION_39_7(v146))
                {
                  uint64_t v152 = OUTLINED_FUNCTION_7_0(22LL);
                  v195 = (os_log_s *)OUTLINED_FUNCTION_7_0(64LL);
                  v196 = v195;
                  *(_DWORD *)uint64_t v152 = 136315394;
                  v194 = (uint8_t *)(v152 + 4);
                  v189 = v14;
                  __int128 v153 = (uint64_t)v2;
                  __int128 v154 = v2[44];
                  __int128 v155 = v2[45];
                  __int128 v156 = *(void *)(v153 + 368);
                  *(void *)&v197 = 0LL;
                  *((void *)&v197 + 1) = 0xE000000000000000LL;
                  OUTLINED_FUNCTION_128();
                  OUTLINED_FUNCTION_76_4();
                  OUTLINED_FUNCTION_26_49(v154, v155, v156);
                  OUTLINED_FUNCTION_23_5();
                  OUTLINED_FUNCTION_87_0();
                  __int128 v158 = OUTLINED_FUNCTION_10_3(v197, v157, (uint64_t *)&v196);
                  v159 = OUTLINED_FUNCTION_69_6(v158);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(v159, v160, v194);
                  OUTLINED_FUNCTION_31_1(v153);
                  OUTLINED_FUNCTION_62();
                  *(_WORD *)(v152 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
                  *(void *)&v197 = v150;
                  OUTLINED_FUNCTION_46_5();
                  OUTLINED_FUNCTION_163_5( (unint64_t *)&lazy protocol witness table cache variable for type App and conformance App,  v161,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  (uint64_t)&protocol conformance descriptor for App);
                  v163 = OUTLINED_FUNCTION_170_3(v162);
                  *(void *)&v197 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( v163,  v164,  (uint64_t *)&v196);
                  v165 = v154 + 8;
                  uint64_t v14 = v189;
                  OUTLINED_FUNCTION_161_4((uint64_t)&v197, v165, v166, v152 + 22);
                  OUTLINED_FUNCTION_31_1(v150);
                  OUTLINED_FUNCTION_62();
                  OUTLINED_FUNCTION_33_6( &dword_0,  v146,  v151,  "%s parseConfirmationResponse: User changed  to %s",  (uint8_t *)v152);
                  v167 = (uint64_t)v195;
                  OUTLINED_FUNCTION_42_2((uint64_t)v195);
                  OUTLINED_FUNCTION_0_2(v167);
                  OUTLINED_FUNCTION_0_2(v152);
                }

                else
                {

                  OUTLINED_FUNCTION_31_1(v150);
                  OUTLINED_FUNCTION_31_1((uint64_t)v2);
                }

                OUTLINED_FUNCTION_102_7();
                v182 = OUTLINED_FUNCTION_67();
                static AppConfirmationResponse.select(app:)(v182);
                v183 = OUTLINED_FUNCTION_67();
LABEL_72:
                swift_release(v183);
LABEL_73:
                outlined destroy of PhoneCallNLIntent?( (uint64_t)v14,  &demangling cache variable for type metadata for ConfirmationResponse?);
                OUTLINED_FUNCTION_18();
                goto LABEL_58;
              }
            }

    OUTLINED_FUNCTION_6_3();
    uint64_t v34 = OUTLINED_FUNCTION_38_3();
    OUTLINED_FUNCTION_62();
    goto LABEL_17;
  }

  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v0[23] + 184LL);
  uint64_t v7 = OUTLINED_FUNCTION_48_0();
  uint64_t v8 = v6(v7);
  OUTLINED_FUNCTION_34_0();
  if ((v8 & 1) == 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v43 = v0[19];
    uint64_t v44 = OUTLINED_FUNCTION_15_1();
    uint64_t v45 = (os_log_s *)__swift_project_value_buffer(v44, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_11_18(v43);
    OUTLINED_FUNCTION_91_13();
    uint64_t v46 = OUTLINED_FUNCTION_15_16();
    uint64_t v47 = OUTLINED_FUNCTION_95_11(v45);
    uint64_t v48 = v0[19];
    if (v47)
    {
      uint64_t v96 = (uint64_t)(v0 + 16);
      LODWORD(v9__swift_destroy_boxed_opaque_existential_1(v0 + 9) = v46;
      uint64_t v49 = OUTLINED_FUNCTION_7_0(12LL);
      os_log_type_t v98 = (os_log_s *)OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v97 = (uint8_t *)v49;
      OUTLINED_FUNCTION_145_7(4.8149e-34);
      uint64_t v95 = v50;
      uint64_t v51 = *(void *)(v48 + 352);
      os_log_type_t v103 = v52;
      uint64_t v1 = *(void *)(v48 + 368);
      uint64_t v104 = 0LL;
      uint64_t v105 = 0xE000000000000000LL;
      OUTLINED_FUNCTION_124();
      OUTLINED_FUNCTION_76_4();
      OUTLINED_FUNCTION_48_27(v51);
      OUTLINED_FUNCTION_87_0();
      OUTLINED_FUNCTION_4_1();
      uint64_t v54 = OUTLINED_FUNCTION_10_3(0LL, v53, &v103);
      uint64_t v55 = OUTLINED_FUNCTION_148_7(v54, v0 + 16);
      OUTLINED_FUNCTION_33_35((uint64_t)v55, (uint64_t)(v0 + 17), v56);
      OUTLINED_FUNCTION_62();
      OUTLINED_FUNCTION_31_1(v48);
      OUTLINED_FUNCTION_57_0( &dword_0,  v45,  (os_log_type_t)v46,  "%s executeForceAppDisambiguate: Found more than 1 app. Forcing app disambiguation..",  v97);
      OUTLINED_FUNCTION_17_0((uint64_t)v98);
      OUTLINED_FUNCTION_0_2((uint64_t)v98);
      OUTLINED_FUNCTION_0_2((uint64_t)v97);
    }

    else
    {
      OUTLINED_FUNCTION_31_1(v0[19]);
    }

    uint64_t v63 = *(uint64_t (**)(uint64_t))(*(void *)v0[23] + 272LL);
    uint64_t v64 = OUTLINED_FUNCTION_8_1();
    uint64_t v65 = v63(v64);
    OUTLINED_FUNCTION_39();
    *(void *)(v3 + ++*(void *)(v0 + 16) = v65;
    swift_bridgeObjectRelease();
    uint64_t v66 = *(void *)(v3 + 16);
    if (v66 >> 62)
    {
      OUTLINED_FUNCTION_11(*(void *)(v3 + 16));
      uint64_t v26 = OUTLINED_FUNCTION_61_1();
    }

    else
    {
      uint64_t v26 = *(void *)((char *)&dword_10 + (v66 & 0xFFFFFFFFFFFFF8LL));
      OUTLINED_FUNCTION_11(*(void *)(v3 + 16));
    }

    uint64_t v101 = v0;
    if (!v26)
    {
      uint64_t v68 = _swiftEmptyArrayStorage;
LABEL_49:
      uint64_t v77 = v0[21];
      uint64_t v78 = v0[22];
      os_log_type_t v79 = v0[19];
      OUTLINED_FUNCTION_7_4(v66);
      uint64_t v80 = *(void *)(v79 + 232);
      OUTLINED_FUNCTION_82((void *)(v79 + 200));
      uint64_t v81 = OUTLINED_FUNCTION_80_12();
      v82(v81, v80);
      uint64_t v83 = v0[5];
      os_log_type_t v84 = v0[6];
      uint64_t v85 = OUTLINED_FUNCTION_82(v0 + 2);
      uint64_t v86 = Date.init()(v85);
      uint64_t v87 = Date.timeIntervalSince1970.getter(v86);
      OUTLINED_FUNCTION_114_7(v78, *(uint64_t (**)(uint64_t, uint64_t))(v77 + 8));
      *((_BYTE *)v0 + 56) = 0;
      *((double *)v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v87;
      v0[9] = v68;
      uint64_t v88 = *(void (**)(uint64_t, void *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v84 + 16);
      os_log_type_t v89 = lazy protocol witness table accessor for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory();
      v88(2LL, v0 + 7, &type metadata for ForcedAppDisambiguationHistory, v89, v83, v84);
      OUTLINED_FUNCTION_39();
      __swift_destroy_boxed_opaque_existential_1(v0 + 2);
      OUTLINED_FUNCTION_103_8();
      uint64_t v90 = OUTLINED_FUNCTION_8_1();
      static AppResolutionAction.disambiguateAfterAuthorizationChecks(apps:)(v90);
      OUTLINED_FUNCTION_39();
      goto LABEL_50;
    }

    if (v26 >= 1)
    {
      uint64_t v67 = 0LL;
      uint64_t v68 = _swiftEmptyArrayStorage;
      do
      {
        if ((v66 & 0xC000000000000001LL) != 0) {
          OUTLINED_FUNCTION_224_2(v67);
        }
        else {
          UsoEntity_common_Person.usoPerson.getter();
        }
        os_log_type_t v69 = App.appIdentifier.getter();
        uint64_t v71 = v70;
        OUTLINED_FUNCTION_38_1();
        if (!v71)
        {
          os_log_type_t v69 = 0LL;
          uint64_t v71 = 0xE000000000000000LL;
        }

        if ((swift_isUniquelyReferenced_nonNull_native(v68) & 1) == 0)
        {
          OUTLINED_FUNCTION_1_25(0LL, v68[2] + 1LL);
          uint64_t v68 = v75;
        }

        char v73 = v68[2];
        uint64_t v72 = v68[3];
        if (v73 >= v72 >> 1)
        {
          OUTLINED_FUNCTION_1_25(v72 > 1, v73 + 1);
          uint64_t v68 = v76;
        }

        ++v67;
        v68[2] = v73 + 1;
        uint64_t v74 = &v68[2 * v73];
        v74[4] = v69;
        v74[5] = v71;
      }

      while (v26 != v67);
      goto LABEL_49;
    }

    __break(1u);
    goto LABEL_55;
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v9 = v0[19];
  uint64_t v10 = OUTLINED_FUNCTION_15_1();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.siriPhone);
  OUTLINED_FUNCTION_11_18(v9);
  OUTLINED_FUNCTION_165_2();
  uint64_t v11 = OUTLINED_FUNCTION_15_16();
  uint64_t v12 = OUTLINED_FUNCTION_33_47(v11);
  uint64_t v13 = v0[19];
  if (!v12) {
    goto LABEL_27;
  }
  uint64_t v14 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
  uint64_t v100 = OUTLINED_FUNCTION_7_0(32LL);
  OUTLINED_FUNCTION_256_2(4.8149e-34);
  os_log_type_t v103 = v15;
  uint64_t v104 = 0LL;
  uint64_t v105 = 0xE000000000000000LL;
  OUTLINED_FUNCTION_124();
  OUTLINED_FUNCTION_76_4();
  OUTLINED_FUNCTION_48_27(v2);
  OUTLINED_FUNCTION_87_0();
  OUTLINED_FUNCTION_4_1();
  v0[17] = OUTLINED_FUNCTION_10_3(0LL, v16, &v103);
  OUTLINED_FUNCTION_79_15((uint64_t)(v0 + 17), (uint64_t)(v0 + 18), (uint64_t)v98);
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_31_1(v13);
  uint64_t v17 = (uint64_t)v14;
  OUTLINED_FUNCTION_57_0( &dword_0,  v4,  (os_log_type_t)v3,  "%s resolveApp: only found first party apps, skip forcing app disambiguation",  v14);
  uint64_t v18 = v100;
LABEL_26:
  OUTLINED_FUNCTION_17_0(v18);
  OUTLINED_FUNCTION_0_2(v18);
  OUTLINED_FUNCTION_0_2(v17);
LABEL_28:

LABEL_50:
  swift_task_dealloc(v0[22]);
  uint64_t v91 = OUTLINED_FUNCTION_176_3();
  return v92(v91);
}

uint64_t specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3)
  {
    if (result)
    {
      type metadata accessor for INPerson();
      return swift_arrayInitWithCopy(a4);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_3_40()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v0, v3, v1);
}

uint64_t OUTLINED_FUNCTION_7_38()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_9_31()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 120) + 8LL))(v0, *(void *)(v1 - 112));
}

uint64_t OUTLINED_FUNCTION_10_29()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t OUTLINED_FUNCTION_11_31()
{
  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t OUTLINED_FUNCTION_12_33()
{
  return type metadata accessor for SiriKitConfirmationState(0LL);
}

uint64_t OUTLINED_FUNCTION_16_19()
{
  return specialized Collection.first.getter();
}

uint64_t OUTLINED_FUNCTION_19_19()
{
  return v1(v2, v0);
}

uint64_t Optional<A>.isNilOrEmpty.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, a1);
  uint64_t v8 = *(void *)(a1 + 16);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1LL, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
    char v9 = 1;
  }

  else
  {
    char v9 = dispatch thunk of Collection.isEmpty.getter(v8, a2);
    (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8LL))(v6, v8);
  }

  return v9 & 1;
}

uint64_t Optional<A>.emptyToNil.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((Optional<A>.isNilOrEmpty.getter(a1, a2) & 1) != 0) {
    return __swift_storeEnumTagSinglePayload(a3, 1LL, 1LL, *(void *)(a1 + 16));
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a3, v3, a1);
  }
}

PhoneCallFlowDelegatePlugin::PhoneCallEmergencyLocationType_optional __swiftcall PhoneCallEmergencyLocationType.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallEmergencyLocationType.init(rawValue:),  v2);
  OUTLINED_FUNCTION_39();
  if (v3 >= 3) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallEmergencyLocationType_optional)3;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallEmergencyLocationType_optional)v3;
  }
}

uint64_t PhoneCallEmergencyLocationType.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6C61636F6CLL;
  }
  if (a1 == 1) {
    return 0x6C61636F4C6E6F6ELL;
  }
  return 1701736302LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallEmergencyLocationType( unsigned __int8 *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance PhoneCallEmergencyLocationType()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallEmergencyLocationType(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallEmergencyLocationType( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::PhoneCallEmergencyLocationType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallEmergencyLocationType@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallEmergencyLocationType_optional *a2@<X8>)
{
  result.int value = PhoneCallEmergencyLocationType.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallEmergencyLocationType@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = PhoneCallEmergencyLocationType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t PhoneCallEmergencyType.semanticValue.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0xD000000000000011LL;
  if (a2 == 1) {
    unint64_t v2 = 0xD000000000000012LL;
  }
  if (a2 == 2) {
    return 0x636E656772656D65LL;
  }
  else {
    return v2;
  }
}

uint64_t static ParseError.__derived_enum_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2)
  {
    case 0LL:
      return !a4;
    case 1LL:
      return a4 == 1;
    case 2LL:
      return a4 == 2;
  }

  if (a4 < 3) {
    return 0LL;
  }
  if (a1 != a3 || a2 != a4) {
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
  }
  return 1LL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallEmergencyType( uint64_t *a1, uint64_t a2)
{
  return static ParseError.__derived_enum_equals(_:_:)(*a1, a1[1], *(void *)a2, *(void *)(a2 + 8));
}

uint64_t PhoneCallContactSearchQualifier.exclusive.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

uint64_t PhoneCallContactSearchQualifier.nobody.getter(unsigned int a1)
{
  return HIWORD(a1) & 1;
}

uint64_t static PhoneCallContactSearchQualifier.__derived_struct_equals(_:_:)(unsigned int a1, int a2)
{
  unsigned int v2 = ((a2 ^ a1) >> 8) & 1;
  return (v2 | (((a2 ^ a1) & 0x10000) >> 16)) ^ 1;
}

PhoneCallFlowDelegatePlugin::PhoneCallContactSearchQualifier __swiftcall PhoneCallContactSearchQualifier.init(role:exclusive:nobody:)( PhoneCallFlowDelegatePlugin::PhoneCallContactRole role, Swift::Bool exclusive, Swift::Bool nobody)
{
  if (nobody) {
    int v3 = 0x10000;
  }
  else {
    int v3 = 0;
  }
  if (exclusive) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  return (PhoneCallFlowDelegatePlugin::PhoneCallContactSearchQualifier)(v4 & 0xFFFFFF00 | role | v3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallContactSearchQualifier( unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[2]) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  if (a1[1]) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  unsigned int v4 = v3 | *a1 | v2;
  if (a2[2]) {
    int v5 = 0x10000;
  }
  else {
    int v5 = 0;
  }
  if (a2[1]) {
    int v6 = 256;
  }
  else {
    int v6 = 0;
  }
  return static PhoneCallContactSearchQualifier.__derived_struct_equals(_:_:)(v4, v6 | *a2 | v5);
}

void PhoneCallPersonName.namePrefix.getter()
{
}

void PhoneCallPersonName.namePrefix.setter()
{
  *(void *)(v1 + 80) = v2;
  *(void *)(v1 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v0;
  OUTLINED_FUNCTION_6();
}

void __swiftcall PhoneCallPersonName.init()(PhoneCallFlowDelegatePlugin::PhoneCallPersonName *__return_ptr retstr)
{
  retstr->namePrefix = 0u;
  retstr->nameSuffix = 0u;
  retstr->nickName = 0u;
  retstr->fullName = 0u;
  retstr->middleName = 0u;
  retstr->lastName = 0u;
  retstr->firstName = 0u;
}

Swift::Void __swiftcall SiriPhoneContact.update(contactSource:)( PhoneCallFlowDelegatePlugin::ContactSourceType_optional contactSource)
{
}

Swift::String_optional __swiftcall SiriPhoneContact.getContactId()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 32))();
  result.value._object = v2;
  result.value._uint64_t countAndFlagsBits = v1;
  return result;
}

PhoneCallFlowDelegatePlugin::PhoneCallEmergencyLocationType_optional __swiftcall SiriPhoneContact.getEmergencyLocationType()()
{
  return (PhoneCallFlowDelegatePlugin::PhoneCallEmergencyLocationType_optional)(*(unsigned __int8 (**)(void))(v0 + 296))();
}

id @nonobjc INPersonHandle.init(value:type:label:emergencyType:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v11 = [v5 initWithValue:v10 type:a3 label:a4 emergencyType:a5];

  return v11;
}

unint64_t lazy protocol witness table accessor for type PhoneCallEmergencyLocationType and conformance PhoneCallEmergencyLocationType()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallEmergencyLocationType and conformance PhoneCallEmergencyLocationType;
  if (!lazy protocol witness table cache variable for type PhoneCallEmergencyLocationType and conformance PhoneCallEmergencyLocationType)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallEmergencyLocationType,  &type metadata for PhoneCallEmergencyLocationType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallEmergencyLocationType and conformance PhoneCallEmergencyLocationType);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for PhoneCallEmergencyLocationType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = 1;
  }
  else {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_B64AC + 4 * byte_32329D[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_B64E0 + 4 * byte_323298[v4]))();
}

uint64_t sub_B64E0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B64E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xB64F0LL);
  }
  return result;
}

uint64_t sub_B64FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xB6504LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_B6508(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B6510(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for PhoneCallEmergencyLocationType()
{
}

unint64_t destroy for PhoneCallEmergencyType(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PhoneCallEmergencyType(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }

  return a1;
}

void *assignWithCopy for PhoneCallEmergencyType(void *a1, void *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      uint64_t v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }

uint64_t assignWithTake for PhoneCallEmergencyType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhoneCallEmergencyType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD((*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v1, v2, v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for PhoneCallEmergencyType( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + ++*(void *)(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + ++*(void *)(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = a2 + 2;
    }
  }

  return result;
}

uint64_t getEnumTag for PhoneCallEmergencyType(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v0, v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for PhoneCallEmergencyType(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else if (a2)
  {
    result[1] = (a2 - 1);
  }

  return result;
}

void type metadata accessor for PhoneCallEmergencyType()
{
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for PhoneCallContactSearchQualifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v3 = -1;
    return (v3 + 1);
  }

  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = a1[3];
      if (a1[3]) {
        goto LABEL_5;
      }
    }

    else
    {
      int v2 = *(unsigned __int16 *)(a1 + 3);
      if (*(_WORD *)(a1 + 3))
      {
LABEL_5:
        int v3 = (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776962;
        return (v3 + 1);
      }
    }
  }

  unsigned int v4 = a1[1];
  BOOL v5 = v4 >= 2;
  int v3 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5) {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for PhoneCallContactSearchQualifier( uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)unint64_t result = a2 - 255;
    *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 3) = v4;
      }
      else {
        *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 3) = v4;
      }
    }
  }

  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(_BYTE *)(result + 1) = a2 + 1;
      return result;
    }

    *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }

  return result;
}

void type metadata accessor for PhoneCallContactSearchQualifier()
{
}

uint64_t destroy for PhoneCallPersonName(void *a1)
{
  return swift_bridgeObjectRelease(a1[13]);
}

void *initializeWithCopy for PhoneCallPersonName(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  uint64_t v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

void *assignWithCopy for PhoneCallPersonName(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[8] = a2[8];
  uint64_t v12 = a2[9];
  uint64_t v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[10] = a2[10];
  uint64_t v14 = a2[11];
  uint64_t v15 = a1[11];
  a1[11] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[12] = a2[12];
  uint64_t v16 = a2[13];
  uint64_t v17 = a1[13];
  a1[13] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

void *__swift_memcpy112_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

void *assignWithTake for PhoneCallPersonName(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[9];
  uint64_t v13 = a1[9];
  a1[8] = a2[8];
  a1[9] = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a2[11];
  uint64_t v15 = a1[11];
  a1[10] = a2[10];
  a1[11] = v14;
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = a2[13];
  uint64_t v17 = a1[13];
  a1[12] = a2[12];
  a1[13] = v16;
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhoneCallPersonName(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 112))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD((*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v1, v2, v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhoneCallPersonName(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 104) = 0LL;
    *(_OWORD *)(result + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(_OWORD *)(result + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0;
    }
    if (a2) {
      *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = a2;
    }
  }

  return result;
}

void type metadata accessor for PhoneCallPersonName()
{
}

uint64_t initializeWithCopy for BackingContact(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 40);
  if (v3 >= 3) {
    unsigned int v3 = *(_DWORD *)a2 + 3;
  }
  if (v3 == 2)
  {
    __int128 v5 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 2;
  }

  else if (v3 == 1)
  {
    uint64_t v4 = *a2;
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + 40) = 1;
    swift_retain(v4);
  }

  else
  {
    uint64_t v6 = (void *)*a2;
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + 40) = 0;
    id v7 = v6;
  }

  return a1;
}

void *assignWithTake for BackingContact(void *a1, uint64_t a2)
{
  if (a1 != (void *)a2)
  {
    unsigned int v4 = *((unsigned __int8 *)a1 + 40);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 == 2)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }

    else if (v4 == 1)
    {
      swift_release(*a1);
    }

    else
    {
    }

    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      __int128 v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v7;
      a1[4] = *(void *)(a2 + 32);
      char v6 = 2;
    }

    else if (v5 == 1)
    {
      *a1 = *(void *)a2;
      char v6 = 1;
    }

    else
    {
      char v6 = 0;
      *a1 = *(void *)a2;
    }

    *((_BYTE *)a1 + 40) = v6;
  }

  return a1;
}

uint64_t getEnumTag for BackingContact(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  return result;
}

uint64_t destructiveInjectEnumTag for BackingContact(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(void *)(result + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + ++*(void *)(v0 + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 3;
    LOBYTE(a__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 3;
  }

  *(_BYTE *)(result + 40) = a2;
  return result;
}

void type metadata accessor for BackingContact()
{
}

  ;
}

uint64_t OUTLINED_FUNCTION_1_38(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1LL, v2);
}

uint64_t OUTLINED_FUNCTION_3_41@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2, v3, v4);
}

uint64_t OUTLINED_FUNCTION_4_37()
{
  return v1(v2, v0);
}

id OUTLINED_FUNCTION_6_36()
{
  return [v1 *(SEL *)(v0 + 1424)];
}

uint64_t OUTLINED_FUNCTION_8_25( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
  return outlined init with take of String?((uint64_t)&a9, (uint64_t)&a23, a3);
}

void *OUTLINED_FUNCTION_9_32( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 104))(&a9, a2, a3);
}

id OUTLINED_FUNCTION_11_32(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t OUTLINED_FUNCTION_14_20()
{
  return v0;
}

  ;
}

uint64_t OUTLINED_FUNCTION_17_28()
{
  return v0(v2, v1);
}

void OUTLINED_FUNCTION_18_20()
{
}

uint64_t *OUTLINED_FUNCTION_20_15( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return outlined release of PhoneCallPersonName?(&a9);
}

uint64_t OUTLINED_FUNCTION_23_15()
{
  return static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
}

  ;
}

id OUTLINED_FUNCTION_28_13()
{
  return [*(id *)(v0 + 192) *(SEL *)(v1 + 1864)];
}

  ;
}

uint64_t OUTLINED_FUNCTION_30_12()
{
  return type metadata accessor for PersonNameComponents(0LL);
}

uint64_t OUTLINED_FUNCTION_31_15()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_32_13()
{
  return outlined destroy of PersonNameComponents?(v0);
}

  ;
}

id OUTLINED_FUNCTION_34_14()
{
  return *(id *)(v0 + 56);
}

void OUTLINED_FUNCTION_35_11()
{
}

id OUTLINED_FUNCTION_36_8(void *a1)
{
  return [a1 *(SEL *)(v1 + 1808)];
}

id OUTLINED_FUNCTION_37_12(void *a1)
{
  return [a1 *(SEL *)(v1 + 1872)];
}

void OUTLINED_FUNCTION_38_13()
{
}

uint64_t OUTLINED_FUNCTION_39_8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return outlined init with take of String?(v4, v3, a3);
}

id OUTLINED_FUNCTION_41_10()
{
  return objc_allocWithZone(*(Class *)(v0 + 3056));
}

uint64_t OUTLINED_FUNCTION_43_4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return outlined init with take of String?(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_44_10()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

id OUTLINED_FUNCTION_46_7(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

void OUTLINED_FUNCTION_48_4()
{
}

  ;
}

void SKTransformer.RCHFlowContext.previousIntent.getter(uint64_t a1, void *a2)
{
  id v2 = a2;
  OUTLINED_FUNCTION_2();
}

void SKTransformer.RCHFlowContext.previousIntentResponse.getter(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  OUTLINED_FUNCTION_2();
}

uint64_t SKTransformer.nlv4Conversion<A>(phoneCallNLIntent:rchFlowContext:)( void *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  void (*v46)(__int128 *__return_ptr, void *);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  id v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void (*v59)(__int128 *__return_ptr, void *);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  os_log_s *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  void *v100;
  void *v101;
  __int128 v102[2];
  uint64_t v103;
  uint64_t v104;
  uint64_t v94 = a4;
  uint64_t v101 = a3;
  uint64_t v99 = a1;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INAddCallParticipantIntent>);
  uint64_t v92 = *(void *)(v11 - 8);
  uint64_t v93 = v11;
  __chkstk_darwin();
  uint64_t v91 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INJoinCallIntent>);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for ContactGroupResolver(0LL);
  uint64_t v95 = *(void *)(v17 - 8);
  uint64_t v96 = v17;
  __chkstk_darwin();
  uint64_t v19 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v100 = a2;
  if (a2)
  {
    uint64_t v20 = type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INStartCallIntent,  &OBJC_CLASS___INStartCallIntent_ptr);
    if (swift_dynamicCastMetatype(a5, v20))
    {
      outlined init with copy of SharedGlobalsProviding(v98, (uint64_t)v102);
      uint64_t v21 = v101;
      if (v101)
      {
        uint64_t v22 = objc_opt_self(&OBJC_CLASS___INStartCallIntent);
        swift_dynamicCastObjCClass(v21, v22);
      }

      unint64_t v23 = v100;
      uint64_t v24 = swift_retain();
      ContactGroupResolver.init()(v24);
      specialized static StartCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)();
      goto LABEL_18;
    }

    uint64_t v26 = type metadata accessor for CNContactStore( 0LL,  &lazy cache variable for type metadata for INStartAudioCallIntent,  &OBJC_CLASS___INStartAudioCallIntent_ptr);
    if (swift_dynamicCastMetatype(a5, v26))
    {
      outlined init with copy of SharedGlobalsProviding(v98, (uint64_t)v102);
      uint64_t v27 = v101;
      if (v101)
      {
        uint64_t v28 = objc_opt_self(&OBJC_CLASS___INStartAudioCallIntent);
        swift_dynamicCastObjCClass(v27, v28);
      }

      unint64_t v23 = v100;
      uint64_t v29 = swift_retain();
      ContactGroupResolver.init()(v29);
      specialized static StartAudioCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)();
      goto LABEL_18;
    }

    uint64_t v30 = type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INStartVideoCallIntent,  &OBJC_CLASS___INStartVideoCallIntent_ptr);
    if (swift_dynamicCastMetatype(a5, v30))
    {
      outlined init with copy of SharedGlobalsProviding(v98, (uint64_t)v102);
      uint64_t v31 = v101;
      if (v101)
      {
        uint64_t v32 = objc_opt_self(&OBJC_CLASS___INStartVideoCallIntent);
        swift_dynamicCastObjCClass(v31, v32);
      }

      unint64_t v23 = v100;
      uint64_t v33 = swift_retain();
      ContactGroupResolver.init()(v33);
      specialized static StartVideoCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)();
      goto LABEL_18;
    }

    uint64_t v34 = type metadata accessor for CNContactStore( 0LL,  &lazy cache variable for type metadata for INAnswerCallIntent,  &OBJC_CLASS___INAnswerCallIntent_ptr);
    if (swift_dynamicCastMetatype(a5, v34))
    {
      outlined init with copy of SharedGlobalsProviding(v98, (uint64_t)v102);
      uint64_t v35 = v101;
      if (v101)
      {
        uint64_t v36 = objc_opt_self(&OBJC_CLASS___INAnswerCallIntent);
        swift_dynamicCastObjCClass(v35, v36);
      }

      unint64_t v23 = v100;
      uint64_t v37 = swift_retain();
      ContactGroupResolver.init()(v37);
      specialized static AnswerCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)();
      goto LABEL_18;
    }

    uint64_t v40 = type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INJoinCallIntent,  &OBJC_CLASS___INJoinCallIntent_ptr);
    if (swift_dynamicCastMetatype(a5, v40))
    {
      outlined init with copy of SharedGlobalsProviding(v98, (uint64_t)v102);
      uint64_t v41 = swift_allocObject(&unk_3FB768, 72LL, 7LL);
      uint64_t v43 = v100;
      uint64_t v42 = v101;
      *(void *)(v41 + ++*(void *)(v0 + 16) = v100;
      *(void *)(v41 + 24) = v42;
      outlined init with take of AppSelectionSignalComponent(v102, v41 + 32);
      id v44 = v42;
      swift_retain_n(v43, 2LL);
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
      Transformer.init(transform:)( closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:previousIntentResponse:)partial apply,  v41,  v45);
      uint64_t v46 = (void (*)(__int128 *__return_ptr, void *))Transformer.transform.getter(v13);
      uint64_t v48 = v47;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      uint64_t v49 = v97;
      v46(v102, v99);
      if (v49)
      {
        swift_release(v48);
        uint64_t v50 = v43;
        return swift_release(v50);
      }

      swift_release(v48);
      uint64_t v63 = v43;
    }

    else
    {
      uint64_t v51 = type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INAddCallParticipantIntent,  &OBJC_CLASS___INAddCallParticipantIntent_ptr);
      if (!swift_dynamicCastMetatype(a5, v51))
      {
        uint64_t v64 = type metadata accessor for CNContactStore( 0LL,  &lazy cache variable for type metadata for INIdentifyIncomingCallerIntent,  &OBJC_CLASS___INIdentifyIncomingCallerIntent_ptr);
        if (swift_dynamicCastMetatype(a5, v64))
        {
          outlined init with copy of SharedGlobalsProviding(v98, (uint64_t)v102);
          uint64_t v65 = (uint64_t)v101;
          if (v101)
          {
            uint64_t v66 = objc_opt_self(&OBJC_CLASS___INIdentifyIncomingCallerIntent);
            uint64_t v65 = swift_dynamicCastObjCClass(v65, v66);
          }

          unint64_t v23 = v100;
          uint64_t v67 = swift_retain();
          ContactGroupResolver.init()(v67);
          uint64_t v25 = specialized static IdentifyCallerIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)( v99,  v23,  (uint64_t)v102,  v65);
        }

        else
        {
          uint64_t v68 = type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INHangUpCallIntent,  &OBJC_CLASS___INHangUpCallIntent_ptr);
          os_log_type_t v69 = swift_dynamicCastMetatype(a5, v68);
          uint64_t v70 = v101;
          if (!v69)
          {
            uint64_t v74 = type metadata accessor for TransformationError(0LL);
            uint64_t v75 = lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
            swift_allocError(v74, v75, 0LL, 0LL);
            uint64_t v77 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v74 - 8) + 104LL))( v76,  enum case for TransformationError.notImplemented(_:),  v74);
            return swift_willThrow(v77, v78, v79, v80, v81, v82, v83, v84, v91, v92, v93, v94, v95, v96);
          }

          outlined init with copy of SharedGlobalsProviding(v98, (uint64_t)v102);
          if (v70)
          {
            uint64_t v71 = objc_opt_self(&OBJC_CLASS___INHangUpCallIntent);
            uint64_t v70 = (void *)swift_dynamicCastObjCClass(v70, v71);
          }

          uint64_t v72 = v94;
          unint64_t v23 = v100;
          char v73 = swift_retain();
          ContactGroupResolver.init()(v73);
          specialized static HangUpCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)( (uint64_t)v99,  (uint64_t)v23,  (uint64_t)v102,  v70,  v72);
        }

void SKTransformer.convertToSKIntent<A>(ofType:phoneCallNLIntent:rchFlowContext:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t DisambiguationReferenceResolver.init(referenceResolver:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of AppSelectionSignalComponent(a1, a2);
}

uint64_t outlined destroy of PhoneCallNLIntent?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallNLIntent?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t initializeWithCopy for SKTransformer(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

void *assignWithCopy for SKTransformer(void *a1, void *a2)
{
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + ++*(void *)(v0 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SKTransformer(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + ++*(void *)(v0 + 16) = v4;
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SKTransformer(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SKTransformer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SKTransformer()
{
  return &type metadata for SKTransformer;
}

void destroy for SKTransformer.RCHFlowContext(uint64_t a1)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for SKTransformer.RCHFlowContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  __int128 v4 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = (uint64_t)v4;
  unsigned int v5 = (void *)a2[2];
  a1[2] = (uint64_t)v5;
  swift_retain(v3);
  id v6 = v4;
  id v7 = v5;
  return a1;
}

uint64_t *assignWithCopy for SKTransformer.RCHFlowContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  id v6 = (void *)a1[1];
  id v7 = (void *)a2[1];
  a1[1] = (uint64_t)v7;
  id v8 = v7;

  uint64_t v9 = (void *)a1[2];
  uint64_t v10 = (void *)a2[2];
  a1[2] = (uint64_t)v10;
  id v11 = v10;

  return a1;
}

void *assignWithTake for SKTransformer.RCHFlowContext(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = (void *)a1[2];
  a1[2] = *(void *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for SKTransformer.RCHFlowContext(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      uint64_t v3 = *a1;
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SKTransformer.RCHFlowContext( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0LL;
    *(void *)(result + ++*(void *)(v0 + 16) = 0LL;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SKTransformer.RCHFlowContext()
{
  return &type metadata for SKTransformer.RCHFlowContext;
}

void specialized SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

{
  specialized SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  &lazy cache variable for type metadata for INStartAudioCallIntent,  &OBJC_CLASS___INStartAudioCallIntent_ptr,  &demangling cache variable for type metadata for INStartAudioCallIntent.Type,  (uint64_t (*)(uint64_t, void, void, void))specialized SKTransformer.nlv3Conversion<A>(phoneCallNLIntent:rchFlowContext:),  (uint64_t (*)(uint64_t, void, void, void))specialized SKTransformer.nlv4Conversion<A>(phoneCallNLIntent:rchFlowContext:));
  OUTLINED_FUNCTION_13_2();
}

{
  specialized SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (unint64_t *)&lazy cache variable for type metadata for INHangUpCallIntent,  &OBJC_CLASS___INHangUpCallIntent_ptr,  &demangling cache variable for type metadata for INHangUpCallIntent.Type,  (uint64_t (*)(uint64_t, void, void, void))specialized SKTransformer.nlv3Conversion<A>(phoneCallNLIntent:rchFlowContext:),  (uint64_t (*)(uint64_t, void, void, void))specialized SKTransformer.nlv4Conversion<A>(phoneCallNLIntent:rchFlowContext:));
  OUTLINED_FUNCTION_13_2();
}

{
  specialized SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (unint64_t *)&lazy cache variable for type metadata for INStartCallIntent,  &OBJC_CLASS___INStartCallIntent_ptr,  &demangling cache variable for type metadata for INStartCallIntent.Type,  (uint64_t (*)(uint64_t, void, void, void))specialized SKTransformer.nlv3Conversion<A>(phoneCallNLIntent:rchFlowContext:),  (uint64_t (*)(uint64_t, void, void, void))specialized SKTransformer.nlv4Conversion<A>(phoneCallNLIntent:rchFlowContext:));
  OUTLINED_FUNCTION_13_2();
}

void specialized SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t *a8, void *a9, uint64_t *a10, uint64_t (*a11)(uint64_t, void, void, void), uint64_t (*a12)(uint64_t, void, void, void))
{
  uint64_t v17 = type metadata accessor for PhoneCallNLv3Intent(0LL);
  OUTLINED_FUNCTION_37_13(v17, (uint64_t)&v73);
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v63 = v18;
  v72[3] = a6;
  v72[4] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v72);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16LL))(boxed_opaque_existential_1, a1, a6);
  OUTLINED_FUNCTION_28_14();
  uint64_t v21 = v20;
  uint64_t v59 = type metadata accessor for CNContactStore(0LL, a8, a9);
  id v22 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  id v23 = [v22 _className];

  uint64_t v24 = (os_log_s *)static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  OUTLINED_FUNCTION_7_39();
  static Signpost.begin(_:string1:)();
  uint64_t v26 = v25;
  os_log_type_t v28 = v27;
  uint64_t v30 = v29;
  OUTLINED_FUNCTION_23_16(v31, (uint64_t)&v74 + 4);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v32 = OUTLINED_FUNCTION_15_1();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.siriPhone);
  OUTLINED_FUNCTION_9();
  os_log_type_t v33 = OUTLINED_FUNCTION_6_0();
  os_log_type_t v60 = v28;
  if (OUTLINED_FUNCTION_63(v33))
  {
    uint64_t v30 = OUTLINED_FUNCTION_7_0(22LL);
    uint64_t v34 = OUTLINED_FUNCTION_7_0(64LL);
    v68[0] = v34;
    *(_DWORD *)uint64_t v30 = 136315394;
    uint64_t v35 = OUTLINED_FUNCTION_47_0(52LL, 0x8000000000348ED0LL, v68);
    uint64_t v36 = OUTLINED_FUNCTION_15_24(v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v36, v37, v38);
    *(_WORD *)(v30 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    uint64_t v69 = v59;
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(a10);
    uint64_t v40 = OUTLINED_FUNCTION_29_14(v39);
    uint64_t v42 = OUTLINED_FUNCTION_22_17(v40, v41);
    uint64_t v43 = OUTLINED_FUNCTION_15_24(v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v43, v44, v45);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_33_6(&dword_0, v24, v12, "#SKTransformer %s to %s", (uint8_t *)v30);
    OUTLINED_FUNCTION_42_2(v34);
    uint64_t v46 = v34;
    os_log_type_t v28 = v60;
    OUTLINED_FUNCTION_0_2(v46);
    OUTLINED_FUNCTION_0_2(v30);
  }

  outlined init with copy of SharedGlobalsProviding((uint64_t)v72, (uint64_t)&v69);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  if (OUTLINED_FUNCTION_14_21((uint64_t)v63, (uint64_t)&v69, v47, v61))
  {
    OUTLINED_FUNCTION_4_38(a11);
    if (v30)
    {
      OUTLINED_FUNCTION_12_34();
      goto LABEL_11;
    }

    OUTLINED_FUNCTION_12_34();
LABEL_17:
    __swift_destroy_boxed_opaque_existential_1(&v69);
    goto LABEL_18;
  }

  OUTLINED_FUNCTION_4_38(a12);
  if (!v30)
  {
    outlined destroy of PhoneCallNLv4Intent(v68);
    goto LABEL_17;
  }

  outlined destroy of PhoneCallNLv4Intent(v68);
LABEL_11:
  __swift_destroy_boxed_opaque_existential_1(&v69);
  OUTLINED_FUNCTION_26_7();
  uint64_t v48 = OUTLINED_FUNCTION_26_7();
  Logger.logObject.getter(v48);
  os_log_type_t v49 = OUTLINED_FUNCTION_33_18();
  if (OUTLINED_FUNCTION_16_20(v49))
  {
    uint64_t v50 = OUTLINED_FUNCTION_7_0(22LL);
    uint64_t v62 = v26;
    uint64_t v51 = OUTLINED_FUNCTION_7_0(64LL);
    v68[0] = v51;
    *(_DWORD *)uint64_t v50 = 136315394;
    uint64_t v52 = OUTLINED_FUNCTION_31_16((uint64_t)v71);
    uint64_t v69 = OUTLINED_FUNCTION_22_17(v52, v53);
    OUTLINED_FUNCTION_27_18((uint64_t)&v69, v54, v55, v50 + 12);
    OUTLINED_FUNCTION_62();
    *(_WORD *)(v50 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    swift_getErrorValue(v30, v67, v64);
    uint64_t v56 = Error.localizedDescription.getter(v65, v66);
    uint64_t v69 = OUTLINED_FUNCTION_22_17(v56, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v50 + 14);
    OUTLINED_FUNCTION_62();
    OUTLINED_FUNCTION_3_24();
    OUTLINED_FUNCTION_3_24();
    OUTLINED_FUNCTION_33_6( &dword_0,  v63,  v28,  "#SKTransformer Error converting PhoneCallNLIntent to %s: %s",  (uint8_t *)v50);
    OUTLINED_FUNCTION_42_2(v51);
    uint64_t v58 = v51;
    uint64_t v26 = v62;
    OUTLINED_FUNCTION_0_2(v58);
    OUTLINED_FUNCTION_0_2(v50);

    OUTLINED_FUNCTION_3_24();
  }

  else
  {
    OUTLINED_FUNCTION_3_24();
    OUTLINED_FUNCTION_3_24();
    OUTLINED_FUNCTION_3_24();
  }

unint64_t lazy protocol witness table accessor for type TransformationError and conformance TransformationError()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformationError and conformance TransformationError;
  if (!lazy protocol witness table cache variable for type TransformationError and conformance TransformationError)
  {
    uint64_t v1 = type metadata accessor for TransformationError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for TransformationError, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TransformationError and conformance TransformationError);
  }

  return result;
}

void partial apply for closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)()
{
}

{
  OUTLINED_FUNCTION_9_1();
  closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)();
}

#error "B82C0: call analysis failed (funcsize=6)"
uint64_t objectdestroyTm_3()
{
  uint64_t v0;
  swift_release(*(void *)(v0 + 16));

  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 32));
  return swift_deallocObject(v0, 80LL, 7LL);
}

#error "B8358: call analysis failed (funcsize=6)"
#error "B8374: call analysis failed (funcsize=6)"
#error "B8390: call analysis failed (funcsize=6)"
uint64_t objectdestroy_2Tm()
{
  uint64_t v0;
  swift_release(*(void *)(v0 + 16));

  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 32));
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:previousIntentResponse:)partial apply()
{
  return partial apply for closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:previousIntentResponse:)();
}

uint64_t OUTLINED_FUNCTION_4_38@<X0>(uint64_t (*a1)(uint64_t, void, void, void)@<X8>)
{
  return a1(v1 - 128, *(void *)(v1 - 384), *(void *)(v1 - 376), *(void *)(v1 - 368));
}

uint64_t OUTLINED_FUNCTION_6_37(uint64_t a1)
{
  *(void *)(v1 - 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a1;
  return v1 - 168;
}

  ;
}

uint64_t OUTLINED_FUNCTION_12_34()
{
  return outlined destroy of PhoneCallNLv3Intent(v0);
}

uint64_t OUTLINED_FUNCTION_14_21(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 0LL);
}

uint64_t OUTLINED_FUNCTION_15_24(uint64_t a1)
{
  *(void *)(v1 - 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a1;
  return v1 - 168;
}

BOOL OUTLINED_FUNCTION_16_20(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_20_16(uint64_t a1)
{
  *(void *)(v1 - outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 - 168), v0 - 128) = a1;
  return v1 - 128;
}

uint64_t OUTLINED_FUNCTION_22_17(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 272));
}

uint64_t OUTLINED_FUNCTION_23_16@<X0>(int a1@<W3>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 - 256) = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t OUTLINED_FUNCTION_24_13(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 232));
}

void OUTLINED_FUNCTION_26_19()
{
}

void OUTLINED_FUNCTION_28_14()
{
}

uint64_t OUTLINED_FUNCTION_29_14(uint64_t a1)
{
  return String.init<A>(describing:)(v1 - 168, a1);
}

uint64_t OUTLINED_FUNCTION_31_16@<X0>(uint64_t a1@<X8>)
{
  return _typeName(_:qualified:)(*(void *)(a1 - 256), 0LL);
}

uint64_t OUTLINED_FUNCTION_33_18()
{
  return static os_log_type_t.error.getter();
}

uint64_t OUTLINED_FUNCTION_37_13@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 - 256) = result;
  return result;
}

void *CallNotificationContextProvider.callNotificationTimeoutInterval.unsafeMutableAddressor()
{
  return &static CallNotificationContextProvider.callNotificationTimeoutInterval;
}

double static CallNotificationContextProvider.callNotificationTimeoutInterval.getter()
{
  return 30.0;
}

void CallNotificationContextProvider.CallNotification.applicationId.getter()
{
}

void CallNotificationContextProvider.CallNotification.callId.getter()
{
}

uint64_t CallNotificationContextProvider.update(aceServiceInvoker:refId:applicationId:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[9] = a3;
  v6[10] = v5;
  v6[8] = a2;
  uint64_t v10 = (void *)swift_task_alloc(dword_42F284);
  v6[11] = v10;
  *uint64_t v10 = v6;
  v10[1] = CallNotificationContextProvider.update(aceServiceInvoker:refId:applicationId:);
  return CallNotificationContextProvider.submitNotificationsSearch(aceServiceInvoker:applicationId:)(a1, a4, a5);
}

uint64_t CallNotificationContextProvider.update(aceServiceInvoker:refId:applicationId:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 88LL);
  *(void *)(*(void *)v1 + 96LL) = a1;
  swift_task_dealloc(v2);
  return OUTLINED_FUNCTION_5_7();
}

uint64_t CallNotificationContextProvider.update(aceServiceInvoker:refId:applicationId:)()
{
  uint64_t v1 = *(void *)(v0 + 96);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v2 = *(void *)(v0 + 96);
    }
    else {
      uint64_t v2 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter(v2);
    OUTLINED_FUNCTION_30_13();
    if (!v2) {
      goto LABEL_13;
    }
  }

  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL));
    if (!v2)
    {
LABEL_13:
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

  BOOL v3 = __OFSUB__(v2, 1LL);
  uint64_t v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
  }

  else
  {
    unint64_t v5 = v1 & 0xC000000000000001LL;
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)( v4,  (v1 & 0xC000000000000001LL) == 0,  *(void *)(v0 + 96));
    uint64_t v1 = *(void *)(v0 + 96);
    if (!v5)
    {
      id v6 = OUTLINED_FUNCTION_27_10(v1 + 8 * v4);
      goto LABEL_6;
    }
  }

  id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
LABEL_6:
  uint64_t v8 = *(void *)(v0 + 72);
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v9 = *(void *)(v0 + 64);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v7 + 16);
  *(void *)(v0 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v9;
  *(void *)(v0 + 56) = v8;
  swift_retain();
  id v11 = v6;
  uint64_t result = outlined bridged method (ob) of @objc SANotificationObject.notificationId.getter( v11,  (SEL *)&selRef_applicationId);
  if (v13)
  {
    uint64_t v14 = result;
    uint64_t v15 = v13;
    id v16 = v11;
    uint64_t result = outlined bridged method (ob) of @objc SANotificationObject.notificationId.getter( v16,  (SEL *)&selRef_notificationId);
    if (v17)
    {
      *(void *)(v0 + ++*(void *)(v0 + 16) = v14;
      *(void *)(v0 + 24) = v15;
      *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = result;
      *(void *)(v0 + 40) = v17;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 184LL))(v0 + 48, v0 + 16);
      OUTLINED_FUNCTION_38_1();

      OUTLINED_FUNCTION_39();
      goto LABEL_13;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

Swift::String __swiftcall CallNotificationContextProvider.getCallNotificationApplicationId(for:)(Swift::String a1)
{
  object = a1._object;
  uint64_t v3 = OUTLINED_FUNCTION_2_31();
  OUTLINED_FUNCTION_14_22(v3, v4, v5, v6, v7, v8, v9, v10, v38, v39, v40);
  OUTLINED_FUNCTION_38_1();
  uint64_t v11 = v42;
  if (v42) {
    swift_bridgeObjectRelease();
  }
  else {
    uint64_t v11 = 0xE000000000000000LL;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v12 = OUTLINED_FUNCTION_15_1();
  uint64_t v13 = (os_log_s *)__swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
  OUTLINED_FUNCTION_11(v11);
  uint64_t v14 = OUTLINED_FUNCTION_11((uint64_t)object);
  Logger.logObject.getter(v14);
  os_log_type_t v15 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_29_5(v15))
  {
    uint64_t v16 = OUTLINED_FUNCTION_7_0(22LL);
    uint64_t v41 = OUTLINED_FUNCTION_7_0(64LL);
    uint64_t v17 = OUTLINED_FUNCTION_25_22(4.8151e-34);
    uint64_t v19 = OUTLINED_FUNCTION_23_17(v17, v18);
    OUTLINED_FUNCTION_4_39(v19, v20, v21, v16 + 12, v22, v23, v24, v25, v19);
    OUTLINED_FUNCTION_32_10(v11);
    uint64_t v26 = OUTLINED_FUNCTION_13_31();
    uint64_t v28 = OUTLINED_FUNCTION_24_14(v26, v27);
    OUTLINED_FUNCTION_4_39(v28, v29, v30, v16 + 22, v31, v32, v33, v34, v28);
    OUTLINED_FUNCTION_32_10((uint64_t)object);
    OUTLINED_FUNCTION_12_35( &dword_0,  v13,  v1,  "#CallNotificationContextProvider returned applicationId %s for refId %s");
    OUTLINED_FUNCTION_18_21();
    OUTLINED_FUNCTION_0_2(v41);
    OUTLINED_FUNCTION_0_2(v16);
  }

  else
  {

    OUTLINED_FUNCTION_7_4((uint64_t)object);
    OUTLINED_FUNCTION_7_4(v11);
  }

  OUTLINED_FUNCTION_23_13();
  result._object = v36;
  result._uint64_t countAndFlagsBits = v35;
  return result;
}

Swift::String __swiftcall CallNotificationContextProvider.getCallNotificationCallId(for:)(Swift::String a1)
{
  object = a1._object;
  uint64_t v3 = OUTLINED_FUNCTION_2_31();
  OUTLINED_FUNCTION_14_22(v3, v4, v5, v6, v7, v8, v9, v10, v38, v39, v40);
  OUTLINED_FUNCTION_38_1();
  if (v42)
  {
    uint64_t v11 = v43;
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v11 = 0xE000000000000000LL;
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v12 = OUTLINED_FUNCTION_15_1();
  uint64_t v13 = (os_log_s *)__swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
  OUTLINED_FUNCTION_11(v11);
  uint64_t v14 = OUTLINED_FUNCTION_11((uint64_t)object);
  Logger.logObject.getter(v14);
  os_log_type_t v15 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_29_5(v15))
  {
    uint64_t v16 = OUTLINED_FUNCTION_7_0(22LL);
    uint64_t v41 = OUTLINED_FUNCTION_7_0(64LL);
    uint64_t v17 = OUTLINED_FUNCTION_25_22(4.8151e-34);
    uint64_t v19 = OUTLINED_FUNCTION_23_17(v17, v18);
    OUTLINED_FUNCTION_4_39(v19, v20, v21, v16 + 12, v22, v23, v24, v25, v19);
    OUTLINED_FUNCTION_32_10(v11);
    uint64_t v26 = OUTLINED_FUNCTION_13_31();
    uint64_t v28 = OUTLINED_FUNCTION_24_14(v26, v27);
    OUTLINED_FUNCTION_4_39(v28, v29, v30, v16 + 22, v31, v32, v33, v34, v28);
    OUTLINED_FUNCTION_32_10((uint64_t)object);
    OUTLINED_FUNCTION_12_35(&dword_0, v13, v1, "#CallNotificationContextProvider returned callId %s for refId %s");
    OUTLINED_FUNCTION_18_21();
    OUTLINED_FUNCTION_0_2(v41);
    OUTLINED_FUNCTION_0_2(v16);
  }

  else
  {

    OUTLINED_FUNCTION_7_4((uint64_t)object);
    OUTLINED_FUNCTION_7_4(v11);
  }

  OUTLINED_FUNCTION_23_13();
  result._object = v36;
  result._uint64_t countAndFlagsBits = v35;
  return result;
}

uint64_t CallNotificationContextProvider.submitNotificationsSearch(aceServiceInvoker:applicationId:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  void v3[9] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  v3[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[11] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[12] = swift_task_alloc(v7);
  v3[13] = swift_task_alloc(v7);
  return OUTLINED_FUNCTION_5_7();
}

uint64_t CallNotificationContextProvider.submitNotificationsSearch(aceServiceInvoker:applicationId:)()
{
  uint64_t v1 = v0[8];
  id v2 = [objc_allocWithZone(SANotificationsSearch) init];
  v0[14] = v2;
  type metadata accessor for INPlayVoicemailIntent( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
  Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  OUTLINED_FUNCTION_32_14((uint64_t)isa, "setIsOnDeviceSearch:");

  NSString v4 = v2;
  if (v1)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    uint64_t v5 = v4;
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  uint64_t v6 = (void *)v0[6];
  OUTLINED_FUNCTION_32_14((uint64_t)v4, "setAppId:");

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(SANotificationTypeIncomingCallNotificationValue);
  outlined bridged method (mbnn) of @objc SANotificationsSearch.notificationType.setter(v7, v8, v2);
  uint64_t v9 = v6[3];
  uint64_t v10 = v6[4];
  __swift_project_boxed_opaque_existential_1(v6, v9);
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to AceServiceInvokerAsync.submit<A>(_:)[1]);
  v0[15] = v11;
  type metadata accessor for INPlayVoicemailIntent( 0LL,  &lazy cache variable for type metadata for SAOnDeviceNotificationsSearchCompleted,  &OBJC_CLASS___SAOnDeviceNotificationsSearchCompleted_ptr);
  *uint64_t v11 = v0;
  v11[1] = CallNotificationContextProvider.submitNotificationsSearch(aceServiceInvoker:applicationId:);
  return AceServiceInvokerAsync.submit<A>(_:)(v2, v9, v12, v10);
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  void (*v25)(os_log_s *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50[2];
  Swift::String result = outlined bridged method (pb) of @objc SAOnDeviceNotificationsSearchCompleted.notifications.getter(*(void **)(v1 + 128));
  if (!result) {
    goto LABEL_50;
  }
  uint64_t v3 = result;

  os_log_type_t v49 = (void *)v1;
  uint64_t v44 = *(void *)(v1 + 136);
  v50[0] = (uint64_t)_swiftEmptyArrayStorage;
  NSString v4 = (unint64_t)v3 >> 62;
  if ((unint64_t)v3 >> 62)
  {
LABEL_23:
    if (v3 < 0) {
      uint64_t v0 = (os_log_s *)v3;
    }
    else {
      uint64_t v0 = (os_log_s *)(v3 & 0xFFFFFFFFFFFFFF8LL);
    }
    OUTLINED_FUNCTION_11(v3);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v0);
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_4;
    }
LABEL_27:
    uint64_t v29 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_28:
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v30 = OUTLINED_FUNCTION_15_1();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_23_6();
    uint64_t v31 = swift_bridgeObjectRetain();
    Logger.logObject.getter(v31);
    uint64_t v32 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_35_12(v32))
    {
      uint64_t v33 = v49 + 3;
      uint64_t v34 = v49 + 2;
      uint64_t v35 = OUTLINED_FUNCTION_7_0(22LL);
      *(_DWORD *)uint64_t v35 = 134218240;
      if (v4)
      {
        if (v3 >= 0) {
          v3 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        swift_bridgeObjectRetain();
        uint64_t v36 = _CocoaArrayWrapper.endIndex.getter(v3);
        OUTLINED_FUNCTION_39();
      }

      else
      {
        uint64_t v36 = *(void *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFF8LL));
      }

      OUTLINED_FUNCTION_39();
      *uint64_t v34 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, v33, v35 + 4);
      OUTLINED_FUNCTION_39();
      *(_WORD *)(v35 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
      uint64_t v37 = v29 & 0x4000000000000000LL;
      if ((v29 & 0x8000000000000000LL) != 0 || v37)
      {
        uint64_t v42 = OUTLINED_FUNCTION_124();
        NSString v4 = _CocoaArrayWrapper.endIndex.getter(v42);
        OUTLINED_FUNCTION_76();
      }

      else
      {
        NSString v4 = *(void *)(v29 + 16);
      }

      OUTLINED_FUNCTION_76();
      uint64_t v38 = v49;
      void v49[3] = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v33, v49 + 4, v35 + 14);
      OUTLINED_FUNCTION_76();
      _os_log_impl( &dword_0,  v0,  v32,  "#CallNotificationContextProvider search returned %ld notifications, and %ld after filtering",  (uint8_t *)v35,  0x16u);
      OUTLINED_FUNCTION_0_2(v35);
    }

    else
    {
      OUTLINED_FUNCTION_8_6();
      OUTLINED_FUNCTION_7_4(v3);

      uint64_t v37 = v29 & 0x4000000000000000LL;
      uint64_t v38 = v49;
    }

    OUTLINED_FUNCTION_124();
    if ((v29 & 0x8000000000000000LL) != 0 || (uint64_t v39 = v29, v37))
    {
      specialized _copyCollectionToContiguousArray<A>(_:)(v29);
      uint64_t v39 = v41;
      OUTLINED_FUNCTION_76();
    }

    v50[0] = v39;
    specialized MutableCollection<>.sort(by:)(v50);
    if (v44) {
      return swift_release(v50[0]);
    }
    OUTLINED_FUNCTION_16_21();
    OUTLINED_FUNCTION_76();
    uint64_t v40 = v50[0];
    swift_task_dealloc(v39);
    swift_task_dealloc(v4);
    swift_task_dealloc(0LL);
    return ((uint64_t (*)(uint64_t))v38[1])(v40);
  }

  uint64_t v5 = *(void *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_27;
  }
LABEL_4:
  uint64_t v43 = v4;
  uint64_t v6 = 0LL;
  NSString v4 = v49[11];
  uint64_t v7 = v3 & 0xC000000000000001LL;
  uint64_t v8 = v3 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v47 = v3;
  uint64_t v48 = v5;
  uint64_t v45 = v3 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v46 = v3 & 0xC000000000000001LL;
  while (1)
  {
    if (v7)
    {
      uint64_t v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v3);
    }

    else
    {
      if (v6 >= *(void *)(v8 + 16))
      {
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }

      uint64_t v9 = OUTLINED_FUNCTION_27_10(v3 + 8 * v6);
    }

    uint64_t v10 = v9;
    uint64_t v11 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      goto LABEL_22;
    }
    uint64_t v12 = outlined bridged method (pb) of @objc SANotificationObject.applicationId.getter(v9);
    OUTLINED_FUNCTION_34(v12, v13);
    if (!v0 || (uint64_t v14 = [v10 notificationId]) == 0)
    {

      goto LABEL_18;
    }

    static Date.now.getter();
    os_log_type_t v15 = [v10 date];
    if (!v15) {
      break;
    }
    uint64_t v18 = v15;
    uint64_t v19 = v49[12];
    uint64_t v21 = v49[9];
    uint64_t v20 = v49[10];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v21, v19, v20);
    __swift_storeEnumTagSinglePayload(v21, 0LL, 1LL, v20);
    Swift::String result = __swift_getEnumTagSinglePayload(v21, 1LL, v20);
    if ((_DWORD)result == 1) {
      goto LABEL_49;
    }
    uint64_t v0 = (os_log_s *)v49[13];
    uint64_t v23 = v49[9];
    uint64_t v22 = v49[10];
    uint64_t v24 = Date.timeIntervalSince(_:)(v23);
    uint64_t v25 = *(void (**)(os_log_s *, uint64_t))(v4 + 8);
    v25(v0, v22);
    uint64_t v26 = ((uint64_t (*)(uint64_t, uint64_t))v25)(v23, v22);
    if (v24 <= 30.0)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v26);
      uint64_t v27 = *(void *)(v50[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
      uint64_t v28 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v10);
      uint64_t v0 = (os_log_s *)v50;
      specialized ContiguousArray._endMutation()(v28);
    }

    else
    {
    }

    uint64_t v3 = v47;
    uint64_t v5 = v48;
    uint64_t v8 = v45;
    uint64_t v7 = v46;
LABEL_18:
    ++v6;
    if (v11 == v5)
    {
      uint64_t v29 = v50[0];
      NSString v4 = v43;
      goto LABEL_28;
    }
  }

  Swift::String result = OUTLINED_FUNCTION_29_1(v49[9], v16, v17, v49[10]);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_s *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  os_log_s *v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  double v33;
  void (*v34)(os_log_s *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54[2];
  uint64_t v51 = v0 + 4;
  if (one-time initialization token for siriPhone != -1) {
LABEL_44:
  }
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  id v2 = v0[17];
  uint64_t v50 = OUTLINED_FUNCTION_15_1();
  uint64_t v3 = __swift_project_value_buffer(v50, (uint64_t)static Logger.siriPhone);
  swift_errorRetain(v2);
  NSString v4 = swift_errorRetain(v2);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  uint64_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = OUTLINED_FUNCTION_29_5(v6);
  uint64_t v8 = v0[17];
  unint64_t v53 = v0;
  if (v7)
  {
    uint64_t v3 = (uint64_t)(v0 + 5);
    uint64_t v9 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v10 = OUTLINED_FUNCTION_7_0(32LL);
    v54[0] = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    v0[4] = v8;
    swift_errorRetain(v8);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(describing:)(v51, v11);
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v9 + 4);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_9_16();
    OUTLINED_FUNCTION_9_16();
    _os_log_impl( &dword_0,  v5,  (os_log_type_t)v1,  "#CallNotificationContextProvider encountered error submitting SANotificationsSearch: %s.",  v9,  0xCu);
    swift_arrayDestroy(v10, 1LL);
    OUTLINED_FUNCTION_0_2(v10);
    OUTLINED_FUNCTION_0_2((uint64_t)v9);

    OUTLINED_FUNCTION_9_16();
  }

  else
  {
    OUTLINED_FUNCTION_9_16();
    OUTLINED_FUNCTION_9_16();
    OUTLINED_FUNCTION_9_16();
  }

  uint64_t v14 = (os_log_s *)_swiftEmptyArrayStorage;
  v54[0] = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    else {
      uint64_t v47 = (void *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL);
    }
    OUTLINED_FUNCTION_11((uint64_t)_swiftEmptyArrayStorage);
    _CocoaArrayWrapper.endIndex.getter(v47);
    OUTLINED_FUNCTION_30_13();
  }

  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain();
  }

  os_log_type_t v15 = (unint64_t)_swiftEmptyArrayStorage;
  if (!v3)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    __swift_project_value_buffer(v50, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_23_6();
    uint64_t v38 = swift_bridgeObjectRetain();
    Logger.logObject.getter(v38);
    uint64_t v39 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_35_12(v39))
    {
      uint64_t v40 = OUTLINED_FUNCTION_7_0(22LL);
      *(_DWORD *)uint64_t v40 = 134218240;
      if ((unint64_t)_swiftEmptyArrayStorage >> 62)
      {
        else {
          uint64_t v43 = (void *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL);
        }
        swift_bridgeObjectRetain();
        uint64_t v41 = _CocoaArrayWrapper.endIndex.getter(v43);
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v41 = *(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8LL));
      }

      OUTLINED_FUNCTION_39();
      v0[2] = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v40 + 4);
      OUTLINED_FUNCTION_39();
      *(_WORD *)(v40 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
      uint64_t v42 = v15 & 0x4000000000000000LL;
      if ((v15 & 0x8000000000000000LL) != 0 || v42)
      {
        os_log_type_t v49 = OUTLINED_FUNCTION_124();
        uint64_t v44 = _CocoaArrayWrapper.endIndex.getter(v49);
        OUTLINED_FUNCTION_76();
      }

      else
      {
        uint64_t v44 = *(void *)(v15 + 16);
      }

      OUTLINED_FUNCTION_76();
      v0[3] = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v51, v40 + 14);
      OUTLINED_FUNCTION_76();
      OUTLINED_FUNCTION_12_35( &dword_0,  v14,  v39,  "#CallNotificationContextProvider search returned %ld notifications, and %ld after filtering");
      OUTLINED_FUNCTION_0_2(v40);

      uint64_t v0 = v53;
    }

    else
    {
      OUTLINED_FUNCTION_8_6();
      OUTLINED_FUNCTION_7_4((uint64_t)_swiftEmptyArrayStorage);

      uint64_t v42 = v15 & 0x4000000000000000LL;
    }

    OUTLINED_FUNCTION_124();
    if ((v15 & 0x8000000000000000LL) != 0 || (uint64_t v45 = v15, v42))
    {
      specialized _copyCollectionToContiguousArray<A>(_:)(v15);
      uint64_t v45 = v48;
      OUTLINED_FUNCTION_76();
    }

    v54[0] = v45;
    specialized MutableCollection<>.sort(by:)(v54);
    OUTLINED_FUNCTION_16_21();
    OUTLINED_FUNCTION_76();
    uint64_t v46 = v54[0];
    swift_task_dealloc(v45);
    swift_task_dealloc(v42);
    swift_task_dealloc(0LL);
    return ((uint64_t (*)(uint64_t))v0[1])(v46);
  }

  uint64_t v1 = 0LL;
  uint64_t v16 = v0[11];
  uint64_t v52 = v3;
  while (1)
  {
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001LL) != 0)
    {
      uint64_t v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v1, _swiftEmptyArrayStorage);
    }

    else
    {
      if (v1 >= *(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8LL)))
      {
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }

      uint64_t v17 = OUTLINED_FUNCTION_27_10((uint64_t)&_swiftEmptyArrayStorage[v1]);
    }

    uint64_t v18 = v17;
    uint64_t v19 = v1 + 1;
    if (__OFADD__(v1, 1LL)) {
      goto LABEL_43;
    }
    uint64_t v20 = outlined bridged method (pb) of @objc SANotificationObject.applicationId.getter(v17);
    OUTLINED_FUNCTION_34(v20, v21);
    if (!v14 || (uint64_t v22 = [v18 notificationId]) == 0)
    {

      goto LABEL_22;
    }

    static Date.now.getter();
    uint64_t v23 = [v18 date];
    if (!v23) {
      break;
    }
    uint64_t v26 = v23;
    uint64_t v27 = v53[12];
    uint64_t v28 = v53[9];
    uint64_t v29 = v53[10];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v0 = (uint64_t *)v16;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v28, v27, v29);
    __swift_storeEnumTagSinglePayload(v28, 0LL, 1LL, v29);
    Swift::String result = __swift_getEnumTagSinglePayload(v28, 1LL, v29);
    if ((_DWORD)result == 1) {
      goto LABEL_52;
    }
    uint64_t v14 = (os_log_s *)v53[13];
    uint64_t v32 = v53[9];
    uint64_t v31 = v53[10];
    uint64_t v33 = Date.timeIntervalSince(_:)(v32);
    uint64_t v34 = *(void (**)(os_log_s *, uint64_t))(v16 + 8);
    v34(v14, v31);
    uint64_t v35 = ((uint64_t (*)(uint64_t, uint64_t))v34)(v32, v31);
    if (v33 <= 30.0)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v35);
      uint64_t v36 = *(void *)(v54[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v36);
      uint64_t v37 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v18);
      uint64_t v14 = (os_log_s *)v54;
      specialized ContiguousArray._endMutation()(v37);
    }

    else
    {
    }

    uint64_t v3 = v52;
LABEL_22:
    ++v1;
    if (v19 == v3)
    {
      uint64_t v0 = v53;
      os_log_type_t v15 = v54[0];
      goto LABEL_25;
    }
  }

  Swift::String result = OUTLINED_FUNCTION_29_1(v53[9], v24, v25, v53[10]);
LABEL_52:
  __break(1u);
  return result;
}

uint64_t CallNotificationContextProvider.submitNotificationsSearch(aceServiceInvoker:applicationId:)( uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 120);
  *(void *)(v3 + outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 - 168), v0 - 128) = a1;
  *(void *)(v3 + 136) = v1;
  swift_task_dealloc(v4);
  return OUTLINED_FUNCTION_5_7();
}

uint64_t CallNotificationContextProvider.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DictionaryBackedCache<String, CallNotificationContextProvider.CallNotification>);
  uint64_t v3 = OUTLINED_FUNCTION_28_15(v2);
  *(void *)(v1 + ++*(void *)(v0 + 16) = OUTLINED_FUNCTION_26_20( v3,  (uint64_t)closure #1 in default argument 2 of DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:));
  return v1;
}

uint64_t CallNotificationContextProvider.init()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DictionaryBackedCache<String, CallNotificationContextProvider.CallNotification>);
  uint64_t v2 = OUTLINED_FUNCTION_28_15(v1);
  *(void *)(v0 + ++*(void *)(v0 + 16) = OUTLINED_FUNCTION_26_20( v2,  (uint64_t)closure #1 in default argument 2 of DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:));
  return v0;
}

uint64_t protocol witness for CallNotificationContextProviding.update(aceServiceInvoker:refId:applicationId:) in conformance CallNotificationContextProvider( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *(int **)(**(void **)v5 + 112LL);
  os_log_type_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  uint64_t v13 = (void *)swift_task_alloc(v12[1]);
  *(void *)(v6 + ++*(void *)(v0 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = protocol witness for Action.run() in conformance PlayVoiceMailAction;
  return v15(a1, a2, a3, a4, a5);
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v169 = *(void *)(v3 - 8);
  __chkstk_darwin();
  v170 = (char *)&v150 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  __chkstk_darwin();
  v165 = (char *)&v150 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v168 = (char *)&v150 - v6;
  __chkstk_darwin();
  uint64_t v158 = (uint64_t)&v150 - v7;
  __chkstk_darwin();
  uint64_t v162 = (uint64_t)&v150 - v8;
  __chkstk_darwin();
  uint64_t v10 = (char *)&v150 - v9;
  __chkstk_darwin();
  uint64_t v156 = (uint64_t)&v150 - v11;
  Swift::Int v12 = a1[1];
  Swift::Int v13 = _minimumMergeRunLength(_:)(v12);
  if (v13 < v12)
  {
    Swift::Int v14 = v13;
    specialized static Array._allocateUninitialized(_:)(v12 / 2);
    v163 = v15;
    uint64_t v171 = v16;
    uint64_t v160 = v12;
    uint64_t v152 = a1;
    if (v12 <= 0) {
      goto LABEL_106;
    }
    uint64_t v154 = v14;
    __int128 v155 = v10;
    uint64_t v17 = 0LL;
    uint64_t v18 = *a1;
    uint64_t v151 = *a1 - 8;
    uint64_t v19 = (char *)_swiftEmptyArrayStorage;
    uint64_t v166 = v18;
    while (1)
    {
      uint64_t v20 = v17 + 1;
      uint64_t v159 = v17;
      if (v17 + 1 < v12)
      {
        uint64_t v21 = *(void **)(v18 + 8 * v17);
        id v22 = *(id *)(v18 + 8 * v20);
        id v1 = v21;
        id v23 = [v22 date];
        if (!v23) {
          goto LABEL_160;
        }
        uint64_t v24 = v23;
        uint64_t v25 = v170;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v26 = *(void (**)(uint64_t, char *, uint64_t))(v169 + 32);
        uint64_t v27 = v156;
        v26(v156, v25, v3);
        __swift_storeEnumTagSinglePayload(v27, 0LL, 1LL, v3);
        if (__swift_getEnumTagSinglePayload(v27, 1LL, v3) == 1)
        {
LABEL_161:
          __break(1u);
LABEL_162:
          __swift_storeEnumTagSinglePayload((uint64_t)v155, 1LL, 1LL, v3);
LABEL_163:
          __break(1u);
          return;
        }

        id v28 = [v1 date];
        if (!v28) {
          goto LABEL_162;
        }
        uint64_t v29 = v28;
        uint64_t v30 = v170;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v31 = (uint64_t)v155;
        v26((uint64_t)v155, v30, v3);
        __swift_storeEnumTagSinglePayload(v31, 0LL, 1LL, v3);
        uint64_t v32 = v156;
        LODWORD(v167) = static Date.< infix(_:_:)(v156, v31);
        uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v169 + 8);
        v33(v31, v3);
        v33(v32, v3);

        uint64_t v20 = v17 + 2;
        if (v17 + 2 >= v160)
        {
          Swift::Int v12 = v160;
          uint64_t v18 = v166;
        }

        else
        {
          __int128 v153 = v19;
          uint64_t v34 = v17;
          uint64_t v18 = v166;
          while (1)
          {
            uint64_t v35 = v18 + 8 * v34;
            uint64_t v36 = *(void **)(v35 + 8);
            id v37 = *(id *)(v35 + 16);
            id v38 = v36;
            id v39 = [v37 date];
            if (!v39) {
              goto LABEL_154;
            }
            uint64_t v40 = v39;
            uint64_t v41 = v170;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v42 = v162;
            v26(v162, v41, v3);
            __swift_storeEnumTagSinglePayload(v42, 0LL, 1LL, v3);
            id v43 = [v38 date];
            if (!v43) {
              goto LABEL_156;
            }
            uint64_t v44 = v43;
            uint64_t v45 = v170;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v46 = v158;
            v26(v158, v45, v3);
            __swift_storeEnumTagSinglePayload(v46, 0LL, 1LL, v3);
            uint64_t v47 = v162;
            int v48 = static Date.< infix(_:_:)(v162, v46);
            uint64_t v49 = v46;
            int v50 = v48;
            v33(v49, v3);
            v33(v47, v3);

            uint64_t v51 = v34 + 3;
            ++v34;
            uint64_t v18 = v166;
            if (v51 >= v160)
            {
              Swift::Int v12 = v160;
              uint64_t v20 = v160;
              uint64_t v19 = v153;
              goto LABEL_20;
            }
          }

          uint64_t v20 = v34 + 2;
          Swift::Int v12 = v160;
          uint64_t v19 = v153;
          uint64_t v18 = v166;
LABEL_20:
          uint64_t v17 = v159;
        }

        if ((v167 & 1) != 0)
        {
          if (v20 < v17) {
            goto LABEL_144;
          }
          if (v17 < v20)
          {
            uint64_t v52 = (uint64_t *)(v151 + 8 * v20);
            uint64_t v53 = v20;
            uint64_t v54 = v17;
            uint64_t v55 = (uint64_t *)(v18 + 8 * v17);
            do
            {
              if (v54 != --v53)
              {
                if (!v18) {
                  goto LABEL_158;
                }
                uint64_t v56 = *v55;
                *uint64_t v55 = *v52;
                *uint64_t v52 = v56;
              }

              ++v54;
              --v52;
              ++v55;
            }

            while (v54 < v53);
          }
        }
      }

      if (v20 < v12)
      {
        if (__OFSUB__(v20, v17)) {
          goto LABEL_142;
        }
        if (v20 - v17 < v154)
        {
          if (__OFADD__(v17, v154)) {
            goto LABEL_145;
          }
          if (v17 + v154 >= v12) {
            Swift::Int v57 = v12;
          }
          else {
            Swift::Int v57 = v17 + v154;
          }
          if (v57 < v17)
          {
LABEL_146:
            __break(1u);
            goto LABEL_147;
          }

          if (v20 != v57)
          {
            uint64_t v167 = v3;
            __int128 v153 = v19;
            uint64_t v58 = v151 + 8 * v20;
            uint64_t v157 = v57;
LABEL_39:
            uint64_t v59 = *(void **)(v18 + 8 * v20);
            uint64_t v60 = v17;
            uint64_t v161 = v58;
            id v1 = v165;
            while (1)
            {
              uint64_t v3 = v20;
              uint64_t v61 = *(void **)v58;
              id v62 = v59;
              id v63 = v61;
              id v64 = [v62 date];
              if (!v64) {
                goto LABEL_148;
              }
              uint64_t v65 = v64;
              uint64_t v66 = v170;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v67 = (uint64_t)v168;
              uint64_t v68 = *(void (**)(char *, char *, uint64_t))(v169 + 32);
              uint64_t v69 = v66;
              uint64_t v70 = v167;
              v68(v168, v69, v167);
              __swift_storeEnumTagSinglePayload(v67, 0LL, 1LL, v70);
              id v71 = [v63 date];
              if (!v71) {
                goto LABEL_150;
              }
              uint64_t v72 = v71;
              uint64_t v73 = v170;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              id v74 = v1;
              uint64_t v75 = v73;
              uint64_t v76 = v167;
              v68((char *)v1, v75, v167);
              __swift_storeEnumTagSinglePayload((uint64_t)v1, 0LL, 1LL, v76);
              id v1 = v168;
              char v77 = static Date.< infix(_:_:)(v168, v74);
              id v78 = v74;
              char v79 = v77;
              uint64_t v80 = *(void (**)(id, uint64_t))(v169 + 8);
              v80(v78, v76);
              v80(v1, v76);

              if ((v79 & 1) == 0)
              {
                uint64_t v18 = v166;
                uint64_t v20 = v3;
LABEL_49:
                ++v20;
                uint64_t v58 = v161 + 8;
                uint64_t v17 = v159;
                if (v20 == v157)
                {
                  uint64_t v20 = v157;
                  uint64_t v19 = v153;
                  uint64_t v3 = v167;
                  goto LABEL_51;
                }

                goto LABEL_39;
              }

              uint64_t v18 = v166;
              if (!v166) {
                goto LABEL_152;
              }
              uint64_t v20 = v3;
              uint64_t v81 = *(void **)v58;
              uint64_t v59 = *(void **)(v58 + 8);
              *(void *)uint64_t v58 = v59;
              *(void *)(v58 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v81;
              v58 -= 8LL;
              ++v60;
              id v1 = v165;
              if (v3 == v60) {
                goto LABEL_49;
              }
            }

{
  Swift::Int v2;
  Swift::Int v3;
  Swift::Int v4;
  void **v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  char *v9;
  __objc2_prop_list **p_base_props;
  __objc2_prop_list **v11;
  Swift::Int v12;
  Swift::Int v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  Swift::Int v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  Swift::Int v33;
  uint64_t *v34;
  Swift::Int v35;
  Swift::Int v36;
  uint64_t *v37;
  uint64_t v38;
  Swift::Int v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  void *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  char v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  Swift::Int v123;
  char *v124;
  char *v125;
  Swift::Int v126;
  Swift::Int v127;
  Swift::Int v128;
  id v129;
  uint64_t v130;
  void **v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v2 = a1[1];
  uint64_t v3 = _minimumMergeRunLength(_:)(v2);
  if (v3 >= v2)
  {
    if (v2 < 0) {
      goto LABEL_139;
    }
    if (v2) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0LL, v2, 1LL, a1);
    }
  }

  else
  {
    uint64_t v4 = v3;
    specialized static Array._allocateUninitialized(_:)(v2 / 2);
    uint64_t v131 = v5;
    uint64_t v134 = v6;
    uint64_t v128 = v2;
    uint64_t v122 = a1;
    if (v2 > 0)
    {
      uint64_t v123 = v4;
      uint64_t v7 = 0LL;
      uint64_t v8 = *a1;
      uint64_t v121 = *a1 - 8;
      uint64_t v9 = (char *)_swiftEmptyArrayStorage;
      p_base_props = &CameraControlFlow.base_props;
      uint64_t v11 = &CameraControlFlow.base_props;
      Swift::Int v12 = v2;
      uint64_t v133 = v8;
      while (1)
      {
        Swift::Int v13 = v7++;
        uint64_t v127 = v13;
        if (v7 < v12)
        {
          uint64_t v124 = v9;
          Swift::Int v14 = *(void **)(v8 + 8 * v13);
          os_log_type_t v15 = *(id *)(v8 + 8 * v7);
          uint64_t v16 = v14;
          uint64_t v17 = objc_msgSend(v15, (SEL)p_base_props[417]);
          if (!v17) {
            goto LABEL_153;
          }
          uint64_t v18 = v17;
          uint64_t v19 = [v17 (SEL)v11[389]];

          uint64_t v20 = objc_msgSend(v16, (SEL)p_base_props[417]);
          if (!v20) {
            goto LABEL_154;
          }
          uint64_t v21 = v20;
          unint64_t v129 = [v20 (SEL)v11[389]];

          uint64_t v7 = v13 + 2;
          if (v13 + 2 >= v128)
          {
            uint64_t v8 = v133;
          }

          else
          {
            id v22 = v13;
            uint64_t v8 = v133;
            while (1)
            {
              id v23 = v8 + 8 * v22;
              uint64_t v24 = *(void **)(v23 + 8);
              uint64_t v25 = *(id *)(v23 + 16);
              uint64_t v26 = v24;
              uint64_t v27 = [v25 rank];
              if (!v27) {
                goto LABEL_149;
              }
              id v28 = v27;
              uint64_t v29 = [v27 (SEL)v11[389]];

              uint64_t v30 = [v26 rank];
              if (!v30) {
                goto LABEL_150;
              }
              uint64_t v31 = v30;
              uint64_t v32 = [v30 (SEL)v11[389]];

              uint64_t v33 = v22 + 3;
              ++v22;
              uint64_t v8 = v133;
              if (v33 >= v128)
              {
                uint64_t v7 = v128;
                goto LABEL_16;
              }
            }

            uint64_t v7 = v22 + 2;
            uint64_t v8 = v133;
          }

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  char *v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  int v35;
  Swift::Int v36;
  uint64_t *v37;
  Swift::Int v38;
  Swift::Int v39;
  uint64_t *v40;
  uint64_t v41;
  Swift::Int v42;
  void *v43;
  uint64_t v44;
  Swift::Int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  char v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t *v121;
  Swift::Int v122;
  Swift::Int v123;
  Swift::Int v124;
  Swift::Int v125;
  void *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v3 = a1[1];
  uint64_t v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0LL, v3, 1LL, a1);
      }
      return;
    }

    goto LABEL_175;
  }

  uint64_t v5 = v4;
  specialized static Array._allocateUninitialized(_:)(v3 / 2);
  uint64_t v127 = v6;
  unint64_t v129 = v7;
  uint64_t v121 = a1;
  if (v3 <= 0)
  {
LABEL_139:
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
    uint64_t v60 = _swiftEmptyArrayStorage[2];
LABEL_140:
    if (v60 < 2)
    {
LABEL_151:
      uint64_t v109 = swift_bridgeObjectRelease();
      if (v3 >= -1) {
        goto LABEL_152;
      }
      goto LABEL_179;
    }

    uint64_t v113 = *v121;
    while (1)
    {
      uint64_t v114 = v60 - 2;
      if (v60 < 2) {
        break;
      }
      if (!v113) {
        goto LABEL_183;
      }
      uint64_t v115 = *(void *)&v10[16 * v114 + 32];
      uint64_t v116 = *(void *)&v10[16 * v60 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)( (char *)(v113 + 8 * v115),  (char *)(v113 + 8LL * *(void *)&v10[16 * v60 + 16]),  v113 + 8 * v116,  v127);
      if (v1) {
        goto LABEL_137;
      }
      if (v116 < v115) {
        goto LABEL_170;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
        uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
      }
      if (v114 >= *((void *)v10 + 2)) {
        goto LABEL_171;
      }
      BOOL v117 = &v10[16 * v114 + 32];
      *(void *)BOOL v117 = v115;
      *((void *)v117 + 1) = v116;
      uint64_t v118 = *((void *)v10 + 2);
      if (v60 > v118) {
        goto LABEL_172;
      }
      memmove(&v10[16 * v60 + 16], &v10[16 * v60 + 32], 16 * (v118 - v60));
      *((void *)v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v118 - 1;
      uint64_t v60 = v118 - 1;
      if (v118 <= 2) {
        goto LABEL_151;
      }
    }

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _UNKNOWN **v11;
  _UNKNOWN **v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  Swift::Int v35;
  Swift::Int v36;
  uint64_t *v37;
  uint64_t v38;
  Swift::Int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  char v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  Swift::Int v120;
  unint64_t v121;
  char *v122;
  unint64_t v123;
  Swift::Int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v3 = a1[1];
  uint64_t v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0) {
      goto LABEL_158;
    }
    if (v3) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0LL, v3, 1LL, a1);
    }
    return;
  }

  uint64_t v5 = v4;
  specialized static Array._allocateUninitialized(_:)(v3 / 2);
  uint64_t v127 = v3;
  uint64_t v128 = v6;
  unint64_t v129 = v7;
  uint64_t v119 = a1;
  if (v3 <= 0) {
    goto LABEL_122;
  }
  uint64_t v120 = v5;
  uint64_t v8 = 0LL;
  uint64_t v9 = *a1;
  uint64_t v118 = *a1 - 8;
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  uint64_t v11 = &_sScP7utilityScPvgZ_ptr;
  Swift::Int v12 = &_sScP7utilityScPvgZ_ptr;
  while (2)
  {
    Swift::Int v13 = v8 + 1;
    uint64_t v125 = v8;
    if (v8 + 1 >= v3) {
      goto LABEL_40;
    }
    Swift::Int v14 = *(void *)(v9 + 8 * v13);
    os_log_type_t v15 = *(void *)(v9 + 8 * v8);
    uint64_t v16 = objc_opt_self(v11[422]);
    if (swift_dynamicCastObjCClass(v14, v16))
    {
      uint64_t v123 = 0LL;
    }

    else
    {
      uint64_t v17 = objc_opt_self(v12[440]);
      uint64_t v18 = swift_dynamicCastObjCClass(v14, v17);
      uint64_t v19 = 1LL;
      if (!v18) {
        uint64_t v19 = 2LL;
      }
      uint64_t v123 = v19;
    }

    uint64_t v20 = objc_opt_self(v11[422]);
    if (swift_dynamicCastObjCClass(v15, v20))
    {
      uint64_t v121 = 0LL;
    }

    else
    {
      uint64_t v21 = objc_opt_self(v12[440]);
      id v22 = swift_dynamicCastObjCClass(v15, v21);
      id v23 = 1LL;
      if (!v22) {
        id v23 = 2LL;
      }
      uint64_t v121 = v23;
    }

    Swift::Int v13 = v8 + 2;
    if (v8 + 2 >= v3) {
      goto LABEL_32;
    }
    while (1)
    {
      uint64_t v24 = v13;
      uint64_t v25 = v9 + 8 * v8;
      uint64_t v26 = *(void *)(v25 + 8);
      uint64_t v27 = *(void *)(v25 + 16);
      id v28 = objc_opt_self(v11[422]);
      if (swift_dynamicCastObjCClass(v27, v28))
      {
        uint64_t v29 = 0LL;
      }

      else
      {
        uint64_t v30 = objc_opt_self(v12[440]);
        if (swift_dynamicCastObjCClass(v27, v30)) {
          uint64_t v29 = 1LL;
        }
        else {
          uint64_t v29 = 2LL;
        }
      }

      uint64_t v31 = objc_opt_self(v11[422]);
      if (swift_dynamicCastObjCClass(v26, v31))
      {
        Swift::Int v13 = v24;
        if (v123 < v121)
        {
          Swift::Int v13 = v8 + 2;
          uint64_t v8 = v125;
          uint64_t v3 = v127;
          goto LABEL_33;
        }

        goto LABEL_28;
      }

      uint64_t v32 = objc_opt_self(v12[440]);
      if (swift_dynamicCastObjCClass(v26, v32)) {
        break;
      }
      Swift::Int v13 = v24;
      if (v123 < v121 == v29 > 1) {
        goto LABEL_30;
      }
LABEL_28:
      ++v13;
      uint64_t v33 = v8 + 3;
      ++v8;
      if (v33 >= v127)
      {
        uint64_t v3 = v127;
        Swift::Int v13 = v127;
        goto LABEL_31;
      }
    }

    Swift::Int v13 = v24;
    if (v123 < v121 != (v29 != 0)) {
      goto LABEL_28;
    }
    Swift::Int v13 = v8 + 2;
LABEL_30:
    uint64_t v3 = v127;
LABEL_31:
    uint64_t v8 = v125;
LABEL_32:
    if (v123 < v121)
    {
LABEL_33:
      if (v13 < v8) {
        goto LABEL_159;
      }
      if (v8 < v13)
      {
        uint64_t v34 = (uint64_t *)(v118 + 8 * v13);
        uint64_t v35 = v13;
        uint64_t v36 = v8;
        id v37 = (uint64_t *)(v9 + 8 * v8);
        do
        {
          if (v36 != --v35)
          {
            if (!v9) {
              goto LABEL_165;
            }
            id v38 = *v37;
            *id v37 = *v34;
            *uint64_t v34 = v38;
          }

          ++v36;
          --v34;
          ++v37;
        }

        while (v36 < v35);
      }
    }

LABEL_149:
            __break(1u);
LABEL_150:
            __swift_storeEnumTagSinglePayload((uint64_t)v1, 1LL, 1LL, v167);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __swift_storeEnumTagSinglePayload(v162, 1LL, 1LL, v3);
LABEL_155:
            __break(1u);
LABEL_156:
            __swift_storeEnumTagSinglePayload(v158, 1LL, 1LL, v3);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __swift_storeEnumTagSinglePayload(v156, 1LL, 1LL, v3);
            goto LABEL_161;
          }
        }
      }

      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      swift_bridgeObjectRelease_n(v3, 3LL);
      __break(1u);
LABEL_162:
      swift_bridgeObjectRelease_n(v139, 3LL);
      __break(1u);
LABEL_163:
      swift_bridgeObjectRelease_n(v3, 3LL);
      __break(1u);
LABEL_164:
      Swift::String result = swift_bridgeObjectRelease_n(v139, 3LL);
      __break(1u);
      return result;
    }

            __break(1u);
LABEL_150:
            OUTLINED_FUNCTION_8_1();
            uint64_t v119 = OUTLINED_FUNCTION_61_1();
            if (!v119) {
              goto LABEL_151;
            }
LABEL_122:
            id v22 = v26 & 0xC000000000000001LL;
            uint64_t v20 = 4LL;
            while (1)
            {
              if (v22)
              {
                uint64_t v120 = OUTLINED_FUNCTION_5_49(v20 - 4);
                Swift::Int v12 = v120;
              }

              else
              {
                uint64_t v120 = OUTLINED_FUNCTION_136_7();
              }

              uint64_t v121 = v20 - 3;
              if (__OFADD__(v20 - 4, 1LL))
              {
                __break(1u);
                goto LABEL_147;
              }

              uint64_t v122 = dispatch thunk of UsoEntity_common_Person.specifyingContactAddress.getter(v120);
              if (v122
                && (dispatch thunk of UsoEntity_common_ContactAddress.value.getter(v122),
                    uint64_t v124 = v123,
                    OUTLINED_FUNCTION_38_1(),
                    uint64_t v125 = OUTLINED_FUNCTION_13_1(),
                    v124))
              {
                uint64_t v126 = dispatch thunk of UsoEntity_common_Person.specifyingContactAddress.getter(v125);
                if (v126)
                {
                  uint64_t v127 = CodeGenBase.entity.getter(v126);
                  OUTLINED_FUNCTION_77_0();
                }

                else
                {
                  uint64_t v127 = 0LL;
                }

                uint64_t v128 = type metadata accessor for UsoEntity_common_PostalAddress(0LL);
                static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(&v170, v127, v128, v128);
                OUTLINED_FUNCTION_38_1();
                unint64_t v129 = v170;
                OUTLINED_FUNCTION_76();
                OUTLINED_FUNCTION_38_1();
                if (!v129)
                {
                  OUTLINED_FUNCTION_7_4(v26);
                  if (one-time initialization token for siriPhone != -1) {
                    swift_once( &one-time initialization token for siriPhone,  one-time initialization function for siriPhone);
                  }
                  uint64_t v131 = OUTLINED_FUNCTION_15_1();
                  OUTLINED_FUNCTION_12_1(v131, (uint64_t)static Logger.siriPhone);
                  uint64_t v132 = OUTLINED_FUNCTION_41();
                  OUTLINED_FUNCTION_22_54(v132);
                  OUTLINED_FUNCTION_5_97();
                  if (v133)
                  {
                    BOOL v110 = OUTLINED_FUNCTION_7_0(12LL);
                    uint64_t v111 = OUTLINED_FUNCTION_7_0(32LL);
                    v172[0] = v111;
                    OUTLINED_FUNCTION_144_7(4.8149e-34);
                    if (one-time initialization token for logPrefix != -1) {
                      swift_once( &one-time initialization token for logPrefix,  one-time initialization function for logPrefix);
                    }
                    v170 = 0LL;
                    v171[0] = 0xE000000000000000LL;
                    OUTLINED_FUNCTION_36();
                    OUTLINED_FUNCTION_7_100((uint64_t)"isCallToOffDeviceContactEntity(useEntitySpans:referenceResolver:)");
                    OUTLINED_FUNCTION_70_2();
                    uint64_t v134 = OUTLINED_FUNCTION_37_39();
                    OUTLINED_FUNCTION_32_48(v134);
                    OUTLINED_FUNCTION_62();
                    uint64_t v114 = v132;
                    uint64_t v115 = "%s returning false. Found common_Person with common_ContactAddress value that is NOT a common_PostalAddress";
LABEL_142:
                    OUTLINED_FUNCTION_115_9(&dword_0, v113, v114, v115);
                    OUTLINED_FUNCTION_141_7();
                    OUTLINED_FUNCTION_0_2(v111);
                    OUTLINED_FUNCTION_0_2(v110);
                    OUTLINED_FUNCTION_12_83();

                    uint64_t v18 = v145;
                    OUTLINED_FUNCTION_5_97();
                    goto LABEL_22;
                  }

LABEL_51:
      if (v20 < v17) {
        goto LABEL_141;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
      uint64_t v167 = v20;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v19 + 2) + 1LL,  1,  v19);
      }
      unint64_t v84 = *((void *)v19 + 2);
      unint64_t v83 = *((void *)v19 + 3);
      unint64_t v85 = v84 + 1;
      uint64_t v18 = v166;
      if (v84 >= v83 >> 1)
      {
        uint64_t v136 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v83 > 1),  v84 + 1,  1,  v19);
        uint64_t v18 = v166;
        uint64_t v19 = v136;
      }

      *((void *)v19 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v85;
      uint64_t v86 = v19 + 32;
      uint64_t v87 = (uint64_t *)&v19[16 * v84 + 32];
      uint64_t v88 = v167;
      *uint64_t v87 = v17;
      v87[1] = v88;
      if (v84) {
        break;
      }
      unint64_t v85 = 1LL;
LABEL_99:
      Swift::Int v12 = v160;
      uint64_t v17 = v167;
      if (v167 >= v160) {
        goto LABEL_107;
      }
    }

    while (1)
    {
      unint64_t v89 = v85 - 1;
      if (v85 >= 4)
      {
        uint64_t v94 = &v86[16 * v85];
        uint64_t v95 = *((void *)v94 - 8);
        uint64_t v96 = *((void *)v94 - 7);
        BOOL v100 = __OFSUB__(v96, v95);
        uint64_t v97 = v96 - v95;
        if (v100) {
          goto LABEL_126;
        }
        uint64_t v99 = *((void *)v94 - 6);
        uint64_t v98 = *((void *)v94 - 5);
        BOOL v100 = __OFSUB__(v98, v99);
        uint64_t v92 = v98 - v99;
        char v93 = v100;
        if (v100) {
          goto LABEL_127;
        }
        unint64_t v101 = v85 - 2;
        uint64_t v102 = &v86[16 * v85 - 32];
        uint64_t v104 = *(void *)v102;
        uint64_t v103 = *((void *)v102 + 1);
        BOOL v100 = __OFSUB__(v103, v104);
        uint64_t v105 = v103 - v104;
        if (v100) {
          goto LABEL_128;
        }
        BOOL v100 = __OFADD__(v92, v105);
        uint64_t v106 = v92 + v105;
        if (v100) {
          goto LABEL_130;
        }
        if (v106 >= v97)
        {
          uint64_t v124 = &v86[16 * v89];
          uint64_t v126 = *(void *)v124;
          uint64_t v125 = *((void *)v124 + 1);
          BOOL v100 = __OFSUB__(v125, v126);
          uint64_t v127 = v125 - v126;
          if (v100) {
            goto LABEL_136;
          }
          BOOL v117 = v92 < v127;
          goto LABEL_88;
        }
      }

      else
      {
        if (v85 != 3)
        {
          uint64_t v118 = *((void *)v19 + 4);
          uint64_t v119 = *((void *)v19 + 5);
          BOOL v100 = __OFSUB__(v119, v118);
          uint64_t v111 = v119 - v118;
          char v112 = v100;
          goto LABEL_82;
        }

        uint64_t v91 = *((void *)v19 + 4);
        uint64_t v90 = *((void *)v19 + 5);
        BOOL v100 = __OFSUB__(v90, v91);
        uint64_t v92 = v90 - v91;
        char v93 = v100;
      }

      if ((v93 & 1) != 0) {
        goto LABEL_129;
      }
      unint64_t v101 = v85 - 2;
      uint64_t v107 = &v86[16 * v85 - 32];
      uint64_t v109 = *(void *)v107;
      uint64_t v108 = *((void *)v107 + 1);
      BOOL v110 = __OFSUB__(v108, v109);
      uint64_t v111 = v108 - v109;
      char v112 = v110;
      if (v110) {
        goto LABEL_131;
      }
      uint64_t v113 = &v86[16 * v89];
      uint64_t v115 = *(void *)v113;
      uint64_t v114 = *((void *)v113 + 1);
      BOOL v100 = __OFSUB__(v114, v115);
      uint64_t v116 = v114 - v115;
      if (v100) {
        goto LABEL_133;
      }
      if (__OFADD__(v111, v116)) {
        goto LABEL_135;
      }
      if (v111 + v116 >= v92)
      {
        BOOL v117 = v92 < v116;
LABEL_88:
        if (v117) {
          unint64_t v89 = v101;
        }
        goto LABEL_90;
      }

  if ((_DWORD)v109) {
    goto LABEL_52;
  }
LABEL_47:
  if (v50) {
LABEL_48:
  }
    (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v46 + v49[16], v106);
LABEL_49:
  swift_bridgeObjectRelease();
LABEL_50:
  OUTLINED_FUNCTION_7_1();
}

LABEL_82:
      if ((v112 & 1) != 0) {
        goto LABEL_132;
      }
      uint64_t v120 = &v86[16 * v89];
      uint64_t v122 = *(void *)v120;
      uint64_t v121 = *((void *)v120 + 1);
      BOOL v100 = __OFSUB__(v121, v122);
      uint64_t v123 = v121 - v122;
      if (v100) {
        goto LABEL_134;
      }
      if (v123 < v111) {
        goto LABEL_99;
      }
LABEL_90:
      uint64_t v128 = v19;
      unint64_t v129 = v89 - 1;
      if (v89 - 1 >= v85)
      {
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
        goto LABEL_137;
      }

      if (!v18) {
        goto LABEL_153;
      }
      uint64_t v130 = &v86[16 * v129];
      uint64_t v131 = *(void *)v130;
      id v1 = (id)v89;
      uint64_t v132 = &v86[16 * v89];
      uint64_t v133 = *((void *)v132 + 1);
      uint64_t v134 = v164;
      specialized _merge<A>(low:mid:high:buffer:by:)( (id *)(v18 + 8LL * *(void *)v130),  (id *)(v18 + 8LL * *(void *)v132),  (id *)(v18 + 8 * v133),  v163);
      uint64_t v164 = v134;
      if (v134)
      {
LABEL_104:
        uint64_t v137 = swift_bridgeObjectRelease();
        if (v160 >= -1) {
          goto LABEL_121;
        }
        __break(1u);
LABEL_106:
        uint64_t v19 = (char *)_swiftEmptyArrayStorage;
        unint64_t v85 = _swiftEmptyArrayStorage[2];
LABEL_107:
        if (v85 >= 2)
        {
          uint64_t v141 = *v152;
          uint64_t v142 = v164;
          while (1)
          {
            unint64_t v143 = v85 - 2;
            if (v85 < 2) {
              break;
            }
            if (!v141) {
              goto LABEL_159;
            }
            uint64_t v3 = v85 - 1;
            uint64_t v144 = v19;
            uint64_t v145 = v19 + 32;
            uint64_t v146 = *(void *)&v19[16 * v143 + 32];
            uint64_t v147 = *(void *)&v19[16 * v85 + 24];
            specialized _merge<A>(low:mid:high:buffer:by:)( (id *)(v141 + 8 * v146),  (id *)(v141 + 8LL * *(void *)&v145[16 * v85 - 16]),  (id *)(v141 + 8 * v147),  v163);
            if (v142) {
              goto LABEL_104;
            }
            if (v147 < v146) {
              goto LABEL_138;
            }
            if ((swift_isUniquelyReferenced_nonNull_native(v144) & 1) == 0) {
              uint64_t v144 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v144);
            }
            if (v143 >= *((void *)v144 + 2)) {
              goto LABEL_139;
            }
            __int128 v148 = &v144[16 * v143 + 32];
            *(void *)__int128 v148 = v146;
            *((void *)v148 + 1) = v147;
            unint64_t v149 = *((void *)v144 + 2);
            if (v85 > v149) {
              goto LABEL_140;
            }
            uint64_t v19 = v144;
            memmove(&v144[16 * v3 + 32], &v144[16 * v85 + 32], 16 * (v149 - v85));
            *((void *)v144 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v149 - 1;
            unint64_t v85 = v149 - 1;
            if (v149 <= 2) {
              goto LABEL_120;
            }
          }

    __break(1u);
    goto LABEL_83;
  }

  id v38 = *(void *)((char *)&dword_10 + (v104 & 0xFFFFFFFFFFFFF8LL));
  uint64_t v11 = v38;
  if (v38) {
    goto LABEL_73;
  }
LABEL_78:
  swift_bridgeObjectRelease();
  uint64_t v94 = 0LL;
  uint64_t v96 = 0LL;
  return ((uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))v74[1])(_swiftEmptyArrayStorage, v11, v94, v96);
}

    BOOL v100 = OUTLINED_FUNCTION_26_0();
    uint64_t v99 = v141;
    OUTLINED_FUNCTION_29_1(v141, v101, v102, v100);
    goto LABEL_83;
  }

  uint64_t v91 = v154;
  uint64_t v92 = v155;
  __swift_project_boxed_opaque_existential_1(v153, v154);
  dispatch thunk of DeviceState.interactionType.getter(v91, v92);
  (*(void (**)(uint64_t, void))(v144 + 104))(v143, enum case for InteractionType.dialogDriven(_:));
  LODWORD(v140) = specialized == infix<A>(_:_:)(v142, v143);
  char v93 = *(void (**)())(v144 + 8);
  v93();
  ((void (*)(uint64_t))v93)(v142);
  OUTLINED_FUNCTION_196_7();
  if ((v140 & 1) == 0) {
    goto LABEL_71;
  }
  OUTLINED_FUNCTION_39();
  id v38 = *(void *)(v146 + 40);
  v152[5] = _swiftEmptyArrayStorage;
  if (v54)
  {
    OUTLINED_FUNCTION_20_14();
    OUTLINED_FUNCTION_148_11((uint64_t)&a17);
    id v28 = (const char *)OUTLINED_FUNCTION_61_1();
  }

  else
  {
    id v28 = *(const char **)((char *)&dword_10 + (v45 & 0xFFFFFFFFFFFFF8LL));
    OUTLINED_FUNCTION_20_14();
    OUTLINED_FUNCTION_148_11((uint64_t)&a17);
  }

  if (v28)
  {
    uint64_t v145 = v38;
    uint64_t v147 = v45 & 0xC000000000000001LL;
    uint64_t v146 = OUTLINED_FUNCTION_18_22();
    uint64_t v103 = 4LL;
    while (1)
    {
      uint64_t v104 = v147 ? (id)OUTLINED_FUNCTION_28_61(v103 - 4) : *(id *)(v45 + 8 * v103);
      uint64_t v105 = v104;
      uint64_t v106 = (const char *)(v103 - 3);
      if (__OFADD__(v103 - 4, 1LL)) {
        goto LABEL_100;
      }
      OUTLINED_FUNCTION_91_19();
      OUTLINED_FUNCTION_200_5();
      id v38 = v152[4];
      __swift_project_boxed_opaque_existential_1(v152, v152[3]);
      OUTLINED_FUNCTION_64_28();
      __swift_destroy_boxed_opaque_existential_1(v152);
      static PhonePerson.make(phonePerson:options:locale:)(v105, v46 & 1, (uint64_t)v25);
      uint64_t v46 = v107;
      OUTLINED_FUNCTION_52_32((uint64_t)v25, *(uint64_t (**)(uint64_t, void))(v151 + 8));

      if (v46)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v108);
        OUTLINED_FUNCTION_137_9();
        if (v69) {
          OUTLINED_FUNCTION_3_25((uint64_t)v105 + 1, v109);
        }
        BOOL v110 = OUTLINED_FUNCTION_100_12();
        specialized Array._endMutation()(v110, v111, v112, v113);
      }

      ++v103;
      if (v106 == v28)
      {
        OUTLINED_FUNCTION_13_1();
        id v38 = v145;
        goto LABEL_98;
      }
    }
  }

  OUTLINED_FUNCTION_13_1();
LABEL_98:
  OUTLINED_FUNCTION_13_1();

  OUTLINED_FUNCTION_125_1();
  uint64_t v114 = OUTLINED_FUNCTION_37_45();
  OUTLINED_FUNCTION_174_5( v114,  v148,  *(uint64_t (**)(uint64_t, uint64_t, void))(class metadata base offset for StartCallCATs + *(void *)v38 + 416));
  unint64_t v89 = v114;
LABEL_63:
  swift_release(v89);
LABEL_139:
  OUTLINED_FUNCTION_7_5();
}

LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
          goto LABEL_146;
        }

LABEL_120:
        uint64_t v137 = swift_bridgeObjectRelease();
        if (v160 >= -1)
        {
LABEL_121:
          *(void *)((char *)&dword_10 + (v171 & 0xFFFFFFFFFFFFF8LL)) = 0LL;
          specialized Array._endMutation()(v137, v138, v139, v140);
          swift_bridgeObjectRelease();
          return;
        }

  uint64_t v106 = swift_bridgeObjectRelease();
  if (v127 >= -1) {
    goto LABEL_135;
  }
  __break(1u);
LABEL_122:
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  uint64_t v53 = _swiftEmptyArrayStorage[2];
LABEL_123:
  BOOL v110 = v10;
  if (v53 >= 2)
  {
    uint64_t v111 = *v119;
    while (1)
    {
      char v112 = v53 - 2;
      if (v53 < 2) {
        break;
      }
      if (!v111) {
        goto LABEL_166;
      }
      uint64_t v113 = v110;
      uint64_t v114 = *(void *)&v110[16 * v112 + 32];
      uint64_t v115 = *(void *)&v110[16 * v53 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)( (char *)(v111 + 8 * v114),  (char *)(v111 + 8LL * *(void *)&v110[16 * v53 + 16]),  v111 + 8 * v115,  v128);
      if (v1) {
        goto LABEL_120;
      }
      if (v115 < v114) {
        goto LABEL_153;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v113) & 1) == 0) {
        uint64_t v113 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v113);
      }
      if (v112 >= *((void *)v113 + 2)) {
        goto LABEL_154;
      }
      uint64_t v116 = &v113[16 * v112 + 32];
      *(void *)uint64_t v116 = v114;
      *((void *)v116 + 1) = v115;
      BOOL v117 = *((void *)v113 + 2);
      if (v53 > v117) {
        goto LABEL_155;
      }
      memmove(&v113[16 * v53 + 16], &v113[16 * v53 + 32], 16 * (v117 - v53));
      BOOL v110 = v113;
      *((void *)v113 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v117 - 1;
      uint64_t v53 = v117 - 1;
      if (v117 <= 2) {
        goto LABEL_134;
      }
    }

LABEL_147:
        __break(1u);
LABEL_148:
        __swift_storeEnumTagSinglePayload((uint64_t)v168, 1LL, 1LL, v167);
        goto LABEL_149;
      }

      if (v133 < v131) {
        goto LABEL_123;
      }
      *(void *)uint64_t v130 = v131;
      *(void *)&v86[16 * v129 + 8] = v133;
      unint64_t v135 = *((void *)v128 + 2);
      uint64_t v19 = v128;
      unint64_t v85 = v135 - 1;
      memmove(v132, v132 + 16, 16 * (v135 - 1 - (void)v1));
      *((void *)v128 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v135 - 1;
      uint64_t v18 = v166;
      if (v135 <= 2) {
        goto LABEL_99;
      }
    }
  }

  if (v12 < 0) {
    goto LABEL_143;
  }
  if (v12) {
    specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0LL, v12, 1LL, a1);
  }
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v34 = a1;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v38 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v40 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v39 = (uint64_t)&v32 - v12;
  uint64_t v33 = a2;
  if (a3 != a2)
  {
    uint64_t v36 = *a4;
    uint64_t v13 = v36 + 8 * a3 - 8;
    while (2)
    {
      Swift::Int v14 = *(void **)(v36 + 8 * a3);
      uint64_t v15 = v34;
      uint64_t v35 = v13;
      uint64_t v37 = a3;
      do
      {
        uint64_t v16 = *(void **)v13;
        id v17 = v14;
        id v18 = v16;
        id v19 = [v17 date];
        if (!v19)
        {
          __swift_storeEnumTagSinglePayload(v39, 1LL, 1LL, v8);
LABEL_14:
          __break(1u);
LABEL_15:
          __swift_storeEnumTagSinglePayload(v4, 1LL, 1LL, v8);
LABEL_16:
          __break(1u);
LABEL_17:
          __break(1u);
          return;
        }

        uint64_t v20 = v19;
        uint64_t v4 = (uint64_t)v11;
        uint64_t v21 = v40;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v22 = v39;
        id v23 = *(void (**)(uint64_t, char *, uint64_t))(v38 + 32);
        v23(v39, v21, v8);
        __swift_storeEnumTagSinglePayload(v22, 0LL, 1LL, v8);
        id v24 = [v18 date];
        if (!v24) {
          goto LABEL_15;
        }
        uint64_t v25 = v24;
        uint64_t v26 = v40;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v27 = v26;
        uint64_t v11 = (char *)v4;
        v23(v4, v27, v8);
        __swift_storeEnumTagSinglePayload(v4, 0LL, 1LL, v8);
        uint64_t v4 = v39;
        char v28 = static Date.< infix(_:_:)(v39, v11);
        uint64_t v29 = *(void (**)(char *, uint64_t))(v38 + 8);
        v29(v11, v8);
        v29((char *)v4, v8);

        uint64_t v30 = v37;
        if ((v28 & 1) == 0) {
          break;
        }
        if (!v36) {
          goto LABEL_17;
        }
        uint64_t v31 = *(void **)v13;
        Swift::Int v14 = *(void **)(v13 + 8);
        *(void *)uint64_t v13 = v14;
        *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v31;
        v13 -= 8LL;
        ++v15;
      }

      while (v30 != v15);
      a3 = v30 + 1;
      uint64_t v13 = v35 + 8;
      if (a3 != v33) {
        continue;
      }
      break;
    }
  }

{
  uint64_t v4;
  uint64_t v5;
  __objc2_prop_list **p_base_props;
  __objc2_prop_list **v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  __objc2_prop_list **v19;
  __objc2_prop_list **v20;
  id v21;
  BOOL v22;
  void *v23;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v27 = *a4;
    uint64_t v5 = *a4 + 8 * a3 - 8;
    p_base_props = &CameraControlFlow.base_props;
    uint64_t v7 = &CameraControlFlow.base_props;
    while (2)
    {
      uint64_t v8 = *(void **)(v27 + 8 * v4);
      uint64_t v9 = a1;
      uint64_t v26 = v5;
      char v28 = v4;
      do
      {
        uint64_t v10 = *(void **)v5;
        uint64_t v11 = v8;
        uint64_t v12 = v10;
        uint64_t v13 = objc_msgSend(v11, (SEL)p_base_props[417]);
        if (!v13)
        {
          __break(1u);
LABEL_13:
          __break(1u);
LABEL_14:
          __break(1u);
          return;
        }

        Swift::Int v14 = v13;
        uint64_t v15 = [v13 (SEL)v7[389]];

        uint64_t v16 = objc_msgSend(v12, (SEL)p_base_props[417]);
        if (!v16) {
          goto LABEL_13;
        }
        id v17 = v16;
        id v18 = [v16 (SEL)v7[389]];
        id v19 = v7;
        uint64_t v20 = p_base_props;
        uint64_t v21 = v18;

        uint64_t v22 = (uint64_t)v15 < (uint64_t)v21;
        p_base_props = v20;
        uint64_t v7 = v19;
        if (!v22) {
          break;
        }
        if (!v27) {
          goto LABEL_14;
        }
        id v23 = *(void **)v5;
        uint64_t v8 = *(void **)(v5 + 8);
        *(void *)uint64_t v5 = v8;
        *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v23;
        v5 -= 8LL;
        ++v9;
      }

      while (v28 != v9);
      uint64_t v4 = v28 + 1;
      uint64_t v5 = v26 + 8;
      if (v28 + 1 != a2) {
        continue;
      }
      break;
    }
  }

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(id *a1, id *a2, id *a3, void **a4)
{
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v77 = *(void *)(v8 - 8);
  __chkstk_darwin();
  id v78 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  __chkstk_darwin();
  id v71 = (id *)((char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  id v74 = (id *)((char *)&v68 - v11);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v68 - v12;
  __chkstk_darwin();
  uint64_t v75 = (char *)&v68 - v14;
  uint64_t v15 = a3 - a2;
  if (a2 - a1 < v15)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2 - a1, a4);
    uint64_t v16 = &a4[a2 - a1];
    if ((char *)a2 - (char *)a1 >= 8 && a2 < a3)
    {
      uint64_t v76 = &a4[a2 - a1];
      uint64_t v72 = a3;
      while (1)
      {
        uint64_t v18 = (uint64_t)v13;
        id v19 = a1;
        id v74 = a2;
        uint64_t v20 = *a4;
        id v21 = *a2;
        id v22 = v20;
        id v23 = [v21 date];
        if (!v23)
        {
          __swift_storeEnumTagSinglePayload((uint64_t)v75, 1LL, 1LL, v8);
LABEL_49:
          __break(1u);
LABEL_50:
          __swift_storeEnumTagSinglePayload(v18, 1LL, 1LL, v8);
LABEL_51:
          __break(1u);
LABEL_52:
          __swift_storeEnumTagSinglePayload((uint64_t)v74, 1LL, 1LL, v8);
          goto LABEL_53;
        }

        id v24 = v23;
        uint64_t v25 = v78;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
        uint64_t v27 = (uint64_t)v75;
        v26(v75, v25, v8);
        __swift_storeEnumTagSinglePayload(v27, 0LL, 1LL, v8);
        id v28 = [v22 date];
        if (!v28) {
          goto LABEL_50;
        }
        uint64_t v29 = v28;
        uint64_t v30 = v78;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v31 = v30;
        uint64_t v13 = (char *)v18;
        v26((char *)v18, v31, v8);
        __swift_storeEnumTagSinglePayload(v18, 0LL, 1LL, v8);
        uint64_t v32 = v75;
        char v33 = static Date.< infix(_:_:)(v75, v13);
        uint64_t v34 = *(void (**)(char *, uint64_t))(v77 + 8);
        v34(v13, v8);
        v34(v32, v8);

        if ((v33 & 1) != 0) {
          break;
        }
        uint64_t v35 = a4;
        uint64_t v36 = v19;
        BOOL v37 = v19 == a4++;
        a2 = v74;
        if (!v37) {
          goto LABEL_15;
        }
LABEL_16:
        a1 = v36 + 1;
        uint64_t v16 = v76;
        if (a4 >= v76 || a2 >= v72) {
          goto LABEL_21;
        }
      }

      uint64_t v35 = v74;
      a2 = v74 + 1;
      uint64_t v36 = v19;
      if (v19 == v74) {
        goto LABEL_16;
      }
LABEL_15:
      *uint64_t v36 = *v35;
      goto LABEL_16;
    }

uint64_t outlined bridged method (ob) of @objc SANotificationObject.notificationId.getter(void *a1)
{
  return outlined bridged method (ob) of @objc SANotificationObject.notificationId.getter( a1,  (SEL *)&selRef_notificationId);
}

void outlined bridged method (mbnn) of @objc SANotificationsSearch.notificationType.setter( uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a3 setNotificationType:v5];
}

uint64_t outlined bridged method (ob) of @objc SANotificationObject.notificationId.getter(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];

  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v4;
}

uint64_t outlined bridged method (pb) of @objc SANotificationObject.applicationId.getter(void *a1)
{
  id v1 = [a1 applicationId];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t outlined consume of CallNotificationContextProvider.CallNotification?( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }

  return result;
}

uint64_t type metadata accessor for CallNotificationContextProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin31CallNotificationContextProvider);
}

ValueMetadata *type metadata accessor for CallNotificationContextProvider.CallNotification()
{
  return &type metadata for CallNotificationContextProvider.CallNotification;
}

uint64_t OUTLINED_FUNCTION_2_31()
{
  return swift_retain(*(void *)(v0 + 16));
}

uint64_t OUTLINED_FUNCTION_4_39( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, v10, v9, a4);
}

void OUTLINED_FUNCTION_12_35(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_13_31()
{
  *(_WORD *)(v1 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
  return swift_bridgeObjectRetain(v0);
}

void *OUTLINED_FUNCTION_14_22( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *(*v11)(uint64_t *__return_ptr, uint64_t *);
  return v11(&a11, &a9);
}

void OUTLINED_FUNCTION_16_21()
{
}

uint64_t OUTLINED_FUNCTION_18_21()
{
  return swift_arrayDestroy(v0, 2LL);
}

uint64_t OUTLINED_FUNCTION_23_17(uint64_t a1, uint64_t a2, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_24_14(uint64_t a1, uint64_t a2, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_26_20(uint64_t a1, uint64_t a2)
{
  return specialized DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:)(5LL, a2, 0LL, 30.0);
}

uint64_t OUTLINED_FUNCTION_28_15(uint64_t a1)
{
  return swift_allocObject(a1, 56LL, 7LL);
}

uint64_t OUTLINED_FUNCTION_30_13()
{
  return swift_bridgeObjectRelease(v0);
}

id OUTLINED_FUNCTION_32_14(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

BOOL OUTLINED_FUNCTION_35_12(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

PhoneCallFlowDelegatePlugin::DucFamilyNames_optional __swiftcall DucFamilyNames.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of DucFamilyNames.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 9) {
    return (PhoneCallFlowDelegatePlugin::DucFamilyNames_optional)9;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::DucFamilyNames_optional)v3;
  }
}

uint64_t DucFamilyNames.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_BAFD0 + 4 * a4_0[a1]))( 0xD000000000000010LL,  0x8000000000342230LL);
}

uint64_t sub_BAFD0()
{
  return 0x6C6143656E6F6870LL;
}

uint64_t sub_BB058()
{
  return 0x61437055676E6168LL;
}

uint64_t sub_BB08C()
{
  return v0 + 7;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance DucFamilyNames( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type DucFamilyNames and conformance DucFamilyNames()
{
  unint64_t result = lazy protocol witness table cache variable for type DucFamilyNames and conformance DucFamilyNames;
  if (!lazy protocol witness table cache variable for type DucFamilyNames and conformance DucFamilyNames)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DucFamilyNames,  &type metadata for DucFamilyNames);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DucFamilyNames and conformance DucFamilyNames);
  }

  return result;
}

void protocol witness for Hashable.hashValue.getter in conformance DucFamilyNames()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DucFamilyNames(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance DucFamilyNames(uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::DucFamilyNames_optional protocol witness for RawRepresentable.init(rawValue:) in conformance DucFamilyNames@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::DucFamilyNames_optional *a2@<X8>)
{
  result.int value = DucFamilyNames.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance DucFamilyNames@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = DucFamilyNames.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t storeEnumTagSinglePayload for DucFamilyNames(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = 1;
  }
  else {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_BB1A8 + 4 * byte_32354E[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_BB1DC + 4 * byte_323549[v4]))();
}

uint64_t sub_BB1DC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_BB1E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xBB1ECLL);
  }
  return result;
}

uint64_t sub_BB1F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xBB200LL);
  }
  *(_BYTE *)uint64_t result = a2 + 8;
  return result;
}

uint64_t sub_BB204(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_BB20C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DucFamilyNames()
{
  return &type metadata for DucFamilyNames;
}

uint64_t specialized Sequence.allSatisfy(_:)(unint64_t a1, id a2)
{
  uint64_t v4 = swift_allocObject(&unk_3FB980, 24LL, 7LL);
  *(void *)(v4 + ++*(void *)(v0 + 16) = a2;
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  OUTLINED_FUNCTION_6_1();
  for (; v5; uint64_t v5 = OUTLINED_FUNCTION_23_2())
  {
    uint64_t v14 = v4;
    uint64_t v6 = 4LL;
    while (1)
    {
      id v7 = (a1 & 0xC000000000000001LL) != 0 ? (id)OUTLINED_FUNCTION_5_21(v6 - 4) : *(id *)(a1 + 8 * v6);
      uint64_t v8 = v7;
      uint64_t v4 = v6 - 3;
      if (__OFADD__(v6 - 4, 1LL)) {
        break;
      }
      id v9 = [v7 personHandle];
      if (!v9)
      {
        OUTLINED_FUNCTION_50();

LABEL_14:
        uint64_t v12 = 0LL;
        goto LABEL_15;
      }

      uint64_t v10 = v9;
      id v11 = [v9 emergencyType];

      if (v11 != a2)
      {
        OUTLINED_FUNCTION_50();
        goto LABEL_14;
      }

      ++v6;
      if (v4 == v5)
      {
        OUTLINED_FUNCTION_50();
        uint64_t v12 = 1LL;
LABEL_15:
        uint64_t v4 = v14;
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_17:
    OUTLINED_FUNCTION_3_42();
  }

  OUTLINED_FUNCTION_50();
  uint64_t v12 = 1LL;
LABEL_19:
  swift_release(v4);
  return v12;
}

void specialized Sequence.compactMap<A>(_:)( void *(*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, unint64_t a3)
{
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *(*v24)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v24 = a1;
  uint64_t v25 = a2;
  if (a3 >> 62) {
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL));
  OUTLINED_FUNCTION_6_1();
  for (; v5; uint64_t v5 = OUTLINED_FUNCTION_23_2())
  {
    uint64_t v6 = 4LL;
    while (1)
    {
      id v7 = (a3 & 0xC000000000000001LL) != 0 ? (id)OUTLINED_FUNCTION_5_21(v6 - 4) : *(id *)(a3 + 8 * v6);
      uint64_t v15 = v7;
      uint64_t v16 = v6 - 3;
      if (__OFADD__(v6 - 4, 1LL)) {
        break;
      }
      OUTLINED_FUNCTION_24_15((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14, v24, v25, v26, v27);
      if (v3)
      {
        OUTLINED_FUNCTION_50();

        swift_bridgeObjectRelease();
        goto LABEL_19;
      }

      if (v26)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
        OUTLINED_FUNCTION_40_8();
        if (v19) {
          OUTLINED_FUNCTION_29_15(v18);
        }
        uint64_t v20 = OUTLINED_FUNCTION_41_11();
        specialized Array._endMutation()(v20, v21, v22, v23);
      }

      ++v6;
      if (v16 == v5) {
        goto LABEL_18;
      }
    }

    __break(1u);
LABEL_17:
    OUTLINED_FUNCTION_3_42();
  }

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *(*v23)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v23 = a1;
  id v24 = a2;
  if (a3 >> 62) {
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL));
  OUTLINED_FUNCTION_6_1();
  for (; v5; uint64_t v5 = OUTLINED_FUNCTION_23_2())
  {
    uint64_t v6 = 4LL;
    while (1)
    {
      id v7 = (a3 & 0xC000000000000001LL) != 0 ? OUTLINED_FUNCTION_5_21(v6 - 4) : swift_retain();
      uint64_t v15 = v6 - 3;
      if (__OFADD__(v6 - 4, 1LL)) {
        break;
      }
      OUTLINED_FUNCTION_24_15(v7, v8, v9, v10, v11, v12, v13, v14, v23, v24, v25, v26);
      if (v3)
      {
        OUTLINED_FUNCTION_50();
        OUTLINED_FUNCTION_50_2();
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }

      uint64_t v16 = OUTLINED_FUNCTION_50_2();
      if (v25)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
        OUTLINED_FUNCTION_40_8();
        if (v18) {
          OUTLINED_FUNCTION_29_15(v17);
        }
        id v19 = OUTLINED_FUNCTION_41_11();
        specialized Array._endMutation()(v19, v20, v21, v22);
      }

      ++v6;
      if (v15 == v5) {
        goto LABEL_18;
      }
    }

    __break(1u);
LABEL_17:
    OUTLINED_FUNCTION_3_42();
  }

void specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneRRTarget?);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for PhoneRRTarget(0LL);
  uint64_t v21 = *(void *)(v24 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  uint64_t v23 = v7;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  OUTLINED_FUNCTION_37_14();
  uint64_t v20 = v8;
  uint64_t v9 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain();
  for (; v9; uint64_t v9 = OUTLINED_FUNCTION_23_2())
  {
    unint64_t v22 = a3 & 0xC000000000000001LL;
    uint64_t v10 = _swiftEmptyArrayStorage;
    uint64_t v11 = 4LL;
    uint64_t v19 = a3;
    while (1)
    {
      if (v22)
      {
        uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, a3);
      }

      else
      {
        uint64_t v12 = *(void *)(a3 + 8 * v11);
        swift_retain();
      }

      uint64_t v13 = v11 - 3;
      if (__OFADD__(v11 - 4, 1LL)) {
        break;
      }
      uint64_t v26 = v12;
      OUTLINED_FUNCTION_61_4();
      if (v3)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_129();
        swift_release(v12);
        goto LABEL_25;
      }

      swift_release(v12);
      if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1LL, v24) == 1)
      {
        outlined destroy of SpeakableString?( (uint64_t)v6,  &demangling cache variable for type metadata for PhoneRRTarget?);
      }

      else
      {
        uint64_t v14 = v20;
        outlined init with take of PhoneRRTarget((uint64_t)v6, v20);
        outlined init with take of PhoneRRTarget(v14, v23);
        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
        {
          OUTLINED_FUNCTION_74_3();
          uint64_t v10 = v16;
        }

        unint64_t v15 = v10[2];
        if (v15 >= v10[3] >> 1)
        {
          OUTLINED_FUNCTION_74_3();
          uint64_t v10 = v17;
        }

        v10[2] = v15 + 1;
        outlined init with take of PhoneRRTarget( v23,  (uint64_t)v10 + ((*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))
        + *(void *)(v21 + 72) * v15);
        a3 = v19;
      }

      ++v11;
      if (v13 == v9) {
        goto LABEL_24;
      }
    }

    __break(1u);
LABEL_20:
    if (a3 < 0) {
      uint64_t v3 = a3;
    }
    else {
      uint64_t v3 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
  }

void specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v32 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRResult?);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for RRResult(0LL);
  uint64_t v30 = *(void *)(v8 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  uint64_t v29 = v9;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  OUTLINED_FUNCTION_37_14();
  uint64_t v26 = v10;
  if (a3 >> 62) {
    goto LABEL_20;
  }
  uint64_t v11 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL));
  OUTLINED_FUNCTION_6_1();
  for (; v11; uint64_t v11 = OUTLINED_FUNCTION_23_2())
  {
    uint64_t v27 = v7;
    unint64_t v28 = a3 & 0xC000000000000001LL;
    uint64_t v31 = _swiftEmptyArrayStorage;
    uint64_t v12 = 4LL;
    unint64_t v24 = a3;
    uint64_t v25 = a2;
    while (1)
    {
      uint64_t v13 = v8;
      if (v28)
      {
        uint64_t v8 = OUTLINED_FUNCTION_5_21(v12 - 4);
      }

      else
      {
        uint64_t v8 = *(void *)(a3 + 8 * v12);
        swift_retain();
      }

      uint64_t v14 = (char *)(v12 - 3);
      if (__OFADD__(v12 - 4, 1LL)) {
        break;
      }
      uint64_t v7 = (char *)v11;
      uint64_t v33 = v8;
      uint64_t v15 = (uint64_t)v27;
      OUTLINED_FUNCTION_61_4();
      if (v3)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_50();
        OUTLINED_FUNCTION_50_2();
        goto LABEL_22;
      }

      OUTLINED_FUNCTION_50_2();
      uint64_t v8 = v13;
      if (__swift_getEnumTagSinglePayload(v15, 1LL, v13) == 1)
      {
        outlined destroy of SpeakableString?(v15, &demangling cache variable for type metadata for RRResult?);
      }

      else
      {
        uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32);
        uint64_t v17 = v26;
        v16(v26, v15, v13);
        v16(v29, v17, v13);
        uint64_t v18 = v31;
        if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
        {
          OUTLINED_FUNCTION_75_2();
          uint64_t v18 = v21;
        }

        unint64_t v19 = v18[2];
        if (v19 >= v18[3] >> 1)
        {
          OUTLINED_FUNCTION_75_2();
          uint64_t v18 = v22;
        }

        _OWORD v18[2] = v19 + 1;
        unint64_t v20 = (*(unsigned __int8 *)(v30 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
        uint64_t v31 = v18;
        uint64_t v8 = v13;
        v16((uint64_t)v18 + v20 + *(void *)(v30 + 72) * v19, v29, v13);
        a3 = v24;
        a2 = v25;
      }

      ++v12;
      uint64_t v11 = (uint64_t)v7;
      if (v14 == v7) {
        goto LABEL_21;
      }
    }

    __break(1u);
LABEL_20:
    OUTLINED_FUNCTION_3_42();
  }

uint64_t ContactsSlotTemplating.init(deviceState:startCallCats:locale:appInfoBuilder:)@<X0>( __int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, void *a6@<X8>)
{
  a6[5] = a2;
  a6[6] = a3;
  a6[7] = a4;
  return outlined init with take of AppSelectionSignalComponent(a5, (uint64_t)(a6 + 8));
}

void ContactsSlotTemplating.makeParameterPromptDialog(app:parameterName:intent:_:)()
{
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_39_2();
  __chkstk_darwin();
  uint64_t v10 = (char *)&v59 - v9;
  __chkstk_darwin();
  uint64_t v12 = (char *)&v59 - v11;
  uint64_t v13 = *(void *)(v4 + 32);
  if ((static ContactsSlotTemplating.isMissingMeCardCase(intent:)() & 1) == 0)
  {
    uint64_t v25 = *(void **)(v2 + 40);
    uint64_t v26 = OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_29_1(v1, v27, v28, v26);
    BOOL v29 = OUTLINED_FUNCTION_54_3(*(uint64_t (**)(uint64_t))(*(void *)(v13 + 16) + 8LL)) == 2;
    (*(void (**)(uint64_t, BOOL, void, void, void, void, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                                                              + *v25
                                                                                              + 1312))( v1,  v29,  0LL,  0LL,  0LL,  0LL,  v8,  v6);
    uint64_t v12 = (char *)v1;
    goto LABEL_23;
  }

  uint64_t v59 = v8;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.siriPhone);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v18 = static os_log_type_t.debug.getter(v16, v17);
  BOOL v19 = os_log_type_enabled(v16, v18);
  uint64_t v60 = v6;
  if (v19)
  {
    unint64_t v20 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
    *(_WORD *)unint64_t v20 = 0;
    _os_log_impl( &dword_0,  v16,  v18,  "User requested a handle label with inferred isMe=true, but no MeCard person exists. Provide specific prompt dialog for this case StartCall#PromptForContactsKnownLabel.",  v20,  2u);
    OUTLINED_FUNCTION_0_2((uint64_t)v20);
  }

  unint64_t v21 = OUTLINED_FUNCTION_54_3(*(uint64_t (**)(uint64_t))(*(void *)(v13 + 8) + 8LL));
  unint64_t v22 = v21;
  if (!v21) {
    goto LABEL_18;
  }
  if (v21 >> 62)
  {
    if (OUTLINED_FUNCTION_70(v21 & 0xFFFFFFFFFFFFFF8LL)) {
      goto LABEL_9;
    }
LABEL_14:
    unint64_t v24 = 0LL;
    goto LABEL_15;
  }

void ContactsSlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  char v64 = v21;
  uint64_t v68 = v23;
  uint64_t v69 = v24;
  LODWORD(v6__swift_destroy_boxed_opaque_existential_1(v0 + 3) = v25;
  uint64_t v67 = type metadata accessor for Locale(0LL);
  uint64_t v65 = *(void *)(v67 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v27 = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  BOOL v29 = (char *)&v62 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  OUTLINED_FUNCTION_37_14();
  uint64_t v31 = v30;
  uint64_t v66 = (uint64_t)OUTLINED_FUNCTION_17_5(v32, "confirmationReason");
  id v33 = OUTLINED_FUNCTION_17_5(v66, "itemToConfirm");
  _bridgeAnyObjectToAny(_:)(v70, v33);
  swift_unknownObjectRelease(v33);
  OUTLINED_FUNCTION_68();
  if (swift_dynamicCast(&v73, v70, (char *)&type metadata for Any + 8))
  {
    uint64_t v34 = v73;
    OUTLINED_FUNCTION_72_4();
    goto LABEL_15;
  }

  OUTLINED_FUNCTION_72_4();
  uint64_t v35 = OUTLINED_FUNCTION_63_3();
  if (!v35) {
    goto LABEL_14;
  }
  uint64_t v36 = v35;
  OUTLINED_FUNCTION_71();
  if (v38)
  {
    if (v36 >= 0) {
      uint64_t v40 = v37;
    }
    else {
      uint64_t v40 = v36;
    }
    if (_CocoaArrayWrapper.endIndex.getter(v40)) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  if (!*(void *)(v37 + 16))
  {
LABEL_13:
    OUTLINED_FUNCTION_70_2();
LABEL_14:
    uint64_t v34 = 0LL;
    goto LABEL_15;
  }

void ContactsSlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  __int128 v153 = v22;
  unint64_t v25 = v24;
  uint64_t v151 = v26;
  uint64_t v152 = a21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v28 = OUTLINED_FUNCTION_42_7(v27);
  uint64_t v144 = type metadata accessor for InteractionType(v28);
  uint64_t v143 = *(void *)(v144 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  uint64_t v142 = v29;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  OUTLINED_FUNCTION_37_14();
  uint64_t v31 = OUTLINED_FUNCTION_42_7(v30);
  uint64_t v138 = type metadata accessor for Logger(v31);
  uint64_t v137 = *(void *)(v138 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v33 = OUTLINED_FUNCTION_42_7(v32);
  uint64_t v34 = type metadata accessor for Locale(v33);
  uint64_t v154 = *(void *)(v34 - 8);
  uint64_t v155 = v34;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_39_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_37_14();
  uint64_t v150 = v35;
  uint64_t v139 = *(void *)(a22 + 32);
  uint64_t v36 = *(void *)(v139 + 8);
  uint64_t v37 = *(uint64_t (**)(void))(v36 + 8);
  uint64_t v38 = *(void *)(a22 + 16);
  unint64_t v148 = v25;
  uint64_t v147 = v38;
  unint64_t v39 = v37();
  id v40 = OUTLINED_FUNCTION_17_5(v39, "disambiguationItems");
  uint64_t v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v40, (char *)&type metadata for Any + 8);

  uint64_t v42 = *(void *)(v41 + 16);
  uint64_t v43 = swift_bridgeObjectRelease();
  uint64_t v44 = &selRef_alternatives;
  if (v42) {
    uint64_t v44 = &selRef_disambiguationItems;
  }
  id v45 = OUTLINED_FUNCTION_17_5(v43, *v44);
  uint64_t p_base_props = static Array._unconditionallyBridgeFromObjectiveC(_:)(v45, (char *)&type metadata for Any + 8);

  id v47 = specialized _arrayConditionalCast<A, B>(_:)(p_base_props);
  unint64_t v48 = (unint64_t)_swiftEmptyArrayStorage;
  if (v47) {
    unint64_t v49 = (unint64_t)v47;
  }
  else {
    unint64_t v49 = (unint64_t)_swiftEmptyArrayStorage;
  }
  unint64_t v149 = v39 >> 62;
  uint64_t v146 = a22;
  if (v39)
  {
    if (v39 >> 62)
    {
      OUTLINED_FUNCTION_33_19();
      if (OUTLINED_FUNCTION_15_4()) {
        goto LABEL_9;
      }
    }

    else
    {
      uint64_t v50 = *(void *)((char *)&dword_10 + (v39 & 0xFFFFFFFFFFFFF8LL));
      OUTLINED_FUNCTION_124();
      if (v50)
      {
LABEL_9:
        OUTLINED_FUNCTION_9_33();
        if ((v39 & 0xC000000000000001LL) != 0) {
          goto LABEL_101;
        }
        uint64_t v51 = (uint64_t)OUTLINED_FUNCTION_43_5();
        goto LABEL_11;
      }
    }

    OUTLINED_FUNCTION_4_1();
    goto LABEL_18;
  }

  uint64_t v145 = 0LL;
  while (1)
  {
    BOOL v57 = App.isFirstParty()();
    uint64_t v58 = *(void *)(p_base_props + 16);
    swift_bridgeObjectRelease();
    unint64_t v59 = v49 >> 62;
    if ((specialized Sequence.contains(where:)(v49, (char *)&dword_0 + 2) & 1) == 0
      || (specialized Sequence.contains(where:)(v49, (char *)&dword_0 + 1) & 1) == 0)
    {
      break;
    }

    OUTLINED_FUNCTION_4_1();
    if (v59)
    {
      OUTLINED_FUNCTION_128();
      uint64_t v60 = OUTLINED_FUNCTION_15_4();
      if (!v60)
      {
LABEL_105:
        OUTLINED_FUNCTION_7_4(v49);
        if (one-time initialization token for siriPhone != -1) {
          swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
        }
        uint64_t v124 = __swift_project_value_buffer(v138, (uint64_t)static Logger.siriPhone);
        uint64_t v125 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v137 + 16))(v136, v124, v138);
        uint64_t v126 = (os_log_s *)Logger.logObject.getter(v125);
        os_log_type_t v127 = static os_log_type_t.error.getter();
        unint64_t v49 = (unint64_t)"Foreign emergency check should guarantee the presence of a nonLocal emergencyType INPerson";
        if (os_log_type_enabled(v126, v127))
        {
          uint64_t v128 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
          uint64_t v23 = OUTLINED_FUNCTION_7_0(32LL);
          v157[0] = v23;
          *(_DWORD *)uint64_t v128 = 136315138;
          unint64_t v39 = (unint64_t)(v128 + 12);
          unint64_t v48 = (unint64_t)(v128 + 4);
          uint64_t v156 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD00000000000005ALL,  0x8000000000348FD0LL,  v157);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157, v128 + 4);
          _os_log_impl(&dword_0, v126, v127, "%s", v128, 0xCu);
          swift_arrayDestroy(v23, 1LL);
          OUTLINED_FUNCTION_0_2(v23);
          OUTLINED_FUNCTION_0_2((uint64_t)v128);
        }

        unint64_t v56 = 0x8000000000348FD0LL;
        static SiriKitLifecycle._logCrashToEventBus(_:)(0xD00000000000005ALL, 0x8000000000348FD0LL);
        LODWORD(v13__swift_destroy_boxed_opaque_existential_1(v0 + 5) = 0;
        uint64_t v134 = 26LL;
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000005ALL,  0x8000000000348FD0LL,  "PhoneCallFlowDelegatePlugin/PhoneLog.swift",  42LL,  2LL);
        __break(1u);
        goto LABEL_110;
      }
    }

    else
    {
      uint64_t v60 = *(void *)((char *)&dword_10 + (v49 & 0xFFFFFFFFFFFFF8LL));
      OUTLINED_FUNCTION_128();
      if (!v60) {
        goto LABEL_105;
      }
    }

    unint64_t v48 = v49 & 0xC000000000000001LL;
    uint64_t v36 = 4LL;
    uint64_t p_base_props = (uint64_t)&CameraControlFlow.base_props;
    uint64_t v23 = v49;
    while (1)
    {
      id v61 = v48 ? (id)OUTLINED_FUNCTION_25_23(v36 - 4) : *(id *)(v49 + 8 * v36);
      uint64_t v62 = v61;
      unint64_t v49 = v36 - 3;
      if (__OFADD__(v36 - 4, 1LL)) {
        break;
      }
      id v63 = OUTLINED_FUNCTION_17_5((uint64_t)v61, "personHandle");
      if (v63)
      {
        char v64 = v63;
        unint64_t v39 = (unint64_t)[v63 emergencyType];

        if (v39 == 2)
        {
          OUTLINED_FUNCTION_7_4(v23);
          uint64_t v95 = (void *)v153[5];
          type metadata accessor for SirikitDeviceState(0LL);
          outlined init with copy of SignalProviding((uint64_t)v153, (uint64_t)v157);
          uint64_t v96 = SirikitDeviceState.__allocating_init(from:)(v157);
          OUTLINED_FUNCTION_18_22();
          id v97 = v62;
          static Device.current.getter(v157);
          __swift_project_boxed_opaque_existential_1(v157, v158);
          OUTLINED_FUNCTION_51_6();
          __swift_destroy_boxed_opaque_existential_1(v157);
          static PhonePerson.make(phonePerson:options:locale:)(v62, 0, v150);
          uint64_t v99 = v98;

          OUTLINED_FUNCTION_44_11();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                                     + *v95
                                                                     + 288))( v96,  v99,  v151,  v152);

          OUTLINED_FUNCTION_76();
          uint64_t v100 = v99;
          goto LABEL_64;
        }
      }

      ++v36;
      BOOL v65 = v49 == v60;
      unint64_t v49 = v23;
      if (v65) {
        goto LABEL_105;
      }
    }

    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    uint64_t v51 = OUTLINED_FUNCTION_19_20();
LABEL_11:
    uint64_t v52 = (void *)v51;
    uint64_t v53 = OUTLINED_FUNCTION_4_1();
    id v54 = OUTLINED_FUNCTION_17_5(v53, "siriMatches");

    if (v54)
    {
      unint64_t v55 = OUTLINED_FUNCTION_68();
      unint64_t v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v54, v55);

      if (!(v56 >> 62))
      {
        uint64_t v145 = *(void *)((char *)&dword_10 + (v56 & 0xFFFFFFFFFFFFF8LL));
        goto LABEL_14;
      }

LABEL_110:
      OUTLINED_FUNCTION_8_1();
      uint64_t v145 = OUTLINED_FUNCTION_61_1();
      OUTLINED_FUNCTION_7_4(v56);
    }

    else
    {
LABEL_18:
      if (v149)
      {
        OUTLINED_FUNCTION_33_19();
        uint64_t v145 = OUTLINED_FUNCTION_15_4();
LABEL_14:
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v145 = *(void *)((char *)&dword_10 + (v39 & 0xFFFFFFFFFFFFF8LL));
      }
    }
  }

  if ((specialized Sequence.allSatisfy(_:)(v49, (char *)&dword_0 + 1) & 1) == 0)
  {
    LODWORD(v13__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v57;
    uint64_t v150 = v23;
    unint64_t v83 = OUTLINED_FUNCTION_128();
    PhoneContactDisambiguationProperties.isHandleDisambiguation.getter(v83);
    char v85 = v84;
    OUTLINED_FUNCTION_23_5();
    if ((v85 & 1) != 0) {
      goto LABEL_56;
    }
    if (v59)
    {
      OUTLINED_FUNCTION_128();
      uint64_t v86 = OUTLINED_FUNCTION_61_1();
      OUTLINED_FUNCTION_23_5();
    }

    else
    {
      uint64_t v86 = *(void *)((char *)&dword_10 + (v49 & 0xFFFFFFFFFFFFF8LL));
    }

    if (v86 == 1)
    {
      OUTLINED_FUNCTION_22_18();
      id v87 = (v49 & 0xC000000000000001LL) != 0 ? (id)OUTLINED_FUNCTION_25_23(0LL) : OUTLINED_FUNCTION_69_0();
      uint64_t v88 = v87;
      INPerson.hasHandleLabel.getter();
      char v90 = v89;

      if ((v90 & 1) != 0)
      {
LABEL_56:
        if (v39)
        {
          if (v149)
          {
            OUTLINED_FUNCTION_124();
            uint64_t v91 = OUTLINED_FUNCTION_15_4();
            OUTLINED_FUNCTION_4_1();
          }

          else
          {
            uint64_t v91 = *(void *)((char *)&dword_10 + (v39 & 0xFFFFFFFFFFFFFF8LL));
          }

          uint64_t v67 = v150;
          if (v91)
          {
            OUTLINED_FUNCTION_9_33();
            if ((v39 & 0xC000000000000001LL) != 0) {
              uint64_t v92 = OUTLINED_FUNCTION_19_20();
            }
            else {
              uint64_t v92 = (uint64_t)OUTLINED_FUNCTION_43_5();
            }
            char v93 = (void *)v92;
            OUTLINED_FUNCTION_4_1();
            unint64_t v48 = v93;
            INPerson.hasHandleLabel.getter();
            LODWORD(v14__swift_destroy_boxed_opaque_existential_1(v0 + 9) = v94;
          }

          else
          {
            OUTLINED_FUNCTION_4_1();
            LODWORD(v14__swift_destroy_boxed_opaque_existential_1(v0 + 9) = 0;
            unint64_t v48 = 0LL;
          }
        }

        else
        {
          LODWORD(v14__swift_destroy_boxed_opaque_existential_1(v0 + 9) = 0;
          unint64_t v48 = 0LL;
          uint64_t v67 = v150;
        }

        INPersonContainingIntent.isFirstContactRelatedOrMyself.getter(v147, v36);
        uint64_t v68 = v112;
        if (!v59)
        {
          uint64_t v113 = *(void *)((char *)&dword_10 + (v49 & 0xFFFFFFFFFFFFF8LL));
          OUTLINED_FUNCTION_128();
          if (!v113) {
            goto LABEL_113;
          }
          goto LABEL_77;
        }

LABEL_112:
        OUTLINED_FUNCTION_128();
        uint64_t v113 = OUTLINED_FUNCTION_61_1();
        if (!v113)
        {
LABEL_113:
          OUTLINED_FUNCTION_23_5();
          uint64_t p_base_props = v49 & 0xC000000000000001LL;
          uint64_t v119 = 1LL;
LABEL_114:
          OUTLINED_FUNCTION_22_18();
          if (p_base_props) {
            uint64_t v129 = OUTLINED_FUNCTION_25_23(0LL);
          }
          else {
            uint64_t v129 = (uint64_t)OUTLINED_FUNCTION_69_0();
          }
          uint64_t v130 = (void *)v129;
          OUTLINED_FUNCTION_23_5();
          OUTLINED_FUNCTION_18_22();
          __swift_project_boxed_opaque_existential_1(v153, v153[3]);
          OUTLINED_FUNCTION_51_6();
          static PhonePerson.make(phonePerson:options:locale:)(v130, v68 & 1, v67);
          uint64_t v132 = v131;

          (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v67, v155);
          uint64_t v133 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                                                             + *(void *)v153[5]
                                                                                             + 320);
          swift_retain();
          v133(v149 & 1, v119, v132, v151, v152);

          OUTLINED_FUNCTION_31_1(v132);
          goto LABEL_117;
        }

  OUTLINED_FUNCTION_62();
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v102 = OUTLINED_FUNCTION_15_1();
  uint64_t v103 = __swift_project_value_buffer(v102, (uint64_t)static Logger.siriPhone);
  Logger.logObject.getter(v103);
  char v104 = OUTLINED_FUNCTION_41();
  if (os_log_type_enabled((os_log_t)v23, v104))
  {
    uint64_t v105 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
    *(_WORD *)uint64_t v105 = 0;
    _os_log_impl(&dword_0, (os_log_t)v23, v104, "getSelectedPerson# no matching criteria was found", v105, 2u);
    OUTLINED_FUNCTION_0_2((uint64_t)v105);
  }

LABEL_117:
  OUTLINED_FUNCTION_7_5();
}

LABEL_77:
        uint64_t v147 = v68;
        unint64_t v148 = v48;
        uint64_t p_base_props = v49 & 0xC000000000000001LL;
        unint64_t v48 = 4LL;
        uint64_t v23 = (uint64_t)&CameraControlFlow.base_props;
        while (1)
        {
          uint64_t v36 = v48 - 4;
          if (p_base_props) {
            id v114 = (id)OUTLINED_FUNCTION_25_23(v48 - 4);
          }
          else {
            id v114 = *(id *)(v49 + 8 * v48);
          }
          unint64_t v39 = (unint64_t)v114;
          unint64_t v115 = v48 - 3;
          if (__OFADD__(v36, 1LL)) {
            goto LABEL_100;
          }
          id v116 = [v114 personHandle];
          if (!v116) {
            break;
          }
          BOOL v117 = v116;
          uint64_t v118 = (char *)[v116 type];

          if (v118 != (_BYTE *)&dword_0 + 2)
          {
            OUTLINED_FUNCTION_23_5();
            goto LABEL_95;
          }

          ++v48;
          if (v115 == v113)
          {
            OUTLINED_FUNCTION_23_5();
            uint64_t v119 = 1LL;
LABEL_96:
            uint64_t v67 = v150;
            unint64_t v48 = v148;
            LOBYTE(v6__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v147;
            goto LABEL_114;
          }
        }

        OUTLINED_FUNCTION_23_5();

LABEL_95:
        uint64_t v119 = 0LL;
        goto LABEL_96;
      }
    }

    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v146 - 8) + 16LL))(v157, v153, v146);
    if (v86 < 6)
    {
      OUTLINED_FUNCTION_53_6();
    }

    else
    {
      uint64_t v102 = v158;
      uint64_t v103 = v159;
      __swift_project_boxed_opaque_existential_1(v157, v158);
      dispatch thunk of DeviceState.interactionType.getter(v102, v103);
      (*(void (**)(uint64_t, void, uint64_t))(v143 + 104))( v142,  enum case for InteractionType.dialogDriven(_:),  v144);
      char v104 = specialized == infix<A>(_:_:)(v141, v142);
      uint64_t v105 = *(void (**)(uint64_t, uint64_t))(v143 + 8);
      v105(v142, v144);
      uint64_t v106 = v146;
      v105(v141, v144);
      OUTLINED_FUNCTION_53_6();
      if ((v104 & 1) != 0)
      {
        OUTLINED_FUNCTION_4_1();
        uint64_t v107 = (void *)v153[5];
        type metadata accessor for PhonePersonList();
        __chkstk_darwin();
        uint64_t v108 = *(void *)(v106 + 24);
        *(&v136 - 4) = v147;
        *(&v136 - __swift_destroy_boxed_opaque_existential_1(v0 + 3) = v108;
        uint64_t v134 = v139;
        unint64_t v135 = v148;
        specialized Sequence.compactMap<A>(_:)( (void *(*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #4 in ContactsSlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:),  (uint64_t)(&v136 - 6),  v49);
        uint64_t v110 = v109;
        OUTLINED_FUNCTION_23_5();
        uint64_t v111 = PhonePersonList.__allocating_init(list:)(v110);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs + *v107 + 416))( v111,  v151,  v152);
        uint64_t v100 = v111;
LABEL_64:
        swift_release(v100);
        goto LABEL_117;
      }
    }

    OUTLINED_FUNCTION_23_5();
    if ((v138 & (v58 < v145)) == 1)
    {
      OUTLINED_FUNCTION_4_1();
      (*(void (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs + *(void *)v153[5] + 384))( v151,  v152);
      goto LABEL_117;
    }

    if (!v39)
    {
      id v123 = 0LL;
      goto LABEL_98;
    }

    if (v149)
    {
      OUTLINED_FUNCTION_124();
      uint64_t v120 = (void *)OUTLINED_FUNCTION_15_4();
      OUTLINED_FUNCTION_4_1();
      if (v120) {
        goto LABEL_89;
      }
    }

    else
    {
      uint64_t v120 = *(void **)((char *)&dword_10 + (v39 & 0xFFFFFFFFFFFFFF8LL));
      if (v120)
      {
LABEL_89:
        OUTLINED_FUNCTION_9_33();
        if ((v39 & 0xC000000000000001LL) != 0) {
          uint64_t v121 = OUTLINED_FUNCTION_19_20();
        }
        else {
          uint64_t v121 = (uint64_t)OUTLINED_FUNCTION_43_5();
        }
        uint64_t v120 = (void *)v121;
      }
    }

    uint64_t v122 = OUTLINED_FUNCTION_4_1();
    id v123 = OUTLINED_FUNCTION_17_5(v122, "relationship");

LABEL_98:
    ContactsSlotTemplating.translateRelationship(relationship:)((uint64_t)v123, v140);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                      + *(void *)v153[5]
                                                      + 256))( v140,  v151,  v152);
    outlined destroy of SpeakableString?(v140, &demangling cache variable for type metadata for SpeakableString?);
    goto LABEL_117;
  }

  OUTLINED_FUNCTION_4_1();
  uint64_t v66 = (void *)v153[5];
  uint64_t v156 = v48;
  if (v59)
  {
    OUTLINED_FUNCTION_128();
    uint64_t v67 = OUTLINED_FUNCTION_15_4();
  }

  else
  {
    uint64_t v67 = *(void *)((char *)&dword_10 + (v49 & 0xFFFFFFFFFFFFF8LL));
    OUTLINED_FUNCTION_128();
  }

  uint64_t v68 = v150;
  if (!v67)
  {
    OUTLINED_FUNCTION_23_5();
    unint64_t v101 = _swiftEmptyArrayStorage;
    goto LABEL_66;
  }

  __int128 v153 = v66;
  OUTLINED_FUNCTION_18_22();
  if (v67 < 1)
  {
    __break(1u);
    goto LABEL_112;
  }

  for (uint64_t i = 0LL; i != v67; ++i)
  {
    if ((v49 & 0xC000000000000001LL) != 0) {
      id v70 = (id)OUTLINED_FUNCTION_25_23(i);
    }
    else {
      id v70 = *(id *)(v49 + 8 * i + 32);
    }
    uint64_t v71 = v70;
    static Device.current.getter(v157);
    uint64_t v73 = v158;
    uint64_t v72 = v159;
    __swift_project_boxed_opaque_existential_1(v157, v158);
    dispatch thunk of DeviceState.siriLocale.getter(v73, v72);
    __swift_destroy_boxed_opaque_existential_1(v157);
    static PhonePerson.make(phonePerson:options:locale:)(v71, 0, v150);
    uint64_t v75 = v74;
    OUTLINED_FUNCTION_44_11();

    if (v75)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v76);
      OUTLINED_FUNCTION_40_8();
      if (v78) {
        OUTLINED_FUNCTION_3_25((uint64_t)v71 + 1, v77);
      }
      uint64_t v79 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v71, v75);
      specialized Array._endMutation()(v79, v80, v81, v82);
    }
  }

  OUTLINED_FUNCTION_23_5();
  unint64_t v101 = (void *)v156;
  uint64_t v66 = v153;
LABEL_66:
  OUTLINED_FUNCTION_23_5();
  (*(void (**)(void *, uint64_t, uint64_t))(class metadata base offset for StartCallCATs + *v66 + 352))( v101,  v151,  v152);
  swift_bridgeObjectRelease();
LABEL_117:
  OUTLINED_FUNCTION_7_5();
}

uint64_t closure #4 in ContactsSlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)@<X0>( void **a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, void *a4@<X8>)
{
  os_log_type_t v18 = a4;
  uint64_t v7 = type metadata accessor for Locale(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v19[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *a1;
  type metadata accessor for PhonePerson(0LL);
  INPersonContainingIntent.isFirstContactRelatedOrMyself.getter(a2, *(void *)(a3 + 8));
  LOBYTE(a__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v12;
  static Device.current.getter(v19);
  uint64_t v14 = v20;
  uint64_t v13 = v21;
  __swift_project_boxed_opaque_existential_1(v19, v20);
  dispatch thunk of DeviceState.siriLocale.getter(v14, v13);
  __swift_destroy_boxed_opaque_existential_1(v19);
  static PhonePerson.make(phonePerson:options:locale:)(v11, a2 & 1, (uint64_t)v10);
  uint64_t v16 = v15;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  *os_log_type_t v18 = v16;
  return result;
}

void ContactsSlotTemplating.translateRelationship(relationship:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    INPersonRelationship.toSpeakableString(startCallCats:)();
  }

  else
  {
    uint64_t v3 = type metadata accessor for SpeakableString(0LL);
    __swift_storeEnumTagSinglePayload(a2, 1LL, 1LL, v3);
  }

void ContactsSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v151 = v11;
  uint64_t v152 = v12;
  uint64_t v143 = v13;
  unint64_t v15 = v14;
  unint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v136 = v22;
  uint64_t v144 = a9;
  uint64_t v145 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  unint64_t v24 = (char *)&v135 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v138 = (char *)&v135 - v25;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  OUTLINED_FUNCTION_37_14();
  uint64_t v139 = v26;
  uint64_t v27 = type metadata accessor for Locale(0LL);
  uint64_t v141 = *(void *)(v27 - 8);
  uint64_t v142 = v27;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  uint64_t v137 = v28;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  uint64_t v30 = (char *)&v135 - v29;
  uint64_t v140 = *(void *)(a10 + 32);
  uint64_t v31 = *(void *)(v140 + 8);
  uint64_t v32 = *(void *)(a10 + 16);
  uint64_t v33 = OUTLINED_FUNCTION_16_22();
  if (v33)
  {
    uint64_t v34 = v33;
    if ((v15 & 1) == 0)
    {
      unint64_t v15 = v33 & 0xC000000000000001LL;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v17, (v33 & 0xC000000000000001LL) == 0, v33);
      if (!v15)
      {
        uint64_t v35 = *(void **)(v34 + 8 * v17 + 32);
LABEL_11:
        id v39 = v35;
LABEL_12:
        id v146 = v39;
        OUTLINED_FUNCTION_62();
        goto LABEL_16;
      }

      unint64_t v101 = v17;
      goto LABEL_61;
    }

    OUTLINED_FUNCTION_62();
  }

  uint64_t v36 = OUTLINED_FUNCTION_16_22();
  if (v36)
  {
    uint64_t v34 = v36;
    OUTLINED_FUNCTION_71();
    if (v38)
    {
      if (OUTLINED_FUNCTION_70(v37)) {
        goto LABEL_9;
      }
    }

    else if (*(void *)(v37 + 16))
    {
LABEL_9:
      unint64_t v17 = v34 & 0xC000000000000001LL;
      OUTLINED_FUNCTION_21_18();
      if ((v34 & 0xC000000000000001LL) == 0)
      {
        uint64_t v35 = *(void **)(v34 + 32);
        goto LABEL_11;
      }

      unint64_t v101 = 0LL;
LABEL_61:
      id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v101, v34);
      goto LABEL_12;
    }

    OUTLINED_FUNCTION_62();
  }

  id v146 = 0LL;
LABEL_16:
  id v40 = [v21 unsupportedReason];
  if ((id)_INStartCallContactUnsupportedReasonForeignEmergencyDisambiguation == v40)
  {
    OUTLINED_FUNCTION_8_26();
    (*(void (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs + v41 + 1600))(v143, v144);
LABEL_18:

    return;
  }

  switch((unint64_t)v40)
  {
    case 2uLL:
      OUTLINED_FUNCTION_8_26();
      (*(void (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs + v42 + 1664))(v143, v144);
      goto LABEL_18;
    case 3uLL:
      uint64_t v44 = type metadata accessor for PhoneStartCallIntent(0LL);
      specialized static PhoneStartCallIntent.makeForSlotTemplating(intent:isRelationshipRequest:)( v19,  0,  v44,  v32,  v140);
      unint64_t v15 = v45;
      if (v146
        && (id v46 = [v146 personHandle]) != 0
        && (id v47 = v46, v48 = [v46 label], v47, v48)
        && (unint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48), v50 = v49, v48, v50))
      {
        OUTLINED_FUNCTION_6_3();
        uint64_t v51 = v139;
        OUTLINED_FUNCTION_1_34(v17, v50);
        uint64_t v52 = OUTLINED_FUNCTION_26_0();
        __swift_storeEnumTagSinglePayload(v51, 0LL, 1LL, v52);
        OUTLINED_FUNCTION_62();
      }

      else
      {
        uint64_t v73 = OUTLINED_FUNCTION_26_0();
        OUTLINED_FUNCTION_29_1(v139, v74, v75, v73);
      }

      uint64_t v76 = *(void *)(v15 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_contacts);
      if (!v76) {
        goto LABEL_68;
      }
      unint64_t v77 = *(void *)(v76 + 24);
      if (v77 >> 62)
      {
        OUTLINED_FUNCTION_31_17();
        if (_CocoaArrayWrapper.endIndex.getter(v17)) {
          goto LABEL_49;
        }
LABEL_67:
        OUTLINED_FUNCTION_62();
LABEL_68:
        uint64_t v81 = 0LL;
        goto LABEL_69;
      }

      uint64_t v78 = *(void *)((char *)&dword_10 + (v77 & 0xFFFFFFFFFFFFF8LL));
      OUTLINED_FUNCTION_6_3();
      if (!v78) {
        goto LABEL_67;
      }
LABEL_49:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (v77 & 0xC000000000000001LL) == 0, v77);
      if ((v77 & 0xC000000000000001LL) != 0) {
        goto LABEL_79;
      }
      uint64_t v79 = *(void *)(v77 + 32);
      swift_retain();
LABEL_51:
      uint64_t v80 = OUTLINED_FUNCTION_62();
      uint64_t v81 = DialogPerson.personHandle.getter(v80);
      swift_release(v79);
LABEL_69:
      INPersonContainingIntent.hasSiriMatches.getter(v32, v31);
      uint64_t v136 = v81;
      if ((v103 & 1) == 0)
      {
        id v110 = v146;
        id v109 = v146;
        goto LABEL_83;
      }

      if (!v146) {
        goto LABEL_82;
      }
      id v104 = [v146 siriMatches];
      if (!v104) {
        goto LABEL_82;
      }
      uint64_t v105 = v104;
      unint64_t v106 = OUTLINED_FUNCTION_68();
      unint64_t v107 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v105, v106);

      if (v107 >> 62)
      {
        OUTLINED_FUNCTION_31_17();
        uint64_t v111 = _CocoaArrayWrapper.endIndex.getter(v105);
        OUTLINED_FUNCTION_62();
        if (v111) {
          goto LABEL_74;
        }
        goto LABEL_81;
      }

      if (!*(void *)((char *)&dword_10 + (v107 & 0xFFFFFFFFFFFFF8LL)))
      {
LABEL_81:
        OUTLINED_FUNCTION_62();
LABEL_82:
        id v109 = 0LL;
        goto LABEL_83;
      }

void protocol witness for SlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:) in conformance ContactsSlotTemplating<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
}

void protocol witness for SlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:) in conformance ContactsSlotTemplating<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
}

void protocol witness for SlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:) in conformance ContactsSlotTemplating<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t partial apply for closure #4 in ContactsSlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)@<X0>( void **a1@<X0>, void *a2@<X8>)
{
  return closure #4 in ContactsSlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)( a1,  *(void *)(v2 + 16),  *(void *)(v2 + 32),  a2);
}

uint64_t type metadata instantiation function for ContactsSlotTemplating(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40LL);
}

uint64_t destroy for ContactsSlotTemplating(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 8);
}

uint64_t initializeWithCopy for ContactsSlotTemplating(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = a2 + 64;
  __int128 v9 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v9;
  uint64_t v10 = v9;
  uint64_t v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
  swift_retain(v5);
  swift_bridgeObjectRetain(v7);
  v11(a1 + 64, v8, v10);
  return a1;
}

void *assignWithCopy for ContactsSlotTemplating(void *a1, void *a2)
{
  uint64_t v4 = a1[5];
  a1[5] = a2[5];
  swift_retain();
  swift_release(v4);
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 8, a2 + 8);
  return a1;
}

void *__swift_memcpy104_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x68uLL);
}

uint64_t assignWithTake for ContactsSlotTemplating(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + ++*(void *)(v0 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release(v6);
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 64));
  __int128 v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactsSlotTemplating(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 104))
    {
      LODWORD(closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)(v0, v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)(v0, v1, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)(v0, v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactsSlotTemplating(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
    *(_OWORD *)(result + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 104) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for ContactsSlotTemplating(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for ContactsSlotTemplating);
}

uint64_t outlined init with take of PhoneRRTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PhoneRRTarget(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_BDF3C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t OUTLINED_FUNCTION_3_42()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_9_33()
{
  if (v0) {
    uint64_t v2 = 1LL;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, v2, v1);
}

uint64_t OUTLINED_FUNCTION_16_22()
{
  return v1(v0, v2);
}

uint64_t OUTLINED_FUNCTION_18_22()
{
  return type metadata accessor for PhonePerson(0LL);
}

uint64_t OUTLINED_FUNCTION_19_20()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_22_18()
{
  if (v0) {
    uint64_t v2 = 1LL;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, v2, v1);
}

void *OUTLINED_FUNCTION_24_15( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *(*a9)(uint64_t *__return_ptr, uint64_t *), uint64_t a10, uint64_t a11, uint64_t a12)
{
  a12 = v12;
  return a9(&a11, &a12);
}

uint64_t OUTLINED_FUNCTION_29_15@<X0>(unint64_t a1@<X8>)
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v1 + 1, 1LL);
}

uint64_t OUTLINED_FUNCTION_30_14(void *a1)
{
  return dispatch thunk of DeviceState.siriLocale.getter(v1, v2);
}

uint64_t OUTLINED_FUNCTION_31_17()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_33_19()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_41_11()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_42_7@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return 0LL;
}

id OUTLINED_FUNCTION_43_5()
{
  return *(id *)(v0 + 32);
}

uint64_t OUTLINED_FUNCTION_44_11()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 224) + 8LL))(v0, *(void *)(v1 - 216));
}

uint64_t OUTLINED_FUNCTION_51_6()
{
  return dispatch thunk of DeviceState.siriLocale.getter(v0, v1);
}

uint64_t OUTLINED_FUNCTION_53_6()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2 - 200, v0);
}

uint64_t OUTLINED_FUNCTION_54_3@<X0>(uint64_t (*a1)(uint64_t)@<X8>)
{
  return a1(v1);
}

void *OUTLINED_FUNCTION_56_5()
{
  return __swift_project_boxed_opaque_existential_1((void *)(v1 - 120), v0);
}

uint64_t OUTLINED_FUNCTION_59_5()
{
  return v2(v1, v0);
}

uint64_t OUTLINED_FUNCTION_60_6()
{
  return static Device.current.getter();
}

uint64_t OUTLINED_FUNCTION_61_4()
{
  return (*(uint64_t (**)(void))(v0 - 88))();
}

uint64_t OUTLINED_FUNCTION_63_3()
{
  return v2(v0, v1);
}

  ;
}

void OUTLINED_FUNCTION_74_3()
{
}

void OUTLINED_FUNCTION_75_2()
{
}

uint64_t static DisambiguationItemUtils.getUpdatedPersonList(selectedIndex:selectedPerson:persons:)( uint64_t a1, void *a2, uint64_t a3)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v6 = OUTLINED_FUNCTION_15_1();
  uint64_t v7 = (void *)__swift_project_value_buffer(v6, (uint64_t)static Logger.siriPhone);
  uint64_t v8 = swift_bridgeObjectRetain_n(a3, 2LL);
  __int128 v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v11 = static os_log_type_t.debug.getter(v9, v10);
  uint64_t v12 = &unk_31F000;
  if (os_log_type_enabled(v9, v11))
  {
    uint64_t v44 = a2;
    uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v14 = OUTLINED_FUNCTION_7_0(32LL);
    v48[0] = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v46 = a3;
    OUTLINED_FUNCTION_124();
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]?);
    uint64_t v16 = String.init<A>(describing:)(&v46, v15);
    uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v48);
    uint64_t v12 = (void *)&unk_31F000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v13 + 4);
    OUTLINED_FUNCTION_28_16();
    OUTLINED_FUNCTION_34_0();
    OUTLINED_FUNCTION_57_0(&dword_0, v9, v11, "getUpdatedPersonList# initial contacts: %s", v13);
    OUTLINED_FUNCTION_17_0(v14);
    OUTLINED_FUNCTION_0_2(v14);
    uint64_t v18 = (uint64_t)v13;
    a2 = v44;
    OUTLINED_FUNCTION_0_2(v18);

    if (!a3) {
      goto LABEL_22;
    }
  }

  else
  {

    OUTLINED_FUNCTION_28_16();
    if (!a3)
    {
LABEL_22:
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v30 = swift_allocObject(v29, 40LL, 7LL);
      *(_OWORD *)(v30 + ++*(void *)(v0 + 16) = xmmword_31FE60;
      *(void *)(v30 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a2;
      v48[0] = v30;
      specialized Array._endMutation()(v30, v31, v32, v33);
      uint64_t v49 = v48[0];
      id v27 = a2;
      goto LABEL_23;
    }
  }

  if ((unint64_t)a3 >> 62)
  {
    if (a3 >= 0) {
      uint64_t v28 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v28 = a3;
    }
    OUTLINED_FUNCTION_124();
    if (!_CocoaArrayWrapper.endIndex.getter(v28)) {
      goto LABEL_21;
    }
    OUTLINED_FUNCTION_124();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v19 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8LL));
    OUTLINED_FUNCTION_124();
    if (!v19)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
  }

  if (v19 <= a1) {
    goto LABEL_21;
  }
  id v20 = a2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject(a3);
  uint64_t v49 = a3;
  if ((unint64_t)a3 >> 62 || (result & 1) == 0)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(a3);
    a3 = result;
    uint64_t v49 = result;
  }

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }

  if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8LL)) <= (unint64_t)a1)
  {
LABEL_27:
    __break(1u);
    return result;
  }

  uint64_t v22 = *(void **)((char *)&stru_20.cmd + 8 * a1 + (a3 & 0xFFFFFFFFFFFFFF8LL));
  *(void *)((char *)&stru_20.cmd + 8 * a1 + (a3 & 0xFFFFFFFFFFFFFF8LL)) = v20;

  id v27 = (id)specialized Array._endMutation()(v23, v24, v25, v26);
LABEL_23:
  Logger.logObject.getter(v27);
  os_log_type_t v34 = OUTLINED_FUNCTION_41();
  if (OUTLINED_FUNCTION_87(v34))
  {
    uint64_t v35 = (_DWORD *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v36 = OUTLINED_FUNCTION_7_0(32LL);
    v48[0] = v36;
    *uint64_t v35 = v12[237];
    OUTLINED_FUNCTION_22_0((uint64_t)&v49, (uint64_t)&v46);
    unint64_t v37 = type metadata accessor for INPerson();
    uint64_t v38 = swift_bridgeObjectRetain();
    uint64_t v39 = Array.description.getter(v38, v37);
    unint64_t v41 = v40;
    swift_bridgeObjectRelease();
    uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v35 + 1);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_9_4(&dword_0, v42, v43, "getUpdatedPersonList# updated contacts: %s");
    OUTLINED_FUNCTION_17_0(v36);
    OUTLINED_FUNCTION_0_2(v36);
    OUTLINED_FUNCTION_0_2((uint64_t)v35);
  }

  OUTLINED_FUNCTION_22_0((uint64_t)&v49, (uint64_t)v48);
  return v49;
}

void static DisambiguationItemUtils.getPersonsList(container:)()
{
  uint64_t v0 = type metadata accessor for SiriKitDisambiguationItemPair(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v5 = (char *)v33 - v4;
  unint64_t v42 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<SiriKitDisambiguationItemPair>);
  uint64_t v7 = PaginatedItemContainer.items.getter(v6);
  uint64_t v9 = *(void *)(v7 + 16);
  if (v9)
  {
    uint64_t v10 = *(unsigned __int8 *)(v1 + 80);
    v33[1] = v7;
    uint64_t v11 = v7 + ((v10 + 32) & ~v10);
    uint64_t v12 = *(void *)(v1 + 72);
    uint64_t v39 = *(void *)(v1 + 16);
    uint64_t v38 = (char *)&type metadata for Any + 8;
    *(void *)&__int128 v8 = 136315138LL;
    __int128 v34 = v8;
    uint64_t v36 = v0;
    uint64_t v37 = v1;
    uint64_t v35 = v12;
    do
    {
      uint64_t v13 = OUTLINED_FUNCTION_23_18((uint64_t)v5, v11);
      SiriKitDisambiguationItemPair.rawItem.getter(v41, v13);
      type metadata accessor for INPerson();
      if (swift_dynamicCast(&v40, v41, v38))
      {
        id v14 = v40;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
        unint64_t v16 = *(void *)((char *)&dword_10 + (v42 & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v15 = *(void *)((char *)&dword_18 + (v42 & 0xFFFFFFFFFFFFFF8LL));
        if (v16 >= v15 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1LL);
        }
        uint64_t v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
        specialized Array._endMutation()(v17, v18, v19, v20);

        (*(void (**)(char *, uint64_t))(v1 + 8))(v5, v0);
      }

      else
      {
        if (one-time initialization token for siriPhone != -1) {
          swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
        }
        uint64_t v21 = OUTLINED_FUNCTION_15_1();
        __swift_project_value_buffer(v21, (uint64_t)static Logger.siriPhone);
        uint64_t v22 = OUTLINED_FUNCTION_23_18((uint64_t)v3, (uint64_t)v5);
        uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
        os_log_type_t v24 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v23, v24))
        {
          uint64_t v25 = OUTLINED_FUNCTION_7_0(12LL);
          uint64_t v26 = (void *)OUTLINED_FUNCTION_7_0(32LL);
          id v40 = v26;
          *(_DWORD *)uint64_t v25 = v34;
          SiriKitDisambiguationItemPair.rawItem.getter(v41, v26);
          uint64_t v27 = String.init<A>(describing:)(v41, (char *)&type metadata for Any + 8);
          *(void *)(v25 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, (uint64_t *)&v40);
          swift_bridgeObjectRelease();
          uint64_t v29 = *(void (**)(char *, uint64_t))(v37 + 8);
          v29(v3, v36);
          OUTLINED_FUNCTION_57_0( &dword_0,  v23,  v24,  "getPersonsList# couldn't retrieve pair %s as an INPerson object",  (uint8_t *)v25);
          swift_arrayDestroy(v26, 1LL);
          uint64_t v30 = (uint64_t)v26;
          uint64_t v0 = v36;
          OUTLINED_FUNCTION_0_2(v30);
          uint64_t v31 = v25;
          uint64_t v12 = v35;
          OUTLINED_FUNCTION_0_2(v31);

          v29(v5, v0);
          uint64_t v1 = v37;
        }

        else
        {

          uint64_t v32 = *(void (**)(char *, uint64_t))(v1 + 8);
          v32(v3, v0);
          v32(v5, v0);
        }
      }

      v11 += v12;
      --v9;
    }

    while (v9);
  }

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_5();
}

void static DisambiguationItemUtils.getSelectedPersonByName(nameComponents:persons:)(char *a1, uint64_t a2)
{
  unint64_t v5 = (unint64_t)v106 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v7 = (uint64_t)v106 - v6;
  __chkstk_darwin();
  OUTLINED_FUNCTION_15();
  uint64_t v118 = v8;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  uint64_t v10 = (uint64_t)v106 - v9;
  __chkstk_darwin();
  uint64_t v12 = (char *)v106 - v11;
  __chkstk_darwin();
  OUTLINED_FUNCTION_15();
  uint64_t v119 = v13;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  unint64_t v15 = (char *)v106 - v14;
  __chkstk_darwin();
  uint64_t v17 = (uint64_t)v106 - v16;
  __chkstk_darwin();
  OUTLINED_FUNCTION_15();
  uint64_t v120 = v18;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  OUTLINED_FUNCTION_15();
  uint64_t v116 = v19;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  OUTLINED_FUNCTION_15();
  uint64_t v115 = v20;
  OUTLINED_FUNCTION_33();
  __chkstk_darwin();
  uint64_t v22 = (char *)v106 - v21;
  uint64_t v23 = *(void **)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain();
  if (v23)
  {
    while (1)
    {
      uint64_t v113 = v15;
      uint64_t v114 = v17;
      uint64_t v111 = v12;
      uint64_t v112 = v10;
      unint64_t v109 = v5;
      uint64_t v110 = v7;
      uint64_t v17 = 0LL;
      id v108 = 0LL;
      unint64_t v5 = 0LL;
      uint64_t v12 = (char *)(a2 & 0xC000000000000001LL);
      uint64_t v117 = a2 & 0xFFFFFFFFFFFFFF8LL;
      *(void *)&__int128 v24 = 136315138LL;
      __int128 v107 = v24;
      v106[1] = (char *)&type metadata for Any + 8;
      unint64_t v15 = (_BYTE *)(&CameraControlFlow + 64);
      uint64_t v121 = a2;
      while (v12)
      {
        uint64_t v25 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a2);
LABEL_8:
        uint64_t v124 = v25;
        if (__OFADD__(v5, 1LL))
        {
          __break(1u);
LABEL_106:

          goto LABEL_117;
        }

        uint64_t v122 = v5;
        uint64_t v123 = (void *)(v5 + 1);
        outlined init with copy of PersonNameComponents?((uint64_t)a1, (uint64_t)v22);
        uint64_t v7 = type metadata accessor for PersonNameComponents(0LL);
        uint64_t v26 = OUTLINED_FUNCTION_34_5((uint64_t)v22);
        if (v42)
        {
          outlined destroy of PersonNameComponents?((uint64_t)v22);
          goto LABEL_26;
        }

        uint64_t v10 = PersonNameComponents.givenName.getter(v26);
        unint64_t v5 = v27;
        (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v22, v7);
        if (v5)
        {
          id v28 = OUTLINED_FUNCTION_8_27();
          if (v28)
          {
            uint64_t v29 = v28;
            OUTLINED_FUNCTION_17_29();

            uint64_t v30 = 0LL;
          }

          else
          {
            uint64_t v30 = 1LL;
          }

          uint64_t v31 = OUTLINED_FUNCTION_6_38((uint64_t)v28, v30);
          uint64_t v32 = v115;
          OUTLINED_FUNCTION_25_24(v31);
          uint64_t v33 = OUTLINED_FUNCTION_9_34();
          if ((_DWORD)v33)
          {
LABEL_83:
            OUTLINED_FUNCTION_32_13();
LABEL_84:
            OUTLINED_FUNCTION_7_40();
            OUTLINED_FUNCTION_34_0();
            goto LABEL_96;
          }

          __int128 v34 = v12;
          uint64_t v35 = v23;
          uint64_t v36 = a1;
          uint64_t v37 = v22;
          uint64_t v38 = v32;
          uint64_t v39 = PersonNameComponents.givenName.getter(v33);
          uint64_t v41 = v40;
          outlined destroy of PersonNameComponents?(v38);
          if (v41)
          {
            BOOL v42 = v10 == v39 && v5 == v41;
            uint64_t v22 = v37;
            if (v42)
            {
              OUTLINED_FUNCTION_34_0();
              OUTLINED_FUNCTION_62();
              LOBYTE(OUTLINED_FUNCTION_1_31(v6, v7, v17) = 1;
              a1 = v36;
              goto LABEL_25;
            }

            uint64_t v10 = OUTLINED_FUNCTION_3_43();
            OUTLINED_FUNCTION_34_0();
            OUTLINED_FUNCTION_62();
            a1 = v36;
            if ((v10 & 1) != 0)
            {
              LOBYTE(OUTLINED_FUNCTION_1_31(v6, v7, v17) = 1;
LABEL_25:
              uint64_t v23 = v35;
              uint64_t v12 = v34;
              unint64_t v15 = (_BYTE *)(&CameraControlFlow + 64);
              goto LABEL_26;
            }

            OUTLINED_FUNCTION_7_40();
            a2 = v121;
          }

          else
          {
            OUTLINED_FUNCTION_7_40();
            OUTLINED_FUNCTION_34_0();
            a2 = v121;
            uint64_t v22 = v37;
            a1 = v36;
          }

          uint64_t v23 = v35;
          uint64_t v12 = v34;
          unint64_t v15 = (_BYTE *)(&CameraControlFlow + 64);
LABEL_97:
          unint64_t v5 = (unint64_t)v123;
          uint64_t v17 = 1LL;
          if (v123 == v23)
          {
LABEL_100:
            OUTLINED_FUNCTION_62();
            goto LABEL_117;
          }
        }

        else
        {
LABEL_26:
          uint64_t v43 = v120;
          OUTLINED_FUNCTION_26_21((uint64_t)a1);
          uint64_t v44 = OUTLINED_FUNCTION_34_5(v43);
          if (v42)
          {
            OUTLINED_FUNCTION_32_13();
          }

          else
          {
            PersonNameComponents.familyName.getter(v44);
            OUTLINED_FUNCTION_1_39();
            if (v5)
            {
              id v45 = OUTLINED_FUNCTION_8_27();
              if (v45)
              {
                uint64_t v46 = v45;
                uint64_t v47 = v113;
                OUTLINED_FUNCTION_17_29();

                uint64_t v48 = 0LL;
              }

              else
              {
                uint64_t v48 = 1LL;
                uint64_t v47 = v113;
              }

              uint64_t v49 = OUTLINED_FUNCTION_6_38((uint64_t)v45, v48);
              uint64_t v50 = v114;
              OUTLINED_FUNCTION_25_24(v49);
              uint64_t v51 = OUTLINED_FUNCTION_9_34();
              if ((_DWORD)v51) {
                goto LABEL_83;
              }
              PersonNameComponents.familyName.getter(v51);
              OUTLINED_FUNCTION_14_23();
              if (!v50) {
                goto LABEL_84;
              }
              if ((char *)v10 == v47 && v5 == v50)
              {
                OUTLINED_FUNCTION_34_0();
                OUTLINED_FUNCTION_62();
              }

              else
              {
                uint64_t v10 = OUTLINED_FUNCTION_3_43();
                OUTLINED_FUNCTION_34_0();
                OUTLINED_FUNCTION_62();
                if ((v10 & 1) == 0) {
                  goto LABEL_57;
                }
              }

              LOBYTE(OUTLINED_FUNCTION_1_31(v6, v7, v17) = 1;
            }
          }

          uint64_t v53 = v119;
          OUTLINED_FUNCTION_26_21((uint64_t)a1);
          uint64_t v54 = OUTLINED_FUNCTION_34_5(v53);
          if (v42)
          {
            OUTLINED_FUNCTION_32_13();
          }

          else
          {
            PersonNameComponents.middleName.getter(v54);
            OUTLINED_FUNCTION_1_39();
            if (v5)
            {
              id v55 = OUTLINED_FUNCTION_8_27();
              if (v55)
              {
                uint64_t v56 = v55;
                uint64_t v57 = v112;
                OUTLINED_FUNCTION_17_29();

                uint64_t v58 = 0LL;
              }

              else
              {
                uint64_t v58 = 1LL;
                uint64_t v57 = v112;
              }

              uint64_t v59 = OUTLINED_FUNCTION_6_38((uint64_t)v55, v58);
              uint64_t v60 = v111;
              OUTLINED_FUNCTION_25_24(v59);
              uint64_t v61 = OUTLINED_FUNCTION_9_34();
              if ((_DWORD)v61) {
                goto LABEL_83;
              }
              PersonNameComponents.middleName.getter(v61);
              OUTLINED_FUNCTION_14_23();
              if (!v60) {
                goto LABEL_84;
              }
              if (v10 == v57 && v5 == (void)v60)
              {
                OUTLINED_FUNCTION_34_0();
                OUTLINED_FUNCTION_62();
              }

              else
              {
                uint64_t v10 = OUTLINED_FUNCTION_3_43();
                OUTLINED_FUNCTION_34_0();
                OUTLINED_FUNCTION_62();
                if ((v10 & 1) == 0)
                {
LABEL_57:
                  OUTLINED_FUNCTION_7_40();
                  goto LABEL_96;
                }
              }

              LOBYTE(OUTLINED_FUNCTION_1_31(v6, v7, v17) = 1;
            }
          }

          uint64_t v63 = v118;
          OUTLINED_FUNCTION_26_21((uint64_t)a1);
          uint64_t v64 = OUTLINED_FUNCTION_34_5(v63);
          if (v42)
          {
            OUTLINED_FUNCTION_32_13();
          }

          else
          {
            PersonNameComponents.nickname.getter(v64);
            OUTLINED_FUNCTION_1_39();
            if (v5)
            {
              id v65 = OUTLINED_FUNCTION_8_27();
              if (v65)
              {
                uint64_t v66 = v65;
                OUTLINED_FUNCTION_17_29();

                uint64_t v67 = 0LL;
              }

              else
              {
                uint64_t v67 = 1LL;
              }

              uint64_t v69 = OUTLINED_FUNCTION_6_38((uint64_t)v65, v67);
              uint64_t v70 = v110;
              outlined init with take of PersonNameComponents?(v69, v110);
              uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v70, 1LL, v7);
              if ((_DWORD)EnumTagSinglePayload)
              {
                outlined destroy of PersonNameComponents?(v70);
                goto LABEL_72;
              }

              uint64_t v7 = PersonNameComponents.nickname.getter(EnumTagSinglePayload);
              uint64_t v73 = v72;
              outlined destroy of PersonNameComponents?(v70);
              if (v73)
              {
                if (v10 == v7 && v5 == v73)
                {
                  OUTLINED_FUNCTION_34_0();
                  OUTLINED_FUNCTION_62();
LABEL_89:
                  uint64_t v17 = (uint64_t)v108;
                  if (v108)
                  {
                    swift_bridgeObjectRelease();
                    if (one-time initialization token for siriPhone != -1) {
                      swift_once( &one-time initialization token for siriPhone,  one-time initialization function for siriPhone);
                    }
                    uint64_t v90 = OUTLINED_FUNCTION_15_1();
                    __swift_project_value_buffer(v90, (uint64_t)static Logger.siriPhone);
                    a1 = v124;
                    Logger.logObject.getter(a1);
                    os_log_type_t v91 = OUTLINED_FUNCTION_41();
                    if (OUTLINED_FUNCTION_87(v91))
                    {
                      uint64_t v92 = (_DWORD *)OUTLINED_FUNCTION_7_0(12LL);
                      uint64_t v93 = OUTLINED_FUNCTION_7_0(32LL);
                      v126[0] = v93;
                      *uint64_t v92 = v107;
                      uint64_t v94 = a1;
                      id v95 = [v94 description];
                      uint64_t v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
                      id v108 = (char *)v17;
                      unint64_t v98 = v97;

                      uint64_t v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v98, v126);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v92 + 1);

                      swift_bridgeObjectRelease();
                      OUTLINED_FUNCTION_9_4( &dword_0,  v99,  v100,  "getSelectedPerson# found another contact candidate: %s which becomes ambiguous");
                      OUTLINED_FUNCTION_17_0(v93);
                      OUTLINED_FUNCTION_0_2(v93);
                      OUTLINED_FUNCTION_0_2((uint64_t)v92);

                      goto LABEL_117;
                    }

                    goto LABEL_106;
                  }

                  uint64_t v75 = one-time initialization token for siriPhone;
                  uint64_t v76 = v124;
                  if (v75 != -1) {
                    swift_once( &one-time initialization token for siriPhone,  one-time initialization function for siriPhone);
                  }
                  uint64_t v77 = OUTLINED_FUNCTION_15_1();
                  __swift_project_value_buffer(v77, (uint64_t)static Logger.siriPhone);
                  uint64_t v10 = v76;
                  uint64_t v78 = (os_log_s *)Logger.logObject.getter(v10);
                  os_log_type_t v80 = static os_log_type_t.debug.getter(v78, v79);
                  uint64_t v7 = v80;
                  if (os_log_type_enabled(v78, v80))
                  {
                    uint64_t v81 = (char *)OUTLINED_FUNCTION_7_0(12LL);
                    id v108 = v81;
                    uint64_t v122 = OUTLINED_FUNCTION_7_0(32LL);
                    v126[0] = v122;
                    *(_DWORD *)uint64_t v81 = v107;
                    uint64_t v10 = (uint64_t)(id)v10;
                    id v82 = [(id)v10 description];
                    uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
                    unint64_t v85 = v84;

                    uint64_t v86 = v83;
                    unint64_t v15 = (_BYTE *)(&CameraControlFlow + 64);
                    uint64_t v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v85, v126);
                    uint64_t v88 = (uint8_t *)v108;
                    *(void *)(v108 + 4) = v87;

                    OUTLINED_FUNCTION_34_0();
                    OUTLINED_FUNCTION_57_0( &dword_0,  v78,  (os_log_type_t)v7,  "getSelectedPerson# found contact candidate: %s",  v88);
                    uint64_t v89 = v122;
                    swift_arrayDestroy(v122, 1LL);
                    OUTLINED_FUNCTION_0_2(v89);
                    OUTLINED_FUNCTION_0_2((uint64_t)v88);
                  }

                  else
                  {
                  }

                  id v108 = v124;
LABEL_96:
                  a2 = v121;
                  goto LABEL_97;
                }

                uint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v5, v7, v73, 0LL);
                OUTLINED_FUNCTION_34_0();
                OUTLINED_FUNCTION_62();
                if ((v7 & 1) != 0) {
                  goto LABEL_89;
                }
                OUTLINED_FUNCTION_7_40();
              }

              else
              {
LABEL_72:
                OUTLINED_FUNCTION_7_40();
                OUTLINED_FUNCTION_34_0();
              }

              a2 = v121;
              uint64_t v68 = v122;
              if (v123 == v23) {
                goto LABEL_100;
              }
              uint64_t v17 = 1LL;
              goto LABEL_82;
            }
          }

          if ((v17 & 1) != 0) {
            goto LABEL_89;
          }
          OUTLINED_FUNCTION_7_40();
          a2 = v121;
          if (v123 == v23) {
            goto LABEL_112;
          }
          uint64_t v17 = 0LL;
          uint64_t v68 = v122;
LABEL_82:
          unint64_t v5 = v68 + 1;
        }
      }

      if (v5 < *(void *)(v117 + 16)) {
        break;
      }
      __break(1u);
LABEL_108:
      if (a2 < 0) {
        uint64_t v101 = a2;
      }
      else {
        uint64_t v101 = a2 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v23 = (void *)_CocoaArrayWrapper.endIndex.getter(v101);
      if (!v23) {
        goto LABEL_112;
      }
    }

    uint64_t v25 = (char *)*(id *)(a2 + 8 * v5 + 32);
    goto LABEL_8;
  }

uint64_t outlined init with copy of PersonNameComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of PersonNameComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for DisambiguationItemUtils()
{
  return &type metadata for DisambiguationItemUtils;
}

uint64_t OUTLINED_FUNCTION_1_39()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_3_43()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v2, v1, v3, v0, 0LL);
}

uint64_t OUTLINED_FUNCTION_6_38(uint64_t a1, uint64_t a2)
{
  return v3;
}

void OUTLINED_FUNCTION_7_40()
{
}

id OUTLINED_FUNCTION_8_27()
{
  return [*(id *)(v1 - 112) *(SEL *)(v0 + 1864)];
}

uint64_t OUTLINED_FUNCTION_9_34()
{
  return __swift_getEnumTagSinglePayload(v0, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_14_23()
{
  return outlined destroy of PersonNameComponents?(v0);
}

uint64_t OUTLINED_FUNCTION_17_29()
{
  return static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_23_18(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 136))(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_26_21(uint64_t a1)
{
  return outlined init with copy of PersonNameComponents?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_28_16()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t AnnounceCallConfirmationStrategy.wrapped.getter()
{
  return swift_retain(*(void *)(v0 + 16));
}

uint64_t CallingIntentContinueInAppFlow.rchRecord.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (char *)v1 + *(void *)(*v1 + 112);
  uint64_t v5 = OUTLINED_FUNCTION_12_36(v3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v5 - 8) + 16LL))(a1, v4, v5);
}

uint64_t CallingIntentContinueInAppFlow.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + *(void *)(*(void *)v1 + 120LL), a1);
}

id CallingIntentContinueInAppFlow.deviceStateConnection.getter()
{
  return *(id *)(v0 + *(void *)(*(void *)v0 + 128LL));
}

void CallingIntentContinueInAppFlow.__allocating_init(factory:rchRecord:sharedGlobals:deviceStateConnection:)( uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
}

void CallingIntentContinueInAppFlow.init(factory:rchRecord:sharedGlobals:deviceStateConnection:)( uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8 = *v4;
  void v4[2] = a1;
  uint64_t v9 = (char *)v4 + *(void *)(v8 + 112);
  uint64_t v10 = OUTLINED_FUNCTION_12_36(v8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v9, a2, v10);
  outlined init with take of AppSelectionSignalComponent(a3, (uint64_t)v4 + *(void *)(*v4 + 120));
  *(uint64_t *)((char *)v4 + *(void *)(*v4 + __swift_destroy_boxed_opaque_existential_1((void *)(v2 - 128)) = a4;
  OUTLINED_FUNCTION_16();
}

uint64_t (*static CallingIntentContinueInAppFlow.makeProducer(sharedGlobals:)( uint64_t a1))(void *a1, uint64_t a2)
{
  uint64_t v2 = swift_allocObject(&unk_3FB9D8, 64LL, 7LL);
  *(void *)(v2 + ++*(void *)(v0 + 16) = *(void *)(v1 + 96);
  outlined init with take of AppSelectionSignalComponent(v4, v2 + 24);
  return partial apply for closure #1 in static CallingIntentContinueInAppFlow.makeProducer(sharedGlobals:);
}

uint64_t closure #1 in static CallingIntentContinueInAppFlow.makeProducer(sharedGlobals:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t *)(*a1 + class metadata base offset for RCHChildFlowFactory);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  uint64_t v11 = type metadata accessor for IntentResolutionRecord(0LL, *v8, v10);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t v15 = type metadata accessor for CallingIntentContinueInAppFlow(0LL, v9, v10, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  outlined init with copy of SignalProviding(a3, (uint64_t)v22);
  swift_retain();
  id v16 = default argument 3 of CallingIntentContinueInAppFlow.init(factory:rchRecord:sharedGlobals:deviceStateConnection:)();
  CallingIntentContinueInAppFlow.__allocating_init(factory:rchRecord:sharedGlobals:deviceStateConnection:)( (uint64_t)a1,  (uint64_t)v14,  v22,  (uint64_t)v16);
  uint64_t v18 = v17;
  *(void *)&v22[0] = v17;
  swift_getWitnessTable(&protocol conformance descriptor for CallingIntentContinueInAppFlow<A, B>, v15);
  uint64_t v19 = Flow.eraseToAnyFlow()(v15);
  swift_release(v18);
  return v19;
}

uint64_t sub_BF604()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t partial apply for closure #1 in static CallingIntentContinueInAppFlow.makeProducer(sharedGlobals:)( void *a1, uint64_t a2)
{
  return closure #1 in static CallingIntentContinueInAppFlow.makeProducer(sharedGlobals:)( a1,  a2,  v2 + 24,  *(void *)(v2 + 16));
}

uint64_t CallingIntentContinueInAppFlow.execute()(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  v2[18] = *v1;
  return OUTLINED_FUNCTION_33_0((uint64_t)CallingIntentContinueInAppFlow.execute());
}

uint64_t CallingIntentContinueInAppFlow.execute()()
{
  __int128 v34 = (void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 136);
  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v3 = (void *)((char *)v2 + *(void *)(*v2 + 120LL));
  uint64_t v4 = v3[3];
  uint64_t v5 = v3[4];
  OUTLINED_FUNCTION_49_0(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 104))(v4, v5);
  uint64_t v6 = *(void *)(v0 + 48);
  uint64_t v33 = *(void *)(v0 + 40);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v33);
  uint64_t v7 = v1[10];
  uint64_t v8 = v1[11];
  uint64_t v9 = v1[12];
  uint64_t v10 = type metadata accessor for CallingIntentContinueInAppStrategy(0LL, v7, v8, v9);
  outlined init with copy of SignalProviding((uint64_t)v3, v0 + 56);
  default argument 1 of CallingIntentContinueInAppStrategy.init(sharedGlobals:startCallCATsSimple:phoneCallDisplayTextCATsSimple:)( v7,  v8,  v9);
  uint64_t v12 = v11;
  default argument 2 of CallingIntentContinueInAppStrategy.init(sharedGlobals:startCallCATsSimple:phoneCallDisplayTextCATsSimple:)( v7,  v8,  v9);
  CallingIntentContinueInAppStrategy.__allocating_init(sharedGlobals:startCallCATsSimple:phoneCallDisplayTextCATsSimple:)( (__int128 *)(v0 + 56),  v12,  v13);
  uint64_t v15 = v14;
  uint64_t v35 = v0;
  *(void *)(v0 + 96) = v14;
  uint64_t v16 = v0 + 96;
  uint64_t v17 = v2[2];
  uint64_t v18 = (char *)v2 + *(void *)(*v2 + 112LL);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 32);
  uint64_t WitnessTable = swift_getWitnessTable("aq\r", v10);
  uint64_t v21 = v19(v16, v17, v18, v10, WitnessTable, v33, v6);
  *(void *)(v16 + 56) = v21;
  swift_release(v15);
  __swift_destroy_boxed_opaque_existential_1(v34);
  type metadata accessor for IntentResolutionRecord(0LL, v7, v8);
  uint64_t v22 = (os_log_s *)OUTLINED_FUNCTION_30_15();
  OUTLINED_FUNCTION_16_23();
  OUTLINED_FUNCTION_27_19();
  if (v16 == 2)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v23 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v23, (uint64_t)static Logger.siriPhone);
    os_log_type_t v24 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_7(v24))
    {
      uint64_t v25 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
      *(_WORD *)uint64_t v25 = 0;
      OUTLINED_FUNCTION_5( &dword_0,  v22,  (os_log_type_t)v7,  "#CallingIntentContinueInAppFlow emergency call, skipping auth flows",  v25);
      OUTLINED_FUNCTION_0_2((uint64_t)v25);
    }

    uint64_t v26 = v35;

    goto LABEL_15;
  }

  unint64_t v27 = (os_log_s *)OUTLINED_FUNCTION_30_15();
  OUTLINED_FUNCTION_16_23();
  OUTLINED_FUNCTION_27_19();
  if (v16 != 4)
  {
    unint64_t v27 = (os_log_s *)OUTLINED_FUNCTION_30_15();
    OUTLINED_FUNCTION_16_23();
    OUTLINED_FUNCTION_27_19();
    if (v16 != 5)
    {
      uint64_t v26 = v35;
LABEL_15:
      static ExecuteResponse.complete(next:)(v21);
      swift_release(v21);
      return (*(uint64_t (**)(void))(v26 + 8))();
    }
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v28 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v28, (uint64_t)static Logger.siriPhone);
  os_log_type_t v29 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_27_1(v29))
  {
    uint64_t v30 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
    *(_WORD *)uint64_t v30 = 0;
    OUTLINED_FUNCTION_5( &dword_0,  v27,  (os_log_type_t)v21,  "#CallingIntentContinueInAppFlow Pushing redial/callback punchout flow guarded by auth flows",  v30);
    OUTLINED_FUNCTION_0_2((uint64_t)v30);
  }

  uint64_t v31 = (void *)swift_task_alloc(dword_42F464);
  *(void *)(v35 + 160) = v31;
  *uint64_t v31 = v35;
  v31[1] = CallingIntentContinueInAppFlow.execute();
  return CallingIntentContinueInAppFlow.makeRedialCallbackGuardFlow()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_20_18();
  OUTLINED_FUNCTION_18_23();
  *(void *)(v1 + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v0;
  OUTLINED_FUNCTION_28_17(v2);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 152);
  *(void *)(v0 + 104) = v2;
  *(void *)(v0 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v1;
  uint64_t v3 = type metadata accessor for AnyFlow(0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<GuardFlowResult>);
  lazy protocol witness table accessor for type AnyValueFlow<GuardFlowResult> and conformance AnyValueFlow<A>( &lazy protocol witness table cache variable for type AnyValueFlow<GuardFlowResult> and conformance AnyValueFlow<A>,  &demangling cache variable for type metadata for AnyValueFlow<GuardFlowResult>,  (uint64_t)&protocol conformance descriptor for AnyValueFlow<A>);
  uint64_t v5 = Flow.guarded<A>(by:)(v0 + 112, v3, v4, &protocol witness table for AnyFlow);
  *(void *)(v0 + 120) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConditionalFlow<Any>);
  lazy protocol witness table accessor for type AnyValueFlow<GuardFlowResult> and conformance AnyValueFlow<A>( &lazy protocol witness table cache variable for type ConditionalFlow<Any> and conformance ConditionalFlow<A>,  &demangling cache variable for type metadata for ConditionalFlow<Any>,  (uint64_t)&protocol conformance descriptor for ConditionalFlow<A>);
  static ExecuteResponse.complete<A>(next:)(v0 + 120);
  swift_release(v1);
  swift_release(v2);
  swift_release(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CallingIntentContinueInAppFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for CallingIntentContinueInAppFlow( 0LL,  *(void *)(*(void *)v2 + 80LL),  *(void *)(*(void *)v2 + 88LL),  *(void *)(*(void *)v2 + 96LL));
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CallingIntentContinueInAppFlow<A, B>, v5);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v5, WitnessTable);
}

uint64_t CallingIntentContinueInAppFlow.makeRedialCallbackGuardFlow()()
{
  v1[8] = v0;
  void v1[9] = *v0;
  uint64_t v2 = type metadata accessor for UnlockDevicePolicy(0LL);
  v1[10] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[11] = v3;
  v1[12] = OUTLINED_FUNCTION_23(v3);
  uint64_t v4 = type metadata accessor for CommonFlowGuard(0LL);
  v1[13] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[14] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[15] = swift_task_alloc(v6);
  v1[16] = swift_task_alloc(v6);
  uint64_t v7 = (void *)swift_task_alloc(dword_42F51C);
  v1[17] = v7;
  *uint64_t v7 = v1;
  v7[1] = CallingIntentContinueInAppFlow.makeRedialCallbackGuardFlow();
  return CallingIntentContinueInAppFlow.requiresDeviceUnlockForRedialCallback()();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_20_18();
  OUTLINED_FUNCTION_18_23();
  *(_BYTE *)(v1 + 176) = v0;
  OUTLINED_FUNCTION_28_17(v2);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  os_log_type_t v0;
  os_log_s *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v20;
  if (*(_BYTE *)(v3 + 176) == 1)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v7 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v7, (uint64_t)static Logger.siriPhone);
    uint64_t v8 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_27_1(v8))
    {
      uint64_t v9 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
      *(_WORD *)uint64_t v9 = 0;
      OUTLINED_FUNCTION_5( &dword_0,  v1,  v0,  "#CallingIntentContinueInAppFlow Adding device unlock guard for redial/callback",  v9);
      OUTLINED_FUNCTION_0_2((uint64_t)v9);
    }

    uint64_t v5 = *(void *)(v3 + 88);
    uint64_t v10 = *(void *)(v3 + 96);
    uint64_t v4 = *(void *)(v3 + 80);

    static UnlockDevicePolicy.default.getter(v11);
    static CommonFlowGuard.ensuringDeviceIsAuthenticated(using:)(v10);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v10, v4);
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v13 = v12;
    uint64_t v2 = (void *)v12[2];
    if ((unint64_t)v2 >= v12[3] >> 1)
    {
      OUTLINED_FUNCTION_15_25();
      uint64_t v13 = v20;
    }

    OUTLINED_FUNCTION_5_34(*(void *)(v3 + 112));
  }

  else
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }

  *(void *)(v3 + 144) = v13;
  uint64_t v14 = OUTLINED_FUNCTION_12_36(*(void *)(v3 + 72));
  uint64_t v15 = (id)IntentResolutionRecord.intent.getter(v14);
  uint64_t v16 = objc_opt_self(&OBJC_CLASS___INStartCallIntent);
  uint64_t v17 = (void *)OUTLINED_FUNCTION_33_4(v16);
  if (v17)
  {
    uint64_t v2 = [v17 callRecordToCallBack];

    if (v2)
    {
      uint64_t v15 = [v2 providerBundleId];

      if (v15)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        OUTLINED_FUNCTION_35_13();
        *(void *)(v3 + 15__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v13;
        *(void *)(v3 + 160) = v2;
        uint64_t v18 = (void *)swift_task_alloc(dword_42F52C);
        *(void *)(v3 + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v18;
        *uint64_t v18 = v3;
        v18[1] = CallingIntentContinueInAppFlow.makeRedialCallbackGuardFlow();
        return CallingIntentContinueInAppFlow.requiresProtectedAppsUnlock()();
      }
    }
  }

  else
  {
  }

  OUTLINED_FUNCTION_2_32();
  OUTLINED_FUNCTION_6_39();
  OUTLINED_FUNCTION_27_2();
  __swift_destroy_boxed_opaque_existential_1(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(id))(v3 + 8))(v15);
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_20_18();
  OUTLINED_FUNCTION_18_23();
  *(_BYTE *)(v1 + 177) = v0;
  OUTLINED_FUNCTION_28_17(v2);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  char *v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_s *v9;
  os_log_type_t v10;
  BOOL v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  if (*(_BYTE *)(v2 + 177) == 1)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    unint64_t v6 = OUTLINED_FUNCTION_15_1();
    uint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)static Logger.siriPhone);
    uint64_t v8 = OUTLINED_FUNCTION_14_24();
    uint64_t v9 = (os_log_s *)v7;
    Logger.logObject.getter(v8);
    uint64_t v10 = OUTLINED_FUNCTION_6_0();
    uint64_t v11 = OUTLINED_FUNCTION_7(v10);
    uint64_t v3 = *(void *)(v2 + 160);
    if (v11)
    {
      uint64_t v4 = v2 + 56;
      uint64_t v5 = *(void *)(v2 + 152);
      uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v13 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v19 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v2 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v3, &v19);
      OUTLINED_FUNCTION_32_15(v2 + 56, v2 + 64);
      OUTLINED_FUNCTION_32_10(v3);
      _os_log_impl( &dword_0,  v9,  (os_log_type_t)v1,  "#CallingIntentContinueInAppFlow Adding protected app guard for redial/callback using %s",  v12,  0xCu);
      OUTLINED_FUNCTION_36_9();
      OUTLINED_FUNCTION_0_2(v13);
      OUTLINED_FUNCTION_0_2((uint64_t)v12);
    }

    else
    {
      OUTLINED_FUNCTION_7_4(*(void *)(v2 + 160));
    }

    uint64_t v14 = *(void *)(v2 + 144);
    static CommonFlowGuard.ensuringUnlockedApp(_:)(*(void *)(v2 + 152), *(void *)(v2 + 160));
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
    uint64_t v16 = *(void *)(v2 + 144);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      OUTLINED_FUNCTION_15_25();
      uint64_t v16 = v18;
    }

    uint64_t v1 = *(void **)(v16 + 16);
    uint64_t v0 = (char *)v1 + 1;
    OUTLINED_FUNCTION_5_34(*(void *)(v2 + 112));
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  OUTLINED_FUNCTION_2_32();
  OUTLINED_FUNCTION_6_39();
  OUTLINED_FUNCTION_27_2();
  __swift_destroy_boxed_opaque_existential_1(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(char *))(v2 + 8))(v0);
}

uint64_t CallingIntentContinueInAppFlow.requiresDeviceUnlockForRedialCallback()()
{
  v1[7] = v0;
  v1[8] = *v0;
  uint64_t v2 = type metadata accessor for UnlockDevicePolicy(0LL);
  void v1[9] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[10] = v3;
  v1[11] = OUTLINED_FUNCTION_23(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = (void *)(*(void *)(v0 + 56) + *(void *)(**(void **)(v0 + 56) + 120LL));
  uint64_t v5 = v4[3];
  unint64_t v6 = v4[4];
  OUTLINED_FUNCTION_49_0(v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v8 = *(void *)(v0 + 48);
  uint64_t v9 = OUTLINED_FUNCTION_49_0((void *)(v0 + 16));
  static UnlockDevicePolicy.default.getter(v9);
  uint64_t v10 = dispatch thunk of DeviceState.isAuthenticated(for:)(v1, v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  if ((v10 & 1) != 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v11 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v11, (uint64_t)static Logger.siriPhone);
    uint64_t v12 = OUTLINED_FUNCTION_6_0();
    if (!OUTLINED_FUNCTION_93(v12)) {
      goto LABEL_16;
    }
    uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
    *(_WORD *)uint64_t v13 = 0;
    uint64_t v14 = "#CallingIntentContinueInAppFlow device isn't locked, returning requiresUnlock = false";
    goto LABEL_15;
  }

  uint64_t v15 = OUTLINED_FUNCTION_12_36(*(void *)(v0 + 64));
  uint64_t v9 = (void *)IntentResolutionRecord.intent.getter(v15);
  uint64_t v16 = objc_opt_self(&OBJC_CLASS___INStartCallIntent);
  uint64_t v17 = (void *)OUTLINED_FUNCTION_33_4(v16);
  if (v17)
  {
    uint64_t v18 = [v17 callRecordToCallBack];

    if (v18)
    {
      uint64_t v9 = [v18 providerBundleId];

      if (v9)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        OUTLINED_FUNCTION_35_13();
        *(void *)(v0 + 96) = v18;
        uint64_t v19 = (void *)swift_task_alloc(dword_42F524);
        *(void *)(v0 + 104) = v19;
        *uint64_t v19 = v0;
        v19[1] = CallingIntentContinueInAppFlow.requiresDeviceUnlockForRedialCallback();
        return CallingIntentContinueInAppFlow.notificationPreviewsRestricted(for:)(v10, (uint64_t)v18);
      }
    }
  }

  else
  {
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v21 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v21, (uint64_t)static Logger.siriPhone);
  uint64_t v22 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_93(v22))
  {
    uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
    *(_WORD *)uint64_t v13 = 0;
    uint64_t v14 = "#CallingIntentContinueInAppFlow couldn't determine a providerBundleId to redial or call back, assuming requiresUnlock = true";
LABEL_15:
    OUTLINED_FUNCTION_5(&dword_0, (os_log_s *)v9, (os_log_type_t)v1, v14, v13);
    OUTLINED_FUNCTION_0_2((uint64_t)v13);
  }

uint64_t CallingIntentContinueInAppFlow.requiresDeviceUnlockForRedialCallback()(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v5 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 104));
  swift_bridgeObjectRelease();
  swift_task_dealloc(*(void *)(v3 + 88));
  return OUTLINED_FUNCTION_8_3(a1, *(uint64_t (**)(void))(v5 + 8));
}

uint64_t CallingIntentContinueInAppFlow.notificationPreviewsRestricted(for:)(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)CallingIntentContinueInAppFlow.notificationPreviewsRestricted(for:));
}

uint64_t CallingIntentContinueInAppFlow.notificationPreviewsRestricted(for:)()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = *(void **)(v0[18] + *(void *)(*(void *)v0[18] + 128LL));
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = CallingIntentContinueInAppFlow.notificationPreviewsRestricted(for:);
  uint64_t v3 = swift_continuation_init(v0 + 2, 0LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v4 = v0 + 10;
  v4[1] = 0x40000000LL;
  __int128 v4[2] = @objc completion handler block implementation for <A, B>@escaping @callee_unowned @convention(block) (@unowned NSArray?) -> () with result type [String]?;
  void v4[3] = &block_descriptor_0;
  void v4[4] = v3;
  [v2 fetchSiriKitAppIdentifiersWithNotificationPreviewRestrictionsWithCompletion:v4];
  return swift_continuation_await(v1);
}

{
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  os_log_s *v4;
  uint64_t v5;
  os_log_s *v6;
  os_log_type_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  os_log_type_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  if (*(void *)(v0 + 120))
  {
    specialized Sequence<>.contains(_:)(*(void *)(v0 + 128), *(void *)(v0 + 136), *(void **)(v0 + 120));
    uint64_t v2 = v1;
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v3 = OUTLINED_FUNCTION_15_1();
    uint64_t v4 = (os_log_s *)__swift_project_value_buffer(v3, (uint64_t)static Logger.siriPhone);
    uint64_t v5 = OUTLINED_FUNCTION_14_24();
    unint64_t v6 = v4;
    Logger.logObject.getter(v5);
    uint64_t v7 = OUTLINED_FUNCTION_6_0();
    uint64_t v8 = os_log_type_enabled(v4, v7);
    uint64_t v9 = *(void *)(v0 + 136);
    if (!v8)
    {
      OUTLINED_FUNCTION_7_4(*(void *)(v0 + 136));
      goto LABEL_18;
    }

    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v11 = OUTLINED_FUNCTION_7_0(22LL);
    uint64_t v12 = OUTLINED_FUNCTION_7_0(64LL);
    uint64_t v31 = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v13 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v31);
    *(void *)(v0 + 80) = v13;
    OUTLINED_FUNCTION_24_16(v13, v14, v15, v11 + 12);
    OUTLINED_FUNCTION_32_10(v9);
    *(_WORD *)(v11 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    if ((v2 & 1) != 0) {
      uint64_t v16 = 6648417LL;
    }
    else {
      uint64_t v16 = 0x746F6E20657261LL;
    }
    if ((v2 & 1) != 0) {
      uint64_t v17 = 0xE300000000000000LL;
    }
    else {
      uint64_t v17 = 0xE700000000000000LL;
    }
    uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v31);
    *(void *)(v0 + 80) = v18;
    OUTLINED_FUNCTION_24_16(v18, v19, v20, v11 + 22);
    swift_bridgeObjectRelease();
    _os_log_impl( &dword_0,  v6,  v7,  "#CallingIntentContinueInAppFlow Notification previews for %s %s restricted.",  (uint8_t *)v11,  0x16u);
    swift_arrayDestroy(v12, 2LL);
    uint64_t v21 = v12;
  }

  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v22 = OUTLINED_FUNCTION_15_1();
    uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.siriPhone);
    os_log_type_t v24 = OUTLINED_FUNCTION_14_24();
    unint64_t v6 = (os_log_s *)Logger.logObject.getter(v24);
    uint64_t v25 = static os_log_type_t.error.getter();
    uint64_t v26 = OUTLINED_FUNCTION_7(v25);
    unint64_t v27 = *(void *)(v0 + 136);
    if (!v26)
    {
      OUTLINED_FUNCTION_7_4(*(void *)(v0 + 136));

      uint64_t v2 = 1;
      return (*(uint64_t (**)(void))(v0 + 8))(v2 & 1);
    }

    uint64_t v28 = *(void *)(v0 + 128);
    uint64_t v11 = OUTLINED_FUNCTION_7_0(12LL);
    os_log_type_t v29 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v31 = v29;
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, &v31);
    OUTLINED_FUNCTION_32_15(v0 + 80, v0 + 88);
    OUTLINED_FUNCTION_32_10(v27);
    _os_log_impl( &dword_0,  v6,  v23,  "#CallingIntentContinueInAppFlow Got nil when fetching restricted apps, assume previews restricted for app: %s",  (uint8_t *)v11,  0xCu);
    uint64_t v2 = 1;
    OUTLINED_FUNCTION_36_9();
    uint64_t v21 = v29;
  }

  OUTLINED_FUNCTION_0_2(v21);
  OUTLINED_FUNCTION_0_2(v11);
LABEL_18:

  return (*(uint64_t (**)(void))(v0 + 8))(v2 & 1);
}

uint64_t @objc completion handler block implementation for <A, B>@escaping @callee_unowned @convention(block) (@unowned NSArray?) -> () with result type [String]?( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (a2) {
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String);
  }
  else {
    uint64_t v5 = 0LL;
  }
  return specialized _resumeUnsafeContinuation<A>(_:_:)(v4, v5);
}

uint64_t specialized _resumeUnsafeContinuation<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  outlined init with take of [String]?((uint64_t)&v4, *(void *)(*(void *)(a1 + 64) + 40LL));
  return swift_continuation_resume(a1);
}

uint64_t CallingIntentContinueInAppFlow.requiresProtectedAppsUnlock()()
{
  *(void *)(v1 + ++*(void *)(v0 + 16) = v0;
  return OUTLINED_FUNCTION_33_0((uint64_t)CallingIntentContinueInAppFlow.requiresProtectedAppsUnlock());
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v1 = (void *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 120LL));
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  OUTLINED_FUNCTION_49_0(v1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(v2, v3);
  LOBYTE(closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)(v0, v1, v2) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 256LL))(v4);
  swift_release(v4);
  return OUTLINED_FUNCTION_8_3(v2 & 1, *(uint64_t (**)(void))(v0 + 8));
}

void *CallingIntentContinueInAppFlow.deinit()
{
  uint64_t v1 = *v0;
  swift_release(v0[2]);
  uint64_t v2 = (char *)v0 + *(void *)(*v0 + 112LL);
  uint64_t v3 = type metadata accessor for IntentResolutionRecord(0LL, *(void *)(v1 + 80), *(void *)(v1 + 88));
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((void *)((char *)v0 + *(void *)(*v0 + 120LL)));

  return v0;
}

uint64_t CallingIntentContinueInAppFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t protocol witness for Flow.on(input:) in conformance CallingIntentContinueInAppFlow<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144LL))() & 1;
}

uint64_t protocol witness for Flow.execute() in conformance CallingIntentContinueInAppFlow<A, B>(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 152LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance ContactNeedsValueGuardFlow<A>;
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance CallingIntentContinueInAppFlow<A, B>( uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for CallingIntentContinueInAppFlow(0LL, a1[10], a1[11], a1[12]);
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t lazy protocol witness table accessor for type AnyValueFlow<GuardFlowResult> and conformance AnyValueFlow<A>( unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t type metadata accessor for CallingIntentContinueInAppFlow( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for CallingIntentContinueInAppFlow);
}

uint64_t type metadata completion function for CallingIntentContinueInAppFlow(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for IntentResolutionRecord(319LL, *(void *)(a1 + 80), *(void *)(a1 + 88));
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    __int128 v4[2] = "(";
    void v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 4LL, v4, a1 + 104);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

unint64_t type metadata accessor for INIntentResponse()
{
  unint64_t result = lazy cache variable for type metadata for INIntentResponse;
  if (!lazy cache variable for type metadata for INIntentResponse)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___INIntentResponse);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INIntentResponse);
  }

  return result;
}

uint64_t outlined init with take of [String]?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_2_32()
{
  uint64_t v1 = (void *)(*(void *)(v0 + 64) + *(void *)(**(void **)(v0 + 64) + 120LL));
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 104))(v2, v3);
}

uint64_t OUTLINED_FUNCTION_6_39()
{
  uint64_t v3 = *(void *)(v2 + 40);
  uint64_t v4 = *(void *)(v2 + 48);
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v0, v3, v4);
}

uint64_t OUTLINED_FUNCTION_12_36@<X0>(uint64_t a1@<X8>)
{
  return type metadata accessor for IntentResolutionRecord(0LL, *(void *)(a1 + 80), *(void *)(a1 + 88));
}

uint64_t OUTLINED_FUNCTION_14_24()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

void OUTLINED_FUNCTION_15_25()
{
}

uint64_t OUTLINED_FUNCTION_16_23()
{
  return v2(v0, v1);
}

void OUTLINED_FUNCTION_18_23()
{
  *(void *)(v1 - __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *v0;
}

void OUTLINED_FUNCTION_20_18()
{
  *(void *)(v1 - __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_24_16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4, v5, v6, a4);
}

uint64_t OUTLINED_FUNCTION_28_17@<X0>(uint64_t a1@<X8>)
{
  return swift_task_dealloc(a1);
}

uint64_t OUTLINED_FUNCTION_30_15()
{
  return IntentResolutionRecord.intent.getter();
}

uint64_t OUTLINED_FUNCTION_32_15(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v3, v2);
}

void OUTLINED_FUNCTION_35_13()
{
}

uint64_t OUTLINED_FUNCTION_36_9()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t DisambiguationItemFactory.buildDisambiguationItemList(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for TaskPriority(0LL);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 1LL, 1LL, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))( (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v5,  a3);
  uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v16 = (v15 + 64) & ~v15;
  uint64_t v17 = (char *)swift_allocObject(&unk_3FBB40, v16 + v11, v15 | 7);
  *((void *)v17 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
  *((void *)v17 + __swift_destroy_boxed_opaque_existential_1(v0 + 3) = 0LL;
  *((void *)v17 + 4) = a3;
  *((void *)v17 + __swift_destroy_boxed_opaque_existential_1(v0 + 5) = a4;
  *((void *)v17 + 6) = a1;
  *((void *)v17 + 7) = a2;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))( &v17[v16],  (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a3);
  swift_retain();
  uint64_t v18 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v13,  (uint64_t)&async function pointer to partial apply for closure #1 in DisambiguationItemFactory.buildDisambiguationItemList(_:),  (uint64_t)v17);
  return swift_release(v18);
}

uint64_t closure #1 in DisambiguationItemFactory.buildDisambiguationItemList(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[2] = a4;
  v8[3] = a5;
  uint64_t v11 = (void *)swift_task_alloc(dword_42F554);
  v8[4] = v11;
  *uint64_t v11 = v8;
  v11[1] = closure #1 in DisambiguationItemFactory.buildDisambiguationItemList(_:);
  return DisambiguationItemFactory.buildDisambiguationItemList()(a7, a8);
}

uint64_t closure #1 in DisambiguationItemFactory.buildDisambiguationItemList(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32LL);
  *(void *)(*(void *)v1 + 4OUTLINED_FUNCTION_25_0(v1 + 24, (uint64_t)v8, 0LL) = a1;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t closure #1 in DisambiguationItemFactory.buildDisambiguationItemList(_:)()
{
  uint64_t v1 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 16))(v1);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_C0F44()
{
  uint64_t v1 = *((void *)v0 + 4);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*((void *)v0 + 2));
  swift_release(*((void *)v0 + 7));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in DisambiguationItemFactory.buildDisambiguationItemList(_:)( uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL);
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[6];
  uint64_t v10 = v1[7];
  uint64_t v11 = (uint64_t)v1 + ((v6 + 64) & ~v6);
  uint64_t v12 = (void *)swift_task_alloc(dword_42F544);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = protocol witness for Flow.execute() in conformance ContactNeedsValueGuardFlow<A>;
  return closure #1 in DisambiguationItemFactory.buildDisambiguationItemList(_:)(a1, v7, v8, v9, v10, v11, v4, v5);
}

uint64_t DisambiguationItemFactory.buildDisambiguationItemList()(uint64_t a1, uint64_t a2)
{
  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  uint64_t v6 = (void *)swift_task_alloc(dword_42F55C);
  v3[16] = v6;
  *uint64_t v6 = v3;
  v6[1] = DisambiguationItemFactory.buildDisambiguationItemList();
  return DisambiguationItemFactory.buildDisambiguationItems()(a1, a2);
}

uint64_t DisambiguationItemFactory.buildDisambiguationItemList()(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 136LL) = a1;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t DisambiguationItemFactory.buildDisambiguationItemList()()
{
  uint64_t v1 = v0 + 13;
  uint64_t v2 = v0 + 2;
  uint64_t v3 = v0 + 7;
  uint64_t v25 = v0[17];
  uint64_t v4 = (*(uint64_t (**)(void, void))(v0[14] + 16LL))(v0[13], v0[14]);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL);
  uint64_t v24 = _arrayForceCast<A, B>(_:)(v4, AssociatedTypeWitness, (char *)&type metadata for Any + 8);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_9_35();
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  __swift_project_boxed_opaque_existential_1(v2, *(v1 - 8));
  LOBYTE(v7) = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  OUTLINED_FUNCTION_9_35();
  uint64_t v8 = *(v1 - 3);
  uint64_t v9 = *(v1 - 2);
  __swift_project_boxed_opaque_existential_1(v3, v8);
  LOBYTE(OUTLINED_FUNCTION_5_18(v2, v3, v4) = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
  uint64_t v10 = type metadata accessor for SiriKitDisambiguationList(0LL);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  uint64_t v11 = SiriKitDisambiguationList.init(rawItems:disambiguationItems:shouldReadItemsInVox:requestUnlockForEmptyOrDuplicateItems:)( v24,  v25,  v7 & 1,  v4 & 1);
  __swift_destroy_boxed_opaque_existential_1(v3);
  __swift_destroy_boxed_opaque_existential_1(v2);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
  uint64_t v13 = swift_retain_n(v11, 2LL);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v16 = static os_log_type_t.debug.getter(v14, v15);
  if (os_log_type_enabled(v14, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v27 = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    swift_retain();
    SiriKitDisambiguationList.description.getter();
    uint64_t v20 = v19;
    unint64_t v22 = v21;
    swift_release(v11);
    *(v1 - 1) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 1, v1, v17 + 4);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_17_30();
    _os_log_impl(&dword_0, v14, v16, "Finished building SiriKitDisambiguationList: %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1LL);
    OUTLINED_FUNCTION_0_2(v18);
    OUTLINED_FUNCTION_0_2((uint64_t)v17);
  }

  else
  {
    OUTLINED_FUNCTION_17_30();
  }

  return (*(uint64_t (**)(uint64_t))(v26 + 8))(v11);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(a1, 1LL, v6);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    outlined destroy of TaskPriority?(a1);
    uint64_t v8 = "/System/Library/PrivateFrameworks/SiriFlowEnvironment.framework/SiriFlowEnvironment";
  }

  else
  {
    unsigned __int8 v9 = TaskPriority.rawValue.getter(EnumTagSinglePayload);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v8 = (char *)(v9 | 0x1C00LL);
  }

  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    uint64_t v15 = v14;
    swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  uint64_t v16 = swift_allocObject(&unk_3FBBB8, 32LL, 7LL);
  *(void *)(v16 + ++*(void *)(v0 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  if (v15 | v13)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    uint64_t v17 = v19;
    v19[2] = v13;
    void v19[3] = v15;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  return swift_task_create( v8,  v17,  (char *)&type metadata for () + 8,  &_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATu,  v16);
}

uint64_t DisambiguationItemFactory.buildDisambiguationItems()(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL);
  void v3[9] = AssociatedTypeWitness;
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  v3[10] = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  v3[11] = v6;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[12] = swift_task_alloc(v7);
  v3[13] = swift_task_alloc(v7);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t DisambiguationItemFactory.buildDisambiguationItems()()
{
  *(void *)(v0 + ++*(void *)(v0 + 16) = _swiftEmptyArrayStorage;
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)(v0 + 56) + 16LL))(*(void *)(v0 + 48));
  *(void *)(v0 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v2;
  uint64_t v3 = Array.startIndex.getter();
  *(void *)(v0 + 24) = v3;
  if (v3 == Array.endIndex.getter(v2, v1))
  {
    OUTLINED_FUNCTION_34_0();
    uint64_t v4 = *(void *)(v0 + 96);
    swift_task_dealloc(*(void *)(v0 + 104));
    swift_task_dealloc(v4);
    return OUTLINED_FUNCTION_3_44((uint64_t)_swiftEmptyArrayStorage, *(uint64_t (**)(void))(v0 + 8));
  }

  uint64_t v6 = *(int **)(v0 + 112);
  BOOL v7 = OUTLINED_FUNCTION_10_30();
  OUTLINED_FUNCTION_18_24(v3, v7);
  if (v7)
  {
    (*(void (**)(void, unint64_t, void))(*(void *)(v0 + 80) + 16LL))( *(void *)(v0 + 104),  *(void *)(v0 + 112)
    + ((*(unsigned __int8 *)(*(void *)(v0 + 80) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0 + 80) + 80LL))
    + *(void *)(*(void *)(v0 + 80) + 72LL) * v3,
      *(void *)(v0 + 72));
LABEL_5:
    int v8 = OUTLINED_FUNCTION_5_35();
    OUTLINED_FUNCTION_4_40(v8, v9, v10, v11, v12, v13, v14, v15, v28);
    OUTLINED_FUNCTION_34_0();
    OUTLINED_FUNCTION_8_28();
    uint64_t v16 = (__n128 *)swift_task_alloc(48LL);
    OUTLINED_FUNCTION_12_37(v16, v17, v18, v19, v20, v21, v22, v23, v24);
    uint64_t v25 = swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    OUTLINED_FUNCTION_13_32(v25);
    *(void *)uint64_t v6 = v0;
    *((void *)v6 + 1) = DisambiguationItemFactory.buildDisambiguationItems();
    OUTLINED_FUNCTION_7_41();
    return OUTLINED_FUNCTION_2_33();
  }

  uint64_t v6 = *(int **)(v0 + 88);
  uint64_t result = _ArrayBuffer._getElementSlowPath(_:)(v3, *(void *)(v0 + 112), *(void *)(v0 + 72));
  if (v6 == &dword_8)
  {
    uint64_t v26 = result;
    uint64_t v27 = *(void *)(v0 + 80);
    *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = result;
    OUTLINED_FUNCTION_15_26(v27);
    swift_unknownObjectRelease(v26);
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v1 = *(void *)(*(void *)v0 + 120LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 96LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 72LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 80LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 128LL));
  swift_task_dealloc(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  OUTLINED_FUNCTION_19_1();
  return swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  __n128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v2);
  uint64_t v4 = *(void *)((char *)&dword_10 + (*(void *)(v0 + 16) & 0xFFFFFFFFFFFFFF8LL));
  uint64_t v3 = *(void *)((char *)&dword_18 + (*(void *)(v0 + 16) & 0xFFFFFFFFFFFFFF8LL));
  if (v4 >= v3 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1LL);
  }
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 72);
  BOOL v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, v1);
  specialized Array._endMutation()(v7, v8, v9, v10);
  swift_release(v1);
  int v11 = *(void *)(v0 + 24);
  int v12 = Array.endIndex.getter(v5, v6);
  int v13 = *(int **)(v0 + 112);
  if (v11 == v12)
  {
    OUTLINED_FUNCTION_34_0();
    int v14 = *(void *)(v0 + 16);
    int v15 = *(void *)(v0 + 96);
    swift_task_dealloc(*(void *)(v0 + 104));
    swift_task_dealloc(v15);
    return OUTLINED_FUNCTION_3_44(v14, *(uint64_t (**)(void))(v0 + 8));
  }

  uint64_t v17 = OUTLINED_FUNCTION_10_30();
  OUTLINED_FUNCTION_18_24(v11, v17);
  if (v17)
  {
    OUTLINED_FUNCTION_15_26(*(void *)(v0 + 80));
LABEL_7:
    uint64_t v18 = OUTLINED_FUNCTION_5_35();
    OUTLINED_FUNCTION_4_40(v18, v19, v20, v21, v22, v23, v24, v25, v38);
    OUTLINED_FUNCTION_34_0();
    OUTLINED_FUNCTION_8_28();
    uint64_t v26 = (__n128 *)swift_task_alloc(48LL);
    OUTLINED_FUNCTION_12_37(v26, v27, v28, v29, v30, v31, v32, v33, v34);
    uint64_t v35 = swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    OUTLINED_FUNCTION_13_32(v35);
    *(void *)int v13 = v0;
    *((void *)v13 + 1) = DisambiguationItemFactory.buildDisambiguationItems();
    OUTLINED_FUNCTION_7_41();
    return OUTLINED_FUNCTION_2_33();
  }

  int v13 = *(int **)(v0 + 88);
  uint64_t result = _ArrayBuffer._getElementSlowPath(_:)(v11, *(void *)(v0 + 112), *(void *)(v0 + 72));
  if (v13 == &dword_8)
  {
    uint64_t v36 = result;
    uint64_t v37 = *(void *)(v0 + 80);
    *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = result;
    OUTLINED_FUNCTION_15_26(v37);
    swift_unknownObjectRelease(v36);
    goto LABEL_7;
  }

  __break(1u);
  return result;
}

uint64_t closure #1 in DisambiguationItemFactory.buildDisambiguationItems()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SiriKitDisambiguationItem, Never>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))( (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v9);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 16) & ~v12;
  uint64_t v14 = swift_allocObject(&unk_3FBB68, v13 + v11, v12 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))( v14 + v13,  (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v9);
  uint64_t v15 = swift_allocObject(&unk_3FBB90, 32LL, 7LL);
  *(void *)(v15 + ++*(void *)(v0 + 16) = _s27PhoneCallFlowDelegatePlugin25DisambiguationItemFactoryPAAE05buildF5Items33_C32737E71944EA4F5AB058928C30BAB3LLSay07SiriKitC00rsfG0CGyYaFyScCyAHs5NeverOGXEfU_yAHnYucALcfu_yAHnYucfu0_TA;
  *(void *)(v15 + 24) = v14;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(a5 + 40))( a3,  _s11SiriKitFlow0aB18DisambiguationItemCIegxT_ACIegg_TRTA,  v15,  a4,  a5);
  return swift_release(v15);
}

uint64_t _s27PhoneCallFlowDelegatePlugin25DisambiguationItemFactoryPAAE05buildF5Items33_C32737E71944EA4F5AB058928C30BAB3LLSay07SiriKitC00rsfG0CGyYaFyScCyAHs5NeverOGXEfU_yAHnYucALcfu_yAHnYucfu0_( uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SiriKitDisambiguationItem, Never>);
  return CheckedContinuation.resume(returning:)(&v3, v1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t partial apply for closure #1 in DisambiguationItemFactory.buildDisambiguationItems()(uint64_t a1)
{
  return closure #1 in DisambiguationItemFactory.buildDisambiguationItems()(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t sub_C1B48()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SiriKitDisambiguationItem, Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t _s27PhoneCallFlowDelegatePlugin25DisambiguationItemFactoryPAAE05buildF5Items33_C32737E71944EA4F5AB058928C30BAB3LLSay07SiriKitC00rsfG0CGyYaFyScCyAHs5NeverOGXEfU_yAHnYucALcfu_yAHnYucfu0_TA( uint64_t a1)
{
  return _s27PhoneCallFlowDelegatePlugin25DisambiguationItemFactoryPAAE05buildF5Items33_C32737E71944EA4F5AB058928C30BAB3LLSay07SiriKitC00rsfG0CGyYaFyScCyAHs5NeverOGXEfU_yAHnYucALcfu_yAHnYucfu0_(a1);
}

uint64_t _s11SiriKitFlow0aB18DisambiguationItemCIegxT_ACIegg_TRTA(uint64_t a1)
{
  return _s11SiriKitFlow0aB18DisambiguationItemCIegxT_ACIegg_TR(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_C1C34()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_42F56C);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))( a1,  v4);
}

uint64_t OUTLINED_FUNCTION_2_33()
{
  return ((uint64_t (*)(void))withCheckedContinuation<A>(isolation:function:_:))();
}

uint64_t OUTLINED_FUNCTION_3_44(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void OUTLINED_FUNCTION_4_40(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
}

uint64_t OUTLINED_FUNCTION_7_41()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_28()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v0, v2);
}

uint64_t OUTLINED_FUNCTION_9_35()
{
  return v0(v1, v2);
}

BOOL OUTLINED_FUNCTION_10_30()
{
  return Array._hoistableIsNativeTypeChecked()();
}

__n128 OUTLINED_FUNCTION_12_37( __n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  *(void *)(v9 + 120) = a1;
  __n128 result = a9;
  a1[1] = a9;
  a1[2].n128_u64[0] = v11;
  a1[2].n128_u64[1] = v10;
  return result;
}

uint64_t OUTLINED_FUNCTION_13_32(uint64_t a1)
{
  *(void *)(v1 + outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 - 168), v0 - 128) = a1;
  return type metadata accessor for SiriKitDisambiguationItem(0LL);
}

uint64_t OUTLINED_FUNCTION_15_26@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t OUTLINED_FUNCTION_17_30()
{
  return swift_release_n(v0, 2LL);
}

uint64_t OUTLINED_FUNCTION_18_24(uint64_t a1, uint64_t a2)
{
  return Array._checkSubscript(_:wasNativeTypeChecked:)(a1, a2, v2, v3);
}

void *VoiceCommandsStartCallDirectAction.identifier.unsafeMutableAddressor()
{
  return &static VoiceCommandsStartCallDirectAction.identifier;
}

unint64_t static VoiceCommandsStartCallDirectAction.identifier.getter()
{
  return 0xD00000000000003CLL;
}

PhoneCallFlowDelegatePlugin::VoiceCommandsStartCallDirectAction_optional __swiftcall VoiceCommandsStartCallDirectAction.init(from:)( Swift::OpaquePointer from)
{
  if (!*((void *)from._rawValue + 2)) {
    goto LABEL_7;
  }
  unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(0x6449707061LL, 0xE500000000000000LL);
  if ((v3 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v4 = outlined init with copy of Any(*((void *)from._rawValue + 7) + 32 * v2, (uint64_t)&v28);
  uint64_t v12 = v24;
  unint64_t v11 = (void *)v27;
  specialized Dictionary.subscript.getter(0x746E65746E69LL, 0xE600000000000000LL, (uint64_t)from._rawValue, &v28);
  swift_bridgeObjectRelease();
  if (!v29)
  {
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)&v28);
    goto LABEL_8;
  }

  unint64_t v13 = type metadata accessor for INStartCallIntent();
  if ((OUTLINED_FUNCTION_0_37(v13, v14, v15, v13, v16, v17, v18, v19, v24, v27, v28) & 1) == 0)
  {
LABEL_7:
    swift_bridgeObjectRelease();
LABEL_8:
    uint64_t v12 = 0LL;
    unint64_t v11 = 0LL;
    uint64_t v20 = 0LL;
    goto LABEL_9;
  }

  uint64_t v20 = v25;
LABEL_9:
  uint64_t v21 = v12;
  uint64_t v22 = v11;
  result.value.intent.super.super.Class isa = v20;
  result.value.appId._object = v22;
  result.value.appId._uint64_t countAndFlagsBits = v21;
  return result;
}

uint64_t VoiceCommandsStartCallDirectAction.toDictionary()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject(v6, &v10);
  *(_OWORD *)(inited + ++*(void *)(v0 + 16) = xmmword_31D880;
  *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0x6449707061LL;
  *(void *)(inited + 40) = 0xE500000000000000LL;
  *(void *)(inited + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a1;
  *(void *)(inited + 56) = a2;
  *(void *)(inited + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = &type metadata for String;
  *(void *)(inited + 80) = 0x746E65746E69LL;
  *(void *)(inited + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0xE600000000000000LL;
  *(void *)(inited + 120) = type metadata accessor for INStartCallIntent();
  *(void *)(inited + 96) = a3;
  swift_bridgeObjectRetain();
  id v8 = a3;
  return Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
}

unint64_t type metadata accessor for INStartCallIntent()
{
  unint64_t result = lazy cache variable for type metadata for INStartCallIntent;
  if (!lazy cache variable for type metadata for INStartCallIntent)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___INStartCallIntent);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INStartCallIntent);
  }

  return result;
}

void destroy for VoiceCommandsStartCallDirectAction(uint64_t a1)
{
}

void *initializeBufferWithCopyOfBuffer for VoiceCommandsStartCallDirectAction(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  id v5 = v4;
  return a1;
}

void *assignWithCopy for VoiceCommandsStartCallDirectAction(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = (void *)a2[2];
  uint64_t v7 = (void *)a1[2];
  a1[2] = v6;
  id v8 = v6;

  return a1;
}

void *assignWithTake for VoiceCommandsStartCallDirectAction(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = (void *)a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for VoiceCommandsStartCallDirectAction(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)(v0, v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)(v0, v1, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)(v0, v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VoiceCommandsStartCallDirectAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0LL;
    *(void *)(result + ++*(void *)(v0 + 16) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for VoiceCommandsStartCallDirectAction()
{
  return &type metadata for VoiceCommandsStartCallDirectAction;
}

uint64_t OUTLINED_FUNCTION_0_37( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  return swift_dynamicCast(&a9, &a11, v11 + 8, a4, 6LL);
}

uint64_t static ContactSlotResolver.makeMulticardinalResolver<A>(multicardinalIndex:rchFlowContext:sharedGlobals:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  char v29 = a2 & 1;
  if ((a2 & 1) != 0) {
    a1 = 0LL;
  }
  uint64_t v28 = a1;
  uint64_t v30 = type metadata accessor for AnyIntentResolver(255LL, a6, a3, (uint64_t)a4);
  uint64_t v11 = type metadata accessor for _ContiguousArrayStorage(0LL, v30);
  uint64_t v12 = OUTLINED_FUNCTION_6_40(v11);
  uint64_t v13 = static Array._adoptStorage(_:count:)(v12, 2LL);
  OUTLINED_FUNCTION_4_41(v13, (uint64_t)v33);
  OUTLINED_FUNCTION_7_42(v32);
  uint64_t v14 = OUTLINED_FUNCTION_5_36(v33, v32, (uint64_t)v34);
  uint64_t v18 = OUTLINED_FUNCTION_2_34(v14, v15, v16, v17);
  OUTLINED_FUNCTION_3_45((uint64_t)&protocol conformance descriptor for EmergencyContactSlotResolver<A>);
  OUTLINED_FUNCTION_0_38();
  uint64_t v19 = (*(uint64_t (**)(__int128 *, uint64_t))(*(void *)(v18 - 8) + 8LL))(v34, v18);
  uint64_t v23 = OUTLINED_FUNCTION_1_40(v19, v20, v21, v22);
  OUTLINED_FUNCTION_4_41(v23, (uint64_t)v34);
  uint64_t v24 = SiriInferenceContactSlotResolver.__allocating_init(rchFlowContext:sharedGlobals:updateStrategy:)( a3,  (uint64_t)a4,  (uint64_t)a5,  v34,  v28,  v29);
  *(void *)&v34[0] = v24;
  id v25 = a5;
  swift_retain();
  id v26 = a4;
  OUTLINED_FUNCTION_3_45((uint64_t)&protocol conformance descriptor for SiriInferenceContactSlotResolver<A>);
  OUTLINED_FUNCTION_0_38();
  swift_release(v24);
  type metadata accessor for Array(0LL, v30);
  static SKIntentResolverChain.firstHit<A>(_:)(a7);
  return swift_bridgeObjectRelease();
}

uint64_t static ContactSlotResolver.make<A>(rchFlowContext:sharedGlobals:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v31 = type metadata accessor for AnyIntentResolver(255LL, a5, (uint64_t)a3, a4);
  uint64_t v12 = type metadata accessor for _ContiguousArrayStorage(0LL, v31);
  uint64_t v13 = OUTLINED_FUNCTION_6_40(v12);
  uint64_t v14 = static Array._adoptStorage(_:count:)(v13, 2LL);
  OUTLINED_FUNCTION_4_41(v14, (uint64_t)v34);
  OUTLINED_FUNCTION_7_42(v33);
  uint64_t v15 = OUTLINED_FUNCTION_5_36(v34, v33, (uint64_t)v35);
  uint64_t v19 = OUTLINED_FUNCTION_2_34(v15, v16, v17, v18);
  OUTLINED_FUNCTION_3_45((uint64_t)&protocol conformance descriptor for EmergencyContactSlotResolver<A>);
  OUTLINED_FUNCTION_0_38();
  uint64_t v20 = (*(uint64_t (**)(__int128 *, uint64_t))(*(void *)(v19 - 8) + 8LL))(v35, v19);
  uint64_t v24 = OUTLINED_FUNCTION_1_40(v20, v21, v22, v23);
  OUTLINED_FUNCTION_4_41(v24, (uint64_t)v35);
  uint64_t v25 = variable initialization expression of IdentifyIncomingCallerDirectAction.handleType(a5, a6);
  uint64_t v27 = SiriInferenceContactSlotResolver.__allocating_init(rchFlowContext:sharedGlobals:updateStrategy:)( a1,  (uint64_t)a2,  (uint64_t)a3,  v35,  v25,  v26 & 1);
  *(void *)&v35[0] = v27;
  id v28 = a3;
  swift_retain();
  id v29 = a2;
  OUTLINED_FUNCTION_3_45((uint64_t)&protocol conformance descriptor for SiriInferenceContactSlotResolver<A>);
  OUTLINED_FUNCTION_0_38();
  swift_release(v27);
  type metadata accessor for Array(0LL, v31);
  static SKIntentResolverChain.firstHit<A>(_:)(a7);
  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for ContactSlotResolver()
{
  return &type metadata for ContactSlotResolver;
}

uint64_t OUTLINED_FUNCTION_0_38()
{
  return SKIntentResolver.toAnyIntentResolver()(v1, v0);
}

uint64_t OUTLINED_FUNCTION_1_40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for SiriInferenceContactSlotResolver(0LL, v4, v5, a4);
}

uint64_t OUTLINED_FUNCTION_2_34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for EmergencyContactSlotResolver(0LL, v4, v5, a4);
}

uint64_t OUTLINED_FUNCTION_3_45(uint64_t a1)
{
  return swift_getWitnessTable(a1, v1);
}

uint64_t OUTLINED_FUNCTION_4_41(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of SignalProviding(v2, a2);
}

uint64_t OUTLINED_FUNCTION_6_40(uint64_t a1)
{
  return swift_allocObject(a1, 160LL, 7LL);
}

void OUTLINED_FUNCTION_7_42(void *a1@<X8>)
{
}

PhoneCallFlowDelegatePlugin::StartCallCATPatternsIdentifiers_optional __swiftcall StartCallCATPatternsIdentifiers.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  unint64_t v2 = _findStringSwitchCaseWithCache(cases:string:cache:)( &outlined read-only object #0 of StartCallCATPatternsIdentifiers.init(rawValue:),  rawValue._countAndFlagsBits,  rawValue._object,  &outlined variable #1 of StartCallCATPatternsIdentifiers.init(rawValue:));
  swift_bridgeObjectRelease(object);
  if (v2 >= 0x24) {
    return (PhoneCallFlowDelegatePlugin::StartCallCATPatternsIdentifiers_optional)36;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::StartCallCATPatternsIdentifiers_optional)v2;
  }
}

uint64_t StartCallCATPatternsIdentifiers.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_C258C + 4 * byte_323820[a1]))( 0xD000000000000019LL,  0x80000000003422F0LL);
}

void sub_C258C()
{
}

void protocol witness for static Equatable.== infix(_:_:) in conformance StartCallCATPatternsIdentifiers( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance StartCallCATPatternsIdentifiers()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance StartCallCATPatternsIdentifiers(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance StartCallCATPatternsIdentifiers( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::StartCallCATPatternsIdentifiers_optional protocol witness for RawRepresentable.init(rawValue:) in conformance StartCallCATPatternsIdentifiers@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::StartCallCATPatternsIdentifiers_optional *a2@<X8>)
{
  result.int value = StartCallCATPatternsIdentifiers.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance StartCallCATPatternsIdentifiers( uint64_t *a1@<X8>)
{
  *a1 = StartCallCATPatternsIdentifiers.rawValue.getter(*v1);
  a1[1] = v3;
  OUTLINED_FUNCTION_2();
}

void StartCallUnsupportedCallCapabilityMicrophoneNotAccessibleParameters.appName.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_101_1();
  outlined init with copy of Result<TemplatingResult, Error>( v0,  v1,  &demangling cache variable for type metadata for SpeakableString?);
}

void StartCallConfirmContactsParameters.confirmAction.getter()
{
}

uint64_t type metadata accessor for StartCallConfirmContactsParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for StartCallConfirmContactsParameters,  (uint64_t)&nominal type descriptor for StartCallConfirmContactsParameters);
}

uint64_t StartCallConfirmContactsParameters.confirmAction.setter(uint64_t a1)
{
  return StartCallConfirmContactsParameters.confirmAction.setter( a1,  type metadata accessor for StartCallConfirmContactsParameters);
}

Swift::Void (__swiftcall *StartCallConfirmContactsParameters.confirmAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallConfirmContactsParameters.contactHeader.getter()
{
}

uint64_t StartCallConfirmContactsParameters.contactHeader.setter(uint64_t a1)
{
  return StartCallConfirmContactsParameters.contactHeader.setter( a1,  type metadata accessor for StartCallConfirmContactsParameters);
}

Swift::Void (__swiftcall *StartCallConfirmContactsParameters.contactHeader.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallConfirmContactsParameters.contactToConfirm.getter()
{
  return StartCallConfirmContactsParameters.contactToConfirm.getter(type metadata accessor for StartCallConfirmContactsParameters);
}

void StartCallConfirmContactsParameters.contactToConfirm.setter(uint64_t a1)
{
}

Swift::Void (__swiftcall *StartCallConfirmContactsParameters.contactToConfirm.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallConfirmContactsParameters.inferenceSource.getter()
{
}

uint64_t StartCallConfirmContactsParameters.inferenceSource.setter(uint64_t a1)
{
  return StartCallConfirmContactsParameters.inferenceSource.setter( a1,  type metadata accessor for StartCallConfirmContactsParameters);
}

Swift::Void (__swiftcall *StartCallConfirmContactsParameters.inferenceSource.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallConfirmContactsParameters.isFaceTime.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(OUTLINED_FUNCTION_73_3() + 36));
}

uint64_t StartCallConfirmContactsParameters.isFoundInAppConfirmation.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(OUTLINED_FUNCTION_73_3() + 40));
}

uint64_t StartCallConfirmContactsParameters.isTopMatchConfirmation.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(OUTLINED_FUNCTION_73_3() + 44));
}

uint64_t StartCallConfirmContactsParameters.redactedContactToConfirm.getter()
{
  return swift_retain();
}

void StartCallConfirmContactsParameters.redactedContactToConfirm.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(OUTLINED_FUNCTION_73_3() + 48);
  OUTLINED_FUNCTION_120_2();
  *(void *)(v1 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v1, v2, v3) = a1;
  OUTLINED_FUNCTION_6();
}

Swift::Void (__swiftcall *StartCallConfirmContactsParameters.redactedContactToConfirm.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallConfirmContactsParameters.rejectAction.getter()
{
  uint64_t v1 = type metadata accessor for StartCallConfirmContactsParameters(0LL);
  OUTLINED_FUNCTION_67_5(v0 + *(int *)(v1 + 52), v2, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_2();
}

uint64_t StartCallConfirmContactsParameters.rejectAction.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_122_2();
  return OUTLINED_FUNCTION_16_16(v0, v1);
}

Swift::Void (__swiftcall *StartCallConfirmContactsParameters.rejectAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallConfirmContactsParameters.asKeyValuePairs()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_41_12();
  __chkstk_darwin();
  char v26 = (char *)&a9 - v25;
  __chkstk_darwin();
  id v28 = (char *)&a9 - v27;
  __chkstk_darwin();
  uint64_t v30 = (char *)&a9 - v29;
  __chkstk_darwin();
  OUTLINED_FUNCTION_117();
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v32 = OUTLINED_FUNCTION_8_2(v31, 512LL);
  *(_OWORD *)(v32 + ++*(void *)(v0 + 16) = xmmword_323F70;
  *(void *)(v32 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0x6C646E7542707061LL;
  *(void *)(v32 + 40) = 0xEB00000000644965LL;
  outlined init with copy of Result<TemplatingResult, Error>( v21,  v22,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v33 = OUTLINED_FUNCTION_26_0();
  uint64_t v34 = OUTLINED_FUNCTION_35(v22, 1LL, v33);
  if (v35)
  {
    OUTLINED_FUNCTION_165(v34, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v32 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(_OWORD *)(v32 + 64) = 0u;
  }

  else
  {
    *(void *)(v32 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v33;
    uint64_t v36 = OUTLINED_FUNCTION_183();
    OUTLINED_FUNCTION_86_3( (uint64_t)v36,  v22,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 32LL));
  }

  OUTLINED_FUNCTION_181_0();
  *(void *)(v32 + 80) = v37;
  *(void *)(v32 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0xED00006E6F697463LL;
  uint64_t v38 = (int *)OUTLINED_FUNCTION_73_3();
  uint64_t v39 = OUTLINED_FUNCTION_123_0((uint64_t)v38);
  outlined init with copy of Result<TemplatingResult, Error>( v39,  (uint64_t)v30,  &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_35((uint64_t)v30, 1LL, v33);
  if (v35)
  {
    outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v32 + 96) = 0u;
    *(_OWORD *)(v32 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
  }

  else
  {
    *(void *)(v32 + 120) = v33;
    OUTLINED_FUNCTION_183();
    OUTLINED_FUNCTION_182();
    OUTLINED_FUNCTION_86_3(v40, (uint64_t)v30, v41);
  }

  strcpy((char *)(v32 + 128), "contactHeader");
  *(_WORD *)(v32 + 14__swift_destroy_boxed_opaque_existential_1(v0 + 2) = -4864;
  outlined init with copy of Result<TemplatingResult, Error>( v21 + v38[6],  (uint64_t)v28,  &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_35((uint64_t)v28, 1LL, v33);
  if (v35)
  {
    outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_134_1();
  }

  else
  {
    *(void *)(v32 + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v33;
    OUTLINED_FUNCTION_112_0();
    OUTLINED_FUNCTION_182();
    OUTLINED_FUNCTION_86_3(v42, (uint64_t)v28, v43);
  }

  *(void *)(v32 + 176) = 0xD000000000000010LL;
  *(void *)(v32 + 184) = 0x80000000003490A0LL;
  uint64_t v44 = *(void *)(v21 + v38[7]);
  if (v44)
  {
    uint64_t v45 = OUTLINED_FUNCTION_140_0();
    uint64_t v46 = v44;
  }

  else
  {
    uint64_t v45 = OUTLINED_FUNCTION_159();
  }

  *(void *)(v32 + 19__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v46;
  *(void *)(v32 + 2++*(void *)(v0 + 16) = v45;
  *(void *)(v32 + 224) = 0x636E657265666E69LL;
  *(void *)(v32 + 23__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xEF656372756F5365LL;
  outlined init with copy of Result<TemplatingResult, Error>( v21 + v38[8],  (uint64_t)v26,  &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_35((uint64_t)v26, 1LL, v33);
  if (v35)
  {
    OUTLINED_FUNCTION_59();
    outlined destroy of UUID?((uint64_t)v26, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_134_1();
  }

  else
  {
    *(void *)(v32 + 264) = v33;
    OUTLINED_FUNCTION_112_0();
    OUTLINED_FUNCTION_182();
    OUTLINED_FUNCTION_86_3(v47, (uint64_t)v26, v48);
    OUTLINED_FUNCTION_59();
  }

  OUTLINED_FUNCTION_37_0();
  *(void *)(v32 + 27__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v49;
  *(void *)(v32 + 280) = v50;
  *(_BYTE *)(v32 + 28__swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_BYTE *)(v21 + v38[9]);
  *(void *)(v32 + 31__swift_destroy_boxed_opaque_existential_1(v0 + 2) = &type metadata for Bool;
  *(void *)(v32 + 320) = 0xD000000000000018LL;
  OUTLINED_FUNCTION_56_0();
  *(void *)(v32 + 32__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v51;
  *(_BYTE *)(v32 + 336) = *(_BYTE *)(v21 + v38[10]);
  *(void *)(v32 + 360) = v52;
  *(void *)(v32 + 36__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0xD000000000000016LL;
  OUTLINED_FUNCTION_56_0();
  *(void *)(v32 + 376) = v53;
  *(_BYTE *)(v32 + 384) = *(_BYTE *)(v21 + v38[11]);
  *(void *)(v32 + 40__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v54;
  *(void *)(v32 + 4++*(void *)(v0 + 16) = 0xD000000000000018LL;
  OUTLINED_FUNCTION_56_0();
  *(void *)(v32 + 424) = v55;
  uint64_t v56 = *(void *)(v21 + v38[12]);
  if (v56)
  {
    OUTLINED_FUNCTION_140_0();
    uint64_t v57 = v56;
  }

  else
  {
    OUTLINED_FUNCTION_54_0();
    *(void *)(v32 + 440) = 0LL;
    *(void *)(v32 + 44__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0LL;
  }

  *(void *)(v32 + 43__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v57;
  OUTLINED_FUNCTION_205_0();
  *(void *)(v32 + 456) = v58;
  *(void *)(v32 + 464) = v59;
  *(void *)(v32 + 47__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xEC0000006E6F6974LL;
  OUTLINED_FUNCTION_67_5(v21 + v38[13], v60, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_35(v20, 1LL, v33);
  if (v35)
  {
    uint64_t v61 = OUTLINED_FUNCTION_95_1();
    OUTLINED_FUNCTION_93_1(v61, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_184();
  }

  else
  {
    *(void *)(v32 + 504) = v33;
    uint64_t v62 = OUTLINED_FUNCTION_160();
    OUTLINED_FUNCTION_84_3((uint64_t)v62);
    OUTLINED_FUNCTION_95_1();
  }

  OUTLINED_FUNCTION_203();
  OUTLINED_FUNCTION_7_5();
}

uint64_t StartCallConfirmContactsParameters.init(appBundleId:confirmAction:contactHeader:contactToConfirm:inferenceSource:isFaceTime:isFoundInAppConfirmation:isTopMatchConfirmation:redactedContactToConfirm:rejectAction:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18 = (int *)OUTLINED_FUNCTION_73_3();
  outlined init with take of SpeakableString?(v11, v12 + v18[5]);
  OUTLINED_FUNCTION_198(v18[6]);
  *(void *)(v12 + v18[7]) = v10;
  outlined init with take of SpeakableString?(a5, v12 + v18[8]);
  *(_BYTE *)(v12 + v18[9]) = a6;
  *(_BYTE *)(v12 + v18[10]) = a7;
  *(_BYTE *)(v12 + v18[11]) = a8;
  *(void *)(v12 + v18[12]) = a9;
  return outlined init with take of SpeakableString?(a10, v12 + v18[13]);
}

uint64_t StartCallErrorWithCodeAirplaneModeEnabledParameters.isResponseFramework.getter()
{
  return *(unsigned __int8 *)(v0 + 9);
}

void StartCallErrorWithCodeAirplaneModeEnabledParameters.settingsPunchOutAction.getter()
{
}

uint64_t type metadata accessor for StartCallErrorWithCodeAirplaneModeEnabledParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for StartCallErrorWithCodeAirplaneModeEnabledParameters,  (uint64_t)&nominal type descriptor for StartCallErrorWithCodeAirplaneModeEnabledParameters);
}

uint64_t StartCallErrorWithCodeAirplaneModeEnabledParameters.settingsPunchOutAction.setter(uint64_t a1)
{
  return StartCallErrorWithCodeAirplaneModeEnabledParameters.settingsPunchOutAction.setter( a1,  type metadata accessor for StartCallErrorWithCodeAirplaneModeEnabledParameters);
}

Swift::Void (__swiftcall *StartCallErrorWithCodeAirplaneModeEnabledParameters.settingsPunchOutAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallErrorWithCodeAirplaneModeEnabledParameters.asKeyValuePairs()()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_8_2(v2, 224LL);
  OUTLINED_FUNCTION_42_1((__n128 *)v3, (__n128)xmmword_31F580);
  uint64_t v4 = *v1;
  if (*v1)
  {
    uint64_t v5 = OUTLINED_FUNCTION_50_6();
    uint64_t v6 = v4;
  }

  else
  {
    uint64_t v5 = OUTLINED_FUNCTION_75_3();
  }

  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v6;
  *(void *)(v3 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v5;
  *(void *)(v3 + 80) = 0x656772656D457369LL;
  *(void *)(v3 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0xEB0000000079636ELL;
  *(_BYTE *)(v3 + 96) = *((_BYTE *)v1 + 8);
  *(void *)(v3 + 120) = &type metadata for Bool;
  *(void *)(v3 + outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 - 168), v0 - 128) = 0xD000000000000013LL;
  *(void *)(v3 + 136) = 0x8000000000349120LL;
  *(_BYTE *)(v3 + 144) = *((_BYTE *)v1 + 9);
  *(void *)(v3 + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = &type metadata for Bool;
  *(void *)(v3 + 176) = 0xD000000000000016LL;
  OUTLINED_FUNCTION_173((uint64_t)"settingsPunchOutAction");
  uint64_t v7 = type metadata accessor for StartCallErrorWithCodeAirplaneModeEnabledParameters(0LL);
  OUTLINED_FUNCTION_67_5( (uint64_t)v1 + *(int *)(v7 + 28),  v8,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_35(v0, 1LL, v9);
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_29_3();
    OUTLINED_FUNCTION_93_1(v11, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v3 + 19__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
    *(_OWORD *)(v3 + 20__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
  }

  else
  {
    *(void *)(v3 + 2++*(void *)(v0 + 16) = v9;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v3 + 192));
    OUTLINED_FUNCTION_25_25( (uint64_t)boxed_opaque_existential_1,  v0,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL));
    OUTLINED_FUNCTION_29_3();
  }

  OUTLINED_FUNCTION_16();
}

uint64_t StartCallErrorWithCodeAirplaneModeEnabledParameters.init(device:isEmergency:isResponseFramework:settingsPunchOutAction:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = a1;
  *(_BYTE *)(a4 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = a2;
  *(_BYTE *)(a4 + __swift_destroy_boxed_opaque_existential_1(v0 + 9) = a3;
  type metadata accessor for StartCallErrorWithCodeAirplaneModeEnabledParameters(0LL);
  uint64_t v4 = OUTLINED_FUNCTION_122_2();
  return OUTLINED_FUNCTION_153_0(v4, v5);
}

uint64_t StartCallErrorWithCodeAppConfigurationRequiredParameters.isThirdPartyApp.getter()
{
  uint64_t v0 = type metadata accessor for StartCallErrorWithCodeAppConfigurationRequiredParameters(0LL);
  return OUTLINED_FUNCTION_196(v0);
}

uint64_t type metadata accessor for StartCallErrorWithCodeAppConfigurationRequiredParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for StartCallErrorWithCodeAppConfigurationRequiredParameters,  (uint64_t)&nominal type descriptor for StartCallErrorWithCodeAppConfigurationRequiredParameters);
}

void StartCallErrorWithCodeAppConfigurationRequiredParameters.launchAppPunchOutAction.getter()
{
}

void StartCallConfirmContactsParameters.contactHeader.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = OUTLINED_FUNCTION_76_5(a1);
  OUTLINED_FUNCTION_67_5(v1 + *(int *)(v2 + 24), v3, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_2();
}

uint64_t StartCallErrorWithCodeAppConfigurationRequiredParameters.launchAppPunchOutAction.setter(uint64_t a1)
{
  return StartCallConfirmContactsParameters.contactHeader.setter( a1,  type metadata accessor for StartCallErrorWithCodeAppConfigurationRequiredParameters);
}

uint64_t StartCallConfirmContactsParameters.contactHeader.setter( uint64_t a1, uint64_t (*a2)(void))
{
  return OUTLINED_FUNCTION_16_16(v2, v3);
}

Swift::Void (__swiftcall *StartCallErrorWithCodeAppConfigurationRequiredParameters.launchAppPunchOutAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallErrorWithCodeAppConfigurationRequiredParameters.asKeyValuePairs()()
{
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void, __n128);
  uint64_t (*v4)(void, __n128);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  OUTLINED_FUNCTION_163();
  uint64_t v4 = v3;
  uint64_t v5 = v1;
  OUTLINED_FUNCTION_131();
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_41_12();
  __chkstk_darwin();
  OUTLINED_FUNCTION_117();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v7 = OUTLINED_FUNCTION_8_2(v6, 176LL);
  *(_OWORD *)(v7 + ++*(void *)(v0 + 16) = xmmword_320080;
  OUTLINED_FUNCTION_135_1(v7);
  outlined init with copy of Result<TemplatingResult, Error>( v5,  v2,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_26_0();
  uint64_t v9 = OUTLINED_FUNCTION_34_5(v2);
  if (v10)
  {
    OUTLINED_FUNCTION_165(v9, &demangling cache variable for type metadata for SpeakableString?);
    v12.n128_f64[0] = OUTLINED_FUNCTION_184();
  }

  else
  {
    *(void *)(v7 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v8;
    uint64_t v11 = OUTLINED_FUNCTION_160();
    OUTLINED_FUNCTION_71_4( (uint64_t)v11,  v2,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL));
  }

  *(void *)(v7 + 80) = 0x5064726968547369LL;
  *(void *)(v7 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0xEF70704179747261LL;
  *(_BYTE *)(v7 + 96) = *(_BYTE *)(v5 + *(int *)(v4(0LL, v12) + 20));
  *(void *)(v7 + 120) = &type metadata for Bool;
  *(void *)(v7 + outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 - 168), v0 - 128) = 0xD000000000000017LL;
  OUTLINED_FUNCTION_56_0();
  *(void *)(v7 + 136) = v13;
  OUTLINED_FUNCTION_67_5( v5 + *(int *)(v14 + 24),  v15,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_34_5(v0);
  if (v10)
  {
    OUTLINED_FUNCTION_93_1(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_162_0();
  }

  else
  {
    *(void *)(v7 + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v8;
    uint64_t v17 = OUTLINED_FUNCTION_137_0();
    OUTLINED_FUNCTION_71_4( (uint64_t)v17,  v0,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL));
  }

  OUTLINED_FUNCTION_58();
}

uint64_t StartCallErrorWithCodeAppConfigurationRequiredParameters.init(appName:isThirdPartyApp:launchAppPunchOutAction:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return StartCallErrorWithCodeAppConfigurationRequiredParameters.init(appName:isThirdPartyApp:launchAppPunchOutAction:)( a1,  a2,  a3,  type metadata accessor for StartCallErrorWithCodeAppConfigurationRequiredParameters,  a4);
}

void StartCallErrorWithCodeCallInProgressParameters.asKeyValuePairs()(uint64_t a1, uint64_t a2)
{
}

uint64_t StartCallErrorWithCodeCallingServiceNotAvailableParameters.isThirdPartyApp.getter()
{
  uint64_t v0 = type metadata accessor for StartCallErrorWithCodeCallingServiceNotAvailableParameters(0LL);
  return OUTLINED_FUNCTION_196(v0);
}

uint64_t type metadata accessor for StartCallErrorWithCodeCallingServiceNotAvailableParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for StartCallErrorWithCodeCallingServiceNotAvailableParameters,  (uint64_t)&nominal type descriptor for StartCallErrorWithCodeCallingServiceNotAvailableParameters);
}

void StartCallErrorWithCodeCallingServiceNotAvailableParameters.launchAppPunchOutAction.getter()
{
}

uint64_t StartCallErrorWithCodeCallingServiceNotAvailableParameters.launchAppPunchOutAction.setter( uint64_t a1)
{
  return StartCallConfirmContactsParameters.contactHeader.setter( a1,  type metadata accessor for StartCallErrorWithCodeCallingServiceNotAvailableParameters);
}

Swift::Void (__swiftcall *StartCallErrorWithCodeCallingServiceNotAvailableParameters.launchAppPunchOutAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallErrorWithCodeCallingServiceNotAvailableParameters.asKeyValuePairs()()
{
}

uint64_t StartCallErrorWithCodeCallingServiceNotAvailableParameters.init(appName:isThirdPartyApp:launchAppPunchOutAction:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return StartCallErrorWithCodeAppConfigurationRequiredParameters.init(appName:isThirdPartyApp:launchAppPunchOutAction:)( a1,  a2,  a3,  type metadata accessor for StartCallErrorWithCodeCallingServiceNotAvailableParameters,  a4);
}

uint64_t StartCallErrorWithCodeAppConfigurationRequiredParameters.init(appName:isThirdPartyApp:launchAppPunchOutAction:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a4(0LL);
  *(_BYTE *)(a5 + *(int *)(v9 + 20)) = a2;
  return OUTLINED_FUNCTION_72_5(a3, a5 + *(int *)(v9 + 24));
}

uint64_t StartCallErrorWithCodeContactNotSupportedByAppParameters.isThirdPartyApp.getter()
{
  uint64_t v0 = type metadata accessor for StartCallErrorWithCodeContactNotSupportedByAppParameters(0LL);
  return OUTLINED_FUNCTION_196(v0);
}

uint64_t type metadata accessor for StartCallErrorWithCodeContactNotSupportedByAppParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for StartCallErrorWithCodeContactNotSupportedByAppParameters,  (uint64_t)&nominal type descriptor for StartCallErrorWithCodeContactNotSupportedByAppParameters);
}

void StartCallErrorWithCodeContactNotSupportedByAppParameters.launchAppPunchOutAction.getter()
{
}

uint64_t StartCallErrorWithCodeContactNotSupportedByAppParameters.launchAppPunchOutAction.setter(uint64_t a1)
{
  return StartCallConfirmContactsParameters.contactHeader.setter( a1,  type metadata accessor for StartCallErrorWithCodeContactNotSupportedByAppParameters);
}

Swift::Void (__swiftcall *StartCallErrorWithCodeContactNotSupportedByAppParameters.launchAppPunchOutAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallErrorWithCodeContactNotSupportedByAppParameters.asKeyValuePairs()()
{
}

uint64_t StartCallErrorWithCodeContactNotSupportedByAppParameters.init(appName:isThirdPartyApp:launchAppPunchOutAction:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return StartCallErrorWithCodeAppConfigurationRequiredParameters.init(appName:isThirdPartyApp:launchAppPunchOutAction:)( a1,  a2,  a3,  type metadata accessor for StartCallErrorWithCodeContactNotSupportedByAppParameters,  a4);
}

uint64_t StartCallErrorWithCodeDownTimeRestrictionEnabledParameters.intent.getter(uint64_t a1, uint64_t a2)
{
  return swift_retain(a2);
}

void StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.intent.setter()
{
  *(void *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v0;
  OUTLINED_FUNCTION_2();
}

void StartCallErrorWithCodeDownTimeRestrictionEnabledParameters.asKeyValuePairs()(uint64_t a1, uint64_t a2)
{
}

void INStartVideoCallIntent.faceTimeLink.getter()
{
}

void StartCallIntentConfirmationParameters.asKeyValuePairs()(uint64_t a1)
{
}

void StartCallIntentConfirmationWithRestrictedContactsParameters.confirmAction.getter()
{
}

void StartCallConfirmContactsParameters.confirmAction.getter(uint64_t (*a1)(void))
{
  uint64_t v1 = OUTLINED_FUNCTION_76_5(a1);
  uint64_t v2 = OUTLINED_FUNCTION_123_0(v1);
  OUTLINED_FUNCTION_67_5(v2, v3, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_2();
}

uint64_t type metadata accessor for StartCallIntentConfirmationWithRestrictedContactsParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for StartCallIntentConfirmationWithRestrictedContactsParameters,  (uint64_t)&nominal type descriptor for StartCallIntentConfirmationWithRestrictedContactsParameters);
}

uint64_t StartCallIntentConfirmationWithRestrictedContactsParameters.confirmAction.setter(uint64_t a1)
{
  return StartCallConfirmContactsParameters.confirmAction.setter( a1,  type metadata accessor for StartCallIntentConfirmationWithRestrictedContactsParameters);
}

uint64_t StartCallConfirmContactsParameters.confirmAction.setter( uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = OUTLINED_FUNCTION_122_2();
  return OUTLINED_FUNCTION_16_16(v2, v3);
}

Swift::Void (__swiftcall *StartCallIntentConfirmationWithRestrictedContactsParameters.confirmAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallIntentConfirmationWithRestrictedContactsParameters.intent.getter()
{
  return StartCallIntentConfirmationWithRestrictedContactsParameters.intent.getter(type metadata accessor for StartCallIntentConfirmationWithRestrictedContactsParameters);
}

void StartCallIntentConfirmationWithRestrictedContactsParameters.intent.setter(uint64_t a1)
{
}

Swift::Void (__swiftcall *StartCallIntentConfirmationWithRestrictedContactsParameters.intent.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallIntentConfirmationWithRestrictedContactsParameters.rejectAction.getter()
{
}

void StartCallErrorWithCodeAirplaneModeEnabledParameters.settingsPunchOutAction.getter( uint64_t (*a1)(void))
{
  uint64_t v2 = OUTLINED_FUNCTION_76_5(a1);
  OUTLINED_FUNCTION_67_5(v1 + *(int *)(v2 + 28), v3, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_2();
}

uint64_t StartCallIntentConfirmationWithRestrictedContactsParameters.rejectAction.setter(uint64_t a1)
{
  return StartCallErrorWithCodeAirplaneModeEnabledParameters.settingsPunchOutAction.setter( a1,  type metadata accessor for StartCallIntentConfirmationWithRestrictedContactsParameters);
}

uint64_t StartCallErrorWithCodeAirplaneModeEnabledParameters.settingsPunchOutAction.setter( uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = OUTLINED_FUNCTION_122_2();
  return OUTLINED_FUNCTION_16_16(v2, v3);
}

Swift::Void (__swiftcall *StartCallIntentConfirmationWithRestrictedContactsParameters.rejectAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallIntentConfirmationWithRestrictedContactsParameters.restrictedContacts.getter()
{
  return swift_retain();
}

void StartCallIntentConfirmationWithRestrictedContactsParameters.restrictedContacts.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(OUTLINED_FUNCTION_98_3() + 32);
  OUTLINED_FUNCTION_120_2();
  *(void *)(v1 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v1, v2, v3) = a1;
  OUTLINED_FUNCTION_6();
}

Swift::Void (__swiftcall *StartCallIntentConfirmationWithRestrictedContactsParameters.restrictedContacts.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallIntentConfirmationWithRestrictedContactsParameters.asKeyValuePairs()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  a17 = v20;
  a18 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v23 = (char *)&a9 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  OUTLINED_FUNCTION_117();
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v25 = OUTLINED_FUNCTION_8_2(v24, 272LL);
  *(_OWORD *)(v25 + ++*(void *)(v0 + 16) = xmmword_323F80;
  *(void *)(v25 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0x436465776F6C6C61LL;
  *(void *)(v25 + 40) = 0xEF73746361746E6FLL;
  uint64_t v26 = *v18;
  if (*v18)
  {
    OUTLINED_FUNCTION_125_1();
    uint64_t v27 = v26;
  }

  else
  {
    OUTLINED_FUNCTION_54_0();
    *(void *)(v25 + 56) = 0LL;
    *(void *)(v25 + 64) = 0LL;
  }

  *(void *)(v25 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v27;
  OUTLINED_FUNCTION_181_0();
  *(void *)(v25 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v28;
  *(void *)(v25 + 80) = v29;
  *(void *)(v25 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0xED00006E6F697463LL;
  uint64_t v30 = (int *)OUTLINED_FUNCTION_98_3();
  uint64_t v31 = OUTLINED_FUNCTION_123_0((uint64_t)v30);
  outlined init with copy of Result<TemplatingResult, Error>( v31,  v19,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v32 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_34_5(v19);
  if (v33)
  {
    uint64_t v34 = OUTLINED_FUNCTION_59();
    OUTLINED_FUNCTION_165(v34, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_134_1();
  }

  else
  {
    *(void *)(v25 + 120) = v32;
    char v35 = OUTLINED_FUNCTION_112_0();
    OUTLINED_FUNCTION_71_4( (uint64_t)v35,  v19,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 32LL));
    OUTLINED_FUNCTION_59();
  }

  OUTLINED_FUNCTION_177();
  *(void *)(v25 + outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 - 168), v0 - 128) = v36;
  *(void *)(v25 + 136) = v37;
  uint64_t v38 = *(uint64_t *)((char *)v18 + v30[6]);
  if (v38)
  {
    OUTLINED_FUNCTION_142_0();
    uint64_t v39 = v38;
  }

  else
  {
    OUTLINED_FUNCTION_54_0();
    *(void *)(v25 + 15__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
    *(void *)(v25 + 160) = 0LL;
  }

  *(void *)(v25 + 144) = v39;
  OUTLINED_FUNCTION_205_0();
  *(void *)(v25 + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v40;
  *(void *)(v25 + 176) = v41;
  *(void *)(v25 + 184) = 0xEC0000006E6F6974LL;
  outlined init with copy of Result<TemplatingResult, Error>( (uint64_t)v18 + v30[7],  (uint64_t)v23,  &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_34_5((uint64_t)v23);
  if (v33)
  {
    uint64_t v42 = OUTLINED_FUNCTION_95();
    OUTLINED_FUNCTION_150(v42, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_184();
  }

  else
  {
    *(void *)(v25 + 2++*(void *)(v0 + 16) = v32;
    uint64_t v43 = OUTLINED_FUNCTION_160();
    OUTLINED_FUNCTION_61_5((uint64_t)v43);
    OUTLINED_FUNCTION_95();
  }

  OUTLINED_FUNCTION_179();
  *(void *)(v25 + 224) = v44;
  *(void *)(v25 + 23__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v45;
  uint64_t v46 = *(uint64_t *)((char *)v18 + v30[8]);
  if (v46)
  {
    uint64_t v47 = OUTLINED_FUNCTION_125_1();
  }

  else
  {
    uint64_t v47 = 0LL;
    *(void *)(v25 + 24__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0LL;
    *(void *)(v25 + 256) = 0LL;
  }

  *(void *)(v25 + 240) = v46;
  *(void *)(v25 + 264) = v47;
  UsoEntity_common_Person.usoPerson.getter();
  OUTLINED_FUNCTION_58();
}

void StartCallIntentConfirmationWithRestrictedContactsParameters.init()(void *a1@<X8>)
{
  *a1 = 0LL;
  uint64_t v2 = OUTLINED_FUNCTION_98_3();
  uint64_t v3 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_115_0(v3);
  uint64_t v5 = OUTLINED_FUNCTION_89_3(v4);
  __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  *(void *)((char *)a1 + *(int *)(v2 + 3OUTLINED_FUNCTION_14_1(*((void *)*v1 + 2)) = 0LL;
  OUTLINED_FUNCTION_6();
}

void StartCallIntentConfirmationWithRestrictedContactsParameters.init(allowedContacts:confirmAction:intent:rejectAction:restrictedContacts:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  *a5 = a1;
  uint64_t v10 = OUTLINED_FUNCTION_98_3();
  OUTLINED_FUNCTION_132_1(v10);
  *(void *)((char *)a5 + v5[6]) = a2;
  outlined init with take of SpeakableString?(a3, (uint64_t)a5 + v5[7]);
  *(void *)((char *)a5 + v5[8]) = a4;
  OUTLINED_FUNCTION_16();
}

uint64_t StartCallIntentHandledResponseParameters.device.getter()
{
  return StartCallIntentHandledResponseParameters.device.getter(type metadata accessor for StartCallIntentHandledResponseParameters);
}

uint64_t type metadata accessor for StartCallIntentHandledResponseParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for StartCallIntentHandledResponseParameters,  (uint64_t)&nominal type descriptor for StartCallIntentHandledResponseParameters);
}

void StartCallIntentHandledResponseParameters.device.setter(uint64_t a1)
{
}

Swift::Void (__swiftcall *StartCallIntentHandledResponseParameters.device.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallIntentHandledResponseParameters.hintIdentifier.getter()
{
}

uint64_t StartCallIntentHandledResponseParameters.hintIdentifier.setter(uint64_t a1)
{
  return StartCallConfirmContactsParameters.contactHeader.setter( a1,  type metadata accessor for StartCallIntentHandledResponseParameters);
}

Swift::Void (__swiftcall *StartCallIntentHandledResponseParameters.hintIdentifier.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallIntentHandledResponseParameters.intent.getter()
{
  return StartCallConfirmContactsParameters.contactToConfirm.getter(type metadata accessor for StartCallIntentHandledResponseParameters);
}

uint64_t StartCallConfirmContactsParameters.contactToConfirm.getter(uint64_t (*a1)(void))
{
  return swift_retain();
}

void StartCallIntentHandledResponseParameters.intent.setter(uint64_t a1)
{
}

void StartCallConfirmContactsParameters.contactToConfirm.setter( uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = *(int *)(OUTLINED_FUNCTION_55_2(a1, a2) + 28);
  OUTLINED_FUNCTION_120_2();
  *(void *)(v3 + OUTLINED_FUNCTION_5_18(v2, v3, v4) = v2;
  OUTLINED_FUNCTION_6();
}

Swift::Void (__swiftcall *StartCallIntentHandledResponseParameters.intent.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallIntentHandledResponseParameters.isFirstPartyApp.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(OUTLINED_FUNCTION_80_3() + 32));
}

uint64_t StartCallIntentHandledResponseParameters.isWalkieTalkie.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(OUTLINED_FUNCTION_80_3() + 36));
}

uint64_t StartCallIntentHandledResponseParameters.redactedContacts.getter()
{
  return swift_retain();
}

void StartCallIntentHandledResponseParameters.redactedContacts.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(OUTLINED_FUNCTION_80_3() + 40);
  OUTLINED_FUNCTION_120_2();
  *(void *)(v1 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v1, v2, v3) = a1;
  OUTLINED_FUNCTION_6();
}

Swift::Void (__swiftcall *StartCallIntentHandledResponseParameters.redactedContacts.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallIntentHandledResponseParameters.shouldPrintDialogOnDisplayMode.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(OUTLINED_FUNCTION_80_3() + 44));
}

void StartCallIntentHandledResponseParameters.asKeyValuePairs()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  a17 = v19;
  a18 = v20;
  OUTLINED_FUNCTION_131();
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v22 = (char *)&a9 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v24 = (char *)&a9 - v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v26 = OUTLINED_FUNCTION_8_2(v25, 416LL);
  *(_OWORD *)(v26 + ++*(void *)(v0 + 16) = xmmword_323F90;
  OUTLINED_FUNCTION_43_6(v26);
  uint64_t v27 = OUTLINED_FUNCTION_26_0();
  uint64_t v28 = OUTLINED_FUNCTION_34_5((uint64_t)v24);
  if (v29)
  {
    OUTLINED_FUNCTION_150(v28, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v26 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(_OWORD *)(v26 + 64) = 0u;
  }

  else
  {
    *(void *)(v26 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v27;
    uint64_t v30 = OUTLINED_FUNCTION_186();
    OUTLINED_FUNCTION_61_5((uint64_t)v30);
  }

  *(void *)(v26 + 80) = 0x656369766564LL;
  *(void *)(v26 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0xE600000000000000LL;
  uint64_t v31 = (int *)OUTLINED_FUNCTION_80_3();
  uint64_t v32 = *(void *)(v18 + v31[5]);
  if (v32)
  {
    uint64_t v33 = OUTLINED_FUNCTION_50_6();
    uint64_t v35 = v32;
  }

  else
  {
    uint64_t v33 = OUTLINED_FUNCTION_54_0();
    *(void *)(v26 + 104) = 0LL;
    *(void *)(v26 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
  }

  *(void *)(v26 + 96) = v35;
  *(void *)(v26 + 120) = v33;
  strcpy((char *)(v26 + 128), "hintIdentifier");
  *(_BYTE *)(v26 + 14__swift_destroy_boxed_opaque_existential_1(v0 + 3) = -18;
  OUTLINED_FUNCTION_195(v18 + v31[6], v34, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_34_5((uint64_t)v22);
  if (v29)
  {
    uint64_t v36 = OUTLINED_FUNCTION_95();
    OUTLINED_FUNCTION_190(v36, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_184();
  }

  else
  {
    *(void *)(v26 + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v27;
    uint64_t v37 = OUTLINED_FUNCTION_160();
    OUTLINED_FUNCTION_71_4( (uint64_t)v37,  (uint64_t)v22,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32LL));
    OUTLINED_FUNCTION_95();
  }

  OUTLINED_FUNCTION_177();
  *(void *)(v26 + 176) = v38;
  *(void *)(v26 + 184) = v39;
  uint64_t v40 = *(void *)(v18 + v31[7]);
  if (v40)
  {
    OUTLINED_FUNCTION_142_0();
    uint64_t v41 = v40;
  }

  else
  {
    OUTLINED_FUNCTION_54_0();
    *(void *)(v26 + 200) = 0LL;
    *(void *)(v26 + 20__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0LL;
  }

  *(void *)(v26 + 19__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v41;
  OUTLINED_FUNCTION_207();
  *(void *)(v26 + 2++*(void *)(v0 + 16) = v42;
  *(void *)(v26 + 224) = v43;
  OUTLINED_FUNCTION_192();
  *(void *)(v26 + 23__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v44;
  *(_BYTE *)(v26 + 240) = *(_BYTE *)(v18 + v31[8]);
  *(void *)(v26 + 264) = &type metadata for Bool;
  strcpy((char *)(v26 + 272), "isWalkieTalkie");
  *(_BYTE *)(v26 + 287) = -18;
  *(_BYTE *)(v26 + 28__swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_BYTE *)(v18 + v31[9]);
  *(void *)(v26 + 31__swift_destroy_boxed_opaque_existential_1(v0 + 2) = &type metadata for Bool;
  *(void *)(v26 + 320) = 0xD000000000000010LL;
  OUTLINED_FUNCTION_56_0();
  *(void *)(v26 + 32__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v45;
  uint64_t v46 = *(void *)(v18 + v31[10]);
  if (v46)
  {
    uint64_t v47 = OUTLINED_FUNCTION_125_1();
  }

  else
  {
    uint64_t v47 = 0LL;
    *(void *)(v26 + 344) = 0LL;
    *(void *)(v26 + 35__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
  }

  *(void *)(v26 + 336) = v46;
  *(void *)(v26 + 360) = v47;
  *(void *)(v26 + 36__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0xD00000000000001ELL;
  OUTLINED_FUNCTION_56_0();
  *(void *)(v26 + 376) = v48;
  LOBYTE(v4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_BYTE *)(v18 + v31[11]);
  *(void *)(v26 + 40__swift_destroy_boxed_opaque_existential_1(v0 + 8) = &type metadata for Bool;
  *(_BYTE *)(v26 + 384) = v48;
  OUTLINED_FUNCTION_29_3();
  OUTLINED_FUNCTION_95_1();
  OUTLINED_FUNCTION_58();
}

uint64_t StartCallIntentHandledResponseParameters.init(appName:device:hintIdentifier:intent:isFirstPartyApp:isWalkieTalkie:redactedContacts:shouldPrintDialogOnDisplayMode:)()
{
  char v4 = v3;
  uint64_t v6 = v5;
  char v8 = v7;
  char v10 = v9;
  OUTLINED_FUNCTION_199();
  OUTLINED_FUNCTION_145(v11, v12);
  uint64_t v13 = (int *)OUTLINED_FUNCTION_80_3();
  *(void *)(v2 + v13[5]) = v1;
  uint64_t result = OUTLINED_FUNCTION_198(v13[6]);
  *(void *)(v2 + v13[7]) = v0;
  *(_BYTE *)(v2 + v13[8]) = v10;
  *(_BYTE *)(v2 + v13[9]) = v8;
  *(void *)(v2 + v13[10]) = v6;
  *(_BYTE *)(v2 + v13[11]) = v4;
  return result;
}

void StartCallErrorWithCodeCallInProgressParameters.asKeyValuePairs()( uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v7 = OUTLINED_FUNCTION_8_2(v6, 80LL);
  *(_OWORD *)(v7 + ++*(void *)(v0 + 16) = xmmword_31D870;
  *(void *)(v7 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a2;
  *(void *)(v7 + 40) = 0xE600000000000000LL;
  if (a1)
  {
    uint64_t v8 = a3(0LL);
    uint64_t v9 = a1;
  }

  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_54_0();
    *(void *)(v7 + 56) = 0LL;
    *(void *)(v7 + 64) = 0LL;
  }

  *(void *)(v7 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v9;
  *(void *)(v7 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v8;
  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_6();
}

uint64_t StartCallPromptForContactsParameters.isFaceTime.getter()
{
  uint64_t v0 = type metadata accessor for StartCallPromptForContactsParameters(0LL);
  return OUTLINED_FUNCTION_196(v0);
}

uint64_t StartCallPromptForContactsParameters.isUnsupportedFollowUp.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for StartCallPromptForContactsParameters(0LL) + 24));
}

uint64_t StartCallPromptForContactsParameters.rePromptCount.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for StartCallPromptForContactsParameters(0LL) + 28));
}

void StartCallPromptForContactsParameters.rePromptCount.setter(uint64_t a1, char a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for StartCallPromptForContactsParameters(0LL) + 28);
  *(void *)uint64_t v5 = a1;
  *(_BYTE *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = a2 & 1;
  OUTLINED_FUNCTION_6();
}

Swift::Void (__swiftcall *StartCallPromptForContactsParameters.rePromptCount.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallPromptForContactsParameters.startingOver.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for StartCallPromptForContactsParameters(0LL) + 32));
}

void StartCallPromptForContactsParameters.init(appName:isFaceTime:isUnsupportedFollowUp:rePromptCount:startingOver:)( uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v13 = (int *)type metadata accessor for StartCallPromptForContactsParameters(0LL);
  *(_BYTE *)(a7 + v13[5]) = a2;
  *(_BYTE *)(a7 + v13[6]) = a3;
  uint64_t v14 = a7 + v13[7];
  *(void *)uint64_t v14 = a4;
  *(_BYTE *)(v14 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = a5 & 1;
  *(_BYTE *)(a7 + v13[8]) = a6;
  OUTLINED_FUNCTION_16();
}

uint64_t ContactDisambiguationPromptResponseParser.personsToDisambiguate.getter()
{
  return swift_bridgeObjectRetain(*v0);
}

void StartCallSimpleDisambiguateContactsParameters.requestedRelationship.getter()
{
}

uint64_t type metadata accessor for StartCallSimpleDisambiguateContactsParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for StartCallSimpleDisambiguateContactsParameters,  (uint64_t)&nominal type descriptor for StartCallSimpleDisambiguateContactsParameters);
}

uint64_t StartCallSimpleDisambiguateContactsParameters.requestedRelationship.setter(uint64_t a1)
{
  return StartCallConfirmContactsParameters.confirmAction.setter( a1,  type metadata accessor for StartCallSimpleDisambiguateContactsParameters);
}

Swift::Void (__swiftcall *StartCallSimpleDisambiguateContactsParameters.requestedRelationship.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallSimpleDisambiguateContactsParameters.asKeyValuePairs()()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_8_2(v2, 128LL);
  *(_OWORD *)(v3 + ++*(void *)(v0 + 16) = xmmword_31D880;
  *(void *)(v3 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0x736D657469LL;
  *(void *)(v3 + 40) = 0xE500000000000000LL;
  uint64_t v4 = *v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhonePersonAndVisualData]);
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v4;
  *(void *)(v3 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v5;
  *(void *)(v3 + 80) = 0xD000000000000015LL;
  OUTLINED_FUNCTION_56_0();
  *(void *)(v3 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v6;
  uint64_t v7 = type metadata accessor for StartCallSimpleDisambiguateContactsParameters(0LL);
  uint64_t v8 = OUTLINED_FUNCTION_123_0(v7);
  outlined init with copy of Result<TemplatingResult, Error>( v8,  v0,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_35(v0, 1LL, v9);
  if (v10)
  {
    uint64_t v11 = swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_93_1(v11, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v3 + 96) = 0u;
    *(_OWORD *)(v3 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
  }

  else
  {
    *(void *)(v3 + 120) = v9;
    uint64_t v12 = OUTLINED_FUNCTION_186();
    OUTLINED_FUNCTION_25_25( (uint64_t)v12,  v0,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL));
    swift_bridgeObjectRetain();
  }

  OUTLINED_FUNCTION_16();
}

uint64_t StartCallSimpleDisambiguateContactsParameters.init(items:requestedRelationship:)@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  return StartCallSimpleDisambiguateContactsParameters.init(items:requestedRelationship:)( a1,  (void (*)(void))type metadata accessor for StartCallSimpleDisambiguateContactsParameters,  a2);
}

uint64_t StartCallSimpleDisambiguateContactsHandlesParameters.requestedContact.getter( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_retain(a3);
}

void StartCallSimpleDisambiguateContactsHandlesParameters.requestedContact.setter(uint64_t a1)
{
  *(void *)(v1 + ++*(void *)(v0 + 16) = a1;
  OUTLINED_FUNCTION_2();
}

void StartCallSimpleDisambiguateContactsHandlesParameters.asKeyValuePairs()( __int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v7 = OUTLINED_FUNCTION_8_2(v6, 224LL);
  *(_OWORD *)(v7 + ++*(void *)(v0 + 16) = xmmword_31F580;
  *(void *)(v7 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xD000000000000021LL;
  *(void *)(v7 + 40) = 0x8000000000349220LL;
  *(_BYTE *)(v7 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a1 & 1;
  *(void *)(v7 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = &type metadata for Bool;
  *(void *)(v7 + 80) = 0xD000000000000012LL;
  OUTLINED_FUNCTION_179();
  *(void *)(v8 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v9;
  *(_BYTE *)(v8 + 96) = HIBYTE(a1) & 1;
  *(void *)(v8 + 120) = v10;
  *(void *)(v8 + outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 - 168), v0 - 128) = 0x736D657469LL;
  *(void *)(v8 + 136) = 0xE500000000000000LL;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhonePersonAndVisualData]);
  *(void *)(v7 + 144) = a2;
  *(void *)(v7 + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v11;
  *(void *)(v7 + 176) = 0xD000000000000010LL;
  OUTLINED_FUNCTION_173((uint64_t)"requestedContact");
  if (a3)
  {
    uint64_t v12 = OUTLINED_FUNCTION_140_0();
    uint64_t v13 = a3;
  }

  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_159();
  }

  *(void *)(v7 + 19__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v13;
  *(void *)(v7 + 2++*(void *)(v0 + 16) = v12;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_16();
}

uint64_t StartCallSimpleDisambiguateContactsHandlesParameters.init(isPhoneNumberHandleDisambiguation:isRequestForHandle:items:requestedContact:)( char a1, char a2)
{
  if ((a2 & 1) != 0) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  return v2 & 0xFFFFFFFE | a1 & 1;
}

uint64_t StartCallUnsupportedCallCapabilityCameraNotAccessibleParameters.init()()
{
  uint64_t v0 = OUTLINED_FUNCTION_23_0();
  return OUTLINED_FUNCTION_16_0(v0, v1, v2, v3);
}

void StartCallUnsupportedCallCapabilityCameraNotAccessibleParameters.asKeyValuePairs()()
{
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_131();
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_31();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_8_2(v3, 80LL);
  *(_OWORD *)(v4 + ++*(void *)(v0 + 16) = xmmword_31D870;
  uint64_t v5 = (void *)(v4 + 48);
  OUTLINED_FUNCTION_135_1(v4);
  outlined init with copy of Result<TemplatingResult, Error>( v2,  v0,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  uint64_t v7 = OUTLINED_FUNCTION_35(v0, 1LL, v6);
  if (v8)
  {
    OUTLINED_FUNCTION_93_1(v7, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v5 = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
  }

  else
  {
    *(void *)(v4 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v5);
    OUTLINED_FUNCTION_84_3((uint64_t)boxed_opaque_existential_1);
  }

  OUTLINED_FUNCTION_16();
}

void StartCallUnsupportedContactsInvalidHandleParameters.launchAppPunchOutAction.getter()
{
}

uint64_t type metadata accessor for StartCallUnsupportedContactsInvalidHandleParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for StartCallUnsupportedContactsInvalidHandleParameters,  (uint64_t)&nominal type descriptor for StartCallUnsupportedContactsInvalidHandleParameters);
}

uint64_t StartCallUnsupportedContactsInvalidHandleParameters.launchAppPunchOutAction.setter(uint64_t a1)
{
  return StartCallConfirmContactsParameters.confirmAction.setter( a1,  type metadata accessor for StartCallUnsupportedContactsInvalidHandleParameters);
}

Swift::Void (__swiftcall *StartCallUnsupportedContactsInvalidHandleParameters.launchAppPunchOutAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallUnsupportedContactsInvalidHandleParameters.asKeyValuePairs()()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_8_2(v2, 128LL);
  OUTLINED_FUNCTION_65_3((__n128 *)v3, (__n128)xmmword_31D880);
  uint64_t v4 = *v1;
  if (*v1)
  {
    uint64_t v5 = OUTLINED_FUNCTION_125_1();
    uint64_t v6 = v4;
  }

  else
  {
    uint64_t v5 = OUTLINED_FUNCTION_75_3();
  }

  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v6;
  *(void *)(v3 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v5;
  *(void *)(v3 + 80) = 0xD000000000000017LL;
  uint64_t v7 = OUTLINED_FUNCTION_127_0((uint64_t)"launchAppPunchOutAction");
  uint64_t v8 = type metadata accessor for StartCallUnsupportedContactsInvalidHandleParameters(v7);
  uint64_t v9 = OUTLINED_FUNCTION_123_0(v8);
  OUTLINED_FUNCTION_67_5(v9, v10, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_35(v0, 1LL, v11);
  if (v12)
  {
    uint64_t v13 = OUTLINED_FUNCTION_29_3();
    OUTLINED_FUNCTION_93_1(v13, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v3 + 96) = 0u;
    *(_OWORD *)(v3 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
  }

  else
  {
    *(void *)(v3 + 120) = v11;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v3 + 96));
    OUTLINED_FUNCTION_25_25( (uint64_t)boxed_opaque_existential_1,  v0,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL));
    OUTLINED_FUNCTION_29_3();
  }

  OUTLINED_FUNCTION_16();
}

uint64_t StartCallUnsupportedContactsInvalidHandleParameters.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  type metadata accessor for StartCallUnsupportedContactsInvalidHandleParameters(0LL);
  OUTLINED_FUNCTION_26_0();
  uint64_t v1 = OUTLINED_FUNCTION_23_0();
  return OUTLINED_FUNCTION_16_0(v1, v2, v3, v4);
}

uint64_t StartCallUnsupportedContactsInvalidHandleParameters.init(contacts:launchAppPunchOutAction:)@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  return StartCallSimpleDisambiguateContactsParameters.init(items:requestedRelationship:)( a1,  (void (*)(void))type metadata accessor for StartCallUnsupportedContactsInvalidHandleParameters,  a2);
}

uint64_t StartCallSimpleDisambiguateContactsParameters.init(items:requestedRelationship:)@<X0>( uint64_t a1@<X0>, void (*a2)(void)@<X2>, void *a3@<X8>)
{
  *a3 = a1;
  a2(0LL);
  uint64_t v3 = OUTLINED_FUNCTION_122_2();
  return OUTLINED_FUNCTION_153_0(v3, v4);
}

uint64_t StartCallUnsupportedContactsNoContactFoundParameters.contact.getter()
{
  return StartCallIntentHandledResponseParameters.device.getter(type metadata accessor for StartCallUnsupportedContactsNoContactFoundParameters);
}

uint64_t StartCallIntentHandledResponseParameters.device.getter(uint64_t (*a1)(void))
{
  return swift_retain();
}

void StartCallUnsupportedContactsNoContactFoundParameters.contact.setter(uint64_t a1)
{
}

void StartCallIntentHandledResponseParameters.device.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = *(int *)(OUTLINED_FUNCTION_55_2(a1, a2) + 20);
  OUTLINED_FUNCTION_120_2();
  *(void *)(v3 + OUTLINED_FUNCTION_5_18(v2, v3, v4) = v2;
  OUTLINED_FUNCTION_6();
}

Swift::Void (__swiftcall *StartCallUnsupportedContactsNoContactFoundParameters.contact.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallUnsupportedContactsNoContactFoundParameters.isFirstPartyApp.getter()
{
  return *(unsigned __int8 *)(v0
}

void StartCallUnsupportedContactsNoContactFoundParameters.init(appName:contact:isFirstPartyApp:)( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = type metadata accessor for StartCallUnsupportedContactsNoContactFoundParameters(0LL);
  *(void *)(a4 + *(int *)(v7 + 20)) = a2;
  *(_BYTE *)(a4 + *(int *)(v7 + swift_release(*(void *)(v0 + 24)) = a3;
  OUTLINED_FUNCTION_6();
}

void StartCallUnsupportedContactsNoHandleForLabelParameters.preferredCallProvider.getter()
{
}

uint64_t type metadata accessor for StartCallUnsupportedContactsNoHandleForLabelParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for StartCallUnsupportedContactsNoHandleForLabelParameters,  (uint64_t)&nominal type descriptor for StartCallUnsupportedContactsNoHandleForLabelParameters);
}

uint64_t StartCallUnsupportedContactsNoHandleForLabelParameters.preferredCallProvider.setter(uint64_t a1)
{
  return StartCallConfirmContactsParameters.confirmAction.setter( a1,  type metadata accessor for StartCallUnsupportedContactsNoHandleForLabelParameters);
}

Swift::Void (__swiftcall *StartCallUnsupportedContactsNoHandleForLabelParameters.preferredCallProvider.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallUnsupportedContactsNoHandleForLabelParameters.unsupportedHandle.getter()
{
  return StartCallIntentConfirmationWithRestrictedContactsParameters.intent.getter(type metadata accessor for StartCallUnsupportedContactsNoHandleForLabelParameters);
}

uint64_t StartCallIntentConfirmationWithRestrictedContactsParameters.intent.getter( uint64_t (*a1)(void))
{
  return swift_retain();
}

void StartCallUnsupportedContactsNoHandleForLabelParameters.unsupportedHandle.setter(uint64_t a1)
{
}

void StartCallIntentConfirmationWithRestrictedContactsParameters.intent.setter( uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = *(int *)(OUTLINED_FUNCTION_55_2(a1, a2) + 24);
  OUTLINED_FUNCTION_120_2();
  *(void *)(v3 + OUTLINED_FUNCTION_5_18(v2, v3, v4) = v2;
  OUTLINED_FUNCTION_6();
}

Swift::Void (__swiftcall *StartCallUnsupportedContactsNoHandleForLabelParameters.unsupportedHandle.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallUnsupportedContactsNoHandleForLabelParameters.unsupportedPerson.getter()
{
  return StartCallConfirmContactsParameters.contactToConfirm.getter(type metadata accessor for StartCallUnsupportedContactsNoHandleForLabelParameters);
}

void StartCallUnsupportedContactsNoHandleForLabelParameters.unsupportedPerson.setter(uint64_t a1)
{
}

Swift::Void (__swiftcall *StartCallUnsupportedContactsNoHandleForLabelParameters.unsupportedPerson.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallUnsupportedContactsNoHandleForLabelParameters.unsupportedPersonHandleLabel.getter()
{
}

void StartCallConfirmContactsParameters.inferenceSource.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = OUTLINED_FUNCTION_76_5(a1);
  OUTLINED_FUNCTION_67_5(v1 + *(int *)(v2 + 32), v3, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_2();
}

uint64_t StartCallUnsupportedContactsNoHandleForLabelParameters.unsupportedPersonHandleLabel.setter( uint64_t a1)
{
  return StartCallConfirmContactsParameters.inferenceSource.setter( a1,  type metadata accessor for StartCallUnsupportedContactsNoHandleForLabelParameters);
}

uint64_t StartCallConfirmContactsParameters.inferenceSource.setter( uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = OUTLINED_FUNCTION_122_2();
  return OUTLINED_FUNCTION_16_16(v2, v3);
}

Swift::Void (__swiftcall *StartCallUnsupportedContactsNoHandleForLabelParameters.unsupportedPersonHandleLabel.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallUnsupportedContactsNoHandleForLabelParameters.asKeyValuePairs()()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_8_2(v3, 272LL);
  OUTLINED_FUNCTION_136_0(v4, (__n128)xmmword_323F80);
  unint64_t v5 = *v1;
  if (*v1)
  {
    uint64_t v6 = OUTLINED_FUNCTION_142_0();
    unint64_t v7 = v5;
  }

  else
  {
    uint64_t v6 = OUTLINED_FUNCTION_75_3();
  }

  v4[3].n128_u64[0] = v7;
  v4[4].n128_u64[1] = v6;
  v4[5].n128_u64[0] = 0xD000000000000015LL;
  v4[5].n128_u64[1] = 0x8000000000341AF0LL;
  uint64_t v8 = (int *)OUTLINED_FUNCTION_99_1();
  uint64_t v9 = OUTLINED_FUNCTION_123_0((uint64_t)v8);
  outlined init with copy of Result<TemplatingResult, Error>( v9,  v2,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_35(v2, 1LL, v10);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_59();
    OUTLINED_FUNCTION_165(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_134_1();
  }

  else
  {
    v4[7].n128_u64[1] = v10;
    uint64_t v13 = OUTLINED_FUNCTION_112_0();
    OUTLINED_FUNCTION_86_3( (uint64_t)v13,  v2,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL));
    OUTLINED_FUNCTION_59();
  }

  OUTLINED_FUNCTION_56_0();
  v4[8].n128_u64[0] = 0xD000000000000011LL;
  v4[8].n128_u64[1] = v14;
  unint64_t v15 = *(unint64_t *)((char *)v1 + v8[6]);
  if (v15)
  {
    uint64_t v16 = type metadata accessor for DialogPersonHandle(0LL);
    unint64_t v17 = v15;
  }

  else
  {
    uint64_t v16 = OUTLINED_FUNCTION_54_0();
    v4[9].n128_u64[1] = 0LL;
    v4[10].n128_u64[0] = 0LL;
  }

  v4[9].n128_u64[0] = v17;
  v4[10].n128_u64[1] = v16;
  v4[11].n128_u64[0] = 0xD000000000000011LL;
  OUTLINED_FUNCTION_173((uint64_t)"unsupportedPerson");
  unint64_t v18 = *(unint64_t *)((char *)v1 + v8[7]);
  if (v18)
  {
    uint64_t v19 = OUTLINED_FUNCTION_140_0();
    unint64_t v21 = v18;
  }

  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_159();
  }

  v4[12].n128_u64[0] = v21;
  v4[13].n128_u64[1] = v19;
  v4[14].n128_u64[0] = 0xD00000000000001CLL;
  v4[14].n128_u64[1] = 0x80000000003492D0LL;
  OUTLINED_FUNCTION_67_5((uint64_t)v1 + v8[8], v20, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_35(v0, 1LL, v10);
  if (v11)
  {
    OUTLINED_FUNCTION_59();
    uint64_t v22 = OUTLINED_FUNCTION_95();
    OUTLINED_FUNCTION_93_1(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_134_1();
  }

  else
  {
    v4[16].n128_u64[1] = v10;
    uint64_t v23 = OUTLINED_FUNCTION_112_0();
    OUTLINED_FUNCTION_84_3((uint64_t)v23);
    OUTLINED_FUNCTION_59();
    OUTLINED_FUNCTION_95();
  }

  OUTLINED_FUNCTION_203();
  OUTLINED_FUNCTION_7_5();
}

uint64_t StartCallUnsupportedContactsNoHandleForLabelParameters.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  uint64_t v2 = OUTLINED_FUNCTION_99_1();
  uint64_t v3 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_115_0(v3);
  *(void *)((char *)a1 + OUTLINED_FUNCTION_5_18(v2, v3, v4) = 0LL;
  uint64_t v5 = OUTLINED_FUNCTION_89_3(*(int *)(v2 + 32));
  return OUTLINED_FUNCTION_32_6(v5, v6, v7, v8);
}

uint64_t StartCallUnsupportedContactsNoHandleForLabelParameters.init(intent:preferredCallProvider:unsupportedHandle:unsupportedPerson:unsupportedPersonHandleLabel:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  *a5 = a1;
  uint64_t v10 = OUTLINED_FUNCTION_99_1();
  OUTLINED_FUNCTION_132_1(v10);
  *(void *)((char *)a5 + v5[6]) = a2;
  *(void *)((char *)a5 + v5[7]) = a3;
  return outlined init with take of SpeakableString?(a4, (uint64_t)a5 + v5[8]);
}

void StartCallUnsupportedDeviceFaceTimeLinkParameters.launchAppPunchOutAction.getter()
{
}

uint64_t type metadata accessor for StartCallUnsupportedDeviceFaceTimeLinkParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for StartCallUnsupportedDeviceFaceTimeLinkParameters,  (uint64_t)&nominal type descriptor for StartCallUnsupportedDeviceFaceTimeLinkParameters);
}

uint64_t StartCallUnsupportedDeviceFaceTimeLinkParameters.launchAppPunchOutAction.setter(uint64_t a1)
{
  return StartCallConfirmContactsParameters.confirmAction.setter( a1,  type metadata accessor for StartCallUnsupportedDeviceFaceTimeLinkParameters);
}

Swift::Void (__swiftcall *StartCallUnsupportedDeviceFaceTimeLinkParameters.launchAppPunchOutAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallUnsupportedDeviceFaceTimeLinkParameters.launchAppPunchOutLocalizedText.getter()
{
}

uint64_t StartCallUnsupportedDeviceFaceTimeLinkParameters.launchAppPunchOutLocalizedText.setter(uint64_t a1)
{
  return StartCallConfirmContactsParameters.contactHeader.setter( a1,  type metadata accessor for StartCallUnsupportedDeviceFaceTimeLinkParameters);
}

Swift::Void (__swiftcall *StartCallUnsupportedDeviceFaceTimeLinkParameters.launchAppPunchOutLocalizedText.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallUnsupportedDeviceFaceTimeLinkParameters.asKeyValuePairs()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

{
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __n128 *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  OUTLINED_FUNCTION_29_2();
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_41_12();
  __chkstk_darwin();
  uint64_t v27 = (char *)&a9 - v26;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  char v29 = (__n128 *)OUTLINED_FUNCTION_8_2(v28, 176LL);
  OUTLINED_FUNCTION_42_1(v29, (__n128)xmmword_320080);
  uint64_t v30 = *v21;
  if (*v21)
  {
    uint64_t v31 = OUTLINED_FUNCTION_50_6();
    uint64_t v32 = v30;
  }

  else
  {
    uint64_t v31 = OUTLINED_FUNCTION_75_3();
  }

  v29[3].n128_u64[0] = v32;
  v29[4].n128_u64[1] = v31;
  v29[5].n128_u64[0] = 0xD000000000000017LL;
  uint64_t v33 = OUTLINED_FUNCTION_127_0((uint64_t)"launchAppPunchOutAction");
  uint64_t v34 = v25(v33);
  uint64_t v35 = OUTLINED_FUNCTION_123_0(v34);
  OUTLINED_FUNCTION_195(v35, v36, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v37 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_34_5((uint64_t)v27);
  if (v38)
  {
    uint64_t v39 = OUTLINED_FUNCTION_95();
    OUTLINED_FUNCTION_190(v39, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_134_1();
  }

  else
  {
    v29[7].n128_u64[1] = v37;
    uint64_t v40 = OUTLINED_FUNCTION_112_0();
    OUTLINED_FUNCTION_71_4( (uint64_t)v40,  (uint64_t)v27,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 32LL));
    OUTLINED_FUNCTION_95();
  }

  OUTLINED_FUNCTION_179();
  v29[8].n128_u64[0] = v41;
  v29[8].n128_u64[1] = v42;
  OUTLINED_FUNCTION_67_5( (uint64_t)v21 + *(int *)(v34 + 24),  v43,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v44 = OUTLINED_FUNCTION_34_5(v20);
  if (v38)
  {
    OUTLINED_FUNCTION_93_1(v44, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_162_0();
  }

  else
  {
    v29[10].n128_u64[1] = v37;
    uint64_t v45 = OUTLINED_FUNCTION_137_0();
    OUTLINED_FUNCTION_71_4( (uint64_t)v45,  v20,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 32LL));
  }

  OUTLINED_FUNCTION_203();
  OUTLINED_FUNCTION_7_5();
}

uint64_t StartCallUnsupportedDeviceFaceTimeLinkParameters.init()@<X0>(void *a1@<X8>)
{
  return StartCallUnsupportedDeviceFaceTimeLinkParameters.init()( type metadata accessor for StartCallUnsupportedDeviceFaceTimeLinkParameters,  a1);
}

uint64_t StartCallUnsupportedDeviceFaceTimeLinkParameters.init(device:launchAppPunchOutAction:launchAppPunchOutLocalizedText:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  return StartCallUnsupportedDeviceFaceTimeLinkParameters.init(device:launchAppPunchOutAction:launchAppPunchOutLocalizedText:)( a1,  a2,  type metadata accessor for StartCallUnsupportedDeviceFaceTimeLinkParameters,  a3);
}

void StartCallUnsupportedDeviceGroupFaceTimeParameters.launchAppPunchOutAction.getter()
{
}

uint64_t type metadata accessor for StartCallUnsupportedDeviceGroupFaceTimeParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for StartCallUnsupportedDeviceGroupFaceTimeParameters,  (uint64_t)&nominal type descriptor for StartCallUnsupportedDeviceGroupFaceTimeParameters);
}

uint64_t StartCallUnsupportedDeviceGroupFaceTimeParameters.launchAppPunchOutAction.setter(uint64_t a1)
{
  return StartCallConfirmContactsParameters.confirmAction.setter( a1,  type metadata accessor for StartCallUnsupportedDeviceGroupFaceTimeParameters);
}

Swift::Void (__swiftcall *StartCallUnsupportedDeviceGroupFaceTimeParameters.launchAppPunchOutAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallUnsupportedDeviceGroupFaceTimeParameters.launchAppPunchOutLocalizedText.getter()
{
}

uint64_t StartCallUnsupportedDeviceGroupFaceTimeParameters.launchAppPunchOutLocalizedText.setter(uint64_t a1)
{
  return StartCallConfirmContactsParameters.contactHeader.setter( a1,  type metadata accessor for StartCallUnsupportedDeviceGroupFaceTimeParameters);
}

Swift::Void (__swiftcall *StartCallUnsupportedDeviceGroupFaceTimeParameters.launchAppPunchOutLocalizedText.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallUnsupportedDeviceGroupFaceTimeParameters.asKeyValuePairs()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

uint64_t StartCallUnsupportedDeviceGroupFaceTimeParameters.init()@<X0>(void *a1@<X8>)
{
  return StartCallUnsupportedDeviceFaceTimeLinkParameters.init()( type metadata accessor for StartCallUnsupportedDeviceGroupFaceTimeParameters,  a1);
}

uint64_t StartCallUnsupportedDeviceFaceTimeLinkParameters.init()@<X0>( uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  uint64_t v3 = a1(0LL);
  uint64_t v4 = (uint64_t)a2 + *(int *)(v3 + 20);
  uint64_t v5 = OUTLINED_FUNCTION_26_0();
  __swift_storeEnumTagSinglePayload(v4, 1LL, 1LL, v5);
  uint64_t v6 = OUTLINED_FUNCTION_89_3(*(int *)(v3 + 24));
  return OUTLINED_FUNCTION_32_6(v6, v7, v8, v9);
}

uint64_t StartCallUnsupportedDeviceGroupFaceTimeParameters.init(device:launchAppPunchOutAction:launchAppPunchOutLocalizedText:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  return StartCallUnsupportedDeviceFaceTimeLinkParameters.init(device:launchAppPunchOutAction:launchAppPunchOutLocalizedText:)( a1,  a2,  type metadata accessor for StartCallUnsupportedDeviceGroupFaceTimeParameters,  a3);
}

uint64_t StartCallUnsupportedDeviceFaceTimeLinkParameters.init(device:launchAppPunchOutAction:launchAppPunchOutLocalizedText:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t (*a3)(void)@<X3>, void *a4@<X8>)
{
  *a4 = a1;
  uint64_t v6 = a3(0LL);
  OUTLINED_FUNCTION_194(*(int *)(v6 + 20));
  return OUTLINED_FUNCTION_72_5(a2, (uint64_t)a4 + *(int *)(v6 + 24));
}

void StartCallUnsupportedPreferredCallProviderParameters.asKeyValuePairs()(uint64_t a1, uint64_t a2)
{
}

void StartCallErrorWithCodeDownTimeRestrictionEnabledParameters.asKeyValuePairs()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v11 = OUTLINED_FUNCTION_8_2(v10, 128LL);
  *(_OWORD *)(v11 + ++*(void *)(v0 + 16) = xmmword_31D880;
  *(void *)(v11 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a3;
  *(void *)(v11 + 40) = a4;
  if (a1)
  {
    uint64_t v12 = a5(0LL);
    uint64_t v13 = a1;
  }

  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_75_3();
  }

  OUTLINED_FUNCTION_118_0(v12, v13);
  if (a2)
  {
    uint64_t v14 = OUTLINED_FUNCTION_142_0();
    uint64_t v15 = a2;
  }

  else
  {
    uint64_t v15 = 0LL;
    uint64_t v14 = 0LL;
    *(void *)(v11 + 104) = 0LL;
    *(void *)(v11 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
  }

  *(void *)(v11 + 96) = v15;
  *(void *)(v11 + 120) = v14;
  UsoEntity_common_Person.usoPerson.getter();
  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_16();
}

uint64_t StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.intent.getter()
{
  return swift_retain(*(void *)(v0 + 8));
}

void StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.launchAppPunchOutAction.getter()
{
}

uint64_t type metadata accessor for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters( uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters,  (uint64_t)&nominal type descriptor for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters);
}

uint64_t StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.launchAppPunchOutAction.setter( uint64_t a1)
{
  return StartCallConfirmContactsParameters.contactHeader.setter( a1,  type metadata accessor for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters);
}

Swift::Void (__swiftcall *StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.launchAppPunchOutAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.launchAppPunchOutLocalizedText.getter()
{
}

uint64_t StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.launchAppPunchOutLocalizedText.setter( uint64_t a1)
{
  return StartCallErrorWithCodeAirplaneModeEnabledParameters.settingsPunchOutAction.setter( a1,  type metadata accessor for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters);
}

Swift::Void (__swiftcall *StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.launchAppPunchOutLocalizedText.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.asKeyValuePairs()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_41_12();
  __chkstk_darwin();
  uint64_t v25 = (char *)&a9 - v24;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v27 = OUTLINED_FUNCTION_8_2(v26, 224LL);
  OUTLINED_FUNCTION_42_1((__n128 *)v27, (__n128)xmmword_31F580);
  uint64_t v28 = *v21;
  if (*v21)
  {
    uint64_t v29 = OUTLINED_FUNCTION_50_6();
    uint64_t v30 = v28;
  }

  else
  {
    uint64_t v29 = OUTLINED_FUNCTION_75_3();
  }

  OUTLINED_FUNCTION_118_0(v29, v30);
  uint64_t v31 = v21[1];
  if (v31)
  {
    uint64_t v32 = OUTLINED_FUNCTION_142_0();
    uint64_t v33 = v31;
  }

  else
  {
    uint64_t v33 = 0LL;
    uint64_t v32 = 0LL;
    *(void *)(v27 + 104) = 0LL;
    *(void *)(v27 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
  }

  *(void *)(v27 + 96) = v33;
  *(void *)(v27 + 120) = v32;
  *(void *)(v27 + outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 - 168), v0 - 128) = 0xD000000000000017LL;
  OUTLINED_FUNCTION_56_0();
  *(void *)(v27 + 136) = v34;
  uint64_t v35 = OUTLINED_FUNCTION_124_0();
  OUTLINED_FUNCTION_195( (uint64_t)v21 + *(int *)(v35 + 24),  v36,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v37 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_35((uint64_t)v25, 1LL, v37);
  if (v38)
  {
    OUTLINED_FUNCTION_59();
    uint64_t v39 = OUTLINED_FUNCTION_95_1();
    OUTLINED_FUNCTION_190(v39, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v27 + 144) = 0u;
    *(_OWORD *)(v27 + 160) = 0u;
  }

  else
  {
    *(void *)(v27 + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v37;
    uint64_t v40 = OUTLINED_FUNCTION_183();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v37 - 8) + 32LL))(v40, v25, v37);
    OUTLINED_FUNCTION_59();
    OUTLINED_FUNCTION_95_1();
  }

  *(void *)(v27 + 176) = 0xD00000000000001ELL;
  *(void *)(v27 + 184) = 0x80000000003492F0LL;
  OUTLINED_FUNCTION_67_5( (uint64_t)v21 + *(int *)(v35 + 28),  v41,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v42 = OUTLINED_FUNCTION_35(v20, 1LL, v37);
  if (v38)
  {
    OUTLINED_FUNCTION_93_1(v42, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_162_0();
  }

  else
  {
    *(void *)(v27 + 2++*(void *)(v0 + 16) = v37;
    uint64_t v43 = OUTLINED_FUNCTION_137_0();
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 32LL))(v43, v20, v37);
  }

  OUTLINED_FUNCTION_203();
  OUTLINED_FUNCTION_7_5();
}

uint64_t StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = OUTLINED_FUNCTION_124_0();
  *a1 = 0LL;
  a1[1] = 0LL;
  uint64_t v3 = (uint64_t)a1 + *(int *)(v2 + 24);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_11_21(v3, 1LL);
  uint64_t v4 = OUTLINED_FUNCTION_89_3(*(int *)(v2 + 28));
  return OUTLINED_FUNCTION_32_6(v4, v5, v6, v7);
}

uint64_t StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.init(device:intent:launchAppPunchOutAction:launchAppPunchOutLocalizedText:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  uint64_t v6 = OUTLINED_FUNCTION_124_0();
  OUTLINED_FUNCTION_194(*(int *)(v6 + 24));
  return OUTLINED_FUNCTION_72_5(a3, (uint64_t)a4 + *(int *)(v6 + 28));
}

uint64_t StartCallCATPatternsExecutor.confirmContacts(isFaceTime:isFoundInAppConfirmation:isTopMatchConfirmation:_:)( char a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 24) = a5;
  *(void *)(v6 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v5;
  *(void *)(v6 + ++*(void *)(v0 + 16) = a4;
  *(_BYTE *)(v6 + 90) = a3;
  *(_BYTE *)(v6 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 9) = a2;
  *(_BYTE *)(v6 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a1;
  uint64_t v7 = OUTLINED_FUNCTION_73_3();
  *(void *)(v6 + 40) = v7;
  *(void *)(v6 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = OUTLINED_FUNCTION_12_0(v7);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

#error "C5390: call analysis failed (funcsize=58)"
uint64_t StartCallCATPatternsExecutor.confirmContacts(isFaceTime:isFoundInAppConfirmation:isTopMatchConfirmation:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_6_33();
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.confirmContacts(isFaceTime:isFoundInAppConfirmation:isTopMatchConfirmation:_:)( uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_22_15();
  return OUTLINED_FUNCTION_4_31(v1, v2);
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_22_19(a1, type metadata accessor for StartCallConfirmContactsParameters);
  OUTLINED_FUNCTION_23_3();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_58_0();
  return OUTLINED_FUNCTION_3_0(v1);
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeAirplaneModeEnabled(isEmergency:isResponseFramework:_:)( char a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v4;
  *(void *)(v5 + ++*(void *)(v0 + 16) = a3;
  *(_BYTE *)(v5 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 9) = a2;
  *(_BYTE *)(v5 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a1;
  uint64_t v6 = type metadata accessor for StartCallErrorWithCodeAirplaneModeEnabledParameters(0LL);
  *(void *)(v5 + 40) = v6;
  *(void *)(v5 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = OUTLINED_FUNCTION_12_0(v6);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeAirplaneModeEnabled(isEmergency:isResponseFramework:_:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  char v2 = *(_BYTE *)(v0 + 89);
  char v3 = *(_BYTE *)(v0 + 88);
  uint64_t v4 = v1 + *(int *)(*(void *)(v0 + 40) + 28LL);
  uint64_t v5 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_29_1(v4, v6, v7, v5);
  *(void *)uint64_t v1 = 0LL;
  *(_BYTE *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v3;
  *(_BYTE *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 9) = v2;
  OUTLINED_FUNCTION_175();
  StartCallErrorWithCodeAirplaneModeEnabledParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_68_2(v8);
  uint64_t v9 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 64) = v9;
  OUTLINED_FUNCTION_53_7( v9,  (uint64_t)StartCallCATPatternsExecutor.errorWithCodeAirplaneModeEnabled(isEmergency:isResponseFramework:_:));
  unint64_t v10 = OUTLINED_FUNCTION_52_7(42LL);
  return OUTLINED_FUNCTION_25_5(v10, v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_6_33();
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeAirplaneModeEnabled(isEmergency:isResponseFramework:_:)( uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_22_15();
  return OUTLINED_FUNCTION_4_31(v1, v2);
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_22_19(a1, type metadata accessor for StartCallErrorWithCodeAirplaneModeEnabledParameters);
  OUTLINED_FUNCTION_23_3();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_58_0();
  return OUTLINED_FUNCTION_3_0(v1);
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeAppConfigurationRequired(isThirdPartyApp:_:)( char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = OUTLINED_FUNCTION_83_2(a1, a2, a3);
  uint64_t v5 = type metadata accessor for StartCallErrorWithCodeAppConfigurationRequiredParameters(v4);
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = OUTLINED_FUNCTION_12_0(v5);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeAppConfigurationRequired(isThirdPartyApp:_:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_28_18(v1);
  StartCallErrorWithCodeAppConfigurationRequiredParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_68_2(v2);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 64) = v3;
  OUTLINED_FUNCTION_53_7( v3,  (uint64_t)StartCallCATPatternsExecutor.errorWithCodeAppConfigurationRequired(isThirdPartyApp:_:));
  unint64_t v4 = OUTLINED_FUNCTION_52_7(47LL);
  return OUTLINED_FUNCTION_25_5(v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_6_33();
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeAppConfigurationRequired(isThirdPartyApp:_:)(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_22_15();
  return OUTLINED_FUNCTION_4_31(v1, v2);
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_22_19(a1, type metadata accessor for StartCallErrorWithCodeAppConfigurationRequiredParameters);
  OUTLINED_FUNCTION_23_3();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_58_0();
  return OUTLINED_FUNCTION_3_0(v1);
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeCallInProgress(_:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)StartCallCATPatternsExecutor.errorWithCodeCallInProgress(_:));
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeCallInProgress(_:)()
{
  uint64_t v3 = *v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_8_2(v4, 80LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_161(v5);
  uint64_t v7 = OUTLINED_FUNCTION_35_0(v6, (__n128)xmmword_31D870);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    *(void *)(v2 + 56) = 0LL;
    *(void *)(v2 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_105_1(v7);
  OUTLINED_FUNCTION_2_3();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_46();
  *(void *)(v1 + 64) = v8;
  OUTLINED_FUNCTION_133_0(v8, (uint64_t)StartCallCATPatternsExecutor.errorWithCodeCallInProgress(_:));
  OUTLINED_FUNCTION_27_3();
  unint64_t v9 = OUTLINED_FUNCTION_102(37LL);
  return OUTLINED_FUNCTION_12_28(v9, v10, v11, v12);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  swift_release(*(void *)(v0 + 56));
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_58_0();
  return OUTLINED_FUNCTION_3_0(v1);
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeCallInProgress(_:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v9 = v4;
  OUTLINED_FUNCTION_10_31(*(void *)(v4 + 64), &v9);
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v4 + 80) = a1;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v5, v6, v7);
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeCallRinging(_:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)StartCallCATPatternsExecutor.errorWithCodeCallRinging(_:));
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeCallRinging(_:)()
{
  uint64_t v3 = *v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_8_2(v4, 80LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_161(v5);
  uint64_t v7 = OUTLINED_FUNCTION_35_0(v6, (__n128)xmmword_31D870);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    *(void *)(v2 + 56) = 0LL;
    *(void *)(v2 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_105_1(v7);
  OUTLINED_FUNCTION_2_3();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_46();
  *(void *)(v1 + 64) = v8;
  OUTLINED_FUNCTION_133_0(v8, (uint64_t)StartCallCATPatternsExecutor.errorWithCodeCallRinging(_:));
  OUTLINED_FUNCTION_27_3();
  unint64_t v9 = OUTLINED_FUNCTION_102(34LL);
  return OUTLINED_FUNCTION_12_28(v9, v10, v11, v12);
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeCallRinging(_:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v9 = v4;
  OUTLINED_FUNCTION_10_31(*(void *)(v4 + 64), &v9);
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v4 + 80) = a1;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v5, v6, v7);
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeCallingServiceNotAvailable(isThirdPartyApp:_:)( char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = OUTLINED_FUNCTION_83_2(a1, a2, a3);
  uint64_t v5 = type metadata accessor for StartCallErrorWithCodeCallingServiceNotAvailableParameters(v4);
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = OUTLINED_FUNCTION_12_0(v5);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeCallingServiceNotAvailable(isThirdPartyApp:_:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_28_18(v1);
  StartCallErrorWithCodeCallingServiceNotAvailableParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_68_2(v2);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 64) = v3;
  OUTLINED_FUNCTION_53_7( v3,  (uint64_t)StartCallCATPatternsExecutor.errorWithCodeCallingServiceNotAvailable(isThirdPartyApp:_:));
  unint64_t v4 = OUTLINED_FUNCTION_52_7(49LL);
  return OUTLINED_FUNCTION_25_5(v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_6_33();
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeCallingServiceNotAvailable(isThirdPartyApp:_:)(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_22_15();
  return OUTLINED_FUNCTION_4_31(v1, v2);
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_22_19(a1, type metadata accessor for StartCallErrorWithCodeCallingServiceNotAvailableParameters);
  OUTLINED_FUNCTION_23_3();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_58_0();
  return OUTLINED_FUNCTION_3_0(v1);
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeContactNotSupportedByApp(isThirdPartyApp:_:)( char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = OUTLINED_FUNCTION_83_2(a1, a2, a3);
  uint64_t v5 = type metadata accessor for StartCallErrorWithCodeContactNotSupportedByAppParameters(v4);
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = OUTLINED_FUNCTION_12_0(v5);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeContactNotSupportedByApp(isThirdPartyApp:_:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_28_18(v1);
  StartCallErrorWithCodeContactNotSupportedByAppParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_68_2(v2);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 64) = v3;
  OUTLINED_FUNCTION_53_7( v3,  (uint64_t)StartCallCATPatternsExecutor.errorWithCodeContactNotSupportedByApp(isThirdPartyApp:_:));
  unint64_t v4 = OUTLINED_FUNCTION_52_7(47LL);
  return OUTLINED_FUNCTION_25_5(v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_6_33();
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeContactNotSupportedByApp(isThirdPartyApp:_:)(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_22_15();
  return OUTLINED_FUNCTION_4_31(v1, v2);
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_22_19(a1, type metadata accessor for StartCallErrorWithCodeContactNotSupportedByAppParameters);
  OUTLINED_FUNCTION_23_3();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_58_0();
  return OUTLINED_FUNCTION_3_0(v1);
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeDownTimeRestrictionEnabled(_:)(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)StartCallCATPatternsExecutor.errorWithCodeDownTimeRestrictionEnabled(_:));
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeDownTimeRestrictionEnabled(_:)()
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  v1[5] = *v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_8_2(v4, 128LL);
  v1[6] = (uint64_t)v5;
  OUTLINED_FUNCTION_65_3(v5, (__n128)xmmword_31D880);
  if (v2)
  {
    uint64_t v6 = OUTLINED_FUNCTION_125_1();
    uint64_t v7 = v2;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
    v5[3].n128_u64[1] = 0LL;
    v5[4].n128_u64[0] = 0LL;
  }

  uint64_t v8 = OUTLINED_FUNCTION_109_2(v6, v7);
  if (v3)
  {
    uint64_t v8 = type metadata accessor for PhoneStartCallIntent(v8);
  }

  else
  {
    v5[6].n128_u64[1] = 0LL;
    v5[7].n128_u64[0] = 0LL;
  }

  *(void *)(v0 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v3;
  v5[6].n128_u64[0] = v3;
  v5[7].n128_u64[1] = v8;
  OUTLINED_FUNCTION_126_0();
  OUTLINED_FUNCTION_3_8();
  uint64_t v9 = (void *)swift_task_alloc(v1);
  *(void *)(v0 + 80) = v9;
  *uint64_t v9 = v0;
  v9[1] = StartCallCATPatternsExecutor.errorWithCodeDownTimeRestrictionEnabled(_:);
  return OUTLINED_FUNCTION_12_28(0xD000000000000031LL, 0x8000000000342440LL, (uint64_t)v5, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_78_4();
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v2 + 96) = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(51LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.finalLowConfidenceResponse()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(36LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.genericError(_:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)StartCallCATPatternsExecutor.genericError(_:));
}

uint64_t StartCallCATPatternsExecutor.genericError(_:)()
{
  uint64_t v3 = *v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_8_2(v4, 80LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_161(v5);
  uint64_t v7 = OUTLINED_FUNCTION_35_0(v6, (__n128)xmmword_31D870);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    *(void *)(v2 + 56) = 0LL;
    *(void *)(v2 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_105_1(v7);
  OUTLINED_FUNCTION_2_3();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_46();
  *(void *)(v1 + 64) = v8;
  OUTLINED_FUNCTION_133_0(v8, (uint64_t)StartCallCATPatternsExecutor.errorWithCodeCallRinging(_:));
  OUTLINED_FUNCTION_27_3();
  unint64_t v9 = OUTLINED_FUNCTION_102(22LL);
  return OUTLINED_FUNCTION_12_28(v9, v10, v11, v12);
}

uint64_t StartCallCATPatternsExecutor.intentConfirmation(_:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)StartCallCATPatternsExecutor.intentConfirmation(_:));
}

uint64_t StartCallCATPatternsExecutor.intentConfirmation(_:)()
{
  uint64_t v3 = *v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_8_2(v4, 80LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_161(v5);
  OUTLINED_FUNCTION_136_0(v6, (__n128)xmmword_31D870);
  uint64_t v7 = 0LL;
  if (v3)
  {
    uint64_t v7 = type metadata accessor for PhoneStartCallIntent(0LL);
  }

  else
  {
    *(void *)(v2 + 56) = 0LL;
    *(void *)(v2 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_105_1(v7);
  OUTLINED_FUNCTION_2_3();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_46();
  *(void *)(v1 + 64) = v8;
  OUTLINED_FUNCTION_133_0(v8, (uint64_t)StartCallCATPatternsExecutor.errorWithCodeCallRinging(_:));
  OUTLINED_FUNCTION_27_3();
  unint64_t v9 = OUTLINED_FUNCTION_102(28LL);
  return OUTLINED_FUNCTION_12_28(v9, v10, v11, v12);
}

uint64_t StartCallCATPatternsExecutor.intentConfirmationWithRestrictedContacts(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OUTLINED_FUNCTION_69_5(a1, a2);
  uint64_t v4 = type metadata accessor for StartCallIntentConfirmationWithRestrictedContactsParameters(v3);
  *(void *)(v2 + 40) = v4;
  *(void *)(v2 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = OUTLINED_FUNCTION_12_0(v4);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

#error "C6074: call analysis failed (funcsize=34)"
uint64_t StartCallCATPatternsExecutor.intentConfirmationWithRestrictedContacts(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_6_33();
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.intentConfirmationWithRestrictedContacts(_:)(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_22_15();
  return OUTLINED_FUNCTION_4_31(v1, v2);
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_22_19(a1, type metadata accessor for StartCallIntentConfirmationWithRestrictedContactsParameters);
  OUTLINED_FUNCTION_23_3();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_58_0();
  return OUTLINED_FUNCTION_3_0(v1);
}

uint64_t StartCallCATPatternsExecutor.intentHandledResponse(isFirstPartyApp:isWalkieTalkie:shouldPrintDialogOnDisplayMode:_:)( char a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = OUTLINED_FUNCTION_77_4(a1, a2, a3, a4, a5);
  uint64_t v7 = type metadata accessor for StartCallIntentHandledResponseParameters(v6);
  *(void *)(v5 + 40) = v7;
  *(void *)(v5 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = OUTLINED_FUNCTION_12_0(v7);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

#error "C623C: call analysis failed (funcsize=53)"
uint64_t StartCallCATPatternsExecutor.intentHandledResponse(isFirstPartyApp:isWalkieTalkie:shouldPrintDialogOnDisplayMode:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_6_33();
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.intentHandledResponse(isFirstPartyApp:isWalkieTalkie:shouldPrintDialogOnDisplayMode:_:)( uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_22_15();
  return OUTLINED_FUNCTION_4_31(v1, v2);
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_22_19(a1, type metadata accessor for StartCallIntentHandledResponseParameters);
  OUTLINED_FUNCTION_23_3();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_58_0();
  return OUTLINED_FUNCTION_3_0(v1);
}

uint64_t StartCallCATPatternsExecutor.intentHandledResponseWithFaceTimeLink()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(47LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.internalConversionError(_:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)StartCallCATPatternsExecutor.internalConversionError(_:));
}

uint64_t StartCallCATPatternsExecutor.internalConversionError(_:)()
{
  uint64_t v3 = *v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_8_2(v4, 80LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_161(v5);
  uint64_t v7 = OUTLINED_FUNCTION_35_0(v6, (__n128)xmmword_31D870);
  if (v3)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState(v7);
  }

  else
  {
    *(void *)(v2 + 56) = 0LL;
    *(void *)(v2 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_105_1(v7);
  OUTLINED_FUNCTION_2_3();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_46();
  *(void *)(v1 + 64) = v8;
  OUTLINED_FUNCTION_133_0(v8, (uint64_t)StartCallCATPatternsExecutor.errorWithCodeCallRinging(_:));
  OUTLINED_FUNCTION_27_3();
  unint64_t v9 = OUTLINED_FUNCTION_102(33LL);
  return OUTLINED_FUNCTION_12_28(v9, v10, v11, v12);
}

uint64_t StartCallCATPatternsExecutor.promptForContacts(isFaceTime:isUnsupportedFollowUp:startingOver:_:)( char a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = OUTLINED_FUNCTION_77_4(a1, a2, a3, a4, a5);
  uint64_t v7 = type metadata accessor for StartCallPromptForContactsParameters(v6);
  *(void *)(v5 + 40) = v7;
  *(void *)(v5 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = OUTLINED_FUNCTION_12_0(v7);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t StartCallCATPatternsExecutor.promptForContacts(isFaceTime:isUnsupportedFollowUp:startingOver:_:)()
{
  uint64_t v2 = *(int **)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  char v3 = *(_BYTE *)(v0 + 90);
  char v4 = *(_BYTE *)(v0 + 89);
  char v5 = *(_BYTE *)(v0 + 88);
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  __swift_storeEnumTagSinglePayload(v1, 1LL, 1LL, v6);
  *(_BYTE *)(v1 + v2[5]) = v5;
  *(_BYTE *)(v1 + v2[6]) = v4;
  uint64_t v7 = v1 + v2[7];
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 1;
  *(_BYTE *)(v1 + v2[8]) = v3;
  OUTLINED_FUNCTION_175();
  StartCallPromptForContactsParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_68_2(v8);
  unint64_t v9 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 64) = v9;
  OUTLINED_FUNCTION_53_7( v9,  (uint64_t)StartCallCATPatternsExecutor.promptForContacts(isFaceTime:isUnsupportedFollowUp:startingOver:_:));
  OUTLINED_FUNCTION_27_3();
  unint64_t v10 = OUTLINED_FUNCTION_172(27LL);
  return OUTLINED_FUNCTION_32_16(v10, v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_6_33();
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.promptForContacts(isFaceTime:isUnsupportedFollowUp:startingOver:_:)( uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_22_15();
  return OUTLINED_FUNCTION_4_31(v1, v2);
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_22_19(a1, type metadata accessor for StartCallPromptForContactsParameters);
  OUTLINED_FUNCTION_23_3();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_58_0();
  return OUTLINED_FUNCTION_3_0(v1);
}

uint64_t StartCallCATPatternsExecutor.simpleDisambiguateContacts(items:_:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  void v4[5] = v3;
  __int128 v4[2] = a1;
  void v4[3] = a2;
  uint64_t v5 = type metadata accessor for StartCallSimpleDisambiguateContactsParameters(0LL);
  void v4[6] = v5;
  v4[7] = OUTLINED_FUNCTION_12_0(v5);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t StartCallCATPatternsExecutor.simpleDisambiguateContacts(items:_:)()
{
  uint64_t v1 = (void *)v0[7];
  uint64_t v2 = (void (*)(void *))v0[3];
  uint64_t v3 = v0[2];
  uint64_t v4 = (uint64_t)v1 + *(int *)(v0[6] + 20LL);
  uint64_t v5 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_29_1(v4, v6, v7, v5);
  *uint64_t v1 = v3;
  swift_bridgeObjectRetain();
  v2(v1);
  StartCallSimpleDisambiguateContactsParameters.asKeyValuePairs()();
  v0[8] = v8;
  unint64_t v9 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[9] = v9;
  OUTLINED_FUNCTION_133_0(v9, (uint64_t)StartCallCATPatternsExecutor.simpleDisambiguateContacts(items:_:));
  OUTLINED_FUNCTION_27_3();
  unint64_t v10 = OUTLINED_FUNCTION_103_1(36LL);
  return OUTLINED_FUNCTION_12_28(v10, v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_88_3();
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v2 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.simpleDisambiguateContacts(items:_:)(uint64_t a1)
{
  return OUTLINED_FUNCTION_4_31(*(void *)(v1 + 88), *(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_22_19(a1, type metadata accessor for StartCallSimpleDisambiguateContactsParameters);
  OUTLINED_FUNCTION_23_3();
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t StartCallCATPatternsExecutor.simpleDisambiguateContactsHandles(isPhoneNumberHandleDisambiguation:isRequestForHandle:items:_:)( char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 56) = a5;
  *(void *)(v6 + 64) = v5;
  *(void *)(v6 + 40) = a3;
  *(void *)(v6 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a4;
  *(_BYTE *)(v6 + 121) = a2;
  *(_BYTE *)(v6 + 120) = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)StartCallCATPatternsExecutor.simpleDisambiguateContactsHandles(isPhoneNumberHandleDisambiguation:isRequestForHandle:items:_:));
}

uint64_t StartCallCATPatternsExecutor.simpleDisambiguateContactsHandles(isPhoneNumberHandleDisambiguation:isRequestForHandle:items:_:)()
{
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 40);
  char v3 = *(_BYTE *)(v0 + 121);
  *(_BYTE *)(v0 + ++*(void *)(v0 + 16) = *(_BYTE *)(v0 + 120);
  *(_BYTE *)(v0 + 17) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
  swift_bridgeObjectRetain();
  v1(v0 + 16);
  __int16 v4 = *(unsigned __int8 *)(v0 + 16);
  int v5 = *(unsigned __int8 *)(v0 + 17);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = *(void *)(v0 + 32);
  *(void *)(v0 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v6;
  *(void *)(v0 + 80) = v7;
  if (v5) {
    __int16 v8 = 256;
  }
  else {
    __int16 v8 = 0;
  }
  StartCallSimpleDisambiguateContactsHandlesParameters.asKeyValuePairs()(v8 | v4, v6, v7);
  *(void *)(v0 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v9;
  unint64_t v10 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 96) = v10;
  *unint64_t v10 = v0;
  v10[1] = StartCallCATPatternsExecutor.simpleDisambiguateContactsHandles(isPhoneNumberHandleDisambiguation:isRequestForHandle:items:_:);
  unint64_t v11 = OUTLINED_FUNCTION_103_1(43LL);
  return OUTLINED_FUNCTION_60_7(v11, v12, v13, v14);
}

{
  uint64_t v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_38_1();
  return OUTLINED_FUNCTION_4_31(*(void *)(v0 + 112), *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_38_1();
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t StartCallCATPatternsExecutor.simpleDisambiguateContactsHandles(isPhoneNumberHandleDisambiguation:isRequestForHandle:items:_:)( uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 96);
  *(void *)(*v2 + 104) = v1;
  swift_task_dealloc(v5);
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v4 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a1;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v6, v7, v8);
}

uint64_t StartCallCATPatternsExecutor.unsupportedCallCapability()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = StartCallCATPatternsExecutor.unsupportedCallCapability();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(35LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.unsupportedCallCapability()(uint64_t a1)
{
  uint64_t v6 = *v2;
  uint64_t v4 = swift_task_dealloc(*(void *)(*v2 + 16));
  if (!v1) {
    uint64_t v4 = a1;
  }
  return OUTLINED_FUNCTION_116_1(v4, *(uint64_t (**)(void))(v6 + 8));
}

uint64_t StartCallCATPatternsExecutor.unsupportedCallCapabilityCameraNotAccessible(_:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OUTLINED_FUNCTION_69_5(a1, a2);
  uint64_t v4 = type metadata accessor for StartCallUnsupportedCallCapabilityCameraNotAccessibleParameters(v3);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_12_0(v4);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t StartCallCATPatternsExecutor.unsupportedCallCapabilityCameraNotAccessible(_:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_26_0();
  uint64_t v2 = OUTLINED_FUNCTION_152(v1);
  *(void *)(v0 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = StartCallUnsupportedCallCapabilityMicrophoneNotAccessibleParameters.asKeyValuePairs()(v2);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 56) = v3;
  OUTLINED_FUNCTION_53_7(v3, (uint64_t)StartCallCATPatternsExecutor.unsupportedCallCapabilityCameraNotAccessible(_:));
  OUTLINED_FUNCTION_27_3();
  unint64_t v4 = OUTLINED_FUNCTION_103_1(54LL);
  return OUTLINED_FUNCTION_60_7(v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_87_3();
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v2 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.unsupportedCallCapabilityCameraNotAccessible(_:)(uint64_t a1)
{
  return OUTLINED_FUNCTION_4_31(*(void *)(v1 + 72), *(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_22_19( a1,  type metadata accessor for StartCallUnsupportedCallCapabilityCameraNotAccessibleParameters);
  OUTLINED_FUNCTION_23_3();
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t type metadata accessor for StartCallUnsupportedCallCapabilityCameraNotAccessibleParameters( uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for StartCallUnsupportedCallCapabilityCameraNotAccessibleParameters,  (uint64_t)&nominal type descriptor for StartCallUnsupportedCallCapabilityCameraNotAccessibleParameters);
}

uint64_t StartCallCATPatternsExecutor.unsupportedCallCapabilityMicrophoneNotAccessible(_:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OUTLINED_FUNCTION_69_5(a1, a2);
  uint64_t v4 = type metadata accessor for StartCallUnsupportedCallCapabilityMicrophoneNotAccessibleParameters(v3);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_12_0(v4);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t StartCallCATPatternsExecutor.unsupportedCallCapabilityMicrophoneNotAccessible(_:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_26_0();
  uint64_t v2 = OUTLINED_FUNCTION_152(v1);
  *(void *)(v0 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = StartCallUnsupportedCallCapabilityMicrophoneNotAccessibleParameters.asKeyValuePairs()(v2);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 56) = v3;
  OUTLINED_FUNCTION_53_7(v3, (uint64_t)StartCallCATPatternsExecutor.unsupportedCallCapabilityMicrophoneNotAccessible(_:));
  OUTLINED_FUNCTION_27_3();
  unint64_t v4 = OUTLINED_FUNCTION_103_1(58LL);
  return OUTLINED_FUNCTION_60_7(v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_87_3();
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v2 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.unsupportedCallCapabilityMicrophoneNotAccessible(_:)(uint64_t a1)
{
  return OUTLINED_FUNCTION_4_31(*(void *)(v1 + 72), *(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v1;
  OUTLINED_FUNCTION_22_19( a1,  type metadata accessor for StartCallUnsupportedCallCapabilityMicrophoneNotAccessibleParameters);
  OUTLINED_FUNCTION_23_3();
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t type metadata accessor for StartCallUnsupportedCallCapabilityMicrophoneNotAccessibleParameters( uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for StartCallUnsupportedCallCapabilityMicrophoneNotAccessibleParameters,  (uint64_t)&nominal type descriptor for StartCallUnsupportedCallCapabilityMicrophoneNotAccessibleParameters);
}

uint64_t StartCallCATPatternsExecutor.unsupportedCallCapabilityVideoCallUnsupported()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(55LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsForeignEmergencyDisambiguation()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(59LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsInvalidHandle(_:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[5] = OUTLINED_FUNCTION_12_0(v4);
  uint64_t v5 = type metadata accessor for StartCallUnsupportedContactsInvalidHandleParameters(0LL);
  v3[6] = v5;
  v3[7] = OUTLINED_FUNCTION_12_0(v5);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsInvalidHandle(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v11 = v10[6];
  uint64_t v12 = (uint64_t *)v10[7];
  uint64_t v13 = (void (*)(uint64_t *))v10[2];
  *uint64_t v12 = 0LL;
  uint64_t v14 = (uint64_t)v12 + *(int *)(v11 + 20);
  uint64_t v15 = OUTLINED_FUNCTION_26_0();
  __swift_storeEnumTagSinglePayload(v14, 1LL, 1LL, v15);
  v13(v12);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v17 = OUTLINED_FUNCTION_8_2(v16, 128LL);
  v10[8] = v17;
  OUTLINED_FUNCTION_65_3((__n128 *)v17, (__n128)xmmword_31D880);
  uint64_t v18 = *v12;
  if (v18)
  {
    uint64_t v19 = OUTLINED_FUNCTION_125_1();
    uint64_t v20 = v18;
  }

  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_54_0();
    *(void *)(v17 + 56) = 0LL;
    *(void *)(v17 + 64) = 0LL;
  }

  uint64_t v21 = v10[5];
  *(void *)(v17 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v20;
  *(void *)(v17 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v19;
  *(void *)(v17 + 80) = 0xD000000000000017LL;
  OUTLINED_FUNCTION_56_0();
  *(void *)(v17 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v22;
  outlined init with copy of Result<TemplatingResult, Error>( v14,  v21,  &demangling cache variable for type metadata for SpeakableString?);
  int v23 = OUTLINED_FUNCTION_10_26(v21);
  uint64_t v24 = v10[5];
  if (v23 == 1)
  {
    uint64_t v25 = OUTLINED_FUNCTION_95_1();
    OUTLINED_FUNCTION_150(v25, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v17 + 96) = 0u;
    *(_OWORD *)(v17 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
  }

  else
  {
    *(void *)(v17 + 120) = v15;
    uint64_t v26 = OUTLINED_FUNCTION_186();
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32LL))(v26, v24, v15);
    OUTLINED_FUNCTION_95_1();
  }

  uint64_t v27 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v10[9] = v27;
  OUTLINED_FUNCTION_53_7(v27, (uint64_t)StartCallCATPatternsExecutor.unsupportedContactsInvalidHandle(_:));
  return OUTLINED_FUNCTION_32_16(0xD00000000000002ALL, 0x80000000003427A0LL, v17, a10);
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsInvalidHandle(_:)()
{
  if (!v1) {
    *(void *)(v2 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsInvalidHandle(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 40);
  OUTLINED_FUNCTION_22_19(a1, type metadata accessor for StartCallUnsupportedContactsInvalidHandleParameters);
  OUTLINED_FUNCTION_23_3();
  swift_task_dealloc(v2);
  return OUTLINED_FUNCTION_116_1(*(void *)(v1 + 88), *(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = *(void *)(v1 + 40);
  OUTLINED_FUNCTION_22_19(a1, type metadata accessor for StartCallUnsupportedContactsInvalidHandleParameters);
  OUTLINED_FUNCTION_23_3();
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsMultipleContactsUnsupported()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(56LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsNoCallHistoryForRedial()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(51LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsNoContactFoundUserUnknown()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(54LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsNoHandleForLabel(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OUTLINED_FUNCTION_69_5(a1, a2);
  uint64_t v4 = type metadata accessor for StartCallUnsupportedContactsNoHandleForLabelParameters(v3);
  *(void *)(v2 + 40) = v4;
  *(void *)(v2 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = OUTLINED_FUNCTION_12_0(v4);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsNoHandleForLabel(_:)()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = (void *)v0[6];
  *uint64_t v1 = 0LL;
  uint64_t v3 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_113_1(v3);
  *(void *)((char *)v1 + OUTLINED_FUNCTION_5_18(v2, v3, v4) = 0LL;
  OUTLINED_FUNCTION_49_6(*(int *)(v2 + 32));
  StartCallUnsupportedContactsNoHandleForLabelParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_68_2(v5);
  uint64_t v6 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[8] = v6;
  OUTLINED_FUNCTION_53_7(v6, (uint64_t)StartCallCATPatternsExecutor.unsupportedContactsNoHandleForLabel(_:));
  OUTLINED_FUNCTION_27_3();
  unint64_t v7 = OUTLINED_FUNCTION_52_7(45LL);
  return OUTLINED_FUNCTION_25_5(v7, v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_6_33();
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsNoHandleForLabel(_:)(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_22_15();
  return OUTLINED_FUNCTION_4_31(v1, v2);
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_22_19(a1, type metadata accessor for StartCallUnsupportedContactsNoHandleForLabelParameters);
  OUTLINED_FUNCTION_23_3();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_58_0();
  return OUTLINED_FUNCTION_3_0(v1);
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsNoUsableHandleForRedial()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(52LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsUnsupportedMmiUssd()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(47LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.unsupportedDeviceFaceTimeLink(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OUTLINED_FUNCTION_69_5(a1, a2);
  uint64_t v4 = type metadata accessor for StartCallUnsupportedDeviceFaceTimeLinkParameters(v3);
  *(void *)(v2 + 40) = v4;
  *(void *)(v2 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = OUTLINED_FUNCTION_12_0(v4);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

#error "C73B0: call analysis failed (funcsize=35)"
uint64_t StartCallCATPatternsExecutor.unsupportedDeviceFaceTimeLink(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_6_33();
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.unsupportedDeviceFaceTimeLink(_:)(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_22_15();
  return OUTLINED_FUNCTION_4_31(v1, v2);
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_22_19(a1, type metadata accessor for StartCallUnsupportedDeviceFaceTimeLinkParameters);
  OUTLINED_FUNCTION_23_3();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_58_0();
  return OUTLINED_FUNCTION_3_0(v1);
}

uint64_t StartCallCATPatternsExecutor.unsupportedDeviceGroupFaceTime(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OUTLINED_FUNCTION_69_5(a1, a2);
  uint64_t v4 = type metadata accessor for StartCallUnsupportedDeviceGroupFaceTimeParameters(v3);
  *(void *)(v2 + 40) = v4;
  *(void *)(v2 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = OUTLINED_FUNCTION_12_0(v4);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

#error "C7530: call analysis failed (funcsize=35)"
uint64_t StartCallCATPatternsExecutor.unsupportedDeviceGroupFaceTime(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_6_33();
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.unsupportedDeviceGroupFaceTime(_:)(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_22_15();
  return OUTLINED_FUNCTION_4_31(v1, v2);
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_22_19(a1, type metadata accessor for StartCallUnsupportedDeviceGroupFaceTimeParameters);
  OUTLINED_FUNCTION_23_3();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_58_0();
  return OUTLINED_FUNCTION_3_0(v1);
}

uint64_t StartCallCATPatternsExecutor.unsupportedPreferredCallProvider(_:)(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)StartCallCATPatternsExecutor.unsupportedPreferredCallProvider(_:));
}

uint64_t StartCallCATPatternsExecutor.unsupportedPreferredCallProvider(_:)()
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  v1[5] = *v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_8_2(v4, 128LL);
  v1[6] = (uint64_t)v5;
  OUTLINED_FUNCTION_42_1(v5, (__n128)xmmword_31D880);
  if (v2)
  {
    uint64_t v6 = OUTLINED_FUNCTION_50_6();
    uint64_t v7 = v2;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
    v5[3].n128_u64[1] = 0LL;
    v5[4].n128_u64[0] = 0LL;
  }

  uint64_t v8 = OUTLINED_FUNCTION_109_2(v6, v7);
  if (v3)
  {
    uint64_t v8 = type metadata accessor for PhoneStartCallIntent(v8);
  }

  else
  {
    v5[6].n128_u64[1] = 0LL;
    v5[7].n128_u64[0] = 0LL;
  }

  *(void *)(v0 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v3;
  v5[6].n128_u64[0] = v3;
  v5[7].n128_u64[1] = v8;
  OUTLINED_FUNCTION_126_0();
  OUTLINED_FUNCTION_3_8();
  uint64_t v9 = (void *)swift_task_alloc(v1);
  *(void *)(v0 + 80) = v9;
  *uint64_t v9 = v0;
  v9[1] = StartCallCATPatternsExecutor.unsupportedPreferredCallProvider(_:);
  return OUTLINED_FUNCTION_12_28(0xD00000000000002ALL, 0x80000000003429C0LL, (uint64_t)v5, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_78_4();
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v2 + 96) = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v3, v4, v5);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_187();
  OUTLINED_FUNCTION_38_1();
  return OUTLINED_FUNCTION_4_31(*(void *)(v0 + 96), *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_187();
  OUTLINED_FUNCTION_38_1();
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t StartCallCATPatternsExecutor.unsupportedPreferredCallProviderAccountSetupRequired(_:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OUTLINED_FUNCTION_69_5(a1, a2);
  uint64_t v4 = type metadata accessor for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters(v3);
  *(void *)(v2 + 40) = v4;
  *(void *)(v2 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = OUTLINED_FUNCTION_12_0(v4);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

#error "C7848: call analysis failed (funcsize=32)"
uint64_t StartCallCATPatternsExecutor.unsupportedPreferredCallProviderAccountSetupRequired(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_6_33();
  OUTLINED_FUNCTION_34_0();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v3, v4, v5);
}

uint64_t StartCallCATPatternsExecutor.unsupportedPreferredCallProviderAccountSetupRequired(_:)(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_22_15();
  return OUTLINED_FUNCTION_4_31(v1, v2);
}

{
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_22_19( a1,  type metadata accessor for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters);
  OUTLINED_FUNCTION_23_3();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_58_0();
  return OUTLINED_FUNCTION_3_0(v1);
}

unint64_t lazy protocol witness table accessor for type StartCallCATPatternsIdentifiers and conformance StartCallCATPatternsIdentifiers()
{
  unint64_t result = lazy protocol witness table cache variable for type StartCallCATPatternsIdentifiers and conformance StartCallCATPatternsIdentifiers;
  if (!lazy protocol witness table cache variable for type StartCallCATPatternsIdentifiers and conformance StartCallCATPatternsIdentifiers)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StartCallCATPatternsIdentifiers,  &type metadata for StartCallCATPatternsIdentifiers);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type StartCallCATPatternsIdentifiers and conformance StartCallCATPatternsIdentifiers);
  }

  return result;
}

uint64_t protocol witness for StartCallCATPatternsExecuting.confirmContacts(isFaceTime:isFoundInAppConfirmation:isTopMatchConfirmation:_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *(int **)(**v5 + class metadata base offset for StartCallCATPatternsExecutor);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  uint64_t v13 = (void *)swift_task_alloc(v12[1]);
  *(void *)(v6 + ++*(void *)(v0 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v15(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.errorWithCodeAirplaneModeEnabled(isEmergency:isResponseFramework:_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v10 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v4 + 8);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc(v10[1]);
  *(void *)(v5 + ++*(void *)(v0 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v13(a1, a2, a3, a4);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.errorWithCodeAppConfigurationRequired(isThirdPartyApp:_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v3 + 16);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v11(a1, a2, a3);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.errorWithCodeCallInProgress(_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 24);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.errorWithCodeCallRinging(_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 32);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.errorWithCodeCallingServiceNotAvailable(isThirdPartyApp:_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v3 + 40);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v11(a1, a2, a3);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.errorWithCodeContactNotSupportedByApp(isThirdPartyApp:_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v3 + 48);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v11(a1, a2, a3);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.errorWithCodeDownTimeRestrictionEnabled(_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 56);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.errorWithCodeScreenTimeRestrictionEnabled() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 64);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.finalLowConfidenceResponse() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 72);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.genericError(_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 80);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.intentConfirmation(_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 88);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.intentConfirmationWithRestrictedContacts(_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 96);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.intentHandledResponse(isFirstPartyApp:isWalkieTalkie:shouldPrintDialogOnDisplayMode:_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v5 + 104);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  uint64_t v13 = (void *)swift_task_alloc(v12[1]);
  *(void *)(v6 + ++*(void *)(v0 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v15(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.intentHandledResponseWithFaceTimeLink() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 112);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.internalConversionError(_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 120);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.promptForContacts(isFaceTime:isUnsupportedFollowUp:startingOver:_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v5 + 128);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  uint64_t v13 = (void *)swift_task_alloc(v12[1]);
  *(void *)(v6 + ++*(void *)(v0 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v15(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.simpleDisambiguateContacts(items:_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v3 + 136);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v11(a1, a2, a3);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.simpleDisambiguateContactsHandles(isPhoneNumberHandleDisambiguation:isRequestForHandle:items:_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v5 + 144);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  uint64_t v13 = (void *)swift_task_alloc(v12[1]);
  *(void *)(v6 + ++*(void *)(v0 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v15(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedCallCapability() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 152);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedCallCapabilityCameraNotAccessible(_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 160);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedCallCapabilityMicrophoneNotAccessible(_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 168);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedCallCapabilityVideoCallUnsupported() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 176);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedContactsForeignEmergencyDisambiguation() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 184);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedContactsInvalidHandle(_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 192);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedContactsMultipleContactsUnsupported() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 200);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedContactsNoCallHistoryForRedial() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 208);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedContactsNoContactFoundUserUnknown() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 224);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedContactsNoHandleForLabel(_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 232);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedContactsNoUsableHandleForRedial() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 240);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedContactsUnsupportedMmiUssd() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 248);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedDeviceFaceTimeLink(_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 256);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedDeviceGroupFaceTime(_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 264);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedPreferredCallProvider(_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 272);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedPreferredCallProviderAccountSetupRequired(_:) in conformance StartCallCATPatternsExecutor( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 280);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t getEnumTagSinglePayload for StartCallCATPatternsIdentifiers(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xDD)
  {
    if (a2 + 35 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 35) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 36;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for StartCallCATPatternsIdentifiers( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 35 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 35) >> 8 < 0xFF) {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = 1;
  }
  else {
    LODWORD(OUTLINED_FUNCTION_5_18(v2, v3, v4) = v3;
  }
  if (a3 >= 0xDD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xDC) {
    return ((uint64_t (*)(void))((char *)&loc_C8B98 + 4 * byte_323849[v4]))();
  }
  *a1 = a2 + 35;
  return ((uint64_t (*)(void))((char *)sub_C8BCC + 4 * byte_323844[v4]))();
}

uint64_t sub_C8BCC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C8BD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xC8BDCLL);
  }
  return result;
}

uint64_t sub_C8BE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xC8BF0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 35;
  return result;
}

uint64_t sub_C8BF4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_C8BFC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for StartCallCATPatternsIdentifiers()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for StartCallConfirmContactsParameters( uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v10, 1LL, v7))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0LL, 1LL, v7);
    }

    uint64_t v14 = a3[6];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v14, 1LL, v7))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v15, v16, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0LL, 1LL, v7);
    }

    uint64_t v18 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1LL, v7))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v19, v20, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v19, 0LL, 1LL, v7);
    }

    uint64_t v22 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)a1 + v2__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *((_BYTE *)a2 + v22);
    uint64_t v23 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *(uint64_t *)((char *)a1 + v2__swift_destroy_boxed_opaque_existential_1(v0 + 3) = *(uint64_t *)((char *)a2 + v23);
    uint64_t v24 = a3[13];
    uint64_t v25 = (char *)a1 + v24;
    uint64_t v26 = (char *)a2 + v24;
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1LL, v7))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v25, v26, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v25, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t destroy for StartCallConfirmContactsParameters(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = a1 + a2[6];
  swift_release(*(void *)(a1 + a2[7]));
  uint64_t v7 = a1 + a2[8];
  swift_release(*(void *)(a1 + a2[12]));
  uint64_t v8 = a1 + a2[13];
  uint64_t result = __swift_getEnumTagSinglePayload(v8, 1LL, v4);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v8, v4);
  }
  return result;
}

char *initializeWithCopy for StartCallConfirmContactsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v12], 1LL, v6))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v13, v14, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0LL, 1LL, v6);
  }

  uint64_t v16 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1LL, v6))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v17, v18, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 0LL, 1LL, v6);
  }

  uint64_t v20 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v20] = a2[v20];
  uint64_t v21 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  *(void *)&a1[v21] = *(void *)&a2[v21];
  uint64_t v22 = a3[13];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v24, 1LL, v6))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v23, v24, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v23, 0LL, 1LL, v6);
  }

  return a1;
}

char *assignWithCopy for StartCallConfirmContactsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1LL, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v11], 1LL, v6);
  int v15 = __swift_getEnumTagSinglePayload((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v18], 1LL, v6);
  int v22 = __swift_getEnumTagSinglePayload((uint64_t)v20, 1LL, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v19, v20, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v19, 0LL, 1LL, v6);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v23 = *(void *)(v6 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v6);
LABEL_18:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v19, v20, v6);
LABEL_19:
  uint64_t v25 = a3[7];
  uint64_t v26 = *(void *)&a1[v25];
  *(void *)&a1[v25] = *(void *)&a2[v25];
  swift_retain();
  swift_release(v26);
  uint64_t v27 = a3[8];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  int v30 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v27], 1LL, v6);
  int v31 = __swift_getEnumTagSinglePayload((uint64_t)v29, 1LL, v6);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v28, v29, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v28, 0LL, 1LL, v6);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  uint64_t v32 = *(void *)(v6 - 8);
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v28, v6);
LABEL_24:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v28, v29, *(void *)(*(void *)(v33 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v32 + 24))(v28, v29, v6);
LABEL_25:
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  a1[a3[11]] = a2[a3[11]];
  uint64_t v34 = a3[12];
  uint64_t v35 = *(void *)&a1[v34];
  *(void *)&a1[v34] = *(void *)&a2[v34];
  swift_retain();
  swift_release(v35);
  uint64_t v36 = a3[13];
  uint64_t v37 = &a1[v36];
  char v38 = &a2[v36];
  LODWORD(v3__swift_destroy_boxed_opaque_existential_1(v0 + 5) = __swift_getEnumTagSinglePayload((uint64_t)&a1[v36], 1LL, v6);
  int v39 = __swift_getEnumTagSinglePayload((uint64_t)v38, 1LL, v6);
  if (!(_DWORD)v35)
  {
    uint64_t v40 = *(void *)(v6 - 8);
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 24))(v37, v38, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v40 + 8))(v37, v6);
    goto LABEL_30;
  }

  if (v39)
  {
LABEL_30:
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v37, v38, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v37, 0LL, 1LL, v6);
  return a1;
}

char *initializeWithTake for StartCallConfirmContactsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  int v14 = &a2[v12];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v12], 1LL, v6))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v13, v14, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0LL, 1LL, v6);
  }

  uint64_t v16 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v16], 1LL, v6))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v17, v18, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 0LL, 1LL, v6);
  }

  uint64_t v20 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v20] = a2[v20];
  uint64_t v21 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  *(void *)&a1[v21] = *(void *)&a2[v21];
  uint64_t v22 = a3[13];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  if (__swift_getEnumTagSinglePayload((uint64_t)v24, 1LL, v6))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v23, v24, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v23, 0LL, 1LL, v6);
  }

  return a1;
}

char *assignWithTake for StartCallConfirmContactsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1LL, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v11], 1LL, v6);
  int v15 = __swift_getEnumTagSinglePayload((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v18], 1LL, v6);
  int v22 = __swift_getEnumTagSinglePayload((uint64_t)v20, 1LL, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v19, v20, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v19, 0LL, 1LL, v6);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v23 = *(void *)(v6 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v6);
LABEL_18:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v19, v20, v6);
LABEL_19:
  uint64_t v25 = a3[7];
  uint64_t v26 = *(void *)&a1[v25];
  *(void *)&a1[v25] = *(void *)&a2[v25];
  swift_release(v26);
  uint64_t v27 = a3[8];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  int v30 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v27], 1LL, v6);
  int v31 = __swift_getEnumTagSinglePayload((uint64_t)v29, 1LL, v6);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v28, v29, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v28, 0LL, 1LL, v6);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  uint64_t v32 = *(void *)(v6 - 8);
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v28, v6);
LABEL_24:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v28, v29, *(void *)(*(void *)(v33 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v32 + 40))(v28, v29, v6);
LABEL_25:
  uint64_t v34 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v34] = a2[v34];
  uint64_t v35 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  uint64_t v36 = *(void *)&a1[v35];
  *(void *)&a1[v35] = *(void *)&a2[v35];
  swift_release(v36);
  uint64_t v37 = a3[13];
  char v38 = &a1[v37];
  int v39 = &a2[v37];
  int v40 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v37], 1LL, v6);
  int v41 = __swift_getEnumTagSinglePayload((uint64_t)v39, 1LL, v6);
  if (!v40)
  {
    uint64_t v42 = *(void *)(v6 - 8);
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 40))(v38, v39, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v42 + 8))(v38, v6);
    goto LABEL_30;
  }

  if (v41)
  {
LABEL_30:
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v38, v39, *(void *)(*(void *)(v43 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v38, v39, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v38, 0LL, 1LL, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartCallConfirmContactsParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_C9DB4);
}

void sub_C9DB4()
{
  if (v2)
  {
    uint64_t v3 = OUTLINED_FUNCTION_158();
    OUTLINED_FUNCTION_9_3(v3, v4, v5);
  }

  else
  {
    OUTLINED_FUNCTION_35_14(*(void *)(v0 + *(int *)(v1 + 28)));
    OUTLINED_FUNCTION_6();
  }

uint64_t storeEnumTagSinglePayload for StartCallConfirmContactsParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_C9E08);
}

void sub_C9E08()
{
  if (v3)
  {
    uint64_t v4 = OUTLINED_FUNCTION_91_3();
    OUTLINED_FUNCTION_32_6(v4, v5, v6, v7);
  }

  else
  {
    *(void *)(v1 + *(int *)(v2 + 28)) = v0;
    OUTLINED_FUNCTION_6();
  }

void type metadata completion function for StartCallConfirmContactsParameters(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    __int128 v4[2] = v4[0];
    void v4[3] = "\b";
    void v4[4] = v4[0];
    void v4[5] = &unk_323970;
    void v4[6] = &unk_323970;
    v4[7] = &unk_323970;
    v4[8] = "\b";
    v4[9] = v4[0];
    swift_initStructMetadata(a1, 256LL, 10LL, v4, a1 + 16);
  }

uint64_t initializeBufferWithCopyOfBuffer for StartCallErrorWithCodeAirplaneModeEnabledParameters( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16LL) & ~(unint64_t)v3);
    swift_retain();
  }

  else
  {
    uint64_t v5 = a1;
    *(_WORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *((_WORD *)a2 + 4);
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = (void *)(a1 + v6);
    int v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for SpeakableString(0LL);
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1LL, v9))
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0LL, 1LL, v9);
    }
  }

  return v5;
}

uint64_t destroy for StartCallErrorWithCodeAirplaneModeEnabledParameters(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for SpeakableString(0LL);
  uint64_t result = __swift_getEnumTagSinglePayload(v4, 1LL, v5);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }
  return result;
}

uint64_t initializeWithCopy for StartCallErrorWithCodeAirplaneModeEnabledParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1LL, v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0LL, 1LL, v7);
  }

  return a1;
}

uint64_t *assignWithCopy for StartCallErrorWithCodeAirplaneModeEnabledParameters( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_retain();
  swift_release(v6);
  *((_BYTE *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 9) = *((_BYTE *)a2 + 9);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1LL, v10);
  int v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1LL, v10);
  if (!EnumTagSinglePayload)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v8, v9, v10);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v12)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0LL, 1LL, v10);
  return a1;
}

uint64_t initializeWithTake for StartCallErrorWithCodeAirplaneModeEnabledParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1LL, v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0LL, 1LL, v7);
  }

  return a1;
}

uint64_t *assignWithTake for StartCallErrorWithCodeAirplaneModeEnabledParameters( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  *((_BYTE *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 9) = *((_BYTE *)a2 + 9);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1LL, v10);
  int v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1LL, v10);
  if (!EnumTagSinglePayload)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v12)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0LL, 1LL, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartCallErrorWithCodeAirplaneModeEnabledParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_CA3F4);
}

void sub_CA3F4()
{
  if (v3)
  {
    OUTLINED_FUNCTION_35_14(*v1);
    OUTLINED_FUNCTION_6();
  }

  else
  {
    OUTLINED_FUNCTION_201();
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_3((uint64_t)v1 + *(int *)(v2 + 28), v0, v4);
  }

uint64_t storeEnumTagSinglePayload for StartCallErrorWithCodeAirplaneModeEnabledParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_CA450);
}

void sub_CA450()
{
  if (v2)
  {
    *uint64_t v1 = v0;
    OUTLINED_FUNCTION_6();
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_110_2();
    OUTLINED_FUNCTION_32_6(v3, v4, v5, v6);
  }

void type metadata completion function for StartCallErrorWithCodeAirplaneModeEnabledParameters(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = &unk_323970;
  __int128 v4[2] = &unk_323970;
  type metadata accessor for SpeakableString?(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
  }

uint64_t getEnumTagSinglePayload for StartCallErrorWithCodeAppConfigurationRequiredParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_75Tm);
}

uint64_t storeEnumTagSinglePayload for StartCallErrorWithCodeAppConfigurationRequiredParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_76Tm);
}

void type metadata accessor for StartCallErrorWithCodeCallInProgressParameters()
{
}

void type metadata accessor for StartCallErrorWithCodeCallRingingParameters()
{
}

uint64_t getEnumTagSinglePayload for StartCallErrorWithCodeCallingServiceNotAvailableParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_75Tm_0);
}

uint64_t storeEnumTagSinglePayload for StartCallErrorWithCodeCallingServiceNotAvailableParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_76Tm_0);
}

void initializeBufferWithCopyOfBuffer for StartCallErrorWithCodeAppConfigurationRequiredParameters( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if ((*(_DWORD *)(*(void *)(a3 - 8) + 80LL) & 0x20000) != 0)
  {
    OUTLINED_FUNCTION_129_0(*a2);
  }

  else
  {
    uint64_t v6 = OUTLINED_FUNCTION_26_0();
    if (OUTLINED_FUNCTION_14_25((uint64_t)a2))
    {
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      OUTLINED_FUNCTION_47_6(v7);
    }

    else
    {
      OUTLINED_FUNCTION_17_31(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      OUTLINED_FUNCTION_7_43(a1);
    }

    uint64_t v8 = *(int *)(a3 + 24);
    *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    uint64_t v9 = a1 + v8;
    if (OUTLINED_FUNCTION_14_25((uint64_t)a2 + v8))
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      OUTLINED_FUNCTION_18_25(v10);
    }

    else
    {
      OUTLINED_FUNCTION_17_31(v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      OUTLINED_FUNCTION_7_43(v9);
    }
  }

  OUTLINED_FUNCTION_6();
}

void destroy for StartCallErrorWithCodeAppConfigurationRequiredParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = OUTLINED_FUNCTION_26_0();
  if (OUTLINED_FUNCTION_10_26(a1 + *(int *)(a2 + 24)))
  {
    OUTLINED_FUNCTION_6();
  }

  else
  {
    uint64_t v5 = OUTLINED_FUNCTION_180();
    OUTLINED_FUNCTION_119_0(v5, v6, v7);
  }

void initializeWithCopy for StartCallErrorWithCodeAppConfigurationRequiredParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  if (OUTLINED_FUNCTION_14_25(a2))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_47_6(v7);
  }

  else
  {
    OUTLINED_FUNCTION_17_31(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
    OUTLINED_FUNCTION_7_43(a1);
  }

  uint64_t v8 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  uint64_t v9 = a1 + v8;
  if (OUTLINED_FUNCTION_14_25(a2 + v8))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_18_25(v10);
  }

  else
  {
    OUTLINED_FUNCTION_17_31(v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
    OUTLINED_FUNCTION_7_43(v9);
  }

  OUTLINED_FUNCTION_6();
}

void assignWithCopy for StartCallErrorWithCodeAppConfigurationRequiredParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(a1, 1LL, v6);
  int v8 = OUTLINED_FUNCTION_14_25(a2);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      OUTLINED_FUNCTION_17_31(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      OUTLINED_FUNCTION_7_43(a1);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    OUTLINED_FUNCTION_100_0(a1, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_47_6(v10);
    goto LABEL_7;
  }

  OUTLINED_FUNCTION_17_31(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 24));
LABEL_7:
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  int v14 = __swift_getEnumTagSinglePayload(a1 + v11, 1LL, v6);
  int v15 = OUTLINED_FUNCTION_14_25(v13);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      OUTLINED_FUNCTION_17_31(v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 24));
      goto LABEL_13;
    }

    OUTLINED_FUNCTION_74_4(v16);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_18_25(v17);
    goto LABEL_13;
  }

  OUTLINED_FUNCTION_17_31(v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
  OUTLINED_FUNCTION_7_43(v12);
LABEL_13:
  OUTLINED_FUNCTION_16();
}

void initializeWithTake for StartCallErrorWithCodeAppConfigurationRequiredParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  if (OUTLINED_FUNCTION_14_25(a2))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_47_6(v7);
  }

  else
  {
    OUTLINED_FUNCTION_17_31(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    OUTLINED_FUNCTION_7_43(a1);
  }

  uint64_t v8 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  uint64_t v9 = a1 + v8;
  if (OUTLINED_FUNCTION_14_25(a2 + v8))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_18_25(v10);
  }

  else
  {
    OUTLINED_FUNCTION_17_31(v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    OUTLINED_FUNCTION_7_43(v9);
  }

  OUTLINED_FUNCTION_6();
}

void assignWithTake for StartCallErrorWithCodeAppConfigurationRequiredParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(a1, 1LL, v6);
  int v8 = OUTLINED_FUNCTION_14_25(a2);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      OUTLINED_FUNCTION_17_31(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
      OUTLINED_FUNCTION_7_43(a1);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    OUTLINED_FUNCTION_100_0(a1, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_47_6(v10);
    goto LABEL_7;
  }

  OUTLINED_FUNCTION_17_31(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 40));
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  int v14 = __swift_getEnumTagSinglePayload(a1 + v11, 1LL, v6);
  int v15 = OUTLINED_FUNCTION_14_25(v13);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      OUTLINED_FUNCTION_17_31(v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 40));
      goto LABEL_13;
    }

    OUTLINED_FUNCTION_74_4(v16);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_18_25(v17);
    goto LABEL_13;
  }

  OUTLINED_FUNCTION_17_31(v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
  OUTLINED_FUNCTION_7_43(v12);
LABEL_13:
  OUTLINED_FUNCTION_16();
}

uint64_t getEnumTagSinglePayload for StartCallErrorWithCodeContactNotSupportedByAppParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_75Tm_1);
}

uint64_t storeEnumTagSinglePayload for StartCallErrorWithCodeContactNotSupportedByAppParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_76Tm_1);
}

void type metadata completion function for StartCallErrorWithCodeAppConfigurationRequiredParameters( uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    OUTLINED_FUNCTION_148_0(v2, v3, v4, v5, a1 + 16, v6);
    OUTLINED_FUNCTION_1();
  }

  OUTLINED_FUNCTION_60_2();
}

uint64_t destroy for StartCallErrorWithCodeDownTimeRestrictionEnabledParameters(void *a1)
{
  return swift_release(a1[1]);
}

void type metadata accessor for StartCallErrorWithCodeDownTimeRestrictionEnabledParameters()
{
}

void type metadata accessor for StartCallGenericErrorParameters()
{
}

void type metadata accessor for StartCallIntentConfirmationParameters()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for StartCallIntentConfirmationWithRestrictedContactsParameters( uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SpeakableString(0LL);
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1LL, v11))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0LL, 1LL, v11);
    }

    uint64_t v13 = a3[7];
    *(uint64_t *)((char *)v7 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    int v14 = (char *)v7 + v13;
    int v15 = (char *)a2 + v13;
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1LL, v11))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v14, v15, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0LL, 1LL, v11);
    }

    *(uint64_t *)((char *)v7 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  }

  swift_retain();
  return v7;
}

uint64_t destroy for StartCallIntentConfirmationWithRestrictedContactsParameters(void *a1, int *a2)
{
  uint64_t v4 = (uint64_t)a1 + a2[5];
  uint64_t v5 = type metadata accessor for SpeakableString(0LL);
  swift_release(*(void *)((char *)a1 + a2[6]));
  uint64_t v6 = (uint64_t)a1 + a2[7];
  return swift_release(*(void *)((char *)a1 + a2[8]));
}

void *initializeWithCopy for StartCallIntentConfirmationWithRestrictedContactsParameters( void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0LL, 1LL, v9);
  }

  uint64_t v11 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1LL, v9))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v12, v13, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0LL, 1LL, v9);
  }

  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for StartCallIntentConfirmationWithRestrictedContactsParameters( uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_retain();
  swift_release(v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1LL, v10);
  int v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1LL, v10);
  if (EnumTagSinglePayload)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v13 = *(void *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = *(uint64_t *)((char *)a1 + v15);
  *(uint64_t *)((char *)a1 + v__swift_destroy_boxed_opaque_existential_1(v0 + 15) = *(uint64_t *)((char *)a2 + v15);
  swift_retain();
  swift_release(v16);
  uint64_t v17 = a3[7];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  int v20 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v17, 1LL, v10);
  int v21 = __swift_getEnumTagSinglePayload((uint64_t)v19, 1LL, v10);
  if (!v20)
  {
    uint64_t v22 = *(void *)(v10 - 8);
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v18, v19, v10);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v22 + 8))(v18, v10);
    goto LABEL_12;
  }

  if (v21)
  {
LABEL_12:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v18, v19, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v18, 0LL, 1LL, v10);
LABEL_13:
  uint64_t v24 = a3[8];
  uint64_t v25 = *(uint64_t *)((char *)a1 + v24);
  *(uint64_t *)((char *)a1 + v24) = *(uint64_t *)((char *)a2 + v24);
  swift_retain();
  swift_release(v25);
  return a1;
}

void *initializeWithTake for StartCallIntentConfirmationWithRestrictedContactsParameters( void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0LL, 1LL, v9);
  }

  uint64_t v11 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  int v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v11, 1LL, v9))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v12, v13, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0LL, 1LL, v9);
  }

  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  return a1;
}

uint64_t *assignWithTake for StartCallIntentConfirmationWithRestrictedContactsParameters( uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1LL, v10);
  int v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1LL, v10);
  if (EnumTagSinglePayload)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v13 = *(void *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = *(uint64_t *)((char *)a1 + v15);
  *(uint64_t *)((char *)a1 + v__swift_destroy_boxed_opaque_existential_1(v0 + 15) = *(uint64_t *)((char *)a2 + v15);
  swift_release(v16);
  uint64_t v17 = a3[7];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  int v20 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v17, 1LL, v10);
  int v21 = __swift_getEnumTagSinglePayload((uint64_t)v19, 1LL, v10);
  if (!v20)
  {
    uint64_t v22 = *(void *)(v10 - 8);
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v18, v19, v10);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v22 + 8))(v18, v10);
    goto LABEL_12;
  }

  if (v21)
  {
LABEL_12:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v18, v19, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v18, 0LL, 1LL, v10);
LABEL_13:
  uint64_t v24 = a3[8];
  uint64_t v25 = *(uint64_t *)((char *)a1 + v24);
  *(uint64_t *)((char *)a1 + v24) = *(uint64_t *)((char *)a2 + v24);
  swift_release(v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartCallIntentConfirmationWithRestrictedContactsParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_81Tm);
}

uint64_t storeEnumTagSinglePayload for StartCallIntentConfirmationWithRestrictedContactsParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_82Tm);
}

void type metadata completion function for StartCallIntentConfirmationWithRestrictedContactsParameters( uint64_t a1)
{
  uint64_t v4 = "\b";
  type metadata accessor for SpeakableString?(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(v2 - 8) + 64LL;
    uint64_t v6 = "\b";
    uint64_t v7 = v5;
    uint64_t v8 = "\b";
    swift_initStructMetadata(a1, 256LL, 5LL, &v4, a1 + 16);
  }

char *initializeBufferWithCopyOfBuffer for StartCallIntentHandledResponseParameters( char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v4, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v4, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v4, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[6];
    *(void *)&v4[a3[5]] = *(uint64_t *)((char *)a2 + a3[5]);
    uint64_t v11 = &v4[v10];
    int v12 = (char *)a2 + v10;
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1LL, v7))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0LL, 1LL, v7);
    }

    uint64_t v14 = a3[8];
    *(void *)&v4[a3[7]] = *(uint64_t *)((char *)a2 + a3[7]);
    v4[v14] = *((_BYTE *)a2 + v14);
    uint64_t v15 = a3[10];
    v4[a3[9]] = *((_BYTE *)a2 + a3[9]);
    *(void *)&v4[v15] = *(uint64_t *)((char *)a2 + v15);
    v4[a3[11]] = *((_BYTE *)a2 + a3[11]);
    swift_retain();
  }

  swift_retain();
  return v4;
}

uint64_t destroy for StartCallIntentHandledResponseParameters(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  swift_release(*(void *)(a1 + a2[5]));
  uint64_t v5 = a1 + a2[6];
  swift_release(*(void *)(a1 + a2[7]));
  return swift_release(*(void *)(a1 + a2[10]));
}

char *initializeWithCopy for StartCallIntentHandledResponseParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1LL, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  a1[a3[11]] = a2[a3[11]];
  swift_retain();
  swift_retain();
  return a1;
}

char *assignWithCopy for StartCallIntentHandledResponseParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1LL, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = *(void *)&a1[v11];
  *(void *)&a1[v11] = *(void *)&a2[v11];
  swift_retain();
  swift_release(v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  int v16 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v13], 1LL, v6);
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)v15, 1LL, v6);
  if (!v16)
  {
    uint64_t v18 = *(void *)(v6 - 8);
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v14, v15, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v6);
    goto LABEL_12;
  }

  if (v17)
  {
LABEL_12:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v14, v15, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v14, 0LL, 1LL, v6);
LABEL_13:
  uint64_t v20 = a3[7];
  uint64_t v21 = *(void *)&a1[v20];
  *(void *)&a1[v20] = *(void *)&a2[v20];
  swift_retain();
  swift_release(v21);
  a1[a3[8]] = a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  uint64_t v22 = a3[10];
  uint64_t v23 = *(void *)&a1[v22];
  *(void *)&a1[v22] = *(void *)&a2[v22];
  swift_retain();
  swift_release(v23);
  a1[a3[11]] = a2[a3[11]];
  return a1;
}

char *initializeWithTake for StartCallIntentHandledResponseParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  a1[a3[11]] = a2[a3[11]];
  return a1;
}

char *assignWithTake for StartCallIntentHandledResponseParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1LL, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = *(void *)&a1[v11];
  *(void *)&a1[v11] = *(void *)&a2[v11];
  swift_release(v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  int v16 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v13], 1LL, v6);
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)v15, 1LL, v6);
  if (!v16)
  {
    uint64_t v18 = *(void *)(v6 - 8);
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v14, v15, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v6);
    goto LABEL_12;
  }

  if (v17)
  {
LABEL_12:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v14, v15, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v14, 0LL, 1LL, v6);
LABEL_13:
  uint64_t v20 = a3[7];
  uint64_t v21 = *(void *)&a1[v20];
  *(void *)&a1[v20] = *(void *)&a2[v20];
  swift_release(v21);
  uint64_t v22 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v22] = a2[v22];
  uint64_t v23 = a3[10];
  uint64_t v24 = *(void *)&a1[v23];
  *(void *)&a1[v23] = *(void *)&a2[v23];
  swift_release(v24);
  a1[a3[11]] = a2[a3[11]];
  return a1;
}

uint64_t getEnumTagSinglePayload for StartCallIntentHandledResponseParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_83Tm);
}

uint64_t storeEnumTagSinglePayload for StartCallIntentHandledResponseParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_84Tm);
}

void type metadata completion function for StartCallIntentHandledResponseParameters(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = "\b";
    __int128 v4[2] = v4[0];
    void v4[3] = "\b";
    void v4[4] = &unk_323970;
    void v4[5] = &unk_323970;
    void v4[6] = "\b";
    v4[7] = &unk_323970;
    swift_initStructMetadata(a1, 256LL, 8LL, v4, a1 + 16);
  }

void *storeEnumTagSinglePayload for StartCallErrorWithCodeCallInProgressParameters( void *result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *((_BYTE *)result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *((_BYTE *)result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0;
    }
    if (a2) {
      return OUTLINED_FUNCTION_200(result, a2);
    }
  }

  return result;
}

void type metadata accessor for StartCallInternalConversionErrorParameters()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for StartCallPromptForContactsParameters( uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
    uint64_t v11 = a3[7];
    uint64_t v12 = a3[8];
    uint64_t v13 = (char *)a1 + v11;
    uint64_t v14 = (char *)a2 + v11;
    *(void *)uint64_t v13 = *(void *)v14;
    v13[8] = v14[8];
    *((_BYTE *)a1 + v1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *((_BYTE *)a2 + v12);
  }

  return a1;
}

char *initializeWithCopy for StartCallPromptForContactsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  a1[v8] = a2[v8];
  uint64_t v9 = a3[7];
  uint64_t v10 = a3[8];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  a1[v10] = a2[v10];
  return a1;
}

char *assignWithCopy for StartCallPromptForContactsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1LL, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  a1[a3[5]] = a2[a3[5]];
  a1[a3[6]] = a2[a3[6]];
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  v12[8] = v13[8];
  *(void *)uint64_t v12 = v14;
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

char *initializeWithTake for StartCallPromptForContactsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  a1[v8] = a2[v8];
  uint64_t v9 = a3[7];
  uint64_t v10 = a3[8];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  a1[v10] = a2[v10];
  return a1;
}

char *assignWithTake for StartCallPromptForContactsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1LL, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  uint64_t v11 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  a1[v11] = a2[v11];
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  a1[v13] = a2[v13];
  return a1;
}