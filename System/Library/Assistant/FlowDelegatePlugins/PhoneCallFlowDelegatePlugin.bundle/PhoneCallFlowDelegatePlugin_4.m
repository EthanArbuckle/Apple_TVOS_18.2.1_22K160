uint64_t sub_1B41A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1B41B0LL);
  }
  return result;
}

_BYTE *sub_1B41B8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1B41C0LL);
  }
  return OUTLINED_FUNCTION_253((_BYTE *)a1, a2 + 5);
}

void type metadata accessor for StartCallCATsSimple.UnsupportedPreferredCallProviderTelephonyUnsupportedDialogIds()
{
}

uint64_t OUTLINED_FUNCTION_83_11(uint64_t result)
{
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = result;
  strcpy((char *)(v2 + 80), "hintIdentifier");
  *(_BYTE *)(v2 + 95) = -18;
  return result;
}

void OUTLINED_FUNCTION_86_9()
{
  char v4 = *(_BYTE *)(v2 + 74);
  *(void *)(v3 + 144) = v1;
  *(void *)(v3 + 168) = v0;
  strcpy((char *)(v3 + 176), "startingOver");
  *(_BYTE *)(v3 + 189) = 0;
  *(_WORD *)(v3 + 190) = -5120;
  *(_BYTE *)(v3 + 192) = v4;
}

uint64_t OUTLINED_FUNCTION_89_9@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v2[6] = a2;
  v2[9] = result;
  v2[10] = 0x436465776F6C6C61LL;
  v2[11] = 0xEF73746361746E6FLL;
  return result;
}

void OUTLINED_FUNCTION_91_9()
{
  *(void *)(v0 + 224) = 0x5074737269467369LL;
  *(void *)(v0 + 232) = 0xEF70704179747261LL;
}

uint64_t OUTLINED_FUNCTION_98_8(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0x656772656D457369LL;
  v2[11] = 0xEB0000000079636ELL;
  return result;
}

uint64_t OUTLINED_FUNCTION_101_6(uint64_t result)
{
  v2[18] = v1;
  v2[21] = result;
  v2[22] = 0x656D614E707061LL;
  v2[23] = 0xE700000000000000LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_103_6()
{
  *(void *)(v0 + 80) = 0x6574736575716572LL;
  *(void *)(v0 + 88) = 0xEF656C646E614864LL;
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_106_6()
{
  uint64_t v3 = *v1;
  char v4 = (uint64_t *)(v2 - 8);
  *char v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 64);
  *char v4 = *v1;
  *(void *)(v3 + 72) = v0;
  return swift_task_dealloc(v5);
}

void OUTLINED_FUNCTION_110_7()
{
  *(void *)(v0 + 128) = 0x5074737269467369LL;
  *(void *)(v0 + 136) = 0xEF70704179747261LL;
}

uint64_t OUTLINED_FUNCTION_112_6(uint64_t a1)
{
  v2[12] = v1;
  v2[15] = a1;
  v2[16] = 0x656369766564LL;
  v2[17] = 0xE600000000000000LL;
  return 0LL;
}

void OUTLINED_FUNCTION_114_3()
{
  *(void *)(v0 + 80) = 0x6954656361467369LL;
  *(void *)(v0 + 88) = 0xEA0000000000656DLL;
}

uint64_t OUTLINED_FUNCTION_117_7@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v2[6] = a2;
  v2[9] = result;
  v2[10] = 0xD000000000000014LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_124_6(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0xD000000000000015LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_125_8(unsigned __int16 a1)
{
  return a1 | 0x636972656E0000LL;
}

uint64_t OUTLINED_FUNCTION_131_5(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_133_6( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t OUTLINED_FUNCTION_135_5(uint64_t result)
{
  v2[18] = v1;
  v2[21] = result;
  v2[22] = v3 - 2;
  return result;
}

uint64_t OUTLINED_FUNCTION_137_5(uint64_t result, char a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(v7 + 24) = a3;
  *(void *)(v7 + 32) = v6;
  *(_BYTE *)(v7 + 75) = a6;
  *(_BYTE *)(v7 + 74) = a5;
  *(_BYTE *)(v7 + 73) = a4;
  *(_BYTE *)(v7 + 72) = a2;
  *(void *)(v7 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_138_4(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_139_5(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_140_6(uint64_t result)
{
  v2[18] = v1;
  v2[21] = result;
  v2[22] = v3 + 11;
  return result;
}

uint64_t OUTLINED_FUNCTION_144_4(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_150_4( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, char a7)
{
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 48) = v7;
  *(_BYTE *)(v8 + 90) = a7;
  *(_BYTE *)(v8 + 89) = a6;
  *(_BYTE *)(v8 + 88) = a5;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 16) = result;
  return result;
}

  ;
}

uint64_t OUTLINED_FUNCTION_153_5@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v2[12] = a2;
  v2[15] = result;
  v2[16] = 0xD000000000000012LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_154_4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v2[6] = a2;
  v2[9] = result;
  v2[10] = 0xD000000000000018LL;
  return result;
}

  ;
}

uint64_t OUTLINED_FUNCTION_171_4(unsigned __int16 a1)
{
  return a1 | 0x63614670756F0000LL;
}

  ;
}

void OUTLINED_FUNCTION_186_1(void *a1@<X8>)
{
  *a1 = v1;
  a1[1] = 0xE700000000000000LL;
}

uint64_t OUTLINED_FUNCTION_192_3()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 80));
}

  ;
}

uint64_t DIIdentifier.payloadId.getter(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v6._countAndFlagsBits = 46LL;
  v6._object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = a3;
  v7._object = a4;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t static DICodable.from(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = v4;
  if (!a1) {
    a1 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for Any[1],  &protocol witness table for String);
  }
  uint64_t v28 = a1;
  swift_bridgeObjectRetain();
  static DICodable.adaptUserDataBeforeDecoder(_:)((uint64_t)&v28, a2, a3);
  uint64_t v9 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v27 = 0LL;
  id v11 = [v9 dataWithPropertyList:isa format:200 options:0 error:&v27];

  id v12 = v27;
  if (v11)
  {
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
    unint64_t v15 = v14;

    uint64_t v16 = type metadata accessor for PropertyListDecoder(0LL);
    OUTLINED_FUNCTION_15_2(v16);
    PropertyListDecoder.init()();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(a4, v5, v13, v15, a2, *(void *)(a3 + 8));
    OUTLINED_FUNCTION_7_71();
    return outlined consume of Data._Representation(v13, v15);
  }

  else
  {
    v18 = v12;
    _convertNSErrorToError(_:)(v12);

    return swift_willThrow(v19, v20, v21, v22, v23, v24, v25, v26);
  }

PhoneCallFlowDelegatePlugin::DIIdentifier __swiftcall DIIdentifier.init(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  v22[0] = 46LL;
  v22[1] = 0xE100000000000000LL;
  v21[2] = v22;
  unint64_t v3 = specialized BidirectionalCollection.lastIndex(where:)( partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:),  (uint64_t)v21,  a1._countAndFlagsBits,  (unint64_t)a1._object);
  if ((v4 & 1) != 0)
  {
    unint64_t v11 = 0x8000000000346C00LL;
    uint64_t v9 = 0xD000000000000025LL;
  }

  else
  {
    unint64_t v5 = v3;
    swift_bridgeObjectRetain();
    uint64_t v6 = String.subscript.getter(15LL, v5, countAndFlagsBits, object);
    uint64_t v8 = v7;
    OUTLINED_FUNCTION_2_63();
    uint64_t v9 = OUTLINED_FUNCTION_4_69(v6, v8);
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    unint64_t v12 = String.index(after:)(v5, countAndFlagsBits, object);
    unint64_t v13 = specialized Collection.subscript.getter(v12, countAndFlagsBits, (unint64_t)object);
    uint64_t v15 = v14;
    OUTLINED_FUNCTION_2_63();
    uint64_t countAndFlagsBits = OUTLINED_FUNCTION_4_69(v13, v15);
    object = v16;
    swift_bridgeObjectRelease();
  }

  uint64_t v17 = v9;
  v18 = (void *)v11;
  uint64_t v19 = countAndFlagsBits;
  uint64_t v20 = object;
  result.id._object = v20;
  result.id._uint64_t countAndFlagsBits = v19;
  result.namespace._object = v18;
  result.namespace._uint64_t countAndFlagsBits = v17;
  return result;
}

unint64_t specialized Collection.subscript.getter( unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 < result >> 14)
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v4 = 11LL;
    }
    return String.subscript.getter(result, v4 | (v3 << 16), a2, a3);
  }

  return result;
}

uint64_t DICodable.userData()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for PropertyListEncoder(0LL);
  OUTLINED_FUNCTION_15_2(v6);
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.encode<A>(_:)(v2, a1, *(void *)(a2 + 16));
  uint64_t result = OUTLINED_FUNCTION_7_71();
  if (!v3)
  {
    uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v25[0] = 0LL;
    id v10 = [v8 propertyListWithData:isa options:0 format:0 error:v25];

    id v11 = v25[0];
    if (v10)
    {
      id v12 = v25[0];
      _bridgeAnyObjectToAny(_:)(v25, v10);
      swift_unknownObjectRelease(v10);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      else {
        uint64_t v13 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for Any[1],  &protocol witness table for String);
      }
      uint64_t v24 = v13;
      static DICodable.adaptUserDataAfterEncoder(_:)((uint64_t)&v24, a1, a2);
      OUTLINED_FUNCTION_6_66();
      return v24;
    }

    else
    {
      id v14 = v25[0];
      _convertNSErrorToError(_:)(v11);

      swift_willThrow(v15, v16, v17, v18, v19, v20, v21, v22);
      return OUTLINED_FUNCTION_6_66();
    }
  }

  return result;
}

uint64_t static DICodable.adaptUserDataAfterEncoder(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6)
  {
    uint64_t v7 = (uint64_t *)(v4 + 56);
    do
    {
      uint64_t v9 = (void (*)(uint64_t))*(v7 - 3);
      uint64_t v8 = *(v7 - 2);
      uint64_t v10 = *v7;
      v7 += 4;
      swift_retain(v8);
      swift_retain(v10);
      v9(a1);
      swift_release(v10);
      swift_release(v8);
      --v6;
    }

    while (v6);
  }

  return swift_bridgeObjectRelease(v5);
}

uint64_t DICodable.toDirectInvocation()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (*(uint64_t (**)(void))(a2 + 24))();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  OUTLINED_FUNCTION_0_72(v5, v10);
  OUTLINED_FUNCTION_1_66();
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = v7;
  v11._object = v9;
  String.append(_:)(v11);
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_8_58();
  uint64_t v12 = DICodable.userData()(a1, a2);
  if (v2) {
    return OUTLINED_FUNCTION_4_1();
  }
  else {
    return Parse.DirectInvocation.init(identifier:userData:)(v14, v15, v12);
  }
}

objc_class *DICodable.toDirectInvocationPayload()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  OUTLINED_FUNCTION_0_72(v5, v10);
  OUTLINED_FUNCTION_1_66();
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = v7;
  v11._object = v9;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_58();
  SKIDirectInvocationPayload.__allocating_init(identifier:)();
  uint64_t v13 = v12;
  uint64_t v14 = DICodable.userData()(a1, a2);
  Class isa = v13;
  if (!v2)
  {
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v14);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    OUTLINED_FUNCTION_4_1();
    -[objc_class setUserData:](v13, "setUserData:", isa);
  }

  return v13;
}

id DICodable.toStartLocalRequest(deviceState:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = v3;
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  uint64_t v9 = (void *)DeviceState.asInvocationContext.getter(v7, v8);
  uint64_t v10 = DICodable.toDirectInvocationPayload()(a2, a3);
  if (!v3)
  {
    Swift::String v11 = v10;
    uint64_t v12 = (void *)objc_opt_self(&OBJC_CLASS___SKIDirectInvocation);
    id v13 = [v12 runSiriKitExecutorCommandWithContext:v9 payload:v11];

    id v4 = [v12 wrapCommandInStartLocalRequest:v13];
    uint64_t v9 = v13;
  }

  return v4;
}

uint64_t static DICodable.adaptUserDataBeforeDecoder(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6)
  {
    uint64_t v7 = (uint64_t *)(v4 + 56);
    do
    {
      uint64_t v8 = *(v7 - 2);
      uint64_t v9 = (void (*)(uint64_t))*(v7 - 1);
      uint64_t v10 = *v7;
      v7 += 4;
      swift_retain(v8);
      swift_retain(v10);
      v9(a1);
      swift_release(v10);
      swift_release(v8);
      --v6;
    }

    while (v6);
  }

  return swift_bridgeObjectRelease(v5);
}

unint64_t specialized BidirectionalCollection.lastIndex(where:)( uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0LL;
  }
  uint64_t v9 = 7LL;
  if (((a4 >> 60) & ((a3 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v9 = 11LL;
  }
  unint64_t v10 = v9 | (v5 << 16);
  while (1)
  {
    unint64_t v10 = String.index(before:)(v10, a3, a4);
    uint64_t v11 = String.subscript.getter(v10, a3, a4);
    uint64_t v13 = v12;
    v17[0] = v11;
    v17[1] = v12;
    char v14 = a1(v17);
    if (v4) {
      break;
    }
    char v15 = v14;
    swift_bridgeObjectRelease(v13);
    if ((v15 & 1) != 0) {
      return v10;
    }
    if (v10 < 0x4000) {
      return 0LL;
    }
  }

  swift_bridgeObjectRelease(v13);
  return v10;
}

ValueMetadata *type metadata accessor for DIIdentifier()
{
  return &type metadata for DIIdentifier;
}

uint64_t OUTLINED_FUNCTION_0_72(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

void OUTLINED_FUNCTION_1_66()
{
  v0._uint64_t countAndFlagsBits = 46LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_2_63()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_4_69(uint64_t a1, uint64_t a2)
{
  return static String._fromSubstring(_:)(a1, a2, v2, v3);
}

uint64_t OUTLINED_FUNCTION_6_66()
{
  return outlined consume of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_7_71()
{
  return swift_release(v0);
}

uint64_t OUTLINED_FUNCTION_8_58()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

void *static StartVideoCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v6 = (void *)OUTLINED_FUNCTION_0_16(a1, a2, a3, a4, a5, a6);
  return OUTLINED_FUNCTION_4_70(v6, v7, v8, v9, v10, v11, v12, v13);
}

void *specialized static StartVideoCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)( void *a1, char *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a7;
  v109 = a2;
  uint64_t v14 = *(void *)(a7 - 8);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v17, v18);
  OUTLINED_FUNCTION_2_1();
  if (PhoneCallNLIntent.hasAnyConfirmation()())
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v19, (uint64_t)static Logger.siriPhone);
    id v20 = a4;
    Logger.logObject.getter(v20);
    os_log_type_t v21 = OUTLINED_FUNCTION_41();
    if (OUTLINED_FUNCTION_9_57(v21))
    {
      uint64_t v107 = v14;
      uint64_t v22 = (_DWORD *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v23 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v108 = v10;
      uint64_t v24 = v23;
      uint64_t v112 = v23;
      *uint64_t v22 = 136315138;
      v109 = v16;
      uint64_t v116 = (uint64_t)a4;
      id v25 = v20;
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartVideoCallIntent?);
      uint64_t v27 = String.init<A>(describing:)(&v116, v26);
      uint64_t v116 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v112);
      uint64_t v16 = v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v22 + 1);

      uint64_t v14 = v107;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_5_65( &dword_0,  v29,  v30,  "#StartVideoCallIntentConversion is confirmation, returning previousIntent: %s.");
      OUTLINED_FUNCTION_17_0(v24);
      uint64_t v31 = v24;
      uint64_t v10 = v108;
      OUTLINED_FUNCTION_0_2(v31);
      OUTLINED_FUNCTION_0_2((uint64_t)v22);
    }

    else
    {
    }

    id v82 = v20;
  }

  else
  {
    uint64_t v105 = a8;
    uint64_t v107 = v14;
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v32 = type metadata accessor for Logger(0LL);
    uint64_t v106 = __swift_project_value_buffer(v32, (uint64_t)static Logger.siriPhone);
    os_log_type_t v33 = v106;
    Logger.logObject.getter(v106);
    os_log_type_t v34 = OUTLINED_FUNCTION_41();
    if (OUTLINED_FUNCTION_10(v34))
    {
      v35 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_0, (os_log_t)v8, v33, "#StartVideoCallIntentConversion called with NLv4IntentOnly", v35, 2u);
      OUTLINED_FUNCTION_0_2((uint64_t)v35);
    }

    uint64_t v36 = a1[3];
    uint64_t v37 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v36);
    uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 128))(v36, v37);
    OUTLINED_FUNCTION_2_1();
    BOOL v104 = PhoneCallNLIntent.isEmergencyContactCall()();
    uint64_t v39 = OUTLINED_FUNCTION_2_1();
    PhoneCallNLIntent.getPersons()(v39, v40);
    uint64_t v42 = v41;
    id v43 = objc_allocWithZone(&OBJC_CLASS___INStartVideoCallIntent);
    @nonobjc INStartVideoCallIntent.init(contacts:)(v42);
    v45 = v44;
    uint64_t v46 = (uint64_t)v109;
    v47 = (void *)specialized static NLv4IntentConversion.setIntentMetadata(for:sharedGlobals:app:previousIntent:)();

    uint64_t v116 = (uint64_t)v47;
    outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)&v112);
    id v48 = v47;
    swift_retain_n(v46, 2LL);
    swift_bridgeObjectRetain_n(v38, 2LL);
    id v49 = v48;
    int v50 = v106;
    Logger.logObject.getter(v49);
    os_log_type_t v51 = OUTLINED_FUNCTION_41();
    BOOL v52 = OUTLINED_FUNCTION_10(v51);
    uint64_t v108 = v10;
    if (v52)
    {
      uint64_t v53 = OUTLINED_FUNCTION_7_0(42LL);
      v54 = (void *)OUTLINED_FUNCTION_7_0(8LL);
      v99 = v54;
      uint64_t v101 = OUTLINED_FUNCTION_7_0(96LL);
      uint64_t v110 = (uint64_t)v49;
      uint64_t v111 = v101;
      *(_DWORD *)uint64_t v53 = 138413058;
      int v100 = v50;
      os_log_t v98 = (os_log_t)v48;
      id v55 = v49;
      v103 = a3;
      id v56 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111, v53 + 4);
      void *v54 = v49;

      *(_WORD *)(v53 + 12) = 2080;
      uint64_t v58 = dispatch thunk of App.debugDescription.getter(v57);
      uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, &v111);
      OUTLINED_FUNCTION_6_67(v60, v61, v62, v53 + 22);
      swift_release_n(v109, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 22) = 2080;
      uint64_t v102 = v38;
      v63 = v16;
      uint64_t v64 = v114;
      uint64_t v65 = v115;
      __swift_project_boxed_opaque_existential_1(&v112, v114);
      uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 24))(v64, v65);
      uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriPhoneContact);
      uint64_t v68 = Array.description.getter(v66, v67);
      unint64_t v70 = v69;
      swift_bridgeObjectRelease();
      uint64_t v71 = v68;
      a3 = v103;
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v70, &v111);
      OUTLINED_FUNCTION_6_67(v72, v73, v74, v53 + 32);
      uint64_t v16 = v63;
      uint64_t v38 = v102;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(&v112);
      *(_WORD *)(v53 + 32) = 2080;
      uint64_t v75 = type metadata accessor for ContactQuery(0LL);
      uint64_t v76 = Array.debugDescription.getter(v38, v75);
      uint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, &v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111, v53 + 34);
      OUTLINED_FUNCTION_8_58();
      uint64_t v46 = (uint64_t)v109;
      swift_bridgeObjectRelease();
      os_log_t v78 = v98;
      _os_log_impl( &dword_0,  v98,  (os_log_type_t)v100,  "#StartVideoCallIntentConversion with intent:%@ resolvedApp:%s phoneCallNLIntent=%s contactQueries=%s",  (uint8_t *)v53,  0x2Au);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v79 = (uint64_t)v99;
      OUTLINED_FUNCTION_17_0((uint64_t)v99);
      OUTLINED_FUNCTION_0_2(v79);
      uint64_t v80 = v101;
      swift_arrayDestroy(v101, 3LL);
      OUTLINED_FUNCTION_0_2(v80);
      uint64_t v81 = v53;
      uint64_t v10 = v108;
      OUTLINED_FUNCTION_0_2(v81);
    }

    else
    {
      swift_release_n(v46, 2LL);

      __swift_destroy_boxed_opaque_existential_1(&v112);
      OUTLINED_FUNCTION_8_58();
    }

    id v83 = v49;
    specialized static NLv4IntentConversion.updateSiriKitIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:nlIntent:sharedGlobals:contactGroupResolver:)( (uint64_t)v83,  v38,  v104,  v46,  a1,  (uint64_t)a3,  (uint64_t)v16,  v10,  v105);

    swift_bridgeObjectRelease();
    outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter(v83);
    v85 = v84;
    uint64_t v86 = one-time initialization token for instance;
    id v87 = v83;
    if (v86 != -1) {
      swift_once(&one-time initialization token for instance, one-time initialization function for instance);
    }
    uint64_t v88 = static EligibleAppFinder.instance;
    swift_retain();
    specialized static AppSelectionSignalsGatheringHelper.triggerSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:smartAppSelection:eligibleAppsFinder:skIntent:)( a3,  (uint64_t)v85,  a1,  0LL,  v88);
    swift_release(v88);

    swift_bridgeObjectRelease();
    id v89 = v87;
    Logger.logObject.getter(v89);
    os_log_type_t v90 = OUTLINED_FUNCTION_41();
    if (OUTLINED_FUNCTION_9_57(v90))
    {
      v91 = (_DWORD *)OUTLINED_FUNCTION_7_0(12LL);
      v92 = (void *)OUTLINED_FUNCTION_7_0(8LL);
      _DWORD *v91 = 138412290;
      uint64_t v112 = (uint64_t)v89;
      id v93 = v89;
      uint64_t v10 = v108;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v91 + 1);
      void *v92 = v49;

      OUTLINED_FUNCTION_5_65(&dword_0, v94, v95, "#StartVideoCallIntentConversion ends with %@");
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_17_0((uint64_t)v92);
      OUTLINED_FUNCTION_0_2((uint64_t)v92);
      OUTLINED_FUNCTION_0_2((uint64_t)v91);
      id v89 = v85;
    }

    else
    {
    }

    uint64_t v14 = v107;

    swift_beginAccess(&v116, &v112, 0LL, 0LL);
    a4 = (void *)v116;
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v10);
  return a4;
}

ValueMetadata *type metadata accessor for StartVideoCallIntentConversion()
{
  return &type metadata for StartVideoCallIntentConversion;
}

void *OUTLINED_FUNCTION_4_70( void *a1, char *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return specialized static StartVideoCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
}

uint64_t OUTLINED_FUNCTION_6_67(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v6 - 152) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 152, v4, v5, a4);
}

BOOL OUTLINED_FUNCTION_9_57(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

PhoneCallFlowDelegatePlugin::AnnounceVoicemailCATs::Properties_optional __swiftcall AnnounceVoicemailCATs.Properties.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of AnnounceVoicemailCATs.Properties.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    v4.value = PhoneCallFlowDelegatePlugin_AnnounceVoicemailCATs_Properties_readVoicemailAnnouncementHint;
  }
  else {
    v4.value = PhoneCallFlowDelegatePlugin_AnnounceVoicemailCATs_Properties_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

unint64_t AnnounceVoicemailCATsSimple.Properties.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD00000000000002FLL;
  }
  else {
    return 0xD00000000000002BLL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceVoicemailCATs.Properties( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance AnnounceVoicemailCATs.Properties()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnnounceVoicemailCATs.Properties( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceVoicemailCATs.Properties( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::AnnounceVoicemailCATs::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceVoicemailCATs.Properties@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::AnnounceVoicemailCATs::Properties_optional *a2@<X8>)
{
  result.value = AnnounceVoicemailCATs.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AnnounceVoicemailCATs.Properties@<X0>( unint64_t *a1@<X8>)
{
  unint64_t result = AnnounceVoicemailCATsSimple.Properties.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t AnnounceVoicemailCATs.readVoicemailAnnouncement(burstIndex:isPreviousNotificationVoicemail:voicemail:completion:)( unint64_t a1, char a2, char a3, unint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v9 = (__n128 *)OUTLINED_FUNCTION_2_64(v8);
  OUTLINED_FUNCTION_0_73(v9, (__n128)xmmword_320080);
  if ((a2 & 1) != 0)
  {
    uint64_t v10 = 0LL;
    a1 = 0LL;
    v9[3].n128_u64[1] = 0LL;
    v9[4].n128_u64[0] = 0LL;
  }

  else
  {
    uint64_t v10 = &type metadata for Double;
  }

  v9[3].n128_u64[0] = a1;
  v9[4].n128_u64[1] = (unint64_t)v10;
  v9[5].n128_u64[0] = 0xD00000000000001FLL;
  OUTLINED_FUNCTION_19_39((uint64_t)"n19StartCallCATsSimple");
  v9[6].n128_u8[0] = a3 & 1;
  v9[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v9[8].n128_u64[0] = 0x69616D6563696F76LL;
  v9[8].n128_u64[1] = 0xE90000000000006CLL;
  if (a4)
  {
    uint64_t v11 = type metadata accessor for PhoneCallRecord(0LL);
    unint64_t v12 = a4;
  }

  else
  {
    unint64_t v12 = 0LL;
    uint64_t v11 = 0LL;
    v9[9].n128_u64[1] = 0LL;
    v9[10].n128_u64[0] = 0LL;
  }

  v9[9].n128_u64[0] = v12;
  v9[10].n128_u64[1] = v11;
  swift_retain();
  OUTLINED_FUNCTION_20_40();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)(v13);
  return OUTLINED_FUNCTION_51_12((uint64_t)v9);
}

uint64_t AnnounceVoicemailCATs.readVoicemailAnnouncement(burstIndex:isPreviousNotificationVoicemail:voicemail:)( uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  *(void *)(v6 + 32) = a5;
  *(void *)(v6 + 40) = v5;
  *(_BYTE *)(v6 + 73) = a4;
  *(_BYTE *)(v6 + 72) = a3;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  return OUTLINED_FUNCTION_33_0((uint64_t)AnnounceVoicemailCATs.readVoicemailAnnouncement(burstIndex:isPreviousNotificationVoicemail:voicemail:));
}

uint64_t AnnounceVoicemailCATs.readVoicemailAnnouncement(burstIndex:isPreviousNotificationVoicemail:voicemail:)()
{
  char v2 = *(_BYTE *)(v1 + 72);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  unint64_t v4 = (__n128 *)OUTLINED_FUNCTION_2_64(v3);
  *(void *)(v1 + 48) = v4;
  OUTLINED_FUNCTION_0_73(v4, (__n128)xmmword_320080);
  if ((v2 & 1) != 0)
  {
    uint64_t v6 = 0LL;
    unint64_t v5 = 0LL;
    v4[3].n128_u64[1] = 0LL;
    v4[4].n128_u64[0] = 0LL;
  }

  else
  {
    unint64_t v5 = *(void *)(v1 + 24);
    uint64_t v6 = &type metadata for Double;
  }

  unint64_t v7 = *(void *)(v1 + 32);
  v4[3].n128_u64[0] = v5;
  v4[4].n128_u64[1] = (unint64_t)v6;
  v4[5].n128_u64[0] = 0xD00000000000001FLL;
  OUTLINED_FUNCTION_19_39((uint64_t)"n19StartCallCATsSimple");
  uint64_t v8 = OUTLINED_FUNCTION_3_83((uint64_t)&type metadata for Bool);
  if (v7)
  {
    uint64_t v8 = type metadata accessor for PhoneCallRecord(v8);
  }

  else
  {
    v4[9].n128_u64[1] = 0LL;
    v4[10].n128_u64[0] = 0LL;
  }

  v4[9].n128_u64[0] = v7;
  v4[10].n128_u64[1] = v8;
  OUTLINED_FUNCTION_18_2();
  uint64_t v9 = (void *)swift_task_alloc(v0);
  *(void *)(v1 + 56) = v9;
  *uint64_t v9 = v1;
  v9[1] = AnnounceVoicemailCATs.readVoicemailAnnouncement(burstIndex:isPreviousNotificationVoicemail:voicemail:);
  return v11(*(void *)(v1 + 16), 0xD00000000000002BLL, 0x8000000000345990LL, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v5 = *v1;
  char v2 = v5;
  OUTLINED_FUNCTION_39_0(&v5);
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_17_3();
  }

  else
  {
    swift_bridgeObjectRelease();
    return OUTLINED_FUNCTION_16_1((uint64_t (*)(void))v1[1]);
  }

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  __n128 *v4;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v12)(uint64_t);
  char v2 = *(_BYTE *)(v1 + 64);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  unint64_t v4 = (__n128 *)OUTLINED_FUNCTION_2_64(v3);
  *(void *)(v1 + 40) = v4;
  OUTLINED_FUNCTION_0_73(v4, (__n128)xmmword_320080);
  if ((v2 & 1) != 0)
  {
    uint64_t v6 = 0LL;
    unint64_t v5 = 0LL;
    v4[3].n128_u64[1] = 0LL;
    v4[4].n128_u64[0] = 0LL;
  }

  else
  {
    unint64_t v5 = *(void *)(v1 + 16);
    uint64_t v6 = &type metadata for Double;
  }

  unint64_t v7 = *(void *)(v1 + 24);
  v4[3].n128_u64[0] = v5;
  v4[4].n128_u64[1] = (unint64_t)v6;
  v4[5].n128_u64[0] = 0xD00000000000001FLL;
  OUTLINED_FUNCTION_19_39((uint64_t)"n19StartCallCATsSimple");
  uint64_t v8 = OUTLINED_FUNCTION_3_83((uint64_t)&type metadata for Bool);
  if (v7)
  {
    uint64_t v8 = type metadata accessor for PhoneCallRecord(v8);
  }

  else
  {
    v4[9].n128_u64[1] = 0LL;
    v4[10].n128_u64[0] = 0LL;
  }

  v4[9].n128_u64[0] = v7;
  v4[10].n128_u64[1] = v8;
  OUTLINED_FUNCTION_18_2();
  uint64_t v9 = (void *)swift_task_alloc(v0);
  *(void *)(v1 + 48) = v9;
  *uint64_t v9 = v1;
  v9[1] = AnnounceVoicemailCATs.readVoicemailAnnouncement(burstIndex:isPreviousNotificationVoicemail:voicemail:);
  uint64_t v10 = OUTLINED_FUNCTION_21_19(0xD00000000000002BLL);
  return v12(v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_39_0(v4);
  *(void *)(v2 + 56) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v6, v7, v8);
  }

  else
  {
    swift_bridgeObjectRelease();
    return OUTLINED_FUNCTION_8_3(v0, *(uint64_t (**)(void))(v3 + 8));
  }

uint64_t AnnounceVoicemailCATs.readVoicemailAnnouncement(burstIndex:isPreviousNotificationVoicemail:voicemail:)( uint64_t a1, char a2, char a3, uint64_t a4)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = v4;
  *(_BYTE *)(v5 + 65) = a3;
  *(_BYTE *)(v5 + 64) = a2;
  *(void *)(v5 + 16) = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)AnnounceVoicemailCATs.readVoicemailAnnouncement(burstIndex:isPreviousNotificationVoicemail:voicemail:));
}

uint64_t AnnounceVoicemailCATs.readVoicemailAnnouncement(burstIndex:isPreviousNotificationVoicemail:voicemail:)( unint64_t a1, char a2, char a3, unint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v9 = (__n128 *)OUTLINED_FUNCTION_2_64(v8);
  OUTLINED_FUNCTION_0_73(v9, (__n128)xmmword_320080);
  if ((a2 & 1) != 0)
  {
    uint64_t v10 = 0LL;
    a1 = 0LL;
    v9[3].n128_u64[1] = 0LL;
    v9[4].n128_u64[0] = 0LL;
  }

  else
  {
    uint64_t v10 = &type metadata for Double;
  }

  v9[3].n128_u64[0] = a1;
  v9[4].n128_u64[1] = (unint64_t)v10;
  v9[5].n128_u64[0] = 0xD00000000000001FLL;
  v9[5].n128_u64[1] = 0x800000000034CC50LL;
  v9[6].n128_u8[0] = a3 & 1;
  v9[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v9[8].n128_u64[0] = 0x69616D6563696F76LL;
  v9[8].n128_u64[1] = 0xE90000000000006CLL;
  if (a4)
  {
    uint64_t v11 = type metadata accessor for PhoneCallRecord(0LL);
    unint64_t v12 = a4;
  }

  else
  {
    unint64_t v12 = 0LL;
    uint64_t v11 = 0LL;
    v9[9].n128_u64[1] = 0LL;
    v9[10].n128_u64[0] = 0LL;
  }

  v9[9].n128_u64[0] = v12;
  v9[10].n128_u64[1] = v11;
  swift_retain();
  OUTLINED_FUNCTION_107_6(0xD00000000000002BLL, (uint64_t)"AnnounceVoicemail#ReadVoicemailAnnouncement");
  return OUTLINED_FUNCTION_51_12((uint64_t)v9);
}

uint64_t AnnounceVoicemailCATs.readVoicemailAnnouncementHint(announcementCount:daysSinceLastHint:hintCount:completion:)( uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_2_64(v12);
  uint64_t v14 = (void *)v13;
  *(_OWORD *)(v13 + 16) = xmmword_320080;
  *(void *)(v13 + 32) = 0xD000000000000011LL;
  *(void *)(v13 + 40) = 0x800000000034CC70LL;
  if ((a2 & 1) != 0)
  {
    uint64_t v15 = 0LL;
    a1 = 0LL;
    *(void *)(v13 + 56) = 0LL;
    *(void *)(v13 + 64) = 0LL;
  }

  else
  {
    uint64_t v15 = &type metadata for Double;
  }

  *(void *)(v13 + 48) = a1;
  *(void *)(v13 + 72) = v15;
  *(void *)(v13 + 80) = 0xD000000000000011LL;
  OUTLINED_FUNCTION_19_39((uint64_t)"announcementCount");
  if ((a4 & 1) != 0)
  {
    a3 = 0LL;
    v14[13] = 0LL;
    v14[14] = 0LL;
  }

  v14[12] = a3;
  OUTLINED_FUNCTION_21_36();
  v14[15] = v16;
  v14[16] = v17;
  v14[17] = 0xE900000000000074LL;
  if ((a6 & 1) != 0)
  {
    uint64_t v18 = 0LL;
    a5 = 0LL;
    v14[19] = 0LL;
    v14[20] = 0LL;
  }

  else
  {
    uint64_t v18 = &type metadata for Double;
  }

  v14[21] = v18;
  v14[18] = a5;
  OUTLINED_FUNCTION_20_40();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)(v19);
  return swift_bridgeObjectRelease();
}

uint64_t AnnounceVoicemailCATs.readVoicemailAnnouncementHint(announcementCount:daysSinceLastHint:hintCount:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  *(void *)(v8 + 40) = a6;
  *(void *)(v8 + 48) = v7;
  *(_BYTE *)(v8 + 82) = a7;
  *(_BYTE *)(v8 + 81) = a5;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a4;
  *(_BYTE *)(v8 + 80) = a3;
  *(void *)(v8 + 16) = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)AnnounceVoicemailCATs.readVoicemailAnnouncementHint(announcementCount:daysSinceLastHint:hintCount:));
}

uint64_t AnnounceVoicemailCATs.readVoicemailAnnouncementHint(announcementCount:daysSinceLastHint:hintCount:)()
{
  char v1 = *(_BYTE *)(v0 + 80);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_2_64(v2);
  uint64_t v4 = (void *)v3;
  *(void *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_320080;
  *(void *)(v3 + 32) = 0xD000000000000011LL;
  *(void *)(v3 + 40) = 0x800000000034CC70LL;
  if ((v1 & 1) != 0)
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
    *(void *)(v3 + 56) = 0LL;
    *(void *)(v3 + 64) = 0LL;
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 24);
    uint64_t v6 = &type metadata for Double;
  }

  char v7 = *(_BYTE *)(v0 + 81);
  *(void *)(v3 + 48) = v5;
  *(void *)(v3 + 72) = v6;
  *(void *)(v3 + 80) = 0xD000000000000011LL;
  *(void *)(v3 + 88) = 0x800000000034CC90LL;
  if ((v7 & 1) != 0)
  {
    uint64_t v8 = 0LL;
    *(void *)(v3 + 104) = 0LL;
    *(void *)(v3 + 112) = 0LL;
  }

  else
  {
    uint64_t v8 = &type metadata for Double;
  }

  OUTLINED_FUNCTION_5_66((uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    uint64_t v11 = 0LL;
    uint64_t v10 = 0LL;
    v4[19] = 0LL;
    v4[20] = 0LL;
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 40);
    uint64_t v11 = &type metadata for Double;
  }

  v4[21] = v11;
  v4[18] = v10;
  uint64_t v12 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  *(void *)(v0 + 64) = v12;
  *uint64_t v12 = v0;
  v12[1] = AnnounceVoicemailCATs.readVoicemailAnnouncementHint(announcementCount:daysSinceLastHint:hintCount:);
  return v14(*(void *)(v0 + 16), 0xD00000000000002FLL, 0x80000000003459C0LL, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v5 = *v1;
  uint64_t v2 = v5;
  OUTLINED_FUNCTION_39_0(&v5);
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_17_3();
  }

  else
  {
    swift_bridgeObjectRelease();
    return OUTLINED_FUNCTION_16_1((uint64_t (*)(void))v1[1]);
  }

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t (*v15)(uint64_t);
  char v1 = *(_BYTE *)(v0 + 72);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_2_64(v2);
  uint64_t v4 = (void *)v3;
  *(void *)(v0 + 48) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_320080;
  *(void *)(v3 + 32) = 0xD000000000000011LL;
  *(void *)(v3 + 40) = 0x800000000034CC70LL;
  if ((v1 & 1) != 0)
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
    *(void *)(v3 + 56) = 0LL;
    *(void *)(v3 + 64) = 0LL;
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 16);
    uint64_t v6 = &type metadata for Double;
  }

  char v7 = *(_BYTE *)(v0 + 73);
  *(void *)(v3 + 48) = v5;
  *(void *)(v3 + 72) = v6;
  *(void *)(v3 + 80) = 0xD000000000000011LL;
  *(void *)(v3 + 88) = 0x800000000034CC90LL;
  if ((v7 & 1) != 0)
  {
    uint64_t v8 = 0LL;
    *(void *)(v3 + 104) = 0LL;
    *(void *)(v3 + 112) = 0LL;
  }

  else
  {
    uint64_t v8 = &type metadata for Double;
  }

  OUTLINED_FUNCTION_5_66((uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    uint64_t v11 = 0LL;
    uint64_t v10 = 0LL;
    v4[19] = 0LL;
    v4[20] = 0LL;
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 32);
    uint64_t v11 = &type metadata for Double;
  }

  v4[21] = v11;
  v4[18] = v10;
  uint64_t v12 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executeDialog(catId:parameters:));
  *(void *)(v0 + 56) = v12;
  *uint64_t v12 = v0;
  v12[1] = AnnounceVoicemailCATs.readVoicemailAnnouncementHint(announcementCount:daysSinceLastHint:hintCount:);
  uint64_t v13 = OUTLINED_FUNCTION_21_19(0xD00000000000002FLL);
  return v15(v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_39_0(v4);
  *(void *)(v2 + 64) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v6, v7, v8);
  }

  else
  {
    swift_bridgeObjectRelease();
    return OUTLINED_FUNCTION_8_3(v0, *(uint64_t (**)(void))(v3 + 8));
  }

uint64_t AnnounceVoicemailCATs.readVoicemailAnnouncementHint(announcementCount:daysSinceLastHint:hintCount:)( uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  *(_BYTE *)(v7 + 74) = a6;
  *(void *)(v7 + 32) = a5;
  *(void *)(v7 + 40) = v6;
  *(_BYTE *)(v7 + 73) = a4;
  *(_BYTE *)(v7 + 72) = a2;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a3;
  return OUTLINED_FUNCTION_33_0((uint64_t)AnnounceVoicemailCATs.readVoicemailAnnouncementHint(announcementCount:daysSinceLastHint:hintCount:));
}

{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_2_64(v12);
  uint64_t v14 = (void *)v13;
  *(_OWORD *)(v13 + 16) = xmmword_320080;
  *(void *)(v13 + 32) = 0xD000000000000011LL;
  *(void *)(v13 + 40) = 0x800000000034CC70LL;
  if ((a2 & 1) != 0)
  {
    uint64_t v15 = 0LL;
    a1 = 0LL;
    *(void *)(v13 + 56) = 0LL;
    *(void *)(v13 + 64) = 0LL;
  }

  else
  {
    uint64_t v15 = &type metadata for Double;
  }

  *(void *)(v13 + 48) = a1;
  *(void *)(v13 + 72) = v15;
  *(void *)(v13 + 80) = 0xD000000000000011LL;
  *(void *)(v13 + 88) = 0x800000000034CC90LL;
  if ((a4 & 1) != 0)
  {
    a3 = 0LL;
    *(void *)(v13 + 104) = 0LL;
    *(void *)(v13 + 112) = 0LL;
  }

  *(void *)(v13 + 96) = a3;
  OUTLINED_FUNCTION_21_36();
  v14[15] = v16;
  v14[16] = v17;
  v14[17] = 0xE900000000000074LL;
  if ((a6 & 1) != 0)
  {
    uint64_t v18 = 0LL;
    a5 = 0LL;
    v14[19] = 0LL;
    v14[20] = 0LL;
  }

  else
  {
    uint64_t v18 = &type metadata for Double;
  }

  v14[21] = v18;
  v14[18] = a5;
  OUTLINED_FUNCTION_107_6(0xD00000000000002FLL, (uint64_t)"AnnounceVoicemail#ReadVoicemailAnnouncementHint");
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type AnnounceVoicemailCATs.Properties and conformance AnnounceVoicemailCATs.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailCATs.Properties and conformance AnnounceVoicemailCATs.Properties;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailCATs.Properties and conformance AnnounceVoicemailCATs.Properties)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AnnounceVoicemailCATs.Properties,  &type metadata for AnnounceVoicemailCATs.Properties);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailCATs.Properties and conformance AnnounceVoicemailCATs.Properties);
  }

  return result;
}

uint64_t type metadata accessor for AnnounceVoicemailCATs(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for AnnounceVoicemailCATs;
  if (!type metadata singleton initialization cache for AnnounceVoicemailCATs) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AnnounceVoicemailCATs);
  }
  return result;
}

uint64_t type metadata completion function for AnnounceVoicemailCATs(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for AnnounceVoicemailCATs);
}

uint64_t ObjC metadata update function for AnnounceVoicemailCATs()
{
  return type metadata accessor for AnnounceVoicemailCATs(0LL);
}

uint64_t storeEnumTagSinglePayload for AnnounceVoicemailCATs.Properties( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1B6644 + 4 * byte_331165[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B6678 + 4 * asc_331160[v4]))();
}

uint64_t sub_1B6678(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B6680(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1B6688LL);
  }
  return result;
}

uint64_t sub_1B6694(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1B669CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1B66A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B66A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnnounceVoicemailCATs.Properties()
{
  return &type metadata for AnnounceVoicemailCATs.Properties;
}

__n128 *OUTLINED_FUNCTION_0_73(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x646E497473727562LL;
  result[2].n128_u64[1] = 0xEA00000000007865LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_2_64(uint64_t a1)
{
  return swift_allocObject(a1, 176LL, 7LL);
}

uint64_t OUTLINED_FUNCTION_3_83@<X0>(uint64_t a1@<X8>)
{
  *(_BYTE *)(v2 + 96) = v1;
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = 0x69616D6563696F76LL;
  *(void *)(v2 + 136) = 0xE90000000000006CLL;
  return 0LL;
}

void OUTLINED_FUNCTION_19_39(uint64_t a1@<X8>)
{
  *(void *)(v1 + 88) = a1 | 0x8000000000000000LL;
}

  ;
}

uint64_t static SKIntentResolverChain.firstHit<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  return static SKIntentResolverChain.firstHit<A>(_:)( (uint64_t (*)(void))type metadata accessor for FirstHitIntentResolver,  (uint64_t)&protocol conformance descriptor for FirstHitIntentResolver<A>,  a1);
}

uint64_t static SKIntentResolverChain.all<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  return static SKIntentResolverChain.firstHit<A>(_:)( (uint64_t (*)(void))type metadata accessor for ChainedIntentResolver,  (uint64_t)&protocol conformance descriptor for ChainedIntentResolver<A>,  a1);
}

uint64_t static SKIntentResolverChain.firstHit<A>(_:)@<X0>( uint64_t (*a1)(void)@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1(0LL);
  swift_bridgeObjectRetain();
  swift_getWitnessTable(a2, v5);
  SKIntentResolver.toAnyIntentResolver()(v5, a3);
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for FirstHitIntentResolver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for FirstHitIntentResolver);
}

uint64_t type metadata accessor for ChainedIntentResolver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChainedIntentResolver);
}

ValueMetadata *type metadata accessor for SKIntentResolverChain()
{
  return &type metadata for SKIntentResolverChain;
}

uint64_t ChainedIntentResolver.resolve(skIntent:nlIntent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[50] = a3;
  v4[51] = a4;
  v4[48] = a1;
  v4[49] = a2;
  return swift_task_switch(ChainedIntentResolver.resolve(skIntent:nlIntent:), 0LL, 0LL);
}

{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(void *, void *);
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  os_log_s *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t MetatypeMetadata;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t (*v52)(void);
  os_log_type_t type;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v6 = v4[50];
  uint64_t v5 = v4[51];
  uint64_t v7 = (void *)v4[48];
  v4[46] = v7;
  v4[38] = v6;
  uint64_t v8 = type metadata accessor for AnyIntentResolver(255LL, v5, a3, a4);
  v4[52] = v8;
  char v9 = type metadata accessor for Array(0LL, v8);
  v4[53] = v9;
  uint64_t v10 = v7;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
  v4[54] = WitnessTable;
  Sequence.enumerated()(v9, WitnessTable);
  v4[37] = v4[43];
  uint64_t v12 = type metadata accessor for EnumeratedSequence(0LL, v9, WitnessTable);
  EnumeratedSequence.makeIterator()(v12);
  uint64_t v13 = v4[52];
  uint64_t v14 = OUTLINED_FUNCTION_44_18();
  EnumeratedSequence.Iterator.next()(v14);
  uint64_t v15 = OUTLINED_FUNCTION_1_27(255LL, (uint64_t)&type metadata for Int, v13, (uint64_t)"offset element ");
  OUTLINED_FUNCTION_23_39(v15);
  OUTLINED_FUNCTION_36_23();
  v16(v4 + 11, v4 + 2);
  if (v4[15])
  {
    OUTLINED_FUNCTION_35_27();
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v17 = OUTLINED_FUNCTION_15_1();
    uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_18_47(v18);
    uint64_t v19 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_93(v19))
    {
      id v20 = OUTLINED_FUNCTION_7_0(22LL);
      os_log_type_t v21 = OUTLINED_FUNCTION_7_0(32LL);
      id v56 = v21;
      uint64_t v22 = OUTLINED_FUNCTION_12_58(4.8151e-34);
      uint64_t v23 = OUTLINED_FUNCTION_25_37(v22);
      id v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v56);
      OUTLINED_FUNCTION_43_16(v25);
      *(_WORD *)(v20 + 12) = 2048;
      *(void *)(v20 + 14) = WitnessTable;
      OUTLINED_FUNCTION_6_68(&dword_0, v26, v27, "#ChainedIntentResolver<%s> Running resolver @ index=%ld");
      OUTLINED_FUNCTION_17_0(v21);
      OUTLINED_FUNCTION_0_2(v21);
      OUTLINED_FUNCTION_0_2(v20);
    }

    OUTLINED_FUNCTION_37_27();
    uint64_t v29 = v28;
    v4[57] = OUTLINED_FUNCTION_28_35();
    OUTLINED_FUNCTION_75_4((uint64_t)&protocol conformance descriptor for AnyIntentResolver<A>);
    uint64_t v30 = OUTLINED_FUNCTION_19_40((uint64_t)ChainedIntentResolver.resolve(skIntent:nlIntent:));
    return SKIntentResolver.run(skIntent:nlIntent:)(v30, v31, v32, v33);
  }

  else
  {
    v35 = (uint64_t)(v4 + 46);
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v36 = v4[50];
    uint64_t v37 = OUTLINED_FUNCTION_15_1();
    uint64_t v38 = __swift_project_value_buffer(v37, (uint64_t)static Logger.siriPhone);
    uint64_t v39 = (void *)v4[46];
    swift_bridgeObjectRetain_n(v36, 2LL);
    uint64_t v40 = v39;
    uint64_t v41 = (os_log_s *)v38;
    Logger.logObject.getter(v40);
    uint64_t v42 = OUTLINED_FUNCTION_6_0();
    if (os_log_type_enabled(v41, v42))
    {
      type = v42;
      v44 = v4[50];
      id v43 = v4[51];
      v45 = OUTLINED_FUNCTION_7_0(32LL);
      v54 = (void *)OUTLINED_FUNCTION_7_0(8LL);
      id v55 = OUTLINED_FUNCTION_7_0(32LL);
      id v56 = v55;
      *(_DWORD *)v45 = 136315650;
      v4[39] = v43;
      MetatypeMetadata = swift_getMetatypeMetadata(v43);
      v47 = String.init<A>(describing:)(v4 + 39, MetatypeMetadata);
      v4[40] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 + 40, v4 + 41, v45 + 4);
      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 12) = 2048;
      id v49 = Array.count.getter(v44);
      OUTLINED_FUNCTION_129();
      v4[41] = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 + 41, v4 + 42, v45 + 14);
      OUTLINED_FUNCTION_129();
      *(_WORD *)(v45 + 22) = 2112;
      int v50 = v40;
      v4[42] = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 + 42, v4 + 43, v45 + 24);
      void *v54 = v40;

      _os_log_impl( &dword_0,  v41,  type,  "#ChainedIntentResolver<%s> Ran %ld resolvers, calling completion on skIntent: %@",  (uint8_t *)v45,  0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_6_56();
      OUTLINED_FUNCTION_0_2((uint64_t)v54);
      OUTLINED_FUNCTION_6_56();
      OUTLINED_FUNCTION_0_2(v55);
      os_log_type_t v51 = v45;
      v35 = (uint64_t)(v4 + 46);
      OUTLINED_FUNCTION_0_2(v51);
    }

    else
    {
      OUTLINED_FUNCTION_32_30();
    }

    OUTLINED_FUNCTION_22_0(v35, (uint64_t)(v4 + 34));
    OUTLINED_FUNCTION_39_17();
    return v52();
  }

uint64_t ChainedIntentResolver.resolve(skIntent:nlIntent:)()
{
  uint64_t v4 = *(void *)(v2 + 456);
  *uint64_t v5 = *v3;
  *(void *)(v2 + 464) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v6 = ChainedIntentResolver.resolve(skIntent:nlIntent:);
  }

  else
  {

    *(void *)(v2 + 472) = v0;
    uint64_t v6 = ChainedIntentResolver.resolve(skIntent:nlIntent:);
  }

  return OUTLINED_FUNCTION_9_11((uint64_t)v6, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(void);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v2 = (void *)(v0 + 16);
  int v3 = *(void *)(v0 + 472);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v0 + 416) - 8LL) + 8LL))(v0 + 160);

  *(void *)(v0 + 368) = v3;
  uint64_t v4 = *(void *)(v0 + 416);
  uint64_t v5 = OUTLINED_FUNCTION_44_18();
  EnumeratedSequence.Iterator.next()(v5);
  uint64_t v6 = OUTLINED_FUNCTION_1_27(255LL, (uint64_t)&type metadata for Int, v4, (uint64_t)"offset element ");
  OUTLINED_FUNCTION_23_39(v6);
  OUTLINED_FUNCTION_36_23();
  v7(v0 + 88, v0 + 16);
  if (*(void *)(v0 + 120))
  {
    OUTLINED_FUNCTION_35_27();
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v8 = OUTLINED_FUNCTION_15_1();
    char v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_18_47(v9);
    uint64_t v10 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_93(v10))
    {
      uint64_t v11 = OUTLINED_FUNCTION_7_0(22LL);
      v84 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v12 = OUTLINED_FUNCTION_12_58(4.8151e-34);
      uint64_t v13 = OUTLINED_FUNCTION_25_37(v12);
      os_log_type_t v21 = OUTLINED_FUNCTION_15_49(v13, v14, v15, v16, v17, v18, v19, v20);
      OUTLINED_FUNCTION_43_16(v21);
      *(_WORD *)(v11 + 12) = 2048;
      *(void *)(v11 + 14) = v1;
      OUTLINED_FUNCTION_6_68(&dword_0, v22, v23, "#ChainedIntentResolver<%s> Running resolver @ index=%ld");
      OUTLINED_FUNCTION_17_0(v84);
      OUTLINED_FUNCTION_0_2(v84);
      OUTLINED_FUNCTION_0_2(v11);
    }

    OUTLINED_FUNCTION_37_27();
    id v25 = v24;
    *(void *)(v0 + 456) = OUTLINED_FUNCTION_28_35();
    OUTLINED_FUNCTION_75_4((uint64_t)&protocol conformance descriptor for AnyIntentResolver<A>);
    uint64_t v26 = OUTLINED_FUNCTION_19_40((uint64_t)ChainedIntentResolver.resolve(skIntent:nlIntent:));
    return OUTLINED_FUNCTION_4_71(v26, v27, v28, v29);
  }

  else
  {
    uint64_t v31 = v0 + 368;
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v32 = *(void **)(v0 + 400);
    os_log_type_t v33 = OUTLINED_FUNCTION_15_1();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_29_29();
    os_log_type_t v34 = v2;
    OUTLINED_FUNCTION_46_19();
    v35 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_63(v35))
    {
      uint64_t v80 = *(void *)(v0 + 416);
      uint64_t v36 = *(void *)(v0 + 400);
      uint64_t v37 = OUTLINED_FUNCTION_7_0(32LL);
      id v83 = (void *)OUTLINED_FUNCTION_7_0(8LL);
      v85 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v38 = OUTLINED_FUNCTION_30_29(4.8152e-34);
      uint64_t v39 = OUTLINED_FUNCTION_24_32(v38);
      v47 = OUTLINED_FUNCTION_15_49(v39, v40, v41, v42, v43, v44, v45, v46);
      OUTLINED_FUNCTION_17_46(v47, v48, v49, v50, v51, v52, v53, v54, v0 + 320);
      swift_bridgeObjectRelease();
      id v55 = (void *)OUTLINED_FUNCTION_16_42();
      id v56 = OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_10_53(v56, v57, v58, v59, v60, v61, v62, v63, v78, v80, v0 + 336);
      OUTLINED_FUNCTION_39();
      uint64_t v64 = OUTLINED_FUNCTION_21_37();
      uint64_t v65 = OUTLINED_FUNCTION_11_57((uint64_t)v64);
      OUTLINED_FUNCTION_41_23(v65, v66, v67, v68, v69, v70, v71, v72, v79, v81, v82, v83);

      OUTLINED_FUNCTION_27_38( &dword_0,  v73,  v74,  "#ChainedIntentResolver<%s> Ran %ld resolvers, calling completion on skIntent: %@");
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_6_56();
      OUTLINED_FUNCTION_0_2(v36);
      OUTLINED_FUNCTION_6_56();
      OUTLINED_FUNCTION_0_2(v85);
      uint64_t v75 = v37;
      uint64_t v31 = v0 + 368;
      OUTLINED_FUNCTION_0_2(v75);
    }

    else
    {
      OUTLINED_FUNCTION_32_30();
    }

    OUTLINED_FUNCTION_22_0(v31, v0 + 272);
    OUTLINED_FUNCTION_39_17();
    return OUTLINED_FUNCTION_3_84(v76, v77);
  }

{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  os_log_s *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t MetatypeMetadata;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  id v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (*v104)(void);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v1 = v0 + 16;
  uint64_t v2 = (_OWORD *)(v0 + 160);
  int v3 = (void *)(v0 + 248);
  uint64_t v4 = *(void *)(v0 + 464);

  swift_errorRetain(v4);
  uint64_t v5 = swift_errorRetain(v4);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  uint64_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = *(void *)(v0 + 464);
    char v9 = *(void *)(v0 + 408);
    uint64_t v107 = *(void *)(v0 + 416);
    uint64_t v10 = OUTLINED_FUNCTION_7_0(22LL);
    uint64_t v112 = OUTLINED_FUNCTION_7_0(64LL);
    *(_DWORD *)uint64_t v10 = 136315394;
    *(void *)(v0 + 352) = v9;
    MetatypeMetadata = swift_getMetatypeMetadata(v9);
    uint64_t v12 = String.init<A>(describing:)(v0 + 352, MetatypeMetadata);
    *(void *)(v10 + 4) = OUTLINED_FUNCTION_15_49(v12, v13, v14, v15, v16, v17, v18, v19);
    OUTLINED_FUNCTION_39();
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v1 = v0 + 16;
    swift_getErrorValue(v8, v0 + 360, v0 + 224);
    id v20 = Error.localizedDescription.getter(*(void *)(v0 + 232), *(void *)(v0 + 240));
    *(void *)(v10 + 14) = OUTLINED_FUNCTION_15_49(v20, v21, v22, v23, v24, v25, v26, v27);
    swift_bridgeObjectRelease();
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl(&dword_0, v6, v7, "#ChainedIntentResolver<%s> Error: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v112, 2LL);
    OUTLINED_FUNCTION_0_2(v112);
    unint64_t v28 = v10;
    uint64_t v2 = (_OWORD *)(v0 + 160);
    OUTLINED_FUNCTION_0_2(v28);

    uint64_t v29 = v8;
    int v3 = (void *)(v0 + 248);
    swift_errorRelease(v29);
    (*(void (**)(uint64_t))(*(void *)(v107 - 8) + 8LL))(v0 + 160);
  }

  else
  {
    uint64_t v30 = *(void *)(v0 + 416);

    OUTLINED_FUNCTION_47_17();
    OUTLINED_FUNCTION_47_17();
    OUTLINED_FUNCTION_47_17();
    (*(void (**)(uint64_t))(*(void *)(v30 - 8) + 8LL))(v0 + 160);
  }

  uint64_t v31 = *(void **)(v0 + 416);
  uint64_t v32 = OUTLINED_FUNCTION_44_18();
  EnumeratedSequence.Iterator.next()(v32);
  os_log_type_t v33 = OUTLINED_FUNCTION_1_27(255LL, (uint64_t)&type metadata for Int, (uint64_t)v31, (uint64_t)"offset element ");
  OUTLINED_FUNCTION_23_39(v33);
  OUTLINED_FUNCTION_36_23();
  v34(v0 + 88, v1);
  if (*(void *)(v0 + 120))
  {
    v35 = *(void *)(v0 + 88);
    uint64_t v36 = *(_OWORD *)(v0 + 112);
    *uint64_t v2 = *(_OWORD *)(v0 + 96);
    v2[1] = v36;
    uint64_t v37 = *(_OWORD *)(v0 + 144);
    v2[2] = *(_OWORD *)(v0 + 128);
    v2[3] = v37;
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v38 = OUTLINED_FUNCTION_15_1();
    uint64_t v39 = __swift_project_value_buffer(v38, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_18_47(v39);
    uint64_t v40 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_93(v40))
    {
      uint64_t v41 = OUTLINED_FUNCTION_7_0(22LL);
      uint64_t v113 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v42 = OUTLINED_FUNCTION_12_58(4.8151e-34);
      id v43 = OUTLINED_FUNCTION_25_37(v42);
      *(void *)(v41 + 4) = OUTLINED_FUNCTION_15_49(v43, v44, v45, v46, v47, v48, v49, v50);
      swift_bridgeObjectRelease();
      *(_WORD *)(v41 + 12) = 2048;
      *(void *)(v41 + 14) = v35;
      OUTLINED_FUNCTION_6_68(&dword_0, v51, v52, "#ChainedIntentResolver<%s> Running resolver @ index=%ld");
      OUTLINED_FUNCTION_17_0(v113);
      OUTLINED_FUNCTION_0_2(v113);
      OUTLINED_FUNCTION_0_2(v41);
    }

    OUTLINED_FUNCTION_37_27();
    v54 = v53;
    id v55 = (void *)OUTLINED_FUNCTION_28_35();
    *(void *)(v0 + 456) = v55;
    id v56 = OUTLINED_FUNCTION_75_4((uint64_t)&protocol conformance descriptor for AnyIntentResolver<A>);
    *id v55 = v0;
    v55[1] = ChainedIntentResolver.resolve(skIntent:nlIntent:);
    return OUTLINED_FUNCTION_4_71(v1, *(void *)(v0 + 392), *(void *)(v0 + 416), v56);
  }

  else
  {
    uint64_t v58 = v0 + 368;
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    unint64_t v59 = *(void **)(v0 + 400);
    uint64_t v60 = OUTLINED_FUNCTION_15_1();
    __swift_project_value_buffer(v60, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_29_29();
    uint64_t v61 = v31;
    OUTLINED_FUNCTION_46_19();
    uint64_t v62 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_63(v62))
    {
      uint64_t v108 = *(void *)(v0 + 416);
      v63 = *(void *)(v0 + 400);
      uint64_t v64 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v111 = (void *)OUTLINED_FUNCTION_7_0(8LL);
      uint64_t v114 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v65 = OUTLINED_FUNCTION_30_29(4.8152e-34);
      uint64_t v66 = OUTLINED_FUNCTION_24_32(v65);
      uint64_t v74 = OUTLINED_FUNCTION_15_49(v66, v67, v68, v69, v70, v71, v72, v73);
      OUTLINED_FUNCTION_17_46(v74, v75, v76, v77, v78, v79, v80, v81, v0 + 320);
      swift_bridgeObjectRelease();
      id v82 = (void *)OUTLINED_FUNCTION_16_42();
      id v83 = OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_10_53(v83, v84, v85, v86, v87, v88, v89, v90, v105, v108, v0 + 336);
      OUTLINED_FUNCTION_39();
      v91 = OUTLINED_FUNCTION_21_37();
      v92 = OUTLINED_FUNCTION_11_57((uint64_t)v91);
      OUTLINED_FUNCTION_41_23(v92, v93, v94, v95, v96, v97, v98, v99, v106, v109, v110, v111);

      OUTLINED_FUNCTION_27_38( &dword_0,  v100,  v101,  "#ChainedIntentResolver<%s> Ran %ld resolvers, calling completion on skIntent: %@");
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_6_56();
      OUTLINED_FUNCTION_0_2(v63);
      OUTLINED_FUNCTION_6_56();
      OUTLINED_FUNCTION_0_2(v114);
      uint64_t v102 = v64;
      uint64_t v58 = v0 + 368;
      OUTLINED_FUNCTION_0_2(v102);
    }

    else
    {
      OUTLINED_FUNCTION_32_30();
    }

    OUTLINED_FUNCTION_22_0(v58, v0 + 272);
    OUTLINED_FUNCTION_39_17();
    return OUTLINED_FUNCTION_3_84(v103, v104);
  }

uint64_t protocol witness for SKIntentResolver.shouldRunResolver(skIntent:nlIntent:) in conformance ChainedIntentResolver<A>()
{
  return CallingIntentContinueInAppStrategy.shouldCheckResponseModeToOutputIntentHandledDialog.getter();
}

uint64_t protocol witness for SKIntentResolver.resolve(skIntent:nlIntent:) in conformance ChainedIntentResolver<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  char v9 = (void *)swift_task_alloc(dword_4373CC);
  *(void *)(v4 + 16) = v9;
  uint64_t v10 = *(void *)(a3 + 16);
  *char v9 = v4;
  v9[1] = SuggestionsCATsSimple.phoneCall_StartGFTCall();
  return ChainedIntentResolver.resolve(skIntent:nlIntent:)(a1, a2, v8, v10);
}

uint64_t FirstHitIntentResolver.resolve(skIntent:nlIntent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[50] = a3;
  v4[51] = a4;
  v4[48] = a1;
  v4[49] = a2;
  return swift_task_switch(FirstHitIntentResolver.resolve(skIntent:nlIntent:), 0LL, 0LL);
}

uint64_t FirstHitIntentResolver.resolve(skIntent:nlIntent:)()
{
  uint64_t v1 = *(void *)(v0 + 408);
  *(void *)(v0 + 368) = *(void *)(v0 + 400);
  uint64_t v2 = swift_task_alloc(48LL);
  __int128 v3 = *(_OWORD *)(v0 + 384);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v6 = type metadata accessor for AnyIntentResolver(255LL, v1, v4, v5);
  *(void *)(v0 + 416) = v6;
  uint64_t v7 = type metadata accessor for Array(0LL, v6);
  swift_bridgeObjectRetain();
  uint64_t v8 = OUTLINED_FUNCTION_75_4((uint64_t)&protocol conformance descriptor for [A]);
  Sequence.first(where:)(partial apply for closure #1 in FirstHitIntentResolver.resolve(skIntent:nlIntent:), v2, v7, v8);
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for Optional(0LL, v6);
  *(void *)(v0 + 424) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v0 + 432) = v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v0 + 208, v0 + 16, v9);
  if (*(void *)(v0 + 232))
  {
    __int128 v11 = *(_OWORD *)(v0 + 224);
    *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 208);
    *(_OWORD *)(v0 + 160) = v11;
    __int128 v12 = *(_OWORD *)(v0 + 256);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 240);
    *(_OWORD *)(v0 + 192) = v12;
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v13 = OUTLINED_FUNCTION_15_1();
    uint64_t v14 = (os_log_s *)__swift_project_value_buffer(v13, (uint64_t)static Logger.siriPhone);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
    uint64_t v16 = v15(v0 + 272, v0 + 144, v6);
    Logger.logObject.getter(v16);
    os_log_type_t v17 = OUTLINED_FUNCTION_6_0();
    if (os_log_type_enabled(v14, v17))
    {
      uint64_t v18 = *(void *)(v0 + 408);
      os_log_type_t type = v17;
      uint64_t v19 = OUTLINED_FUNCTION_7_0(22LL);
      uint64_t v58 = OUTLINED_FUNCTION_7_0(64LL);
      uint64_t v59 = v58;
      *(_DWORD *)uint64_t v19 = 136315394;
      *(void *)(v0 + 352) = v18;
      uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v18);
      uint64_t v21 = String.init<A>(describing:)(v0 + 352, MetatypeMetadata);
      *(void *)(v0 + 360) = OUTLINED_FUNCTION_40_18(v21, v22, v23, v24, v25, v26, v27, v28, v53, v0 + 352, v0 + 360);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v56, v0 + 368, v19 + 4);
      OUTLINED_FUNCTION_129();
      *(_WORD *)(v19 + 12) = 2080;
      v15(v0 + 80, v0 + 272, v6);
      OUTLINED_FUNCTION_33_39();
      uint64_t v29 = AnyIntentResolver.description.getter();
      unint64_t v31 = v30;
      ((void (*)(uint64_t, uint64_t))v15)(v0 + 80, v6);
      *(void *)(v0 + 376) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v0 + 384, v19 + 14);
      OUTLINED_FUNCTION_129();
      _os_log_impl(&dword_0, v14, type, "#FirstHitIntentResolver<%s> Chose resolver: %s)", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy(v58, 2LL);
      OUTLINED_FUNCTION_0_2(v58);
      OUTLINED_FUNCTION_0_2(v19);
    }

    else
    {
      OUTLINED_FUNCTION_33_39();
    }

    *(void *)(v0 + 440) = v15;
    id v48 = (void *)swift_task_alloc(dword_439C1C);
    *(void *)(v0 + 448) = v48;
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AnyIntentResolver<A>, v6);
    *id v48 = v0;
    v48[1] = FirstHitIntentResolver.resolve(skIntent:nlIntent:);
    return SKIntentResolver.run(skIntent:nlIntent:)(*(void *)(v0 + 384), *(void *)(v0 + 392), v6, WitnessTable);
  }

  else
  {
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v32(v0 + 208, v9);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v33 = OUTLINED_FUNCTION_15_1();
    os_log_type_t v34 = (os_log_s *)__swift_project_value_buffer(v33, (uint64_t)static Logger.siriPhone);
    Logger.logObject.getter(v34);
    os_log_type_t v35 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_63(v35))
    {
      uint64_t v36 = *(void *)(v0 + 408);
      uint64_t v37 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v38 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v59 = v38;
      *(_DWORD *)uint64_t v37 = 136315138;
      *(void *)(v0 + 344) = v36;
      uint64_t v39 = swift_getMetatypeMetadata(v36);
      uint64_t v40 = OUTLINED_FUNCTION_24_32(v39);
      *(void *)(v0 + 336) = OUTLINED_FUNCTION_40_18(v40, v41, v42, v43, v44, v45, v46, v47, v53, v54, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v37 + 4);
      OUTLINED_FUNCTION_129();
      _os_log_impl( &dword_0,  v34,  (os_log_type_t)(v0 + 112),  "#FirstHitIntentResolver<%s> Didn't find a resolver that supports this request, returning skIntent as-is.",  v37,  0xCu);
      OUTLINED_FUNCTION_17_0(v38);
      OUTLINED_FUNCTION_0_2(v38);
      OUTLINED_FUNCTION_0_2((uint64_t)v37);
    }

    v32(v0 + 16, v9);
    id v51 = *(id *)(v0 + 384);
    OUTLINED_FUNCTION_39_17();
    return v52();
  }

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)();
  OUTLINED_FUNCTION_29();
  uint64_t v4 = v2[56];
  *uint64_t v5 = *v3;
  v2[57] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v6 = FirstHitIntentResolver.resolve(skIntent:nlIntent:);
  }

  else
  {
    v2[58] = v0;
    uint64_t v6 = FirstHitIntentResolver.resolve(skIntent:nlIntent:);
  }

  return OUTLINED_FUNCTION_9_11((uint64_t)v6, 0LL, 0LL);
}

{
  uint64_t (*v0)(void);
  OUTLINED_FUNCTION_20_41();
  OUTLINED_FUNCTION_3_70();
  OUTLINED_FUNCTION_39_17();
  return v0();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_20_41();
  OUTLINED_FUNCTION_3_70();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in FirstHitIntentResolver.resolve(skIntent:nlIntent:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for AnyIntentResolver(0LL, a4, a3, a4);
  char v6 = AnyIntentResolver.shouldRunResolver(skIntent:nlIntent:)();
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v7, (uint64_t)static Logger.siriPhone);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v10 = v9(v23, a1, v5);
  __int128 v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v13 = static os_log_type_t.debug.getter(v11, v12);
  if (os_log_type_enabled(v11, v13))
  {
    uint64_t v14 = swift_slowAlloc(18LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v24 = v15;
    *(_DWORD *)uint64_t v14 = 136315394;
    v9(&v21, (uint64_t)v23, v5);
    uint64_t v16 = *(void (**)(uint64_t *, uint64_t))(v8 + 8);
    v16(v23, v5);
    uint64_t v17 = AnyIntentResolver.description.getter();
    unint64_t v19 = v18;
    v16(&v21, v5);
    uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v14 + 4);
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 1024;
    LODWORD(v21) = v6 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, (char *)&v21 + 4, v14 + 14);
    _os_log_impl(&dword_0, v11, v13, "#%s shouldRunResolver = %{BOOL}d", (uint8_t *)v14, 0x12u);
    swift_arrayDestroy(v15, 1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v23, v5);
  }

  return v6 & 1;
}

uint64_t protocol witness for SKIntentResolver.resolve(skIntent:nlIntent:) in conformance FirstHitIntentResolver<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = (void *)swift_task_alloc(dword_4373C4);
  *(void *)(v4 + 16) = v9;
  uint64_t v10 = *(void *)(a3 + 16);
  *uint64_t v9 = v4;
  v9[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  return FirstHitIntentResolver.resolve(skIntent:nlIntent:)(a1, a2, v8, v10);
}

uint64_t partial apply for closure #1 in FirstHitIntentResolver.resolve(skIntent:nlIntent:)(uint64_t a1)
{
  return closure #1 in FirstHitIntentResolver.resolve(skIntent:nlIntent:)(a1, v1[3], v1[4], v1[2]) & 1;
}

uint64_t OUTLINED_FUNCTION_3_84(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_4_71(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SKIntentResolver.run(skIntent:nlIntent:)(a1, a2, a3, a4);
}

void OUTLINED_FUNCTION_6_68(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_10_53( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 + 328) = v15;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v14, a11, v13, v12 + 22);
}

uint64_t OUTLINED_FUNCTION_11_57(uint64_t a1)
{
  *(void *)(v2 + 336) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4, v2 + 344, v1, v3);
}

uint64_t OUTLINED_FUNCTION_12_58(float a1)
{
  *uint64_t v1 = a1;
  *(void *)(v2 + 376) = v3;
  return swift_getMetatypeMetadata(v3);
}

uint64_t OUTLINED_FUNCTION_15_49( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_16_42()
{
  *(_WORD *)(v1 + 12) = 2048;
  return Array.count.getter(v0);
}

uint64_t OUTLINED_FUNCTION_17_46( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 320) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a9, v11, v12, v10 + 12);
}

uint64_t OUTLINED_FUNCTION_18_47(uint64_t a1)
{
  *(void *)(v1 + 440) = a1;
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_19_40@<X0>(uint64_t a1@<X8>)
{
  *uint64_t v1 = v2;
  v1[1] = a1;
  return v3;
}

uint64_t OUTLINED_FUNCTION_20_41()
{
  return (*(uint64_t (**)(uint64_t, void))(v0 + 440))(v0 + 144, *(void *)(v0 + 416));
}

uint64_t OUTLINED_FUNCTION_23_39(uint64_t a1)
{
  return type metadata accessor for Optional(0LL, a1);
}

uint64_t OUTLINED_FUNCTION_24_32(uint64_t a1)
{
  return String.init<A>(describing:)(v1, a1);
}

uint64_t OUTLINED_FUNCTION_28_35()
{
  return swift_task_alloc(v0);
}

uint64_t OUTLINED_FUNCTION_29_29()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t OUTLINED_FUNCTION_30_29(float a1)
{
  *uint64_t v2 = a1;
  *(void *)(v1 + 312) = v3;
  return swift_getMetatypeMetadata(v3);
}

uint64_t OUTLINED_FUNCTION_32_30()
{
  return swift_bridgeObjectRelease_n(*(void *)(v0 + 400), 2LL);
}

uint64_t OUTLINED_FUNCTION_33_39()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

__n128 OUTLINED_FUNCTION_35_27()
{
  __int128 v2 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)uint64_t v0 = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v0 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 128);
  __int128 v4 = *(_OWORD *)(v1 + 144);
  *(__n128 *)(v0 + 32) = result;
  *(_OWORD *)(v0 + 48) = v4;
  return result;
}

  ;
}

void OUTLINED_FUNCTION_37_27()
{
  *(void *)(v0 + 448) = *(void *)(v0 + 368);
}

  ;
}

void OUTLINED_FUNCTION_41_23( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  *a12 = v12;
}

uint64_t OUTLINED_FUNCTION_43_16(uint64_t a1)
{
  *(void *)(v1 + 4) = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t OUTLINED_FUNCTION_44_18()
{
  return type metadata accessor for EnumeratedSequence.Iterator(0LL);
}

uint64_t OUTLINED_FUNCTION_46_19()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_47_17()
{
  return swift_errorRelease(v0);
}

uint64_t CallHistoryPromptDialogProvider.getAceCommandForVoicemail(searchCallHistorySharedGlobals:isLastPage:)( uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 264) = a2;
  *(void *)(v3 + 144) = a1;
  *(void *)(v3 + 152) = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AceOutput?);
  *(void *)(v3 + 160) = OUTLINED_FUNCTION_23(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for AceOutput(0LL);
  *(void *)(v3 + 168) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v3 + 176) = v6;
  *(void *)(v3 + 184) = OUTLINED_FUNCTION_23(v6);
  uint64_t v7 = type metadata accessor for DialogPhase(0LL);
  *(void *)(v3 + 192) = OUTLINED_FUNCTION_23(*(void *)(v7 - 8));
  uint64_t v8 = type metadata accessor for OutputGenerationManifest(0LL);
  *(void *)(v3 + 200) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v3 + 208) = v9;
  *(void *)(v3 + 216) = OUTLINED_FUNCTION_23(v9);
  return OUTLINED_FUNCTION_5_7();
}

uint64_t CallHistoryPromptDialogProvider.getAceCommandForVoicemail(searchCallHistorySharedGlobals:isLastPage:)( uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 192);
  uint64_t v3 = *(void *)(v1 + 144);
  static DialogPhase.confirmation.getter(a1);
  OutputGenerationManifest.init(dialogPhase:_:)( v2,  closure #1 in CallHistoryPromptDialogProvider.getAceCommandForVoicemail(searchCallHistorySharedGlobals:isLastPage:),  0LL);
  outlined init with copy of SharedGlobalsProviding(v3 + 80, v1 + 16);
  uint64_t v4 = *(int **)(class metadata base offset for SearchCallHistoryCATsSimple + **(void **)(v3 + 184) + 592);
  uint64_t v7 = (uint64_t (*)(void))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v1 + 224) = v5;
  *uint64_t v5 = v1;
  v5[1] = CallHistoryPromptDialogProvider.getAceCommandForVoicemail(searchCallHistorySharedGlobals:isLastPage:);
  return v7(*(unsigned __int8 *)(v1 + 264));
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 224);
  *(void *)(v3 + 232) = a1;
  *(void *)(v3 + 240) = v1;
  swift_task_dealloc(v4);
  return OUTLINED_FUNCTION_5_7();
}

uint64_t CallHistoryPromptDialogProvider.getAceCommandForVoicemail(searchCallHistorySharedGlobals:isLastPage:)()
{
  uint64_t v1 = (void *)v0[29];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject(v4, 40LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_31FE60;
  *(void *)(v5 + 32) = v1;
  uint64_t v13 = v5;
  specialized Array._endMutation()(v5, v6, v7, v8);
  v0[31] = v13;
  uint64_t v9 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)[1];
  id v10 = v1;
  uint64_t v11 = (void *)swift_task_alloc(v9);
  v0[32] = v11;
  *uint64_t v11 = v0;
  v11[1] = CallHistoryPromptDialogProvider.getAceCommandForVoicemail(searchCallHistorySharedGlobals:isLastPage:);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)( v0 + 7,  v13,  v0[27],  v2,  v3);
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 256LL));
  swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_s *v15;
  os_log_type_t v16;
  BOOL v17;
  void *v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v30;
  uint8_t *buf;
  uint64_t v32;
  uint64_t v33[3];
  uint64_t v1 = (void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 160);
  outlined init with copy of SharedGlobalsProviding(v0 + 56, v0 + 96);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output);
  if (swift_dynamicCast(v2, v0 + 96, v3))
  {
    uint64_t v4 = *(void **)(v0 + 232);
    uint64_t v6 = *(void *)(v0 + 176);
    uint64_t v5 = *(void *)(v0 + 184);
    uint64_t v7 = *(void *)(v0 + 160);
    uint64_t v8 = *(void *)(v0 + 168);
    __swift_storeEnumTagSinglePayload(v7, 0LL, 1LL, v8);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v5, v7, v8);
    id v10 = (void *)AceOutput.commands.getter(v9);

    OUTLINED_FUNCTION_29_25(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 160);
    __swift_storeEnumTagSinglePayload(v11, 1LL, 1LL, *(void *)(v0 + 168));
    outlined destroy of AceOutput?(v11);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v12 = *(void *)(v0 + 152);
    uint64_t v13 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v13, (uint64_t)static Logger.siriPhone);
    uint64_t v14 = swift_retain_n(v12, 2LL);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    uint64_t v16 = static os_log_type_t.error.getter();
    uint64_t v17 = os_log_type_enabled(v15, v16);
    unint64_t v18 = *(void **)(v0 + 152);
    if (v17)
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v32 = swift_slowAlloc(32LL, -1LL);
      v33[0] = v32;
      *(_DWORD *)unint64_t v19 = 136315138;
      unint64_t v30 = v19 + 4;
      buf = v19;
      uint64_t v21 = v18[2];
      id v20 = v18[3];
      uint64_t v22 = v18[4];
      uint64_t v23 = (void *)v18[5];
      v33[1] = 0LL;
      v33[2] = 0xE000000000000000LL;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v21, v20, v22, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0LL, 0xE000000000000000LL, v33);
      uint64_t v1 = (void *)(v0 + 56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v30);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_29_18();
      _os_log_impl(&dword_0, v15, v16, "%s can't generate voicemail prompt dialog to an Ace Command", buf, 0xCu);
      swift_arrayDestroy(v32, 1LL);
      OUTLINED_FUNCTION_0_2(v32);
      OUTLINED_FUNCTION_0_2((uint64_t)buf);
    }

    else
    {
      OUTLINED_FUNCTION_29_18();
    }

    id v10 = _swiftEmptyArrayStorage;
  }

  uint64_t v25 = *(void *)(v0 + 208);
  uint64_t v24 = *(void *)(v0 + 216);
  uint64_t v26 = *(void *)(v0 + 192);
  uint64_t v27 = *(void *)(v0 + 184);
  uint64_t v28 = *(void *)(v0 + 160);
  __swift_destroy_boxed_opaque_existential_1(v1);
  OUTLINED_FUNCTION_29_25(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void *))(v0 + 8))(v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 160);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 208) + 8LL))(v1, *(void *)(v0 + 200));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void CallHistoryPromptDialogProvider.deinit()
{
}

uint64_t CallHistoryPromptDialogProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

void CallHistoryPromptDialogProvider.__allocating_init()()
{
}

void *CallHistoryPromptDialogProvider.init()()
{
  v0[2] = type metadata accessor for CallHistoryPromptDialogProvider();
  v0[3] = &outlined read-only object #0 of CallHistoryPromptDialogProvider.init();
  v0[4] = 0LL;
  v0[5] = 0LL;
  return v0;
}

uint64_t outlined destroy of AceOutput?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AceOutput?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for CallHistoryPromptDialogProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin31CallHistoryPromptDialogProvider);
}

void specialized PhoneFlow.init(state:sharedGlobals:)(uint64_t a1, __int128 *a2)
{
}

{
  specialized PhoneFlow.init(state:sharedGlobals:)( a1,  a2,  &demangling cache variable for type metadata for PhoneCallFlowState<INAnswerCallIntent, INAnswerCallIntentResponse>);
}

void specialized PhoneFlow.init(state:sharedGlobals:)(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  v3[2] = 0x6F6C46656E6F6850LL;
  v3[3] = 0xE900000000000077LL;
  outlined init with take of ContactNeedsValueGuardFlow<INStartCallIntent>.FlowState( a1,  (uint64_t)v3 + *(void *)(*v3 + 112LL),  a3);
  outlined init with take of AppSelectionSignalComponent(a2, (uint64_t)v3 + *(void *)(*v3 + 120LL));
  OUTLINED_FUNCTION_2();
}

uint64_t specialized IntentConversionFlow.init(input:app:sharedGlobals:)( uint64_t a1, uint64_t a2, __int128 *a3)
{
  *(void *)(v3 + 16) = 0LL;
  uint64_t v7 = (uint64_t *)(v3 + direct field offset for IntentConversionFlow.logPrefix);
  *uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentConversionFlow<INHangUpCallIntent>);
  v7[1] = (uint64_t)&outlined read-only object #0 of specialized IntentConversionFlow.init(input:app:sharedGlobals:);
  v7[2] = 0LL;
  v7[3] = 0LL;
  uint64_t v8 = v3 + direct field offset for IntentConversionFlow.input;
  uint64_t v9 = type metadata accessor for Input(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v8, a1, v9);
  *(void *)(v3 + direct field offset for IntentConversionFlow.appResolved) = a2;
  outlined init with take of AppSelectionSignalComponent( a3,  v3 + direct field offset for IntentConversionFlow.sharedGlobals);
  return v3;
}

void HangUpCallFlow.__allocating_init(input:sharedGlobals:app:)(uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t HangUpCallFlow.init(input:sharedGlobals:app:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = one-time initialization token for siriPhone;
  swift_retain();
  if (v8 != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v9 = OUTLINED_FUNCTION_15_1();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.siriPhone);
  id v10 = (os_log_s *)OUTLINED_FUNCTION_9();
  os_log_type_t v12 = static os_log_type_t.debug.getter(v10, v11);
  if (os_log_type_enabled(v10, v12))
  {
    uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
    *(_WORD *)uint64_t v13 = 0;
    OUTLINED_FUNCTION_5(&dword_0, v10, v12, "#HangUpCallFlow: initialize", v13);
    OUTLINED_FUNCTION_0_2((uint64_t)v13);
  }

  *(void *)(v4 + direct field offset for HangUpCallFlow.app) = a3;
  swift_retain();
  swift_release(v4);
  outlined init with copy of SignalProviding((uint64_t)a2, (uint64_t)v19);
  specialized PhoneFlow.init(sharedGlobals:)(v19);
  uint64_t v15 = v14;
  uint64_t v16 = *(void (**)(uint64_t))(*(void *)v14 + 192LL);
  swift_retain();
  v16(a1);
  swift_release(a3);
  OUTLINED_FUNCTION_38_1();
  __swift_destroy_boxed_opaque_existential_1(a2);
  uint64_t v17 = OUTLINED_FUNCTION_3_4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8LL))(a1, v17);
  return v15;
}

void HangUpCallFlow.__allocating_init(state:sharedGlobals:)(uint64_t a1, void *a2)
{
}

uint64_t HangUpCallFlow.init(state:sharedGlobals:)(uint64_t a1, void *a2)
{
  void (*v12)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17[2];
  uint64_t v18;
  __int128 v19;
  void v20[4];
  uint64_t v21;
  _BYTE v22[16];
  uint64_t v23;
  void v24[23];
  uint64_t v4 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowState<INHangUpCallIntent, INHangUpCallIntentResponse>);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_20_0();
  uint64_t v7 = one-time initialization token for instance;
  swift_retain();
  if (v7 != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  memcpy(v24, &static PhoneCallFeatureFlags.instance, 0xB0uLL);
  uint64_t v8 = type metadata accessor for PhoneCallFeatureManager();
  uint64_t inited = swift_initStackObject(v8, &v18);
  v20[1] = &type metadata for PhoneCallFeatureFlags;
  v20[2] = &protocol witness table for PhoneCallFeatureFlags;
  *(void *)&unint64_t v19 = swift_allocObject(&unk_409A18, 192LL, 7LL);
  memcpy((void *)(v19 + 16), v24, 0xB0uLL);
  outlined init with take of AppSelectionSignalComponent(&v19, inited + 16);
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v10);
  os_log_type_t v12 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v11 + 8);
  outlined retain of PhoneCallFeatureFlags(v24);
  v12(v17, v10, v11);
  FirstPartyAnnotatedAppStore.getDefaultApp(for:)(v17, (uint64_t)&v19);
  swift_release(inited);
  __swift_destroy_boxed_opaque_existential_1(v17);
  uint64_t v23 = *((void *)&v19 + 1);
  uint64_t v13 = v19;
  outlined release of Set<String>(&v23);
  outlined init with take of ContactNeedsValueGuardFlow<INStartCallIntent>.FlowState( (uint64_t)v20,  (uint64_t)v22,  &demangling cache variable for type metadata for String?);
  outlined release of String?((uint64_t)v22);
  uint64_t v21 = v20[3];
  outlined release of Set<String>(&v21);
  *(void *)(v4 + direct field offset for HangUpCallFlow.app) = v13;
  swift_release(v4);
  outlined init with copy of PhoneCallFlowState<INHangUpCallIntent, INHangUpCallIntentResponse>(a1, v3);
  outlined init with copy of SignalProviding((uint64_t)a2, (uint64_t)v17);
  specialized PhoneFlow.init(state:sharedGlobals:)( v3,  v17,  &demangling cache variable for type metadata for PhoneCallFlowState<INHangUpCallIntent, INHangUpCallIntentResponse>);
  uint64_t v15 = v14;
  outlined destroy of PhoneCallFlowState<INHangUpCallIntent, INHangUpCallIntentResponse>(a1);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v15;
}

uint64_t HangUpCallFlow.on(input:)(uint64_t a1)
{
  void (*v25)(uint64_t *__return_ptr, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[3];
  uint64_t v37;
  uint64_t v38;
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowState<INHangUpCallIntent, INHangUpCallIntentResponse>);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v31 - v7;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v9 = OUTLINED_FUNCTION_15_1();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.siriPhone);
  uint64_t v10 = OUTLINED_FUNCTION_54_7();
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v33 = a1;
    uint64_t v14 = (uint8_t *)v13;
    uint64_t v15 = OUTLINED_FUNCTION_7_0(32LL);
    v36[0] = v15;
    os_log_type_t v34 = v4;
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v32 = v14 + 4;
    (*(void (**)(void))(*(void *)v1 + 128LL))();
    specialized PhoneCallFlowState.description.getter();
    uint64_t v17 = v16;
    unint64_t v19 = v18;
    outlined destroy of PhoneCallFlowState<INHangUpCallIntent, INHangUpCallIntentResponse>((uint64_t)v8);
    os_log_type_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, v36);
    uint64_t v4 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v32);
    OUTLINED_FUNCTION_0_3();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_57_0(&dword_0, v11, v12, "#HangUpCallFlow: State = %s", v14);
    OUTLINED_FUNCTION_17_0(v15);
    OUTLINED_FUNCTION_0_2(v15);
    uint64_t v20 = (uint64_t)v14;
    a1 = v33;
    OUTLINED_FUNCTION_0_2(v20);
  }

  else
  {

    uint64_t v21 = OUTLINED_FUNCTION_0_3();
  }

  (*(void (**)(uint64_t))(*(void *)v2 + 128LL))(v21);
  int v22 = OUTLINED_FUNCTION_27_39();
  if (v22 == 2)
  {
    uint64_t v29 = dispatch thunk of AnyValueFlow.on(input:)(a1);
    OUTLINED_FUNCTION_38_1();
  }

  else if (v22 == 5)
  {
    uint64_t v24 = OUTLINED_FUNCTION_3_4();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16LL))(v8, a1, v24);
    *(void *)&v8[v23] = *(void *)(v2 + direct field offset for HangUpCallFlow.app);
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v2 + 152LL);
    uint64_t v26 = swift_retain();
    v25(v36, v26);
    uint64_t v27 = v37;
    uint64_t v28 = v38;
    __swift_project_boxed_opaque_existential_1(v36, v37);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v28);
    uint64_t v29 = 1;
    swift_storeEnumTagMultiPayload(v8, v4, 1LL);
    (*(void (**)(char *))(*(void *)v2 + 136LL))(v8);
    __swift_destroy_boxed_opaque_existential_1(v36);
  }

  else
  {
    outlined destroy of PhoneCallFlowState<INHangUpCallIntent, INHangUpCallIntentResponse>((uint64_t)v6);
    uint64_t v29 = 0;
  }

  return v29 & 1;
}

uint64_t HangUpCallFlow.execute()(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = OUTLINED_FUNCTION_3_4();
  _BYTE v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = OUTLINED_FUNCTION_28();
  v2[11] = OUTLINED_FUNCTION_28();
  v2[12] = OUTLINED_FUNCTION_28();
  v2[13] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowState<INHangUpCallIntent, INHangUpCallIntentResponse>);
  v2[14] = OUTLINED_FUNCTION_28();
  v2[15] = OUTLINED_FUNCTION_28();
  return swift_task_switch(HangUpCallFlow.execute(), 0LL, 0LL);
}

void HangUpCallFlow.execute()()
{
  uint64_t v1 = (char *)sub_1B90C4 + 4 * word_331340[OUTLINED_FUNCTION_27_39()];
  __asm { BR              X10 }

uint64_t sub_1B90C4()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v3 = OUTLINED_FUNCTION_15_1();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.siriPhone);
  uint64_t v4 = OUTLINED_FUNCTION_19_41();
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v0 + 112);
    uint64_t v33 = *(void *)(v0 + 56);
    uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v9 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v34 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    v1();
    specialized PhoneCallFlowState.description.getter();
    uint64_t v11 = v10;
    unint64_t v13 = v12;
    outlined destroy of PhoneCallFlowState<INHangUpCallIntent, INHangUpCallIntentResponse>(v7);
    *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v34);
    OUTLINED_FUNCTION_20_42(v2, v0 + 48, v14, v15, v16, v17, v18, v19, v28, v29, v30, v31, v32, (uint64_t)(v8 + 4));
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_31_1(v33);
    OUTLINED_FUNCTION_57_0(&dword_0, v5, v6, "#HangUpCallFlow: encountered unexpected state %s", v8);
    OUTLINED_FUNCTION_17_0(v9);
    OUTLINED_FUNCTION_0_2(v9);
    OUTLINED_FUNCTION_0_2((uint64_t)v8);
  }

  else
  {
    OUTLINED_FUNCTION_31_1(*(void *)(v0 + 56));
  }

  uint64_t v20 = *(void *)(v0 + 112);
  uint64_t v21 = *(void *)(v0 + 56);
  swift_storeEnumTagMultiPayload(v20, *(void *)(v0 + 104), 7LL);
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 136LL))(v20);
  static ExecuteResponse.complete()(v22);
  uint64_t v23 = *(void *)(v0 + 112);
  uint64_t v25 = *(void *)(v0 + 88);
  uint64_t v24 = *(void *)(v0 + 96);
  uint64_t v26 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 120));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t HangUpCallFlow.makeRCHFlow(input:intent:app:)(uint64_t a1, void *a2)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v4 = OUTLINED_FUNCTION_15_1();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.siriPhone);
  id v5 = a2;
  OUTLINED_FUNCTION_54_7();
  id v6 = a2;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v9 = static os_log_type_t.debug.getter(v7, v8);
  if (OUTLINED_FUNCTION_12_59(v9))
  {
    uint64_t v10 = OUTLINED_FUNCTION_7_0(22LL);
    uint64_t v11 = OUTLINED_FUNCTION_7_0(64LL);
    v33[0] = v11;
    *(_DWORD *)uint64_t v10 = 136315394;
    id v12 = [v6 debugDescription];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    unint64_t v15 = v14;

    uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v10 + 4);

    uint64_t v16 = swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v17 = dispatch thunk of App.debugDescription.getter(v16);
    uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v10 + 14);
    OUTLINED_FUNCTION_0_3();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v7, v2, "#HangUpCallFlow: Making RCHFlow for intent %s and App %s.", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2LL);
    OUTLINED_FUNCTION_0_2(v11);
    OUTLINED_FUNCTION_0_2(v10);
  }

  else
  {

    OUTLINED_FUNCTION_0_3();
  }

  OUTLINED_FUNCTION_23_40(v19, v20, v21);
  uint64_t v22 = type metadata accessor for HangUpCallRCHFlowDelegate(0LL);
  uint64_t v23 = OUTLINED_FUNCTION_15_2(v22);
  uint64_t v24 = outlined init with copy of SignalProviding( (uint64_t)v33,  v23 + direct field offset for HangUpCallRCHFlowDelegate.sharedGlobals);
  uint64_t v25 = BaseRCHFlowDelegate.init()(v24);
  uint64_t v26 = __swift_destroy_boxed_opaque_existential_1(v33);
  OUTLINED_FUNCTION_23_40(v26, v27, v28);
  static PhoneCallFlowFactory.makeHangUpCallRCHFlow(delegate:intent:app:sharedGlobals:)();
  uint64_t v30 = v29;
  swift_release(v25);
  __swift_destroy_boxed_opaque_existential_1(v33);
  return v30;
}

uint64_t HangUpCallFlow.processIntentConversionResult(exitValue:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowState<INHangUpCallIntent, INHangUpCallIntentResponse>);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  id v6 = (uint64_t *)((char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v8 = (char *)&v36 - v7;
  uint64_t v9 = OUTLINED_FUNCTION_3_4();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_20_0();
  uint64_t v11 = *(void (**)(void))(*(void *)v1 + 128LL);
  v11();
  if (swift_getEnumCaseMultiPayload(v8, v4) == 1)
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, App, DeviceState));
    uint64_t v13 = *(uint8_t **)&v8[*(int *)(v12 + 48)];
    unint64_t v14 = &v8[*(int *)(v12 + 64)];
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v2, v8, v9);
    __swift_destroy_boxed_opaque_existential_1(v14);
    if (a1)
    {
      id v15 = a1;
      uint64_t v16 = HangUpCallFlow.makeRCHFlow(input:intent:app:)((uint64_t)v15, v15);
      uint64_t v39 = v16;
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INHangUpCallIntent, INHangUpCallIntentResponse>>);
      uint64_t v37 = v13;
      uint64_t v18 = v17;
      lazy protocol witness table accessor for type Future<TemplatingResult, Error> and conformance Future<A, B>( (unint64_t *)&lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INHangUpCallIntent, INHangUpCallIntentResponse>> and conformance AnyValueFlow<A>,  &demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INHangUpCallIntent, INHangUpCallIntentResponse>>,  (uint64_t)&protocol conformance descriptor for AnyValueFlow<A>);
      uint64_t v19 = Flow.eraseToAnyValueFlow()(v18);
      swift_release(v16);
      *id v6 = v19;
      swift_storeEnumTagMultiPayload(v6, v4, 2LL);
      OUTLINED_FUNCTION_4_72();

      uint64_t v20 = v37;
    }

    else
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v32 = OUTLINED_FUNCTION_15_1();
      __swift_project_value_buffer(v32, (uint64_t)static Logger.siriPhone);
      uint64_t v33 = (os_log_s *)OUTLINED_FUNCTION_9();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        os_log_type_t v35 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
        *(_WORD *)os_log_type_t v35 = 0;
        OUTLINED_FUNCTION_5( &dword_0,  v33,  v34,  "#HangUpCallFlow: Could not convert input to INHangUpCallIntent, stopping",  v35);
        OUTLINED_FUNCTION_0_2((uint64_t)v35);
      }

      OUTLINED_FUNCTION_14_46();
      OUTLINED_FUNCTION_4_72();
      uint64_t v20 = v13;
    }

    swift_release(v20);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v2, v9);
  }

  else
  {
    outlined destroy of PhoneCallFlowState<INHangUpCallIntent, INHangUpCallIntentResponse>((uint64_t)v8);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v21 = OUTLINED_FUNCTION_15_1();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.siriPhone);
    uint64_t v22 = OUTLINED_FUNCTION_54_7();
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_12_59(v24))
    {
      uint64_t v25 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v26 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v39 = v26;
      *(_DWORD *)uint64_t v25 = 136315138;
      uint64_t v37 = v25 + 4;
      v11();
      specialized PhoneCallFlowState.description.getter();
      uint64_t v28 = v27;
      unint64_t v30 = v29;
      outlined destroy of PhoneCallFlowState<INHangUpCallIntent, INHangUpCallIntentResponse>((uint64_t)v6);
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v37);
      OUTLINED_FUNCTION_0_3();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_57_0(&dword_0, v23, (os_log_type_t)v10, "#HangUpCallFlow: Unexpected state, stopping: %s", v25);
      OUTLINED_FUNCTION_17_0(v26);
      OUTLINED_FUNCTION_0_2(v26);
      OUTLINED_FUNCTION_0_2((uint64_t)v25);
    }

    else
    {

      OUTLINED_FUNCTION_0_3();
    }

    OUTLINED_FUNCTION_14_46();
    return OUTLINED_FUNCTION_4_72();
  }

void HangUpCallFlow.init(sharedGlobals:)(uint64_t a1, uint64_t a2)
{
}

uint64_t HangUpCallFlow.__ivar_destroyer()
{
  return swift_release(*(void *)(v0 + direct field offset for HangUpCallFlow.app));
}

void HangUpCallFlow.deinit()
{
}

uint64_t HangUpCallFlow.__deallocating_deinit()
{
  uint64_t v1 = v0;
  swift_release(*(void *)(v0 + direct field offset for HangUpCallFlow.app));
  return swift_deallocClassInstance( v1,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
}

uint64_t sub_1B9E5C()
{
  return swift_deallocObject(v0, 192LL, 7LL);
}

uint64_t outlined init with copy of PhoneCallFlowState<INHangUpCallIntent, INHangUpCallIntentResponse>( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowState<INHangUpCallIntent, INHangUpCallIntentResponse>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PhoneCallFlowState<INHangUpCallIntent, INHangUpCallIntentResponse>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowState<INHangUpCallIntent, INHangUpCallIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t partial apply for implicit closure #6 in implicit closure #5 in HangUpCallFlow.execute()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216LL))();
}

uint64_t sub_1B9F98()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed INHangUpCallIntent?) -> ()( void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t type metadata accessor for HangUpCallFlow(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for HangUpCallFlow;
  if (!type metadata singleton initialization cache for HangUpCallFlow) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HangUpCallFlow);
  }
  return result;
}

uint64_t type metadata completion function for HangUpCallFlow(uint64_t a1)
{
  uint64_t v2 = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 256LL, 1LL, &v2, a1 + 256);
}

uint64_t OUTLINED_FUNCTION_4_72()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 136LL))(v1);
}

uint64_t OUTLINED_FUNCTION_7_72()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

BOOL OUTLINED_FUNCTION_12_59(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_14_46()
{
  return swift_storeEnumTagMultiPayload(v0, v1, 7LL);
}

uint64_t OUTLINED_FUNCTION_15_50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_stdlib_reportUnimplementedInitializer(a1, 42LL, a3, 20LL, 0LL);
}

uint64_t OUTLINED_FUNCTION_19_41()
{
  return swift_retain_n(v0, 2LL);
}

uint64_t OUTLINED_FUNCTION_20_42( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a14, v14);
}

void *OUTLINED_FUNCTION_23_40(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  void *(*v3)(uint64_t *__return_ptr);
  va_list va;
  va_start(va, a3);
  return v3((uint64_t *)va);
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology22UsoEntity_common_AgentC5agent_AF0fg1_H7_PersonC6persontG_27PhoneCallFlowDelegatePlugin0mN11NLv4ContactC7contact_0D9Inference0S5QueryV5queryts5NeverOTg504_s12d10Ontology22fg1_h1_i11CAA0cd1_E7_k3C27mnop11Plugin0hI11rs16C0A9Inference0N5v49VIgggor_AC5agent_AE6persontAH7contact_AK5queryts5X11OIegnrzr_TRAhkpTIgggor_Tf1cn_n( uint64_t a1, uint64_t (*a2)(char *, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (contact: PhoneCallNLv4Contact, query: ContactQuery));
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (void *)((char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v18[1] = v3;
    uint64_t v21 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v10 = v21;
    uint64_t v11 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v13 = *(v11 - 1);
      uint64_t v12 = *v11;
      uint64_t v14 = (char *)v8 + *(int *)(v5 + 48);
      swift_retain();
      swift_retain();
      uint64_t v15 = v19(v14, v13, v12);
      swift_release(v12);
      swift_release(v13);
      *uint64_t v8 = v15;
      uint64_t v21 = v10;
      unint64_t v16 = v10[2];
      if (v16 >= v10[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v10 = v21;
      }

      v10[2] = v16 + 1;
      outlined init with take of (contact: PhoneCallNLv4Contact, query: ContactQuery)( (uint64_t)v8,  (uint64_t)v10 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
      + *(void *)(v6 + 72) * v16);
      v11 += 2;
      --v9;
    }

    while (v9);
  }

  return v10;
}

uint64_t NLv4UpdateTransformer.transform(updateTask:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return NLv4UpdateTransformer.transform(updateTask:)( a1,  (void (*)(void *))&dispatch thunk of UsoEntity_common_Communication.participants.getter,  (void (*)(void *))&dispatch thunk of UsoEntity_common_Communication.recipients.getter,  a2);
}

{
  return NLv4UpdateTransformer.transform(updateTask:)( a1,  (void (*)(void *))&dispatch thunk of UsoEntity_common_PhoneCall.participants.getter,  (void (*)(void *))&dispatch thunk of UsoEntity_common_PhoneCall.recipients.getter,  a2);
}

void NLv4UpdateTransformer.transform(agents:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for ContactQuery(0LL);
  uint64_t v142 = *(void *)(v5 - 8);
  __chkstk_darwin();
  v133 = (char *)&v128 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v8 = (unint64_t)&v128 - v7;
  __chkstk_darwin();
  v138 = (char *)&v128 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (contact: PhoneCallNLv4Contact, query: ContactQuery));
  v136 = *(os_log_s **)(v10 - 8);
  __chkstk_darwin();
  uint64_t v12 = (uint64_t)&v128 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v137 = (uint64_t *)((char *)&v128 - v13);
  __chkstk_darwin();
  uint64_t v132 = (uint64_t)&v128 - v14;
  __chkstk_darwin();
  v135 = (void **)((char *)&v128 - v15);
  __chkstk_darwin();
  v140 = (uint8_t *)&v128 - v16;
  v130 = v2;
  uint64_t v18 = (uint64_t)NLv4UpdateTransformer.sortParticipants(agents:)(a1);
  uint64_t v131 = v17;
  uint64_t v19 = *(void *)((char *)&dword_10 + (v17 & 0xFFFFFFFFFFFFF8LL));
LABEL_3:
  if (v19)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.siriPhone);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v24 = static os_log_type_t.debug.getter(v22, v23);
    if (os_log_type_enabled(v22, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_0, v22, v24, "#NLv4UpdateTransformer Found participants to remove", v25, 2u);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    uint64_t v147 = 0LL;
    __int128 v145 = 0u;
    __int128 v146 = 0u;
    a2[3] = (uint64_t)&type metadata for PhoneCallNLv4Intent;
    a2[4] = (uint64_t)&protocol witness table for PhoneCallNLv4Intent;
    uint64_t v26 = swift_allocObject(&unk_409B10, 120LL, 7LL);
    uint64_t v27 = v26 + 16;
    *a2 = v26;
    v126 = _swiftEmptyArrayStorage;
    v127 = _swiftEmptyArrayStorage;
    BYTE6(v125) = 2;
    WORD2(v125) = 1552;
    LODWORD(v125) = 587401477;
    uint64_t v28 = _swiftEmptyArrayStorage;
    unint64_t v29 = _swiftEmptyArrayStorage;
LABEL_80:
    PhoneCallNLv4Intent.init(contactQueries:contacts:app:phoneCallAVMode:phoneCallAttributes:phoneCallAudioRoute:phoneCallCapability:phoneCallConfirmation:phoneCallDestinationType:phoneCallNoun:phoneCallPreferredProvider:phoneCallReference:phoneCallVerb:voiceMailVerb:voiceMailNoun:smsGroups:references:)( (uint64_t)v28,  (uint64_t)v29,  (uint64_t)&v145,  2,  0LL,  4,  2,  5,  v27,  v125,  (uint64_t)v126,  (uint64_t)v127);
    return;
  }

  v139 = (void *)v12;
  unint64_t v134 = v8;
  *(void *)&__int128 v145 = _swiftEmptyArrayStorage;
  if ((unint64_t)v18 >> 62)
  {
    if (v18 < 0) {
      uint64_t v124 = v18;
    }
    else {
      uint64_t v124 = v18 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v124);
  }

  else
  {
    uint64_t v12 = *(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain();
  }

  uint64_t v30 = v142;
  uint64_t v141 = v10;
  v129 = a2;
  if (!v12)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v18, 2LL);
    a2 = _swiftEmptyArrayStorage;
    v128 = _swiftEmptyArrayStorage;
LABEL_36:
    unint64_t v8 = (unint64_t)&v128;
    __chkstk_darwin();
    v127 = v130;
    uint64_t v18 = (uint64_t)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology22UsoEntity_common_AgentC5agent_AF0fg1_H7_PersonC6persontG_27PhoneCallFlowDelegatePlugin0mN11NLv4ContactC7contact_0D9Inference0S5QueryV5queryts5NeverOTg504_s12d10Ontology22fg1_h1_i11CAA0cd1_E7_k3C27mnop11Plugin0hI11rs16C0A9Inference0N5v49VIgggor_AC5agent_AE6persontAH7contact_AK5queryts5X11OIegnrzr_TRAhkpTIgggor_Tf1cn_n( (uint64_t)a2,  (uint64_t (*)(char *, uint64_t, uint64_t))partial apply for closure #3 in NLv4UpdateTransformer.transform(agents:),  (uint64_t)&v125);
    swift_bridgeObjectRelease();
    *(void *)&__int128 v145 = _swiftEmptyArrayStorage;
    uint64_t v10 = *(void *)(v18 + 16);
    if (!v10)
    {
      uint64_t v62 = _swiftEmptyArrayStorage;
LABEL_55:
      swift_bridgeObjectRelease();
      v63 = (os_log_s *)v62[2];
      if (v63)
      {
        *(void *)&__int128 v145 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v63);
        uint64_t v64 = v136;
        uint64_t v65 = *((unsigned __int8 *)v136 + 80);
        v135 = v62;
        v136 = v63;
        uint64_t v66 = (uint64_t)v62 + ((v65 + 32) & ~v65);
        uint64_t v67 = *((void *)v64 + 9);
        uint64_t v68 = v66;
        unint64_t v69 = v63;
        v140 = (uint8_t *)v5;
        unint64_t v70 = v137;
        uint64_t v71 = (uint64_t)v140;
        do
        {
          outlined init with copy of (contact: PhoneCallNLv4Contact, query: ContactQuery)(v68, (uint64_t)v70);
          uint64_t v72 = v142;
          uint64_t v73 = *(int *)(v141 + 48);
          uint64_t v74 = (char *)v139;
          uint64_t v75 = (char *)v139 + v73;
          uint64_t v76 = *v70;
          char *v139 = *v70;
          unint64_t v77 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
          v77(&v74[v73], (char *)v70 + v73, v71);
          swift_retain();
          (*(void (**)(char *, uint64_t))(v72 + 8))(v75, v71);
          uint64_t v78 = outlined destroy of SpeakableString?( (uint64_t)v70,  &demangling cache variable for type metadata for (contact: PhoneCallNLv4Contact, query: ContactQuery));
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v78);
          uint64_t v79 = v67;
          uint64_t v80 = *(void *)(v145 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v80);
          uint64_t v81 = v80;
          uint64_t v67 = v79;
          uint64_t v82 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v76);
          specialized ContiguousArray._endMutation()(v82);
          v68 += v79;
          unint64_t v69 = (os_log_s *)((char *)v69 - 1);
        }

        while (v69);
        id v83 = (void (*)(char *, uint64_t, uint64_t))v77;
        v138 = (char *)v145;
        *(void *)&__int128 v145 = _swiftEmptyArrayStorage;
        v84 = v136;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v85 = v142;
        unint64_t v86 = v134;
        uint64_t v5 = (uint64_t)v140;
        do
        {
          uint64_t v87 = (uint64_t)v137;
          outlined init with copy of (contact: PhoneCallNLv4Contact, query: ContactQuery)(v66, (uint64_t)v137);
          uint64_t v88 = *(int *)(v141 + 48);
          id v89 = (char *)v139 + v88;
          v83((char *)v139 + v88, v87 + v88, v5);
          os_log_type_t v90 = *(void (**)(unint64_t, char *, uint64_t))(v85 + 32);
          v90(v86, v89, v5);
          outlined destroy of SpeakableString?( v87,  &demangling cache variable for type metadata for (contact: PhoneCallNLv4Contact, query: ContactQuery));
          v91 = (void *)v145;
          if ((swift_isUniquelyReferenced_nonNull_native(v145) & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v85 = v142;
            v91 = (void *)v145;
          }

          unint64_t v92 = v91[2];
          if (v92 >= v91[3] >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v85 = v142;
            v91 = (void *)v145;
          }

          v91[2] = v92 + 1;
          unint64_t v93 = (unint64_t)v91
          unint64_t v86 = v134;
          v90(v93, (char *)v134, v5);
          *(void *)&__int128 v145 = v91;
          v66 += v79;
          v84 = (os_log_s *)((char *)v84 - 1);
        }

        while (v84);
        swift_release(v135);
        uint64_t v94 = v138;
      }

      else
      {
        swift_release(v62);
        v91 = _swiftEmptyArrayStorage;
        uint64_t v94 = (char *)_swiftEmptyArrayStorage;
      }

      uint64_t v95 = v129;
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v96 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v96, (uint64_t)static Logger.siriPhone);
      uint64_t v97 = swift_bridgeObjectRetain_n(v91, 2LL);
      os_log_t v98 = (os_log_s *)Logger.logObject.getter(v97);
      int v100 = static os_log_type_t.debug.getter(v98, v99);
      if (os_log_type_enabled(v98, (os_log_type_t)v100))
      {
        LODWORD(v139) = v100;
        uint64_t v101 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        v137 = (uint64_t *)swift_slowAlloc(32LL, -1LL);
        *(void *)&__int128 v145 = v137;
        v140 = v101;
        *(_DWORD *)uint64_t v101 = 136315138;
        uint64_t v102 = v91[2];
        v103 = _swiftEmptyArrayStorage;
        if (v102)
        {
          v136 = v98;
          v138 = v94;
          v143 = _swiftEmptyArrayStorage;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          BOOL v104 = (char *)v91
               + ((*(unsigned __int8 *)(v142 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80));
          uint64_t v141 = *(void *)(v142 + 72);
          uint64_t v105 = *(uint64_t (**)(char *, char *, uint64_t))(v142 + 16);
          do
          {
            uint64_t v106 = v133;
            uint64_t v107 = v105(v133, v104, v5);
            uint64_t v108 = ContactQuery.description.getter(v107);
            uint64_t v110 = v109;
            (*(void (**)(char *, uint64_t))(v142 + 8))(v106, v5);
            v103 = v143;
            if ((swift_isUniquelyReferenced_nonNull_native(v143) & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              v103 = v143;
            }

            unint64_t v111 = v103[2];
            if (v111 >= v103[3] >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              v103 = v143;
            }

            v103[2] = v111 + 1;
            uint64_t v112 = &v103[2 * v111];
            v112[4] = v108;
            v112[5] = v110;
            v104 += v141;
            --v102;
          }

          while (v102);
          uint64_t v95 = v129;
          os_log_t v98 = v136;
        }

        uint64_t v113 = v140;
        uint64_t v114 = Array.description.getter(v103, &type metadata for String);
        unint64_t v116 = v115;
        swift_bridgeObjectRelease();
        v143 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v116, (uint64_t *)&v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v113 + 4);
        swift_bridgeObjectRelease_n(v91, 2LL);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v98, (os_log_type_t)v139, "#NLv4UpdateTransformer contactQueries: %s", v113, 0xCu);
        uint64_t v117 = (uint64_t)v137;
        swift_arrayDestroy(v137, 1LL);
        swift_slowDealloc(v117, -1LL, -1LL);
        swift_slowDealloc(v113, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v91, 2LL);
      }

      specialized _arrayForceCast<A, B>(_:)();
      v119 = v118;
      swift_bridgeObjectRelease();
      uint64_t v147 = 0LL;
      __int128 v145 = 0u;
      __int128 v146 = 0u;
      specialized _arrayForceCast<A, B>(_:)();
      v121 = v120;
      swift_bridgeObjectRelease();
      v95[3] = (uint64_t)&type metadata for PhoneCallNLv4Intent;
      v95[4] = (uint64_t)&protocol witness table for PhoneCallNLv4Intent;
      uint64_t v122 = swift_allocObject(&unk_409B10, 120LL, 7LL);
      uint64_t v27 = v122 + 16;
      *uint64_t v95 = v122;
      v126 = v121;
      v127 = _swiftEmptyArrayStorage;
      BYTE6(v125) = 2;
      WORD2(v125) = 1551;
      LODWORD(v125) = 587401477;
      uint64_t v28 = v91;
      unint64_t v29 = v119;
      goto LABEL_80;
    }

    unint64_t v51 = 0LL;
    while (1)
    {
      if (v51 >= *(void *)(v18 + 16))
      {
        __break(1u);
LABEL_82:
        if (v17 < 0) {
          uint64_t v123 = v17;
        }
        else {
          uint64_t v123 = v17 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain();
        uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v123);
        swift_bridgeObjectRelease();
        goto LABEL_3;
      }

      unint64_t v52 = (*((unsigned __int8 *)v136 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v136 + 80);
      uint64_t v12 = *((void *)v136 + 9);
      uint64_t v53 = v140;
      outlined init with copy of (contact: PhoneCallNLv4Contact, query: ContactQuery)( v18 + v52 + v12 * v51,  (uint64_t)v140);
      uint64_t v54 = *(int *)(v141 + 48);
      uint64_t v55 = v30;
      uint64_t v56 = (char *)v135 + v54;
      uint64_t v57 = &v53[v54];
      void *v135 = *(void *)v53;
      uint64_t v58 = *(void (**)(char *, uint8_t *, uint64_t))(v55 + 16);
      v58(v56, v57, v5);
      if (one-time initialization token for emptyQuery != -1) {
        swift_once(&one-time initialization token for emptyQuery, one-time initialization function for emptyQuery);
      }
      __swift_project_value_buffer(v5, (uint64_t)static ContactQuery.emptyQuery);
      char v59 = static ContactQuery.== infix(_:_:)(v56);
      a2 = (uint64_t *)v138;
      v58(v138, (uint8_t *)v56, v5);
      if ((v59 & 1) != 0)
      {
        unint64_t v8 = *(void *)(v142 + 8);
        ((void (*)(uint64_t *, uint64_t))v8)(a2, v5);
        ((void (*)(char *, uint64_t))v8)(v56, v5);
      }

      else
      {
        if (one-time initialization token for emptyNLv4Query != -1) {
          swift_once( &one-time initialization token for emptyNLv4Query,  one-time initialization function for emptyNLv4Query);
        }
        __swift_project_value_buffer(v5, (uint64_t)static ContactQuery.emptyNLv4Query);
        a2 = (uint64_t *)v138;
        char v60 = static ContactQuery.== infix(_:_:)(v138);
        unint64_t v8 = *(void *)(v142 + 8);
        ((void (*)(uint64_t *, uint64_t))v8)(a2, v5);
        ((void (*)(char *, uint64_t))v8)(v56, v5);
        if ((v60 & 1) == 0)
        {
          outlined init with take of (contact: PhoneCallNLv4Contact, query: ContactQuery)((uint64_t)v140, v132);
          uint64_t v61 = v145;
          if ((swift_isUniquelyReferenced_nonNull_native(v145) & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v61 = v145;
          }

          unint64_t v8 = *(void *)(v61 + 16);
          if (v8 >= *(void *)(v61 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v61 = v145;
          }

          *(void *)(v61 + 16) = v8 + 1;
          outlined init with take of (contact: PhoneCallNLv4Contact, query: ContactQuery)(v132, v61 + v52 + v8 * v12);
          goto LABEL_52;
        }
      }

      outlined destroy of SpeakableString?( (uint64_t)v140,  &demangling cache variable for type metadata for (contact: PhoneCallNLv4Contact, query: ContactQuery));
LABEL_52:
      ++v51;
      uint64_t v30 = v142;
      if (v10 == v51)
      {
        uint64_t v62 = (void *)v145;
        goto LABEL_55;
      }
    }
  }

  if (v12 >= 1)
  {
    uint64_t v31 = 0LL;
    unint64_t v32 = v18 & 0xC000000000000001LL;
    do
    {
      if (v32)
      {
        uint64_t v33 = specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v18);
      }

      else
      {
        uint64_t v33 = *(void *)(v18 + 8 * v31 + 32);
        swift_retain();
      }

      uint64_t v34 = UsoEntity_common_Agent.asCommonGroup()();
      uint64_t v35 = swift_release(v33);
      if (v34)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
        unint64_t v37 = *(void *)((char *)&dword_10 + (v145 & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v36 = *(void *)((char *)&dword_18 + (v145 & 0xFFFFFFFFFFFFFF8LL));
        if (v37 >= v36 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1LL);
        }
        uint64_t v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v34);
        specialized Array._endMutation()(v38, v39, v40, v41);
      }

      ++v31;
    }

    while (v12 != v31);
    swift_bridgeObjectRelease();
    v128 = (void *)v145;
    swift_bridgeObjectRetain();
    uint64_t v42 = 0LL;
    a2 = _swiftEmptyArrayStorage;
    do
    {
      if (v32)
      {
        uint64_t v43 = specialized _ArrayBuffer._getElementSlowPath(_:)(v42, v18);
      }

      else
      {
        uint64_t v43 = *(void *)(v18 + 8 * v42 + 32);
        swift_retain();
      }

      uint64_t v44 = UsoEntity_common_Agent.asCommonPerson()();
      if (v44)
      {
        uint64_t v45 = v44;
        if ((swift_isUniquelyReferenced_nonNull_native(a2) & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  a2[2] + 1,  1LL,  (uint64_t)a2);
          a2 = v49;
        }

        unint64_t v47 = a2[2];
        unint64_t v46 = a2[3];
        if (v47 >= v46 >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v46 > 1,  v47 + 1,  1LL,  (uint64_t)a2);
          a2 = v50;
        }

        a2[2] = v47 + 1;
        id v48 = &a2[2 * v47];
        v48[4] = v43;
        v48[5] = v45;
      }

      else
      {
        swift_release(v43);
      }

      ++v42;
    }

    while (v12 != v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v18, 2LL);
    uint64_t v30 = v142;
    goto LABEL_36;
  }

  __break(1u);
}

uint64_t NLv4UpdateTransformer.transform(updateTask:)@<X0>( uint64_t a1@<X0>, void (*a2)(void *)@<X1>, void (*a3)(void *)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter(&v10, a1);
  if (!v10 || (a2(v7), uint64_t v7 = (void *)OUTLINED_FUNCTION_18_31(), !a2))
  {
    unint64_t v8 = dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter(&v10, v7);
    if (v10 && (a3(v8), OUTLINED_FUNCTION_18_31(), a2))
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease_n(0LL, 2LL);
      a2 = (void (*)(void *))_swiftEmptyArrayStorage;
    }
  }

  NLv4UpdateTransformer.transform(agents:)((uint64_t)a2, a4);
  return swift_bridgeObjectRelease();
}

void *NLv4UpdateTransformer.sortParticipants(agents:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ListOperators(0LL);
  uint64_t v59 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v54 = &v52[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v3);
  uint64_t v6 = &v52[-v5];
  uint64_t v61 = _swiftEmptyArrayStorage;
  uint64_t v62 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v51 = a1;
    }
    else {
      uint64_t v51 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter(v51);
    uint64_t v7 = (uint64_t)result;
    if (result) {
      goto LABEL_3;
    }
LABEL_47:
    swift_bridgeObjectRelease(a1);
    return _swiftEmptyArrayStorage;
  }

  uint64_t v7 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  uint64_t result = (void *)swift_bridgeObjectRetain(a1);
  if (!v7) {
    goto LABEL_47;
  }
LABEL_3:
  if (v7 >= 1)
  {
    uint64_t v9 = 0LL;
    unint64_t v58 = a1 & 0xC000000000000001LL;
    unsigned int v57 = enum case for ListOperators.addToSet(_:);
    unsigned int v53 = enum case for ListOperators.removeFromSet(_:);
    uint64_t v55 = v7;
    uint64_t v56 = a1;
    while (1)
    {
      if (v58)
      {
        uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, a1);
      }

      else
      {
        uint64_t v10 = *(void *)(a1 + 8 * v9 + 32);
        swift_retain(v10);
      }

      uint64_t v11 = ((uint64_t (*)(void))dispatch thunk of CodeGenListEntry.entryAsExpression.getter)();
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = dispatch thunk of CodeGenExpression.operatorAsString.getter();
        uint64_t v15 = v14;
        swift_release(v12);
      }

      else
      {
        uint64_t v13 = 0LL;
        uint64_t v15 = 0LL;
      }

      uint64_t v16 = v59;
      uint64_t v17 = *(uint64_t (**)(_BYTE *, void, uint64_t))(v59 + 104);
      uint64_t v18 = v17(v6, v57, v2);
      uint64_t v19 = ListOperators.rawValue.getter(v18);
      uint64_t v21 = v20;
      uint64_t v22 = *(void (**)(_BYTE *, uint64_t))(v16 + 8);
      v22(v6, v2);
      if (v15)
      {
        if (v19 == v13 && v15 == v21)
        {
          swift_bridgeObjectRelease(v15);
          uint64_t v25 = v21;
LABEL_27:
          uint64_t v34 = swift_bridgeObjectRelease(v25);
          uint64_t v35 = dispatch thunk of CodeGenListEntry.entryAsExpression.getter(v34);
          if (!v35) {
            goto LABEL_40;
          }
          uint64_t v36 = v35;
          dispatch thunk of CodeGenExpression.operand.getter(&v60);
          swift_release(v36);
LABEL_31:
          uint64_t v37 = v60;
          if (v60)
          {
            uint64_t v38 = swift_retain(v60);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v38);
            unint64_t v39 = (unint64_t)v62;
LABEL_37:
            uint64_t v43 = v39 & 0xFFFFFFFFFFFFFF8LL;
            unint64_t v45 = *(void *)(v43 + 16);
            unint64_t v44 = *(void *)(v43 + 24);
            if (v45 >= v44 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1LL);
            }
            uint64_t v46 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v37);
            specialized Array._endMutation()(v46, v47, v48, v49);
            swift_release(v10);
            uint64_t v50 = v37;
            goto LABEL_41;
          }

          goto LABEL_40;
        }

        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v13, v15, 0LL);
        swift_bridgeObjectRelease(v21);
        if ((v24 & 1) != 0)
        {
          uint64_t v25 = v15;
          goto LABEL_27;
        }
      }

      else
      {
        swift_bridgeObjectRelease(v21);
      }

      uint64_t v26 = v54;
      uint64_t v27 = v17(v54, v53, v2);
      uint64_t v28 = ListOperators.rawValue.getter(v27);
      uint64_t v30 = v29;
      v22(v26, v2);
      if (!v15)
      {
        uint64_t v33 = swift_bridgeObjectRelease(v30);
LABEL_30:
        dispatch thunk of CodeGenListEntry.entry.getter(&v60, v33);
        goto LABEL_31;
      }

      if (v28 == v13 && v15 == v30)
      {
        swift_bridgeObjectRelease(v30);
        uint64_t v33 = swift_bridgeObjectRelease(v15);
      }

      else
      {
        char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v13, v15, 0LL);
        swift_bridgeObjectRelease(v30);
        uint64_t v33 = swift_bridgeObjectRelease(v15);
        if ((v32 & 1) == 0) {
          goto LABEL_30;
        }
      }

      uint64_t v40 = dispatch thunk of CodeGenListEntry.entryAsExpression.getter(v33);
      if (v40)
      {
        uint64_t v41 = v40;
        dispatch thunk of CodeGenExpression.operand.getter(&v60);
        swift_release(v41);
        uint64_t v37 = v60;
        if (v60)
        {
          uint64_t v42 = swift_retain(v60);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v42);
          unint64_t v39 = (unint64_t)v61;
          goto LABEL_37;
        }
      }

void *closure #3 in NLv4UpdateTransformer.transform(agents:)(char *a1, uint64_t a2, uint64_t a3, void *a4)
{
  return NLv4UpdateTransformer.mapEntityToContactAndQuery(referenceResolver:agent:person:)(a1, a4);
}

void *NLv4UpdateTransformer.mapEntityToContactAndQuery(referenceResolver:agent:person:)( char *a1, void *a2)
{
  uint64_t v5 = (uint64_t *)((char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (contact: PhoneCallNLv4Contact, query: ContactQuery));
  __chkstk_darwin();
  uint64_t v33 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  char v32 = (uint64_t *)((char *)&v31 - v8);
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v11 = __swift_project_boxed_opaque_existential_1(a2, v9);
  uint64_t v12 = CodeGenBase.entity.getter(v11);
  LOBYTE(a2) = dispatch thunk of RRReferenceResolverProtocol.hasReference(usoEntity:)(v12, v9, v10);
  swift_release(v12);
  uint64_t v13 = a1;
  NLv4UpdateTransformer.runSRR(agent:person:)((uint64_t)v5);
  if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1LL, v6) == 1)
  {
    outlined destroy of SpeakableString?( (uint64_t)v5,  &demangling cache variable for type metadata for (contact: PhoneCallNLv4Contact, query: ContactQuery)?);
LABEL_4:
    uint64_t v14 = type metadata accessor for PhoneCallNLv4Contact();
    uint64_t v15 = (void *)swift_allocObject(v14, 346LL, 7LL);
    uint64_t v16 = swift_retain();
    uint64_t v17 = specialized PhoneCallNLv4Contact.init(contactConvertible:contactRole:)(v16, 1, v15);
    UsoEntity_common_Person.toContactQuery()(v17);
    return v17;
  }

  uint64_t v18 = *(int *)(v6 + 48);
  uint64_t v19 = v32;
  uint64_t v20 = (char *)v32 + v18;
  uint64_t v21 = (char *)v5 + v18;
  *char v32 = *v5;
  uint64_t v22 = type metadata accessor for ContactQuery(0LL);
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32LL);
  v23(v20, v21, v22);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v24 = type metadata accessor for Logger(0LL);
  uint64_t v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.siriPhone);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl(&dword_0, v26, v27, "#NLv4UpdateTransformer Found reference to entity in context", v28, 2u);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  uint64_t v29 = &v33[*(int *)(v6 + 48)];
  uint64_t v17 = (void *)*v19;
  v23(v29, v20, v22);
  v23(v13, v29, v22);
  return v17;
}

uint64_t NLv4UpdateTransformer.runSRR(agent:person:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v23 = a1;
  uint64_t v22 = type metadata accessor for PhoneRRTarget.Target(0LL);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for MatchedResultsSetting(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneRRTarget?);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for PhoneRRTarget(0LL);
  uint64_t v11 = __chkstk_darwin();
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = CodeGenBase.entity.getter(v11);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for MatchedResultsSetting.defaultMatching(_:),  v4);
  static PhoneReferenceResolution.resolveEntity(_:referenceResolver:matchedResultsSetting:)( v14,  v1,  (uint64_t)v7,  (uint64_t)v9);
  swift_release(v14);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1LL, v10) != 1)
  {
    outlined init with take of PhoneRRTarget((uint64_t)v9, (uint64_t)v13);
    uint64_t v16 = type metadata accessor for PhoneCallNLv4Contact();
    uint64_t v17 = (void *)swift_allocObject(v16, 346LL, 7LL);
    uint64_t v18 = swift_retain();
    uint64_t v24 = specialized PhoneCallNLv4Contact.init(contactConvertible:contactRole:)(v18, 1, v17);
    outlined init with copy of PhoneRRTarget.Target((uint64_t)v13, (uint64_t)v3);
    uint64_t v19 = (char *)&loc_1BB954 + 4 * byte_331370[swift_getEnumCaseMultiPayload(v3, v22)];
    __asm { BR              X10 }
  }

  outlined destroy of SpeakableString?((uint64_t)v9, &demangling cache variable for type metadata for PhoneRRTarget?);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (contact: PhoneCallNLv4Contact, query: ContactQuery));
  return __swift_storeEnumTagSinglePayload(v23, 1LL, 1LL, v15);
}

ValueMetadata *type metadata accessor for NLv4UpdateTransformer()
{
  return &type metadata for NLv4UpdateTransformer;
}

uint64_t sub_1BBE10()
{
  if (*(void *)(v0 + 56)) {
    __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 32));
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 120LL, 7LL);
}

void *partial apply for closure #3 in NLv4UpdateTransformer.transform(agents:)( char *a1, uint64_t a2, uint64_t a3)
{
  return closure #3 in NLv4UpdateTransformer.transform(agents:)(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t outlined init with copy of (contact: PhoneCallNLv4Contact, query: ContactQuery)( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (contact: PhoneCallNLv4Contact, query: ContactQuery));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of (contact: PhoneCallNLv4Contact, query: ContactQuery)( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (contact: PhoneCallNLv4Contact, query: ContactQuery));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of PhoneRRTarget.Target(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PhoneRRTarget.Target(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PhoneRRTarget(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PhoneRRTarget(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t CommunalDeviceEmergencyFlow.__allocating_init(parse:sharedGlobals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = OUTLINED_FUNCTION_4_3();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  outlined init with copy of SignalProviding(a2, (uint64_t)v13);
  uint64_t v9 = type metadata accessor for UnsupportedFlowCATsSimple(0LL);
  static CATOption.defaultMode.getter(v9);
  uint64_t v10 = CATWrapperSimple.__allocating_init(options:globals:)(v2, 0LL);
  (*(void (**)(uint64_t, _BYTE *, _BYTE *, uint64_t))(v2 + 168))(3LL, v8, v13, v10);
  OUTLINED_FUNCTION_33_40();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return v2;
}

void CommunalDeviceEmergencyFlow.identifiedUser.getter()
{
}

void CommunalDeviceEmergencyFlow.multiUserState.getter()
{
}

void CommunalDeviceEmergencyFlow.identifiedUser.getter(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath = swift_getKeyPath(a2);
  swift_getKeyPath(a3);
  OUTLINED_FUNCTION_20_43();
  OUTLINED_FUNCTION_31_31((uint64_t)v7, KeyPath);
  swift_release(v3);
  OUTLINED_FUNCTION_16_3();
  swift_release(a3);
  OUTLINED_FUNCTION_12_3();
}

uint64_t CommunalDeviceEmergencyFlow.parse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_parse;
  uint64_t v4 = OUTLINED_FUNCTION_4_3();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t CommunalDeviceEmergencyFlow.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding( v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_sharedGlobals,  a1);
}

uint64_t CommunalDeviceEmergencyFlow.unsupportedFlowCATsSimple.getter()
{
  return swift_retain(*(void *)(v0
                                + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_unsupportedFlowCATsSimple));
}

void CommunalDeviceEmergencyFlow.state.didset()
{
  uint64_t v1 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  uint64_t v3 = swift_retain_n(v0, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v6 = static os_log_type_t.debug.getter(v4, v5);
  if (os_log_type_enabled(v4, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v14 = v8;
    uint64_t v9 = (char *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_state);
    swift_beginAccess( v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_state,  v13,  0LL,  0LL);
    uint64_t v10 = CommunalDeviceEmergencyFlow.State.description.getter(*v9);
    uint64_t v12 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, v13, v7 + 4);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v4, v6, "#CommunalDeviceEmergencyFlow state => %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v0, 2LL);
  }

uint64_t CommunalDeviceEmergencyFlow.state.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_state);
  swift_beginAccess(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_state, v3, 0LL, 0LL);
  return *v1;
}

void CommunalDeviceEmergencyFlow.state.setter(char a1)
{
  uint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_state);
  swift_beginAccess(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_state, v4, 1LL, 0LL);
  *uint64_t v3 = a1;
  CommunalDeviceEmergencyFlow.state.didset();
}

void CommunalDeviceEmergencyFlow.__allocating_init(state:parse:sharedGlobals:unsupportedFlowCATsSimple:)( char a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
}

void CommunalDeviceEmergencyFlow.init(state:parse:sharedGlobals:unsupportedFlowCATsSimple:)( char a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  swift_getKeyPath(&off_3313B0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriEnvironmentValue<IdentifiedUser>);
  OUTLINED_FUNCTION_15_2(v10);
  *(void *)(v4 + 16) = OUTLINED_FUNCTION_16_43();
  swift_getKeyPath(&off_3313F8);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriEnvironmentValue<MultiUserState>);
  OUTLINED_FUNCTION_15_2(v11);
  *(void *)(v4 + 24) = OUTLINED_FUNCTION_16_43();
  *(_BYTE *)(v4 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_state) = a1;
  uint64_t v12 = v4 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_parse;
  uint64_t v13 = OUTLINED_FUNCTION_4_3();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v12, a2, v13);
  outlined init with take of AppSelectionSignalComponent( a3,  v5 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_sharedGlobals);
  *(void *)(v5 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_unsupportedFlowCATsSimple) = a4;
  OUTLINED_FUNCTION_16();
}

BOOL CommunalDeviceEmergencyFlow.on(input:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v1 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v1, (uint64_t)static Logger.siriPhone);
  os_log_type_t v2 = OUTLINED_FUNCTION_6_0();
  if (os_log_type_enabled(v0, v2))
  {
    uint64_t v3 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v4 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v7 = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v6 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x7475706E69286E6FLL, 0xEA0000000000293ALL, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v3 + 4);
    OUTLINED_FUNCTION_57_0(&dword_0, v0, v2, "#CommunalDeviceEmergencyFlow %s", v3);
    OUTLINED_FUNCTION_17_0(v4);
    OUTLINED_FUNCTION_0_2(v4);
    OUTLINED_FUNCTION_0_2((uint64_t)v3);
  }

  return (*(unsigned __int8 (**)(void))(*(void *)v0 + 144LL))() == 3;
}

uint64_t CommunalDeviceEmergencyFlow.execute()(uint64_t a1)
{
  v2[33] = a1;
  v2[34] = v1;
  uint64_t v3 = type metadata accessor for CompanionDeviceInfoRequirement(0LL);
  v2[35] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[36] = v4;
  v2[37] = OUTLINED_FUNCTION_23(v4);
  uint64_t v5 = type metadata accessor for ExecuteOnRemoteDeviceSpecification(0LL);
  v2[38] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[39] = v6;
  v2[40] = OUTLINED_FUNCTION_23(v6);
  uint64_t v7 = OUTLINED_FUNCTION_4_3();
  v2[41] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[42] = v8;
  v2[43] = OUTLINED_FUNCTION_23(v8);
  uint64_t v9 = type metadata accessor for Input(0LL);
  v2[44] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[45] = v10;
  v2[46] = OUTLINED_FUNCTION_23(v10);
  uint64_t v11 = type metadata accessor for IdentifiedUser(0LL);
  v2[47] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[48] = v12;
  v2[49] = OUTLINED_FUNCTION_23(v12);
  uint64_t v13 = type metadata accessor for MultiUserState(0LL);
  v2[50] = v13;
  v2[51] = OUTLINED_FUNCTION_23(*(void *)(v13 - 8));
  return OUTLINED_FUNCTION_5_7();
}

uint64_t CommunalDeviceEmergencyFlow.execute()()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = OUTLINED_FUNCTION_15_1();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  OUTLINED_FUNCTION_11_18(v1);
  uint64_t v3 = (os_log_s *)OUTLINED_FUNCTION_27_40();
  os_log_type_t v5 = static os_log_type_t.debug.getter(v3, v4);
  BOOL v6 = os_log_type_enabled(v3, v5);
  uint64_t v7 = *(void *)(v0 + 272);
  if (v6)
  {
    uint64_t v8 = OUTLINED_FUNCTION_7_0(22LL);
    uint64_t v9 = OUTLINED_FUNCTION_7_0(64LL);
    uint64_t v90 = v9;
    *(_DWORD *)uint64_t v8 = 136315394;
    *(void *)(v0 + 248) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0x2865747563657865LL,  0xE900000000000029LL,  &v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v8 + 4);
    *(_WORD *)(v8 + 12) = 2080;
    char v10 = OUTLINED_FUNCTION_13_58();
    uint64_t v11 = CommunalDeviceEmergencyFlow.State.description.getter(v10);
    *(void *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v8 + 14);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_31_1(v7);
    _os_log_impl(&dword_0, v3, v5, "#CommunalDeviceEmergencyFlow %s, state = %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2LL);
    OUTLINED_FUNCTION_0_2(v9);
    OUTLINED_FUNCTION_0_2(v8);
  }

  else
  {
    OUTLINED_FUNCTION_31_1(v7);
  }

  uint64_t v13 = OUTLINED_FUNCTION_13_58();
  if (v13 == 4)
  {
    uint64_t v24 = *(void *)(v0 + 272);
    uint64_t v25 = *(void *)(v24 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_sharedGlobals + 24);
    uint64_t v26 = *(void *)(v24 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_sharedGlobals + 32);
    __swift_project_boxed_opaque_existential_1( (void *)(v24 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_sharedGlobals),  v25);
    (*(void (**)(uint64_t, uint64_t))(v26 + 16))(v25, v26);
    uint64_t v27 = *(void *)(v0 + 40);
    uint64_t v28 = *(void *)(v0 + 56);
    uint64_t v29 = __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v27);
    *(void *)(v0 + 88) = v27;
    *(void *)(v0 + 96) = v28;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 64));
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v27 - 8) + 16LL))( boxed_opaque_existential_1,  v29,  v27);
    uint64_t v31 = type metadata accessor for SimpleOutputFlowAsync(0LL);
    uint64_t v32 = OUTLINED_FUNCTION_15_2(v31);
    swift_retain();
    SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v0 + 64,  &async function pointer to partial apply for closure #1 in CommunalDeviceEmergencyFlow.execute(),  v24);
    OUTLINED_FUNCTION_33_40();
    *(void *)(v0 + 192) = v32;
    static ExecuteResponse.complete<A>(next:)(v0 + 192);
LABEL_17:
    swift_release(v32);
    goto LABEL_18;
  }

  if (v13 == 3)
  {
    uint64_t v87 = (void *)(v0 + 104);
    uint64_t v88 = (void *)(v0 + 144);
    OUTLINED_FUNCTION_11_18(*(void *)(v0 + 272));
    uint64_t v14 = (os_log_s *)OUTLINED_FUNCTION_27_40();
    os_log_type_t v16 = static os_log_type_t.debug.getter(v14, v15);
    if (os_log_type_enabled(v14, v16))
    {
      uint64_t v17 = *(void *)(v0 + 408);
      uint64_t v78 = *(void *)(v0 + 400);
      uint64_t v18 = *(void *)(v0 + 272);
      uint64_t v19 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v83 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v90 = v83;
      *(_DWORD *)uint64_t v19 = 136315138;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriEnvironmentValue<MultiUserState>);
      uint64_t KeyPath = swift_getKeyPath(&unk_331488);
      uint64_t v21 = swift_getKeyPath(&unk_3314B0);
      *(void *)(v0 + 232) = v18;
      swift_retain();
      static SiriEnvironmentValue.subscript.getter(v0 + 232, KeyPath, v21);
      OUTLINED_FUNCTION_76();
      swift_release(KeyPath);
      OUTLINED_FUNCTION_16_3();
      uint64_t v22 = String.init<A>(describing:)(v17, v78);
      *(void *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v19 + 4);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_31_1(v18);
      OUTLINED_FUNCTION_57_0(&dword_0, v14, v16, "#CommunalDeviceEmergencyFlow MUXState = %s", v19);
      OUTLINED_FUNCTION_17_0(v83);
      OUTLINED_FUNCTION_0_2(v83);
      OUTLINED_FUNCTION_0_2((uint64_t)v19);
    }

    else
    {
      OUTLINED_FUNCTION_31_1(*(void *)(v0 + 272));
    }

    OUTLINED_FUNCTION_11_18(*(void *)(v0 + 272));
    uint64_t v33 = (os_log_s *)OUTLINED_FUNCTION_27_40();
    os_log_type_t v35 = static os_log_type_t.debug.getter(v33, v34);
    if (os_log_type_enabled(v33, v35))
    {
      uint64_t v36 = *(void *)(v0 + 392);
      uint64_t v84 = *(void *)(v0 + 384);
      uint64_t v80 = *(void *)(v0 + 376);
      uint64_t v37 = *(void *)(v0 + 272);
      uint64_t v38 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v89 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v90 = v89;
      *(_DWORD *)uint64_t v38 = 136315138;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriEnvironmentValue<IdentifiedUser>);
      uint64_t v39 = swift_getKeyPath(&unk_331440);
      uint64_t v40 = swift_getKeyPath(&unk_331468);
      *(void *)(v0 + 216) = v37;
      swift_retain();
      static SiriEnvironmentValue.subscript.getter(v0 + 216, v39, v40);
      swift_release(v40);
      OUTLINED_FUNCTION_76();
      swift_release(v37);
      lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type IdentifiedUser and conformance IdentifiedUser,  (uint64_t (*)(uint64_t))&type metadata accessor for IdentifiedUser);
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter(v80, v41);
      unint64_t v44 = v43;
      (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v36, v80);
      *(void *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v38 + 4);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_31_1(v37);
      OUTLINED_FUNCTION_57_0(&dword_0, v33, v35, "#CommunalDeviceEmergencyFlow User = %s", v38);
      OUTLINED_FUNCTION_17_0(v89);
      OUTLINED_FUNCTION_0_2(v89);
      OUTLINED_FUNCTION_0_2((uint64_t)v38);
    }

    else
    {
      OUTLINED_FUNCTION_31_1(*(void *)(v0 + 272));
    }

    uint64_t v45 = *(void *)(v0 + 368);
    uint64_t v46 = *(void *)(v0 + 344);
    uint64_t v79 = *(void *)(v0 + 360);
    uint64_t v81 = *(void *)(v0 + 352);
    uint64_t v47 = *(void *)(v0 + 320);
    uint64_t v74 = *(void *)(v0 + 336);
    uint64_t v75 = *(void *)(v0 + 328);
    uint64_t v76 = *(void *)(v0 + 312);
    uint64_t v77 = *(void *)(v0 + 304);
    uint64_t v82 = *(void *)(v0 + 288);
    uint64_t v48 = *(void *)(v0 + 272);
    uint64_t v85 = *(void *)(v0 + 280);
    uint64_t v86 = *(void *)(v0 + 296);
    uint64_t v49 = (void *)(v48 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_sharedGlobals);
    uint64_t v51 = *(void *)(v48 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_sharedGlobals + 24);
    uint64_t v50 = *(void *)(v48 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_sharedGlobals + 32);
    __swift_project_boxed_opaque_existential_1( (void *)(v48 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_sharedGlobals),  v51);
    (*(void (**)(uint64_t, uint64_t))(v50 + 104))(v51, v50);
    uint64_t v52 = *(void *)(v0 + 168);
    uint64_t v53 = *(void *)(v0 + 176);
    OUTLINED_FUNCTION_49_0(v88);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))( v46,  v48 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_parse,  v75);
    Input.init(parse:)(v46);
    (*(void (**)(uint64_t, void, uint64_t))(v76 + 104))( v47,  enum case for ExecuteOnRemoteDeviceSpecification.userCompanion(_:),  v77);
    uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(v53 + 96))(v45, v47, v49, v52, v53);
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v47, v77);
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v45, v81);
    *(void *)(v0 + 184) = v54;
    uint64_t v55 = v49[3];
    uint64_t v56 = v49[4];
    OUTLINED_FUNCTION_49_0(v49);
    (*(void (**)(uint64_t, uint64_t))(v56 + 104))(v55, v56);
    uint64_t v57 = *(void *)(v0 + 128);
    uint64_t v58 = *(void *)(v0 + 136);
    __swift_project_boxed_opaque_existential_1(v87, v57);
    uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonFlowGuard>);
    uint64_t v60 = type metadata accessor for CommonFlowGuard(0LL);
    uint64_t v61 = swift_allocObject( v59,  ((*(unsigned __int8 *)(*(void *)(v60 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v60 - 8) + 80LL))
          + *(void *)(*(void *)(v60 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v60 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v61 + 16) = xmmword_31D870;
    type metadata accessor for CompanionCompatibilityCheckFlowStrategy(0LL);
    (*(void (**)(uint64_t, void, uint64_t))(v82 + 104))( v86,  enum case for CompanionDeviceInfoRequirement.anyKnownCompanion(_:),  v85);
    uint64_t v62 = static CompanionCompatibilityCheckFlowStrategy.require(_:redirectToServerOnFailure:)(v86, 0LL);
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v86, v85);
    static CommonFlowGuard.ensuringUserHasSupportedCompanion(using:)(v62);
    swift_release(v62);
    uint64_t v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 104))(v61, v57, v58);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 200) = v63;
    uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<ExecuteOnRemoteFlowResult>);
    uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<GuardFlowResult>);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type AnyValueFlow<ExecuteOnRemoteFlowResult> and conformance AnyValueFlow<A>,  &demangling cache variable for type metadata for AnyValueFlow<ExecuteOnRemoteFlowResult>);
    uint64_t v67 = v66;
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( &lazy protocol witness table cache variable for type AnyValueFlow<GuardFlowResult> and conformance AnyValueFlow<A>,  &demangling cache variable for type metadata for AnyValueFlow<GuardFlowResult>);
    uint64_t v32 = Flow.guarded<A>(by:)(v0 + 200, v64, v65, v67);
    OUTLINED_FUNCTION_16_3();
    swift_release(*(void *)(v0 + 184));
    __swift_destroy_boxed_opaque_existential_1(v87);
    __swift_destroy_boxed_opaque_existential_1(v88);
    *(void *)(v0 + 208) = v32;
    swift_retain();
    uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConditionalFlow<ExecuteOnRemoteFlowResult>);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>,  &demangling cache variable for type metadata for ConditionalFlow<ExecuteOnRemoteFlowResult>);
    static ExecuteResponse.ongoing<A>(next:childCompletion:)( v0 + 208,  partial apply for implicit closure #6 in implicit closure #5 in CommunalDeviceEmergencyFlow.execute(),  v48,  v68);
    OUTLINED_FUNCTION_76();
    goto LABEL_17;
  }

  static ExecuteResponse.complete()(v13);
LABEL_18:
  uint64_t v69 = *(void *)(v0 + 392);
  uint64_t v70 = *(void *)(v0 + 344);
  uint64_t v71 = *(void *)(v0 + 320);
  uint64_t v72 = *(void *)(v0 + 296);
  swift_task_dealloc(*(void *)(v0 + 408));
  swift_task_dealloc(v69);
  OUTLINED_FUNCTION_7_8();
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in CommunalDeviceEmergencyFlow.execute()(uint64_t a1, uint64_t a2)
{
  v2[7] = a1;
  _BYTE v2[8] = a2;
  uint64_t v3 = type metadata accessor for DialogPhase(0LL);
  v2[9] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[11] = v5;
  v2[12] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(closure #1 in CommunalDeviceEmergencyFlow.execute(), 0LL, 0LL);
}

uint64_t closure #1 in CommunalDeviceEmergencyFlow.execute()()
{
  uint64_t v1 = *(int **)(class metadata base offset for UnsupportedFlowCATsSimple
               + **(void **)(*(void *)(v0 + 64)
                             + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_unsupportedFlowCATsSimple)
               + 48);
  uint64_t v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc(v1[1]);
  *(void *)(v0 + 104) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in CommunalDeviceEmergencyFlow.execute();
  return OUTLINED_FUNCTION_3_0(v4);
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 128LL));
  swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  OUTLINED_FUNCTION_7_8();
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in CommunalDeviceEmergencyFlow.execute()(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 104);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_task_dealloc(*(void *)(v4 + 96));
    OUTLINED_FUNCTION_7_8();
    return (*(uint64_t (**)(void))(v6 + 8))();
  }

  else
  {
    *(void *)(v4 + 112) = a1;
    return swift_task_switch(closure #1 in CommunalDeviceEmergencyFlow.execute(), 0LL, 0LL);
  }

{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v20;
  uint64_t v2 = (void *)v1[14];
  uint64_t v4 = v1[8];
  uint64_t v3 = v1[9];
  static DialogPhase.completion.getter(a1);
  OutputGenerationManifest.init(dialogPhase:_:)( v3,  closure #1 in closure #1 in CommunalDeviceEmergencyFlow.execute(),  0LL);
  uint64_t v5 = (void *)(v4 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_sharedGlobals);
  uint64_t v6 = *(void *)(v4 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_sharedGlobals + 24);
  uint64_t v7 = *(void *)(v4 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_sharedGlobals + 32);
  OUTLINED_FUNCTION_49_0(v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 136))(v6, v7);
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  OUTLINED_FUNCTION_49_0(v1 + 2);
  char v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v11 = swift_allocObject(v10, 40LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_31FE60;
  *(void *)(v11 + 32) = v2;
  uint64_t v20 = v11;
  specialized Array._endMutation()(v11, v12, v13, v14);
  v1[15] = v20;
  uint64_t v15 = *(void *)(v9 + 8);
  os_log_type_t v16 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)[1];
  uint64_t v17 = v2;
  uint64_t v18 = (void *)swift_task_alloc(v16);
  v1[16] = v18;
  void *v18 = v1;
  v18[1] = closure #1 in CommunalDeviceEmergencyFlow.execute();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)( v1[7],  v20,  v1[12],  v8,  v15);
}

uint64_t closure #1 in closure #1 in CommunalDeviceEmergencyFlow.execute()()
{
  return OutputGenerationManifest.canUseServerTTS.setter(0LL);
}

uint64_t CommunalDeviceEmergencyFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommunalDeviceEmergencyFlow(0LL);
  lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type CommunalDeviceEmergencyFlow and conformance CommunalDeviceEmergencyFlow,  type metadata accessor for CommunalDeviceEmergencyFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
}

void CommunalDeviceEmergencyFlow.onExecuteOnRemoteFlowComplete(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ExecuteOnRemoteFlowResult(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v36 - v8;
  __chkstk_darwin();
  uint64_t v11 = (char *)&v36 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConditionalFlowResult<ExecuteOnRemoteFlowResult>);
  __chkstk_darwin();
  OUTLINED_FUNCTION_134();
  outlined init with copy of ConditionalFlowResult<ExecuteOnRemoteFlowResult>(a1, (uint64_t)v1);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (result: ExecuteOnRemoteFlowResult));
  if (__swift_getEnumTagSinglePayload((uint64_t)v1, 1LL, v12) == 1)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v13 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v13, (uint64_t)static Logger.siriPhone);
    os_log_type_t v14 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_7(v14))
    {
      uint64_t v15 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      *uint64_t v15 = 0;
      OUTLINED_FUNCTION_3_2(&dword_0, v16, v17, "#CommunalDeviceEmergencyFlow Did not pass GuardFlows");
      OUTLINED_FUNCTION_0_2((uint64_t)v15);
    }

    uint64_t v18 = (char *)v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_state;
    OUTLINED_FUNCTION_4_73();
    _BYTE *v18 = 4;
LABEL_13:
    CommunalDeviceEmergencyFlow.state.didset();
    return;
  }

  if ((*(unsigned int (**)(id *, uint64_t))(v5 + 88))(v1, v4) == enum case for ExecuteOnRemoteFlowResult.success(_:))
  {
    (*(void (**)(id *, uint64_t))(v5 + 96))(v1, v4);

    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v19 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v19, (uint64_t)static Logger.siriPhone);
    os_log_type_t v20 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_7(v20))
    {
      uint64_t v21 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      *uint64_t v21 = 0;
      OUTLINED_FUNCTION_3_2(&dword_0, v22, v23, "#CommunalDeviceEmergencyFlow Exited ExecuteOnRemoteFlow successfully");
      OUTLINED_FUNCTION_0_2((uint64_t)v21);
    }

    uint64_t v24 = (char *)v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_state;
    OUTLINED_FUNCTION_4_73();
    *uint64_t v24 = 1;
    goto LABEL_13;
  }

  (*(void (**)(char *, id *, uint64_t))(v5 + 32))(v11, v1, v4);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v25 = OUTLINED_FUNCTION_15_1();
  uint64_t v26 = (os_log_s *)__swift_project_value_buffer(v25, (uint64_t)static Logger.siriPhone);
  uint64_t v27 = *(uint64_t (**)(char *, char *, uint64_t))(v5 + 16);
  uint64_t v28 = v27(v9, v11, v4);
  Logger.logObject.getter(v28);
  os_log_type_t v29 = OUTLINED_FUNCTION_6_0();
  if (os_log_type_enabled(v26, v29))
  {
    uint64_t v30 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v39 = OUTLINED_FUNCTION_7_0(32LL);
    v41[0] = v39;
    uint64_t v38 = v30;
    *(_DWORD *)uint64_t v30 = 136315138;
    uint64_t v37 = v30 + 4;
    v27(v7, v9, v4);
    uint64_t v31 = String.init<A>(describing:)(v7, v4);
    uint64_t v7 = (char *)v32;
    uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v37);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_22_38();
    uint64_t v33 = v38;
    OUTLINED_FUNCTION_57_0( &dword_0,  v26,  v29,  "#CommunalDeviceEmergencyFlow Exited ExecuteOnRemoteFlow with result other than success %s",  v38);
    uint64_t v34 = v39;
    OUTLINED_FUNCTION_17_0(v39);
    OUTLINED_FUNCTION_0_2(v34);
    OUTLINED_FUNCTION_0_2((uint64_t)v33);
  }

  else
  {
    OUTLINED_FUNCTION_22_38();
  }

  os_log_type_t v35 = (char *)v2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_state;
  OUTLINED_FUNCTION_4_73();
  _BYTE *v35 = 4;
  CommunalDeviceEmergencyFlow.state.didset();
  ((void (*)(char *, uint64_t))v7)(v11, v4);
}

uint64_t CommunalDeviceEmergencyFlow.State.description.getter(char a1)
{
  if (a1 == 3) {
    return 0x6C616974696E692ELL;
  }
  if (a1 == 4) {
    return 0x64656C6961662ELL;
  }
  uint64_t v10 = v1;
  uint64_t v11 = v2;
  uint64_t v8 = 0x74656C706D6F632ELL;
  unint64_t v9 = 0xEA00000000002865LL;
  char v7 = a1;
  v4._uint64_t countAndFlagsBits = String.init<A>(describing:)( &v7,  &type metadata for CommunalDeviceExecutionFlow.CommunalDeviceExecutionLocation);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._uint64_t countAndFlagsBits = 41LL;
  v6._object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  return v8;
}

BOOL static CommunalDeviceEmergencyFlow.State.__derived_enum_equals(_:_:)( unsigned __int8 a1, unsigned __int8 a2)
{
  if (a1 == 4) {
    return a2 == 4;
  }
  if (a1 == 3) {
    return a2 == 3;
  }
  return a1 == a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CommunalDeviceEmergencyFlow.State()
{
  return CommunalDeviceEmergencyFlow.State.description.getter(*v0);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CommunalDeviceEmergencyFlow.State( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static CommunalDeviceEmergencyFlow.State.__derived_enum_equals(_:_:)(*a1, *a2);
}

void CommunalDeviceEmergencyFlow.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_parse;
  uint64_t v2 = OUTLINED_FUNCTION_4_3();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0
                                                      + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_sharedGlobals));
  swift_release(*(void *)(v0
                          + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceEmergencyFlow_unsupportedFlowCATsSimple));
  OUTLINED_FUNCTION_2();
}

uint64_t CommunalDeviceEmergencyFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t protocol witness for Flow.on(input:) in conformance CommunalDeviceEmergencyFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176LL))() & 1;
}

uint64_t protocol witness for Flow.exitValue.getter in conformance CommunalDeviceEmergencyFlow( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for CommunalDeviceEmergencyFlow(0LL);
  return Flow<>.exitValue.getter(v3, a2);
}

void key path getter for CommunalDeviceEmergencyFlow.identifiedUser : CommunalDeviceEmergencyFlow( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t KeyPath = swift_getKeyPath(a5);
  swift_getKeyPath(a6);
  OUTLINED_FUNCTION_20_43();
  OUTLINED_FUNCTION_31_31((uint64_t)v10, KeyPath);
  swift_release(v8);
  swift_release(KeyPath);
  swift_release(a6);
  OUTLINED_FUNCTION_12_3();
}

uint64_t partial apply for closure #1 in CommunalDeviceEmergencyFlow.execute()(uint64_t a1)
{
  Swift::String v4 = (void *)swift_task_alloc(dword_43762C);
  *(void *)(v2 + 16) = v4;
  *Swift::String v4 = v2;
  v4[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return closure #1 in CommunalDeviceEmergencyFlow.execute()(a1, v1);
}

void sub_1BDBE8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void sub_1BDC14(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t type metadata accessor for CommunalDeviceEmergencyFlow(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for CommunalDeviceEmergencyFlow;
  if (!type metadata singleton initialization cache for CommunalDeviceEmergencyFlow) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CommunalDeviceEmergencyFlow);
  }
  return result;
}

void base witness table accessor for Flow in CommunalDeviceEmergencyFlow()
{
}

void base witness table accessor for SiriEnvironmentLocating in CommunalDeviceEmergencyFlow()
{
}

uint64_t sub_1BDCD0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = OUTLINED_FUNCTION_13_58();
  *a1 = result;
  return result;
}

void sub_1BDCF8(char *a1)
{
}

uint64_t ObjC metadata update function for CommunalDeviceEmergencyFlow()
{
  return type metadata accessor for CommunalDeviceEmergencyFlow(0LL);
}

uint64_t type metadata completion function for CommunalDeviceEmergencyFlow(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for Parse(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(result - 8) + 64LL;
    v4[3] = "(";
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[5] = &unk_331628;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 6LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t getEnumTagSinglePayload for CommunalDeviceEmergencyFlow.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC)
  {
    unsigned int v6 = *a1;
    if (v6 >= 3) {
      unsigned int v7 = v6 - 2;
    }
    else {
      unsigned int v7 = 0;
    }
    if (v7 >= 3) {
      return v7 - 2;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    unsigned int v2 = a2 + 4;
    if (a2 + 4 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_1BDE04 + 4 * asc_3313A0[v4]))();
  }

uint64_t storeEnumTagSinglePayload for CommunalDeviceEmergencyFlow.State( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    LODWORD(v5) = v4;
  }
  else {
    LODWORD(v5) = 0;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1BDEB0 + 4 * byte_3313AA[v5]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BDEE4 + 4 * byte_3313A5[v5]))();
}

uint64_t sub_1BDEE4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BDEEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1BDEF4LL);
  }
  return result;
}

uint64_t sub_1BDF00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1BDF08LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1BDF0C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BDF14(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CommunalDeviceEmergencyFlow.State()
{
  return &type metadata for CommunalDeviceEmergencyFlow.State;
}

uint64_t OUTLINED_FUNCTION_4_73()
{
  return swift_beginAccess(v0, v1 - 104, 1LL, 0LL);
}

uint64_t OUTLINED_FUNCTION_13_58()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144LL))();
}

uint64_t OUTLINED_FUNCTION_16_43()
{
  return SiriEnvironmentValue.init(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_20_43()
{
  return swift_retain(v0);
}

uint64_t OUTLINED_FUNCTION_22_38()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_31_31(uint64_t a1, uint64_t a2)
{
  return static SiriEnvironmentValue.subscript.getter(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_33_40()
{
  return __swift_destroy_boxed_opaque_existential_1(v0);
}

void SAUIPlayNotificationSound.init(notificationId:soundType:)(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_allocWithZone((Class)OUTLINED_FUNCTION_15_51()) init];
  id v4 = v3;
  if (a2)
  {
    NSString v5 = OUTLINED_FUNCTION_27_41();
    OUTLINED_FUNCTION_50();
  }

  else
  {
    NSString v5 = 0LL;
  }

  [v3 setNotificationId:v5];

  OUTLINED_FUNCTION_21_38();
  OUTLINED_FUNCTION_16();
}

void SASTButtonItem.init(label:commands:centered:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  id v6 = objc_allocWithZone((Class)OUTLINED_FUNCTION_15_51());
  id v7 = OUTLINED_FUNCTION_28_36(v6);
  [v7 setCentered:a4 & 1];
  id v8 = OUTLINED_FUNCTION_28_36(objc_allocWithZone(&OBJC_CLASS___SASTCommandTemplateAction));
  outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter( a3,  (uint64_t)v8,  &demangling cache variable for type metadata for SAClientBoundCommand);
  OUTLINED_FUNCTION_3_85(v9, "setAction:");

  id v10 = OUTLINED_FUNCTION_28_36(objc_allocWithZone(&OBJC_CLASS___SAUIDecoratedText));
  outlined bridged method (mbnn) of @objc SAUIConfirmationOption.label.setter();
  OUTLINED_FUNCTION_3_85(v11, "setDecoratedLabel:");

  OUTLINED_FUNCTION_16();
}

void SAPhoneCallConfirmationSnippet.init(confirmOption:confirmationDisplayText:)( void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = [objc_allocWithZone((Class)OUTLINED_FUNCTION_142_3()) init];
  OUTLINED_FUNCTION_49( (uint64_t)v5,  (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOptions,  &OBJC_CLASS___SAUIConfirmationOptions_ptr);
  id v6 = v5;
  id v7 = a1;
  SAUIConfirmationOptions.init(denyOption:confirmOption:)(0LL, v7);
  uint64_t v9 = (void *)v8;
  OUTLINED_FUNCTION_24_33(v8, "setConfirmationOptions:");

  if (a3)
  {
    NSString v11 = String._bridgeToObjectiveC()();
    uint64_t v10 = swift_bridgeObjectRelease();
  }

  else
  {
    NSString v11 = 0LL;
  }

  OUTLINED_FUNCTION_24_33(v10, "setConfirmationDisplayText:");

  OUTLINED_FUNCTION_16();
}

id SAUIConfirmationOption.init(label:type:iconType:commands:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v7 = [objc_allocWithZone((Class)OUTLINED_FUNCTION_142_3()) init];
  OUTLINED_FUNCTION_9_58();
  OUTLINED_FUNCTION_9_58();
  if (a6)
  {
    NSString v9 = String._bridgeToObjectiveC()();
    uint64_t v8 = swift_bridgeObjectRelease();
  }

  else
  {
    NSString v9 = 0LL;
  }

  OUTLINED_FUNCTION_34_25(v8, "setIconType:");

  OUTLINED_FUNCTION_17_47(v10, v11, &demangling cache variable for type metadata for SAClientBoundCommand);
  return v7;
}

void SAUIConfirmationOptions.init(denyOption:confirmOption:)(void *a1, void *a2)
{
  id v4 = [objc_allocWithZone((Class)OUTLINED_FUNCTION_142_3()) init];
  uint64_t v5 = outlined bridged method (pb) of @objc SAUIConfirmationOption.commands.getter(a2);
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    v6.super.Class isa = OUTLINED_FUNCTION_16_44().super.isa;
    uint64_t v5 = OUTLINED_FUNCTION_4_1();
  }

  else
  {
    v6.super.Class isa = 0LL;
  }

  OUTLINED_FUNCTION_6_69(v5, "setConfirmCommands:");

  if (!a1
    || (id v7 = (void *)outlined bridged method (ob) of @objc SAUIConfirmationOption.commands.getter(a1)) == 0LL)
  {
    swift_bridgeObjectRelease();
    id v7 = _swiftEmptyArrayStorage;
  }

  outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter( (uint64_t)v7,  (uint64_t)v4,  &demangling cache variable for type metadata for SAClientBoundCommand);
  uint64_t v8 = outlined bridged method (pb) of @objc SAUIConfirmationOption.label.getter(a2, (SEL *)&selRef_label);
  if (v9)
  {
    NSString v10 = OUTLINED_FUNCTION_14_47();
    uint64_t v8 = OUTLINED_FUNCTION_4_1();
  }

  else
  {
    NSString v10 = 0LL;
  }

  OUTLINED_FUNCTION_6_69(v8, "setConfirmText:");

  if (a1 && (uint64_t v11 = outlined bridged method (ob) of @objc SAUIConfirmationOption.label.getter(a1), v12))
  {
    NSString v13 = OUTLINED_FUNCTION_14_47();
    uint64_t v11 = OUTLINED_FUNCTION_4_1();
  }

  else
  {
    NSString v13 = 0LL;
  }

  OUTLINED_FUNCTION_6_69(v11, "setDenyText:");

  static String._unconditionallyBridgeFromObjectiveC(_:)(SAUIConfirmationOptionsCancelTriggerDenyValue);
  OUTLINED_FUNCTION_21_38();
  if (a1)
  {
    id v14 = a1;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(a2);
    unint64_t v16 = *(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
    unint64_t v15 = *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
    if (v16 >= v15 >> 1) {
      OUTLINED_FUNCTION_18_48(v16 + 1, v15);
    }
    uint64_t v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
    OUTLINED_FUNCTION_13_59(v17, v18, v19, v20);
  }

  else
  {
    id v21 = a2;
  }

  id v22 = a2;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v22);
  unint64_t v24 = *(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
  unint64_t v23 = *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
  if (v24 >= v23 >> 1) {
    OUTLINED_FUNCTION_18_48(v24 + 1, v23);
  }
  uint64_t v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v22);
  OUTLINED_FUNCTION_13_59(v25, v26, v27, v28);

  outlined bridged method (mbnn) of @objc SAUIConfirmationView.allConfirmationOptions.setter( (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)v4,  (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOption,  &OBJC_CLASS___SAUIConfirmationOption_ptr);
  OUTLINED_FUNCTION_12_3();
}

void SAAppsLaunchApp.init(app:)(uint64_t a1)
{
}

void SAAceConfirmationContext.init(reason:)(uint64_t a1, uint64_t a2)
{
  id v4 = [objc_allocWithZone((Class)OUTLINED_FUNCTION_142_3()) init];
  outlined bridged method (mbnn) of @objc SAAceConfirmationContext.reason.setter(a1, a2, v4);
  OUTLINED_FUNCTION_6();
}

void SASTCommandTemplateAction.init(commands:)(uint64_t a1)
{
}

void SAIntentGroupHandleIntent.init(intent:appIdentifier:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = [objc_allocWithZone((Class)OUTLINED_FUNCTION_142_3()) init];
  uint64_t v10 = UUID.init()(v9);
  uint64_t v11 = UUID.uuidString.getter(v10);
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  outlined bridged method (mbnn) of @objc SABaseClientBoundCommand.aceId.setter(v11, v13, v9);

  id v14 = v9;
  if (a3)
  {
    NSString v15 = OUTLINED_FUNCTION_27_41();
    id v14 = (id)OUTLINED_FUNCTION_50();
  }

  else
  {
    NSString v15 = 0LL;
  }

  OUTLINED_FUNCTION_6_69((uint64_t)v14, "setAppId:");

  OUTLINED_FUNCTION_49( v16,  (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupProtobufMessage,  &OBJC_CLASS___SAIntentGroupProtobufMessage_ptr);
  id v17 = a1;
  SAIntentGroupProtobufMessage.init(intent:)(v17);
  uint64_t v19 = (void *)v18;
  OUTLINED_FUNCTION_6_69(v18, "setIntent:");

  OUTLINED_FUNCTION_7_5();
}

void SAUISash.init(app:)(uint64_t a1)
{
}

void SAAppsLaunchApp.init(app:)(uint64_t a1, const char **a2)
{
  id v5 = [objc_allocWithZone((Class)OUTLINED_FUNCTION_15_51()) init];
  uint64_t v6 = App.appIdentifier.getter();
  if (v7)
  {
    OUTLINED_FUNCTION_14_47();
    uint64_t v6 = OUTLINED_FUNCTION_46_12();
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  OUTLINED_FUNCTION_3_85(v6, *a2);

  swift_release(a1);
  OUTLINED_FUNCTION_16();
}

void SAUISayIt.init(message:dialogIdentifier:canUseServerTTS:listenAfterSpeaking:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v12 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  OUTLINED_FUNCTION_30_30();
  [v12 setCanUseServerTTS:a5 & 1];
  id v13 = v12;
  uint64_t v14 = UUID.init()(v13);
  uint64_t v15 = UUID.uuidString.getter(v14);
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  outlined bridged method (mbnn) of @objc SABaseClientBoundCommand.aceId.setter(v15, v17, v13);

  OUTLINED_FUNCTION_30_30();
  OUTLINED_FUNCTION_49( v18,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
  Class isa = NSNumber.init(integerLiteral:)(a6 & 1).super.super.isa;
  OUTLINED_FUNCTION_89_0(v13, "setListenAfterSpeaking:");

  OUTLINED_FUNCTION_7_5();
}

void SAUIButton.init(text:commands:)()
{
  id v0 = [objc_allocWithZone((Class)OUTLINED_FUNCTION_142_3()) init];
  OUTLINED_FUNCTION_9_58();
  OUTLINED_FUNCTION_17_47(v1, v2, &demangling cache variable for type metadata for SAClientBoundCommand);

  OUTLINED_FUNCTION_6();
}

void SAUIConfirmationView.init(confirmOption:denyOption:)(void *a1, void *a2)
{
  id v5 = [objc_allocWithZone((Class)OUTLINED_FUNCTION_15_51()) init];
  uint64_t v6 = outlined bridged method (pb) of @objc SAUIConfirmationOption.commands.getter(a1);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    OUTLINED_FUNCTION_16_44();
    uint64_t v6 = OUTLINED_FUNCTION_46_12();
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  OUTLINED_FUNCTION_3_85(v6, "setConfirmCommands:");

  uint64_t v7 = outlined bridged method (pb) of @objc SAUIConfirmationOption.commands.getter(a2);
  if (v7)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    OUTLINED_FUNCTION_16_44();
    uint64_t v7 = OUTLINED_FUNCTION_46_12();
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  OUTLINED_FUNCTION_3_85(v7, "setDenyCommands:");

  uint64_t v8 = outlined bridged method (pb) of @objc SAUIConfirmationOption.label.getter(a1, (SEL *)&selRef_label);
  if (v9)
  {
    OUTLINED_FUNCTION_14_47();
    uint64_t v8 = OUTLINED_FUNCTION_46_12();
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  OUTLINED_FUNCTION_3_85(v8, "setConfirmText:");

  uint64_t v10 = outlined bridged method (pb) of @objc SAUIConfirmationOption.label.getter(a2, (SEL *)&selRef_label);
  if (v11)
  {
    OUTLINED_FUNCTION_14_47();
    uint64_t v10 = OUTLINED_FUNCTION_46_12();
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  OUTLINED_FUNCTION_3_85(v10, "setDenyText:");

  static String._unconditionallyBridgeFromObjectiveC(_:)(SAUIConfirmationViewCancelTriggerDenyValue);
  OUTLINED_FUNCTION_21_38();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = swift_allocObject(v12, 48LL, 7LL);
  *(_OWORD *)(v13 + 16) = xmmword_31FBC0;
  *(void *)(v13 + 32) = a2;
  *(void *)(v13 + 40) = a1;
  uint64_t v17 = v13;
  OUTLINED_FUNCTION_13_59(v13, v14, v15, v16);
  outlined bridged method (mbnn) of @objc SAUIConfirmationView.allConfirmationOptions.setter( v17,  (uint64_t)v5,  (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOption,  &OBJC_CLASS___SAUIConfirmationOption_ptr);

  OUTLINED_FUNCTION_12_3();
}

void SAABPersonPicker.init(canUseServerTTS:showImmediately:canBeRefreshed:)()
{
  id v0 = [objc_allocWithZone((Class)OUTLINED_FUNCTION_142_3()) init];
  outlined bridged method (mbnn) of @objc SAUIConfirmationOption.label.setter();
  id v2 = OUTLINED_FUNCTION_17_5(v1, "setShowImmediately:");
  id v3 = OUTLINED_FUNCTION_17_5((uint64_t)v2, "setCanBeRefreshed:");
  OUTLINED_FUNCTION_17_5((uint64_t)v3, "setCanUseServerTTS:");
  static String._unconditionallyBridgeFromObjectiveC(_:)(SAAceViewUIItemTypeItemTypeResultValue);
  outlined bridged method (mbnn) of @objc SAUIConfirmationOption.label.setter();

  OUTLINED_FUNCTION_16();
}

void SAUIDecoratedText.init(label:)()
{
}

void SASTItemGroup.init(items:)(uint64_t a1)
{
}

void SASTCommandTemplateAction.init(commands:)(uint64_t a1, uint64_t *a2)
{
  id v4 = [objc_allocWithZone((Class)OUTLINED_FUNCTION_142_3()) init];
  outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter(a1, (uint64_t)v4, a2);
  OUTLINED_FUNCTION_6();
}

void static SASTItemGroup.makeButtonGroup(label:commands:centered:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = OUTLINED_FUNCTION_5_32(v8);
  *(_OWORD *)(v9 + 16) = xmmword_31FE60;
  OUTLINED_FUNCTION_49(v9, &lazy cache variable for type metadata for SASTButtonItem, &OBJC_CLASS___SASTButtonItem_ptr);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  SASTButtonItem.init(label:commands:centered:)(a1, a2, a3, a4);
  *(void *)(v9 + 32) = v10;
  OUTLINED_FUNCTION_13_59(v10, v11, v12, v13);
  id v14 = [objc_allocWithZone(SASTItemGroup) init];
  OUTLINED_FUNCTION_17_47((uint64_t)v14, v15, &demangling cache variable for type metadata for SASTTemplateItem);
  OUTLINED_FUNCTION_12_3();
}

void SAIntentGroupProtobufMessage.init(intent:)(void *a1)
{
  id v3 = [objc_allocWithZone((Class)OUTLINED_FUNCTION_142_3()) init];
  id v4 = OUTLINED_FUNCTION_17_5((uint64_t)v3, "backingStore");
  uint64_t v5 = outlined bridged method (ob) of @objc PBCodable.data.getter(v4);
  if (v6 >> 60 == 15)
  {
    uint64_t v1 = 0LL;
  }

  else
  {
    OUTLINED_FUNCTION_26_37();
    uint64_t v5 = OUTLINED_FUNCTION_20_44();
  }

  OUTLINED_FUNCTION_11_58(v5, "setData:");

  id v8 = OUTLINED_FUNCTION_17_5(v7, "typeName");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  OUTLINED_FUNCTION_9_58();
  OUTLINED_FUNCTION_16();
}

void SAIntentGroupProtobufMessage.init(response:)(void *a1)
{
  id v3 = [objc_allocWithZone((Class)OUTLINED_FUNCTION_142_3()) init];
  id v4 = OUTLINED_FUNCTION_17_5((uint64_t)v3, "backingStore");
  if (v4)
  {
    uint64_t v5 = outlined bridged method (ob) of @objc PBCodable.data.getter(v4);
    if (v6 >> 60 == 15)
    {
      uint64_t v1 = 0LL;
    }

    else
    {
      OUTLINED_FUNCTION_26_37();
      uint64_t v5 = OUTLINED_FUNCTION_20_44();
    }

    OUTLINED_FUNCTION_11_58(v5, "setData:");

    uint64_t v7 = outlined bridged method (pb) of @objc SAUIConfirmationOption.label.getter( a1,  (SEL *)&selRef__payloadResponseTypeName);
    if (v8)
    {
      NSString v9 = String._bridgeToObjectiveC()();
      uint64_t v7 = OUTLINED_FUNCTION_50();
    }

    else
    {
      NSString v9 = 0LL;
    }

    OUTLINED_FUNCTION_11_58(v7, "setTypeName:");

    OUTLINED_FUNCTION_16();
  }

  else
  {
    __break(1u);
  }

void SAUIColor.init(r:g:b:alpha:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = [objc_allocWithZone((Class)OUTLINED_FUNCTION_142_3()) init];
  id v7 = OUTLINED_FUNCTION_34_25((uint64_t)[v6 setRedValue:a1], "setGreenValue:");
  OUTLINED_FUNCTION_11_58((uint64_t)v7, "setBlueValue:");
  OUTLINED_FUNCTION_89_0(v6, "setAlpha:");

  OUTLINED_FUNCTION_16();
}

id SAUIAddDialogs.init(dialogString:templateIdentifier:)()
{
  id v0 = [objc_allocWithZone((Class)OUTLINED_FUNCTION_15_51()) init];
  id v1 = objc_allocWithZone(&OBJC_CLASS___SADialogText);
  id v2 = v0;
  id v3 = [v1 init];
  OUTLINED_FUNCTION_21_38();
  id v4 = [objc_allocWithZone(SADialog) init];
  [v4 setContent:v3];
  OUTLINED_FUNCTION_30_30();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = OUTLINED_FUNCTION_5_32(v5);
  *(_OWORD *)(v6 + 16) = xmmword_31FE60;
  *(void *)(v6 + 32) = v4;
  uint64_t v12 = v6;
  OUTLINED_FUNCTION_13_59(v6, v7, v8, v9);
  id v10 = v4;
  outlined bridged method (mbnn) of @objc SAUIConfirmationView.allConfirmationOptions.setter( v12,  (uint64_t)v2,  &lazy cache variable for type metadata for SADialog,  &OBJC_CLASS___SADialog_ptr);

  return v2;
}

void SANotificationsSearch.init(after:isOnDeviceSearch:)(uint64_t a1, uint64_t a2, char a3)
{
  id v4 = [objc_allocWithZone((Class)OUTLINED_FUNCTION_142_3()) init];
  static String._unconditionallyBridgeFromObjectiveC(_:)(SANotificationPriorityNONEValue);
  id v5 = v4;
  OUTLINED_FUNCTION_9_58();
  OUTLINED_FUNCTION_9_58();
  id v6 = [objc_allocWithZone(NSNumber) initWithBool:a3 & 1];
  OUTLINED_FUNCTION_89_0(v5, "setIsOnDeviceSearch:");

  OUTLINED_FUNCTION_16();
}

void outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter(uint64_t a1, uint64_t a2)
{
}

void outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter( uint64_t a1, uint64_t a2)
{
}

uint64_t outlined bridged method (pb) of @objc SAUIConfirmationOption.commands.getter(void *a1)
{
  id v1 = [a1 commands];
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

void outlined bridged method (mbnn) of @objc SAUIConfirmationView.allConfirmationOptions.setter( uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  int v4 = OUTLINED_FUNCTION_19_42();
  OUTLINED_FUNCTION_10_54(v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
  OUTLINED_FUNCTION_3_64(v14);
}

uint64_t outlined bridged method (ob) of @objc SAUIConfirmationOption.label.getter(void *a1)
{
  id v2 = [a1 label];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t outlined bridged method (ob) of @objc SAUIConfirmationOption.commands.getter(void *a1)
{
  id v2 = [a1 commands];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

void outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter( uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v3 = OUTLINED_FUNCTION_19_42();
  OUTLINED_FUNCTION_10_54(v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
  OUTLINED_FUNCTION_3_64(v13);
}

void outlined bridged method (mbnn) of @objc SAUIConfirmationOption.label.setter()
{
  int v0 = OUTLINED_FUNCTION_19_42();
  OUTLINED_FUNCTION_10_54(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  OUTLINED_FUNCTION_3_64(v10);
}

id OUTLINED_FUNCTION_3_85(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

id OUTLINED_FUNCTION_6_69(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

void OUTLINED_FUNCTION_9_58()
{
}

id OUTLINED_FUNCTION_10_54( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  return objc_msgSend(v11, *v10, a10);
}

id OUTLINED_FUNCTION_11_58(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t OUTLINED_FUNCTION_13_59(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Array._endMutation()(a1, a2, a3, a4);
}

NSString OUTLINED_FUNCTION_14_47()
{
  return String._bridgeToObjectiveC()();
}

uint64_t OUTLINED_FUNCTION_15_51()
{
  return swift_getObjCClassFromMetadata();
}

NSArray OUTLINED_FUNCTION_16_44()
{
  return Array._bridgeToObjectiveC()();
}

void OUTLINED_FUNCTION_17_47(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t OUTLINED_FUNCTION_18_48@<X0>(uint64_t a1@<X1>, unint64_t a2@<X8>)
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a2 > 1, a1, 1LL);
}

uint64_t OUTLINED_FUNCTION_19_42()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_20_44()
{
  return outlined consume of Data?(v0, v1);
}

id OUTLINED_FUNCTION_24_33(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

NSData OUTLINED_FUNCTION_26_37()
{
  return Data._bridgeToObjectiveC()();
}

id OUTLINED_FUNCTION_28_36(void *a1)
{
  return [a1 *(SEL *)(v1 + 1088)];
}

void OUTLINED_FUNCTION_30_30()
{
}

id OUTLINED_FUNCTION_34_25(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t ReaderNLConstants.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BF420 + 4 * byte_331650[a1]))( 0x726564616572LL,  0xE600000000000000LL);
}

uint64_t sub_1BF420()
{
  return 0x6973734169726953LL;
}

uint64_t sub_1BF444()
{
  return 0x6E6F69746361LL;
}

uint64_t sub_1BF454()
{
  return 0x646E616D6D6F63LL;
}

uint64_t sub_1BF46C()
{
  return 0x7463656A627573LL;
}

uint64_t sub_1BF484()
{
  return 0x6556726564616572LL;
}

PhoneCallFlowDelegatePlugin::ReaderNLConstants_optional __swiftcall ReaderNLConstants.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of ReaderNLConstants.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6) {
    return (PhoneCallFlowDelegatePlugin::ReaderNLConstants_optional)6;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::ReaderNLConstants_optional)v3;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ReaderNLConstants(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

unint64_t lazy protocol witness table accessor for type ReaderNLConstants and conformance ReaderNLConstants()
{
  unint64_t result = lazy protocol witness table cache variable for type ReaderNLConstants and conformance ReaderNLConstants;
  if (!lazy protocol witness table cache variable for type ReaderNLConstants and conformance ReaderNLConstants)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ReaderNLConstants,  &type metadata for ReaderNLConstants);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ReaderNLConstants and conformance ReaderNLConstants);
  }

  return result;
}

void protocol witness for Hashable.hashValue.getter in conformance ReaderNLConstants()
{
}

void protocol witness for Hashable.hash(into:) in conformance ReaderNLConstants(uint64_t a1)
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ReaderNLConstants(uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::ReaderNLConstants_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ReaderNLConstants@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::ReaderNLConstants_optional *a2@<X8>)
{
  result.value = ReaderNLConstants.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ReaderNLConstants@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = ReaderNLConstants.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t storeEnumTagSinglePayload for ReaderNLConstants(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1BF5EC + 4 * byte_33165B[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1BF620 + 4 * byte_331656[v4]))();
}

uint64_t sub_1BF620(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BF628(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1BF630LL);
  }
  return result;
}

uint64_t sub_1BF63C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1BF644LL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1BF648(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BF650(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReaderNLConstants()
{
  return &type metadata for ReaderNLConstants;
}

id DisambiguationReferenceResolver.resolveDisambiguationReference(_:)()
{
  uint64_t v1 = type metadata accessor for MatchedResultsSetting(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneRRTarget?);
  __chkstk_darwin();
  int v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneRRTarget.Target?);
  __chkstk_darwin();
  uint64_t v8 = (id *)((char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  id v10 = (char *)&v62 - v9;
  uint64_t v11 = DisambiguationReferenceResolver.extractReferenceResolutionEntity(parse:)();
  if (!v11)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v31 = type metadata accessor for Logger(0LL);
    uint64_t v32 = __swift_project_value_buffer(v31, (uint64_t)static Logger.siriPhone);
    uint64_t v33 = (void *)Logger.logObject.getter(v32);
    os_log_type_t v35 = static os_log_type_t.debug.getter(v33, v34);
    if (OUTLINED_FUNCTION_10(v35))
    {
      uint64_t v36 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      *uint64_t v36 = 0;
      OUTLINED_FUNCTION_2_2( &dword_0,  v37,  v38,  "#DisambiguationReferenceResolver No reference or entity found, returning nil");
      OUTLINED_FUNCTION_0_2((uint64_t)v36);
    }

    return 0LL;
  }

  uint64_t v12 = v11;
  uint64_t v67 = v2;
  uint64_t v68 = v1;
  uint64_t v69 = v0;
  id v13 = (void *)static UsoBuilderConversionUtils.convertEntityToGraph(entity:)();
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.siriPhone);
  uint64_t v16 = swift_retain_n(v13, 2LL);
  uint64_t v66 = v15;
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v19 = static os_log_type_t.debug.getter(v17, v18);
  if (os_log_type_enabled(v17, v19))
  {
    uint64_t v20 = OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v65 = v12;
    id v21 = (uint8_t *)v20;
    uint64_t v63 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v70 = (uint64_t)v13;
    uint64_t v71 = v63;
    uint64_t v64 = v10;
    *(_DWORD *)id v21 = 136315138;
    uint64_t v62 = v21 + 4;
    id v22 = v8;
    unint64_t v23 = v13;
    uint64_t v24 = type metadata accessor for Graph(0LL);
    unint64_t v25 = lazy protocol witness table accessor for type Graph and conformance Graph();
    uint64_t v26 = v24;
    id v13 = v23;
    uint64_t v8 = v22;
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v26, v25);
    uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v71);
    id v10 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v62);
    OUTLINED_FUNCTION_165_0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v17, v19, "#DisambiguationReferenceResolver found entity, querying SRR for %s", v21, 0xCu);
    uint64_t v29 = v63;
    swift_arrayDestroy(v63, 1LL);
    OUTLINED_FUNCTION_0_2(v29);
    uint64_t v30 = (uint64_t)v21;
    uint64_t v12 = v65;
    OUTLINED_FUNCTION_0_2(v30);
  }

  else
  {

    OUTLINED_FUNCTION_165_0();
  }

  uint64_t v40 = v67;
  uint64_t v39 = v68;
  (*(void (**)(char *, void, uint64_t))(v67 + 104))( v4,  enum case for MatchedResultsSetting.defaultMatching(_:),  v68);
  static PhoneReferenceResolution.resolveEntity(_:referenceResolver:matchedResultsSetting:)( v12,  v69,  (uint64_t)v4,  (uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v4, v39);
  uint64_t v41 = type metadata accessor for PhoneRRTarget(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1LL, v41) == 1)
  {
    outlined destroy of PhoneRRTarget?((uint64_t)v6, &demangling cache variable for type metadata for PhoneRRTarget?);
    uint64_t v42 = OUTLINED_FUNCTION_5_67();
    uint64_t v43 = (uint64_t)v10;
    uint64_t v44 = 1LL;
  }

  else
  {
    outlined init with copy of PhoneRRTarget.Target((uint64_t)v6, (uint64_t)v10);
    outlined destroy of PhoneRRTarget.Target((uint64_t)v6, type metadata accessor for PhoneRRTarget);
    uint64_t v42 = OUTLINED_FUNCTION_5_67();
    uint64_t v43 = (uint64_t)v10;
    uint64_t v44 = 0LL;
  }

  __swift_storeEnumTagSinglePayload(v43, v44, 1LL, v42);
  outlined init with copy of PhoneRRTarget.Target?((uint64_t)v10, (uint64_t)v8);
  OUTLINED_FUNCTION_5_67();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1LL, v42) == 1)
  {
    uint64_t v45 = outlined destroy of PhoneRRTarget?( (uint64_t)v8,  &demangling cache variable for type metadata for PhoneRRTarget.Target?);
LABEL_19:
    uint64_t v46 = (void *)Logger.logObject.getter(v45);
    os_log_type_t v48 = static os_log_type_t.debug.getter(v46, v47);
    if (OUTLINED_FUNCTION_10(v48))
    {
      uint64_t v49 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      *uint64_t v49 = 0;
      OUTLINED_FUNCTION_2_2(&dword_0, v50, v51, "#DisambiguationReferenceResolver SRR didn't return an INPerson");
      OUTLINED_FUNCTION_0_2((uint64_t)v49);
    }

    swift_release(v13);

    swift_release(v12);
    outlined destroy of PhoneRRTarget?( (uint64_t)v10,  &demangling cache variable for type metadata for PhoneRRTarget.Target?);
    return 0LL;
  }

  if (swift_getEnumCaseMultiPayload(v8, v42))
  {
    uint64_t v45 = outlined destroy of PhoneRRTarget.Target((uint64_t)v8, type metadata accessor for PhoneRRTarget.Target);
    goto LABEL_19;
  }

  id v52 = *v8;
  uint64_t v54 = (os_log_s *)Logger.logObject.getter(v52);
  os_log_type_t v56 = static os_log_type_t.debug.getter(v54, v55);
  if (os_log_type_enabled(v54, v56))
  {
    uint64_t v57 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v58 = (void *)OUTLINED_FUNCTION_7_0(8LL);
    *(_DWORD *)uint64_t v57 = 138412290;
    uint64_t v71 = (uint64_t)v52;
    uint64_t v65 = v12;
    id v59 = v52;
    uint64_t v69 = v13;
    id v60 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v57 + 4);
    *uint64_t v58 = v52;

    _os_log_impl(&dword_0, v54, v56, "#DisambiguationReferenceResolver SRR selected %@", v57, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v58, 1LL);
    OUTLINED_FUNCTION_0_2((uint64_t)v58);
    OUTLINED_FUNCTION_0_2((uint64_t)v57);
    swift_release(v69);

    uint64_t v61 = v65;
  }

  else
  {
    swift_release(v13);

    uint64_t v61 = v12;
  }

  swift_release(v61);
  outlined destroy of PhoneRRTarget?( (uint64_t)v10,  &demangling cache variable for type metadata for PhoneRRTarget.Target?);
  return v52;
}

uint64_t DisambiguationReferenceResolver.extractReferenceResolutionEntity(parse:)()
{
  uint64_t v0 = Parse.usoTask.getter();
  if (!v0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)static Logger.siriPhone);
    int v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v8 = static os_log_type_t.debug.getter(v6, v7);
    if (os_log_type_enabled(v6, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_0, v6, v8, "#DisambiguationReferenceResolver couldn't extract UsoTask from Parse", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    return 0LL;
  }

  uint64_t v1 = v0;
  uint64_t v2 = DisambiguationReferenceResolver.extractPositionEntity(task:)(v0);
  if (!v2)
  {
    id v10 = UsoTask.convertToCommonPhoneCallEntity()();
    uint64_t v12 = v10;
    if (v10)
    {
      uint64_t v3 = DisambiguationReferenceResolver.extractAgentEntity(commonPhoneCall:)();
      swift_release(v12);
      goto LABEL_4;
    }

    swift_release(v1);
    return 0LL;
  }

  uint64_t v3 = v2;
LABEL_4:
  swift_release(v1);
  return v3;
}

uint64_t DisambiguationReferenceResolver.extractPositionEntity(task:)(uint64_t a1)
{
  if (!v15[3])
  {
    outlined destroy of PhoneRRTarget?((uint64_t)v15, &demangling cache variable for type metadata for Any?);
    return 0LL;
  }

  type metadata accessor for UsoTask_noVerb_uso_NoEntity(0LL);
  uint64_t v1 = v14;
  uint64_t v2 = swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter(v15, v2);
  swift_release(v1);
  uint64_t v3 = v15[0];
  if (!v15[0])
  {
    swift_release(v1);
    return 0LL;
  }

  uint64_t v4 = swift_retain();
  uint64_t v5 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter(v4);
  swift_release(v3);
  swift_release(v5);
  if (v5)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    uint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)static Logger.siriPhone);
    os_log_type_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v10 = static os_log_type_t.debug.getter(v8, v9);
    if (os_log_type_enabled(v8, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl( &dword_0,  v8,  v10,  "#DisambiguationReferenceResolver Found position reference, passing to SRR",  v11,  2u);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    uint64_t v12 = swift_retain();
    uint64_t v5 = CodeGenBase.entity.getter(v12);
    swift_release(v1);
    swift_release_n(v3, 2LL);
  }

  else
  {
    swift_release(v3);
    swift_release(v1);
  }

  return v5;
}

uint64_t DisambiguationReferenceResolver.extractAgentEntity(commonPhoneCall:)()
{
  uint64_t v0 = dispatch thunk of UsoEntity_common_PhoneCall.recipients.getter();
  if (v0) {
    uint64_t v1 = (void *)v0;
  }
  else {
    uint64_t v1 = _swiftEmptyArrayStorage;
  }
  dispatch thunk of UsoEntity_common_PhoneCall.participants.getter();
  uint64_t v32 = (uint64_t)v1;
  uint64_t v2 = (uint64_t)&v32;
  specialized Array.append<A>(contentsOf:)();
  uint64_t v3 = v32;
  uint64_t v32 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0) {
      uint64_t v2 = v3;
    }
    else {
      uint64_t v2 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v2);
    if (v4) {
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v4 = *(void *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_6:
      if (v4 >= 1)
      {
        uint64_t v5 = 0LL;
        while (1)
        {
          if ((v3 & 0xC000000000000001LL) != 0)
          {
            uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
            uint64_t v7 = v6;
          }

          else
          {
            uint64_t v7 = *(void *)(v3 + 8 * v5 + 32);
            uint64_t v6 = swift_retain();
          }

          os_log_type_t v8 = dispatch thunk of CodeGenListEntry.entry.getter(&v30, v6);
          uint64_t v9 = v30;
          if (v30) {
            break;
          }
          uint64_t v17 = dispatch thunk of CodeGenListEntry.entryAsExpression.getter(v8);
          if (v17)
          {
            uint64_t v18 = v17;
            dispatch thunk of CodeGenExpression.operand.getter(&v31);
            swift_release(v7);
            uint64_t v10 = swift_release(v18);
            uint64_t v9 = v31;
            if (v31) {
              goto LABEL_13;
            }
          }

          else
          {
            swift_release(v7);
          }

uint64_t outlined init with copy of PhoneRRTarget.Target?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneRRTarget.Target?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PhoneRRTarget.Target(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  OUTLINED_FUNCTION_2_0(v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type Graph and conformance Graph()
{
  unint64_t result = lazy protocol witness table cache variable for type Graph and conformance Graph;
  if (!lazy protocol witness table cache variable for type Graph and conformance Graph)
  {
    uint64_t v1 = type metadata accessor for Graph(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Graph, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Graph and conformance Graph);
  }

  return result;
}

ValueMetadata *type metadata accessor for DisambiguationReferenceResolver()
{
  return &type metadata for DisambiguationReferenceResolver;
}

uint64_t outlined destroy of PhoneRRTarget?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_2_0(v3);
  return a1;
}

unint64_t EmergencyDuringOngoingCallPromptType.description.getter(void *a1, void *a2, char a3)
{
  if (!a3)
  {
    id v24 = OUTLINED_FUNCTION_6_70();
    _StringGuts.grow(_:)(19LL);
    swift_bridgeObjectRelease();
    *(void *)uint64_t v32 = 0xD000000000000010LL;
    unint64_t v33 = 0x800000000034CE70LL;
    uint64_t v31 = (uint64_t)a1;
    id v25 = v24;
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INPerson?);
    v27._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v31, v26);
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_0_74();
    outlined consume of EmergencyDuringOngoingCallPromptType(a1, a2, 0);
    return *(void *)v32;
  }

  if (a3 == 1)
  {
    id v5 = OUTLINED_FUNCTION_6_70();
    id v6 = a2;
    _StringGuts.grow(_:)(31LL);
    swift_bridgeObjectRelease();
    unint64_t v33 = 0x800000000034CE50LL;
    static String._unconditionallyBridgeFromObjectiveC(_:)([v5 description]);
    OUTLINED_FUNCTION_3_86();
    OUTLINED_FUNCTION_1_67(v7, v8, v9, v10, v11, v12, v13, v14, v29, v31, 24);
    swift_bridgeObjectRelease();
    v15._uint64_t countAndFlagsBits = 8236LL;
    v15._object = (void *)0xE200000000000000LL;
    String.append(_:)(v15);
    static String._unconditionallyBridgeFromObjectiveC(_:)([v6 description]);
    OUTLINED_FUNCTION_3_86();
    OUTLINED_FUNCTION_1_67(v16, v17, v18, v19, v20, v21, v22, v23, v30, v31, v32[0]);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_0_74();

    return *(void *)v32;
  }

  return 0xD000000000000011LL;
}

void *static EmergencyDuringOngoingCallPromptType.from(intent:intentResolutionResult:)(void *a1)
{
  uint64_t v2 = objc_opt_self(&OBJC_CLASS___INAddCallParticipantIntent);
  uint64_t v3 = OUTLINED_FUNCTION_5_68(v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    id v5 = a1;
    id v6 = (char *)OUTLINED_FUNCTION_46_7((uint64_t)v5, "unsupportedReason");
    if (v6 != (_BYTE *)&dword_4 + 1)
    {
      if (v6 == (_BYTE *)&dword_4 + 2)
      {

        return 0LL;
      }

      goto LABEL_16;
    }

    outlined bridged method (pb) of @objc INAddCallParticipantIntent.participants.getter(v4);
    if (!v10)
    {

      return 0LL;
    }

    uint64_t v11 = v10;
    if ((unint64_t)v10 >> 62)
    {
      if (v10 >= 0) {
        v10 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      if (_CocoaArrayWrapper.endIndex.getter(v10)) {
        goto LABEL_11;
      }
    }

    else if (*(void *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFFF8LL)))
    {
LABEL_11:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (v11 & 0xC000000000000001LL) == 0, v11);
      if ((v11 & 0xC000000000000001LL) != 0) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v11);
      }
      else {
        id v12 = *(id *)(v11 + 32);
      }
      int v9 = v12;
      uint64_t v13 = OUTLINED_FUNCTION_34_0();
      id v14 = OUTLINED_FUNCTION_46_7(v13, "personHandle");
      if (v14)
      {
        outlined bridged method (ob) of @objc INPersonHandle.value.getter(v14);
        unint64_t v16 = v15;
      }

      else
      {
        unint64_t v16 = 0LL;
      }

      char v22 = specialized Optional<A>.isNilOrEmpty.getter((uint64_t)v14, v16);

      OUTLINED_FUNCTION_34_0();
      if ((v22 & 1) == 0) {
        return v9;
      }

      return 0LL;
    }

    OUTLINED_FUNCTION_34_0();
    return 0LL;
  }

  uint64_t v7 = objc_opt_self(&OBJC_CLASS___INStartCallIntent);
  uint64_t v8 = OUTLINED_FUNCTION_5_68(v7);
  if (v8
    && (id)_INStartCallContactUnsupportedReasonForeignEmergencyDisambiguation == OUTLINED_FUNCTION_46_7( v8,  "unsupportedReason"))
  {
    return 0LL;
  }

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance EmergencyDuringOngoingCallPromptType()
{
  return EmergencyDuringOngoingCallPromptType.description.getter(*(void **)v0, *(void **)(v0 + 8), *(_BYTE *)(v0 + 16));
}

void destroy for EmergencyDuringOngoingCallPromptType(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for EmergencyDuringOngoingCallPromptType(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of EmergencyDuringOngoingCallPromptType(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for EmergencyDuringOngoingCallPromptType(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of EmergencyDuringOngoingCallPromptType(*(id *)a2, v4, v5);
  id v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of EmergencyDuringOngoingCallPromptType(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for EmergencyDuringOngoingCallPromptType(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of EmergencyDuringOngoingCallPromptType(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for EmergencyDuringOngoingCallPromptType(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmergencyDuringOngoingCallPromptType( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 254;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for EmergencyDuringOngoingCallPromptType(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for EmergencyDuringOngoingCallPromptType(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for EmergencyDuringOngoingCallPromptType()
{
  return &type metadata for EmergencyDuringOngoingCallPromptType;
}

void OUTLINED_FUNCTION_0_74()
{
  v0._uint64_t countAndFlagsBits = 41LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

void OUTLINED_FUNCTION_1_67( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  v13._uint64_t countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
}

void OUTLINED_FUNCTION_3_86()
{
}

id OUTLINED_FUNCTION_6_70()
{
  return v0;
}

PhoneCallFlowDelegatePlugin::PhoneCallCommonCATsSimple::Properties_optional __swiftcall PhoneCallCommonCATsSimple.Properties.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallCommonCATsSimple.Properties.init(rawValue:),  v3);
  OUTLINED_FUNCTION_27_2();
  if (v1 >= 4) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallCommonCATsSimple::Properties_optional)4;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallCommonCATsSimple::Properties_optional)v1;
  }
}

uint64_t PhoneCallCommonCATsSimple.Properties.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1C09F0 + 4 * byte_3317C0[a1]))( 0xD000000000000016LL,  0x8000000000342170LL);
}

void sub_1C09F0()
{
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallCommonCATsSimple.Properties( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance PhoneCallCommonCATsSimple.Properties()
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallCommonCATsSimple.Properties( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::PhoneCallCommonCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallCommonCATsSimple.Properties@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallCommonCATsSimple::Properties_optional *a2@<X8>)
{
  result.value = PhoneCallCommonCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallCommonCATsSimple.Properties@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = PhoneCallCommonCATsSimple.Properties.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t PhoneCallCommonCATsSimple.orList(items:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_33_0((uint64_t)PhoneCallCommonCATsSimple.orList(items:));
}

uint64_t PhoneCallCommonCATsSimple.orList(items:)()
{
  unint64_t v2 = v1[2];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_8_2(v3, 80LL);
  v1[4] = v4;
  OUTLINED_FUNCTION_0_32(v4, (__n128)xmmword_31D870);
  v4[4].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v4[3].n128_u64[0] = v2;
  OUTLINED_FUNCTION_19_0();
  char v5 = (void *)swift_task_alloc(v0);
  v1[5] = v5;
  *char v5 = v1;
  v5[1] = PhoneCallCommonCATsSimple.orList(items:);
  OUTLINED_FUNCTION_38_2();
  return v7(0xD000000000000016LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_3_5();
  if (v1)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v3, v4, v5);
  }

  else
  {
    swift_bridgeObjectRelease();
    return OUTLINED_FUNCTION_8_3(v0, *(uint64_t (**)(void))(v2 + 8));
  }

BOOL PhoneCallCommonCATsSimple.OrListDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of PhoneCallCommonCATsSimple.OrListDialogIds.init(rawValue:);
  return SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallCommonCATsSimple.OrListDialogIds@<W0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = PhoneCallCommonCATsSimple.OrListDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t PhoneCallCommonCATsSimple.orListAsLabels(items:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_33_0((uint64_t)PhoneCallCommonCATsSimple.orListAsLabels(items:));
}

uint64_t PhoneCallCommonCATsSimple.orListAsLabels(items:)()
{
  unint64_t v2 = v1[2];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_8_2(v3, 80LL);
  v1[4] = v4;
  OUTLINED_FUNCTION_0_32(v4, (__n128)xmmword_31D870);
  v4[4].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v4[3].n128_u64[0] = v2;
  OUTLINED_FUNCTION_19_0();
  char v5 = (void *)swift_task_alloc(v0);
  v1[5] = v5;
  lazy protocol witness table accessor for type PhoneCallCommonCATsSimple.OrListDialogIds and conformance PhoneCallCommonCATsSimple.OrListDialogIds();
  *char v5 = v1;
  v5[1] = PhoneCallCommonCATsSimple.orListAsLabels(items:);
  OUTLINED_FUNCTION_38_2();
  return OUTLINED_FUNCTION_1_4( 0xD000000000000016LL,  v6,  (uint64_t)v4,  (uint64_t)&type metadata for PhoneCallCommonCATsSimple.OrListDialogIds,  v7,  v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_3_5();
  if (v1)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v3, v4, v5);
  }

  else
  {
    swift_bridgeObjectRelease();
    return OUTLINED_FUNCTION_8_3(v0, *(uint64_t (**)(void))(v2 + 8));
  }

unint64_t lazy protocol witness table accessor for type PhoneCallCommonCATsSimple.OrListDialogIds and conformance PhoneCallCommonCATsSimple.OrListDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.OrListDialogIds and conformance PhoneCallCommonCATsSimple.OrListDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.OrListDialogIds and conformance PhoneCallCommonCATsSimple.OrListDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallCommonCATsSimple.OrListDialogIds,  &type metadata for PhoneCallCommonCATsSimple.OrListDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.OrListDialogIds and conformance PhoneCallCommonCATsSimple.OrListDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.OrListDialogIds and conformance PhoneCallCommonCATsSimple.OrListDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.OrListDialogIds and conformance PhoneCallCommonCATsSimple.OrListDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallCommonCATsSimple.OrListDialogIds,  &type metadata for PhoneCallCommonCATsSimple.OrListDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.OrListDialogIds and conformance PhoneCallCommonCATsSimple.OrListDialogIds);
  }

  return result;
}

uint64_t PhoneCallCommonCATsSimple.orListForPics(contactNamesNotFromPics:contactNameOfPics:inferenceSource:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_18_0(v5);
  v4[7] = OUTLINED_FUNCTION_39_18(v6);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PhoneCallCommonCATsSimple.orListForPics(contactNamesNotFromPics:contactNameOfPics:inferenceSource:)()
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_8_2(v4, 176LL);
  *(void *)(v2 + 64) = v5;
  *(_OWORD *)(v5 + 16) = xmmword_320080;
  *(void *)(v5 + 32) = v3 | 6;
  *(void *)(v5 + 40) = 0x8000000000348B10LL;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  *(void *)(v5 + 48) = v0;
  *(void *)(v5 + 72) = v6;
  *(void *)(v5 + 80) = v3;
  *(void *)(v5 + 88) = 0x8000000000348B30LL;
  OUTLINED_FUNCTION_33_16(v6, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = type metadata accessor for SpeakableString(0LL);
  OUTLINED_FUNCTION_15_52(v8);
  if (v9)
  {
    OUTLINED_FUNCTION_20_14();
    outlined destroy of SpeakableString?((uint64_t)v1, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
  }

  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_36_7();
    OUTLINED_FUNCTION_25_19((uint64_t)v10);
    OUTLINED_FUNCTION_20_14();
  }

  uint64_t v11 = OUTLINED_FUNCTION_4_74();
  outlined init with copy of SpeakableString?( v11,  v5 + 96,  &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_75_12();
  if (v9)
  {
    outlined destroy of SpeakableString?(v5 + 96, &demangling cache variable for type metadata for SpeakableString?);
    *uint64_t v1 = 0u;
    v1[1] = 0u;
  }

  else
  {
    id v12 = OUTLINED_FUNCTION_32_12();
    OUTLINED_FUNCTION_26_17((uint64_t)v12);
  }

  Swift::String v13 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v2 + 72) = v13;
  *Swift::String v13 = v2;
  v13[1] = PhoneCallCommonCATsSimple.orListForPics(contactNamesNotFromPics:contactNameOfPics:inferenceSource:);
  return v15(v3 + 12, 0x8000000000342190LL, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  OUTLINED_FUNCTION_107_7();
  if (v1)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v4, v5, v6);
  }

  else
  {
    OUTLINED_FUNCTION_29_30();
    OUTLINED_FUNCTION_23_3();
    swift_task_dealloc(v2);
    return OUTLINED_FUNCTION_8_3(v0, *(uint64_t (**)(void))(v3 + 8));
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_23_3();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL PhoneCallCommonCATsSimple.OrListForPicsDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of PhoneCallCommonCATsSimple.OrListForPicsDialogIds.init(rawValue:);
  return SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallCommonCATsSimple.OrListForPicsDialogIds@<W0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = PhoneCallCommonCATsSimple.OrListForPicsDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t PhoneCallCommonCATsSimple.orListForPicsAsLabels(contactNamesNotFromPics:contactNameOfPics:inferenceSource:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_18_0(v5);
  v4[7] = OUTLINED_FUNCTION_39_18(v6);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PhoneCallCommonCATsSimple.orListForPicsAsLabels(contactNamesNotFromPics:contactNameOfPics:inferenceSource:)()
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_8_2(v4, 176LL);
  *(void *)(v2 + 64) = v5;
  *(_OWORD *)(v5 + 16) = xmmword_320080;
  *(void *)(v5 + 32) = v3 | 6;
  *(void *)(v5 + 40) = 0x8000000000348B10LL;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  *(void *)(v5 + 48) = v0;
  *(void *)(v5 + 72) = v6;
  *(void *)(v5 + 80) = v3;
  *(void *)(v5 + 88) = 0x8000000000348B30LL;
  OUTLINED_FUNCTION_33_16(v6, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = type metadata accessor for SpeakableString(0LL);
  OUTLINED_FUNCTION_15_52(v8);
  if (v9)
  {
    OUTLINED_FUNCTION_20_14();
    outlined destroy of SpeakableString?((uint64_t)v1, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
  }

  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_36_7();
    OUTLINED_FUNCTION_25_19((uint64_t)v10);
    OUTLINED_FUNCTION_20_14();
  }

  uint64_t v11 = OUTLINED_FUNCTION_4_74();
  outlined init with copy of SpeakableString?( v11,  v5 + 96,  &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_75_12();
  if (v9)
  {
    outlined destroy of SpeakableString?(v5 + 96, &demangling cache variable for type metadata for SpeakableString?);
    *Swift::OpaquePointer v1 = 0u;
    v1[1] = 0u;
  }

  else
  {
    id v12 = OUTLINED_FUNCTION_32_12();
    OUTLINED_FUNCTION_26_17((uint64_t)v12);
  }

  Swift::String v13 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  *(void *)(v2 + 72) = v13;
  lazy protocol witness table accessor for type PhoneCallCommonCATsSimple.OrListForPicsDialogIds and conformance PhoneCallCommonCATsSimple.OrListForPicsDialogIds();
  *Swift::String v13 = v2;
  v13[1] = PhoneCallCommonCATsSimple.orListForPicsAsLabels(contactNamesNotFromPics:contactNameOfPics:inferenceSource:);
  OUTLINED_FUNCTION_38_2();
  return v15();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  OUTLINED_FUNCTION_107_7();
  if (v1)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v4, v5, v6);
  }

  else
  {
    OUTLINED_FUNCTION_29_30();
    OUTLINED_FUNCTION_23_3();
    swift_task_dealloc(v2);
    return OUTLINED_FUNCTION_8_3(v0, *(uint64_t (**)(void))(v3 + 8));
  }

unint64_t lazy protocol witness table accessor for type PhoneCallCommonCATsSimple.OrListForPicsDialogIds and conformance PhoneCallCommonCATsSimple.OrListForPicsDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.OrListForPicsDialogIds and conformance PhoneCallCommonCATsSimple.OrListForPicsDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.OrListForPicsDialogIds and conformance PhoneCallCommonCATsSimple.OrListForPicsDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallCommonCATsSimple.OrListForPicsDialogIds,  &type metadata for PhoneCallCommonCATsSimple.OrListForPicsDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.OrListForPicsDialogIds and conformance PhoneCallCommonCATsSimple.OrListForPicsDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.OrListForPicsDialogIds and conformance PhoneCallCommonCATsSimple.OrListForPicsDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.OrListForPicsDialogIds and conformance PhoneCallCommonCATsSimple.OrListForPicsDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallCommonCATsSimple.OrListForPicsDialogIds,  &type metadata for PhoneCallCommonCATsSimple.OrListForPicsDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.OrListForPicsDialogIds and conformance PhoneCallCommonCATsSimple.OrListForPicsDialogIds);
  }

  return result;
}

uint64_t PhoneCallCommonCATsSimple.phoneFeaturesUnavailable()()
{
  Swift::OpaquePointer v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 16) = v1;
  *Swift::OpaquePointer v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  return OUTLINED_FUNCTION_4_2(0xD000000000000028LL, v2, (uint64_t)_swiftEmptyArrayStorage, v4);
}

BOOL PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds.init(rawValue:);
  return SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds@<W0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t PhoneCallCommonCATsSimple.phoneFeaturesUnavailableAsLabels()()
{
  Swift::OpaquePointer v1 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  *(void *)(v0 + 16) = v1;
  lazy protocol witness table accessor for type PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds and conformance PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds();
  *Swift::OpaquePointer v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  return OUTLINED_FUNCTION_1_4( 0xD000000000000028LL,  v2,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)&type metadata for PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds,  v3,  v5);
}

unint64_t lazy protocol witness table accessor for type PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds and conformance PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds and conformance PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds and conformance PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds,  &type metadata for PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds and conformance PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds and conformance PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds and conformance PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds,  &type metadata for PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds and conformance PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds);
  }

  return result;
}

uint64_t PhoneCallCommonCATsSimple.promptCancelled()()
{
  Swift::OpaquePointer v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 16) = v1;
  *Swift::OpaquePointer v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCall();
  OUTLINED_FUNCTION_38_2();
  return OUTLINED_FUNCTION_4_2(0xD00000000000001FLL, v2, (uint64_t)_swiftEmptyArrayStorage, v4);
}

BOOL PhoneCallCommonCATsSimple.PromptCancelledDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of PhoneCallCommonCATsSimple.PromptCancelledDialogIds.init(rawValue:);
  return SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallCommonCATsSimple.PromptCancelledDialogIds@<W0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = PhoneCallCommonCATsSimple.PromptCancelledDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t PhoneCallCommonCATsSimple.promptCancelledAsLabels()()
{
  Swift::OpaquePointer v1 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  *(void *)(v0 + 16) = v1;
  lazy protocol witness table accessor for type PhoneCallCommonCATsSimple.PromptCancelledDialogIds and conformance PhoneCallCommonCATsSimple.PromptCancelledDialogIds();
  *Swift::OpaquePointer v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  return OUTLINED_FUNCTION_1_4( 0xD00000000000001FLL,  v2,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)&type metadata for PhoneCallCommonCATsSimple.PromptCancelledDialogIds,  v3,  v5);
}

unint64_t lazy protocol witness table accessor for type PhoneCallCommonCATsSimple.PromptCancelledDialogIds and conformance PhoneCallCommonCATsSimple.PromptCancelledDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.PromptCancelledDialogIds and conformance PhoneCallCommonCATsSimple.PromptCancelledDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.PromptCancelledDialogIds and conformance PhoneCallCommonCATsSimple.PromptCancelledDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallCommonCATsSimple.PromptCancelledDialogIds,  &type metadata for PhoneCallCommonCATsSimple.PromptCancelledDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.PromptCancelledDialogIds and conformance PhoneCallCommonCATsSimple.PromptCancelledDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.PromptCancelledDialogIds and conformance PhoneCallCommonCATsSimple.PromptCancelledDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.PromptCancelledDialogIds and conformance PhoneCallCommonCATsSimple.PromptCancelledDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallCommonCATsSimple.PromptCancelledDialogIds,  &type metadata for PhoneCallCommonCATsSimple.PromptCancelledDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.PromptCancelledDialogIds and conformance PhoneCallCommonCATsSimple.PromptCancelledDialogIds);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneCallCommonCATsSimple.Properties and conformance PhoneCallCommonCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.Properties and conformance PhoneCallCommonCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.Properties and conformance PhoneCallCommonCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallCommonCATsSimple.Properties,  &type metadata for PhoneCallCommonCATsSimple.Properties);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallCommonCATsSimple.Properties and conformance PhoneCallCommonCATsSimple.Properties);
  }

  return result;
}

uint64_t type metadata completion function for PhoneCallCommonCATsSimple(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for PhoneCallCommonCATsSimple);
}

uint64_t ObjC metadata update function for PhoneCallCommonCATsSimple()
{
  return type metadata accessor for PhoneCallCommonCATsSimple(0LL);
}

uint64_t storeEnumTagSinglePayload for PhoneCallCommonCATsSimple.Properties( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1C16A8 + 4 * byte_3317C9[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1C16DC + 4 * byte_3317C4[v4]))();
}

uint64_t sub_1C16DC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C16E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1C16ECLL);
  }
  return result;
}

uint64_t sub_1C16F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1C1700LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1C1704(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C170C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for PhoneCallCommonCATsSimple.Properties()
{
}

void type metadata accessor for PhoneCallCommonCATsSimple.OrListDialogIds()
{
}

void type metadata accessor for PhoneCallCommonCATsSimple.OrListForPicsDialogIds()
{
}

void type metadata accessor for PhoneCallCommonCATsSimple.PhoneFeaturesUnavailableDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for PhoneCallCommonCATsSimple.OrListDialogIds(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1C178C + 4 * byte_3317CE[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1C17AC + 4 * byte_3317D3[v4]))();
  }
}

_BYTE *sub_1C178C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1C17AC(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1C17B4(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1C17BC(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1C17C4(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1C17CC(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void type metadata accessor for PhoneCallCommonCATsSimple.PromptCancelledDialogIds()
{
}

uint64_t OUTLINED_FUNCTION_4_74()
{
  uint64_t result = *(void *)(v0 + 32);
  *(void *)(v1 + 128) = 0x636E657265666E69LL;
  *(void *)(v1 + 136) = 0xEF656372756F5365LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_15_52(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_29_30()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 64));
}

  ;
}

uint64_t OUTLINED_FUNCTION_39_18(uint64_t a1)
{
  *(void *)(v2 + 48) = a1;
  return swift_task_alloc(v1);
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology9UsoEntityCG_0D28ReferenceResolutionDataModel12ResolveQueryCs5NeverOTg5033_s27PhoneCallFlowDelegatePlugin33h7Contacti183WrapperO20runCombinedSRRandCRR33_6E03C60D186988DA16A96BF8932754FFLL13siriKitIntent3app02nlW013sharedGlobals20contactGroupResolverAC20SRRResolutionResultsAELLVAA013NCRResolvableW0_p_07d91AppH03AppCAA0aB8NLIntent_pAA22SharedGlobalsProviding_pAA0G14GroupResolving_ptFZSay04SirifH9j26Model8RRResultOGyXEfU_AT12lm3C12d9Ontology9fG6CXEfU_AJ21MatchedResultsSettingOTf1cn_n( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v18 = a2;
  uint64_t v5 = type metadata accessor for MatchedResultsSetting(0LL);
  uint64_t v17 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v8) {
      break;
    }
    os_log_type_t v20 = _swiftEmptyArrayStorage;
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)(v8);
    if (v8 < 0)
    {
      __break(1u);
      return result;
    }

    uint64_t v16 = v3;
    swift_beginAccess(v18, v19, 0LL, 0LL);
    uint64_t v10 = 0LL;
    while (v8 != v10)
    {
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a1);
      }

      else
      {
        uint64_t v11 = *(void *)(a1 + 8 * v10 + 32);
        swift_retain(v11);
      }

      ++v10;
      (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v7, v18, v5);
      uint64_t v12 = type metadata accessor for ResolveQuery(0LL);
      swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
      uint64_t v13 = ResolveQuery.init(referenceEntity:alternativeEntityTypes:restrictedEntitiesKey:matchedResultsSetting:)( v11,  0LL,  0LL,  0LL,  v7);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v3 = v20[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v3);
      uint64_t v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v3, v13);
      specialized ContiguousArray._endMutation()(v14);
      if (v8 == v10) {
        return v20;
      }
    }

    __break(1u);
LABEL_14:
    if (a1 < 0) {
      uint64_t v15 = a1;
    }
    else {
      uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease(a1);
  }

  return result;
}

void *specialized Sequence.filter(_:)(unint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1;
  if (a1 >> 62)
  {
LABEL_27:
    if (v3 < 0) {
      uint64_t v20 = v3;
    }
    else {
      uint64_t v20 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v20);
  }

  else
  {
    uint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v21 = v3;
  if (v4)
  {
    unint64_t v5 = 0LL;
    unint64_t v23 = v3 & 0xC000000000000001LL;
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v7 = v3 + 32;
    uint64_t v3 = (uint64_t)_swiftEmptyArrayStorage;
    char v22 = a2;
    do
    {
      unint64_t v8 = v5;
      while (1)
      {
        if (v23)
        {
          id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v21);
        }

        else
        {
          if (v8 >= *(void *)(v6 + 16))
          {
            __break(1u);
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }

          id v9 = *(id *)(v7 + 8 * v8);
        }

        uint64_t v10 = v9;
        unint64_t v5 = v8 + 1;
        if (__OFADD__(v8, 1LL)) {
          goto LABEL_26;
        }
        uint64_t v11 = *a2;
        if (!*(void *)(*a2 + 16)) {
          break;
        }
        uint64_t v12 = static Hasher._hash(seed:_:)(*(void *)(v11 + 40), v8);
        uint64_t v13 = -1LL << *(_BYTE *)(v11 + 32);
        unint64_t v14 = v12 & ~v13;
        if (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) == 0) {
          break;
        }
        uint64_t v15 = *(void *)(v11 + 48);
        if (*(void *)(v15 + 8 * v14) != v8)
        {
          uint64_t v16 = ~v13;
          do
          {
            unint64_t v14 = (v14 + 1) & v16;
            if (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) == 0) {
              goto LABEL_19;
            }
          }

          while (*(void *)(v15 + 8 * v14) != v8);
        }

        ++v8;
        if (v5 == v4) {
          goto LABEL_24;
        }
      }

__n128 static ReferenceContactResolutionWrapper.resolveUpdateSKIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:contactGroupResolver:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  specialized static ReferenceContactResolutionWrapper.resolveUpdateSKIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:contactGroupResolver:)( a1,  a3,  a4,  a5,  a6,  a7,  a8,  a9 & 1,  a10,  a11,  a12,  ObjectType,  a2,  v22,  a10,  a11,  v23,  v24,  v25,  v26,  v27,  v28,  v29,  v30,  v31);
  return result;
}

uint64_t closure #1 in static ReferenceContactResolutionWrapper.runCombinedSRRandCRR(siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology9UsoEntityCG_0D28ReferenceResolutionDataModel12ResolveQueryCs5NeverOTg5033_s27PhoneCallFlowDelegatePlugin33h7Contacti183WrapperO20runCombinedSRRandCRR33_6E03C60D186988DA16A96BF8932754FFLL13siriKitIntent3app02nlW013sharedGlobals20contactGroupResolverAC20SRRResolutionResultsAELLVAA013NCRResolvableW0_p_07d91AppH03AppCAA0aB8NLIntent_pAA22SharedGlobalsProviding_pAA0G14GroupResolving_ptFZSay04SirifH9j26Model8RRResultOGyXEfU_AT12lm3C12d9Ontology9fG6CXEfU_AJ21MatchedResultsSettingOTf1cn_n( v6,  a1);
  OUTLINED_FUNCTION_4_1();
  v11[2] = a2;
  specialized Sequence.compactMap<A>(_:)( (uint64_t)partial apply for closure #2 in closure #1 in static ReferenceContactResolutionWrapper.runCombinedSRRandCRR(siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:),  (uint64_t)v11,  (unint64_t)v7);
  uint64_t v9 = v8;
  uint64_t result = OUTLINED_FUNCTION_62();
  *a3 = v9;
  return result;
}

uint64_t closure #2 in closure #1 in static ReferenceContactResolutionWrapper.runCombinedSRRandCRR(siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( uint64_t a1, void *a2)
{
  uint64_t v2 = a2[3];
  uint64_t v3 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v2);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 200))(v5, v2, v3);
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  RRReferenceResolverProtocol.resolveReference(resolveQuery:)();
  return __swift_destroy_boxed_opaque_existential_1(v5);
}

void static ReferenceContactResolutionWrapper.dedupePersons(persons:sharedGlobals:)( unint64_t a1, void *a2)
{
  uint64_t v79 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
    OUTLINED_FUNCTION_8_1();
    uint64_t v4 = OUTLINED_FUNCTION_61_1();
    if (v4) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
    OUTLINED_FUNCTION_8_1();
    if (v4)
    {
LABEL_3:
      if (v4 < 1) {
        goto LABEL_68;
      }
      uint64_t v5 = 0LL;
      unint64_t v6 = a1;
      unint64_t v7 = a1 & 0xC000000000000001LL;
      while (1)
      {
        if (v7) {
          id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v6);
        }
        else {
          id v8 = OUTLINED_FUNCTION_27_10(v6 + 8 * v5);
        }
        uint64_t v9 = v8;
        id v10 = [v8 personHandle];
        if (!v10) {
          goto LABEL_14;
        }
        id v11 = v10;
        OUTLINED_FUNCTION_94_6(a2);
        OUTLINED_FUNCTION_62_12();
        uint64_t v12 = v77[3];
        uint64_t v13 = v77[4];
        OUTLINED_FUNCTION_94_6(v77);
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 48))(v12, v13);
        uint64_t v16 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v15 + 16))(v11, v14, v15);
        if (!v16) {
          break;
        }
        unint64_t v17 = (void *)v16;
        __swift_destroy_boxed_opaque_existential_1(v77);
        id v18 = v17;
        OUTLINED_FUNCTION_101_4();
        unint64_t v20 = v79[2];
        unint64_t v19 = v79[3];
        if (v20 >= v19 >> 1) {
          OUTLINED_FUNCTION_3_25(v20 + 1, v19);
        }
        uint64_t v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v18);
        specialized Array._endMutation()(v21, v22, v23, v24);

LABEL_22:
        ++v5;

        if (v4 == v5)
        {
          OUTLINED_FUNCTION_13_1();
          uint64_t v37 = v79;
          goto LABEL_26;
        }
      }

      __swift_destroy_boxed_opaque_existential_1(v77);
LABEL_14:
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v25 = OUTLINED_FUNCTION_15_1();
      uint64_t v26 = (os_log_s *)__swift_project_value_buffer(v25, (uint64_t)static Logger.siriPhone);
      id v11 = v9;
      Logger.logObject.getter(v11);
      os_log_type_t v27 = OUTLINED_FUNCTION_6_0();
      if (OUTLINED_FUNCTION_29_5(v27))
      {
        uint64_t v28 = OUTLINED_FUNCTION_7_0(12LL);
        uint64_t v29 = (void *)OUTLINED_FUNCTION_7_0(8LL);
        *(_DWORD *)uint64_t v28 = 138412290;
        id v30 = [v11 personHandle];
        *(void *)(v28 + 4) = v30;
        *uint64_t v29 = v30;

        OUTLINED_FUNCTION_57_0( &dword_0,  v26,  (os_log_type_t)v9,  "#ReferenceContactResolutionWrapper: Could not normalize handles %@ for validation.",  (uint8_t *)v28);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        OUTLINED_FUNCTION_17_0((uint64_t)v29);
        OUTLINED_FUNCTION_0_2((uint64_t)v29);
        OUTLINED_FUNCTION_0_2(v28);
      }

      else
      {

        uint64_t v26 = (os_log_s *)v11;
      }

      OUTLINED_FUNCTION_101_4();
      unint64_t v32 = v79[2];
      unint64_t v31 = v79[3];
      if (v32 >= v31 >> 1) {
        OUTLINED_FUNCTION_3_25(v32 + 1, v31);
      }
      uint64_t v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, 0LL);
      specialized Array._endMutation()(v33, v34, v35, v36);
      goto LABEL_22;
    }
  }

  OUTLINED_FUNCTION_39();
  uint64_t v37 = _swiftEmptyArrayStorage;
LABEL_26:
  v77[0] = (uint64_t)&_swiftEmptySetSingleton;
  uint64_t v38 = v37[2];
  if (!v38)
  {
LABEL_60:
    unint64_t v67 = OUTLINED_FUNCTION_8_1();
    uint64_t v68 = specialized Sequence.filter(_:)(v67, v77);
    uint64_t v69 = v68[2];
    if (v69)
    {
      uint64_t v78 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v69);
      uint64_t v70 = 5LL;
      do
      {
        id v71 = (id)v68[v70];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v71);
        uint64_t v72 = v78[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v72);
        uint64_t v73 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v72, v71);
        specialized ContiguousArray._endMutation()(v73);
        v70 += 2LL;
        --v69;
      }

      while (v69);
    }

    OUTLINED_FUNCTION_39();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }

  uint64_t v39 = v37 + 4;
  swift_bridgeObjectRetain();
  unint64_t v40 = 0LL;
  uint64_t v75 = v38;
  uint64_t v76 = v37;
  uint64_t v74 = v37 + 4;
  while (1)
  {
    if (v40 >= v37[2]) {
      goto LABEL_66;
    }
    unint64_t v41 = v40;
    uint64_t v42 = (void *)v39[v40++];
    if (v42)
    {
      uint64_t v43 = v77[0];
      if (!*(void *)(v77[0] + 16)) {
        goto LABEL_36;
      }
      static Hasher._hash(seed:_:)(*(void *)(v77[0] + 40), v41);
      OUTLINED_FUNCTION_77_11();
      if ((v45 & 1) == 0) {
        goto LABEL_36;
      }
      if (*(void *)(*(void *)(v43 + 48) + 8 * v44) != v41) {
        break;
      }
    }

LABEL_47:
      if (v52)
      {
        id v59 = v52;
        if ((TUHandlesAreCanonicallyEqual(v50, v59) & 1) != 0)
        {
          if (one-time initialization token for siriPhone != -1) {
            swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
          }
          uint64_t v60 = OUTLINED_FUNCTION_15_1();
          uint64_t v61 = (os_log_s *)__swift_project_value_buffer(v60, (uint64_t)static Logger.siriPhone);
          uint64_t v62 = (os_log_s *)v59;
          uint64_t v63 = v61;
          Logger.logObject.getter(v62);
          os_log_type_t v64 = OUTLINED_FUNCTION_6_0();
          if (OUTLINED_FUNCTION_93(v64))
          {
            uint64_t v65 = OUTLINED_FUNCTION_7_0(22LL);
            uint64_t v66 = (void *)OUTLINED_FUNCTION_7_0(8LL);
            *(_DWORD *)uint64_t v65 = 134218242;
            *(void *)(v65 + 4) = v51;
            *(_WORD *)(v65 + 12) = 2112;
            *(void *)(v65 + 14) = v62;
            *uint64_t v66 = v52;
            _os_log_impl( &dword_0,  v61,  (os_log_type_t)v61,  "#ReferenceContactResolutionWrapper index:%ld handle:%@ is a dupe, filter it out.",  (uint8_t *)v65,  0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            OUTLINED_FUNCTION_17_0((uint64_t)v66);
            OUTLINED_FUNCTION_0_2((uint64_t)v66);
            OUTLINED_FUNCTION_0_2(v65);
          }

          else
          {

            uint64_t v63 = v62;
          }

          specialized Set._Variant.insert(_:)((uint64_t *)&v78, v51);
        }

        else
        {
        }
      }
    }

  swift_bridgeObjectRelease();
  return v64;
}

              __break(1u);
              return;
            }
          }

          else
          {
            uint64_t v53 = *(void *)((char *)&dword_10 + (v51 & 0xFFFFFFFFFFFFF8LL));
            if (v53) {
              goto LABEL_28;
            }
          }

      goto LABEL_48;
    }

    v136 = v0 + 72;
    v138 = (uint64_t *)(v0 + 56);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v4 = *(void *)(v0 + 104);
    uint64_t v5 = *(os_log_s **)(v0 + 112);
    unint64_t v6 = OUTLINED_FUNCTION_15_1();
    unint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_11(v4);
    OUTLINED_FUNCTION_11_18((uint64_t)v5);
    OUTLINED_FUNCTION_138_6();
    id v8 = OUTLINED_FUNCTION_6_0();
    uint64_t v9 = OUTLINED_FUNCTION_6_9(v5);
    id v11 = *(void *)(v0 + 104);
    id v10 = *(void *)(v0 + 112);
    if (v9)
    {
      v121 = v0 + 80;
      v133 = v7;
      uint64_t v12 = OUTLINED_FUNCTION_7_0(22LL);
      uint64_t v125 = OUTLINED_FUNCTION_7_0(64LL);
      v140 = v125;
      uint64_t v141 = 0LL;
      *(_DWORD *)uint64_t v12 = 136315394;
      v120 = v12 + 4;
      v129 = (uint64_t)v2;
      LODWORD(v123) = v8;
      uint64_t v13 = *(void *)(v10 + 368);
      OUTLINED_FUNCTION_182_2();
      OUTLINED_FUNCTION_128();
      OUTLINED_FUNCTION_8_1();
      uint64_t v122 = (uint64_t)v5;
      uint64_t v14 = OUTLINED_FUNCTION_99_2();
      OUTLINED_FUNCTION_26_49(v14, v15, v13);
      OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_23_5();
      *(void *)(v0 + 72) = OUTLINED_FUNCTION_10_3(v141, v16, &v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v136, v0 + 80, v12 + 4);
      OUTLINED_FUNCTION_62();
      OUTLINED_FUNCTION_31_1(v10);
      *(_WORD *)(v12 + 12) = 2080;
      unint64_t v17 = OUTLINED_FUNCTION_46_5();
      id v18 = OUTLINED_FUNCTION_36_1();
      unint64_t v19 = Array.description.getter(v18, v17);
      uint64_t v21 = v20;
      OUTLINED_FUNCTION_129();
      *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v140);
      OUTLINED_FUNCTION_14_0(v0 + 80, v0 + 88, v22, v12 + 22);
      uint64_t v2 = (os_log_s *)v129;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_7_4(v11);
      OUTLINED_FUNCTION_33_6( &dword_0,  v5,  (os_log_type_t)v123,  "%s executeSmartAppSelect: Found more than 1 app:'%s'. Running Smart enough App Selection ..",  (uint8_t *)v12);
      OUTLINED_FUNCTION_42_2(v125);
      OUTLINED_FUNCTION_0_2(v125);
      OUTLINED_FUNCTION_0_2(v12);
    }

    else
    {
      OUTLINED_FUNCTION_31_1(*(void *)(v0 + 112));
      OUTLINED_FUNCTION_7_4(v11);
    }

    if (v2)
    {
      swift_bridgeObjectRetain();
      id v50 = OUTLINED_FUNCTION_61_1();
    }

    else
    {
      id v50 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL));
      swift_bridgeObjectRetain();
    }

    if (!v50) {
      break;
    }
    uint64_t v65 = *(void *)(v0 + 104);
    uint64_t v2 = (os_log_s *)(v1 & 0xC000000000000001LL);
    if ((v1 & 0xC000000000000001LL) != 0)
    {
      uint64_t v1 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v65);
    }

    else
    {
      uint64_t v1 = *(void *)(v65 + 32);
      OUTLINED_FUNCTION_95_1();
    }

    if (App.isFirstParty()())
    {
LABEL_27:
      *(void *)(v0 + 120) = v1;
      uint64_t v66 = *(void *)(v0 + 112);
      unint64_t v67 = *(void *)(v0 + 96);
      swift_bridgeObjectRelease();
      PhoneAppResolutionOnDeviceFlowStrategy.buildUpInputIntent(phoneCallNLIntent:sharedGlobals:app:)( v67,  v68,  v1,  v69,  v70,  v71,  v72,  v73,  v119,  v120,  v121,  v122,  v123,  v125,  v129,  v133,  v136,  (uint64_t)v138,  v140,  v141,  v142,  v143,  v144,  v145,  v146,  v147);
      *(void *)(v0 + 128) = v74;
      uint64_t v76 = *(void **)(v0 + 112);
      if (v74)
      {
        uint64_t v77 = v74;
        uint64_t v78 = v75;
        uint64_t v79 = *(void *)(v0 + 104);
        uint64_t v80 = v76[28];
        uint64_t v81 = v76[29];
        OUTLINED_FUNCTION_42((void *)(v66 + 200));
        uint64_t v82 = *(void (**)(void *, uint64_t))(*(void *)(*(uint64_t (**)(uint64_t, uint64_t))(v81 + 192))( v80,  v81)
                                                     + 176LL);
        uint64_t v83 = v77;
        v82(v77, v78);

        OUTLINED_FUNCTION_38_1();
        uint64_t v84 = v76[37];
        uint64_t v85 = (*(uint64_t (**)(uint64_t))(*(void *)v84 + 240LL))(v79);
        *(void *)(v0 + 136) = v85;
        uint64_t v86 = OUTLINED_FUNCTION_108_5(*(void *)(*(void *)v84 + 216LL));
        v139 = v87;
        uint64_t v88 = (void *)swift_task_alloc(v86);
        *(void *)(v0 + 144) = v88;
        *uint64_t v88 = v0;
        v88[1] = PhoneAppResolutionOnDeviceFlowStrategy.executeSmartAppSelect(phoneCallNLIntent:inputApps:);
        return v139(*(void *)(v0 + 88), v83, v78, *(void *)(v0 + 96), v85);
      }

      OUTLINED_FUNCTION_11_18(*(void *)(v0 + 112));
      uint64_t v24 = (os_log_s *)OUTLINED_FUNCTION_138_6();
      uint64_t v102 = static os_log_type_t.error.getter();
      v103 = OUTLINED_FUNCTION_6_9(v24);
      BOOL v104 = *(void **)(v0 + 112);
      if (v103)
      {
        uint64_t v132 = v102;
        uint64_t v105 = OUTLINED_FUNCTION_7_0(12LL);
        v135 = OUTLINED_FUNCTION_7_0(32LL);
        v140 = v135;
        uint64_t v141 = 0LL;
        OUTLINED_FUNCTION_145_7(4.8149e-34);
        uint64_t v124 = v106;
        v128 = (uint8_t *)v105;
        uint64_t v108 = v104[44];
        uint64_t v107 = v104[45];
        uint64_t v109 = v104[46];
        uint64_t v110 = (void *)v104[47];
        OUTLINED_FUNCTION_182_2();
        OUTLINED_FUNCTION_20_14();
        OUTLINED_FUNCTION_48_0();
        DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v108, v107, v109, v110);
        OUTLINED_FUNCTION_34_0();
        OUTLINED_FUNCTION_13_1();
        uint64_t v112 = OUTLINED_FUNCTION_10_3(v141, v111, &v140);
        uint64_t v113 = OUTLINED_FUNCTION_206_2(v112);
        OUTLINED_FUNCTION_33_35((uint64_t)v113, v114, v124);
        OUTLINED_FUNCTION_62();
        OUTLINED_FUNCTION_31_1((uint64_t)v104);
        OUTLINED_FUNCTION_57_0( &dword_0,  v24,  v132,  "%s executeSmartAppSelect: couldn't convert phoneCallNLIntent to an INStartCallIntent (using a 1P Phone app)..",  v128);
        OUTLINED_FUNCTION_17_0(v135);
        OUTLINED_FUNCTION_0_2(v135);
        OUTLINED_FUNCTION_0_2((uint64_t)v128);
        OUTLINED_FUNCTION_76();
      }

      else
      {
        OUTLINED_FUNCTION_76();
        OUTLINED_FUNCTION_31_1((uint64_t)v104);
      }

      goto LABEL_47;
    }

    OUTLINED_FUNCTION_76();
    if (v50 == 1) {
      break;
    }
    uint64_t v90 = *(void *)(v0 + 104);
    v91 = 5LL;
    while (1)
    {
      if (v2)
      {
        uint64_t v1 = specialized _ArrayBuffer._getElementSlowPath(_:)(v91 - 4, *(void *)(v0 + 104));
      }

      else
      {
        uint64_t v1 = *(void *)(v90 + 8 * v91);
        OUTLINED_FUNCTION_95_1();
      }

      unint64_t v92 = v91 - 3;
      if (__OFADD__(v91 - 4, 1LL)) {
        break;
      }
      if (App.isFirstParty()()) {
        goto LABEL_27;
      }
      OUTLINED_FUNCTION_76();
      ++v91;
      if (v92 == v50) {
        goto LABEL_37;
      }
    }

    __break(1u);
LABEL_50:
    OUTLINED_FUNCTION_124();
    uint64_t v3 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_4_1();
  }

Class static ReferenceContactResolutionWrapper.skeletonINPerson(persons:)()
{
  uint64_t v58 = v2;
  uint64_t v59 = v3;
  uint64_t v4 = OUTLINED_FUNCTION_20_35();
  uint64_t v5 = type metadata accessor for PersonNameComponents(v4);
  uint64_t v55 = *(void *)(v5 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_39_2();
  __chkstk_darwin();
  unint64_t v7 = (char *)&v52 - v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  uint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  id v11 = (char *)&v52 - v10;
  unint64_t v57 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v52 = v0;
  if ((unint64_t)v0 >> 62)
  {
    if (v0 < 0) {
      uint64_t v37 = v0;
    }
    else {
      uint64_t v37 = v0 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    Class result = (Class)_CocoaArrayWrapper.endIndex.getter(v37);
    uint64_t v12 = (uint64_t)result;
    if (result) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v12 = *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFF8LL));
    Class result = (Class)swift_bridgeObjectRetain();
    if (v12)
    {
LABEL_3:
      if (v12 >= 1)
      {
        uint64_t v14 = 0LL;
        uint64_t v15 = v52;
        unint64_t v53 = v52 & 0xC000000000000001LL;
        uint64_t v54 = v12;
        while (1)
        {
          id v16 = v53
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v15)
              : OUTLINED_FUNCTION_27_10(v15 + 8 * v14);
          unint64_t v17 = v16;
          id v18 = objc_msgSend(v16, "nameComponents", v52);
          if (!v18) {
            break;
          }
          unint64_t v19 = v18;
          static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

          OUTLINED_FUNCTION_56_4( (uint64_t)v11,  (uint64_t)v7,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 32));
          OUTLINED_FUNCTION_44_2((uint64_t)v11, 0LL);
          outlined destroy of PhoneCallNLIntent?( (uint64_t)v11,  &demangling cache variable for type metadata for PersonNameComponents?);
LABEL_16:
          id v29 = v17;
          OUTLINED_FUNCTION_101_4();
          unint64_t v31 = *(void *)((char *)&dword_10 + (v57 & 0xFFFFFFFFFFFFFF8LL));
          unint64_t v30 = *(void *)((char *)&dword_18 + (v57 & 0xFFFFFFFFFFFFFF8LL));
          if (v31 >= v30 >> 1) {
            OUTLINED_FUNCTION_3_25(v31 + 1, v30);
          }
          ++v14;
          uint64_t v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v29);
          specialized Array._endMutation()(v32, v33, v34, v35);

          if (v54 == v14)
          {
            uint64_t v36 = OUTLINED_FUNCTION_70_2();
            goto LABEL_25;
          }
        }

        OUTLINED_FUNCTION_44_2((uint64_t)v11, 1LL);
LABEL_12:
        outlined destroy of PhoneCallNLIntent?( (uint64_t)v11,  &demangling cache variable for type metadata for PersonNameComponents?);
        id v20 = [v17 personHandle];
        if (v20)
        {
          outlined bridged method (ob) of @objc INPersonHandle.value.getter(v20);
          uint64_t v22 = v21;
          uint64_t v24 = v23;
        }

        else
        {
          uint64_t v22 = 0LL;
          uint64_t v24 = 0LL;
        }

        ((void (*)(void))PersonNameComponents.init())();
        uint64_t v25 = ((uint64_t (*)(uint64_t, uint64_t))PersonNameComponents.givenName.setter)(v22, v24);
        ((void (*)(uint64_t))PersonNameComponents.init())(v25);
        ((void (*)(void, void))PersonNameComponents.givenName.setter)(0LL, 0LL);
        uint64_t v26 = v55;
        OUTLINED_FUNCTION_56_4( (uint64_t)v9,  (uint64_t)v7,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 16));
        OUTLINED_FUNCTION_44_2((uint64_t)v9, 0LL);
        ((void (*)(char *))PersonNameComponents.phoneticRepresentation.setter)(v9);
        os_log_type_t v27 = *(void (**)(char *, uint64_t))(v26 + 8);
        v27(v7, v5);
        Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
        v27(v1, v5);
        [v17 setNameComponents:isa];

        uint64_t v15 = v52;
        goto LABEL_16;
      }

      __break(1u);
      goto LABEL_38;
    }
  }

  uint64_t v36 = swift_bridgeObjectRelease();
LABEL_25:
  OUTLINED_FUNCTION_49( v36,  (unint64_t *)&lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
  id v38 = objc_allocWithZone(&OBJC_CLASS___INPersonHandle);
  uint64_t v39 = OUTLINED_FUNCTION_20_35();
  id v40 = @nonobjc INPersonHandle.init(value:type:)(v39, 0LL, 0LL);
  v41.super.Class isa = INPerson.init(personHandle:)((INPersonHandle)v40).super.isa;
  unint64_t v42 = v57;
  if (!(v57 >> 62))
  {
    uint64_t v43 = *(void *)((char *)&dword_10 + (v57 & 0xFFFFFFFFFFFFF8LL));
    OUTLINED_FUNCTION_48_0();
    if (v43) {
      goto LABEL_27;
    }
LABEL_35:
    OUTLINED_FUNCTION_34_0();
    unint64_t v51 = _swiftEmptyArrayStorage;
LABEL_36:
    OUTLINED_FUNCTION_34_0();
    outlined bridged method (mbnn) of @objc INPerson.scoredAlternatives.setter((uint64_t)v51, v41.super.isa);
    return v41.super.isa;
  }

  OUTLINED_FUNCTION_23_41();
  uint64_t v43 = OUTLINED_FUNCTION_61_1();
  if (!v43) {
    goto LABEL_35;
  }
LABEL_27:
  uint64_t v56 = _swiftEmptyArrayStorage;
  Class result = (Class)specialized ContiguousArray.reserveCapacity(_:)(v43);
  if ((v43 & 0x8000000000000000LL) == 0)
  {
    uint64_t v44 = 0LL;
    do
    {
      if ((v42 & 0xC000000000000001LL) != 0) {
        id v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v44, v42);
      }
      else {
        id v45 = OUTLINED_FUNCTION_27_10(v42 + 8 * v44);
      }
      uint64_t v46 = v45;
      ++v44;
      id v47 = [objc_allocWithZone(INScoredPerson) initWithPerson:v45 recommendation:2];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v48);
      uint64_t v49 = v56[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v49);
      uint64_t v50 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v47);
      specialized ContiguousArray._endMutation()(v50);
    }

    while (v43 != v44);
    unint64_t v51 = v56;
    OUTLINED_FUNCTION_34_0();
    goto LABEL_36;
  }

uint64_t closure #1 in static ReferenceContactResolutionWrapper.resolveRREntity(rrEntity:siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)@<X0>( void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = RREntity.appBundleId.getter(a1);
  id v6 = static ReferenceContactResolutionWrapper.attachSourceBundleId(person:appBundleId:)(v3, v4, v5);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v6;
  return result;
}

id static ReferenceContactResolutionWrapper.attachSourceBundleId(person:appBundleId:)( void *a1, uint64_t a2, unint64_t a3)
{
  if ((v6 & 1) != 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v7, (uint64_t)static Logger.siriPhone);
    swift_bridgeObjectRetain_n(a3, 2LL);
    id v8 = a1;
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v11 = static os_log_type_t.debug.getter(v9, v10);
    if (os_log_type_enabled(v9, v11))
    {
      uint64_t v12 = swift_slowAlloc(22LL, -1LL);
      uint64_t v15 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      uint64_t v19 = v16;
      *(_DWORD *)uint64_t v12 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v12 + 12) = 2112;
      uint64_t v18 = (uint64_t)v8;
      id v13 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v12 + 14, v12 + 22);
      *uint64_t v15 = v8;

      _os_log_impl( &dword_0,  v9,  v11,  "#ReferenceContactResolutionWrapper attach %s to sourceAppBundleIdentifier for person %@",  (uint8_t *)v12,  0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v15, 1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_arrayDestroy(v16, 1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    outlined bridged method (mbgnn) of @objc INPerson.sourceAppBundleIdentifier.setter(a2, a3, v8);
  }

  return a1;
}

void outlined bridged method (mbnn) of @objc INPerson.scoredAlternatives.setter(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setScoredAlternatives:isa];
}

void outlined bridged method (mbgnn) of @objc INPerson.sourceAppBundleIdentifier.setter( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setSourceAppBundleIdentifier:v4];
}

void specialized static ReferenceContactResolutionWrapper.resolveUpdateSKIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:contactGroupResolver:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  HIDWORD(v72) = v25;
  uint64_t v27 = v26;
  id v29 = v28;
  unint64_t v31 = v30;
  uint64_t v33 = v32;
  HIDWORD(v76) = v34;
  uint64_t v79 = v35;
  uint64_t v37 = v36;
  uint64_t v38 = a24;
  uint64_t v39 = a25;
  uint64_t v77 = type metadata accessor for Locale(0LL);
  uint64_t v74 = *(void *)(v77 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v73 = v40;
  uint64_t v80 = v33;
  unint64_t v41 = (unint64_t)specialized static ReferenceContactResolutionWrapper.runCombinedSRRandCRR(siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( (uint64_t)v37,  v33,  v31,  v29,  a23,  a24,  a25);
  unint64_t v43 = v42;
  if (v41 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v44 = (os_log_s *)OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_70_2();
  }

  else
  {
    uint64_t v44 = *(os_log_s **)((char *)&dword_10 + (v41 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v81 = v44;
  if (v44)
  {
    OUTLINED_FUNCTION_23_32();
    if (!v45) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v46 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v46, (uint64_t)static Logger.siriPhone);
    os_log_type_t v47 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_93(v47))
    {
      uint64_t v71 = (uint64_t)v31;
      uint64_t v48 = v29;
      uint64_t v49 = v27;
      uint64_t v50 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
      *(_WORD *)uint64_t v50 = 0;
      OUTLINED_FUNCTION_5( &dword_0,  v44,  OS_LOG_TYPE_DEFAULT,  "#ReferenceContactResolutionWrapper updated SKIntent with contacts",  v50);
      uint64_t v51 = (uint64_t)v50;
      uint64_t v27 = v49;
      id v29 = v48;
      uint64_t v38 = a24;
      uint64_t v39 = a25;
      OUTLINED_FUNCTION_0_2(v51);
    }

    OUTLINED_FUNCTION_78_13(v41, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v39 + 8) + 16LL));
  }

  if (v43 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v52 = (os_log_s *)OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_87_0();
    if (v52) {
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v52 = *(os_log_s **)((char *)&dword_10 + (v43 & 0xFFFFFFFFFFFFF8LL));
    if (v52)
    {
LABEL_11:
      OUTLINED_FUNCTION_23_32();
      if (!v45) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v53 = OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_12_1(v53, (uint64_t)static Logger.siriPhone);
      os_log_type_t v54 = OUTLINED_FUNCTION_6_0();
      if (OUTLINED_FUNCTION_93(v54))
      {
        uint64_t v55 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
        *(_WORD *)uint64_t v55 = 0;
        OUTLINED_FUNCTION_5( &dword_0,  v52,  OS_LOG_TYPE_DEFAULT,  "#ReferenceContactResolutionWrapper updated SKIntent with groups",  v55);
        OUTLINED_FUNCTION_0_2((uint64_t)v55);
      }

      OUTLINED_FUNCTION_78_13(v43, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v39 + 8) + 32LL));
      OUTLINED_FUNCTION_87_0();
      OUTLINED_FUNCTION_70_2();
      goto LABEL_19;
    }
  }

  OUTLINED_FUNCTION_70_2();
  OUTLINED_FUNCTION_87_0();
  if (!v81)
  {
    uint64_t v63 = v29[3];
    uint64_t v64 = v29[4];
    __swift_project_boxed_opaque_existential_1(v29, v63);
    (*(void (**)(id *__return_ptr, uint64_t, uint64_t))(v64 + 8))(&v83, v63, v64);
    uint64_t v65 = v85;
    uint64_t v66 = v86;
    uint64_t v67 = v73;
    __swift_project_boxed_opaque_existential_1(&v83, v85);
    dispatch thunk of DeviceState.siriLocale.getter(v65, v66);
    LOBYTE(v68) = BYTE4(v72) & 1;
    specialized static ContactResolution.updateSiriKitIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:locale:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:)( (uint64_t)v37,  v79,  BYTE4(v76) & 1,  v80,  v73,  (uint64_t)v31,  (uint64_t)v29,  v27,  v68,  a21,  a22,  v38,  v39,  v69,  v70,  v71,  v72,  v73,  a21,  a22,  v74,  v76,  v77,  v79,  v80);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v67, v78);
    __swift_destroy_boxed_opaque_existential_1(&v83);
    goto LABEL_25;
  }

ValueMetadata *type metadata accessor for ReferenceContactResolutionWrapper()
{
  return &type metadata for ReferenceContactResolutionWrapper;
}

uint64_t partial apply for closure #2 in closure #1 in static ReferenceContactResolutionWrapper.runCombinedSRRandCRR(siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( uint64_t a1)
{
  return closure #2 in closure #1 in static ReferenceContactResolutionWrapper.runCombinedSRRandCRR(siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( a1,  *(void **)(v1 + 16));
}

void *specialized static ReferenceContactResolutionWrapper.runCombinedSRRandCRR(siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v182 = a7;
  uint64_t v168 = a6;
  uint64_t v167 = a5;
  uint64_t v177 = a2;
  uint64_t v180 = a1;
  uint64_t v165 = type metadata accessor for RREntity(0LL);
  uint64_t v179 = *(void *)(v165 - 8);
  __chkstk_darwin();
  v164 = (char *)&v160 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v169 = type metadata accessor for RRCandidate(0LL);
  uint64_t v183 = *(void *)(v169 - 8);
  __chkstk_darwin();
  v186 = (char *)&v160 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v166 = (char *)&v160 - v11;
  __chkstk_darwin();
  v170 = (char *)&v160 - v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRResult?);
  __chkstk_darwin();
  v174 = (uint64_t (*)(char *, char *, uint64_t))((char *)&v160 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = type metadata accessor for RRResult(0LL);
  uint64_t v173 = *(void *)(v14 - 8);
  __chkstk_darwin();
  v175 = (uint8_t *)&v160 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v172 = (uint64_t *)((char *)&v160 - v16);
  __chkstk_darwin();
  uint64_t v18 = (char *)&v160 - v17;
  uint64_t v19 = type metadata accessor for MatchedResultsSetting(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin();
  v171 = (char *)&v160 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v23 = (char *)&v160 - v22;
  uint64_t v24 = a3[3];
  uint64_t v25 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v24);
  uint64_t v190 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 144))(v24, v25);
  uint64_t v178 = v20;
  uint64_t v26 = *(void (**)(char *, void, uint64_t))(v20 + 104);
  v185 = v23;
  v26(v23, enum case for MatchedResultsSetting.defaultMatching(_:), v19);
  uint64_t v27 = a3[3];
  v181 = a3;
  __swift_project_boxed_opaque_existential_1(a3, v27);
  if (PhoneCallNLIntent.hasOnlyCallVerb()() && App.isFirstParty()())
  {
    uint64_t v28 = static UsoUtils.buildDummyReferenceEntity()();
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v30 = swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
      unint64_t v32 = *(void *)((char *)&dword_10 + (v190 & 0xFFFFFFFFFFFFFF8LL));
      unint64_t v31 = *(void *)((char *)&dword_18 + (v190 & 0xFFFFFFFFFFFFFF8LL));
      if (v32 >= v31 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1LL);
      }
      uint64_t v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v29);
      specialized Array._endMutation()(v33, v34, v35, v36);
      swift_release(v29);
      uint64_t v37 = v185;
      (*(void (**)(char *, uint64_t))(v178 + 8))(v185, v19);
      v26(v37, enum case for MatchedResultsSetting.extremelySalientResultsOnly(_:), v19);
    }
  }

  if ((unint64_t)v190 >> 62)
  {
    if (v190 < 0) {
      uint64_t v159 = v190;
    }
    else {
      uint64_t v159 = v190 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter(v159);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v38 = *(void *)((char *)&dword_10 + (v190 & 0xFFFFFFFFFFFFF8LL));
  }

  if (!v38)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v58 = type metadata accessor for Logger(0LL);
    uint64_t v59 = __swift_project_value_buffer(v58, (uint64_t)static Logger.siriPhone);
    id v60 = (os_log_s *)Logger.logObject.getter(v59);
    os_log_type_t v62 = static os_log_type_t.debug.getter(v60, v61);
    if (os_log_type_enabled(v60, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v63 = 0;
      _os_log_impl(&dword_0, v60, v62, "#ReferenceContactResolutionWrapper - No references found", v63, 2u);
      swift_slowDealloc(v63, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v178 + 8))(v185, v19);
    goto LABEL_22;
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  v184 = a4;
  uint64_t v176 = v19;
  uint64_t v39 = type metadata accessor for Logger(0LL);
  uint64_t v162 = __swift_project_value_buffer(v39, (uint64_t)static Logger.siriPhone);
  uint64_t v40 = (os_log_s *)Logger.logObject.getter(v162);
  os_log_type_t v42 = static os_log_type_t.debug.getter(v40, v41);
  if (os_log_type_enabled(v40, v42))
  {
    uint64_t v43 = swift_slowAlloc(12LL, -1LL);
    v163 = v18;
    uint64_t v44 = (uint8_t *)v43;
    uint64_t v45 = swift_slowAlloc(32LL, -1LL);
    v189[0] = v45;
    *(_DWORD *)uint64_t v44 = 136315138;
    uint64_t v46 = v185;
    swift_beginAccess(v185, v187, 0LL, 0LL);
    os_log_type_t v47 = v171;
    uint64_t v48 = v176;
    (*(void (**)(char *, char *, uint64_t))(v178 + 16))(v171, v46, v176);
    uint64_t v49 = String.init<A>(describing:)(v47, v48);
    uint64_t v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, v189, v44 + 4, v44 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl( &dword_0,  v40,  v42,  "#ReferenceContactResolutionWrapper Querying SRR with match setting: %s",  v44,  0xCu);
    swift_arrayDestroy(v45, 1LL);
    swift_slowDealloc(v45, -1LL, -1LL);
    uint64_t v51 = v44;
    uint64_t v18 = v163;
    swift_slowDealloc(v51, -1LL, -1LL);
  }

  uint64_t v52 = v175;
  uint64_t v53 = (uint64_t)v174;
  type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INStartCallIntent,  &OBJC_CLASS___INStartCallIntent_ptr);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  outlined bridged method (pb) of @objc static INIntent.typeName()(ObjCClassFromMetadata);
  uint64_t v55 = __chkstk_darwin();
  *(&v160 - 4) = (uint64_t)&v190;
  uint64_t v56 = v184;
  *(&v160 - 3) = (uint64_t)v185;
  *(&v160 - 2) = (uint64_t)v56;
  static SiriKitEventSender.current.getter(v189, v55);
  specialized static PhoneSelfPerformanceLogger.signpost<A>(domainExecutionType:taskType:siriKitEventSender:_:)();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v189);
  specialized Collection.first.getter();
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v53, 1LL, v14) == 1)
  {
    outlined destroy of PhoneCallNLIntent?(v53, &demangling cache variable for type metadata for RRResult?);
    uint64_t v57 = v176;
LABEL_16:
    (*(void (**)(char *, uint64_t))(v178 + 8))(v185, v57);
LABEL_22:
    uint64_t v64 = _swiftEmptyArrayStorage;
    goto LABEL_47;
  }

  uint64_t v65 = v173;
  (*(void (**)(char *, uint64_t, uint64_t))(v173 + 32))(v18, v53, v14);
  uint64_t v66 = *(void (**)(uint64_t *, char *, uint64_t))(v65 + 16);
  uint64_t v67 = v172;
  v66(v172, v18, v14);
  uint64_t v68 = (*(uint64_t (**)(uint64_t *, uint64_t))(v65 + 88))(v67, v14);
  if ((_DWORD)v68 == enum case for RRResult.foundMatch(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v65 + 96))(v67, v14);
    uint64_t v69 = v183;
    uint64_t v70 = v170;
    uint64_t v71 = v169;
    (*(void (**)(char *, uint64_t *, uint64_t))(v183 + 32))(v170, v67, v169);
    uint64_t v72 = v166;
    v186 = *(char **)(v69 + 16);
    uint64_t v73 = ((uint64_t (*)(char *, char *, uint64_t))v186)(v166, v70, v71);
    uint64_t v74 = (os_log_s *)Logger.logObject.getter(v73);
    os_log_type_t v76 = static os_log_type_t.debug.getter(v74, v75);
    BOOL v77 = os_log_type_enabled(v74, v76);
    uint64_t v78 = v176;
    if (v77)
    {
      uint64_t v79 = v72;
      uint64_t v80 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v81 = swift_slowAlloc(32LL, -1LL);
      uint64_t v161 = v14;
      uint64_t v82 = v81;
      v189[0] = v81;
      *(_DWORD *)uint64_t v80 = 136315138;
      v163 = v18;
      lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate,  (uint64_t (*)(uint64_t))&type metadata accessor for RRCandidate,  (uint64_t)&protocol conformance descriptor for RRCandidate);
      uint64_t v84 = dispatch thunk of CustomStringConvertible.description.getter(v71, v83);
      uint64_t v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, v189);
      uint64_t v18 = v163;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, v189, v80 + 4, v80 + 12);
      swift_bridgeObjectRelease();
      uint64_t v86 = *(void (**)(char *, uint64_t))(v69 + 8);
      v86(v79, v71);
      _os_log_impl(&dword_0, v74, v76, "#ReferenceContactResolutionWrapper .foundMatch %s", v80, 0xCu);
      swift_arrayDestroy(v82, 1LL);
      uint64_t v87 = v82;
      uint64_t v78 = v176;
      uint64_t v14 = v161;
      swift_slowDealloc(v87, -1LL, -1LL);
      swift_slowDealloc(v80, -1LL, -1LL);
    }

    else
    {
      uint64_t v86 = *(void (**)(char *, uint64_t))(v69 + 8);
      v86(v72, v71);
    }

    uint64_t v104 = v182;
    uint64_t v105 = v167;
    uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RRCandidate>);
    uint64_t v107 = *(unsigned __int8 *)(v69 + 80);
    uint64_t v108 = (v107 + 32) & ~v107;
    uint64_t v109 = swift_allocObject(v106, v108 + *(void *)(v69 + 72), v107 | 7);
    *(_OWORD *)(v109 + 16) = xmmword_31D870;
    uint64_t v110 = v109 + v108;
    unint64_t v111 = v170;
    ((void (*)(uint64_t, char *, uint64_t))v186)(v110, v170, v71);
    uint64_t v64 = specialized static ReferenceContactResolutionWrapper.resolveConcreteMatches(rrCandidates:siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( v109,  v180,  v177,  (uint64_t)v181,  v184,  v105,  v168,  v104);
    swift_setDeallocating(v109);
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    v86(v111, v71);
    (*(void (**)(char *, uint64_t))(v173 + 8))(v18, v14);
    (*(void (**)(char *, uint64_t))(v178 + 8))(v185, v78);
  }

  else if ((_DWORD)v68 == enum case for RRResult.needsDisambiguation(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v65 + 96))(v67, v14);
    uint64_t v88 = (char *)*v67;
    uint64_t v89 = swift_bridgeObjectRetain_n(*v67, 2LL);
    uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
    os_log_type_t v92 = static os_log_type_t.debug.getter(v90, v91);
    BOOL v93 = os_log_type_enabled(v90, v92);
    uint64_t v161 = v14;
    if (v93)
    {
      uint64_t v94 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v95 = swift_slowAlloc(32LL, -1LL);
      v189[0] = v95;
      *(_DWORD *)uint64_t v94 = 136315138;
      v175 = v94 + 4;
      uint64_t v96 = swift_bridgeObjectRetain();
      uint64_t v97 = v169;
      os_log_t v98 = v18;
      uint64_t v99 = Array.description.getter(v96, v169);
      unint64_t v101 = v100;
      swift_bridgeObjectRelease();
      uint64_t v102 = v99;
      uint64_t v18 = v98;
      uint64_t v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v101, v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, v189, v175, v94 + 12);
      swift_bridgeObjectRelease_n(v88, 2LL);
      uint64_t v14 = v161;
      swift_bridgeObjectRelease();
      _os_log_impl( &dword_0,  v90,  v92,  "#ReferenceContactResolutionWrapper found a .needsDisambiguation match %s",  v94,  0xCu);
      swift_arrayDestroy(v95, 1LL);
      swift_slowDealloc(v95, -1LL, -1LL);
      swift_slowDealloc(v94, -1LL, -1LL);

      uint64_t v103 = v176;
    }

    else
    {

      swift_bridgeObjectRelease_n(v88, 2LL);
      uint64_t v103 = v176;
      uint64_t v97 = v169;
    }

    v189[0] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v123 = *((void *)v88 + 2);
    uint64_t v124 = v186;
    if (v123)
    {
      v163 = v18;
      unint64_t v125 = (*(unsigned __int8 *)(v183 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v183 + 80);
      v172 = (uint64_t *)v88;
      v126 = &v88[v125];
      v175 = *(uint8_t **)(v183 + 72);
      v174 = *(uint64_t (**)(char *, char *, uint64_t))(v183 + 16);
      uint64_t v127 = v168;
      uint64_t v128 = v167;
      uint64_t v129 = v177;
      uint64_t v130 = v165;
      uint64_t v131 = (uint64_t)v164;
      do
      {
        uint64_t v132 = v174(v124, v126, v97);
        RRCandidate.entity.getter(v132);
        uint64_t v133 = specialized static ReferenceContactResolutionWrapper.resolveRREntity(rrEntity:siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( v131,  v180,  v129,  (uint64_t)v181,  v184,  v128,  v127,  v182);
        (*(void (**)(uint64_t, uint64_t))(v179 + 8))(v131, v130);
        swift_bridgeObjectRelease();
        specialized Array.append<A>(contentsOf:)(v133);
        uint64_t v124 = v186;
        (*(void (**)(char *, uint64_t))(v183 + 8))(v186, v97);
        v126 = (char *)&v175[(void)v126];
        --v123;
      }

      while (v123);
      swift_bridgeObjectRelease();
      unint64_t v134 = (void *)v189[0];
      uint64_t v14 = v161;
      uint64_t v18 = v163;
      uint64_t v103 = v176;
    }

    else
    {
      swift_bridgeObjectRelease();
      unint64_t v134 = _swiftEmptyArrayStorage;
    }

    static ReferenceContactResolutionWrapper.dedupePersons(persons:sharedGlobals:)((unint64_t)v134, v184);
    uint64_t v140 = v139;
    swift_bridgeObjectRelease();
    v189[0] = v140;
    Class v141 = static ReferenceContactResolutionWrapper.skeletonINPerson(persons:)();
    swift_bridgeObjectRelease();
    uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v143 = swift_allocObject(v142, 40LL, 7LL);
    *(_OWORD *)(v143 + 16) = xmmword_31FE60;
    *(void *)(v143 + 32) = v141;
    uint64_t v188 = v143;
    specialized Array._endMutation()(v143, v144, v145, v146);
    uint64_t v64 = (void *)v188;
    (*(void (**)(char *, uint64_t))(v173 + 8))(v18, v14);
    (*(void (**)(char *, uint64_t))(v178 + 8))(v185, v103);
  }

  else
  {
    v163 = v18;
    uint64_t v57 = v176;
    if ((_DWORD)v68 != enum case for RRResult.foundMatchPlural(_:))
    {
      if ((_DWORD)v68 == enum case for RRResult.noMatch(_:))
      {
        v135 = (os_log_s *)Logger.logObject.getter(v68);
        os_log_type_t v137 = static os_log_type_t.debug.getter(v135, v136);
        if (os_log_type_enabled(v135, v137))
        {
          v138 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)v138 = 0;
          _os_log_impl(&dword_0, v135, v137, "#ReferenceContactResolutionWrapper found a .nomatch", v138, 2u);
          swift_slowDealloc(v138, -1LL, -1LL);
        }

        (*(void (**)(char *, uint64_t))(v65 + 8))(v163, v14);
      }

      else
      {
        v148 = v163;
        uint64_t v149 = ((uint64_t (*)(uint8_t *, char *, uint64_t))v66)(v52, v163, v14);
        v150 = (os_log_s *)Logger.logObject.getter(v149);
        os_log_type_t v151 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v150, v151))
        {
          v152 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v153 = swift_slowAlloc(32LL, -1LL);
          v189[0] = v153;
          *(_DWORD *)v152 = 136315138;
          v186 = (char *)(v152 + 4);
          lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type RRResult and conformance RRResult,  (uint64_t (*)(uint64_t))&type metadata accessor for RRResult,  (uint64_t)&protocol conformance descriptor for RRResult);
          uint64_t v155 = dispatch thunk of CustomStringConvertible.description.getter(v14, v154);
          uint64_t v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v155, v156, v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, v189, v186, v152 + 12);
          swift_bridgeObjectRelease();
          v157 = *(void (**)(uint8_t *, uint64_t))(v173 + 8);
          v157(v52, v14);
          _os_log_impl( &dword_0,  v150,  v151,  "#ReferenceContactResolutionWrapper dropping result of type %s!",  v152,  0xCu);
          swift_arrayDestroy(v153, 1LL);
          swift_slowDealloc(v153, -1LL, -1LL);
          v158 = v152;
          uint64_t v67 = v172;
          swift_slowDealloc(v158, -1LL, -1LL);
        }

        else
        {

          v157 = *(void (**)(uint8_t *, uint64_t))(v65 + 8);
          v157(v52, v14);
        }

        v157((uint8_t *)v148, v14);
        v157((uint8_t *)v67, v14);
      }

      goto LABEL_16;
    }

    (*(void (**)(uint64_t *, uint64_t))(v65 + 96))(v67, v14);
    uint64_t v112 = *v67;
    uint64_t v113 = swift_bridgeObjectRetain_n(*v67, 2LL);
    uint64_t v114 = (os_log_s *)Logger.logObject.getter(v113);
    os_log_type_t v116 = static os_log_type_t.debug.getter(v114, v115);
    if (os_log_type_enabled(v114, v116))
    {
      uint64_t v117 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v118 = swift_slowAlloc(32LL, -1LL);
      v189[0] = v118;
      *(_DWORD *)uint64_t v117 = 136315138;
      uint64_t v119 = swift_bridgeObjectRetain();
      uint64_t v120 = Array.description.getter(v119, v169);
      uint64_t v161 = v14;
      unint64_t v122 = v121;
      swift_bridgeObjectRelease();
      uint64_t v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, v122, v189);
      uint64_t v65 = v173;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, v189, v117 + 4, v117 + 12);
      swift_bridgeObjectRelease_n(v112, 2LL);
      uint64_t v14 = v161;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v114, v116, "#ReferenceContactResolutionWrapper .foundMatchPlural %s", v117, 0xCu);
      swift_arrayDestroy(v118, 1LL);
      swift_slowDealloc(v118, -1LL, -1LL);
      swift_slowDealloc(v117, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v112, 2LL);
    }

    uint64_t v64 = specialized static ReferenceContactResolutionWrapper.resolveConcreteMatches(rrCandidates:siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( v112,  v180,  v177,  (uint64_t)v181,  v184,  v167,  v168,  v182);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v163, v14);
    (*(void (**)(char *, uint64_t))(v178 + 8))(v185, v57);
  }

void *specialized static ReferenceContactResolutionWrapper.resolveConcreteMatches(rrCandidates:siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v32 = a7;
  uint64_t v33 = a8;
  uint64_t v31 = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for RREntity(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v19 = (char *)&v30 - v18;
  specialized Collection.first.getter();
  uint64_t v20 = type metadata accessor for RRCandidate(0LL);
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v13, 1LL, v20);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    outlined destroy of PhoneCallNLIntent?((uint64_t)v13, &demangling cache variable for type metadata for RRCandidate?);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.siriPhone);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v26 = static os_log_type_t.debug.getter(v24, v25);
    if (os_log_type_enabled(v24, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_0, v24, v26, "#ReferenceContactResolutionWrapper no entity resolved for rrCandidate", v27, 2u);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    return _swiftEmptyArrayStorage;
  }

  else
  {
    RRCandidate.entity.getter(EnumTagSinglePayload);
    (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8LL))(v13, v20);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v17, v14);
    uint64_t v28 = specialized static ReferenceContactResolutionWrapper.resolveRREntity(rrEntity:siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( (uint64_t)v19,  a2,  a3,  a4,  a5,  v31,  v32,  v33);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
  }

  return (void *)v28;
}

uint64_t specialized static ReferenceContactResolutionWrapper.resolveRREntity(rrEntity:siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v92 = a7;
  uint64_t v93 = a8;
  uint64_t v90 = a4;
  uint64_t v91 = a5;
  uint64_t v89 = a3;
  static Signpost.begin(_:)();
  uint64_t v12 = v11;
  uint64_t v13 = type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
  uint64_t v14 = (void *)RREntity.convertData<A>(to:)(v13, v13);
  Signpost.OpenSignpost.end()();
  if (v14)
  {
    uint64_t v15 = one-time initialization token for siriPhone;
    id v16 = v14;
    if (v15 != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.siriPhone);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v21 = static os_log_type_t.debug.getter(v19, v20);
    if (os_log_type_enabled(v19, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_0, v19, v21, "#ReferenceContactResolutionWrapper resolved to an INPerson", v22, 2u);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v24 = swift_allocObject(v23, 40LL, 7LL);
    *(_OWORD *)(v24 + 16) = xmmword_31FE60;
    *(void *)(v24 + 32) = v16;
    v94[0] = v24;
    specialized Array._endMutation()(v24, v25, v26, v27);
    uint64_t v28 = (void *)v94[0];
    goto LABEL_14;
  }

  uint64_t v29 = ((uint64_t (*)(void))RREntity.usoEntity.getter)();
  uint64_t v30 = type metadata accessor for UsoEntity_common_Person(0LL);
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(v94, v29, v30, v30);
  uint64_t v31 = swift_release(v29);
  uint64_t v32 = v94[0];
  if (v94[0])
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    uint64_t v34 = __swift_project_value_buffer(v33, (uint64_t)static Logger.siriPhone);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v37 = static os_log_type_t.debug.getter(v35, v36);
    if (os_log_type_enabled(v35, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl(&dword_0, v35, v37, "#ReferenceContactResolutionWrapper resolved to a common_Person", v38, 2u);
      swift_slowDealloc(v38, -1LL, -1LL);
    }

    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
    uint64_t v40 = type metadata accessor for ContactQuery(0LL);
    uint64_t v41 = swift_allocObject( v39,  ((*(unsigned __int8 *)(*(void *)(v40 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v40 - 8) + 80LL))
          + *(void *)(*(void *)(v40 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v40 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v41 + 16) = xmmword_31D870;
    UsoEntity_common_Person.toContactQuery()(v41);
    uint64_t v28 = specialized static ContactResolution.resolveContactQueries(contactQueries:siriKitIntent:app:nlIntent:sharedGlobals:)();
    swift_bridgeObjectRelease();
    uint64_t v42 = v32;
LABEL_13:
    swift_release(v42);
    goto LABEL_14;
  }

  uint64_t v46 = RREntity.usoEntity.getter(v31);
  uint64_t v47 = type metadata accessor for UsoEntity_common_Group(0LL);
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(v94, v46, v47, v47);
  uint64_t v48 = swift_release(v46);
  uint64_t v49 = v94[0];
  if (v94[0])
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v50 = type metadata accessor for Logger(0LL);
    uint64_t v51 = __swift_project_value_buffer(v50, (uint64_t)static Logger.siriPhone);
    uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
    os_log_type_t v54 = static os_log_type_t.debug.getter(v52, v53);
    if (os_log_type_enabled(v52, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl(&dword_0, v52, v54, "#ReferenceContactResolutionWrapper resolved to a common_Group", v55, 2u);
      swift_slowDealloc(v55, -1LL, -1LL);
    }

    specialized static ReferenceContactResolutionWrapper.resolveCommonGroup(group:siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( v49,  a2,  v89,  v90,  v91,  a6,  v92,  v93);
    uint64_t v28 = v56;
    swift_release(v49);
  }

  else
  {
    uint64_t v57 = RREntity.usoEntity.getter(v48);
    uint64_t v58 = type metadata accessor for UsoEntity_common_Agent(0LL);
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(v94, v57, v58, v58);
    uint64_t v59 = swift_release(v57);
    uint64_t v60 = v94[0];
    if (v94[0])
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v61 = type metadata accessor for Logger(0LL);
      uint64_t v62 = __swift_project_value_buffer(v61, (uint64_t)static Logger.siriPhone);
      uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
      os_log_type_t v65 = static os_log_type_t.debug.getter(v63, v64);
      if (os_log_type_enabled(v63, v65))
      {
        uint64_t v66 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v66 = 0;
        _os_log_impl(&dword_0, v63, v65, "#ReferenceContactResolutionWrapper resolved to a common_Agent", v66, 2u);
        swift_slowDealloc(v66, -1LL, -1LL);
      }

      uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
      uint64_t v68 = type metadata accessor for ContactQuery(0LL);
      uint64_t v69 = swift_allocObject( v67,  ((*(unsigned __int8 *)(*(void *)(v68 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v68 - 8) + 80LL))
            + *(void *)(*(void *)(v68 - 8) + 72LL),
              *(unsigned __int8 *)(*(void *)(v68 - 8) + 80LL) | 7LL);
      *(_OWORD *)(v69 + 16) = xmmword_31D870;
      UsoEntity_common_Agent.toContactQuery()(v69, v70, v71, v72, v73);
      uint64_t v28 = specialized static ContactResolution.resolveContactQueries(contactQueries:siriKitIntent:app:nlIntent:sharedGlobals:)();
      swift_bridgeObjectRelease();
      uint64_t v42 = v60;
      goto LABEL_13;
    }

    uint64_t v74 = RREntity.usoEntity.getter(v59);
    uint64_t v75 = type metadata accessor for UsoEntity_common_App(0LL);
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(v94, v74, v75, v75);
    swift_release(v74);
    uint64_t v76 = v94[0];
    if (v94[0])
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v77 = type metadata accessor for Logger(0LL);
      uint64_t v78 = __swift_project_value_buffer(v77, (uint64_t)static Logger.siriPhone);
      uint64_t v79 = (os_log_s *)Logger.logObject.getter(v78);
      os_log_type_t v81 = static os_log_type_t.debug.getter(v79, v80);
      if (os_log_type_enabled(v79, v81))
      {
        uint64_t v82 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v82 = 0;
        _os_log_impl( &dword_0,  v79,  v81,  "#ReferenceContactResolutionWrapper resolved to a common_app - Not convertible to INPerson",  v82,  2u);
        swift_slowDealloc(v82, -1LL, -1LL);
      }

      swift_release(v76);
    }

    else
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v83 = type metadata accessor for Logger(0LL);
      uint64_t v84 = __swift_project_value_buffer(v83, (uint64_t)static Logger.siriPhone);
      unint64_t v85 = (os_log_s *)Logger.logObject.getter(v84);
      os_log_type_t v86 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v85, v86))
      {
        uint64_t v87 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v87 = 0;
        _os_log_impl( &dword_0,  v85,  v86,  "#ReferenceContactResolutionWrapper resolved entity was not recognized as a person or group",  v87,  2u);
        swift_slowDealloc(v87, -1LL, -1LL);
      }
    }

    uint64_t v28 = _swiftEmptyArrayStorage;
  }

void specialized static ReferenceContactResolutionWrapper.resolveCommonGroup(group:siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v46)(__int128 *__return_ptr, void *);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  os_log_s *v66;
  uint64_t v67;
  os_log_type_t v68;
  uint8_t *v69;
  void v70[5];
  void *v71;
  uint64_t v72;
  __int128 v73[2];
  __int128 v74[2];
  void v75[6];
  v70[3] = a7;
  v70[4] = a8;
  v70[2] = a4;
  v70[1] = a3;
  v70[0] = a2;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Transformer<[SmsGroup], [INCallGroup]?>);
  uint64_t v71 = *(void **)(v11 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v72 = type metadata accessor for ContactQuery(0LL);
  uint64_t v14 = *(void *)(v72 - 8);
  uint64_t v15 = __chkstk_darwin();
  uint64_t v17 = (char *)v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = dispatch thunk of UsoEntity_common_Group.name.getter(v15);
  char v20 = specialized Optional<A>.isNilOrEmpty.getter(v18, v19);
  uint64_t v21 = swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
  {
    uint64_t v22 = dispatch thunk of UsoEntity_common_Group.members.getter(v21);
    if (v22)
    {
      uint64_t v23 = v22;
      v75[0] = _swiftEmptyArrayStorage;
      if ((unint64_t)v22 >> 62)
      {
        if (v22 >= 0) {
          uint64_t v52 = v22 & 0xFFFFFFFFFFFFFF8LL;
        }
        else {
          uint64_t v52 = v22;
        }
        swift_bridgeObjectRetain();
        uint64_t v24 = _CocoaArrayWrapper.endIndex.getter(v52);
        if (v24) {
          goto LABEL_5;
        }
      }

      else
      {
        uint64_t v24 = *(void *)((char *)&dword_10 + (v22 & 0xFFFFFFFFFFFFFF8LL));
        swift_bridgeObjectRetain();
        if (v24)
        {
LABEL_5:
          if (v24 < 1)
          {
            __break(1u);
            goto LABEL_47;
          }

          for (uint64_t i = 0LL; i != v24; ++i)
          {
            if ((v23 & 0xC000000000000001LL) != 0)
            {
              uint64_t v26 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v23);
              uint64_t v27 = v26;
            }

            else
            {
              uint64_t v27 = *(void *)(v23 + 8 * i + 32);
              uint64_t v26 = swift_retain();
            }

            dispatch thunk of CodeGenListEntry.entry.getter(v74, v26);
            uint64_t v28 = swift_release(v27);
            uint64_t v29 = *(void *)&v74[0];
            if (*(void *)&v74[0])
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v28);
              unint64_t v31 = *(void *)((char *)&dword_10 + (v75[0] & 0xFFFFFFFFFFFFFF8LL));
              unint64_t v30 = *(void *)((char *)&dword_18 + (v75[0] & 0xFFFFFFFFFFFFFF8LL));
              if (v31 >= v30 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1LL);
              }
              uint64_t v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v29);
              specialized Array._endMutation()(v32, v33, v34, v35);
            }
          }

          swift_bridgeObjectRelease();
          uint64_t v51 = v75[0];
LABEL_26:
          swift_bridgeObjectRelease();
          if ((unint64_t)v51 >> 62)
          {
            if (v51 < 0) {
              uint64_t v63 = v51;
            }
            else {
              uint64_t v63 = v51 & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain();
            uint64_t v53 = _CocoaArrayWrapper.endIndex.getter(v63);
            swift_bridgeObjectRelease();
            if (v53)
            {
LABEL_28:
              uint64_t v71 = a5;
              v75[0] = _swiftEmptyArrayStorage;
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              if ((v53 & 0x8000000000000000LL) == 0)
              {
                os_log_type_t v54 = 0LL;
                uint64_t v55 = v75[0];
                do
                {
                  if ((v51 & 0xC000000000000001LL) != 0)
                  {
                    uint64_t v56 = specialized _ArrayBuffer._getElementSlowPath(_:)(v54, v51);
                    uint64_t v61 = v56;
                  }

                  else
                  {
                    uint64_t v61 = *(void *)(v51 + 8 * v54 + 32);
                    uint64_t v56 = swift_retain();
                  }

                  UsoEntity_common_Agent.toContactQuery()(v56, v57, v58, v59, v60);
                  swift_release(v61);
                  v75[0] = v55;
                  uint64_t v62 = *(void *)(v55 + 16);
                  if (v62 >= *(void *)(v55 + 24) >> 1)
                  {
                    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    uint64_t v55 = v75[0];
                  }

                  ++v54;
                  *(void *)(v55 + 16) = v62 + 1;
                  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))( v55 + ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
                  + *(void *)(v14 + 72) * v62,
                    v17,
                    v72);
                }

                while (v53 != v54);
                goto LABEL_41;
              }

#error "1C53F4: call analysis failed (funcsize=171)"
#error "1C56F4: call analysis failed (funcsize=171)"
#error "1C5B7C: call analysis failed (funcsize=140)"
void specialized static ReferenceContactResolutionWrapper.resolveCommonGroup(group:siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  void (*a21)(void *, uint64_t, uint64_t, uint64_t, void *),  uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_s *v33;
  os_log_s *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  void *boxed_opaque_existential_1;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  os_log_s *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t i;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  os_log_s *v64;
  os_log_type_t v65;
  _WORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(__int128 *__return_ptr, void *);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92[2];
  __int128 v93[2];
  void v94[5];
  void v95[6];
  OUTLINED_FUNCTION_29_2();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v89 = v30;
  uint64_t v88 = v31;
  uint64_t v87 = v32;
  uint64_t v34 = v33;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Transformer<[SmsGroup], [INCallGroup]?>);
  uint64_t v36 = *(void *)(v35 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v39 = v38 - v37;
  uint64_t v90 = type metadata accessor for ContactQuery(0LL);
  os_log_type_t v40 = *(void *)(v90 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v43 = (uint8_t *)(v42 - v41);
  v95[3] = v25;
  v95[4] = v23;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v95);
  uint64_t v45 = OUTLINED_FUNCTION_56_4( (uint64_t)boxed_opaque_existential_1,  v27,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16LL));
  uint64_t v46 = dispatch thunk of UsoEntity_common_Group.name.getter(v45);
  LOBYTE(v25) = specialized Optional<A>.isNilOrEmpty.getter(v46, v47);
  uint64_t v48 = OUTLINED_FUNCTION_62();
  if ((v25 & 1) == 0 || (uint64_t v49 = v34, (v50 = dispatch thunk of UsoEntity_common_Group.members.getter(v48)) == 0))
  {
    uint64_t v91 = v36;
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v63 = OUTLINED_FUNCTION_15_1();
    uint64_t v64 = (os_log_s *)__swift_project_value_buffer(v63, (uint64_t)static Logger.siriPhone);
    Logger.logObject.getter(v64);
    os_log_type_t v65 = OUTLINED_FUNCTION_6_0();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      OUTLINED_FUNCTION_133(v66);
      OUTLINED_FUNCTION_5( &dword_0,  v64,  v65,  "#ReferenceContactResolutionWrapper resolved to a named common_Group",  v43);
      OUTLINED_FUNCTION_0_2((uint64_t)v43);
    }

    OUTLINED_FUNCTION_94_6(v29);
    OUTLINED_FUNCTION_62_12();
    outlined init with copy of SharedGlobalsProviding((uint64_t)v94, (uint64_t)v93);
    outlined init with copy of SharedGlobalsProviding((uint64_t)v95, (uint64_t)v92);
    uint64_t v67 = OUTLINED_FUNCTION_8_2(a22, 96LL);
    outlined init with take of AppSelectionSignalComponent(v93, v67 + 16);
    outlined init with take of AppSelectionSignalComponent(v92, v67 + 56);
    uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SmsGroup]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INCallGroup]?);
    uint64_t v69 = OUTLINED_FUNCTION_99_2();
    Transformer.init(transform:)(v69, v70, v68);
    __swift_destroy_boxed_opaque_existential_1(v94);
    uint64_t v71 = (void (*)(__int128 *__return_ptr, void *))Transformer.transform.getter(v35);
    uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SmsGroup>);
    uint64_t v73 = OUTLINED_FUNCTION_8_2(v72, 72LL);
    *(_OWORD *)(v73 + 16) = xmmword_31D870;
    *(void *)(v73 + 56) = type metadata accessor for UsoEntity_common_Group(0LL);
    *(void *)(v73 + 64) = &protocol witness table for UsoEntity_common_Group;
    *(void *)(v73 + 32) = v34;
    v94[0] = v73;
    swift_retain();
    v71(v93, v94);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_38_1();
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v39, v35);
    goto LABEL_44;
  }

  uint64_t v51 = v50;
  v94[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)v50 >> 62)
  {
    if (v50 >= 0) {
      uint64_t v49 = (os_log_s *)(v50 & 0xFFFFFFFFFFFFFF8LL);
    }
    else {
      uint64_t v49 = (os_log_s *)v50;
    }
    OUTLINED_FUNCTION_48_0();
    uint64_t v52 = OUTLINED_FUNCTION_61_1();
    if (v52) {
      goto LABEL_5;
    }
LABEL_25:
    OUTLINED_FUNCTION_34_0();
    uint64_t v74 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_26;
  }

  uint64_t v52 = *(void *)((char *)&dword_10 + (v50 & 0xFFFFFFFFFFFFFF8LL));
  OUTLINED_FUNCTION_48_0();
  if (!v52) {
    goto LABEL_25;
  }
LABEL_5:
  if (v52 < 1)
  {
    __break(1u);
    goto LABEL_50;
  }

  for (uint64_t i = 0LL; i != v52; ++i)
  {
    if ((v51 & 0xC000000000000001LL) != 0)
    {
      os_log_type_t v54 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v51);
      uint64_t v49 = (os_log_s *)v54;
    }

    else
    {
      os_log_type_t v54 = OUTLINED_FUNCTION_12_27(v51 + 8 * i);
    }

    dispatch thunk of CodeGenListEntry.entry.getter(v93, v54);
    uint64_t v55 = OUTLINED_FUNCTION_38_1();
    uint64_t v56 = *(void *)&v93[0];
    if (*(void *)&v93[0])
    {
      uint64_t v49 = (os_log_s *)v94;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v55);
      uint64_t v58 = *(void *)((char *)&dword_10 + (v94[0] & 0xFFFFFFFFFFFFFF8LL));
      uint64_t v57 = *(void *)((char *)&dword_18 + (v94[0] & 0xFFFFFFFFFFFFFF8LL));
      if (v58 >= v57 >> 1) {
        OUTLINED_FUNCTION_3_25(v58 + 1, v57);
      }
      uint64_t v59 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v58, v56);
      specialized Array._endMutation()(v59, v60, v61, v62);
    }
  }

  OUTLINED_FUNCTION_34_0();
  uint64_t v74 = v94[0];
LABEL_26:
  OUTLINED_FUNCTION_34_0();
  if ((unint64_t)v74 >> 62)
  {
    if (v74 < 0) {
      uint64_t v49 = (os_log_s *)v74;
    }
    else {
      uint64_t v49 = (os_log_s *)(v74 & 0xFFFFFFFFFFFFFF8LL);
    }
    swift_bridgeObjectRetain();
    uint64_t v75 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_23_5();
  }

  else
  {
    uint64_t v75 = *(void *)((char *)&dword_10 + (v74 & 0xFFFFFFFFFFFFF8LL));
  }

  if (!v75)
  {
    OUTLINED_FUNCTION_23_5();
    uint64_t v77 = _swiftEmptyArrayStorage;
LABEL_39:
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v84 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v84, (uint64_t)static Logger.siriPhone);
    unint64_t v85 = OUTLINED_FUNCTION_6_0();
    if (os_log_type_enabled(v49, v85))
    {
      os_log_type_t v86 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
      *(_WORD *)os_log_type_t v86 = 0;
      OUTLINED_FUNCTION_5( &dword_0,  v49,  v85,  "#ReferenceContactResolutionWrapper resolved to an unnamed common_Group",  v86);
      OUTLINED_FUNCTION_0_2((uint64_t)v86);
    }

    a21(v77, v87, v88, v89, v29);
    OUTLINED_FUNCTION_13_1();
LABEL_44:
    __swift_destroy_boxed_opaque_existential_1(v95);
    OUTLINED_FUNCTION_7_5();
    return;
  }

  v94[0] = _swiftEmptyArrayStorage;
  uint64_t v49 = (os_log_s *)v94;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v75 & 0x8000000000000000LL) == 0)
  {
    uint64_t v76 = 0LL;
    uint64_t v77 = (void *)v94[0];
    do
    {
      if ((v74 & 0xC000000000000001LL) != 0)
      {
        uint64_t v78 = specialized _ArrayBuffer._getElementSlowPath(_:)(v76, v74);
        uint64_t v49 = (os_log_s *)v78;
      }

      else
      {
        uint64_t v78 = OUTLINED_FUNCTION_12_27(v74 + 8 * v76);
      }

      UsoEntity_common_Agent.toContactQuery()(v78, v79, v80, v81, v82);
      OUTLINED_FUNCTION_38_1();
      v94[0] = v77;
      uint64_t v83 = v77[2];
      if (v83 >= v77[3] >> 1)
      {
        uint64_t v49 = (os_log_s *)v94;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v77 = (void *)v94[0];
      }

      ++v76;
      v77[2] = v83 + 1;
      (*(void (**)(unint64_t, uint8_t *, uint64_t))(v40 + 32))( (unint64_t)v77 + ((*(unsigned __int8 *)(v40 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))
      + *(void *)(v40 + 72) * v83,
        v43,
        v90);
    }

    while (v75 != v76);
    OUTLINED_FUNCTION_23_5();
    goto LABEL_39;
  }

#error "1C628C: call analysis failed (funcsize=177)"
void specialized static ReferenceContactResolutionWrapper.runCombinedSRRandCRR(siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, void, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  os_log_s *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  os_log_s *v75;
  uint64_t v76;
  os_log_type_t v77;
  BOOL v78;
  uint64_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *ObjCClassFromMetadata;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  os_log_type_t v98;
  uint8_t *v99;
  uint64_t v100;
  uint8_t *v101;
  uint64_t v102;
  os_log_s *v103;
  os_log_s *v104;
  int v105;
  uint64_t v106;
  os_log_s *v107;
  uint64_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  os_log_type_t v112;
  uint64_t v113;
  uint64_t v114;
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(uint64_t, uint64_t);
  uint64_t v124;
  os_log_type_t v125;
  char v126;
  uint8_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  os_log_type_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  os_log_type_t v143;
  uint64_t v144;
  uint8_t *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint8_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  os_log_type_t v169;
  BOOL v170;
  uint8_t *v171;
  uint64_t v172;
  uint64_t v173;
  Class v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  os_log_s *v181;
  os_log_type_t v182;
  BOOL v183;
  uint8_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  os_log_s *v203;
  uint64_t v204;
  uint8_t *v205;
  os_log_s *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint8_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  void v223[4];
  uint64_t v224[5];
  unint64_t v225;
  OUTLINED_FUNCTION_29_2();
  a19 = v24;
  a20 = v25;
  v212 = v26;
  v201 = v27;
  uint64_t v29 = v28;
  v221 = v30;
  v222 = v31;
  uint64_t v33 = v32;
  v199 = v34;
  uint64_t v35 = type metadata accessor for RREntity(0LL);
  v216 = *(void *)(v35 - 8);
  v217 = v35;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v37 = OUTLINED_FUNCTION_42_7(v36);
  v202 = type metadata accessor for RRCandidate(v37);
  v219 = *(void *)(v202 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  v218 = v38;
  __chkstk_darwin();
  OUTLINED_FUNCTION_19_2();
  __chkstk_darwin();
  v203 = (os_log_s *)((char *)&v192 - v39);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRResult?);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v41 = OUTLINED_FUNCTION_42_7(v40);
  v208 = type metadata accessor for RRResult(v41);
  v205 = *(uint8_t **)(v208 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_19_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_19_2();
  __chkstk_darwin();
  uint64_t v43 = OUTLINED_FUNCTION_42_7((uint64_t)&v192 - v42);
  uint64_t v44 = type metadata accessor for MatchedResultsSetting(v43);
  uint64_t v45 = *(void *)(v44 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_19_2();
  __chkstk_darwin();
  uint64_t v47 = (char *)&v192 - v46;
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  v215 = v48;
  uint64_t v51 = v50 - v49;
  uint64_t v52 = v29;
  (*(void (**)(void))(v48 + 16))();
  uint64_t v53 = *(void *)(v33 + 24);
  os_log_type_t v54 = *(void *)(v33 + 32);
  OUTLINED_FUNCTION_83_12();
  v225 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 144))(v53, v54);
  v213 = v45;
  v214 = v44;
  uint64_t v55 = *(void (**)(char *, void, uint64_t))(v45 + 104);
  uint64_t v56 = (uint64_t)v47;
  v55(v47, enum case for MatchedResultsSetting.defaultMatching(_:), v44);
  v200 = v33;
  OUTLINED_FUNCTION_83_12();
  if (PhoneCallNLIntent.hasOnlyCallVerb()() && App.isFirstParty()())
  {
    uint64_t v57 = static UsoUtils.buildDummyReferenceEntity()();
    if (v57)
    {
      uint64_t v58 = v57;
      uint64_t v59 = swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v59);
      uint64_t v61 = *(void *)((char *)&dword_10 + (v225 & 0xFFFFFFFFFFFFFF8LL));
      uint64_t v60 = *(void *)((char *)&dword_18 + (v225 & 0xFFFFFFFFFFFFFF8LL));
      if (v61 >= v60 >> 1) {
        OUTLINED_FUNCTION_3_25(v61 + 1, v60);
      }
      uint64_t v62 = OUTLINED_FUNCTION_99_2();
      uint64_t v64 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v62, v63);
      specialized Array._endMutation()(v64, v65, v66, v67);
      swift_release(v58);
      uint64_t v68 = v214;
      (*(void (**)(char *, uint64_t))(v213 + 8))(v47, v214);
      v55(v47, enum case for MatchedResultsSetting.extremelySalientResultsOnly(_:), v68);
    }
  }

  uint64_t v69 = (os_log_s *)v225;
  if (v225 >> 62)
  {
    OUTLINED_FUNCTION_8_1();
    uint64_t v70 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_39();
  }

  else
  {
    uint64_t v70 = *(void *)((char *)&dword_10 + (v225 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v71 = v52;
  uint64_t v72 = v215;
  uint64_t v73 = v51;
  if (!v70)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v97 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v97, (uint64_t)static Logger.siriPhone);
    os_log_t v98 = OUTLINED_FUNCTION_41();
    if (OUTLINED_FUNCTION_10(v98))
    {
      uint64_t v99 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
      *(_WORD *)uint64_t v99 = 0;
      OUTLINED_FUNCTION_5( &dword_0,  v69,  OS_LOG_TYPE_DEFAULT,  "#ReferenceContactResolutionWrapper - No references found",  v99);
      OUTLINED_FUNCTION_0_2((uint64_t)v99);
    }

    goto LABEL_21;
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v74 = OUTLINED_FUNCTION_15_1();
  v194 = __swift_project_value_buffer(v74, (uint64_t)static Logger.siriPhone);
  uint64_t v75 = (os_log_s *)Logger.logObject.getter(v194);
  uint64_t v77 = static os_log_type_t.debug.getter(v75, v76);
  uint64_t v78 = os_log_type_enabled(v75, v77);
  v220 = v51;
  if (v78)
  {
    uint64_t v79 = OUTLINED_FUNCTION_7_0(12LL);
    v197 = v52;
    uint64_t v80 = (uint8_t *)v79;
    os_log_type_t v81 = OUTLINED_FUNCTION_7_0(32LL);
    v224[0] = v81;
    *(_DWORD *)uint64_t v80 = 136315138;
    swift_beginAccess(v56, v223, 0LL, 0LL);
    uint64_t v82 = v211;
    uint64_t v83 = v214;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v213 + 16))(v211, v56, v214);
    uint64_t v84 = String.init<A>(describing:)(v82, v83);
    os_log_type_t v86 = OUTLINED_FUNCTION_80(v84, v85);
    uint64_t v87 = OUTLINED_FUNCTION_92(v86);
    uint64_t v72 = v215;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v87, v88, v80 + 4);
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_57_0( &dword_0,  v75,  v77,  "#ReferenceContactResolutionWrapper Querying SRR with match setting: %s",  v80);
    OUTLINED_FUNCTION_17_0(v81);
    uint64_t v89 = v81;
    uint64_t v73 = v220;
    OUTLINED_FUNCTION_0_2(v89);
    uint64_t v90 = (uint64_t)v80;
    uint64_t v71 = v197;
    OUTLINED_FUNCTION_0_2(v90);
  }

  OUTLINED_FUNCTION_49( v91,  (unint64_t *)&lazy cache variable for type metadata for INStartCallIntent,  &OBJC_CLASS___INStartCallIntent_ptr);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  outlined bridged method (pb) of @objc static INIntent.typeName()(ObjCClassFromMetadata);
  uint64_t v93 = __chkstk_darwin();
  static SiriKitEventSender.current.getter(v224, v93);
  specialized static PhoneSelfPerformanceLogger.signpost<A>(domainExecutionType:taskType:siriKitEventSender:_:)();
  OUTLINED_FUNCTION_34_0();
  __swift_destroy_boxed_opaque_existential_1(v224);
  uint64_t v94 = v207;
  specialized Collection.first.getter();
  uint64_t v95 = v94;
  swift_bridgeObjectRelease();
  uint64_t v96 = v208;
  if (__swift_getEnumTagSinglePayload(v94, 1LL, v208) == 1)
  {
    outlined destroy of PhoneCallNLIntent?(v94, &demangling cache variable for type metadata for RRResult?);
LABEL_21:
    OUTLINED_FUNCTION_72_15();
    goto LABEL_22;
  }

  v210 = a24;
  v211 = a23;
  unint64_t v100 = a21;
  v212 = a22;
  unint64_t v101 = v205;
  uint64_t v102 = v204;
  (*((void (**)(uint64_t, uint64_t, uint64_t))v205 + 4))(v204, v95, v96);
  uint64_t v103 = (os_log_s *)*((void *)v101 + 2);
  uint64_t v104 = v206;
  OUTLINED_FUNCTION_94_9((uint64_t)v206);
  uint64_t v105 = (*((uint64_t (**)(os_log_s *, uint64_t))v101 + 11))(v104, v96);
  if (v105 == enum case for RRResult.foundMatch(_:))
  {
    v209 = v100;
    OUTLINED_FUNCTION_88_12();
    OUTLINED_FUNCTION_46_20(*((uint64_t (**)(uint64_t, uint64_t))v101 + 12));
    uint64_t v106 = v219;
    uint64_t v107 = v203;
    uint64_t v108 = v202;
    (*(void (**)(os_log_s *, os_log_s *, uint64_t))(v219 + 32))(v203, v104, v202);
    uint64_t v109 = *(uint8_t **)(v106 + 16);
    uint64_t v110 = v198;
    unint64_t v111 = OUTLINED_FUNCTION_99_2();
    ((void (*)(uint64_t))v109)(v111);
    OUTLINED_FUNCTION_41_24();
    uint64_t v112 = OUTLINED_FUNCTION_41();
    if (os_log_type_enabled(v107, v112))
    {
      uint64_t v113 = OUTLINED_FUNCTION_7_0(12LL);
      v218 = v109;
      uint64_t v114 = v110;
      uint64_t v115 = (uint8_t *)v113;
      os_log_type_t v116 = OUTLINED_FUNCTION_7_0(32LL);
      v224[0] = v116;
      *(_DWORD *)uint64_t v115 = 136315138;
      lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate,  (uint64_t (*)(uint64_t))&type metadata accessor for RRCandidate,  (uint64_t)&protocol conformance descriptor for RRCandidate);
      uint64_t v118 = dispatch thunk of CustomStringConvertible.description.getter(v108, v117);
      uint64_t v120 = OUTLINED_FUNCTION_80(v118, v119);
      unint64_t v121 = OUTLINED_FUNCTION_92(v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v121, v122, v115 + 4);
      OUTLINED_FUNCTION_62();
      uint64_t v123 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
      uint64_t v124 = v114;
      uint64_t v109 = v218;
      v123(v124, v108);
      OUTLINED_FUNCTION_57_0(&dword_0, v107, v112, "#ReferenceContactResolutionWrapper .foundMatch %s", v115);
      OUTLINED_FUNCTION_17_0(v116);
      OUTLINED_FUNCTION_0_2(v116);
      OUTLINED_FUNCTION_0_2((uint64_t)v115);
    }

    else
    {
      uint64_t v123 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
      v123(v110, v108);
    }

    OUTLINED_FUNCTION_96_4();
    os_log_type_t v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RRCandidate>);
    v138 = *(unsigned __int8 *)(v106 + 80);
    uint64_t v139 = (v138 + 32) & ~v138;
    uint64_t v140 = swift_allocObject(v137, v139 + *(void *)(v106 + 72), v138 | 7);
    *(_OWORD *)(v140 + 16) = xmmword_31D870;
    Class v141 = (uint64_t)v203;
    ((void (*)(uint64_t, os_log_s *, uint64_t))v109)(v140 + v139, v203, v108);
    OUTLINED_FUNCTION_28_37();
    uint64_t v142 = v108;
    uint64_t v73 = v220;
    uint64_t v71 = v197;
    specialized static ReferenceContactResolutionWrapper.resolveConcreteMatches(rrCandidates:siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( v140,  v199,  v221);
    swift_setDeallocating(v140);
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    v123(v141, v142);
    OUTLINED_FUNCTION_48_15(*((uint64_t (**)(void, uint64_t))v205 + 1));
    OUTLINED_FUNCTION_61_13();
    uint64_t v72 = v215;
  }

  else if (v105 == enum case for RRResult.needsDisambiguation(_:))
  {
    OUTLINED_FUNCTION_46_20(*((uint64_t (**)(uint64_t, uint64_t))v101 + 12));
    OUTLINED_FUNCTION_65_12();
    OUTLINED_FUNCTION_41_24();
    unint64_t v125 = OUTLINED_FUNCTION_6_0();
    OUTLINED_FUNCTION_93(v125);
    OUTLINED_FUNCTION_88_12();
    v209 = v100;
    if ((v126 & 1) != 0)
    {
      uint64_t v127 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v128 = OUTLINED_FUNCTION_7_0(32LL);
      v224[0] = v128;
      *(_DWORD *)uint64_t v127 = 136315138;
      v207 = (uint64_t)(v127 + 4);
      uint64_t v129 = OUTLINED_FUNCTION_48_0();
      uint64_t v130 = OUTLINED_FUNCTION_91_10(v129);
      uint64_t v131 = v96;
      uint64_t v133 = v132;
      OUTLINED_FUNCTION_39();
      unint64_t v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v133, v224);
      v135 = OUTLINED_FUNCTION_92(v134);
      unint64_t v101 = v205;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v135, v136, v207);
      OUTLINED_FUNCTION_2_12();
      OUTLINED_FUNCTION_4_1();
      OUTLINED_FUNCTION_57_0( &dword_0,  v104,  v131,  "#ReferenceContactResolutionWrapper found a .needsDisambiguation match %s",  v127);
      OUTLINED_FUNCTION_17_0(v128);
      OUTLINED_FUNCTION_0_2(v128);
      OUTLINED_FUNCTION_0_2((uint64_t)v127);
    }

    else
    {

      OUTLINED_FUNCTION_2_12();
    }

    v224[0] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v154 = *((void *)v103 + 2);
    if (v154)
    {
      uint64_t v155 = (*(unsigned __int8 *)(v219 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v219 + 80);
      v203 = v103;
      unint64_t v156 = (char *)v103 + v155;
      v207 = *(void *)(v219 + 72);
      v206 = *(os_log_s **)(v219 + 16);
      v157 = v197;
      v158 = v201;
      uint64_t v159 = v200;
      uint64_t v160 = v199;
      uint64_t v161 = v202;
      uint64_t v162 = v196;
      v163 = v218;
      do
      {
        v164 = ((uint64_t (*)(uint8_t *, char *, uint64_t))v206)(v163, v156, v161);
        RRCandidate.entity.getter(v164);
        OUTLINED_FUNCTION_28_37();
        specialized static ReferenceContactResolutionWrapper.resolveRREntity(rrEntity:siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( v162,  v160,  v221,  v159,  (uint64_t)v222,  v220,  v157,  v158,  v192,  v193,  v194,  v195,  v196,  v197,  v198,  v199,  v200,  v201,  v202,  (uint64_t)v203,  v204,  v205);
        v166 = v165;
        OUTLINED_FUNCTION_15_0(v216);
        OUTLINED_FUNCTION_62();
        uint64_t v167 = v166;
        v163 = v218;
        specialized Array.append<A>(contentsOf:)(v167);
        (*(void (**)(uint8_t *, uint64_t))(v219 + 8))(v163, v161);
        v156 += v207;
        --v154;
      }

      while (v154);
      swift_bridgeObjectRelease();
      uint64_t v168 = (void *)v224[0];
      uint64_t v102 = v204;
      unint64_t v101 = v205;
    }

    else
    {
      OUTLINED_FUNCTION_39();
      uint64_t v168 = _swiftEmptyArrayStorage;
    }

    static ReferenceContactResolutionWrapper.dedupePersons(persons:sharedGlobals:)((unint64_t)v168, v222);
    uint64_t v173 = v172;
    OUTLINED_FUNCTION_39();
    v224[0] = v173;
    v174 = static ReferenceContactResolutionWrapper.skeletonINPerson(persons:)();
    OUTLINED_FUNCTION_62();
    v175 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v176 = OUTLINED_FUNCTION_8_2(v175, 40LL);
    *(_OWORD *)(v176 + 16) = xmmword_31FE60;
    *(void *)(v176 + 32) = v174;
    v223[3] = v176;
    specialized Array._endMutation()(v176, v177, v178, v179);
    (*((void (**)(uint64_t, uint64_t))v101 + 1))(v102, v208);
    OUTLINED_FUNCTION_61_13();
    uint64_t v71 = v197;
    uint64_t v72 = v215;
    uint64_t v73 = v220;
  }

  else
  {
    if (v105 != enum case for RRResult.foundMatchPlural(_:))
    {
      if (v105 == enum case for RRResult.noMatch(_:))
      {
        OUTLINED_FUNCTION_41_24();
        uint64_t v169 = OUTLINED_FUNCTION_41();
        v170 = OUTLINED_FUNCTION_10(v169);
        uint64_t v73 = v220;
        if (v170)
        {
          v171 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
          *(_WORD *)v171 = 0;
          OUTLINED_FUNCTION_5( &dword_0,  v103,  (os_log_type_t)v104,  "#ReferenceContactResolutionWrapper found a .nomatch",  v171);
          OUTLINED_FUNCTION_0_2((uint64_t)v171);
        }

        OUTLINED_FUNCTION_48_15(*((uint64_t (**)(void, uint64_t))v101 + 1));
      }

      else
      {
        uint64_t v180 = v195;
        OUTLINED_FUNCTION_94_9(v195);
        v181 = (os_log_s *)OUTLINED_FUNCTION_41_24();
        uint64_t v182 = static os_log_type_t.error.getter();
        uint64_t v183 = OUTLINED_FUNCTION_10(v182);
        uint64_t v73 = v220;
        if (v183)
        {
          LODWORD(v222) = (_DWORD)v104;
          v184 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
          v185 = OUTLINED_FUNCTION_7_0(32LL);
          v224[0] = v185;
          v193 = v56;
          *(_DWORD *)v184 = 136315138;
          lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type RRResult and conformance RRResult,  (uint64_t (*)(uint64_t))&type metadata accessor for RRResult,  (uint64_t)&protocol conformance descriptor for RRResult);
          v187 = dispatch thunk of CustomStringConvertible.description.getter(v208, v186);
          v189 = OUTLINED_FUNCTION_80(v187, v188);
          uint64_t v190 = OUTLINED_FUNCTION_92(v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v190, v191, v184 + 4);
          OUTLINED_FUNCTION_62();
          (*((void (**)(uint64_t, uint64_t))v205 + 1))(v180, v208);
          OUTLINED_FUNCTION_57_0( &dword_0,  v181,  (os_log_type_t)v222,  "#ReferenceContactResolutionWrapper dropping result of type %s!",  v184);
          uint64_t v73 = v220;
          OUTLINED_FUNCTION_17_0(v185);
          OUTLINED_FUNCTION_0_2(v185);
          OUTLINED_FUNCTION_0_2((uint64_t)v184);
        }

        else
        {

          (*((void (**)(uint64_t, uint64_t))v101 + 1))(v180, v96);
        }

        OUTLINED_FUNCTION_92_9((uint64_t)&a11);
        OUTLINED_FUNCTION_92_9((uint64_t)&a13);
      }

      goto LABEL_21;
    }

    OUTLINED_FUNCTION_46_20(*((uint64_t (**)(uint64_t, uint64_t))v101 + 12));
    OUTLINED_FUNCTION_65_12();
    OUTLINED_FUNCTION_41_24();
    uint64_t v143 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_29_4(v143))
    {
      uint64_t v144 = OUTLINED_FUNCTION_7_0(12LL);
      v209 = v100;
      uint64_t v145 = (uint8_t *)v144;
      v219 = OUTLINED_FUNCTION_7_0(32LL);
      v224[0] = v219;
      *(_DWORD *)uint64_t v145 = 136315138;
      v218 = v145 + 4;
      uint64_t v146 = OUTLINED_FUNCTION_8_1();
      uint64_t v147 = OUTLINED_FUNCTION_91_10(v146);
      uint64_t v149 = v148;
      OUTLINED_FUNCTION_39();
      v150 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v147, v149, v224);
      os_log_type_t v151 = OUTLINED_FUNCTION_92(v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v151, v152, v218);
      OUTLINED_FUNCTION_2_12();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_57_0( &dword_0,  v104,  (os_log_type_t)v101,  "#ReferenceContactResolutionWrapper .foundMatchPlural %s",  v145);
      uint64_t v153 = v219;
      OUTLINED_FUNCTION_17_0(v219);
      OUTLINED_FUNCTION_0_2(v153);
      OUTLINED_FUNCTION_0_2((uint64_t)v145);
    }

    else
    {

      OUTLINED_FUNCTION_2_12();
    }

    OUTLINED_FUNCTION_95_7();
    uint64_t v73 = v220;
    specialized static ReferenceContactResolutionWrapper.resolveConcreteMatches(rrCandidates:siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( v103,  v199,  v221);
    OUTLINED_FUNCTION_39();
    OUTLINED_FUNCTION_48_15(*((uint64_t (**)(void, uint64_t))v205 + 1));
    OUTLINED_FUNCTION_72_15();
  }

void specialized static ReferenceContactResolutionWrapper.resolveRREntity(rrEntity:siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint8_t *a22)
{
  void *(*v62)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  os_log_s *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  void v74[7];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  os_log_s *v80;
  uint64_t v81;
  void *v82;
  OUTLINED_FUNCTION_29_2();
  uint64_t v23 = v22;
  uint64_t v77 = v24;
  uint64_t v78 = v25;
  uint64_t v75 = v26;
  uint64_t v76 = v27;
  uint64_t v29 = v28;
  uint64_t v79 = a21;
  uint64_t v30 = *(void *)(v22 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v33 = v32 - v31;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v32 - v31, v34, v35);
  static Signpost.begin(_:)();
  os_log_type_t v81 = v36;
  uint64_t v38 = v37;
  os_log_type_t v40 = v39;
  uint64_t v41 = OUTLINED_FUNCTION_49( v36,  (unint64_t *)&lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
  uint64_t v80 = v29;
  uint64_t v42 = (void *)RREntity.convertData<A>(to:)(v41, v41);
  Signpost.OpenSignpost.end()();
  if (v42)
  {
    uint64_t v43 = (os_log_s *)one-time initialization token for siriPhone;
    id v44 = v42;
    if (v43 != (os_log_s *)-1LL) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v45 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v45, (uint64_t)static Logger.siriPhone);
    os_log_type_t v46 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_29_5(v46))
    {
      uint64_t v47 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      OUTLINED_FUNCTION_133(v47);
      OUTLINED_FUNCTION_5(&dword_0, v43, v40, "#ReferenceContactResolutionWrapper resolved to an INPerson", v38);
      OUTLINED_FUNCTION_0_2((uint64_t)v38);
    }

    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v49 = OUTLINED_FUNCTION_8_2(v48, 40LL);
    *(_OWORD *)(v49 + 16) = xmmword_31FE60;
    *(void *)(v49 + 32) = v44;
    uint64_t v82 = (void *)v49;
    specialized Array._endMutation()(v49, v50, v51, v52);
    uint64_t v53 = v82;
LABEL_13:
    os_log_type_t v54 = v80;
    goto LABEL_14;
  }

  os_log_type_t v54 = v80;
  OUTLINED_FUNCTION_66_16();
  uint64_t v55 = OUTLINED_FUNCTION_20_35();
  uint64_t v56 = type metadata accessor for UsoEntity_common_Person(v55);
  OUTLINED_FUNCTION_2_60(v56);
  OUTLINED_FUNCTION_38_1();
  if (v82)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v57 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v57, (uint64_t)static Logger.siriPhone);
    os_log_type_t v58 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_29_5(v58))
    {
      uint64_t v59 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      OUTLINED_FUNCTION_133(v59);
      OUTLINED_FUNCTION_5( &dword_0,  v29,  (os_log_type_t)v80,  "#ReferenceContactResolutionWrapper resolved to a common_Person",  a22);
      OUTLINED_FUNCTION_0_2((uint64_t)a22);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
    uint64_t v60 = OUTLINED_FUNCTION_81_12();
    uint64_t v61 = OUTLINED_FUNCTION_40_19(v60);
    *(_OWORD *)(v61 + 16) = xmmword_31D870;
    UsoEntity_common_Person.toContactQuery()(v61);
    uint64_t v53 = (void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a22)(v61, v75, v76, v77, v78);
    OUTLINED_FUNCTION_23_5();
    OUTLINED_FUNCTION_76();
    goto LABEL_13;
  }

  OUTLINED_FUNCTION_66_16();
  uint64_t v63 = OUTLINED_FUNCTION_20_35();
  uint64_t v64 = type metadata accessor for UsoEntity_common_Group(v63);
  OUTLINED_FUNCTION_2_60(v64);
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_66_16();
  os_log_type_t v65 = OUTLINED_FUNCTION_20_35();
  uint64_t v66 = type metadata accessor for UsoEntity_common_Agent(v65);
  OUTLINED_FUNCTION_2_60(v66);
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_66_16();
  uint64_t v67 = OUTLINED_FUNCTION_20_35();
  uint64_t v68 = type metadata accessor for UsoEntity_common_App(v67);
  OUTLINED_FUNCTION_2_60(v68);
  OUTLINED_FUNCTION_38_1();
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v69 = OUTLINED_FUNCTION_15_1();
  uint64_t v70 = (os_log_s *)OUTLINED_FUNCTION_12_1(v69, (uint64_t)static Logger.siriPhone);
  uint64_t v71 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_93(v71))
  {
    uint64_t v72 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
    *(_WORD *)uint64_t v72 = 0;
    OUTLINED_FUNCTION_5( &dword_0,  v70,  OS_LOG_TYPE_DEFAULT,  "#ReferenceContactResolutionWrapper resolved entity was not recognized as a person or group",  v72);
    uint64_t v73 = (uint64_t)v72;
    os_log_type_t v54 = v80;
    OUTLINED_FUNCTION_0_2(v73);
  }

  uint64_t v53 = _swiftEmptyArrayStorage;
LABEL_14:
  uint64_t v62 = (void *(*)(uint64_t *__return_ptr, uint64_t *))__chkstk_darwin();
  v74[2] = v54;
  specialized Sequence.compactMap<A>(_:)(v62, (uint64_t)v74, (unint64_t)v53);
  OUTLINED_FUNCTION_87_0();
  swift_release(v81);

  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v33, v23);
  OUTLINED_FUNCTION_7_5();
}

uint64_t partial apply for closure #1 in static ReferenceContactResolutionWrapper.runCombinedSRRandCRR(siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)@<X0>( void *a1@<X8>)
{
  return closure #1 in static ReferenceContactResolutionWrapper.runCombinedSRRandCRR(siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( *(void *)(v1 + 24),  *(void *)(v1 + 32),  a1);
}

uint64_t partial apply for closure #1 in static ReferenceContactResolutionWrapper.resolveRREntity(rrEntity:siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)@<X0>( void **a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static ReferenceContactResolutionWrapper.resolveRREntity(rrEntity:siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( a1,  a2);
}

uint64_t closure #1 in static ReferenceContactResolutionWrapper.resolveRREntity(rrEntity:siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)partial apply@<X0>( void **a1@<X0>, void *a2@<X8>)
{
  return partial apply for closure #1 in static ReferenceContactResolutionWrapper.resolveRREntity(rrEntity:siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( a1,  a2);
}

uint64_t OUTLINED_FUNCTION_2_65()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_75( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  *(_DWORD *)(v8 - 180) = a8;
  *(_DWORD *)(v8 - 132) = a3;
  uint64_t v9 = *(void *)(v8 + 24);
  *(void *)(v8 - 152) = *(void *)(v8 + 16);
  *(void *)(v8 - 144) = v9;
  return type metadata accessor for Locale(0LL);
}

uint64_t OUTLINED_FUNCTION_7_73()
{
  *(_DWORD *)(v1 - 128) = *(_DWORD *)(v1 - 180) & 1;
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
}

void OUTLINED_FUNCTION_11_59( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  *(void *)(v31 - 176) = v29;
  specialized static ReferenceContactResolutionWrapper.runCombinedSRRandCRR(siriKitIntent:app:nlIntent:sharedGlobals:contactGroupResolver:)( v24,  v30,  v29,  v27,  v25,  v26,  v28,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24);
}

id OUTLINED_FUNCTION_12_60(float a1)
{
  *uint64_t v1 = a1;
  *(void *)(v2 - 120) = *(void *)(v2 - 128);
  return *(id *)(v2 - 128);
}

uint64_t OUTLINED_FUNCTION_13_60()
{
  uint64_t v1 = *(void *)(v0 - 96);
  uint64_t v2 = *(void *)(v0 - 88);
  __swift_project_boxed_opaque_existential_1((void *)(v0 - 120), v1);
  return dispatch thunk of DeviceState.siriLocale.getter(v1, v2);
}

_WORD *OUTLINED_FUNCTION_19_43(_WORD *result)
{
  *(void *)(v2 - 192) = v1;
  *uint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_23_41()
{
  return swift_bridgeObjectRetain(v0);
}

void OUTLINED_FUNCTION_26_38(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 168) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_29_31()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 160) + 8LL))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_32_31()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 120, v2, v1, v0);
}

uint64_t OUTLINED_FUNCTION_41_24()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_42_17()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_46_20@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_48_15@<X0>(uint64_t (*a1)(void, uint64_t)@<X8>)
{
  return a1(*(void *)(v2 - 320), v1);
}

  ;
}

void OUTLINED_FUNCTION_58_14()
{
  *uint64_t v0 = *(void *)(v2 - 128);
}

id OUTLINED_FUNCTION_60_16(uint64_t a1, uint64_t a2)
{
  return v2;
}

uint64_t OUTLINED_FUNCTION_61_13()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 248) + 8LL))( *(void *)(v0 - 408),  *(void *)(v0 - 240));
}

uint64_t OUTLINED_FUNCTION_62_12()
{
  return v0(v1, v2);
}

_WORD *OUTLINED_FUNCTION_69_14(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_72_15()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 248) + 8LL))(v0, *(void *)(v1 - 240));
}

  ;
}

uint64_t OUTLINED_FUNCTION_78_13@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_81_12()
{
  return type metadata accessor for ContactQuery(0LL);
}

void *OUTLINED_FUNCTION_83_12()
{
  return __swift_project_boxed_opaque_existential_1(v1, v0);
}

uint64_t OUTLINED_FUNCTION_84_9(uint64_t a1)
{
  *(void *)(v1 - 128) = a1;
  return Logger.logObject.getter();
}

void OUTLINED_FUNCTION_85_7()
{
}

void OUTLINED_FUNCTION_88_12()
{
  *(void *)(v2 - 376) = v1;
  *(void *)(v2 - 408) = v0;
}

uint64_t OUTLINED_FUNCTION_91_10(uint64_t a1)
{
  return Array.description.getter(a1, *(void *)(v1 - 336));
}

uint64_t OUTLINED_FUNCTION_92_9@<X0>(uint64_t a1@<X8>)
{
  return v1(*(void *)(a1 - 256), v2);
}

uint64_t OUTLINED_FUNCTION_94_9(uint64_t a1)
{
  return v1(a1, v3, v2);
}

  ;
}

PhoneCallFlowDelegatePlugin::AnnounceGroupFaceTimeInviteCATsSimple::Properties_optional __swiftcall AnnounceGroupFaceTimeInviteCATsSimple.Properties.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of AnnounceGroupFaceTimeInviteCATsSimple.Properties.init(rawValue:);
  return (PhoneCallFlowDelegatePlugin::AnnounceGroupFaceTimeInviteCATsSimple::Properties_optional)AnnounceGroupFaceTimeInviteCATsSimple.Properties.init(rawValue:)( rawValue,  v1);
}

unint64_t AnnounceGroupFaceTimeInviteCATPatternsIdentifiers.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD00000000000003FLL;
  }
  else {
    return 0xD00000000000002FLL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceGroupFaceTimeInviteCATsSimple.Properties( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance AnnounceGroupFaceTimeInviteCATsSimple.Properties()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnnounceGroupFaceTimeInviteCATsSimple.Properties( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceGroupFaceTimeInviteCATsSimple.Properties( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::AnnounceGroupFaceTimeInviteCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceGroupFaceTimeInviteCATsSimple.Properties@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::AnnounceGroupFaceTimeInviteCATsSimple::Properties_optional *a2@<X8>)
{
  result.value = AnnounceGroupFaceTimeInviteCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AnnounceGroupFaceTimeInviteCATsSimple.Properties( unint64_t *a1@<X8>)
{
  *a1 = AnnounceGroupFaceTimeInviteCATPatternsIdentifiers.rawValue.getter(*v1);
  a1[1] = v3;
  OUTLINED_FUNCTION_2();
}

uint64_t AnnounceGroupFaceTimeInviteCATsSimple.offerFollowUpIntent()()
{
  *(void *)(v0 + 16) = v1;
  *Swift::OpaquePointer v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCall();
  return ((uint64_t (*)(unint64_t, unint64_t, void *))v3)( 0xD00000000000002FLL,  0x8000000000345A30LL,  _swiftEmptyArrayStorage);
}

PhoneCallFlowDelegatePlugin::AnnounceGroupFaceTimeInviteCATsSimple::OfferFollowUpIntentDialogIds_optional __swiftcall AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds.init(rawValue:);
  return (PhoneCallFlowDelegatePlugin::AnnounceGroupFaceTimeInviteCATsSimple::OfferFollowUpIntentDialogIds_optional)AnnounceGroupFaceTimeInviteCATsSimple.Properties.init(rawValue:)(rawValue, v1);
}

uint64_t AnnounceGroupFaceTimeInviteCATsSimple.Properties.init(rawValue:)( Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v4._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  _findStringSwitchCase(cases:string:)(cases, v4);
  OUTLINED_FUNCTION_27_2();
  if (v2 == 1) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = 2;
  }
  if (v2) {
    return v6;
  }
  else {
    return 0LL;
  }
}

PhoneCallFlowDelegatePlugin::AnnounceGroupFaceTimeInviteCATsSimple::OfferFollowUpIntentDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::AnnounceGroupFaceTimeInviteCATsSimple::OfferFollowUpIntentDialogIds_optional *a2@<X8>)
{
  result.value = AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds( uint64_t *a1@<X8>)
{
  *a1 = AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds.rawValue.getter(*v1);
  a1[1] = 0xE700000000000000LL;
  OUTLINED_FUNCTION_2();
}

uint64_t AnnounceGroupFaceTimeInviteCATsSimple.offerFollowUpIntentAsLabels()()
{
  *(void *)(v0 + 16) = v1;
  unint64_t v2 = lazy protocol witness table accessor for type AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds and conformance AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds();
  *Swift::OpaquePointer v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  return ((uint64_t (*)(unint64_t, unint64_t, void *, ValueMetadata *, unint64_t))v4)( 0xD00000000000002FLL,  0x8000000000345A30LL,  _swiftEmptyArrayStorage,  &type metadata for AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds,  v2);
}

unint64_t lazy protocol witness table accessor for type AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds and conformance AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds and conformance AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds;
  if (!lazy protocol witness table cache variable for type AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds and conformance AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds,  &type metadata for AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds and conformance AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds and conformance AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds;
  if (!lazy protocol witness table cache variable for type AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds and conformance AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds,  &type metadata for AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds and conformance AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds);
  }

  return result;
}

uint64_t AnnounceGroupFaceTimeInviteCATsSimple.readGroupFaceTimeInviteAnnouncement(messagesGroupName:caller:participants:burstIndex:numberOfParticipants:numberOfParticipantsNotAnnounced:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v8 + 72) = OUTLINED_FUNCTION_12_0(v9);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_33_37(v10, v11, v12);
}

uint64_t AnnounceGroupFaceTimeInviteCATsSimple.readGroupFaceTimeInviteAnnouncement(messagesGroupName:caller:participants:burstIndex:numberOfParticipants:numberOfParticipantsNotAnnounced:)()
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_28_38(v4);
  v1[10] = v5;
  *(_OWORD *)(v5 + 16) = xmmword_328A80;
  *(void *)(v5 + 32) = v3;
  *(void *)(v5 + 40) = 0x800000000034CEF0LL;
  OUTLINED_FUNCTION_27_6(v5, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  OUTLINED_FUNCTION_13_61(v7);
  if (v8)
  {
    outlined destroy of SpeakableString?(v2, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v9);
  }

  OUTLINED_FUNCTION_11_60();
  if (v5 == -48)
  {
    uint64_t v11 = 0LL;
    uint64_t v10 = 0LL;
    stru_20.vmaddr = 0LL;
    stru_20.vmsize = 0LL;
  }

  else
  {
    uint64_t v10 = type metadata accessor for PhonePerson(0LL);
    uint64_t v11 = v5 + 48;
  }

  OUTLINED_FUNCTION_0_75(v10, v11);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhonePerson]);
  OUTLINED_FUNCTION_2_66(v12);
  if ((v0 & 1) != 0)
  {
    uint64_t v13 = 0LL;
    *(void *)(v5 + 200) = 0LL;
    *(void *)(v5 + 208) = 0LL;
  }

  else
  {
    uint64_t v13 = &type metadata for Double;
  }

  OUTLINED_FUNCTION_25_38((uint64_t)v13);
  *(void *)(v5 + 232) = 0x800000000034CF10LL;
  if ((v14 & 1) != 0)
  {
    uint64_t v15 = 0LL;
    *(void *)(v5 + 248) = 0LL;
    *(void *)(v5 + 256) = 0LL;
  }

  else
  {
    uint64_t v15 = &type metadata for Double;
  }

  OUTLINED_FUNCTION_20_45((uint64_t)v15);
  *(void *)(v5 + 280) = 0x800000000034CF30LL;
  if ((v16 & 1) != 0)
  {
    uint64_t v18 = 0LL;
    uint64_t v17 = 0LL;
    *(void *)(v5 + 296) = 0LL;
    *(void *)(v5 + 304) = 0LL;
  }

  else
  {
    uint64_t v17 = v1[7];
    uint64_t v18 = &type metadata for Double;
  }

  *(void *)(v5 + 312) = v18;
  *(void *)(v5 + 288) = v17;
  OUTLINED_FUNCTION_7_74();
  swift_bridgeObjectRetain();
  unint64_t v19 = (void *)swift_task_alloc(v2);
  v1[11] = v19;
  *unint64_t v19 = v1;
  v19[1] = AnnounceGroupFaceTimeInviteCATsSimple.readGroupFaceTimeInviteAnnouncement(messagesGroupName:caller:participants:burstIndex:numberOfParticipants:numberOfParticipantsNotAnnounced:);
  return v21(v3 + 46, 0x8000000000345A60LL, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_108_3();
  if (v1)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v3, v4, v5);
  }

  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_23_3();
    return OUTLINED_FUNCTION_8_3(v0, *(uint64_t (**)(void))(v2 + 8));
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_23_3();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

PhoneCallFlowDelegatePlugin::AnnounceGroupFaceTimeInviteCATsSimple::ReadGroupFaceTimeInviteAnnouncementDialogIds_optional __swiftcall AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds.init(rawValue:),  v3);
  OUTLINED_FUNCTION_27_2();
  if (v1 >= 0xC) {
    return (PhoneCallFlowDelegatePlugin::AnnounceGroupFaceTimeInviteCATsSimple::ReadGroupFaceTimeInviteAnnouncementDialogIds_optional)12;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::AnnounceGroupFaceTimeInviteCATsSimple::ReadGroupFaceTimeInviteAnnouncementDialogIds_optional)v1;
  }
}

uint64_t AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds.rawValue.getter( unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1C83E0
                                                                     + 4 * asc_331BE0[a1]))( 0xD000000000000015LL,  0x8000000000345AA0LL);
}

uint64_t sub_1C83E0()
{
  return v0 - 3;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::AnnounceGroupFaceTimeInviteCATsSimple::ReadGroupFaceTimeInviteAnnouncementDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::AnnounceGroupFaceTimeInviteCATsSimple::ReadGroupFaceTimeInviteAnnouncementDialogIds_optional *a2@<X8>)
{
  result.value = AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds( uint64_t *a1@<X8>)
{
  *a1 = AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds.rawValue.getter(*v1);
  a1[1] = v3;
  OUTLINED_FUNCTION_2();
}

uint64_t AnnounceGroupFaceTimeInviteCATsSimple.readGroupFaceTimeInviteAnnouncementAsLabels(messagesGroupName:caller:participants:burstIndex:numberOfParticipants:numberOfParticipantsNotAnnounced:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v8 + 72) = OUTLINED_FUNCTION_12_0(v9);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_33_37(v10, v11, v12);
}

uint64_t AnnounceGroupFaceTimeInviteCATsSimple.readGroupFaceTimeInviteAnnouncementAsLabels(messagesGroupName:caller:participants:burstIndex:numberOfParticipants:numberOfParticipantsNotAnnounced:)()
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_28_38(v4);
  v1[10] = v5;
  *(_OWORD *)(v5 + 16) = xmmword_328A80;
  *(void *)(v5 + 32) = v3;
  *(void *)(v5 + 40) = 0x800000000034CEF0LL;
  OUTLINED_FUNCTION_27_6(v5, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  OUTLINED_FUNCTION_13_61(v7);
  if (v8)
  {
    outlined destroy of SpeakableString?(v2, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v9);
  }

  OUTLINED_FUNCTION_11_60();
  if (v5 == -48)
  {
    uint64_t v11 = 0LL;
    uint64_t v10 = 0LL;
    stru_20.vmaddr = 0LL;
    stru_20.vmsize = 0LL;
  }

  else
  {
    uint64_t v10 = type metadata accessor for PhonePerson(0LL);
    uint64_t v11 = v5 + 48;
  }

  OUTLINED_FUNCTION_0_75(v10, v11);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhonePerson]);
  OUTLINED_FUNCTION_2_66(v12);
  if ((v0 & 1) != 0)
  {
    uint64_t v13 = 0LL;
    *(void *)(v5 + 200) = 0LL;
    *(void *)(v5 + 208) = 0LL;
  }

  else
  {
    uint64_t v13 = &type metadata for Double;
  }

  OUTLINED_FUNCTION_25_38((uint64_t)v13);
  *(void *)(v5 + 232) = 0x800000000034CF10LL;
  if ((v14 & 1) != 0)
  {
    uint64_t v15 = 0LL;
    *(void *)(v5 + 248) = 0LL;
    *(void *)(v5 + 256) = 0LL;
  }

  else
  {
    uint64_t v15 = &type metadata for Double;
  }

  OUTLINED_FUNCTION_20_45((uint64_t)v15);
  *(void *)(v5 + 280) = 0x800000000034CF30LL;
  if ((v16 & 1) != 0)
  {
    uint64_t v18 = 0LL;
    uint64_t v17 = 0LL;
    *(void *)(v5 + 296) = 0LL;
    *(void *)(v5 + 304) = 0LL;
  }

  else
  {
    uint64_t v17 = v1[7];
    uint64_t v18 = &type metadata for Double;
  }

  *(void *)(v5 + 312) = v18;
  *(void *)(v5 + 288) = v17;
  OUTLINED_FUNCTION_7_74();
  swift_bridgeObjectRetain();
  unint64_t v19 = (void *)swift_task_alloc(v2);
  v1[11] = v19;
  unint64_t GroupFaceTimeInviteAnnouncementDialogIds = lazy protocol witness table accessor for type AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds and conformance AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds();
  *unint64_t v19 = v1;
  v19[1] = AnnounceGroupFaceTimeInviteCATsSimple.readGroupFaceTimeInviteAnnouncementAsLabels(messagesGroupName:caller:participants:burstIndex:numberOfParticipants:numberOfParticipantsNotAnnounced:);
  return v22( v3 + 46,  0x8000000000345A60LL,  v5,  &type metadata for AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds,  GroupFaceTimeInviteAnnouncementDialogIds);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_108_3();
  if (v1)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v3, v4, v5);
  }

  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_23_3();
    return OUTLINED_FUNCTION_8_3(v0, *(uint64_t (**)(void))(v2 + 8));
  }

unint64_t lazy protocol witness table accessor for type AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds and conformance AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds and conformance AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds;
  if (!lazy protocol witness table cache variable for type AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds and conformance AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds,  &type metadata for AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds and conformance AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds and conformance AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds;
  if (!lazy protocol witness table cache variable for type AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds and conformance AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds,  &type metadata for AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds and conformance AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AnnounceGroupFaceTimeInviteCATsSimple.Properties and conformance AnnounceGroupFaceTimeInviteCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceGroupFaceTimeInviteCATsSimple.Properties and conformance AnnounceGroupFaceTimeInviteCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type AnnounceGroupFaceTimeInviteCATsSimple.Properties and conformance AnnounceGroupFaceTimeInviteCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AnnounceGroupFaceTimeInviteCATsSimple.Properties,  &type metadata for AnnounceGroupFaceTimeInviteCATsSimple.Properties);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnnounceGroupFaceTimeInviteCATsSimple.Properties and conformance AnnounceGroupFaceTimeInviteCATsSimple.Properties);
  }

  return result;
}

uint64_t type metadata accessor for AnnounceGroupFaceTimeInviteCATsSimple(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for AnnounceGroupFaceTimeInviteCATsSimple;
  if (!type metadata singleton initialization cache for AnnounceGroupFaceTimeInviteCATsSimple) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AnnounceGroupFaceTimeInviteCATsSimple);
  }
  return result;
}

uint64_t type metadata completion function for AnnounceGroupFaceTimeInviteCATsSimple(uint64_t a1)
{
  return swift_initClassMetadata2( a1,  0LL,  0LL,  v2,  a1 + class metadata base offset for AnnounceGroupFaceTimeInviteCATsSimple);
}

uint64_t ObjC metadata update function for AnnounceGroupFaceTimeInviteCATsSimple()
{
  return type metadata accessor for AnnounceGroupFaceTimeInviteCATsSimple(0LL);
}

void type metadata accessor for AnnounceGroupFaceTimeInviteCATsSimple.Properties()
{
}

uint64_t storeEnumTagSinglePayload for AnnounceGroupFaceTimeInviteCATsSimple.Properties( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1C8968 + 4 * byte_331BF1[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C899C + 4 * byte_331BEC[v4]))();
}

uint64_t sub_1C899C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C89A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1C89ACLL);
  }
  return result;
}

uint64_t sub_1C89B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1C89C0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1C89C4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C89CC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for AnnounceGroupFaceTimeInviteCATsSimple.OfferFollowUpIntentDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF4) {
    return ((uint64_t (*)(void))((char *)&loc_1C8A30 + 4 * byte_331BFB[v4]))();
  }
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1C8A64 + 4 * byte_331BF6[v4]))();
}

uint64_t sub_1C8A64(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C8A6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1C8A74LL);
  }
  return result;
}

uint64_t sub_1C8A80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1C8A88LL);
  }
  *(_BYTE *)uint64_t result = a2 + 11;
  return result;
}

uint64_t sub_1C8A8C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C8A94(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds()
{
}

uint64_t OUTLINED_FUNCTION_0_75@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 96) = a2;
  *(void *)(v2 + 120) = result;
  strcpy((char *)(v2 + 128), "participants");
  *(_BYTE *)(v2 + 141) = 0;
  *(_WORD *)(v2 + 142) = -5120;
  return result;
}

uint64_t OUTLINED_FUNCTION_2_66(uint64_t result)
{
  v2[18] = v1;
  v2[21] = result;
  v2[22] = 0x646E497473727562LL;
  v2[23] = 0xEA00000000007865LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_7_74()
{
  return swift_retain(v0);
}

void OUTLINED_FUNCTION_11_60()
{
  *(void *)(v0 + 80) = 0x72656C6C6163LL;
  *(void *)(v0 + 88) = 0xE600000000000000LL;
}

uint64_t OUTLINED_FUNCTION_13_61(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

void OUTLINED_FUNCTION_20_45(uint64_t a1@<X8>)
{
  v2[30] = v1;
  v2[33] = a1;
  v2[34] = v3 + 15;
}

uint64_t OUTLINED_FUNCTION_28_38(uint64_t a1)
{
  return swift_allocObject(a1, 320LL, 7LL);
}

  ;
}

uint64_t ContactNeedsConfirmationFlowStrategy.init(promptProvider:sharedGlobals:)@<X0>( uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = a5 + *(int *)(type metadata accessor for ContactNeedsConfirmationFlowStrategy(0LL, a3, a4, v9) + 36);
  return outlined init with take of AppSelectionSignalComponent(a2, v10);
}

uint64_t type metadata accessor for ContactNeedsConfirmationFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for ContactNeedsConfirmationFlowStrategy);
}

uint64_t ContactNeedsConfirmationFlowStrategy.actionForInput(_:resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Parse(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  char v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = outlined init with copy of SignalProviding(v3 + *(int *)(a3 + 36), (uint64_t)v14);
  Input.parse.getter(v9);
  char v10 = ContactPromptResponseParser.parseResponse(from:)((uint64_t)v8);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v11 = outlined destroy of ContactPromptResponseParser((uint64_t)v14);
  else {
    return static ActionForInput.ignore()(v11);
  }
}

uint64_t ContactNeedsConfirmationFlowStrategy.parseConfirmationResponse(input:resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[18] = a4;
  v5[19] = v4;
  v5[16] = a2;
  v5[17] = a3;
  v5[15] = a1;
  uint64_t v7 = type metadata accessor for PhoneError(0LL);
  v5[20] = v7;
  v5[21] = OUTLINED_FUNCTION_23(*(void *)(v7 - 8));
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v5[22] = OUTLINED_FUNCTION_23(*(void *)(v8 - 8));
  uint64_t v9 = type metadata accessor for ParameterIdentifier(0LL);
  v5[23] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[24] = v10;
  v5[25] = OUTLINED_FUNCTION_23(v10);
  uint64_t v11 = type metadata accessor for Parse(0LL);
  v5[26] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[27] = v12;
  v5[28] = OUTLINED_FUNCTION_23(v12);
  v5[29] = *(void *)(a4 + 24);
  v5[30] = *(void *)(a4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL);
  v5[31] = AssociatedTypeWitness;
  uint64_t v14 = type metadata accessor for ParameterResolutionRecord(0LL, AssociatedTypeWitness);
  v5[32] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v5[33] = v15;
  v5[34] = OUTLINED_FUNCTION_23(v15);
  return swift_task_switch( ContactNeedsConfirmationFlowStrategy.parseConfirmationResponse(input:resolveRecord:),  0LL,  0LL);
}

uint64_t ContactNeedsConfirmationFlowStrategy.parseConfirmationResponse(input:resolveRecord:)()
{
  uint64_t v1 = (void *)ParameterResolutionRecord.result.getter(v0[32]);
  id v2 = [v1 itemToConfirm];

  _bridgeAnyObjectToAny(_:)(v0 + 7, v2);
  swift_unknownObjectRelease(v2);
  unint64_t v3 = type metadata accessor for INPerson();
  if (swift_dynamicCast(v0 + 11, v0 + 7, &type metadata for Any[1]))
  {
    uint64_t v119 = v3;
    uint64_t v116 = (uint64_t)(v0 + 14);
    uint64_t v126 = (uint64_t)(v0 + 2);
    person = (void *)v0[11];
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v113 = (uint64_t)(v0 + 13);
    uint64_t v5 = v0[33];
    uint64_t v4 = v0[34];
    uint64_t v6 = v0[32];
    uint64_t v7 = v0[17];
    uint64_t v8 = OUTLINED_FUNCTION_15_1();
    uint64_t v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    uint64_t v118 = v9;
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v13 = static os_log_type_t.debug.getter(v11, v12);
    BOOL v14 = os_log_type_enabled(v11, v13);
    uint64_t v15 = v0[32];
    if (v14)
    {
      uint64_t v16 = v0[31];
      uint64_t v112 = v0[30];
      uint64_t v17 = v0[29];
      os_log_type_t v123 = v13;
      uint64_t v18 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v120 = OUTLINED_FUNCTION_7_0(32LL);
      v129[0] = v120;
      *(_DWORD *)uint64_t v18 = 136315138;
      unint64_t v19 = (void *)ParameterResolutionRecord.intent.getter(v15);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v17, v112, v16);
      (*(void (**)(uint64_t))(*(void *)(AssociatedConformanceWitness + 8) + 8LL))(v16);

      uint64_t v21 = OUTLINED_FUNCTION_9_59();
      uint64_t v29 = OUTLINED_FUNCTION_7_75(v21, v22, v23, v24, v25, v26, v27, v28, v112, v113, v116, v118, v119);
      unint64_t v31 = v30;
      OUTLINED_FUNCTION_62();
      v0[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, v129);
      OUTLINED_FUNCTION_12_61(v116, (uint64_t)(v0 + 15), (uint64_t)(v18 + 4));
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_57_0( &dword_0,  v11,  v123,  "#ContactNeedsConfirmationFlowStrategy contacts before parsing confirmation response: %s",  v18);
      OUTLINED_FUNCTION_17_0(v120);
      OUTLINED_FUNCTION_0_2(v120);
      OUTLINED_FUNCTION_0_2((uint64_t)v18);
    }

    else
    {
      OUTLINED_FUNCTION_9_59();
    }

    uint64_t v40 = v0[32];
    uint64_t v42 = v0[27];
    uint64_t v41 = v0[28];
    uint64_t v44 = v0[25];
    uint64_t v43 = v0[26];
    uint64_t v121 = v0[24];
    uint64_t v124 = v0[23];
    uint64_t v45 = outlined init with copy of SignalProviding(v0[19] + *(int *)(v0[18] + 36LL), v126);
    Input.parse.getter(v45);
    unsigned __int8 v46 = ContactPromptResponseParser.parseResponse(from:)(v41);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
    outlined destroy of ContactPromptResponseParser(v126);
    uint64_t v47 = (void *)ParameterResolutionRecord.intent.getter(v40);
    uint64_t v48 = ParameterResolutionRecord.parameter.getter(v40);
    uint64_t v49 = ParameterIdentifier.multicardinalIndex.getter(v48);
    LOBYTE(v40) = v50;
    (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v44, v124);
    if ((v40 & 1) != 0) {
      uint64_t v51 = 0LL;
    }
    else {
      uint64_t v51 = (void *)v49;
    }
    if (v46 - 1 < 2)
    {
      uint64_t v52 = *(void *)(swift_getAssociatedConformanceWitness(v0[29], v0[30], v0[31]) + 8);

      uint64_t v127 = v47;
      id v53 = v47;
      os_log_type_t v54 = (os_log_s *)OUTLINED_FUNCTION_14_48();
      os_log_type_t v56 = static os_log_type_t.debug.getter(v54, v55);
      if (os_log_type_enabled(v54, v56))
      {
        uint64_t v57 = v0[31];
        os_log_type_t v58 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
        uint64_t v59 = OUTLINED_FUNCTION_7_0(32LL);
        v129[0] = v59;
        *(_DWORD *)os_log_type_t v58 = 136315138;
        uint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(v57, v52);
        uint64_t v68 = OUTLINED_FUNCTION_7_75(v60, v61, v62, v63, v64, v65, v66, v67, v111, v113, v116, v118, v119);
        unint64_t v70 = v69;
        OUTLINED_FUNCTION_62();
        v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v70, v129);
        OUTLINED_FUNCTION_12_61((uint64_t)(v0 + 12), v114, (uint64_t)(v58 + 4));
        swift_bridgeObjectRelease();

        OUTLINED_FUNCTION_57_0( &dword_0,  v54,  v56,  "#ContactNeedsConfirmationFlowStrategy contacts after user said no: %s",  v58);
        OUTLINED_FUNCTION_17_0(v59);
        OUTLINED_FUNCTION_0_2(v59);
        OUTLINED_FUNCTION_0_2((uint64_t)v58);
      }

      else
      {
      }

      uint64_t v77 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
LABEL_35:
      uint64_t v102 = v0[31];
      uint64_t v103 = v0[28];
      uint64_t v104 = v0[25];
      uint64_t v106 = v0[21];
      uint64_t v105 = v0[22];
      uint64_t v107 = *v77;
      uint64_t v108 = type metadata accessor for ConfirmationResponse(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 104LL))(v105, v107, v108);
      __swift_storeEnumTagSinglePayload(v105, 0LL, 1LL, v108);
      NeedsConfirmationAnswer.init(answeredValue:updatedIntent:)(v105, v127, v102);

      OUTLINED_FUNCTION_23_3();
      swift_task_dealloc(v103);
      swift_task_dealloc(v104);
      swift_task_dealloc(v105);
      swift_task_dealloc(v106);
      unint64_t v85 = (uint64_t (*)(void))v0[1];
      return v85();
    }

    if (!v46)
    {
      uint64_t v71 = v0[31];
      uint64_t v72 = *(void *)(swift_getAssociatedConformanceWitness(v0[29], v0[30], v71) + 8);
      uint64_t v73 = *(uint64_t (**)(uint64_t, uint64_t))(v72 + 8);
      uint64_t v74 = v73(v71, v72);
      if (v74) {
        uint64_t v75 = v74;
      }
      else {
        uint64_t v75 = (uint64_t)_swiftEmptyArrayStorage;
      }
      if ((unint64_t)v75 >> 62)
      {
        if (v75 < 0) {
          uint64_t v110 = v75;
        }
        else {
          uint64_t v110 = v75 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain();
        uint64_t v76 = _CocoaArrayWrapper.endIndex.getter(v110);
        OUTLINED_FUNCTION_62();
      }

      else
      {
        uint64_t v76 = *(void *)((char *)&dword_10 + (v75 & 0xFFFFFFFFFFFFF8LL));
      }

      OUTLINED_FUNCTION_62();
      else {
        INPersonContainingIntent.replaceContact(at:person:)((Swift::Int)v51, (INPerson)person);
      }
      uint64_t v127 = v47;
      id v86 = v47;
      uint64_t v87 = (os_log_s *)OUTLINED_FUNCTION_14_48();
      os_log_type_t v89 = static os_log_type_t.debug.getter(v87, v88);
      if (os_log_type_enabled(v87, v89))
      {
        uint64_t v122 = v0[31];
        uint64_t v90 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
        uint64_t v125 = OUTLINED_FUNCTION_7_0(32LL);
        v129[0] = v125;
        *(_DWORD *)uint64_t v90 = 136315138;
        uint64_t v91 = v73(v122, v72);
        uint64_t v99 = OUTLINED_FUNCTION_7_75(v91, v92, v93, v94, v95, v96, v97, v98, v111, v113, v116, v118, v119);
        unint64_t v101 = v100;
        OUTLINED_FUNCTION_62();
        v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v101, v129);
        OUTLINED_FUNCTION_12_61(v115, v117, (uint64_t)(v90 + 4));
        swift_bridgeObjectRelease();

        OUTLINED_FUNCTION_57_0( &dword_0,  v87,  v89,  "#ContactNeedsConfirmationFlowStrategy contacts after user said yes: %s",  v90);
        OUTLINED_FUNCTION_17_0(v125);
        OUTLINED_FUNCTION_0_2(v125);
        OUTLINED_FUNCTION_0_2((uint64_t)v90);
      }

      else
      {
      }

      uint64_t v77 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
      goto LABEL_35;
    }

    uint64_t v78 = v0[21];
    OUTLINED_FUNCTION_6_71(v78);
    unint64_t v79 = lazy protocol witness table accessor for type PhoneError and conformance PhoneError();
    uint64_t v80 = OUTLINED_FUNCTION_3_87(v79);
    OUTLINED_FUNCTION_15_53(v80, v81);
    outlined destroy of PhoneError(v78);
    OUTLINED_FUNCTION_17_9();
  }

  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v32 = OUTLINED_FUNCTION_15_1();
    uint64_t v33 = __swift_project_value_buffer(v32, (uint64_t)static Logger.siriPhone);
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl(&dword_0, v34, v35, "#ContactNeedsConfirmationFlowStrategy No item to confirm.", v36, 2u);
      OUTLINED_FUNCTION_0_2((uint64_t)v36);
    }

    uint64_t v37 = v0[21];

    OUTLINED_FUNCTION_6_71(v37);
    unint64_t v38 = lazy protocol witness table accessor for type PhoneError and conformance PhoneError();
    OUTLINED_FUNCTION_3_87(v38);
    PhoneError.logged()(v39);
    outlined destroy of PhoneError(v37);
    OUTLINED_FUNCTION_17_9();
  }

  uint64_t v82 = v0[25];
  uint64_t v84 = v0[21];
  uint64_t v83 = v0[22];
  swift_task_dealloc(v0[34]);
  OUTLINED_FUNCTION_23_3();
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  unint64_t v85 = (uint64_t (*)(void))v0[1];
  return v85();
}

uint64_t ContactNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[11] = a4;
  v5[12] = v4;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  uint64_t v6 = type metadata accessor for PhoneError(0LL);
  v5[13] = v6;
  v5[14] = OUTLINED_FUNCTION_23(*(void *)(v6 - 8));
  return swift_task_switch( ContactNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:),  0LL,  0LL);
}

uint64_t ContactNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)()
{
  if (swift_dynamicCast(v0 + 48, v0 + 16, &type metadata for Any[1]))
  {
    uint64_t v1 = *(void *)(v0 + 88);
    uint64_t v2 = *(void *)(v0 + 48);
    *(void *)(v0 + 120) = v2;
    uint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 24);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL);
    uint64_t v6 = type metadata accessor for ParameterResolutionRecord(0LL, AssociatedTypeWitness);
    uint64_t v7 = ParameterResolutionRecord.app.getter(v6);
    *(void *)(v0 + 128) = v7;
    uint64_t v8 = ParameterResolutionRecord.intent.getter(v6);
    *(void *)(v0 + 136) = v8;
    uint64_t v9 = ParameterResolutionRecord.result.getter(v6);
    *(void *)(v0 + 144) = v9;
    uint64_t v10 = *(int **)(v3 + 40);
    uint64_t v23 = (int *)((char *)v10 + *v10);
    uint64_t v11 = (void *)swift_task_alloc(v10[1]);
    *(void *)(v0 + 152) = v11;
    *uint64_t v11 = v0;
    v11[1] = ContactNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
    return ((uint64_t (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v23)( *(void *)(v0 + 64),  v7,  v8,  v9,  v2,  v4,  v3);
  }

  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v13 = OUTLINED_FUNCTION_15_1();
    uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.siriPhone);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v18 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v24 = v18;
      *(_DWORD *)uint64_t v17 = 136315138;
      *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000037LL,  0x800000000034CFB0LL,  &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v17 + 4);
      OUTLINED_FUNCTION_57_0(&dword_0, v15, v16, "#%s: No item to confirm.", v17);
      OUTLINED_FUNCTION_17_0(v18);
      OUTLINED_FUNCTION_0_2(v18);
      OUTLINED_FUNCTION_0_2((uint64_t)v17);
    }

    uint64_t v19 = *(void *)(v0 + 112);
    OUTLINED_FUNCTION_6_71(v19);
    unint64_t v20 = lazy protocol witness table accessor for type PhoneError and conformance PhoneError();
    uint64_t v21 = OUTLINED_FUNCTION_3_87(v20);
    OUTLINED_FUNCTION_15_53(v21, v22);
    outlined destroy of PhoneError(v19);
    OUTLINED_FUNCTION_17_9();
    swift_task_dealloc(*(void *)(v0 + 112));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  void *v5;
  uint64_t v6;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 152);
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = ContactNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
  }

  else
  {
    uint64_t v5 = *(void **)(v2 + 136);
    uint64_t v6 = *(void *)(v2 + 128);

    swift_release(v6);
    uint64_t v4 = ContactNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_23_3();
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v1 = *(void **)(v0 + 136);
  uint64_t v3 = *(void **)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);

  swift_release(v2);
  swift_task_dealloc(*(void *)(v0 + 112));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.parseConfirmationResponse(input:resolveRecord:) in conformance ContactNeedsConfirmationFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(dword_43797C);
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = UnsupportedFlowCATs.deleteVoicemail();
  return ContactNeedsConfirmationFlowStrategy.parseConfirmationResponse(input:resolveRecord:)(a1, a2, a3, a4);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:) in conformance ContactNeedsConfirmationFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:)[1]);
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for Flow.onAsync(input:) in conformance ContactNeedsValueGuardFlow<A1>;
  return NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:)( a1,  a2,  a3,  a4);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:resolveRecord:) in conformance ContactNeedsConfirmationFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(dword_437984);
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return ContactNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)(a1, a2, a3, a4);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance ContactNeedsConfirmationFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:)[1]);
  *(void *)(v5 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = UnsupportedFlowCATs.deleteVoicemail();
  return NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:resolveRecord:) in conformance ContactNeedsConfirmationFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to NeedsConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:resolveRecord:)[1]);
  *(void *)(v5 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = UnsupportedFlowCATs.deleteVoicemail();
  return NeedsConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:resolveRecord:)( a1,  a2,  a3,  a4,  a5);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:) in conformance ContactNeedsConfirmationFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to NeedsConfirmationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)[1]);
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = UnsupportedFlowCATs.deleteVoicemail();
  return NeedsConfirmationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)(a1, a2, a3, a4);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:) in conformance ContactNeedsConfirmationFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to NeedsConfirmationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)[1]);
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = UnsupportedFlowCATs.deleteVoicemail();
  return NeedsConfirmationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)(a1, a2, a3, a4);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse(app:intent:parameter:) in conformance ContactNeedsConfirmationFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to NeedsConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse(app:intent:parameter:)[1]);
  *(void *)(v6 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = UnsupportedFlowCATs.deleteVoicemail();
  return NeedsConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse(app:intent:parameter:)( a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance ContactNeedsConfirmationFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)[1]);
  *(void *)(v6 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = UnsupportedFlowCATs.deleteVoicemail();
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance ContactNeedsConfirmationFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)[1]);
  *(void *)(v7 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v15;
  *uint64_t v15 = v7;
  v15[1] = UnsupportedFlowCATs.deleteVoicemail();
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t base witness table accessor for ParameterResolutionHandlingAsync in ContactNeedsConfirmationFlowStrategy<A>( uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for ContactNeedsConfirmationFlowStrategy<A>, a1);
}

uint64_t type metadata completion function for ContactNeedsConfirmationFlowStrategy(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "(";
    swift_initStructMetadata(a1, 0LL, 2LL, v4, a1 + 32);
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for ContactNeedsConfirmationFlowStrategy( uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(v5 + 64);
  if (v7 >= a2)
  {
    if (v6 < 0x7FFFFFFF)
    {
      unint64_t v13 = *(void *)((char *)&dword_18 + ((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8LL));
      if (v13 >= 0xFFFFFFFF) {
        LODWORD(v13) = -1;
      }
      return (v13 + 1);
    }

    else
    {
      return __swift_getEnumTagSinglePayload(a1, v6, v4);
    }
  }

  else
  {
    if (((((v8 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 40) & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = a2 - v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_1CA080 + 4 * byte_331E80[v11]))();
  }

void storeEnumTagSinglePayload for ContactNeedsConfirmationFlowStrategy( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0;
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFD8) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
  }

  if (a2 > v6)
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFD8)
    {
      unsigned int v10 = ~v6 + a2;
      bzero(a1, ((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 40);
      *a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t sub_1CA1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_BYTE *)(v5 + v6) = 0;
  if ((_DWORD)a2)
  {
    if (a3 < 0x7FFFFFFF)
    {
      unint64_t v8 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      if ((a2 & 0x80000000) != 0)
      {
        *(_OWORD *)(v8 + 8) = 0u;
        *(_OWORD *)(v8 + 24) = 0u;
        *(void *)unint64_t v8 = a2 ^ 0x80000000;
      }

      else
      {
        *(void *)(v8 + 24) = (a2 - 1);
      }
    }

    else
    {
      return __swift_storeEnumTagSinglePayload(v5, a2, a3, a4);
    }
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_3_87(uint64_t a1)
{
  return swift_allocError(v1, a1, 0LL, 0LL);
}

uint64_t OUTLINED_FUNCTION_6_71(uint64_t a1)
{
  return swift_storeEnumTagMultiPayload(a1, v1, 11LL);
}

uint64_t OUTLINED_FUNCTION_7_75( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return Array.description.getter(v13, a13);
}

uint64_t OUTLINED_FUNCTION_9_59()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_12_61(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

uint64_t OUTLINED_FUNCTION_14_48()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_15_53(uint64_t a1, uint64_t a2)
{
  return PhoneError.logged()(a2);
}

unint64_t DeviceIdiom.getPBDeviceIdiom()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DeviceIdiom(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for DeviceIdiom.car(_:))
  {
    unsigned __int8 v7 = 0;
    uint64_t v8 = 5LL;
  }

  else if (v6 == enum case for DeviceIdiom.homepod(_:))
  {
    unsigned __int8 v7 = 0;
    uint64_t v8 = 4LL;
  }

  else if (v6 == enum case for DeviceIdiom.mac(_:))
  {
    unsigned __int8 v7 = 0;
    uint64_t v8 = 7LL;
  }

  else if (v6 == enum case for DeviceIdiom.pad(_:))
  {
    unsigned __int8 v7 = 0;
    uint64_t v8 = 2LL;
  }

  else if (v6 == enum case for DeviceIdiom.phone(_:))
  {
    unsigned __int8 v7 = 0;
    uint64_t v8 = 1LL;
  }

  else if (v6 == enum case for DeviceIdiom.watch(_:))
  {
    unsigned __int8 v7 = 0;
    uint64_t v8 = 3LL;
  }

  else if (v6 == enum case for DeviceIdiom.tv(_:))
  {
    unsigned __int8 v7 = 0;
    uint64_t v8 = 6LL;
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v8 = 0LL;
    unsigned __int8 v7 = 1;
  }

  return v8 | ((unint64_t)v7 << 32);
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a3);
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    uint64_t v7 = 4LL;
    while (1)
    {
      if ((a3 & 0xC000000000000001LL) != 0)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a3);
      }

      else
      {
        uint64_t v8 = *(void *)(a3 + 8 * v7);
        swift_retain(v8);
      }

      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      uint64_t v16 = v8;
      char v10 = a1(&v16);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);
        swift_release(v8);
        return v12 & 1;
      }

      char v11 = v10;
      swift_release(v8);
      if ((v11 & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        char v12 = 1;
        return v12 & 1;
      }

      ++v7;
      if (v9 == v6) {
        goto LABEL_11;
      }
    }

    __break(1u);
LABEL_16:
    if (a3 < 0) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
  }

BOOL static UnsupportedPhoneCall.isInRetailStoreDemoMode()()
{
  Boolean keyExistsAndHasValidFormat = 0;
  uint64_t v0 = (__CFString *)String._bridgeToObjectiveC()();
  uint64_t v1 = (__CFString *)String._bridgeToObjectiveC()();
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(v0, v1, &keyExistsAndHasValidFormat);

  if (AppBooleanValue) {
    BOOL v3 = keyExistsAndHasValidFormat == 0;
  }
  else {
    BOOL v3 = 1;
  }
  return !v3;
}

uint64_t UnsupportedPhoneCall.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CA6B4 + 4 * byte_331FA0[a1]))( 0xD00000000000001DLL,  0x8000000000345D40LL);
}

uint64_t sub_1CA6B4()
{
  return v0 + 4;
}

uint64_t UnsupportedPhoneCall.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CA7C0 + 4 * byte_331FAE[a1]))( 0xD00000000000001DLL,  0x8000000000345D40LL);
}

uint64_t sub_1CA7C0()
{
  return v0 + 4;
}

uint64_t static UnsupportedPhoneCall.from(nlIntent:device:)(void *a1)
{
  if (PhoneCallNLIntent.isRemoveParticipant()()) {
    return 11LL;
  }
  else {
    return 14LL;
  }
}

uint64_t static UnsupportedPhoneCall.from(nlIntent:app:sharedGlobals:)(void *a1, uint64_t a2, void *a3)
{
  Swift::Bool v6 = PhoneCallNLIntent.isOutgoingCall()();
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v179);
  if (!v6)
  {
    OUTLINED_FUNCTION_8_59();
    goto LABEL_5;
  }

  OUTLINED_FUNCTION_0_55(v179);
  Swift::Bool v7 = PhoneCallNLIntent.isEmergencyServicesCall()();
  outlined init with copy of SignalProviding((uint64_t)v179, (uint64_t)v178);
  if (!v7)
  {
    OUTLINED_FUNCTION_0_55(v178);
    Swift::Bool v31 = PhoneCallNLIntent.isEmergencyNumberCall()();
    __swift_destroy_boxed_opaque_existential_1(v178);
    OUTLINED_FUNCTION_8_59();
    if (v31) {
      goto LABEL_20;
    }
LABEL_5:
    OUTLINED_FUNCTION_19_44();
    goto LABEL_6;
  }

  __swift_destroy_boxed_opaque_existential_1(v178);
  OUTLINED_FUNCTION_8_59();
LABEL_20:
  OUTLINED_FUNCTION_0_55(v178);
  DeviceState.isSiriEmergencyCallingUnsupported.getter();
  if ((v32 & 1) != 0)
  {
    OUTLINED_FUNCTION_19_44();
LABEL_23:
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v34 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v34, (uint64_t)static Logger.siriPhone);
    os_log_type_t v35 = OUTLINED_FUNCTION_41();
    if (OUTLINED_FUNCTION_10(v35))
    {
      uint64_t v36 = (_WORD *)OUTLINED_FUNCTION_1_0();
      OUTLINED_FUNCTION_47(v36);
      OUTLINED_FUNCTION_2_2(&dword_0, v37, v38, "#PhoneCallRequestSupportPolicy Unsupported StartCallEmergency!");
      OUTLINED_FUNCTION_8_33();
    }

    uint64_t v15 = 0LL;
    goto LABEL_28;
  }

  BOOL v33 = static UnsupportedPhoneCall.isInRetailStoreDemoMode()();
  OUTLINED_FUNCTION_19_44();
  if (v33) {
    goto LABEL_23;
  }
LABEL_6:
  uint64_t v8 = v181;
  uint64_t v9 = v182;
  __swift_project_boxed_opaque_existential_1(v180, v181);
  if ((dispatch thunk of DeviceState.isAppleTV.getter(v8, v9) & 1) != 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v10 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v10, (uint64_t)static Logger.siriPhone);
    os_log_type_t v11 = OUTLINED_FUNCTION_41();
    if (OUTLINED_FUNCTION_10(v11))
    {
      char v12 = (_WORD *)OUTLINED_FUNCTION_1_0();
      OUTLINED_FUNCTION_47(v12);
      OUTLINED_FUNCTION_2_2(&dword_0, v13, v14, "#PhoneCallRequestSupportPolicy Unsupported on AppleTV!");
      OUTLINED_FUNCTION_8_33();
    }

    uint64_t v15 = 12LL;
    goto LABEL_28;
  }

  OUTLINED_FUNCTION_0_55(a1);
  Swift::Bool v16 = PhoneCallNLIntent.isGroupFaceTimeCall()();
  outlined init with copy of SignalProviding((uint64_t)v180, (uint64_t)v175);
  if (v16)
  {
    uint64_t v17 = v176;
    uint64_t v18 = v177;
    uint64_t v19 = __swift_project_boxed_opaque_existential_1(v175, v176);
    DeviceState.isGroupFaceTimeDeviceUnsupported(app:)( a2,  v17,  v18,  (uint64_t)v19,  v20,  v21,  v22,  v23,  v156,  v158,  v159,  v161,  v162,  v163,  v165[0],  v165[1],  v165[2],  v166,  v167,  v168[0]);
    LOBYTE(v17) = v24;
    __swift_destroy_boxed_opaque_existential_1(v175);
    if ((v17 & 1) != 0)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v25 = OUTLINED_FUNCTION_15_1();
      uint64_t v26 = (void *)OUTLINED_FUNCTION_12_1(v25, (uint64_t)static Logger.siriPhone);
      os_log_type_t v27 = static os_log_type_t.info.getter();
      if (OUTLINED_FUNCTION_10(v27))
      {
        uint64_t v28 = (_WORD *)OUTLINED_FUNCTION_1_0();
        OUTLINED_FUNCTION_47(v28);
        OUTLINED_FUNCTION_2_2( &dword_0,  v29,  v30,  "#PhoneCallRequestSupportPolicy Unsupported device for group FaceTime call");
        OUTLINED_FUNCTION_8_33();
      }

      uint64_t v15 = 9LL;
      goto LABEL_28;
    }
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1(v175);
  }

  uint64_t v164 = a2;
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AppAndDeviceRestriction.Condition>);
  uint64_t inited = swift_initStackObject(v40, v174);
  uint64_t v160 = 2LL;
  *(_OWORD *)(inited + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D880;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v43 = OUTLINED_FUNCTION_8_2(v42, 40LL);
  __int128 v157 = xmmword_31FE60;
  *(_OWORD *)(v43 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31FE60;
  uint64_t KeyPath = swift_getKeyPath(&unk_331FD0);
  *(void *)(v43 + 32) = KeyPath;
  OUTLINED_FUNCTION_9_60(KeyPath, v45, v46, v47);
  specialized Set.init(_nonEmptyArrayLiteral:)();
  *(void *)(inited + 32) = v172[0];
  *(void *)(inited + 40) = v48;
  uint64_t v49 = OUTLINED_FUNCTION_8_2(v42, 48LL);
  *(_OWORD *)(v49 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31FBC0;
  *(void *)(v49 + 32) = swift_getKeyPath(&unk_331FF8);
  uint64_t v50 = swift_getKeyPath(&unk_332020);
  *(void *)(v49 + 40) = v50;
  OUTLINED_FUNCTION_9_60(v50, v51, v52, v53);
  OUTLINED_FUNCTION_6_3();
  specialized Set.init(_nonEmptyArrayLiteral:)();
  uint64_t v55 = v54;
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v172[0];
  *(void *)(inited + 56) = v55;
  uint64_t v56 = swift_initStackObject(v40, v173);
  *(_OWORD *)(v56 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D880;
  uint64_t v57 = OUTLINED_FUNCTION_8_2(v42, 40LL);
  *(_OWORD *)(v57 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31FE60;
  uint64_t v58 = swift_getKeyPath(&unk_331FD0);
  *(void *)(v57 + 32) = v58;
  OUTLINED_FUNCTION_9_60(v58, v59, v60, v61);
  specialized Set.init(_nonEmptyArrayLiteral:)();
  *(void *)(v56 + 32) = v172[0];
  *(void *)(v56 + 40) = v62;
  uint64_t v63 = OUTLINED_FUNCTION_8_2(v42, 56LL);
  *(_OWORD *)(v63 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_3321F0;
  *(void *)(v63 + 32) = swift_getKeyPath(&unk_331FF8);
  *(void *)(v63 + 40) = swift_getKeyPath(&unk_332020);
  uint64_t v64 = swift_getKeyPath(&unk_332048);
  *(void *)(v63 + 48) = v64;
  OUTLINED_FUNCTION_9_60(v64, v65, v66, v67);
  OUTLINED_FUNCTION_6_3();
  specialized Set.init(_nonEmptyArrayLiteral:)();
  uint64_t v69 = v68;
  swift_bridgeObjectRelease();
  *(void *)(v56 + 48) = v172[0];
  *(void *)(v56 + 56) = v69;
  OUTLINED_FUNCTION_0_55(a1);
  LOBYTE(v63) = PhoneCallNLIntent.isAudioCall()();
  outlined init with copy of SignalProviding((uint64_t)v180, (uint64_t)v172);
  if ((v63 & 1) != 0)
  {
    uint64_t v70 = v164;
    char v71 = AppAndDeviceRestriction.isRestricted(device:app:)((uint64_t)v172, v164, inited);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v172);
    if ((v71 & 1) != 0)
    {
      swift_setDeallocating(v56);
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v72 = OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_12_1(v72, (uint64_t)static Logger.siriPhone);
      os_log_type_t v73 = OUTLINED_FUNCTION_41();
      if (OUTLINED_FUNCTION_10(v73))
      {
        uint64_t v74 = (_WORD *)OUTLINED_FUNCTION_1_0();
        OUTLINED_FUNCTION_47(v74);
        OUTLINED_FUNCTION_2_2(&dword_0, v75, v76, "#PhoneCallRequestSupportPolicy Unsupported StartAudioCall!");
        OUTLINED_FUNCTION_8_33();
      }

      uint64_t v15 = 1LL;
      goto LABEL_28;
    }
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1(v172);
    swift_bridgeObjectRelease();
    uint64_t v70 = v164;
  }

  OUTLINED_FUNCTION_0_55(a1);
  Swift::Bool v77 = PhoneCallNLIntent.isVideoCall()();
  outlined init with copy of SignalProviding((uint64_t)v180, (uint64_t)v171);
  if (v77)
  {
    char v78 = AppAndDeviceRestriction.isRestricted(device:app:)((uint64_t)v171, v70, v56);
    OUTLINED_FUNCTION_13_1();
    __swift_destroy_boxed_opaque_existential_1(v171);
    if ((v78 & 1) != 0)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v79 = OUTLINED_FUNCTION_15_1();
      uint64_t v80 = (os_log_s *)OUTLINED_FUNCTION_12_1(v79, (uint64_t)static Logger.siriPhone);
      os_log_type_t v82 = static os_log_type_t.debug.getter(v80, v81);
      if (os_log_type_enabled(v80, v82))
      {
        uint64_t v15 = 2LL;
        uint64_t v83 = (uint8_t *)OUTLINED_FUNCTION_1_0();
        *(_WORD *)uint64_t v83 = 0;
        _os_log_impl(&dword_0, v80, v82, "#PhoneCallRequestSupportPolicy Unsupported StartVideoCall!", v83, 2u);
        swift_slowDealloc(v83, -1LL, -1LL);
      }

      else
      {

        uint64_t v15 = 2LL;
      }

      goto LABEL_28;
    }
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1(v171);
    OUTLINED_FUNCTION_13_1();
  }

  OUTLINED_FUNCTION_0_55(a1);
  BOOL v84 = PhoneCallNLIntent.isAnswerCall()();
  if (!v84)
  {
    OUTLINED_FUNCTION_22_16(v84, (uint64_t)v170);
    goto LABEL_53;
  }

  BOOL v85 = OUTLINED_FUNCTION_15_54();
  BOOL v86 = v85;
  OUTLINED_FUNCTION_22_16(v85, (uint64_t)v170);
  if (v86)
  {
LABEL_53:
    __swift_destroy_boxed_opaque_existential_1(v170);
    goto LABEL_54;
  }

  __swift_project_boxed_opaque_existential_1(v170, v170[3]);
  OUTLINED_FUNCTION_7_76();
  __swift_project_boxed_opaque_existential_1(v168, v169);
  OUTLINED_FUNCTION_13_62();
  char v88 = v87;
  OUTLINED_FUNCTION_13_28(v87, v89, v90, v91, v92, v93, v94, v95, 1LL, 3LL, 2LL);
  __swift_destroy_boxed_opaque_existential_1(v170);
  if ((v88 & 1) == 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v96 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v96, (uint64_t)static Logger.siriPhone);
    os_log_type_t v97 = OUTLINED_FUNCTION_41();
    if (!OUTLINED_FUNCTION_10(v97)) {
      goto LABEL_75;
    }
    uint64_t v98 = (_WORD *)OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_47(v98);
    unint64_t v101 = "#PhoneCallRequestSupportPolicy Unsupported AnswerCall!";
LABEL_74:
    OUTLINED_FUNCTION_2_2(&dword_0, v99, v100, v101);
    OUTLINED_FUNCTION_8_33();
LABEL_75:

    uint64_t v15 = 5LL;
    goto LABEL_28;
  }

LABEL_54:
  OUTLINED_FUNCTION_0_55(a1);
  if (PhoneCallNLIntent.isJoinCall()() && !OUTLINED_FUNCTION_15_54())
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v146 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v146, (uint64_t)static Logger.siriPhone);
    os_log_type_t v147 = OUTLINED_FUNCTION_41();
    if (!OUTLINED_FUNCTION_10(v147)) {
      goto LABEL_75;
    }
    v148 = (_WORD *)OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_47(v148);
    unint64_t v101 = "#PhoneCallRequestSupportPolicy Unsupported JoinCall!";
    goto LABEL_74;
  }

  OUTLINED_FUNCTION_0_55(a1);
  BOOL v102 = PhoneCallNLIntent.isHangUpCall()();
  if (!v102)
  {
    uint64_t v105 = OUTLINED_FUNCTION_22_16(v102, (uint64_t)v168);
    goto LABEL_65;
  }

  BOOL v103 = OUTLINED_FUNCTION_15_54();
  BOOL v104 = v103;
  uint64_t v105 = OUTLINED_FUNCTION_22_16(v103, (uint64_t)v168);
  if (v104)
  {
LABEL_65:
    OUTLINED_FUNCTION_13_28(v105, v106, v107, v108, v109, v110, v111, v112, v157, *((uint64_t *)&v157 + 1), v160);
LABEL_66:
    OUTLINED_FUNCTION_0_55(a1);
    Swift::Bool v133 = PhoneCallNLIntent.isEmergencyContactCall()();
    uint64_t v134 = outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v165);
    if (v133)
    {
      OUTLINED_FUNCTION_0_55(v165);
      BOOL v140 = PhoneCallNLIntent.isFaceTimeCall()();
      if (v140)
      {
        OUTLINED_FUNCTION_41_16(v140, v141, v142, v143, v144, v145);
LABEL_80:
        uint64_t v15 = 10LL;
        goto LABEL_28;
      }

      BOOL v149 = OUTLINED_FUNCTION_15_54();
      BOOL v150 = v149;
      OUTLINED_FUNCTION_41_16(v149, v151, v152, v153, v154, v155);
      if (!v150) {
        goto LABEL_80;
      }
    }

    else
    {
      OUTLINED_FUNCTION_41_16(v134, v135, v136, v137, v138, v139);
    }

    OUTLINED_FUNCTION_0_55(a1);
    if (PhoneCallNLIntent.isRemoveParticipant()()) {
      uint64_t v15 = 11LL;
    }
    else {
      uint64_t v15 = static UnsupportedPhoneCall.checkUnsupportedSearchCallHistoryOrVoicemail(nlIntent:app:sharedGlobals:)( a1,  v70,  a3);
    }
    goto LABEL_28;
  }

  __swift_project_boxed_opaque_existential_1(v168, v169);
  OUTLINED_FUNCTION_7_76();
  __swift_project_boxed_opaque_existential_1(v165, v166);
  OUTLINED_FUNCTION_13_62();
  char v114 = v113;
  uint64_t v120 = OUTLINED_FUNCTION_41_16(v113, v115, v116, v117, v118, v119);
  OUTLINED_FUNCTION_13_28(v120, v121, v122, v123, v124, v125, v126, v127, v157, *((uint64_t *)&v157 + 1), v160);
  if ((v114 & 1) != 0) {
    goto LABEL_66;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v128 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v128, (uint64_t)static Logger.siriPhone);
  os_log_type_t v129 = OUTLINED_FUNCTION_41();
  if (OUTLINED_FUNCTION_10(v129))
  {
    uint64_t v130 = (_WORD *)OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_47(v130);
    OUTLINED_FUNCTION_2_2(&dword_0, v131, v132, "#PhoneCallRequestSupportPolicy Unsupported HangUpCall!");
    OUTLINED_FUNCTION_8_33();
  }

  uint64_t v15 = 6LL;
LABEL_28:
  __swift_destroy_boxed_opaque_existential_1(v180);
  return v15;
}

uint64_t sub_1CB244@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for DeviceState.isAppleTV : DeviceState( a1,  (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of DeviceState.isAppleTV.getter,  a2);
}

uint64_t static AppAndDeviceRestriction.Condition.restrictAll(deviceStates:)(uint64_t a1)
{
  return static AppAndDeviceRestriction.Condition.restrictAll(deviceStates:)(a1);
}

{
  swift_bridgeObjectRetain();
  specialized Set.init(_nonEmptyArrayLiteral:)();
  return a1;
}

uint64_t static AppAndDeviceRestriction.Condition.restrictThirdParty(deviceStates:)(uint64_t a1)
{
  return static AppAndDeviceRestriction.Condition.restrictAll(deviceStates:)(a1);
}

uint64_t key path getter for DeviceState.isAppleTV : DeviceState@<X0>( void *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  uint64_t result = a2(v5, v6);
  *a3 = result & 1;
  return result;
}

uint64_t AppAndDeviceRestriction.isRestricted(device:app:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Bool v5 = App.isFirstParty()();
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    Swift::Bool v7 = v5;
    uint64_t v8 = a3 + 32;
    Swift::UInt v9 = !v5;
    swift_bridgeObjectRetain_n(a3, 2LL);
    uint64_t v10 = 0LL;
    uint64_t v27 = v6;
    Swift::UInt v26 = v9;
    while (1)
    {
      os_log_type_t v11 = (uint64_t *)(v8 + 16 * v10);
      uint64_t v12 = v11[1];
      if (*(void *)(v12 + 16))
      {
        uint64_t v13 = *v11;
        Hasher.init(_seed:)(v28, *(void *)(v12 + 40));
        Hasher._combine(_:)(v9);
        Swift::Int v14 = Hasher._finalize()();
        uint64_t v15 = -1LL << *(_BYTE *)(v12 + 32);
        unint64_t v16 = v14 & ~v15;
        if (((*(void *)(v12 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
        {
          uint64_t v17 = *(void *)(v12 + 48);
          if (v7 == *(_BYTE *)(v17 + v16))
          {
            uint64_t v18 = ~v15;
            while (1)
            {
              unint64_t v16 = (v16 + 1) & v18;
              if (((*(void *)(v12 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0) {
                break;
              }
              if (v7 != *(_BYTE *)(v17 + v16)) {
                goto LABEL_9;
              }
            }
          }

          else
          {
LABEL_9:
            if ((unint64_t)v13 >> 62)
            {
              if (v13 < 0) {
                uint64_t v24 = v13;
              }
              else {
                uint64_t v24 = v13 & 0xFFFFFFFFFFFFFF8LL;
              }
              swift_bridgeObjectRetain_n(v13, 3LL);
              swift_bridgeObjectRetain();
              uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v24);
              OUTLINED_FUNCTION_13_1();
              if (v19)
              {
LABEL_11:
                uint64_t v20 = 4LL;
                while (1)
                {
                  if ((v13 & 0xC000000000000001LL) != 0)
                  {
                    uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)(v20 - 4, v13);
                    uint64_t v22 = result;
                  }

                  else
                  {
                    uint64_t v22 = *(void *)(v13 + 8 * v20);
                    uint64_t result = swift_retain();
                  }

                  uint64_t v23 = v20 - 3;
                  if (__OFADD__(v20 - 4, 1LL)) {
                    break;
                  }
                  swift_getAtKeyPath(a1, v22);
                  swift_release(v22);
                  if (LOBYTE(v28[0]) == 1)
                  {
                    OUTLINED_FUNCTION_7_4(a3);
                    swift_bridgeObjectRelease();
                    uint64_t v25 = 1LL;
                    goto LABEL_28;
                  }

                  ++v20;
                  if (v23 == v19) {
                    goto LABEL_18;
                  }
                }

                __break(1u);
                return result;
              }
            }

            else
            {
              uint64_t v19 = *(void *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFF8LL));
              swift_bridgeObjectRetain_n(v13, 2LL);
              swift_bridgeObjectRetain();
              if (v19) {
                goto LABEL_11;
              }
            }

uint64_t static UnsupportedPhoneCall.checkUnsupportedSearchCallHistoryOrVoicemail(nlIntent:app:sharedGlobals:)( void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3[3];
  uint64_t v6 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 8))(v58, v5, v6);
  Swift::Bool v7 = App.isFirstParty()();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (PhoneCallNLIntent.isIncomingCallSearch()() && !v7)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v12 = static os_log_type_t.debug.getter(v10, v11);
    if (os_log_type_enabled(v10, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_0, v10, v12, "#PhoneCallRequestSupportPolicy Unsupported IdentifyIncomingCaller!", v13, 2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    __swift_destroy_boxed_opaque_existential_1(v58);
    return 3LL;
  }

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  Swift::Bool v15 = PhoneCallNLIntent.hasVoiceMail()();
  outlined init with copy of SignalProviding((uint64_t)v58, (uint64_t)v55);
  if (v15)
  {
    uint64_t v16 = v56;
    uint64_t v17 = v57;
    __swift_project_boxed_opaque_existential_1(v55, v56);
    char v18 = dispatch thunk of DeviceState.isHomePod.getter(v16, v17);
    outlined init with copy of SignalProviding((uint64_t)v55, (uint64_t)&v51);
    if ((v18 & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_1(&v51);
      __swift_destroy_boxed_opaque_existential_1(v55);
LABEL_27:
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v39 = type metadata accessor for Logger(0LL);
      uint64_t v40 = __swift_project_value_buffer(v39, (uint64_t)static Logger.siriPhone);
      uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
      os_log_type_t v43 = static os_log_type_t.debug.getter(v41, v42);
      if (os_log_type_enabled(v41, v43))
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v44 = 0;
        _os_log_impl( &dword_0,  v41,  v43,  "#PhoneCallRequestSupportPolicy FaceTime-only or HomePod devices do not support voicemail requests",  v44,  2u);
        swift_slowDealloc(v44, -1LL, -1LL);
      }

LABEL_40:
      __swift_destroy_boxed_opaque_existential_1(v58);
      return 4LL;
    }

    uint64_t v37 = v53;
    uint64_t v38 = v54;
    __swift_project_boxed_opaque_existential_1(&v51, v53);
    LOBYTE(v37) = DeviceState.supportsOnlyFaceTimeCalls.getter(v37, v38);
    __swift_destroy_boxed_opaque_existential_1(&v51);
    __swift_destroy_boxed_opaque_existential_1(v55);
    if ((v37 & 1) != 0) {
      goto LABEL_27;
    }
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1(v55);
  }

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  Swift::Bool v19 = PhoneCallNLIntent.isSearchCallOrVoiceMail()();
  outlined init with copy of SignalProviding((uint64_t)v58, (uint64_t)&v51);
  if (v19)
  {
    __swift_project_boxed_opaque_existential_1(&v51, v53);
    DeviceState.isSearchCallHistoryUnavailable(app:)();
    char v21 = v20;
    __swift_destroy_boxed_opaque_existential_1(&v51);
    if ((v21 & 1) != 0)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v22 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v22, (uint64_t)static Logger.siriPhone);
      uint64_t v23 = swift_retain_n(a2, 2LL);
      uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
      os_log_type_t v26 = static os_log_type_t.debug.getter(v24, v25);
      if (os_log_type_enabled(v24, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v28 = swift_slowAlloc(32LL, -1LL);
        v55[0] = v28;
        *(_DWORD *)uint64_t v27 = 136315138;
        uint64_t v29 = dispatch thunk of App.description.getter();
        uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v27 + 4);
        swift_release_n(a2, 2LL);
        swift_bridgeObjectRelease();
        _os_log_impl( &dword_0,  v24,  v26,  "#PhoneCallRequestSupportPolicy searchCallHistory/Voicemail on an unsupported device, or on app:%s is not supported anywhere",  v27,  0xCu);
        swift_arrayDestroy(v28, 1LL);
        swift_slowDealloc(v28, -1LL, -1LL);
        swift_slowDealloc(v27, -1LL, -1LL);
      }

      else
      {
        swift_release_n(a2, 2LL);
      }

      goto LABEL_40;
    }
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1(&v51);
  }

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (PhoneCallNLIntent.isDelete()())
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    if (PhoneCallNLIntent.hasVoiceMail()())
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v31 = type metadata accessor for Logger(0LL);
      uint64_t v32 = __swift_project_value_buffer(v31, (uint64_t)static Logger.siriPhone);
      BOOL v33 = (os_log_s *)Logger.logObject.getter(v32);
      os_log_type_t v35 = static os_log_type_t.debug.getter(v33, v34);
      if (os_log_type_enabled(v33, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl( &dword_0,  v33,  v35,  "#PhoneCallRequestSupportPolicy delete verb isn't supported by phone domain for voicemail",  v36,  2u);
        swift_slowDealloc(v36, -1LL, -1LL);
      }

      __swift_destroy_boxed_opaque_existential_1(v58);
      return 13LL;
    }

    else
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v45 = type metadata accessor for Logger(0LL);
      uint64_t v46 = __swift_project_value_buffer(v45, (uint64_t)static Logger.siriPhone);
      uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
      os_log_type_t v49 = static os_log_type_t.debug.getter(v47, v48);
      if (os_log_type_enabled(v47, v49))
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v50 = 0;
        _os_log_impl( &dword_0,  v47,  v49,  "#PhoneCallRequestSupportPolicy delete verb isn't supported by phone domain for call history",  v50,  2u);
        swift_slowDealloc(v50, -1LL, -1LL);
      }

      __swift_destroy_boxed_opaque_existential_1(v58);
      return 7LL;
    }
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1(v58);
    return 14LL;
  }

PhoneCallFlowDelegatePlugin::UnsupportedPhoneCall_optional __swiftcall UnsupportedPhoneCall.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of UnsupportedPhoneCall.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xE) {
    return (PhoneCallFlowDelegatePlugin::UnsupportedPhoneCall_optional)14;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::UnsupportedPhoneCall_optional)v3;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance UnsupportedPhoneCall( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance UnsupportedPhoneCall()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UnsupportedPhoneCall(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance UnsupportedPhoneCall(uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::UnsupportedPhoneCall_optional protocol witness for RawRepresentable.init(rawValue:) in conformance UnsupportedPhoneCall@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::UnsupportedPhoneCall_optional *a2@<X8>)
{
  result.value = UnsupportedPhoneCall.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance UnsupportedPhoneCall@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = UnsupportedPhoneCall.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UnsupportedPhoneCall()
{
  return UnsupportedPhoneCall.description.getter(*v0);
}

void AppAndDeviceRestriction.AppCategory.hashValue.getter(char a1)
{
}

void protocol witness for Hashable.hashValue.getter in conformance AppAndDeviceRestriction.AppCategory()
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AppAndDeviceRestriction.AppCategory( uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(v2);
  Hasher._finalize()();
  OUTLINED_FUNCTION_10_16();
}

uint64_t AppAndDeviceRestriction.Condition.matches(device:app:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  if ((specialized Set.contains(_:)(a2 & 1, a4) & 1) != 0)
  {
    __chkstk_darwin();
    v8[2] = a1;
    swift_bridgeObjectRetain();
    char v6 = specialized Sequence.contains(where:)( partial apply for closure #1 in AppAndDeviceRestriction.Condition.matches(device:app:),  (uint64_t)v8,  a3);
    swift_bridgeObjectRelease();
  }

  else
  {
    char v6 = 0;
  }

  return v6 & 1;
}

uint64_t closure #1 in AppAndDeviceRestriction.Condition.matches(device:app:)(void *a1, uint64_t a2)
{
  return v3;
}

uint64_t static AppAndDeviceRestriction.Condition.restrictFirstParty(deviceStates:)(uint64_t a1)
{
  return static AppAndDeviceRestriction.Condition.restrictAll(deviceStates:)(a1);
}

uint64_t sub_1CBDF4@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for DeviceState.isAppleTV : DeviceState( a1,  (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of DeviceState.isHomePod.getter,  a2);
}

uint64_t sub_1CBE10@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for DeviceState.isAppleTV : DeviceState( a1,  (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of DeviceState.isMac.getter,  a2);
}

uint64_t sub_1CBE2C@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for DeviceState.isAppleTV : DeviceState( a1,  (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of DeviceState.isWatch.getter,  a2);
}

uint64_t partial apply for closure #1 in AppAndDeviceRestriction.Condition.matches(device:app:)(void *a1)
{
  return closure #1 in AppAndDeviceRestriction.Condition.matches(device:app:)(a1, *(void *)(v1 + 16)) & 1;
}

unint64_t lazy protocol witness table accessor for type UnsupportedPhoneCall and conformance UnsupportedPhoneCall()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsupportedPhoneCall and conformance UnsupportedPhoneCall;
  if (!lazy protocol witness table cache variable for type UnsupportedPhoneCall and conformance UnsupportedPhoneCall)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for UnsupportedPhoneCall,  &type metadata for UnsupportedPhoneCall);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedPhoneCall and conformance UnsupportedPhoneCall);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AppAndDeviceRestriction.AppCategory and conformance AppAndDeviceRestriction.AppCategory()
{
  unint64_t result = lazy protocol witness table cache variable for type AppAndDeviceRestriction.AppCategory and conformance AppAndDeviceRestriction.AppCategory;
  if (!lazy protocol witness table cache variable for type AppAndDeviceRestriction.AppCategory and conformance AppAndDeviceRestriction.AppCategory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AppAndDeviceRestriction.AppCategory,  &type metadata for AppAndDeviceRestriction.AppCategory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AppAndDeviceRestriction.AppCategory and conformance AppAndDeviceRestriction.AppCategory);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for UnsupportedPhoneCall(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_1CBF30 + 4 * byte_331FC1[v4]))();
  }
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_1CBF64 + 4 * byte_331FBC[v4]))();
}

uint64_t sub_1CBF64(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CBF6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1CBF74LL);
  }
  return result;
}

uint64_t sub_1CBF80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1CBF88LL);
  }
  *(_BYTE *)unint64_t result = a2 + 13;
  return result;
}

uint64_t sub_1CBF8C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CBF94(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for UnsupportedPhoneCall()
{
}

void type metadata accessor for AppAndDeviceRestriction()
{
}

uint64_t storeEnumTagSinglePayload for AppAndDeviceRestriction.AppCategory( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1CC004 + 4 * byte_331FCB[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CC038 + 4 * byte_331FC6[v4]))();
}

uint64_t sub_1CC038(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CC040(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1CC048LL);
  }
  return result;
}

uint64_t sub_1CC054(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1CC05CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1CC060(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CC068(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for AppAndDeviceRestriction.AppCategory()
{
}

uint64_t destroy for AppAndDeviceRestriction.Condition(void *a1)
{
  return swift_bridgeObjectRelease(a1[1]);
}

void *initializeBufferWithCopyOfBuffer for AppAndDeviceRestriction.Condition(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_6_3();
  return a1;
}

uint64_t *assignWithCopy for AppAndDeviceRestriction.Condition(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *assignWithTake for AppAndDeviceRestriction.Condition(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppAndDeviceRestriction.Condition(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppAndDeviceRestriction.Condition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for AppAndDeviceRestriction.Condition()
{
}

uint64_t OUTLINED_FUNCTION_7_76()
{
  return v0(v1, v2);
}

uint64_t OUTLINED_FUNCTION_8_59()
{
  return outlined init with copy of SignalProviding(v0 - 128, v0 - 208);
}

uint64_t OUTLINED_FUNCTION_9_60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Array._endMutation()(a1, a2, a3, a4);
}

unint64_t OUTLINED_FUNCTION_12_62()
{
  return 0xD000000000000015LL;
}

void OUTLINED_FUNCTION_13_62()
{
}

BOOL OUTLINED_FUNCTION_15_54()
{
  return App.isFirstParty()();
}

uint64_t OUTLINED_FUNCTION_19_44()
{
  return __swift_destroy_boxed_opaque_existential_1((void *)(v0 - 208));
}

void *static IdentifyCallerIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v6 = (void *)OUTLINED_FUNCTION_0_16(a1, a2, a3, a4, a5, a6);
  return OUTLINED_FUNCTION_1_68(v6, v7, v8, v9);
}

void *specialized static IdentifyCallerIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)( void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (PhoneCallNLIntent.hasAnyConfirmation()())
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v7, (uint64_t)static Logger.siriPhone);
    id v8 = a4;
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v11 = static os_log_type_t.debug.getter(v9, v10);
    if (os_log_type_enabled(v9, v11))
    {
      os_log_type_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      uint64_t v21 = (uint64_t)a4;
      uint64_t v22 = v13;
      *(_DWORD *)os_log_type_t v12 = 136315138;
      id v14 = v8;
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INIdentifyIncomingCallerIntent?);
      uint64_t v16 = String.init<A>(describing:)(&v21, v15);
      uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v12 + 4);

      swift_bridgeObjectRelease();
      _os_log_impl( &dword_0,  v9,  v11,  "#IdentifyCallerIntentConversion is confirmation, returning previousIntent: %s.",  v12,  0xCu);
      swift_arrayDestroy(v13, 1LL);
      OUTLINED_FUNCTION_0_2(v13);
      OUTLINED_FUNCTION_0_2((uint64_t)v12);
    }

    else
    {
    }

    id v19 = v8;
  }

  else
  {
    id v18 = [objc_allocWithZone(INIdentifyIncomingCallerIntent) init];
    a4 = (void *)specialized static NLv4IntentConversion.setIntentMetadata(for:sharedGlobals:app:previousIntent:)( v18,  a3,  a2,  a4);
  }

  return a4;
}

ValueMetadata *type metadata accessor for IdentifyCallerIntentConversion()
{
  return &type metadata for IdentifyCallerIntentConversion;
}

void *OUTLINED_FUNCTION_1_68(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  return specialized static IdentifyCallerIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)( a1,  a2,  a3,  a4);
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::Properties_optional __swiftcall SearchCallHistoryCATsSimple.Properties.init(rawValue:)( Swift::String rawValue)
{
  return result;
}

uint64_t SearchCallHistoryCATsSimple.Properties.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CC544 + 4 * byte_332230[a1]))( 0xD000000000000027LL,  0x8000000000344120LL);
}

void sub_1CC544()
{
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SearchCallHistoryCATsSimple.Properties( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance SearchCallHistoryCATsSimple.Properties()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SearchCallHistoryCATsSimple.Properties( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SearchCallHistoryCATsSimple.Properties( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.Properties@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::Properties_optional *a2@<X8>)
{
  result.value = SearchCallHistoryCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SearchCallHistoryCATsSimple.Properties()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_38();
  *uint64_t v0 = SearchCallHistoryCATsSimple.Properties.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_2();
}

uint64_t SearchCallHistoryCATsSimple.buildCallRecordDetail(callRecord:)(uint64_t a1)
{
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.buildCallRecordDetail(callRecord:));
}

uint64_t SearchCallHistoryCATsSimple.buildCallRecordDetail(callRecord:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_8_2(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_27(v4);
  uint64_t v6 = OUTLINED_FUNCTION_12_55(v5, (__n128)xmmword_31D870);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for PhoneCallRecord(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_36_18(v6);
  OUTLINED_FUNCTION_6_55();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_46();
  *(void *)(v0 + 40) = v7;
  OUTLINED_FUNCTION_30(v7, (uint64_t)SearchCallHistoryCATsSimple.buildCallRecordDetail(callRecord:));
  OUTLINED_FUNCTION_27_3();
  unint64_t v8 = OUTLINED_FUNCTION_102(39LL);
  return OUTLINED_FUNCTION_12_28(v8, v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_3_5();
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v1, v2, v3);
  }

  else
  {
    OUTLINED_FUNCTION_20_32();
    uint64_t v5 = OUTLINED_FUNCTION_14_39();
    return OUTLINED_FUNCTION_8_3(v5, v6);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_209();
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v0 + 8));
}

void SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.buildCallRecordDetailAsLabels(callRecord:)(uint64_t a1)
{
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.buildCallRecordDetailAsLabels(callRecord:));
}

uint64_t SearchCallHistoryCATsSimple.buildCallRecordDetailAsLabels(callRecord:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_8_2(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_27(v4);
  uint64_t v6 = OUTLINED_FUNCTION_12_55(v5, (__n128)xmmword_31D870);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for PhoneCallRecord(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_36_18(v6);
  OUTLINED_FUNCTION_6_55();
  uint64_t v7 = OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_52_13(v7);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds and conformance SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds();
  OUTLINED_FUNCTION_34_4((uint64_t)SearchCallHistoryCATsSimple.buildCallRecordDetailAsLabels(callRecord:));
  OUTLINED_FUNCTION_38_2();
  unint64_t v8 = OUTLINED_FUNCTION_55_11(39LL);
  return OUTLINED_FUNCTION_7_59(v8, v9, v10, v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_3_5();
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v1, v2, v3);
  }

  else
  {
    OUTLINED_FUNCTION_20_32();
    uint64_t v5 = OUTLINED_FUNCTION_14_39();
    return OUTLINED_FUNCTION_8_3(v5, v6);
  }

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds and conformance SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds and conformance SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds and conformance SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds,  &type metadata for SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds and conformance SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds and conformance SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds and conformance SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds,  &type metadata for SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds and conformance SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.buildCallRecordDisplayName(callRecord:)(uint64_t a1)
{
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.buildCallRecordDisplayName(callRecord:));
}

uint64_t SearchCallHistoryCATsSimple.buildCallRecordDisplayName(callRecord:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_8_2(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_27(v4);
  uint64_t v6 = OUTLINED_FUNCTION_12_55(v5, (__n128)xmmword_31D870);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for PhoneCallRecord(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_36_18(v6);
  OUTLINED_FUNCTION_6_55();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_46();
  *(void *)(v0 + 40) = v7;
  OUTLINED_FUNCTION_30(v7, (uint64_t)SearchCallHistoryCATsSimple.buildCallRecordDetailAsLabels(callRecord:));
  unint64_t v8 = OUTLINED_FUNCTION_102(44LL);
  return OUTLINED_FUNCTION_12_28(v8, v9, v10, v11);
}

void SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.buildCallRecordDisplayNameAsLabels(callRecord:)(uint64_t a1)
{
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.buildCallRecordDisplayNameAsLabels(callRecord:));
}

uint64_t SearchCallHistoryCATsSimple.buildCallRecordDisplayNameAsLabels(callRecord:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_8_2(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_27(v4);
  uint64_t v6 = OUTLINED_FUNCTION_12_55(v5, (__n128)xmmword_31D870);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for PhoneCallRecord(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_36_18(v6);
  OUTLINED_FUNCTION_6_55();
  uint64_t v7 = OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_52_13(v7);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds and conformance SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds();
  OUTLINED_FUNCTION_34_4((uint64_t)SearchCallHistoryCATsSimple.buildCallRecordDetailAsLabels(callRecord:));
  OUTLINED_FUNCTION_38_2();
  unint64_t v8 = OUTLINED_FUNCTION_55_11(44LL);
  return OUTLINED_FUNCTION_7_59(v8, v9, v10, v11, v12, v13);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds and conformance SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds and conformance SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds and conformance SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds,  &type metadata for SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds and conformance SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds and conformance SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds and conformance SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds,  &type metadata for SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds and conformance SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.confirmCallTypes(callTypeToConfirm:callTypesCount:)( uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 72) = a3;
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 40) = OUTLINED_FUNCTION_12_0(v5);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t SearchCallHistoryCATsSimple.confirmCallTypes(callTypeToConfirm:callTypesCount:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_8_2(v3, 128LL);
  uint64_t v5 = OUTLINED_FUNCTION_77_1(v4);
  *(_OWORD *)(v5 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D880;
  *(void *)(v5 + 32) = 0xD000000000000011LL;
  *(void *)(v5 + 40) = 0x800000000034C620LL;
  OUTLINED_FUNCTION_27_6(v5, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_26_0();
  uint64_t v8 = OUTLINED_FUNCTION_45_0(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_41_1(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    void v2[9] = v0;
    uint64_t v10 = OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_11_11((uint64_t)v10);
  }

  OUTLINED_FUNCTION_97_9();
  if ((v11 & 1) != 0)
  {
    uint64_t v13 = 0LL;
    uint64_t v12 = 0LL;
    v2[13] = 0LL;
    v2[14] = 0LL;
  }

  else
  {
    uint64_t v12 = *(void *)(v1 + 24);
    uint64_t v13 = &type metadata for Double;
  }

  v2[15] = v13;
  v2[12] = v12;
  id v14 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 56) = v14;
  OUTLINED_FUNCTION_53_7(v14, (uint64_t)SearchCallHistoryCATsSimple.confirmCallTypes(callTypeToConfirm:callTypesCount:));
  uint64_t v15 = OUTLINED_FUNCTION_40(0xD000000000000022LL);
  return OUTLINED_FUNCTION_25_5(v15, v16, v17, v18);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_10_6();
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v1, v2, v3);
  }

  else
  {
    OUTLINED_FUNCTION_233();
    OUTLINED_FUNCTION_23_3();
    uint64_t v5 = OUTLINED_FUNCTION_17();
    return OUTLINED_FUNCTION_8_3(v5, v6);
  }

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ConfirmCallTypesDialogIds_optional __swiftcall SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds.init(rawValue:);
  PhoneCallDisplayTextCATsSimple.ContactCompositionDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

void SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    OUTLINED_FUNCTION_38_2();
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds()
{
  specialized == infix<A>(_:_:)();
}

void protocol witness for Hashable.hashValue.getter in conformance SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ConfirmCallTypesDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ConfirmCallTypesDialogIds_optional *a2@<X8>)
{
  result.value = SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds()
{
  char v1 = OUTLINED_FUNCTION_38();
  SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds.rawValue.getter(v1);
  *uint64_t v0 = v2;
  v0[1] = v3;
  OUTLINED_FUNCTION_2();
}

uint64_t SearchCallHistoryCATsSimple.confirmCallTypesAsLabels(callTypeToConfirm:callTypesCount:)( uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 72) = a3;
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 40) = OUTLINED_FUNCTION_12_0(v5);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t SearchCallHistoryCATsSimple.confirmCallTypesAsLabels(callTypeToConfirm:callTypesCount:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_8_2(v3, 128LL);
  uint64_t v5 = OUTLINED_FUNCTION_77_1(v4);
  *(_OWORD *)(v5 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D880;
  *(void *)(v5 + 32) = 0xD000000000000011LL;
  *(void *)(v5 + 40) = 0x800000000034C620LL;
  OUTLINED_FUNCTION_27_6(v5, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_26_0();
  uint64_t v8 = OUTLINED_FUNCTION_45_0(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_41_1(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    void v2[9] = v0;
    uint64_t v10 = OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_11_11((uint64_t)v10);
  }

  OUTLINED_FUNCTION_97_9();
  if ((v11 & 1) != 0)
  {
    uint64_t v13 = 0LL;
    uint64_t v12 = 0LL;
    v2[13] = 0LL;
    v2[14] = 0LL;
  }

  else
  {
    uint64_t v12 = *(void *)(v1 + 24);
    uint64_t v13 = &type metadata for Double;
  }

  v2[15] = v13;
  v2[12] = v12;
  uint64_t v14 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_68_2(v14);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds();
  OUTLINED_FUNCTION_113((uint64_t)SearchCallHistoryCATsSimple.confirmCallTypesAsLabels(callTypeToConfirm:callTypesCount:));
  OUTLINED_FUNCTION_38_2();
  OUTLINED_FUNCTION_26_6();
  return OUTLINED_FUNCTION_8_13(v15, v16, v17, v18, v19, v20);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_10_6();
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v1, v2, v3);
  }

  else
  {
    OUTLINED_FUNCTION_233();
    OUTLINED_FUNCTION_23_3();
    uint64_t v5 = OUTLINED_FUNCTION_17();
    return OUTLINED_FUNCTION_8_3(v5, v6);
  }

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.confirmDateCreated(dateCreatedToConfirm:isTimeDescriptive:)( uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 56) = a2;
  *(void *)(v3 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.confirmDateCreated(dateCreatedToConfirm:isTimeDescriptive:));
}

uint64_t SearchCallHistoryCATsSimple.confirmDateCreated(dateCreatedToConfirm:isTimeDescriptive:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_8_2(v3, 128LL);
  uint64_t v5 = OUTLINED_FUNCTION_27(v4);
  *(_OWORD *)(v5 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D880;
  uint64_t v6 = OUTLINED_FUNCTION_307(v5, 20LL);
  if (v0)
  {
    uint64_t v6 = type metadata accessor for DialogCalendar(v6);
  }

  else
  {
    *(void *)(v2 + 56) = 0LL;
    *(void *)(v2 + 64) = 0LL;
  }

  char v7 = *(_BYTE *)(v1 + 56);
  *(void *)(v2 + 88) = 0x800000000034C660LL;
  *(void *)(v2 + 120) = &type metadata for Bool;
  *(_BYTE *)(v2 + 96) = v7;
  *(void *)(v2 + 48) = v0;
  *(void *)(v2 + 72) = v6;
  *(void *)(v2 + 80) = 17LL;
  OUTLINED_FUNCTION_3_8();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_46();
  *(void *)(v1 + 40) = v8;
  OUTLINED_FUNCTION_30(v8, (uint64_t)SearchCallHistoryCATsSimple.buildCallRecordDetail(callRecord:));
  uint64_t v9 = OUTLINED_FUNCTION_40_16(36LL);
  return OUTLINED_FUNCTION_12_28(v9, v10, v11, v12);
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ConfirmDateCreatedDialogIds_optional __swiftcall SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ErrorRestrictedDeviceByRegionDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

unint64_t SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000017LL;
  }
  else {
    return 0xD000000000000016LL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ConfirmDateCreatedDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ConfirmDateCreatedDialogIds_optional *a2@<X8>)
{
  result.value = SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds()
{
  char v1 = OUTLINED_FUNCTION_38();
  *uint64_t v0 = SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_2();
}

uint64_t SearchCallHistoryCATsSimple.confirmDateCreatedAsLabels(dateCreatedToConfirm:isTimeDescriptive:)( uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 56) = a2;
  *(void *)(v3 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.confirmDateCreatedAsLabels(dateCreatedToConfirm:isTimeDescriptive:));
}

uint64_t SearchCallHistoryCATsSimple.confirmDateCreatedAsLabels(dateCreatedToConfirm:isTimeDescriptive:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_8_2(v3, 128LL);
  uint64_t v5 = OUTLINED_FUNCTION_27(v4);
  *(_OWORD *)(v5 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D880;
  uint64_t v6 = OUTLINED_FUNCTION_307(v5, 20LL);
  if (v0)
  {
    uint64_t v6 = type metadata accessor for DialogCalendar(v6);
  }

  else
  {
    *(void *)(v2 + 56) = 0LL;
    *(void *)(v2 + 64) = 0LL;
  }

  char v7 = *(_BYTE *)(v1 + 56);
  *(void *)(v2 + 88) = 0x800000000034C660LL;
  *(void *)(v2 + 120) = &type metadata for Bool;
  *(_BYTE *)(v2 + 96) = v7;
  *(void *)(v2 + 48) = v0;
  *(void *)(v2 + 72) = v6;
  *(void *)(v2 + 80) = 17LL;
  OUTLINED_FUNCTION_3_8();
  uint64_t v8 = OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_52_13(v8);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds();
  OUTLINED_FUNCTION_34_4((uint64_t)SearchCallHistoryCATsSimple.buildCallRecordDetailAsLabels(callRecord:));
  OUTLINED_FUNCTION_38_2();
  OUTLINED_FUNCTION_155_3();
  return OUTLINED_FUNCTION_7_59(v9, v10, v11, v12, v13, v14);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.confirmRecipient(recipientToConfirm:)(uint64_t a1)
{
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.confirmRecipient(recipientToConfirm:));
}

uint64_t SearchCallHistoryCATsSimple.confirmRecipient(recipientToConfirm:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_8_2(v3, 80LL);
  uint64_t v5 = OUTLINED_FUNCTION_27(v4);
  *(_OWORD *)(v5 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D870;
  uint64_t v6 = OUTLINED_FUNCTION_20(v5, (uint64_t)"recipientToConfirm");
  if (v0)
  {
    uint64_t v6 = type metadata accessor for DialogPerson(v6);
  }

  else
  {
    *(void *)(v2 + 56) = 0LL;
    *(void *)(v2 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_36_18(v6);
  OUTLINED_FUNCTION_18_2();
  char v7 = (void *)OUTLINED_FUNCTION_46();
  *(void *)(v1 + 40) = v7;
  OUTLINED_FUNCTION_30(v7, (uint64_t)SearchCallHistoryCATsSimple.buildCallRecordDetailAsLabels(callRecord:));
  uint64_t v8 = OUTLINED_FUNCTION_40_16(34LL);
  return OUTLINED_FUNCTION_12_28(v8, v9, v10, v11);
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ConfirmRecipientDialogIds_optional __swiftcall SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ErrorRestrictedDeviceByRegionDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

uint64_t SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x31676F6C616964LL;
  }
  else {
    return 0xD000000000000014LL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds()
{
  specialized == infix<A>(_:_:)();
}

void protocol witness for Hashable.hashValue.getter in conformance SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ConfirmRecipientDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ConfirmRecipientDialogIds_optional *a2@<X8>)
{
  result.value = SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds()
{
  char v1 = OUTLINED_FUNCTION_38();
  *uint64_t v0 = SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_2();
}

uint64_t SearchCallHistoryCATsSimple.confirmRecipientAsLabels(recipientToConfirm:)(uint64_t a1)
{
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.confirmRecipientAsLabels(recipientToConfirm:));
}

uint64_t SearchCallHistoryCATsSimple.confirmRecipientAsLabels(recipientToConfirm:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_8_2(v2, 80LL);
  uint64_t v4 = OUTLINED_FUNCTION_27(v3);
  *(_OWORD *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D870;
  uint64_t v5 = OUTLINED_FUNCTION_20(v4, (uint64_t)"recipientToConfirm");
  if (v0)
  {
    uint64_t v5 = type metadata accessor for DialogPerson(v5);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_36_18(v5);
  OUTLINED_FUNCTION_18_2();
  uint64_t v6 = OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_52_13(v6);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds();
  OUTLINED_FUNCTION_34_4((uint64_t)SearchCallHistoryCATsSimple.buildCallRecordDetailAsLabels(callRecord:));
  OUTLINED_FUNCTION_38_2();
  OUTLINED_FUNCTION_155_3();
  return OUTLINED_FUNCTION_7_59(v7, v8, v9, v10, v11, v12);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.confirmUnseen(intent:)(uint64_t a1)
{
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.confirmUnseen(intent:));
}

uint64_t SearchCallHistoryCATsSimple.confirmUnseen(intent:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_8_2(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_27(v4);
  uint64_t v6 = OUTLINED_FUNCTION_77_10(v5, (__n128)xmmword_31D870);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for PhoneSearchCallHistoryIntent(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_36_18(v6);
  OUTLINED_FUNCTION_6_55();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_46();
  *(void *)(v0 + 40) = v7;
  OUTLINED_FUNCTION_30(v7, (uint64_t)SearchCallHistoryCATsSimple.buildCallRecordDetailAsLabels(callRecord:));
  OUTLINED_FUNCTION_27_3();
  unint64_t v8 = OUTLINED_FUNCTION_102(31LL);
  return OUTLINED_FUNCTION_12_28(v8, v9, v10, v11);
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ConfirmUnseenDialogIds_optional __swiftcall SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ErrorRestrictedDeviceByRegionDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

uint64_t SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000015LL;
  }
  else {
    return 0x32676F6C616964LL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ConfirmUnseenDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ConfirmUnseenDialogIds_optional *a2@<X8>)
{
  result.value = SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds()
{
  char v1 = OUTLINED_FUNCTION_38();
  *uint64_t v0 = SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_2();
}

uint64_t SearchCallHistoryCATsSimple.confirmUnseenAsLabels(intent:)(uint64_t a1)
{
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.confirmUnseenAsLabels(intent:));
}

uint64_t SearchCallHistoryCATsSimple.confirmUnseenAsLabels(intent:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_8_2(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_27(v4);
  uint64_t v6 = OUTLINED_FUNCTION_77_10(v5, (__n128)xmmword_31D870);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for PhoneSearchCallHistoryIntent(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_36_18(v6);
  OUTLINED_FUNCTION_6_55();
  uint64_t v7 = OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_52_13(v7);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds();
  OUTLINED_FUNCTION_34_4((uint64_t)SearchCallHistoryCATsSimple.buildCallRecordDetailAsLabels(callRecord:));
  OUTLINED_FUNCTION_38_2();
  unint64_t v8 = OUTLINED_FUNCTION_55_11(31LL);
  return OUTLINED_FUNCTION_7_59(v8, v9, v10, v11, v12, v13);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds and conformance SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.errorWithCode()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(31LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

void SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.errorWithCodeAsLabels()()
{
  uint64_t v2 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_27_4(v2);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds and conformance SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v3 = OUTLINED_FUNCTION_26_33(31LL);
  return OUTLINED_FUNCTION_1_4(v3, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds and conformance SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds and conformance SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds and conformance SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds and conformance SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds and conformance SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds and conformance SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds and conformance SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.errorWithCodeAppConfigurationRequired(appName:intent:)( uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[5] = OUTLINED_FUNCTION_12_0(v4);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t SearchCallHistoryCATsSimple.errorWithCodeAppConfigurationRequired(appName:intent:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(void))
{
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_8_2(v13, 128LL);
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_77_1(v14);
  uint64_t v16 = OUTLINED_FUNCTION_7_9(v15, (__n128)xmmword_31D880);
  OUTLINED_FUNCTION_27_6((uint64_t)v16, v17, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v18 = OUTLINED_FUNCTION_26_0();
  uint64_t v19 = OUTLINED_FUNCTION_45_0(v18);
  if (v20)
  {
    OUTLINED_FUNCTION_41_1(v19, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    v12[9] = v10;
    uint64_t v21 = OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_11_11((uint64_t)v21);
  }

  uint64_t v22 = OUTLINED_FUNCTION_139_6();
  if (v9)
  {
    uint64_t v22 = type metadata accessor for PhoneSearchCallHistoryIntent(v22);
  }

  else
  {
    v12[13] = 0LL;
    v12[14] = 0LL;
  }

  v12[12] = v9;
  v12[15] = v22;
  OUTLINED_FUNCTION_18_2();
  uint64_t v23 = (void *)OUTLINED_FUNCTION_46();
  *(void *)(v11 + 56) = v23;
  OUTLINED_FUNCTION_53_7( v23,  (uint64_t)SearchCallHistoryCATsSimple.confirmCallTypesAsLabels(callTypeToConfirm:callTypesCount:));
  OUTLINED_FUNCTION_27_3();
  return OUTLINED_FUNCTION_12_28(0xD000000000000037LL, v24, (uint64_t)v12, a9);
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ErrorWithCodeAppConfigurationRequiredDialogIds_optional __swiftcall SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds.init(rawValue:);
  PhoneCallDisplayTextCATsSimple.ContactCompositionDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ErrorWithCodeAppConfigurationRequiredDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ErrorWithCodeAppConfigurationRequiredDialogIds_optional *a2@<X8>)
{
  result.value = SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SearchCallHistoryCATsSimple.errorWithCodeAppConfigurationRequiredAsLabels(appName:intent:)( uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[5] = OUTLINED_FUNCTION_12_0(v4);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t SearchCallHistoryCATsSimple.errorWithCodeAppConfigurationRequiredAsLabels(appName:intent:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(void))
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_8_2(v12, 128LL);
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_77_1(v13);
  uint64_t v15 = OUTLINED_FUNCTION_7_9(v14, (__n128)xmmword_31D880);
  OUTLINED_FUNCTION_27_6((uint64_t)v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_26_0();
  uint64_t v18 = OUTLINED_FUNCTION_45_0(v17);
  if (v19)
  {
    OUTLINED_FUNCTION_41_1(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    v11[9] = v10;
    char v20 = OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_11_11((uint64_t)v20);
  }

  uint64_t v21 = OUTLINED_FUNCTION_139_6();
  if (v9)
  {
    uint64_t v21 = type metadata accessor for PhoneSearchCallHistoryIntent(v21);
  }

  else
  {
    v11[13] = 0LL;
    v11[14] = 0LL;
  }

  v11[12] = v9;
  v11[15] = v21;
  OUTLINED_FUNCTION_18_2();
  uint64_t v22 = OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_68_2(v22);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds and conformance SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds();
  OUTLINED_FUNCTION_113((uint64_t)SearchCallHistoryCATsSimple.confirmCallTypes(callTypeToConfirm:callTypesCount:));
  OUTLINED_FUNCTION_38_2();
  return OUTLINED_FUNCTION_7_59( 0xD000000000000037LL,  v23,  (uint64_t)v11,  (uint64_t)&type metadata for SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds,  v24,  a9);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds and conformance SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds and conformance SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds and conformance SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds and conformance SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds and conformance SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds and conformance SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds and conformance SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.intentHandledResponse(callRecordCount:totalCallRecordCount:device:intent:isFirstPartyApp:appName:)( uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v8 + 64) = OUTLINED_FUNCTION_12_0(v9);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t SearchCallHistoryCATsSimple.intentHandledResponse(callRecordCount:totalCallRecordCount:device:intent:isFirstPartyApp:appName:)()
{
  uint64_t v5 = *(unsigned __int8 *)(v1 + 96);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v7 = OUTLINED_FUNCTION_8_2(v6, 320LL);
  uint64_t v8 = (__n128 *)OUTLINED_FUNCTION_248_1(v7);
  OUTLINED_FUNCTION_3_78(v8, (__n128)xmmword_328A80);
  if ((v5 & 1) != 0)
  {
    uint64_t v9 = 0LL;
    v3[7] = 0LL;
    v3[8] = 0LL;
  }

  else
  {
    uint64_t v9 = *(void *)(v1 + 16);
  }

  OUTLINED_FUNCTION_166_2(v9);
  OUTLINED_FUNCTION_196_2((uint64_t)"totalCallRecordCount");
  if ((v10 & 1) != 0) {
    OUTLINED_FUNCTION_180_2();
  }
  else {
    uint64_t v11 = &type metadata for Double;
  }
  uint64_t v12 = OUTLINED_FUNCTION_47_18((uint64_t)v11);
  if (v0)
  {
    uint64_t v12 = type metadata accessor for SirikitDeviceState(v12);
  }

  else
  {
    v3[19] = 0LL;
    v3[20] = 0LL;
  }

  uint64_t v13 = OUTLINED_FUNCTION_46_21(v12);
  if (v5)
  {
    uint64_t v13 = type metadata accessor for PhoneSearchCallHistoryIntent(v13);
  }

  else
  {
    v3[25] = 0LL;
    v3[26] = 0LL;
  }

  OUTLINED_FUNCTION_28_39(v13);
  OUTLINED_FUNCTION_157();
  OUTLINED_FUNCTION_176_1(&demangling cache variable for type metadata for SpeakableString?, v14);
  uint64_t v15 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_205(v15);
  if (v16)
  {
    OUTLINED_FUNCTION_59();
    uint64_t v17 = OUTLINED_FUNCTION_95_1();
    OUTLINED_FUNCTION_35_10(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    v3[39] = v2;
    uint64_t v18 = OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_204_0((uint64_t)v18);
    OUTLINED_FUNCTION_59();
    OUTLINED_FUNCTION_95_1();
  }

  char v19 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 80) = v19;
  *char v19 = v1;
  v19[1] = SearchCallHistoryCATs.intentHandledResponse(callRecordCount:totalCallRecordCount:device:intent:isFirstPartyApp:appName:);
  uint64_t v20 = OUTLINED_FUNCTION_69_13(v4 + 19);
  return OUTLINED_FUNCTION_32_16(v20, v21, v22, v23);
}

void SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.intentHandledResponseAsLabels(callRecordCount:totalCallRecordCount:device:intent:isFirstPartyApp:appName:)( uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v8 + 64) = OUTLINED_FUNCTION_12_0(v9);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t SearchCallHistoryCATsSimple.intentHandledResponseAsLabels(callRecordCount:totalCallRecordCount:device:intent:isFirstPartyApp:appName:)()
{
  uint64_t v4 = *(unsigned __int8 *)(v1 + 96);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_8_2(v5, 320LL);
  uint64_t v7 = (__n128 *)OUTLINED_FUNCTION_248_1(v6);
  OUTLINED_FUNCTION_3_78(v7, (__n128)xmmword_328A80);
  if ((v4 & 1) != 0)
  {
    uint64_t v8 = 0LL;
    v3[7] = 0LL;
    v3[8] = 0LL;
  }

  else
  {
    uint64_t v8 = *(void *)(v1 + 16);
  }

  OUTLINED_FUNCTION_166_2(v8);
  OUTLINED_FUNCTION_196_2((uint64_t)"totalCallRecordCount");
  if ((v9 & 1) != 0) {
    OUTLINED_FUNCTION_180_2();
  }
  else {
    char v10 = &type metadata for Double;
  }
  uint64_t v11 = OUTLINED_FUNCTION_47_18((uint64_t)v10);
  if (v0)
  {
    uint64_t v11 = type metadata accessor for SirikitDeviceState(v11);
  }

  else
  {
    v3[19] = 0LL;
    v3[20] = 0LL;
  }

  uint64_t v12 = OUTLINED_FUNCTION_46_21(v11);
  if (v4)
  {
    uint64_t v12 = type metadata accessor for PhoneSearchCallHistoryIntent(v12);
  }

  else
  {
    v3[25] = 0LL;
    v3[26] = 0LL;
  }

  OUTLINED_FUNCTION_28_39(v12);
  OUTLINED_FUNCTION_157();
  OUTLINED_FUNCTION_176_1(&demangling cache variable for type metadata for SpeakableString?, v13);
  uint64_t v14 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_205(v14);
  if (v15)
  {
    OUTLINED_FUNCTION_59();
    uint64_t v16 = OUTLINED_FUNCTION_95_1();
    OUTLINED_FUNCTION_35_10(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    v3[39] = v2;
    uint64_t v17 = OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_204_0((uint64_t)v17);
    OUTLINED_FUNCTION_59();
    OUTLINED_FUNCTION_95_1();
  }

  uint64_t v18 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_149_5(v18);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds and conformance SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SearchCallHistoryCATs.readNewVoiceMailRecord(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:voiceMailPosition:newRecordsCount:savedRecordsCount:);
  OUTLINED_FUNCTION_38_2();
  OUTLINED_FUNCTION_111_7();
  return OUTLINED_FUNCTION_36_24(v19, v20, v21, v22, v23, v24);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds and conformance SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds and conformance SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds and conformance SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds,  &type metadata for SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds and conformance SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds and conformance SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds and conformance SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds,  &type metadata for SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds and conformance SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.intentHandledResponseMissedCall(callRecordCount:totalCallRecordCount:intent:)( uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.intentHandledResponseMissedCall(callRecordCount:totalCallRecordCount:intent:));
}

uint64_t SearchCallHistoryCATsSimple.intentHandledResponseMissedCall(callRecordCount:totalCallRecordCount:intent:)()
{
  char v3 = *(_BYTE *)(v1 + 72);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_8_2(v4, 176LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_153_6(v5);
  OUTLINED_FUNCTION_3_78(v6, (__n128)xmmword_320080);
  if ((v3 & 1) != 0) {
    OUTLINED_FUNCTION_137_4();
  }
  else {
    uint64_t v7 = *(void *)(v1 + 16);
  }
  OUTLINED_FUNCTION_185_0(v7);
  OUTLINED_FUNCTION_78_12((uint64_t)"totalCallRecordCount");
  if ((v8 & 1) != 0) {
    OUTLINED_FUNCTION_131_4();
  }
  else {
    char v9 = &type metadata for Double;
  }
  uint64_t v10 = OUTLINED_FUNCTION_26_39((uint64_t)v9);
  if (v0)
  {
    uint64_t v10 = type metadata accessor for PhoneSearchCallHistoryIntent(v10);
  }

  else
  {
    *(void *)(v2 + 152) = 0LL;
    *(void *)(v2 + 160) = 0LL;
  }

  OUTLINED_FUNCTION_202_2(v10);
  OUTLINED_FUNCTION_18_2();
  uint64_t v11 = (void *)OUTLINED_FUNCTION_46();
  *(void *)(v1 + 56) = v11;
  *uint64_t v11 = v1;
  v11[1] = SearchCallHistoryCATsSimple.intentHandledResponseMissedCall(callRecordCount:totalCallRecordCount:intent:);
  uint64_t v12 = OUTLINED_FUNCTION_40_16(49LL);
  return OUTLINED_FUNCTION_12_28(v12, v13, v14, v15);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_10_6();
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v1, v2, v3);
  }

  else
  {
    OUTLINED_FUNCTION_285();
    uint64_t v5 = OUTLINED_FUNCTION_14_39();
    return OUTLINED_FUNCTION_8_3(v5, v6);
  }

void SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.intentHandledResponseMissedCallAsLabels(callRecordCount:totalCallRecordCount:intent:)( uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.intentHandledResponseMissedCallAsLabels(callRecordCount:totalCallRecordCount:intent:));
}

uint64_t SearchCallHistoryCATsSimple.intentHandledResponseMissedCallAsLabels(callRecordCount:totalCallRecordCount:intent:)()
{
  char v3 = *(_BYTE *)(v1 + 72);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_8_2(v4, 176LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_153_6(v5);
  OUTLINED_FUNCTION_3_78(v6, (__n128)xmmword_320080);
  if ((v3 & 1) != 0) {
    OUTLINED_FUNCTION_137_4();
  }
  else {
    uint64_t v7 = *(void *)(v1 + 16);
  }
  OUTLINED_FUNCTION_185_0(v7);
  OUTLINED_FUNCTION_78_12((uint64_t)"totalCallRecordCount");
  if ((v8 & 1) != 0) {
    OUTLINED_FUNCTION_131_4();
  }
  else {
    char v9 = &type metadata for Double;
  }
  uint64_t v10 = OUTLINED_FUNCTION_26_39((uint64_t)v9);
  if (v0)
  {
    uint64_t v10 = type metadata accessor for PhoneSearchCallHistoryIntent(v10);
  }

  else
  {
    *(void *)(v2 + 152) = 0LL;
    *(void *)(v2 + 160) = 0LL;
  }

  OUTLINED_FUNCTION_202_2(v10);
  OUTLINED_FUNCTION_18_2();
  uint64_t v11 = OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_68_2(v11);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds and conformance SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SearchCallHistoryCATsSimple.intentHandledResponseMissedCall(callRecordCount:totalCallRecordCount:intent:);
  OUTLINED_FUNCTION_38_2();
  OUTLINED_FUNCTION_155_3();
  return OUTLINED_FUNCTION_7_59(v12, v13, v14, v15, v16, v17);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds and conformance SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds and conformance SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds and conformance SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds,  &type metadata for SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds and conformance SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds and conformance SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds and conformance SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds,  &type metadata for SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds and conformance SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.offerToCallBack()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(33LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

void SearchCallHistoryCATsSimple.OfferToCallBackDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.OfferToCallBackDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.OfferToCallBackDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.offerToCallBackAsLabels()()
{
  uint64_t v2 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_27_4(v2);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.OfferToCallBackDialogIds and conformance SearchCallHistoryCATsSimple.OfferToCallBackDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v3 = OUTLINED_FUNCTION_26_33(33LL);
  return OUTLINED_FUNCTION_1_4(v3, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.OfferToCallBackDialogIds and conformance SearchCallHistoryCATsSimple.OfferToCallBackDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.OfferToCallBackDialogIds and conformance SearchCallHistoryCATsSimple.OfferToCallBackDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.OfferToCallBackDialogIds and conformance SearchCallHistoryCATsSimple.OfferToCallBackDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.OfferToCallBackDialogIds,  &type metadata for SearchCallHistoryCATsSimple.OfferToCallBackDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.OfferToCallBackDialogIds and conformance SearchCallHistoryCATsSimple.OfferToCallBackDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.OfferToCallBackDialogIds and conformance SearchCallHistoryCATsSimple.OfferToCallBackDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.OfferToCallBackDialogIds and conformance SearchCallHistoryCATsSimple.OfferToCallBackDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.OfferToCallBackDialogIds,  &type metadata for SearchCallHistoryCATsSimple.OfferToCallBackDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.OfferToCallBackDialogIds and conformance SearchCallHistoryCATsSimple.OfferToCallBackDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.offerToContinueReading(isLastPage:)(char a1)
{
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *(_BYTE *)(v2 + 48) = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.offerToContinueReading(isLastPage:));
}

uint64_t SearchCallHistoryCATsSimple.offerToContinueReading(isLastPage:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_8_2(v1, 80LL);
  uint64_t v3 = OUTLINED_FUNCTION_31_30(v2);
  *(void *)(v3 + 72) = &type metadata for Bool;
  uint64_t v5 = (void *)OUTLINED_FUNCTION_96_3( v3,  (uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:),  v4);
  *(void *)(v0 + 32) = v5;
  OUTLINED_FUNCTION_302(v5, (uint64_t)SearchCallHistoryCATs.offerToContinueReading(isLastPage:));
  OUTLINED_FUNCTION_27_3();
  unint64_t v6 = OUTLINED_FUNCTION_271_0(40LL);
  return OUTLINED_FUNCTION_81_11(v6, v7, v8, v9);
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::OfferToContinueReadingDialogIds_optional __swiftcall SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ErrorRestrictedDeviceByRegionDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::OfferToContinueReadingDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::OfferToContinueReadingDialogIds_optional *a2@<X8>)
{
  result.value = SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SearchCallHistoryCATsSimple.offerToContinueReadingAsLabels(isLastPage:)(char a1)
{
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *(_BYTE *)(v2 + 48) = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.offerToContinueReadingAsLabels(isLastPage:));
}

uint64_t SearchCallHistoryCATsSimple.offerToContinueReadingAsLabels(isLastPage:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_8_2(v0, 80LL);
  uint64_t v2 = OUTLINED_FUNCTION_31_30(v1);
  *(void *)(v2 + 72) = &type metadata for Bool;
  uint64_t v4 = OUTLINED_FUNCTION_67_15( v2,  (uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:),  v3);
  OUTLINED_FUNCTION_162(v4);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds and conformance SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds();
  OUTLINED_FUNCTION_186_2((uint64_t)SearchCallHistoryCATs.offerToContinueReading(isLastPage:));
  OUTLINED_FUNCTION_38_2();
  unint64_t v5 = OUTLINED_FUNCTION_174_4(40LL);
  return OUTLINED_FUNCTION_1_4(v5, v6, v7, v8, v9, v10);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds and conformance SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds and conformance SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds and conformance SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds,  &type metadata for SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds and conformance SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds and conformance SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds and conformance SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds,  &type metadata for SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds and conformance SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.offerToReadMoreCallRecords(isLastWindow:)(char a1)
{
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *(_BYTE *)(v2 + 48) = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.offerToReadMoreCallRecords(isLastWindow:));
}

uint64_t SearchCallHistoryCATsSimple.offerToReadMoreCallRecords(isLastWindow:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_8_2(v1, 80LL);
  uint64_t v3 = OUTLINED_FUNCTION_174_3(v2);
  *(void *)(v3 + 72) = &type metadata for Bool;
  unint64_t v5 = (void *)OUTLINED_FUNCTION_96_3( v3,  (uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:),  v4);
  *(void *)(v0 + 32) = v5;
  OUTLINED_FUNCTION_302(v5, (uint64_t)SearchCallHistoryCATs.offerToContinueReading(isLastPage:));
  unint64_t v6 = OUTLINED_FUNCTION_271_0(44LL);
  return OUTLINED_FUNCTION_81_11(v6, v7, v8, v9);
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::OfferToReadMoreCallRecordsDialogIds_optional __swiftcall SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ErrorRestrictedDeviceByRegionDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::OfferToReadMoreCallRecordsDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::OfferToReadMoreCallRecordsDialogIds_optional *a2@<X8>)
{
  result.value = SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SearchCallHistoryCATsSimple.offerToReadMoreCallRecordsAsLabels(isLastWindow:)(char a1)
{
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *(_BYTE *)(v2 + 48) = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.offerToReadMoreCallRecordsAsLabels(isLastWindow:));
}

uint64_t SearchCallHistoryCATsSimple.offerToReadMoreCallRecordsAsLabels(isLastWindow:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_8_2(v0, 80LL);
  uint64_t v2 = OUTLINED_FUNCTION_174_3(v1);
  *(void *)(v2 + 72) = &type metadata for Bool;
  uint64_t v4 = OUTLINED_FUNCTION_67_15( v2,  (uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:),  v3);
  OUTLINED_FUNCTION_162(v4);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds and conformance SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds();
  OUTLINED_FUNCTION_186_2((uint64_t)SearchCallHistoryCATs.offerToReadMoreCallRecords(isLastWindow:));
  OUTLINED_FUNCTION_38_2();
  unint64_t v5 = OUTLINED_FUNCTION_174_4(44LL);
  return OUTLINED_FUNCTION_1_4(v5, v6, v7, v8, v9, v10);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds and conformance SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds and conformance SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds and conformance SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds,  &type metadata for SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds and conformance SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds and conformance SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds and conformance SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds,  &type metadata for SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds and conformance SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.promptForCallTypes()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(36LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

void SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.promptForCallTypesAsLabels()()
{
  uint64_t v2 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_27_4(v2);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v3 = OUTLINED_FUNCTION_26_33(36LL);
  return OUTLINED_FUNCTION_1_4(v3, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds,  &type metadata for SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds,  &type metadata for SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.promptForDateCreated()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(38LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

void SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.promptForDateCreatedAsLabels()()
{
  uint64_t v2 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_27_4(v2);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v3 = OUTLINED_FUNCTION_26_33(38LL);
  return OUTLINED_FUNCTION_1_4(v3, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds,  &type metadata for SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds,  &type metadata for SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.promptForRecipient()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(36LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

void SearchCallHistoryCATsSimple.PromptForRecipientDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.PromptForRecipientDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.PromptForRecipientDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.promptForRecipientAsLabels()()
{
  uint64_t v2 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_27_4(v2);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.PromptForRecipientDialogIds and conformance SearchCallHistoryCATsSimple.PromptForRecipientDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v3 = OUTLINED_FUNCTION_26_33(36LL);
  return OUTLINED_FUNCTION_1_4(v3, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.PromptForRecipientDialogIds and conformance SearchCallHistoryCATsSimple.PromptForRecipientDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForRecipientDialogIds and conformance SearchCallHistoryCATsSimple.PromptForRecipientDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForRecipientDialogIds and conformance SearchCallHistoryCATsSimple.PromptForRecipientDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.PromptForRecipientDialogIds,  &type metadata for SearchCallHistoryCATsSimple.PromptForRecipientDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForRecipientDialogIds and conformance SearchCallHistoryCATsSimple.PromptForRecipientDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForRecipientDialogIds and conformance SearchCallHistoryCATsSimple.PromptForRecipientDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForRecipientDialogIds and conformance SearchCallHistoryCATsSimple.PromptForRecipientDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.PromptForRecipientDialogIds,  &type metadata for SearchCallHistoryCATsSimple.PromptForRecipientDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForRecipientDialogIds and conformance SearchCallHistoryCATsSimple.PromptForRecipientDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.promptForUnseen()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(33LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

void SearchCallHistoryCATsSimple.PromptForUnseenDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.PromptForUnseenDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.PromptForUnseenDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.promptForUnseenAsLabels()()
{
  uint64_t v2 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_27_4(v2);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.PromptForUnseenDialogIds and conformance SearchCallHistoryCATsSimple.PromptForUnseenDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v3 = OUTLINED_FUNCTION_26_33(33LL);
  return OUTLINED_FUNCTION_1_4(v3, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.PromptForUnseenDialogIds and conformance SearchCallHistoryCATsSimple.PromptForUnseenDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForUnseenDialogIds and conformance SearchCallHistoryCATsSimple.PromptForUnseenDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForUnseenDialogIds and conformance SearchCallHistoryCATsSimple.PromptForUnseenDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.PromptForUnseenDialogIds,  &type metadata for SearchCallHistoryCATsSimple.PromptForUnseenDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForUnseenDialogIds and conformance SearchCallHistoryCATsSimple.PromptForUnseenDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForUnseenDialogIds and conformance SearchCallHistoryCATsSimple.PromptForUnseenDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForUnseenDialogIds and conformance SearchCallHistoryCATsSimple.PromptForUnseenDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.PromptForUnseenDialogIds,  &type metadata for SearchCallHistoryCATsSimple.PromptForUnseenDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.PromptForUnseenDialogIds and conformance SearchCallHistoryCATsSimple.PromptForUnseenDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.readCallRecord(callRecord:isLastOfGroup:intent:isSingleDateRequest:isTimeRangeRequest:)( uint64_t a1, char a2, uint64_t a3, char a4, char a5)
{
  *(void *)(v6 + 24) = a3;
  *(void *)(v6 + 32) = v5;
  *(_BYTE *)(v6 + 66) = a5;
  *(_BYTE *)(v6 + 65) = a4;
  *(_BYTE *)(v6 + 64) = a2;
  *(void *)(v6 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.readCallRecord(callRecord:isLastOfGroup:intent:isSingleDateRequest:isTimeRangeRequest:));
}

uint64_t SearchCallHistoryCATsSimple.readCallRecord(callRecord:isLastOfGroup:intent:isSingleDateRequest:isTimeRangeRequest:)()
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_8_2(v5, 272LL);
  uint64_t v7 = (__n128 *)OUTLINED_FUNCTION_25_11(v6);
  OUTLINED_FUNCTION_6_62(v7, (__n128)xmmword_323F80);
  if (v4)
  {
    uint64_t v8 = OUTLINED_FUNCTION_17_38();
    uint64_t v9 = v4;
  }

  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_32_23();
  }

  OUTLINED_FUNCTION_84_10(v8, v9);
  uint64_t v10 = OUTLINED_FUNCTION_170_2();
  if (v0)
  {
    uint64_t v10 = type metadata accessor for PhoneSearchCallHistoryIntent(v10);
  }

  else
  {
    *(void *)(v2 + 152) = 0LL;
    *(void *)(v2 + 160) = 0LL;
  }

  OUTLINED_FUNCTION_142_6(v10);
  OUTLINED_FUNCTION_283_0();
  OUTLINED_FUNCTION_257(v11);
  OUTLINED_FUNCTION_6_55();
  OUTLINED_FUNCTION_25_1();
  uint64_t v12 = (void *)OUTLINED_FUNCTION_65_10();
  *(void *)(v1 + 48) = v12;
  OUTLINED_FUNCTION_53_7( v12,  (uint64_t)AddCallParticipantCATsSimple.errorParticipantAlreadyActiveAsLabels(participant:shouldIncludeHandleLabel:currentCall:));
  uint64_t v13 = OUTLINED_FUNCTION_40(v3 + 14);
  return OUTLINED_FUNCTION_25_5(v13, v14, v15, v16);
}

void SearchCallHistoryCATsSimple.ReadCallRecordDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.ReadCallRecordDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.ReadCallRecordDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.readCallRecordAsLabels(callRecord:isLastOfGroup:intent:isSingleDateRequest:isTimeRangeRequest:)( uint64_t a1, char a2, uint64_t a3, char a4, char a5)
{
  *(void *)(v6 + 24) = a3;
  *(void *)(v6 + 32) = v5;
  *(_BYTE *)(v6 + 66) = a5;
  *(_BYTE *)(v6 + 65) = a4;
  *(_BYTE *)(v6 + 64) = a2;
  *(void *)(v6 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.readCallRecordAsLabels(callRecord:isLastOfGroup:intent:isSingleDateRequest:isTimeRangeRequest:));
}

uint64_t SearchCallHistoryCATsSimple.readCallRecordAsLabels(callRecord:isLastOfGroup:intent:isSingleDateRequest:isTimeRangeRequest:)()
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_8_2(v4, 272LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_25_11(v5);
  OUTLINED_FUNCTION_6_62(v6, (__n128)xmmword_323F80);
  if (v3)
  {
    uint64_t v7 = OUTLINED_FUNCTION_17_38();
    uint64_t v8 = v3;
  }

  else
  {
    uint64_t v7 = OUTLINED_FUNCTION_32_23();
  }

  OUTLINED_FUNCTION_84_10(v7, v8);
  uint64_t v9 = OUTLINED_FUNCTION_170_2();
  if (v0)
  {
    uint64_t v9 = type metadata accessor for PhoneSearchCallHistoryIntent(v9);
  }

  else
  {
    *(void *)(v2 + 152) = 0LL;
    *(void *)(v2 + 160) = 0LL;
  }

  OUTLINED_FUNCTION_142_6(v9);
  OUTLINED_FUNCTION_283_0();
  OUTLINED_FUNCTION_257(v10);
  OUTLINED_FUNCTION_6_55();
  OUTLINED_FUNCTION_25_1();
  *(void *)(v1 + 48) = OUTLINED_FUNCTION_65_10();
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadCallRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadCallRecordDialogIds();
  OUTLINED_FUNCTION_113((uint64_t)AddCallParticipantCATsSimple.errorParticipantAlreadyActive(participant:shouldIncludeHandleLabel:currentCall:));
  OUTLINED_FUNCTION_38_2();
  OUTLINED_FUNCTION_26_6();
  return OUTLINED_FUNCTION_8_13(v11, v12, v13, v14, v15, v16);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadCallRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadCallRecordDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadCallRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadCallRecordDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadCallRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadCallRecordDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadCallRecordDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadCallRecordDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadCallRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadCallRecordDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadCallRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadCallRecordDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadCallRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadCallRecordDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadCallRecordDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadCallRecordDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadCallRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadCallRecordDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.readMissedCallHistoryIntroduction(callRecordCount:totalCallRecordCount:intent:)( uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.readMissedCallHistoryIntroduction(callRecordCount:totalCallRecordCount:intent:));
}

uint64_t SearchCallHistoryCATsSimple.readMissedCallHistoryIntroduction(callRecordCount:totalCallRecordCount:intent:)()
{
  char v3 = *(_BYTE *)(v1 + 72);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_8_2(v4, 176LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_153_6(v5);
  OUTLINED_FUNCTION_3_78(v6, (__n128)xmmword_320080);
  if ((v3 & 1) != 0) {
    OUTLINED_FUNCTION_137_4();
  }
  else {
    uint64_t v7 = *(void *)(v1 + 16);
  }
  OUTLINED_FUNCTION_185_0(v7);
  OUTLINED_FUNCTION_78_12((uint64_t)"totalCallRecordCount");
  if ((v8 & 1) != 0) {
    OUTLINED_FUNCTION_131_4();
  }
  else {
    uint64_t v9 = &type metadata for Double;
  }
  uint64_t v10 = OUTLINED_FUNCTION_26_39((uint64_t)v9);
  if (v0)
  {
    uint64_t v10 = type metadata accessor for PhoneSearchCallHistoryIntent(v10);
  }

  else
  {
    *(void *)(v2 + 152) = 0LL;
    *(void *)(v2 + 160) = 0LL;
  }

  OUTLINED_FUNCTION_202_2(v10);
  OUTLINED_FUNCTION_18_2();
  uint64_t v11 = (void *)OUTLINED_FUNCTION_46();
  *(void *)(v1 + 56) = v11;
  *uint64_t v11 = v1;
  v11[1] = SearchCallHistoryCATsSimple.readMissedCallHistoryIntroduction(callRecordCount:totalCallRecordCount:intent:);
  uint64_t v12 = OUTLINED_FUNCTION_40_16(51LL);
  return OUTLINED_FUNCTION_12_28(v12, v13, v14, v15);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_10_6();
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v1, v2, v3);
  }

  else
  {
    OUTLINED_FUNCTION_285();
    uint64_t v5 = OUTLINED_FUNCTION_14_39();
    return OUTLINED_FUNCTION_8_3(v5, v6);
  }

void SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds.init(rawValue:)( Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.readMissedCallHistoryIntroductionAsLabels(callRecordCount:totalCallRecordCount:intent:)( uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.readMissedCallHistoryIntroductionAsLabels(callRecordCount:totalCallRecordCount:intent:));
}

uint64_t SearchCallHistoryCATsSimple.readMissedCallHistoryIntroductionAsLabels(callRecordCount:totalCallRecordCount:intent:)()
{
  char v3 = *(_BYTE *)(v1 + 72);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_8_2(v4, 176LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_153_6(v5);
  OUTLINED_FUNCTION_3_78(v6, (__n128)xmmword_320080);
  if ((v3 & 1) != 0) {
    OUTLINED_FUNCTION_137_4();
  }
  else {
    uint64_t v7 = *(void *)(v1 + 16);
  }
  OUTLINED_FUNCTION_185_0(v7);
  OUTLINED_FUNCTION_78_12((uint64_t)"totalCallRecordCount");
  if ((v8 & 1) != 0) {
    OUTLINED_FUNCTION_131_4();
  }
  else {
    uint64_t v9 = &type metadata for Double;
  }
  uint64_t v10 = OUTLINED_FUNCTION_26_39((uint64_t)v9);
  if (v0)
  {
    uint64_t v10 = type metadata accessor for PhoneSearchCallHistoryIntent(v10);
  }

  else
  {
    *(void *)(v2 + 152) = 0LL;
    *(void *)(v2 + 160) = 0LL;
  }

  OUTLINED_FUNCTION_202_2(v10);
  OUTLINED_FUNCTION_18_2();
  uint64_t v11 = OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_68_2(v11);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SearchCallHistoryCATsSimple.intentHandledResponseMissedCall(callRecordCount:totalCallRecordCount:intent:);
  OUTLINED_FUNCTION_38_2();
  OUTLINED_FUNCTION_155_3();
  return OUTLINED_FUNCTION_7_59(v12, v13, v14, v15, v16, v17);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds);
  }

  return result;
}

#error "1CF20C: call analysis failed (funcsize=5)"
uint64_t SearchCallHistoryCATsSimple.readMultipleCallRecords(windowSize:callRecordsItem1:callRecordsItem2:callRecordsItem3:callRecordsItem4:intent:isSingleDateRequest:isTimeRangeRequest:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t (*v18)(uint64_t);
  uint64_t v6 = *(_BYTE *)(v1 + 96);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  char v8 = (__n128 *)OUTLINED_FUNCTION_8_2(v7, 416LL);
  *(void *)(v1 + 72) = v8;
  OUTLINED_FUNCTION_121_6(v8, (__n128)xmmword_323F90);
  if ((v6 & 1) != 0)
  {
    uint64_t v9 = 0LL;
    v8[3].n128_u64[1] = 0LL;
    v8[4].n128_u64[0] = 0LL;
  }

  else
  {
    uint64_t v9 = *(void *)(v1 + 16);
  }

  OUTLINED_FUNCTION_137_6(v9);
  v8[5].n128_u64[1] = 0x800000000034C700LL;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhoneCallRecord]);
  v8[6].n128_u64[0] = v3;
  v8[7].n128_u64[1] = v10;
  v8[8].n128_u64[0] = v5;
  v8[8].n128_u64[1] = 0x800000000034C720LL;
  v8[9].n128_u64[0] = v2;
  uint64_t v11 = OUTLINED_FUNCTION_270_1(v10, (uint64_t)"callRecordsItem3");
  uint64_t v12 = OUTLINED_FUNCTION_148_4(v11, (uint64_t)"callRecordsItem4");
  if (v0)
  {
    uint64_t v12 = type metadata accessor for PhoneSearchCallHistoryIntent(v12);
  }

  else
  {
    v8[18].n128_u64[1] = 0LL;
    v8[19].n128_u64[0] = 0LL;
  }

  OUTLINED_FUNCTION_169_3(v12);
  v8[20].n128_u64[1] = 0x800000000034C6C0LL;
  v8[21].n128_u8[0] = v13;
  v8[22].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v8[23].n128_u64[0] = v5 + 2;
  OUTLINED_FUNCTION_255(v14);
  OUTLINED_FUNCTION_191_1();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_3_8();
  uint64_t v15 = (void *)swift_task_alloc(v4);
  *(void *)(v1 + 80) = v15;
  *uint64_t v15 = v1;
  v15[1] = SearchCallHistoryCATsSimple.readMultipleCallRecords(windowSize:callRecordsItem1:callRecordsItem2:callRecordsItem3:callRecordsItem4:intent:isSingleDateRequest:isTimeRangeRequest:);
  uint64_t v16 = OUTLINED_FUNCTION_21_19(v5 + 25);
  return v18(v16);
}

uint64_t SearchCallHistoryCATsSimple.readMultipleCallRecords(windowSize:callRecordsItem1:callRecordsItem2:callRecordsItem3:callRecordsItem4:intent:isSingleDateRequest:isTimeRangeRequest:)()
{
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v1, v2, v3);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = OUTLINED_FUNCTION_14_39();
    return OUTLINED_FUNCTION_8_3(v5, v6);
  }

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ReadMultipleCallRecordsDialogIds_optional __swiftcall SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds.init(rawValue:);
  StartCallCATsSimple.ErrorWithCodeCallInProgressDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

uint64_t SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)())((char *)sub_1CF428 + 4 * byte_332258[a1]))();
}

uint64_t sub_1CF428()
{
  return 0x61696423316C6C61LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds( char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds()
{
}

void protocol witness for Hashable.hash(into:) in conformance SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds( uint64_t a1)
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ReadMultipleCallRecordsDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ReadMultipleCallRecordsDialogIds_optional *a2@<X8>)
{
  result.value = SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_38();
  SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds.rawValue.getter(v1);
  *uint64_t v0 = 0x61696423316C6C61LL;
  v0[1] = v2;
  OUTLINED_FUNCTION_2();
}

#error "1CF4E4: call analysis failed (funcsize=5)"
uint64_t SearchCallHistoryCATsSimple.readMultipleCallRecordsAsLabels(windowSize:callRecordsItem1:callRecordsItem2:callRecordsItem3:callRecordsItem4:intent:isSingleDateRequest:isTimeRangeRequest:)()
{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  char v14;
  uint64_t v15;
  uint64_t (*v17)(void);
  uint64_t v6 = *(_BYTE *)(v1 + 96);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  char v8 = (__n128 *)OUTLINED_FUNCTION_8_2(v7, 416LL);
  *(void *)(v1 + 72) = v8;
  OUTLINED_FUNCTION_121_6(v8, (__n128)xmmword_323F90);
  if ((v6 & 1) != 0)
  {
    uint64_t v9 = 0LL;
    v8[3].n128_u64[1] = 0LL;
    v8[4].n128_u64[0] = 0LL;
  }

  else
  {
    uint64_t v9 = *(void *)(v1 + 16);
  }

  OUTLINED_FUNCTION_137_6(v9);
  v8[5].n128_u64[1] = 0x800000000034C700LL;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhoneCallRecord]);
  v8[6].n128_u64[0] = v3;
  v8[7].n128_u64[1] = v10;
  v8[8].n128_u64[0] = v5;
  v8[8].n128_u64[1] = 0x800000000034C720LL;
  v8[9].n128_u64[0] = v2;
  uint64_t v11 = OUTLINED_FUNCTION_270_1(v10, (uint64_t)"callRecordsItem3");
  uint64_t v12 = OUTLINED_FUNCTION_148_4(v11, (uint64_t)"callRecordsItem4");
  if (v0)
  {
    uint64_t v12 = type metadata accessor for PhoneSearchCallHistoryIntent(v12);
  }

  else
  {
    v8[18].n128_u64[1] = 0LL;
    v8[19].n128_u64[0] = 0LL;
  }

  OUTLINED_FUNCTION_169_3(v12);
  v8[20].n128_u64[1] = 0x800000000034C6C0LL;
  v8[21].n128_u8[0] = v13;
  v8[22].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v8[23].n128_u64[0] = v5 + 2;
  OUTLINED_FUNCTION_255(v14);
  OUTLINED_FUNCTION_191_1();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_3_8();
  uint64_t v15 = swift_task_alloc(v4);
  OUTLINED_FUNCTION_149_5(v15);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds and conformance SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SearchCallHistoryCATs.readMultipleCallRecords(windowSize:callRecordsItem1:callRecordsItem2:callRecordsItem3:callRecordsItem4:intent:isSingleDateRequest:isTimeRangeRequest:);
  OUTLINED_FUNCTION_38_2();
  return v17();
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds and conformance SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds and conformance SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds and conformance SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds and conformance SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds and conformance SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds and conformance SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds and conformance SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.readNewOrSavedVoiceMailRecord(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:voiceMailPosition:newRecordsCount:savedRecordsCount:isLeadingSavedVoiceMailPostPrompt:isNewVoicemail:)( uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9, unsigned __int8 a10, unsigned __int8 a11)
{
  *(_WORD *)(v11 + 100) = __PAIR16__(a11, a10);
  OUTLINED_FUNCTION_121(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v11 + 64) = OUTLINED_FUNCTION_12_0(v12);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_33_37(v13, v14, v15);
}

uint64_t SearchCallHistoryCATsSimple.readNewOrSavedVoiceMailRecord(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:voiceMailPosition:newRecordsCount:savedRecordsCount:isLeadingSavedVoiceMailPostPrompt:isNewVoicemail:)()
{
  uint64_t v5 = v1[2];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v7 = OUTLINED_FUNCTION_8_2(v6, 464LL);
  char v8 = (__n128 *)OUTLINED_FUNCTION_248_1(v7);
  uint64_t v9 = OUTLINED_FUNCTION_12_55(v8, (__n128)xmmword_32CC10);
  if (v5)
  {
    uint64_t v9 = type metadata accessor for PhoneCallRecord(v9);
  }

  else
  {
    v3[7] = 0LL;
    v3[8] = 0LL;
  }

  uint64_t v10 = OUTLINED_FUNCTION_27_42(v9);
  if (v0)
  {
    type metadata accessor for PhoneSearchCallHistoryIntent(v10);
  }

  else
  {
    v3[13] = 0LL;
    v3[14] = 0LL;
  }

  OUTLINED_FUNCTION_100_6();
  OUTLINED_FUNCTION_89_8(v11);
  OUTLINED_FUNCTION_176_2();
  OUTLINED_FUNCTION_94_8();
  OUTLINED_FUNCTION_133_5();
  OUTLINED_FUNCTION_176_1(&demangling cache variable for type metadata for SpeakableString?, v12);
  uint64_t v13 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_113_6(v13);
  if (v14)
  {
    OUTLINED_FUNCTION_59();
    uint64_t v15 = OUTLINED_FUNCTION_95_1();
    OUTLINED_FUNCTION_35_10(v15, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    v3[33] = v2;
    uint64_t v16 = OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_204_0((uint64_t)v16);
    OUTLINED_FUNCTION_59();
    OUTLINED_FUNCTION_95_1();
  }

  OUTLINED_FUNCTION_23_42();
  if ((v17 & 1) != 0) {
    OUTLINED_FUNCTION_136_4();
  }
  else {
    uint64_t v18 = v1[5];
  }
  OUTLINED_FUNCTION_90_9(v18);
  OUTLINED_FUNCTION_141_4((uint64_t)"savedRecordsCount");
  if ((v19 & 1) != 0) {
    OUTLINED_FUNCTION_181();
  }
  else {
    uint64_t v20 = &type metadata for Double;
  }
  OUTLINED_FUNCTION_200_2((uint64_t)v20);
  OUTLINED_FUNCTION_93_6((uint64_t)"isLeadingSavedVoiceMailPostPrompt");
  uint64_t v21 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  v1[10] = v21;
  *uint64_t v21 = v1;
  v21[1] = SearchCallHistoryCATs.intentHandledResponse(callRecordCount:totalCallRecordCount:device:intent:isFirstPartyApp:appName:);
  uint64_t v22 = OUTLINED_FUNCTION_69_13(v4 + 30);
  return OUTLINED_FUNCTION_32_16(v22, v23, v24, v25);
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ReadNewOrSavedVoiceMailRecordDialogIds_optional __swiftcall SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds.init(rawValue:);
  StartCallCATsSimple.ErrorWithCodeCallInProgressDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ReadNewOrSavedVoiceMailRecordDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ReadNewOrSavedVoiceMailRecordDialogIds_optional *a2@<X8>)
{
  result.value = SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SearchCallHistoryCATsSimple.readNewOrSavedVoiceMailRecordAsLabels(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:voiceMailPosition:newRecordsCount:savedRecordsCount:isLeadingSavedVoiceMailPostPrompt:isNewVoicemail:)( uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9, unsigned __int8 a10, unsigned __int8 a11)
{
  *(_WORD *)(v11 + 100) = __PAIR16__(a11, a10);
  OUTLINED_FUNCTION_121(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v11 + 64) = OUTLINED_FUNCTION_12_0(v12);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_33_37(v13, v14, v15);
}

uint64_t SearchCallHistoryCATsSimple.readNewOrSavedVoiceMailRecordAsLabels(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:voiceMailPosition:newRecordsCount:savedRecordsCount:isLeadingSavedVoiceMailPostPrompt:isNewVoicemail:)()
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_8_2(v5, 464LL);
  uint64_t v7 = (__n128 *)OUTLINED_FUNCTION_248_1(v6);
  uint64_t v8 = OUTLINED_FUNCTION_12_55(v7, (__n128)xmmword_32CC10);
  if (v4)
  {
    uint64_t v8 = type metadata accessor for PhoneCallRecord(v8);
  }

  else
  {
    v3[7] = 0LL;
    v3[8] = 0LL;
  }

  uint64_t v9 = OUTLINED_FUNCTION_27_42(v8);
  if (v0)
  {
    type metadata accessor for PhoneSearchCallHistoryIntent(v9);
  }

  else
  {
    v3[13] = 0LL;
    v3[14] = 0LL;
  }

  OUTLINED_FUNCTION_100_6();
  OUTLINED_FUNCTION_89_8(v10);
  OUTLINED_FUNCTION_176_2();
  OUTLINED_FUNCTION_94_8();
  OUTLINED_FUNCTION_133_5();
  OUTLINED_FUNCTION_176_1(&demangling cache variable for type metadata for SpeakableString?, v11);
  uint64_t v12 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_113_6(v12);
  if (v13)
  {
    OUTLINED_FUNCTION_59();
    uint64_t v14 = OUTLINED_FUNCTION_95_1();
    OUTLINED_FUNCTION_35_10(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    v3[33] = v2;
    uint64_t v15 = OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_204_0((uint64_t)v15);
    OUTLINED_FUNCTION_59();
    OUTLINED_FUNCTION_95_1();
  }

  OUTLINED_FUNCTION_23_42();
  if ((v16 & 1) != 0) {
    OUTLINED_FUNCTION_136_4();
  }
  else {
    uint64_t v17 = *(void *)(v1 + 40);
  }
  OUTLINED_FUNCTION_90_9(v17);
  OUTLINED_FUNCTION_141_4((uint64_t)"savedRecordsCount");
  if ((v18 & 1) != 0) {
    OUTLINED_FUNCTION_181();
  }
  else {
    char v19 = &type metadata for Double;
  }
  OUTLINED_FUNCTION_200_2((uint64_t)v19);
  OUTLINED_FUNCTION_93_6((uint64_t)"isLeadingSavedVoiceMailPostPrompt");
  uint64_t v20 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_149_5(v20);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SearchCallHistoryCATs.readNewVoiceMailRecord(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:voiceMailPosition:newRecordsCount:savedRecordsCount:);
  OUTLINED_FUNCTION_38_2();
  OUTLINED_FUNCTION_111_7();
  return OUTLINED_FUNCTION_36_24(v21, v22, v23, v24, v25, v26);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.readNewVoiceMailRecord(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:voiceMailPosition:newRecordsCount:savedRecordsCount:)( uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v9 + 64) = OUTLINED_FUNCTION_12_0(v10);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_33_37(v11, v12, v13);
}

uint64_t SearchCallHistoryCATsSimple.readNewVoiceMailRecord(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:voiceMailPosition:newRecordsCount:savedRecordsCount:)()
{
  uint64_t v5 = v1[2];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v7 = OUTLINED_FUNCTION_8_2(v6, 368LL);
  uint64_t v8 = (__n128 *)OUTLINED_FUNCTION_248_1(v7);
  uint64_t v9 = OUTLINED_FUNCTION_12_55(v8, (__n128)xmmword_32A100);
  if (v5)
  {
    uint64_t v9 = type metadata accessor for PhoneCallRecord(v9);
  }

  else
  {
    *(void *)(v3 + 56) = 0LL;
    *(void *)(v3 + 64) = 0LL;
  }

  uint64_t v10 = OUTLINED_FUNCTION_27_42(v9);
  if (v0)
  {
    type metadata accessor for PhoneSearchCallHistoryIntent(v10);
  }

  else
  {
    *(void *)(v3 + 104) = 0LL;
    *(void *)(v3 + 112) = 0LL;
  }

  OUTLINED_FUNCTION_100_6();
  OUTLINED_FUNCTION_89_8(v11);
  *(_BYTE *)(v3 + 144) = v12;
  *(void *)(v3 + 168) = &type metadata for Bool;
  *(void *)(v3 + 176) = v4 + 1;
  OUTLINED_FUNCTION_226_1();
  OUTLINED_FUNCTION_133_5();
  OUTLINED_FUNCTION_176_1(&demangling cache variable for type metadata for SpeakableString?, v13);
  uint64_t v14 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_113_6(v14);
  if (v15)
  {
    OUTLINED_FUNCTION_59();
    uint64_t v16 = OUTLINED_FUNCTION_95_1();
    OUTLINED_FUNCTION_35_10(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    *(void *)(v3 + 264) = v2;
    uint64_t v17 = OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_204_0((uint64_t)v17);
    OUTLINED_FUNCTION_59();
    OUTLINED_FUNCTION_95_1();
  }

  OUTLINED_FUNCTION_23_42();
  if ((v18 & 1) != 0) {
    OUTLINED_FUNCTION_136_4();
  }
  else {
    uint64_t v19 = v1[5];
  }
  OUTLINED_FUNCTION_90_9(v19);
  OUTLINED_FUNCTION_141_4((uint64_t)"savedRecordsCount");
  if ((v20 & 1) != 0)
  {
    uint64_t v22 = 0LL;
    uint64_t v21 = 0LL;
    *(void *)(v3 + 344) = 0LL;
    *(void *)(v3 + 352) = 0LL;
  }

  else
  {
    uint64_t v21 = v1[6];
    uint64_t v22 = &type metadata for Double;
  }

  *(void *)(v3 + 360) = v22;
  *(void *)(v3 + 336) = v21;
  uint64_t v23 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  v1[10] = v23;
  *uint64_t v23 = v1;
  v23[1] = SearchCallHistoryCATs.readNewVoiceMailRecord(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:voiceMailPosition:newRecordsCount:savedRecordsCount:);
  uint64_t v24 = OUTLINED_FUNCTION_69_13(v4 + 23);
  return OUTLINED_FUNCTION_32_16(v24, v25, v26, v27);
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ReadNewVoiceMailRecordDialogIds_optional __swiftcall SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ErrorRestrictedDeviceByRegionDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ReadNewVoiceMailRecordDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ReadNewVoiceMailRecordDialogIds_optional *a2@<X8>)
{
  result.value = SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SearchCallHistoryCATsSimple.readNewVoiceMailRecordAsLabels(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:voiceMailPosition:newRecordsCount:savedRecordsCount:)( uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v9 + 64) = OUTLINED_FUNCTION_12_0(v10);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_33_37(v11, v12, v13);
}

uint64_t SearchCallHistoryCATsSimple.readNewVoiceMailRecordAsLabels(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:voiceMailPosition:newRecordsCount:savedRecordsCount:)()
{
  uint64_t v5 = v1[2];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v7 = OUTLINED_FUNCTION_8_2(v6, 368LL);
  uint64_t v8 = (__n128 *)OUTLINED_FUNCTION_248_1(v7);
  uint64_t v9 = OUTLINED_FUNCTION_12_55(v8, (__n128)xmmword_32A100);
  if (v5)
  {
    uint64_t v9 = type metadata accessor for PhoneCallRecord(v9);
  }

  else
  {
    *(void *)(v3 + 56) = 0LL;
    *(void *)(v3 + 64) = 0LL;
  }

  uint64_t v10 = OUTLINED_FUNCTION_27_42(v9);
  if (v0)
  {
    type metadata accessor for PhoneSearchCallHistoryIntent(v10);
  }

  else
  {
    *(void *)(v3 + 104) = 0LL;
    *(void *)(v3 + 112) = 0LL;
  }

  OUTLINED_FUNCTION_100_6();
  OUTLINED_FUNCTION_89_8(v11);
  *(_BYTE *)(v3 + 144) = v12;
  *(void *)(v3 + 168) = &type metadata for Bool;
  *(void *)(v3 + 176) = v4 + 1;
  OUTLINED_FUNCTION_226_1();
  OUTLINED_FUNCTION_133_5();
  OUTLINED_FUNCTION_176_1(&demangling cache variable for type metadata for SpeakableString?, v13);
  uint64_t v14 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_113_6(v14);
  if (v15)
  {
    OUTLINED_FUNCTION_59();
    uint64_t v16 = OUTLINED_FUNCTION_95_1();
    OUTLINED_FUNCTION_35_10(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    *(void *)(v3 + 264) = v2;
    uint64_t v17 = OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_204_0((uint64_t)v17);
    OUTLINED_FUNCTION_59();
    OUTLINED_FUNCTION_95_1();
  }

  OUTLINED_FUNCTION_23_42();
  if ((v18 & 1) != 0) {
    OUTLINED_FUNCTION_136_4();
  }
  else {
    uint64_t v19 = v1[5];
  }
  OUTLINED_FUNCTION_90_9(v19);
  OUTLINED_FUNCTION_141_4((uint64_t)"savedRecordsCount");
  if ((v20 & 1) != 0)
  {
    uint64_t v22 = 0LL;
    uint64_t v21 = 0LL;
    *(void *)(v3 + 344) = 0LL;
    *(void *)(v3 + 352) = 0LL;
  }

  else
  {
    uint64_t v21 = v1[6];
    uint64_t v22 = &type metadata for Double;
  }

  *(void *)(v3 + 360) = v22;
  *(void *)(v3 + 336) = v21;
  uint64_t v23 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_149_5(v23);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SearchCallHistoryCATs.readNewVoiceMailRecord(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:voiceMailPosition:newRecordsCount:savedRecordsCount:);
  OUTLINED_FUNCTION_38_2();
  OUTLINED_FUNCTION_111_7();
  return OUTLINED_FUNCTION_36_24(v24, v25, v26, v27, v28, v29);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.readPlayVoiceMailPrePrompt()()
{
  Swift::OpaquePointer v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *Swift::OpaquePointer v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(44LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

void SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.readPlayVoiceMailPrePromptAsLabels()()
{
  uint64_t v2 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_27_4(v2);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds and conformance SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v3 = OUTLINED_FUNCTION_26_33(44LL);
  return OUTLINED_FUNCTION_1_4(v3, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds and conformance SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds and conformance SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds and conformance SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds and conformance SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds and conformance SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds and conformance SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds and conformance SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.readSavedVoiceMailRecord(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:voiceMailPosition:newRecordsCount:savedRecordsCount:isLeadingSavedVoiceMailPostPrompt:)( uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9, char a10)
{
  *(_BYTE *)(v10 + 100) = a10;
  OUTLINED_FUNCTION_121(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v10 + 64) = OUTLINED_FUNCTION_12_0(v11);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_33_37(v12, v13, v14);
}

uint64_t SearchCallHistoryCATsSimple.readSavedVoiceMailRecord(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:voiceMailPosition:newRecordsCount:savedRecordsCount:isLeadingSavedVoiceMailPostPrompt:)()
{
  uint64_t v5 = v1[2];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v7 = OUTLINED_FUNCTION_8_2(v6, 416LL);
  uint64_t v8 = (__n128 *)OUTLINED_FUNCTION_248_1(v7);
  uint64_t v9 = OUTLINED_FUNCTION_12_55(v8, (__n128)xmmword_323F90);
  if (v5)
  {
    uint64_t v9 = type metadata accessor for PhoneCallRecord(v9);
  }

  else
  {
    v3[7] = 0LL;
    v3[8] = 0LL;
  }

  uint64_t v10 = OUTLINED_FUNCTION_27_42(v9);
  if (v0)
  {
    type metadata accessor for PhoneSearchCallHistoryIntent(v10);
  }

  else
  {
    v3[13] = 0LL;
    v3[14] = 0LL;
  }

  OUTLINED_FUNCTION_100_6();
  OUTLINED_FUNCTION_89_8(v11);
  OUTLINED_FUNCTION_176_2();
  OUTLINED_FUNCTION_94_8();
  OUTLINED_FUNCTION_133_5();
  OUTLINED_FUNCTION_176_1(&demangling cache variable for type metadata for SpeakableString?, v12);
  uint64_t v13 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_113_6(v13);
  if (v14)
  {
    OUTLINED_FUNCTION_59();
    uint64_t v15 = OUTLINED_FUNCTION_95_1();
    OUTLINED_FUNCTION_35_10(v15, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    v3[33] = v2;
    uint64_t v16 = OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_204_0((uint64_t)v16);
    OUTLINED_FUNCTION_59();
    OUTLINED_FUNCTION_95_1();
  }

  OUTLINED_FUNCTION_23_42();
  if ((v17 & 1) != 0) {
    OUTLINED_FUNCTION_136_4();
  }
  else {
    uint64_t v18 = v1[5];
  }
  OUTLINED_FUNCTION_90_9(v18);
  OUTLINED_FUNCTION_141_4((uint64_t)"savedRecordsCount");
  if ((v19 & 1) != 0) {
    OUTLINED_FUNCTION_181();
  }
  else {
    char v20 = &type metadata for Double;
  }
  OUTLINED_FUNCTION_200_2((uint64_t)v20);
  OUTLINED_FUNCTION_272_1((uint64_t)"isLeadingSavedVoiceMailPostPrompt");
  uint64_t v21 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  v1[10] = v21;
  *uint64_t v21 = v1;
  v21[1] = SearchCallHistoryCATs.intentHandledResponse(callRecordCount:totalCallRecordCount:device:intent:isFirstPartyApp:appName:);
  uint64_t v22 = OUTLINED_FUNCTION_69_13(v4 + 25);
  return OUTLINED_FUNCTION_32_16(v22, v23, v24, v25);
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ReadSavedVoiceMailRecordDialogIds_optional __swiftcall SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ErrorRestrictedDeviceByRegionDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ReadSavedVoiceMailRecordDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ReadSavedVoiceMailRecordDialogIds_optional *a2@<X8>)
{
  result.value = SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SearchCallHistoryCATsSimple.readSavedVoiceMailRecordAsLabels(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:voiceMailPosition:newRecordsCount:savedRecordsCount:isLeadingSavedVoiceMailPostPrompt:)( uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9, char a10)
{
  *(_BYTE *)(v10 + 100) = a10;
  OUTLINED_FUNCTION_121(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v10 + 64) = OUTLINED_FUNCTION_12_0(v11);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_33_37(v12, v13, v14);
}

uint64_t SearchCallHistoryCATsSimple.readSavedVoiceMailRecordAsLabels(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:voiceMailPosition:newRecordsCount:savedRecordsCount:isLeadingSavedVoiceMailPostPrompt:)()
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_8_2(v5, 416LL);
  uint64_t v7 = (__n128 *)OUTLINED_FUNCTION_248_1(v6);
  uint64_t v8 = OUTLINED_FUNCTION_12_55(v7, (__n128)xmmword_323F90);
  if (v4)
  {
    uint64_t v8 = type metadata accessor for PhoneCallRecord(v8);
  }

  else
  {
    v3[7] = 0LL;
    v3[8] = 0LL;
  }

  uint64_t v9 = OUTLINED_FUNCTION_27_42(v8);
  if (v0)
  {
    type metadata accessor for PhoneSearchCallHistoryIntent(v9);
  }

  else
  {
    v3[13] = 0LL;
    v3[14] = 0LL;
  }

  OUTLINED_FUNCTION_100_6();
  OUTLINED_FUNCTION_89_8(v10);
  OUTLINED_FUNCTION_176_2();
  OUTLINED_FUNCTION_94_8();
  OUTLINED_FUNCTION_133_5();
  OUTLINED_FUNCTION_176_1(&demangling cache variable for type metadata for SpeakableString?, v11);
  uint64_t v12 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_113_6(v12);
  if (v13)
  {
    OUTLINED_FUNCTION_59();
    uint64_t v14 = OUTLINED_FUNCTION_95_1();
    OUTLINED_FUNCTION_35_10(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    v3[33] = v2;
    uint64_t v15 = OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_204_0((uint64_t)v15);
    OUTLINED_FUNCTION_59();
    OUTLINED_FUNCTION_95_1();
  }

  OUTLINED_FUNCTION_23_42();
  if ((v16 & 1) != 0) {
    OUTLINED_FUNCTION_136_4();
  }
  else {
    uint64_t v17 = *(void *)(v1 + 40);
  }
  OUTLINED_FUNCTION_90_9(v17);
  OUTLINED_FUNCTION_141_4((uint64_t)"savedRecordsCount");
  if ((v18 & 1) != 0) {
    OUTLINED_FUNCTION_181();
  }
  else {
    char v19 = &type metadata for Double;
  }
  OUTLINED_FUNCTION_200_2((uint64_t)v19);
  OUTLINED_FUNCTION_272_1((uint64_t)"isLeadingSavedVoiceMailPostPrompt");
  uint64_t v20 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_149_5(v20);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SearchCallHistoryCATs.readNewVoiceMailRecord(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:voiceMailPosition:newRecordsCount:savedRecordsCount:);
  OUTLINED_FUNCTION_38_2();
  OUTLINED_FUNCTION_111_7();
  return OUTLINED_FUNCTION_36_24(v21, v22, v23, v24, v25, v26);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.readSearchCallHistoryIntroduction(callRecordCount:totalCallRecordCount:intent:isFirstPartyApp:appName:)( uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v7 + 56) = OUTLINED_FUNCTION_12_0(v8);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t SearchCallHistoryCATsSimple.readSearchCallHistoryIntroduction(callRecordCount:totalCallRecordCount:intent:isFirstPartyApp:appName:)()
{
  uint64_t v3 = *(unsigned __int8 *)(v1 + 88);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_8_2(v4, 272LL);
  *(void *)(v1 + 64) = v5;
  OUTLINED_FUNCTION_3_78(v5, (__n128)xmmword_323F80);
  if ((v3 & 1) != 0)
  {
    uint64_t v6 = 0LL;
    v5[3].n128_u64[1] = 0LL;
    v5[4].n128_u64[0] = 0LL;
  }

  else
  {
    uint64_t v6 = *(void *)(v1 + 16);
  }

  OUTLINED_FUNCTION_178_2(v6);
  v5[5].n128_u64[1] = 0x800000000034C6A0LL;
  if ((v7 & 1) != 0)
  {
    uint64_t v8 = 0LL;
    v5[6].n128_u64[1] = 0LL;
    v5[7].n128_u64[0] = 0LL;
  }

  else
  {
    uint64_t v8 = &type metadata for Double;
  }

  uint64_t v9 = OUTLINED_FUNCTION_107_8((uint64_t)v8);
  if (v3)
  {
    uint64_t v9 = type metadata accessor for PhoneSearchCallHistoryIntent(v9);
  }

  else
  {
    v5[9].n128_u64[1] = 0LL;
    v5[10].n128_u64[0] = 0LL;
  }

  OUTLINED_FUNCTION_77_12(v9);
  OUTLINED_FUNCTION_151_1();
  OUTLINED_FUNCTION_70_11(&demangling cache variable for type metadata for SpeakableString?, v10);
  uint64_t v11 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_146_4(v11);
  if (v12)
  {
    uint64_t v13 = OUTLINED_FUNCTION_95();
    OUTLINED_FUNCTION_41_1(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    v5[16].n128_u64[1] = v0;
    uint64_t v14 = OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_11_11((uint64_t)v14);
    OUTLINED_FUNCTION_95();
  }

  uint64_t v15 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 72) = v15;
  *uint64_t v15 = v1;
  v15[1] = StartCallCATsSimple.intentHandledResponse(intent:redactedContacts:device:appName:isFirstPartyApp:isWalkieTalkie:shouldPrintDialogOnDisplayMode:);
  uint64_t v16 = OUTLINED_FUNCTION_21_19(v2 + 31);
  return v18(v16);
}

void SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds.init(rawValue:)( Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.readSearchCallHistoryIntroductionAsLabels(callRecordCount:totalCallRecordCount:intent:isFirstPartyApp:appName:)( uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v7 + 56) = OUTLINED_FUNCTION_12_0(v8);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t SearchCallHistoryCATsSimple.readSearchCallHistoryIntroductionAsLabels(callRecordCount:totalCallRecordCount:intent:isFirstPartyApp:appName:)()
{
  uint64_t v2 = *(unsigned __int8 *)(v1 + 88);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_8_2(v3, 272LL);
  *(void *)(v1 + 64) = v4;
  OUTLINED_FUNCTION_3_78(v4, (__n128)xmmword_323F80);
  if ((v2 & 1) != 0)
  {
    uint64_t v5 = 0LL;
    v4[3].n128_u64[1] = 0LL;
    v4[4].n128_u64[0] = 0LL;
  }

  else
  {
    uint64_t v5 = *(void *)(v1 + 16);
  }

  OUTLINED_FUNCTION_178_2(v5);
  v4[5].n128_u64[1] = 0x800000000034C6A0LL;
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = 0LL;
    v4[6].n128_u64[1] = 0LL;
    v4[7].n128_u64[0] = 0LL;
  }

  else
  {
    uint64_t v7 = &type metadata for Double;
  }

  uint64_t v8 = OUTLINED_FUNCTION_107_8((uint64_t)v7);
  if (v2)
  {
    uint64_t v8 = type metadata accessor for PhoneSearchCallHistoryIntent(v8);
  }

  else
  {
    v4[9].n128_u64[1] = 0LL;
    v4[10].n128_u64[0] = 0LL;
  }

  OUTLINED_FUNCTION_77_12(v8);
  OUTLINED_FUNCTION_151_1();
  OUTLINED_FUNCTION_70_11(&demangling cache variable for type metadata for SpeakableString?, v9);
  uint64_t v10 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_146_4(v10);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_95();
    OUTLINED_FUNCTION_41_1(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    v4[16].n128_u64[1] = v0;
    uint64_t v13 = OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_11_11((uint64_t)v13);
    OUTLINED_FUNCTION_95();
  }

  uint64_t v14 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  *(void *)(v1 + 72) = v14;
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds();
  *uint64_t v14 = v1;
  v14[1] = StartCallCATsSimple.intentHandledResponseAsLabels(intent:redactedContacts:device:appName:isFirstPartyApp:isWalkieTalkie:shouldPrintDialogOnDisplayMode:);
  OUTLINED_FUNCTION_38_2();
  return v16();
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.readSingleCallRecord(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:)( uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(void *)(v5 + 24) = a2;
  *(void *)(v5 + 32) = v4;
  *(_BYTE *)(v5 + 65) = a4;
  *(_BYTE *)(v5 + 64) = a3;
  *(void *)(v5 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.readSingleCallRecord(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:));
}

uint64_t SearchCallHistoryCATsSimple.readSingleCallRecord(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:)()
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_8_2(v5, 224LL);
  uint64_t v7 = (__n128 *)OUTLINED_FUNCTION_25_11(v6);
  OUTLINED_FUNCTION_6_62(v7, (__n128)xmmword_31F580);
  if (v4)
  {
    uint64_t v8 = OUTLINED_FUNCTION_17_38();
    uint64_t v9 = v4;
  }

  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_32_23();
  }

  uint64_t v10 = OUTLINED_FUNCTION_48_16(v8, v9);
  if (v0)
  {
    uint64_t v10 = type metadata accessor for PhoneSearchCallHistoryIntent(v10);
  }

  else
  {
    *(void *)(v2 + 104) = 0LL;
    *(void *)(v2 + 112) = 0LL;
  }

  OUTLINED_FUNCTION_59_14(v10);
  OUTLINED_FUNCTION_199_2();
  OUTLINED_FUNCTION_284();
  OUTLINED_FUNCTION_116_0(v11);
  OUTLINED_FUNCTION_6_55();
  OUTLINED_FUNCTION_25_1();
  uint64_t v12 = (void *)OUTLINED_FUNCTION_65_10();
  *(void *)(v1 + 48) = v12;
  OUTLINED_FUNCTION_53_7( v12,  (uint64_t)AddCallParticipantCATsSimple.errorParticipantAlreadyActiveAsLabels(participant:shouldIncludeHandleLabel:currentCall:));
  uint64_t v13 = OUTLINED_FUNCTION_40(v3 + 20);
  return OUTLINED_FUNCTION_25_5(v13, v14, v15, v16);
}

void SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.readSingleCallRecordAsLabels(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:)( uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(void *)(v5 + 24) = a2;
  *(void *)(v5 + 32) = v4;
  *(_BYTE *)(v5 + 65) = a4;
  *(_BYTE *)(v5 + 64) = a3;
  *(void *)(v5 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.readSingleCallRecordAsLabels(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:));
}

uint64_t SearchCallHistoryCATsSimple.readSingleCallRecordAsLabels(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:)()
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_8_2(v4, 224LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_25_11(v5);
  OUTLINED_FUNCTION_6_62(v6, (__n128)xmmword_31F580);
  if (v3)
  {
    uint64_t v7 = OUTLINED_FUNCTION_17_38();
    uint64_t v8 = v3;
  }

  else
  {
    uint64_t v7 = OUTLINED_FUNCTION_32_23();
  }

  uint64_t v9 = OUTLINED_FUNCTION_48_16(v7, v8);
  if (v0)
  {
    uint64_t v9 = type metadata accessor for PhoneSearchCallHistoryIntent(v9);
  }

  else
  {
    *(void *)(v2 + 104) = 0LL;
    *(void *)(v2 + 112) = 0LL;
  }

  OUTLINED_FUNCTION_59_14(v9);
  OUTLINED_FUNCTION_199_2();
  OUTLINED_FUNCTION_284();
  OUTLINED_FUNCTION_116_0(v10);
  OUTLINED_FUNCTION_6_55();
  OUTLINED_FUNCTION_25_1();
  *(void *)(v1 + 48) = OUTLINED_FUNCTION_65_10();
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds();
  OUTLINED_FUNCTION_113((uint64_t)AddCallParticipantCATsSimple.errorParticipantAlreadyActive(participant:shouldIncludeHandleLabel:currentCall:));
  OUTLINED_FUNCTION_38_2();
  OUTLINED_FUNCTION_26_6();
  return OUTLINED_FUNCTION_8_13(v11, v12, v13, v14, v15, v16);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.readSingleVoiceMailRecord(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:)( uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(void *)(v5 + 24) = a2;
  *(void *)(v5 + 32) = v4;
  *(_BYTE *)(v5 + 65) = a4;
  *(_BYTE *)(v5 + 64) = a3;
  *(void *)(v5 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.readSingleVoiceMailRecord(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:));
}

uint64_t SearchCallHistoryCATsSimple.readSingleVoiceMailRecord(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:)()
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_8_2(v5, 224LL);
  uint64_t v7 = (__n128 *)OUTLINED_FUNCTION_25_11(v6);
  OUTLINED_FUNCTION_6_62(v7, (__n128)xmmword_31F580);
  if (v4)
  {
    uint64_t v8 = OUTLINED_FUNCTION_17_38();
    uint64_t v9 = v4;
  }

  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_32_23();
  }

  uint64_t v10 = OUTLINED_FUNCTION_48_16(v8, v9);
  if (v0)
  {
    uint64_t v10 = type metadata accessor for PhoneSearchCallHistoryIntent(v10);
  }

  else
  {
    *(void *)(v2 + 104) = 0LL;
    *(void *)(v2 + 112) = 0LL;
  }

  OUTLINED_FUNCTION_59_14(v10);
  OUTLINED_FUNCTION_199_2();
  OUTLINED_FUNCTION_284();
  OUTLINED_FUNCTION_116_0(v11);
  OUTLINED_FUNCTION_6_55();
  OUTLINED_FUNCTION_25_1();
  uint64_t v12 = (void *)OUTLINED_FUNCTION_65_10();
  *(void *)(v1 + 48) = v12;
  OUTLINED_FUNCTION_53_7( v12,  (uint64_t)AddCallParticipantCATsSimple.errorParticipantAlreadyActiveAsLabels(participant:shouldIncludeHandleLabel:currentCall:));
  uint64_t v13 = OUTLINED_FUNCTION_40(v3 + 25);
  return OUTLINED_FUNCTION_25_5(v13, v14, v15, v16);
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ReadSingleVoiceMailRecordDialogIds_optional __swiftcall SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds.init(rawValue:);
  PhoneCallDisplayTextCATsSimple.ContactCompositionDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ReadSingleVoiceMailRecordDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ReadSingleVoiceMailRecordDialogIds_optional *a2@<X8>)
{
  result.value = SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_38();
  *uint64_t v0 = SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds.rawValue.getter(v1);
  v0[1] = 0xE700000000000000LL;
  OUTLINED_FUNCTION_2();
}

uint64_t SearchCallHistoryCATsSimple.readSingleVoiceMailRecordAsLabels(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:)( uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(void *)(v5 + 24) = a2;
  *(void *)(v5 + 32) = v4;
  *(_BYTE *)(v5 + 65) = a4;
  *(_BYTE *)(v5 + 64) = a3;
  *(void *)(v5 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.readSingleVoiceMailRecordAsLabels(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:));
}

uint64_t SearchCallHistoryCATsSimple.readSingleVoiceMailRecordAsLabels(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:)()
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_8_2(v4, 224LL);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_25_11(v5);
  OUTLINED_FUNCTION_6_62(v6, (__n128)xmmword_31F580);
  if (v3)
  {
    uint64_t v7 = OUTLINED_FUNCTION_17_38();
    uint64_t v8 = v3;
  }

  else
  {
    uint64_t v7 = OUTLINED_FUNCTION_32_23();
  }

  uint64_t v9 = OUTLINED_FUNCTION_48_16(v7, v8);
  if (v0)
  {
    uint64_t v9 = type metadata accessor for PhoneSearchCallHistoryIntent(v9);
  }

  else
  {
    *(void *)(v2 + 104) = 0LL;
    *(void *)(v2 + 112) = 0LL;
  }

  OUTLINED_FUNCTION_59_14(v9);
  OUTLINED_FUNCTION_199_2();
  OUTLINED_FUNCTION_284();
  OUTLINED_FUNCTION_116_0(v10);
  OUTLINED_FUNCTION_6_55();
  OUTLINED_FUNCTION_25_1();
  *(void *)(v1 + 48) = OUTLINED_FUNCTION_65_10();
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds();
  OUTLINED_FUNCTION_113((uint64_t)AddCallParticipantCATsSimple.errorParticipantAlreadyActiveAsLabels(participant:shouldIncludeHandleLabel:currentCall:));
  OUTLINED_FUNCTION_38_2();
  OUTLINED_FUNCTION_26_6();
  return OUTLINED_FUNCTION_8_13(v11, v12, v13, v14, v15, v16);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds and conformance SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.readVoiceMailHistoryIntroduction(newRecordsCount:savedRecordsCount:intent:)( uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.readVoiceMailHistoryIntroduction(newRecordsCount:savedRecordsCount:intent:));
}

uint64_t SearchCallHistoryCATsSimple.readVoiceMailHistoryIntroduction(newRecordsCount:savedRecordsCount:intent:)()
{
  char v3 = *(_BYTE *)(v1 + 72);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_8_2(v4, 176LL);
  uint64_t v6 = OUTLINED_FUNCTION_153_6(v5);
  *(_OWORD *)(v6 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_320080;
  OUTLINED_FUNCTION_16_39(v6, 0x726F63655277656ELL);
  if ((v3 & 1) != 0) {
    OUTLINED_FUNCTION_137_4();
  }
  else {
    uint64_t v7 = *(void *)(v1 + 16);
  }
  OUTLINED_FUNCTION_185_0(v7);
  OUTLINED_FUNCTION_78_12((uint64_t)"savedRecordsCount");
  if ((v8 & 1) != 0) {
    OUTLINED_FUNCTION_131_4();
  }
  else {
    uint64_t v9 = &type metadata for Double;
  }
  uint64_t v10 = OUTLINED_FUNCTION_26_39((uint64_t)v9);
  if (v0)
  {
    uint64_t v10 = type metadata accessor for PhoneSearchCallHistoryIntent(v10);
  }

  else
  {
    *(void *)(v2 + 152) = 0LL;
    *(void *)(v2 + 160) = 0LL;
  }

  OUTLINED_FUNCTION_202_2(v10);
  OUTLINED_FUNCTION_18_2();
  uint64_t v11 = (void *)OUTLINED_FUNCTION_46();
  *(void *)(v1 + 56) = v11;
  *uint64_t v11 = v1;
  v11[1] = SearchCallHistoryCATsSimple.intentHandledResponseMissedCall(callRecordCount:totalCallRecordCount:intent:);
  uint64_t v12 = OUTLINED_FUNCTION_40_16(50LL);
  return OUTLINED_FUNCTION_12_28(v12, v13, v14, v15);
}

void SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.readVoiceMailHistoryIntroductionAsLabels(newRecordsCount:savedRecordsCount:intent:)( uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.readVoiceMailHistoryIntroductionAsLabels(newRecordsCount:savedRecordsCount:intent:));
}

uint64_t SearchCallHistoryCATsSimple.readVoiceMailHistoryIntroductionAsLabels(newRecordsCount:savedRecordsCount:intent:)()
{
  char v3 = *(_BYTE *)(v1 + 72);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_8_2(v4, 176LL);
  uint64_t v6 = OUTLINED_FUNCTION_153_6(v5);
  *(_OWORD *)(v6 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_320080;
  OUTLINED_FUNCTION_16_39(v6, 0x726F63655277656ELL);
  if ((v3 & 1) != 0) {
    OUTLINED_FUNCTION_137_4();
  }
  else {
    uint64_t v7 = *(void *)(v1 + 16);
  }
  OUTLINED_FUNCTION_185_0(v7);
  OUTLINED_FUNCTION_78_12((uint64_t)"savedRecordsCount");
  if ((v8 & 1) != 0) {
    OUTLINED_FUNCTION_131_4();
  }
  else {
    uint64_t v9 = &type metadata for Double;
  }
  uint64_t v10 = OUTLINED_FUNCTION_26_39((uint64_t)v9);
  if (v0)
  {
    uint64_t v10 = type metadata accessor for PhoneSearchCallHistoryIntent(v10);
  }

  else
  {
    *(void *)(v2 + 152) = 0LL;
    *(void *)(v2 + 160) = 0LL;
  }

  OUTLINED_FUNCTION_202_2(v10);
  OUTLINED_FUNCTION_18_2();
  uint64_t v11 = OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_68_2(v11);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SearchCallHistoryCATsSimple.intentHandledResponseMissedCall(callRecordCount:totalCallRecordCount:intent:);
  OUTLINED_FUNCTION_38_2();
  OUTLINED_FUNCTION_155_3();
  return OUTLINED_FUNCTION_7_59(v12, v13, v14, v15, v16, v17);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds and conformance SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.repeatVoicemailPause()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(38LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

void SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

uint64_t SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds.rawValue.getter()
{
  return 0x6573756170LL;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds( void *a1@<X8>)
{
  *a1 = 0x6573756170LL;
  a1[1] = 0xE500000000000000LL;
}

uint64_t SearchCallHistoryCATsSimple.repeatVoicemailPauseAsLabels()()
{
  uint64_t v2 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_27_4(v2);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds and conformance SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v3 = OUTLINED_FUNCTION_26_33(38LL);
  return OUTLINED_FUNCTION_1_4(v3, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds and conformance SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds and conformance SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds and conformance SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds,  &type metadata for SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds and conformance SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds and conformance SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds and conformance SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds,  &type metadata for SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds and conformance SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.showCallHistoryIntro(callRecordCount:totalCallRecordCount:device:intent:isFirstPartyApp:appName:isShowingMissedCall:)( uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9)
{
  *(_BYTE *)(v9 + 99) = a9;
  OUTLINED_FUNCTION_211_0(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v9 + 64) = OUTLINED_FUNCTION_12_0(v10);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_33_37(v11, v12, v13);
}

uint64_t SearchCallHistoryCATsSimple.showCallHistoryIntro(callRecordCount:totalCallRecordCount:device:intent:isFirstPartyApp:appName:isShowingMissedCall:)()
{
  uint64_t v5 = *(unsigned __int8 *)(v1 + 96);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v7 = OUTLINED_FUNCTION_8_2(v6, 368LL);
  char v8 = (__n128 *)OUTLINED_FUNCTION_248_1(v7);
  OUTLINED_FUNCTION_3_78(v8, (__n128)xmmword_32A100);
  if ((v5 & 1) != 0)
  {
    uint64_t v9 = 0LL;
    v3[7] = 0LL;
    v3[8] = 0LL;
  }

  else
  {
    uint64_t v9 = &type metadata for Double;
  }

  OUTLINED_FUNCTION_151_3((uint64_t)v9);
  OUTLINED_FUNCTION_196_2((uint64_t)"totalCallRecordCount");
  if ((v10 & 1) != 0) {
    OUTLINED_FUNCTION_180_2();
  }
  else {
    uint64_t v11 = &type metadata for Double;
  }
  uint64_t v12 = OUTLINED_FUNCTION_47_18((uint64_t)v11);
  if (v0)
  {
    uint64_t v12 = type metadata accessor for SirikitDeviceState(v12);
  }

  else
  {
    v3[19] = 0LL;
    v3[20] = 0LL;
  }

  uint64_t v13 = OUTLINED_FUNCTION_46_21(v12);
  if (v5)
  {
    uint64_t v13 = type metadata accessor for PhoneSearchCallHistoryIntent(v13);
  }

  else
  {
    v3[25] = 0LL;
    v3[26] = 0LL;
  }

  OUTLINED_FUNCTION_28_39(v13);
  OUTLINED_FUNCTION_156();
  OUTLINED_FUNCTION_176_1(&demangling cache variable for type metadata for SpeakableString?, v14);
  uint64_t v15 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_205(v15);
  if (v16)
  {
    OUTLINED_FUNCTION_59();
    uint64_t v17 = OUTLINED_FUNCTION_95_1();
    OUTLINED_FUNCTION_35_10(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    v3[39] = v2;
    char v18 = OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_204_0((uint64_t)v18);
    OUTLINED_FUNCTION_59();
    OUTLINED_FUNCTION_95_1();
  }

  OUTLINED_FUNCTION_150_5((uint64_t)"isShowingMissedCall");
  char v19 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 80) = v19;
  *char v19 = v1;
  v19[1] = SearchCallHistoryCATs.readNewVoiceMailRecord(callRecord:intent:isSingleDateRequest:isTimeRangeRequest:voiceMailPosition:newRecordsCount:savedRecordsCount:);
  uint64_t v20 = OUTLINED_FUNCTION_69_13(v4 + 19);
  return OUTLINED_FUNCTION_32_16(v20, v21, v22, v23);
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ShowCallHistoryIntroDialogIds_optional __swiftcall SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ErrorRestrictedDeviceByRegionDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

unint64_t SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000013LL;
  }
  else {
    return 0xD000000000000011LL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ShowCallHistoryIntroDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::ShowCallHistoryIntroDialogIds_optional *a2@<X8>)
{
  result.value = SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds()
{
  char v1 = OUTLINED_FUNCTION_38();
  *uint64_t v0 = SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_2();
}

uint64_t SearchCallHistoryCATsSimple.showCallHistoryIntroAsLabels(callRecordCount:totalCallRecordCount:device:intent:isFirstPartyApp:appName:isShowingMissedCall:)( uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9)
{
  *(_BYTE *)(v9 + 99) = a9;
  OUTLINED_FUNCTION_211_0(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v9 + 64) = OUTLINED_FUNCTION_12_0(v10);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_33_37(v11, v12, v13);
}

uint64_t SearchCallHistoryCATsSimple.showCallHistoryIntroAsLabels(callRecordCount:totalCallRecordCount:device:intent:isFirstPartyApp:appName:isShowingMissedCall:)()
{
  uint64_t v4 = *(unsigned __int8 *)(v1 + 96);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_8_2(v5, 368LL);
  uint64_t v7 = (__n128 *)OUTLINED_FUNCTION_248_1(v6);
  OUTLINED_FUNCTION_3_78(v7, (__n128)xmmword_32A100);
  if ((v4 & 1) != 0)
  {
    char v8 = 0LL;
    v3[7] = 0LL;
    v3[8] = 0LL;
  }

  else
  {
    char v8 = &type metadata for Double;
  }

  OUTLINED_FUNCTION_151_3((uint64_t)v8);
  OUTLINED_FUNCTION_196_2((uint64_t)"totalCallRecordCount");
  if ((v9 & 1) != 0) {
    OUTLINED_FUNCTION_180_2();
  }
  else {
    uint64_t v10 = &type metadata for Double;
  }
  uint64_t v11 = OUTLINED_FUNCTION_47_18((uint64_t)v10);
  if (v0)
  {
    uint64_t v11 = type metadata accessor for SirikitDeviceState(v11);
  }

  else
  {
    v3[19] = 0LL;
    v3[20] = 0LL;
  }

  uint64_t v12 = OUTLINED_FUNCTION_46_21(v11);
  if (v4)
  {
    uint64_t v12 = type metadata accessor for PhoneSearchCallHistoryIntent(v12);
  }

  else
  {
    v3[25] = 0LL;
    v3[26] = 0LL;
  }

  OUTLINED_FUNCTION_28_39(v12);
  OUTLINED_FUNCTION_156();
  OUTLINED_FUNCTION_176_1(&demangling cache variable for type metadata for SpeakableString?, v13);
  uint64_t v14 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_205(v14);
  if (v15)
  {
    OUTLINED_FUNCTION_59();
    uint64_t v16 = OUTLINED_FUNCTION_95_1();
    OUTLINED_FUNCTION_35_10(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    v3[39] = v2;
    uint64_t v17 = OUTLINED_FUNCTION_51();
    OUTLINED_FUNCTION_204_0((uint64_t)v17);
    OUTLINED_FUNCTION_59();
    OUTLINED_FUNCTION_95_1();
  }

  OUTLINED_FUNCTION_150_5((uint64_t)"isShowingMissedCall");
  uint64_t v18 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_149_5(v18);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds and conformance SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SearchCallHistoryCATs.intentHandledResponse(callRecordCount:totalCallRecordCount:device:intent:isFirstPartyApp:appName:);
  OUTLINED_FUNCTION_38_2();
  OUTLINED_FUNCTION_111_7();
  return OUTLINED_FUNCTION_36_24(v19, v20, v21, v22, v23, v24);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds and conformance SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds and conformance SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds and conformance SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds and conformance SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds and conformance SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds and conformance SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds,  &type metadata for SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds and conformance SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.unsupportedCallTypes()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(38LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

void SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.unsupportedCallTypesAsLabels()()
{
  uint64_t v2 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_27_4(v2);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SuggestionsCATsSimple.phoneCall_StartGFTCall();
  OUTLINED_FUNCTION_38_2();
  unint64_t v3 = OUTLINED_FUNCTION_26_33(38LL);
  return OUTLINED_FUNCTION_1_4(v3, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds,  &type metadata for SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds,  &type metadata for SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.unsupportedDateCreated()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(40LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

void SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.unsupportedDateCreatedAsLabels()()
{
  uint64_t v2 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_27_4(v2);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v3 = OUTLINED_FUNCTION_26_33(40LL);
  return OUTLINED_FUNCTION_1_4(v3, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds,  &type metadata for SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds,  &type metadata for SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.unsupportedRecipient()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(38LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

void SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.unsupportedRecipientAsLabels()()
{
  uint64_t v2 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_27_4(v2);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v3 = OUTLINED_FUNCTION_26_33(38LL);
  return OUTLINED_FUNCTION_1_4(v3, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds,  &type metadata for SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds,  &type metadata for SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.unsupportedSearchParameters(isVoicemail:isMissed:isLatest:contactToConfirm:)( char a1, char a2, char a3, uint64_t a4)
{
  *(void *)(v5 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a4;
  *(void *)(v5 + 24) = v4;
  *(_BYTE *)(v5 + 58) = a3;
  *(_BYTE *)(v5 + 57) = a2;
  *(_BYTE *)(v5 + 56) = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.unsupportedSearchParameters(isVoicemail:isMissed:isLatest:contactToConfirm:));
}

uint64_t SearchCallHistoryCATsSimple.unsupportedSearchParameters(isVoicemail:isMissed:isLatest:contactToConfirm:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_8_2(v14, 224LL);
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_27(v15);
  uint64_t v17 = OUTLINED_FUNCTION_59_13(v16, (__n128)xmmword_31F580);
  uint64_t v18 = OUTLINED_FUNCTION_80_7((uint64_t)v17, (uint64_t)&type metadata for Bool);
  uint64_t v19 = OUTLINED_FUNCTION_319(v18, (uint64_t)"contactToConfirm");
  if (v10)
  {
    uint64_t v19 = type metadata accessor for DialogPerson(v19);
  }

  else
  {
    v12[25] = 0LL;
    v12[26] = 0LL;
  }

  v12[24] = v10;
  v12[27] = v19;
  OUTLINED_FUNCTION_6_55();
  uint64_t v20 = (void *)OUTLINED_FUNCTION_46();
  *(void *)(v11 + 40) = v20;
  OUTLINED_FUNCTION_30(v20, (uint64_t)SearchCallHistoryCATsSimple.buildCallRecordDetail(callRecord:));
  return OUTLINED_FUNCTION_25_5(v13 + 29, 0x8000000000344780LL, (uint64_t)v12, a10);
}

void SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.unsupportedSearchParametersAsLabels(isVoicemail:isMissed:isLatest:contactToConfirm:)( char a1, char a2, char a3, uint64_t a4)
{
  *(void *)(v5 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a4;
  *(void *)(v5 + 24) = v4;
  *(_BYTE *)(v5 + 58) = a3;
  *(_BYTE *)(v5 + 57) = a2;
  *(_BYTE *)(v5 + 56) = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.unsupportedSearchParametersAsLabels(isVoicemail:isMissed:isLatest:contactToConfirm:));
}

uint64_t SearchCallHistoryCATsSimple.unsupportedSearchParametersAsLabels(isVoicemail:isMissed:isLatest:contactToConfirm:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_8_2(v12, 224LL);
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_27(v13);
  uint64_t v15 = OUTLINED_FUNCTION_59_13(v14, (__n128)xmmword_31F580);
  uint64_t v16 = OUTLINED_FUNCTION_80_7((uint64_t)v15, (uint64_t)&type metadata for Bool);
  uint64_t v17 = OUTLINED_FUNCTION_319(v16, (uint64_t)"contactToConfirm");
  if (v10)
  {
    uint64_t v17 = type metadata accessor for DialogPerson(v17);
  }

  else
  {
    v11[25] = 0LL;
    v11[26] = 0LL;
  }

  v11[24] = v10;
  v11[27] = v17;
  OUTLINED_FUNCTION_6_55();
  uint64_t v18 = OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_52_13(v18);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds();
  OUTLINED_FUNCTION_34_4((uint64_t)SearchCallHistoryCATsSimple.buildCallRecordDetailAsLabels(callRecord:));
  OUTLINED_FUNCTION_38_2();
  return OUTLINED_FUNCTION_8_13( v19,  v20,  (uint64_t)v11,  (uint64_t)&type metadata for SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds,  v21,  a10);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds,  &type metadata for SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds,  &type metadata for SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.unsupportedUnseen(intent:)(uint64_t a1)
{
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.unsupportedUnseen(intent:));
}

uint64_t SearchCallHistoryCATsSimple.unsupportedUnseen(intent:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_8_2(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_27(v4);
  uint64_t v6 = OUTLINED_FUNCTION_77_10(v5, (__n128)xmmword_31D870);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for PhoneSearchCallHistoryIntent(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_36_18(v6);
  OUTLINED_FUNCTION_6_55();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_46();
  *(void *)(v0 + 40) = v7;
  OUTLINED_FUNCTION_30(v7, (uint64_t)SearchCallHistoryCATsSimple.buildCallRecordDetailAsLabels(callRecord:));
  OUTLINED_FUNCTION_27_3();
  unint64_t v8 = OUTLINED_FUNCTION_102(35LL);
  return OUTLINED_FUNCTION_12_28(v8, v9, v10, v11);
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::UnsupportedUnseenDialogIds_optional __swiftcall SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ErrorRestrictedDeviceByRegionDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::UnsupportedUnseenDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::UnsupportedUnseenDialogIds_optional *a2@<X8>)
{
  result.value = SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SearchCallHistoryCATsSimple.unsupportedUnseenAsLabels(intent:)(uint64_t a1)
{
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.unsupportedUnseenAsLabels(intent:));
}

uint64_t SearchCallHistoryCATsSimple.unsupportedUnseenAsLabels(intent:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_8_2(v3, 80LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_27(v4);
  uint64_t v6 = OUTLINED_FUNCTION_77_10(v5, (__n128)xmmword_31D870);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for PhoneSearchCallHistoryIntent(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_36_18(v6);
  OUTLINED_FUNCTION_6_55();
  uint64_t v7 = OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_52_13(v7);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds();
  OUTLINED_FUNCTION_34_4((uint64_t)SearchCallHistoryCATsSimple.buildCallRecordDetailAsLabels(callRecord:));
  OUTLINED_FUNCTION_38_2();
  unint64_t v8 = OUTLINED_FUNCTION_55_11(35LL);
  return OUTLINED_FUNCTION_7_59(v8, v9, v10, v11, v12, v13);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds,  &type metadata for SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds,  &type metadata for SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds and conformance SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.visualCatText()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(31LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::VisualCatTextDialogIds_optional __swiftcall SearchCallHistoryCATsSimple.VisualCatTextDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.VisualCatTextDialogIds.init(rawValue:);
  StartCallCATsSimple.ErrorWithCodeCallInProgressDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

uint64_t SearchCallHistoryCATsSimple.VisualCatTextDialogIds.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1D1D9C + 4 * byte_33225C[a1]))( 28494LL,  0xE200000000000000LL);
}

uint64_t sub_1D1D9C()
{
  return 0x73746E65636552LL;
}

uint64_t sub_1D1DB4()
{
  return 0x69616D6563696F56LL;
}

uint64_t sub_1D1DD8()
{
  return 7562585LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SearchCallHistoryCATsSimple.VisualCatTextDialogIds( char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance SearchCallHistoryCATsSimple.VisualCatTextDialogIds()
{
}

void protocol witness for Hashable.hash(into:) in conformance SearchCallHistoryCATsSimple.VisualCatTextDialogIds( uint64_t a1)
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SearchCallHistoryCATsSimple.VisualCatTextDialogIds( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::VisualCatTextDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.VisualCatTextDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::VisualCatTextDialogIds_optional *a2@<X8>)
{
  result.value = SearchCallHistoryCATsSimple.VisualCatTextDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SearchCallHistoryCATsSimple.VisualCatTextDialogIds()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_38();
  *uint64_t v0 = SearchCallHistoryCATsSimple.VisualCatTextDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_2();
}

uint64_t SearchCallHistoryCATsSimple.visualCatTextAsLabels()()
{
  uint64_t v2 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_27_4(v2);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.VisualCatTextDialogIds and conformance SearchCallHistoryCATsSimple.VisualCatTextDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v3 = OUTLINED_FUNCTION_26_33(31LL);
  return OUTLINED_FUNCTION_1_4(v3, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.VisualCatTextDialogIds and conformance SearchCallHistoryCATsSimple.VisualCatTextDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VisualCatTextDialogIds and conformance SearchCallHistoryCATsSimple.VisualCatTextDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VisualCatTextDialogIds and conformance SearchCallHistoryCATsSimple.VisualCatTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.VisualCatTextDialogIds,  &type metadata for SearchCallHistoryCATsSimple.VisualCatTextDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VisualCatTextDialogIds and conformance SearchCallHistoryCATsSimple.VisualCatTextDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VisualCatTextDialogIds and conformance SearchCallHistoryCATsSimple.VisualCatTextDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VisualCatTextDialogIds and conformance SearchCallHistoryCATsSimple.VisualCatTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.VisualCatTextDialogIds,  &type metadata for SearchCallHistoryCATsSimple.VisualCatTextDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VisualCatTextDialogIds and conformance SearchCallHistoryCATsSimple.VisualCatTextDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.voiceMailOfferToContinueReading(isLastPage:isLeadingSavedVoiceMailPrePrompt:)( char a1, char a2)
{
  *(void *)(v3 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v2;
  *(_BYTE *)(v3 + 49) = a2;
  *(_BYTE *)(v3 + 48) = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.voiceMailOfferToContinueReading(isLastPage:isLeadingSavedVoiceMailPrePrompt:));
}

uint64_t SearchCallHistoryCATsSimple.voiceMailOfferToContinueReading(isLastPage:isLeadingSavedVoiceMailPrePrompt:)()
{
  char v1 = *(_BYTE *)(v0 + 48);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_8_2(v2, 128LL);
  *(void *)(v0 + 24) = v3;
  *(_OWORD *)(v3 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D880;
  uint64_t v4 = OUTLINED_FUNCTION_31_30(v3);
  *(_BYTE *)(v4 + 48) = v1;
  *(void *)(v4 + 72) = &type metadata for Bool;
  *(void *)(v4 + 80) = 0xD000000000000020LL;
  OUTLINED_FUNCTION_256(v4, (uint64_t)&type metadata for Bool);
  uint64_t v5 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 32) = v5;
  OUTLINED_FUNCTION_302(v5, (uint64_t)SearchCallHistoryCATs.offerToReadMoreCallRecords(isLastWindow:));
  uint64_t v6 = OUTLINED_FUNCTION_21_19(0xD000000000000031LL);
  return OUTLINED_FUNCTION_81_11(v6, v7, v3, v9);
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::VoiceMailOfferToContinueReadingDialogIds_optional __swiftcall SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds.init(rawValue:);
  PhoneCallDisplayTextCATsSimple.ContactCompositionDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::VoiceMailOfferToContinueReadingDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::VoiceMailOfferToContinueReadingDialogIds_optional *a2@<X8>)
{
  result.value = SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SearchCallHistoryCATsSimple.voiceMailOfferToContinueReadingAsLabels(isLastPage:isLeadingSavedVoiceMailPrePrompt:)( char a1, char a2)
{
  *(void *)(v3 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v2;
  *(_BYTE *)(v3 + 49) = a2;
  *(_BYTE *)(v3 + 48) = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.voiceMailOfferToContinueReadingAsLabels(isLastPage:isLeadingSavedVoiceMailPrePrompt:));
}

uint64_t SearchCallHistoryCATsSimple.voiceMailOfferToContinueReadingAsLabels(isLastPage:isLeadingSavedVoiceMailPrePrompt:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  char v11 = *(_BYTE *)(v10 + 48);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_8_2(v12, 128LL);
  *(void *)(v10 + 24) = v13;
  *(_OWORD *)(v13 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D880;
  uint64_t v14 = OUTLINED_FUNCTION_31_30(v13);
  *(_BYTE *)(v14 + 48) = v11;
  *(void *)(v14 + 72) = &type metadata for Bool;
  *(void *)(v14 + 80) = 0xD000000000000020LL;
  OUTLINED_FUNCTION_256(v14, (uint64_t)&type metadata for Bool);
  uint64_t v15 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_162(v15);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds();
  OUTLINED_FUNCTION_186_2((uint64_t)SearchCallHistoryCATs.offerToContinueReading(isLastPage:));
  OUTLINED_FUNCTION_38_2();
  return OUTLINED_FUNCTION_7_59( v16,  v17,  v13,  (uint64_t)&type metadata for SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds,  v18,  a10);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds,  &type metadata for SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds,  &type metadata for SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.voiceMailOfferToFollowUpAction(isLastPage:)(char a1)
{
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *(_BYTE *)(v2 + 48) = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.voiceMailOfferToFollowUpAction(isLastPage:));
}

uint64_t SearchCallHistoryCATsSimple.voiceMailOfferToFollowUpAction(isLastPage:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_8_2(v1, 80LL);
  uint64_t v3 = OUTLINED_FUNCTION_31_30(v2);
  *(void *)(v3 + 72) = &type metadata for Bool;
  uint64_t v5 = (void *)OUTLINED_FUNCTION_96_3( v3,  (uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:),  v4);
  *(void *)(v0 + 32) = v5;
  OUTLINED_FUNCTION_302(v5, (uint64_t)SearchCallHistoryCATs.offerToContinueReading(isLastPage:));
  OUTLINED_FUNCTION_27_3();
  unint64_t v6 = OUTLINED_FUNCTION_271_0(48LL);
  return OUTLINED_FUNCTION_81_11(v6, v7, v8, v9);
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::VoiceMailOfferToFollowUpActionDialogIds_optional __swiftcall SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ErrorRestrictedDeviceByRegionDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::VoiceMailOfferToFollowUpActionDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SearchCallHistoryCATsSimple::VoiceMailOfferToFollowUpActionDialogIds_optional *a2@<X8>)
{
  result.value = SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SearchCallHistoryCATsSimple.voiceMailOfferToFollowUpActionAsLabels(isLastPage:)(char a1)
{
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *(_BYTE *)(v2 + 48) = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.voiceMailOfferToFollowUpActionAsLabels(isLastPage:));
}

uint64_t SearchCallHistoryCATsSimple.voiceMailOfferToFollowUpActionAsLabels(isLastPage:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_8_2(v0, 80LL);
  uint64_t v2 = OUTLINED_FUNCTION_31_30(v1);
  *(void *)(v2 + 72) = &type metadata for Bool;
  uint64_t v4 = OUTLINED_FUNCTION_67_15( v2,  (uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:),  v3);
  OUTLINED_FUNCTION_162(v4);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds();
  OUTLINED_FUNCTION_186_2((uint64_t)SearchCallHistoryCATs.offerToContinueReading(isLastPage:));
  OUTLINED_FUNCTION_38_2();
  unint64_t v5 = OUTLINED_FUNCTION_174_4(48LL);
  return OUTLINED_FUNCTION_1_4(v5, v6, v7, v8, v9, v10);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds,  &type metadata for SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds,  &type metadata for SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.voiceMailPromptToPlay()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v2 = OUTLINED_FUNCTION_59_1(39LL);
  return OUTLINED_FUNCTION_4_2(v2, v3, v4, v5);
}

void SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.voiceMailPromptToPlayAsLabels()()
{
  uint64_t v2 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_27_4(v2);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds();
  *uint64_t v0 = v1;
  v0[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  OUTLINED_FUNCTION_38_2();
  unint64_t v3 = OUTLINED_FUNCTION_26_33(39LL);
  return OUTLINED_FUNCTION_1_4(v3, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds,  &type metadata for SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds,  &type metadata for SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds and conformance SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds);
  }

  return result;
}

uint64_t SearchCallHistoryCATsSimple.windowIntroForReadingMultipleRecords(isFirstWindow:isLastWindow:windowSize:)( char a1, char a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 58) = a4;
  *(void *)(v5 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a3;
  *(void *)(v5 + 24) = v4;
  *(_BYTE *)(v5 + 57) = a2;
  *(_BYTE *)(v5 + 56) = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.windowIntroForReadingMultipleRecords(isFirstWindow:isLastWindow:windowSize:));
}

uint64_t SearchCallHistoryCATsSimple.windowIntroForReadingMultipleRecords(isFirstWindow:isLastWindow:windowSize:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  char v12 = *(_BYTE *)(v11 + 58);
  char v13 = *(_BYTE *)(v11 + 57);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_8_2(v14, 176LL);
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_162(v15);
  uint64_t v17 = OUTLINED_FUNCTION_54_13(v16, (__n128)xmmword_320080);
  uint64_t v18 = OUTLINED_FUNCTION_96_5((uint64_t)v17, (uint64_t)&type metadata for Bool);
  *(_BYTE *)(v18 + 96) = v13;
  OUTLINED_FUNCTION_63_13((void *)v18, v19);
  if ((v12 & 1) != 0)
  {
    uint64_t v21 = 0LL;
    uint64_t v20 = 0LL;
    v10[19] = 0LL;
    v10[20] = 0LL;
  }

  else
  {
    uint64_t v20 = *(void *)(v11 + 16);
    uint64_t v21 = &type metadata for Double;
  }

  v10[21] = v21;
  v10[18] = v20;
  uint64_t v22 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v11 + 40) = v22;
  OUTLINED_FUNCTION_30(v22, (uint64_t)SearchCallHistoryCATsSimple.buildCallRecordDetailAsLabels(callRecord:));
  OUTLINED_FUNCTION_27_3();
  return OUTLINED_FUNCTION_12_28(0xD000000000000036LL, v23, (uint64_t)v10, a10);
}

void SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds.init(rawValue:)( Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds.init(rawValue:);
  AddCallParticipantCATsSimple.ConfirmParticipantDialogIds.init(rawValue:)(a1, v1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t SearchCallHistoryCATsSimple.windowIntroForReadingMultipleRecordsAsLabels(isFirstWindow:isLastWindow:windowSize:)( char a1, char a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 58) = a4;
  *(void *)(v5 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a3;
  *(void *)(v5 + 24) = v4;
  *(_BYTE *)(v5 + 57) = a2;
  *(_BYTE *)(v5 + 56) = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SearchCallHistoryCATsSimple.windowIntroForReadingMultipleRecordsAsLabels(isFirstWindow:isLastWindow:windowSize:));
}

uint64_t SearchCallHistoryCATsSimple.windowIntroForReadingMultipleRecordsAsLabels(isFirstWindow:isLastWindow:windowSize:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  char v11 = *(_BYTE *)(v10 + 58);
  char v12 = *(_BYTE *)(v10 + 57);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_8_2(v13, 176LL);
  *(void *)(v10 + 32) = v14;
  uint64_t v15 = OUTLINED_FUNCTION_54_13(v14, (__n128)xmmword_320080);
  uint64_t v16 = OUTLINED_FUNCTION_96_5((uint64_t)v15, (uint64_t)&type metadata for Bool);
  *(_BYTE *)(v16 + 96) = v12;
  OUTLINED_FUNCTION_63_13((void *)v16, v17);
  if ((v11 & 1) != 0)
  {
    uint64_t v19 = 0LL;
    unint64_t v18 = 0LL;
    v14[9].n128_u64[1] = 0LL;
    v14[10].n128_u64[0] = 0LL;
  }

  else
  {
    unint64_t v18 = *(void *)(v10 + 16);
    uint64_t v19 = &type metadata for Double;
  }

  v14[10].n128_u64[1] = (unint64_t)v19;
  v14[9].n128_u64[0] = v18;
  uint64_t v20 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_52_13(v20);
  lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds and conformance SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds();
  OUTLINED_FUNCTION_34_4((uint64_t)SearchCallHistoryCATsSimple.buildCallRecordDetailAsLabels(callRecord:));
  OUTLINED_FUNCTION_38_2();
  return OUTLINED_FUNCTION_7_59( 0xD000000000000036LL,  v21,  (uint64_t)v14,  (uint64_t)&type metadata for SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds,  v22,  a10);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds and conformance SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds and conformance SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds and conformance SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds,  &type metadata for SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds and conformance SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds and conformance SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds and conformance SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds,  &type metadata for SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds and conformance SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATsSimple.Properties and conformance SearchCallHistoryCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.Properties and conformance SearchCallHistoryCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.Properties and conformance SearchCallHistoryCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchCallHistoryCATsSimple.Properties,  &type metadata for SearchCallHistoryCATsSimple.Properties);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATsSimple.Properties and conformance SearchCallHistoryCATsSimple.Properties);
  }

  return result;
}

uint64_t type metadata accessor for SearchCallHistoryCATsSimple(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for SearchCallHistoryCATsSimple;
  if (!type metadata singleton initialization cache for SearchCallHistoryCATsSimple) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchCallHistoryCATsSimple);
  }
  return result;
}

uint64_t type metadata completion function for SearchCallHistoryCATsSimple(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for SearchCallHistoryCATsSimple);
}

uint64_t ObjC metadata update function for SearchCallHistoryCATsSimple()
{
  return type metadata accessor for SearchCallHistoryCATsSimple(0LL);
}

uint64_t storeEnumTagSinglePayload for SearchCallHistoryCATsSimple.Properties( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 39 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 39) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xD9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xD8) {
    return ((uint64_t (*)(void))((char *)&loc_1D3180 + 4 * byte_332265[v4]))();
  }
  *a1 = a2 + 39;
  return ((uint64_t (*)(void))((char *)sub_1D31B4 + 4 * byte_332260[v4]))();
}

uint64_t sub_1D31B4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D31BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1D31C4LL);
  }
  return result;
}

uint64_t sub_1D31D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1D31D8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 39;
  return result;
}

uint64_t sub_1D31DC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D31E4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for SearchCallHistoryCATsSimple.Properties()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.BuildCallRecordDisplayNameDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.ConfirmRecipientDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.ConfirmUnseenDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.ErrorWithCodeDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.ErrorWithCodeAppConfigurationRequiredDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.IntentHandledResponseDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.IntentHandledResponseMissedCallDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.OfferToCallBackDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.OfferToContinueReadingDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.OfferToReadMoreCallRecordsDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.PromptForCallTypesDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.PromptForDateCreatedDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.PromptForRecipientDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.PromptForUnseenDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.ReadCallRecordDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.ReadMissedCallHistoryIntroductionDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.ReadNewOrSavedVoiceMailRecordDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.ReadNewVoiceMailRecordDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.ReadPlayVoiceMailPrePromptDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.ReadSavedVoiceMailRecordDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.ReadSearchCallHistoryIntroductionDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.ReadSingleCallRecordDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.ReadVoiceMailHistoryIntroductionDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.RepeatVoicemailPauseDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.UnsupportedCallTypesDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.UnsupportedDateCreatedDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.UnsupportedRecipientDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.UnsupportedSearchParametersDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.UnsupportedUnseenDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for SearchCallHistoryCATsSimple.ReadMultipleCallRecordsDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1D33FC + 4 * byte_33226F[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)j__OUTLINED_FUNCTION_254_6 + 4 * byte_33226A[v4]))();
}

uint64_t sub_1D3434(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1D343CLL);
  }
  return result;
}

_BYTE *sub_1D3444(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1D344CLL);
  }
  return OUTLINED_FUNCTION_253((_BYTE *)a1, a2 + 3);
}

void type metadata accessor for SearchCallHistoryCATsSimple.VisualCatTextDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1D34B4 + 4 * byte_332279[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)j__OUTLINED_FUNCTION_254_7 + 4 * byte_332274[v4]))();
}

uint64_t sub_1D34EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1D34F4LL);
  }
  return result;
}

_BYTE *sub_1D34FC(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1D3504LL);
  }
  return OUTLINED_FUNCTION_253((_BYTE *)a1, a2 + 2);
}

void type metadata accessor for SearchCallHistoryCATsSimple.VoiceMailOfferToContinueReadingDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1D356C + 4 * byte_332283[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)j__OUTLINED_FUNCTION_254_8 + 4 * byte_33227E[v4]))();
}

uint64_t sub_1D35A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1D35ACLL);
  }
  return result;
}

_BYTE *sub_1D35B4(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1D35BCLL);
  }
  return OUTLINED_FUNCTION_253((_BYTE *)a1, a2 + 1);
}

void type metadata accessor for SearchCallHistoryCATsSimple.VoiceMailOfferToFollowUpActionDialogIds()
{
}

void type metadata accessor for SearchCallHistoryCATsSimple.VoiceMailPromptToPlayDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for SearchCallHistoryCATsSimple.BuildCallRecordDetailDialogIds( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1D3624 + 4 * byte_332288[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1D3644 + 4 * byte_33228D[v4]))();
  }
}

_BYTE *sub_1D3624(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1D3644(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1D364C(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1D3654(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1D365C(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1D3664(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void type metadata accessor for SearchCallHistoryCATsSimple.WindowIntroForReadingMultipleRecordsDialogIds()
{
}

void OUTLINED_FUNCTION_23_42()
{
  *(void *)(v0 + 272) = 0x726F63655277656ELL;
  *(void *)(v0 + 280) = 0xEF746E756F437364LL;
}

uint64_t OUTLINED_FUNCTION_26_39@<X0>(uint64_t a1@<X8>)
{
  v2[12] = v1;
  v2[15] = a1;
  v2[16] = 0x746E65746E69LL;
  v2[17] = 0xE600000000000000LL;
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_28_39(uint64_t result)
{
  v2[24] = v1;
  v2[27] = result;
  v2[28] = 0x5074737269467369LL;
  v2[29] = 0xEF70704179747261LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_36_24( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t OUTLINED_FUNCTION_46_21(uint64_t a1)
{
  v2[18] = v1;
  v2[21] = a1;
  v2[22] = 0x746E65746E69LL;
  v2[23] = 0xE600000000000000LL;
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_47_18@<X0>(uint64_t a1@<X8>)
{
  v2[12] = v1;
  v2[15] = a1;
  v2[16] = 0x656369766564LL;
  v2[17] = 0xE600000000000000LL;
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_48_16@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v2[6] = a2;
  void v2[9] = a1;
  v2[10] = 0x746E65746E69LL;
  v2[11] = 0xE600000000000000LL;
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_59_14(uint64_t result)
{
  v2[12] = v1;
  v2[15] = result;
  v2[16] = 0xD000000000000013LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_67_15@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  *(_BYTE *)(a1 + 48) = v3;
  uint64_t v6 = *(unsigned int *)(a2 + 4);
  *(void *)(v5 + 24) = v4;
  v4[1] = a3;
  return swift_task_alloc(v6);
}

uint64_t OUTLINED_FUNCTION_77_12(uint64_t result)
{
  v2[18] = v1;
  v2[21] = result;
  v2[22] = 0x5074737269467369LL;
  v2[23] = 0xEF70704179747261LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_84_10@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 48) = a2;
  *(void *)(v2 + 72) = result;
  strcpy((char *)(v2 + 80), "isLastOfGroup");
  *(_WORD *)(v2 + 94) = -4864;
  return result;
}

void OUTLINED_FUNCTION_90_9(uint64_t a1@<X8>)
{
  v2[36] = a1;
  v2[39] = v1;
  v2[40] = v3;
}

void OUTLINED_FUNCTION_97_9()
{
  *(_BYTE *)(v0 + 95) = -18;
}

  ;
}

__n128 *OUTLINED_FUNCTION_121_6(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x6953776F646E6977LL;
  result[2].n128_u64[1] = 0xEA0000000000657ALL;
  return result;
}

void OUTLINED_FUNCTION_137_6(uint64_t a1@<X8>)
{
  v2[6] = a1;
  void v2[9] = v1;
  v2[10] = 0xD000000000000010LL;
}

uint64_t OUTLINED_FUNCTION_139_6()
{
  *(void *)(v0 + 80) = 0x746E65746E69LL;
  *(void *)(v0 + 88) = 0xE600000000000000LL;
  return 0LL;
}

  ;
}

uint64_t OUTLINED_FUNCTION_149_5(uint64_t result)
{
  *(void *)(v1 + 80) = result;
  return result;
}

void OUTLINED_FUNCTION_150_5(uint64_t a1@<X8>)
{
  char v5 = *(_BYTE *)(v2 + 99);
  *(void *)(v3 + 320) = v4;
  *(void *)(v3 + 328) = (a1 - 32) | 0x8000000000000000LL;
  *(void *)(v3 + 360) = v1;
  *(_BYTE *)(v3 + 336) = v5;
}

uint64_t OUTLINED_FUNCTION_153_6(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_156_2( uint64_t result, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7)
{
  *(void *)(v8 + 40) = a7;
  *(void *)(v8 + 48) = v7;
  *(_BYTE *)(v8 + 90) = a6;
  *(void *)(v8 + 24) = a3;
  *(void *)(v8 + 32) = a5;
  *(_BYTE *)(v8 + 89) = a4;
  *(_BYTE *)(v8 + 88) = a2;
  *(void *)(v8 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = result;
  return result;
}

void OUTLINED_FUNCTION_166_2(uint64_t a1@<X8>)
{
  v2[6] = a1;
  void v2[9] = v1;
  v2[10] = 0xD000000000000014LL;
}

uint64_t OUTLINED_FUNCTION_169_3(uint64_t result)
{
  v2[36] = v1;
  v2[39] = result;
  v2[40] = v3 + 3;
  return result;
}

unint64_t OUTLINED_FUNCTION_174_4(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

uint64_t OUTLINED_FUNCTION_183_3(uint64_t result, char a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)(v6 + 32) = a5;
  *(void *)(v6 + 40) = v5;
  *(_BYTE *)(v6 + 73) = a4;
  *(_BYTE *)(v6 + 72) = a2;
  *(void *)(v6 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = result;
  *(void *)(v6 + 24) = a3;
  return result;
}

  ;
}

void OUTLINED_FUNCTION_186_2(uint64_t a1@<X8>)
{
  *uint64_t v1 = v2;
  v1[1] = a1;
}

  ;
}

INPerson __swiftcall SAPerson.toINPerson()()
{
  uint64_t v3 = v1 - v2;
  __chkstk_darwin();
  uint64_t v5 = (char *)&v41 - v4;
  uint64_t v6 = OUTLINED_FUNCTION_30_12();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_25_6();
  uint64_t v10 = (char *)(v8 - v9);
  uint64_t v11 = __chkstk_darwin();
  uint64_t v13 = (char *)&v41 - v12;
  PersonNameComponents.init()(v11);
  uint64_t v14 = outlined bridged method (pb) of @objc SAUIConfirmationOption.label.getter(v0, (SEL *)&selRef_firstNamePhonetic);
  uint64_t v16 = PersonNameComponents.givenName.setter(v14, v15);
  uint64_t v17 = OUTLINED_FUNCTION_5_70(v16, (SEL *)&selRef_lastNamePhonetic);
  uint64_t v19 = PersonNameComponents.familyName.setter(v17, v18);
  PersonNameComponents.init()(v19);
  uint64_t v44 = v7;
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v20(v5, v13, v6);
  OUTLINED_FUNCTION_8_7((uint64_t)v5);
  uint64_t v21 = PersonNameComponents.phoneticRepresentation.setter(v5);
  uint64_t v22 = OUTLINED_FUNCTION_5_70(v21, (SEL *)&selRef_firstName);
  uint64_t v24 = PersonNameComponents.givenName.setter(v22, v23);
  uint64_t v25 = OUTLINED_FUNCTION_5_70(v24, (SEL *)&selRef_lastName);
  PersonNameComponents.familyName.setter(v25, v26);
  id v27 = objc_allocWithZone(&OBJC_CLASS___INPersonHandle);
  id v43 = @nonobjc INPersonHandle.init(value:type:)(0LL, 0LL, 0LL);
  v20((char *)v3, v10, v6);
  uint64_t v28 = OUTLINED_FUNCTION_8_7(v3);
  uint64_t v42 = OUTLINED_FUNCTION_5_70(v28, (SEL *)&selRef_fullName);
  uint64_t v30 = v29;
  uint64_t v31 = OUTLINED_FUNCTION_5_70(v42, (SEL *)&selRef_internalGUID);
  uint64_t v33 = v32;
  id v34 = [v0 me];
  type metadata accessor for NSNumber();
  v35.super.super.Class isa = NSNumber.init(integerLiteral:)(1LL).super.super.isa;
  if (v34)
  {
    id v36 = v34;
    char v37 = static NSObject.== infix(_:_:)();
  }

  else
  {
    char v37 = 0;
  }

  id v38 = objc_allocWithZone(&OBJC_CLASS___INPerson);
  @nonobjc INPerson.init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:isMe:)( v43,  v3,  v42,  v30,  0LL,  v31,  v33,  0LL,  0LL,  v37 & 1);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v44 + 8);
  v39(v10, v6);
  v39(v13, v6);
  OUTLINED_FUNCTION_7_5();
  return result;
}

void SAPerson.init(person:)(void *a1)
{
  uint64_t v4 = v2 - v3;
  __chkstk_darwin();
  uint64_t v6 = (char *)&v70 - v5;
  __chkstk_darwin();
  uint64_t v8 = (char *)&v70 - v7;
  __chkstk_darwin();
  os_log_type_t v73 = (char *)&v70 - v9;
  __chkstk_darwin();
  char v71 = (char *)&v70 - v10;
  __chkstk_darwin();
  uint64_t v72 = (char *)&v70 - v11;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v70 - v12;
  __chkstk_darwin();
  uint64_t v15 = (char *)&v70 - v14;
  __chkstk_darwin();
  uint64_t v17 = (char *)&v70 - v16;
  __chkstk_darwin();
  uint64_t v19 = (char *)&v70 - v18;
  id v20 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  id v21 = OUTLINED_FUNCTION_17_5((uint64_t)v20, "nameComponents");
  if (v21)
  {
    uint64_t v22 = v21;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

    OUTLINED_FUNCTION_30_12();
    uint64_t v23 = (uint64_t)v17;
    uint64_t v24 = 0LL;
  }

  else
  {
    type metadata accessor for PersonNameComponents(0LL);
    uint64_t v23 = (uint64_t)v17;
    uint64_t v24 = 1LL;
  }

  OUTLINED_FUNCTION_2_67(v23, v24);
  outlined init with take of PersonNameComponents?((uint64_t)v17, (uint64_t)v19);
  OUTLINED_FUNCTION_30_12();
  int v25 = OUTLINED_FUNCTION_1_69((uint64_t)v19);
  uint64_t v70 = v6;
  uint64_t v26 = a1;
  id v27 = v8;
  uint64_t v28 = v4;
  if (v25)
  {
    uint64_t v29 = outlined destroy of PersonNameComponents?((uint64_t)v19);
LABEL_6:
    uint64_t v19 = 0LL;
    goto LABEL_9;
  }

  PersonNameComponents.givenName.getter();
  uint64_t v31 = v30;
  uint64_t v29 = outlined destroy of PersonNameComponents?((uint64_t)v19);
  if (!v31) {
    goto LABEL_6;
  }
  String._bridgeToObjectiveC()();
  uint64_t v29 = OUTLINED_FUNCTION_9_61();
LABEL_9:
  OUTLINED_FUNCTION_6_69(v29, "setFirstName:");

  id v32 = [v26 displayName];
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  uint64_t v35 = v34;

  outlined bridged method (mbnn) of @objc SAPerson.fullName.setter(v33, v35, v20);
  id v36 = [v26 nameComponents];
  if (v36)
  {
    char v37 = v36;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v38 = 0LL;
  }

  else
  {
    uint64_t v38 = 1LL;
  }

  uint64_t v39 = v28;
  uint64_t v40 = (uint64_t)v27;
  uint64_t v41 = v26;
  uint64_t v42 = (uint64_t)v70;
  OUTLINED_FUNCTION_2_67((uint64_t)v13, v38);
  outlined init with take of PersonNameComponents?((uint64_t)v13, (uint64_t)v15);
  if (OUTLINED_FUNCTION_1_69((uint64_t)v15))
  {
    uint64_t v43 = outlined destroy of PersonNameComponents?((uint64_t)v15);
LABEL_14:
    uint64_t v44 = 0LL;
    goto LABEL_17;
  }

  uint64_t v44 = (void *)PersonNameComponents.familyName.getter();
  uint64_t v46 = v45;
  uint64_t v43 = outlined destroy of PersonNameComponents?((uint64_t)v15);
  if (!v46) {
    goto LABEL_14;
  }
  String._bridgeToObjectiveC()();
  uint64_t v43 = OUTLINED_FUNCTION_9_61();
LABEL_17:
  uint64_t v48 = (uint64_t)v72;
  uint64_t v47 = (uint64_t)v73;
  uint64_t v49 = (uint64_t)v71;
  OUTLINED_FUNCTION_6_69(v43, "setLastName:");

  id v51 = OUTLINED_FUNCTION_17_5(v50, "nameComponents");
  if (v51)
  {
    uint64_t v52 = v51;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v53 = 0LL;
  }

  else
  {
    uint64_t v53 = 1LL;
  }

  OUTLINED_FUNCTION_2_67(v49, v53);
  outlined init with take of PersonNameComponents?(v49, v48);
  PersonNameComponents.phoneticRepresentation.getter();
  if (OUTLINED_FUNCTION_1_69(v47))
  {
    outlined destroy of PersonNameComponents?(v47);
LABEL_23:
    uint64_t v54 = outlined destroy of PersonNameComponents?(v48);
LABEL_24:
    uint64_t v55 = 0LL;
    goto LABEL_25;
  }

  uint64_t v55 = (void *)PersonNameComponents.givenName.getter();
  uint64_t v67 = v66;
  outlined destroy of PersonNameComponents?(v47);
  uint64_t v54 = outlined destroy of PersonNameComponents?(v48);
  if (!v67) {
    goto LABEL_24;
  }
  OUTLINED_FUNCTION_11_61();
  uint64_t v54 = OUTLINED_FUNCTION_40_13();
LABEL_25:
  OUTLINED_FUNCTION_6_69(v54, "setFirstNamePhonetic:");

  id v57 = OUTLINED_FUNCTION_17_5(v56, "nameComponents");
  if (v57)
  {
    uint64_t v58 = v57;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v59 = 0LL;
  }

  else
  {
    uint64_t v59 = 1LL;
  }

  OUTLINED_FUNCTION_2_67(v42, v59);
  outlined init with take of PersonNameComponents?(v42, v40);
  PersonNameComponents.phoneticRepresentation.getter();
  if (OUTLINED_FUNCTION_1_69(v39))
  {
    outlined destroy of PersonNameComponents?(v39);
LABEL_31:
    uint64_t v60 = outlined destroy of PersonNameComponents?(v40);
LABEL_32:
    uint64_t v61 = 0LL;
    goto LABEL_33;
  }

  uint64_t v61 = (void *)PersonNameComponents.familyName.getter();
  uint64_t v69 = v68;
  outlined destroy of PersonNameComponents?(v39);
  uint64_t v60 = outlined destroy of PersonNameComponents?(v40);
  if (!v69) {
    goto LABEL_32;
  }
  OUTLINED_FUNCTION_11_61();
  uint64_t v60 = OUTLINED_FUNCTION_40_13();
LABEL_33:
  OUTLINED_FUNCTION_6_69(v60, "setLastNamePhonetic:");

  uint64_t v62 = outlined bridged method (pb) of @objc SAUIConfirmationOption.label.getter(v41, (SEL *)&selRef_contactIdentifier);
  if (v63)
  {
    String._bridgeToObjectiveC()();
    uint64_t v62 = OUTLINED_FUNCTION_40_13();
  }

  else
  {
    uint64_t v61 = 0LL;
  }

  OUTLINED_FUNCTION_6_69(v62, "setInternalGUID:");

  unsigned int v64 = [v41 isMe];
  type metadata accessor for NSNumber();
  Class isa = NSNumber.init(integerLiteral:)(v64).super.super.isa;
  OUTLINED_FUNCTION_6_69((uint64_t)isa, "setMe:");

  OUTLINED_FUNCTION_7_5();
}

id @nonobjc INPerson.init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:isMe:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v11 = v10;
  uint64_t v17 = type metadata accessor for PersonNameComponents(0LL);
  Class isa = 0LL;
  if (__swift_getEnumTagSinglePayload(a2, 1LL, v17) != 1)
  {
    Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8LL))(a2, v17);
  }

  if (a4)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v19 = 0LL;
  }

  if (a7)
  {
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v20 = 0LL;
  }

  if (a9)
  {
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v21 = 0LL;
  }

  LOBYTE(v24) = a10 & 1;
  id v22 = [v11 initWithPersonHandle:a1 nameComponents:isa displayName:v19 image:a5 contactIdentifier:v20 customIdentifier:v21 isMe:v24];

  return v22;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }

  return result;
}

void outlined bridged method (mbnn) of @objc SAPerson.fullName.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a3 setFullName:v5];
}

uint64_t OUTLINED_FUNCTION_1_69(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_2_67(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1LL, v2);
}

uint64_t OUTLINED_FUNCTION_9_61()
{
  return swift_bridgeObjectRelease(v0);
}

NSString OUTLINED_FUNCTION_11_61()
{
  return String._bridgeToObjectiveC()();
}

void specialized RawRepresentable<>.hash(into:)()
{
  __asm { BR              X10 }

{
  OUTLINED_FUNCTION_67_16();
  OUTLINED_FUNCTION_90_10();
  __asm { BR              X10 }

{
  OUTLINED_FUNCTION_42_18();
  __asm { BR              X10 }

{
  OUTLINED_FUNCTION_42_18();
  __asm { BR              X10 }

{
  OUTLINED_FUNCTION_78_14();
  __asm { BR              X10 }

{
  OUTLINED_FUNCTION_47_19();
  __asm { BR              X10 }

{
  OUTLINED_FUNCTION_77_13();
  __asm { BR              X10 }

{
  OUTLINED_FUNCTION_79_9();
  __asm { BR              X10 }

{
  OUTLINED_FUNCTION_59_15();
  __asm { BR              X10 }

{
  OUTLINED_FUNCTION_76_13();
  __asm { BR              X10 }

{
  OUTLINED_FUNCTION_77_13();
  __asm { BR              X10 }

{
  OUTLINED_FUNCTION_79_9();
  __asm { BR              X10 }

{
  OUTLINED_FUNCTION_42_18();
  __asm { BR              X10 }

{
  OUTLINED_FUNCTION_13_63();
  __asm { BR              X10 }

{
  OUTLINED_FUNCTION_39_19();
  __asm { BR              X10 }

{
  OUTLINED_FUNCTION_39_19();
  __asm { BR              X10 }

{
  OUTLINED_FUNCTION_59_15();
  __asm { BR              X10 }

{
  OUTLINED_FUNCTION_42_18();
  __asm { BR              X10 }

{
  OUTLINED_FUNCTION_80_8();
  __asm { BR              X10 }

{
  OUTLINED_FUNCTION_80_8();
  OUTLINED_FUNCTION_89_10();
  __asm { BR              X10 }

uint64_t sub_1D4428()
{
  return OUTLINED_FUNCTION_16_6(v0);
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x6563696F76LL;
  }
  else {
    uint64_t v3 = 0x69616D6563696F76LL;
  }
  if (v2) {
    uint64_t v4 = 0xE90000000000006CLL;
  }
  else {
    uint64_t v4 = 0xE500000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(a1, v3);
  return OUTLINED_FUNCTION_16_6(v4);
}

{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x6D69547472617473LL;
  }
  else {
    uint64_t v3 = 0x69546C65636E6163LL;
  }
  if (v2) {
    uint64_t v4 = 0xEB0000000072656DLL;
  }
  else {
    uint64_t v4 = 0xEA00000000007265LL;
  }
  OUTLINED_FUNCTION_5_71(a1, v3);
  return OUTLINED_FUNCTION_16_6(v4);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  if (a2)
  {
    OUTLINED_FUNCTION_35_28();
    if (v6) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = v5;
    }
  }

  else
  {
    uint64_t v7 = 0xE700000000000000LL;
    OUTLINED_FUNCTION_81_13();
    uint64_t v3 = v8 & 0xFFFFFFFFFFFFLL | 0x74000000000000LL;
  }

  OUTLINED_FUNCTION_5_71(v2, v3);
  return OUTLINED_FUNCTION_16_6(v7);
}

{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0xD000000000000015LL;
  }
  else {
    uint64_t v3 = 0x746163696C707041LL;
  }
  if (v2) {
    uint64_t v4 = 0xEC000000736E6F69LL;
  }
  else {
    uint64_t v4 = 0x8000000000341970LL;
  }
  OUTLINED_FUNCTION_5_71(a1, v3);
  return OUTLINED_FUNCTION_16_6(v4);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  if (a2)
  {
    OUTLINED_FUNCTION_44_19();
    OUTLINED_FUNCTION_35_28();
    if (v7) {
      BOOL v2 = v5;
    }
    else {
      BOOL v2 = v6;
    }
  }

  else
  {
    OUTLINED_FUNCTION_37_28();
  }

  OUTLINED_FUNCTION_5_71(v3, v4);
  return OUTLINED_FUNCTION_16_6(v2);
}

{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x6143657461657263LL;
  }
  else {
    uint64_t v3 = 0x73746E65636572LL;
  }
  if (v2) {
    uint64_t v4 = 0xE700000000000000LL;
  }
  else {
    uint64_t v4 = 0xEA00000000006C6CLL;
  }
  OUTLINED_FUNCTION_5_71(a1, v3);
  return OUTLINED_FUNCTION_16_6(v4);
}

{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  if (a2)
  {
    OUTLINED_FUNCTION_179();
    if (v2 == 1) {
      uint64_t v4 = 0xD000000000000012LL;
    }
    else {
      uint64_t v4 = 0x54746C7561666564LL;
    }
    if (v2 == 1) {
      id v5 = v3;
    }
    else {
      id v5 = 0xED00007465677261LL;
    }
  }

  else
  {
    id v5 = 0xEB00000000737365LL;
    uint64_t v4 = 0x6E69737542727273LL;
  }

  OUTLINED_FUNCTION_5_71(a1, v4);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  if (a2)
  {
    OUTLINED_FUNCTION_35_28();
    if (v5) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = v4;
    }
  }

  else
  {
    uint64_t v6 = 0xEE00796C6E4F746ELL;
    BOOL v2 = 0x65746E4934764C4ELL;
  }

  OUTLINED_FUNCTION_5_71(a1, v2);
  return OUTLINED_FUNCTION_16_6(v6);
}

{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x6C61636F6CLL;
  }
  else {
    uint64_t v3 = 0x6E676965726F66LL;
  }
  if (v2) {
    uint64_t v4 = 0xE700000000000000LL;
  }
  else {
    uint64_t v4 = 0xE500000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(a1, v3);
  return OUTLINED_FUNCTION_16_6(v4);
}

{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  if (a2)
  {
    OUTLINED_FUNCTION_97_10();
    if (v3) {
      uint64_t v6 = 1886352499LL;
    }
    else {
      uint64_t v6 = 0x746165706572LL;
    }
    if (v3) {
      BOOL v2 = v5;
    }
    else {
      BOOL v2 = 0xE600000000000000LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_68_18();
  }

  OUTLINED_FUNCTION_5_71(v4, v6);
  return OUTLINED_FUNCTION_16_6(v2);
}

{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x6E6F697461727564LL;
  }
  else {
    uint64_t v3 = 0x73456F54656D6974LL;
  }
  if (v2) {
    uint64_t v4 = 0xEF6873696C626174LL;
  }
  else {
    uint64_t v4 = 0xE800000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(a1, v3);
  return OUTLINED_FUNCTION_16_6(v4);
}

{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x7069636974726170LL;
  }
  else {
    uint64_t v3 = 0x7954657469766E69LL;
  }
  if (v2) {
    uint64_t v4 = 0xEA00000000006570LL;
  }
  else {
    uint64_t v4 = 0xEC00000073746E61LL;
  }
  OUTLINED_FUNCTION_5_71(a1, v3);
  return OUTLINED_FUNCTION_16_6(v4);
}

{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x644970756F7267LL;
  }
  else {
    uint64_t v3 = 0x6D614E70756F7267LL;
  }
  if (v2) {
    uint64_t v4 = 0xE900000000000065LL;
  }
  else {
    uint64_t v4 = 0xE700000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(a1, v3);
  return OUTLINED_FUNCTION_16_6(v4);
}

{
  uint64_t v2;
  if (a2)
  {
    if (a2 == 1) {
      BOOL v2 = 0xEF32676F6C616964LL;
    }
    else {
      BOOL v2 = 0xEF33676F6C616964LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_103_7();
  }

  OUTLINED_FUNCTION_5_71(a1, 0x2331686374697773LL);
  return OUTLINED_FUNCTION_16_6(v2);
}

{
  uint64_t v2;
  if ((a2 & 1) != 0) {
    BOOL v2 = 0x7261506472696874LL;
  }
  else {
    BOOL v2 = 0x7261507473726966LL;
  }
  OUTLINED_FUNCTION_92_10(a1, v2);
  return swift_bridgeObjectRelease();
}

{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x656E6F6850657375LL;
  }
  else {
    uint64_t v3 = 0x68506E6F4E657375LL;
  }
  if (v2) {
    uint64_t v4 = 0xEE00707041656E6FLL;
  }
  else {
    uint64_t v4 = 0xEB00000000707041LL;
  }
  OUTLINED_FUNCTION_5_71(a1, v3);
  return OUTLINED_FUNCTION_16_6(v4);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  if (a2)
  {
    OUTLINED_FUNCTION_323();
    OUTLINED_FUNCTION_60_17();
    if (v5) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = v4;
    }
  }

  else
  {
    uint64_t v6 = 0xE700000000000000LL;
    BOOL v2 = 0x636972656E6567LL;
  }

  OUTLINED_FUNCTION_5_71(a1, v2);
  return OUTLINED_FUNCTION_16_6(v6);
}

{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  if (a2)
  {
    OUTLINED_FUNCTION_97_10();
    if (v2) {
      uint64_t v4 = 1836020326LL;
    }
    else {
      uint64_t v4 = 1752459639LL;
    }
    if (v2) {
      id v5 = v3;
    }
    else {
      id v5 = 0xE400000000000000LL;
    }
  }

  else
  {
    id v5 = 0xE200000000000000LL;
    uint64_t v4 = 28532LL;
  }

  OUTLINED_FUNCTION_5_71(a1, v4);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  uint64_t v2;
  if ((a2 & 1) != 0) {
    BOOL v2 = 0x6C69616D65LL;
  }
  else {
    BOOL v2 = 0x656E6F6870LL;
  }
  OUTLINED_FUNCTION_49_18(a1, v2);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v2;
  if ((a2 & 1) != 0) {
    BOOL v2 = 0x6F65646976LL;
  }
  else {
    BOOL v2 = 0x6F69647561LL;
  }
  OUTLINED_FUNCTION_49_18(a1, v2);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  if (a2)
  {
    OUTLINED_FUNCTION_35_28();
    if (v5) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = v4;
    }
  }

  else
  {
    uint64_t v6 = 0xEC0000006C6C6143LL;
    BOOL v2 = 0x676E696D6F636E69LL;
  }

  OUTLINED_FUNCTION_5_71(a1, v2);
  return OUTLINED_FUNCTION_16_6(v6);
}

{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x32676F6C616964LL;
  }
  else {
    uint64_t v3 = 0x6573557473726946LL;
  }
  if (v2) {
    uint64_t v4 = 0xE800000000000000LL;
  }
  else {
    uint64_t v4 = 0xE700000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(a1, v3);
  return OUTLINED_FUNCTION_16_6(v4);
}

{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x6C61436F54646461LL;
  }
  else {
    uint64_t v3 = 0x6C6C614377656ELL;
  }
  if (v2) {
    uint64_t v4 = 0xE700000000000000LL;
  }
  else {
    uint64_t v4 = 0xE90000000000006CLL;
  }
  OUTLINED_FUNCTION_5_71(a1, v3);
  return OUTLINED_FUNCTION_16_6(v4);
}

{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x636972656E6567LL;
  }
  else {
    uint64_t v3 = 0x656D695465636166LL;
  }
  if (v2) {
    uint64_t v4 = 0xE800000000000000LL;
  }
  else {
    uint64_t v4 = 0xE700000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(a1, v3);
  return OUTLINED_FUNCTION_16_6(v4);
}

{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0xD000000000000015LL;
  }
  else {
    uint64_t v3 = 0x32676F6C616964LL;
  }
  if (v2) {
    uint64_t v4 = 0xE700000000000000LL;
  }
  else {
    uint64_t v4 = 0x8000000000345FD0LL;
  }
  OUTLINED_FUNCTION_5_71(a1, v3);
  return OUTLINED_FUNCTION_16_6(v4);
}

{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0xD00000000000001ALL;
  }
  else {
    uint64_t v3 = 0xD000000000000019LL;
  }
  if (v2) {
    uint64_t v4 = 0x8000000000344C30LL;
  }
  else {
    uint64_t v4 = 0x8000000000344C50LL;
  }
  OUTLINED_FUNCTION_5_71(a1, v3);
  return OUTLINED_FUNCTION_16_6(v4);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  if (a2)
  {
    OUTLINED_FUNCTION_323();
    if (v5 == 1) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 0x6574736575716552LL;
    }
    if (v5 == 1) {
      BOOL v2 = v6;
    }
    else {
      BOOL v2 = 0xEF656C646E614864LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_15_55();
  }

  OUTLINED_FUNCTION_5_71(v3, v7);
  return OUTLINED_FUNCTION_16_6(v2);
}

{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  if (a2)
  {
    OUTLINED_FUNCTION_179();
    if (v3 == 1) {
      id v5 = 0xD000000000000011LL;
    }
    else {
      id v5 = 7565171LL;
    }
    if (v3 == 1) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = 0xE300000000000000LL;
    }
  }

  else
  {
    uint64_t v6 = 0xE700000000000000LL;
    OUTLINED_FUNCTION_39_19();
    id v5 = v7 | 0x676E6900000000LL;
  }

  OUTLINED_FUNCTION_5_71(v2, v5);
  return OUTLINED_FUNCTION_16_6(v6);
}

{
  uint64_t v2;
  if ((a2 & 1) != 0) {
    BOOL v2 = 0x32676F6C616964LL;
  }
  else {
    BOOL v2 = 0x6E776F6E6B6E55LL;
  }
  OUTLINED_FUNCTION_4_76(a1, v2);
  return swift_bridgeObjectRelease();
}

{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 1735289202LL;
  }
  else {
    uint64_t v3 = 6579297LL;
  }
  if (v2) {
    uint64_t v4 = 0xE300000000000000LL;
  }
  else {
    uint64_t v4 = 0xE400000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(a1, v3);
  return OUTLINED_FUNCTION_16_6(v4);
}

{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x6F725074726F6873LL;
  }
  else {
    uint64_t v3 = 0x6D6F7250676E6F6CLL;
  }
  if (v2) {
    uint64_t v4 = 0xEA00000000007470LL;
  }
  else {
    uint64_t v4 = 0xEB0000000074706DLL;
  }
  OUTLINED_FUNCTION_5_71(a1, v3);
  return OUTLINED_FUNCTION_16_6(v4);
}

{
  uint64_t v2;
  if ((a2 & 1) != 0) {
    BOOL v2 = 0x636972656E6567LL;
  }
  else {
    BOOL v2 = 0x79616C50726163LL;
  }
  OUTLINED_FUNCTION_4_76(a1, v2);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v2;
  if ((a2 & 1) != 0) {
    BOOL v2 = 0x32676F6C616964LL;
  }
  else {
    BOOL v2 = 0x31676F6C616964LL;
  }
  OUTLINED_FUNCTION_4_76(a1, v2);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  if (a2)
  {
    OUTLINED_FUNCTION_323();
    OUTLINED_FUNCTION_60_17();
    if (v5) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = v4;
    }
  }

  else
  {
    uint64_t v6 = 0xEF6C6C6143646574LL;
    BOOL v2 = 0x726F707075736E75LL;
  }

  OUTLINED_FUNCTION_5_71(a1, v2);
  return OUTLINED_FUNCTION_16_6(v6);
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X11 }

{
  __asm { BR              X11 }

uint64_t sub_1D44E4(uint64_t a1)
{
  return OUTLINED_FUNCTION_16_6(0xE300000000000000LL);
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))UsoIdentifierNamespaceType.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))DucFamilyNames.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallSlotNames.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallReference.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallAttribute.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallRecord.CodingKeys.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallVerb.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallDisplayTextCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallControlCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallContactReference.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallDisplayTextCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallControlAction.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallNLConstants.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallControlCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))OngoingCallCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))OngoingCallCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))SearchCallHistoryCATPatternsIdentifiers.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))SearchCallHistoryCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))SearchCallHistoryCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATPatternsIdentifiers.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.UnsupportedContactsNoContactFoundDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.IntentHandledResponseDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.ConfirmContactsDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.RelationshipDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))AddCallParticipantCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))AddCallParticipantCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))UnsupportedPhoneCall.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))UnsupportedFlowCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))UnsupportedFlowCATPatternsIdentifiers.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))UnsupportedFlowCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)( a1,  a2,  (uint64_t (*)(uint64_t))ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason.rawValue.getter);
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1)
{
  return OUTLINED_FUNCTION_12_63(a1, 21LL, 0x80000000003469D0LL);
}

{
  return OUTLINED_FUNCTION_12_63(a1, 21LL, 0x8000000000346790LL);
}

{
  return OUTLINED_FUNCTION_12_63(a1, 16LL, 0x8000000000342030LL);
}

{
  return OUTLINED_FUNCTION_31_32(a1, 0x747369486C6C6163LL, 7959151LL);
}

{
  return OUTLINED_FUNCTION_54_14(a1, 0x75466E6F73726570LL, 0x656D614E6C6CLL);
}

{
  return OUTLINED_FUNCTION_24_34(a1, 0x74706D6F7270LL);
}

{
  return OUTLINED_FUNCTION_33_41(a1, 0x636E656772656D65LL, 0x6C6C614379LL);
}

{
  return OUTLINED_FUNCTION_12_63(a1, 17LL, 0x8000000000343F90LL);
}

{
  return OUTLINED_FUNCTION_33_41(a1, 0x6553657461647075LL, 0x676E697474LL);
}

{
  return OUTLINED_FUNCTION_4_76(a1, 0x6E776F6E6B6E75LL);
}

{
  return OUTLINED_FUNCTION_33_41(a1, 0x697263736E617254LL, 0x6E6F697470LL);
}

{
  return OUTLINED_FUNCTION_31_32(a1, 0x6974746553707061LL, 7563118LL);
}

{
  return OUTLINED_FUNCTION_24_34(a1, 0x65676E616863LL);
}

{
  return OUTLINED_FUNCTION_4_76(a1, 0x7070416E65706FLL);
}

{
  return OUTLINED_FUNCTION_21_39(a1, 1819042147LL);
}

{
  return String.hash(into:)(a1, 0x64656C65636E6163LL, 0xE800000000000000LL);
}

{
  return OUTLINED_FUNCTION_49_18(a1, 0x6C6562616CLL);
}

{
  return OUTLINED_FUNCTION_4_76(a1, 0x6C6C614377656ELL);
}

{
  return String.hash(into:)(a1, 0x746E6F436E65706FLL, 0xEC00000073746361LL);
}

{
  return OUTLINED_FUNCTION_24_34(a1, 0x6C65636E6163LL);
}

{
  return OUTLINED_FUNCTION_21_39(a1, 1954047342LL);
}

{
  return OUTLINED_FUNCTION_21_39(a1, 1852403562LL);
}

{
  return OUTLINED_FUNCTION_12_63(a1, 35LL, 0x8000000000341DE0LL);
}

{
  return OUTLINED_FUNCTION_54_14(a1, 0x56495443415F4F4ELL, 0x4C4C41435F45LL);
}

{
  return String.hash(into:)(a1, 0x6F68706F7263696DLL, 0xEA0000000000656ELL);
}

{
  return OUTLINED_FUNCTION_21_39(a1, 1953720684LL);
}

{
  return OUTLINED_FUNCTION_49_18(a1, 0x6573756170LL);
}

{
  return OUTLINED_FUNCTION_31_32(a1, 0x6C646E7542707061LL, 6572389LL);
}

{
  return OUTLINED_FUNCTION_4_76(a1, 0x636972656E6567LL);
}

{
  return OUTLINED_FUNCTION_12_63(a1, 24LL, 0x8000000000344C10LL);
}

{
  return OUTLINED_FUNCTION_12_63(a1, 18LL, 0x8000000000344BF0LL);
}

uint64_t sub_1D45D0()
{
  return OUTLINED_FUNCTION_16_6(v0);
}

uint64_t sub_1D46BC()
{
  return OUTLINED_FUNCTION_16_6(v0);
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  if (v4) {
    unint64_t v5 = v2 | 0x8000000000000000LL;
  }
  else {
    unint64_t v5 = v3 | 0x8000000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(v0, v1);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_84_11();
  OUTLINED_FUNCTION_5_71(v1, 0xD00000000000001DLL);
  return OUTLINED_FUNCTION_16_6(v0);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_102_5();
  OUTLINED_FUNCTION_49_18(v0, v1);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  OUTLINED_FUNCTION_17_48();
  if (v4) {
    unint64_t v5 = v2 | 0x8000000000000000LL;
  }
  else {
    unint64_t v5 = v3 | 0x8000000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(v0, v1);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  OUTLINED_FUNCTION_25_39();
  if (v4) {
    unint64_t v5 = v2 | 0x8000000000000000LL;
  }
  else {
    unint64_t v5 = v3 | 0x8000000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(v0, v1);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_70_15();
  if (v0) {
    uint64_t v3 = 0xD000000000000015LL;
  }
  else {
    uint64_t v3 = 0x6F56746165706572LL;
  }
  char v4 = v2 | 0x8000000000000000LL;
  if (v0) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = 0xEF6C69616D656369LL;
  }
  OUTLINED_FUNCTION_5_71(v1, v3);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  OUTLINED_FUNCTION_25_39();
  if (v4) {
    unint64_t v5 = v2 | 0x8000000000000000LL;
  }
  else {
    unint64_t v5 = v3 | 0x8000000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(v0, v1);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  OUTLINED_FUNCTION_25_39();
  if (v4) {
    unint64_t v5 = v2 | 0x8000000000000000LL;
  }
  else {
    unint64_t v5 = v3 | 0x8000000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(v0, v1);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_69_15();
  if (v1)
  {
    OUTLINED_FUNCTION_15_55();
  }

  else
  {
    OUTLINED_FUNCTION_323();
    OUTLINED_FUNCTION_113_7();
    if (v1) {
      uint64_t v0 = v4;
    }
    else {
      uint64_t v0 = v5;
    }
  }

  OUTLINED_FUNCTION_5_71(v2, v3);
  return OUTLINED_FUNCTION_16_6(v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_96_6();
  return String.hash(into:)(v0, v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  OUTLINED_FUNCTION_17_48();
  if (v4) {
    unint64_t v5 = v2 | 0x8000000000000000LL;
  }
  else {
    unint64_t v5 = v3 | 0x8000000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(v0, v1);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_83_13();
  return String.hash(into:)(v0, v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  OUTLINED_FUNCTION_17_48();
  if (v4) {
    unint64_t v5 = v2 | 0x8000000000000000LL;
  }
  else {
    unint64_t v5 = v3 | 0x8000000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(v0, v1);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_84_11();
  OUTLINED_FUNCTION_5_71(v1, 0xD000000000000024LL);
  return OUTLINED_FUNCTION_16_6(v0);
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  OUTLINED_FUNCTION_69_15();
  if (v1)
  {
    OUTLINED_FUNCTION_15_55();
  }

  else
  {
    OUTLINED_FUNCTION_179();
    if (v5 == 1)
    {
      uint64_t v0 = v4;
    }

    else
    {
      uint64_t v3 = 0x636972656E6567LL;
      uint64_t v0 = 0xE700000000000000LL;
    }
  }

  OUTLINED_FUNCTION_5_71(v2, v3);
  return OUTLINED_FUNCTION_16_6(v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  OUTLINED_FUNCTION_25_39();
  if (v4) {
    unint64_t v5 = v2 | 0x8000000000000000LL;
  }
  else {
    unint64_t v5 = v3 | 0x8000000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(v0, v1);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_70_15();
  if (v0) {
    uint64_t v3 = 0xD000000000000014LL;
  }
  else {
    uint64_t v3 = 0x31676F6C616964LL;
  }
  char v4 = v2 | 0x8000000000000000LL;
  if (v0) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = 0xE700000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(v1, v3);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  OUTLINED_FUNCTION_69_15();
  if (v1)
  {
    OUTLINED_FUNCTION_15_55();
  }

  else
  {
    OUTLINED_FUNCTION_179();
    if (v4 == 1) {
      uint64_t v6 = v3 + 1;
    }
    else {
      uint64_t v6 = 0x6143656E4F736168LL;
    }
    if (v4 == 1) {
      uint64_t v0 = v5;
    }
    else {
      uint64_t v0 = 0xEE00657079546C6CLL;
    }
  }

  OUTLINED_FUNCTION_5_71(v2, v6);
  return OUTLINED_FUNCTION_16_6(v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  OUTLINED_FUNCTION_25_39();
  if (v4) {
    unint64_t v5 = v2 | 0x8000000000000000LL;
  }
  else {
    unint64_t v5 = v3 | 0x8000000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(v0, v1);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_69_15();
  if (v1)
  {
    OUTLINED_FUNCTION_15_55();
  }

  else
  {
    OUTLINED_FUNCTION_323();
    OUTLINED_FUNCTION_113_7();
    if (v1) {
      uint64_t v0 = v4;
    }
    else {
      uint64_t v0 = v5;
    }
  }

  OUTLINED_FUNCTION_5_71(v2, v3);
  return OUTLINED_FUNCTION_16_6(v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  OUTLINED_FUNCTION_17_48();
  if (v4) {
    unint64_t v5 = v2 | 0x8000000000000000LL;
  }
  else {
    unint64_t v5 = v3 | 0x8000000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(v0, v1);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  OUTLINED_FUNCTION_17_48();
  if (v4) {
    unint64_t v5 = v2 | 0x8000000000000000LL;
  }
  else {
    unint64_t v5 = v3 | 0x8000000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(v0, v1);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  OUTLINED_FUNCTION_69_15();
  if (v1)
  {
    OUTLINED_FUNCTION_15_55();
  }

  else
  {
    OUTLINED_FUNCTION_323();
    if (v3 == 1) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = 0x636972656E6567LL;
    }
    if (v3 == 1) {
      uint64_t v0 = v5;
    }
    else {
      uint64_t v0 = 0xE700000000000000LL;
    }
  }

  OUTLINED_FUNCTION_5_71(v2, v6);
  return OUTLINED_FUNCTION_16_6(v0);
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_70_15();
  if (v0) {
    uint64_t v3 = 0xD00000000000001ELL;
  }
  else {
    uint64_t v3 = 0x65766947656D6153LL;
  }
  char v4 = v2 | 0x8000000000000000LL;
  if (v0) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = 0xED0000656D614E6ELL;
  }
  OUTLINED_FUNCTION_5_71(v1, v3);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  OUTLINED_FUNCTION_17_48();
  if (v4) {
    unint64_t v5 = v2 | 0x8000000000000000LL;
  }
  else {
    unint64_t v5 = v3 | 0x8000000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(v0, v1);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  OUTLINED_FUNCTION_25_39();
  if (v4) {
    unint64_t v5 = v2 | 0x8000000000000000LL;
  }
  else {
    unint64_t v5 = v3 | 0x8000000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(v0, v1);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_70_15();
  if (v0) {
    uint64_t v3 = 0x436D7269666E6F43LL;
  }
  else {
    uint64_t v3 = 0xD000000000000012LL;
  }
  char v4 = v2 | 0x8000000000000000LL;
  if (v0) {
    unint64_t v5 = 0xEE00746361746E6FLL;
  }
  else {
    unint64_t v5 = v4;
  }
  OUTLINED_FUNCTION_5_71(v1, v3);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_70_15();
  if (v0) {
    uint64_t v3 = 0x32676F6C616964LL;
  }
  else {
    uint64_t v3 = 0xD000000000000016LL;
  }
  char v4 = v2 | 0x8000000000000000LL;
  if (v0) {
    unint64_t v5 = 0xE700000000000000LL;
  }
  else {
    unint64_t v5 = v4;
  }
  OUTLINED_FUNCTION_5_71(v1, v3);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  OUTLINED_FUNCTION_17_48();
  if (v4) {
    unint64_t v5 = v2 | 0x8000000000000000LL;
  }
  else {
    unint64_t v5 = v3 | 0x8000000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(v0, v1);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v0 = 25701LL;
  OUTLINED_FUNCTION_67_16();
  if (v1)
  {
    OUTLINED_FUNCTION_179();
    if (v3 == 1) {
      unint64_t v5 = 0xD000000000000015LL;
    }
    else {
      unint64_t v5 = 0x696D6F636E496F4ELL;
    }
    if (v3 == 1) {
      uint64_t v0 = v4;
    }
    else {
      uint64_t v0 = 26478LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_90_10();
  }

  OUTLINED_FUNCTION_5_71(v2, v5);
  return OUTLINED_FUNCTION_16_6(v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  OUTLINED_FUNCTION_17_48();
  if (v4) {
    unint64_t v5 = v2 | 0x8000000000000000LL;
  }
  else {
    unint64_t v5 = v3 | 0x8000000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(v0, v1);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  OUTLINED_FUNCTION_17_48();
  if (v4) {
    unint64_t v5 = v2 | 0x8000000000000000LL;
  }
  else {
    unint64_t v5 = v3 | 0x8000000000000000LL;
  }
  OUTLINED_FUNCTION_5_71(v0, v1);
  return OUTLINED_FUNCTION_16_6(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_64_14();
  OUTLINED_FUNCTION_4_76(v0, v1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D4804()
{
  return OUTLINED_FUNCTION_16_6(v0);
}

uint64_t sub_1D4A54()
{
  return OUTLINED_FUNCTION_16_6(v0);
}

uint64_t sub_1D4B2C()
{
  return OUTLINED_FUNCTION_16_6(v0);
}

uint64_t sub_1D4CC4(uint64_t a1)
{
  return OUTLINED_FUNCTION_16_6(0xED0000746E617473LL);
}

uint64_t sub_1D4D88()
{
  return OUTLINED_FUNCTION_16_6(v0);
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  int v3 = a2;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v4 = 0x72656469766F7270LL;
    }
    else {
      uint64_t v4 = 0xD000000000000010LL;
    }
    if (v3 == 1) {
      uint64_t v2 = 0xEC000000656D614ELL;
    }
    else {
      uint64_t v2 = 0x8000000000341F70LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_15_55();
  }

  OUTLINED_FUNCTION_5_71(a1, v4);
  return OUTLINED_FUNCTION_16_6(v2);
}

{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v3 = a2;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v4 = 0x6C61636F4C6E6F6ELL;
    }
    else {
      uint64_t v4 = 1701736302LL;
    }
    if (v3 == 1) {
      uint64_t v2 = 0xE800000000000000LL;
    }
    else {
      uint64_t v2 = 0xE400000000000000LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_101_7();
  }

  OUTLINED_FUNCTION_5_71(a1, v4);
  return OUTLINED_FUNCTION_16_6(v2);
}

{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v3 = a2;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v4 = 28532LL;
    }
    else {
      uint64_t v4 = 0x6F68576F74LL;
    }
    if (v3 == 1) {
      uint64_t v2 = 0xE200000000000000LL;
    }
    else {
      uint64_t v2 = 0xE500000000000000LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_48_17();
  }

  OUTLINED_FUNCTION_5_71(a1, v4);
  return OUTLINED_FUNCTION_16_6(v2);
}

{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v3 = a2;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v4 = 0x6C6F566B63656863LL;
    }
    else {
      uint64_t v4 = 0x636972656E6567LL;
    }
    if (v3 == 1) {
      uint64_t v2 = 0xEB00000000656D75LL;
    }
    else {
      uint64_t v2 = 0xE700000000000000LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_40_20();
  }

  OUTLINED_FUNCTION_5_71(a1, v4);
  return OUTLINED_FUNCTION_16_6(v2);
}

{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v3 = a2;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v4 = 0x656D697465636166LL;
    }
    else {
      uint64_t v4 = 0x7261506472696874LL;
    }
    if (v3 == 1) {
      uint64_t v2 = 0xE800000000000000LL;
    }
    else {
      uint64_t v2 = 0xEA00000000007974LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_51_14();
  }

  OUTLINED_FUNCTION_5_71(a1, v4);
  return OUTLINED_FUNCTION_16_6(v2);
}

{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v3 = a2;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v4 = 0x6563696F76LL;
    }
    else {
      uint64_t v4 = 0x656D756C6F76LL;
    }
    if (v3 == 1) {
      uint64_t v2 = 0xE500000000000000LL;
    }
    else {
      uint64_t v2 = 0xE600000000000000LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_56_15();
  }

  OUTLINED_FUNCTION_5_71(a1, v4);
  return OUTLINED_FUNCTION_16_6(v2);
}

{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v3 = a2;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v4 = 0x7461446567616D69LL;
    }
    else {
      uint64_t v4 = 0x63417463656C6573LL;
    }
    if (v3 == 1) {
      uint64_t v2 = 0xE900000000000061LL;
    }
    else {
      uint64_t v2 = 0xEC0000006E6F6974LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_105_5();
  }

  OUTLINED_FUNCTION_5_71(a1, v4);
  return OUTLINED_FUNCTION_16_6(v2);
}

{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v3 = a2;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v4 = 0xD000000000000028LL;
    }
    else {
      uint64_t v4 = 0xD000000000000025LL;
    }
    if (v3 == 1) {
      uint64_t v2 = 0x8000000000342DE0LL;
    }
    else {
      uint64_t v2 = 0x8000000000342E10LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_15_55();
  }

  OUTLINED_FUNCTION_5_71(a1, v4);
  return OUTLINED_FUNCTION_16_6(v2);
}

{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v2 = a2;
  if (a2)
  {
    if (a2 == 1) {
      int v3 = 0x654E646E41646E65LL;
    }
    else {
      int v3 = 0x4E646E41646C6F68LL;
    }
    if (v2 == 1) {
      uint64_t v4 = 0xED00006C6C614377LL;
    }
    else {
      uint64_t v4 = 0xEE006C6C61437765LL;
    }
  }

  else
  {
    uint64_t v4 = 0xE300000000000000LL;
    int v3 = 6579297LL;
  }

  OUTLINED_FUNCTION_5_71(a1, v3);
  return OUTLINED_FUNCTION_16_6(v4);
}

{
  uint64_t v2;
  int v3;
  uint64_t v4;
  if (a2)
  {
    int v3 = a2;
    uint64_t v4 = 0x6423317473726966LL;
    if (v3 == 1) {
      uint64_t v2 = 0xEE0031676F6C6169LL;
    }
    else {
      uint64_t v2 = 0xEE0032676F6C6169LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_74_13();
  }

  OUTLINED_FUNCTION_5_71(a1, v4);
  return OUTLINED_FUNCTION_16_6(v2);
}

{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v3 = a2;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v4 = 0x756F687469575446LL;
    }
    else {
      uint64_t v4 = 0x636972656E6547LL;
    }
    if (v3 == 1) {
      uint64_t v2 = 0xEF65636976654474LL;
    }
    else {
      uint64_t v2 = 0xE700000000000000LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_45_19();
  }

  OUTLINED_FUNCTION_5_71(a1, v4);
  return OUTLINED_FUNCTION_16_6(v2);
}

{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v3 = a2;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v4 = 0x646C6F486E4FLL;
    }
    else {
      uint64_t v4 = 0x676E69676E6952LL;
    }
    if (v3 == 1) {
      uint64_t v2 = 0xE600000000000000LL;
    }
    else {
      uint64_t v2 = 0xE700000000000000LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_16_45();
  }

  OUTLINED_FUNCTION_5_71(a1, v4);
  return OUTLINED_FUNCTION_16_6(v2);
}

{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v3 = a2;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v4 = 0x46676E6974696177LL;
    }
    else {
      uint64_t v4 = 0x6365527475706E69LL;
    }
    if (v3 == 1) {
      uint64_t v2 = 0xEF7475706E49726FLL;
    }
    else {
      uint64_t v2 = 0xED00006465766965LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_41_25();
  }

  OUTLINED_FUNCTION_5_71(a1, v4);
  return OUTLINED_FUNCTION_16_6(v2);
}

{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v3 = a2;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v4 = 0x65756E69746E6F63LL;
    }
    else {
      uint64_t v4 = 0x43526C65636E6163LL;
    }
    if (v3 == 1) {
      uint64_t v2 = 0xEF776F6C46484352LL;
    }
    else {
      uint64_t v2 = 0xED0000776F6C4648LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_93_7();
  }

  OUTLINED_FUNCTION_5_71(a1, v4);
  return OUTLINED_FUNCTION_16_6(v2);
}

uint64_t sub_1D5230()
{
  return OUTLINED_FUNCTION_16_6(0xE500000000000000LL);
}

uint64_t sub_1D5664(uint64_t a1)
{
  return OUTLINED_FUNCTION_16_6(0xE200000000000000LL);
}

uint64_t sub_1D57C4()
{
  return OUTLINED_FUNCTION_16_6(0xED00006172656D61LL);
}

uint64_t sub_1D58C0()
{
  return OUTLINED_FUNCTION_16_6(0xE900000000000079LL);
}

uint64_t sub_1D5948(uint64_t a1)
{
  return OUTLINED_FUNCTION_16_6(0xE400000000000000LL);
}

uint64_t sub_1D59CC()
{
  return OUTLINED_FUNCTION_16_6(0xE700000000000000LL);
}

uint64_t sub_1D5A6C()
{
  return OUTLINED_FUNCTION_16_6(0xE90000000000006BLL);
}

uint64_t sub_1D5B7C(uint64_t a1)
{
  return OUTLINED_FUNCTION_16_6(0xE200000000000000LL);
}

uint64_t sub_1D5C94()
{
  return OUTLINED_FUNCTION_16_6(v0);
}

uint64_t sub_1D5D3C()
{
  return OUTLINED_FUNCTION_16_6(v0);
}

uint64_t sub_1D5EB0()
{
  return OUTLINED_FUNCTION_16_6(v0);
}

uint64_t sub_1D5F40(uint64_t a1)
{
  return OUTLINED_FUNCTION_16_6(0xEA00000000006574LL);
}

uint64_t sub_1D6084()
{
  return OUTLINED_FUNCTION_16_6(0xEB00000000656D75LL);
}

uint64_t sub_1D65B8()
{
  return OUTLINED_FUNCTION_16_6(v0);
}

uint64_t sub_1D6738(uint64_t a1)
{
  return OUTLINED_FUNCTION_16_6(0xEC00000032676F6CLL);
}

uint64_t sub_1D6938(uint64_t a1)
{
  return OUTLINED_FUNCTION_16_6(0xEC00000074636174LL);
}

uint64_t sub_1D6E14()
{
  return OUTLINED_FUNCTION_16_6(v0);
}

uint64_t sub_1D6F8C()
{
  return OUTLINED_FUNCTION_16_6(v0);
}

uint64_t sub_1D7030()
{
  return OUTLINED_FUNCTION_16_6(v0);
}

uint64_t sub_1D7170()
{
  return OUTLINED_FUNCTION_16_6(v0);
}

uint64_t sub_1D73F4(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_16_6(0xED00006F65646956LL);
}

uint64_t specialized RawRepresentable<>.hash(into:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = a3(a2);
  uint64_t v6 = v5;
  String.hash(into:)(a1, v4, v5);
  return OUTLINED_FUNCTION_16_6(v6);
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, uint64_t a2)
{
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if ((v2 & 1) != 0) {
    int v3 = 0x636972656E6567LL;
  }
  else {
    int v3 = 0x79616C50726163LL;
  }
  OUTLINED_FUNCTION_4_76((uint64_t)v4, v3);
  OUTLINED_FUNCTION_72_16();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))UnsupportedFlowCATsSimple.Properties.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))UnsupportedFlowCATPatternsIdentifiers.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))UnsupportedFlowCATs.Properties.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))UnsupportedPhoneCall.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))AnnounceIncomingCallCATs.Properties.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))FaceTimeMessageControllerFlow.State.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if (v2)
  {
    if (v2 == 1) {
      int v3 = 0x46676E6974696177LL;
    }
    else {
      int v3 = 0x6365527475706E69LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_41_25();
  }

  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))AddCallParticipantCATs.Properties.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if (v2)
  {
    if (v2 == 1) {
      int v3 = 0x646C6F486E4FLL;
    }
    else {
      int v3 = 0x676E69676E6952LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_16_45();
  }

  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if ((v2 & 1) != 0) {
    int v3 = 0x6F725074726F6873LL;
  }
  else {
    int v3 = 0x6D6F7250676E6F6CLL;
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))AddCallParticipantCATsSimple.Properties.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if ((v2 & 1) != 0) {
    int v3 = 1735289202LL;
  }
  else {
    int v3 = 6579297LL;
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))AddCallParticipantCATPatternsIdentifiers.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PostCallInquiryAnswerCallCATs.Properties.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))AnswerCallCATsSimple.IntentHandledResponseDialogIds.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))SiriPhoneDefaultsKey.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.UnsupportedPreferredCallProviderDialogIds.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if (v2)
  {
    if (v2 == 1) {
      int v3 = 0x756F687469575446LL;
    }
    else {
      int v3 = 0x636972656E6547LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_45_19();
  }

  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if (v2) {
    int v3 = 0x6423317473726966LL;
  }
  else {
    OUTLINED_FUNCTION_74_13();
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.UnsupportedPreferredCallProviderTelephonyUnsupportedDialogIds.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if ((v2 & 1) != 0) {
    int v3 = 0x32676F6C616964LL;
  }
  else {
    int v3 = 0x6E776F6E6B6E55LL;
  }
  OUTLINED_FUNCTION_4_76((uint64_t)v4, v3);
  OUTLINED_FUNCTION_72_16();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.Properties.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.ConfirmAppDialogIds.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.RelationshipDialogIds.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.ConfirmContactsDialogIds.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  OUTLINED_FUNCTION_71_13();
  if (v2) {
    int v3 = 0x32676F6C616964LL;
  }
  else {
    int v3 = 0xD000000000000016LL;
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.ErrorWithCodeAirplaneModeEnabledDialogIds.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.EmergencyCountdownDialogIds.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  OUTLINED_FUNCTION_71_13();
  if (v2) {
    int v3 = 0x436D7269666E6F43LL;
  }
  else {
    int v3 = 0xD000000000000012LL;
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.DisambiguateContactsDialogIds.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.IntentHandledResponseDialogIds.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.DisambiguateAppsVoiceModeDialogIds.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.DisambiguateContactsHandlesDialogIds.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  OUTLINED_FUNCTION_71_13();
  if (v2) {
    int v3 = 0xD00000000000001ELL;
  }
  else {
    int v3 = 0x65766947656D6153LL;
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.IntentHandledResponseEmergencyDialogIds.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.UnsupportedContactsInvalidHandleDialogIds.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.UnsupportedContactsNoContactFoundDialogIds.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.UnsupportedContactsNoHandleForLabelDialogIds.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATsSimple.IntentConfirmationWithRestrictedContactsDialogIds.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATPatternsIdentifiers.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))StartCallCATs.Properties.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))AnswerCallCATs.Properties.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))HangUpCallCATsSimple.Properties.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))HangUpCallCATs.Properties.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))SearchCallHistoryCATs.Properties.rawValue.getter);
}

{
  char v2;
  uint64_t v2 = a2;
  OUTLINED_FUNCTION_12_20(a1, a2);
  __asm { BR              X10 }

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))SearchCallHistoryCATsSimple.Properties.rawValue.getter);
}

{
  char v2;
  uint64_t v2 = a2;
  OUTLINED_FUNCTION_12_20(a1, a2);
  __asm { BR              X10 }

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  OUTLINED_FUNCTION_71_13();
  if (v2) {
    int v3 = 0xD000000000000014LL;
  }
  else {
    int v3 = 0x31676F6C616964LL;
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if ((v2 & 1) != 0) {
    int v3 = 0xD000000000000015LL;
  }
  else {
    int v3 = 0x32676F6C616964LL;
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds.rawValue.getter);
}

{
  uint64_t v2;
  _BYTE v3[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  OUTLINED_FUNCTION_64_14();
  OUTLINED_FUNCTION_4_76((uint64_t)v3, v2);
  OUTLINED_FUNCTION_72_16();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))SearchCallHistoryCATPatternsIdentifiers.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))OngoingCallCATsSimple.NewCallPromptDialogIds.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))OngoingCallCATsSimple.Properties.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if ((v2 & 1) != 0) {
    int v3 = 0x636972656E6567LL;
  }
  else {
    int v3 = 0x656D695465636166LL;
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if (v2)
  {
    if (v2 == 1) {
      int v3 = 0x654E646E41646E65LL;
    }
    else {
      int v3 = 0x4E646E41646C6F68LL;
    }
  }

  else
  {
    int v3 = 6579297LL;
  }

  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))OngoingCallCATs.Properties.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if ((v2 & 1) != 0) {
    int v3 = 0x6C61436F54646461LL;
  }
  else {
    int v3 = 0x6C6C614377656ELL;
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))AnnounceCallBellCATsSimple.Properties.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if ((v2 & 1) != 0) {
    int v3 = 0x32676F6C616964LL;
  }
  else {
    int v3 = 0x6573557473726946LL;
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))AnnounceCallBellCATs.Properties.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneAppResolutionLogger.CodePathId.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if (v2)
  {
    if (v2 == 1) {
      int v3 = 0x7461446567616D69LL;
    }
    else {
      int v3 = 0x63417463656C6573LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_105_5();
  }

  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneAppSelectionSignalsGathererType.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))CallControlUsoIdentifiers.PhoneSetting.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if (v2)
  {
    if (v2 == 1) {
      int v3 = 0x6563696F76LL;
    }
    else {
      int v3 = 0x656D756C6F76LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_56_15();
  }

  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneStartCallIntent.CodingKeys.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneSearchCallHistoryIntent.CodingKeys.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneIncomingCall.CodingKeys.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallAudioRoute.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if ((v2 & 1) != 0) {
    int v3 = 0x6F65646976LL;
  }
  else {
    int v3 = 0x6F69647561LL;
  }
  OUTLINED_FUNCTION_49_18((uint64_t)v4, v3);
  OUTLINED_FUNCTION_99_8();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallCommonCATs.Properties.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if ((v2 & 1) != 0) {
    int v3 = 0x6C69616D65LL;
  }
  else {
    int v3 = 0x656E6F6870LL;
  }
  OUTLINED_FUNCTION_49_18((uint64_t)v4, v3);
  OUTLINED_FUNCTION_99_8();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  char v2;
  char v3;
  uint64_t v4;
  _BYTE v5[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if (v2)
  {
    OUTLINED_FUNCTION_97_10();
    if (v3) {
      uint64_t v4 = 1836020326LL;
    }
    else {
      uint64_t v4 = 1752459639LL;
    }
  }

  else
  {
    uint64_t v4 = 28532LL;
  }

  OUTLINED_FUNCTION_5_71((uint64_t)v5, v4);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallControlCATs.Properties.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallNLConstants.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallConfirmation.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallControlAction.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallVerbSemantics.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallControlNLIntent.Verb.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallControlNLIntent.Target.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallDestinationType.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallDisplayTextCATs.Properties.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallCommonCATsSimple.Properties.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallContactReference.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallControlCATsSimple.CallControlDialogIds.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallControlCATsSimple.Properties.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if (v2)
  {
    if (v2 == 1) {
      int v3 = 0x6C6F566B63656863LL;
    }
    else {
      int v3 = 0x636972656E6567LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_40_20();
  }

  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if (v2)
  {
    if (v2 == 1) {
      int v3 = 0x656D697465636166LL;
    }
    else {
      int v3 = 0x7261506472696874LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_51_14();
  }

  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  char v2;
  uint64_t v2 = a2;
  OUTLINED_FUNCTION_12_20(a1, a2);
  __asm { BR              X10 }

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallDisplayTextCATsSimple.Properties.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if ((v2 & 1) != 0) {
    int v3 = 0x656E6F6850657375LL;
  }
  else {
    int v3 = 0x68506E6F4E657375LL;
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if ((v2 & 1) != 0) {
    int v3 = 0x7261506472696874LL;
  }
  else {
    int v3 = 0x7261507473726966LL;
  }
  OUTLINED_FUNCTION_92_10((uint64_t)v4, v3);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if (v2)
  {
    if (v2 == 1) {
      int v3 = 28532LL;
    }
    else {
      int v3 = 0x6F68576F74LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_48_17();
  }

  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  char v2;
  _BYTE v3[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if (!v2) {
    OUTLINED_FUNCTION_103_7();
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v3, 0x2331686374697773LL);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if (v2)
  {
    if (v2 == 1) {
      int v3 = 0x6C61636F4C6E6F6ELL;
    }
    else {
      int v3 = 1701736302LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_101_7();
  }

  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallCommonCATPatternsIdentifiers.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallNoun.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallVerb.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if ((v2 & 1) != 0) {
    int v3 = 0x644970756F7267LL;
  }
  else {
    int v3 = 0x6D614E70756F7267LL;
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if ((v2 & 1) != 0) {
    int v3 = 0x7069636974726170LL;
  }
  else {
    int v3 = 0x7954657469766E69LL;
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallRecord.CodingKeys.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if ((v2 & 1) != 0) {
    int v3 = 0x6E6F697461727564LL;
  }
  else {
    int v3 = 0x73456F54656D6974LL;
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallProvider.CodingKeys.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallAttribute.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallReference.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))PhoneCallSlotNames.rawValue.getter);
}

{
  char v2;
  char v3;
  uint64_t v4;
  _BYTE v5[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if (v2)
  {
    OUTLINED_FUNCTION_97_10();
    if (v3) {
      uint64_t v4 = 1886352499LL;
    }
    else {
      uint64_t v4 = 0x746165706572LL;
    }
  }

  else
  {
    OUTLINED_FUNCTION_68_18();
  }

  OUTLINED_FUNCTION_5_71((uint64_t)v5, v4);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if ((v2 & 1) != 0) {
    int v3 = 0x6C61636F6CLL;
  }
  else {
    int v3 = 0x6E676965726F66LL;
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))DucFamilyNames.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))SuggestionsCATs.Properties.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))ParseTypeLogging.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))ContactSourceType.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))FollowUpOfferType.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))ReaderNLConstants.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if ((v2 & 1) != 0) {
    int v3 = 0x6143657461657263LL;
  }
  else {
    int v3 = 0x73746E65636572LL;
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))SlotResolutionError.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if (v2)
  {
    OUTLINED_FUNCTION_44_19();
    OUTLINED_FUNCTION_35_28();
  }

  else
  {
    OUTLINED_FUNCTION_37_28();
  }

  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))AnnounceVoicemailCATsSimple.Properties.rawValue.getter);
}

{
  char v2;
  uint64_t v2 = a2;
  OUTLINED_FUNCTION_12_20(a1, a2);
  OUTLINED_FUNCTION_47_19();
  __asm { BR              X10 }

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))SuggestionsCATsSimple.Properties.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  OUTLINED_FUNCTION_71_13();
  if (v2) {
    int v3 = 0xD000000000000015LL;
  }
  else {
    int v3 = 0x6F56746165706572LL;
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))VoicemailVerbSemantics.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))SpecifyingContactAddress.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))IdentifyIncomingCallerCATsSimple.Properties.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if ((v2 & 1) != 0) {
    int v3 = 0xD000000000000015LL;
  }
  else {
    int v3 = 0x746163696C707041LL;
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))UsoIdentifierNamespaceType.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds.rawValue.getter);
}

{
  uint64_t v2;
  _BYTE v3[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  OUTLINED_FUNCTION_102_5();
  OUTLINED_FUNCTION_49_18((uint64_t)v3, v2);
  OUTLINED_FUNCTION_99_8();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))ForcedAppDisambiguationPhase.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))AnnounceVoicemailDirectAction.CodingKeys.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if ((v2 & 1) != 0) {
    int v3 = 0x6D69547472617473LL;
  }
  else {
    int v3 = 0x69546C65636E6163LL;
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))AnnounceGroupFaceTimeInviteCATPatternsIdentifiers.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))TrialSmartAppSelectionConfigKey.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))IdentifyIncomingCallerCATsSimple.IntentHandledResponseDialogIds.rawValue.getter);
}

{
  _BYTE v3[72];
  OUTLINED_FUNCTION_12_20(a1, a2);
  OUTLINED_FUNCTION_5_71((uint64_t)v3, a2);
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if ((v2 & 1) != 0) {
    int v3 = 0x32676F6C616964LL;
  }
  else {
    int v3 = 0x31676F6C616964LL;
  }
  OUTLINED_FUNCTION_4_76((uint64_t)v4, v3);
  OUTLINED_FUNCTION_72_16();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (uint64_t (*)(uint64_t))LogTag.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  _BYTE v4[72];
  OUTLINED_FUNCTION_7_77(a1, a2);
  if ((v2 & 1) != 0) {
    int v3 = 0x6563696F76LL;
  }
  else {
    int v3 = 0x69616D6563696F76LL;
  }
  OUTLINED_FUNCTION_5_71((uint64_t)v4, v3);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)( a1,  a2,  (uint64_t (*)(uint64_t))VoiceMail.VoiceMailVerb.rawValue.getter);
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1)
{
}

{
  OUTLINED_FUNCTION_11_62(a1, 18LL);
}

{
  OUTLINED_FUNCTION_11_62(a1, 24LL);
}

{
  OUTLINED_FUNCTION_3_88(a1, 0x636972656E6567LL);
}

{
  OUTLINED_FUNCTION_30_32(a1, 0x6C646E7542707061LL);
}

{
  OUTLINED_FUNCTION_57_14(a1, 0x6573756170LL);
}

{
  OUTLINED_FUNCTION_20_46(a1, 1953720684LL);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)(a1, 0x6F68706F7263696DLL);
}

{
  OUTLINED_FUNCTION_53_20(a1, 0x56495443415F4F4ELL);
}

{
  OUTLINED_FUNCTION_20_46(a1, 1852403562LL);
}

{
  OUTLINED_FUNCTION_20_46(a1, 1954047342LL);
}

{
  OUTLINED_FUNCTION_23_43(a1, 0x6C65636E6163LL);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)(a1, 0x746E6F436E65706FLL);
}

{
  OUTLINED_FUNCTION_3_88(a1, 0x6C6C614377656ELL);
}

{
  OUTLINED_FUNCTION_57_14(a1, 0x6C6562616CLL);
}

{
  OUTLINED_FUNCTION_23_43(a1, 0x65676E616863LL);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)(a1, 0x64656C65636E6163LL);
}

{
  OUTLINED_FUNCTION_20_46(a1, 1819042147LL);
}

{
  OUTLINED_FUNCTION_3_88(a1, 0x7070416E65706FLL);
}

{
  OUTLINED_FUNCTION_30_32(a1, 0x6974746553707061LL);
}

{
  OUTLINED_FUNCTION_32_32(a1, 0x697263736E617254LL);
}

{
  OUTLINED_FUNCTION_3_88(a1, 0x6E776F6E6B6E75LL);
}

{
  OUTLINED_FUNCTION_32_32(a1, 0x6553657461647075LL);
}

{
  OUTLINED_FUNCTION_11_62(a1, 17LL);
}

{
  OUTLINED_FUNCTION_32_32(a1, 0x636E656772656D65LL);
}

{
  OUTLINED_FUNCTION_23_43(a1, 0x74706D6F7270LL);
}

{
  OUTLINED_FUNCTION_53_20(a1, 0x75466E6F73726570LL);
}

{
  OUTLINED_FUNCTION_30_32(a1, 0x747369486C6C6163LL);
}

{
  OUTLINED_FUNCTION_11_62(a1, 16LL);
}

{
  OUTLINED_FUNCTION_11_62(a1, 21LL);
}

{
  OUTLINED_FUNCTION_11_62(a1, 21LL);
}

void sub_1D7D68(uint64_t a1, ...)
{
}

void sub_1D7E18(uint64_t a1, ...)
{
}

void specialized RawRepresentable<>._rawHashValue(seed:)()
{
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_96_6();
  specialized RawRepresentable<>._rawHashValue(seed:)(v0, v1);
}

void sub_1D85D4(uint64_t a1, ...)
{
}

void sub_1D8D84(uint64_t a1, ...)
{
}

void specialized RawRepresentable<>._rawHashValue(seed:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = a2 & 1;
  OUTLINED_FUNCTION_12_20(a1, a2);
  uint64_t v5 = a3(v4);
  OUTLINED_FUNCTION_5_71((uint64_t)v6, v5);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

{
  uint64_t v5;
  _BYTE v6[72];
  OUTLINED_FUNCTION_12_20(a1, a2);
  uint64_t v5 = a3(a2);
  OUTLINED_FUNCTION_5_71((uint64_t)v6, v5);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, Swift::UInt a2)
{
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo13SABaseCommandCG_AGs5NeverOTg50139_s27PhoneCallFlowDelegatePlugin09HangUpAndB20HandleIntentStrategyC22makePostDialogCommands22intentResolutionRecord16dialogTemplatingSaySo13dE103CG07SiriKitC00jqR0VySo07INStartbJ0CSo0ybJ8ResponseCG_AA05Startb3CatT7ServiceCSgtYaKFA2HcACcfu1_A2Hcfu2_0hijK6Plugin0mnoiqrS0CTf1cn_n( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (v4)
  {
    while (1)
    {
      unint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)(v4);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = 0LL;
      while (v4 != v6)
      {
        if ((a1 & 0xC000000000000001LL) != 0) {
          id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
        }
        else {
          id v7 = *(id *)(a1 + 8 * v6 + 32);
        }
        uint64_t v8 = v7;
        ++v6;
        id v9 = HangUpAndCallHandleIntentStrategy.wrapLaunchAppWithHangUp(command:)(v7);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
        uint64_t v11 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
        uint64_t v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
        specialized ContiguousArray._endMutation()(v12);
        if (v4 == v6) {
          goto LABEL_16;
        }
      }

      __break(1u);
LABEL_12:
      if (a1 < 0) {
        uint64_t v13 = a1;
      }
      else {
        uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v13);
      swift_bridgeObjectRelease();
      if (!v4) {
        goto LABEL_16;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_16:
    swift_release(a2);
    return _swiftEmptyArrayStorage;
  }

  return result;
}

uint64_t HangUpAndCallHandleIntentStrategy.__allocating_init(sharedGlobals:options:)(uint64_t a1, uint64_t a2)
{
  return HangUpAndCallHandleIntentStrategy.init(sharedGlobals:options:)(a1, a2);
}

uint64_t HangUpAndCallHandleIntentStrategy.init(sharedGlobals:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for CATOption(0LL);
  __chkstk_darwin();
  *(void *)(v3 + direct field offset for HangUpAndCallHandleIntentStrategy.options) = a2;
  outlined init with copy of SignalProviding(a1, (uint64_t)v10);
  type metadata accessor for StartCallCATsSimple(0LL);
  OUTLINED_FUNCTION_104_0();
  uint64_t v6 = OUTLINED_FUNCTION_85_8();
  type metadata accessor for PhoneCallDisplayTextCATsSimple(0LL);
  OUTLINED_FUNCTION_104_0();
  uint64_t v7 = OUTLINED_FUNCTION_85_8();
  uint64_t v8 = specialized CallingIntentContinueInAppStrategy.init(sharedGlobals:startCallCATsSimple:phoneCallDisplayTextCATsSimple:)( v10,  v6,  v7);
  OUTLINED_FUNCTION_11_12();
  return v8;
}

uint64_t specialized CallingIntentContinueInAppStrategy.init(sharedGlobals:startCallCATsSimple:phoneCallDisplayTextCATsSimple:)( __int128 *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + direct field offset for CallingIntentContinueInAppStrategy.additionalCommands) = _swiftEmptyArrayStorage;
  outlined init with take of AppSelectionSignalComponent(a1, v3 + 16);
  *(void *)(v3 + 56) = a2;
  *(void *)(v3 + 64) = a3;
  return v3;
}

uint64_t HangUpAndCallHandleIntentStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:)( uint64_t a1, uint64_t a2)
{
  v3[11] = a2;
  v3[12] = v2;
  v3[10] = a1;
  return swift_task_switch( HangUpAndCallHandleIntentStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:),  0LL,  0LL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_s *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t ObjectType;
  os_log_s *v33;
  os_log_type_t v34;
  uint8_t *v35;
  _BYTE v37[80];
  uint64_t v5 = *(void **)(*(void *)(v3 + 96) + direct field offset for HangUpAndCallHandleIntentStrategy.options);
  if (!v5[2]) {
    goto LABEL_27;
  }
  OUTLINED_FUNCTION_12_20(v5[5], a2);
  String.hash(into:)(v37, 0x654E646E41646E65LL, 0xED00006C6C614377LL);
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_109_8();
  OUTLINED_FUNCTION_108_4();
  if ((v7 & 1) != 0)
  {
    do
    {
      if (*(_BYTE *)(v5[6] + v4))
      {
        if (*(_BYTE *)(v5[6] + v4) != 2)
        {
          swift_bridgeObjectRelease();
LABEL_20:
          uint64_t v16 = *(void *)(v3 + 120);
          uint64_t v17 = *(void *)(v3 + 96);
          swift_retain();
          uint64_t v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo13SABaseCommandCG_AGs5NeverOTg50139_s27PhoneCallFlowDelegatePlugin09HangUpAndB20HandleIntentStrategyC22makePostDialogCommands22intentResolutionRecord16dialogTemplatingSaySo13dE103CG07SiriKitC00jqR0VySo07INStartbJ0CSo0ybJ8ResponseCG_AA05Startb3CatT7ServiceCSgtYaKFA2HcACcfu1_A2Hcfu2_0hijK6Plugin0mnoiqrS0CTf1cn_n( v16,  v17);
          OUTLINED_FUNCTION_39();
          return (*(uint64_t (**)(void *))(v3 + 8))(v18);
        }

        uint64_t v2 = 30565LL;
        OUTLINED_FUNCTION_67_16();
      }

      else
      {
        uint64_t v2 = 0xE300000000000000LL;
        uint64_t v8 = 6579297LL;
      }

      id v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v2, 0x654E646E41646E65LL, 0xED00006C6C614377LL, 0LL);
      OUTLINED_FUNCTION_39();
      if ((v9 & 1) != 0) {
        goto LABEL_20;
      }
      OUTLINED_FUNCTION_55_14();
    }

    while ((v10 & 1) != 0);
  }

  if (!v5[2]
    || (OUTLINED_FUNCTION_12_20(v5[5], v6),
        String.hash(into:)(v37, 0x4E646E41646C6F68LL, 0xEE006C6C61437765LL),
        OUTLINED_FUNCTION_11_17(),
        OUTLINED_FUNCTION_109_8(),
        OUTLINED_FUNCTION_108_4(),
        (v11 & 1) == 0))
  {
LABEL_27:
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(a1);
    uint64_t v34 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_27_1(v34))
    {
      uint64_t v35 = (uint8_t *)OUTLINED_FUNCTION_1_0();
      *(_WORD *)uint64_t v35 = 0;
      OUTLINED_FUNCTION_5( &dword_0,  v33,  (os_log_type_t)v2,  "#HangUpAndCallHandleIntentStrategy Unexpected case: sending default continueInApp commands",  v35);
      OUTLINED_FUNCTION_0_2((uint64_t)v35);
    }

    goto LABEL_30;
  }

  LOBYTE(OUTLINED_FUNCTION_5_71(v1, v2) = v3 + 16;
  while (!*(_BYTE *)(v5[6] + v4))
  {
    uint64_t v13 = 0xE300000000000000LL;
    uint64_t v12 = 6579297LL;
LABEL_16:
    uint64_t v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, 0x4E646E41646C6F68LL, 0xEE006C6C61437765LL, 0LL);
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0) {
      goto LABEL_22;
    }
    OUTLINED_FUNCTION_55_14();
    if ((v15 & 1) == 0) {
      goto LABEL_27;
    }
  }

  if (*(_BYTE *)(v5[6] + v4) == 1)
  {
    uint64_t v12 = 0x654E646E41646E65LL;
    uint64_t v13 = 0xED00006C6C614377LL;
    goto LABEL_16;
  }

  swift_bridgeObjectRelease();
LABEL_22:
  NSString v19 = *(void **)(v3 + 96);
  NSString v20 = v19[5];
  NSString v21 = v19[6];
  __swift_project_boxed_opaque_existential_1(v19 + 2, v20);
  (*(void (**)(uint64_t, uint64_t))(v21 + 120))(v20, v21);
  id v22 = *(void *)(v3 + 40);
  uint64_t v23 = *(void *)(v3 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v3 + 16), v22);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 24))(v22, v23);
  if (!v24)
  {
    a1 = OUTLINED_FUNCTION_11_12();
    goto LABEL_27;
  }

  uint64_t v26 = v24;
  id v27 = v25;
  uint64_t v28 = *(os_log_s **)(v3 + 104);
  uint64_t v29 = OUTLINED_FUNCTION_11_12();
  Logger.logObject.getter(v29);
  uint64_t v30 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_27_1(v30))
  {
    uint64_t v31 = (uint8_t *)OUTLINED_FUNCTION_1_0();
    *(_WORD *)uint64_t v31 = 0;
    OUTLINED_FUNCTION_5( &dword_0,  v28,  (os_log_type_t)(v3 + 16),  "#HangUpAndCallHandleIntentStrategy Holding call and sending default continueInApp commands",  v31);
    OUTLINED_FUNCTION_0_2((uint64_t)v31);
  }

  uint64_t ObjectType = swift_getObjectType(v26);
  (*(void (**)(uint64_t, uint64_t))(v27 + 200))(ObjectType, v27);
  swift_unknownObjectRelease(v26);
LABEL_30:
  uint64_t v18 = *(void **)(v3 + 120);
  return (*(uint64_t (**)(void *))(v3 + 8))(v18);
}

uint64_t HangUpAndCallHandleIntentStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v1 = v0[12];
  uint64_t v2 = OUTLINED_FUNCTION_15_1();
  uint64_t v3 = (os_log_s *)__swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  v0[13] = v3;
  uint64_t v4 = swift_retain_n(v1, 2LL);
  Logger.logObject.getter(v4);
  os_log_type_t v5 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_27_1(v5))
  {
    uint64_t v6 = swift_slowAlloc(22LL, -1LL);
    uint64_t v7 = swift_slowAlloc(64LL, -1LL);
    uint64_t v16 = v7;
    *(_DWORD *)uint64_t v6 = 136315394;
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000040LL, 0x800000000034D050LL, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v6 + 4);
    *(_WORD *)(v6 + 12) = 2080;
    unint64_t v8 = lazy protocol witness table accessor for type OngoingCallOfferOptions and conformance OngoingCallOfferOptions();
    uint64_t v9 = swift_bridgeObjectRetain();
    uint64_t v10 = Set.description.getter(v9, &type metadata for OngoingCallOfferOptions, v8);
    unint64_t v12 = v11;
    swift_bridgeObjectRelease();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v6 + 14);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_8_6();
    _os_log_impl( &dword_0,  v3,  (os_log_type_t)v3,  "#HangUpAndCallHandleIntentStrategy %s, options: %s",  (uint8_t *)v6,  0x16u);
    swift_arrayDestroy(v7, 2LL);
    OUTLINED_FUNCTION_0_2(v7);
    OUTLINED_FUNCTION_0_2(v6);
  }

  else
  {
    OUTLINED_FUNCTION_8_6();
  }

  uint64_t v13 = (void *)swift_task_alloc(unk_437FFC);
  v0[14] = v13;
  *uint64_t v13 = v0;
  v13[1] = HangUpAndCallHandleIntentStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:);
  return v15(v0[10]);
}

uint64_t HangUpAndCallHandleIntentStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:)( uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 112);
  uint64_t v4 = *v2;
  *(void *)(v4 + 120) = a1;
  *(void *)(v4 + 128) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v4 + 8));
  }
  else {
    return swift_task_switch( HangUpAndCallHandleIntentStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:),  0LL,  0LL);
  }
}

uint64_t specialized CallingIntentContinueInAppStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:)( uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INStartCallIntent, INStartCallIntentResponse>);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  _BYTE v2[8] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( specialized CallingIntentContinueInAppStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:),  0LL,  0LL);
}

uint64_t specialized CallingIntentContinueInAppStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:)()
{
  uint64_t v4 = v2[7];
  uint64_t v3 = v2[8];
  uint64_t v5 = v2[6];
  uint64_t v6 = v2[4];
  v2[2] = _swiftEmptyArrayStorage;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v7 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v7, (uint64_t)static Logger.siriPhone);
  os_log_type_t v8 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_27_1(v8))
  {
    uint64_t v9 = (uint8_t *)OUTLINED_FUNCTION_1_0();
    *(_WORD *)uint64_t v9 = 0;
    OUTLINED_FUNCTION_5( &dword_0,  v1,  v0,  "#CallingIntentContinueInAppStrategy: Building launch app command for INStartCallIntent",  v9);
    OUTLINED_FUNCTION_0_2((uint64_t)v9);
  }

  uint64_t v10 = v2[8];
  uint64_t v11 = v2[5];

  uint64_t v12 = swift_task_alloc(32LL);
  void v2[9] = v12;
  *(void *)(v12 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v2[10] = v13;
  uint64_t v14 = type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent,  &OBJC_CLASS___SAIntentGroupLaunchAppWithIntent_ptr);
  *uint64_t v13 = v2;
  v13[1] = specialized CallingIntentContinueInAppStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v2 + 3,  0LL,  0LL,  0xD000000000000040LL,  0x800000000034D050LL,  partial apply for specialized closure #1 in CallingIntentContinueInAppStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:),  v12,  v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 72);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v4);
    uint64_t v5 = specialized CallingIntentContinueInAppStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:);
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 72));
    uint64_t v5 = specialized CallingIntentContinueInAppStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:);
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 64);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 56) + 8LL))(v1, *(void *)(v0 + 48));
  swift_task_dealloc(v1);
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  id v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  (*(void (**)(void, void))(*(void *)(v0 + 56) + 8LL))(*(void *)(v0 + 64), *(void *)(v0 + 48));
  uint64_t v1 = *(id *)(v0 + 24);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v1);
  uint64_t v3 = *(void *)((char *)&dword_10 + (*(void *)(v0 + 16) & 0xFFFFFFFFFFFFFF8LL));
  uint64_t v2 = *(void *)((char *)&dword_18 + (*(void *)(v0 + 16) & 0xFFFFFFFFFFFFFF8LL));
  if (v3 >= v2 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1, v3 + 1, 1LL);
  }
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v3, v1);
  specialized Array._endMutation()(v5, v6, v7, v8);

  uint64_t v9 = *(void *)(v0 + 16);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
}

id HangUpAndCallHandleIntentStrategy.wrapLaunchAppWithHangUp(command:)(void *a1)
{
  void (*v23)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v36;
  os_log_s *v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  id v42;
  void v43[5];
  _BYTE v44[56];
  void __dst[22];
  __int128 v46;
  void v47[4];
  uint64_t v48;
  uint64_t v49;
  uint64_t v2 = objc_opt_self(&OBJC_CLASS___SAIntentGroupLaunchAppWithIntent);
  uint64_t v3 = swift_dynamicCastObjCClass(a1, v2);
  uint64_t v4 = one-time initialization token for siriPhone;
  if (v3)
  {
    uint64_t v5 = v3;
    id v6 = a1;
    if (v4 != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v7 = OUTLINED_FUNCTION_15_1();
    os_log_type_t v8 = (os_log_s *)OUTLINED_FUNCTION_12_1(v7, (uint64_t)static Logger.siriPhone);
    os_log_type_t v10 = static os_log_type_t.debug.getter(v8, v9);
    if (OUTLINED_FUNCTION_10(v10))
    {
      uint64_t v11 = (uint8_t *)OUTLINED_FUNCTION_1_0();
      *(_WORD *)uint64_t v11 = 0;
      OUTLINED_FUNCTION_5( &dword_0,  v8,  (os_log_type_t)v1,  "#HangUpAndCallHandleIntentStrategy HandleIntent(INHangUpCallIntent) before LaunchAppWithIntent",  v11);
      OUTLINED_FUNCTION_0_2((uint64_t)v11);
    }

    id v12 = [objc_allocWithZone(SAResultCallback) init];
    [v12 setCode:SAResultCallbackAnySuccessCodeValue];
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v14 = OUTLINED_FUNCTION_8_2(v13, 40LL);
    *(_OWORD *)(v14 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31FE60;
    *(void *)(v14 + 32) = v5;
    __dst[0] = v14;
    specialized Array._endMutation()(v14, v15, v16, v17);
    uint64_t v42 = v6;
    outlined bridged method (mbnn) of @objc SAResultCallback.commands.setter();
    id v18 = [objc_allocWithZone(INHangUpCallIntent) init];
    if (one-time initialization token for instance != -1) {
      swift_once(&one-time initialization token for instance, one-time initialization function for instance);
    }
    memcpy(__dst, &static PhoneCallFeatureFlags.instance, sizeof(__dst));
    uint64_t v19 = type metadata accessor for PhoneCallFeatureManager();
    uint64_t inited = swift_initStackObject(v19, v44);
    v47[1] = &type metadata for PhoneCallFeatureFlags;
    v47[2] = &protocol witness table for PhoneCallFeatureFlags;
    *(void *)&uint64_t v46 = OUTLINED_FUNCTION_8_2((uint64_t)&unk_40BFC0, 192LL);
    memcpy((void *)(v46 + 16), __dst, 0xB0uLL);
    outlined init with take of AppSelectionSignalComponent(&v46, inited + 16);
    uint64_t v22 = v1[5];
    uint64_t v21 = v1[6];
    __swift_project_boxed_opaque_existential_1(v1 + 2, v22);
    uint64_t v23 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v21 + 8);
    outlined retain of PhoneCallFeatureFlags(__dst);
    v23(v43, v22, v21);
    FirstPartyAnnotatedAppStore.getDefaultApp(for:)(v43, (uint64_t)&v46);
    swift_release(inited);
    __swift_destroy_boxed_opaque_existential_1(v43);
    uint64_t v49 = *((void *)&v46 + 1);
    uint64_t v24 = v46;
    outlined release of Set<String>(&v49);
    outlined init with take of String?((uint64_t)v47, (uint64_t)v43);
    outlined release of String?((uint64_t)v43);
    uint64_t v48 = v47[3];
    outlined release of Set<String>(&v48);
    int v25 = swift_retain();
    INIntent.setMetaData(app:previousIntent:sharedGlobals:)(v25, 0LL);
    swift_release(v24);
    type metadata accessor for CNContactStore( 0LL,  &lazy cache variable for type metadata for SAIntentGroupHandleIntent,  &OBJC_CLASS___SAIntentGroupHandleIntent_ptr);
    uint64_t v26 = v18;
    SAIntentGroupHandleIntent.init(intent:appIdentifier:)(v26, 0LL, 0LL);
    uint64_t v28 = v27;
    uint64_t v29 = OUTLINED_FUNCTION_8_2(v13, 40LL);
    *(_OWORD *)(v29 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31FE60;
    *(void *)(v29 + 32) = v12;
    specialized Array._endMutation()(v29, v30, v31, v32);
    uint64_t v33 = v28;
    uint64_t v34 = v12;
    outlined bridged method (mbnn) of @objc SABaseClientBoundCommand.callbacks.setter();

    swift_release(v24);
    return v33;
  }

  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    id v36 = OUTLINED_FUNCTION_15_1();
    char v37 = (os_log_s *)OUTLINED_FUNCTION_12_1(v36, (uint64_t)static Logger.siriPhone);
    uint64_t v39 = static os_log_type_t.debug.getter(v37, v38);
    if (OUTLINED_FUNCTION_10(v39))
    {
      uint64_t v40 = (uint8_t *)OUTLINED_FUNCTION_1_0();
      *(_WORD *)uint64_t v40 = 0;
      OUTLINED_FUNCTION_5( &dword_0,  v37,  (os_log_type_t)v1,  "#HangUpAndCallHandleIntentStrategy Not LaunchApp - no modification to AceCommand",  v40);
      OUTLINED_FUNCTION_0_2((uint64_t)v40);
    }

    return a1;
  }

void HangUpAndCallHandleIntentStrategy.init(sharedGlobals:startCallCATsSimple:phoneCallDisplayTextCATsSimple:)( uint64_t a1, uint64_t a2)
{
}

uint64_t HangUpAndCallHandleIntentStrategy.__ivar_destroyer()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + direct field offset for HangUpAndCallHandleIntentStrategy.options));
}

void *HangUpAndCallHandleIntentStrategy.deinit()
{
  uint64_t v0 = specialized CallingIntentContinueInAppStrategy.deinit();
  swift_bridgeObjectRelease();
  return v0;
}

void *specialized CallingIntentContinueInAppStrategy.deinit()
{
  uint64_t v1 = (char *)v0 + direct field offset for CallingIntentContinueInAppStrategy.authenticationPolicy;
  uint64_t v2 = type metadata accessor for UnlockDevicePolicy(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t HangUpAndCallHandleIntentStrategy.__deallocating_deinit()
{
  uint64_t v0 = specialized CallingIntentContinueInAppStrategy.deinit();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t specialized closure #1 in CallingIntentContinueInAppStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v20[1] = a3;
  type metadata accessor for CATOption(0LL);
  __chkstk_darwin();
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SAIntentGroupLaunchAppWithIntent, Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INStartCallIntent, INStartCallIntentResponse>);
  uint64_t v10 = IntentResolutionRecord.app.getter(v9);
  uint64_t v11 = (void *)IntentResolutionRecord.intent.getter(v9);
  id v12 = (void *)IntentResolutionRecord.intentResponse.getter(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v6);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = (v13 + 16) & ~v13;
  uint64_t v15 = swift_allocObject(&unk_40BFE8, v14 + v8, v13 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))( v15 + v14,  (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v6);
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  uint64_t v16 = (void *)static BiomeEventSender.instance;
  type metadata accessor for UnsupportedFlowCATs(0LL);
  id v17 = v16;
  static CATOption.defaultMode.getter(v17);
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)(v5, 0LL);
  specialized static StartCallRCHFlowDelegate.makeLaunchAppCommandForHandle(app:sharedGlobals:intent:intentResponse:biomeEventSender:unsupportedFlowCats:_:)();

  swift_release(v10);
  swift_release(v15);
  return swift_release(v18);
}

uint64_t type metadata accessor for HangUpAndCallHandleIntentStrategy(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for HangUpAndCallHandleIntentStrategy;
  if (!type metadata singleton initialization cache for HangUpAndCallHandleIntentStrategy) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HangUpAndCallHandleIntentStrategy);
  }
  return result;
}

uint64_t type metadata completion function for HangUpAndCallHandleIntentStrategy(uint64_t a1)
{
  uint64_t v2 = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 256LL, 1LL, &v2, a1 + 264);
}

uint64_t sub_1DA5D0()
{
  return swift_deallocObject(v0, 192LL, 7LL);
}

uint64_t partial apply for specialized closure #1 in CallingIntentContinueInAppStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:)( uint64_t a1)
{
  return specialized closure #1 in CallingIntentContinueInAppStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

uint64_t sub_1DA67C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SAIntentGroupLaunchAppWithIntent, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t _s27PhoneCallFlowDelegatePlugin34CallingIntentContinueInAppStrategyC22makePostDialogCommands22intentResolutionRecord16dialogTemplatingSaySo13SABaseCommandCG07SiriKitC00gqR0Vyxq_G_AA05Startb3CatT7ServiceCSgtYaKFyScCySo019SAIntentGroupLaunchj4WithG0Cs5Error_pGXEfU_ys6ResultOyARsAS_pGYucATcfu_yAWYucfu0_TA( void *a1, char a2)
{
  char v3 = a2 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SAIntentGroupLaunchAppWithIntent, Error>);
  return _s27PhoneCallFlowDelegatePlugin34CallingIntentContinueInAppStrategyC22makePostDialogCommands22intentResolutionRecord16dialogTemplatingSaySo13SABaseCommandCG07SiriKitC00gqR0Vyxq_G_AA05Startb3CatT7ServiceCSgtYaKFyScCySo019SAIntentGroupLaunchj4WithG0Cs5Error_pGXEfU_ys6ResultOyARsAS_pGYucATcfu_yAWYucfu0_( a1,  v3);
}

void OUTLINED_FUNCTION_0_76(uint64_t a1)
{
}

uint64_t OUTLINED_FUNCTION_1_70(uint64_t a1)
{
  return String.hash(into:)(a1, 0x31676F6C616964LL, 0xE700000000000000LL);
}

void OUTLINED_FUNCTION_3_88(uint64_t a1, uint64_t a2)
{
}

uint64_t OUTLINED_FUNCTION_4_76(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, 0xE700000000000000LL);
}

void *OUTLINED_FUNCTION_7_77(uint64_t a1, uint64_t a2, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, a1);
}

void OUTLINED_FUNCTION_11_62(uint64_t a1, uint64_t a2)
{
}

uint64_t OUTLINED_FUNCTION_12_63(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return String.hash(into:)(a1, a2 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a3);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_20_46(uint64_t a1, uint64_t a2)
{
}

void OUTLINED_FUNCTION_23_43(uint64_t a1, uint64_t a2)
{
}

uint64_t OUTLINED_FUNCTION_24_34(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, 0xE600000000000000LL);
}

void OUTLINED_FUNCTION_26_40(uint64_t a1)
{
}

void OUTLINED_FUNCTION_30_32(uint64_t a1, uint64_t a2)
{
}

uint64_t OUTLINED_FUNCTION_31_32(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return String.hash(into:)(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000LL);
}

void OUTLINED_FUNCTION_32_32(uint64_t a1, uint64_t a2)
{
}

uint64_t OUTLINED_FUNCTION_33_41(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return String.hash(into:)(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xED00000000000000LL);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_49_18(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, 0xE500000000000000LL);
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_53_20(uint64_t a1, uint64_t a2)
{
}

uint64_t OUTLINED_FUNCTION_54_14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return String.hash(into:)(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000LL);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_72_16()
{
  return swift_bridgeObjectRelease(0xE700000000000000LL);
}

uint64_t OUTLINED_FUNCTION_73_18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_stdlib_reportUnimplementedInitializer(a1, 61LL, a3, 71LL, 0LL);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_85_8()
{
  return CATWrapperSimple.__allocating_init(options:globals:)(v0, 0LL);
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_92_10(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, 0xEA00000000007974LL);
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_99_8()
{
  return swift_bridgeObjectRelease(0xE500000000000000LL);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

void *ConfirmationViewBuilder.viewTemplate.getter@<X0>(void *a1@<X8>)
{
  return outlined init with copy of ConfirmationViewTemplate((void *)(v1 + 16), a1);
}

void *outlined init with copy of ConfirmationViewTemplate(void *a1, void *a2)
{
  return a2;
}

uint64_t ConfirmationViewBuilder.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 176, a1);
}

uint64_t ConfirmationViewBuilder.__allocating_init(viewTemplate:sharedGlobals:)(const void *a1, __int128 *a2)
{
  uint64_t v5 = swift_allocObject(v2, 216LL, 7LL);
  OUTLINED_FUNCTION_9_62((void *)(v5 + 16), a1);
  outlined init with take of AppSelectionSignalComponent(a2, v5 + 176);
  return v5;
}

uint64_t ConfirmationViewBuilder.init(viewTemplate:sharedGlobals:)(const void *a1, __int128 *a2)
{
  return v2;
}

uint64_t ConfirmationViewBuilder.makeViewsForWatch(utteranceViews:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v66 = [objc_allocWithZone(SASTItemGroup) init];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConfirmationViewTemplate.Button>);
  uint64_t inited = swift_initStackObject(v5, v79);
  *(_OWORD *)(inited + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D880;
  uint64_t v7 = v3[2];
  uint64_t v8 = v3[3];
  uint64_t v9 = v3[4];
  uint64_t v10 = v3[5];
  uint64_t v11 = v4[6];
  uint64_t v12 = v4[7];
  uint64_t v13 = v4[8];
  *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v7;
  *(void *)(inited + 40) = v8;
  *(void *)(inited + 48) = v9;
  *(void *)(inited + 56) = v10;
  *(void *)(inited + 64) = v11;
  *(void *)(inited + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v12;
  *(void *)(inited + 80) = v13;
  uint64_t v14 = v4[10];
  uint64_t v15 = v4[11];
  uint64_t v16 = v4[12];
  uint64_t v18 = v4[13];
  uint64_t v17 = v4[14];
  uint64_t v19 = v4[15];
  *(void *)(inited + 88) = v4[9];
  *(void *)(inited + 96) = v14;
  *(void *)(inited + 104) = v15;
  *(void *)(inited + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v16;
  *(void *)(inited + 120) = v18;
  *(void *)(inited + 128) = v17;
  *(void *)(inited + 136) = v19;
  v77[0] = (uint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain(v19);
  OUTLINED_FUNCTION_8_1();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_48_0();
  swift_unknownObjectRetain(v13);
  OUTLINED_FUNCTION_124();
  swift_bridgeObjectRetain();
  uint64_t v20 = specialized ContiguousArray.reserveCapacity(_:)(2LL);
  OUTLINED_FUNCTION_49(v20, &lazy cache variable for type metadata for SASTButtonItem, &OBJC_CLASS___SASTButtonItem_ptr);
  uint64_t v21 = *(void *)(inited + 32);
  uint64_t v22 = *(void *)(inited + 40);
  uint64_t v23 = *(void *)(inited + 80);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v25 = OUTLINED_FUNCTION_5_32(v24);
  *(_OWORD *)(v25 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31FE60;
  *(void *)(v25 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v23;
  uint64_t v78 = v25;
  OUTLINED_FUNCTION_48_0();
  OUTLINED_FUNCTION_14_50();
  OUTLINED_FUNCTION_36_1();
  uint64_t v26 = OUTLINED_FUNCTION_8_1();
  specialized Array._endMutation()(v26, v27, v28, v29);
  OUTLINED_FUNCTION_36_1();
  OUTLINED_FUNCTION_14_50();
  OUTLINED_FUNCTION_10_55(v21, v22);
  swift_unknownObjectRelease(v23);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_39();
  uint64_t v30 = swift_bridgeObjectRelease();
  uint64_t UniqueAndReserveCapacityIfNot = specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v30);
  OUTLINED_FUNCTION_7_78( UniqueAndReserveCapacityIfNot,  v32,  v33,  v34,  v35,  v36,  v37,  v38,  1LL,  3LL,  v64,  (uint64_t)v66,  a1,  a3,  a2,  v77[0]);
  uint64_t v39 = OUTLINED_FUNCTION_11_63();
  specialized ContiguousArray._endMutation()(v39);
  uint64_t v41 = *(void *)(inited + 88);
  uint64_t v40 = *(void *)(inited + 96);
  uint64_t v42 = *(void *)(inited + 136);
  uint64_t v43 = OUTLINED_FUNCTION_5_32(v24);
  *(_OWORD *)(v43 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v63;
  *(void *)(v43 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v42;
  uint64_t v78 = v43;
  OUTLINED_FUNCTION_124();
  swift_unknownObjectRetain(v42);
  OUTLINED_FUNCTION_8_1();
  uint64_t v44 = OUTLINED_FUNCTION_48_0();
  specialized Array._endMutation()(v44, v45, v46, v47);
  OUTLINED_FUNCTION_8_1();
  swift_unknownObjectRetain(v42);
  OUTLINED_FUNCTION_10_55(v41, v40);
  swift_unknownObjectRelease(v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v48 = OUTLINED_FUNCTION_39();
  uint64_t v49 = specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v48);
  OUTLINED_FUNCTION_7_78( v49,  v50,  v51,  v52,  v53,  v54,  v55,  v56,  v63,  *((uint64_t *)&v63 + 1),  v65,  v67,  v70,  v73,  v75,  v77[0]);
  uint64_t v57 = OUTLINED_FUNCTION_11_63();
  specialized ContiguousArray._endMutation()(v57);
  swift_setDeallocating(inited);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter(v77[0], (uint64_t)v68);
  uint64_t v58 = type metadata accessor for SiriKitAceViewBuilder(0LL);
  uint64_t v59 = v4[25];
  uint64_t v60 = v4[26];
  __swift_project_boxed_opaque_existential_1(v4 + 22, v59);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v60 + 8))(v77, v59, v60);
  dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)(v77);
  __swift_destroy_boxed_opaque_existential_1(v77);
  dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)(v71);
  OUTLINED_FUNCTION_38_6();
  dispatch thunk of SiriKitAceViewBuilder.addButtonGroup(buttonGroup:)(v68);
  uint64_t v61 = swift_release(v58);
  dispatch thunk of SiriKitAceViewBuilder.build()(v61);
  OUTLINED_FUNCTION_38_6();
  v76(v58, 0LL);

  return OUTLINED_FUNCTION_39();
}

void ConfirmationViewBuilder.makeViewsForTV(utteranceViews:_:)( uint64_t a1, void (*a2)(void *, void))
{
}

uint64_t ConfirmationViewBuilder.makeViewsForCar(utteranceViews:_:)( uint64_t a1, void (*a2)(uint64_t, void))
{
  uint64_t v3 = OUTLINED_FUNCTION_49( a1,  &lazy cache variable for type metadata for SAUIConfirmationView,  &OBJC_CLASS___SAUIConfirmationView_ptr);
  uint64_t v4 = v2[7];
  uint64_t v41 = v2[6];
  uint64_t v5 = v2[8];
  OUTLINED_FUNCTION_49( v3,  (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOption,  &OBJC_CLASS___SAUIConfirmationOption_ptr);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = OUTLINED_FUNCTION_5_32(v6);
  *(_OWORD *)(v7 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31FE60;
  *(void *)(v7 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v5;
  OUTLINED_FUNCTION_5_72(v7, v8, v9, v10);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_76_4();
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_14_50();
  uint64_t v11 = OUTLINED_FUNCTION_12_64();
  id v40 = SAUIConfirmationOption.init(label:type:iconType:commands:)(v11, v12, v13, v14, v41, v4);
  uint64_t v15 = v2[9];
  uint64_t v16 = v2[10];
  uint64_t v17 = v2[11];
  uint64_t v18 = v2[12];
  uint64_t v19 = v2[13];
  uint64_t v20 = v2[14];
  uint64_t v21 = v2[15];
  uint64_t v22 = OUTLINED_FUNCTION_5_32(v6);
  *(_OWORD *)(v22 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31FE60;
  *(void *)(v22 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v21;
  OUTLINED_FUNCTION_5_72(v22, v23, v24, v25);
  OUTLINED_FUNCTION_36_1();
  OUTLINED_FUNCTION_124();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain(v21);
  id v26 = SAUIConfirmationOption.init(label:type:iconType:commands:)(v15, v16, v17, v18, v19, v20);
  SAUIConfirmationView.init(confirmOption:denyOption:)(v40, v26);
  uint64_t v28 = v27;
  if (v2[21])
  {
    NSString v27 = String._bridgeToObjectiveC()();
    uint64_t v29 = v27;
  }

  else
  {
    uint64_t v29 = 0LL;
  }

  OUTLINED_FUNCTION_4_77((uint64_t)v27, "setStyle:");

  if (v2[17])
  {
    NSString v30 = String._bridgeToObjectiveC()();
    uint64_t v31 = v30;
  }

  else
  {
    uint64_t v31 = 0LL;
  }

  OUTLINED_FUNCTION_4_77((uint64_t)v30, "setTitle:");

  if (v2[19])
  {
    NSString v32 = String._bridgeToObjectiveC()();
    uint64_t v33 = v32;
  }

  else
  {
    uint64_t v33 = 0LL;
  }

  OUTLINED_FUNCTION_4_77((uint64_t)v32, "setSubtitle:");

  uint64_t v34 = OUTLINED_FUNCTION_5_32(v6);
  *(_OWORD *)(v34 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31FE60;
  *(void *)(v34 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v28;
  OUTLINED_FUNCTION_5_72(v34, v35, v36, v37);
  id v38 = v28;
  a2(v43, 0LL);

  return swift_bridgeObjectRelease();
}

uint64_t ConfirmationViewBuilder.makeViewsForIOS(utteranceViews:_:)( uint64_t a1, void (*a2)(uint64_t, void))
{
  uint64_t v3 = OUTLINED_FUNCTION_49( a1,  &lazy cache variable for type metadata for SAUIConfirmationView,  &OBJC_CLASS___SAUIConfirmationView_ptr);
  uint64_t v4 = v2[7];
  uint64_t v35 = v2[6];
  uint64_t v5 = v2[8];
  OUTLINED_FUNCTION_49( v3,  (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOption,  &OBJC_CLASS___SAUIConfirmationOption_ptr);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = OUTLINED_FUNCTION_5_32(v6);
  *(_OWORD *)(v7 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31FE60;
  *(void *)(v7 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v5;
  OUTLINED_FUNCTION_3_89(v7, v8, v9, v10);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain(v5);
  OUTLINED_FUNCTION_76_4();
  OUTLINED_FUNCTION_8_1();
  uint64_t v11 = OUTLINED_FUNCTION_12_64();
  id v36 = SAUIConfirmationOption.init(label:type:iconType:commands:)(v11, v12, v13, v14, v35, v4);
  uint64_t v15 = v2[9];
  uint64_t v16 = v2[10];
  uint64_t v17 = v2[11];
  uint64_t v18 = v2[12];
  uint64_t v20 = v2[13];
  uint64_t v19 = v2[14];
  uint64_t v21 = v2[15];
  uint64_t v22 = OUTLINED_FUNCTION_5_32(v6);
  *(_OWORD *)(v22 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31FE60;
  *(void *)(v22 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v21;
  OUTLINED_FUNCTION_3_89(v22, v23, v24, v25);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain(v21);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_76_4();
  id v26 = SAUIConfirmationOption.init(label:type:iconType:commands:)(v15, v16, v17, v18, v20, v19);
  SAUIConfirmationView.init(confirmOption:denyOption:)(v36, v26);
  uint64_t v28 = v27;
  uint64_t v29 = OUTLINED_FUNCTION_5_32(v6);
  *(_OWORD *)(v29 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31FE60;
  *(void *)(v29 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v28;
  OUTLINED_FUNCTION_3_89(v29, v30, v31, v32);
  id v33 = v28;
  a2(v38, 0LL);

  return swift_bridgeObjectRelease();
}

uint64_t ConfirmationViewBuilder.deinit()
{
  return v0;
}

uint64_t ConfirmationViewBuilder.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 216LL, 7LL);
}

uint64_t protocol witness for IdiomSensitiveViewBuilder.sharedGlobals.getter in conformance ConfirmationViewBuilder@<X0>( uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(*v1 + 176LL, a1);
}

void protocol witness for IdiomSensitiveViewBuilder.makeViewsForWatch(utteranceViews:_:) in conformance ConfirmationViewBuilder()
{
}

void protocol witness for IdiomSensitiveViewBuilder.makeViewsForMac(utteranceViews:_:) in conformance ConfirmationViewBuilder()
{
}

void protocol witness for IdiomSensitiveViewBuilder.makeViewsForCar(utteranceViews:_:) in conformance ConfirmationViewBuilder()
{
}

void protocol witness for IdiomSensitiveViewBuilder.makeViewsForIOS(utteranceViews:_:) in conformance ConfirmationViewBuilder()
{
}

void protocol witness for IdiomSensitiveViewBuilder.makeViewsForTV(utteranceViews:_:) in conformance ConfirmationViewBuilder()
{
}

void *outlined release of ConfirmationViewTemplate(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[8];
  uint64_t v7 = a1[10];
  uint64_t v8 = a1[12];
  uint64_t v9 = a1[15];
  uint64_t v10 = a1[17];
  uint64_t v12 = a1[19];
  swift_unknownObjectRelease(a1[13]);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_unknownObjectRelease(v5);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t type metadata accessor for ConfirmationViewBuilder()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin23ConfirmationViewBuilder);
}

uint64_t OUTLINED_FUNCTION_3_89(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Array._endMutation()(a1, a2, a3, a4);
}

id OUTLINED_FUNCTION_4_77(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_7_78( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)(a16 + 16));
}

void *OUTLINED_FUNCTION_9_62(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA0uLL);
}

void OUTLINED_FUNCTION_10_55(uint64_t a1, uint64_t a2)
{
}

uint64_t OUTLINED_FUNCTION_11_63()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_12_64()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_14_50()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t PhonePersonProperties<>.isUnnamedPhoneNumber.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject(v4, v12);
  *(_OWORD *)(inited + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_325DA0;
  *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = swift_getKeyPath(&unk_3343B8);
  *(void *)(inited + 40) = swift_getKeyPath(&unk_3343E8);
  *(void *)(inited + 48) = swift_getKeyPath(&unk_334418);
  *(void *)(inited + 56) = swift_getKeyPath(&unk_334448);
  uint64_t KeyPath = swift_getKeyPath(&unk_334478);
  *(void *)(inited + 64) = KeyPath;
  v11[6] = inited;
  specialized Array._endMutation()(KeyPath, v7, v8, v9);
  v11[2] = a1;
  v11[3] = v2;
  LOBYTE(OUTLINED_FUNCTION_5_71(v1, v2) = specialized Sequence.allSatisfy(_:)( (uint64_t (*)(uint64_t *))partial apply for closure #1 in PhonePersonProperties<>.isUnnamedPhoneNumber.getter,  (uint64_t)v11,  inited);
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void key path getter for DialogPerson.givenName : PhonePerson(uint64_t a1)
{
}

void sub_1DB8BC(uint64_t a1)
{
}

void key path getter for DialogPerson.middleName : PhonePerson(uint64_t a1)
{
}

void sub_1DB8F4(uint64_t a1)
{
}

void key path getter for DialogPerson.familyName : PhonePerson(uint64_t a1)
{
}

void sub_1DB92C(uint64_t a1)
{
}

void key path getter for DialogPerson.nickname : PhonePerson(uint64_t a1)
{
}

void sub_1DB964(uint64_t a1)
{
}

void key path getter for DialogPerson.fullNameFromInput : PhonePerson(uint64_t a1)
{
}

void sub_1DB99C(uint64_t a1)
{
}

BOOL closure #1 in PhonePersonProperties<>.isUnnamedPhoneNumber.getter(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *a1;
  uint64_t v11 = a2;
  swift_retain();
  swift_getAtKeyPath(&v11, v6);
  swift_release(a2);
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  BOOL v8 = __swift_getEnumTagSinglePayload((uint64_t)v5, 1LL, v7) == 1;
  outlined destroy of SpeakableString?((uint64_t)v5);
  return v8;
}

BOOL partial apply for closure #1 in PhonePersonProperties<>.isUnnamedPhoneNumber.getter(uint64_t *a1)
{
  return closure #1 in PhonePersonProperties<>.isUnnamedPhoneNumber.getter(a1, *(void *)(v1 + 24));
}

uint64_t protocol witness for PhonePersonProperties.isUnnamedPhoneNumber.getter in conformance PhonePerson( uint64_t a1)
{
  return PhonePersonProperties<>.isUnnamedPhoneNumber.getter(a1) & 1;
}

PhoneCallFlowDelegatePlugin::PhoneCallControlCATs::Properties_optional __swiftcall PhoneCallControlCATs.Properties.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallControlCATs.Properties.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallControlCATs::Properties_optional)6;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallControlCATs::Properties_optional)v3;
  }
}

uint64_t PhoneCallControlCATs.Properties.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1DBB3C + 4 * byte_3344B0[a1]))( 0xD00000000000001CLL,  0x8000000000341C00LL);
}

uint64_t sub_1DBB3C(uint64_t a1)
{
  return a1 + 11;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallControlCATs.Properties( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance PhoneCallControlCATs.Properties()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallControlCATs.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallControlCATs.Properties( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::PhoneCallControlCATs::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallControlCATs.Properties@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallControlCATs::Properties_optional *a2@<X8>)
{
  result.value = PhoneCallControlCATs.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallControlCATs.Properties@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = PhoneCallControlCATs.Properties.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void PhoneCallControlCATs.callControl(callControlAction:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t PhoneCallControlCATs.callControl(callControlAction:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PhoneCallControlCATs.callControl(callControlAction:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_15_3(v0);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_77_1(v1);
  uint64_t v3 = OUTLINED_FUNCTION_24_6(v2, (__n128)xmmword_31D870);
  uint64_t v4 = OUTLINED_FUNCTION_32_3((uint64_t)v3, (uint64_t)"callControlAction");
  OUTLINED_FUNCTION_27_6(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  uint64_t v7 = OUTLINED_FUNCTION_45_0(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_41_1(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v9);
  }

  uint64_t v10 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v11 = (void *)OUTLINED_FUNCTION_71_5(v10);
  OUTLINED_FUNCTION_45_8(v11);
  OUTLINED_FUNCTION_48_2();
  return OUTLINED_FUNCTION_24_4(v12, v13, v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_12_2();
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_17_3();
  }

  else
  {
    OUTLINED_FUNCTION_65_4();
    OUTLINED_FUNCTION_23_3();
    uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
    return OUTLINED_FUNCTION_16_1(v2);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 *v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_10_5();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_15_3(v2);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_25_11(v3);
  uint64_t v5 = OUTLINED_FUNCTION_24_6(v4, (__n128)xmmword_31D870);
  uint64_t v6 = OUTLINED_FUNCTION_32_3((uint64_t)v5, (uint64_t)"callControlAction");
  OUTLINED_FUNCTION_27_6(v6, v7, &demangling cache variable for type metadata for SpeakableString?);
  char v8 = OUTLINED_FUNCTION_26_0();
  uint64_t v9 = OUTLINED_FUNCTION_3_22(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_41_1(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v11);
  }

  uint64_t v12 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executeDialog(catId:parameters:));
  *(void *)(v0 + 48) = v12;
  OUTLINED_FUNCTION_30(v12, (uint64_t)PhoneCallControlCATsSimple.callControl(callControlAction:));
  uint64_t v13 = OUTLINED_FUNCTION_40(v1 + 11);
  return OUTLINED_FUNCTION_25_5(v13, v14, v15, v16);
}

uint64_t PhoneCallControlCATs.callControl(callControlAction:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

void PhoneCallControlCATs.callControl(callControlAction:)(uint64_t a1)
{
}

void PhoneCallControlCATs.unsupportedCallControl(unsupportedReason:completion:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void PhoneCallControlCATs.callControl(callControlAction:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v16[1] = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_15_3(v11);
  *(_OWORD *)(v12 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D870;
  uint64_t v13 = (void *)(v12 + 48);
  *(void *)(v12 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xD000000000000011LL;
  *(void *)(v12 + 40) = a4;
  outlined init with copy of SpeakableString?( a1,  (uint64_t)v10,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = OUTLINED_FUNCTION_26_0();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1LL, v14) == 1)
  {
    outlined destroy of SpeakableString?( (uint64_t)v10,  &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v13 = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
  }

  else
  {
    *(void *)(v12 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v14;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v13);
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v14 - 8) + 32LL))( boxed_opaque_existential_1,  v10,  v14);
  }

  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)(a5);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_5();
}

uint64_t PhoneCallControlCATs.unsupportedCallControl(unsupportedReason:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PhoneCallControlCATs.unsupportedCallControl(unsupportedReason:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_15_3(v0);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_77_1(v1);
  uint64_t v3 = OUTLINED_FUNCTION_24_6(v2, (__n128)xmmword_31D870);
  uint64_t v4 = OUTLINED_FUNCTION_32_3((uint64_t)v3, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_27_6(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  uint64_t v7 = OUTLINED_FUNCTION_45_0(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_41_1(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v9);
  }

  uint64_t v10 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v11 = (void *)OUTLINED_FUNCTION_71_5(v10);
  OUTLINED_FUNCTION_45_8(v11);
  OUTLINED_FUNCTION_48_2();
  return OUTLINED_FUNCTION_24_4(v12, v13, v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_12_2();
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_17_3();
  }

  else
  {
    OUTLINED_FUNCTION_65_4();
    OUTLINED_FUNCTION_23_3();
    uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
    return OUTLINED_FUNCTION_16_1(v2);
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_23_3();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 *v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_10_5();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_15_3(v2);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_25_11(v3);
  uint64_t v5 = OUTLINED_FUNCTION_24_6(v4, (__n128)xmmword_31D870);
  uint64_t v6 = OUTLINED_FUNCTION_32_3((uint64_t)v5, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_27_6(v6, v7, &demangling cache variable for type metadata for SpeakableString?);
  char v8 = OUTLINED_FUNCTION_26_0();
  uint64_t v9 = OUTLINED_FUNCTION_3_22(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_41_1(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v11);
  }

  uint64_t v12 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executeDialog(catId:parameters:));
  *(void *)(v0 + 48) = v12;
  OUTLINED_FUNCTION_30(v12, (uint64_t)PhoneCallControlCATsSimple.unsupportedCallControl(unsupportedReason:));
  uint64_t v13 = OUTLINED_FUNCTION_40(v1 + 22);
  return OUTLINED_FUNCTION_25_5(v13, v14, v15, v16);
}

uint64_t PhoneCallControlCATs.unsupportedCallControl(unsupportedReason:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

void PhoneCallControlCATs.unsupportedCallControl(unsupportedReason:)(uint64_t a1)
{
}

void PhoneCallControlCATs.callControl(callControlAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v10 = OUTLINED_FUNCTION_15_3(v9);
  *(_OWORD *)(v10 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D870;
  uint64_t v11 = (void *)(v10 + 48);
  *(void *)(v10 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xD000000000000011LL;
  *(void *)(v10 + 40) = a2;
  outlined init with copy of SpeakableString?(a1, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v12 = OUTLINED_FUNCTION_26_0();
  if (__swift_getEnumTagSinglePayload(v4, 1LL, v12) == 1)
  {
    outlined destroy of SpeakableString?(v4, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v11 = 0u;
    *(_OWORD *)(v10 + 64) = 0u;
  }

  else
  {
    *(void *)(v10 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v12;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL))( boxed_opaque_existential_1,  v4,  v12);
  }

  dispatch thunk of CATWrapper.execute(catId:parameters:)(a3, a4, v10);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_5();
}

void PhoneCallControlCATs.unsupportedHoldAction(unsupportedReason:completion:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t PhoneCallControlCATs.unsupportedHoldAction(unsupportedReason:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PhoneCallControlCATs.unsupportedHoldAction(unsupportedReason:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_15_3(v0);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_77_1(v1);
  uint64_t v3 = OUTLINED_FUNCTION_24_6(v2, (__n128)xmmword_31D870);
  uint64_t v4 = OUTLINED_FUNCTION_32_3((uint64_t)v3, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_27_6(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  uint64_t v7 = OUTLINED_FUNCTION_45_0(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_41_1(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v9);
  }

  uint64_t v10 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v11 = (void *)OUTLINED_FUNCTION_71_5(v10);
  OUTLINED_FUNCTION_45_8(v11);
  OUTLINED_FUNCTION_48_2();
  return OUTLINED_FUNCTION_24_4(v12, v13, v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 *v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_10_5();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_15_3(v2);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_25_11(v3);
  uint64_t v5 = OUTLINED_FUNCTION_24_6(v4, (__n128)xmmword_31D870);
  uint64_t v6 = OUTLINED_FUNCTION_32_3((uint64_t)v5, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_27_6(v6, v7, &demangling cache variable for type metadata for SpeakableString?);
  char v8 = OUTLINED_FUNCTION_26_0();
  uint64_t v9 = OUTLINED_FUNCTION_3_22(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_41_1(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v11);
  }

  uint64_t v12 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executeDialog(catId:parameters:));
  *(void *)(v0 + 48) = v12;
  OUTLINED_FUNCTION_30(v12, (uint64_t)PhoneCallControlCATsSimple.callControl(callControlAction:));
  uint64_t v13 = OUTLINED_FUNCTION_40(v1 + 21);
  return OUTLINED_FUNCTION_25_5(v13, v14, v15, v16);
}

uint64_t PhoneCallControlCATs.unsupportedHoldAction(unsupportedReason:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

void PhoneCallControlCATs.unsupportedHoldAction(unsupportedReason:)(uint64_t a1)
{
}

void PhoneCallControlCATs.unsupportedIntent(unsupportedIntent:completion:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t PhoneCallControlCATs.unsupportedIntent(unsupportedIntent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PhoneCallControlCATs.unsupportedIntent(unsupportedIntent:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_15_3(v0);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_77_1(v1);
  uint64_t v3 = OUTLINED_FUNCTION_24_6(v2, (__n128)xmmword_31D870);
  uint64_t v4 = OUTLINED_FUNCTION_32_3((uint64_t)v3, (uint64_t)"unsupportedIntent");
  OUTLINED_FUNCTION_27_6(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  uint64_t v7 = OUTLINED_FUNCTION_45_0(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_41_1(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v9);
  }

  uint64_t v10 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v11 = (void *)OUTLINED_FUNCTION_71_5(v10);
  OUTLINED_FUNCTION_45_8(v11);
  OUTLINED_FUNCTION_48_2();
  return OUTLINED_FUNCTION_24_4(v12, v13, v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 *v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_10_5();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_15_3(v2);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_25_11(v3);
  uint64_t v5 = OUTLINED_FUNCTION_24_6(v4, (__n128)xmmword_31D870);
  uint64_t v6 = OUTLINED_FUNCTION_32_3((uint64_t)v5, (uint64_t)"unsupportedIntent");
  OUTLINED_FUNCTION_27_6(v6, v7, &demangling cache variable for type metadata for SpeakableString?);
  char v8 = OUTLINED_FUNCTION_26_0();
  uint64_t v9 = OUTLINED_FUNCTION_3_22(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_41_1(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v11);
  }

  uint64_t v12 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executeDialog(catId:parameters:));
  *(void *)(v0 + 48) = v12;
  OUTLINED_FUNCTION_30(v12, (uint64_t)PhoneCallControlCATsSimple.callControl(callControlAction:));
  uint64_t v13 = OUTLINED_FUNCTION_40(v1 + 17);
  return OUTLINED_FUNCTION_25_5(v13, v14, v15, v16);
}

uint64_t PhoneCallControlCATs.unsupportedIntent(unsupportedIntent:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

void PhoneCallControlCATs.unsupportedIntent(unsupportedIntent:)(uint64_t a1)
{
}

void PhoneCallControlCATs.unsupportedSpeakerphoneAction(unsupportedReason:completion:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t PhoneCallControlCATs.unsupportedSpeakerphoneAction(unsupportedReason:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PhoneCallControlCATs.unsupportedSpeakerphoneAction(unsupportedReason:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_15_3(v0);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_77_1(v1);
  uint64_t v3 = OUTLINED_FUNCTION_24_6(v2, (__n128)xmmword_31D870);
  uint64_t v4 = OUTLINED_FUNCTION_32_3((uint64_t)v3, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_27_6(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  uint64_t v7 = OUTLINED_FUNCTION_45_0(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_41_1(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v9);
  }

  uint64_t v10 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v11 = (void *)OUTLINED_FUNCTION_71_5(v10);
  OUTLINED_FUNCTION_45_8(v11);
  OUTLINED_FUNCTION_48_2();
  return OUTLINED_FUNCTION_24_4(v12, v13, v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 *v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_10_5();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_15_3(v2);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_25_11(v3);
  uint64_t v5 = OUTLINED_FUNCTION_24_6(v4, (__n128)xmmword_31D870);
  uint64_t v6 = OUTLINED_FUNCTION_32_3((uint64_t)v5, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_27_6(v6, v7, &demangling cache variable for type metadata for SpeakableString?);
  char v8 = OUTLINED_FUNCTION_26_0();
  uint64_t v9 = OUTLINED_FUNCTION_3_22(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_41_1(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v11);
  }

  uint64_t v12 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executeDialog(catId:parameters:));
  *(void *)(v0 + 48) = v12;
  OUTLINED_FUNCTION_30(v12, (uint64_t)PhoneCallControlCATsSimple.callControl(callControlAction:));
  uint64_t v13 = OUTLINED_FUNCTION_40(v1 + 29);
  return OUTLINED_FUNCTION_25_5(v13, v14, v15, v16);
}

uint64_t PhoneCallControlCATs.unsupportedSpeakerphoneAction(unsupportedReason:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

void PhoneCallControlCATs.unsupportedSpeakerphoneAction(unsupportedReason:)(uint64_t a1)
{
}

void PhoneCallControlCATs.unsupportedSwitchToFaceTime(unsupportedReason:completion:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t PhoneCallControlCATs.unsupportedSwitchToFaceTime(unsupportedReason:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PhoneCallControlCATs.unsupportedSwitchToFaceTime(unsupportedReason:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_15_3(v0);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_77_1(v1);
  uint64_t v3 = OUTLINED_FUNCTION_24_6(v2, (__n128)xmmword_31D870);
  uint64_t v4 = OUTLINED_FUNCTION_32_3((uint64_t)v3, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_27_6(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  uint64_t v7 = OUTLINED_FUNCTION_45_0(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_41_1(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v9);
  }

  uint64_t v10 = OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v11 = (void *)OUTLINED_FUNCTION_71_5(v10);
  OUTLINED_FUNCTION_45_8(v11);
  OUTLINED_FUNCTION_48_2();
  return OUTLINED_FUNCTION_24_4(v12, v13, v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 *v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_10_5();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_15_3(v2);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_25_11(v3);
  uint64_t v5 = OUTLINED_FUNCTION_24_6(v4, (__n128)xmmword_31D870);
  uint64_t v6 = OUTLINED_FUNCTION_32_3((uint64_t)v5, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_27_6(v6, v7, &demangling cache variable for type metadata for SpeakableString?);
  char v8 = OUTLINED_FUNCTION_26_0();
  uint64_t v9 = OUTLINED_FUNCTION_3_22(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_41_1(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_57_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v11);
  }

  uint64_t v12 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executeDialog(catId:parameters:));
  *(void *)(v0 + 48) = v12;
  OUTLINED_FUNCTION_30(v12, (uint64_t)PhoneCallControlCATsSimple.callControl(callControlAction:));
  uint64_t v13 = OUTLINED_FUNCTION_40(v1 + 27);
  return OUTLINED_FUNCTION_25_5(v13, v14, v15, v16);
}

uint64_t PhoneCallControlCATs.unsupportedSwitchToFaceTime(unsupportedReason:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

void PhoneCallControlCATs.unsupportedSwitchToFaceTime(unsupportedReason:)(uint64_t a1)
{
}

uint64_t PhoneCallControlCATs.__allocating_init(templateDir:options:globals:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PhoneCallControlCATs.init(templateDir:options:globals:)(a1, a2, a3);
}

uint64_t PhoneCallControlCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for CATOption(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_20_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of SpeakableString?( a1,  (uint64_t)v10,  (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v3, a2, v7);
  uint64_t v11 = CATWrapper.init(templateDir:options:globals:)(v10, v3, a3);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a2, v7);
  outlined destroy of SpeakableString?(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v11;
}

unint64_t lazy protocol witness table accessor for type PhoneCallControlCATs.Properties and conformance PhoneCallControlCATs.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATs.Properties and conformance PhoneCallControlCATs.Properties;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATs.Properties and conformance PhoneCallControlCATs.Properties)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallControlCATs.Properties,  &type metadata for PhoneCallControlCATs.Properties);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATs.Properties and conformance PhoneCallControlCATs.Properties);
  }

  return result;
}

uint64_t type metadata accessor for PhoneCallControlCATs(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for PhoneCallControlCATs;
  if (!type metadata singleton initialization cache for PhoneCallControlCATs) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PhoneCallControlCATs);
  }
  return result;
}

uint64_t type metadata completion function for PhoneCallControlCATs(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for PhoneCallControlCATs);
}

uint64_t ObjC metadata update function for PhoneCallControlCATs()
{
  return type metadata accessor for PhoneCallControlCATs(0LL);
}

uint64_t storeEnumTagSinglePayload for PhoneCallControlCATs.Properties( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1DCE8C + 4 * byte_3344BB[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1DCEC0 + 4 * byte_3344B6[v4]))();
}

uint64_t sub_1DCEC0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DCEC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1DCED0LL);
  }
  return result;
}

uint64_t sub_1DCEDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1DCEE4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1DCEE8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DCEF0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PhoneCallControlCATs.Properties()
{
  return &type metadata for PhoneCallControlCATs.Properties;
}

void OUTLINED_FUNCTION_20_47(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

  ;
}

uint64_t OUTLINED_FUNCTION_37_29(uint64_t result, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = result;
  return result;
}

uint64_t FirstPartyAnnotatedAppStore.init(featureManager:appExistsPredicate:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t FirstPartyAnnotatedAppStore.getDefaultApp(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = OUTLINED_FUNCTION_6_72(a1);
  if ((dispatch thunk of DeviceState.isMac.getter(v4, v5) & 1) != 0)
  {
    if (one-time initialization token for siriPhoneFaceTimeMacExtension != -1) {
      swift_once( &one-time initialization token for siriPhoneFaceTimeMacExtension,  one-time initialization function for siriPhoneFaceTimeMacExtension);
    }
    uint64_t v6 = &static DefaultPhoneApps.siriPhoneFaceTimeMacExtension;
  }

  else
  {
    uint64_t v7 = OUTLINED_FUNCTION_6_72(a1);
    if ((dispatch thunk of DeviceState.isWatch.getter(v7, v8) & 1) != 0)
    {
      if (one-time initialization token for siriPhoneWatchExtension != -1) {
        swift_once( &one-time initialization token for siriPhoneWatchExtension,  one-time initialization function for siriPhoneWatchExtension);
      }
      uint64_t v6 = &static DefaultPhoneApps.siriPhoneWatchExtension;
    }

    else
    {
      uint64_t v9 = OUTLINED_FUNCTION_6_72(a1);
      if ((dispatch thunk of DeviceState.isXRDevice.getter(v9, v10) & 1) != 0)
      {
        if (one-time initialization token for siriPhoneFaceTimeExtension != -1) {
          swift_once( &one-time initialization token for siriPhoneFaceTimeExtension,  one-time initialization function for siriPhoneFaceTimeExtension);
        }
        uint64_t v6 = &static DefaultPhoneApps.siriPhoneFaceTimeExtension;
      }

      else
      {
        if (one-time initialization token for siriPhoneExtension != -1) {
          swift_once( &one-time initialization token for siriPhoneExtension,  one-time initialization function for siriPhoneExtension);
        }
        uint64_t v6 = &static DefaultPhoneApps.siriPhoneExtension;
      }
    }
  }

  uint64_t v11 = v6[5];
  char v12 = *((_BYTE *)v6 + 32);
  uint64_t v14 = v6[2];
  uint64_t v13 = v6[3];
  uint64_t v16 = *v6;
  uint64_t v15 = v6[1];
  OUTLINED_FUNCTION_48_0();
  OUTLINED_FUNCTION_6_3();
  swift_retain();
  uint64_t result = OUTLINED_FUNCTION_6_1();
  *(void *)a2 = v16;
  *(void *)(a2 + 8) = v15;
  *(void *)(a2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v14;
  *(void *)(a2 + 24) = v13;
  *(_BYTE *)(a2 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v12;
  *(void *)(a2 + 40) = v11;
  return result;
}

id closure #1 in variable initialization expression of static FirstPartyAnnotatedAppStore.defaultAppExistsPredicate( uint64_t a1, uint64_t a2)
{
  id result = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, 0);
  if (result)
  {

    return &dword_0 + 1;
  }

  return result;
}

uint64_t one-time initialization function for defaultFirstPartyBundleIds()
{
  uint64_t result = closure #1 in variable initialization expression of static FirstPartyAnnotatedAppStore.defaultFirstPartyBundleIds();
  static FirstPartyAnnotatedAppStore.defaultFirstPartyBundleIds = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static FirstPartyAnnotatedAppStore.defaultFirstPartyBundleIds()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v1 = swift_allocObject(v0, 144LL, 7LL);
  *(_OWORD *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_32A100;
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xD000000000000017LL;
  *(void *)(v1 + 40) = 0x8000000000348B90LL;
  *(void *)(v1 + 48) = 0xD000000000000012LL;
  *(void *)(v1 + 56) = 0x80000000003479B0LL;
  if (one-time initialization token for macFaceTimeBundleId != -1) {
    swift_once( &one-time initialization token for macFaceTimeBundleId,  one-time initialization function for macFaceTimeBundleId);
  }
  uint64_t v2 = unk_477F50;
  *(void *)(v1 + 64) = static PhoneCallAppNameConstants.macFaceTimeBundleId;
  *(void *)(v1 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v2;
  *(void *)(v1 + 80) = 0xD000000000000012LL;
  *(void *)(v1 + 88) = 0x800000000034D250LL;
  *(void *)(v1 + 96) = 0xD000000000000012LL;
  *(void *)(v1 + 104) = 0x8000000000348BB0LL;
  *(void *)(v1 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xD000000000000013LL;
  *(void *)(v1 + 120) = 0x8000000000348BD0LL;
  *(void *)(v1 + 128) = 0xD000000000000015LL;
  *(void *)(v1 + 136) = 0x8000000000348BF0LL;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t *DefaultPhoneApps.siriPhoneFaceTimeMacExtension.unsafeMutableAddressor()
{
  if (one-time initialization token for siriPhoneFaceTimeMacExtension != -1) {
    swift_once( &one-time initialization token for siriPhoneFaceTimeMacExtension,  one-time initialization function for siriPhoneFaceTimeMacExtension);
  }
  return &static DefaultPhoneApps.siriPhoneFaceTimeMacExtension;
}

uint64_t *DefaultPhoneApps.siriPhoneWatchExtension.unsafeMutableAddressor()
{
  if (one-time initialization token for siriPhoneWatchExtension != -1) {
    swift_once( &one-time initialization token for siriPhoneWatchExtension,  one-time initialization function for siriPhoneWatchExtension);
  }
  return &static DefaultPhoneApps.siriPhoneWatchExtension;
}

uint64_t *DefaultPhoneApps.siriPhoneFaceTimeExtension.unsafeMutableAddressor()
{
  if (one-time initialization token for siriPhoneFaceTimeExtension != -1) {
    swift_once( &one-time initialization token for siriPhoneFaceTimeExtension,  one-time initialization function for siriPhoneFaceTimeExtension);
  }
  return &static DefaultPhoneApps.siriPhoneFaceTimeExtension;
}

uint64_t *DefaultPhoneApps.siriPhoneExtension.unsafeMutableAddressor()
{
  if (one-time initialization token for siriPhoneExtension != -1) {
    swift_once( &one-time initialization token for siriPhoneExtension,  one-time initialization function for siriPhoneExtension);
  }
  return &static DefaultPhoneApps.siriPhoneExtension;
}

void FirstPartyAnnotatedAppStore.getApp(for:device:)( uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  os_log_type_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.siriPhone);
  uint64_t v12 = swift_bridgeObjectRetain_n(a2, 2LL);
  os_log_type_t v13 = v11;
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v16 = static os_log_type_t.debug.getter(v14, v15);
  if (OUTLINED_FUNCTION_71_8(v16))
  {
    uint64_t v17 = OUTLINED_FUNCTION_7_0(22LL);
    uint64_t v18 = OUTLINED_FUNCTION_7_0(64LL);
    uint64_t v92 = v18;
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v85 = OUTLINED_FUNCTION_21_41(v18, 0x800000000034D210LL, &v92);
    OUTLINED_FUNCTION_13_64(v85, v19, v20, v17 + 12, v21, v22, v23, v24, v79);
    *(_WORD *)(v17 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    OUTLINED_FUNCTION_6_1();
    uint64_t v25 = OUTLINED_FUNCTION_12_65();
    uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v27);
    OUTLINED_FUNCTION_13_64(v85, v28, v29, v17 + 22, v30, v31, v32, v33, v80);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl(&dword_0, v14, v6, "#FirstPartyAnnotatedAppStore %s identifier=%s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2LL);
    OUTLINED_FUNCTION_0_2(v18);
    OUTLINED_FUNCTION_0_2(v17);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  os_log_type_t v34 = v13;
  if (one-time initialization token for defaultFirstPartyBundleIds != -1) {
    swift_once( &one-time initialization token for defaultFirstPartyBundleIds,  one-time initialization function for defaultFirstPartyBundleIds);
  }
  uint64_t v35 = OUTLINED_FUNCTION_12_65();
  specialized Sequence<>.contains(_:)(v35, v36, v37);
  if ((v38 & 1) != 0)
  {
    uint64_t v39 = OUTLINED_FUNCTION_12_65();
    FirstPartyAnnotatedAppStore.getDefaultApp(for:device:)(v39, v40, a3, a4, a5, v41);
    uint64_t v42 = v92;
    uint64_t v43 = v93;
    uint64_t v44 = v94;
    uint64_t v45 = v95;
    uint64_t v46 = v96;
    uint64_t v47 = v97;
  }

  else
  {
    uint64_t v48 = OUTLINED_FUNCTION_12_65();
    if ((((uint64_t (*)(uint64_t))a4)(v48) & 1) != 0)
    {
      uint64_t v49 = a3[3];
      uint64_t v50 = a3[4];
      __swift_project_boxed_opaque_existential_1(a3, v49);
      if ((dispatch thunk of DeviceState.isWatch.getter(v49, v50) & 1) != 0
        && (uint64_t v92 = a1,
            uint64_t v93 = a2,
            uint64_t v85 = 0xD000000000000010LL,
            unint64_t v86 = 0x800000000034B0D0LL,
            unint64_t v51 = lazy protocol witness table accessor for type String and conformance String(),
            unint64_t v52 = lazy protocol witness table accessor for type String and conformance String(),
            (BidirectionalCollection<>.starts<A>(with:)( &v85,  &type metadata for String,  &type metadata for String,  v51,  v52) & 1) != 0))
      {
        if (one-time initialization token for walkieTalkieWatchExtension != -1) {
          swift_once( &one-time initialization token for walkieTalkieWatchExtension,  one-time initialization function for walkieTalkieWatchExtension);
        }
        uint64_t v42 = static DefaultPhoneApps.walkieTalkieWatchExtension;
        uint64_t v43 = *(void **)algn_477DF8;
        uint64_t v44 = qword_477E00;
        uint64_t v45 = unk_477E08;
        uint64_t v46 = byte_477E10;
        uint64_t v47 = (void *)qword_477E18;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
      }

      else
      {
        uint64_t v59 = (void *)OUTLINED_FUNCTION_23_34();
        os_log_type_t v61 = static os_log_type_t.debug.getter(v59, v60);
        if (OUTLINED_FUNCTION_10(v61))
        {
          uint64_t v62 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
          *uint64_t v62 = 0;
          OUTLINED_FUNCTION_2_2( &dword_0,  v63,  v64,  "#FirstPartyAnnotatedAppStore 1P app found on device, returning app with no supported intents.");
          OUTLINED_FUNCTION_0_2((uint64_t)v62);
        }

        OUTLINED_FUNCTION_46_5();
        OUTLINED_FUNCTION_6_1();
        uint64_t v65 = OUTLINED_FUNCTION_12_65();
        uint64_t v42 = App.__allocating_init(appIdentifier:)(v65, v66);
        uint64_t v44 = App.appIdentifier.getter();
        uint64_t v45 = v67;
        uint64_t v46 = 0LL;
        uint64_t v43 = &_swiftEmptySetSingleton;
        uint64_t v47 = &_swiftEmptySetSingleton;
      }
    }

    else
    {
      uint64_t v53 = (void *)OUTLINED_FUNCTION_23_34();
      os_log_type_t v55 = static os_log_type_t.debug.getter(v53, v54);
      if (OUTLINED_FUNCTION_10(v55))
      {
        uint64_t v56 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
        *uint64_t v56 = 0;
        OUTLINED_FUNCTION_2_2( &dword_0,  v57,  v58,  "#FirstPartyAnnotatedAppStore 1P app not found on device, returning nil.");
        OUTLINED_FUNCTION_0_2((uint64_t)v56);
      }

      uint64_t v42 = 0LL;
      uint64_t v43 = 0LL;
      uint64_t v44 = 0LL;
      uint64_t v45 = 0LL;
      uint64_t v46 = 0LL;
      uint64_t v47 = 0LL;
    }
  }

  OUTLINED_FUNCTION_3_90();
  OUTLINED_FUNCTION_3_90();
  uint64_t v68 = (os_log_s *)OUTLINED_FUNCTION_23_34();
  os_log_type_t v70 = static os_log_type_t.debug.getter(v68, v69);
  if (OUTLINED_FUNCTION_71_8(v70))
  {
    uint64_t v71 = OUTLINED_FUNCTION_7_0(22LL);
    uint64_t v83 = OUTLINED_FUNCTION_7_0(64LL);
    uint64_t v91 = v83;
    *(_DWORD *)uint64_t v71 = 136315394;
    OUTLINED_FUNCTION_21_41(v83, 0x800000000034D210LL, &v91);
    OUTLINED_FUNCTION_4_59();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v72, v73, v71 + 4);
    *(_WORD *)(v71 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    uint64_t v85 = v42;
    unint64_t v86 = (unint64_t)v43;
    uint64_t v87 = v44;
    uint64_t v88 = v45;
    uint64_t v89 = v46;
    uint64_t v90 = v47;
    OUTLINED_FUNCTION_3_90();
    uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedApp?);
    uint64_t v75 = String.init<A>(describing:)(&v85, v74);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, &v91);
    OUTLINED_FUNCTION_4_59();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v77, v78, v71 + 14);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_2_68();
    OUTLINED_FUNCTION_2_68();
    _os_log_impl(&dword_0, v68, v34, "#FirstPartyAnnotatedAppStore %s => %s", (uint8_t *)v71, 0x16u);
    swift_arrayDestroy(v83, 2LL);
    OUTLINED_FUNCTION_0_2(v83);
    OUTLINED_FUNCTION_0_2(v71);
  }

  else
  {
    OUTLINED_FUNCTION_2_68();
    OUTLINED_FUNCTION_2_68();
  }

  *a6 = v42;
  a6[1] = (uint64_t)v43;
  a6[2] = v44;
  a6[3] = v45;
  a6[4] = v46;
  a6[5] = (uint64_t)v47;
}

void FirstPartyAnnotatedAppStore.getDefaultApp(for:device:)( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v10 = a1;
  static PhoneCallAppNameConstants.isFaceTimeCaseInsensitive(appId:)(a1, a2);
  if ((v12 & 1) != 0)
  {
    uint64_t v9 = 0x80000000003479B0LL;
    uint64_t v10 = 0xD000000000000012LL;
  }

  else
  {
    uint64_t v12 = swift_bridgeObjectRetain();
  }

  char v13 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 152LL))(v12);
  outlined init with copy of SignalProviding((uint64_t)a3, (uint64_t)v52);
  if ((v13 & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1(v52);
LABEL_14:
    uint64_t v37 = FirstPartyAnnotatedAppStore.getDefaultApp(for:)(a3, (uint64_t)&v55);
    uint64_t v38 = v55;
    uint64_t v51 = App.systemExtensionBundleId.getter(v37);
    uint64_t v40 = v39;
    uint64_t v41 = App.systemUIExtensionBundleId.getter();
    uint64_t v42 = a6;
    uint64_t v44 = v43;
    uint64_t v45 = App.pluginIdentifier.getter();
    uint64_t v47 = v46;
    uint64_t v48 = type metadata accessor for App(0LL);
    swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
    swift_bridgeObjectRetain();
    uint64_t v49 = v44;
    a6 = v42;
    uint64_t v31 = App.init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)( v10,  v9,  v51,  v40,  v41,  v49,  v45,  v47);
    uint64_t v32 = v56;
    uint64_t v33 = v57;
    uint64_t v34 = v58;
    uint64_t v36 = v60;
    uint64_t v35 = v59;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_release(v38);
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }

  uint64_t v14 = v53;
  uint64_t v15 = v54;
  os_log_type_t v16 = __swift_project_boxed_opaque_existential_1(v52, v53);
  DeviceState.requiresAppForFaceTime.getter( v14,  v15,  (uint64_t)v16,  v17,  v18,  v19,  v20,  v21,  v50,  v52[0],  v52[1],  v52[2],  v53,  v54,  v55,  v56,  v57,  v58,  v59,  v60);
  LOBYTE(v14) = v22;
  __swift_destroy_boxed_opaque_existential_1(v52);
  if ((v14 & 1) == 0) {
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  static PhoneCallAppNameConstants.isFaceTimeCaseInsensitive(appId:)(v10, v9);
  char v24 = v23;
  swift_bridgeObjectRelease();
  if ((v24 & 1) == 0 || (a4(v10, v9) & 1) != 0) {
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v25 = type metadata accessor for Logger(0LL);
  uint64_t v26 = __swift_project_value_buffer(v25, (uint64_t)static Logger.siriPhone);
  NSString v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v29 = static os_log_type_t.debug.getter(v27, v28);
  if (os_log_type_enabled(v27, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl( &dword_0,  v27,  v29,  "#FirstPartyAnnotatedAppStore Device requires that FaceTime app is installed for FaceTime calls, returning nil.",  v30,  2u);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  uint64_t v31 = 0LL;
  uint64_t v32 = 0LL;
  uint64_t v33 = 0LL;
  uint64_t v34 = 0LL;
  uint64_t v35 = 0LL;
  uint64_t v36 = 0LL;
LABEL_15:
  *a6 = v31;
  a6[1] = v32;
  a6[2] = v33;
  a6[3] = v34;
  a6[4] = v35;
  a6[5] = v36;
}

uint64_t *DefaultPhoneApps.walkieTalkieWatchExtension.unsafeMutableAddressor()
{
  if (one-time initialization token for walkieTalkieWatchExtension != -1) {
    swift_once( &one-time initialization token for walkieTalkieWatchExtension,  one-time initialization function for walkieTalkieWatchExtension);
  }
  return &static DefaultPhoneApps.walkieTalkieWatchExtension;
}

void one-time initialization function for supportedFirstPartyIntents()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject(v0, &v38);
  *(_OWORD *)(inited + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_32A100;
  id v2 = [objc_allocWithZone(INStartCallIntent) init];
  id v3 = [v2 _className];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v4;
  *(void *)(inited + 40) = v6;
  id v7 = [objc_allocWithZone(INSearchCallHistoryIntent) init];
  id v8 = [v7 _className];

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v11 = v10;

  *(void *)(inited + 48) = v9;
  *(void *)(inited + 56) = v11;
  id v12 = [objc_allocWithZone(INHangUpCallIntent) init];
  id v13 = [v12 _className];

  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  uint64_t v16 = v15;

  *(void *)(inited + 64) = v14;
  *(void *)(inited + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v16;
  id v17 = [objc_allocWithZone(INIdentifyIncomingCallerIntent) init];
  id v18 = [v17 _className];

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v21 = v20;

  *(void *)(inited + 80) = v19;
  *(void *)(inited + 88) = v21;
  id v22 = [objc_allocWithZone(INAnswerCallIntent) init];
  id v23 = [v22 _className];

  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  uint64_t v26 = v25;

  *(void *)(inited + 96) = v24;
  *(void *)(inited + 104) = v26;
  id v27 = [objc_allocWithZone(INJoinCallIntent) init];
  id v28 = [v27 _className];

  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  uint64_t v31 = v30;

  *(void *)(inited + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v29;
  *(void *)(inited + 120) = v31;
  id v32 = [objc_allocWithZone(INAddCallParticipantIntent) init];
  id v33 = [v32 _className];

  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  uint64_t v36 = v35;

  *(void *)(inited + 128) = v34;
  *(void *)(inited + 136) = v36;
  specialized Set.init(_nonEmptyArrayLiteral:)();
  static DefaultPhoneApps.supportedFirstPartyIntents = v37;
}

uint64_t one-time initialization function for siriPhoneExtension()
{
  uint64_t v0 = type metadata accessor for App(0LL);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v1 = App.init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)( 0xD000000000000017LL,  0x8000000000348B90LL,  0xD00000000000002FLL,  0x800000000034B6A0LL,  0xD000000000000021LL,  0x800000000034D270LL,  0LL,  0LL);
  if (one-time initialization token for supportedFirstPartyIntents != -1) {
    swift_once( &one-time initialization token for supportedFirstPartyIntents,  one-time initialization function for supportedFirstPartyIntents);
  }
  uint64_t v2 = static DefaultPhoneApps.supportedFirstPartyIntents;
  swift_bridgeObjectRetain();
  uint64_t result = App.appIdentifier.getter();
  static DefaultPhoneApps.siriPhoneExtension = v1;
  *(void *)algn_477D38 = v2;
  qword_477D40 = result;
  unk_477D48 = v4;
  byte_477D50 = 0;
  qword_477D58 = (uint64_t)&_swiftEmptySetSingleton;
  return result;
}

uint64_t static DefaultPhoneApps.siriPhoneExtension.getter()
{
  if (one-time initialization token for siriPhoneExtension != -1) {
    swift_once( &one-time initialization token for siriPhoneExtension,  one-time initialization function for siriPhoneExtension);
  }
  OUTLINED_FUNCTION_0_77(&static DefaultPhoneApps.siriPhoneExtension);
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_48_0();
  return OUTLINED_FUNCTION_1_71(v0);
}

uint64_t one-time initialization function for siriPhoneWatchExtension()
{
  uint64_t v0 = type metadata accessor for App(0LL);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v1 = App.init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)( 0xD000000000000012LL,  0x8000000000348BB0LL,  0xD00000000000002FLL,  0x800000000034B6A0LL,  0LL,  0LL,  0LL,  0LL);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject(v2, &v33);
  *(_OWORD *)(inited + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_323F80;
  id v4 = [objc_allocWithZone(INStartCallIntent) init];
  id v5 = [v4 _className];

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v6;
  *(void *)(inited + 40) = v8;
  id v9 = [objc_allocWithZone(INSearchCallHistoryIntent) init];
  id v10 = [v9 _className];

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v13 = v12;

  *(void *)(inited + 48) = v11;
  *(void *)(inited + 56) = v13;
  id v14 = [objc_allocWithZone(INHangUpCallIntent) init];
  id v15 = [v14 _className];

  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  *(void *)(inited + 64) = v16;
  *(void *)(inited + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v18;
  id v19 = [objc_allocWithZone(INIdentifyIncomingCallerIntent) init];
  id v20 = [v19 _className];

  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  uint64_t v23 = v22;

  *(void *)(inited + 80) = v21;
  *(void *)(inited + 88) = v23;
  id v24 = [objc_allocWithZone(INAnswerCallIntent) init];
  id v25 = [v24 _className];

  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  uint64_t v28 = v27;

  *(void *)(inited + 96) = v26;
  *(void *)(inited + 104) = v28;
  specialized Set.init(_nonEmptyArrayLiteral:)();
  uint64_t v30 = v29;
  uint64_t result = App.appIdentifier.getter();
  static DefaultPhoneApps.siriPhoneWatchExtension = v1;
  *(void *)algn_477D68 = v30;
  qword_477D70 = result;
  unk_477D78 = v32;
  byte_477D80 = 0;
  qword_477D88 = (uint64_t)&_swiftEmptySetSingleton;
  return result;
}

uint64_t static DefaultPhoneApps.siriPhoneWatchExtension.getter()
{
  if (one-time initialization token for siriPhoneWatchExtension != -1) {
    swift_once( &one-time initialization token for siriPhoneWatchExtension,  one-time initialization function for siriPhoneWatchExtension);
  }
  OUTLINED_FUNCTION_0_77(&static DefaultPhoneApps.siriPhoneWatchExtension);
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_48_0();
  return OUTLINED_FUNCTION_1_71(v0);
}

uint64_t one-time initialization function for siriPhoneFaceTimeExtension()
{
  uint64_t v0 = OUTLINED_FUNCTION_46_5();
  OUTLINED_FUNCTION_15_2(v0);
  OUTLINED_FUNCTION_17_49();
  uint64_t v9 = App.init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)( v1,  v2,  v3,  v4,  v5,  v6,  v7,  v8);
  if (one-time initialization token for supportedFirstPartyIntents != -1) {
    swift_once( &one-time initialization token for supportedFirstPartyIntents,  one-time initialization function for supportedFirstPartyIntents);
  }
  uint64_t v10 = static DefaultPhoneApps.supportedFirstPartyIntents;
  swift_bridgeObjectRetain();
  uint64_t result = App.appIdentifier.getter();
  static DefaultPhoneApps.siriPhoneFaceTimeExtension = v9;
  *(void *)algn_477D98 = v10;
  qword_477DA0 = result;
  unk_477DA8 = v12;
  byte_477DB0 = 0;
  qword_477DB8 = (uint64_t)&_swiftEmptySetSingleton;
  return result;
}

uint64_t static DefaultPhoneApps.siriPhoneFaceTimeExtension.getter()
{
  if (one-time initialization token for siriPhoneFaceTimeExtension != -1) {
    swift_once( &one-time initialization token for siriPhoneFaceTimeExtension,  one-time initialization function for siriPhoneFaceTimeExtension);
  }
  OUTLINED_FUNCTION_0_77(&static DefaultPhoneApps.siriPhoneFaceTimeExtension);
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_48_0();
  return OUTLINED_FUNCTION_1_71(v0);
}

uint64_t one-time initialization function for siriPhoneFaceTimeMacExtension()
{
  if (one-time initialization token for macFaceTimeBundleId != -1) {
    swift_once( &one-time initialization token for macFaceTimeBundleId,  one-time initialization function for macFaceTimeBundleId);
  }
  uint64_t v1 = OUTLINED_FUNCTION_46_5();
  OUTLINED_FUNCTION_15_2(v1);
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_17_49();
  uint64_t v10 = App.init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)( v2,  v3,  v4,  v5,  v6,  v7,  v8,  v9);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject(v11, &v21);
  *(_OWORD *)(inited + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D880;
  id v13 = [objc_allocWithZone(INStartCallIntent) init];
  id v14 = [v13 _className];

  static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  OUTLINED_FUNCTION_15_56();
  *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v13;
  *(void *)(inited + 40) = v0;
  id v15 = [objc_allocWithZone(INSearchCallHistoryIntent) init];
  id v16 = [v15 _className];

  static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  OUTLINED_FUNCTION_15_56();
  *(void *)(inited + 48) = v15;
  *(void *)(inited + 56) = v0;
  specialized Set.init(_nonEmptyArrayLiteral:)();
  uint64_t v18 = v17;
  uint64_t result = App.appIdentifier.getter();
  static DefaultPhoneApps.siriPhoneFaceTimeMacExtension = v10;
  *(void *)algn_477DC8 = v18;
  qword_477DD0 = result;
  unk_477DD8 = v20;
  byte_477DE0 = 0;
  qword_477DE8 = (uint64_t)&_swiftEmptySetSingleton;
  return result;
}

uint64_t outlined copy of AnnotatedApp?( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result)
  {
    uint64_t v8 = result;
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_retain(v8);
    return swift_bridgeObjectRetain(a2);
  }

  return result;
}

uint64_t static DefaultPhoneApps.siriPhoneFaceTimeMacExtension.getter()
{
  if (one-time initialization token for siriPhoneFaceTimeMacExtension != -1) {
    swift_once( &one-time initialization token for siriPhoneFaceTimeMacExtension,  one-time initialization function for siriPhoneFaceTimeMacExtension);
  }
  OUTLINED_FUNCTION_0_77(&static DefaultPhoneApps.siriPhoneFaceTimeMacExtension);
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_48_0();
  return OUTLINED_FUNCTION_1_71(v0);
}

uint64_t one-time initialization function for walkieTalkieWatchExtension()
{
  uint64_t v0 = type metadata accessor for App(0LL);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v1 = App.init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)( 0xD000000000000010LL,  0x800000000034B0D0LL,  0xD00000000000001ELL,  0x800000000034D230LL,  0LL,  0LL,  0LL,  0LL);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject(v2, &v13);
  *(_OWORD *)(inited + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D870;
  id v4 = [objc_allocWithZone(INStartCallIntent) init];
  id v5 = [v4 _className];

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v6;
  *(void *)(inited + 40) = v8;
  specialized Set.init(_nonEmptyArrayLiteral:)();
  uint64_t v10 = v9;
  uint64_t result = App.appIdentifier.getter();
  static DefaultPhoneApps.walkieTalkieWatchExtension = v1;
  *(void *)algn_477DF8 = v10;
  qword_477E00 = result;
  unk_477E08 = v12;
  byte_477E10 = 0;
  qword_477E18 = (uint64_t)&_swiftEmptySetSingleton;
  return result;
}

uint64_t static DefaultPhoneApps.walkieTalkieWatchExtension.getter()
{
  if (one-time initialization token for walkieTalkieWatchExtension != -1) {
    swift_once( &one-time initialization token for walkieTalkieWatchExtension,  one-time initialization function for walkieTalkieWatchExtension);
  }
  OUTLINED_FUNCTION_0_77(&static DefaultPhoneApps.walkieTalkieWatchExtension);
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_48_0();
  return OUTLINED_FUNCTION_1_71(v0);
}

uint64_t destroy for FirstPartyAnnotatedAppStore(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 16));
}

void *initializeBufferWithCopyOfBuffer for FirstPartyAnnotatedAppStore(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  a1[2] = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

void *assignWithCopy for FirstPartyAnnotatedAppStore(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

uint64_t assignWithTake for FirstPartyAnnotatedAppStore(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = *(void *)(a2 + 16);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for FirstPartyAnnotatedAppStore(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 24))
    {
      LODWORD(OUTLINED_FUNCTION_5_71(v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(OUTLINED_FUNCTION_5_71(v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FirstPartyAnnotatedAppStore(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FirstPartyAnnotatedAppStore()
{
  return &type metadata for FirstPartyAnnotatedAppStore;
}

ValueMetadata *type metadata accessor for DefaultPhoneApps()
{
  return &type metadata for DefaultPhoneApps;
}

uint64_t OUTLINED_FUNCTION_0_77@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  char v6 = *((_BYTE *)a1 + 32);
  uint64_t v7 = a1[5];
  *(void *)uint64_t v1 = *a1;
  *(void *)(v1 + 8) = v3;
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v4;
  *(void *)(v1 + 24) = v5;
  *(_BYTE *)(v1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v6;
  *(void *)(v1 + 40) = v7;
  return swift_retain(v2);
}

uint64_t OUTLINED_FUNCTION_1_71(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t OUTLINED_FUNCTION_2_68()
{
  return outlined consume of AnnotatedApp?(v0, v2, v1, v3, v4, v5);
}

uint64_t OUTLINED_FUNCTION_3_90()
{
  return outlined copy of AnnotatedApp?(v0, v2, v1, v3, v4, v5);
}

uint64_t OUTLINED_FUNCTION_6_72(void *a1)
{
  return v1;
}

uint64_t OUTLINED_FUNCTION_12_65()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_64( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v10, v9, a4);
}

void OUTLINED_FUNCTION_15_56()
{
}

  ;
}

PhoneCallFlowDelegatePlugin::SuggestionsCATs::Properties_optional __swiftcall SuggestionsCATs.Properties.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of SuggestionsCATs.Properties.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return (PhoneCallFlowDelegatePlugin::SuggestionsCATs::Properties_optional)3;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::SuggestionsCATs::Properties_optional)v3;
  }
}

unint64_t SuggestionsCATs.Properties.rawValue.getter(char a1)
{
  unint64_t result = 0xD00000000000001FLL;
  if (a1)
  {
    if (a1 == 1) {
      return 0xD000000000000021LL;
    }
    else {
      return 0xD000000000000022LL;
    }
  }

  return result;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SuggestionsCATs.Properties( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance SuggestionsCATs.Properties()
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SuggestionsCATs.Properties( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::SuggestionsCATs::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATs.Properties@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SuggestionsCATs::Properties_optional *a2@<X8>)
{
  result.value = SuggestionsCATs.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SuggestionsCATs.Properties@<X0>( unint64_t *a1@<X8>)
{
  unint64_t result = SuggestionsCATs.Properties.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void SuggestionsCATs.phoneCall_StartCall(name:hasReference:thirdPartyAppName:completion:)()
{
  uint64_t v1 = v0;
  char v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  uint64_t v7 = &v16[-v6];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v9 = OUTLINED_FUNCTION_8_2(v8, 176LL);
  *(_OWORD *)(v9 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_320080;
  uint64_t v10 = (void *)(v9 + 48);
  uint64_t v11 = OUTLINED_FUNCTION_31_33(v9);
  outlined init with copy of SpeakableString?( v11,  (uint64_t)v7,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v12 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_28_40((uint64_t)v7);
  if (v13)
  {
    outlined destroy of SpeakableString?((uint64_t)v7, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v10 = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
  }

  else
  {
    *(void *)(v9 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v12;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v10);
    OUTLINED_FUNCTION_73_5( (uint64_t)boxed_opaque_existential_1,  (uint64_t)v7,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL));
  }

  OUTLINED_FUNCTION_13_65();
  *(_BYTE *)(v9 + 96) = v3 & 1;
  *(void *)(v9 + 120) = &type metadata for Bool;
  *(void *)(v9 + 128) = 0xD000000000000011LL;
  *(void *)(v9 + 136) = 0x8000000000347000LL;
  outlined init with copy of SpeakableString?( v1,  (uint64_t)v5,  &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28_40((uint64_t)v5);
  if (v13)
  {
    outlined destroy of SpeakableString?((uint64_t)v5, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v9 + 144) = 0u;
    *(_OWORD *)(v9 + 160) = 0u;
  }

  else
  {
    *(void *)(v9 + 168) = v12;
    id v15 = __swift_allocate_boxed_opaque_existential_1((void *)(v9 + 144));
    OUTLINED_FUNCTION_73_5( (uint64_t)v15,  (uint64_t)v5,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL));
  }

  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)(0xD00000000000001FLL);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_5();
}

uint64_t SuggestionsCATs.phoneCall_StartCall(name:hasReference:thirdPartyAppName:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)(v5 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a4;
  *(void *)(v5 + 40) = v4;
  *(_BYTE *)(v5 + 88) = a3;
  *(void *)(v5 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v5 + 48) = OUTLINED_FUNCTION_18_0(v6);
  *(void *)(v5 + 56) = swift_task_alloc(v4);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t SuggestionsCATs.phoneCall_StartCall(name:hasReference:thirdPartyAppName:)()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_8_2(v2, 176LL);
  v0[8] = v3;
  *(_OWORD *)(v3 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_320080;
  OUTLINED_FUNCTION_5_73(v3);
  OUTLINED_FUNCTION_29_16(v1, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_26_0();
  uint64_t v6 = OUTLINED_FUNCTION_63_5(v5);
  if ((_DWORD)v6 == 1)
  {
    OUTLINED_FUNCTION_41_1(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_66_4();
  }

  else
  {
    *(void *)(v3 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v1;
    uint64_t v7 = OUTLINED_FUNCTION_56_6();
    OUTLINED_FUNCTION_26_17((uint64_t)v7);
  }

  uint64_t v8 = v0[6];
  OUTLINED_FUNCTION_0_24();
  *(_BYTE *)(v3 + 96) = v9;
  *(void *)(v3 + 120) = &type metadata for Bool;
  *(void *)(v3 + 128) = 0xD000000000000011LL;
  *(void *)(v3 + 136) = 0x8000000000347000LL;
  OUTLINED_FUNCTION_29_16(v10, v11, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v8, 1LL, v1);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    OUTLINED_FUNCTION_41_1(EnumTagSinglePayload, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_66_4();
  }

  else
  {
    *(void *)(v3 + 168) = v1;
    char v13 = OUTLINED_FUNCTION_56_6();
    OUTLINED_FUNCTION_26_17((uint64_t)v13);
  }

  id v14 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  v0[9] = v14;
  *id v14 = v0;
  v14[1] = SuggestionsCATs.phoneCall_StartCall(name:hasReference:thirdPartyAppName:);
  return v16(v0[2], 0xD00000000000001FLL, 0x8000000000341FB0LL, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v5 = *v1;
  uint64_t v2 = v5;
  OUTLINED_FUNCTION_39_0(&v5);
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_17_3();
  }

  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_23_3();
    OUTLINED_FUNCTION_7_8();
    return OUTLINED_FUNCTION_16_1((uint64_t (*)(void))v1[1]);
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_7_8();
  return OUTLINED_FUNCTION_16_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t EnumTagSinglePayload;
  void *v13;
  void *v14;
  uint64_t (*v16)(unint64_t, unint64_t, uint64_t);
  uint64_t v1 = v0[2];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_8_2(v2, 176LL);
  v0[7] = v3;
  *(_OWORD *)(v3 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_320080;
  OUTLINED_FUNCTION_5_73(v3);
  OUTLINED_FUNCTION_29_16(v1, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_26_0();
  uint64_t v6 = OUTLINED_FUNCTION_63_5(v5);
  if ((_DWORD)v6 == 1)
  {
    OUTLINED_FUNCTION_41_1(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_66_4();
  }

  else
  {
    *(void *)(v3 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v1;
    uint64_t v7 = OUTLINED_FUNCTION_56_6();
    OUTLINED_FUNCTION_26_17((uint64_t)v7);
  }

  uint64_t v8 = v0[5];
  OUTLINED_FUNCTION_0_24();
  *(_BYTE *)(v3 + 96) = v9;
  *(void *)(v3 + 120) = &type metadata for Bool;
  *(void *)(v3 + 128) = 0xD000000000000011LL;
  *(void *)(v3 + 136) = 0x8000000000347000LL;
  OUTLINED_FUNCTION_29_16(v10, v11, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v8, 1LL, v1);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    OUTLINED_FUNCTION_41_1(EnumTagSinglePayload, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_66_4();
  }

  else
  {
    *(void *)(v3 + 168) = v1;
    char v13 = OUTLINED_FUNCTION_56_6();
    OUTLINED_FUNCTION_26_17((uint64_t)v13);
  }

  id v14 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executeDialog(catId:parameters:));
  v0[8] = v14;
  *id v14 = v0;
  v14[1] = SuggestionsCATs.phoneCall_StartCall(name:hasReference:thirdPartyAppName:);
  return v16(0xD00000000000001FLL, 0x8000000000341FB0LL, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_39_0(v4);
  *(void *)(v2 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v6, v7, v8);
  }

  else
  {
    uint64_t v10 = *(void *)(v2 + 40);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_23_3();
    swift_task_dealloc(v10);
    return OUTLINED_FUNCTION_8_3(v0, *(uint64_t (**)(void))(v3 + 8));
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_7_8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SuggestionsCATs.phoneCall_StartCall(name:hasReference:thirdPartyAppName:)( uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v3;
  *(_BYTE *)(v4 + 80) = a2;
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 40) = OUTLINED_FUNCTION_18_0(v5);
  *(void *)(v4 + 48) = swift_task_alloc(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

void SuggestionsCATs.phoneCall_StartCall(name:hasReference:thirdPartyAppName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v20;
  a20 = v21;
  uint64_t v23 = v22;
  char v25 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v27 = (char *)&a9 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v29 = (char *)&a9 - v28;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v31 = OUTLINED_FUNCTION_8_2(v30, 176LL);
  *(_OWORD *)(v31 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_320080;
  uint64_t v32 = (void *)(v31 + 48);
  uint64_t v33 = OUTLINED_FUNCTION_30_33(v31);
  outlined init with copy of SpeakableString?( v33,  (uint64_t)v29,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v34 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_29_33((uint64_t)v29);
  if (v35)
  {
    outlined destroy of SpeakableString?( (uint64_t)v29,  &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v32 = 0u;
    *(_OWORD *)(v31 + 64) = 0u;
  }

  else
  {
    *(void *)(v31 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v34;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v32);
    OUTLINED_FUNCTION_79_2( (uint64_t)boxed_opaque_existential_1,  (uint64_t)v29,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 32LL));
  }

  OUTLINED_FUNCTION_14_51();
  *(_BYTE *)(v31 + 96) = v25 & 1;
  *(void *)(v31 + 120) = &type metadata for Bool;
  *(void *)(v31 + 128) = 0xD000000000000011LL;
  *(void *)(v31 + 136) = 0x8000000000347000LL;
  outlined init with copy of SpeakableString?( v23,  (uint64_t)v27,  &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_29_33((uint64_t)v27);
  if (v35)
  {
    outlined destroy of SpeakableString?( (uint64_t)v27,  &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v31 + 144) = 0u;
    *(_OWORD *)(v31 + 160) = 0u;
  }

  else
  {
    *(void *)(v31 + 168) = v34;
    uint64_t v37 = __swift_allocate_boxed_opaque_existential_1((void *)(v31 + 144));
    OUTLINED_FUNCTION_79_2( (uint64_t)v37,  (uint64_t)v27,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 32LL));
  }

  dispatch thunk of CATWrapper.execute(catId:parameters:)(0xD00000000000001FLL, 0x8000000000341FB0LL, v31);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_5();
}

void SuggestionsCATs.phoneCall_StartFTCall(name:hasReference:completion:)()
{
  char v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_20_0();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_8_2(v3, 128LL);
  *(_OWORD *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D880;
  uint64_t v5 = (void *)(v4 + 48);
  uint64_t v6 = OUTLINED_FUNCTION_31_33(v4);
  outlined init with copy of SpeakableString?(v6, v0, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_28_40(v0);
  if (v8)
  {
    outlined destroy of SpeakableString?(v0, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v5 = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
  }

  else
  {
    *(void *)(v4 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v7;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v5);
    OUTLINED_FUNCTION_73_5( (uint64_t)boxed_opaque_existential_1,  v0,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL));
  }

  OUTLINED_FUNCTION_13_65();
  *(void *)(v4 + 120) = &type metadata for Bool;
  *(_BYTE *)(v4 + 96) = v2 & 1;
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)(0xD000000000000021LL);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_5();
}

uint64_t SuggestionsCATs.phoneCall_StartFTCall(name:hasReference:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v3;
  *(_BYTE *)(v4 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a3;
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 40) = OUTLINED_FUNCTION_12_0(v5);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t SuggestionsCATs.phoneCall_StartFTCall(name:hasReference:)()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_8_2(v2, 128LL);
  v0[6] = v3;
  *(_OWORD *)(v3 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D880;
  OUTLINED_FUNCTION_5_73(v3);
  OUTLINED_FUNCTION_29_16(v1, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_26_0();
  uint64_t v6 = OUTLINED_FUNCTION_36_2(v5);
  if ((_DWORD)v6 == 1)
  {
    OUTLINED_FUNCTION_41_1(v6, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
  }

  else
  {
    uint64_t v7 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v7);
  }

  OUTLINED_FUNCTION_0_24();
  *(void *)(v3 + 120) = &type metadata for Bool;
  *(_BYTE *)(v3 + 96) = v8;
  char v9 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  v0[7] = v9;
  *char v9 = v0;
  v9[1] = AnswerCallCATs.offerFollowUpIntent(followUpOfferType:);
  return v11(v0[2], 0xD000000000000021LL, 0x8000000000341FD0LL, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;
  void *v9;
  uint64_t (*v11)(unint64_t, unint64_t, uint64_t);
  uint64_t v1 = v0[2];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_8_2(v2, 128LL);
  v0[5] = v3;
  *(_OWORD *)(v3 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D880;
  OUTLINED_FUNCTION_5_73(v3);
  OUTLINED_FUNCTION_29_16(v1, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_26_0();
  uint64_t v6 = OUTLINED_FUNCTION_36_2(v5);
  if ((_DWORD)v6 == 1)
  {
    OUTLINED_FUNCTION_41_1(v6, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
  }

  else
  {
    uint64_t v7 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v7);
  }

  OUTLINED_FUNCTION_0_24();
  *(void *)(v3 + 120) = &type metadata for Bool;
  *(_BYTE *)(v3 + 96) = v8;
  char v9 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executeDialog(catId:parameters:));
  v0[6] = v9;
  *char v9 = v0;
  v9[1] = SuggestionsCATs.phoneCall_StartFTCall(name:hasReference:);
  return v11(0xD000000000000021LL, 0x8000000000341FD0LL, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_39_0(v4);
  *(void *)(v2 + 56) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v6, v7, v8);
  }

  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_23_3();
    return OUTLINED_FUNCTION_8_3(v0, *(uint64_t (**)(void))(v3 + 8));
  }

uint64_t SuggestionsCATs.phoneCall_StartFTCall(name:hasReference:)(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 64) = a2;
  *(void *)(v3 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = OUTLINED_FUNCTION_12_0(v4);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *boxed_opaque_existential_1;
  uint64_t v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_8_2(v5, 128LL);
  *(_OWORD *)(v6 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D880;
  uint64_t v7 = (void *)(v6 + 48);
  char v8 = OUTLINED_FUNCTION_30_33(v6);
  outlined init with copy of SpeakableString?( v8,  (uint64_t)v4,  &demangling cache variable for type metadata for SpeakableString?);
  char v9 = OUTLINED_FUNCTION_26_0();
  uint64_t v10 = OUTLINED_FUNCTION_29_33((uint64_t)v4);
  if (v11)
  {
    OUTLINED_FUNCTION_41_1(v10, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v7 = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
  }

  else
  {
    *(void *)(v6 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v9;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
    OUTLINED_FUNCTION_79_2( (uint64_t)boxed_opaque_existential_1,  (uint64_t)v4,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL));
  }

  OUTLINED_FUNCTION_14_51();
  *(void *)(v6 + 120) = &type metadata for Bool;
  *(_BYTE *)(v6 + 96) = a2 & 1;
  dispatch thunk of CATWrapper.execute(catId:parameters:)(0xD000000000000021LL, 0x8000000000341FD0LL, v6);
  return swift_bridgeObjectRelease();
}

uint64_t SuggestionsCATs.phoneCall_StartGFTCall(completion:)()
{
  return dispatch thunk of CATWrapper.execute(catId:parameters:completion:)(0xD000000000000022LL);
}

uint64_t SuggestionsCATs.phoneCall_StartGFTCall()(uint64_t a1)
{
  uint64_t v3 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return v5(a1, 0xD000000000000022LL, 0x8000000000342000LL, _swiftEmptyArrayStorage);
}

uint64_t SuggestionsCATs.phoneCall_StartGFTCall()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executeDialog(catId:parameters:));
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return v3(0xD000000000000022LL, 0x8000000000342000LL, _swiftEmptyArrayStorage);
}

{
  return dispatch thunk of CATWrapper.execute(catId:parameters:)( 0xD000000000000022LL,  0x8000000000342000LL,  _swiftEmptyArrayStorage);
}

uint64_t SuggestionsCATs.__allocating_init(templateDir:options:globals:)()
{
  return SuggestionsCATs.init(templateDir:options:globals:)();
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATs.Properties and conformance SuggestionsCATs.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATs.Properties and conformance SuggestionsCATs.Properties;
  if (!lazy protocol witness table cache variable for type SuggestionsCATs.Properties and conformance SuggestionsCATs.Properties)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATs.Properties,  &type metadata for SuggestionsCATs.Properties);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATs.Properties and conformance SuggestionsCATs.Properties);
  }

  return result;
}

uint64_t type metadata accessor for SuggestionsCATs(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for SuggestionsCATs;
  if (!type metadata singleton initialization cache for SuggestionsCATs) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SuggestionsCATs);
  }
  return result;
}

uint64_t type metadata completion function for SuggestionsCATs(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for SuggestionsCATs);
}

uint64_t ObjC metadata update function for SuggestionsCATs()
{
  return type metadata accessor for SuggestionsCATs(0LL);
}

uint64_t storeEnumTagSinglePayload for SuggestionsCATs.Properties( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1DFACC + 4 * byte_3345D5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1DFB00 + 4 * asc_3345D0[v4]))();
}

uint64_t sub_1DFB00(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DFB08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1DFB10LL);
  }
  return result;
}

uint64_t sub_1DFB1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1DFB24LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1DFB28(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DFB30(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SuggestionsCATs.Properties()
{
  return &type metadata for SuggestionsCATs.Properties;
}

void OUTLINED_FUNCTION_13_65()
{
  *(_BYTE *)(v0 + 93) = 0;
  *(_WORD *)(v0 + 94) = -5120;
}

void OUTLINED_FUNCTION_14_51()
{
  *(_BYTE *)(v0 + 93) = 0;
  *(_WORD *)(v0 + 94) = -5120;
}

uint64_t OUTLINED_FUNCTION_28_40(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_29_33(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_30_33(uint64_t a1)
{
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 1701667182LL;
  *(void *)(a1 + 40) = 0xE400000000000000LL;
  return v1;
}

uint64_t OUTLINED_FUNCTION_31_33(uint64_t a1)
{
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 1701667182LL;
  *(void *)(a1 + 40) = 0xE400000000000000LL;
  return v1;
}

uint64_t PhoneCallActivityNotificationFlow.__allocating_init(_:sharedGlobals:)(uint64_t a1, __int128 *a2)
{
  uint64_t v5 = swift_allocObject(v2, 112LL, 7LL);
  PhoneCallActivityNotificationFlow.init(_:sharedGlobals:)(a1, a2);
  return v5;
}

uint64_t PhoneCallActivityNotificationFlow.init(_:sharedGlobals:)(uint64_t a1, __int128 *a2)
{
  *(_BYTE *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = 0;
  *(void *)(v2 + 24) = a1;
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a2 + 4);
  __swift_project_boxed_opaque_existential_1(a2, v4);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v7, v4, v5);
  outlined init with take of AppSelectionSignalComponent(v7, v2 + 32);
  outlined init with take of AppSelectionSignalComponent(a2, v2 + 72);
  return v2;
}

uint64_t PhoneCallActivityNotificationFlow.on(input:)(uint64_t a1)
{
  LOBYTE(a1) = dispatch thunk of AnyFlow.on(input:)(a1);
  OUTLINED_FUNCTION_38_1();
  return a1 & 1;
}

uint64_t PhoneCallActivityNotificationFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PhoneCallActivityNotificationFlow();
  uint64_t v6 = lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy( &lazy protocol witness table cache variable for type PhoneCallActivityNotificationFlow and conformance PhoneCallActivityNotificationFlow,  v5,  (uint64_t (*)(uint64_t))type metadata accessor for PhoneCallActivityNotificationFlow,  (uint64_t)&protocol conformance descriptor for PhoneCallActivityNotificationFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v6);
}

uint64_t type metadata accessor for PhoneCallActivityNotificationFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin33PhoneCallActivityNotificationFlow);
}

uint64_t PhoneCallActivityNotificationFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v1;
  return swift_task_switch(PhoneCallActivityNotificationFlow.execute(), 0LL, 0LL);
}

uint64_t PhoneCallActivityNotificationFlow.execute()()
{
  if ((*(_BYTE *)(*(void *)(v0 + 72) + 16LL) & 1) != 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v1 = type metadata accessor for Logger(0LL);
    uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
    int v3 = (os_log_s *)Logger.logObject.getter(v2);
    os_log_type_t v5 = static os_log_type_t.debug.getter(v3, v4);
    if (os_log_type_enabled(v3, v5))
    {
      uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_1_0();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_0, v3, v5, "Activity Notification: Posted", v6, 2u);
      OUTLINED_FUNCTION_0_2((uint64_t)v6);
    }

    uint64_t v7 = *(void *)(v0 + 72);

    *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = *(void *)(v7 + 24);
    uint64_t v8 = type metadata accessor for AnyFlow(0LL);
    uint64_t v9 = Flow.eraseToAnyFlow()(v8);
    static ExecuteResponse.complete(next:)(v9);
    OUTLINED_FUNCTION_38_1();
  }

  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.siriPhone);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v14 = static os_log_type_t.debug.getter(v12, v13);
    if (os_log_type_enabled(v12, v14))
    {
      id v15 = (uint8_t *)OUTLINED_FUNCTION_1_0();
      *(_WORD *)id v15 = 0;
      _os_log_impl(&dword_0, v12, v14, "Activity Notification: Posting", v15, 2u);
      OUTLINED_FUNCTION_0_2((uint64_t)v15);
    }

    id v16 = *(void **)(v0 + 72);

    uint64_t v17 = v16[12];
    uint64_t v18 = v16[13];
    __swift_project_boxed_opaque_existential_1(v16 + 9, v17);
    (*(void (**)(uint64_t, uint64_t))(v18 + 104))(v17, v18);
    uint64_t v19 = *(void *)(v0 + 40);
    uint64_t v20 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v19);
    uint64_t v21 = type metadata accessor for PhoneCallNotificationFlowStrategy();
    uint64_t v22 = swift_allocObject(v21, 16LL, 7LL);
    *(void *)(v0 + 56) = v22;
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 80);
    uint64_t v24 = lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy( &lazy protocol witness table cache variable for type PhoneCallNotificationFlowStrategy and conformance PhoneCallNotificationFlowStrategy,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for PhoneCallNotificationFlowStrategy,  (uint64_t)&protocol conformance descriptor for PhoneCallNotificationFlowStrategy);
    uint64_t v25 = v23(v0 + 56, v21, v24, v19, v20);
    swift_release(v22);
    swift_retain();
    static ExecuteResponse.ongoing(next:childCompletion:)( v25,  partial apply for closure #1 in PhoneCallActivityNotificationFlow.execute(),  v16);
    swift_release(v16);
    OUTLINED_FUNCTION_38_1();
    __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall PhoneCallActivityNotificationFlow.overrideStateForTesting(state:)( PhoneCallFlowDelegatePlugin::PhoneCallActivityNotificationFlow::State state)
{
  *(_BYTE *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = state & 1;
}

void *PhoneCallActivityNotificationFlow.deinit()
{
  return v0;
}

uint64_t PhoneCallActivityNotificationFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance PhoneCallActivityNotificationFlow( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for PhoneCallActivityNotificationFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

void partial apply for closure #1 in PhoneCallActivityNotificationFlow.execute()()
{
  *(_BYTE *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = 1;
}

unint64_t lazy protocol witness table accessor for type PhoneCallActivityNotificationFlow.State and conformance PhoneCallActivityNotificationFlow.State()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallActivityNotificationFlow.State and conformance PhoneCallActivityNotificationFlow.State;
  if (!lazy protocol witness table cache variable for type PhoneCallActivityNotificationFlow.State and conformance PhoneCallActivityNotificationFlow.State)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneCallActivityNotificationFlow.State,  &type metadata for PhoneCallActivityNotificationFlow.State);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallActivityNotificationFlow.State and conformance PhoneCallActivityNotificationFlow.State);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for PhoneCallActivityNotificationFlow.State( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1E0170 + 4 * byte_3346B5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1E01A4 + 4 * asc_3346B0[v4]))();
}

uint64_t sub_1E01A4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E01AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1E01B4LL);
  }
  return result;
}

uint64_t sub_1E01C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1E01C8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1E01CC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E01D4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PhoneCallActivityNotificationFlow.State()
{
  return &type metadata for PhoneCallActivityNotificationFlow.State;
}

uint64_t TCCTemplatesProviding.promptToEnableAppSnippetTitleAndSubtitle(appDisplayInfo:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[189] = v3;
  v4[183] = a3;
  v4[177] = a2;
  v4[171] = a1;
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?)
                 - 8);
  v4[195] = v6;
  v4[201] = *(void *)(v6 + 64);
  v4[207] = OUTLINED_FUNCTION_28();
  v4[213] = OUTLINED_FUNCTION_28();
  uint64_t v7 = *(void *)(a2 - 8);
  v4[214] = v7;
  v4[215] = *(void *)(v7 + 64);
  v4[216] = OUTLINED_FUNCTION_28();
  v4[217] = OUTLINED_FUNCTION_28();
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_4_0();
}

uint64_t TCCTemplatesProviding.promptToEnableAppSnippetTitleAndSubtitle(appDisplayInfo:)()
{
  uint64_t v1 = v0[217];
  uint64_t v25 = v0[216];
  uint64_t v2 = v0[215];
  uint64_t v3 = v0[214];
  uint64_t v4 = v0[213];
  uint64_t v26 = v0[207];
  uint64_t v5 = v0[201];
  uint64_t v6 = v0[195];
  uint64_t v7 = v0[183];
  uint64_t v8 = v0[177];
  uint64_t v9 = v0[171];
  uint64_t v23 = v0[189];
  uint64_t v24 = v9;
  uint64_t v21 = v7;
  uint64_t v22 = *(void (**)(uint64_t))(v3 + 16);
  v22(v1);
  outlined init with copy of AppDisplayInfo?(v9, v4);
  uint64_t v10 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v11 = (v10 + 32) & ~v10;
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = (v2 + v12 + v11) & ~v12;
  uint64_t v14 = v13 + v5;
  uint64_t v20 = v13 + v5;
  uint64_t v15 = v10 | v12 | 7;
  uint64_t v16 = swift_allocObject(&unk_40C480, v14, v15);
  v0[218] = v16;
  *(void *)(v16 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v8;
  *(void *)(v16 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v7;
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
  v17(v16 + v11, v1, v8);
  outlined init with take of AppDisplayInfo?(v4, v16 + v13);
  swift_retain();
  swift_asyncLet_begin( v0 + 82,  0LL,  &type metadata for String,  &async function pointer to partial apply for implicit closure #1 in TCCTemplatesProviding.promptToEnableAppSnippetTitleAndSubtitle(appDisplayInfo:),  v16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v22)(v25, v23, v8);
  outlined init with copy of AppDisplayInfo?(v24, v26);
  uint64_t v18 = swift_allocObject(&unk_40C4A8, v20, v15);
  v0[219] = v18;
  *(void *)(v18 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v8;
  *(void *)(v18 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v21;
  v17(v18 + v11, v25, v8);
  outlined init with take of AppDisplayInfo?(v26, v18 + v13);
  swift_retain();
  swift_asyncLet_begin( v0 + 2,  0LL,  &type metadata for String,  &async function pointer to partial apply for implicit closure #2 in TCCTemplatesProviding.promptToEnableAppSnippetTitleAndSubtitle(appDisplayInfo:),  v18);
  return swift_asyncLet_get_throwing( v0 + 82,  v0 + 169,  TCCTemplatesProviding.promptToEnableAppSnippetTitleAndSubtitle(appDisplayInfo:),  v0 + 178);
}

{
  uint64_t v0;
  void *v1;
  v1[220] = v0;
  if (v0) {
    return OUTLINED_FUNCTION_1_19();
  }
  v1[221] = v1[169];
  v1[222] = v1[170];
  swift_bridgeObjectRetain();
  return swift_asyncLet_get_throwing( v1 + 2,  v1 + 167,  TCCTemplatesProviding.promptToEnableAppSnippetTitleAndSubtitle(appDisplayInfo:),  v1 + 196);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  v1[223] = v0;
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return swift_task_switch(v2, v3, v4);
  }

  else
  {
    v1[224] = v1[167];
    v1[225] = v1[168];
    swift_bridgeObjectRetain();
    return OUTLINED_FUNCTION_1_19();
  }

{
  return OUTLINED_FUNCTION_33_0((uint64_t)TCCTemplatesProviding.promptToEnableAppSnippetTitleAndSubtitle(appDisplayInfo:));
}

{
  OUTLINED_FUNCTION_12_66();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)TCCTemplatesProviding.promptToEnableAppSnippetTitleAndSubtitle(appDisplayInfo:));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 1752);
  uint64_t v2 = *(void *)(v0 + 1736);
  swift_release_n(*(void *)(v0 + 1744), 2LL);
  swift_release(v1);
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  return (*(uint64_t (**)(void, void, void, void))(v0 + 8))( *(void *)(v0 + 1768),  *(void *)(v0 + 1776),  *(void *)(v0 + 1792),  *(void *)(v0 + 1800));
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)TCCTemplatesProviding.promptToEnableAppSnippetTitleAndSubtitle(appDisplayInfo:));
}

{
  OUTLINED_FUNCTION_12_66();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)TCCTemplatesProviding.promptToEnableAppSnippetTitleAndSubtitle(appDisplayInfo:));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_5_74();
  swift_release(v0);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  swift_task_dealloc(v2);
  return OUTLINED_FUNCTION_6_73(*(uint64_t (**)(void))(v1 + 8));
}

{
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)TCCTemplatesProviding.promptToEnableAppSnippetTitleAndSubtitle(appDisplayInfo:));
}

{
  OUTLINED_FUNCTION_12_66();
  OUTLINED_FUNCTION_2_16();
  return OUTLINED_FUNCTION_1_19();
}

{
  return OUTLINED_FUNCTION_33_0((uint64_t)TCCTemplatesProviding.promptToEnableAppSnippetTitleAndSubtitle(appDisplayInfo:));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_5_74();
  swift_release(v0);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  swift_task_dealloc(v2);
  return OUTLINED_FUNCTION_6_73(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t implicit closure #1 in TCCTemplatesProviding.promptToEnableAppSnippetTitleAndSubtitle(appDisplayInfo:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  uint64_t v9 = *(int **)(a5 + 24);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
  uint64_t v10 = (void *)swift_task_alloc(v9[1]);
  *(void *)(v5 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v10;
  *uint64_t v10 = v5;
  v10[1] = implicit closure #3 in EmergencyDuringOngoingCallConfirmationStrategy.makePromptForConfirmation(itemToConfirm:);
  return v12(a3, a4, a5);
}

uint64_t outlined init with copy of AppDisplayInfo?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of AppDisplayInfo?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for implicit closure #1 in TCCTemplatesProviding.promptToEnableAppSnippetTitleAndSubtitle(appDisplayInfo:)()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_4384FC);
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  uint64_t v2 = OUTLINED_FUNCTION_11_64(v1);
  return implicit closure #1 in TCCTemplatesProviding.promptToEnableAppSnippetTitleAndSubtitle(appDisplayInfo:)( v2,  v3,  v4,  v5,  v6);
}

uint64_t implicit closure #2 in TCCTemplatesProviding.promptToEnableAppSnippetTitleAndSubtitle(appDisplayInfo:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  uint64_t v9 = *(int **)(a5 + 16);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
  uint64_t v10 = (void *)swift_task_alloc(v9[1]);
  *(void *)(v5 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v10;
  *uint64_t v10 = v5;
  v10[1] = implicit closure #2 in EmergencyDuringOngoingCallConfirmationStrategy.makePromptForConfirmation(itemToConfirm:);
  return v12(a3, a4, a5);
}

uint64_t objectdestroyTm_14()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?)
                 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v4 + v5 + v7) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  uint64_t v10 = type metadata accessor for AppDisplayInfo(0LL);
  return swift_deallocObject(v0, v8 + v9, v3 | v7 | 7);
}

uint64_t partial apply for implicit closure #2 in TCCTemplatesProviding.promptToEnableAppSnippetTitleAndSubtitle(appDisplayInfo:)()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_43850C);
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  uint64_t v2 = OUTLINED_FUNCTION_11_64(v1);
  return implicit closure #2 in TCCTemplatesProviding.promptToEnableAppSnippetTitleAndSubtitle(appDisplayInfo:)( v2,  v3,  v4,  v5,  v6);
}

uint64_t TCCTemplatesProvider.promptToEnableApp(appDisplayInfo:deviceState:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for TCCResponses(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  OUTLINED_FUNCTION_19_1();
  return swift_task_switch(v5, v6, v7);
}

uint64_t TCCTemplatesProvider.promptToEnableApp(appDisplayInfo:deviceState:)()
{
  uint64_t v1 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for Any[1],  &protocol witness table for String);
  v0[7] = v1;
  v0[8] = v2;
  *uint64_t v2 = v0;
  v2[1] = TCCTemplatesProvider.promptToEnableApp(appDisplayInfo:deviceState:);
  return TCCResponses.promptToEnableApp(appDisplayInfo:deviceState:catOverrides:)(v0[2], v0[3], v1);
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TCCTemplatesProvider.promptToEnableApp(appDisplayInfo:deviceState:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 64);
  uint64_t v5 = *v2;
  *(void *)(v5 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v1;
  swift_task_dealloc(v4);
  uint64_t v6 = *(void *)(v5 + 48);
  (*(void (**)(uint64_t, void))(*(void *)(v5 + 40) + 8LL))(v6, *(void *)(v5 + 32));
  swift_bridgeObjectRelease();
  if (v1)
  {
    OUTLINED_FUNCTION_19_1();
    return swift_task_switch(v7, v8, v9);
  }

  else
  {
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
  }

uint64_t TCCTemplatesProvider.promptToEnableAppSnippetSubtitle(appDisplayInfo:)(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to static TCCTemplates.promptToEnableAppSnippetSubtitle(appDisplayInfo:)[1]);
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = TCCTemplatesProvider.promptToEnableAppSnippetSubtitle(appDisplayInfo:);
  return static TCCTemplates.promptToEnableAppSnippetSubtitle(appDisplayInfo:)(a1);
}

uint64_t TCCTemplatesProvider.promptToEnableAppSnippetTitle(appDisplayInfo:)(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to static TCCTemplates.promptToEnableAppSnippetTitle(appDisplayInfo:)[1]);
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = TCCTemplatesProvider.promptToEnableAppSnippetTitle(appDisplayInfo:);
  return static TCCTemplates.promptToEnableAppSnippetTitle(appDisplayInfo:)(a1);
}

uint64_t TCCTemplatesProvider.promptToEnableAppSnippetTitle(appDisplayInfo:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = OUTLINED_FUNCTION_22_2();
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v6, v7);
}

uint64_t protocol witness for TCCTemplatesProviding.promptToEnableApp(appDisplayInfo:deviceState:) in conformance TCCTemplatesProvider( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_43851C);
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return TCCTemplatesProvider.promptToEnableApp(appDisplayInfo:deviceState:)(a1, a2);
}

uint64_t protocol witness for TCCTemplatesProviding.promptToEnableAppSnippetSubtitle(appDisplayInfo:) in conformance TCCTemplatesProvider( uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_438524);
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = TCCTemplatesProvider.promptToEnableAppSnippetSubtitle(appDisplayInfo:);
  return TCCTemplatesProvider.promptToEnableAppSnippetSubtitle(appDisplayInfo:)(a1);
}

uint64_t protocol witness for TCCTemplatesProviding.promptToEnableAppSnippetTitle(appDisplayInfo:) in conformance TCCTemplatesProvider( uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_43852C);
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = TCCTemplatesProvider.promptToEnableAppSnippetSubtitle(appDisplayInfo:);
  return TCCTemplatesProvider.promptToEnableAppSnippetTitle(appDisplayInfo:)(a1);
}

ValueMetadata *type metadata accessor for TCCTemplatesProvider()
{
  return &type metadata for TCCTemplatesProvider;
}

uint64_t OUTLINED_FUNCTION_6_73(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_11_64(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_12_66()
{
  return swift_release(*(void *)(v0 + 1752));
}

void PhoneStartCallIntent.Builder.__allocating_init()()
{
}

void PhoneStartCallIntent.__allocating_init(callCapability:audioRoute:preferredCallProvider:destinationType:contacts:callGroups:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = v5;
  uint64_t v13 = type metadata accessor for PhoneStartCallIntent.Builder(0LL);
  uint64_t v14 = OUTLINED_FUNCTION_15_2(v13);
  PhoneStartCallIntent.Builder.init()();
  (*(void (**)(uint64_t))(*(void *)v14 + 288LL))(a1);
  OUTLINED_FUNCTION_37_30();
  OUTLINED_FUNCTION_5_20(*(uint64_t (**)(void))(*(void *)v6 + 304LL));
  OUTLINED_FUNCTION_41_26();
  (*(void (**)(uint64_t))(*(void *)v14 + 320LL))(a3);
  OUTLINED_FUNCTION_37_30();
  OUTLINED_FUNCTION_5_20(*(uint64_t (**)(void))(*(void *)v6 + 336LL));
  OUTLINED_FUNCTION_41_26();
  (*(void (**)(uint64_t))(*(void *)v14 + 352LL))(a5);
  OUTLINED_FUNCTION_37_30();
  OUTLINED_FUNCTION_5_20(*(uint64_t (**)(void))(*(void *)v6 + 368LL));
  OUTLINED_FUNCTION_41_26();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(v7 + 176))(v14);
  swift_release(a5);
  outlined destroy of SpeakableString?(a4);
  outlined destroy of SpeakableString?(a3);
  outlined destroy of SpeakableString?(a2);
  outlined destroy of SpeakableString?(a1);
  OUTLINED_FUNCTION_7_5();
}

void PhoneStartCallIntent.Builder.callCapability.getter(uint64_t a1@<X8>)
{
}

void PhoneStartCallIntent.Builder.callCapability.setter(uint64_t a1)
{
}

void PhoneStartCallIntent.Builder.callCapability.modify(uint64_t a1)
{
}

void PhoneStartCallIntent.Builder.audioRoute.getter(uint64_t a1@<X8>)
{
}

void PhoneStartCallIntent.Builder.audioRoute.setter(uint64_t a1)
{
}

void PhoneStartCallIntent.Builder.audioRoute.modify(uint64_t a1)
{
}

uint64_t key path setter for PhoneStartCallIntent.Builder.preferredCallProvider : PhoneStartCallIntent.Builder( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of SpeakableString?(a1, (uint64_t)v5);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 184LL))(v5);
}

void PhoneStartCallIntent.Builder.preferredCallProvider.getter(uint64_t a1@<X8>)
{
}

void PhoneStartCallIntent.Builder.preferredCallProvider.setter(uint64_t a1)
{
}

void PhoneStartCallIntent.Builder.preferredCallProvider.modify(uint64_t a1)
{
}

uint64_t key path setter for PhoneStartCallIntent.Builder.destinationType : PhoneStartCallIntent.Builder( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of SpeakableString?(a1, (uint64_t)v5);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 208LL))(v5);
}

void PhoneStartCallIntent.Builder.destinationType.getter(uint64_t a1@<X8>)
{
}

void PhoneStartCallIntent.Builder.destinationType.setter(uint64_t a1)
{
}

void PhoneStartCallIntent.Builder.destinationType.modify(uint64_t a1)
{
}

uint64_t key path setter for PhoneStartCallIntent.Builder.contacts : PhoneStartCallIntent.Builder( void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 232LL);
  uint64_t v3 = swift_retain(*a1);
  return v2(v3);
}

void PhoneStartCallIntent.Builder.contacts.getter()
{
}

void PhoneStartCallIntent.Builder.contacts.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent7Builder_contacts);
  OUTLINED_FUNCTION_25_0((uint64_t)v3, (uint64_t)v5, 1LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  swift_release(v4);
  OUTLINED_FUNCTION_60_2();
}

void PhoneStartCallIntent.Builder.contacts.modify(uint64_t a1)
{
}

uint64_t key path setter for PhoneStartCallIntent.Builder.callGroups : PhoneStartCallIntent.Builder( void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 256LL);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

void PhoneStartCallIntent.Builder.callGroups.getter()
{
}

void PhoneStartCallIntent.Builder.callGroups.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent7Builder_callGroups);
  OUTLINED_FUNCTION_25_0((uint64_t)v3, (uint64_t)v4, 1LL);
  *uint64_t v3 = a1;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_60_2();
}

void PhoneStartCallIntent.Builder.callGroups.modify(uint64_t a1)
{
}

void PhoneStartCallIntent.Builder.init()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent7Builder_callCapability;
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_15_12(v1);
  OUTLINED_FUNCTION_15_12(v0 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent7Builder_audioRoute);
  OUTLINED_FUNCTION_15_12(v0 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent7Builder_preferredCallProvider);
  OUTLINED_FUNCTION_15_12(v0 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent7Builder_destinationType);
  *(void *)(v0 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent7Builder_contacts) = 0LL;
  *(void *)(v0 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent7Builder_callGroups) = _swiftEmptyArrayStorage;
  OUTLINED_FUNCTION_6();
}

uint64_t type metadata accessor for PhoneStartCallIntent.Builder(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for PhoneStartCallIntent.Builder,  (uint64_t)&nominal type descriptor for PhoneStartCallIntent.Builder);
}

void PhoneStartCallIntent.Builder.__allocating_init(callCapability:audioRoute:preferredCallProvider:destinationType:contacts:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void PhoneStartCallIntent.Builder.init(callCapability:audioRoute:preferredCallProvider:destinationType:contacts:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = v5 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent7Builder_callCapability;
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_164(v9);
  uint64_t v10 = v5 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent7Builder_audioRoute;
  OUTLINED_FUNCTION_164(v5 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent7Builder_audioRoute);
  uint64_t v11 = v5 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent7Builder_preferredCallProvider;
  OUTLINED_FUNCTION_164(v5 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent7Builder_preferredCallProvider);
  uint64_t v12 = v5 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent7Builder_destinationType;
  OUTLINED_FUNCTION_164(v5 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent7Builder_destinationType);
  uint64_t v13 = (uint64_t *)(v5 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent7Builder_contacts);
  *(void *)(v5 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent7Builder_contacts) = 0LL;
  *(void *)(v5 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent7Builder_callGroups) = _swiftEmptyArrayStorage;
  OUTLINED_FUNCTION_47_20((uint64_t)v8, a1);
  OUTLINED_FUNCTION_10_57();
  OUTLINED_FUNCTION_5_9(v9, v14);
  outlined assign with take of SpeakableString?((uint64_t)v8, v9);
  OUTLINED_FUNCTION_46_23();
  OUTLINED_FUNCTION_47_20((uint64_t)v8, v20);
  OUTLINED_FUNCTION_10_57();
  OUTLINED_FUNCTION_5_9(v10, v15);
  outlined assign with take of SpeakableString?((uint64_t)v8, v10);
  OUTLINED_FUNCTION_46_23();
  OUTLINED_FUNCTION_47_20((uint64_t)v8, v21);
  OUTLINED_FUNCTION_10_57();
  OUTLINED_FUNCTION_5_9(v11, v16);
  outlined assign with take of SpeakableString?((uint64_t)v8, v11);
  OUTLINED_FUNCTION_46_23();
  OUTLINED_FUNCTION_47_20((uint64_t)v8, v22);
  OUTLINED_FUNCTION_10_57();
  OUTLINED_FUNCTION_5_9(v12, v17);
  outlined assign with take of SpeakableString?((uint64_t)v8, v12);
  OUTLINED_FUNCTION_46_23();
  OUTLINED_FUNCTION_25_0((uint64_t)v13, (uint64_t)v24, 1LL);
  uint64_t v18 = *v13;
  *uint64_t v13 = v23;
  swift_release(v18);
  OUTLINED_FUNCTION_7_5();
}

void PhoneStartCallIntent.Builder.withPreferredCallProvider(_:)()
{
}

void PhoneStartCallIntent.Builder.withPreferredCallProvider(print:speak:)()
{
  uint64_t v0 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_13_4(v0);
  OUTLINED_FUNCTION_33_8(*(uint64_t (**)(uint64_t))(v1 + 184));
  UsoEntity_common_Person.usoPerson.getter();
  OUTLINED_FUNCTION_16();
}

void PhoneStartCallIntent.Builder.withDestinationType(_:)()
{
}

void PhoneStartCallIntent.Builder.withDestinationType(print:speak:)()
{
  uint64_t v0 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_13_4(v0);
  OUTLINED_FUNCTION_33_8(*(uint64_t (**)(uint64_t))(v1 + 208));
  UsoEntity_common_Person.usoPerson.getter();
  OUTLINED_FUNCTION_16();
}

uint64_t PhoneStartCallIntent.Builder.withContacts(_:)()
{
  uint64_t v1 = *(void (**)(uint64_t))(*(void *)v0 + 232LL);
  uint64_t v2 = swift_retain();
  v1(v2);
  return OUTLINED_FUNCTION_27_0(v0);
}

uint64_t PhoneStartCallIntent.Builder.withContacts(_:)(uint64_t a1)
{
  if (a1) {
    a1 = (*(uint64_t (**)(void))(*(void *)a1 + 128LL))();
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 232LL))(a1);
  return OUTLINED_FUNCTION_27_0(v1);
}

uint64_t PhoneStartCallIntent.Builder.withCallGroups(_:)()
{
  uint64_t v1 = *(void (**)(uint64_t))(*(void *)v0 + 256LL);
  uint64_t v2 = swift_bridgeObjectRetain();
  v1(v2);
  return OUTLINED_FUNCTION_27_0(v0);
}

void PhoneStartCallIntent.Builder.build()()
{
  uint64_t v0 = type metadata accessor for PhoneStartCallIntent(0LL);
  OUTLINED_FUNCTION_15_2(v0);
  uint64_t v1 = UsoEntity_common_Person.usoPerson.getter();
  PhoneStartCallIntent.init(builder:)(v1);
  OUTLINED_FUNCTION_2();
}

void PhoneStartCallIntent.__allocating_init(builder:)(uint64_t a1)
{
}

uint64_t type metadata accessor for PhoneStartCallIntent(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for PhoneStartCallIntent,  (uint64_t)&nominal type descriptor for PhoneStartCallIntent);
}

uint64_t PhoneStartCallIntent.Builder.deinit()
{
  return v0;
}

uint64_t PhoneStartCallIntent.Builder.__deallocating_deinit()
{
  return PhoneCallProvider.Builder.__deallocating_deinit((void (*)(void))PhoneStartCallIntent.Builder.deinit);
}

unint64_t static PhoneStartCallIntent.catTypeName.getter()
{
  return OUTLINED_FUNCTION_12_62();
}

uint64_t key path setter for PhoneStartCallIntent.mockGlobals : PhoneStartCallIntent(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 160LL);
  id v4 = *a1;
  return v3(v2);
}

uint64_t PhoneStartCallIntent.callCapability.getter@<X0>(uint64_t a1@<X8>)
{
  return OUTLINED_FUNCTION_10_17(a1, OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_callCapability);
}

uint64_t PhoneStartCallIntent.audioRoute.getter@<X0>(uint64_t a1@<X8>)
{
  return OUTLINED_FUNCTION_10_17(a1, OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_audioRoute);
}

uint64_t PhoneStartCallIntent.preferredCallProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return OUTLINED_FUNCTION_10_17( a1,  OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_preferredCallProvider);
}

uint64_t PhoneStartCallIntent.destinationType.getter@<X0>(uint64_t a1@<X8>)
{
  return OUTLINED_FUNCTION_10_17( a1,  OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_destinationType);
}

uint64_t PhoneStartCallIntent.contacts.getter()
{
  return swift_retain(*(void *)(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_contacts));
}

uint64_t PhoneStartCallIntent.callGroups.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0
                                            + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_callGroups));
}

uint64_t *PhoneStartCallIntent.init(builder:)(uint64_t a1)
{
  id v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_7_6();
  v1[2] = 0LL;
  (*(void (**)(void))(*(void *)a1 + 128LL))();
  OUTLINED_FUNCTION_19_11(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_callCapability);
  OUTLINED_FUNCTION_61_14();
  OUTLINED_FUNCTION_19_11(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_audioRoute);
  OUTLINED_FUNCTION_61_14();
  OUTLINED_FUNCTION_19_11(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_preferredCallProvider);
  OUTLINED_FUNCTION_61_14();
  uint64_t v4 = OUTLINED_FUNCTION_19_11(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_destinationType);
  *(uint64_t *)((char *)v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_contacts) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224LL))(v4);
  *(uint64_t *)((char *)v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_callGroups) = (*(uint64_t (**)(void))(*(void *)a1 + 248LL))();
  if (((*(uint64_t (**)(void))(*v1 + 184))() & 1) == 0)
  {
    uint64_t v5 = (void *)static Log.siriDialogEngine.getter();
    static os_log_type_t.error.getter();
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
    *(_OWORD *)(v7 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D870;
    uint64_t v14 = *v2;
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneStartCallIntent.Type);
    uint64_t v9 = String.init<A>(describing:)(&v14, v8);
    uint64_t v11 = v10;
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v7 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v9;
    *(void *)(v7 + 40) = v11;
    os_log(_:dso:log:type:_:)("Building an instance of %s without all required inputs", v13);

    swift_bridgeObjectRelease();
  }

  swift_release(a1);
  return v2;
}

Swift::Bool __swiftcall PhoneStartCallIntent.allRequiredInputsHaveValues()()
{
  uint64_t v4 = (char *)&v12 - v3;
  __chkstk_darwin();
  OUTLINED_FUNCTION_43_17();
  __chkstk_darwin();
  uint64_t v6 = (char *)&v12 - v5;
  OUTLINED_FUNCTION_54_15(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_callCapability);
  OUTLINED_FUNCTION_26_0();
  int v7 = OUTLINED_FUNCTION_27_44((uint64_t)v6);
  outlined destroy of SpeakableString?((uint64_t)v6);
  if (v7 == 1) {
    return 0;
  }
  OUTLINED_FUNCTION_55_15(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_audioRoute);
  int v8 = OUTLINED_FUNCTION_27_44(v2);
  outlined destroy of SpeakableString?(v2);
  if (v8 == 1) {
    return 0;
  }
  outlined init with copy of SpeakableString?( v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_preferredCallProvider,  (uint64_t)v4);
  int v9 = OUTLINED_FUNCTION_27_44((uint64_t)v4);
  outlined destroy of SpeakableString?((uint64_t)v4);
  if (v9 == 1) {
    return 0;
  }
  outlined init with copy of SpeakableString?( v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_destinationType,  v0);
  int v10 = OUTLINED_FUNCTION_27_44(v0);
  outlined destroy of SpeakableString?(v0);
  return v10 != 1
      && *(void *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_contacts) != 0LL;
}

uint64_t PhoneStartCallIntent.getProperty(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  int v9 = (char *)&v24 - v8;
  __chkstk_darwin();
  uint64_t v11 = (char *)&v24 - v10;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v24 - v12;
  BOOL v14 = a1 == 0x617061436C6C6163LL && a2 == 0xEE007974696C6962LL;
  if (v14 || (OUTLINED_FUNCTION_1_3(0x617061436C6C6163LL, 0xEE007974696C6962LL) & 1) != 0)
  {
    outlined init with copy of SpeakableString?( v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_callCapability,  (uint64_t)v13);
    OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_27_9((uint64_t)v13);
    if (!v14) {
      goto LABEL_31;
    }
    uint64_t v15 = (uint64_t)v13;
    goto LABEL_9;
  }

  BOOL v18 = a1 == 0x756F526F69647561LL && a2 == 0xEA00000000006574LL;
  if (v18 || (OUTLINED_FUNCTION_1_3(0x756F526F69647561LL, 0xEA00000000006574LL) & 1) != 0)
  {
    outlined init with copy of SpeakableString?( v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_audioRoute,  (uint64_t)v11);
    OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_27_9((uint64_t)v11);
    if (!v14) {
      goto LABEL_31;
    }
    uint64_t v15 = (uint64_t)v11;
    goto LABEL_9;
  }

  if (a1 == 0xD000000000000015LL && a2 == 0x8000000000341AF0LL
    || (OUTLINED_FUNCTION_1_3(0xD000000000000015LL, 0x8000000000341AF0LL) & 1) != 0)
  {
    OUTLINED_FUNCTION_54_15(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_preferredCallProvider);
    OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_27_9((uint64_t)v9);
    if (!v14) {
      goto LABEL_31;
    }
    uint64_t v15 = (uint64_t)v9;
LABEL_9:
    uint64_t result = outlined destroy of SpeakableString?(v15);
LABEL_10:
    *a3 = 0u;
    a3[1] = 0u;
    return result;
  }

  BOOL v19 = a1 == 0x74616E6974736564LL && a2 == 0xEF657079546E6F69LL;
  if (v19 || (uint64_t result = OUTLINED_FUNCTION_1_3(0x74616E6974736564LL, 0xEF657079546E6F69LL), (result & 1) != 0))
  {
    OUTLINED_FUNCTION_55_15(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_destinationType);
    OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_27_9(v4);
    if (!v14)
    {
LABEL_31:
      OUTLINED_FUNCTION_23_10();
      OUTLINED_FUNCTION_57_15();
      return v17();
    }

    uint64_t v15 = v4;
    goto LABEL_9;
  }

  BOOL v20 = a1 == 0x73746361746E6F63LL && a2 == 0xE800000000000000LL;
  if (v20 || (uint64_t result = OUTLINED_FUNCTION_1_3(0x73746361746E6F63LL, 0xE800000000000000LL), (result & 1) != 0))
  {
    if (!*(void *)(v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_contacts)) {
      goto LABEL_10;
    }
    uint64_t v21 = type metadata accessor for PhonePersonList();
    OUTLINED_FUNCTION_60(v21);
    return swift_retain();
  }

  else
  {
    if (a1 != 0x756F72476C6C6163LL || a2 != 0xEA00000000007370LL)
    {
      uint64_t result = OUTLINED_FUNCTION_1_3(0x756F72476C6C6163LL, 0xEA00000000007370LL);
      if ((result & 1) == 0) {
        goto LABEL_10;
      }
    }

    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhoneCallGroup]);
    OUTLINED_FUNCTION_60(v23);
    return swift_bridgeObjectRetain();
  }

PhoneCallFlowDelegatePlugin::PhoneStartCallIntent::CodingKeys_optional __swiftcall PhoneStartCallIntent.CodingKeys.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of PhoneStartCallIntent.CodingKeys.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6) {
    return (PhoneCallFlowDelegatePlugin::PhoneStartCallIntent::CodingKeys_optional)6;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneStartCallIntent::CodingKeys_optional)v3;
  }
}

uint64_t PhoneStartCallIntent.CodingKeys.rawValue.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_36_26();
  return ((uint64_t (*)(uint64_t))((char *)j__OUTLINED_FUNCTION_25_40 + 4 * asc_334820[v1]))(v0);
}

unint64_t sub_1E2234()
{
  return OUTLINED_FUNCTION_12_62();
}

uint64_t sub_1E2248()
{
  return 0x756F72476C6C6163LL;
}

uint64_t PhoneStartCallIntent.CodingKeys.stringValue.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_36_26();
  return ((uint64_t (*)(uint64_t))((char *)j__OUTLINED_FUNCTION_25_40_0 + 4 * byte_334826[v1]))(v0);
}

unint64_t sub_1E2290()
{
  return OUTLINED_FUNCTION_12_62();
}

uint64_t sub_1E22A4()
{
  return 0x756F72476C6C6163LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PhoneStartCallIntent.CodingKeys()
{
  specialized == infix<A>(_:_:)();
}

void protocol witness for Hashable.hashValue.getter in conformance PhoneStartCallIntent.CodingKeys()
{
}

void protocol witness for Hashable.hash(into:) in conformance PhoneStartCallIntent.CodingKeys()
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneStartCallIntent.CodingKeys( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::PhoneStartCallIntent::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneStartCallIntent.CodingKeys@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneStartCallIntent::CodingKeys_optional *a2@<X8>)
{
  result.value = PhoneStartCallIntent.CodingKeys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PhoneStartCallIntent.CodingKeys( uint64_t *a1@<X8>)
{
  *a1 = PhoneStartCallIntent.CodingKeys.rawValue.getter();
  a1[1] = v2;
  OUTLINED_FUNCTION_2();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PhoneStartCallIntent.CodingKeys()
{
  return PhoneStartCallIntent.CodingKeys.stringValue.getter();
}

PhoneCallFlowDelegatePlugin::PhoneStartCallIntent::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance PhoneStartCallIntent.CodingKeys@<W0>( uint64_t a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneStartCallIntent::CodingKeys_optional *a2@<X8>)
{
  result.value = PhoneStartCallIntent.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PhoneStartCallIntent.CodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneStartCallIntent.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneStartCallIntent.CodingKeys and conformance PhoneStartCallIntent.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneStartCallIntent.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneStartCallIntent.CodingKeys and conformance PhoneStartCallIntent.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PhoneStartCallIntent.deinit()
{
  OUTLINED_FUNCTION_17_7(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_callCapability);
  OUTLINED_FUNCTION_17_7(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_audioRoute);
  OUTLINED_FUNCTION_17_7(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_preferredCallProvider);
  OUTLINED_FUNCTION_17_7(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_destinationType);
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_contacts));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PhoneStartCallIntent.__deallocating_deinit()
{
  return PhoneCallProvider.Builder.__deallocating_deinit((void (*)(void))PhoneStartCallIntent.deinit);
}

uint64_t PhoneStartCallIntent.encode(to:)(void *a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneStartCallIntent.CodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_7_6();
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  unint64_t v10 = lazy protocol witness table accessor for type PhoneStartCallIntent.CodingKeys and conformance PhoneStartCallIntent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for PhoneStartCallIntent.CodingKeys,  &type metadata for PhoneStartCallIntent.CodingKeys,  v10,  v8,  v9);
  uint64_t v11 = v4 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_callCapability;
  LOBYTE(v23) = 0;
  type metadata accessor for SpeakableString(0LL);
  lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
  OUTLINED_FUNCTION_6_74(v11, (uint64_t)&v23);
  if (!v2)
  {
    LOBYTE(v23) = 1;
    OUTLINED_FUNCTION_6_74( v4 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_audioRoute,  (uint64_t)&v23);
    LOBYTE(v23) = 2;
    OUTLINED_FUNCTION_6_74( v4 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_preferredCallProvider,  (uint64_t)&v23);
    LOBYTE(v23) = 3;
    OUTLINED_FUNCTION_6_74( v4 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_destinationType,  (uint64_t)&v23);
    uint64_t v23 = *(void *)(v4 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_contacts);
    type metadata accessor for PhonePersonList();
    lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type PhonePersonList and conformance PhonePersonList,  (uint64_t (*)(uint64_t))type metadata accessor for PhonePersonList,  (uint64_t)&protocol conformance descriptor for PhonePersonList);
    uint64_t v12 = OUTLINED_FUNCTION_33_42();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v12, v13, v14, v15, v16);
    uint64_t v23 = *(void *)(v4 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_callGroups);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhoneCallGroup]);
    lazy protocol witness table accessor for type [PhoneCallGroup] and conformance <A> [A]( &lazy protocol witness table cache variable for type [PhoneCallGroup] and conformance <A> [A],  &lazy protocol witness table cache variable for type PhoneCallGroup and conformance PhoneCallGroup,  (uint64_t)&protocol conformance descriptor for PhoneCallGroup,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    uint64_t v17 = OUTLINED_FUNCTION_33_42();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, v18, v19, v20, v21);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
}

unint64_t lazy protocol witness table accessor for type PhoneStartCallIntent.CodingKeys and conformance PhoneStartCallIntent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneStartCallIntent.CodingKeys and conformance PhoneStartCallIntent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneStartCallIntent.CodingKeys and conformance PhoneStartCallIntent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneStartCallIntent.CodingKeys,  &type metadata for PhoneStartCallIntent.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneStartCallIntent.CodingKeys and conformance PhoneStartCallIntent.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneStartCallIntent.CodingKeys and conformance PhoneStartCallIntent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneStartCallIntent.CodingKeys and conformance PhoneStartCallIntent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneStartCallIntent.CodingKeys,  &type metadata for PhoneStartCallIntent.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneStartCallIntent.CodingKeys and conformance PhoneStartCallIntent.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneStartCallIntent.CodingKeys and conformance PhoneStartCallIntent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneStartCallIntent.CodingKeys and conformance PhoneStartCallIntent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneStartCallIntent.CodingKeys,  &type metadata for PhoneStartCallIntent.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneStartCallIntent.CodingKeys and conformance PhoneStartCallIntent.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneStartCallIntent.CodingKeys and conformance PhoneStartCallIntent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneStartCallIntent.CodingKeys and conformance PhoneStartCallIntent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneStartCallIntent.CodingKeys,  &type metadata for PhoneStartCallIntent.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneStartCallIntent.CodingKeys and conformance PhoneStartCallIntent.CodingKeys);
  }

  return result;
}

uint64_t PhoneStartCallIntent.__allocating_init(from:)(void *a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  PhoneStartCallIntent.init(from:)(a1);
  return v3;
}

uint64_t PhoneStartCallIntent.init(from:)(void *a1)
{
  uint64_t v5 = (char *)&v42 - v4;
  __chkstk_darwin();
  OUTLINED_FUNCTION_43_17();
  __chkstk_darwin();
  uint64_t v7 = (char *)&v42 - v6;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneStartCallIntent.CodingKeys>);
  __chkstk_darwin();
  uint64_t v46 = a1;
  uint64_t v47 = v2;
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = 0LL;
  uint64_t v9 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  unint64_t v10 = lazy protocol witness table accessor for type PhoneStartCallIntent.CodingKeys and conformance PhoneStartCallIntent.CodingKeys();
  uint64_t v11 = v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for PhoneStartCallIntent.CodingKeys,  &type metadata for PhoneStartCallIntent.CodingKeys,  v10,  v9,  v8);
  if (v11)
  {
    uint64_t v41 = v46;
    uint64_t v22 = v47;

    uint64_t v19 = type metadata accessor for PhoneStartCallIntent(0LL);
    swift_deallocPartialClassInstance( v22,  v19,  *(unsigned int *)(*(void *)v22 + 48LL),  *(unsigned __int16 *)(*(void *)v22 + 52LL));
  }

  else
  {
    uint64_t v48 = v5;
    uint64_t v44 = v1;
    uint64_t v12 = type metadata accessor for SpeakableString(0LL);
    LOBYTE(v50) = 0;
    lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
    uint64_t v14 = v13;
    uint64_t v15 = OUTLINED_FUNCTION_44_20();
    OUTLINED_FUNCTION_32_33(v15, v16, v17, v18, v14);
    uint64_t v21 = v14;
    uint64_t v22 = v47;
    outlined init with take of SpeakableString?( (uint64_t)v7,  v47 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_callCapability);
    LOBYTE(v50) = 1;
    uint64_t v23 = OUTLINED_FUNCTION_44_20();
    uint64_t v43 = v21;
    OUTLINED_FUNCTION_32_33(v23, v24, v25, v26, v21);
    OUTLINED_FUNCTION_40_21(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_audioRoute);
    LOBYTE(v50) = 2;
    uint64_t v27 = OUTLINED_FUNCTION_44_20();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v27, v28, v29, v30, v43);
    OUTLINED_FUNCTION_40_21(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_preferredCallProvider);
    LOBYTE(v50) = 3;
    OUTLINED_FUNCTION_32_33(v12, (uint64_t)&v50, v45, v12, v43);
    OUTLINED_FUNCTION_40_21(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_destinationType);
    type metadata accessor for PhonePersonList();
    char v49 = 4;
    lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type PhonePersonList and conformance PhonePersonList,  (uint64_t (*)(uint64_t))type metadata accessor for PhonePersonList,  (uint64_t)&protocol conformance descriptor for PhonePersonList);
    uint64_t v31 = OUTLINED_FUNCTION_28_41();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v31, v32, v33, v34, v35);
    *(void *)(v22 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_contacts) = v50;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhoneCallGroup]);
    char v49 = 5;
    lazy protocol witness table accessor for type [PhoneCallGroup] and conformance <A> [A]( &lazy protocol witness table cache variable for type [PhoneCallGroup] and conformance <A> [A],  &lazy protocol witness table cache variable for type PhoneCallGroup and conformance PhoneCallGroup,  (uint64_t)&protocol conformance descriptor for PhoneCallGroup,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    uint64_t v36 = OUTLINED_FUNCTION_28_41();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v36, v37, v38, v39, v40);
    uint64_t v41 = v46;
    OUTLINED_FUNCTION_4_78();
    *(void *)(v22 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_callGroups) = v50;
  }

  __swift_destroy_boxed_opaque_existential_1(v41);
  return v22;
}

uint64_t lazy protocol witness table accessor for type [PhoneCallGroup] and conformance <A> [A]( unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PhoneCallGroup]);
    lazy protocol witness table accessor for type UUID and conformance UUID( a2,  type metadata accessor for PhoneCallGroup,  a3);
    uint64_t result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }

  return result;
}

void base witness table accessor for Decodable in PhoneStartCallIntent()
{
}

void base witness table accessor for Encodable in PhoneStartCallIntent()
{
}

uint64_t protocol witness for static CATType.catTypeName.getter in conformance PhoneStartCallIntent()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t protocol witness for static CATType.isDialogType.getter in conformance PhoneStartCallIntent()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

void (*protocol witness for CATType.mockGlobals.modify in conformance PhoneStartCallIntent( void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 168LL))();
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t protocol witness for CATType.getProperty(_:) in conformance PhoneStartCallIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192LL))();
}

uint64_t protocol witness for PhoneStartCallIntentProperties.callCapability.getter in conformance PhoneStartCallIntent@<X0>( uint64_t a1@<X8>)
{
  return outlined init with copy of SpeakableString?( *v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_callCapability,  a1);
}

uint64_t protocol witness for PhoneStartCallIntentProperties.audioRoute.getter in conformance PhoneStartCallIntent@<X0>( uint64_t a1@<X8>)
{
  return outlined init with copy of SpeakableString?( *v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_audioRoute,  a1);
}

uint64_t protocol witness for PhoneStartCallIntentProperties.preferredCallProvider.getter in conformance PhoneStartCallIntent@<X0>( uint64_t a1@<X8>)
{
  return outlined init with copy of SpeakableString?( *v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_preferredCallProvider,  a1);
}

uint64_t protocol witness for PhoneStartCallIntentProperties.destinationType.getter in conformance PhoneStartCallIntent@<X0>( uint64_t a1@<X8>)
{
  return outlined init with copy of SpeakableString?( *v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_destinationType,  a1);
}

uint64_t protocol witness for PhoneStartCallIntentProperties.contacts.getter in conformance PhoneStartCallIntent()
{
  return swift_retain(*(void *)(*v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_contacts));
}

uint64_t protocol witness for PhoneStartCallIntentProperties.callGroups.getter in conformance PhoneStartCallIntent()
{
  return swift_bridgeObjectRetain(*(void *)(*v0
                                            + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_callGroups));
}

uint64_t protocol witness for Decodable.init(from:) in conformance PhoneStartCallIntent@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 208))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PhoneStartCallIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200LL))();
}

void sub_1E2E14()
{
}

void sub_1E2E38()
{
}

void sub_1E2E5C()
{
}

void sub_1E2E80()
{
}

void sub_1E2EA4()
{
  *uint64_t v0 = (*(uint64_t (**)(void))(v1 + 224))();
  OUTLINED_FUNCTION_2();
}

void sub_1E2ECC()
{
  *uint64_t v0 = (*(uint64_t (**)(void))(v1 + 248))();
  OUTLINED_FUNCTION_2();
}

void sub_1E2EF4()
{
  *uint64_t v0 = (*(uint64_t (**)(void))(v1 + 152))();
  OUTLINED_FUNCTION_2();
}

void type metadata completion function for PhoneStartCallIntent(uint64_t a1)
{
  uint64_t v4 = "\b";
  type metadata accessor for SpeakableString?(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(v2 - 8) + 64LL;
    uint64_t v6 = v5;
    uint64_t v7 = v5;
    uint64_t v8 = v5;
    uint64_t v9 = "\b";
    unint64_t v10 = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_updateClassMetadata2(a1, 256LL, 7LL, &v4, a1 + 80);
  }

uint64_t ObjC metadata update function for PhoneStartCallIntent.Builder()
{
  return type metadata accessor for PhoneStartCallIntent.Builder(0LL);
}

void type metadata completion function for PhoneStartCallIntent.Builder(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    void v4[2] = v4[0];
    v4[3] = v4[0];
    v4[4] = "\b";
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_updateClassMetadata2(a1, 256LL, 6LL, v4, a1 + 80);
  }

uint64_t storeEnumTagSinglePayload for PhoneStartCallIntent.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1E3084 + 4 * byte_334831[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1E30B8 + 4 * byte_33482C[v4]))();
}

uint64_t sub_1E30B8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E30C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1E30C8LL);
  }
  return result;
}

uint64_t sub_1E30D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1E30DCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1E30E0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1E30E8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PhoneStartCallIntent.CodingKeys()
{
  return &type metadata for PhoneStartCallIntent.CodingKeys;
}

uint64_t OUTLINED_FUNCTION_4_78()
{
  return (*(uint64_t (**)(uint64_t, void))(v1 + 8))(v0, *(void *)(v2 - 120));
}

uint64_t OUTLINED_FUNCTION_6_74(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, v2, v3, v4);
}

uint64_t OUTLINED_FUNCTION_10_57()
{
  return __swift_storeEnumTagSinglePayload(v0, 0LL, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_18_50()
{
  return 0x74616E6974736564LL;
}

uint64_t OUTLINED_FUNCTION_28_41()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_32_33(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t OUTLINED_FUNCTION_33_42()
{
  return v0 - 72;
}

uint64_t OUTLINED_FUNCTION_34_26()
{
  return 0x73746361746E6F63LL;
}

uint64_t OUTLINED_FUNCTION_36_26()
{
  return 0x617061436C6C6163LL;
}

uint64_t OUTLINED_FUNCTION_37_30()
{
  return swift_release(v0);
}

uint64_t OUTLINED_FUNCTION_41_26()
{
  return swift_release(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_44_20()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_46_23()
{
  return swift_endAccess(v0 - 104);
}

uint64_t OUTLINED_FUNCTION_47_20(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_49_19@<X0>(uint64_t a1@<X8>)
{
  return outlined destroy of SpeakableString?(v1 + a1);
}

uint64_t OUTLINED_FUNCTION_54_15@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SpeakableString?(v1 + a1, v2);
}

uint64_t OUTLINED_FUNCTION_55_15@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SpeakableString?(v1 + a1, v2);
}

  ;
}

uint64_t OUTLINED_FUNCTION_61_14()
{
  return v0();
}

uint64_t DisambiguationItemWithDirectInvocationModel.id.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  return OUTLINED_FUNCTION_55_1(v0, v1, v2, v3);
}

void DisambiguationItemWithDirectInvocationModel.personHandle.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
  OUTLINED_FUNCTION_18_44(v0, v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_4();
}

uint64_t type metadata accessor for DisambiguationItemWithDirectInvocationModel(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for DisambiguationItemWithDirectInvocationModel,  (uint64_t)&nominal type descriptor for DisambiguationItemWithDirectInvocationModel);
}

void DisambiguationItemWithDirectInvocationModel.personHandle.setter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
  OUTLINED_FUNCTION_15_5(v0, v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_4();
}

void DisambiguationItemWithDirectInvocationModel.personHandle.modify()
{
  uint64_t v1 = OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_6_75((uint64_t)v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
  *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = OUTLINED_FUNCTION_13_12(v2);
  OUTLINED_FUNCTION_6();
}

void DisambiguationItemWithDirectInvocationModel.spokenHandle.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  OUTLINED_FUNCTION_18_44(v0, v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_4();
}

void key path setter for DisambiguationItemWithDirectInvocationModel.spokenHandle : DisambiguationItemWithDirectInvocationModel()
{
}

void DisambiguationItemWithDirectInvocationModel.spokenHandle.setter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  OUTLINED_FUNCTION_15_5(v0, v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_4();
}

void DisambiguationItemWithDirectInvocationModel.spokenHandle.modify()
{
  uint64_t v1 = OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_6_75((uint64_t)v1);
  OUTLINED_FUNCTION_75_16();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = OUTLINED_FUNCTION_13_12(v2);
  OUTLINED_FUNCTION_6();
}

uint64_t DisambiguationItemWithDirectInvocationModel.shouldPrintHandleBlue.getter()
{
  return v1;
}

void DisambiguationItemWithDirectInvocationModel.shouldPrintHandleBlue.setter(char a1)
{
  char v2 = a1;
  type metadata accessor for DisambiguationItemWithDirectInvocationModel(0LL);
  OUTLINED_FUNCTION_36_27();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
  Loggable.wrappedValue.setter(&v2, v1);
  OUTLINED_FUNCTION_4();
}

void DisambiguationItemWithDirectInvocationModel.shouldPrintHandleBlue.modify()
{
  uint64_t v1 = OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_6_75((uint64_t)v1);
  OUTLINED_FUNCTION_36_27();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
  *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = OUTLINED_FUNCTION_13_12(v2);
  OUTLINED_FUNCTION_6();
}

void property wrapper backing initializer of DisambiguationItemWithDirectInvocationModel.personHandle( uint64_t a1, uint64_t a2)
{
  v3[0] = a1;
  v3[1] = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  Loggable.init(wrappedValue:)(v3, v2);
  OUTLINED_FUNCTION_4();
}

void DisambiguationItemWithDirectInvocationModel.label.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
  OUTLINED_FUNCTION_18_44(v0, v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_4();
}

void DisambiguationItemWithDirectInvocationModel.label.setter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
  OUTLINED_FUNCTION_15_5(v0, v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_4();
}

void DisambiguationItemWithDirectInvocationModel.label.modify()
{
  uint64_t v1 = OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_6_75((uint64_t)v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
  *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = OUTLINED_FUNCTION_13_12(v2);
  OUTLINED_FUNCTION_6();
}

void property wrapper backing initializer of DisambiguationItemWithDirectInvocationModel.rskeCommand( void *a1)
{
  unint64_t v3 = type metadata accessor for SAIntentGroupRunSiriKitExecutor();
  id v4 = a1;
  CodableAceObject.init(wrappedValue:)(v4, v3);
  OUTLINED_FUNCTION_45_20(v1);

  OUTLINED_FUNCTION_16();
}

uint64_t DisambiguationItemWithDirectInvocationModel.rskeCommand.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  id v4 = (void *)(v3 - v2);
  OUTLINED_FUNCTION_65_13();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
  Loggable.wrappedValue.getter(v4);
  uint64_t v5 = CodableAceObject.wrappedValue.getter(v0);
  (*(void (**)(void *, uint64_t))(v1 + 8))(v4, v0);
  return v5;
}

void key path setter for DisambiguationItemWithDirectInvocationModel.rskeCommand : DisambiguationItemWithDirectInvocationModel( id *a1)
{
}

void DisambiguationItemWithDirectInvocationModel.rskeCommand.setter(void *a1)
{
  id v2 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
  id v4 = (void (*)(_BYTE *, void))Loggable.wrappedValue.modify(v6, v3);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  CodableAceObject.wrappedValue.setter(v2, v5);
  v4(v6, 0LL);
}

void DisambiguationItemWithDirectInvocationModel.rskeCommand.modify(void *a1)
{
  id v2 = malloc(0x50uLL);
  *a1 = v2;
  OUTLINED_FUNCTION_65_13();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
  _BYTE v2[8] = OUTLINED_FUNCTION_13_12(v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  void v2[9] = CodableAceObject.wrappedValue.modify(v2 + 4, v4);
  OUTLINED_FUNCTION_6();
}

void DisambiguationItemWithDirectInvocationModel.rskeCommand.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  id v2 = *(void (**)(void *, void))(*(void *)a1 + 64LL);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 72LL))(*(void *)a1 + 32LL, 0LL);
  v2(v1, 0LL);
  OUTLINED_FUNCTION_48_18(v1);
}

void property wrapper backing initializer of DisambiguationItemWithDirectInvocationModel.type( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void DisambiguationItemWithDirectInvocationModel.type.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
  OUTLINED_FUNCTION_18_44(v0, v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_4();
}

void key path setter for DisambiguationItemWithDirectInvocationModel.personHandle : DisambiguationItemWithDirectInvocationModel( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  a5(v6, v7);
  OUTLINED_FUNCTION_6();
}

void DisambiguationItemWithDirectInvocationModel.type.setter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
  OUTLINED_FUNCTION_15_5(v0, v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_4();
}

void DisambiguationItemWithDirectInvocationModel.type.modify()
{
  uint64_t v1 = OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_6_75((uint64_t)v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
  *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = OUTLINED_FUNCTION_13_12(v2);
  OUTLINED_FUNCTION_6();
}

unint64_t DisambiguationItemWithDirectInvocationModel.ItemType.description.getter( uint64_t a1, void *a2)
{
  if (!a2) {
    return 0xD000000000000018LL;
  }
  _StringGuts.grow(_:)(16LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  strcpy((char *)v7, ".phoneNumber(");
  HIWORD(v7[1]) = -4864;
  v4._uint64_t countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = 41LL;
  v5._object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  return v7[0];
}

uint64_t DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys.init(stringValue:)( uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6D754E656E6F6870LL && a2 == 0xEB00000000726562LL)
  {
    unint64_t v5 = 0xEB00000000726562LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D754E656E6F6870LL, 0xEB00000000726562LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000017LL && a2 == 0x800000000034D470LL)
  {
    swift_bridgeObjectRelease(0x800000000034D470LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x800000000034D470LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000017LL;
  }
  else {
    return 0x6D754E656E6F6870LL;
  }
}

uint64_t DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000LL)
  {
    swift_bridgeObjectRelease(0xE200000000000000LL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(12383LL, 0xE200000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

uint64_t DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys.stringValue.getter()
{
  return 12383LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys()
{
  return DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

PhoneCallFlowDelegatePlugin::PhoneCallMetrics::CodingKeys_optional protocol witness for CodingKey.init(intValue:) in conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys@<W0>( Swift::Int a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallMetrics::CodingKeys_optional *a2@<X8>)
{
  result.value = PhoneCallMetrics.CodingKeys.init(intValue:)(a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys.init(stringValue:)( a1,  a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void DisambiguationItemWithDirectInvocationModel.ItemType.encode(to:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v25;
  a23 = v26;
  uint64_t v41 = v27;
  uint64_t v40 = v28;
  uint64_t v30 = v29;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys>);
  uint64_t v37 = *(void *)(v31 - 8);
  uint64_t v38 = v31;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_54_4();
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys>);
  uint64_t v39 = *(void *)(v32 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_20_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys>);
  __chkstk_darwin();
  OUTLINED_FUNCTION_135();
  uint64_t v34 = v30[3];
  uint64_t v33 = v30[4];
  __swift_project_boxed_opaque_existential_1(v30, v34);
  unint64_t v35 = lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_40CAB8, &unk_40CAB8, v35, v34, v33);
  if (v41)
  {
    a12 = 0;
    lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys();
    OUTLINED_FUNCTION_55_16((uint64_t)&unk_40CB48, (uint64_t)&a12);
    KeyedEncodingContainer.encode(_:forKey:)(v40, v41, v36, v32);
    OUTLINED_FUNCTION_21_21(v23, *(uint64_t (**)(uint64_t, uint64_t))(v39 + 8));
  }

  else
  {
    OUTLINED_FUNCTION_68_19();
    OUTLINED_FUNCTION_55_16((uint64_t)&unk_40CB68, (uint64_t)&a13);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v24, v38);
  }

  OUTLINED_FUNCTION_50_19();
  OUTLINED_FUNCTION_7_1();
}

unint64_t lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys;
  if (!lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys,  &unk_40CAB8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys;
  if (!lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys,  &unk_40CAB8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys;
  if (!lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys,  &unk_40CAB8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys;
  if (!lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys,  &unk_40CAB8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys;
  if (!lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys,  &unk_40CB68);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys;
  if (!lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys,  &unk_40CB68);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys;
  if (!lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys,  &unk_40CB68);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys;
  if (!lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys,  &unk_40CB48);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys;
  if (!lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys,  &unk_40CB48);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys;
  if (!lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys,  &unk_40CB48);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys;
  if (!lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys,  &unk_40CB48);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys);
  }

  return result;
}

void *DisambiguationItemWithDirectInvocationModel.ItemType.init(from:)()
{
  uint64_t v47 = v1;
  uint64_t v48 = v2;
  char v4 = v3;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys>);
  uint64_t v39 = *(void *)(v42 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v40 = v5;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys>);
  uint64_t v6 = *(void *)(v41 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys>);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = v4[3];
  uint64_t v16 = v4[4];
  uint64_t v17 = __swift_project_boxed_opaque_existential_1(v4, v15);
  unint64_t v18 = lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_40CAB8, &unk_40CAB8, v18, v15, v16);
  if (v0) {
    goto LABEL_8;
  }
  uint64_t v43 = v4;
  uint64_t v17 = (void *)v14;
  uint64_t v19 = ((uint64_t (*)(uint64_t))KeyedDecodingContainer.allKeys.getter)(v10);
  uint64_t v20 = *(void *)(v19 + 16);
  if (!v20
    || (char v44 = *(_BYTE *)(v19 + 32),
        specialized ArraySlice.subscript.getter(1LL, v20, v19, v19 + 32, 0LL, (2 * v20) | 1),
        uint64_t v22 = v21,
        unint64_t v24 = v23,
        swift_bridgeObjectRelease(),
        v22 != v24 >> 1))
  {
    uint64_t v25 = ((uint64_t (*)(void))type metadata accessor for DecodingError)(0LL);
    swift_allocError(v25, &protocol witness table for DecodingError, 0LL, 0LL);
    uint64_t v27 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v27 = &type metadata for DisambiguationItemWithDirectInvocationModel.ItemType;
    uint64_t v28 = ((uint64_t (*)(uint64_t))KeyedDecodingContainer.codingPath.getter)(v10);
    ((void (*)(uint64_t, unint64_t, unint64_t, void))DecodingError.Context.init(codingPath:debugDescription:underlyingError:))( v28,  0xD00000000000002BLL,  0x800000000034D440LL,  0LL);
    uint64_t v29 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v25 - 8) + 104LL))( v27,  enum case for DecodingError.typeMismatch(_:),  v25);
    swift_willThrow(v29, v30, v31, v32, v33, v34, v35, v36);
    OUTLINED_FUNCTION_41_27();
    OUTLINED_FUNCTION_21_21(v14, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
    char v4 = v43;
LABEL_8:
    __swift_destroy_boxed_opaque_existential_1(v4);
    return v17;
  }

  if ((v44 & 1) != 0)
  {
    OUTLINED_FUNCTION_68_19();
    OUTLINED_FUNCTION_61_15((uint64_t)&unk_40CB68, (uint64_t)&v46);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v42);
    OUTLINED_FUNCTION_41_27();
    OUTLINED_FUNCTION_21_21(v14, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
    uint64_t v17 = 0LL;
  }

  else
  {
    char v45 = 0;
    lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys();
    uint64_t v37 = OUTLINED_FUNCTION_61_15((uint64_t)&unk_40CB48, (uint64_t)&v45);
    uint64_t v17 = (void *)KeyedDecodingContainer.decode(_:forKey:)(v37, v41);
    OUTLINED_FUNCTION_41_2(v9, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    OUTLINED_FUNCTION_41_27();
    OUTLINED_FUNCTION_21_21(v14, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  }

  __swift_destroy_boxed_opaque_existential_1(v4);
  return v17;
}

void *protocol witness for Decodable.init(from:) in conformance DisambiguationItemWithDirectInvocationModel.ItemType@<X0>( void *a1@<X8>)
{
  unint64_t result = DisambiguationItemWithDirectInvocationModel.ItemType.init(from:)();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
  }

  return result;
}

#error "1E4384: call analysis failed (funcsize=6)"
unint64_t protocol witness for CustomStringConvertible.description.getter in conformance DisambiguationItemWithDirectInvocationModel.ItemType()
{
  uint64_t v0;
  return DisambiguationItemWithDirectInvocationModel.ItemType.description.getter(*(void *)v0, *(void **)(v0 + 8));
}

uint64_t DisambiguationItemWithDirectInvocationModel.init(id:personHandle:spokenHandle:shouldPrintHandleBlue:label:rskeCommand:type:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, void *a10, uint64_t a11, unint64_t a12)
{
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_54_4();
  uint64_t v17 = type metadata accessor for DisambiguationItemWithDirectInvocationModel(0LL);
  uint64_t v18 = a9 + *(int *)(v17 + 20);
  uint64_t v40 = 0LL;
  unint64_t v41 = 0LL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  OUTLINED_FUNCTION_45_20((uint64_t)&v40);
  uint64_t v19 = a9 + *(int *)(v17 + 32);
  uint64_t v40 = 0LL;
  unint64_t v41 = 0LL;
  OUTLINED_FUNCTION_45_20((uint64_t)&v40);
  uint64_t v20 = OUTLINED_FUNCTION_12();
  uint64_t v36 = *(void *)(v20 - 8);
  uint64_t v37 = v20;
  uint64_t v39 = a1;
  (*(void (**)(uint64_t, uint64_t))(v36 + 16))(a9, a1);
  swift_bridgeObjectRetain();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8LL);
  v22(v18, v21);
  uint64_t v40 = a2;
  unint64_t v41 = a3;
  uint64_t v23 = OUTLINED_FUNCTION_45_20((uint64_t)&v40);
  LOBYTE(v40) = a6;
  OUTLINED_FUNCTION_83_14(v23, (uint64_t)&type metadata for Bool);
  v22(v19, v21);
  uint64_t v40 = a7;
  unint64_t v41 = a8;
  OUTLINED_FUNCTION_45_20((uint64_t)&v40);
  unint64_t v24 = type metadata accessor for SAIntentGroupRunSiriKitExecutor();
  id v25 = a10;
  CodableAceObject.init(wrappedValue:)(v25, v24);
  unint64_t v26 = a5;
  uint64_t v27 = Loggable.init(wrappedValue:)(v12, v35);
  if (a5)
  {
    uint64_t v27 = swift_bridgeObjectRelease();
    uint64_t v28 = a4;
  }

  else
  {
    if (a3) {
      uint64_t v28 = a2;
    }
    else {
      uint64_t v28 = 0LL;
    }
    if (a3) {
      unint64_t v26 = a3;
    }
    else {
      unint64_t v26 = 0xE000000000000000LL;
    }
  }

  uint64_t v40 = v28;
  unint64_t v41 = v26;
  uint64_t v29 = OUTLINED_FUNCTION_83_14(v27, (uint64_t)&type metadata for String);
  uint64_t v40 = a11;
  unint64_t v41 = a12;
  OUTLINED_FUNCTION_83_14(v29, (uint64_t)&type metadata for DisambiguationItemWithDirectInvocationModel.ItemType);

  return (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8))(v39, v37);
}

uint64_t DisambiguationItemWithDirectInvocationModel.hash(into:)(uint64_t a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_12();
  lazy protocol witness table accessor for type SingleVoicemailModel and conformance SingleVoicemailModel((uint64_t)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

uint64_t DisambiguationItemWithDirectInvocationModel.CodingKeys.init(stringValue:)( uint64_t a1, unint64_t a2)
{
  if (a1 == 25705 && a2 == 0xE200000000000000LL)
  {
    unint64_t v5 = 0xE200000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705LL, 0xE200000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x61486E6F73726570LL && a2 == 0xEC000000656C646ELL)
  {
    unint64_t v8 = 0xEC000000656C646ELL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61486E6F73726570LL, 0xEC000000656C646ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x61486E656B6F7073LL && a2 == 0xEC000000656C646ELL)
  {
    unint64_t v10 = 0xEC000000656C646ELL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61486E656B6F7073LL, 0xEC000000656C646ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v11 = 0x800000000034D490LL;
    if (a2 == 0x800000000034D490LL) {
      goto LABEL_29;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000000034D490LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v11);
    return 3LL;
  }

  if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000LL)
  {
    unint64_t v13 = 0xE500000000000000LL;
    goto LABEL_37;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6562616CLL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v13);
    return 4LL;
  }

  if (a1 == 0x6D6D6F43656B7372LL && a2 == 0xEB00000000646E61LL)
  {
    unint64_t v15 = 0xEB00000000646E61LL;
    goto LABEL_45;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D6D6F43656B7372LL, 0xEB00000000646E61LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
LABEL_45:
    swift_bridgeObjectRelease(v15);
    return 5LL;
  }

  if (a1 == 1701869940 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 6LL;
  }

  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v17 & 1) != 0) {
      return 6LL;
    }
    else {
      return 7LL;
    }
  }

uint64_t DisambiguationItemWithDirectInvocationModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1E4934 + 4 * asc_334AD0[a1]))( 25705LL,  0xE200000000000000LL);
}

uint64_t sub_1E4934()
{
  return 0x61486E6F73726570LL;
}

unint64_t sub_1E4964()
{
  return 0xD000000000000015LL;
}

uint64_t sub_1E4980()
{
  return 0x6C6562616CLL;
}

uint64_t sub_1E4994()
{
  return 0x6D6D6F43656B7372LL;
}

uint64_t sub_1E49B4()
{
  return 1701869940LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DisambiguationItemWithDirectInvocationModel.CodingKeys()
{
  return DisambiguationItemWithDirectInvocationModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DisambiguationItemWithDirectInvocationModel.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = DisambiguationItemWithDirectInvocationModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance DisambiguationItemWithDirectInvocationModel.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = static PhoneAppResolutionHelper.appUsageLookUpDays.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DisambiguationItemWithDirectInvocationModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DisambiguationItemWithDirectInvocationModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void DisambiguationItemWithDirectInvocationModel.encode(to:)()
{
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  OUTLINED_FUNCTION_37_31();
  unint64_t v4 = lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.CodingKeys();
  OUTLINED_FUNCTION_20_48((uint64_t)&unk_40CA28, v5, v4);
  OUTLINED_FUNCTION_12();
  lazy protocol witness table accessor for type SingleVoicemailModel and conformance SingleVoicemailModel((uint64_t)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  OUTLINED_FUNCTION_6_12();
  if (!v0)
  {
    uint64_t v6 = type metadata accessor for DisambiguationItemWithDirectInvocationModel(0LL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
    lazy protocol witness table accessor for type Loggable<String?> and conformance <A> Loggable<A>((uint64_t)&lazy protocol witness table cache variable for type Loggable<String?> and conformance <A> Loggable<A>);
    OUTLINED_FUNCTION_6_12();
    v7[1] = v6;
    OUTLINED_FUNCTION_73_19();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    _s10SnippetKit8LoggableVySSGACyxGSEAASeRzSERzlWlTm_0((uint64_t)&lazy protocol witness table cache variable for type Loggable<String> and conformance <A> Loggable<A>);
    OUTLINED_FUNCTION_6_12();
    OUTLINED_FUNCTION_72_17();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
    _s10SnippetKit8LoggableVySbGACyxGSeAASeRzSERzlWlTm_0((uint64_t)&lazy protocol witness table cache variable for type Loggable<Bool> and conformance <A> Loggable<A>);
    OUTLINED_FUNCTION_6_12();
    OUTLINED_FUNCTION_6_12();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
    lazy protocol witness table accessor for type Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>> and conformance <A> Loggable<A>((uint64_t)&lazy protocol witness table cache variable for type Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>> and conformance <A> Loggable<A>);
    OUTLINED_FUNCTION_6_12();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
    lazy protocol witness table accessor for type Loggable<DisambiguationItemWithDirectInvocationModel.ItemType> and conformance <A> Loggable<A>((uint64_t)&lazy protocol witness table cache variable for type Loggable<DisambiguationItemWithDirectInvocationModel.ItemType> and conformance <A> Loggable<A>);
    OUTLINED_FUNCTION_6_12();
  }

  OUTLINED_FUNCTION_41_2((uint64_t)v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_7_1();
}

void DisambiguationItemWithDirectInvocationModel.hashValue.getter(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_12();
  lazy protocol witness table accessor for type SingleVoicemailModel and conformance SingleVoicemailModel((uint64_t)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v1, v2);
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

void DisambiguationItemWithDirectInvocationModel.init(from:)()
{
  uint64_t v88 = v0;
  unint64_t v4 = v3;
  uint64_t v67 = v5;
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
  uint64_t v66 = *(void *)(v68 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v69 = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
  uint64_t v76 = *(void *)(v7 - 8);
  uint64_t v77 = v7;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v70 = v8;
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
  uint64_t v78 = *(void *)(v80 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v72 = v9;
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v79 = *(void *)(v81 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v75 = v10;
  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
  uint64_t v92 = *(void *)(v87 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  uint64_t v71 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v73 = (char *)&v63 - v12;
  uint64_t v13 = OUTLINED_FUNCTION_12();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v74 = v15;
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DisambiguationItemWithDirectInvocationModel.CodingKeys>);
  uint64_t v16 = *(void *)(v83 - 8);
  __chkstk_darwin();
  uint64_t v17 = OUTLINED_FUNCTION_46_24();
  uint64_t v18 = type metadata accessor for DisambiguationItemWithDirectInvocationModel(v17);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_20_0();
  uint64_t v20 = v1 + *(int *)(v19 + 20);
  uint64_t v90 = 0LL;
  uint64_t v91 = 0LL;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  uint64_t v89 = v20;
  Loggable.init(wrappedValue:)(&v90, v21);
  uint64_t v22 = v1;
  uint64_t v23 = v1 + *(int *)(v18 + 32);
  uint64_t v90 = 0LL;
  uint64_t v91 = 0LL;
  uint64_t v85 = v23;
  unint64_t v86 = (int *)v18;
  Loggable.init(wrappedValue:)(&v90, v21);
  uint64_t v25 = v4[3];
  uint64_t v24 = v4[4];
  BOOL v84 = v4;
  unsigned int v26 = __swift_project_boxed_opaque_existential_1(v4, v25);
  unint64_t v27 = lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.CodingKeys();
  uint64_t v82 = v2;
  uint64_t v28 = v88;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_40CA28, &unk_40CA28, v27, v25, v24);
  if (v28)
  {
    uint64_t v34 = v86;
    uint64_t v33 = v87;
    __swift_destroy_boxed_opaque_existential_1(v84);
    OUTLINED_FUNCTION_60_18();
    uint64_t v35 = v85;
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
    v36(v89, v33);
    if ((_DWORD)v24) {
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v22 + v34[6], v81);
    }
    if (v26) {
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v22 + v34[7], v80);
    }
    v36(v35, v33);
    if ((_DWORD)v22) {
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v22 + v34[9], v77);
    }
  }

  else
  {
    uint64_t v29 = v73;
    uint64_t v88 = v16;
    uint64_t v65 = v14;
    LOBYTE(v90) = 0;
    lazy protocol witness table accessor for type SingleVoicemailModel and conformance SingleVoicemailModel((uint64_t)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    OUTLINED_FUNCTION_56_16();
    uint64_t v30 = v74;
    OUTLINED_FUNCTION_31_34(v13, v31, v83, v13, v32);
    uint64_t v37 = v22;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 32))(v22, v30, v13);
    LOBYTE(v90) = 1;
    lazy protocol witness table accessor for type Loggable<String?> and conformance <A> Loggable<A>((uint64_t)&lazy protocol witness table cache variable for type Loggable<String?> and conformance <A> Loggable<A>);
    uint64_t v39 = v38;
    uint64_t v40 = v29;
    uint64_t v41 = v87;
    OUTLINED_FUNCTION_31_34(v87, (uint64_t)&v90, v83, v87, v38);
    uint64_t v42 = v86;
    uint64_t v64 = v39;
    uint64_t v74 = v13;
    uint64_t v43 = *(void (**)(uint64_t, char *, uint64_t))(v92 + 40);
    v43(v89, v40, v41);
    LOBYTE(v90) = 2;
    _s10SnippetKit8LoggableVySSGACyxGSEAASeRzSERzlWlTm_0((uint64_t)&lazy protocol witness table cache variable for type Loggable<String> and conformance <A> Loggable<A>);
    OUTLINED_FUNCTION_56_16();
    OUTLINED_FUNCTION_31_34(v81, v44, v83, v81, v45);
    OUTLINED_FUNCTION_30_34(v37 + v42[6], v79);
    LOBYTE(v90) = 3;
    _s10SnippetKit8LoggableVySbGACyxGSeAASeRzSERzlWlTm_0((uint64_t)&lazy protocol witness table cache variable for type Loggable<Bool> and conformance <A> Loggable<A>);
    OUTLINED_FUNCTION_56_16();
    OUTLINED_FUNCTION_24_36(v46, v47, v48, v49, v50);
    OUTLINED_FUNCTION_30_34(v37 + v42[7], v78);
    LOBYTE(v90) = 4;
    uint64_t v51 = v71;
    OUTLINED_FUNCTION_31_34(v41, (uint64_t)&v90, v83, v41, v64);
    v43(v85, v51, v41);
    LOBYTE(v90) = 5;
    lazy protocol witness table accessor for type Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>> and conformance <A> Loggable<A>((uint64_t)&lazy protocol witness table cache variable for type Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>> and conformance <A> Loggable<A>);
    OUTLINED_FUNCTION_56_16();
    uint64_t v52 = v70;
    OUTLINED_FUNCTION_24_36(v53, v54, v55, v56, v57);
    OUTLINED_FUNCTION_142(v37 + v42[9], v52, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 32));
    LOBYTE(v90) = 6;
    lazy protocol witness table accessor for type Loggable<DisambiguationItemWithDirectInvocationModel.ItemType> and conformance <A> Loggable<A>((uint64_t)&lazy protocol witness table cache variable for type Loggable<DisambiguationItemWithDirectInvocationModel.ItemType> and conformance <A> Loggable<A>);
    OUTLINED_FUNCTION_56_16();
    OUTLINED_FUNCTION_24_36(v58, v59, v60, v61, v62);
    OUTLINED_FUNCTION_70_16();
    OUTLINED_FUNCTION_142(v37 + v42[10], v69, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 32));
    outlined init with copy of SearchCallHistoryBinaryButtonModel( v37,  v67,  (void (*)(void))type metadata accessor for DisambiguationItemWithDirectInvocationModel);
    __swift_destroy_boxed_opaque_existential_1(v84);
    _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_0( v37,  type metadata accessor for DisambiguationItemWithDirectInvocationModel);
  }

  OUTLINED_FUNCTION_7_1();
}

uint64_t protocol witness for Identifiable.id.getter in conformance DisambiguationItemWithDirectInvocationModel@<X0>( uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DisambiguationItemWithDirectInvocationModel( uint64_t a1)
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  lazy protocol witness table accessor for type SingleVoicemailModel and conformance SingleVoicemailModel((uint64_t)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance DisambiguationItemWithDirectInvocationModel()
{
}

void protocol witness for Encodable.encode(to:) in conformance DisambiguationItemWithDirectInvocationModel()
{
}

uint64_t ForeignEmergencyCallDisambiguationModel.emergencyServicesItem.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DisambiguationItemWithDirectInvocationModel?(v1, a1);
}

uint64_t ForeignEmergencyCallDisambiguationModel.foreignEmergencyNumberItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(OUTLINED_FUNCTION_82_12() + 20);
  return outlined init with copy of DisambiguationItemWithDirectInvocationModel?(v3, a1);
}

void ForeignEmergencyCallDisambiguationModel.prompt.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_82_12();
  OUTLINED_FUNCTION_33_43(*(int *)(v0 + 24));
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_2();
}

void ForeignEmergencyCallDisambiguationModel.responseViewId.getter()
{
  uint64_t v0 = type metadata accessor for ForeignEmergencyCallDisambiguationModel(0LL);
  OUTLINED_FUNCTION_33_43(*(int *)(v0 + 28));
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_2();
}

void ForeignEmergencyCallDisambiguationModel.responseViewId.setter(uint64_t a1, uint64_t a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_6();
}

Swift::Void (__swiftcall *ForeignEmergencyCallDisambiguationModel.responseViewId.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void ForeignEmergencyCallDisambiguationModel.init(emergencyServicesItem:foreignEmergencyNumberItem:prompt:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = (int *)OUTLINED_FUNCTION_82_12();
  uint64_t v11 = (void *)(a5 + v10[7]);
  *uint64_t v11 = 0xD00000000000001ELL;
  v11[1] = 0x8000000000346C30LL;
  outlined init with take of DisambiguationItemWithDirectInvocationModel?(a1, a5);
  outlined init with take of DisambiguationItemWithDirectInvocationModel?(a2, a5 + v10[5]);
  uint64_t v12 = (void *)(a5 + v10[6]);
  *uint64_t v12 = a3;
  v12[1] = a4;
  OUTLINED_FUNCTION_16();
}

uint64_t ForeignEmergencyCallDisambiguationModel.CodingKeys.init(stringValue:)( uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v4 = 0x800000000034D4B0LL;
    if (a2 == 0x800000000034D4B0LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000000034D4B0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0xD00000000000001ALL && a2 == 0x800000000034D4D0LL)
  {
    unint64_t v6 = 0x800000000034D4D0LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000000034D4D0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0x74706D6F7270LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v8 = 0xE600000000000000LL;
    goto LABEL_19;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74706D6F7270LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 0x65736E6F70736572LL && a2 == 0xEE00644977656956LL)
  {
    swift_bridgeObjectRelease(0xEE00644977656956LL);
    return 3LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65736E6F70736572LL, 0xEE00644977656956LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t ForeignEmergencyCallDisambiguationModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1E5810 + 4 * byte_334AD7[a1]))( 0xD000000000000015LL,  0x800000000034D4B0LL);
}

uint64_t sub_1E5810(uint64_t a1)
{
  return a1 + 5;
}

uint64_t sub_1E5828()
{
  return 0x74706D6F7270LL;
}

uint64_t sub_1E583C()
{
  return 0x65736E6F70736572LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ForeignEmergencyCallDisambiguationModel.CodingKeys()
{
  return ForeignEmergencyCallDisambiguationModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ForeignEmergencyCallDisambiguationModel.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = ForeignEmergencyCallDisambiguationModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

PhoneCallFlowDelegatePlugin::AnnounceVoicemailDirectAction::CodingKeys_optional protocol witness for CodingKey.init(intValue:) in conformance ForeignEmergencyCallDisambiguationModel.CodingKeys@<W0>( Swift::Int a1@<X0>, PhoneCallFlowDelegatePlugin::AnnounceVoicemailDirectAction::CodingKeys_optional *a2@<X8>)
{
  result.value = AnnounceVoicemailDirectAction.CodingKeys.init(intValue:)(a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ForeignEmergencyCallDisambiguationModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ForeignEmergencyCallDisambiguationModel.CodingKeys and conformance ForeignEmergencyCallDisambiguationModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ForeignEmergencyCallDisambiguationModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ForeignEmergencyCallDisambiguationModel.CodingKeys and conformance ForeignEmergencyCallDisambiguationModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void ForeignEmergencyCallDisambiguationModel.encode(to:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  a20 = v23;
  a21 = v24;
  uint64_t v25 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ForeignEmergencyCallDisambiguationModel.CodingKeys>)
                  - 8);
  __chkstk_darwin();
  unint64_t v27 = (char *)&a9 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  OUTLINED_FUNCTION_37_31();
  unint64_t v28 = lazy protocol witness table accessor for type ForeignEmergencyCallDisambiguationModel.CodingKeys and conformance ForeignEmergencyCallDisambiguationModel.CodingKeys();
  OUTLINED_FUNCTION_20_48((uint64_t)&unk_40C998, v29, v28);
  HIBYTE(a11) = 0;
  type metadata accessor for DisambiguationItemWithDirectInvocationModel(0LL);
  lazy protocol witness table accessor for type SingleVoicemailModel and conformance SingleVoicemailModel((uint64_t)&lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel and conformance DisambiguationItemWithDirectInvocationModel);
  OUTLINED_FUNCTION_35_29(v21, (uint64_t)&a11 + 3);
  if (!v22)
  {
    uint64_t v30 = v21 + *(int *)(type metadata accessor for ForeignEmergencyCallDisambiguationModel(0LL) + 20);
    BYTE2(a11) = 1;
    OUTLINED_FUNCTION_35_29(v30, (uint64_t)&a11 + 2);
    OUTLINED_FUNCTION_73_19();
    OUTLINED_FUNCTION_1_13(v31, v32, (uint64_t)&a11 + 1);
    OUTLINED_FUNCTION_72_17();
    OUTLINED_FUNCTION_1_13(v33, v34, (uint64_t)&a11);
  }

  OUTLINED_FUNCTION_41_2((uint64_t)v27, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
  OUTLINED_FUNCTION_7_1();
}

void ForeignEmergencyCallDisambiguationModel.init(from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  a20 = v23;
  a21 = v24;
  uint64_t v70 = v21;
  uint64_t v26 = v25;
  uint64_t v65 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  uint64_t v29 = (char *)&v63 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v66 = (char *)&v63 - v30;
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ForeignEmergencyCallDisambiguationModel.CodingKeys>);
  uint64_t v31 = *(void *)(v67 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_135();
  uint64_t v32 = type metadata accessor for ForeignEmergencyCallDisambiguationModel(0LL);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v35 = v34 - v33;
  uint64_t v37 = (uint64_t *)(v34 - v33 + *(int *)(v36 + 28));
  *uint64_t v37 = 0xD00000000000001ELL;
  v37[1] = 0x8000000000346C30LL;
  uint64_t v69 = v37;
  uint64_t v38 = v26[3];
  uint64_t v39 = v26[4];
  __swift_project_boxed_opaque_existential_1(v26, v38);
  unint64_t v40 = lazy protocol witness table accessor for type ForeignEmergencyCallDisambiguationModel.CodingKeys and conformance ForeignEmergencyCallDisambiguationModel.CodingKeys();
  uint64_t v68 = v22;
  uint64_t v41 = v70;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_40C998, &unk_40C998, v40, v38, v39);
  if (v41)
  {
    __swift_destroy_boxed_opaque_existential_1(v26);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v63 = v35;
    uint64_t v64 = v26;
    uint64_t v70 = v31;
    type metadata accessor for DisambiguationItemWithDirectInvocationModel(0LL);
    HIBYTE(a11) = 0;
    lazy protocol witness table accessor for type SingleVoicemailModel and conformance SingleVoicemailModel((uint64_t)&lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel and conformance DisambiguationItemWithDirectInvocationModel);
    uint64_t v42 = (uint64_t)v66;
    uint64_t v43 = v67;
    uint64_t v44 = OUTLINED_FUNCTION_66_17();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v44, v45, v46, v47, v48);
    uint64_t v49 = v63;
    outlined init with take of DisambiguationItemWithDirectInvocationModel?(v42, v63);
    BYTE2(a11) = 1;
    uint64_t v50 = OUTLINED_FUNCTION_66_17();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v50, v51, v52, v53, v54);
    outlined init with take of DisambiguationItemWithDirectInvocationModel?((uint64_t)v29, v49 + *(int *)(v32 + 20));
    OUTLINED_FUNCTION_73_19();
    uint64_t v55 = KeyedDecodingContainer.decode(_:forKey:)((char *)&a11 + 1, v43);
    uint64_t v56 = v49;
    uint64_t v57 = (uint64_t *)(v49 + *(int *)(v32 + 24));
    *uint64_t v57 = v55;
    v57[1] = v58;
    OUTLINED_FUNCTION_72_17();
    uint64_t v59 = KeyedDecodingContainer.decode(_:forKey:)(&a11, v43);
    uint64_t v61 = v60;
    OUTLINED_FUNCTION_5_75();
    uint64_t v62 = v69;
    swift_bridgeObjectRelease();
    *uint64_t v62 = v59;
    v62[1] = v61;
    outlined init with copy of SearchCallHistoryBinaryButtonModel( v56,  v65,  (void (*)(void))type metadata accessor for ForeignEmergencyCallDisambiguationModel);
    __swift_destroy_boxed_opaque_existential_1(v64);
    _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_0( v56,  type metadata accessor for ForeignEmergencyCallDisambiguationModel);
  }

  OUTLINED_FUNCTION_7_1();
}

uint64_t protocol witness for PhoneSnippetModel.responseViewId.getter in conformance ForeignEmergencyCallDisambiguationModel( uint64_t a1)
{
  unint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 28));
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

#error "1E5D8C: call analysis failed (funcsize=5)"
#error "1E5DA0: call analysis failed (funcsize=5)"
uint64_t LocalEmergencyCallDisambiguationModel.id.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_81_14();
  OUTLINED_FUNCTION_75_16();
  OUTLINED_FUNCTION_12();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  return OUTLINED_FUNCTION_55_1(v0, v1, v2, v3);
}

void property wrapper backing initializer of LocalEmergencyCallDisambiguationModel.prompt( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void LocalEmergencyCallDisambiguationModel.prompt.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  OUTLINED_FUNCTION_18_44(v0, v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_4();
}

void key path setter for LocalEmergencyCallDisambiguationModel.prompt : LocalEmergencyCallDisambiguationModel( uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRetain();
  LocalEmergencyCallDisambiguationModel.prompt.setter(v1);
}

void LocalEmergencyCallDisambiguationModel.prompt.setter(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  OUTLINED_FUNCTION_15_5(v1, v2, v3, v4, v5, v6, v7, v8, a1);
  OUTLINED_FUNCTION_4();
}

void LocalEmergencyCallDisambiguationModel.prompt.modify()
{
  uint64_t v1 = OUTLINED_FUNCTION_3_1();
  *uint64_t v0 = v1;
  type metadata accessor for LocalEmergencyCallDisambiguationModel(0LL);
  OUTLINED_FUNCTION_36_27();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  v1[4] = OUTLINED_FUNCTION_13_12(v2);
  OUTLINED_FUNCTION_6();
}

void DisambiguationItemWithDirectInvocationModel.personHandle.modify(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32LL))(*a1, 0LL);
  OUTLINED_FUNCTION_48_18(v1);
}

uint64_t LocalEmergencyCallDisambiguationModel.isSmartEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(OUTLINED_FUNCTION_81_14() + 32));
}

void LocalEmergencyCallDisambiguationModel.responseViewId.getter()
{
  uint64_t v0 = type metadata accessor for LocalEmergencyCallDisambiguationModel(0LL);
  OUTLINED_FUNCTION_33_43(*(int *)(v0 + 36));
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_2();
}

void LocalEmergencyCallDisambiguationModel.responseViewId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for LocalEmergencyCallDisambiguationModel(0LL) + 36));
  swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  OUTLINED_FUNCTION_6();
}

Swift::Void (__swiftcall *LocalEmergencyCallDisambiguationModel.responseViewId.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t LocalEmergencyCallDisambiguationModel.init(appBundleId:prompt:items:isSmartEnabled:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, char a5@<W5>, void *a6@<X8>)
{
  uint64_t v12 = OUTLINED_FUNCTION_81_14();
  uint64_t v13 = (void *)((char *)a6 + *(int *)(v12 + 36));
  *uint64_t v13 = 0xD00000000000001CLL;
  v13[1] = 0x8000000000346C50LL;
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a4;
  uint64_t v14 = UUID.init()(v12);
  uint64_t result = OUTLINED_FUNCTION_78_15(v14, (uint64_t)&type metadata for String, v15, v16, v17, v18, v19, v20, a3);
  *((_BYTE *)a6 + *(int *)(v12 + 32)) = a5;
  return result;
}

uint64_t LocalEmergencyCallDisambiguationModel.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6C646E7542707061LL && a2 == 0xEB00000000644965LL)
  {
    unint64_t v5 = 0xEB00000000644965LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C646E7542707061LL, 0xEB00000000644965LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x736D657469LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v8 = 0xE500000000000000LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736D657469LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 25705 && a2 == 0xE200000000000000LL)
  {
    unint64_t v10 = 0xE200000000000000LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705LL, 0xE200000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0x74706D6F7270LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v12 = 0xE600000000000000LL;
    goto LABEL_32;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74706D6F7270LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3LL;
  }

  if (a1 == 0x457472616D537369LL && a2 == 0xEE0064656C62616ELL)
  {
    unint64_t v14 = 0xEE0064656C62616ELL;
    goto LABEL_40;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x457472616D537369LL, 0xEE0064656C62616ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v14);
    return 4LL;
  }

  if (a1 == 0x65736E6F70736572LL && a2 == 0xEE00644977656956LL)
  {
    swift_bridgeObjectRelease(0xEE00644977656956LL);
    return 5LL;
  }

  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65736E6F70736572LL, 0xEE00644977656956LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t LocalEmergencyCallDisambiguationModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1E6364 + 4 * byte_334ADB[a1]))( 0x6C646E7542707061LL,  0xEB00000000644965LL);
}

uint64_t sub_1E6364()
{
  return 0x736D657469LL;
}

uint64_t sub_1E6378()
{
  return 25705LL;
}

uint64_t sub_1E6384()
{
  return 0x74706D6F7270LL;
}

uint64_t sub_1E6398()
{
  return 0x457472616D537369LL;
}

uint64_t sub_1E63BC()
{
  return 0x65736E6F70736572LL;
}

void protocol witness for Hashable.hashValue.getter in conformance LocalEmergencyCallDisambiguationModel.CodingKeys()
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance DisambiguationItemWithDirectInvocationModel.CodingKeys( uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(v2);
  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_10_16();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance LocalEmergencyCallDisambiguationModel.CodingKeys()
{
  return LocalEmergencyCallDisambiguationModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LocalEmergencyCallDisambiguationModel.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = LocalEmergencyCallDisambiguationModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LocalEmergencyCallDisambiguationModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LocalEmergencyCallDisambiguationModel.CodingKeys and conformance LocalEmergencyCallDisambiguationModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LocalEmergencyCallDisambiguationModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LocalEmergencyCallDisambiguationModel.CodingKeys and conformance LocalEmergencyCallDisambiguationModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LocalEmergencyCallDisambiguationModel.encode(to:)()
{
  unint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  OUTLINED_FUNCTION_37_31();
  unint64_t v6 = lazy protocol witness table accessor for type LocalEmergencyCallDisambiguationModel.CodingKeys and conformance LocalEmergencyCallDisambiguationModel.CodingKeys();
  OUTLINED_FUNCTION_20_48((uint64_t)&unk_40C908, v7, v6);
  uint64_t v8 = *v1;
  uint64_t v9 = v1[1];
  char v20 = 0;
  OUTLINED_FUNCTION_1_8(v8, v9, (uint64_t)&v20);
  if (!v2)
  {
    uint64_t v19 = v1[2];
    v18[3] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DisambiguationItemWithDirectInvocationModel]);
    lazy protocol witness table accessor for type [DisambiguationItemWithDirectInvocationModel] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [DisambiguationItemWithDirectInvocationModel] and conformance <A> [A]);
    OUTLINED_FUNCTION_6_12();
    uint64_t v10 = type metadata accessor for LocalEmergencyCallDisambiguationModel(0LL);
    void v18[2] = 2;
    OUTLINED_FUNCTION_12();
    lazy protocol witness table accessor for type SingleVoicemailModel and conformance SingleVoicemailModel((uint64_t)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    OUTLINED_FUNCTION_6_12();
    v18[1] = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    _s10SnippetKit8LoggableVySSGACyxGSEAASeRzSERzlWlTm_0((uint64_t)&lazy protocol witness table cache variable for type Loggable<String> and conformance <A> Loggable<A>);
    OUTLINED_FUNCTION_6_12();
    uint64_t v11 = *((unsigned __int8 *)v1 + *(int *)(v10 + 32));
    v18[0] = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v11, v18, v0);
    unint64_t v12 = (uint64_t *)((char *)v1 + *(int *)(v10 + 36));
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    char v17 = 5;
    OUTLINED_FUNCTION_1_8(v13, v14, (uint64_t)&v17);
  }

  return OUTLINED_FUNCTION_41_2((uint64_t)v5, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
}

void LocalEmergencyCallDisambiguationModel.init(from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12, char a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v28;
  a26 = v29;
  uint64_t v31 = v30;
  uint64_t v56 = v32;
  uint64_t v57 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>)
                  - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_20_0();
  uint64_t v58 = *(void *)(OUTLINED_FUNCTION_12() - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_7_6();
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LocalEmergencyCallDisambiguationModel.CodingKeys>);
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin();
  uint64_t v35 = OUTLINED_FUNCTION_46_24();
  type metadata accessor for LocalEmergencyCallDisambiguationModel(v35);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v59 = v36;
  uint64_t v60 = (uint64_t *)(v38 - v37);
  uint64_t v39 = (uint64_t *)(v38 - v37 + v36[9]);
  *uint64_t v39 = 0xD00000000000001CLL;
  v39[1] = 0x8000000000346C50LL;
  uint64_t v61 = v31;
  uint64_t v62 = v39;
  uint64_t v40 = v31[3];
  uint64_t v41 = v31[4];
  __swift_project_boxed_opaque_existential_1(v31, v40);
  unint64_t v42 = lazy protocol witness table accessor for type LocalEmergencyCallDisambiguationModel.CodingKeys and conformance LocalEmergencyCallDisambiguationModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_40C908, &unk_40C908, v42, v40, v41);
  if (v26)
  {
    __swift_destroy_boxed_opaque_existential_1(v31);
    swift_bridgeObjectRelease();
  }

  else
  {
    a16 = 0;
    *uint64_t v60 = OUTLINED_FUNCTION_62_13((uint64_t)&a16);
    v60[1] = v43;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DisambiguationItemWithDirectInvocationModel]);
    a15 = 1;
    unint64_t v44 = lazy protocol witness table accessor for type [DisambiguationItemWithDirectInvocationModel] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [DisambiguationItemWithDirectInvocationModel] and conformance <A> [A]);
    OUTLINED_FUNCTION_15_57(v44, (uint64_t)&a15, v45, v46, v44);
    v60[2] = v63;
    OUTLINED_FUNCTION_73_19();
    lazy protocol witness table accessor for type SingleVoicemailModel and conformance SingleVoicemailModel((uint64_t)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    OUTLINED_FUNCTION_15_57(v47, (uint64_t)&a14, v48, v49, v47);
    OUTLINED_FUNCTION_142((uint64_t)v60 + v59[6], v27, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 32));
    OUTLINED_FUNCTION_72_17();
    _s10SnippetKit8LoggableVySSGACyxGSEAASeRzSERzlWlTm_0((uint64_t)&lazy protocol witness table cache variable for type Loggable<String> and conformance <A> Loggable<A>);
    OUTLINED_FUNCTION_15_57(v50, (uint64_t)&a13, v51, v52, v50);
    OUTLINED_FUNCTION_30_34((uint64_t)v60 + v59[7], v57);
    a12 = 4;
    *((_BYTE *)v60 + v59[8]) = KeyedDecodingContainer.decode(_:forKey:)(&a12, v33) & 1;
    a11 = 5;
    uint64_t v53 = OUTLINED_FUNCTION_62_13((uint64_t)&a11);
    uint64_t v55 = v54;
    OUTLINED_FUNCTION_7_79(*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
    swift_bridgeObjectRelease();
    *uint64_t v62 = v53;
    v62[1] = v55;
    outlined init with copy of SearchCallHistoryBinaryButtonModel( (uint64_t)v60,  v56,  (void (*)(void))type metadata accessor for LocalEmergencyCallDisambiguationModel);
    __swift_destroy_boxed_opaque_existential_1(v61);
    _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_0( (uint64_t)v60,  type metadata accessor for LocalEmergencyCallDisambiguationModel);
  }

  OUTLINED_FUNCTION_7_1();
}

uint64_t protocol witness for PhoneSnippetModel.responseViewId.getter in conformance LocalEmergencyCallDisambiguationModel( uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 36));
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t protocol witness for Identifiable.id.getter in conformance LocalEmergencyCallDisambiguationModel@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

#error "1E6B58: call analysis failed (funcsize=5)"
uint64_t protocol witness for Encodable.encode(to:) in conformance LocalEmergencyCallDisambiguationModel()
{
  return LocalEmergencyCallDisambiguationModel.encode(to:)();
}

unint64_t lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DisambiguationItemWithDirectInvocationModel.CodingKeys,  &unk_40CA28);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DisambiguationItemWithDirectInvocationModel.CodingKeys,  &unk_40CA28);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DisambiguationItemWithDirectInvocationModel.CodingKeys,  &unk_40CA28);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DisambiguationItemWithDirectInvocationModel.CodingKeys,  &unk_40CA28);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.CodingKeys and conformance DisambiguationItemWithDirectInvocationModel.CodingKeys);
  }

  return result;
}

void lazy protocol witness table accessor for type String? and conformance <A> A?(uint64_t a1)
{
  if (!OUTLINED_FUNCTION_12_6(a1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for String?);
    atomic_store(OUTLINED_FUNCTION_19_4(v2, v2), v1);
  }

  OUTLINED_FUNCTION_24_0();
}

void _s10SnippetKit8LoggableVySbGACyxGSeAASeRzSERzlWlTm_0(uint64_t a1)
{
  if (!OUTLINED_FUNCTION_12_6(a1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Loggable<Bool>);
    atomic_store(OUTLINED_FUNCTION_19_4(v2, v2), v1);
  }

  OUTLINED_FUNCTION_4();
}

void lazy protocol witness table accessor for type Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>> and conformance <A> Loggable<A>( uint64_t a1)
{
  if (!OUTLINED_FUNCTION_12_6(a1))
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>);
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>);
    atomic_store(OUTLINED_FUNCTION_19_46(), v1);
  }

  OUTLINED_FUNCTION_24_0();
}

void lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>( uint64_t a1)
{
  if (!OUTLINED_FUNCTION_12_6(a1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    atomic_store(OUTLINED_FUNCTION_19_4(v2, v2), v1);
  }

  OUTLINED_FUNCTION_2();
}

void lazy protocol witness table accessor for type Loggable<DisambiguationItemWithDirectInvocationModel.ItemType> and conformance <A> Loggable<A>( uint64_t a1)
{
  if (!OUTLINED_FUNCTION_12_6(a1))
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
    lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.ItemType and conformance DisambiguationItemWithDirectInvocationModel.ItemType();
    lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.ItemType and conformance DisambiguationItemWithDirectInvocationModel.ItemType();
    atomic_store(OUTLINED_FUNCTION_19_46(), v1);
  }

  OUTLINED_FUNCTION_24_0();
}

unint64_t lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.ItemType and conformance DisambiguationItemWithDirectInvocationModel.ItemType()
{
  unint64_t result = lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType and conformance DisambiguationItemWithDirectInvocationModel.ItemType;
  if (!lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType and conformance DisambiguationItemWithDirectInvocationModel.ItemType)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DisambiguationItemWithDirectInvocationModel.ItemType,  &type metadata for DisambiguationItemWithDirectInvocationModel.ItemType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType and conformance DisambiguationItemWithDirectInvocationModel.ItemType);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType and conformance DisambiguationItemWithDirectInvocationModel.ItemType;
  if (!lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType and conformance DisambiguationItemWithDirectInvocationModel.ItemType)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DisambiguationItemWithDirectInvocationModel.ItemType,  &type metadata for DisambiguationItemWithDirectInvocationModel.ItemType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationItemWithDirectInvocationModel.ItemType and conformance DisambiguationItemWithDirectInvocationModel.ItemType);
  }

  return result;
}

void lazy protocol witness table accessor for type Loggable<String?> and conformance <A> Loggable<A>( uint64_t a1)
{
  if (!OUTLINED_FUNCTION_12_6(a1))
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Loggable<String?>);
    lazy protocol witness table accessor for type String? and conformance <A> A?((uint64_t)&lazy protocol witness table cache variable for type String? and conformance <A> A?);
    lazy protocol witness table accessor for type String? and conformance <A> A?((uint64_t)&lazy protocol witness table cache variable for type String? and conformance <A> A?);
    atomic_store(OUTLINED_FUNCTION_19_46(), v1);
  }

  OUTLINED_FUNCTION_24_0();
}

uint64_t outlined init with copy of DisambiguationItemWithDirectInvocationModel?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ForeignEmergencyCallDisambiguationModel(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for ForeignEmergencyCallDisambiguationModel,  (uint64_t)&nominal type descriptor for ForeignEmergencyCallDisambiguationModel);
}

uint64_t outlined init with take of DisambiguationItemWithDirectInvocationModel?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ForeignEmergencyCallDisambiguationModel.CodingKeys and conformance ForeignEmergencyCallDisambiguationModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ForeignEmergencyCallDisambiguationModel.CodingKeys and conformance ForeignEmergencyCallDisambiguationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ForeignEmergencyCallDisambiguationModel.CodingKeys and conformance ForeignEmergencyCallDisambiguationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ForeignEmergencyCallDisambiguationModel.CodingKeys,  &unk_40C998);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ForeignEmergencyCallDisambiguationModel.CodingKeys and conformance ForeignEmergencyCallDisambiguationModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ForeignEmergencyCallDisambiguationModel.CodingKeys and conformance ForeignEmergencyCallDisambiguationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ForeignEmergencyCallDisambiguationModel.CodingKeys and conformance ForeignEmergencyCallDisambiguationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ForeignEmergencyCallDisambiguationModel.CodingKeys,  &unk_40C998);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ForeignEmergencyCallDisambiguationModel.CodingKeys and conformance ForeignEmergencyCallDisambiguationModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ForeignEmergencyCallDisambiguationModel.CodingKeys and conformance ForeignEmergencyCallDisambiguationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ForeignEmergencyCallDisambiguationModel.CodingKeys and conformance ForeignEmergencyCallDisambiguationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ForeignEmergencyCallDisambiguationModel.CodingKeys,  &unk_40C998);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ForeignEmergencyCallDisambiguationModel.CodingKeys and conformance ForeignEmergencyCallDisambiguationModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ForeignEmergencyCallDisambiguationModel.CodingKeys and conformance ForeignEmergencyCallDisambiguationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ForeignEmergencyCallDisambiguationModel.CodingKeys and conformance ForeignEmergencyCallDisambiguationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ForeignEmergencyCallDisambiguationModel.CodingKeys,  &unk_40C998);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ForeignEmergencyCallDisambiguationModel.CodingKeys and conformance ForeignEmergencyCallDisambiguationModel.CodingKeys);
  }

  return result;
}

uint64_t outlined destroy of DisambiguationItemWithDirectInvocationModel?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for LocalEmergencyCallDisambiguationModel(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for LocalEmergencyCallDisambiguationModel,  (uint64_t)&nominal type descriptor for LocalEmergencyCallDisambiguationModel);
}

unint64_t lazy protocol witness table accessor for type LocalEmergencyCallDisambiguationModel.CodingKeys and conformance LocalEmergencyCallDisambiguationModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalEmergencyCallDisambiguationModel.CodingKeys and conformance LocalEmergencyCallDisambiguationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type LocalEmergencyCallDisambiguationModel.CodingKeys and conformance LocalEmergencyCallDisambiguationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocalEmergencyCallDisambiguationModel.CodingKeys,  &unk_40C908);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocalEmergencyCallDisambiguationModel.CodingKeys and conformance LocalEmergencyCallDisambiguationModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocalEmergencyCallDisambiguationModel.CodingKeys and conformance LocalEmergencyCallDisambiguationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type LocalEmergencyCallDisambiguationModel.CodingKeys and conformance LocalEmergencyCallDisambiguationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocalEmergencyCallDisambiguationModel.CodingKeys,  &unk_40C908);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocalEmergencyCallDisambiguationModel.CodingKeys and conformance LocalEmergencyCallDisambiguationModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocalEmergencyCallDisambiguationModel.CodingKeys and conformance LocalEmergencyCallDisambiguationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type LocalEmergencyCallDisambiguationModel.CodingKeys and conformance LocalEmergencyCallDisambiguationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocalEmergencyCallDisambiguationModel.CodingKeys,  &unk_40C908);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocalEmergencyCallDisambiguationModel.CodingKeys and conformance LocalEmergencyCallDisambiguationModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocalEmergencyCallDisambiguationModel.CodingKeys and conformance LocalEmergencyCallDisambiguationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type LocalEmergencyCallDisambiguationModel.CodingKeys and conformance LocalEmergencyCallDisambiguationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocalEmergencyCallDisambiguationModel.CodingKeys,  &unk_40C908);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocalEmergencyCallDisambiguationModel.CodingKeys and conformance LocalEmergencyCallDisambiguationModel.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type [DisambiguationItemWithDirectInvocationModel] and conformance <A> [A]( uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_12_6(a1);
  if (!result)
  {
    uint64_t v5 = v4;
    uint64_t v6 = v3;
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DisambiguationItemWithDirectInvocationModel]);
    lazy protocol witness table accessor for type SingleVoicemailModel and conformance SingleVoicemailModel(v6);
    unint64_t result = swift_getWitnessTable(v5, v7);
    atomic_store(result, v1);
  }

  return result;
}

void base witness table accessor for Decodable in DisambiguationItemWithDirectInvocationModel()
{
}

void base witness table accessor for Encodable in DisambiguationItemWithDirectInvocationModel()
{
}

void associated type witness table accessor for Identifiable.ID : Hashable in DisambiguationItemWithDirectInvocationModel()
{
}

void base witness table accessor for Equatable in DisambiguationItemWithDirectInvocationModel()
{
}

void instantiation function for generic protocol witness table for ForeignEmergencyCallDisambiguationModel( uint64_t a1)
{
  *(void *)(a1 + 8) = v2;
}

void base witness table accessor for Decodable in ForeignEmergencyCallDisambiguationModel()
{
}

void base witness table accessor for Encodable in ForeignEmergencyCallDisambiguationModel()
{
}

void instantiation function for generic protocol witness table for LocalEmergencyCallDisambiguationModel( uint64_t a1)
{
  *(void *)(a1 + 8) = v2;
}

void base witness table accessor for Decodable in LocalEmergencyCallDisambiguationModel()
{
}

void base witness table accessor for Encodable in LocalEmergencyCallDisambiguationModel()
{
}

void sub_1E7204()
{
  *uint64_t v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_2();
}

void sub_1E7224(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1E7240()
{
  *uint64_t v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_2();
}

void sub_1E7264()
{
  *uint64_t v0 = DisambiguationItemWithDirectInvocationModel.shouldPrintHandleBlue.getter() & 1;
  OUTLINED_FUNCTION_2();
}

void sub_1E7288(char *a1)
{
}

void sub_1E72A8()
{
  *uint64_t v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_2();
}

void sub_1E72C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1E72E4()
{
  *uint64_t v0 = DisambiguationItemWithDirectInvocationModel.rskeCommand.getter();
  OUTLINED_FUNCTION_2();
}

void sub_1E7308()
{
  *uint64_t v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_2();
}

void sub_1E7328(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1E7344()
{
  *uint64_t v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_2();
}

char *initializeBufferWithCopyOfBuffer for DisambiguationItemWithDirectInvocationModel( char *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v29 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
    unint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = &a1[v13];
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
    uint64_t v17 = a3[7];
    uint64_t v18 = &a1[v17];
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16LL))(v18, v19, v20);
    v12(&a1[a3[8]], (char *)a2 + a3[8], v11);
    uint64_t v21 = a3[9];
    uint64_t v22 = &a1[v21];
    uint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16LL))(v22, v23, v24);
    uint64_t v25 = a3[10];
    uint64_t v26 = &a1[v25];
    uint64_t v27 = (char *)a2 + v25;
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16LL))(v26, v27, v28);
  }

  return a1;
}

uint64_t destroy for DisambiguationItemWithDirectInvocationModel(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL);
  v7(v5, v6);
  uint64_t v8 = a1 + a2[6];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  uint64_t v10 = a1 + a2[7];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  v7(a1 + a2[8], v6);
  uint64_t v12 = a1 + a2[9];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(v12, v13);
  uint64_t v14 = a1 + a2[10];
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
}

uint64_t initializeWithCopy for DisambiguationItemWithDirectInvocationModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16LL))(v17, v18, v19);
  v11(a1 + a3[8], a2 + a3[8], v10);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16LL))(v21, v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16LL))(v25, v26, v27);
  return a1;
}

uint64_t assignWithCopy for DisambiguationItemWithDirectInvocationModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24LL))(v13, v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24LL))(v17, v18, v19);
  v11(a1 + a3[8], a2 + a3[8], v10);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 24LL))(v21, v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 24LL))(v25, v26, v27);
  return a1;
}

uint64_t initializeWithTake for DisambiguationItemWithDirectInvocationModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32LL))(v13, v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32LL))(v17, v18, v19);
  v11(a1 + a3[8], a2 + a3[8], v10);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32LL))(v21, v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32LL))(v25, v26, v27);
  return a1;
}

uint64_t assignWithTake for DisambiguationItemWithDirectInvocationModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40LL))(v13, v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40LL))(v17, v18, v19);
  v11(a1 + a3[8], a2 + a3[8], v10);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 40LL))(v21, v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 40LL))(v25, v26, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisambiguationItemWithDirectInvocationModel( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1E7BCC);
}

uint64_t sub_1E7BCC(uint64_t a1, uint64_t a2, int *a3)
{
  if (v9)
  {
    uint64_t v7 = v6;
    uint64_t v8 = a1;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
    OUTLINED_FUNCTION_20_36();
    if (v9)
    {
      uint64_t v7 = v10;
      uint64_t v11 = a3[5];
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      OUTLINED_FUNCTION_20_36();
      if (v12)
      {
        uint64_t v7 = v13;
        uint64_t v11 = a3[6];
      }

      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
        OUTLINED_FUNCTION_20_36();
        if (v14)
        {
          uint64_t v7 = v15;
          uint64_t v11 = a3[7];
        }

        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
          OUTLINED_FUNCTION_20_36();
          if (v16)
          {
            uint64_t v7 = v17;
            uint64_t v11 = a3[9];
          }

          else
          {
            uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
            uint64_t v11 = a3[10];
          }
        }
      }
    }

    uint64_t v8 = a1 + v11;
  }

  return OUTLINED_FUNCTION_9_3(v8, a2, v7);
}

uint64_t storeEnumTagSinglePayload for DisambiguationItemWithDirectInvocationModel( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1E7CB0);
}

uint64_t sub_1E7CB0()
{
  if (v6)
  {
    uint64_t v4 = v3;
    uint64_t v5 = v1;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
    OUTLINED_FUNCTION_168();
    if (v6)
    {
      uint64_t v4 = v7;
      uint64_t v8 = v2[5];
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      OUTLINED_FUNCTION_168();
      if (v9)
      {
        uint64_t v4 = v10;
        uint64_t v8 = v2[6];
      }

      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
        OUTLINED_FUNCTION_168();
        if (v11)
        {
          uint64_t v4 = v12;
          uint64_t v8 = v2[7];
        }

        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
          OUTLINED_FUNCTION_168();
          if (v13)
          {
            uint64_t v4 = v14;
            uint64_t v8 = v2[9];
          }

          else
          {
            uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
            uint64_t v8 = v2[10];
          }
        }
      }
    }

    uint64_t v5 = v1 + v8;
  }

  return OUTLINED_FUNCTION_32_6(v5, v0, v0, v4);
}

void type metadata completion function for DisambiguationItemWithDirectInvocationModel(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v15[0] = *(void *)(v2 - 8) + 64LL;
    type metadata accessor for Loggable<String?>( 319LL,  &lazy cache variable for type metadata for Loggable<String?>,  &demangling cache variable for type metadata for String?);
    if (v5 <= 0x3F)
    {
      uint64_t v6 = *(void *)(v4 - 8) + 64LL;
      v15[1] = v6;
      type metadata accessor for Loggable<String>( 319LL,  (unint64_t *)&lazy cache variable for type metadata for Loggable<String>,  (uint64_t)&type metadata for String);
      if (v8 <= 0x3F)
      {
        v15[2] = *(void *)(v7 - 8) + 64LL;
        type metadata accessor for Loggable<String>( 319LL,  &lazy cache variable for type metadata for Loggable<Bool>,  (uint64_t)&type metadata for Bool);
        if (v10 <= 0x3F)
        {
          v15[3] = *(void *)(v9 - 8) + 64LL;
          void v15[4] = v6;
          type metadata accessor for Loggable<String?>( 319LL,  &lazy cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>,  &demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
          if (v12 <= 0x3F)
          {
            v15[5] = *(void *)(v11 - 8) + 64LL;
            type metadata accessor for Loggable<String>( 319LL,  &lazy cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>,  (uint64_t)&type metadata for DisambiguationItemWithDirectInvocationModel.ItemType);
            if (v14 <= 0x3F)
            {
              v15[6] = *(void *)(v13 - 8) + 64LL;
              swift_initStructMetadata(a1, 256LL, 7LL, v15, a1 + 16);
            }
          }
        }
      }
    }
  }

void type metadata accessor for Loggable<String?>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    unint64_t v6 = type metadata accessor for Loggable(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

  OUTLINED_FUNCTION_2();
}

uint64_t getEnumTagSinglePayload for DisambiguationItemWithDirectInvocationModel.ItemType( uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for DisambiguationItemWithDirectInvocationModel.ItemType( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DisambiguationItemWithDirectInvocationModel.ItemType()
{
  return &type metadata for DisambiguationItemWithDirectInvocationModel.ItemType;
}

uint64_t *initializeBufferWithCopyOfBuffer for ForeignEmergencyCallDisambiguationModel( uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = (int *)type metadata accessor for DisambiguationItemWithDirectInvocationModel(0LL);
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, (uint64_t)v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      uint64_t v10 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
      uint64_t v11 = v7[5];
      unint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL);
      v15(v12, v13, v14);
      uint64_t v16 = v7[6];
      uint64_t v17 = (char *)a1 + v16;
      uint64_t v18 = (char *)a2 + v16;
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16LL))(v17, v18, v19);
      uint64_t v20 = v7[7];
      uint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16LL))(v21, v22, v23);
      v15((char *)a1 + v7[8], (char *)a2 + v7[8], v14);
      uint64_t v24 = v7[9];
      uint64_t v25 = (char *)a1 + v24;
      uint64_t v26 = (char *)a2 + v24;
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16LL))(v25, v26, v27);
      uint64_t v28 = v7[10];
      uint64_t v29 = (char *)a1 + v28;
      uint64_t v30 = (char *)a2 + v28;
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16LL))(v29, v30, v31);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, (uint64_t)v7);
    }

    uint64_t v32 = a3[5];
    uint64_t v33 = (char *)a1 + v32;
    uint64_t v34 = (char *)a2 + v32;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v32, 1LL, (uint64_t)v7))
    {
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64LL));
    }

    else
    {
      uint64_t v36 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16LL))(v33, v34, v36);
      uint64_t v37 = v7[5];
      uint64_t v38 = &v33[v37];
      uint64_t v39 = &v34[v37];
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
      uint64_t v41 = *(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16LL);
      v41(v38, v39, v40);
      uint64_t v42 = v7[6];
      uint64_t v43 = &v33[v42];
      unint64_t v44 = &v34[v42];
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16LL))(v43, v44, v45);
      uint64_t v46 = v7[7];
      uint64_t v47 = &v33[v46];
      uint64_t v48 = &v34[v46];
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16LL))(v47, v48, v49);
      v41(&v33[v7[8]], &v34[v7[8]], v40);
      uint64_t v50 = v7[9];
      uint64_t v51 = &v33[v50];
      uint64_t v52 = &v34[v50];
      uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16LL))(v51, v52, v53);
      uint64_t v54 = v7[10];
      uint64_t v55 = &v33[v54];
      uint64_t v56 = &v34[v54];
      uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16LL))(v55, v56, v57);
      __swift_storeEnumTagSinglePayload((uint64_t)v33, 0LL, 1LL, (uint64_t)v7);
    }

    uint64_t v58 = a3[6];
    uint64_t v59 = a3[7];
    uint64_t v60 = (uint64_t *)((char *)a1 + v58);
    uint64_t v61 = (uint64_t *)((char *)a2 + v58);
    uint64_t v62 = v61[1];
    *uint64_t v60 = *v61;
    v60[1] = v62;
    uint64_t v63 = (uint64_t *)((char *)a1 + v59);
    uint64_t v64 = (uint64_t *)((char *)a2 + v59);
    uint64_t v65 = v64[1];
    void *v63 = *v64;
    v63[1] = v65;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return a1;
}

uint64_t destroy for ForeignEmergencyCallDisambiguationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for DisambiguationItemWithDirectInvocationModel(0LL);
  if (!__swift_getEnumTagSinglePayload(a1, 1LL, (uint64_t)v4))
  {
    uint64_t v5 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(a1, v5);
    uint64_t v6 = a1 + v4[5];
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
    v8(v6, v7);
    uint64_t v9 = a1 + v4[6];
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
    uint64_t v11 = a1 + v4[7];
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v11, v12);
    v8(a1 + v4[8], v7);
    uint64_t v13 = a1 + v4[9];
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL))(v13, v14);
    uint64_t v15 = a1 + v4[10];
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(v15, v16);
  }

  uint64_t v17 = a1 + *(int *)(a2 + 20);
  if (!__swift_getEnumTagSinglePayload(v17, 1LL, (uint64_t)v4))
  {
    uint64_t v18 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8LL))(v17, v18);
    uint64_t v19 = v17 + v4[5];
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8LL);
    v21(v19, v20);
    uint64_t v22 = v17 + v4[6];
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8LL))(v22, v23);
    uint64_t v24 = v17 + v4[7];
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8LL))(v24, v25);
    v21(v17 + v4[8], v20);
    uint64_t v26 = v17 + v4[9];
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8LL))(v26, v27);
    uint64_t v28 = v17 + v4[10];
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8LL))(v28, v29);
  }

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for ForeignEmergencyCallDisambiguationModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for DisambiguationItemWithDirectInvocationModel(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, (uint64_t)v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    uint64_t v8 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
    uint64_t v9 = v6[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    v13(v10, v11, v12);
    uint64_t v14 = v6[6];
    uint64_t v15 = &a1[v14];
    uint64_t v16 = &a2[v14];
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16LL))(v15, v16, v17);
    uint64_t v18 = v6[7];
    uint64_t v19 = &a1[v18];
    uint64_t v20 = &a2[v18];
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16LL))(v19, v20, v21);
    v13(&a1[v6[8]], &a2[v6[8]], v12);
    uint64_t v22 = v6[9];
    uint64_t v23 = &a1[v22];
    uint64_t v24 = &a2[v22];
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16LL))(v23, v24, v25);
    uint64_t v26 = v6[10];
    uint64_t v27 = &a1[v26];
    uint64_t v28 = &a2[v26];
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16LL))(v27, v28, v29);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, (uint64_t)v6);
  }

  uint64_t v30 = a3[5];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v30], 1LL, (uint64_t)v6))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64LL));
  }

  else
  {
    uint64_t v34 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16LL))(v31, v32, v34);
    uint64_t v35 = v6[5];
    uint64_t v36 = &v31[v35];
    uint64_t v37 = &v32[v35];
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16LL);
    v39(v36, v37, v38);
    uint64_t v40 = v6[6];
    uint64_t v41 = &v31[v40];
    uint64_t v42 = &v32[v40];
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16LL))(v41, v42, v43);
    uint64_t v44 = v6[7];
    uint64_t v45 = &v31[v44];
    uint64_t v46 = &v32[v44];
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16LL))(v45, v46, v47);
    v39(&v31[v6[8]], &v32[v6[8]], v38);
    uint64_t v48 = v6[9];
    uint64_t v49 = &v31[v48];
    uint64_t v50 = &v32[v48];
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16LL))(v49, v50, v51);
    uint64_t v52 = v6[10];
    uint64_t v53 = &v31[v52];
    uint64_t v54 = &v32[v52];
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 16LL))(v53, v54, v55);
    __swift_storeEnumTagSinglePayload((uint64_t)v31, 0LL, 1LL, (uint64_t)v6);
  }

  uint64_t v56 = a3[6];
  uint64_t v57 = a3[7];
  uint64_t v58 = &a1[v56];
  uint64_t v59 = &a2[v56];
  uint64_t v60 = *((void *)v59 + 1);
  *(void *)uint64_t v58 = *(void *)v59;
  *((void *)v58 + 1) = v60;
  uint64_t v61 = &a1[v57];
  uint64_t v62 = &a2[v57];
  uint64_t v63 = *((void *)v62 + 1);
  *(void *)uint64_t v61 = *(void *)v62;
  *((void *)v61 + 1) = v63;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for ForeignEmergencyCallDisambiguationModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for DisambiguationItemWithDirectInvocationModel(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1LL, (uint64_t)v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, (uint64_t)v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      uint64_t v9 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
      uint64_t v10 = v6[5];
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL);
      v14(v11, v12, v13);
      uint64_t v15 = v6[6];
      uint64_t v16 = &a1[v15];
      uint64_t v17 = &a2[v15];
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16LL))(v16, v17, v18);
      uint64_t v19 = v6[7];
      uint64_t v20 = &a1[v19];
      uint64_t v21 = &a2[v19];
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16LL))(v20, v21, v22);
      v14(&a1[v6[8]], &a2[v6[8]], v13);
      uint64_t v23 = v6[9];
      uint64_t v24 = &a1[v23];
      uint64_t v25 = &a2[v23];
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16LL))(v24, v25, v26);
      uint64_t v27 = v6[10];
      uint64_t v28 = &a1[v27];
      uint64_t v29 = &a2[v27];
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16LL))(v28, v29, v30);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, (uint64_t)v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v8)
  {
    _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_0( (uint64_t)a1,  type metadata accessor for DisambiguationItemWithDirectInvocationModel);
LABEL_6:
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
    memcpy(a1, a2, *(void *)(*(void *)(v31 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v67 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 24LL))(a1, a2, v67);
  uint64_t v68 = v6[5];
  uint64_t v69 = &a1[v68];
  uint64_t v70 = &a2[v68];
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
  uint64_t v72 = *(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 24LL);
  v72(v69, v70, v71);
  uint64_t v73 = v6[6];
  uint64_t v74 = &a1[v73];
  uint64_t v75 = &a2[v73];
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 24LL))(v74, v75, v76);
  uint64_t v77 = v6[7];
  uint64_t v78 = &a1[v77];
  uint64_t v79 = &a2[v77];
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 24LL))(v78, v79, v80);
  v72(&a1[v6[8]], &a2[v6[8]], v71);
  uint64_t v81 = v6[9];
  uint64_t v82 = &a1[v81];
  uint64_t v83 = &a2[v81];
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v84 - 8) + 24LL))(v82, v83, v84);
  uint64_t v85 = v6[10];
  unint64_t v86 = &a1[v85];
  uint64_t v87 = &a2[v85];
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 24LL))(v86, v87, v88);
LABEL_7:
  uint64_t v32 = a3[5];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  int v35 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v32], 1LL, (uint64_t)v6);
  int v36 = __swift_getEnumTagSinglePayload((uint64_t)v34, 1LL, (uint64_t)v6);
  if (!v35)
  {
    if (!v36)
    {
      uint64_t v89 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v89 - 8) + 24LL))(v33, v34, v89);
      uint64_t v90 = v6[5];
      uint64_t v91 = &v33[v90];
      uint64_t v92 = &v34[v90];
      uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
      uint64_t v94 = *(void (**)(char *, char *, uint64_t))(*(void *)(v93 - 8) + 24LL);
      v94(v91, v92, v93);
      uint64_t v95 = v6[6];
      uint64_t v96 = &v33[v95];
      os_log_type_t v97 = &v34[v95];
      uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v98 - 8) + 24LL))(v96, v97, v98);
      uint64_t v99 = v6[7];
      uint64_t v100 = &v33[v99];
      unint64_t v101 = &v34[v99];
      uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v102 - 8) + 24LL))(v100, v101, v102);
      v94(&v33[v6[8]], &v34[v6[8]], v93);
      uint64_t v103 = v6[9];
      BOOL v104 = &v33[v103];
      uint64_t v105 = &v34[v103];
      uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v106 - 8) + 24LL))(v104, v105, v106);
      uint64_t v107 = v6[10];
      uint64_t v108 = &v33[v107];
      uint64_t v109 = &v34[v107];
      uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v110 - 8) + 24LL))(v108, v109, v110);
      goto LABEL_13;
    }

    _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_0( (uint64_t)v33,  type metadata accessor for DisambiguationItemWithDirectInvocationModel);
    goto LABEL_12;
  }

  if (v36)
  {
LABEL_12:
    uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
    memcpy(v33, v34, *(void *)(*(void *)(v59 - 8) + 64LL));
    goto LABEL_13;
  }

  uint64_t v37 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16LL))(v33, v34, v37);
  uint64_t v38 = v6[5];
  uint64_t v39 = &v33[v38];
  uint64_t v40 = &v34[v38];
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16LL);
  v42(v39, v40, v41);
  uint64_t v43 = v6[6];
  uint64_t v44 = &v33[v43];
  uint64_t v45 = &v34[v43];
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16LL))(v44, v45, v46);
  uint64_t v47 = v6[7];
  uint64_t v48 = &v33[v47];
  uint64_t v49 = &v34[v47];
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16LL))(v48, v49, v50);
  v42(&v33[v6[8]], &v34[v6[8]], v41);
  uint64_t v51 = v6[9];
  uint64_t v52 = &v33[v51];
  uint64_t v53 = &v34[v51];
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16LL))(v52, v53, v54);
  uint64_t v55 = v6[10];
  uint64_t v56 = &v33[v55];
  uint64_t v57 = &v34[v55];
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16LL))(v56, v57, v58);
  __swift_storeEnumTagSinglePayload((uint64_t)v33, 0LL, 1LL, (uint64_t)v6);
LABEL_13:
  uint64_t v60 = a3[6];
  uint64_t v61 = &a1[v60];
  uint64_t v62 = &a2[v60];
  *(void *)uint64_t v61 = *(void *)v62;
  *((void *)v61 + 1) = *((void *)v62 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v63 = a3[7];
  uint64_t v64 = &a1[v63];
  uint64_t v65 = &a2[v63];
  *(void *)uint64_t v64 = *(void *)v65;
  *((void *)v64 + 1) = *((void *)v65 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for ForeignEmergencyCallDisambiguationModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for DisambiguationItemWithDirectInvocationModel(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, (uint64_t)v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    uint64_t v8 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
    uint64_t v9 = v6[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32LL);
    v13(v10, v11, v12);
    uint64_t v14 = v6[6];
    uint64_t v15 = &a1[v14];
    uint64_t v16 = &a2[v14];
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32LL))(v15, v16, v17);
    uint64_t v18 = v6[7];
    uint64_t v19 = &a1[v18];
    uint64_t v20 = &a2[v18];
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32LL))(v19, v20, v21);
    v13(&a1[v6[8]], &a2[v6[8]], v12);
    uint64_t v22 = v6[9];
    uint64_t v23 = &a1[v22];
    uint64_t v24 = &a2[v22];
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32LL))(v23, v24, v25);
    uint64_t v26 = v6[10];
    uint64_t v27 = &a1[v26];
    uint64_t v28 = &a2[v26];
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32LL))(v27, v28, v29);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, (uint64_t)v6);
  }

  uint64_t v30 = a3[5];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v30], 1LL, (uint64_t)v6))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64LL));
  }

  else
  {
    uint64_t v34 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32LL))(v31, v32, v34);
    uint64_t v35 = v6[5];
    int v36 = &v31[v35];
    uint64_t v37 = &v32[v35];
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32LL);
    v39(v36, v37, v38);
    uint64_t v40 = v6[6];
    uint64_t v41 = &v31[v40];
    uint64_t v42 = &v32[v40];
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32LL))(v41, v42, v43);
    uint64_t v44 = v6[7];
    uint64_t v45 = &v31[v44];
    uint64_t v46 = &v32[v44];
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32LL))(v45, v46, v47);
    v39(&v31[v6[8]], &v32[v6[8]], v38);
    uint64_t v48 = v6[9];
    uint64_t v49 = &v31[v48];
    uint64_t v50 = &v32[v48];
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32LL))(v49, v50, v51);
    uint64_t v52 = v6[10];
    uint64_t v53 = &v31[v52];
    uint64_t v54 = &v32[v52];
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32LL))(v53, v54, v55);
    __swift_storeEnumTagSinglePayload((uint64_t)v31, 0LL, 1LL, (uint64_t)v6);
  }

  uint64_t v56 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v56] = *(_OWORD *)&a2[v56];
  return a1;
}

char *assignWithTake for ForeignEmergencyCallDisambiguationModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for DisambiguationItemWithDirectInvocationModel(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1LL, (uint64_t)v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, (uint64_t)v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      uint64_t v9 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
      uint64_t v10 = v6[5];
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32LL);
      v14(v11, v12, v13);
      uint64_t v15 = v6[6];
      uint64_t v16 = &a1[v15];
      uint64_t v17 = &a2[v15];
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v16, v17, v18);
      uint64_t v19 = v6[7];
      uint64_t v20 = &a1[v19];
      uint64_t v21 = &a2[v19];
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32LL))(v20, v21, v22);
      v14(&a1[v6[8]], &a2[v6[8]], v13);
      uint64_t v23 = v6[9];
      uint64_t v24 = &a1[v23];
      uint64_t v25 = &a2[v23];
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32LL))(v24, v25, v26);
      uint64_t v27 = v6[10];
      uint64_t v28 = &a1[v27];
      uint64_t v29 = &a2[v27];
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32LL))(v28, v29, v30);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, (uint64_t)v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v8)
  {
    _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_0( (uint64_t)a1,  type metadata accessor for DisambiguationItemWithDirectInvocationModel);
LABEL_6:
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
    memcpy(a1, a2, *(void *)(*(void *)(v31 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v71 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 40LL))(a1, a2, v71);
  uint64_t v72 = v6[5];
  uint64_t v73 = &a1[v72];
  uint64_t v74 = &a2[v72];
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
  uint64_t v76 = *(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 40LL);
  v76(v73, v74, v75);
  uint64_t v77 = v6[6];
  uint64_t v78 = &a1[v77];
  uint64_t v79 = &a2[v77];
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 40LL))(v78, v79, v80);
  uint64_t v81 = v6[7];
  uint64_t v82 = &a1[v81];
  uint64_t v83 = &a2[v81];
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v84 - 8) + 40LL))(v82, v83, v84);
  v76(&a1[v6[8]], &a2[v6[8]], v75);
  uint64_t v85 = v6[9];
  unint64_t v86 = &a1[v85];
  uint64_t v87 = &a2[v85];
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 40LL))(v86, v87, v88);
  uint64_t v89 = v6[10];
  uint64_t v90 = &a1[v89];
  uint64_t v91 = &a2[v89];
  uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v92 - 8) + 40LL))(v90, v91, v92);
LABEL_7:
  uint64_t v32 = a3[5];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  int v35 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v32], 1LL, (uint64_t)v6);
  int v36 = __swift_getEnumTagSinglePayload((uint64_t)v34, 1LL, (uint64_t)v6);
  if (!v35)
  {
    if (!v36)
    {
      uint64_t v93 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v93 - 8) + 40LL))(v33, v34, v93);
      uint64_t v94 = v6[5];
      uint64_t v95 = &v33[v94];
      uint64_t v96 = &v34[v94];
      uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
      uint64_t v98 = *(void (**)(char *, char *, uint64_t))(*(void *)(v97 - 8) + 40LL);
      v98(v95, v96, v97);
      uint64_t v99 = v6[6];
      uint64_t v100 = &v33[v99];
      unint64_t v101 = &v34[v99];
      uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v102 - 8) + 40LL))(v100, v101, v102);
      uint64_t v103 = v6[7];
      BOOL v104 = &v33[v103];
      uint64_t v105 = &v34[v103];
      uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v106 - 8) + 40LL))(v104, v105, v106);
      v98(&v33[v6[8]], &v34[v6[8]], v97);
      uint64_t v107 = v6[9];
      uint64_t v108 = &v33[v107];
      uint64_t v109 = &v34[v107];
      uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v110 - 8) + 40LL))(v108, v109, v110);
      uint64_t v111 = v6[10];
      uint64_t v112 = &v33[v111];
      uint64_t v113 = &v34[v111];
      uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v114 - 8) + 40LL))(v112, v113, v114);
      goto LABEL_13;
    }

    _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_0( (uint64_t)v33,  type metadata accessor for DisambiguationItemWithDirectInvocationModel);
    goto LABEL_12;
  }

  if (v36)
  {
LABEL_12:
    uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
    memcpy(v33, v34, *(void *)(*(void *)(v59 - 8) + 64LL));
    goto LABEL_13;
  }

  uint64_t v37 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32LL))(v33, v34, v37);
  uint64_t v38 = v6[5];
  uint64_t v39 = &v33[v38];
  uint64_t v40 = &v34[v38];
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32LL);
  v42(v39, v40, v41);
  uint64_t v43 = v6[6];
  uint64_t v44 = &v33[v43];
  uint64_t v45 = &v34[v43];
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32LL))(v44, v45, v46);
  uint64_t v47 = v6[7];
  uint64_t v48 = &v33[v47];
  uint64_t v49 = &v34[v47];
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32LL))(v48, v49, v50);
  v42(&v33[v6[8]], &v34[v6[8]], v41);
  uint64_t v51 = v6[9];
  uint64_t v52 = &v33[v51];
  uint64_t v53 = &v34[v51];
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 32LL))(v52, v53, v54);
  uint64_t v55 = v6[10];
  uint64_t v56 = &v33[v55];
  uint64_t v57 = &v34[v55];
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 32LL))(v56, v57, v58);
  __swift_storeEnumTagSinglePayload((uint64_t)v33, 0LL, 1LL, (uint64_t)v6);
LABEL_13:
  uint64_t v60 = a3[6];
  uint64_t v61 = &a1[v60];
  uint64_t v62 = &a2[v60];
  uint64_t v64 = *(void *)v62;
  uint64_t v63 = *((void *)v62 + 1);
  *(void *)uint64_t v61 = v64;
  *((void *)v61 + 1) = v63;
  swift_bridgeObjectRelease();
  uint64_t v65 = a3[7];
  uint64_t v66 = &a1[v65];
  uint64_t v67 = &a2[v65];
  uint64_t v69 = *(void *)v67;
  uint64_t v68 = *((void *)v67 + 1);
  *(void *)uint64_t v66 = v69;
  *((void *)v66 + 1) = v68;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ForeignEmergencyCallDisambiguationModel( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1E9948);
}

void sub_1E9948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2)
  {
    OUTLINED_FUNCTION_9_3(a1, a2, v6);
  }

  else
  {
    OUTLINED_FUNCTION_77_14(*(void *)(a1 + *(int *)(a3 + 24) + 8));
    OUTLINED_FUNCTION_6();
  }

uint64_t storeEnumTagSinglePayload for ForeignEmergencyCallDisambiguationModel( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1E99B8);
}

void sub_1E99B8()
{
  if (v4)
  {
    OUTLINED_FUNCTION_32_6(v1, v0, v0, v3);
  }

  else
  {
    *(void *)(v1 + *(int *)(v2 + 24) + 8) = (v0 - 1);
    OUTLINED_FUNCTION_6();
  }

void type metadata completion function for ForeignEmergencyCallDisambiguationModel(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    void v4[2] = &unk_334E88;
    v4[3] = &unk_334E88;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
  }

void type metadata accessor for DisambiguationItemWithDirectInvocationModel?(uint64_t a1)
{
  if (!lazy cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?)
  {
    uint64_t v2 = type metadata accessor for DisambiguationItemWithDirectInvocationModel(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store( v3,  (unint64_t *)&lazy cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
    }
  }

void *initializeBufferWithCopyOfBuffer for LocalEmergencyCallDisambiguationModel( void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v21 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
    uint64_t v17 = a3[9];
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    uint64_t v18 = (void *)((char *)v4 + v17);
    uint64_t v19 = (void *)((char *)a2 + v17);
    uint64_t v20 = v19[1];
    void *v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain();
  }

  return v4;
}

uint64_t destroy for LocalEmergencyCallDisambiguationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for LocalEmergencyCallDisambiguationModel(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
  uint64_t v16 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LocalEmergencyCallDisambiguationModel(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24LL))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  uint64_t v14 = a3[9];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for LocalEmergencyCallDisambiguationModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
  uint64_t v14 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v1__swift_destroy_boxed_opaque_existential_1(v0 + 4) = *(_OWORD *)(a2 + v14);
  return a1;
}

void *assignWithTake for LocalEmergencyCallDisambiguationModel(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40LL))(v12, v13, v14);
  uint64_t v15 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LocalEmergencyCallDisambiguationModel( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1EA004);
}

void sub_1EA004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    OUTLINED_FUNCTION_77_14(*(void *)(a1 + 8));
    OUTLINED_FUNCTION_6();
  }

  else
  {
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_20_36();
    if (v7)
    {
      uint64_t v8 = v6;
      uint64_t v9 = *(int *)(a3 + 24);
    }

    else
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      uint64_t v9 = *(int *)(a3 + 28);
    }

    OUTLINED_FUNCTION_9_3(a1 + v9, a2, v8);
  }

uint64_t storeEnumTagSinglePayload for LocalEmergencyCallDisambiguationModel( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1EA084);
}

void sub_1EA084(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + 8) = (a2 - 1);
    OUTLINED_FUNCTION_6();
  }

  else
  {
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_168();
    if (v8)
    {
      uint64_t v9 = v7;
      uint64_t v10 = *(int *)(a4 + 24);
    }

    else
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      uint64_t v10 = *(int *)(a4 + 28);
    }

    OUTLINED_FUNCTION_32_6(a1 + v10, a2, a2, v9);
  }

void type metadata completion function for LocalEmergencyCallDisambiguationModel(uint64_t a1)
{
  v6[0] = &unk_334E88;
  v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t v2 = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v6[2] = *(void *)(v2 - 8) + 64LL;
    type metadata accessor for Loggable<String>( 319LL,  (unint64_t *)&lazy cache variable for type metadata for Loggable<String>,  (uint64_t)&type metadata for String);
    if (v5 <= 0x3F)
    {
      v6[3] = *(void *)(v4 - 8) + 64LL;
      v6[4] = &unk_334EC8;
      v6[5] = &unk_334E88;
      swift_initStructMetadata(a1, 256LL, 6LL, v6, a1 + 16);
    }
  }

uint64_t storeEnumTagSinglePayload for LocalEmergencyCallDisambiguationModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1EA204 + 4 * byte_334AE6[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1EA238 + 4 * byte_334AE1[v4]))();
}

uint64_t sub_1EA238(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EA240(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1EA248LL);
  }
  return result;
}

uint64_t sub_1EA254(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1EA25CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1EA260(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EA268(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for LocalEmergencyCallDisambiguationModel.CodingKeys()
{
  return &unk_40C908;
}

uint64_t storeEnumTagSinglePayload for ForeignEmergencyCallDisambiguationModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1EA2D0 + 4 * byte_334AF0[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1EA304 + 4 * byte_334AEB[v4]))();
}

uint64_t sub_1EA304(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EA30C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1EA314LL);
  }
  return result;
}

uint64_t sub_1EA320(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1EA328LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1EA32C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EA334(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ForeignEmergencyCallDisambiguationModel.CodingKeys()
{
  return &unk_40C998;
}

uint64_t storeEnumTagSinglePayload for DisambiguationItemWithDirectInvocationModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1EA39C + 4 * byte_334AFA[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1EA3D0 + 4 * byte_334AF5[v4]))();
}

uint64_t sub_1EA3D0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EA3D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1EA3E0LL);
  }
  return result;
}

uint64_t sub_1EA3EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1EA3F4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_1EA3F8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EA400(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for DisambiguationItemWithDirectInvocationModel.CodingKeys()
{
  return &unk_40CA28;
}

uint64_t storeEnumTagSinglePayload for DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1EA468 + 4 * byte_334B04[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1EA49C + 4 * byte_334AFF[v4]))();
}

uint64_t sub_1EA49C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EA4A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1EA4ACLL);
  }
  return result;
}

uint64_t sub_1EA4B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1EA4C0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1EA4C4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EA4CC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for DisambiguationItemWithDirectInvocationModel.ItemType.CodingKeys()
{
  return &unk_40CAB8;
}

uint64_t storeEnumTagSinglePayload for DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1EA528 + 4 * byte_334B09[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1EA548 + 4 * byte_334B0E[v4]))();
  }
}

_BYTE *sub_1EA528(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1EA548(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1EA550(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1EA558(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1EA560(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1EA568(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void *type metadata accessor for DisambiguationItemWithDirectInvocationModel.ItemType.PhoneNumberCodingKeys()
{
  return &unk_40CB48;
}

void *type metadata accessor for DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys()
{
  return &unk_40CB68;
}

uint64_t specialized ArraySlice.subscript.getter( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if ((a2 & 0x8000000000000000LL) == 0) {
    return swift_unknownObjectRetain(a3);
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_2_69()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 120) + 8LL))( *(void *)(v0 - 168),  *(void *)(v0 - 160));
}

uint64_t OUTLINED_FUNCTION_6_75(uint64_t a1)
{
  *__int16 v1 = a1;
  return type metadata accessor for DisambiguationItemWithDirectInvocationModel(0LL);
}

uint64_t OUTLINED_FUNCTION_7_79@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_15_57(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(v5, a2, v6, v5, a5);
}

uint64_t OUTLINED_FUNCTION_19_46()
{
  return swift_getWitnessTable(v0, v1);
}

uint64_t OUTLINED_FUNCTION_20_48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t OUTLINED_FUNCTION_24_36(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(v5, a2, *(void *)(v6 - 160), v5, a5);
}

uint64_t OUTLINED_FUNCTION_30_34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 32))(a1, v3, v2);
}

uint64_t OUTLINED_FUNCTION_31_34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t OUTLINED_FUNCTION_32_34()
{
  return type metadata accessor for DisambiguationItemWithDirectInvocationModel(0LL);
}

uint64_t OUTLINED_FUNCTION_33_43@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRetain(*(void *)(v1 + a1 + 8));
}

uint64_t OUTLINED_FUNCTION_35_29(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, v2, v3, v4);
}

  ;
}

void *OUTLINED_FUNCTION_37_31()
{
  return __swift_project_boxed_opaque_existential_1(v0, v0[3]);
}

uint64_t OUTLINED_FUNCTION_41_27()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_45_20(uint64_t a1)
{
  return Loggable.init(wrappedValue:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_46_24()
{
  return 0LL;
}

void OUTLINED_FUNCTION_48_18(void *a1)
{
}

uint64_t OUTLINED_FUNCTION_50_19()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_55_16(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_61_15(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t OUTLINED_FUNCTION_62_13(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

unint64_t OUTLINED_FUNCTION_68_19()
{
  *(_BYTE *)(v0 - 65) = 1;
  return lazy protocol witness table accessor for type DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys and conformance DisambiguationItemWithDirectInvocationModel.ItemType.EmergencySentinelPersonCodingKeys();
}

uint64_t OUTLINED_FUNCTION_70_16()
{
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v1 - 168), *(void *)(v1 - 160));
}

void OUTLINED_FUNCTION_72_17()
{
  *(_BYTE *)(v0 - 68) = 3;
}

void OUTLINED_FUNCTION_73_19()
{
  *(_BYTE *)(v0 - 67) = 2;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_77_14@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF) {
    LODWORD(a1) = -1;
  }
  return (a1 + 1);
}

uint64_t OUTLINED_FUNCTION_78_15( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return Loggable.init(wrappedValue:)(&a9, a2);
}

uint64_t OUTLINED_FUNCTION_81_14()
{
  return type metadata accessor for LocalEmergencyCallDisambiguationModel(0LL);
}

uint64_t OUTLINED_FUNCTION_82_12()
{
  return type metadata accessor for ForeignEmergencyCallDisambiguationModel(0LL);
}

uint64_t OUTLINED_FUNCTION_83_14(uint64_t a1, uint64_t a2)
{
  return Loggable.init(wrappedValue:)(v2 - 96, a2);
}

uint64_t static OpenFaceTimeIntent.Target.enumIdentifier.getter()
{
  return 0x746567726154LL;
}

uint64_t OpenFaceTimeIntent.Target.description.getter(char a1)
{
  BOOL v1 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v2 = 0x6143657461657263LL;
  }
  else {
    uint64_t v2 = 0x73746E65636572LL;
  }
  if (v1) {
    unint64_t v3 = 0xE700000000000000LL;
  }
  else {
    unint64_t v3 = 0xEA00000000006C6CLL;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  OUTLINED_FUNCTION_39();
  return 46LL;
}

uint64_t OpenFaceTimeIntent.Target.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x6143657461657263LL;
  }
  else {
    return 0x73746E65636572LL;
  }
}

PhoneCallFlowDelegatePlugin::OpenFaceTimeIntent::Target_optional __swiftcall OpenFaceTimeIntent.Target.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of OpenFaceTimeIntent.Target.init(rawValue:),  v2);
  OUTLINED_FUNCTION_39();
  if (v3 == 1) {
    v4.value = PhoneCallFlowDelegatePlugin_OpenFaceTimeIntent_Target_createCall;
  }
  else {
    v4.value = PhoneCallFlowDelegatePlugin_OpenFaceTimeIntent_Target_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

_UNKNOWN **static OpenFaceTimeIntent.Target.allCases.getter()
{
  return &outlined read-only object #0 of static OpenFaceTimeIntent.Target.allCases.getter;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance OpenFaceTimeIntent.Target( char *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance OpenFaceTimeIntent.Target()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance OpenFaceTimeIntent.Target(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance OpenFaceTimeIntent.Target(uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::OpenFaceTimeIntent::Target_optional protocol witness for RawRepresentable.init(rawValue:) in conformance OpenFaceTimeIntent.Target@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::OpenFaceTimeIntent::Target_optional *a2@<X8>)
{
  result.value = OpenFaceTimeIntent.Target.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance OpenFaceTimeIntent.Target@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = OpenFaceTimeIntent.Target.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OpenFaceTimeIntent.Target()
{
  return OpenFaceTimeIntent.Target.description.getter(*v0);
}

void protocol witness for static CaseIterable.allCases.getter in conformance OpenFaceTimeIntent.Target( void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static OpenFaceTimeIntent.Target.allCases.getter;
}

uint64_t protocol witness for static IntentValueTypeIdentifiable.lnValueType.getter in conformance OpenFaceTimeIntent.Target( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target();
  return static AppEnumRepresentation.lnValueType.getter(a1, v2);
}

uint64_t protocol witness for IntentValue.lnValue.getter in conformance OpenFaceTimeIntent.Target(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target();
  return AppEnumRepresentation.lnValue.getter(a1, v2);
}

uint64_t protocol witness for static IntentValue.canConvert(_:) in conformance OpenFaceTimeIntent.Target( uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target();
  return static IntentValueTypeIdentifiable.canConvert(_:)(a1, a2, v4);
}

uint64_t protocol witness for static IntentValue.from(_:context:) in conformance OpenFaceTimeIntent.Target( uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target();
  return static AppEnumRepresentation.from(_:context:)(a1, a2, a3, v6);
}

uint64_t protocol witness for static IntentValueSequenceElement.canConvertFrom(_:) in conformance OpenFaceTimeIntent.Target( uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target();
  return static IntentValueTypeIdentifiable.canConvertFrom(_:)(a1, a2, v4);
}

void *OpenFaceTimeIntent.bundleIdentifier.unsafeMutableAddressor()
{
  return &static OpenFaceTimeIntent.bundleIdentifier;
}

unint64_t static OpenFaceTimeIntent.bundleIdentifier.getter()
{
  return OUTLINED_FUNCTION_0_78();
}

void *OpenFaceTimeIntent.actionIdentifier.unsafeMutableAddressor()
{
  return &static OpenFaceTimeIntent.actionIdentifier;
}

unint64_t static OpenFaceTimeIntent.actionIdentifier.getter()
{
  return OUTLINED_FUNCTION_0_78();
}

uint64_t OpenFaceTimeIntent.target.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return v11;
}

uint64_t OpenFaceTimeIntent.target.setter(char a1)
{
  char v2 = a1 & 1;
  return IntentParameter.wrappedValue.setter(&v2);
}

void (*OpenFaceTimeIntent.target.modify(void *a1))(void *a1)
{
  char v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return SearchCallHistoryBinaryButtonModel.primaryText.modify;
}

uint64_t OpenFaceTimeIntent.$target.getter()
{
  return IntentParameter.projectedValue.getter();
}

unint64_t OpenFaceTimeIntent.description.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8._uint64_t countAndFlagsBits = OpenFaceTimeIntent.Target.description.getter(v13);
  String.append(_:)(v8);
  OUTLINED_FUNCTION_39();
  v9._uint64_t countAndFlagsBits = 41LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  return 0xD00000000000001ALL;
}

uint64_t property wrapper backing initializer of OpenFaceTimeIntent.target(char a1)
{
  char v3 = a1 & 1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<OpenFaceTimeIntent.Target>);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  return IntentParameter.init(wrappedValue:)(&v3);
}

unint64_t lazy protocol witness table accessor for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target()
{
  unint64_t result = lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target;
  if (!lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target)
  {
    unint64_t result = swift_getWitnessTable("-x\r", &type metadata for OpenFaceTimeIntent.Target);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target;
  if (!lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for OpenFaceTimeIntent.Target,  &type metadata for OpenFaceTimeIntent.Target);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target;
  if (!lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for OpenFaceTimeIntent.Target,  &type metadata for OpenFaceTimeIntent.Target);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target;
  if (!lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for OpenFaceTimeIntent.Target,  &type metadata for OpenFaceTimeIntent.Target);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target;
  if (!lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for OpenFaceTimeIntent.Target,  &type metadata for OpenFaceTimeIntent.Target);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target;
  if (!lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for OpenFaceTimeIntent.Target,  &type metadata for OpenFaceTimeIntent.Target);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target;
  if (!lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for OpenFaceTimeIntent.Target,  &type metadata for OpenFaceTimeIntent.Target);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target;
  if (!lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for OpenFaceTimeIntent.Target,  &type metadata for OpenFaceTimeIntent.Target);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target;
  if (!lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for OpenFaceTimeIntent.Target,  &type metadata for OpenFaceTimeIntent.Target);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OpenFaceTimeIntent.Target and conformance OpenFaceTimeIntent.Target);
  }

  return result;
}

void *associated type witness table accessor for RawRepresentable.RawValue : LosslessStringConvertible in OpenFaceTimeIntent.Target()
{
  return &protocol witness table for String;
}

unint64_t lazy protocol witness table accessor for type [OpenFaceTimeIntent.Target] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OpenFaceTimeIntent.Target] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OpenFaceTimeIntent.Target] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OpenFaceTimeIntent.Target]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [OpenFaceTimeIntent.Target] and conformance [A]);
  }

  return result;
}

unint64_t protocol witness for static AppIntentRepresentation.bundleIdentifier.getter in conformance OpenFaceTimeIntent()
{
  return 0xD000000000000012LL;
}

unint64_t protocol witness for static AppIntentRepresentation.actionIdentifier.getter in conformance OpenFaceTimeIntent()
{
  return 0xD000000000000012LL;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance OpenFaceTimeIntent( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return OpenFaceTimeIntent.description.getter(*v8, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1EB37C@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t result = OpenFaceTimeIntent.target.getter(*a1, a2, a3, a4, a5, a6, a7, a8);
  *a9 = result;
  return result;
}

uint64_t sub_1EB3A4(char *a1)
{
  return OpenFaceTimeIntent.target.setter(*a1);
}

ValueMetadata *type metadata accessor for OpenFaceTimeIntent()
{
  return &type metadata for OpenFaceTimeIntent;
}

uint64_t storeEnumTagSinglePayload for OpenFaceTimeIntent.Target(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1EB40C + 4 * byte_335505[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1EB440 + 4 * byte_335500[v4]))();
}

uint64_t sub_1EB440(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EB448(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1EB450LL);
  }
  return result;
}

uint64_t sub_1EB45C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1EB464LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1EB468(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EB470(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OpenFaceTimeIntent.Target()
{
  return &type metadata for OpenFaceTimeIntent.Target;
}

unint64_t OUTLINED_FUNCTION_0_78()
{
  return 0xD000000000000012LL;
}

void *OUTLINED_FUNCTION_1_72( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  return IntentParameter.wrappedValue.getter(&a13);
}

PhoneCallFlowDelegatePlugin::HangUpCallCATs::Properties_optional __swiftcall HangUpCallCATs.Properties.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of HangUpCallCATs.Properties.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return (PhoneCallFlowDelegatePlugin::HangUpCallCATs::Properties_optional)3;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::HangUpCallCATs::Properties_optional)v3;
  }
}

unint64_t HangUpCallCATs.Properties.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000018LL;
  if (a1)
  {
    if (a1 == 1) {
      return 0xD000000000000026LL;
    }
    else {
      return 0xD000000000000020LL;
    }
  }

  return result;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance HangUpCallCATs.Properties( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance HangUpCallCATs.Properties()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HangUpCallCATs.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance HangUpCallCATs.Properties(uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::HangUpCallCATs::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance HangUpCallCATs.Properties@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::HangUpCallCATs::Properties_optional *a2@<X8>)
{
  result.value = HangUpCallCATs.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance HangUpCallCATs.Properties@<X0>( unint64_t *a1@<X8>)
{
  unint64_t result = HangUpCallCATs.Properties.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t HangUpCallCATs.errorWithCode(completion:)()
{
  return OUTLINED_FUNCTION_13(24LL);
}

uint64_t HangUpCallCATs.errorWithCode()(uint64_t a1)
{
  unint64_t v3 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  return OUTLINED_FUNCTION_6_15(a1, 0xD000000000000018LL, 0x8000000000346090LL, (uint64_t)_swiftEmptyArrayStorage, v5);
}

uint64_t HangUpCallCATs.errorWithCode()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executeDialog(catId:parameters:));
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  return OUTLINED_FUNCTION_4_2(0xD000000000000018LL, 0x8000000000346090LL, (uint64_t)_swiftEmptyArrayStorage, v3);
}

{
  return OUTLINED_FUNCTION_14_6(24LL, 0x8000000000346090LL, (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t HangUpCallCATs.errorWithCodeNoCallToHangUp(completion:)()
{
  return OUTLINED_FUNCTION_13(38LL);
}

uint64_t HangUpCallCATs.errorWithCodeNoCallToHangUp()(uint64_t a1)
{
  unint64_t v3 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = protocol witness for Flow.execute() in conformance ContactNeedsValueGuardFlow<A>;
  return OUTLINED_FUNCTION_6_15(a1, 0xD000000000000026LL, 0x80000000003460B0LL, (uint64_t)_swiftEmptyArrayStorage, v5);
}

uint64_t HangUpCallCATs.errorWithCodeNoCallToHangUp()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executeDialog(catId:parameters:));
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return OUTLINED_FUNCTION_4_2(0xD000000000000026LL, 0x80000000003460B0LL, (uint64_t)_swiftEmptyArrayStorage, v3);
}

{
  return OUTLINED_FUNCTION_14_6(38LL, 0x80000000003460B0LL, (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t HangUpCallCATs.intentHandledResponse(completion:)()
{
  return OUTLINED_FUNCTION_13(32LL);
}

uint64_t HangUpCallCATs.intentHandledResponse()(uint64_t a1)
{
  unint64_t v3 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  return OUTLINED_FUNCTION_6_15(a1, 0xD000000000000020LL, 0x80000000003460E0LL, (uint64_t)_swiftEmptyArrayStorage, v5);
}

uint64_t HangUpCallCATs.intentHandledResponse()()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executeDialog(catId:parameters:));
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  return OUTLINED_FUNCTION_4_2(0xD000000000000020LL, 0x80000000003460E0LL, (uint64_t)_swiftEmptyArrayStorage, v3);
}

{
  return OUTLINED_FUNCTION_14_6(32LL, 0x80000000003460E0LL, (uint64_t)_swiftEmptyArrayStorage);
}

unint64_t lazy protocol witness table accessor for type HangUpCallCATs.Properties and conformance HangUpCallCATs.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type HangUpCallCATs.Properties and conformance HangUpCallCATs.Properties;
  if (!lazy protocol witness table cache variable for type HangUpCallCATs.Properties and conformance HangUpCallCATs.Properties)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for HangUpCallCATs.Properties,  &type metadata for HangUpCallCATs.Properties);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type HangUpCallCATs.Properties and conformance HangUpCallCATs.Properties);
  }

  return result;
}

uint64_t type metadata accessor for HangUpCallCATs(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for HangUpCallCATs;
  if (!type metadata singleton initialization cache for HangUpCallCATs) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HangUpCallCATs);
  }
  return result;
}

uint64_t type metadata completion function for HangUpCallCATs(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for HangUpCallCATs);
}

uint64_t ObjC metadata update function for HangUpCallCATs()
{
  return type metadata accessor for HangUpCallCATs(0LL);
}

uint64_t storeEnumTagSinglePayload for HangUpCallCATs.Properties(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1EBA58 + 4 * byte_3357F5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1EBA8C + 4 * asc_3357F0[v4]))();
}

uint64_t sub_1EBA8C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EBA94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1EBA9CLL);
  }
  return result;
}

uint64_t sub_1EBAA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1EBAB0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1EBAB4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1EBABC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HangUpCallCATs.Properties()
{
  return &type metadata for HangUpCallCATs.Properties;
}

uint64_t LazyContainer._value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v5 = (uint64_t)*v2;
  uint64_t v6 = *((void *)*v2 + 10);
  OUTLINED_FUNCTION_9_64();
  OUTLINED_FUNCTION_6_76();
  __chkstk_darwin();
  Swift::String v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  uint64_t v10 = &v14[-v9];
  uint64_t v11 = (uint64_t)v2 + *(void *)(v5 + 112);
  OUTLINED_FUNCTION_25_0(v11, (uint64_t)v15, 0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v10, v11, v1);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1LL, v6) != 1) {
    return OUTLINED_FUNCTION_56_4( a1,  (uint64_t)v10,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
  }
  uint64_t v12 = (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v10, v1);
  v2[3](v12);
  OUTLINED_FUNCTION_56_4( (uint64_t)v8,  a1,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
  OUTLINED_FUNCTION_3_91((uint64_t)v8);
  OUTLINED_FUNCTION_25_0(v11, (uint64_t)v14, 33LL);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v3 + 40))(v11, v8, v1);
  return swift_endAccess(v14);
}

uint64_t LazyContainer._value.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80LL);
  uint64_t v4 = OUTLINED_FUNCTION_9_64();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = &v11[-v6 - 8];
  OUTLINED_FUNCTION_56_4( (uint64_t)&v11[-v6 - 8],  a1,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  OUTLINED_FUNCTION_3_91((uint64_t)v7);
  uint64_t v8 = v1 + *(void *)(*(void *)v1 + 112LL);
  OUTLINED_FUNCTION_25_0(v8, (uint64_t)v11, 33LL);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 40))(v8, v7, v4);
  return swift_endAccess(v11);
}

void LazyContainer.__allocating_init(load:)(uint64_t a1, uint64_t a2)
{
}

void *LazyContainer.init(load:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v9 = v8 - v7;
  type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v12 = v11 - v10;
  type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v15 = v14 - v13;
  type metadata accessor for OS_dispatch_queue();
  uint64_t v27 = 0x5F797A614CLL;
  unint64_t v28 = 0xE500000000000000LL;
  uint64_t v16 = *(void *)(v4 + 80);
  uint64_t v26 = v16;
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v16);
  v18._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v26, MetatypeMetadata);
  String.append(_:)(v18);
  uint64_t v19 = swift_bridgeObjectRelease();
  uint64_t v20 = v27;
  unint64_t v21 = v28;
  uint64_t v22 = static OS_dispatch_queue.Attributes.concurrent.getter(v19);
  static DispatchQoS.unspecified.getter(v22);
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))( v9,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v5);
  void v3[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v20, v21, v12, v15, v9, 0LL);
  *((_BYTE *)v3 + 40) = 0;
  __swift_storeEnumTagSinglePayload((uint64_t)v3 + *(void *)(*v3 + 112LL), 1LL, 1LL, v16);
  v3[3] = a1;
  v3[4] = a2;
  return v3;
}

void LazyContainer.lazyInitialize()()
{
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(type metadata accessor for DispatchWorkItemFlags(0LL) - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_32();
  static Signpost.begin(_:)();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_76();
  OS_dispatch_queue.sync<A>(flags:execute:)( v1,  partial apply for closure #1 in LazyContainer.lazyInitialize(),  v0,  *(void *)(v2 + 80));
  OUTLINED_FUNCTION_41_8(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  Signpost.OpenSignpost.end()();
  swift_release(v5);
  OUTLINED_FUNCTION_7_5();
}

void LazyContainer.get()(uint64_t a1@<X8>)
{
  else {
    LazyContainer.lazyInitialize()();
  }
}

void partial apply for closure #1 in LazyContainer.get()(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 40);
}

Swift::Void __swiftcall LazyContainer.reload()()
{
  uint64_t v4 = v3 - v2;
  uint64_t v5 = *(void *)(type metadata accessor for DispatchWorkItemFlags(0LL) - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_5_76();
  aBlock[4] = partial apply for closure #1 in LazyContainer.reload();
  uint64_t v9 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_3;
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = swift_retain();
  static DispatchQoS.unspecified.getter(v7);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v4);
  _Block_release(v6);
  (*(void (**)(uint64_t))(v1 + 8))(v4);
  OUTLINED_FUNCTION_41_8(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  swift_release(v9);
  OUTLINED_FUNCTION_7_5();
}

uint64_t closure #1 in LazyContainer.reload()(uint64_t a1)
{
  uint64_t result = __chkstk_darwin();
  uint64_t v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(_BYTE *)(result + 40) == 1)
  {
    (*(void (**)(void))(a1 + 24))();
    return LazyContainer._value.setter((uint64_t)v4);
  }

  return result;
}

uint64_t partial apply for closure #1 in LazyContainer.reload()()
{
  return closure #1 in LazyContainer.reload()(v0);
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_2(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void LazyContainer.deinit()
{
  uint64_t v1 = *v0;

  swift_release(v0[4]);
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 112);
  uint64_t v3 = type metadata accessor for Optional(0LL, *(void *)(v1 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  OUTLINED_FUNCTION_6();
}

uint64_t LazyContainer.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata completion function for LazyContainer(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for () + 64;
  void v4[2] = &unk_335910;
  uint64_t result = type metadata accessor for Optional(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 4LL, v4, a1 + 88);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for LazyContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyContainer);
}

uint64_t partial apply for closure #1 in LazyContainer.lazyInitialize()@<X0>(uint64_t a1@<X8>)
{
  *(_BYTE *)(v1 + 40) = 1;
  return LazyContainer._value.getter(a1);
}

uint64_t OUTLINED_FUNCTION_3_91(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 0LL, 1LL, v1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_9_64()
{
  return type metadata accessor for Optional(0LL, v0);
}

uint64_t *EligibleAppFinder.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  return &static EligibleAppFinder.instance;
}

uint64_t static EligibleAppFinder.instance.getter()
{
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  return swift_retain();
}

uint64_t EligibleAppFinder.().init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.userInteractive.getter(v15);
  uint64_t v16 = _swiftEmptyArrayStorage;
  uint64_t v11 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel( (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  uint64_t v13 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A],  &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v6, v11);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v2);
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001ELL,  0x8000000000346C70LL,  v10,  v8,  v5,  0LL);
  *(void *)(v1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = &_swiftEmptyDictionarySingleton;
  return v1;
}

uint64_t closure #1 in EligibleAppFinder.prefetchApps(intentTypeNames:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = (void *)(a2 + 24);
    uint64_t v32 = swift_bridgeObjectRetain(result);
    uint64_t v4 = (unint64_t *)(v32 + 40);
    while (1)
    {
      uint64_t v33 = v2;
      uint64_t v6 = *(v4 - 1);
      unint64_t v5 = *v4;
      uint64_t v7 = one-time initialization token for siriPhone;
      swift_bridgeObjectRetain(*v4);
      if (v7 != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v8 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
      uint64_t v9 = swift_bridgeObjectRetain_n(v5, 2LL);
      uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
      os_log_type_t v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = swift_slowAlloc(12LL, -1LL);
        uint64_t v13 = swift_slowAlloc(32LL, -1LL);
        v35[0] = v13;
        *(_DWORD *)uint64_t v12 = 136315138;
        swift_bridgeObjectRetain(v5);
        *(void *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, v35);
        swift_bridgeObjectRelease_n(v5, 3LL);
        _os_log_impl(&dword_0, v10, v11, "#EligibleAppFinder prefetching apps for %s", (uint8_t *)v12, 0xCu);
        swift_arrayDestroy(v13, 1LL);
        swift_slowDealloc(v13, -1LL, -1LL);
        swift_slowDealloc(v12, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v5, 2LL);
      }

      uint64_t v14 = EligibleAppFinder.makeTask(intentTypeName:)(v6, v5);
      swift_beginAccess(v3, v35, 33LL, 0LL);
      swift_retain(v14);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
      uint64_t v16 = *v3;
      uint64_t v34 = (void *)*v3;
      *uint64_t v3 = 0x8000000000000000LL;
      unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v5);
      uint64_t v19 = *(void *)(v16 + 16);
      BOOL v20 = (v18 & 1) == 0;
      Swift::Int v21 = v19 + v20;
      if (__OFADD__(v19, v20)) {
        break;
      }
      unint64_t v22 = v17;
      char v23 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Task<[App], Never>>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v21))
      {
        unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v5);
        if ((v23 & 1) != (v25 & 1)) {
          goto LABEL_21;
        }
        unint64_t v22 = v24;
      }

      if ((v23 & 1) != 0)
      {
        uint64_t v26 = v34[7];
        swift_release(*(void *)(v26 + 8 * v22));
        *(void *)(v26 + 8 * v2__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v14;
      }

      else
      {
        v34[(v22 >> 6) + 8] |= 1LL << v22;
        uint64_t v27 = (uint64_t *)(v34[6] + 16 * v22);
        *uint64_t v27 = v6;
        v27[1] = v5;
        *(void *)(v34[7] + 8 * v2__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v14;
        uint64_t v28 = v34[2];
        BOOL v29 = __OFADD__(v28, 1LL);
        uint64_t v30 = v28 + 1;
        if (v29) {
          goto LABEL_20;
        }
        v34[2] = v30;
        swift_bridgeObjectRetain(v5);
      }

      v4 += 2;
      uint64_t v31 = *v3;
      *uint64_t v3 = v34;
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v31);
      swift_endAccess(v35);
      swift_release(v14);
      uint64_t v2 = v33 - 1;
      if (v33 == 1) {
        return swift_bridgeObjectRelease(v32);
      }
    }

    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }

  return result;
}

uint64_t sub_1EC8F0()
{
  uint64_t v1 = OUTLINED_FUNCTION_34_3();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t partial apply for closure #1 in EligibleAppFinder.prefetchApps(intentTypeNames:)()
{
  return closure #1 in EligibleAppFinder.prefetchApps(intentTypeNames:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_3(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t EligibleAppFinder.findEligibleApps(intentTypeName:)(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)EligibleAppFinder.findEligibleApps(intentTypeName:));
}

uint64_t EligibleAppFinder.findEligibleApps(intentTypeName:)()
{
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  *(void *)(v0 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v2;
  *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v3;
  *(_WORD *)(v0 + 40) = v4;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = __swift_project_value_buffer(v6, (uint64_t)static Logger.siriPhone);
  uint64_t v7 = OUTLINED_FUNCTION_11(v5);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v10 = static os_log_type_t.debug.getter(v8, v9);
  BOOL v11 = os_log_type_enabled(v8, v10);
  unint64_t v12 = *(void *)(v0 + 96);
  if (v11)
  {
    uint64_t v13 = *(void *)(v0 + 88);
    uint64_t v14 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v15 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v27 = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v14 + 4);
    OUTLINED_FUNCTION_32_10(v12);
    _os_log_impl(&dword_0, v8, v10, "#EligibleAppFinder finding apps for %s ..", v14, 0xCu);
    swift_arrayDestroy(v15, 1LL);
    OUTLINED_FUNCTION_0_2(v15);
    OUTLINED_FUNCTION_0_2((uint64_t)v14);
  }

  else
  {
    OUTLINED_FUNCTION_7_4(*(void *)(v0 + 96));
  }

  uint64_t v17 = *(void *)(v0 + 96);
  uint64_t v16 = *(void *)(v0 + 104);
  uint64_t v18 = *(void *)(v0 + 88);
  uint64_t v19 = *(void **)(v16 + 16);
  BOOL v20 = (void *)swift_task_alloc(48LL);
  void v20[2] = v16;
  v20[3] = v18;
  v20[4] = v17;
  id v21 = v19;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<[App], Never>);
  OS_dispatch_queue.sync<A>(execute:)( (void *)(v0 + 48),  partial apply for closure #1 in EligibleAppFinder.findEligibleApps(intentTypeName:),  v20,  v22);

  swift_task_dealloc(v20);
  uint64_t v23 = *(void *)(v0 + 48);
  *(void *)(v0 + 120) = v23;
  unint64_t v24 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  *(void *)(v0 + 128) = v24;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [App]);
  *unint64_t v24 = v0;
  v24[1] = EligibleAppFinder.findEligibleApps(intentTypeName:);
  return Task<>.value.getter(v0 + 56, v23, v25);
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 128LL));
  return OUTLINED_FUNCTION_5_7();
}

void EligibleAppFinder.findEligibleApps(intentTypeName:)()
{
  uint64_t v1 = *(void *)(v0 + 56);
  OUTLINED_FUNCTION_11(*(void *)(v0 + 96));
  uint64_t v2 = OUTLINED_FUNCTION_11(v1);
  uint64_t v3 = (void *)Logger.logObject.getter(v2);
  os_log_type_t v5 = static os_log_type_t.debug.getter(v3, v4);
  if (!os_log_type_enabled((os_log_t)v3, v5))
  {
    OUTLINED_FUNCTION_7_4(*(void *)(v0 + 96));
    OUTLINED_FUNCTION_7_4(v1);
LABEL_16:

    uint64_t v25 = *(void *)(v0 + 120);
    uint64_t v26 = *(void *)(v0 + 16);
    Signpost.OpenSignpost.end()();
    swift_release(v25);
    swift_release(v26);
    (*(void (**)(uint64_t))(v0 + 8))(v1);
    return;
  }

  uint64_t v7 = *(void *)(v0 + 88);
  unint64_t v6 = *(void *)(v0 + 96);
  uint64_t v8 = OUTLINED_FUNCTION_7_0(22LL);
  uint64_t v9 = OUTLINED_FUNCTION_7_0(64LL);
  uint64_t v33 = v9;
  *(_DWORD *)uint64_t v8 = 136315394;
  OUTLINED_FUNCTION_6_3();
  *(void *)(v0 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, &v33);
  uint64_t v32 = v0 + 72;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v8 + 4);
  OUTLINED_FUNCTION_32_10(v6);
  *(_WORD *)(v8 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v27 = v1;
    }
    else {
      uint64_t v27 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_8_1();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v10 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL));
  }

  BOOL v11 = _swiftEmptyArrayStorage;
  if (!v10)
  {
LABEL_15:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v22 = Array.description.getter(v11, v21);
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v32, v0 + 80, v8 + 14);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_7_4(v1);
    _os_log_impl(&dword_0, (os_log_t)v3, v5, "#EligibleAppFinder found apps for %s -> %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2LL);
    OUTLINED_FUNCTION_0_2(v9);
    OUTLINED_FUNCTION_0_2(v8);
    goto LABEL_16;
  }

  uint64_t v34 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v10 & 0x8000000000000000LL) == 0)
  {
    uint64_t v28 = v0;
    uint64_t v29 = v9;
    os_log_type_t v30 = v5;
    uint64_t v31 = v8;
    uint64_t v12 = 0LL;
    BOOL v11 = v34;
    unint64_t v13 = v1 & 0xC000000000000001LL;
    uint64_t v14 = v1;
    do
    {
      if (v13)
      {
        uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v1);
      }

      else
      {
        uint64_t v15 = *(void *)(v1 + 8 * v12 + 32);
        swift_retain();
      }

      uint64_t v16 = App.appIdentifier.getter();
      uint64_t v18 = v17;
      swift_release(v15);
      uint64_t v34 = v11;
      unint64_t v19 = v11[2];
      if (v19 >= v11[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        BOOL v11 = v34;
      }

      ++v12;
      v11[2] = v19 + 1;
      BOOL v20 = &v11[2 * v19];
      v20[4] = v16;
      v20[5] = v18;
      uint64_t v1 = v14;
    }

    while (v10 != v12);
    uint64_t v0 = v28;
    uint64_t v9 = v29;
    uint64_t v8 = v31;
    os_log_type_t v5 = v30;
    goto LABEL_15;
  }

  __break(1u);
}

uint64_t closure #1 in EligibleAppFinder.findEligibleApps(intentTypeName:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = a1 + 24;
  swift_beginAccess(a1 + 24, v15, 0LL, 0LL);
  uint64_t v9 = *(void *)(a1 + 24);
  if (!*(void *)(v9 + 16)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v12 = EligibleAppFinder.makeTask(intentTypeName:)(a2, a3);
    swift_beginAccess(v8, v14, 33LL, 0LL);
    swift_bridgeObjectRetain();
    swift_retain();
    specialized Dictionary._Variant.setValue(_:forKey:)();
    swift_endAccess(v14);
    goto LABEL_6;
  }

  uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v10);
  swift_retain();
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t result = swift_bridgeObjectRelease();
  *a4 = v12;
  return result;
}

uint64_t EligibleAppFinder.findEligibleApps(intentTypeNames:)(uint64_t a1)
{
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a1;
  *(void *)(v2 + 40) = v1;
  return OUTLINED_FUNCTION_33_0((uint64_t)EligibleAppFinder.findEligibleApps(intentTypeNames:));
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = *(void *)(*(void *)v1 + 72LL);
  *(void *)(*(void *)v1 + 8OUTLINED_FUNCTION_25_0( v0 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent7Builder_callGroups,  (uint64_t)v1, 0LL) = a1;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_62();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t EligibleAppFinder.findEligibleApps(intentTypeNames:)()
{
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    uint64_t v1 = specialized Set.init(_nonEmptyArrayLiteral:)((unint64_t)_swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v1 = &_swiftEmptySetSingleton;
  }

  uint64_t v2 = *(void **)(v0 + 32);
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  uint64_t v3 = v2[2];
  *(void *)(v0 + 48) = v3;
  if (v3)
  {
    *(void *)(v0 + 56) = 0LL;
    uint64_t v4 = v2[5];
    *(void *)(v0 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v4;
    uint64_t v5 = v2[4];
    uint64_t v6 = dword_438E24;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_8_1();
    uint64_t v7 = (void *)swift_task_alloc(v6);
    *(void *)(v0 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v7;
    *uint64_t v7 = v0;
    v7[1] = EligibleAppFinder.findEligibleApps(intentTypeNames:);
    return EligibleAppFinder.findEligibleApps(intentTypeName:)(v5, v4);
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_6_3();
    unint64_t v10 = (unint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v9);
    OUTLINED_FUNCTION_62();
    OUTLINED_FUNCTION_8_1();
    if ((v10 & 0x8000000000000000LL) != 0 || (uint64_t v11 = v10, (v10 & 0x4000000000000000LL) != 0))
    {
      specialized _copyCollectionToContiguousArray<A>(_:)(v10);
      uint64_t v11 = v12;
      OUTLINED_FUNCTION_22();
    }

    uint64_t v13 = v11;
    specialized MutableCollection<>.sort(by:)(&v13);
    OUTLINED_FUNCTION_22();
    OUTLINED_FUNCTION_62();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v13);
  }

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v26;
  uint64_t v27;
  v0[3] = _swiftEmptyArrayStorage;
  uint64_t v1 = (unint64_t)(v0 + 3);
  uint64_t v2 = v0[10];
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0) {
      uint64_t v14 = v0[10];
    }
    else {
      uint64_t v14 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_6_3();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v14);
    OUTLINED_FUNCTION_62();
    if (v3) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  uint64_t v3 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
  if (!v3) {
    goto LABEL_17;
  }
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v4 = 0LL;
  uint64_t v5 = v2 & 0xC000000000000001LL;
  uint64_t v6 = v0[10] + 32LL;
  do
  {
    if (v5)
    {
      uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v0[10]);
    }

    else
    {
      uint64_t v7 = *(void *)(v6 + 8 * v4);
      swift_retain();
    }

    App.appIdentifier.getter();
    uint64_t v9 = v8;
    unint64_t v10 = swift_bridgeObjectRelease();
    if (v9)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      uint64_t v11 = *(void *)(*(void *)v1 + 16LL);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      uint64_t v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v7);
      specialized ContiguousArray._endMutation()(v12);
    }

    else
    {
      swift_release(v7);
    }

    ++v4;
  }

  while (v3 != v4);
  swift_bridgeObjectRelease();
  uint64_t v13 = (void *)v0[3];
LABEL_18:
  uint64_t v15 = v0[6];
  uint64_t v16 = v0[7] + 1LL;
  specialized Set.formUnion<A>(_:)((uint64_t)v13);
  if (v16 == v15)
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = OUTLINED_FUNCTION_6_3();
    uint64_t v1 = (unint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v17);
    OUTLINED_FUNCTION_62();
    OUTLINED_FUNCTION_8_1();
    if ((v1 & 0x8000000000000000LL) == 0)
    {
      uint64_t v18 = v1;
      if ((v1 & 0x4000000000000000LL) == 0)
      {
LABEL_21:
        uint64_t v27 = v18;
        specialized MutableCollection<>.sort(by:)(&v27);
        OUTLINED_FUNCTION_22();
        OUTLINED_FUNCTION_62();
        OUTLINED_FUNCTION_14_52();
        __asm { BR              X1 }
      }
    }

uint64_t specialized Set.formUnion<A>(_:)(uint64_t result)
{
  uint64_t v1 = result;
  if ((unint64_t)result >> 62)
  {
    if (result >= 0) {
      result &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(result);
    uint64_t v2 = result;
    if (!result) {
      return swift_bridgeObjectRelease();
    }
  }

  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFF8LL));
    if (!v2) {
      return swift_bridgeObjectRelease();
    }
  }

  if (v2 >= 1)
  {
    for (uint64_t i = 0LL; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
      }

      else
      {
        uint64_t v4 = *(void *)(v1 + 8 * i + 32);
        swift_retain();
      }

      specialized Set._Variant.insert(_:)(&v5, v4);
      swift_release(v5);
    }

    return swift_bridgeObjectRelease();
  }

  __break(1u);
  return result;
}

uint64_t closure #1 in EligibleAppFinder.makeTask(intentTypeName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  return swift_task_switch(closure #1 in EligibleAppFinder.makeTask(intentTypeName:), 0LL, 0LL);
}

uint64_t closure #1 in EligibleAppFinder.makeTask(intentTypeName:)()
{
  *(void *)(v0 + 10__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v1;
  *(void *)(v0 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v2;
  *(void *)(v0 + 120) = v3;
  *(_WORD *)(v0 + 160) = v4;
  specialized Set.init(_nonEmptyArrayLiteral:)();
  uint64_t v6 = v5;
  *(void *)(v0 + 128) = v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject(v7, v0 + 16);
  *(_OWORD *)(inited + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D870;
  *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = static String._unconditionallyBridgeFromObjectiveC(_:)(INIntentsServiceExtensionPointName);
  *(void *)(inited + 40) = v9;
  specialized Set.init(_nonEmptyArrayLiteral:)();
  uint64_t v11 = v10;
  *(void *)(v0 + 136) = v10;
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to static AppFinder.listApps(intentID:siriAuthorizationRestriction:extensionPointIdentifierRestriction:)[1]);
  *(void *)(v0 + 14__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v12;
  *uint64_t v12 = v0;
  v12[1] = closure #1 in EligibleAppFinder.makeTask(intentTypeName:);
  return static AppFinder.listApps(intentID:siriAuthorizationRestriction:extensionPointIdentifierRestriction:)( *(void *)(v0 + 88),  *(void *)(v0 + 96),  v6,  v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_s *v5;
  uint64_t v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  Signpost.OpenSignpost.end()();
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v3, (uint64_t)static Logger.siriPhone);
  OUTLINED_FUNCTION_11(v2);
  __int16 v4 = OUTLINED_FUNCTION_11(v1);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  uint64_t v7 = static os_log_type_t.debug.getter(v5, v6);
  uint64_t v8 = os_log_type_enabled(v5, v7);
  uint64_t v9 = *(void *)(v0 + 152);
  uint64_t v11 = *(void *)(v0 + 96);
  uint64_t v10 = *(void *)(v0 + 104);
  if (v8)
  {
    uint64_t v22 = *(void *)(v0 + 104);
    uint64_t v12 = *(void *)(v0 + 88);
    uint64_t v13 = OUTLINED_FUNCTION_7_0(22LL);
    uint64_t v14 = OUTLINED_FUNCTION_7_0(64LL);
    unint64_t v23 = v14;
    *(_DWORD *)uint64_t v13 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v13 + 4);
    OUTLINED_FUNCTION_32_10(v11);
    *(_WORD *)(v13 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    uint64_t v15 = type metadata accessor for App(0LL);
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v17 = Array.description.getter(v16, v15);
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v13 + 14);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_7_4(v9);
    _os_log_impl(&dword_0, v5, v7, "#EligibleAppFinder retrieved apps for %s -> %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2LL);
    OUTLINED_FUNCTION_0_2(v14);
    OUTLINED_FUNCTION_0_2(v13);
    BOOL v20 = v22;
  }

  else
  {
    OUTLINED_FUNCTION_7_4(*(void *)(v0 + 96));
    OUTLINED_FUNCTION_7_4(v9);
    BOOL v20 = v10;
  }

  swift_release(v20);

  **(void **)(v0 + 80) = *(void *)(v0 + 152);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in EligibleAppFinder.makeTask(intentTypeName:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144LL);
  *(void *)(*(void *)v1 + 152LL) = a1;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_62();
  swift_bridgeObjectRelease();
  return swift_task_switch(closure #1 in EligibleAppFinder.makeTask(intentTypeName:), 0LL, 0LL);
}

uint64_t EligibleAppFinder.__deallocating_deinit()
{
  uint64_t v0 = OUTLINED_FUNCTION_34_3();
  return swift_deallocClassInstance(v0, v1, v2);
}

uint64_t protocol witness for PrefetchableAppFinding.findEligibleApps(intentTypeNames:) in conformance EligibleAppFinder( uint64_t a1)
{
  __int16 v4 = *(int **)(**(void **)v1 + 168LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.onAsync(input:) in conformance ContactNeedsValueGuardFlow<A1>;
  return v7(a1);
}

LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    __break(1u);
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
    return;
  }

  uint64_t v122 = v5;
  uint64_t v8 = 0LL;
  uint64_t v9 = *a1;
  uint64_t v120 = *a1 - 8;
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  uint64_t v125 = v3;
  uint64_t v128 = *a1;
  while (1)
  {
    uint64_t v11 = v8++;
    uint64_t v124 = v11;
    if (v8 < v3)
    {
      uint64_t v12 = v10;
      uint64_t v13 = *(void *)(v9 + 8 * v8);
      uint64_t v14 = *(void *)(v9 + 8 * v11);
      swift_retain();
      swift_retain();
      uint64_t v15 = App.appIdentifier.getter();
      if (v16) {
        uint64_t v17 = v15;
      }
      else {
        uint64_t v17 = 0LL;
      }
      if (v16) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = 0xE000000000000000LL;
      }
      unint64_t v19 = App.appIdentifier.getter();
      if (v20)
      {
        uint64_t v21 = v20;
      }

      else
      {
        unint64_t v19 = 0LL;
        uint64_t v21 = 0xE000000000000000LL;
      }

      if (v19 == v17 && v21 == v18) {
        unint64_t v23 = 0;
      }
      else {
        unint64_t v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v17, v18, 1LL);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release(v13);
      swift_release(v14);
      uint64_t v8 = v11 + 2;
      uint64_t v9 = v128;
      if (v11 + 2 < v125)
      {
        while (1)
        {
          unint64_t v24 = v9 + 8 * v11;
          uint64_t v26 = *(void *)(v24 + 8);
          uint64_t v25 = *(void *)(v24 + 16);
          swift_retain();
          swift_retain();
          uint64_t v27 = App.appIdentifier.getter();
          uint64_t v29 = v28 ? v27 : 0LL;
          os_log_type_t v30 = v28 ? v28 : 0xE000000000000000LL;
          uint64_t v31 = App.appIdentifier.getter();
          if (v32)
          {
            uint64_t v33 = v32;
          }

          else
          {
            uint64_t v31 = 0LL;
            uint64_t v33 = 0xE000000000000000LL;
          }

          uint64_t v34 = v31 == v29 && v33 == v30;
          int v35 = v34 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v29, v30, 1LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release(v25);
          swift_release(v26);
          if (((v23 ^ v35) & 1) != 0) {
            break;
          }
          int v36 = v11 + 3;
          ++v11;
          uint64_t v9 = v128;
          if (v36 >= v125)
          {
            uint64_t v8 = v125;
            goto LABEL_40;
          }
        }

        uint64_t v8 = v11 + 2;
        uint64_t v9 = v128;
      }

LABEL_114:
    if ((v86 & 1) != 0) {
      goto LABEL_164;
    }
    uint64_t v94 = &v61[16 * v63];
    uint64_t v96 = *(void *)v94;
    uint64_t v95 = *((void *)v94 + 1);
    uint64_t v74 = __OFSUB__(v95, v96);
    uint64_t v97 = v95 - v96;
    if (v74) {
      goto LABEL_166;
    }
    if (v97 < v85) {
      goto LABEL_131;
    }
LABEL_122:
    uint64_t v102 = v63 - 1;
    if (v63 - 1 >= v60)
    {
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
      goto LABEL_169;
    }

    if (!v9) {
      goto LABEL_181;
    }
    uint64_t v103 = &v61[16 * v102];
    BOOL v104 = *(void *)v103;
    uint64_t v105 = &v61[16 * v63];
    uint64_t v106 = *((void *)v105 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)( (char *)(v9 + 8LL * *(void *)v103),  (char *)(v9 + 8LL * *(void *)v105),  v9 + 8 * v106,  v127);
    if (v1) {
      break;
    }
    if (v106 < v104) {
      goto LABEL_155;
    }
    if (v63 > *((void *)v10 + 2)) {
      goto LABEL_156;
    }
    *(void *)uint64_t v103 = v104;
    *(void *)&v61[16 * v102 + 8] = v106;
    uint64_t v107 = *((void *)v10 + 2);
    if (v63 >= v107) {
      goto LABEL_157;
    }
    uint64_t v60 = v107 - 1;
    memmove(&v61[16 * v63], v105 + 16, 16 * (v107 - 1 - v63));
    *((void *)v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v107 - 1;
    uint64_t v9 = v128;
    if (v107 <= 2) {
      goto LABEL_131;
    }
  }

  uint64_t v3 = v125;
LABEL_137:
  uint64_t v109 = swift_bridgeObjectRelease();
  if (v3 < -1)
  {
    __break(1u);
    goto LABEL_139;
  }

LABEL_152:
  *(void *)((char *)&dword_10 + (v129 & 0xFFFFFFFFFFFFF8LL)) = 0LL;
  specialized Array._endMutation()(v109, v110, v111, v112);
  swift_bridgeObjectRelease();
}

    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
    goto LABEL_161;
  }

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v21 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v23 = *a4;
    uint64_t v5 = (void *)(*a4 + 8 * a3 - 8);
    while (2)
    {
      uint64_t v6 = *(void *)(v23 + 8 * v4);
      uint64_t v7 = v21;
      uint64_t v22 = v5;
      while (1)
      {
        uint64_t v8 = *v5;
        swift_retain(v6);
        uint64_t v9 = swift_retain(v8);
        uint64_t v10 = App.appIdentifier.getter(v9);
        uint64_t v12 = v11 ? v10 : 0LL;
        unint64_t v13 = v11 ? v11 : 0xE000000000000000LL;
        uint64_t v14 = App.appIdentifier.getter(v10);
        if (v15)
        {
          unint64_t v16 = v15;
        }

        else
        {
          uint64_t v14 = 0LL;
          unint64_t v16 = 0xE000000000000000LL;
        }

        if (v14 == v12 && v16 == v13) {
          break;
        }
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v12, v13, 1LL);
        swift_release(v6);
        swift_release(v8);
        swift_bridgeObjectRelease(v13);
        uint64_t result = swift_bridgeObjectRelease(v16);
        if ((v18 & 1) != 0)
        {
          if (!v23)
          {
            __break(1u);
            return result;
          }

          uint64_t v19 = *v5;
          uint64_t v6 = v5[1];
          *uint64_t v5 = v6;
          v5[1] = v19;
          --v5;
          if (v4 != ++v7) {
            continue;
          }
        }

        goto LABEL_22;
      }

      swift_release(v6);
      swift_release(v8);
      uint64_t result = swift_bridgeObjectRelease_n(v13, 2LL);
LABEL_22:
      ++v4;
      uint64_t v5 = v22 + 1;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v18 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 8 * a3 - 8;
    while (2)
    {
      uint64_t v7 = *(void *)(v5 + 8 * v4);
      uint64_t v8 = v18;
      uint64_t v9 = (uint64_t *)v6;
      do
      {
        uint64_t v10 = *v9;
        unint64_t v11 = objc_opt_self(&OBJC_CLASS___SACFProvideContext);
        if (swift_dynamicCastObjCClass(v7, v11))
        {
          uint64_t v12 = 0LL;
        }

        else
        {
          unint64_t v13 = objc_opt_self(&OBJC_CLASS___SARDNativeFlowContextUpdate);
          if (swift_dynamicCastObjCClass(v7, v13)) {
            uint64_t v12 = 1LL;
          }
          else {
            uint64_t v12 = 2LL;
          }
        }

        uint64_t v14 = objc_opt_self(&OBJC_CLASS___SACFProvideContext);
        uint64_t result = swift_dynamicCastObjCClass(v10, v14);
        if (result) {
          break;
        }
        unint64_t v15 = objc_opt_self(&OBJC_CLASS___SARDNativeFlowContextUpdate);
        uint64_t result = swift_dynamicCastObjCClass(v10, v15);
        if (result)
        {
          if (v12) {
            break;
          }
        }

        else if (v12 > 1)
        {
          break;
        }

        if (!v5)
        {
          __break(1u);
          return result;
        }

        unint64_t v16 = *v9;
        uint64_t v7 = v9[1];
        *uint64_t v9 = v7;
        v9[1] = v16;
        --v9;
        ++v8;
      }

      while (v4 != v8);
      ++v4;
      v6 += 8LL;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }

  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 8;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 8;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 8, a4);
    uint64_t v12 = &v4[8 * v11];
    uint64_t v53 = a1;
    if (a1 >= a2 || v10 < 8)
    {
      uint64_t v14 = a2;
      goto LABEL_69;
    }

    uint64_t v32 = (char *)(a3 - 8);
    uint64_t v14 = a2;
    uint64_t v52 = v4;
    while (1)
    {
      uint64_t v33 = *((void *)v12 - 1);
      uint64_t v54 = v12 - 8;
      uint64_t v55 = v14;
      uint64_t v36 = *((void *)v14 - 1);
      uint64_t v34 = v14 - 8;
      uint64_t v35 = v36;
      swift_retain(v33);
      uint64_t v37 = swift_retain(v36);
      uint64_t v38 = App.appIdentifier.getter(v37);
      if (v39) {
        uint64_t v40 = v38;
      }
      else {
        uint64_t v40 = 0LL;
      }
      if (v39) {
        unint64_t v41 = v39;
      }
      else {
        unint64_t v41 = 0xE000000000000000LL;
      }
      uint64_t v42 = App.appIdentifier.getter(v38);
      if (v43)
      {
        unint64_t v44 = v43;
      }

      else
      {
        uint64_t v42 = 0LL;
        unint64_t v44 = 0xE000000000000000LL;
      }

      BOOL v45 = v42 == v40 && v44 == v41;
      unint64_t v57 = (unint64_t)v12;
      if (v45)
      {
        char v46 = 0;
        unint64_t v44 = v41;
      }

      else
      {
        char v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v44, v40, v41, 1LL);
      }

      uint64_t v47 = v32 + 8;
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(v44);
      swift_release(v33);
      swift_release(v35);
      if ((v46 & 1) != 0)
      {
        BOOL v48 = v47 != v55 || v32 >= v55;
        uint64_t v55 = v34;
        uint64_t v4 = v52;
        uint64_t v12 = (char *)v57;
        if (!v48) {
          goto LABEL_65;
        }
      }

      else
      {
        BOOL v49 = v47 != (char *)v57 || (unint64_t)v32 >= v57;
        uint64_t v12 = v54;
        uint64_t v34 = v54;
        uint64_t v4 = v52;
        if (!v49) {
          goto LABEL_65;
        }
      }

      *(void *)uint64_t v32 = *(void *)v34;
LABEL_65:
      v32 -= 8;
      uint64_t v14 = v55;
      if (v55 <= v53 || v12 <= v4) {
        goto LABEL_69;
      }
    }
  }

  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 8, a4);
  uint64_t v12 = &v4[8 * v9];
  BOOL v13 = (unint64_t)a2 >= a3 || v8 < 8;
  uint64_t v14 = a1;
  if (!v13)
  {
    unint64_t v15 = a2;
    uint64_t v56 = &v4[8 * v9];
    while (1)
    {
      uint64_t v16 = *(void *)v15;
      uint64_t v17 = *(void *)v4;
      swift_retain(*(void *)v15);
      uint64_t v18 = swift_retain(v17);
      uint64_t v19 = App.appIdentifier.getter(v18);
      uint64_t v21 = v20 ? v19 : 0LL;
      unint64_t v22 = v20 ? v20 : 0xE000000000000000LL;
      uint64_t v23 = App.appIdentifier.getter(v19);
      if (v24)
      {
        unint64_t v25 = v24;
      }

      else
      {
        uint64_t v23 = 0LL;
        unint64_t v25 = 0xE000000000000000LL;
      }

      if (v23 == v21 && v25 == v22) {
        break;
      }
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v21, v22, 1LL);
      swift_release(v16);
      swift_release(v17);
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(v25);
      if ((v27 & 1) == 0) {
        goto LABEL_23;
      }
      uint64_t v28 = v15;
      BOOL v29 = v14 == v15;
      v15 += 8;
LABEL_24:
      uint64_t v12 = v56;
      if (!v29) {
        *(void *)uint64_t v14 = *(void *)v28;
      }
      v14 += 8;
    }

    swift_release(v16);
    swift_release(v17);
    swift_bridgeObjectRelease_n(v22, 2LL);
LABEL_23:
    uint64_t v28 = v4;
    BOOL v29 = v14 == v4;
    v4 += 8;
    goto LABEL_24;
  }

{
  char *v4;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  char *v14;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v29;
  BOOL v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  BOOL v40;
  uint64_t v42;
  unint64_t v44;
  uint64_t v4 = a4;
  uint64_t v6 = a1;
  uint64_t v7 = a2 - a1;
  uint64_t v8 = (a2 - a1) / 8;
  uint64_t v9 = a3 - (void)a2;
  uint64_t v10 = (uint64_t)(a3 - (void)a2) / 8;
  if (v8 >= v10)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 8, a4);
    uint64_t v14 = a2;
    uint64_t v12 = &v4[8 * v10];
    if (v6 >= a2 || v9 < 8) {
      goto LABEL_59;
    }
    uint64_t v17 = (char *)(a3 - 8);
    while (1)
    {
      uint64_t v19 = v12 - 8;
      uint64_t v18 = *((void *)v12 - 1);
      unint64_t v44 = (unint64_t)v14;
      unint64_t v20 = v14 - 8;
      uint64_t v21 = *((void *)v14 - 1);
      unint64_t v22 = objc_opt_self(&OBJC_CLASS___SACFProvideContext);
      if (swift_dynamicCastObjCClass(v18, v22))
      {
        uint64_t v23 = 0LL;
      }

      else
      {
        unint64_t v24 = objc_opt_self(&OBJC_CLASS___SARDNativeFlowContextUpdate);
        uint64_t v23 = swift_dynamicCastObjCClass(v18, v24) ? 1LL : 2LL;
      }

      unint64_t v25 = v17 + 8;
      uint64_t v26 = objc_opt_self(&OBJC_CLASS___SACFProvideContext);
      if (swift_dynamicCastObjCClass(v21, v26)) {
        break;
      }
      BOOL v29 = objc_opt_self(&OBJC_CLASS___SARDNativeFlowContextUpdate);
      if (swift_dynamicCastObjCClass(v21, v29))
      {
        if (v23) {
          break;
        }
      }

      else if (v23 > 1)
      {
        break;
      }

      os_log_type_t v30 = v25 != (char *)v44 || (unint64_t)v17 >= v44;
      uint64_t v19 = v20;
      uint64_t v14 = v20;
      if (!v30) {
        goto LABEL_25;
      }
LABEL_24:
      *(void *)uint64_t v17 = *(void *)v19;
LABEL_25:
      v17 -= 8;
      if (v14 <= v6 || v12 <= v4) {
        goto LABEL_59;
      }
    }

    char v27 = v25 != v12 || v17 >= v12;
    v12 -= 8;
    uint64_t v14 = (char *)v44;
    if (!v27) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 8, a4);
  uint64_t v12 = &v4[8 * v8];
  if ((unint64_t)a2 < a3 && v7 >= 8)
  {
    uint64_t v31 = a2;
    while (1)
    {
      uint64_t v32 = v31;
      uint64_t v33 = *(void *)v31;
      uint64_t v34 = *(void *)v4;
      uint64_t v35 = objc_opt_self(&OBJC_CLASS___SACFProvideContext);
      if (swift_dynamicCastObjCClass(v33, v35))
      {
        uint64_t v36 = 0LL;
      }

      else
      {
        uint64_t v37 = objc_opt_self(&OBJC_CLASS___SARDNativeFlowContextUpdate);
        if (swift_dynamicCastObjCClass(v33, v37)) {
          uint64_t v36 = 1LL;
        }
        else {
          uint64_t v36 = 2LL;
        }
      }

      uint64_t v38 = objc_opt_self(&OBJC_CLASS___SACFProvideContext);
      if (!swift_dynamicCastObjCClass(v34, v38))
      {
        uint64_t v42 = objc_opt_self(&OBJC_CLASS___SARDNativeFlowContextUpdate);
        if (swift_dynamicCastObjCClass(v34, v42))
        {
          if (!v36) {
            goto LABEL_57;
          }
        }

        else if (v36 <= 1)
        {
LABEL_57:
          unint64_t v39 = v32;
          uint64_t v31 = v32 + 8;
          if (v6 == v32) {
            goto LABEL_47;
          }
LABEL_46:
          *(void *)uint64_t v6 = *(void *)v39;
          goto LABEL_47;
        }
      }

      unint64_t v39 = v4;
      uint64_t v40 = v6 == v4;
      v4 += 8;
      uint64_t v31 = v32;
      if (!v40) {
        goto LABEL_46;
      }
LABEL_47:
      v6 += 8;
      if (v4 >= v12 || (unint64_t)v31 >= a3)
      {
        uint64_t v14 = v6;
        goto LABEL_59;
      }
    }
  }

  uint64_t v14 = v6;
LABEL_59:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (v12 - v4) / 8, v14);
  return 1LL;
}

LABEL_69:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (v12 - v4) / 8, v14);
  return 1LL;
}

          BOOL v29 = 0LL;
          uint64_t v21 = 1;
LABEL_42:
          if ((v21 & 1) == 0)
          {
            LOBYTE(v58[0]) = 0;
            OUTLINED_FUNCTION_11_97(v29, (uint64_t)v58);
            os_log_type_t v30 = v2;
            if (v2) {
              return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v26, v28);
            }
          }

          uint64_t v37 = v54;
LABEL_45:
          unint64_t v44 = v37[4];
          BOOL v45 = v37[5];
          LOBYTE(v58[0]) = 2;
          KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v44, v45, v58, v28);
          if (!v30)
          {
            char v46 = v37[6];
            LOBYTE(v58[0]) = 3;
            OUTLINED_FUNCTION_11_97(v46, (uint64_t)v58);
          }

          return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v26, v28);
        }
      }
    }

uint64_t sub_1EE59C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t partial apply for closure #1 in EligibleAppFinder.makeTask(intentTypeName:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_438F2C);
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = protocol witness for Flow.execute() in conformance ContactNeedsValueGuardFlow<A>;
  return closure #1 in EligibleAppFinder.makeTask(intentTypeName:)(a1, v4, v5, v7, v6);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSay17SiriAppResolution0E0CG_TG5( uint64_t a1, int *a2)
{
  *(void *)(v2 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v3;
  *uint64_t v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSay17SiriAppResolution0E0CG_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSay17SiriAppResolution0E0CG_TG5TQ0_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 24);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 32));
  *uint64_t v2 = *(void *)(v1 + 16);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1EE6F8()
{
  uint64_t v1 = OUTLINED_FUNCTION_34_3();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSay17SiriAppResolution0E0CG_TG5TA( uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_438F3C);
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance ContactNeedsValueGuardFlow<A>;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSay17SiriAppResolution0E0CG_TG5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSay17SiriAppResolution0E0CG_TG5Tu))( a1,  v4);
}

uint64_t partial apply for closure #1 in EligibleAppFinder.findEligibleApps(intentTypeName:)@<X0>( uint64_t *a1@<X8>)
{
  return closure #1 in EligibleAppFinder.findEligibleApps(intentTypeName:)(v1[2], v1[3], v1[4], a1);
}

  ;
}

void OUTLINED_FUNCTION_15_58()
{
}

uint64_t static UserFacingCallingAppUtils.getCommAppForLaunch(originalApp:preferredCallProvider:deviceState:)( uint64_t a1, uint64_t a2, void *a3)
{
  if (App.isFirstParty()())
  {
    uint64_t v6 = static UserFacingCallingAppUtils.getAppBundleId(preferredCallProvider:deviceState:)(a2, a3);
    uint64_t v8 = v7;
    type metadata accessor for App(0LL);
    a1 = App.__allocating_init(appIdentifier:)(v6, v8);
  }

  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v9 = OUTLINED_FUNCTION_15_1();
    uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.siriPhone);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v13 = static os_log_type_t.debug.getter(v11, v12);
    if (os_log_type_enabled(v11, v13))
    {
      uint64_t v14 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_0, v11, v13, "#UserFacingCallingAppUtils Not a 1P app, returning original app", v14, 2u);
      OUTLINED_FUNCTION_0_2((uint64_t)v14);
    }

    swift_retain();
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v15 = OUTLINED_FUNCTION_15_1();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
  uint64_t v16 = swift_retain_n(a1, 2LL);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v19 = static os_log_type_t.debug.getter(v17, v18);
  if (os_log_type_enabled(v17, v19))
  {
    uint64_t v20 = OUTLINED_FUNCTION_7_0(22LL);
    uint64_t v21 = OUTLINED_FUNCTION_7_0(64LL);
    uint64_t v29 = v21;
    *(_DWORD *)uint64_t v20 = 136315394;
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000043LL, 0x800000000034D5E0LL, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v20 + 4);
    *(_WORD *)(v20 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    uint64_t v28 = a1;
    uint64_t v22 = type metadata accessor for App(0LL);
    unint64_t v23 = lazy protocol witness table accessor for type App and conformance App();
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v22, v23);
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v20 + 14);
    OUTLINED_FUNCTION_0_3();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_5_77(&dword_0, v17, v26, "#UserFacingCallingAppUtils %s --> %s");
    OUTLINED_FUNCTION_4_79();
    OUTLINED_FUNCTION_0_2(v21);
    OUTLINED_FUNCTION_0_2(v20);
  }

  else
  {

    OUTLINED_FUNCTION_0_3();
  }

  return a1;
}

uint64_t static UserFacingCallingAppUtils.getAppBundleId(preferredCallProvider:deviceState:)( uint64_t a1, void *a2)
{
  uint64_t v3 = 0xD000000000000012LL;
  uint64_t v4 = OUTLINED_FUNCTION_27_23(a2);
  uint64_t v6 = dispatch thunk of DeviceState.isPad.getter(v4, v5);
  char v7 = v6;
  OUTLINED_FUNCTION_16_29(v6, (uint64_t)v54);
  if ((v7 & 1) != 0)
  {
    uint64_t v8 = __swift_destroy_boxed_opaque_existential_1(v54);
    OUTLINED_FUNCTION_16_29(v8, (uint64_t)v53);
LABEL_4:
    uint64_t v13 = __swift_destroy_boxed_opaque_existential_1(v53);
    OUTLINED_FUNCTION_16_29(v13, (uint64_t)v52);
LABEL_5:
    __swift_destroy_boxed_opaque_existential_1(v52);
    unint64_t v14 = 0x80000000003479B0LL;
    goto LABEL_6;
  }

  uint64_t v9 = OUTLINED_FUNCTION_27_23(v54);
  char v11 = dispatch thunk of DeviceState.isPod.getter(v9, v10);
  uint64_t v12 = __swift_destroy_boxed_opaque_existential_1(v54);
  OUTLINED_FUNCTION_16_29(v12, (uint64_t)v53);
  if ((v11 & 1) != 0) {
    goto LABEL_4;
  }
  uint64_t v36 = OUTLINED_FUNCTION_27_23(v53);
  char v38 = dispatch thunk of DeviceState.isXRDevice.getter(v36, v37);
  uint64_t v39 = __swift_destroy_boxed_opaque_existential_1(v53);
  OUTLINED_FUNCTION_16_29(v39, (uint64_t)v52);
  if ((v38 & 1) != 0) {
    goto LABEL_5;
  }
  uint64_t v40 = OUTLINED_FUNCTION_27_23(v52);
  char v42 = dispatch thunk of DeviceState.isAppleTV.getter(v40, v41);
  __swift_destroy_boxed_opaque_existential_1(v52);
  if ((v42 & 1) != 0)
  {
    unint64_t v14 = 0x80000000003479B0LL;
  }

  else
  {
    uint64_t v43 = OUTLINED_FUNCTION_6_77();
    if ((dispatch thunk of DeviceState.isMac.getter(v43, v44) & 1) != 0)
    {
      if (one-time initialization token for macFaceTimeBundleId != -1) {
        swift_once( &one-time initialization token for macFaceTimeBundleId,  one-time initialization function for macFaceTimeBundleId);
      }
      uint64_t v3 = static PhoneCallAppNameConstants.macFaceTimeBundleId;
      unint64_t v14 = unk_477F50;
      swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v45 = OUTLINED_FUNCTION_6_77();
      char v47 = dispatch thunk of DeviceState.isWatch.getter(v45, v46);
      unint64_t v48 = 0xD000000000000015LL;
      if (a1 == 2) {
        unint64_t v48 = 0xD000000000000012LL;
      }
      unint64_t v49 = 0x8000000000348BF0LL;
      if (a1 == 2) {
        unint64_t v49 = 0x80000000003479B0LL;
      }
      if ((v47 & 1) != 0) {
        uint64_t v3 = 0xD000000000000013LL;
      }
      else {
        uint64_t v3 = v48;
      }
      if ((v47 & 1) != 0) {
        unint64_t v14 = 0x8000000000348BD0LL;
      }
      else {
        unint64_t v14 = v49;
      }
    }
  }

ValueMetadata *type metadata accessor for UserFacingCallingAppUtils()
{
  return &type metadata for UserFacingCallingAppUtils;
}

uint64_t OUTLINED_FUNCTION_4_79()
{
  return swift_arrayDestroy(v0, 2LL);
}

uint64_t OUTLINED_FUNCTION_6_77()
{
  uint64_t v1 = v0[3];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_7_80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v11, v10, a4);
}

void PhonePerson.Builder.__allocating_init()()
{
}

void PhonePerson.__allocating_init(builder:)(uint64_t a1)
{
}

uint64_t static PhonePerson.catTypeName.getter()
{
  return 0x65502E656E6F6870LL;
}

uint64_t PhonePerson.getProperty(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1 == 0xD000000000000014LL && a2 == 0x80000000003493B0LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x80000000003493B0LL, a1, a2, 0LL) & 1) != 0)
  {
    uint64_t result = specialized PhonePersonProperties<>.isUnnamedPhoneNumber.getter();
    *(void *)(a3 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = &type metadata for Bool;
    *(_BYTE *)a3 = result & 1;
  }

  else
  {
    uint64_t v7 = type metadata accessor for DialogPerson(0LL);
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))method lookup function for DialogPerson( v7,  &method descriptor for DialogPerson.getProperty(_:));
    return v8(a1, a2);
  }

  return result;
}

uint64_t PhonePerson.__allocating_init(from:)(void *a1)
{
  return PhonePerson.init(from:)(a1);
}

uint64_t PhonePerson.init(from:)(void *a1)
{
  uint64_t v2 = DialogPerson.init(from:)(v4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v2;
}

uint64_t type metadata completion function for PhonePerson(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for PhonePerson(a1, a2, a3, class metadata base offset for PhonePerson);
}

uint64_t type metadata completion function for PhonePerson.Builder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for PhonePerson( a1,  a2,  a3,  class metadata base offset for PhonePerson.Builder);
}

uint64_t type metadata completion function for PhonePerson(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v5, a1 + *a4);
}

uint64_t ObjC metadata update function for PhonePerson.Builder()
{
  return type metadata accessor for PhonePerson.Builder(0LL);
}

void UpdateResponseCommand<>.submitUpdate(to:aceServiceInvoker:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v7 = UpdateResponseCommand<>.asUpdateCommand(for:)(a1, a2, a4, a5);
  if (!v5)
  {
    uint64_t v8 = v7;
    uint64_t v9 = a3[3];
    uint64_t v10 = a3[4];
    __swift_project_boxed_opaque_existential_1(a3, v9);
    AceServiceInvokerAsync.submitAndForget(_:)(v8, v9, v10);
  }

id UpdateResponseCommand<>.asUpdateCommand(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[0] = a3;
  uint64_t v22 = a4;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = [objc_allocWithZone(SAUIUpdateVisualResponseSnippet) init];
  uint64_t v11 = UUID.init()(v10);
  UUID.uuidString.getter(v11);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 setAceId:v12];

  (*(void (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 setViewId:v13];

  uint64_t v14 = v21[1];
  uint64_t updated = dispatch thunk of UpdateResponseCommand.serializeData()(v21[0], v22);
  if (v14)
  {
  }

  else
  {
    uint64_t v17 = updated;
    unint64_t v18 = v16;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v17, v18);
    [v10 setStateData:isa];
  }

  return v10;
}

uint64_t ParameterResolutionRecord<>.isUnsetRelationship.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ParameterIdentifier(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = ParameterResolutionRecord.app.getter(a1);
  Swift::Bool v9 = App.isFirstParty()();
  swift_release(v8);
  if (!v9) {
    return 0LL;
  }
  uint64_t v10 = ParameterResolutionRecord.parameter.getter(a1);
  uint64_t v11 = ParameterIdentifier.multicardinalIndex.getter(v10);
  char v13 = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v14 = (v13 & 1) != 0 ? 0LL : v11;
  uint64_t v15 = (void *)OUTLINED_FUNCTION_4_80();
  unint64_t v16 = *(uint64_t (**)(void *))(*(void *)(a2 + 8) + 8LL);
  uint64_t v17 = *(void **)(a1 + 16);
  uint64_t v18 = v16(v17);

  if (!v18) {
    return 0LL;
  }
  if (v14 < 0) {
    goto LABEL_15;
  }
  if ((unint64_t)v18 >> 62)
  {
    uint64_t v54 = v18 >= 0 ? v18 & 0xFFFFFFFFFFFFFF8LL : v18;
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v54);
    OUTLINED_FUNCTION_62();
  }

  else
  {
    uint64_t v19 = *(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFFF8LL));
  }

  if (v14 >= v19)
  {
LABEL_15:
    OUTLINED_FUNCTION_62();
    return 0LL;
  }

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v14, (v18 & 0xC000000000000001LL) == 0, v18);
  if ((v18 & 0xC000000000000001LL) != 0) {
    id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v18);
  }
  else {
    id v20 = *(id *)(v18 + 8 * v14 + 32);
  }
  uint64_t v21 = v20;
  OUTLINED_FUNCTION_62();
  id v22 = [v21 relationship];

  if (!v22) {
    return 0LL;
  }
  id v23 = (id)OUTLINED_FUNCTION_4_80();
  uint64_t v24 = (void *)ParameterResolutionRecord.result.getter(a1);
  id v57 = v23;
  id v58 = v24;
  unint64_t v25 = type metadata accessor for INIntentResolutionResult();
  id v26 = v23;
  id v27 = v24;
  swift_getTupleTypeMetadata2(0LL, v17, v25, 0LL, 0LL);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (INStartCallIntent, INStartCallContactResolutionResult));
  if (OUTLINED_FUNCTION_0_79(v28))
  {
  }

  else
  {
    uint64_t v30 = v57;

    id v57 = v26;
    id v58 = v27;
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (INAddCallParticipantIntent, INAddCallParticipantParticipantResolutionResult));
    if (!OUTLINED_FUNCTION_0_79(v31))
    {

      uint64_t v53 = v57;
      return 0LL;
    }
  }

  id v32 = v56;
  uint64_t v33 = (char *)[v56 unsupportedReason];

  uint64_t v34 = v57;
  if (v33 != (_BYTE *)&dword_0 + 1)
  {

    return 0LL;
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v35 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v35, (uint64_t)static Logger.siriPhone);
  id v36 = v22;
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v39 = static os_log_type_t.debug.getter(v37, v38);
  if (os_log_type_enabled(v37, v39))
  {
    uint64_t v40 = swift_slowAlloc(32LL, -1LL);
    uint64_t v41 = swift_slowAlloc(96LL, -1LL);
    id v57 = (id)v41;
    *(_DWORD *)uint64_t v40 = 136315650;
    id v55 = v17;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v17);
    uint64_t v43 = String.init<A>(describing:)(&v55, MetatypeMetadata);
    id v55 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, (uint64_t *)&v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v40 + 4);
    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000013LL,  0x8000000000349590LL,  (uint64_t *)&v57);
    OUTLINED_FUNCTION_1_73(v45, v46, v47, v40 + 22);
    *(_WORD *)(v40 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, (uint64_t *)&v57);
    OUTLINED_FUNCTION_1_73(v50, v51, v52, v40 + 32);

    swift_bridgeObjectRelease();
    _os_log_impl( &dword_0,  v37,  v39,  "#ParameterResolutionRecord<%s> %s Found unsetRelationship = %s",  (uint8_t *)v40,  0x20u);
    swift_arrayDestroy(v41, 3LL);
    OUTLINED_FUNCTION_0_2(v41);
    OUTLINED_FUNCTION_0_2(v40);
  }

  else
  {
  }

  return 1LL;
}

unint64_t type metadata accessor for INIntentResolutionResult()
{
  unint64_t result = lazy cache variable for type metadata for INIntentResolutionResult;
  if (!lazy cache variable for type metadata for INIntentResolutionResult)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___INIntentResolutionResult);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INIntentResolutionResult);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_0_79(uint64_t a1)
{
  return swift_dynamicCast(v2 - 112, v2 - 96, v1, a1, 0LL);
}

uint64_t OUTLINED_FUNCTION_1_73(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v6 - 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 112, v5, v4, a4);
}

uint64_t OUTLINED_FUNCTION_4_80()
{
  return ParameterResolutionRecord.intent.getter(v0);
}

void DialogOutputFactory.__allocating_init(dialog:dialogPhase:sharedGlobals:)()
{
}

uint64_t DialogOutputFactory.dialog.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_retain(*(void *)(v0 + 64));
  return v1;
}

uint64_t DialogOutputFactory.dialogPhase.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19DialogOutputFactory_dialogPhase;
  uint64_t v4 = OUTLINED_FUNCTION_12_47();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

void DialogOutputFactory.init(dialog:dialogPhase:sharedGlobals:)()
{
  uint64_t v5 = v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19DialogOutputFactory_dialogPhase;
  uint64_t v6 = OUTLINED_FUNCTION_12_47();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(v5, v2, v6);
  outlined init with take of AppSelectionSignalComponent(v0, v1 + 16);
  *(void *)(v1 + 56) = v4;
  *(void *)(v1 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  OUTLINED_FUNCTION_16();
}

uint64_t DialogOutputFactory.makeSimpleOutputFlowAsync()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 16))(v11, v2, v3);
  uint64_t v4 = v12;
  uint64_t v5 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  v10[3] = v4;
  v10[4] = v5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v10);
  OUTLINED_FUNCTION_4_81((uint64_t)boxed_opaque_existential_1);
  uint64_t v7 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  swift_retain();
  uint64_t v8 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v10,  &async function pointer to partial apply for closure #1 in DialogOutputFactory.makeSimpleOutputFlowAsync(),  v1);
  __swift_destroy_boxed_opaque_existential_1(v11);
  return v8;
}

uint64_t closure #1 in DialogOutputFactory.makeSimpleOutputFlowAsync()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a1;
  uint64_t v3 = *(int **)(*(void *)a2 + 128LL);
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)v3 + *v3);
  uint64_t v4 = (void *)swift_task_alloc(v3[1]);
  *(void *)(v2 + 80) = v4;
  *uint64_t v4 = v2;
  v4[1] = closure #1 in DialogOutputFactory.makeSimpleOutputFlowAsync();
  return v6(v2 + 16);
}

uint64_t closure #1 in DialogOutputFactory.makeSimpleOutputFlowAsync()()
{
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  uint64_t v1;
  if ((*(_BYTE *)(v0 + 56) & 1) != 0)
  {
    *(void *)(v0 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = *(void *)(v0 + 16);
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl(v0 + 64, v1, &protocol self-conformance witness table for Error);
  }

  else
  {
    outlined init with take of AppSelectionSignalComponent((__int128 *)(v0 + 16), *(void *)(v0 + 72));
  }

  return OUTLINED_FUNCTION_6_17(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t partial apply for closure #1 in DialogOutputFactory.makeSimpleOutputFlowAsync()()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_438FFC);
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  uint64_t v2 = OUTLINED_FUNCTION_18_12(v1);
  return closure #1 in DialogOutputFactory.makeSimpleOutputFlowAsync()(v2, v3);
}

uint64_t DialogOutputFactory.makeOutput(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 1LL, 1LL, v7);
  uint64_t v8 = (void *)swift_allocObject(&unk_40D230, 56LL, 7LL);
  v8[2] = 0LL;
  v8[3] = 0LL;
  v8[4] = a1;
  v8[5] = a2;
  void v8[6] = v2;
  swift_retain();
  swift_retain();
  uint64_t v9 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v6,  (uint64_t)&async function pointer to partial apply for closure #1 in DialogOutputFactory.makeOutput(_:),  (uint64_t)v8);
  return swift_release(v9);
}

uint64_t closure #1 in DialogOutputFactory.makeOutput(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = a4;
  v6[9] = a5;
  uint64_t v7 = *(int **)(*(void *)a6 + 128LL);
  uint64_t v10 = (uint64_t (*)(void *))((char *)v7 + *v7);
  uint64_t v8 = (void *)swift_task_alloc(v7[1]);
  v6[10] = v8;
  *uint64_t v8 = v6;
  v8[1] = closure #1 in DialogOutputFactory.makeOutput(_:);
  return v10(v6 + 2);
}

uint64_t closure #1 in DialogOutputFactory.makeOutput(_:)()
{
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  (*(void (**)(uint64_t))(v0 + 64))(v0 + 16);
  outlined destroy of Result<Output, Error>(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1EFC14()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t partial apply for closure #1 in DialogOutputFactory.makeOutput(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_43900C);
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = protocol witness for PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse() in conformance IncomingCallActionConfirmationStrategy<A>;
  return closure #1 in DialogOutputFactory.makeOutput(_:)(a1, v4, v5, v6, v7, v8);
}

uint64_t DialogOutputFactory.makeOutput()(uint64_t a1)
{
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v2 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v1;
  return OUTLINED_FUNCTION_33_0((uint64_t)DialogOutputFactory.makeOutput());
}

{
  uint64_t v1;
  uint64_t v2;
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 10__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v1;
  return OUTLINED_FUNCTION_33_0((uint64_t)DialogOutputFactory.makeOutput());
}

uint64_t DialogOutputFactory.makeOutput()()
{
  uint64_t v1 = (void *)swift_task_alloc(*((unsigned int *)&async function pointer to Result<>.init(catching:) + 1));
  v0[4] = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output);
  *uint64_t v1 = v0;
  v1[1] = PhoneCallYesNoConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:);
  return Result<>.init(catching:)( v0[2],  &async function pointer to partial apply for closure #1 in DialogOutputFactory.makeOutput(),  v0[3],  v2);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_3_92();
  uint64_t v1 = OUTLINED_FUNCTION_7_81();
  OUTLINED_FUNCTION_4_81((uint64_t)v1);
  uint64_t v2 = (void *)swift_task_alloc(dword_43903C);
  *(void *)(v0 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v2;
  uint64_t v3 = OUTLINED_FUNCTION_15_59(v2);
  return OUTLINED_FUNCTION_6_78(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_5_78();
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_17_3();
  }

  else
  {
    uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_16_46();
    return OUTLINED_FUNCTION_6_17(v2);
  }

{
  uint64_t v0;
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 56));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t closure #1 in DialogOutputFactory.makeOutput()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 10__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a2;
  return swift_task_switch(closure #1 in DialogOutputFactory.makeOutput(), 0LL, 0LL);
}

uint64_t closure #1 in DialogOutputFactory.makeOutput()()
{
  uint64_t v1 = OUTLINED_FUNCTION_7_81();
  OUTLINED_FUNCTION_4_81((uint64_t)v1);
  uint64_t v2 = (void *)swift_task_alloc(dword_43903C);
  *(void *)(v0 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v2;
  uint64_t v3 = OUTLINED_FUNCTION_15_59(v2);
  return OUTLINED_FUNCTION_6_78(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_5_78();
  if (v0)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_17_3();
  }

  else
  {
    uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_16_46();
    return OUTLINED_FUNCTION_6_17(v2);
  }

uint64_t partial apply for closure #1 in DialogOutputFactory.makeOutput()()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_439024);
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  uint64_t v2 = OUTLINED_FUNCTION_18_12(v1);
  return closure #1 in DialogOutputFactory.makeOutput()(v2, v3);
}

uint64_t DialogOutputFactory.makeDialogOutput(responseGenerator:dialogPhase:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  v4[5] = v3;
  void v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = OUTLINED_FUNCTION_12_47();
  void v4[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[7] = v6;
  v4[8] = OUTLINED_FUNCTION_23(v6);
  uint64_t v7 = type metadata accessor for OutputGenerationManifest(0LL);
  void v4[9] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[10] = v8;
  v4[11] = OUTLINED_FUNCTION_23(v8);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t DialogOutputFactory.makeDialogOutput(responseGenerator:dialogPhase:)()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = (void *)v0[3];
  (*(void (**)(uint64_t, void, void))(v0[7] + 16LL))(v1, v0[4], v0[6]);
  OutputGenerationManifest.init(dialogPhase:_:)( v1,  closure #1 in variable initialization expression of UnsupportedCallFlowOutputFactory.completionOutputManifest,  0LL);
  uint64_t v4 = v3[3];
  v0[12] = v4;
  v0[13] = v3[4];
  v0[14] = __swift_project_boxed_opaque_existential_1(v3, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = swift_allocObject(v5, 40LL, 7LL);
  v0[15] = v6;
  *(_OWORD *)(v6 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31FE60;
  uint64_t v7 = *(int **)(v2 + 56);
  uint64_t v10 = (uint64_t (*)(void))((char *)v7 + *v7);
  uint64_t v8 = (void *)swift_task_alloc(v7[1]);
  v0[16] = v8;
  *uint64_t v8 = v0;
  v8[1] = DialogOutputFactory.makeDialogOutput(responseGenerator:dialogPhase:);
  return v10();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_14_1(*(void *)(*(void *)v0 + 160LL));
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 64);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 80) + 8LL))(v1, *(void *)(v0 + 72));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return OUTLINED_FUNCTION_6_17(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 72);
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = 0LL;
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  return OUTLINED_FUNCTION_6_17(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t DialogOutputFactory.makeDialogOutput(responseGenerator:dialogPhase:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 128);
  *(void *)(*v2 + 136) = v1;
  swift_task_dealloc(v5);
  if (!v1) {
    *(void *)(v4 + 14__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a1;
  }
  OUTLINED_FUNCTION_19_1();
  return swift_task_switch(v6, v7, v8);
}

uint64_t DialogOutputFactory.makeDialogOutput(responseGenerator:dialogPhase:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4[15];
  *(void *)(v5 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v4[18];
  uint64_t v8 = v5;
  specialized Array._endMutation()(a1, a2, a3, a4);
  v4[19] = v8;
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)[1]);
  v4[20] = v6;
  *uint64_t v6 = v4;
  v6[1] = DialogOutputFactory.makeDialogOutput(responseGenerator:dialogPhase:);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)( v4[2],  v8,  v4[11],  v4[12],  v4[13]);
}

uint64_t DialogOutputFactory.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19DialogOutputFactory_dialogPhase;
  uint64_t v2 = OUTLINED_FUNCTION_12_47();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return v0;
}

uint64_t DialogOutputFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for DialogOutputFactory(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for DialogOutputFactory;
  if (!type metadata singleton initialization cache for DialogOutputFactory) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DialogOutputFactory);
  }
  return result;
}

uint64_t type metadata completion function for DialogOutputFactory(uint64_t a1)
{
  v4[0] = "(";
  v4[1] = (char *)&value witness table for () + 64;
  uint64_t result = type metadata accessor for DialogPhase(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t outlined destroy of Result<Output, Error>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Output, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_3_92()
{
  uint64_t v1 = *(void **)(v0 + 104);
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 136))(v2, v3);
}

uint64_t OUTLINED_FUNCTION_4_81(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_6_78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DialogOutputFactory.makeDialogOutput(responseGenerator:dialogPhase:)(a1, a2, a3);
}

void *OUTLINED_FUNCTION_7_81()
{
  uint64_t v3 = v2[5];
  uint64_t v4 = v2[6];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  v2[10] = v3;
  v2[11] = *(void *)(v4 + 8);
  return __swift_allocate_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_15_59(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 96);
}

uint64_t OUTLINED_FUNCTION_16_46()
{
  return *(void *)(v1 + 8);
}

uint64_t PhoneCallFlowDelegatePlugin.__allocating_init()()
{
  uint64_t v7 = type metadata accessor for FlowFinder();
  uint64_t v8 = &protocol witness table for FlowFinder;
  v6[0] = OUTLINED_FUNCTION_8_2(v7, 16LL);
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  uint64_t v1 = type metadata accessor for PluginPrewarmProvider();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_8_2(v1, 80LL);
  uint64_t v3 = swift_retain();
  v5[3] = v1;
  void v5[4] = &protocol witness table for PluginPrewarmProvider;
  v5[0] = specialized PluginPrewarmProvider.init(eligibleAppsFinder:)(v3, v2);
  return (*(uint64_t (**)(uint64_t *, uint64_t (*)@<X0>(uint64_t *@<X8>), void, void *))(v0 + 112))( v6,  implicit closure #1 in PhoneCallFlowDelegatePlugin.init(),  0LL,  v5);
}

uint64_t implicit closure #1 in PhoneCallFlowDelegatePlugin.init()@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = (uint64_t)&type metadata for SharedGlobals;
  a1[4] = (uint64_t)&protocol witness table for SharedGlobals;
  uint64_t v2 = swift_allocObject(&unk_40D258, 136LL, 7LL);
  *a1 = v2;
  return SharedGlobals.init()((uint64_t *)(v2 + 16));
}

uint64_t PhoneCallFlowDelegatePlugin.__allocating_init(flowFinder:sharedGlobalsFactory:pluginPrewarmProvider:)( void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = OUTLINED_FUNCTION_8_2(v4, 112LL);
  PhoneCallFlowDelegatePlugin.init(flowFinder:sharedGlobalsFactory:pluginPrewarmProvider:)(a1, a2, a3, a4);
  return v9;
}

uint64_t PhoneCallFlowDelegatePlugin.init(flowFinder:sharedGlobalsFactory:pluginPrewarmProvider:)( void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  outlined init with copy of SharedGlobalsProviding((uint64_t)a1, v5 + 16);
  *(void *)(v5 + 56) = a2;
  *(void *)(v5 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a3;
  OUTLINED_FUNCTION_132(v10, v5 + 72);
  type metadata accessor for CATExecutor(0LL);
  type metadata accessor for PhoneCallFlowDelegatePlugin();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v12 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
  swift_retain();
  id v13 = [v12 bundleForClass:ObjCClassFromMetadata];
  static CATExecutor.registerBundle(bundle:)();
  swift_release(a3);

  __swift_destroy_boxed_opaque_existential_1(a4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v5;
}

uint64_t PhoneCallFlowDelegatePlugin.findFlowForX(parse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)v2;
  v65[1] = a2;
  uint64_t v5 = type metadata accessor for Parse(0LL);
  uint64_t v6 = *(uint64_t (***)(uint64_t, uint64_t))(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin();
  uint64_t v11 = (void *)((char *)v65 - v10);
  (*(void (**)(void *__return_ptr, uint64_t))(v2 + 56))(v69, v9);
  uint64_t v12 = v70;
  uint64_t v13 = v71;
  uint64_t v14 = (os_log_s *)__swift_project_boxed_opaque_existential_1(v69, v70);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 72))(v12, v13);
  OUTLINED_FUNCTION_13_66((uint64_t)v11);
  int v16 = v6[11]((uint64_t)v11, v5);
  if (v16 == enum case for Parse.NLv4IntentOnly(_:))
  {
    OUTLINED_FUNCTION_14_53(v6[12]);
    swift_unknownObjectRelease(*v11);
  }

  else
  {
    if (v16 != enum case for Parse.uso(_:))
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v19 = OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_12_1(v19, (uint64_t)static Logger.siriPhone);
      os_log_type_t v20 = OUTLINED_FUNCTION_6_0();
      if (os_log_type_enabled(v14, v20))
      {
        uint64_t v21 = (uint8_t *)OUTLINED_FUNCTION_1_0();
        *(_WORD *)uint64_t v21 = 0;
        OUTLINED_FUNCTION_5( &dword_0,  v14,  v20,  "#PhoneCallFlowDelegatePlugin expected pass-through as only handles .NLv4IntentOnly and .uso",  v21);
        OUTLINED_FUNCTION_0_2((uint64_t)v21);
      }

      OUTLINED_FUNCTION_14_53(v6[1]);
      PhoneCallFlowDelegatePlugin.makeFlowForCommon(parse:sharedGlobals:)(a1);
      uint64_t v23 = v22;
      goto LABEL_41;
    }

    OUTLINED_FUNCTION_14_53(v6[1]);
  }

  char v17 = static ExecutionPath.choosePath(for:sharedGlobals:)(a1, v69);
  if (v17 == 5)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v24 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v24, (uint64_t)static Logger.siriPhone);
    os_log_type_t v25 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_35_3(v25))
    {
      id v26 = (uint8_t *)OUTLINED_FUNCTION_1_0();
      *(_WORD *)id v26 = 0;
      OUTLINED_FUNCTION_5( &dword_0,  v14,  (os_log_type_t)v11,  "#PhoneCallFlowDelegatePlugin - executing flow locally",  v26);
      OUTLINED_FUNCTION_0_2((uint64_t)v26);
    }

    uint64_t v27 = v70;
    uint64_t v28 = v71;
    __swift_project_boxed_opaque_existential_1(v69, v70);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v28 + 24))(&v66, v27, v28);
    uint64_t v29 = v67;
    uint64_t v30 = v68;
    __swift_project_boxed_opaque_existential_1(&v66, v67);
    uint64_t started = dispatch thunk of AceServiceInvoker.currentStartRequestId()(v29, v30);
    if (v32)
    {
      uint64_t v33 = started;
      uint64_t v34 = v32;
      OUTLINED_FUNCTION_91_5();
      uint64_t v35 = v3 + 9;
      uint64_t v37 = v3[12];
      uint64_t v36 = v3[13];
      __swift_project_boxed_opaque_existential_1(v35, v37);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 8))(v33, v34, v37, v36);
      swift_bridgeObjectRelease();
    }

    else
    {
      OUTLINED_FUNCTION_91_5();
    }

    goto LABEL_38;
  }

  if (v17 != 4)
  {
    if (v17 == 3)
    {
      static FlowSearchResult.noFlow.getter();
      uint64_t v18 = v15;
      goto LABEL_42;
    }

    char v44 = v17;
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v45 = OUTLINED_FUNCTION_15_1();
    uint64_t v46 = (os_log_s *)OUTLINED_FUNCTION_12_1(v45, (uint64_t)static Logger.siriPhone);
    os_log_type_t v48 = static os_log_type_t.debug.getter(v46, v47);
    if (os_log_type_enabled(v46, v48))
    {
      unint64_t v49 = (uint8_t *)OUTLINED_FUNCTION_1_0();
      *(_WORD *)unint64_t v49 = 0;
      OUTLINED_FUNCTION_5( &dword_0,  v46,  v48,  "#PhoneCallFlowDelegatePlugin Encountered unknown common_Person entity to call. Falling back to server for execution.",  v49);
      OUTLINED_FUNCTION_0_2((uint64_t)v49);
    }

    Logger.logObject.getter(v50);
    os_log_type_t v51 = OUTLINED_FUNCTION_6_0();
    BOOL v52 = os_log_type_enabled(v14, v51);
    if (v44 != 2)
    {
      if (v52)
      {
        uint64_t v60 = (uint8_t *)OUTLINED_FUNCTION_1_0();
        *(_WORD *)uint64_t v60 = 0;
        OUTLINED_FUNCTION_5(&dword_0, v14, v51, "#PhoneCallFlowDelegatePlugin using RedirectToServerFlow.", v60);
        OUTLINED_FUNCTION_0_2((uint64_t)v60);
      }

      OUTLINED_FUNCTION_64_4();
      uint64_t v61 = type metadata accessor for RedirectToServerFlow();
      OUTLINED_FUNCTION_8_2(v61, 65LL);
      uint64_t v62 = RedirectToServerFlow.init(to:sharedGlobals:isSentinelFlow:)(v44, &v66, 1);
      *(void *)&__int128 v66 = v62;
      lazy protocol witness table accessor for type PlayVoiceMailAction and conformance PlayVoiceMailAction( &lazy protocol witness table cache variable for type RedirectToServerFlow and conformance RedirectToServerFlow,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RedirectToServerFlow,  (uint64_t)&protocol conformance descriptor for RedirectToServerFlow);
      uint64_t v23 = Flow.eraseToAnyFlow()(v61);
      uint64_t v63 = v62;
      goto LABEL_40;
    }

    if (v52)
    {
      uint64_t v53 = (uint8_t *)OUTLINED_FUNCTION_1_0();
      *(_WORD *)uint64_t v53 = 0;
      OUTLINED_FUNCTION_5(&dword_0, v14, v51, "#PhoneCallFlowDelegatePlugin using BusinessCompositionFlow.", v53);
      OUTLINED_FUNCTION_0_2((uint64_t)v53);
    }

    uint64_t v54 = type metadata accessor for BusinessCompositionFlow(0LL);
    id v55 = type metadata accessor for BusinessCompositionFlow;
    OUTLINED_FUNCTION_13_66((uint64_t)v8);
    OUTLINED_FUNCTION_64_4();
    BusinessCompositionFlow.__allocating_init(parse:sharedGlobals:)((uint64_t)v8, (uint64_t)&v66);
    uint64_t v57 = v56;
    *(void *)&__int128 v66 = v56;
    id v58 = &lazy protocol witness table cache variable for type BusinessCompositionFlow and conformance BusinessCompositionFlow;
    uint64_t v59 = &protocol conformance descriptor for BusinessCompositionFlow;
LABEL_39:
    lazy protocol witness table accessor for type PlayVoiceMailAction and conformance PlayVoiceMailAction( v58,  255LL,  v55,  (uint64_t)v59);
    uint64_t v23 = Flow.eraseToAnyFlow()(v54);
    uint64_t v63 = v57;
LABEL_40:
    swift_release(v63);
    uint64_t v22 = v23;
LABEL_41:
    static FlowSearchResult.flow(_:)(v22);
    swift_release(v15);
    uint64_t v18 = v23;
    goto LABEL_42;
  }

  uint64_t v38 = (os_log_s *)v3;
  PhoneCallFlowDelegatePlugin.makeFlowForEmergencyResourceCall(parse:nlTransformer:)(a1, v15);
  if (!v39)
  {
LABEL_38:
    uint64_t v54 = type metadata accessor for CommunalDeviceExecutionFlow(0LL);
    id v55 = type metadata accessor for CommunalDeviceExecutionFlow;
    OUTLINED_FUNCTION_13_66((uint64_t)v8);
    OUTLINED_FUNCTION_64_4();
    uint64_t v57 = CommunalDeviceExecutionFlow.__allocating_init(parse:sharedGlobals:)((uint64_t)v8, &v66);
    *(void *)&__int128 v66 = v57;
    id v58 = &lazy protocol witness table cache variable for type CommunalDeviceExecutionFlow and conformance CommunalDeviceExecutionFlow;
    uint64_t v59 = &protocol conformance descriptor for CommunalDeviceExecutionFlow;
    goto LABEL_39;
  }

  uint64_t v40 = v39;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v41 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v41, (uint64_t)static Logger.siriPhone);
  os_log_type_t v42 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_29_4(v42))
  {
    uint64_t v43 = (uint8_t *)OUTLINED_FUNCTION_1_0();
    *(_WORD *)uint64_t v43 = 0;
    OUTLINED_FUNCTION_5( &dword_0,  v38,  (os_log_type_t)a1,  "#PhoneCallFlowDelegatePlugin Invoking SiriEmergency flow to handle call to emergency resource",  v43);
    OUTLINED_FUNCTION_0_2((uint64_t)v43);
  }

  static FlowSearchResult.flow(_:)(v40);
  swift_release(v15);
  uint64_t v18 = v40;
LABEL_42:
  swift_release(v18);
  return OUTLINED_FUNCTION_57_4();
}

uint64_t PhoneCallFlowDelegatePlugin.makeFlowFor(parse:)(uint64_t a1)
{
  (*(void (**)(void *__return_ptr))(v1 + 56))(v6);
  PhoneCallFlowDelegatePlugin.makeFlowForCommon(parse:sharedGlobals:)(a1);
  uint64_t v4 = v3;
  __swift_destroy_boxed_opaque_existential_1(v6);
  return v4;
}

void PhoneCallFlowDelegatePlugin.sendPreWarmExtensionCommand(resultCandidateId:phoneCallNLIntent:aceServiceInvoker:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v7 = OUTLINED_FUNCTION_15_1();
  uint64_t v8 = (void *)__swift_project_value_buffer(v7, (uint64_t)static Logger.siriPhone);
  uint64_t v9 = swift_bridgeObjectRetain_n(a2, 2LL);
  Logger.logObject.getter(v9);
  os_log_type_t v10 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_35_3(v10))
  {
    uint64_t v11 = a4;
    uint64_t v12 = (_DWORD *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v13 = OUTLINED_FUNCTION_7_0(32LL);
    v36[0] = v13;
    *uint64_t v12 = 136315138;
    uint64_t v14 = swift_bridgeObjectRetain();
    uint64_t v35 = OUTLINED_FUNCTION_19_47(v14, v15, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v12 + 1);
    swift_bridgeObjectRelease_n(a2, 3LL);
    OUTLINED_FUNCTION_12_67(&dword_0, v16, v17, "#PhoneCallFlowDelegatePlugin resultCandidateId is %s");
    swift_arrayDestroy(v13, 1LL);
    OUTLINED_FUNCTION_0_2(v13);
    uint64_t v18 = (uint64_t)v12;
    a4 = v11;
    OUTLINED_FUNCTION_0_2(v18);
  }

  else
  {

    uint64_t v19 = swift_bridgeObjectRelease_n(a2, 2LL);
  }

  if (a1 == 48 && a2 == 0xE100000000000000LL)
  {
    OUTLINED_FUNCTION_132(v19, (uint64_t)v36);
  }

  else
  {
    uint64_t v21 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 48LL, 0xE100000000000000LL, 0LL);
    char v22 = v21;
    OUTLINED_FUNCTION_132(v21, (uint64_t)v36);
    if ((v22 & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_1(v36);
      return;
    }
  }

  __swift_project_boxed_opaque_existential_1(v36, v36[3]);
  Swift::Bool v23 = PhoneCallNLIntent.isFirstPartyOrDefaultAppRequest()();
  uint64_t v24 = __swift_destroy_boxed_opaque_existential_1(v36);
  if (v23)
  {
    os_log_type_t v25 = (os_log_s *)v8;
    Logger.logObject.getter(v24);
    os_log_type_t v26 = OUTLINED_FUNCTION_6_0();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)OUTLINED_FUNCTION_1_0();
      *(_WORD *)uint64_t v27 = 0;
      OUTLINED_FUNCTION_5( &dword_0,  v25,  v26,  "#PhoneCallFlowDelegatePlugin sending IntentSignal to pre-warm first party extension",  v27);
      OUTLINED_FUNCTION_0_2((uint64_t)v27);
    }

    id v28 = [objc_allocWithZone(SAIntentGroupIntentSignal) init];
    id v29 = [objc_allocWithZone(INStartCallIntent) init];
    outlined bridged method (mbgnn) of @objc INIntent.launchId.setter(0xD000000000000015LL, 0x8000000000348BF0LL, v29);
    outlined bridged method (mbgnn) of @objc INIntent.extensionBundleId.setter( 0xD00000000000002FLL,  0x800000000034B6A0LL,  v29);
    type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupProtobufMessage,  &OBJC_CLASS___SAIntentGroupProtobufMessage_ptr);
    id v30 = v29;
    SAIntentGroupProtobufMessage.init(intent:)(v30);
    uint64_t v32 = v31;
    [v28 setIntent:v31];

    uint64_t v33 = a4[3];
    uint64_t v34 = a4[4];
    __swift_project_boxed_opaque_existential_1(a4, v33);
    dispatch thunk of AceServiceInvoker.submitAndForget(_:)(v28, v33, v34);
  }

void PhoneCallFlowDelegatePlugin.makeFlowForCommon(parse:sharedGlobals:)(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)type metadata accessor for Parse(0LL);
  uint64_t v3 = *((void *)v2 - 1);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v11 = (os_log_s *)(v10 - v9);
  static Signpost.begin(_:)();
  uint64_t v26 = v12;
  (*(void (**)(uint64_t, uint64_t, os_log_s *))(v3 + 16))(v6, a1, v2);
  if ((*(unsigned int (**)(uint64_t, os_log_s *))(v3 + 88))(v6, v2) != enum case for Parse.directInvocation(_:))
  {
    (*(void (**)(uint64_t, os_log_s *))(v3 + 8))(v6, v2);
    goto LABEL_11;
  }

  (*(void (**)(uint64_t, os_log_s *))(v3 + 96))(v6, v2);
  uint64_t v13 = (*(uint64_t (**)(os_log_s *, uint64_t, uint64_t))(v8 + 32))(v11, v6, v7);
  uint64_t v14 = Parse.DirectInvocation.identifier.getter(v13);
  uint64_t v2 = v15;
  if (v14 == 0xD00000000000003CLL && v15 == (os_log_s *)0x8000000000342100LL)
  {
    uint64_t v16 = swift_bridgeObjectRelease();
  }

  else
  {
    LOBYTE(v3) = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, 0xD00000000000003CLL, 0x8000000000342100LL, 0LL);
    uint64_t v16 = swift_bridgeObjectRelease();
    if ((v3 & 1) == 0)
    {
LABEL_10:
      OUTLINED_FUNCTION_7_82();
      goto LABEL_11;
    }
  }

  uint64_t v2 = v11;
  v17._rawValue = (void *)Parse.DirectInvocation.userData.getter(v16);
  if (!v17._rawValue) {
    goto LABEL_10;
  }
  PhoneCallFlowDelegatePlugin::VoiceCommandsStartCallDirectAction_optional v27 = VoiceCommandsStartCallDirectAction.init(from:)(v17);
  if (v27.value.appId._object)
  {
    uint64_t countAndFlagsBits = v27.value.appId._countAndFlagsBits;
    object = v27.value.appId._object;
    Class isa = v27.value.intent.super.super.isa;
    type metadata accessor for App(0LL);
    swift_bridgeObjectRetain();
    uint64_t v21 = App.__allocating_init(appIdentifier:)(countAndFlagsBits, object);
    static PhoneCallFlowFactory.makeVoiceCommandsParityFlow(app:intent:sharedGlobals:)();

    swift_bridgeObjectRelease();
    swift_release(v21);
    OUTLINED_FUNCTION_7_82();
    uint64_t v22 = v26;
    goto LABEL_16;
  }

  (*(void (**)(os_log_s *, uint64_t))(v8 + 8))(v11, v7);
LABEL_11:
  uint64_t v22 = v26;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v23 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v23, (uint64_t)static Logger.siriPhone);
  os_log_type_t v24 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_29_4(v24))
  {
    os_log_type_t v25 = (uint8_t *)OUTLINED_FUNCTION_1_0();
    *(_WORD *)os_log_type_t v25 = 0;
    OUTLINED_FUNCTION_5( &dword_0,  v2,  (os_log_type_t)v3,  "#PhoneCallFlowDelegatePlugin Pushing guarded MainFlow…",  v25);
    OUTLINED_FUNCTION_0_2((uint64_t)v25);
  }

  static PhoneCallFlowFactory.makeMainFlow(parse:sharedGlobals:)();
LABEL_16:
  Signpost.OpenSignpost.end()();
  swift_release(v22);
  OUTLINED_FUNCTION_7_5();
}

void PhoneCallFlowDelegatePlugin.makeFlowForEmergencyResourceCall(parse:nlTransformer:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v10 = v9 - v8;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(void *)a2 + 192LL))(&v36, a1);
  if (!v37)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)&v36,  &demangling cache variable for type metadata for PhoneCallNLIntent?);
LABEL_9:
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v18 = OUTLINED_FUNCTION_15_1();
    uint64_t v19 = (os_log_s *)OUTLINED_FUNCTION_12_1(v18, (uint64_t)static Logger.siriPhone);
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)OUTLINED_FUNCTION_1_0();
      *(_WORD *)uint64_t v21 = 0;
      OUTLINED_FUNCTION_5(&dword_0, v19, v20, "#PhoneCallFlowDelegatePlugin No emergency resource found", v21);
      OUTLINED_FUNCTION_0_2((uint64_t)v21);
    }

    goto LABEL_14;
  }

  outlined init with take of AppSelectionSignalComponent(&v36, (uint64_t)v39);
  uint64_t v11 = v39[3];
  uint64_t v12 = v39[4];
  OUTLINED_FUNCTION_66(v39);
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
  specialized Collection.first.getter(&v36);
  swift_bridgeObjectRelease();
  uint64_t v13 = v37;
  if (!v37)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)&v36,  &demangling cache variable for type metadata for SiriPhoneContact?);
    goto LABEL_8;
  }

  uint64_t v14 = v38;
  OUTLINED_FUNCTION_66(&v36);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 272))(v13, v14);
  unint64_t v17 = v16;
  OUTLINED_FUNCTION_91_5();
  if (v17 < 3)
  {
    OUTLINED_FUNCTION_10_58();
LABEL_8:
    OUTLINED_FUNCTION_57_4();
    goto LABEL_9;
  }

  if (v17 == 3) {
    goto LABEL_8;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v22 = OUTLINED_FUNCTION_15_1();
  uint64_t v23 = (void *)__swift_project_value_buffer(v22, (uint64_t)static Logger.siriPhone);
  OUTLINED_FUNCTION_11_65();
  uint64_t v24 = OUTLINED_FUNCTION_11_65();
  Logger.logObject.getter(v24);
  os_log_type_t v25 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_35_3(v25))
  {
    uint64_t v26 = (_DWORD *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v34 = OUTLINED_FUNCTION_7_0(32LL);
    *(void *)&__int128 v36 = v34;
    *uint64_t v26 = 136315138;
    uint64_t v27 = OUTLINED_FUNCTION_11_65();
    uint64_t v35 = OUTLINED_FUNCTION_19_47(v27, v28, (uint64_t *)&v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v26 + 1);
    outlined consume of PhoneCallEmergencyType?(v15, v17);
    outlined consume of PhoneCallEmergencyType?(v15, v17);
    outlined consume of PhoneCallEmergencyType(v15, v17);
    OUTLINED_FUNCTION_12_67( &dword_0,  v29,  v30,  "#PhoneCallFlowDelegatePlugin Finding flow to call emergencyResource: %s");
    swift_arrayDestroy(v34, 1LL);
    OUTLINED_FUNCTION_0_2(v34);
    OUTLINED_FUNCTION_0_2((uint64_t)v26);
  }

  else
  {
    outlined consume of PhoneCallEmergencyType?(v15, v17);
    OUTLINED_FUNCTION_10_58();
  }

  static CallEmergencyResourceDirectInvocation.invocation(for:)(v15, v17);
  OUTLINED_FUNCTION_10_58();
  uint64_t v31 = v3 + 2;
  uint64_t v33 = v3[5];
  uint64_t v32 = v3[6];
  OUTLINED_FUNCTION_66(v31);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 8))(v10, v33, v32);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  OUTLINED_FUNCTION_57_4();
LABEL_14:
  OUTLINED_FUNCTION_7_5();
}

void *PhoneCallFlowDelegatePlugin.deinit()
{
  return v0;
}

uint64_t PhoneCallFlowDelegatePlugin.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t protocol witness for FlowPlugin.init() in conformance PhoneCallFlowDelegatePlugin@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 104))();
  *a1 = result;
  return result;
}

void outlined bridged method (mbgnn) of @objc INIntent.launchId.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 _setLaunchId:v4];
}

void outlined bridged method (mbgnn) of @objc INIntent.extensionBundleId.setter( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 _setExtensionBundleId:v4];
}

void *specialized PluginPrewarmProvider.init(eligibleAppsFinder:)(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for EligibleAppFinder();
  uint64_t v23 = &protocol witness table for EligibleAppFinder;
  *(void *)&__int128 v21 = a1;
  uint64_t v13 = type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue,  &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.userInteractive.getter(v13);
  os_log_type_t v20 = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type PlayVoiceMailAction and conformance PlayVoiceMailAction( (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v15 = v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  unint64_t v17 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v8, v15);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v4);
  uint64_t v18 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001CLL,  0x8000000000346CF0LL,  v12,  v10,  v7,  0LL);
  a2[8] = 0LL;
  a2[9] = 0LL;
  a2[7] = v18;
  outlined init with take of AppSelectionSignalComponent(&v21, (uint64_t)(a2 + 2));
  return a2;
}

uint64_t type metadata accessor for PhoneCallFlowDelegatePlugin()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin27PhoneCallFlowDelegatePlugin);
}

void base witness table accessor for FlowPlugin in PhoneCallFlowDelegatePlugin(uint64_t a1, uint64_t a2)
{
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }

  return result;
}

uint64_t sub_1F1A88()
{
  return swift_deallocObject(v0, 136LL, 7LL);
}

uint64_t OUTLINED_FUNCTION_7_82()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_10_58()
{
  return outlined consume of PhoneCallEmergencyType?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_11_65()
{
  return outlined copy of PhoneCallEmergencyType(v1, v0);
}

void OUTLINED_FUNCTION_12_67(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_13_66(uint64_t a1)
{
  return v1(a1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_14_53@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_19_47(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, a3);
}

void PhoneCallBaseCatTemplatingService.__allocating_init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)()
{
}

void PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)()
{
  void (*v21)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void v57[5];
  void v58[2];
  __int128 v59[3];
  OUTLINED_FUNCTION_29_2();
  uint64_t v1 = v0;
  uint64_t v47 = v2;
  uint64_t v4 = (uint64_t)v3;
  os_log_type_t v48 = v3;
  uint64_t v6 = (uint64_t)v5;
  os_log_type_t v51 = v5;
  id v55 = v7;
  uint64_t v56 = v8;
  uint64_t v10 = v9;
  uint64_t v53 = v11;
  uint64_t v54 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DucTemplatingLocalContext?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  BOOL v52 = v13;
  uint64_t v14 = OUTLINED_FUNCTION_28_42();
  unint64_t v49 = *(void *)(v14 - 8);
  uint64_t v50 = v14;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  uint64_t v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v17 = (void *)((char *)v0 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *v0 + 16));
  *unint64_t v17 = 0x3D65737561705C1BLL;
  v17[1] = 0xEC0000005C303532LL;
  uint64_t v18 = (char *)v0 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *v0 + 56);
  *((void *)v18 + __swift_destroy_boxed_opaque_existential_1(v0 + 4) = 0LL;
  *(_OWORD *)uint64_t v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  outlined init with copy of SharedGlobalsProviding( (uint64_t)v10,  (uint64_t)v0 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *v0 + 72));
  uint64_t v19 = v10[3];
  uint64_t v20 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v19);
  __int128 v21 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v20 + 8);
  swift_retain();
  v21(v59, v19, v20);
  OUTLINED_FUNCTION_13_67();
  uint64_t v23 = (void *)((char *)v0 + *(void *)(v22 + 40));
  outlined init with take of AppSelectionSignalComponent(v59, (uint64_t)v23);
  OUTLINED_FUNCTION_13_67();
  os_log_type_t v25 = v56;
  *(void *)((char *)v1 + *(void *)(v24 + swift_release(*(void *)(v0 + 24)) = v55;
  OUTLINED_FUNCTION_13_67();
  *(void *)((char *)v1 + *(void *)(v26 + 32)) = v25;
  OUTLINED_FUNCTION_13_67();
  outlined init with copy of SharedGlobalsProviding(v6, (uint64_t)v1 + *(void *)(v27 + 48));
  OUTLINED_FUNCTION_13_67();
  outlined init with copy of SharedGlobalsProviding(v4, (uint64_t)v1 + *(void *)(v28 + 64));
  OUTLINED_FUNCTION_13_67();
  uint64_t v30 = v47;
  *(void *)((char *)v1 + *(void *)(v29 + 80)) = v47;
  swift_retain();
  UsoEntity_common_Person.usoPerson.getter();
  swift_retain();
  OUTLINED_FUNCTION_122();
  uint64_t v31 = v23[3];
  uint64_t v32 = v23[4];
  __swift_project_boxed_opaque_existential_1(v23, v31);
  uint64_t v33 = dispatch thunk of DeviceState.siriLocale.getter(v31, v32);
  *(void *)&v59[0] = Locale.identifier.getter(v33);
  *((void *)&v59[0] + 1) = v34;
  v57[0] = 45LL;
  v57[1] = 0xE100000000000000LL;
  v58[0] = 95LL;
  v58[1] = 0xE100000000000000LL;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v57,  v58,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String);
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v50);
  OUTLINED_FUNCTION_77_15();
  uint64_t v39 = v38;
  lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type INIntentSlotValueType and conformance INIntentSlotValueType,  (uint64_t (*)(uint64_t))type metadata accessor for INIntentSlotValueType,  (uint64_t)&protocol conformance descriptor for INIntentSlotValueType);
  uint64_t v41 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v39, &type metadata for String, v40);
  os_log_type_t v42 = v10[3];
  uint64_t v43 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v42);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v43 + 24))(v59, v42, v43);
  outlined init with copy of SharedGlobalsProviding((uint64_t)v23, (uint64_t)v57);
  char v44 = OUTLINED_FUNCTION_78_16();
  uint64_t v45 = v52;
  __swift_storeEnumTagSinglePayload(v52, 1LL, 1LL, v44);
  DucTemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:deviceState:localContext:)( v53,  v54,  v35,  v37,  v41,  v59,  v57,  v45);
  swift_release(v55);
  swift_release(v56);
  swift_release(v30);
  __swift_destroy_boxed_opaque_existential_1(v48);
  __swift_destroy_boxed_opaque_existential_1(v51);
  __swift_destroy_boxed_opaque_existential_1(v10);
  OUTLINED_FUNCTION_7_5();
}

void PhoneCallBaseCatTemplatingService.deinit()
{
  uint64_t v0 = DucTemplatingService.deinit();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_60();
  OUTLINED_FUNCTION_69_12(*(void *)(v1 + 24));
  OUTLINED_FUNCTION_8_60();
  OUTLINED_FUNCTION_69_12(*(void *)(v2 + 32));
  OUTLINED_FUNCTION_8_60();
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + *(void *)(v3 + 40)));
  OUTLINED_FUNCTION_8_60();
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + *(void *)(v4 + 48)));
  OUTLINED_FUNCTION_8_60();
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v0 + *(void *)(v5 + 56),  &demangling cache variable for type metadata for PhoneCallNLIntent?);
  OUTLINED_FUNCTION_8_60();
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + *(void *)(v6 + 64)));
  OUTLINED_FUNCTION_8_60();
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + *(void *)(v7 + 72)));
  OUTLINED_FUNCTION_8_60();
  OUTLINED_FUNCTION_69_12(*(void *)(v8 + 80));
  OUTLINED_FUNCTION_2();
}

void PhoneCallBaseCatTemplatingService.__allocating_init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:)()
{
}

void PhoneCallBaseCatTemplatingService.__allocating_init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:deviceState:localContext:)()
{
}

void PhoneCallBaseCatTemplatingService.makeParameterPromptDialog(app:parameterName:intent:_:)()
{
  uint64_t v3 = v0;
  uint64_t v36 = v4;
  uint64_t v6 = v5;
  uint64_t v7 = *v0;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v9 = (uint64_t *)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = type metadata accessor for PhoneError(0LL);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_38_24();
  __chkstk_darwin();
  uint64_t v12 = (uint64_t *)((char *)&v31 - v11);
  __chkstk_darwin();
  OUTLINED_FUNCTION_117();
  *uint64_t v12 = 0xD000000000000036LL;
  v12[1] = 0x800000000034D7C0LL;
  swift_storeEnumTagMultiPayload(v12, v10, 6LL);
  PhoneError.logged()(v1);
  outlined destroy of PhoneError((uint64_t)v12);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v13, (uint64_t)static Logger.siriPhone);
  outlined init with copy of PhoneError(v1, v2);
  uint64_t v14 = swift_retain_n(v3, 2LL);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = OUTLINED_FUNCTION_7_0(22LL);
    uint64_t v34 = v10;
    uint64_t v18 = v17;
    uint64_t v32 = OUTLINED_FUNCTION_7_0(64LL);
    uint64_t v37 = (uint64_t)v3;
    uint64_t v38 = v32;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v20 = type metadata accessor for PhoneCallBaseCatTemplatingService( 0LL,  *(void *)(v7 + class metadata base offset for PhoneCallBaseCatTemplatingService),  *(void *)(v7 + class metadata base offset for PhoneCallBaseCatTemplatingService + 8),  v19);
    swift_retain();
    uint64_t v33 = v6;
    uint64_t v21 = String.init<A>(describing:)(&v37, v20);
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v18 + 4);
    OUTLINED_FUNCTION_165_0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError,  type metadata accessor for PhoneError,  (uint64_t)&protocol conformance descriptor for PhoneError);
    uint64_t v24 = Error.localizedDescription.getter(v34, v23);
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v38);
    uint64_t v6 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v18 + 14);
    OUTLINED_FUNCTION_62();
    outlined destroy of PhoneError(v2);
    _os_log_impl(&dword_0, v15, v16, "#%s: %s", (uint8_t *)v18, 0x16u);
    uint64_t v26 = v32;
    swift_arrayDestroy(v32, 2LL);
    OUTLINED_FUNCTION_0_2(v26);
    OUTLINED_FUNCTION_0_2(v18);
  }

  else
  {
    OUTLINED_FUNCTION_165_0();
    outlined destroy of PhoneError(v2);
  }

  lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError,  type metadata accessor for PhoneError,  (uint64_t)&protocol conformance descriptor for PhoneError);
  uint64_t v28 = OUTLINED_FUNCTION_3_87(v27);
  outlined init with copy of PhoneError(v1, v29);
  *uint64_t v9 = v28;
  OUTLINED_FUNCTION_21((uint64_t)v9, v35);
  uint64_t v30 = v6(v9);
  OUTLINED_FUNCTION_69_16(v30, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  outlined destroy of PhoneError(v1);
  OUTLINED_FUNCTION_7_5();
}

void PhoneCallBaseCatTemplatingService.makeOpenAppDialog(app:_:)()
{
  uint64_t v2 = v0;
  uint64_t v34 = v3;
  uint64_t v35 = v4;
  uint64_t v33 = v5;
  uint64_t v28 = type metadata accessor for PhoneError(0LL);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v30 = v6;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v31 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v32 = v8;
  uint64_t v9 = OUTLINED_FUNCTION_28_42();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_75_17();
  uint64_t v12 = *(void *)((char *)v0 + v11 + 24);
  uint64_t v13 = *(void *)((char *)v0 + v11 + 32);
  OUTLINED_FUNCTION_49_0((void *)((char *)v0 + v11));
  uint64_t v14 = (void *)((char *)v0 + *(void *)(v0[474] + *v0 + 40LL));
  uint64_t v15 = v14[3];
  uint64_t v16 = v14[4];
  __swift_project_boxed_opaque_existential_1(v14, v15);
  dispatch thunk of DeviceState.siriLocale.getter(v15, v16);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(v33, v1, v12, v13);
  uint64_t v19 = v18;
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v9);
  if (v19)
  {
    uint64_t v20 = type metadata accessor for TaskPriority(0LL);
    OUTLINED_FUNCTION_15_60(v20, v21, v22, v20);
    uint64_t v23 = (void *)swift_allocObject(&unk_40D2D0, 80LL, 7LL);
    v23[2] = 0LL;
    v23[3] = 0LL;
    v23[4] = v2;
    v23[5] = v17;
    v23[6] = v19;
    v23[7] = v33;
    uint64_t v23[8] = v34;
    v23[9] = v35;
    swift_retain();
    OUTLINED_FUNCTION_29_3();
    OUTLINED_FUNCTION_3_8();
    uint64_t v24 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v32,  (uint64_t)&async function pointer to partial apply for closure #1 in PhoneCallBaseCatTemplatingService.makeOpenAppDialog(app:_:),  (uint64_t)v23);
    swift_release(v24);
  }

  else
  {
    *(void *)uint64_t v30 = 0xD000000000000023LL;
    *(void *)(v30 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0x800000000034D800LL;
    *(void *)(v30 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = 0xD000000000000043LL;
    *(void *)(v30 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 0x800000000034D830LL;
    *(void *)(v30 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xD000000000000019LL;
    *(void *)(v30 + 40) = 0x800000000034D880LL;
    *(void *)(v30 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 113LL;
    *(_BYTE *)(v30 + 56) = 0;
    swift_storeEnumTagMultiPayload(v30, v28, 2LL);
    lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError,  type metadata accessor for PhoneError,  (uint64_t)&protocol conformance descriptor for PhoneError);
    uint64_t v26 = OUTLINED_FUNCTION_3_87(v25);
    PhoneError.logged()(v27);
    outlined destroy of PhoneError(v30);
    *uint64_t v31 = v26;
    OUTLINED_FUNCTION_21((uint64_t)v31, v29);
    v34(v31);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v31,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  }

  OUTLINED_FUNCTION_7_5();
}

uint64_t PhoneCallBaseCatTemplatingService.makeOpenAppFailedDialog(app:_:)()
{
  uint64_t v1 = class metadata base offset for PhoneCallBaseCatTemplatingService + *v0;
  uint64_t v2 = *(void **)((char *)v0 + *(void *)(v1 + 80));
  type metadata accessor for SirikitDeviceState(0LL);
  outlined init with copy of SharedGlobalsProviding((uint64_t)v0 + *(void *)(v1 + 40), (uint64_t)v4);
  SirikitDeviceState.__allocating_init(from:)(v4);
  (*(void (**)(void))(class metadata base offset for StartCallCATs + *v2 + 544))();
  return OUTLINED_FUNCTION_76();
}

void PhoneCallBaseCatTemplatingService.nlIntent.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = OUTLINED_FUNCTION_50_20(*v1);
  OUTLINED_FUNCTION_25_0(v3, v4, 0LL);
  outlined init with copy of Result<TemplatingResult, Error>( (uint64_t)v1,  a1,  &demangling cache variable for type metadata for PhoneCallNLIntent?);
  OUTLINED_FUNCTION_60_2();
}

void PhoneCallBaseCatTemplatingService.nlIntent.setter(uint64_t a1)
{
  uint64_t v3 = OUTLINED_FUNCTION_50_20(*v1);
  OUTLINED_FUNCTION_25_0(v3, v4, 33LL);
  outlined assign with take of PhoneCallNLIntent?(a1, (uint64_t)v1);
  swift_endAccess(v5);
  OUTLINED_FUNCTION_60_2();
}

uint64_t (*PhoneCallBaseCatTemplatingService.nlIntent.modify(uint64_t a1))()
{
  return static SingleResultVoicemailModel.resultViewID.modify;
}

void PhoneCallBaseCatTemplatingService.faceTimeSettings(_:)()
{
  uint64_t v3 = type metadata accessor for Locale(0LL);
  uint64_t v23 = *(void *)(v3 - 8);
  uint64_t v24 = v3;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_61_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_32();
  type metadata accessor for App(0LL);
  uint64_t v4 = App.__allocating_init(appIdentifier:)(0xD000000000000012LL, 0x80000000003479B0LL);
  uint64_t v5 = (void *)((char *)v0 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *v0 + 72));
  uint64_t v7 = v5[3];
  uint64_t v6 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 168))(v28, v7, v6);
  uint64_t v8 = v28[3];
  uint64_t v9 = v28[4];
  OUTLINED_FUNCTION_49_0(v28);
  uint64_t v10 = v5[3];
  uint64_t v11 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v10);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 8))(v25, v10, v11);
  uint64_t v12 = v26;
  uint64_t v13 = v27;
  __swift_project_boxed_opaque_existential_1(v25, v26);
  dispatch thunk of DeviceState.siriLocale.getter(v12, v13);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 16))(v4, v2, v8, v9);
  uint64_t v16 = v15;
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v2, v24);
  __swift_destroy_boxed_opaque_existential_1(v25);
  if (v16)
  {
    String.toSpeakableString.getter(v14, v16);
    OUTLINED_FUNCTION_62();
    uint64_t v17 = OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_21_42(v17);
    __swift_destroy_boxed_opaque_existential_1(v28);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1(v28);
    uint64_t v18 = OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_15_60(v18, v19, v20, v18);
  }

  OUTLINED_FUNCTION_34_27();
  v21(v1);
  uint64_t v22 = OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_88_1(v22, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_7_5();
}

void PhoneCallBaseCatTemplatingService.callButtonText(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void **)(v2 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + v6 + 24));
  uint64_t v8 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_15_60(v8, v9, v10, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(class metadata base offset for PhoneCallDisplayTextCATs + *v7 + 64))( v3,  a1,  a2);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v3,  &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16();
}

void PhoneCallBaseCatTemplatingService.cancelButtonText(_:)()
{
}

void PhoneCallBaseCatTemplatingService.getCallAndCancelButtonText(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for DispatchTimeInterval(0LL);
  __chkstk_darwin();
  OUTLINED_FUNCTION_32();
  *uint64_t v2 = 500LL;
  uint64_t v8 = (*(uint64_t (**)(void *, void))(v7 + 104))(v2, enum case for DispatchTimeInterval.milliseconds(_:));
  static DispatchQoS.userInteractive.getter(v8);
  uint64_t v9 = type metadata accessor for TemplatingParallelizer(0LL);
  OUTLINED_FUNCTION_15_2(v9);
  TemplatingParallelizer.init(name:timeout:qos:)((uint64_t)"CallCancel", 10LL, 2, (uint64_t)v2, (uint64_t)v6);
  uint64_t v11 = v10;
  uint64_t v12 = implicit closure #1 in PhoneCallBaseCatTemplatingService.getCallAndCancelButtonText(_:)();
  uint64_t v13 = (*(uint64_t (**)(uint64_t (*)()))(*(void *)v11 + 176LL))(v12);
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_76();
  uint64_t v14 = implicit closure #3 in PhoneCallBaseCatTemplatingService.getCallAndCancelButtonText(_:)();
  uint64_t v15 = (*(uint64_t (**)(uint64_t (*)()))(*(void *)v13 + 176LL))(v14);
  swift_release(v13);
  OUTLINED_FUNCTION_31_2();
  uint64_t v16 = swift_allocObject(&unk_40D2F8, 32LL, 7LL);
  *(void *)(v16 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v16 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a2;
  uint64_t v17 = *(void (**)(void (*)(uint64_t), uint64_t))(*(void *)v15 + 184LL);
  OUTLINED_FUNCTION_3_8();
  v17(partial apply for closure #1 in PhoneCallBaseCatTemplatingService.getCallAndCancelButtonText(_:), v16);
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_16();
}

void PhoneCallBaseCatTemplatingService.emergencyCallSashTitle(_:)()
{
}

void PhoneCallBaseCatTemplatingService.snippetDisplayHandleLabelWithType(handleLabel:handleType:_:)()
{
  uint64_t v3 = v2;
  uint64_t v29 = v4;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v28 - v11;
  __chkstk_darwin();
  OUTLINED_FUNCTION_117();
  uint64_t v14 = DucTemplatingService.locale.getter(v13);
  uint64_t v16 = static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)(v8, v14, v15);
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  if (v6 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_13;
  }

  if (v6 > 0x7FFFFFFF)
  {
LABEL_13:
    __break(1u);
    JUMPOUT(0x1F2E1CLL);
  }

  uint64_t v28 = v3;
  switch((int)v6)
  {
    case 0:
      uint64_t v19 = @"Unknown";
      goto LABEL_10;
    case 1:
      uint64_t v19 = @"EmailAddress";
      goto LABEL_10;
    case 2:
      uint64_t v19 = @"PhoneNumber";
      goto LABEL_10;
    case 3:
      uint64_t v19 = @"Website";
      goto LABEL_10;
    case 4:
      uint64_t v19 = @"InstantMessage";
LABEL_10:
      uint64_t v20 = v19;
      break;
    default:
      uint64_t v19 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  v6));
      break;
  }

  uint64_t v21 = v19;
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  uint64_t v24 = v23;

  uint64_t v25 = *(void **)((char *)v0
                   + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *v0 + 24));
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  OUTLINED_FUNCTION_1_34(v26, v27);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_8_7(v1);
  OUTLINED_FUNCTION_1_34(v16, v18);
  OUTLINED_FUNCTION_8_7((uint64_t)v12);
  OUTLINED_FUNCTION_1_34(v22, v24);
  OUTLINED_FUNCTION_8_7((uint64_t)v10);
  (*(void (**)(uint64_t, char *, char *, uint64_t, uint64_t))(class metadata base offset for PhoneCallDisplayTextCATs
                                                                    + *v25
                                                                    + 320))( v1,  v12,  v10,  v29,  v28);
  OUTLINED_FUNCTION_133_1((uint64_t)v10);
  OUTLINED_FUNCTION_133_1((uint64_t)v12);
  OUTLINED_FUNCTION_133_1(v1);
  OUTLINED_FUNCTION_7_5();
}

void PhoneCallBaseCatTemplatingService.emergencyServicesDisplayText(_:)()
{
}

void PhoneCallBaseCatTemplatingService.formatPhoneNumber(countryCode:phoneNumber:_:)()
{
  uint64_t v40 = v3;
  uint64_t v41 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  *(void *)&__int128 v38 = v10;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v11 = OUTLINED_FUNCTION_26_0();
  uint64_t v37 = *(void *)(v11 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_38_24();
  __chkstk_darwin();
  uint64_t v13 = (char *)&v36 - v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v36 - v16;
  __chkstk_darwin();
  OUTLINED_FUNCTION_117();
  swift_bridgeObjectRetain();
  uint64_t v36 = v7;
  OUTLINED_FUNCTION_1_34(v7, v5);
  uint64_t v18 = type metadata accessor for DialogPhoneNumber.Builder(0LL);
  OUTLINED_FUNCTION_15_2(v18);
  DialogPhoneNumber.Builder.init(value:)(v13);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_1_34(v38, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 0LL, 1LL, v11);
  dispatch thunk of DialogPhoneNumber.Builder.withCountryCode(_:)(v17);
  OUTLINED_FUNCTION_38_1();
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v17,  &demangling cache variable for type metadata for SpeakableString?);
  dispatch thunk of DialogPhoneNumber.Builder.build()();
  uint64_t v19 = OUTLINED_FUNCTION_76();
  dispatch thunk of DialogPhoneNumber.toString.getter(v19);
  OUTLINED_FUNCTION_38_1();
  outlined init with copy of Result<TemplatingResult, Error>( v0,  (uint64_t)v15,  &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1LL, v11) == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v15,  &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v21 = OUTLINED_FUNCTION_0_47(v20);
    __int128 v38 = xmmword_31D870;
    *(_OWORD *)(v21 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D870;
    uint64_t v22 = v36;
    *(void *)(v21 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v36;
    *(void *)(v21 + 40) = v5;
    uint64_t v23 = OUTLINED_FUNCTION_0_47(v20);
    *(_OWORD *)(v23 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v38;
    *(void *)(v23 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v22;
    *(void *)(v23 + 40) = v5;
    swift_bridgeObjectRetain_n(v5, 2LL);
    unint64_t v24 = OUTLINED_FUNCTION_49_20();
    TemplatingResult.init(templateIdentifier:speak:print:)(v24, v25, v21, v23);
    OUTLINED_FUNCTION_46_25();
    uint64_t v26 = OUTLINED_FUNCTION_67_17();
    OUTLINED_FUNCTION_69_16(v26, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  }

  else
  {
    uint64_t v27 = v37;
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v1, v15, v11);
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v29 = OUTLINED_FUNCTION_0_47(v28);
    __int128 v38 = xmmword_31D870;
    *(_OWORD *)(v29 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D870;
    *(void *)(v29 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = SpeakableString.speak.getter();
    *(void *)(v29 + 40) = v30;
    uint64_t v31 = OUTLINED_FUNCTION_0_47(v28);
    *(_OWORD *)(v31 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v38;
    *(void *)(v31 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = SpeakableString.print.getter(v31);
    *(void *)(v31 + 40) = v32;
    unint64_t v33 = OUTLINED_FUNCTION_49_20();
    TemplatingResult.init(templateIdentifier:speak:print:)(v33, v34, v29, v31);
    OUTLINED_FUNCTION_46_25();
    uint64_t v35 = OUTLINED_FUNCTION_67_17();
    OUTLINED_FUNCTION_69_16(v35, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v1, v11);
  }

  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v0,  &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_7_5();
}

void PhoneCallBaseCatTemplatingService.tryWithApp(app:_:)()
{
  uint64_t v3 = v0;
  uint64_t v24 = v4;
  uint64_t v25 = v5;
  uint64_t v22 = v6;
  uint64_t v23 = type metadata accessor for Locale(0LL);
  uint64_t v7 = *(void *)(v23 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_61_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_37_32();
  OUTLINED_FUNCTION_75_17();
  uint64_t v9 = *(void *)((char *)v0 + v8 + 24);
  uint64_t v10 = *(void *)((char *)v0 + v8 + 32);
  __swift_project_boxed_opaque_existential_1((void *)((char *)v0 + v8), v9);
  uint64_t v11 = (void *)((char *)v0 + *(void *)(v0[474] + *v0 + 40LL));
  uint64_t v12 = v11[3];
  uint64_t v13 = v11[4];
  __swift_project_boxed_opaque_existential_1(v11, v12);
  dispatch thunk of DeviceState.siriLocale.getter(v12, v13);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 16))(v22, v2, v9, v10);
  uint64_t v16 = v15;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v23);
  if (v16)
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_1_34(v14, v16);
    uint64_t v17 = OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_21_42(v17);
    OUTLINED_FUNCTION_62();
  }

  else
  {
    uint64_t v18 = OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_15_60(v18, v19, v20, v18);
  }

  uint64_t v21 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(class metadata base offset for PhoneCallDisplayTextCATs
                                                                     + **(void **)((char *)v3
                                                                                   + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService
                                                                                               + *v3
                                                                                               + 24))
                                                                     + 544))( v1,  0LL,  v24,  v25);
  OUTLINED_FUNCTION_88_1(v21, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_7_5();
}

void PhoneCallBaseCatTemplatingService.updateSettings(_:)()
{
}

void PhoneCallBaseCatTemplatingService.updateSettings()()
{
  (*(void (**)(void))(class metadata base offset for PhoneCallDisplayTextCATs
                    + **(void **)((char *)v0
                                  + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService
                                              + *v0
                                              + 24))
                    + 632))();
  OUTLINED_FUNCTION_2();
}

void PhoneCallBaseCatTemplatingService.makeSpeakableDisambiguationItemListForPhone(disambiguationList:_:)()
{
  uint64_t v1 = v0;
  uint64_t v91 = v2;
  uint64_t v92 = v3;
  uint64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  uint64_t v89 = v6;
  __chkstk_darwin();
  uint64_t v88 = (char *)&v83 - v7;
  uint64_t v8 = OUTLINED_FUNCTION_26_0();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_10_1();
  uint64_t v87 = v10;
  __chkstk_darwin();
  unint64_t v86 = (char *)&v83 - v11;
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = (char *)&v83 - v13;
  uint64_t v90 = (uint64_t)v5;
  uint64_t v17 = SiriKitDisambiguationList.rawItems.getter(v12, v15, v16);
  unint64_t v18 = (unint64_t)_swiftEmptyArrayStorage;
  v98[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v19 = *(void *)(v17 + 16);
  uint64_t v93 = v1;
  if (v19)
  {
    uint64_t v20 = v17 + 32;
    do
    {
      outlined init with copy of Any(v20, (uint64_t)v97);
      outlined init with copy of Any((uint64_t)v97, (uint64_t)&v94);
      type metadata accessor for INPerson();
      if ((swift_dynamicCast(&v96, &v94, &type metadata for Any[1]) & 1) == 0) {
        uint64_t v96 = 0LL;
      }
      uint64_t v21 = OUTLINED_FUNCTION_18();
      uint64_t v22 = v96;
      if (v96)
      {
        uint64_t v5 = v98;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
        unint64_t v24 = *(void *)((char *)&dword_10 + (v98[0] & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v23 = *(void *)((char *)&dword_18 + (v98[0] & 0xFFFFFFFFFFFFFF8LL));
        if (v24 >= v23 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1LL);
        }
        uint64_t v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v22);
        specialized Array._endMutation()(v25, v26, v27, v28);
      }

      v20 += 32LL;
      --v19;
    }

    while (v19);
    unint64_t v18 = v98[0];
    uint64_t v1 = v93;
  }

  swift_bridgeObjectRelease();
  if (v18 >> 62)
  {
    OUTLINED_FUNCTION_51_2();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter(v5);
  }

  else
  {
    uint64_t v29 = *(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain();
  }

  if (v29)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (v18 & 0xC000000000000001LL) == 0, v18);
    if ((v18 & 0xC000000000000001LL) != 0) {
      id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v18);
    }
    else {
      id v30 = *(id *)(v18 + 32);
    }
    uint64_t v31 = v30;
    OUTLINED_FUNCTION_50();
    if (v18 >> 62)
    {
      OUTLINED_FUNCTION_51_2();
      uint64_t v32 = _CocoaArrayWrapper.endIndex.getter(v18 & 0xC000000000000001LL);
      OUTLINED_FUNCTION_50();
    }

    else
    {
      uint64_t v32 = *(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFF8LL));
    }

    if (v32 == 1)
    {
      INPerson.hasHandleLabel.getter();
      if ((v33 & 1) != 0)
      {
        uint64_t v34 = (void *)((char *)v1
                       + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *v1 + 40));
        uint64_t v35 = v34[3];
        uint64_t v36 = v34[4];
        __swift_project_boxed_opaque_existential_1(v34, v35);
        char v37 = DeviceState.isAuthenticatedForPhone.getter(v35, v36);
        SiriKitDisambiguationList.makeSpeakableHandleLabels(deviceIsLocked:)((v37 & 1) == 0);
        uint64_t v39 = v38;

        v98[0] = v39;
        goto LABEL_28;
      }
    }
  }

  else
  {
    OUTLINED_FUNCTION_50();
  }

  unint64_t v40 = swift_bridgeObjectRetain();
  PhoneContactDisambiguationProperties.isHandleDisambiguation.getter(v40);
  char v42 = v41;
  OUTLINED_FUNCTION_50();
  uint64_t v43 = (void *)((char *)v1 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *v1 + 40));
  uint64_t v44 = v43[3];
  uint64_t v45 = v43[4];
  __swift_project_boxed_opaque_existential_1(v43, v44);
  uint64_t v46 = (DeviceState.isAuthenticatedForPhone.getter(v44, v45) ^ 1) & 1;
  if ((v42 & 1) != 0) {
    SiriKitDisambiguationList.makeSpeakableHandleLabels(deviceIsLocked:)(v46);
  }
  else {
    uint64_t v47 = dispatch thunk of SiriKitDisambiguationList.makeSpeakableListItems(deviceIsLocked:)(v46);
  }
  v98[0] = v47;
LABEL_28:
  char v48 = static PicsUtils.shouldUsePicsDisambiguationFormat(persons:sharedGlobals:)(v18);
  uint64_t v94 = 0LL;
  unint64_t v95 = 0LL;
  if ((v48 & 1) != 0)
  {
    static PicsUtils.splitPicsPerson(persons:speakableStrings:)(v18, v98);
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    unint64_t v54 = v53;
    OUTLINED_FUNCTION_50();
    swift_bridgeObjectRelease();
    v98[0] = v50;
    uint64_t v94 = v52;
    unint64_t v95 = v54;
    uint64_t v55 = one-time initialization token for siriPhone;
    OUTLINED_FUNCTION_36();
    if (v55 != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v56 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v56, (uint64_t)static Logger.siriPhone);
    uint64_t v57 = OUTLINED_FUNCTION_36();
    id v58 = (os_log_s *)Logger.logObject.getter(v57);
    os_log_type_t v60 = static os_log_type_t.debug.getter(v58, v59);
    if (os_log_type_enabled(v58, v60))
    {
      uint64_t v61 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v90 = OUTLINED_FUNCTION_7_0(32LL);
      v97[0] = v90;
      uint64_t v85 = v61;
      *(_DWORD *)uint64_t v61 = 136315138;
      if (v54)
      {
        unint64_t v62 = v54;
      }

      else
      {
        uint64_t v52 = 7104878LL;
        unint64_t v62 = 0xE300000000000000LL;
      }

      uint64_t v84 = v61 + 4;
      OUTLINED_FUNCTION_36();
      uint64_t v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v62, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v84);
      OUTLINED_FUNCTION_85_9();
      swift_bridgeObjectRelease();
      os_log_type_t v63 = v60;
      uint64_t v64 = v85;
      _os_log_impl(&dword_0, v58, v63, "PLUS contact %s is detected", v85, 0xCu);
      uint64_t v65 = v90;
      swift_arrayDestroy(v90, 1LL);
      OUTLINED_FUNCTION_0_2(v65);
      OUTLINED_FUNCTION_0_2((uint64_t)v64);
    }

    else
    {

      OUTLINED_FUNCTION_85_9();
    }

    uint64_t v1 = v93;
  }

  else
  {
    OUTLINED_FUNCTION_50();
  }

  __chkstk_darwin();
  *(&v83 - __swift_destroy_boxed_opaque_existential_1(v0 + 4) = (uint64_t)v98;
  *((_BYTE *)&v83 - 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v48 & 1;
  *(&v83 - __swift_destroy_boxed_opaque_existential_1(v0 + 2) = (uint64_t)v1;
  uint64_t v66 = swift_bridgeObjectRetain();
  uint64_t v67 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySSGG_SSs5NeverOTg5038_sSiS2SIgygo_Si6offset_SS7elementtSSs5F11OIegnrzr_TRSiS2SIgygo_Tf1cn_n( v66,  partial apply for closure #2 in PhoneCallBaseCatTemplatingService.makeSpeakableDisambiguationItemListForPhone(disambiguationList:_:));
  OUTLINED_FUNCTION_62();
  uint64_t v68 = v67[2];
  if (v68)
  {
    v97[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v69 = (void *)v97[0];
    uint64_t v70 = v67 + 5;
    do
    {
      uint64_t v71 = *(v70 - 1);
      uint64_t v72 = *v70;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_1_34(v71, v72);
      v97[0] = (uint64_t)v69;
      unint64_t v73 = v69[2];
      if (v73 >= v69[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v69 = (void *)v97[0];
      }

      v70 += 2;
      v69[2] = v73 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))( (unint64_t)v69 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(void *)(v9 + 72) * v73,
        v14,
        v8);
      --v68;
    }

    while (v68);
    OUTLINED_FUNCTION_50();
    uint64_t v1 = v93;
  }

  else
  {
    OUTLINED_FUNCTION_50();
    uint64_t v69 = _swiftEmptyArrayStorage;
  }

  OUTLINED_FUNCTION_25_0((uint64_t)&v94, (uint64_t)v97, 0LL);
  unint64_t v74 = v95;
  if (v95)
  {
    uint64_t v75 = v94;
    swift_bridgeObjectRetain();
    uint64_t v76 = v86;
    SpeakableString.init(print:speak:)(v75, v74, v75, v74);
    uint64_t v77 = v87;
    SpeakableString.init(print:speak:)( 0x747369486C6C6163LL,  0xEB0000000079726FLL,  0x747369486C6C6163LL,  0xEB0000000079726FLL);
    uint64_t v78 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    uint64_t v79 = (uint64_t)v88;
    v78(v88, v76, v8);
    OUTLINED_FUNCTION_7_21(v79);
    uint64_t v80 = v89;
    v78((char *)v89, v77, v8);
    OUTLINED_FUNCTION_7_21(v80);
    OUTLINED_FUNCTION_34_27();
    v81(v69, v79, v80, v91, v92);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_133_1(v80);
    OUTLINED_FUNCTION_133_1(v79);
    uint64_t v82 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v82((uint64_t)v77, v8);
    v82((uint64_t)v76, v8);
  }

  else
  {
    (*(void (**)(void *, uint64_t, uint64_t))(**(void **)((char *)v1
                                                                     + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService
                                                                                 + *v1
                                                                                 + 32))
                                                       + class metadata base offset for PhoneCallCommonCATs))( v69,  v91,  v92);
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_5();
}

uint64_t (*PhoneCallBaseCatTemplatingService.appendVoxContactsReadout(disambiguationList:_:)( uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = (void *)OUTLINED_FUNCTION_0_47((uint64_t)&unk_40D320);
  void v7[2] = a1;
  v7[3] = v3;
  v7[4] = a2;
  v7[5] = a3;
  OUTLINED_FUNCTION_29_3();
  UsoEntity_common_Person.usoPerson.getter();
  OUTLINED_FUNCTION_3_8();
  return partial apply for closure #1 in PhoneCallBaseCatTemplatingService.appendVoxContactsReadout(disambiguationList:_:);
}

uint64_t PhoneCallBaseCatTemplatingService.displayTextCatFamily.getter()
{
  return OUTLINED_FUNCTION_59_12(*(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *v0 + 24));
}

uint64_t PhoneCallBaseCatTemplatingService.phoneCallCommonCats.getter()
{
  return OUTLINED_FUNCTION_59_12(*(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *v0 + 32));
}

void PhoneCallBaseCatTemplatingService.deviceState.getter()
{
}

void PhoneCallBaseCatTemplatingService.appInfoBuilder.getter()
{
}

uint64_t key path setter for PhoneCallBaseCatTemplatingService.nlIntent : <A, B>PhoneCallBaseCatTemplatingService<A, B>( uint64_t a1, void **a2)
{
  return (*(uint64_t (**)(_BYTE *))(class metadata base offset for PhoneCallBaseCatTemplatingService
                                            + **a2
                                            + 96))(v4);
}

void PhoneCallBaseCatTemplatingService.labelTemplating.getter()
{
}

void PhoneCallBaseCatTemplatingService.sharedGlobals.getter()
{
}

uint64_t PhoneCallBaseCatTemplatingService.startCallCats.getter()
{
  return OUTLINED_FUNCTION_59_12(*(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *v0 + 80));
}

uint64_t (*implicit closure #1 in PhoneCallBaseCatTemplatingService.getCallAndCancelButtonText(_:)())()
{
  return partial apply for implicit closure #2 in implicit closure #1 in PhoneCallBaseCatTemplatingService.getCallAndCancelButtonText(_:);
}

uint64_t (*implicit closure #3 in PhoneCallBaseCatTemplatingService.getCallAndCancelButtonText(_:)())()
{
  return partial apply for implicit closure #4 in implicit closure #3 in PhoneCallBaseCatTemplatingService.getCallAndCancelButtonText(_:);
}

void closure #1 in PhoneCallBaseCatTemplatingService.getCallAndCancelButtonText(_:)( uint64_t a1, void (*a2)(void *))
{
  uint64_t v4 = type metadata accessor for PhoneError(0LL);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v16[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>)
                 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v16[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    goto LABEL_4;
  }
  outlined init with copy of Result<TemplatingResult, Error>( a1 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)),  (uint64_t)v9,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  if (v10 == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v9,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
LABEL_4:
    *(void *)uint64_t v6 = 0xD000000000000053LL;
    *((void *)v6 + 1) = 0x800000000034DA50LL;
    *((void *)v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xD000000000000043LL;
    *((void *)v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 3) = 0x800000000034D830LL;
    *((void *)v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 4) = 0xD00000000000001ELL;
    *((void *)v6 + 5) = 0x800000000034DAB0LL;
    *((void *)v6 + 6) = 74LL;
    v6[56] = 0;
    swift_storeEnumTagMultiPayload(v6, v4, 2LL);
    lazy protocol witness table accessor for type UUID and conformance UUID( (unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError,  type metadata accessor for PhoneError,  (uint64_t)&protocol conformance descriptor for PhoneError);
    uint64_t v12 = swift_allocError(v4, v11, 0LL, 0LL);
    PhoneError.logged()(v13);
    outlined destroy of PhoneError((uint64_t)v6);
    v16[0] = v12;
    memset(&v16[1], 0, 24);
    char v17 = 1;
    a2(v16);
    swift_errorRelease(v12);
    return;
  }

  __chkstk_darwin();
  *(&v15 - __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v14;
  _ss6ResultO7flatMapyAByqd__q_GADxXERi_d__lF11SiriKitFlow010TemplatingA0V_s5Error_pSS4call_SS6canceltTg5( (void (*)(_OWORD *__return_ptr, char *))partial apply for closure #1 in closure #1 in PhoneCallBaseCatTemplatingService.getCallAndCancelButtonText(_:),  (uint64_t)v16);
  a2(v16);
  outlined release of Result<(call: String, cancel: String), Error>((uint64_t)v16);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v9,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
}

uint64_t closure #1 in closure #1 in PhoneCallBaseCatTemplatingService.getCallAndCancelButtonText(_:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  outlined init with copy of Result<TemplatingResult, Error>( a1,  (uint64_t)v10,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  uint64_t result = swift_getEnumCaseMultiPayload(v10, v8);
  int v12 = result;
  if ((_DWORD)result == 1)
  {
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = (void *)*v10;
  }

  else
  {
    (*(void (**)(char *, void *, uint64_t))(v5 + 32))(v7, v10, v4);
    uint64_t v16 = closure #1 in closure #1 in closure #1 in PhoneCallBaseCatTemplatingService.getCallAndCancelButtonText(_:)();
    uint64_t v13 = v17;
    uint64_t v14 = v18;
    uint64_t v15 = v19;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  *(void *)a2 = v16;
  *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v13;
  *(void *)(a2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v14;
  *(void *)(a2 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v15;
  *(_BYTE *)(a2 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v12 == 1;
  return result;
}

void *closure #1 in closure #1 in closure #1 in PhoneCallBaseCatTemplatingService.getCallAndCancelButtonText(_:)()
{
  uint64_t result = (void *)((uint64_t (*)(void))TemplatingResult.print.getter)();
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t v2 = result[4];
    swift_bridgeObjectRetain(result[5]);
    uint64_t v3 = swift_bridgeObjectRelease(v1);
    uint64_t result = (void *)TemplatingResult.print.getter(v3);
    if (result[2])
    {
      uint64_t v4 = result;
      swift_bridgeObjectRetain(result[5]);
      swift_bridgeObjectRelease(v4);
      return (void *)v2;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t closure #1 in PhoneCallBaseCatTemplatingService.makeOpenAppDialog(app:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void v8[6] = a8;
  v8[7] = v14;
  v8[4] = a6;
  v8[5] = a7;
  v8[2] = a4;
  v8[3] = a5;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  v8[8] = v9;
  v8[9] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for TemplatingResult(0LL);
  v8[10] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v8[11] = v11;
  v8[12] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  v8[13] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(closure #1 in PhoneCallBaseCatTemplatingService.makeOpenAppDialog(app:_:), 0LL, 0LL);
}

uint64_t closure #1 in PhoneCallBaseCatTemplatingService.makeOpenAppDialog(app:_:)()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[3];
  uint64_t v3 = (void *)(v0[2]
                + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *(void *)v0[2] + 64));
  uint64_t v4 = v3[3];
  uint64_t v5 = v3[4];
  OUTLINED_FUNCTION_49_0(v3);
  swift_bridgeObjectRetain();
  Swift::Bool v6 = App.isFirstParty()();
  AppDisplayInfo.init(displayName:isFirstParty:)(v2, v1, v6);
  uint64_t v7 = type metadata accessor for AppDisplayInfo(0LL);
  OUTLINED_FUNCTION_21_42(v7);
  uint64_t v8 = *(int **)(v5 + 24);
  uint64_t v11 = (int *)((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  v0[14] = v9;
  *uint64_t v9 = v0;
  v9[1] = closure #1 in PhoneCallBaseCatTemplatingService.makeOpenAppDialog(app:_:);
  return ((uint64_t (*)(void, uint64_t, uint64_t))v11)(v0[13], v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 96);
  Swift::Bool v6 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v8 = *(void *)(v0 + 64);
  uint64_t v9 = *(uint64_t (**)(uint64_t))(v0 + 48);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v11 = OUTLINED_FUNCTION_0_47(v10);
  *(_OWORD *)(v11 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D870;
  *(void *)(v11 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v1;
  *(void *)(v11 + 40) = v2;
  TemplatingResult.init(templateIdentifier:speak:print:)(0LL, 0xE000000000000000LL, _swiftEmptyArrayStorage, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v6, v3, v5);
  swift_storeEnumTagMultiPayload(v6, v8, 0LL);
  uint64_t v12 = v9(v6);
  OUTLINED_FUNCTION_88_1(v12, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  OUTLINED_FUNCTION_82_13();
  swift_task_dealloc(v7);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void (*v5)(void *);
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void **)(v0 + 72);
  uint64_t v5 = *(void (**)(void *))(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  *uint64_t v3 = v1;
  OUTLINED_FUNCTION_21((uint64_t)v3, v2);
  swift_errorRetain(v1);
  v5(v3);
  swift_errorRelease(v1);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v3,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_82_13();
  swift_task_dealloc(v4);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in PhoneCallBaseCatTemplatingService.makeOpenAppDialog(app:_:)(uint64_t a1, uint64_t a2)
{
  Swift::Bool v6 = *(void **)v3;
  uint64_t v7 = *(void *)(*(void *)v3 + 112LL);
  *(void *)(*(void *)v3 + 12OUTLINED_FUNCTION_25_0( v0 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent7Builder_callGroups,  (uint64_t)v1, 0LL) = v2;
  swift_task_dealloc(v7);
  uint64_t v8 = v6[13];
  if (v2)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v8,  &demangling cache variable for type metadata for AppDisplayInfo?);
    uint64_t v9 = closure #1 in PhoneCallBaseCatTemplatingService.makeOpenAppDialog(app:_:);
  }

  else
  {
    v6[16] = a2;
    v6[17] = a1;
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v8,  &demangling cache variable for type metadata for AppDisplayInfo?);
    uint64_t v9 = closure #1 in PhoneCallBaseCatTemplatingService.makeOpenAppDialog(app:_:);
  }

  return swift_task_switch(v9, 0LL, 0LL);
}

uint64_t closure #2 in PhoneCallBaseCatTemplatingService.makeSpeakableDisambiguationItemListForPhone(disambiguationList:_:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  if (__OFADD__(result, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = a2;
    if (result + 1 == *(void *)(*(void *)a4 + 16LL) && (a5 & 1) == 0)
    {
      swift_bridgeObjectRetain(a3);
    }

    else
    {
      uint64_t v7 = (void *)((char *)a6
                    + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a6 + 16));
      uint64_t v8 = *v7;
      uint64_t v9 = (void *)v7[1];
      swift_bridgeObjectRetain(a3);
      v10._uint64_t countAndFlagsBits = v8;
      v10._object = v9;
      String.append(_:)(v10);
      return a2;
    }

    return v6;
  }

  return result;
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySSGG_SSs5NeverOTg5038_sSiS2SIgygo_Si6offset_SS7elementtSSs5F11OIegnrzr_TRSiS2SIgygo_Tf1cn_n( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v3)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v7 = *(v5 - 1);
      uint64_t v6 = *v5;
      swift_bridgeObjectRetain();
      uint64_t v8 = a2(v4, v7, v6);
      uint64_t v10 = v9;
      swift_bridgeObjectRelease();
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      if (v11 >= _swiftEmptyArrayStorage[3] >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v4;
      v5 += 2;
      _swiftEmptyArrayStorage[2] = v11 + 1;
      uint64_t v12 = &_swiftEmptyArrayStorage[2 * v11];
      v12[4] = v8;
      v12[5] = v10;
    }

    while (v3 != v4);
  }

  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t closure #1 in PhoneCallBaseCatTemplatingService.appendVoxContactsReadout(disambiguationList:_:)( uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin();
  uint64_t v47 = (uint64_t)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v42 - v13;
  uint64_t v15 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v48 = *(void *)(v15 - 8);
  uint64_t v49 = v15;
  uint64_t v16 = *(void *)(v48 + 64);
  __chkstk_darwin();
  uint64_t v46 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin();
  uint64_t v50 = a2;
  uint64_t v51 = (char *)&v42 - v18;
  if ((SiriKitDisambiguationList.shouldReadItemsInVox.getter(v17) & 1) != 0)
  {
    uint64_t v19 = (void *)((char *)a3
                   + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a3 + 40));
    uint64_t v45 = v14;
    uint64_t v20 = a5;
    uint64_t v21 = v19[3];
    uint64_t v22 = v19[4];
    __swift_project_boxed_opaque_existential_1(v19, v21);
    uint64_t v23 = v22;
    uint64_t v24 = v20;
    uint64_t v25 = (uint64_t)v45;
    if ((DeviceState.isVox.getter(v21, v23) & 1) != 0)
    {
      outlined init with copy of Result<TemplatingResult, Error>( a1,  v25,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
      if (swift_getEnumCaseMultiPayload(v25, v10) != 1)
      {
        uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 32);
        uint64_t v44 = a4;
        uint64_t v27 = v48;
        uint64_t v28 = v51;
        uint64_t v29 = a1;
        uint64_t v30 = v49;
        v43(v51, v25, v49);
        uint64_t v31 = v29;
        uint64_t v32 = v47;
        outlined init with copy of Result<TemplatingResult, Error>( v31,  v47,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
        uint64_t v33 = v27;
        uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
        uint64_t v35 = v46;
        v34(v46, v28, v30);
        uint64_t v36 = *(unsigned __int8 *)(v11 + 80);
        uint64_t v37 = (v36 + 32) & ~v36;
        uint64_t v38 = *(unsigned __int8 *)(v33 + 80);
        uint64_t v39 = v33;
        uint64_t v40 = (v12 + v38 + v37) & ~v38;
        uint64_t v41 = swift_allocObject(&unk_40D4D0, v40 + v16, v36 | v38 | 7);
        *(void *)(v41 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v44;
        *(void *)(v41 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v24;
        outlined init with take of Result<TemplatingResult, Error>(v32, v41 + v37);
        v43((char *)(v41 + v40), (uint64_t)v35, v30);
        swift_retain();
        PhoneCallBaseCatTemplatingService.makeSpeakableDisambiguationItemListForPhone(disambiguationList:_:)();
        swift_release(v41);
        return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v51, v30);
      }

      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( v25,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    }
  }

  return a4(a1);
}

void *closure #1 in closure #1 in PhoneCallBaseCatTemplatingService.appendVoxContactsReadout(disambiguationList:_:)( uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a4;
  uint64_t v44 = a3;
  uint64_t v45 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v9 = (uint64_t *)((char *)&v40 - v8);
  uint64_t v10 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v41 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v40 - v13;
  __chkstk_darwin();
  uint64_t v16 = (char *)&v40 - v15;
  outlined init with copy of Result<TemplatingResult, Error>( a1,  (uint64_t)v9,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  uint64_t v42 = v5;
  if (swift_getEnumCaseMultiPayload(v9, v5) == 1)
  {
    uint64_t v17 = *v9;
    uint64_t v46 = v17;
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl(&v46, v18, &protocol self-conformance witness table for Error);
    swift_errorRelease(v17);
    return (void *)v45(v43);
  }

  uint64_t v20 = *(void (**)(char *, uint64_t *, uint64_t))(v11 + 32);
  v20(v14, v9, v10);
  uint64_t v21 = ((uint64_t (*)(char *, char *, uint64_t))v20)(v16, v14, v10);
  uint64_t v22 = TemplatingResult.templateIdentifier.getter(v21);
  uint64_t v24 = v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v26 = swift_allocObject(v25, 48LL, 7LL);
  *(_OWORD *)(v26 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D870;
  uint64_t result = (void *)TemplatingResult.speak.getter(v26);
  if (!result[2])
  {
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v27 = v11;
  uint64_t v40 = v24;
  uint64_t v43 = v22;
  uint64_t v28 = result[4];
  uint64_t v29 = result[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v46 = v28;
  uint64_t v47 = v29;
  v30._uint64_t countAndFlagsBits = 32LL;
  v30._object = (void *)0xE100000000000000LL;
  String.append(_:)(v30);
  uint64_t result = (void *)TemplatingResult.speak.getter(v31);
  if (!result[2])
  {
LABEL_8:
    __break(1u);
    return result;
  }

  uint64_t v33 = result[4];
  uint64_t v32 = (void *)result[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34._uint64_t countAndFlagsBits = v33;
  v34._object = v32;
  String.append(_:)(v34);
  uint64_t v35 = swift_bridgeObjectRelease();
  uint64_t v36 = v47;
  *(void *)(v26 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v46;
  *(void *)(v26 + 40) = v36;
  uint64_t v37 = TemplatingResult.print.getter(v35);
  uint64_t v38 = v41;
  TemplatingResult.init(templateIdentifier:speak:print:)(v43, v40, v26, v37);
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v7, v38, v10);
  swift_storeEnumTagMultiPayload(v7, v42, 0LL);
  v45((uint64_t)v7);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v7,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v27 + 8);
  v39(v38, v10);
  return (void *)((uint64_t (*)(char *, uint64_t))v39)(v16, v10);
}

void PhoneCallBaseCatTemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:)()
{
}

void PhoneCallBaseCatTemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:deviceState:localContext:)( uint64_t a1, uint64_t a2)
{
}

uint64_t outlined init with copy of PhoneError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PhoneError(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t PhoneCallBaseCatTemplatingService.__ivar_destroyer()
{
  return swift_release(*(void *)(v0 + *(void *)(v8 + 80)));
}

uint64_t PhoneCallBaseCatTemplatingService.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 256LL, 7LL);
}

uint64_t protocol witness for PhoneCallCommonDisplayTemplating.faceTimeSettings(_:) in conformance PhoneCallBaseCatTemplatingService<A, B>()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PhoneCallBaseCatTemplatingService + **v0 + 120))();
}

uint64_t protocol witness for PhoneCallCommonDisplayTemplating.callButtonText(_:) in conformance PhoneCallBaseCatTemplatingService<A, B>()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PhoneCallBaseCatTemplatingService + **v0 + 128))();
}

uint64_t protocol witness for PhoneCallCommonDisplayTemplating.cancelButtonText(_:) in conformance PhoneCallBaseCatTemplatingService<A, B>()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PhoneCallBaseCatTemplatingService + **v0 + 136))();
}

uint64_t protocol witness for PhoneCallCommonDisplayTemplating.getCallAndCancelButtonText(_:) in conformance PhoneCallBaseCatTemplatingService<A, B>()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PhoneCallBaseCatTemplatingService + **v0 + 144))();
}

uint64_t protocol witness for PhoneCallCommonDisplayTemplating.emergencyCallSashTitle(_:) in conformance PhoneCallBaseCatTemplatingService<A, B>()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PhoneCallBaseCatTemplatingService + **v0 + 152))();
}

uint64_t protocol witness for PhoneCallCommonDisplayTemplating.snippetDisplayHandleLabelWithType(handleLabel:handleType:_:) in conformance PhoneCallBaseCatTemplatingService<A, B>()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PhoneCallBaseCatTemplatingService + **v0 + 160))();
}

uint64_t protocol witness for PhoneCallCommonDisplayTemplating.emergencyServicesDisplayText(_:) in conformance PhoneCallBaseCatTemplatingService<A, B>()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PhoneCallBaseCatTemplatingService + **v0 + 168))();
}

uint64_t protocol witness for PhoneCallCommonDisplayTemplating.formatPhoneNumber(countryCode:phoneNumber:_:) in conformance PhoneCallBaseCatTemplatingService<A, B>()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PhoneCallBaseCatTemplatingService + **v0 + 176))();
}

uint64_t protocol witness for PhoneCallCommonDisplayTemplating.makeOpenAppDialog(app:_:) in conformance PhoneCallBaseCatTemplatingService<A, B>()
{
  return dispatch thunk of DucTemplatingService.makeOpenAppDialog(app:_:)();
}

uint64_t protocol witness for PhoneCallCommonDisplayTemplating.tryWithApp(app:_:) in conformance PhoneCallBaseCatTemplatingService<A, B>()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PhoneCallBaseCatTemplatingService + **v0 + 184))();
}

uint64_t protocol witness for PhoneCallCommonDisplayTemplating.updateSettings(_:) in conformance PhoneCallBaseCatTemplatingService<A, B>()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PhoneCallBaseCatTemplatingService + **v0 + 192))();
}

uint64_t type metadata accessor for PhoneCallBaseCatTemplatingService( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for PhoneCallBaseCatTemplatingService);
}

uint64_t sub_1F502C()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t partial apply for closure #1 in PhoneCallBaseCatTemplatingService.makeOpenAppDialog(app:_:)( uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc(dword_43921C);
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = protocol witness for Action.run() in conformance PlayVoiceMailAction;
  return closure #1 in PhoneCallBaseCatTemplatingService.makeOpenAppDialog(app:_:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t outlined assign with take of PhoneCallNLIntent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallNLIntent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1F5158()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void partial apply for closure #1 in PhoneCallBaseCatTemplatingService.getCallAndCancelButtonText(_:)( uint64_t a1)
{
}

uint64_t sub_1F5180()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t partial apply for closure #1 in PhoneCallBaseCatTemplatingService.appendVoxContactsReadout(disambiguationList:_:)( uint64_t a1)
{
  return closure #1 in PhoneCallBaseCatTemplatingService.appendVoxContactsReadout(disambiguationList:_:)( a1,  *(void *)(v1 + 16),  *(void **)(v1 + 24),  *(uint64_t (**)(void))(v1 + 32),  *(void *)(v1 + 40));
}

void sub_1F51BC(void **a1)
{
}

uint64_t sub_1F51F0()
{
  return 16LL;
}

__n128 sub_1F51FC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for PhoneCallBaseCatTemplatingService(uint64_t a1)
{
  v2[0] = &unk_335B48;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[3] = &unk_335B60;
  v2[4] = &unk_335B60;
  v2[5] = &unk_335B78;
  v2[6] = &unk_335B60;
  v2[7] = &unk_335B60;
  _BYTE v2[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2( a1,  0LL,  9LL,  v2,  class metadata base offset for PhoneCallBaseCatTemplatingService + a1 + 16);
}

uint64_t partial apply for closure #2 in PhoneCallBaseCatTemplatingService.makeSpeakableDisambiguationItemListForPhone(disambiguationList:_:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #2 in PhoneCallBaseCatTemplatingService.makeSpeakableDisambiguationItemListForPhone(disambiguationList:_:)( a1,  a2,  a3,  *(void *)(v3 + 16),  *(_BYTE *)(v3 + 24),  *(void **)(v3 + 32));
}

void specialized PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a19 = v24;
  a20 = v25;
  uint64_t v27 = v26;
  uint64_t v55 = v28;
  uint64_t v30 = v29;
  OUTLINED_FUNCTION_54_16(v31, v32);
  uint64_t v33 = a22;
  uint64_t v34 = a23;
  uint64_t v35 = a21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DucTemplatingLocalContext?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v37 = *(void *)(OUTLINED_FUNCTION_20_49(v36, v54) - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_20_0();
  v57[3] = v33;
  v57[4] = v34;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v57);
  OUTLINED_FUNCTION_41_28((uint64_t)boxed_opaque_existential_1);
  v56[3] = type metadata accessor for AppInfoBuilder();
  v56[4] = &protocol witness table for AppInfoBuilder;
  v56[0] = v27;
  *(double *)&__int128 v39 = OUTLINED_FUNCTION_4_82();
  *(_OWORD *)uint64_t v40 = v39;
  *(_OWORD *)(v40 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v39;
  *(void *)(v40 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
  OUTLINED_FUNCTION_26_41();
  OUTLINED_FUNCTION_32_35();
  OUTLINED_FUNCTION_56_17();
  OUTLINED_FUNCTION_16_47();
  *(void *)(v35 + v41) = v30;
  OUTLINED_FUNCTION_34_27();
  *(void *)(v35 + v4__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v55;
  OUTLINED_FUNCTION_44_21();
  outlined init with copy of SharedGlobalsProviding((uint64_t)v56, v43);
  OUTLINED_FUNCTION_43_18();
  outlined init with copy of SharedGlobalsProviding((uint64_t)v57, v44);
  OUTLINED_FUNCTION_45_21();
  *(void *)(v35 + v46) = *(void *)(v45 - 256);
  swift_retain();
  UsoEntity_common_Person.usoPerson.getter();
  OUTLINED_FUNCTION_29_3();
  OUTLINED_FUNCTION_122();
  uint64_t v47 = OUTLINED_FUNCTION_29_34();
  uint64_t v48 = Locale.identifier.getter(v47);
  OUTLINED_FUNCTION_14_54(v48, v49);
  OUTLINED_FUNCTION_12_68();
  OUTLINED_FUNCTION_40_22();
  OUTLINED_FUNCTION_63_15(*(uint64_t (**)(uint64_t, void))(v37 + 8));
  OUTLINED_FUNCTION_77_15();
  lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type INIntentSlotValueType and conformance INIntentSlotValueType,  (uint64_t (*)(uint64_t))type metadata accessor for INIntentSlotValueType,  (uint64_t)&protocol conformance descriptor for INIntentSlotValueType);
  OUTLINED_FUNCTION_83_15((uint64_t)_swiftEmptyArrayStorage, v51, v52, v50);
  OUTLINED_FUNCTION_22_39();
  OUTLINED_FUNCTION_76_15();
  uint64_t v53 = OUTLINED_FUNCTION_78_16();
  OUTLINED_FUNCTION_6_79(v53);
  OUTLINED_FUNCTION_45_14((uint64_t)&a11);
  OUTLINED_FUNCTION_45_14((uint64_t)&a16);
  OUTLINED_FUNCTION_45_14((uint64_t)&a17);
  OUTLINED_FUNCTION_18();
  __swift_destroy_boxed_opaque_existential_1(v56);
  __swift_destroy_boxed_opaque_existential_1(v23);
  OUTLINED_FUNCTION_7_5();
}

void specialized PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a19 = v27;
  a20 = v28;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v61 = v33;
  uint64_t v63 = v34;
  OUTLINED_FUNCTION_54_16(v35, v36);
  uint64_t v38 = a24;
  uint64_t v37 = a25;
  uint64_t v40 = a21;
  uint64_t v39 = a22;
  uint64_t v41 = a26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DucTemplatingLocalContext?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v62 = *(void *)(OUTLINED_FUNCTION_20_49(v42, v60) - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_20_0();
  v65[3] = v37;
  v65[4] = v41;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v65);
  OUTLINED_FUNCTION_41_28((uint64_t)boxed_opaque_existential_1);
  v64[3] = &type metadata for LabelTemplatesProvider;
  v64[4] = &protocol witness table for LabelTemplatesProvider;
  uint64_t v44 = (void *)OUTLINED_FUNCTION_0_47((uint64_t)&unk_40D4A8);
  v64[0] = v44;
  v44[2] = v32;
  v44[3] = v30;
  v44[4] = v40;
  v44[5] = v39;
  *(double *)&__int128 v45 = OUTLINED_FUNCTION_4_82();
  *(void *)(v46 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
  *(_OWORD *)uint64_t v46 = v45;
  *(_OWORD *)(v46 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v45;
  OUTLINED_FUNCTION_26_41();
  OUTLINED_FUNCTION_32_35();
  OUTLINED_FUNCTION_56_17();
  OUTLINED_FUNCTION_16_47();
  *(void *)(v38 + v47) = v63;
  OUTLINED_FUNCTION_34_27();
  *(void *)(v38 + v4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v61;
  OUTLINED_FUNCTION_44_21();
  outlined init with copy of SharedGlobalsProviding((uint64_t)v65, v49);
  OUTLINED_FUNCTION_43_18();
  outlined init with copy of SharedGlobalsProviding((uint64_t)v64, v50);
  OUTLINED_FUNCTION_45_21();
  *(void *)(v38 + v5__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(void *)(v51 - 256);
  swift_retain();
  swift_retain();
  UsoEntity_common_Person.usoPerson.getter();
  OUTLINED_FUNCTION_122();
  uint64_t v53 = OUTLINED_FUNCTION_29_34();
  uint64_t v54 = Locale.identifier.getter(v53);
  OUTLINED_FUNCTION_14_54(v54, v55);
  OUTLINED_FUNCTION_12_68();
  OUTLINED_FUNCTION_40_22();
  OUTLINED_FUNCTION_63_15(*(uint64_t (**)(uint64_t, void))(v62 + 8));
  OUTLINED_FUNCTION_77_15();
  lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type INIntentSlotValueType and conformance INIntentSlotValueType,  (uint64_t (*)(uint64_t))type metadata accessor for INIntentSlotValueType,  (uint64_t)&protocol conformance descriptor for INIntentSlotValueType);
  OUTLINED_FUNCTION_83_15((uint64_t)_swiftEmptyArrayStorage, v57, v58, v56);
  OUTLINED_FUNCTION_22_39();
  OUTLINED_FUNCTION_76_15();
  uint64_t v59 = OUTLINED_FUNCTION_78_16();
  OUTLINED_FUNCTION_6_79(v59);
  OUTLINED_FUNCTION_45_14((uint64_t)&a16);
  swift_release(v61);
  OUTLINED_FUNCTION_45_14((uint64_t)&a17);
  __swift_destroy_boxed_opaque_existential_1(v64);
  OUTLINED_FUNCTION_18();
  __swift_destroy_boxed_opaque_existential_1(v26);
  OUTLINED_FUNCTION_7_5();
}

uint64_t sub_1F5670()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1F569C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  OUTLINED_FUNCTION_37();
  if (swift_getEnumCaseMultiPayload(v0 + v4, v1) == 1)
  {
    swift_errorRelease(*(void *)(v0 + v4));
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  }

  else
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v10(v0 + v4, v6);
  }

  uint64_t v11 = (v4 + v5 + v8) & ~v8;
  uint64_t v12 = v11 + v9;
  v10(v0 + v11, v6);
  return swift_deallocObject(v0, v12, v3 | v8 | 7);
}

void *partial apply for closure #1 in closure #1 in PhoneCallBaseCatTemplatingService.appendVoxContactsReadout(disambiguationList:_:)( uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL);
  type metadata accessor for TemplatingResult(0LL);
  return closure #1 in closure #1 in PhoneCallBaseCatTemplatingService.appendVoxContactsReadout(disambiguationList:_:)( a1,  *(uint64_t (**)(uint64_t))(v1 + 16),  *(void *)(v1 + 24),  v1 + v4);
}

uint64_t partial apply for closure #1 in closure #1 in PhoneCallBaseCatTemplatingService.getCallAndCancelButtonText(_:)@<X0>( uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in PhoneCallBaseCatTemplatingService.getCallAndCancelButtonText(_:)( *(void *)(v1 + 16),  a1);
}

uint64_t outlined release of Result<(call: String, cancel: String), Error>(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of Result<(call: String, cancel: String), Error>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  swift_bridgeObjectRelease(a2);
  return swift_bridgeObjectRelease(a4);
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in PhoneCallBaseCatTemplatingService.getCallAndCancelButtonText(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PhoneCallBaseCatTemplatingService + *v0 + 136))();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in PhoneCallBaseCatTemplatingService.getCallAndCancelButtonText(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PhoneCallBaseCatTemplatingService + *v0 + 128))();
}

__n128 OUTLINED_FUNCTION_0_80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  return result;
}

double OUTLINED_FUNCTION_4_82()
{
  uint64_t v1 = (void *)((char *)v0 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *v0 + 16));
  *uint64_t v1 = 0x3D65737561705C1BLL;
  v1[1] = 0xEC0000005C303532LL;
  return 0.0;
}

uint64_t OUTLINED_FUNCTION_6_79(uint64_t a1)
{
  uint64_t v5 = *(void *)(v4 - 304);
  __swift_storeEnumTagSinglePayload(v5, 1LL, 1LL, a1);
  return DucTemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:deviceState:localContext:)( *(void *)(v4 - 296),  *(void *)(v4 - 288),  v1,  v2,  v3,  v4 - 208,  v4 - 264,  v5);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_12_68()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v1 - 264,  v1 - 224,  0LL,  0LL,  0LL,  1LL,  v0,  v0);
}

  ;
}

unint64_t OUTLINED_FUNCTION_14_54(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 - 20__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a1;
  *(void *)(v2 - 200) = a2;
  *(void *)(v2 - 26__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 45LL;
  *(void *)(v2 - 256) = 0xE100000000000000LL;
  *(void *)(v2 - 22__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 95LL;
  *(void *)(v2 - 2outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = 0xE100000000000000LL;
  return lazy protocol witness table accessor for type String and conformance String();
}

uint64_t OUTLINED_FUNCTION_15_60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(v4, 1LL, 1LL, a4);
}

uint64_t OUTLINED_FUNCTION_16_47()
{
  return outlined init with take of AppSelectionSignalComponent( (__int128 *)(v2 - 208),  (uint64_t)v1 + *(void *)(*(void *)(v0 + 3792) + *v1 + 40LL));
}

  ;
}

uint64_t OUTLINED_FUNCTION_20_49@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 30__swift_destroy_boxed_opaque_existential_1(v0 + 4) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return type metadata accessor for Locale(0LL);
}

uint64_t OUTLINED_FUNCTION_22_39()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

void OUTLINED_FUNCTION_26_41()
{
}

uint64_t OUTLINED_FUNCTION_28_42()
{
  return type metadata accessor for Locale(0LL);
}

uint64_t OUTLINED_FUNCTION_29_34()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return dispatch thunk of DeviceState.siriLocale.getter(v1, v2);
}

uint64_t OUTLINED_FUNCTION_32_35()
{
  return swift_retain();
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_41_28(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32LL))(a1, v1, v2);
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_46_25()
{
  return swift_storeEnumTagMultiPayload(v0, *(void *)(v1 - 104), 0LL);
}

uint64_t OUTLINED_FUNCTION_48_19(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_stdlib_reportUnimplementedInitializer(a1, 61LL, a3, 101LL, 0LL);
}

unint64_t OUTLINED_FUNCTION_49_20()
{
  return 0xD000000000000012LL;
}

uint64_t OUTLINED_FUNCTION_50_20@<X0>(uint64_t a1@<X8>)
{
  return v2 + *(void *)(v1 + a1 + 56);
}

uint64_t OUTLINED_FUNCTION_54_16(uint64_t result, uint64_t a2)
{
  *(void *)(v2 - 28__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a2;
  *(void *)(v2 - 296) = result;
  return result;
}

void OUTLINED_FUNCTION_55_17(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

uint64_t OUTLINED_FUNCTION_56_17()
{
  return v2(v0, v1);
}

uint64_t OUTLINED_FUNCTION_63_15@<X0>(uint64_t (*a1)(uint64_t, void)@<X8>)
{
  return a1(v1, *(void *)(v2 - 312));
}

uint64_t OUTLINED_FUNCTION_67_17()
{
  return (*(uint64_t (**)(uint64_t))(v1 - 88))(v0);
}

void OUTLINED_FUNCTION_69_16(uint64_t a1, uint64_t *a2)
{
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_76_15()
{
}

void OUTLINED_FUNCTION_77_15()
{
}

uint64_t OUTLINED_FUNCTION_78_16()
{
  return type metadata accessor for DucTemplatingLocalContext(0LL);
}

uint64_t OUTLINED_FUNCTION_82_13()
{
  return swift_task_dealloc(*(void *)(v0 + 104));
}

uint64_t OUTLINED_FUNCTION_83_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Dictionary.init(dictionaryLiteral:)(a1, v4, v5, a4);
}

uint64_t OUTLINED_FUNCTION_85_9()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t OngoingCallErrorFlowFactory.currentCall.getter()
{
  return swift_unknownObjectRetain(*v0);
}

uint64_t OngoingCallErrorFlowFactory.selfAdd()()
{
  uint64_t v1 = (_OWORD *)swift_allocObject(&unk_40D530, 80LL, 7LL);
  __int128 v2 = v10[1];
  v1[1] = v10[0];
  v1[2] = v2;
  __int128 v3 = v10[3];
  v1[3] = v10[2];
  v1[4] = v3;
  uint64_t v4 = swift_retain();
  static DialogPhase.error.getter(v4);
  outlined init with copy of SignalProviding((uint64_t)(v0 + 1), (uint64_t)v10);
  uint64_t v5 = type metadata accessor for DialogOutputFactory(0LL);
  uint64_t v6 = OUTLINED_FUNCTION_15_2(v5);
  OUTLINED_FUNCTION_8_61();
  uint64_t v8 = OUTLINED_FUNCTION_7_83(v7);
  swift_release(v1);
  swift_release(v6);
  return v8;
}

uint64_t closure #1 in OngoingCallErrorFlowFactory.selfAdd()(uint64_t a1)
{
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  return swift_task_switch(closure #1 in OngoingCallErrorFlowFactory.selfAdd(), 0LL, 0LL);
}

uint64_t closure #1 in OngoingCallErrorFlowFactory.selfAdd()()
{
  uint64_t v2 = SPHCall.toPhoneCallRecord()();
  *(void *)(v1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v2;
  __int128 v3 = (void *)OUTLINED_FUNCTION_10_2(*(void *)(class metadata base offset for AddCallParticipantCATsSimple
                                                  + *v0
                                                  + 112));
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v3;
  *__int128 v3 = v1;
  v3[1] = closure #1 in OngoingCallErrorFlowFactory.selfAdd();
  return OUTLINED_FUNCTION_8_3(v2, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  OUTLINED_FUNCTION_29();
  uint64_t v4 = v2[4];
  uint64_t v5 = *v3;
  *uint64_t v6 = v5;
  v2[5] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return OUTLINED_FUNCTION_9_11((uint64_t)closure #1 in OngoingCallErrorFlowFactory.selfAdd(), 0LL, 0LL);
  }
  swift_release(v2[3]);
  return OUTLINED_FUNCTION_8_3(v0, *(uint64_t (**)(void))(v5 + 8));
}

{
  uint64_t v0;
  swift_release(*(void *)(v0 + 24));
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t outlined init with copy of OngoingCallErrorFlowFactory(__int128 *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1F5EF0()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t partial apply for closure #1 in OngoingCallErrorFlowFactory.selfAdd()()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_4392AC);
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in OngoingCallErrorFlowFactory.selfAdd();
  return closure #1 in OngoingCallErrorFlowFactory.selfAdd()(v0 + 16);
}

uint64_t OngoingCallErrorFlowFactory.participantAlreadyActive(person:)(void *a1)
{
  uint64_t v3 = type metadata accessor for Locale(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v7 = v6 - v5;
  type metadata accessor for PhonePerson(0LL);
  uint64_t v8 = *(void *)(v1 + 40);
  uint64_t v9 = *(void *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 16), v8);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v9 + 8))(&v23, v8, v9);
  uint64_t v10 = *((void *)&v24 + 1);
  uint64_t v11 = v25;
  __swift_project_boxed_opaque_existential_1(&v23, *((uint64_t *)&v24 + 1));
  dispatch thunk of DeviceState.siriLocale.getter(v10, v11);
  static PhonePerson.make(phonePerson:options:locale:)(a1, 0, v7);
  uint64_t v13 = v12;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  __swift_destroy_boxed_opaque_existential_1(&v23);
  outlined init with copy of OngoingCallErrorFlowFactory((__int128 *)v1, (uint64_t)&v23);
  uint64_t v14 = swift_allocObject(&unk_40D558, 88LL, 7LL);
  __int128 v15 = v24;
  *(_OWORD *)(v14 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v23;
  *(_OWORD *)(v14 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v15;
  __int128 v16 = v26;
  *(_OWORD *)(v14 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v25;
  *(_OWORD *)(v14 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v16;
  *(void *)(v14 + 80) = v13;
  swift_retain();
  uint64_t v17 = swift_retain();
  static DialogPhase.error.getter(v17);
  outlined init with copy of SignalProviding(v1 + 16, (uint64_t)&v23);
  uint64_t v18 = type metadata accessor for DialogOutputFactory(0LL);
  uint64_t v19 = OUTLINED_FUNCTION_15_2(v18);
  OUTLINED_FUNCTION_8_61();
  uint64_t v21 = OUTLINED_FUNCTION_7_83(v20);
  swift_release(v13);
  swift_release(v14);
  swift_release(v19);
  return v21;
}

uint64_t closure #1 in OngoingCallErrorFlowFactory.participantAlreadyActive(person:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v2 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a2;
  return swift_task_switch(closure #1 in OngoingCallErrorFlowFactory.participantAlreadyActive(person:), 0LL, 0LL);
}

uint64_t closure #1 in OngoingCallErrorFlowFactory.participantAlreadyActive(person:)()
{
  uint64_t v2 = SPHCall.toPhoneCallRecord()();
  v1[4] = v2;
  uint64_t v3 = (void *)OUTLINED_FUNCTION_10_2(*(void *)(class metadata base offset for AddCallParticipantCATsSimple
                                                  + *v0
                                                  + 64));
  v1[5] = v3;
  *uint64_t v3 = v1;
  v3[1] = closure #1 in OngoingCallErrorFlowFactory.participantAlreadyActive(person:);
  return v5(v1[3], 0LL, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  OUTLINED_FUNCTION_29();
  uint64_t v4 = v2[5];
  uint64_t v5 = *v3;
  *uint64_t v6 = v5;
  v2[6] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return OUTLINED_FUNCTION_9_11( (uint64_t)closure #1 in OngoingCallErrorFlowFactory.participantAlreadyActive(person:),  0LL,  0LL);
  }
  swift_release(v2[4]);
  return OUTLINED_FUNCTION_8_3(v0, *(uint64_t (**)(void))(v5 + 8));
}

{
  uint64_t v0;
  swift_release(*(void *)(v0 + 32));
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t OngoingCallErrorFlowFactory.init(currentCall:sharedGlobals:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, void *a4@<X8>)
{
  uint64_t v10 = v9 - v8;
  *a4 = a1;
  a4[1] = a2;
  outlined init with take of AppSelectionSignalComponent(a3, (uint64_t)(a4 + 2));
  uint64_t v11 = type metadata accessor for AddCallParticipantCATsSimple(0LL);
  static CATOption.defaultMode.getter(v11);
  uint64_t result = CATWrapperSimple.__allocating_init(options:globals:)(v10, 0LL);
  a4[7] = result;
  return result;
}

uint64_t sub_1F6304()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t partial apply for closure #1 in OngoingCallErrorFlowFactory.participantAlreadyActive(person:)()
{
  uint64_t v2 = v0 + 16;
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = (void *)swift_task_alloc(dword_4392BC);
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = partial apply for closure #1 in static PhoneCallFlowFactory.makeAddCallParticipantRCHFlow(intent:app:sharedGlobals:);
  return closure #1 in OngoingCallErrorFlowFactory.participantAlreadyActive(person:)(v2, v3);
}

uint64_t destroy for OngoingCallErrorFlowFactory(void *a1)
{
  return swift_release(a1[7]);
}

uint64_t initializeWithCopy for OngoingCallErrorFlowFactory(uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(_OWORD *)a1 = *a2;
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a2 + 1;
  __int128 v7 = *(__int128 *)((char *)a2 + 40);
  *(_OWORD *)(a1 + 40) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = **(void (***)(uint64_t, __int128 *, uint64_t))(v7 - 8);
  swift_unknownObjectRetain(v4);
  v9(v5, v6, v8);
  uint64_t v10 = *((void *)a2 + 7);
  *(void *)(a1 + 56) = v10;
  swift_retain(v10);
  return a1;
}

uint64_t *assignWithCopy for OngoingCallErrorFlowFactory(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v6);
  a1[1] = v5;
  __swift_assign_boxed_opaque_existential_1(a1 + 2, a2 + 2);
  uint64_t v7 = a2[7];
  uint64_t v8 = a1[7];
  a1[7] = v7;
  swift_retain();
  swift_release(v8);
  return a1;
}

uint64_t *assignWithTake for OngoingCallErrorFlowFactory(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_unknownObjectRelease(v5);
  a1[1] = v4;
  __swift_destroy_boxed_opaque_existential_1(a1 + 2);
  __int128 v6 = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v6;
  uint64_t v7 = a2[7];
  uint64_t v8 = a1[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_release(v8);
  return a1;
}

ValueMetadata *type metadata accessor for OngoingCallErrorFlowFactory()
{
  return &type metadata for OngoingCallErrorFlowFactory;
}

uint64_t OUTLINED_FUNCTION_7_83(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
}

void OUTLINED_FUNCTION_8_61()
{
}

const char *PhoneSnippetDataModels.bundleName.unsafeMutableAddressor()
{
  return "PhoneUIPlugin";
}

uint64_t static PhoneSnippetDataModels.bundleName.getter()
{
  return 0x504955656E6F6850LL;
}

uint64_t PhoneSnippetDataModels.snippetHidden(for:idiom:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for DeviceIdiom(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for PhoneSnippetDataModels(0LL);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_7_6();
  outlined init with copy of PhoneSnippetDataModels(v4, v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v3, v11);
  if (EnumCaseMultiPayload != 7)
  {
    if (EnumCaseMultiPayload == 6)
    {
      char v13 = StackedButtonsModel.shouldHideSnippet(on:)(a2, *(void *)v3, *(_BYTE *)(v3 + 8));
      swift_bridgeObjectRelease();
      return v13 & 1;
    }

    if (EnumCaseMultiPayload)
    {
      _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_0(v3, type metadata accessor for PhoneSnippetDataModels);
      char v13 = 0;
      return v13 & 1;
    }
  }

  _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_0(v3, type metadata accessor for PhoneSnippetDataModels);
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v10, enum case for DeviceIdiom.car(_:), v6);
  char v13 = static DeviceIdiom.== infix(_:_:)(a2, v10);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  return v13 & 1;
}

uint64_t type metadata accessor for PhoneSnippetDataModels(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for PhoneSnippetDataModels;
  if (!type metadata singleton initialization cache for PhoneSnippetDataModels) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PhoneSnippetDataModels);
  }
  return result;
}

uint64_t outlined init with copy of PhoneSnippetDataModels(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PhoneSnippetDataModels(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t PhoneSnippetDataModels.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x69666E6F43707061LL && a2 == 0xEF6E6F6974616D72LL)
  {
    unint64_t v5 = 0xEF6E6F6974616D72LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69666E6F43707061LL, 0xEF6E6F6974616D72LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v7 = 0x800000000034DB00LL;
    if (a2 == 0x800000000034DB00LL) {
      goto LABEL_13;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000000034DB00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if (a1 == 0xD000000000000013LL && a2 == 0x800000000034DB20LL)
  {
    unint64_t v8 = 0x800000000034DB20LL;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x800000000034DB20LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_19;
  }

  if (a1 == 0xD000000000000012LL && a2 == 0x800000000034DB40LL)
  {
    unint64_t v9 = 0x800000000034DB40LL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x800000000034DB40LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_25;
  }

  if (a1 == 0xD000000000000022LL && a2 == 0x800000000034DB60LL)
  {
    unint64_t v10 = 0x800000000034DB60LL;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022LL, 0x800000000034DB60LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_31;
  }

  if (a1 == 0xD000000000000020LL && a2 == 0x800000000034DB90LL)
  {
    unint64_t v11 = 0x800000000034DB90LL;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020LL, 0x800000000034DB90LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_37;
  }

  if (a1 == 0x4264656B63617473LL && a2 == 0xEE00736E6F747475LL)
  {
    unint64_t v13 = 0xEE00736E6F747475LL;
    goto LABEL_45;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4264656B63617473LL, 0xEE00736E6F747475LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
LABEL_45:
    swift_bridgeObjectRelease(v13);
    return 6LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v14 = 0x800000000034DBC0LL;
    if (a2 == 0x800000000034DBC0LL) {
      goto LABEL_50;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000000034DBC0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
LABEL_50:
    swift_bridgeObjectRelease(v14);
    return 7LL;
  }

  if (a1 == 0x747369486C6C6163LL && a2 == 0xEF7473694C79726FLL)
  {
    unint64_t v16 = 0xEF7473694C79726FLL;
    goto LABEL_58;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x747369486C6C6163LL, 0xEF7473694C79726FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
LABEL_58:
    swift_bridgeObjectRelease(v16);
    return 8LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v17 = 0x800000000034DBE0LL;
    if (a2 == 0x800000000034DBE0LL) {
      goto LABEL_63;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000000034DBE0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v17 = a2;
LABEL_63:
    swift_bridgeObjectRelease(v17);
    return 9LL;
  }

  if (a1 == 0x6F56656C676E6973LL && a2 == 0xEF6C69616D656369LL)
  {
    unint64_t v19 = 0xEF6C69616D656369LL;
    goto LABEL_71;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F56656C676E6973LL, 0xEF6C69616D656369LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v19 = a2;
LABEL_71:
    swift_bridgeObjectRelease(v19);
    return 10LL;
  }

  if (a1 == 0xD000000000000017LL && a2 == 0x800000000034DC00LL)
  {
    swift_bridgeObjectRelease(0x800000000034DC00LL);
    return 11LL;
  }

  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x800000000034DC00LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v20 & 1) != 0) {
      return 11LL;
    }
    else {
      return 12LL;
    }
  }

uint64_t PhoneSnippetDataModels.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1F6C70 + 4 * aG[a1]))( 0x69666E6F43707061LL,  0xEF6E6F6974616D72LL);
}

unint64_t sub_1F6C70()
{
  return 0xD000000000000011LL;
}

uint64_t sub_1F6D4C()
{
  return 0x6F56656C676E6973LL;
}

void sub_1F6D70()
{
}

void SharedNeedsValueContext.NeedsValueCase.hashValue.getter()
{
}

void protocol witness for Hashable.hashValue.getter in conformance PhoneSnippetDataModels.AppConfirmationCodingKeys()
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneSnippetDataModels.AppConfirmationCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.AppConfirmationCodingKeys and conformance PhoneSnippetDataModels.AppConfirmationCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneSnippetDataModels.AppConfirmationCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.AppConfirmationCodingKeys and conformance PhoneSnippetDataModels.AppConfirmationCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneSnippetDataModels.AppDisambiguationCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.AppDisambiguationCodingKeys and conformance PhoneSnippetDataModels.AppDisambiguationCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneSnippetDataModels.AppDisambiguationCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.AppDisambiguationCodingKeys and conformance PhoneSnippetDataModels.AppDisambiguationCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneSnippetDataModels.CallHistoryListCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.CallHistoryListCodingKeys and conformance PhoneSnippetDataModels.CallHistoryListCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneSnippetDataModels.CallHistoryListCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.CallHistoryListCodingKeys and conformance PhoneSnippetDataModels.CallHistoryListCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PhoneSnippetDataModels.CodingKeys()
{
  return PhoneSnippetDataModels.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PhoneSnippetDataModels.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = PhoneSnippetDataModels.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneSnippetDataModels.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.CodingKeys and conformance PhoneSnippetDataModels.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneSnippetDataModels.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.CodingKeys and conformance PhoneSnippetDataModels.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneSnippetDataModels.ContactConfirmationCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.ContactConfirmationCodingKeys and conformance PhoneSnippetDataModels.ContactConfirmationCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneSnippetDataModels.ContactConfirmationCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.ContactConfirmationCodingKeys and conformance PhoneSnippetDataModels.ContactConfirmationCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneSnippetDataModels.EmergencyCountdownCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.EmergencyCountdownCodingKeys and conformance PhoneSnippetDataModels.EmergencyCountdownCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneSnippetDataModels.EmergencyCountdownCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.EmergencyCountdownCodingKeys and conformance PhoneSnippetDataModels.EmergencyCountdownCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneSnippetDataModels.PlayVoicemailListCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.PlayVoicemailListCodingKeys and conformance PhoneSnippetDataModels.PlayVoicemailListCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneSnippetDataModels.PlayVoicemailListCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.PlayVoicemailListCodingKeys and conformance PhoneSnippetDataModels.PlayVoicemailListCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys and conformance PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys and conformance PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneSnippetDataModels.SingleVoicemailCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.SingleVoicemailCodingKeys and conformance PhoneSnippetDataModels.SingleVoicemailCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneSnippetDataModels.SingleVoicemailCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.SingleVoicemailCodingKeys and conformance PhoneSnippetDataModels.SingleVoicemailCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneSnippetDataModels.StackedButtonsCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.StackedButtonsCodingKeys and conformance PhoneSnippetDataModels.StackedButtonsCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneSnippetDataModels.StackedButtonsCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.StackedButtonsCodingKeys and conformance PhoneSnippetDataModels.StackedButtonsCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneSnippetDataModels.AppConfirmationCodingKeys( uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneSnippetDataModels.YesNoConfirmationCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.YesNoConfirmationCodingKeys and conformance PhoneSnippetDataModels.YesNoConfirmationCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneSnippetDataModels.YesNoConfirmationCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneSnippetDataModels.YesNoConfirmationCodingKeys and conformance PhoneSnippetDataModels.YesNoConfirmationCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void PhoneSnippetDataModels.encode(to:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys>);
  uint64_t v65 = *(void *)(v3 - 8);
  uint64_t v66 = v3;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v64 = v4;
  uint64_t v62 = type metadata accessor for SingleResultCallHistoryModel(0LL);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_16_5(v5, v48[0]);
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneSnippetDataModels.SingleVoicemailCodingKeys>);
  uint64_t v61 = *(void *)(v63 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_30_35(v6, v48[0]);
  uint64_t v58 = type metadata accessor for SingleResultVoicemailModel(0LL);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_31_35(v7, v48[0]);
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneSnippetDataModels.PlayVoicemailListCodingKeys>);
  uint64_t v57 = *(void *)(v59 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_32_36(v8, v48[0]);
  uint64_t v55 = type metadata accessor for PlayVoicemailModel(0LL);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_26((uint64_t)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneSnippetDataModels.CallHistoryListCodingKeys>);
  OUTLINED_FUNCTION_16_2(v10, (uint64_t)&v73);
  OUTLINED_FUNCTION_15_40(v11);
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v13 = OUTLINED_FUNCTION_42_7(v12);
  uint64_t v53 = type metadata accessor for SearchCallHistoryModel(v13);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26(v14);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneSnippetDataModels.YesNoConfirmationCodingKeys>);
  OUTLINED_FUNCTION_16_2(v15, (uint64_t)&v72);
  OUTLINED_FUNCTION_15_40(v16);
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26(v17);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneSnippetDataModels.StackedButtonsCodingKeys>);
  OUTLINED_FUNCTION_16_2(v18, (uint64_t)v71);
  OUTLINED_FUNCTION_15_40(v19);
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26(v20);
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys>);
  OUTLINED_FUNCTION_15_40(*(void *)(v52 - 8));
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v22 = OUTLINED_FUNCTION_42_7(v21);
  uint64_t v50 = type metadata accessor for LocalEmergencyCallDisambiguationModel(v22);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26(v23);
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys>);
  OUTLINED_FUNCTION_15_40(*(void *)(v51 - 8));
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v25 = OUTLINED_FUNCTION_42_7(v24);
  v48[15] = type metadata accessor for ForeignEmergencyCallDisambiguationModel(v25);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26(v26);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneSnippetDataModels.EmergencyCountdownCodingKeys>);
  OUTLINED_FUNCTION_15_40(*(void *)(v49 - 8));
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v28 = OUTLINED_FUNCTION_42_7(v27);
  v48[10] = type metadata accessor for EmergencyCountdownModel(v28);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26(v29);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneSnippetDataModels.ContactConfirmationCodingKeys>);
  OUTLINED_FUNCTION_16_2(v30, (uint64_t)v60);
  OUTLINED_FUNCTION_15_40(v31);
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v33 = OUTLINED_FUNCTION_42_7(v32);
  v48[6] = type metadata accessor for ContactConfirmationModel(v33);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26(v34);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneSnippetDataModels.AppDisambiguationCodingKeys>);
  OUTLINED_FUNCTION_16_2(v35, (uint64_t)v56);
  OUTLINED_FUNCTION_15_40(v36);
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26(v37);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneSnippetDataModels.AppConfirmationCodingKeys>);
  OUTLINED_FUNCTION_16_2(v38, (uint64_t)v54);
  OUTLINED_FUNCTION_15_40(v39);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v67 = OUTLINED_FUNCTION_45_22();
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  __chkstk_darwin();
  uint64_t v40 = type metadata accessor for PhoneSnippetDataModels(0LL);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v43 = v42 - v41;
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneSnippetDataModels.CodingKeys>);
  uint64_t v68 = *(void *)(v70 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_7_6();
  uint64_t v44 = *(void *)(a1 + 24);
  uint64_t v45 = *(void *)(a1 + 32);
  unint64_t v46 = OUTLINED_FUNCTION_49_21();
  uint64_t v69 = v1;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_40D678, &unk_40D678, v46, v44, v45);
  outlined init with copy of PhoneSnippetDataModels(v71[1], v43);
  uint64_t v47 = (char *)sub_1F7738 + 4 * word_335BCC[swift_getEnumCaseMultiPayload(v43, v40)];
  __asm { BR              X10 }

void sub_1F7738()
{
  *(_BYTE *)(v2 - 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0;
  lazy protocol witness table accessor for type PhoneSnippetDataModels.AppConfirmationCodingKeys and conformance PhoneSnippetDataModels.AppConfirmationCodingKeys();
  uint64_t v4 = *(void *)(v2 - 136);
  uint64_t v3 = *(void *)(v2 - 128);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&unk_40D708, v2 - 112, v3, &unk_40D708);
  OUTLINED_FUNCTION_20_50( &lazy protocol witness table cache variable for type YesNoConfirmationModel and conformance YesNoConfirmationModel,  v5,  (uint64_t)&protocol conformance descriptor for YesNoConfirmationModel);
  OUTLINED_FUNCTION_19_48(v1, v7, *(void *)(v2 - 544), *(void *)(v2 - 152), v6);
  OUTLINED_FUNCTION_2_70(v2 - 296);
  _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_0(v1, type metadata accessor for YesNoConfirmationModel);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 144) + 8LL))(v4, v3);
  OUTLINED_FUNCTION_7_1();
}

unint64_t lazy protocol witness table accessor for type PhoneSnippetDataModels.CodingKeys and conformance PhoneSnippetDataModels.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.CodingKeys and conformance PhoneSnippetDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.CodingKeys and conformance PhoneSnippetDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PhoneSnippetDataModels.CodingKeys, &unk_40D678);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.CodingKeys and conformance PhoneSnippetDataModels.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.CodingKeys and conformance PhoneSnippetDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.CodingKeys and conformance PhoneSnippetDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PhoneSnippetDataModels.CodingKeys, &unk_40D678);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.CodingKeys and conformance PhoneSnippetDataModels.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.CodingKeys and conformance PhoneSnippetDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.CodingKeys and conformance PhoneSnippetDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PhoneSnippetDataModels.CodingKeys, &unk_40D678);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.CodingKeys and conformance PhoneSnippetDataModels.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.CodingKeys and conformance PhoneSnippetDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.CodingKeys and conformance PhoneSnippetDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PhoneSnippetDataModels.CodingKeys, &unk_40D678);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.CodingKeys and conformance PhoneSnippetDataModels.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys and conformance PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys and conformance PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys and conformance PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys,  &unk_40DD38);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys and conformance PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys and conformance PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys and conformance PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys,  &unk_40DD38);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys and conformance PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys and conformance PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys and conformance PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys)
  {
    unint64_t result = swift_getWitnessTable("-~\r", &unk_40DD38);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys and conformance PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys and conformance PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys and conformance PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys,  &unk_40DD38);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys and conformance PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneSnippetDataModels.SingleVoicemailCodingKeys and conformance PhoneSnippetDataModels.SingleVoicemailCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleVoicemailCodingKeys and conformance PhoneSnippetDataModels.SingleVoicemailCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleVoicemailCodingKeys and conformance PhoneSnippetDataModels.SingleVoicemailCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.SingleVoicemailCodingKeys,  &unk_40DCA8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleVoicemailCodingKeys and conformance PhoneSnippetDataModels.SingleVoicemailCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleVoicemailCodingKeys and conformance PhoneSnippetDataModels.SingleVoicemailCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleVoicemailCodingKeys and conformance PhoneSnippetDataModels.SingleVoicemailCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.SingleVoicemailCodingKeys,  &unk_40DCA8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleVoicemailCodingKeys and conformance PhoneSnippetDataModels.SingleVoicemailCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleVoicemailCodingKeys and conformance PhoneSnippetDataModels.SingleVoicemailCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleVoicemailCodingKeys and conformance PhoneSnippetDataModels.SingleVoicemailCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.SingleVoicemailCodingKeys,  &unk_40DCA8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleVoicemailCodingKeys and conformance PhoneSnippetDataModels.SingleVoicemailCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleVoicemailCodingKeys and conformance PhoneSnippetDataModels.SingleVoicemailCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleVoicemailCodingKeys and conformance PhoneSnippetDataModels.SingleVoicemailCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.SingleVoicemailCodingKeys,  &unk_40DCA8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.SingleVoicemailCodingKeys and conformance PhoneSnippetDataModels.SingleVoicemailCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneSnippetDataModels.PlayVoicemailListCodingKeys and conformance PhoneSnippetDataModels.PlayVoicemailListCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.PlayVoicemailListCodingKeys and conformance PhoneSnippetDataModels.PlayVoicemailListCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.PlayVoicemailListCodingKeys and conformance PhoneSnippetDataModels.PlayVoicemailListCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.PlayVoicemailListCodingKeys,  &unk_40DC18);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.PlayVoicemailListCodingKeys and conformance PhoneSnippetDataModels.PlayVoicemailListCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.PlayVoicemailListCodingKeys and conformance PhoneSnippetDataModels.PlayVoicemailListCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.PlayVoicemailListCodingKeys and conformance PhoneSnippetDataModels.PlayVoicemailListCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.PlayVoicemailListCodingKeys,  &unk_40DC18);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.PlayVoicemailListCodingKeys and conformance PhoneSnippetDataModels.PlayVoicemailListCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.PlayVoicemailListCodingKeys and conformance PhoneSnippetDataModels.PlayVoicemailListCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.PlayVoicemailListCodingKeys and conformance PhoneSnippetDataModels.PlayVoicemailListCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.PlayVoicemailListCodingKeys,  &unk_40DC18);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.PlayVoicemailListCodingKeys and conformance PhoneSnippetDataModels.PlayVoicemailListCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.PlayVoicemailListCodingKeys and conformance PhoneSnippetDataModels.PlayVoicemailListCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.PlayVoicemailListCodingKeys and conformance PhoneSnippetDataModels.PlayVoicemailListCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.PlayVoicemailListCodingKeys,  &unk_40DC18);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.PlayVoicemailListCodingKeys and conformance PhoneSnippetDataModels.PlayVoicemailListCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneSnippetDataModels.CallHistoryListCodingKeys and conformance PhoneSnippetDataModels.CallHistoryListCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.CallHistoryListCodingKeys and conformance PhoneSnippetDataModels.CallHistoryListCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.CallHistoryListCodingKeys and conformance PhoneSnippetDataModels.CallHistoryListCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.CallHistoryListCodingKeys,  &unk_40DB88);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.CallHistoryListCodingKeys and conformance PhoneSnippetDataModels.CallHistoryListCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.CallHistoryListCodingKeys and conformance PhoneSnippetDataModels.CallHistoryListCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.CallHistoryListCodingKeys and conformance PhoneSnippetDataModels.CallHistoryListCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.CallHistoryListCodingKeys,  &unk_40DB88);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.CallHistoryListCodingKeys and conformance PhoneSnippetDataModels.CallHistoryListCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.CallHistoryListCodingKeys and conformance PhoneSnippetDataModels.CallHistoryListCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.CallHistoryListCodingKeys and conformance PhoneSnippetDataModels.CallHistoryListCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.CallHistoryListCodingKeys,  &unk_40DB88);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.CallHistoryListCodingKeys and conformance PhoneSnippetDataModels.CallHistoryListCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.CallHistoryListCodingKeys and conformance PhoneSnippetDataModels.CallHistoryListCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.CallHistoryListCodingKeys and conformance PhoneSnippetDataModels.CallHistoryListCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.CallHistoryListCodingKeys,  &unk_40DB88);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.CallHistoryListCodingKeys and conformance PhoneSnippetDataModels.CallHistoryListCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneSnippetDataModels.YesNoConfirmationCodingKeys and conformance PhoneSnippetDataModels.YesNoConfirmationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.YesNoConfirmationCodingKeys and conformance PhoneSnippetDataModels.YesNoConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.YesNoConfirmationCodingKeys and conformance PhoneSnippetDataModels.YesNoConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.YesNoConfirmationCodingKeys,  &unk_40DAF8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.YesNoConfirmationCodingKeys and conformance PhoneSnippetDataModels.YesNoConfirmationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.YesNoConfirmationCodingKeys and conformance PhoneSnippetDataModels.YesNoConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.YesNoConfirmationCodingKeys and conformance PhoneSnippetDataModels.YesNoConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.YesNoConfirmationCodingKeys,  &unk_40DAF8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.YesNoConfirmationCodingKeys and conformance PhoneSnippetDataModels.YesNoConfirmationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.YesNoConfirmationCodingKeys and conformance PhoneSnippetDataModels.YesNoConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.YesNoConfirmationCodingKeys and conformance PhoneSnippetDataModels.YesNoConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.YesNoConfirmationCodingKeys,  &unk_40DAF8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.YesNoConfirmationCodingKeys and conformance PhoneSnippetDataModels.YesNoConfirmationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.YesNoConfirmationCodingKeys and conformance PhoneSnippetDataModels.YesNoConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.YesNoConfirmationCodingKeys and conformance PhoneSnippetDataModels.YesNoConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.YesNoConfirmationCodingKeys,  &unk_40DAF8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.YesNoConfirmationCodingKeys and conformance PhoneSnippetDataModels.YesNoConfirmationCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneSnippetDataModels.StackedButtonsCodingKeys and conformance PhoneSnippetDataModels.StackedButtonsCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.StackedButtonsCodingKeys and conformance PhoneSnippetDataModels.StackedButtonsCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.StackedButtonsCodingKeys and conformance PhoneSnippetDataModels.StackedButtonsCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.StackedButtonsCodingKeys,  &unk_40DA68);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.StackedButtonsCodingKeys and conformance PhoneSnippetDataModels.StackedButtonsCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.StackedButtonsCodingKeys and conformance PhoneSnippetDataModels.StackedButtonsCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.StackedButtonsCodingKeys and conformance PhoneSnippetDataModels.StackedButtonsCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.StackedButtonsCodingKeys,  &unk_40DA68);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.StackedButtonsCodingKeys and conformance PhoneSnippetDataModels.StackedButtonsCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.StackedButtonsCodingKeys and conformance PhoneSnippetDataModels.StackedButtonsCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.StackedButtonsCodingKeys and conformance PhoneSnippetDataModels.StackedButtonsCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.StackedButtonsCodingKeys,  &unk_40DA68);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.StackedButtonsCodingKeys and conformance PhoneSnippetDataModels.StackedButtonsCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.StackedButtonsCodingKeys and conformance PhoneSnippetDataModels.StackedButtonsCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.StackedButtonsCodingKeys and conformance PhoneSnippetDataModels.StackedButtonsCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.StackedButtonsCodingKeys,  &unk_40DA68);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.StackedButtonsCodingKeys and conformance PhoneSnippetDataModels.StackedButtonsCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type StackedButtonsModel and conformance StackedButtonsModel()
{
  unint64_t result = lazy protocol witness table cache variable for type StackedButtonsModel and conformance StackedButtonsModel;
  if (!lazy protocol witness table cache variable for type StackedButtonsModel and conformance StackedButtonsModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StackedButtonsModel,  &type metadata for StackedButtonsModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type StackedButtonsModel and conformance StackedButtonsModel);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type StackedButtonsModel and conformance StackedButtonsModel;
  if (!lazy protocol witness table cache variable for type StackedButtonsModel and conformance StackedButtonsModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StackedButtonsModel,  &type metadata for StackedButtonsModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type StackedButtonsModel and conformance StackedButtonsModel);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type StackedButtonsModel and conformance StackedButtonsModel;
  if (!lazy protocol witness table cache variable for type StackedButtonsModel and conformance StackedButtonsModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StackedButtonsModel,  &type metadata for StackedButtonsModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type StackedButtonsModel and conformance StackedButtonsModel);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys,  &unk_40D9D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys,  &unk_40D9D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys,  &unk_40D9D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys,  &unk_40D9D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys,  &unk_40D948);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys,  &unk_40D948);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys,  &unk_40D948);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys,  &unk_40D948);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneSnippetDataModels.EmergencyCountdownCodingKeys and conformance PhoneSnippetDataModels.EmergencyCountdownCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.EmergencyCountdownCodingKeys and conformance PhoneSnippetDataModels.EmergencyCountdownCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.EmergencyCountdownCodingKeys and conformance PhoneSnippetDataModels.EmergencyCountdownCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.EmergencyCountdownCodingKeys,  &unk_40D8B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.EmergencyCountdownCodingKeys and conformance PhoneSnippetDataModels.EmergencyCountdownCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.EmergencyCountdownCodingKeys and conformance PhoneSnippetDataModels.EmergencyCountdownCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.EmergencyCountdownCodingKeys and conformance PhoneSnippetDataModels.EmergencyCountdownCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.EmergencyCountdownCodingKeys,  &unk_40D8B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.EmergencyCountdownCodingKeys and conformance PhoneSnippetDataModels.EmergencyCountdownCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.EmergencyCountdownCodingKeys and conformance PhoneSnippetDataModels.EmergencyCountdownCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.EmergencyCountdownCodingKeys and conformance PhoneSnippetDataModels.EmergencyCountdownCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.EmergencyCountdownCodingKeys,  &unk_40D8B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.EmergencyCountdownCodingKeys and conformance PhoneSnippetDataModels.EmergencyCountdownCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.EmergencyCountdownCodingKeys and conformance PhoneSnippetDataModels.EmergencyCountdownCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.EmergencyCountdownCodingKeys and conformance PhoneSnippetDataModels.EmergencyCountdownCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.EmergencyCountdownCodingKeys,  &unk_40D8B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.EmergencyCountdownCodingKeys and conformance PhoneSnippetDataModels.EmergencyCountdownCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneSnippetDataModels.ContactConfirmationCodingKeys and conformance PhoneSnippetDataModels.ContactConfirmationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.ContactConfirmationCodingKeys and conformance PhoneSnippetDataModels.ContactConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.ContactConfirmationCodingKeys and conformance PhoneSnippetDataModels.ContactConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.ContactConfirmationCodingKeys,  &unk_40D828);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.ContactConfirmationCodingKeys and conformance PhoneSnippetDataModels.ContactConfirmationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.ContactConfirmationCodingKeys and conformance PhoneSnippetDataModels.ContactConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.ContactConfirmationCodingKeys and conformance PhoneSnippetDataModels.ContactConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.ContactConfirmationCodingKeys,  &unk_40D828);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.ContactConfirmationCodingKeys and conformance PhoneSnippetDataModels.ContactConfirmationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.ContactConfirmationCodingKeys and conformance PhoneSnippetDataModels.ContactConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.ContactConfirmationCodingKeys and conformance PhoneSnippetDataModels.ContactConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.ContactConfirmationCodingKeys,  &unk_40D828);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.ContactConfirmationCodingKeys and conformance PhoneSnippetDataModels.ContactConfirmationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.ContactConfirmationCodingKeys and conformance PhoneSnippetDataModels.ContactConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.ContactConfirmationCodingKeys and conformance PhoneSnippetDataModels.ContactConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.ContactConfirmationCodingKeys,  &unk_40D828);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.ContactConfirmationCodingKeys and conformance PhoneSnippetDataModels.ContactConfirmationCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneSnippetDataModels.AppDisambiguationCodingKeys and conformance PhoneSnippetDataModels.AppDisambiguationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppDisambiguationCodingKeys and conformance PhoneSnippetDataModels.AppDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppDisambiguationCodingKeys and conformance PhoneSnippetDataModels.AppDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.AppDisambiguationCodingKeys,  &unk_40D798);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppDisambiguationCodingKeys and conformance PhoneSnippetDataModels.AppDisambiguationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppDisambiguationCodingKeys and conformance PhoneSnippetDataModels.AppDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppDisambiguationCodingKeys and conformance PhoneSnippetDataModels.AppDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.AppDisambiguationCodingKeys,  &unk_40D798);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppDisambiguationCodingKeys and conformance PhoneSnippetDataModels.AppDisambiguationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppDisambiguationCodingKeys and conformance PhoneSnippetDataModels.AppDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppDisambiguationCodingKeys and conformance PhoneSnippetDataModels.AppDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.AppDisambiguationCodingKeys,  &unk_40D798);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppDisambiguationCodingKeys and conformance PhoneSnippetDataModels.AppDisambiguationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppDisambiguationCodingKeys and conformance PhoneSnippetDataModels.AppDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppDisambiguationCodingKeys and conformance PhoneSnippetDataModels.AppDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.AppDisambiguationCodingKeys,  &unk_40D798);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppDisambiguationCodingKeys and conformance PhoneSnippetDataModels.AppDisambiguationCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AppDisambiguationModel and conformance AppDisambiguationModel()
{
  unint64_t result = lazy protocol witness table cache variable for type AppDisambiguationModel and conformance AppDisambiguationModel;
  if (!lazy protocol witness table cache variable for type AppDisambiguationModel and conformance AppDisambiguationModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AppDisambiguationModel,  &type metadata for AppDisambiguationModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AppDisambiguationModel and conformance AppDisambiguationModel);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AppDisambiguationModel and conformance AppDisambiguationModel;
  if (!lazy protocol witness table cache variable for type AppDisambiguationModel and conformance AppDisambiguationModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AppDisambiguationModel,  &type metadata for AppDisambiguationModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AppDisambiguationModel and conformance AppDisambiguationModel);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AppDisambiguationModel and conformance AppDisambiguationModel;
  if (!lazy protocol witness table cache variable for type AppDisambiguationModel and conformance AppDisambiguationModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AppDisambiguationModel,  &type metadata for AppDisambiguationModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AppDisambiguationModel and conformance AppDisambiguationModel);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneSnippetDataModels.AppConfirmationCodingKeys and conformance PhoneSnippetDataModels.AppConfirmationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppConfirmationCodingKeys and conformance PhoneSnippetDataModels.AppConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppConfirmationCodingKeys and conformance PhoneSnippetDataModels.AppConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.AppConfirmationCodingKeys,  &unk_40D708);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppConfirmationCodingKeys and conformance PhoneSnippetDataModels.AppConfirmationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppConfirmationCodingKeys and conformance PhoneSnippetDataModels.AppConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppConfirmationCodingKeys and conformance PhoneSnippetDataModels.AppConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.AppConfirmationCodingKeys,  &unk_40D708);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppConfirmationCodingKeys and conformance PhoneSnippetDataModels.AppConfirmationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppConfirmationCodingKeys and conformance PhoneSnippetDataModels.AppConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppConfirmationCodingKeys and conformance PhoneSnippetDataModels.AppConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.AppConfirmationCodingKeys,  &unk_40D708);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppConfirmationCodingKeys and conformance PhoneSnippetDataModels.AppConfirmationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppConfirmationCodingKeys and conformance PhoneSnippetDataModels.AppConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppConfirmationCodingKeys and conformance PhoneSnippetDataModels.AppConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneSnippetDataModels.AppConfirmationCodingKeys,  &unk_40D708);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels.AppConfirmationCodingKeys and conformance PhoneSnippetDataModels.AppConfirmationCodingKeys);
  }

  return result;
}

void PhoneSnippetDataModels.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  v81[3] = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys>);
  OUTLINED_FUNCTION_16_2(v3, (uint64_t)&v91);
  uint64_t v82 = v4;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_16_5(v5, v73[0]);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneSnippetDataModels.SingleVoicemailCodingKeys>);
  OUTLINED_FUNCTION_16_2(v6, (uint64_t)&v90);
  OUTLINED_FUNCTION_15_40(v7);
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  v81[1] = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneSnippetDataModels.PlayVoicemailListCodingKeys>);
  OUTLINED_FUNCTION_16_2(v9, (uint64_t)v89);
  OUTLINED_FUNCTION_15_40(v10);
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  v81[0] = v11;
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneSnippetDataModels.CallHistoryListCodingKeys>);
  OUTLINED_FUNCTION_15_40(*(void *)(v76 - 8));
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  v80[1] = v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneSnippetDataModels.YesNoConfirmationCodingKeys>);
  OUTLINED_FUNCTION_16_2(v13, (uint64_t)&v88);
  OUTLINED_FUNCTION_15_40(v14);
  __chkstk_darwin();
  OUTLINED_FUNCTION_30_35(v15, v73[0]);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneSnippetDataModels.StackedButtonsCodingKeys>);
  OUTLINED_FUNCTION_16_2(v16, (uint64_t)&v83);
  OUTLINED_FUNCTION_15_40(v17);
  __chkstk_darwin();
  OUTLINED_FUNCTION_31_35(v18, v73[0]);
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys>);
  OUTLINED_FUNCTION_15_40(*(void *)(v75 - 8));
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v86 = v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys>);
  OUTLINED_FUNCTION_16_2(v20, (uint64_t)&v82);
  OUTLINED_FUNCTION_15_40(v21);
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v79 = v22;
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneSnippetDataModels.EmergencyCountdownCodingKeys>);
  OUTLINED_FUNCTION_15_40(*(void *)(v74 - 8));
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v78 = v23;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneSnippetDataModels.ContactConfirmationCodingKeys>);
  OUTLINED_FUNCTION_16_2(v24, (uint64_t)v81);
  OUTLINED_FUNCTION_15_40(v25);
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v77 = v26;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneSnippetDataModels.AppDisambiguationCodingKeys>);
  OUTLINED_FUNCTION_16_2(v27, (uint64_t)v80);
  OUTLINED_FUNCTION_15_40(v28);
  __chkstk_darwin();
  OUTLINED_FUNCTION_32_36(v29, v73[0]);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneSnippetDataModels.AppConfirmationCodingKeys>);
  OUTLINED_FUNCTION_16_2(v30, (uint64_t)&v79);
  OUTLINED_FUNCTION_15_40(v31);
  __chkstk_darwin();
  OUTLINED_FUNCTION_26((uint64_t)v73 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneSnippetDataModels.CodingKeys>);
  uint64_t v83 = *(void *)(v87 - 8);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v35 = v34 - v33;
  uint64_t v84 = type metadata accessor for PhoneSnippetDataModels(0LL);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_19_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_19_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_19_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_19_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_19_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_19_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_19_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_19_2();
  __chkstk_darwin();
  uint64_t v37 = (char *)v73 - v36;
  __chkstk_darwin();
  uint64_t v39 = (char *)v73 - v38;
  __chkstk_darwin();
  uint64_t v41 = (char *)v73 - v40;
  __chkstk_darwin();
  uint64_t v43 = (char *)v73 - v42;
  __chkstk_darwin();
  uint64_t v45 = (char *)v73 - v44;
  uint64_t v46 = a1[3];
  uint64_t v47 = a1[4];
  uint64_t v88 = a1;
  unint64_t v48 = OUTLINED_FUNCTION_49_21();
  uint64_t v85 = v35;
  uint64_t v49 = v90;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_40D678, &unk_40D678, v48, v46, v47);
  if (!v49)
  {
    v73[3] = (uint64_t)v43;
    v73[2] = (uint64_t)v41;
    v73[4] = (uint64_t)v39;
    v73[5] = (uint64_t)v37;
    uint64_t v51 = v84;
    uint64_t v50 = v85;
    uint64_t v90 = v45;
    uint64_t v52 = KeyedDecodingContainer.allKeys.getter(v87);
    uint64_t v53 = *(void *)(v52 + 16);
    if (v53)
    {
      v73[1] = 0LL;
      uint64_t v54 = *(unsigned __int8 *)(v52 + 32);
      specialized ArraySlice.subscript.getter(1LL, v53, v52, v52 + 32, 0LL, (2 * v53) | 1);
      uint64_t v56 = v55;
      unint64_t v58 = v57;
      swift_bridgeObjectRelease();
      if (v56 == v58 >> 1) {
        __asm { BR              X9 }
      }
    }

    uint64_t v59 = v50;
    uint64_t v60 = type metadata accessor for DecodingError(0LL);
    swift_allocError(v60, &protocol witness table for DecodingError, 0LL, 0LL);
    uint64_t v62 = v61;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v62 = v51;
    uint64_t v63 = v87;
    uint64_t v64 = KeyedDecodingContainer.codingPath.getter(v87);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v64,  0xD00000000000002BLL,  0x800000000034D440LL,  0LL);
    uint64_t v65 = (*(uint64_t (**)(uint64_t *, void, uint64_t))(*(void *)(v60 - 8) + 104LL))( v62,  enum case for DecodingError.typeMismatch(_:),  v60);
    swift_willThrow(v65, v66, v67, v68, v69, v70, v71, v72);
    OUTLINED_FUNCTION_41_27();
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v59, v63);
  }

  __swift_destroy_boxed_opaque_existential_1(v88);
  OUTLINED_FUNCTION_7_1();
}

void protocol witness for Decodable.init(from:) in conformance PhoneSnippetDataModels( void *a1@<X0>, uint64_t a2@<X8>)
{
}

void protocol witness for Encodable.encode(to:) in conformance PhoneSnippetDataModels(uint64_t a1)
{
}

void outlined init with take of SingleResultCallHistoryModel( uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  OUTLINED_FUNCTION_2();
}

void base witness table accessor for Decodable in PhoneSnippetDataModels()
{
}

void base witness table accessor for Encodable in PhoneSnippetDataModels()
{
}

uint64_t initializeBufferWithCopyOfBuffer for PhoneSnippetDataModels(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    uint64_t v5 = (char *)&loc_1F903C + 4 * word_335BFC[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = v6 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for PhoneSnippetDataModels(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 7:
      uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
      v5(v2, v4);
      uint64_t v6 = (int *)type metadata accessor for YesNoConfirmationModel(0LL);
      uint64_t v7 = v2 + v6[5];
      uint64_t v8 = &demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>;
      goto LABEL_16;
    case 1:
      goto LABEL_10;
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v9 = type metadata accessor for ContactConfirmationModel(0LL);
      uint64_t v10 = v2 + *(int *)(v9 + 24);
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL);
      v12(v10, v11);
      uint64_t v13 = (int *)type metadata accessor for YesNoConfirmationModel(0LL);
      uint64_t v14 = v10 + v13[5];
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL);
      v16(v14, v15);
      v12(v10 + v13[6], v11);
      v16(v10 + v13[7], v15);
      swift_bridgeObjectRelease();
      if (*(void *)(v2 + *(int *)(v9 + 28) + 8))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      return swift_bridgeObjectRelease();
    case 3:
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8LL);
      v18(v2, v17);
      uint64_t v19 = (int *)type metadata accessor for EmergencyCountdownModel(0LL);
      v18(v2 + v19[5], v17);
      v18(v2 + v19[6], v17);
      v18(v2 + v19[7], v17);
      v18(v2 + v19[8], v17);
      v18(v2 + v19[9], v17);
      v18(v2 + v19[10], v17);
      v18(v2 + v19[11], v17);
      v18(v2 + v19[12], v17);
      uint64_t v20 = v2 + v19[13];
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
      uint64_t v22 = *(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8LL);
      v22(v20, v21);
      v22(v2 + v19[14], v21);
      uint64_t v23 = v2 + v19[15];
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8LL))(v23, v24);
      uint64_t v25 = v2 + v19[16];
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8LL))(v25, v26);
      return swift_bridgeObjectRelease();
    case 4:
      uint64_t v27 = (int *)type metadata accessor for DisambiguationItemWithDirectInvocationModel(0LL);
      if (!__swift_getEnumTagSinglePayload(v2, 1LL, (uint64_t)v27))
      {
        uint64_t v28 = type metadata accessor for UUID(0LL);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8LL))(v2, v28);
        uint64_t v29 = v2 + v27[5];
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
        uint64_t v31 = *(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8LL);
        v31(v29, v30);
        uint64_t v32 = v2 + v27[6];
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8LL))(v32, v33);
        uint64_t v34 = v2 + v27[7];
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8LL))(v34, v35);
        v31(v2 + v27[8], v30);
        uint64_t v36 = v2 + v27[9];
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8LL))(v36, v37);
        uint64_t v38 = v2 + v27[10];
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8LL))(v38, v39);
      }

      uint64_t v40 = v2 + *(int *)(type metadata accessor for ForeignEmergencyCallDisambiguationModel(0LL) + 20);
      if (!__swift_getEnumTagSinglePayload(v40, 1LL, (uint64_t)v27))
      {
        uint64_t v41 = type metadata accessor for UUID(0LL);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8LL))(v40, v41);
        uint64_t v42 = v40 + v27[5];
        uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
        uint64_t v44 = *(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8LL);
        v44(v42, v43);
        uint64_t v45 = v40 + v27[6];
        uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8LL))(v45, v46);
        uint64_t v47 = v40 + v27[7];
        uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8LL))(v47, v48);
        v44(v40 + v27[8], v43);
        uint64_t v49 = v40 + v27[9];
        uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8LL))(v49, v50);
        uint64_t v51 = v40 + v27[10];
        uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8LL))(v51, v52);
      }

void initializeWithCopy for PhoneSnippetDataModels(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (char *)sub_1FA81C + 4 * word_335C2C[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }

uint64_t sub_1FA81C()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL);
  v4(v0, v1, v3);
  uint64_t v5 = (int *)type metadata accessor for YesNoConfirmationModel(0LL);
  uint64_t v6 = v5[5];
  uint64_t v7 = v0 + v6;
  uint64_t v8 = v1 + v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL);
  v10(v7, v8, v9);
  v4(v0 + v5[6], v1 + v5[6], v3);
  v10(v0 + v5[7], v1 + v5[7], v9);
  uint64_t v11 = v5[8];
  uint64_t v12 = (void *)(v0 + v11);
  uint64_t v13 = (void *)(v1 + v11);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload(v0, v2, 0LL);
  return v0;
}

uint64_t assignWithCopy for PhoneSnippetDataModels(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_0( result,  type metadata accessor for PhoneSnippetDataModels);
    uint64_t v5 = (char *)&loc_1FB6C8 + 4 * word_335C44[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  return result;
}

char *initializeWithTake for PhoneSnippetDataModels(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL);
      v7(a1, a2, v6);
      uint64_t v8 = (int *)type metadata accessor for YesNoConfirmationModel(0LL);
      uint64_t v9 = v8[5];
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
      uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32LL);
      v13(v10, v11, v12);
      v7(&a1[v8[6]], &a2[v8[6]], v6);
      v13(&a1[v8[7]], &a2[v8[7]], v12);
      *(_OWORD *)&a1[v8[8]] = *(_OWORD *)&a2[v8[8]];
      uint64_t v14 = a1;
      uint64_t v15 = v3;
      uint64_t v16 = 0LL;
      goto LABEL_22;
    case 2u:
      __int128 v17 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v17;
      uint64_t v182 = (int *)type metadata accessor for ContactConfirmationModel(0LL);
      uint64_t v18 = v182[6];
      uint64_t v19 = &a1[v18];
      uint64_t v20 = &a2[v18];
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      uint64_t v181 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32LL);
      v181(v19, v20, v21);
      uint64_t v22 = (int *)type metadata accessor for YesNoConfirmationModel(0LL);
      uint64_t v23 = v22[5];
      uint64_t v24 = &v19[v23];
      uint64_t v183 = v3;
      uint64_t v25 = &v20[v23];
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
      uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32LL);
      v27(v24, v25, v26);
      v181(&v19[v22[6]], &v20[v22[6]], v21);
      v27(&v19[v22[7]], &v20[v22[7]], v26);
      *(_OWORD *)&v19[v22[8]] = *(_OWORD *)&v20[v22[8]];
      memcpy(&a1[v182[7]], &a2[v182[7]], 0x41uLL);
      *(_OWORD *)&a1[v182[8]] = *(_OWORD *)&a2[v182[8]];
      uint64_t v14 = a1;
      uint64_t v15 = v183;
      uint64_t v16 = 2LL;
      goto LABEL_22;
    case 3u:
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32LL);
      v29(a1, a2, v28);
      uint64_t v30 = (int *)type metadata accessor for EmergencyCountdownModel(0LL);
      v29(&a1[v30[5]], &a2[v30[5]], v28);
      v29(&a1[v30[6]], &a2[v30[6]], v28);
      v29(&a1[v30[7]], &a2[v30[7]], v28);
      v29(&a1[v30[8]], &a2[v30[8]], v28);
      v29(&a1[v30[9]], &a2[v30[9]], v28);
      v29(&a1[v30[10]], &a2[v30[10]], v28);
      v29(&a1[v30[11]], &a2[v30[11]], v28);
      v29(&a1[v30[12]], &a2[v30[12]], v28);
      uint64_t v31 = v30[13];
      uint64_t v32 = &a1[v31];
      uint64_t v33 = &a2[v31];
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
      uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32LL);
      v35(v32, v33, v34);
      v35(&a1[v30[14]], &a2[v30[14]], v34);
      uint64_t v36 = v30[15];
      uint64_t v37 = &a1[v36];
      uint64_t v38 = &a2[v36];
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32LL))(v37, v38, v39);
      uint64_t v40 = v30[16];
      uint64_t v41 = &a1[v40];
      uint64_t v42 = &a2[v40];
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32LL))(v41, v42, v43);
      *(_OWORD *)&a1[v30[17]] = *(_OWORD *)&a2[v30[17]];
      uint64_t v14 = a1;
      uint64_t v15 = v3;
      uint64_t v16 = 3LL;
      goto LABEL_22;
    case 4u:
      uint64_t v44 = (int *)type metadata accessor for DisambiguationItemWithDirectInvocationModel(0LL);
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, (uint64_t)v44))
      {
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
        memcpy(a1, a2, *(void *)(*(void *)(v45 - 8) + 64LL));
      }

      else
      {
        uint64_t v124 = type metadata accessor for UUID(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v124 - 8) + 32LL))(a1, a2, v124);
        uint64_t v125 = v44[5];
        uint64_t v126 = &a1[v125];
        uint64_t v127 = &a2[v125];
        uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
        os_log_type_t v129 = *(void (**)(char *, char *, uint64_t))(*(void *)(v128 - 8) + 32LL);
        v129(v126, v127, v128);
        uint64_t v130 = v44[6];
        uint64_t v131 = &a1[v130];
        uint64_t v132 = &a2[v130];
        uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v133 - 8) + 32LL))(v131, v132, v133);
        uint64_t v134 = v44[7];
        uint64_t v135 = &a1[v134];
        uint64_t v136 = &a2[v134];
        uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v137 - 8) + 32LL))(v135, v136, v137);
        v129(&a1[v44[8]], &a2[v44[8]], v128);
        uint64_t v138 = v44[9];
        uint64_t v139 = &a1[v138];
        BOOL v140 = &a2[v138];
        uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v141 - 8) + 32LL))(v139, v140, v141);
        uint64_t v142 = v44[10];
        uint64_t v143 = &a1[v142];
        uint64_t v144 = &a2[v142];
        uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v145 - 8) + 32LL))(v143, v144, v145);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, (uint64_t)v44);
      }

      uint64_t v146 = (int *)type metadata accessor for ForeignEmergencyCallDisambiguationModel(0LL);
      uint64_t v147 = v146[5];
      v148 = &a1[v147];
      BOOL v149 = &a2[v147];
      if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v147], 1LL, (uint64_t)v44))
      {
        uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
        memcpy(v148, v149, *(void *)(*(void *)(v150 - 8) + 64LL));
      }

      else
      {
        uint64_t v158 = type metadata accessor for UUID(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v158 - 8) + 32LL))(v148, v149, v158);
        uint64_t v159 = v44[5];
        uint64_t v160 = &v148[v159];
        uint64_t v161 = &v149[v159];
        uint64_t v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
        uint64_t v186 = v3;
        uint64_t v163 = *(void (**)(char *, char *, uint64_t))(*(void *)(v162 - 8) + 32LL);
        v163(v160, v161, v162);
        uint64_t v164 = v44[6];
        uint64_t v165 = &v148[v164];
        uint64_t v166 = &v149[v164];
        uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v167 - 8) + 32LL))(v165, v166, v167);
        uint64_t v168 = v44[7];
        uint64_t v169 = &v148[v168];
        v170 = &v149[v168];
        uint64_t v171 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v171 - 8) + 32LL))(v169, v170, v171);
        v163(&v148[v44[8]], &v149[v44[8]], v162);
        uint64_t v3 = v186;
        uint64_t v172 = v44[9];
        uint64_t v173 = &v148[v172];
        v174 = &v149[v172];
        uint64_t v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v175 - 8) + 32LL))(v173, v174, v175);
        uint64_t v176 = v44[10];
        uint64_t v177 = &v148[v176];
        uint64_t v178 = &v149[v176];
        uint64_t v179 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v179 - 8) + 32LL))(v177, v178, v179);
        __swift_storeEnumTagSinglePayload((uint64_t)v148, 0LL, 1LL, (uint64_t)v44);
      }

      *(_OWORD *)&a1[v146[6]] = *(_OWORD *)&a2[v146[6]];
      *(_OWORD *)&a1[v146[7]] = *(_OWORD *)&a2[v146[7]];
      uint64_t v14 = a1;
      uint64_t v15 = v3;
      uint64_t v16 = 4LL;
      goto LABEL_22;
    case 5u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((void *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = *((void *)a2 + 2);
      uint64_t v46 = (int *)type metadata accessor for LocalEmergencyCallDisambiguationModel(0LL);
      uint64_t v47 = v46[6];
      uint64_t v48 = &a1[v47];
      uint64_t v49 = &a2[v47];
      uint64_t v50 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32LL))(v48, v49, v50);
      uint64_t v51 = v46[7];
      uint64_t v52 = &a1[v51];
      uint64_t v53 = &a2[v51];
      uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 32LL))(v52, v53, v54);
      a1[v46[8]] = a2[v46[8]];
      *(_OWORD *)&a1[v46[9]] = *(_OWORD *)&a2[v46[9]];
      uint64_t v14 = a1;
      uint64_t v15 = v3;
      uint64_t v16 = 5LL;
      goto LABEL_22;
    case 7u:
      uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      uint64_t v56 = *(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32LL);
      v56(a1, a2, v55);
      uint64_t v57 = (int *)type metadata accessor for YesNoConfirmationModel(0LL);
      uint64_t v58 = v57[5];
      uint64_t v59 = &a1[v58];
      uint64_t v60 = &a2[v58];
      uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
      uint64_t v62 = *(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 32LL);
      v62(v59, v60, v61);
      v56(&a1[v57[6]], &a2[v57[6]], v55);
      v62(&a1[v57[7]], &a2[v57[7]], v61);
      *(_OWORD *)&a1[v57[8]] = *(_OWORD *)&a2[v57[8]];
      uint64_t v14 = a1;
      uint64_t v15 = v3;
      uint64_t v16 = 7LL;
      goto LABEL_22;
    case 8u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v63 = (int *)type metadata accessor for SearchCallHistoryModel(0LL);
      uint64_t v64 = v63[5];
      uint64_t v65 = &a1[v64];
      uint64_t v66 = &a2[v64];
      uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      uint64_t v68 = *(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 32LL);
      v68(v65, v66, v67);
      uint64_t v69 = v63[6];
      uint64_t v70 = &a1[v69];
      uint64_t v71 = &a2[v69];
      uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<[SingleCallRecordModel]>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 32LL))(v70, v71, v72);
      v68(&a1[v63[7]], &a2[v63[7]], v67);
      v68(&a1[v63[8]], &a2[v63[8]], v67);
      uint64_t v73 = v63[9];
      uint64_t v74 = &a1[v73];
      uint64_t v75 = &a2[v73];
      uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
      uint64_t v77 = *(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 32LL);
      v77(v74, v75, v76);
      v77(&a1[v63[10]], &a2[v63[10]], v76);
      uint64_t v78 = v63[11];
      uint64_t v79 = &a1[v78];
      uint64_t v80 = &a2[v78];
      uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseCommand>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v81 - 8) + 32LL))(v79, v80, v81);
      uint64_t v14 = a1;
      uint64_t v15 = v3;
      uint64_t v16 = 8LL;
      goto LABEL_22;
    case 9u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v82 = (int *)type metadata accessor for PlayVoicemailModel(0LL);
      uint64_t v83 = v82[5];
      uint64_t v84 = &a1[v83];
      uint64_t v85 = &a2[v83];
      uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<[SingleVoicemailModel]>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 32LL))(v84, v85, v86);
      uint64_t v87 = v82[6];
      uint64_t v88 = &a1[v87];
      uint64_t v89 = &a2[v87];
      uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      uint64_t v91 = *(void (**)(char *, char *, uint64_t))(*(void *)(v90 - 8) + 32LL);
      v91(v88, v89, v90);
      v91(&a1[v82[7]], &a2[v82[7]], v90);
      uint64_t v92 = v82[8];
      uint64_t v93 = &a1[v92];
      uint64_t v94 = &a2[v92];
      uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseCommand>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v95 - 8) + 32LL))(v93, v94, v95);
      uint64_t v14 = a1;
      uint64_t v15 = v3;
      uint64_t v16 = 9LL;
      goto LABEL_22;
    case 0xAu:
      __int128 v96 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v96;
      __int128 v97 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 3) = v97;
      __int128 v98 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v98;
      __int128 v99 = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = v99;
      uint64_t v100 = (int *)type metadata accessor for SingleResultVoicemailModel(0LL);
      uint64_t v101 = v100[13];
      uint64_t v102 = &a1[v101];
      uint64_t v103 = &a2[v101];
      uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
      uint64_t v105 = *(void (**)(char *, char *, uint64_t))(*(void *)(v104 - 8) + 32LL);
      v105(v102, v103, v104);
      v105(&a1[v100[14]], &a2[v100[14]], v104);
      uint64_t v106 = v100[15];
      uint64_t v107 = &a1[v106];
      uint64_t v108 = &a2[v106];
      uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      uint64_t v110 = *(void (**)(char *, char *, uint64_t))(*(void *)(v109 - 8) + 32LL);
      v110(v107, v108, v109);
      uint64_t v111 = (int *)type metadata accessor for SearchCallHistoryBinaryButtonModel(0LL);
      uint64_t v112 = v111[5];
      uint64_t v113 = &v107[v112];
      uint64_t v114 = &v108[v112];
      uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
      uint64_t v184 = v3;
      uint64_t v116 = *(void (**)(char *, char *, uint64_t))(*(void *)(v115 - 8) + 32LL);
      v116(v113, v114, v115);
      v110(&v107[v111[6]], &v108[v111[6]], v109);
      v116(&v107[v111[7]], &v108[v111[7]], v115);
      *(_OWORD *)&v107[v111[8]] = *(_OWORD *)&v108[v111[8]];
      uint64_t v14 = a1;
      uint64_t v15 = v184;
      uint64_t v16 = 10LL;
      goto LABEL_22;
    case 0xBu:
      __int128 v117 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v117;
      __int128 v118 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 3) = v118;
      *((void *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *((void *)a2 + 8);
      uint64_t v119 = *(int *)(type metadata accessor for SingleResultCallHistoryModel(0LL) + 36);
      uint64_t v120 = &a1[v119];
      uint64_t v121 = &a2[v119];
      uint64_t v122 = (int *)type metadata accessor for SearchCallHistoryBinaryButtonModel(0LL);
      if (__swift_getEnumTagSinglePayload((uint64_t)v121, 1LL, (uint64_t)v122))
      {
        uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchCallHistoryBinaryButtonModel?);
        memcpy(v120, v121, *(void *)(*(void *)(v123 - 8) + 64LL));
      }

      else
      {
        uint64_t v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
        uint64_t v152 = *(void (**)(char *, char *, uint64_t))(*(void *)(v151 - 8) + 32LL);
        v152(v120, v121, v151);
        uint64_t v153 = v122[5];
        uint64_t v154 = &v120[v153];
        uint64_t v155 = &v121[v153];
        uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
        uint64_t v185 = v3;
        __int128 v157 = *(void (**)(char *, char *, uint64_t))(*(void *)(v156 - 8) + 32LL);
        v157(v154, v155, v156);
        v152(&v120[v122[6]], &v121[v122[6]], v151);
        v157(&v120[v122[7]], &v121[v122[7]], v156);
        uint64_t v3 = v185;
        *(_OWORD *)&v120[v122[8]] = *(_OWORD *)&v121[v122[8]];
        __swift_storeEnumTagSinglePayload((uint64_t)v120, 0LL, 1LL, (uint64_t)v122);
      }

      uint64_t v14 = a1;
      uint64_t v15 = v3;
      uint64_t v16 = 11LL;
LABEL_22:
      swift_storeEnumTagMultiPayload(v14, v15, v16);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v3 - 8) + 64LL));
      break;
  }

  return a1;
}

char *assignWithTake for PhoneSnippetDataModels(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_0( (uint64_t)a1,  type metadata accessor for PhoneSnippetDataModels);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
        uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL);
        v7(a1, a2, v6);
        uint64_t v8 = (int *)type metadata accessor for YesNoConfirmationModel(0LL);
        uint64_t v9 = v8[5];
        uint64_t v10 = &a1[v9];
        uint64_t v11 = &a2[v9];
        uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
        uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32LL);
        v13(v10, v11, v12);
        v7(&a1[v8[6]], &a2[v8[6]], v6);
        v13(&a1[v8[7]], &a2[v8[7]], v12);
        *(_OWORD *)&a1[v8[8]] = *(_OWORD *)&a2[v8[8]];
        uint64_t v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 0LL;
        goto LABEL_23;
      case 2u:
        __int128 v17 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v17;
        uint64_t v182 = (int *)type metadata accessor for ContactConfirmationModel(0LL);
        uint64_t v18 = v182[6];
        uint64_t v19 = &a1[v18];
        uint64_t v20 = &a2[v18];
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
        uint64_t v181 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32LL);
        v181(v19, v20, v21);
        uint64_t v22 = (int *)type metadata accessor for YesNoConfirmationModel(0LL);
        uint64_t v23 = v22[5];
        uint64_t v24 = &v19[v23];
        uint64_t v183 = a3;
        uint64_t v25 = &v20[v23];
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
        uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32LL);
        v27(v24, v25, v26);
        v181(&v19[v22[6]], &v20[v22[6]], v21);
        v27(&v19[v22[7]], &v20[v22[7]], v26);
        *(_OWORD *)&v19[v22[8]] = *(_OWORD *)&v20[v22[8]];
        memcpy(&a1[v182[7]], &a2[v182[7]], 0x41uLL);
        *(_OWORD *)&a1[v182[8]] = *(_OWORD *)&a2[v182[8]];
        uint64_t v14 = a1;
        uint64_t v15 = v183;
        uint64_t v16 = 2LL;
        goto LABEL_23;
      case 3u:
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
        uint64_t v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32LL);
        v29(a1, a2, v28);
        uint64_t v30 = (int *)type metadata accessor for EmergencyCountdownModel(0LL);
        v29(&a1[v30[5]], &a2[v30[5]], v28);
        v29(&a1[v30[6]], &a2[v30[6]], v28);
        v29(&a1[v30[7]], &a2[v30[7]], v28);
        v29(&a1[v30[8]], &a2[v30[8]], v28);
        v29(&a1[v30[9]], &a2[v30[9]], v28);
        v29(&a1[v30[10]], &a2[v30[10]], v28);
        v29(&a1[v30[11]], &a2[v30[11]], v28);
        v29(&a1[v30[12]], &a2[v30[12]], v28);
        uint64_t v31 = v30[13];
        uint64_t v32 = &a1[v31];
        uint64_t v33 = &a2[v31];
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
        uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32LL);
        v35(v32, v33, v34);
        v35(&a1[v30[14]], &a2[v30[14]], v34);
        uint64_t v36 = v30[15];
        uint64_t v37 = &a1[v36];
        uint64_t v38 = &a2[v36];
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32LL))(v37, v38, v39);
        uint64_t v40 = v30[16];
        uint64_t v41 = &a1[v40];
        uint64_t v42 = &a2[v40];
        uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32LL))(v41, v42, v43);
        *(_OWORD *)&a1[v30[17]] = *(_OWORD *)&a2[v30[17]];
        uint64_t v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 3LL;
        goto LABEL_23;
      case 4u:
        uint64_t v44 = (int *)type metadata accessor for DisambiguationItemWithDirectInvocationModel(0LL);
        if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, (uint64_t)v44))
        {
          uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
          memcpy(a1, a2, *(void *)(*(void *)(v45 - 8) + 64LL));
        }

        else
        {
          uint64_t v124 = type metadata accessor for UUID(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v124 - 8) + 32LL))(a1, a2, v124);
          uint64_t v125 = v44[5];
          uint64_t v126 = &a1[v125];
          uint64_t v127 = &a2[v125];
          uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
          os_log_type_t v129 = *(void (**)(char *, char *, uint64_t))(*(void *)(v128 - 8) + 32LL);
          v129(v126, v127, v128);
          uint64_t v130 = v44[6];
          uint64_t v131 = &a1[v130];
          uint64_t v132 = &a2[v130];
          uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v133 - 8) + 32LL))(v131, v132, v133);
          uint64_t v134 = v44[7];
          uint64_t v135 = &a1[v134];
          uint64_t v136 = &a2[v134];
          uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v137 - 8) + 32LL))(v135, v136, v137);
          v129(&a1[v44[8]], &a2[v44[8]], v128);
          uint64_t v138 = v44[9];
          uint64_t v139 = &a1[v138];
          BOOL v140 = &a2[v138];
          uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v141 - 8) + 32LL))(v139, v140, v141);
          uint64_t v142 = v44[10];
          uint64_t v143 = &a1[v142];
          uint64_t v144 = &a2[v142];
          uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v145 - 8) + 32LL))(v143, v144, v145);
          __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, (uint64_t)v44);
        }

        uint64_t v146 = (int *)type metadata accessor for ForeignEmergencyCallDisambiguationModel(0LL);
        uint64_t v147 = v146[5];
        v148 = &a1[v147];
        BOOL v149 = &a2[v147];
        if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v147], 1LL, (uint64_t)v44))
        {
          uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
          memcpy(v148, v149, *(void *)(*(void *)(v150 - 8) + 64LL));
        }

        else
        {
          uint64_t v158 = type metadata accessor for UUID(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v158 - 8) + 32LL))(v148, v149, v158);
          uint64_t v159 = v44[5];
          uint64_t v160 = &v148[v159];
          uint64_t v161 = &v149[v159];
          uint64_t v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String?>);
          uint64_t v186 = a3;
          uint64_t v163 = *(void (**)(char *, char *, uint64_t))(*(void *)(v162 - 8) + 32LL);
          v163(v160, v161, v162);
          uint64_t v164 = v44[6];
          uint64_t v165 = &v148[v164];
          uint64_t v166 = &v149[v164];
          uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v167 - 8) + 32LL))(v165, v166, v167);
          uint64_t v168 = v44[7];
          uint64_t v169 = &v148[v168];
          v170 = &v149[v168];
          uint64_t v171 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v171 - 8) + 32LL))(v169, v170, v171);
          v163(&v148[v44[8]], &v149[v44[8]], v162);
          a3 = v186;
          uint64_t v172 = v44[9];
          uint64_t v173 = &v148[v172];
          v174 = &v149[v172];
          uint64_t v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<CodableAceObject<SAIntentGroupRunSiriKitExecutor>>);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v175 - 8) + 32LL))(v173, v174, v175);
          uint64_t v176 = v44[10];
          uint64_t v177 = &v148[v176];
          uint64_t v178 = &v149[v176];
          uint64_t v179 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<DisambiguationItemWithDirectInvocationModel.ItemType>);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v179 - 8) + 32LL))(v177, v178, v179);
          __swift_storeEnumTagSinglePayload((uint64_t)v148, 0LL, 1LL, (uint64_t)v44);
        }

        *(_OWORD *)&a1[v146[6]] = *(_OWORD *)&a2[v146[6]];
        *(_OWORD *)&a1[v146[7]] = *(_OWORD *)&a2[v146[7]];
        uint64_t v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 4LL;
        goto LABEL_23;
      case 5u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((void *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = *((void *)a2 + 2);
        uint64_t v46 = (int *)type metadata accessor for LocalEmergencyCallDisambiguationModel(0LL);
        uint64_t v47 = v46[6];
        uint64_t v48 = &a1[v47];
        uint64_t v49 = &a2[v47];
        uint64_t v50 = type metadata accessor for UUID(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32LL))(v48, v49, v50);
        uint64_t v51 = v46[7];
        uint64_t v52 = &a1[v51];
        uint64_t v53 = &a2[v51];
        uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 32LL))(v52, v53, v54);
        a1[v46[8]] = a2[v46[8]];
        *(_OWORD *)&a1[v46[9]] = *(_OWORD *)&a2[v46[9]];
        uint64_t v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 5LL;
        goto LABEL_23;
      case 7u:
        uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
        uint64_t v56 = *(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32LL);
        v56(a1, a2, v55);
        uint64_t v57 = (int *)type metadata accessor for YesNoConfirmationModel(0LL);
        uint64_t v58 = v57[5];
        uint64_t v59 = &a1[v58];
        uint64_t v60 = &a2[v58];
        uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
        uint64_t v62 = *(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 32LL);
        v62(v59, v60, v61);
        v56(&a1[v57[6]], &a2[v57[6]], v55);
        v62(&a1[v57[7]], &a2[v57[7]], v61);
        *(_OWORD *)&a1[v57[8]] = *(_OWORD *)&a2[v57[8]];
        uint64_t v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 7LL;
        goto LABEL_23;
      case 8u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v63 = (int *)type metadata accessor for SearchCallHistoryModel(0LL);
        uint64_t v64 = v63[5];
        uint64_t v65 = &a1[v64];
        uint64_t v66 = &a2[v64];
        uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
        uint64_t v68 = *(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 32LL);
        v68(v65, v66, v67);
        uint64_t v69 = v63[6];
        uint64_t v70 = &a1[v69];
        uint64_t v71 = &a2[v69];
        uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<[SingleCallRecordModel]>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 32LL))(v70, v71, v72);
        v68(&a1[v63[7]], &a2[v63[7]], v67);
        v68(&a1[v63[8]], &a2[v63[8]], v67);
        uint64_t v73 = v63[9];
        uint64_t v74 = &a1[v73];
        uint64_t v75 = &a2[v73];
        uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<Bool>);
        uint64_t v77 = *(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 32LL);
        v77(v74, v75, v76);
        v77(&a1[v63[10]], &a2[v63[10]], v76);
        uint64_t v78 = v63[11];
        uint64_t v79 = &a1[v78];
        uint64_t v80 = &a2[v78];
        uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseCommand>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v81 - 8) + 32LL))(v79, v80, v81);
        uint64_t v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 8LL;
        goto LABEL_23;
      case 9u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v82 = (int *)type metadata accessor for PlayVoicemailModel(0LL);
        uint64_t v83 = v82[5];
        uint64_t v84 = &a1[v83];
        uint64_t v85 = &a2[v83];
        uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<[SingleVoicemailModel]>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 32LL))(v84, v85, v86);
        uint64_t v87 = v82[6];
        uint64_t v88 = &a1[v87];
        uint64_t v89 = &a2[v87];
        uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
        uint64_t v91 = *(void (**)(char *, char *, uint64_t))(*(void *)(v90 - 8) + 32LL);
        v91(v88, v89, v90);
        v91(&a1[v82[7]], &a2[v82[7]], v90);
        uint64_t v92 = v82[8];
        uint64_t v93 = &a1[v92];
        uint64_t v94 = &a2[v92];
        uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseCommand>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v95 - 8) + 32LL))(v93, v94, v95);
        uint64_t v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 9LL;
        goto LABEL_23;
      case 0xAu:
        __int128 v96 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v96;
        __int128 v97 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 3) = v97;
        __int128 v98 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v98;
        __int128 v99 = *((_OWORD *)a2 + 7);
        *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
        *((_OWORD *)a1 + 7) = v99;
        uint64_t v100 = (int *)type metadata accessor for SingleResultVoicemailModel(0LL);
        uint64_t v101 = v100[13];
        uint64_t v102 = &a1[v101];
        uint64_t v103 = &a2[v101];
        uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
        uint64_t v105 = *(void (**)(char *, char *, uint64_t))(*(void *)(v104 - 8) + 32LL);
        v105(v102, v103, v104);
        v105(&a1[v100[14]], &a2[v100[14]], v104);
        uint64_t v106 = v100[15];
        uint64_t v107 = &a1[v106];
        uint64_t v108 = &a2[v106];
        uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
        uint64_t v110 = *(void (**)(char *, char *, uint64_t))(*(void *)(v109 - 8) + 32LL);
        v110(v107, v108, v109);
        uint64_t v111 = (int *)type metadata accessor for SearchCallHistoryBinaryButtonModel(0LL);
        uint64_t v112 = v111[5];
        uint64_t v113 = &v107[v112];
        uint64_t v114 = &v108[v112];
        uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
        uint64_t v184 = a3;
        uint64_t v116 = *(void (**)(char *, char *, uint64_t))(*(void *)(v115 - 8) + 32LL);
        v116(v113, v114, v115);
        v110(&v107[v111[6]], &v108[v111[6]], v109);
        v116(&v107[v111[7]], &v108[v111[7]], v115);
        *(_OWORD *)&v107[v111[8]] = *(_OWORD *)&v108[v111[8]];
        uint64_t v14 = a1;
        uint64_t v15 = v184;
        uint64_t v16 = 10LL;
        goto LABEL_23;
      case 0xBu:
        __int128 v117 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v117;
        __int128 v118 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 3) = v118;
        *((void *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *((void *)a2 + 8);
        uint64_t v119 = *(int *)(type metadata accessor for SingleResultCallHistoryModel(0LL) + 36);
        uint64_t v120 = &a1[v119];
        uint64_t v121 = &a2[v119];
        uint64_t v122 = (int *)type metadata accessor for SearchCallHistoryBinaryButtonModel(0LL);
        if (__swift_getEnumTagSinglePayload((uint64_t)v121, 1LL, (uint64_t)v122))
        {
          uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchCallHistoryBinaryButtonModel?);
          memcpy(v120, v121, *(void *)(*(void *)(v123 - 8) + 64LL));
        }

        else
        {
          uint64_t v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
          uint64_t v152 = *(void (**)(char *, char *, uint64_t))(*(void *)(v151 - 8) + 32LL);
          v152(v120, v121, v151);
          uint64_t v153 = v122[5];
          uint64_t v154 = &v120[v153];
          uint64_t v155 = &v121[v153];
          uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
          uint64_t v185 = a3;
          __int128 v157 = *(void (**)(char *, char *, uint64_t))(*(void *)(v156 - 8) + 32LL);
          v157(v154, v155, v156);
          v152(&v120[v122[6]], &v121[v122[6]], v151);
          v157(&v120[v122[7]], &v121[v122[7]], v156);
          a3 = v185;
          *(_OWORD *)&v120[v122[8]] = *(_OWORD *)&v121[v122[8]];
          __swift_storeEnumTagSinglePayload((uint64_t)v120, 0LL, 1LL, (uint64_t)v122);
        }

        uint64_t v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 11LL;
LABEL_23:
        swift_storeEnumTagMultiPayload(v14, v15, v16);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

uint64_t type metadata completion function for PhoneSnippetDataModels(uint64_t a1)
{
  uint64_t result = type metadata accessor for YesNoConfirmationModel(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    v13[0] = v4;
    v13[1] = &unk_335D58;
    uint64_t result = type metadata accessor for ContactConfirmationModel(319LL);
    if (v5 <= 0x3F)
    {
      v13[2] = *(void *)(result - 8) + 64LL;
      uint64_t result = type metadata accessor for EmergencyCountdownModel(319LL);
      if (v6 <= 0x3F)
      {
        v13[3] = *(void *)(result - 8) + 64LL;
        uint64_t result = type metadata accessor for ForeignEmergencyCallDisambiguationModel(319LL);
        if (v7 <= 0x3F)
        {
          v13[4] = *(void *)(result - 8) + 64LL;
          uint64_t result = type metadata accessor for LocalEmergencyCallDisambiguationModel(319LL);
          if (v8 <= 0x3F)
          {
            v13[5] = *(void *)(result - 8) + 64LL;
            v13[6] = &unk_335D70;
            v13[7] = v4;
            uint64_t result = type metadata accessor for SearchCallHistoryModel(319LL);
            if (v9 <= 0x3F)
            {
              v13[8] = *(void *)(result - 8) + 64LL;
              uint64_t result = type metadata accessor for PlayVoicemailModel(319LL);
              if (v10 <= 0x3F)
              {
                v13[9] = *(void *)(result - 8) + 64LL;
                uint64_t result = type metadata accessor for SingleResultVoicemailModel(319LL);
                if (v11 <= 0x3F)
                {
                  v13[10] = *(void *)(result - 8) + 64LL;
                  uint64_t result = type metadata accessor for SingleResultCallHistoryModel(319LL);
                  if (v12 <= 0x3F)
                  {
                    v13[11] = *(void *)(result - 8) + 64LL;
                    swift_initEnumMetadataMultiPayload(a1, 256LL, 12LL, v13);
                    return 0LL;
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for PhoneSnippetDataModels.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF4) {
    return ((uint64_t (*)(void))((char *)&loc_1FE120 + 4 * byte_335C91[v4]))();
  }
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1FE154 + 4 * byte_335C8C[v4]))();
}

uint64_t sub_1FE154(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1FE15C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1FE164LL);
  }
  return result;
}

uint64_t sub_1FE170(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1FE178LL);
  }
  *(_BYTE *)uint64_t result = a2 + 11;
  return result;
}

uint64_t sub_1FE17C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1FE184(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PhoneSnippetDataModels.CodingKeys()
{
  return &unk_40D678;
}

void *type metadata accessor for PhoneSnippetDataModels.AppConfirmationCodingKeys()
{
  return &unk_40D708;
}

void *type metadata accessor for PhoneSnippetDataModels.AppDisambiguationCodingKeys()
{
  return &unk_40D798;
}

void *type metadata accessor for PhoneSnippetDataModels.ContactConfirmationCodingKeys()
{
  return &unk_40D828;
}

void *type metadata accessor for PhoneSnippetDataModels.EmergencyCountdownCodingKeys()
{
  return &unk_40D8B8;
}

void *type metadata accessor for PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys()
{
  return &unk_40D948;
}

void *type metadata accessor for PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys()
{
  return &unk_40D9D8;
}

void *type metadata accessor for PhoneSnippetDataModels.StackedButtonsCodingKeys()
{
  return &unk_40DA68;
}

void *type metadata accessor for PhoneSnippetDataModels.YesNoConfirmationCodingKeys()
{
  return &unk_40DAF8;
}

void *type metadata accessor for PhoneSnippetDataModels.CallHistoryListCodingKeys()
{
  return &unk_40DB88;
}

void *type metadata accessor for PhoneSnippetDataModels.PlayVoicemailListCodingKeys()
{
  return &unk_40DC18;
}

void *type metadata accessor for PhoneSnippetDataModels.SingleVoicemailCodingKeys()
{
  return &unk_40DCA8;
}

uint64_t storeEnumTagSinglePayload for PhoneSnippetDataModels.AppConfirmationCodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1FE294 + 4 * byte_335C96[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1FE2B4 + 4 * byte_335C9B[v4]))();
  }
}

_BYTE *sub_1FE294(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1FE2B4(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1FE2BC(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1FE2C4(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1FE2CC(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1FE2D4(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void *type metadata accessor for PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys()
{
  return &unk_40DD38;
}

uint64_t OUTLINED_FUNCTION_1_74(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(void *)(v2 - 128), a1);
}

uint64_t OUTLINED_FUNCTION_2_70@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 256) + 8LL))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_3_93(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(void *)(v2 - 128), a1);
}

uint64_t OUTLINED_FUNCTION_6_80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, *(void *)(v5 - 256), v6, a5);
}

uint64_t OUTLINED_FUNCTION_7_84()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 160) + 8LL))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_8_62@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_10_59(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t OUTLINED_FUNCTION_11_66(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t OUTLINED_FUNCTION_13_68@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

void OUTLINED_FUNCTION_14_55(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void OUTLINED_FUNCTION_15_61(uint64_t a1)
{
}

uint64_t OUTLINED_FUNCTION_19_48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

void OUTLINED_FUNCTION_20_50(unint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t OUTLINED_FUNCTION_23_44()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_24_37()
{
  return v0;
}

  ;
}

void OUTLINED_FUNCTION_30_35(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 2outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

void OUTLINED_FUNCTION_31_35(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 22__swift_destroy_boxed_opaque_existential_1(v0 + 4) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

void OUTLINED_FUNCTION_32_36(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 256) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

unint64_t OUTLINED_FUNCTION_34_28()
{
  *(_BYTE *)(v0 - 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 4;
  return lazy protocol witness table accessor for type PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.ForeignEmergencyCallDisambiguationCodingKeys();
}

unint64_t OUTLINED_FUNCTION_36_28()
{
  *(_BYTE *)(v0 - 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 3;
  return lazy protocol witness table accessor for type PhoneSnippetDataModels.EmergencyCountdownCodingKeys and conformance PhoneSnippetDataModels.EmergencyCountdownCodingKeys();
}

unint64_t OUTLINED_FUNCTION_38_25()
{
  *(_BYTE *)(v0 - 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 11;
  return lazy protocol witness table accessor for type PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys and conformance PhoneSnippetDataModels.SingleCallHistoryRecordCodingKeys();
}

unint64_t OUTLINED_FUNCTION_41_29()
{
  *(_BYTE *)(v0 - 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2;
  return lazy protocol witness table accessor for type PhoneSnippetDataModels.ContactConfirmationCodingKeys and conformance PhoneSnippetDataModels.ContactConfirmationCodingKeys();
}

unint64_t OUTLINED_FUNCTION_42_19()
{
  *(_BYTE *)(v0 - 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 9;
  return lazy protocol witness table accessor for type PhoneSnippetDataModels.PlayVoicemailListCodingKeys and conformance PhoneSnippetDataModels.PlayVoicemailListCodingKeys();
}

uint64_t OUTLINED_FUNCTION_43_19()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_44_22()
{
  *(_BYTE *)(v0 - 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 8;
  return lazy protocol witness table accessor for type PhoneSnippetDataModels.CallHistoryListCodingKeys and conformance PhoneSnippetDataModels.CallHistoryListCodingKeys();
}

uint64_t OUTLINED_FUNCTION_45_22()
{
  return type metadata accessor for YesNoConfirmationModel(0LL);
}

uint64_t OUTLINED_FUNCTION_46_26()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_47_21()
{
  *(_BYTE *)(v0 - 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 7;
  return lazy protocol witness table accessor for type PhoneSnippetDataModels.YesNoConfirmationCodingKeys and conformance PhoneSnippetDataModels.YesNoConfirmationCodingKeys();
}

unint64_t OUTLINED_FUNCTION_48_20()
{
  *(_BYTE *)(v0 - 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 1;
  return lazy protocol witness table accessor for type PhoneSnippetDataModels.AppDisambiguationCodingKeys and conformance PhoneSnippetDataModels.AppDisambiguationCodingKeys();
}

unint64_t OUTLINED_FUNCTION_49_21()
{
  return lazy protocol witness table accessor for type PhoneSnippetDataModels.CodingKeys and conformance PhoneSnippetDataModels.CodingKeys();
}

unint64_t OUTLINED_FUNCTION_50_21()
{
  *(_BYTE *)(v0 - 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 6;
  return lazy protocol witness table accessor for type PhoneSnippetDataModels.StackedButtonsCodingKeys and conformance PhoneSnippetDataModels.StackedButtonsCodingKeys();
}

unint64_t OUTLINED_FUNCTION_51_15()
{
  *(_BYTE *)(v0 - 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 5;
  return lazy protocol witness table accessor for type PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys and conformance PhoneSnippetDataModels.LocalEmergencyCallDisambiguationCodingKeys();
}

uint64_t one-time initialization function for domainAffinityScoresSignalUseCases()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<DomainUseCase>);
  uint64_t v1 = type metadata accessor for DomainUseCase(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = swift_allocObject(v0, v5 + 6 * v3, v4 | 7);
  *(_OWORD *)(v6 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_328A80;
  uint64_t v7 = v6 + v5;
  unint64_t v8 = *(void (**)(uint64_t, void, uint64_t))(v2 + 104);
  v8(v7, enum case for DomainUseCase.phoneCall(_:), v1);
  v8(v7 + v3, enum case for DomainUseCase.phoneCallSiri(_:), v1);
  v8(v7 + 2 * v3, enum case for DomainUseCase.phoneCallReceived(_:), v1);
  v8(v7 + 3 * v3, enum case for DomainUseCase.messageSend(_:), v1);
  v8(v7 + 4 * v3, enum case for DomainUseCase.messageSendSiri(_:), v1);
  uint64_t result = ((uint64_t (*)(uint64_t, void, uint64_t))v8)( v7 + 5 * v3,  enum case for DomainUseCase.messageReceived(_:),  v1);
  static PhoneAppSelectionSignalsGatherer.domainAffinityScoresSignalUseCases = v6;
  return result;
}

uint64_t one-time initialization function for domainToContactAffinityScoresSignalUseCases()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<DomainUseCase>);
  uint64_t v1 = type metadata accessor for DomainUseCase(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = swift_allocObject(v0, v5 + 6 * v3, v4 | 7);
  *(_OWORD *)(v6 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_328A80;
  uint64_t v7 = v6 + v5;
  unint64_t v8 = *(void (**)(uint64_t, void, uint64_t))(v2 + 104);
  v8(v7, enum case for DomainUseCase.phoneCallToContact(_:), v1);
  v8(v7 + v3, enum case for DomainUseCase.phoneCallToContactSiri(_:), v1);
  v8(v7 + 2 * v3, enum case for DomainUseCase.phoneCallReceivedFromContact(_:), v1);
  v8(v7 + 3 * v3, enum case for DomainUseCase.messageSendToContact(_:), v1);
  v8(v7 + 4 * v3, enum case for DomainUseCase.messageSendToContactSiri(_:), v1);
  uint64_t result = ((uint64_t (*)(uint64_t, void, uint64_t))v8)( v7 + 5 * v3,  enum case for DomainUseCase.messageReceivedFromContact(_:),  v1);
  static PhoneAppSelectionSignalsGatherer.domainToContactAffinityScoresSignalUseCases = v6;
  return result;
}

void PhoneAppSelectionSignalsGatherer.__allocating_init(messageStream:)(uint64_t a1)
{
}

uint64_t PhoneAppSelectionSignalsGatherer.init(messageStream:)(uint64_t a1)
{
  uint64_t v4 = OUTLINED_FUNCTION_12();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_7_6();
  uint64_t v6 = (void *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin32PhoneAppSelectionSignalsGatherer_inputINIntent);
  *uint64_t v6 = 0LL;
  v6[1] = 0LL;
  *(void *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin32PhoneAppSelectionSignalsGatherer_timeout) = 0x4024000000000000LL;
  UUID.init()(v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))( v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin32PhoneAppSelectionSignalsGatherer_uuid,  v2,  v4);
  *(void *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin32PhoneAppSelectionSignalsGatherer_messageStream) = a1;
  return v1;
}

uint64_t PhoneAppSelectionSignalsGatherer.execute(person:phoneCallNLIntent:candidateAppBundleIds:selectedAppId:phoneAppSelectionSignalsGathererType:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t v8 = v6;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v15 = OUTLINED_FUNCTION_15_1();
  uint64_t v16 = (os_log_s *)__swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v17 = swift_bridgeObjectRetain_n(a5, 2LL);
  Logger.logObject.getter(v17);
  os_log_type_t v18 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_11_5(v18))
  {
    uint64_t v19 = OUTLINED_FUNCTION_7_0(22LL);
    uint64_t v32 = OUTLINED_FUNCTION_7_0(64LL);
    *(void *)&v36[0] = v32;
    *(_DWORD *)uint64_t v19 = 136315394;
    uint64_t v20 = OUTLINED_FUNCTION_124();
    uint64_t v34 = v8;
    uint64_t v21 = Array.description.getter(v20, &type metadata for String);
    char v33 = a6;
    unint64_t v23 = v22;
    OUTLINED_FUNCTION_4_1();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, (uint64_t *)v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v19 + 4);
    OUTLINED_FUNCTION_7_4(a3);
    OUTLINED_FUNCTION_39();
    *(_WORD *)(v19 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, (uint64_t *)v36);
    uint64_t v8 = v34;
    a6 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v19 + 14);
    swift_bridgeObjectRelease_n(a5, 3LL);
    _os_log_impl( &dword_0,  v16,  v7,  "PhoneAppSelectionSignalsGatherer execute with candidateApps:%s selectedAppId:%s",  (uint8_t *)v19,  0x16u);
    swift_arrayDestroy(v32, 2LL);
    OUTLINED_FUNCTION_0_2(v32);
    OUTLINED_FUNCTION_0_2(v19);
  }

  else
  {

    OUTLINED_FUNCTION_7_4(a5);
    OUTLINED_FUNCTION_7_4(a3);
  }

  uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 152LL))(a1, a3, a2);
  char v25 = a6 & 1;
  uint64_t v26 = specialized _arrayForceCast<A, B>(_:)(v24);
  OUTLINED_FUNCTION_62();
  uint64_t v27 = type metadata accessor for SignalGatherer(0LL);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  OUTLINED_FUNCTION_124();
  uint64_t v28 = SignalGatherer.init(signals:candidateAppBundleIds:)(v26, a3);
  outlined init with copy of SharedGlobalsProviding(a2, (uint64_t)v36);
  uint64_t v29 = swift_allocObject(&unk_40DE30, 97LL, 7LL);
  *(void *)(v29 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v8;
  *(void *)(v29 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a1;
  outlined init with take of AppSelectionSignalComponent(v36, v29 + 32);
  *(void *)(v29 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a3;
  *(void *)(v29 + 80) = a4;
  *(void *)(v29 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a5;
  *(_BYTE *)(v29 + 96) = v25;
  id v30 = a1;
  OUTLINED_FUNCTION_124();
  OUTLINED_FUNCTION_6_1();
  swift_retain();
  dispatch thunk of SignalGatherer.gatherValuesAndTimings(timeoutSeconds:completion:)( 10LL,  partial apply for closure #1 in PhoneAppSelectionSignalsGatherer.execute(person:phoneCallNLIntent:candidateAppBundleIds:selectedAppId:phoneAppSelectionSignalsGathererType:),  v29);
  OUTLINED_FUNCTION_22();
  return swift_release(v28);
}

void closure #1 in PhoneAppSelectionSignalsGatherer.execute(person:phoneCallNLIntent:candidateAppBundleIds:selectedAppId:phoneAppSelectionSignalsGathererType:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v66 = a6;
  uint64_t v67 = a7;
  uint64_t v64 = a4;
  uint64_t v65 = a5;
  uint64_t v63 = a3;
  uint64_t v11 = type metadata accessor for SignalGatherer.ValuesWithTimings(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v56 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<SignalGatherer.ValuesWithTimings, SignalGathererError>);
  __chkstk_darwin();
  uint64_t v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of Result<TemplatingResult, Error>( a1,  (uint64_t)v19,  &demangling cache variable for type metadata for Result<SignalGatherer.ValuesWithTimings, SignalGathererError>);
  if (swift_getEnumCaseMultiPayload(v19, v17) == 1)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.siriPhone);
    unint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v24 = static os_log_type_t.debug.getter(v22, v23);
    if (os_log_type_enabled(v22, v24))
    {
      char v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v25 = 0;
      _os_log_impl(&dword_0, v22, v24, "PhoneAppSelectionSignalsGatherer gathering failed", v25, 2u);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    outlined destroy of UUID?( (uint64_t)v19,  &demangling cache variable for type metadata for Result<SignalGatherer.ValuesWithTimings, SignalGathererError>);
  }

  else
  {
    int v62 = a8 & 1;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v19, v11);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v26, (uint64_t)static Logger.siriPhone);
    uint64_t v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 16))(v14, v16, v11);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v30 = static os_log_type_t.debug.getter(v28, v29);
    if (os_log_type_enabled(v28, v30))
    {
      uint64_t v60 = v16;
      uint64_t v31 = swift_slowAlloc(12LL, -1LL);
      uint64_t v61 = v11;
      uint64_t v32 = (uint8_t *)v31;
      uint64_t v59 = swift_slowAlloc(32LL, -1LL);
      uint64_t v69 = v59;
      *(_DWORD *)uint64_t v32 = 136315138;
      uint64_t v57 = v32 + 4;
      uint64_t v58 = v32;
      uint64_t v33 = SignalGatherer.ValuesWithTimings.values.getter();
      uint64_t v34 = type metadata accessor for SignalValue(0LL);
      uint64_t v35 = a2;
      uint64_t v36 = Dictionary.Keys.description.getter(v33, &type metadata for String, v34, &protocol witness table for String);
      unint64_t v38 = v37;
      swift_bridgeObjectRelease();
      uint64_t v39 = v36;
      a2 = v35;
      uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v38, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v57);
      uint64_t v16 = v60;
      swift_bridgeObjectRelease();
      uint64_t v40 = *(void (**)(char *, uint64_t))(v12 + 8);
      v40(v14, v61);
      uint64_t v41 = v58;
      _os_log_impl(&dword_0, v28, v30, "PhoneAppSelectionSignalsGatherer gathered values: %s", v58, 0xCu);
      uint64_t v42 = v59;
      swift_arrayDestroy(v59, 1LL);
      swift_slowDealloc(v42, -1LL, -1LL);
      uint64_t v11 = v61;
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
      uint64_t v40 = *(void (**)(char *, uint64_t))(v12 + 8);
      v40(v14, v11);
    }

    uint64_t v43 = v16;
    uint64_t v44 = SignalGatherer.ValuesWithTimings.values.getter();
    uint64_t v45 = PhoneAppSelectionSignalsGatherer.buildMetrics(person:phoneCallNLIntent:candidateAppBundleIds:selectedAppId:signalMap:phoneAppSelectionSignalsGathererType:)( v63,  v64,  v65,  v66,  v67,  v44,  v62);
    uint64_t v46 = swift_bridgeObjectRelease();
    if (v45)
    {
      uint64_t v47 = *(void **)(a2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin32PhoneAppSelectionSignalsGatherer_messageStream);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      [v47 emitMessage:v45 isolatedStreamUUID:isa];

      uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
      os_log_type_t v52 = static os_log_type_t.debug.getter(v50, v51);
      if (os_log_type_enabled(v50, v52))
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v53 = 0;
        _os_log_impl(&dword_0, v50, v52, "PhoneAppSelectionSignalsGatherer emitMessage is done.", v53, 2u);
        swift_slowDealloc(v53, -1LL, -1LL);
      }
    }

    else
    {
      uint64_t v50 = (os_log_s *)Logger.logObject.getter(v46);
      os_log_type_t v54 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v50, v54))
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v55 = 0;
        _os_log_impl(&dword_0, v50, v54, "PhoneAppSelectionSignalsGatherer failed on build metrics object", v55, 2u);
        swift_slowDealloc(v55, -1LL, -1LL);
      }
    }

    v40(v43, v11);
  }

uint64_t PhoneAppSelectionSignalsGatherer.getSignals(person:candidateAppBundleIds:phoneCallNLIntent:)( void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v138 = a2;
  id v133 = a1;
  uint64_t v146 = type metadata accessor for SignalDefinitionParametersProvider(0LL);
  uint64_t v143 = *(void *)(v146 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_19_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_19_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_19_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_19_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_19_2();
  __chkstk_darwin();
  BOOL v140 = (char *)&v114 - v7;
  uint64_t v139 = type metadata accessor for SignalComputationContext(0LL);
  uint64_t v135 = *(void **)(v139 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_7_6();
  type metadata accessor for CommunicationTypeSignal.CommunicationType(0LL);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = static ClientLocaleSignal.instances()();
  static ClientLanguageSignal.instances()();
  uint64_t v148 = v11;
  specialized Array.append<A>(contentsOf:)();
  uint64_t v12 = v148;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SignalProviding>);
  uint64_t inited = swift_initStackObject(v13, v151);
  __int128 v137 = xmmword_31D870;
  *(_OWORD *)(inited + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D870;
  uint64_t v15 = v5 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin32PhoneAppSelectionSignalsGatherer_inputINIntent;
  uint64_t v136 = (void **)(v5 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin32PhoneAppSelectionSignalsGatherer_inputINIntent);
  uint64_t v16 = *(void *)(v5 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin32PhoneAppSelectionSignalsGatherer_inputINIntent);
  uint64_t v17 = *(void *)(v15 + 8);
  id v18 = *(id *)v15;
  static AppSelectionSignalsGatheringHelper.getCommunicationType(phoneCallNLIntent:skIntent:)(a3, v16, v17, v10);

  *(void *)(inited + 56) = type metadata accessor for CommunicationTypeSignal(0LL);
  *(void *)(inited + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = &protocol witness table for CommunicationTypeSignal;
  __swift_allocate_boxed_opaque_existential_1((void *)(inited + 32));
  CommunicationTypeSignal.init(communicationType:)(v10);
  uint64_t v148 = v12;
  specialized Array.append<A>(contentsOf:)();
  uint64_t v19 = v148;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<DomainUseCase>);
  id v145 = (id)v20;
  uint64_t v21 = type metadata accessor for DomainUseCase(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v131 = v21;
  uint64_t v23 = *(void *)(v22 + 72);
  uint64_t v24 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v25 = (v24 + 32) & ~v24;
  uint64_t v144 = v24 | 7;
  uint64_t v129 = v25 + v23;
  uint64_t v26 = swift_allocObject(v20, v25 + v23, v24 | 7);
  *(_OWORD *)(v26 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v137;
  uint64_t v27 = enum case for DomainUseCase.phoneCall(_:);
  uint64_t v132 = *(void (**)(uint64_t, void, uint64_t))(v22 + 104);
  v132(v26 + v25, enum case for DomainUseCase.phoneCall(_:), v21);
  OUTLINED_FUNCTION_36_29();
  ((void (*)(void))SignalComputationContext.init(bundleIds:entityId:sharedUserId:domainUseCases:))();
  static DomainUserPersonaSignal.instances(context:)(v4);
  uint64_t v28 = (void (*)(uint64_t, uint64_t))v135[1];
  uint64_t v29 = v139;
  v28(v4, v139);
  uint64_t v148 = v19;
  OUTLINED_FUNCTION_88_14();
  uint64_t v156 = v148;
  uint64_t v30 = static TimeSpentInAppAffinityScore.instances()();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_36_29();
  ((void (*)(void))SignalComputationContext.init(bundleIds:entityId:sharedUserId:domainUseCases:))();
  static ForegroundAppBiomeSignal.instances(context:)(v4);
  uint64_t v128 = v4;
  uint64_t v127 = v28;
  v28(v4, v29);
  uint64_t v148 = v30;
  specialized Array.append<A>(contentsOf:)();
  uint64_t v31 = v148;
  static TimeSinceAppLastLaunchedSignal.instances()();
  uint64_t v148 = v31;
  specialized Array.append<A>(contentsOf:)();
  uint64_t v32 = v148;
  static TotalTimeSpentInApp.instances()();
  uint64_t v148 = v32;
  specialized Array.append<A>(contentsOf:)();
  uint64_t v33 = type metadata accessor for SignalDefinitionParametersProvider.Builder(0LL);
  uint64_t v34 = *(unsigned int *)(v33 + 48);
  uint64_t v35 = *(unsigned __int16 *)(v33 + 52);
  uint64_t v124 = v33;
  swift_allocObject(v33, v34, v35);
  OUTLINED_FUNCTION_50_22();
  uint64_t v36 = swift_allocObject(v145, v25 + 4 * v23, v144);
  *(_OWORD *)(v36 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31F580;
  uint64_t v142 = v25;
  unsigned int v125 = v27;
  uint64_t v37 = v27;
  uint64_t v38 = v143;
  OUTLINED_FUNCTION_11_1(v36 + v25, v37);
  OUTLINED_FUNCTION_11_1(v36 + v25 + v23, enum case for DomainUseCase.phoneCallSiri(_:));
  unsigned int v123 = enum case for DomainUseCase.messageSend(_:);
  OUTLINED_FUNCTION_11_1(v36 + v25 + 2 * v23, enum case for DomainUseCase.messageSend(_:));
  uint64_t v39 = v23;
  uint64_t v134 = 3 * v23;
  OUTLINED_FUNCTION_11_1(v36 + v25 + 3 * v23, enum case for DomainUseCase.messageSendSiri(_:));
  uint64_t v40 = dispatch thunk of SignalDefinitionParametersProvider.Builder.with(domainUseCases:)(v36);
  OUTLINED_FUNCTION_38_1();
  uint64_t v41 = swift_bridgeObjectRelease();
  uint64_t v42 = v140;
  dispatch thunk of SignalDefinitionParametersProvider.Builder.create()(v41);
  uint64_t v43 = v146;
  swift_release(v40);
  uint64_t v149 = v43;
  uint64_t v150 = &protocol witness table for SignalDefinitionParametersProvider;
  uint64_t v44 = __swift_allocate_boxed_opaque_existential_1(&v148);
  uint64_t v45 = *(void (**)(void *, __n128 *, uint64_t))(v38 + 16);
  v45(v44, (__n128 *)v42, v43);
  static DomainTotalFrequencySignal.instances(with:)(&v148);
  __swift_destroy_boxed_opaque_existential_1(&v148);
  specialized Array.append<A>(contentsOf:)();
  OUTLINED_FUNCTION_88_14();
  uint64_t v46 = *v136;
  if (*v136)
  {
    uint64_t v141 = v39;
    uint64_t v130 = 4 * v39;
    uint64_t v136 = (void **)(2 * v39);
    OUTLINED_FUNCTION_20_51();
    id v47 = v46;
    SignalDefinitionParametersProvider.Builder.init()();
    uint64_t v48 = (__n128 *)OUTLINED_FUNCTION_85_10((uint64_t)v145, v144, (uint64_t)v152);
    uint64_t v49 = v45;
    uint64_t v135 = v45;
    uint64_t v50 = v48;
    OUTLINED_FUNCTION_61_16(v48, (uint64_t)&v158);
    uint64_t v53 = v52;
    LODWORD(v12__swift_destroy_boxed_opaque_existential_1(v0 + 9) = enum case for DomainUseCase.phoneCallToContact(_:);
    OUTLINED_FUNCTION_11_1(v51 + v52, enum case for DomainUseCase.phoneCallToContact(_:));
    dispatch thunk of SignalDefinitionParametersProvider.Builder.with(domainUseCases:)(v50);
    OUTLINED_FUNCTION_38_1();
    OUTLINED_FUNCTION_4_1();
    id v54 = v47;
    dispatch thunk of SignalDefinitionParametersProvider.Builder.with(intent:)();
    OUTLINED_FUNCTION_91_11();

    OUTLINED_FUNCTION_81_15();
    OUTLINED_FUNCTION_38_1();
    uint64_t v55 = v146;
    uint64_t v149 = v146;
    uint64_t v56 = OUTLINED_FUNCTION_27_45((uint64_t)&protocol witness table for SignalDefinitionParametersProvider);
    v49(v56, v50, v55);
    static DomainToContactTimeSinceLastUsedSignal.instances(with:)(&v148);
    __swift_destroy_boxed_opaque_existential_1(&v148);
    specialized Array.append<A>(contentsOf:)();
    OUTLINED_FUNCTION_20_51();
    OUTLINED_FUNCTION_50_22();
    uint64_t v122 = (char *)v136 + v53;
    uint64_t v57 = v144;
    uint64_t v58 = swift_allocObject(v145, (char *)v136 + v53, v144);
    __int128 v121 = xmmword_31D880;
    *(_OWORD *)(v58 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D880;
    uint64_t v59 = v58 + v53;
    LODWORD(v137) = enum case for DomainUseCase.messageSendToContact(_:);
    OUTLINED_FUNCTION_11_1(v58 + v53, enum case for DomainUseCase.messageSendToContact(_:));
    uint64_t v60 = v129;
    OUTLINED_FUNCTION_11_1(v59 + v141, v129);
    dispatch thunk of SignalDefinitionParametersProvider.Builder.with(domainUseCases:)(v58);
    OUTLINED_FUNCTION_38_1();
    OUTLINED_FUNCTION_4_1();
    id v61 = v54;
    id v115 = v61;
    dispatch thunk of SignalDefinitionParametersProvider.Builder.with(intent:)();
    OUTLINED_FUNCTION_91_11();

    OUTLINED_FUNCTION_79_10();
    OUTLINED_FUNCTION_38_1();
    uint64_t v149 = v146;
    OUTLINED_FUNCTION_27_45((uint64_t)&protocol witness table for SignalDefinitionParametersProvider);
    OUTLINED_FUNCTION_78_17();
    static DomainToContactFrequencyByIntentSignal.instances(with:)(&v148);
    __swift_destroy_boxed_opaque_existential_1(&v148);
    OUTLINED_FUNCTION_88_14();
    OUTLINED_FUNCTION_20_51();
    OUTLINED_FUNCTION_50_22();
    uint64_t v62 = v141;
    uint64_t v63 = v142;
    uint64_t v120 = v142 + 6 * v141;
    uint64_t v64 = swift_allocObject(v145, v120, v57);
    __int128 v119 = xmmword_328A80;
    *(_OWORD *)(v64 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_328A80;
    OUTLINED_FUNCTION_11_1(v64 + v63, v60);
    unsigned int v118 = enum case for DomainUseCase.phoneCallToContactSiri(_:);
    OUTLINED_FUNCTION_11_1(v64 + v63 + v62, enum case for DomainUseCase.phoneCallToContactSiri(_:));
    uint64_t v65 = OUTLINED_FUNCTION_58_16((uint64_t)&v157);
    OUTLINED_FUNCTION_11_1(v65, enum case for DomainUseCase.phoneCallToContactHaptic(_:));
    OUTLINED_FUNCTION_11_1(v64 + v63 + v134, v137);
    uint64_t v66 = OUTLINED_FUNCTION_58_16((uint64_t)v153);
    unsigned int v117 = enum case for DomainUseCase.messageSendToContactSiri(_:);
    OUTLINED_FUNCTION_11_1(v66, enum case for DomainUseCase.messageSendToContactSiri(_:));
    uint64_t v116 = 5 * v62;
    OUTLINED_FUNCTION_11_1(v64 + v63 + 5 * v62, enum case for DomainUseCase.messageSendToContactHaptic(_:));
    dispatch thunk of SignalDefinitionParametersProvider.Builder.with(domainUseCases:)(v64);
    OUTLINED_FUNCTION_38_1();
    swift_bridgeObjectRelease();
    id v67 = v115;
    dispatch thunk of SignalDefinitionParametersProvider.Builder.with(intent:)();
    OUTLINED_FUNCTION_31_2();

    OUTLINED_FUNCTION_79_10();
    OUTLINED_FUNCTION_38_1();
    uint64_t v149 = v146;
    uint64_t v68 = OUTLINED_FUNCTION_27_45((uint64_t)&protocol witness table for SignalDefinitionParametersProvider);
    uint64_t v69 = (void (*)(void *, uint64_t, uint64_t))v135;
    ((void (*)(void *, uint64_t, uint64_t))v135)(v68, v62, v146);
    static DomainToContactTotalFrequencyByIntentSignal.instances(with:)(&v148);
    OUTLINED_FUNCTION_26_42();
    OUTLINED_FUNCTION_20_51();
    OUTLINED_FUNCTION_50_22();
    uint64_t v70 = (__n128 *)OUTLINED_FUNCTION_85_10((uint64_t)v145, v144, (uint64_t)&v144);
    OUTLINED_FUNCTION_61_16(v70, (uint64_t)&v141);
    uint64_t v73 = v71 + v72;
    OUTLINED_FUNCTION_11_1(v71 + v72, v129);
    OUTLINED_FUNCTION_11_1(v73 + v141, v118);
    uint64_t v74 = OUTLINED_FUNCTION_58_16((uint64_t)&v157);
    OUTLINED_FUNCTION_11_1(v74, enum case for DomainUseCase.phoneCallReceivedFromContact(_:));
    OUTLINED_FUNCTION_11_1(v73 + v134, v137);
    uint64_t v75 = OUTLINED_FUNCTION_58_16((uint64_t)v153);
    OUTLINED_FUNCTION_11_1(v75, v117);
    uint64_t v76 = OUTLINED_FUNCTION_58_16((uint64_t)&v139);
    OUTLINED_FUNCTION_11_1(v76, enum case for DomainUseCase.messageReceivedFromContact(_:));
    dispatch thunk of SignalDefinitionParametersProvider.Builder.with(domainUseCases:)(v70);
    OUTLINED_FUNCTION_38_1();
    swift_bridgeObjectRelease();
    id v77 = v67;
    uint64_t v78 = v146;
    id v79 = v77;
    dispatch thunk of SignalDefinitionParametersProvider.Builder.with(intent:)();
    OUTLINED_FUNCTION_31_2();

    dispatch thunk of SignalDefinitionParametersProvider.Builder.with(bundleIds:)(v138);
    uint64_t v80 = OUTLINED_FUNCTION_38_1();
    uint64_t v81 = v126;
    dispatch thunk of SignalDefinitionParametersProvider.Builder.create()(v80);
    OUTLINED_FUNCTION_31_2();
    uint64_t v149 = v78;
    uint64_t v82 = OUTLINED_FUNCTION_27_45((uint64_t)&protocol witness table for SignalDefinitionParametersProvider);
    v69(v82, v81, v78);
    static DomainToContactAffinityScoreByIntentSignal.instances(with:)(&v148);
    OUTLINED_FUNCTION_26_42();
    OUTLINED_FUNCTION_20_51();
    OUTLINED_FUNCTION_50_22();
    uint64_t v83 = (__n128 *)OUTLINED_FUNCTION_85_10((uint64_t)v145, v144, (uint64_t)&v147);
    OUTLINED_FUNCTION_61_16(v83, (uint64_t)&v145);
    uint64_t v86 = v84 + v85;
    OUTLINED_FUNCTION_11_1(v84 + v85, v125);
    OUTLINED_FUNCTION_11_1(v86 + v141, v123);
    uint64_t v87 = dispatch thunk of SignalDefinitionParametersProvider.Builder.with(domainUseCases:)(v83);
    OUTLINED_FUNCTION_38_1();
    swift_bridgeObjectRelease();
    id v88 = v79;
    dispatch thunk of SignalDefinitionParametersProvider.Builder.with(intent:)();
    swift_release(v87);

    OUTLINED_FUNCTION_81_15();
    OUTLINED_FUNCTION_38_1();
    uint64_t v149 = v78;
    OUTLINED_FUNCTION_27_45((uint64_t)&protocol witness table for SignalDefinitionParametersProvider);
    OUTLINED_FUNCTION_78_17();
    static DomainTotalFrequencyByCountryCodeSignal.instances(with:)(&v148);
    OUTLINED_FUNCTION_26_42();

    uint64_t v89 = *(void (**)(uint64_t, uint64_t))(v143 + 8);
    v89(v87, v78);
    v89(v81, v78);
    OUTLINED_FUNCTION_44_23((uint64_t)&v156);
    OUTLINED_FUNCTION_44_23((uint64_t)&v155);
    OUTLINED_FUNCTION_44_23((uint64_t)v154);
  }

  if (v133)
  {
    id v90 = v133;
    outlined bridged method (pb) of @objc INPerson.siriMatches.getter(v90);
    if (v91)
    {
      uint64_t v92 = v91;
      if ((unint64_t)v91 >> 62)
      {
        if (v91 >= 0) {
          v91 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        if (_CocoaArrayWrapper.endIndex.getter(v91)) {
          goto LABEL_7;
        }
      }

      else if (*(void *)((char *)&dword_10 + (v91 & 0xFFFFFFFFFFFFFF8LL)))
      {
LABEL_7:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (v92 & 0xC000000000000001LL) == 0, v92);
        if ((v92 & 0xC000000000000001LL) != 0) {
          id v93 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v92);
        }
        else {
          id v93 = *(id *)(v92 + 32);
        }
        uint64_t v94 = v93;
        OUTLINED_FUNCTION_4_1();
        INPerson.siriRemembersContactName.getter();
        uint64_t v96 = v95;
        unint64_t v98 = v97;

        goto LABEL_15;
      }

      OUTLINED_FUNCTION_4_1();
    }

    INPerson.siriRemembersContactName.getter();
    uint64_t v96 = v99;
    unint64_t v98 = v100;
LABEL_15:
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v101 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v101, (uint64_t)static Logger.siriPhone);
    uint64_t v102 = swift_bridgeObjectRetain_n(v98, 2LL);
    uint64_t v103 = (os_log_s *)Logger.logObject.getter(v102);
    os_log_type_t v105 = static os_log_type_t.debug.getter(v103, v104);
    if (os_log_type_enabled(v103, v105))
    {
      uint64_t v106 = swift_slowAlloc(12LL, -1LL);
      id v145 = v90;
      uint64_t v107 = (uint8_t *)v106;
      uint64_t v108 = swift_slowAlloc(32LL, -1LL);
      uint64_t v148 = v108;
      *(_DWORD *)uint64_t v107 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v109 = v96;
      uint64_t v147 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v98, &v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v107 + 4);
      swift_bridgeObjectRelease_n(v98, 3LL);
      _os_log_impl(&dword_0, v103, v105, "PhoneAppSelectionSignalsGatherer gathering contactName:%s", v107, 0xCu);
      swift_arrayDestroy(v108, 1LL);
      OUTLINED_FUNCTION_0_2(v108);
      uint64_t v110 = (uint64_t)v107;
      id v90 = v145;
      OUTLINED_FUNCTION_0_2(v110);
    }

    else
    {
      uint64_t v109 = v96;

      swift_bridgeObjectRelease_n(v98, 2LL);
    }

    uint64_t v111 = v128;
    if (one-time initialization token for domainAffinityScoresSignalUseCases != -1) {
      swift_once( &one-time initialization token for domainAffinityScoresSignalUseCases,  one-time initialization function for domainAffinityScoresSignalUseCases);
    }
    OUTLINED_FUNCTION_48_0();
    OUTLINED_FUNCTION_36_29();
    ((void (*)(void))SignalComputationContext.init(bundleIds:entityId:sharedUserId:domainUseCases:))();
    static DomainAffinityScoreSignal.instances(context:)(v111);
    OUTLINED_FUNCTION_63_16();
    specialized Array.append<A>(contentsOf:)();
    if (one-time initialization token for domainToContactAffinityScoresSignalUseCases != -1) {
      swift_once( &one-time initialization token for domainToContactAffinityScoresSignalUseCases,  one-time initialization function for domainToContactAffinityScoresSignalUseCases);
    }
    uint64_t v112 = static PhoneAppSelectionSignalsGatherer.domainToContactAffinityScoresSignalUseCases;
    OUTLINED_FUNCTION_48_0();
    SignalComputationContext.init(bundleIds:entityId:sharedUserId:domainUseCases:)( _swiftEmptyArrayStorage,  v109,  v98,  0LL,  0LL,  v112);
    static DomainToContactAffinityScoreByNameSignal.instances(context:)(v111);
    OUTLINED_FUNCTION_63_16();
    OUTLINED_FUNCTION_6_1();
    specialized Array.append<A>(contentsOf:)();
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v143 + 8))(v140, v146);
  return v156;
}

double PhoneAppSelectionSignalsGatherer.parseValue(val:appBundleId:isIndependentKey:)( uint64_t a1, uint8_t *a2, uint64_t a3)
{
  uint64_t v8 = (double *)((char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v10 = (char *)&v34 - v9;
  outlined init with copy of Result<TemplatingResult, Error>( a1,  (uint64_t)&v34 - v9,  &demangling cache variable for type metadata for SignalValue?);
  uint64_t v11 = type metadata accessor for SignalValue(0LL);
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1LL, v11);
  if ((_DWORD)EnumTagSinglePayload == 1) {
    goto LABEL_2;
  }
  outlined init with copy of Result<TemplatingResult, Error>( (uint64_t)v10,  (uint64_t)v8,  &demangling cache variable for type metadata for SignalValue?);
  uint64_t v14 = *(void *)(v11 - 8);
  int v15 = (*(uint64_t (**)(double *, uint64_t))(v14 + 88))(v8, v11);
  if (v15 == enum case for SignalValue.independent(_:))
  {
    uint64_t v16 = OUTLINED_FUNCTION_24_38();
    OUTLINED_FUNCTION_93_1(v16, &demangling cache variable for type metadata for SignalValue?);
    return -1.0;
  }

  if (v15 != enum case for SignalValue.dependent(_:))
  {
    if (v15 == enum case for SignalValue.independentDouble(_:))
    {
      uint64_t v21 = OUTLINED_FUNCTION_24_38();
      double v13 = *v8;
    }

    else
    {
      if (v15 != enum case for SignalValue.dependentDouble(_:))
      {
        uint64_t EnumTagSinglePayload = (*(uint64_t (**)(double *, uint64_t))(v14 + 8))(v8, v11);
        goto LABEL_2;
      }

      OUTLINED_FUNCTION_24_38();
      OUTLINED_FUNCTION_53_21();
      if (!v22)
      {
        OUTLINED_FUNCTION_4_1();
        if (one-time initialization token for siriPhone != -1) {
          swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
        }
        uint64_t v31 = OUTLINED_FUNCTION_15_1();
        OUTLINED_FUNCTION_12_1(v31, (uint64_t)static Logger.siriPhone);
        os_log_type_t v32 = OUTLINED_FUNCTION_24();
        if (!OUTLINED_FUNCTION_7(v32)) {
          goto LABEL_29;
        }
        uint64_t v33 = (_WORD *)OUTLINED_FUNCTION_1_0();
        OUTLINED_FUNCTION_31_0(v33);
        uint64_t v30 = "PhoneAppSelectionSignalsGatherer dependentDouble bundleId shouldn't be empty";
        goto LABEL_28;
      }

      PhoneAppSelectionSignalsGatherer.getKeyValueCaseInsensitiveDouble(appId:map:)((uint64_t)a2, a3, (uint64_t)v8);
      double v24 = v23;
      char v26 = v25;
      uint64_t v21 = OUTLINED_FUNCTION_4_1();
      if ((v26 & 1) != 0) {
        double v13 = -1.0;
      }
      else {
        double v13 = v24;
      }
    }

    OUTLINED_FUNCTION_93_1(v21, &demangling cache variable for type metadata for SignalValue?);
    return v13;
  }

  OUTLINED_FUNCTION_24_38();
  OUTLINED_FUNCTION_53_21();
  if (!v18)
  {
    OUTLINED_FUNCTION_4_1();
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v27 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v27, (uint64_t)static Logger.siriPhone);
    os_log_type_t v28 = OUTLINED_FUNCTION_24();
    if (!OUTLINED_FUNCTION_7(v28)) {
      goto LABEL_29;
    }
    uint64_t v29 = (_WORD *)OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_31_0(v29);
    uint64_t v30 = "PhoneAppSelectionSignalsGatherer dependent bundleId shouldn't be empty";
LABEL_28:
    OUTLINED_FUNCTION_5(&dword_0, v3, (os_log_type_t)a3, v30, a2);
    OUTLINED_FUNCTION_0_2((uint64_t)a2);
LABEL_29:

    goto LABEL_2;
  }

  PhoneAppSelectionSignalsGatherer.getKeyValueCaseInsensitiveDouble(appId:map:)((uint64_t)a2, a3, (uint64_t)v8);
  char v20 = v19;
  uint64_t EnumTagSinglePayload = OUTLINED_FUNCTION_4_1();
  if ((v20 & 1) == 0)
  {
    OUTLINED_FUNCTION_93_1(EnumTagSinglePayload, &demangling cache variable for type metadata for SignalValue?);
    return -1.0;
  }

LABEL_2:
  OUTLINED_FUNCTION_93_1(EnumTagSinglePayload, &demangling cache variable for type metadata for SignalValue?);
  return -1.0;
}

void *SignalValueObject.unsetValueDouble.unsafeMutableAddressor()
{
  return &static SignalValueObject.unsetValueDouble;
}

PhoneCallFlowDelegatePlugin::SignalValueObject __swiftcall SignalValueObject.init()()
{
  double v0 = -1.0;
  Swift::Int v1 = -1LL;
  result.doubleValue = v0;
  result.intValue = v1;
  return result;
}

void *PhoneAppSelectionSignalsGatherer.getInputINIntent()()
{
  Swift::Int v1 = *(void **)(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin32PhoneAppSelectionSignalsGatherer_inputINIntent);
  id v2 = v1;
  return v1;
}

void PhoneAppSelectionSignalsGatherer.setInputINIntent(intent:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v6 = OUTLINED_FUNCTION_15_1();
  uint64_t v7 = (os_log_s *)__swift_project_value_buffer(v6, (uint64_t)static Logger.siriPhone);
  id v8 = a1;
  Logger.logObject.getter(v8);
  os_log_type_t v9 = OUTLINED_FUNCTION_6_0();
  if (os_log_type_enabled(v7, v9))
  {
    uint64_t v16 = a2;
    uint64_t v10 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v11 = (void *)OUTLINED_FUNCTION_7_0(8LL);
    *(_DWORD *)uint64_t v10 = 138412290;
    if (a1)
    {
      id v17 = v8;
      id v12 = v8;
    }

    else
    {
      id v17 = 0LL;
    }

    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v10 + 4);
    *uint64_t v11 = a1;

    _os_log_impl(&dword_0, v7, v9, "PhoneAppSelectionSignalsGatherer update input intent: %@", v10, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v11, 1LL);
    OUTLINED_FUNCTION_0_2((uint64_t)v11);
    OUTLINED_FUNCTION_0_2((uint64_t)v10);

    a2 = v16;
  }

  else
  {
  }

  double v13 = (void *)(v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin32PhoneAppSelectionSignalsGatherer_inputINIntent);
  uint64_t v14 = *(void **)(v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin32PhoneAppSelectionSignalsGatherer_inputINIntent);
  *double v13 = a1;
  v13[1] = a2;
  id v15 = v8;
}

void PhoneAppSelectionSignalsGatherer.getKeyValueCaseInsensitiveDouble(appId:map:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  while (v5)
  {
    OUTLINED_FUNCTION_59_16();
LABEL_18:
    OUTLINED_FUNCTION_34_29(v7);
    char v10 = OUTLINED_FUNCTION_48_21();
    OUTLINED_FUNCTION_13_1();
    if ((v10 & 1) != 0)
    {
LABEL_19:
      OUTLINED_FUNCTION_22();
      OUTLINED_FUNCTION_7_5();
      return;
    }
  }

  uint64_t v8 = v6 + 1;
  if (__OFADD__(v6, 1LL))
  {
    __break(1u);
    goto LABEL_21;
  }

  if (v8 >= v4) {
    goto LABEL_19;
  }
  ++v6;
  if (*(void *)(v3 + 8 * v8)) {
    goto LABEL_17;
  }
  uint64_t v6 = v8 + 1;
  if (v8 + 1 >= v4) {
    goto LABEL_19;
  }
  if (*(void *)(v3 + 8 * v6)) {
    goto LABEL_17;
  }
  uint64_t v6 = v8 + 2;
  if (v8 + 2 >= v4) {
    goto LABEL_19;
  }
  if (*(void *)(v3 + 8 * v6))
  {
LABEL_17:
    OUTLINED_FUNCTION_55_18();
    goto LABEL_18;
  }

  uint64_t v9 = v8 + 3;
  if (v9 >= v4) {
    goto LABEL_19;
  }
  if (*(void *)(v3 + 8 * v9))
  {
    uint64_t v6 = v9;
    goto LABEL_17;
  }

  while (1)
  {
    uint64_t v6 = v9 + 1;
    if (__OFADD__(v9, 1LL)) {
      break;
    }
    if (v6 >= v4) {
      goto LABEL_19;
    }
    ++v9;
    if (*(void *)(v3 + 8 * v6)) {
      goto LABEL_17;
    }
  }

uint64_t PhoneAppSelectionSignalsGatherer.areKeysEqual(appId:mappingKey:)(uint64_t a1, uint64_t a2)
{
  Swift::String v4 = String.lowercased()();
  uint64_t v5 = OUTLINED_FUNCTION_42_14();
  if (v4._countAndFlagsBits == v5 && v4._object == v6)
  {
    OUTLINED_FUNCTION_7_4((uint64_t)v4._object);
  }

  else
  {
    char v8 = OUTLINED_FUNCTION_49_2(v4._countAndFlagsBits, (uint64_t)v4._object, v5, (uint64_t)v6);
    OUTLINED_FUNCTION_4_1();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      OUTLINED_FUNCTION_48_0();
      goto LABEL_9;
    }
  }

  a2 = 0x8000000000348B90LL;
  a1 = 0xD000000000000017LL;
LABEL_9:
  Swift::String v9 = String.lowercased()();
  uint64_t v10 = OUTLINED_FUNCTION_94_11();
  if (v9._countAndFlagsBits == v10 && v9._object == v11) {
    int v13 = 1;
  }
  else {
    int v13 = OUTLINED_FUNCTION_49_2(v9._countAndFlagsBits, (uint64_t)v9._object, v10, (uint64_t)v11);
  }
  OUTLINED_FUNCTION_13_1();
  swift_bridgeObjectRelease();
  static PhoneCallAppNameConstants.isPhoneCaseInsensitive(appId:)(a1, a2);
  char v15 = v14;
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
  {
    uint64_t v16 = OUTLINED_FUNCTION_94_11();
    uint64_t v18 = v17;
    if (v16 == OUTLINED_FUNCTION_42_14() && v18 == v19)
    {
      int v25 = 1;
    }

    else
    {
      uint64_t v21 = v19;
      uint64_t v22 = OUTLINED_FUNCTION_99_2();
      int v25 = OUTLINED_FUNCTION_49_2(v22, v23, v24, v21);
    }

    OUTLINED_FUNCTION_39();
    OUTLINED_FUNCTION_62();
  }

  else
  {
    int v25 = 0;
  }

  return (v13 | v25) & 1;
}

void *PhoneAppSelectionSignalsGatherer.buildCommsAppSelectionGroundTruthGenerated(person:phoneCallNLIntent:candidateAppBundleIds:selectedAppId:signalMap:phoneAppSelectionSignalsGathererType:)( uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v8 = v7;
  Swift::String v9 = (uint64_t *)a6;
  if ((a7 & 1) != 0) {
    uint64_t v13 = 9LL;
  }
  else {
    uint64_t v13 = 3LL;
  }
  char v14 = PhoneAppSelectionSignalsGatherer.buildIndependentSignals(person:phoneCallNLIntent:signalMap:resolutionType:)( a1,  (uint64_t)a2,  a6,  v13);
  char v15 = v14;
  uint64_t v53 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v16 = a3[2];
  uint64_t v17 = &unk_42A000;
  if (v16)
  {
    id v47 = v14;
    OUTLINED_FUNCTION_8_1();
    uint64_t v18 = (void **)(a3 + 5);
    uint64_t v48 = a5;
    uint64_t v49 = v9;
    uint64_t v50 = a4;
    do
    {
      uint64_t v19 = (uint64_t)*(v18 - 1);
      a3 = *v18;
      uint64_t v20 = OUTLINED_FUNCTION_8_1();
      PhoneAppSelectionSignalsGatherer.buildCommsAppSelectionAppDependentSignals(person:phoneCallNLIntent:signalMap:appBundleId:selectedAppId:)( v20,  a2,  v9,  v19,  (uint64_t)a3,  a4,  a5);
      if (v21)
      {
        uint64_t v22 = v21;
        OUTLINED_FUNCTION_39();
        a3 = v22;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(a3);
        unint64_t v24 = *(void *)((char *)&dword_10 + (v53 & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v23 = *(void *)((char *)&dword_18 + (v53 & 0xFFFFFFFFFFFFFF8LL));
        if (v24 >= v23 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1LL);
        }
        uint64_t v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, a3);
        specialized Array._endMutation()(v25, v26, v27, v28);
      }

      else
      {
        if (v17[107] != -1LL) {
          swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
        }
        uint64_t v29 = OUTLINED_FUNCTION_15_1();
        uint64_t v30 = (os_log_s *)__swift_project_value_buffer(v29, (uint64_t)static Logger.siriPhone);
        uint64_t v31 = OUTLINED_FUNCTION_8_1();
        Logger.logObject.getter(v31);
        os_log_type_t v32 = OUTLINED_FUNCTION_6_0();
        if (OUTLINED_FUNCTION_11_5(v32))
        {
          uint64_t v33 = OUTLINED_FUNCTION_7_0(12LL);
          uint64_t v34 = v8;
          uint64_t v35 = v17;
          uint64_t v36 = OUTLINED_FUNCTION_7_0(32LL);
          uint64_t v52 = v36;
          *(_DWORD *)uint64_t v33 = 136315138;
          OUTLINED_FUNCTION_8_1();
          *(void *)(v33 + __swift_destroy_boxed_opaque_existential_1(v0 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( v19,  (unint64_t)a3,  &v52);
          swift_bridgeObjectRelease_n(a3, 3LL);
          _os_log_impl( &dword_0,  v30,  (os_log_type_t)a4,  "PhoneAppSelectionSignalsGatherer dependentSignal is nil appBundleId:%s",  (uint8_t *)v33,  0xCu);
          swift_arrayDestroy(v36, 1LL);
          uint64_t v37 = v36;
          uint64_t v17 = v35;
          uint64_t v8 = v34;
          Swift::String v9 = v49;
          OUTLINED_FUNCTION_0_2(v37);
          uint64_t v38 = v33;
          a5 = v48;
          OUTLINED_FUNCTION_0_2(v38);
        }

        else
        {

          OUTLINED_FUNCTION_7_4((uint64_t)a3);
        }

        a4 = v50;
      }

      v18 += 2;
      --v16;
    }

    while (v16);
    swift_bridgeObjectRelease();
    char v15 = v47;
  }

  id v39 = [objc_allocWithZone(INFERENCESchemaINFERENCECommsAppSelectionGroundTruthGenerated) init];
  if (v39)
  {
    uint64_t v40 = v39;
    [v39 setInferenceCommsAppSelectionTrainingAppIndependentSignals:v15];
    outlined bridged method (mbnn) of @objc INFERENCESchemaINFERENCECommsAppSelectionGroundTruthGenerated.inferenceCommsAppSelectionTrainingAppDependentSignals.setter( v53,  v40);
  }

  else
  {
    swift_bridgeObjectRelease();
    if (v17[107] != -1LL) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v41 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v41, (uint64_t)static Logger.siriPhone);
    os_log_type_t v42 = OUTLINED_FUNCTION_59_8();
    if (OUTLINED_FUNCTION_10(v42))
    {
      uint64_t v43 = (_WORD *)OUTLINED_FUNCTION_1_0();
      OUTLINED_FUNCTION_47(v43);
      OUTLINED_FUNCTION_2_2( &dword_0,  v44,  v45,  "PhoneAppSelectionSignalsGatherer CommsAppSelectionGroundTruthGenerated can't be constructed");
      OUTLINED_FUNCTION_0_2(v8);
    }

    uint64_t v40 = 0LL;
  }

  return v40;
}

void *PhoneAppSelectionSignalsGatherer.buildIndependentSignals(person:phoneCallNLIntent:signalMap:resolutionType:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v7 - v6;
  id v9 = [objc_allocWithZone(INFERENCESchemaINFERENCECommsAppSelectionTrainingAppIndependentSignals) init];
  if (v9)
  {
    Swift::String v4 = v9;
    OUTLINED_FUNCTION_62_14(0x61636F6C2E776172LL, 0xEA0000000000656CLL, v8);
    OUTLINED_FUNCTION_19_49();
    OUTLINED_FUNCTION_49_22();
    OUTLINED_FUNCTION_87_9(v10, "setRequestOriginLocale:");
    OUTLINED_FUNCTION_62_14(0x676E616C2E776172LL, 0xEC00000065676175LL, v8);
    OUTLINED_FUNCTION_19_49();
    OUTLINED_FUNCTION_49_22();
    OUTLINED_FUNCTION_87_9(v11, "setRequestOriginLanguage:");
    [v4 setAppResolutionType:a4];
    OUTLINED_FUNCTION_62_14(0xD000000000000015LL, 0x8000000000348E30LL, v8);
    uint64_t v12 = OUTLINED_FUNCTION_19_49();
    OUTLINED_FUNCTION_49_22();
    [v4 setCommunicationType:v12];
    if (one-time initialization token for userPersonaKey != -1) {
      swift_once(&one-time initialization token for userPersonaKey, one-time initialization function for userPersonaKey);
    }
    __int128 v13 = static CommsAppSelectionAppIndependentSignalsKeys.userPersonaKey;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_62_14(v13, *((uint64_t *)&v13 + 1), v8);
    OUTLINED_FUNCTION_13_1();
    OUTLINED_FUNCTION_19_49();
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for SignalValue?);
    OUTLINED_FUNCTION_7_85();
    if (v14 != v15)
    {
      __break(1u);
    }

    else
    {
      OUTLINED_FUNCTION_6_81();
      if (v14 ^ v15 | v16)
      {
        OUTLINED_FUNCTION_17_6(v4, "setUserPersona:");
        return v4;
      }
    }

    __break(1u);
    goto LABEL_15;
  }

  if (one-time initialization token for siriPhone != -1) {
LABEL_15:
  }
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  uint64_t v17 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v17, (uint64_t)static Logger.siriPhone);
  os_log_type_t v18 = OUTLINED_FUNCTION_59_8();
  if (OUTLINED_FUNCTION_10(v18))
  {
    uint64_t v19 = (_WORD *)OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_47(v19);
    OUTLINED_FUNCTION_2_2( &dword_0,  v20,  v21,  "PhoneAppSelectionSignalsGatherer CommsAppSelectionAppIndependentSignals can't be constructed");
    OUTLINED_FUNCTION_0_2(v8);
  }

  return 0LL;
}

uint64_t SignalValueObject.int32Value.getter(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_5;
  }

  if (result > 0x7FFFFFFF) {
LABEL_5:
  }
    __break(1u);
  return result;
}

void PhoneAppSelectionSignalsGatherer.buildCommsAppSelectionAppDependentSignals(person:phoneCallNLIntent:signalMap:appBundleId:selectedAppId:)( uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SignalValue?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v17 = v16 - v15;
  id v18 = [objc_allocWithZone(INFERENCESchemaINFERENCECommsAppSelectionTrainingAppDependentSignals) init];
  if (v18)
  {
    uint64_t v19 = v18;
    BOOL v20 = a6 == a4 && a7 == a5;
    uint64_t v115 = (uint64_t)a3;
    if (v20) {
      uint64_t v21 = 1LL;
    }
    else {
      uint64_t v21 = OUTLINED_FUNCTION_49_2(a6, a7, a4, a5);
    }
    OUTLINED_FUNCTION_1_58(v21, "setIsResolvedApp:");
    type metadata accessor for App(0LL);
    OUTLINED_FUNCTION_6_1();
    uint64_t v27 = App.__allocating_init(appIdentifier:)(a4, a5);
    App.isFirstParty()();
    uint64_t v28 = swift_release(v27);
    OUTLINED_FUNCTION_1_58(v28, "setIsFirstPartyApp:");
    uint64_t v29 = PhoneAppSelectionSignalsGatherer.getIsResolvedContactInApp(phoneCallNLIntent:appBundleId:)(a2);
    OUTLINED_FUNCTION_1_58(v29, "setIsResolvedContactInApp:");
    uint64_t v30 = a3;
    specialized Dictionary.subscript.getter(0xD000000000000022LL, 0x800000000034DCB0LL, (uint64_t)a3, v17);
    a3 = *(uint64_t **)(*(void *)v8 + 160LL);
    OUTLINED_FUNCTION_0_81();
    double v32 = v31;
    uint64_t v33 = &demangling cache variable for type metadata for SignalValue?;
    outlined destroy of UUID?(v17, &demangling cache variable for type metadata for SignalValue?);
    *(float *)&double v34 = v32;
    [v19 setAppTimeSpentAffinityScore:v34];
    OUTLINED_FUNCTION_43_20(0xD000000000000014LL, (uint64_t)"common.foregroundApp");
    OUTLINED_FUNCTION_4_83();
    OUTLINED_FUNCTION_25_41();
    OUTLINED_FUNCTION_1_58(v35, "setIsForegroundApp:");
    OUTLINED_FUNCTION_43_20(0xD000000000000024LL, (uint64_t)"common.timeSinceAppLastLaunchedInSec");
    OUTLINED_FUNCTION_0_81();
    OUTLINED_FUNCTION_25_41();
    OUTLINED_FUNCTION_7_85();
    if (v36 != v37)
    {
      __break(1u);
    }

    else
    {
      OUTLINED_FUNCTION_6_81();
      if (v36 ^ v37 | v20)
      {
        OUTLINED_FUNCTION_17_6(v19, "setTimeSinceAppLastLaunchedInSec:");
        OUTLINED_FUNCTION_10_60(0xD000000000000020LL, (uint64_t)"common.timeTotalSpentByUserInApp");
        OUTLINED_FUNCTION_0_81();
        OUTLINED_FUNCTION_25_41();
        OUTLINED_FUNCTION_17_6(v19, "setAppTimeSpentInSec:");
        OUTLINED_FUNCTION_1_75( 0xD00000000000003ALL,  (uint64_t)"phone.makingPhoneCallToContact.appContactTimeSinceLastUsed");
        OUTLINED_FUNCTION_0_81();
        OUTLINED_FUNCTION_25_41();
        OUTLINED_FUNCTION_7_85();
        if (v36 == v37)
        {
          OUTLINED_FUNCTION_6_81();
          if (v36 ^ v37 | v20)
          {
            OUTLINED_FUNCTION_17_6(v19, "setTimeSinceAppContactLastLaunchedInSec:");
            uint64_t v27 = 4354048LL;
            uint64_t v38 = (uint64_t *)OUTLINED_FUNCTION_46_1(objc_allocWithZone(&OBJC_CLASS___INFERENCESchemaINFERENCECommsAppSelectionTrainingAppDependentMessageSignals));
            if (!v38) {
              goto LABEL_34;
            }
            uint64_t v33 = v38;
            if (one-time initialization token for messageSendKey == -1)
            {
LABEL_20:
              OUTLINED_FUNCTION_21_43((uint64_t)&static AppSelectionDependentKeys.messageSendKey);
              OUTLINED_FUNCTION_3_94(v27, v115, v17);
              OUTLINED_FUNCTION_87_0();
              uint64_t v39 = OUTLINED_FUNCTION_0_81();
              OUTLINED_FUNCTION_8_63(v39, &demangling cache variable for type metadata for SignalValue?);
              OUTLINED_FUNCTION_42_20(v40, "setAppAffinityScoreForMessages:");
              if (one-time initialization token for messageUsingSiriKey != -1) {
                swift_once( &one-time initialization token for messageUsingSiriKey,  one-time initialization function for messageUsingSiriKey);
              }
              OUTLINED_FUNCTION_21_43((uint64_t)&static AppSelectionDependentKeys.messageUsingSiriKey);
              OUTLINED_FUNCTION_3_94(v27, v115, v17);
              OUTLINED_FUNCTION_87_0();
              uint64_t v41 = OUTLINED_FUNCTION_0_81();
              OUTLINED_FUNCTION_8_63(v41, &demangling cache variable for type metadata for SignalValue?);
              OUTLINED_FUNCTION_42_20(v42, "setAppAffinityScoreForMessagesUsingSiri:");
              if (one-time initialization token for messageReceivedKey != -1) {
                swift_once( &one-time initialization token for messageReceivedKey,  one-time initialization function for messageReceivedKey);
              }
              OUTLINED_FUNCTION_21_43((uint64_t)&static AppSelectionDependentKeys.messageReceivedKey);
              OUTLINED_FUNCTION_3_94(v27, v115, v17);
              OUTLINED_FUNCTION_87_0();
              OUTLINED_FUNCTION_0_81();
              uint64_t v30 = &demangling cache variable for type metadata for SignalValue?;
              OUTLINED_FUNCTION_32_37();
              OUTLINED_FUNCTION_42_20(v43, "setAppAffinityScoreForMessagesReceived:");
              OUTLINED_FUNCTION_57_16();
              OUTLINED_FUNCTION_1_75(v44 - 13, (uint64_t)"messages.sendingMessage.appTotalFrequency");
              uint64_t v27 = OUTLINED_FUNCTION_4_83();
              OUTLINED_FUNCTION_32_37();
              OUTLINED_FUNCTION_7_85();
              if (v36 != v37)
              {
                __break(1u);
LABEL_129:
                __break(1u);
                goto LABEL_130;
              }

              OUTLINED_FUNCTION_6_81();
              if (!(v36 ^ v37 | v20)) {
                goto LABEL_129;
              }
              OUTLINED_FUNCTION_17_6(v33, "setAppFreqForMessages:");
              OUTLINED_FUNCTION_57_16();
              OUTLINED_FUNCTION_1_75(v45 - 4, (uint64_t)"messages.sendingMessageUsingSiri.appTotalFrequency");
              uint64_t v27 = OUTLINED_FUNCTION_0_81();
              OUTLINED_FUNCTION_8_63(v27, &demangling cache variable for type metadata for SignalValue?);
              OUTLINED_FUNCTION_7_85();
              if (v36 != v37)
              {
LABEL_130:
                __break(1u);
LABEL_131:
                __break(1u);
                goto LABEL_132;
              }

              OUTLINED_FUNCTION_6_81();
              if (!(v36 ^ v37 | v20)) {
                goto LABEL_131;
              }
              OUTLINED_FUNCTION_17_6(v33, "setAppFreqForMessagesUsingSiri:");
              OUTLINED_FUNCTION_3_94(0xD000000000000036LL, 0x800000000034E650LL, v17);
              uint64_t v27 = OUTLINED_FUNCTION_0_81();
              OUTLINED_FUNCTION_8_63(v27, &demangling cache variable for type metadata for SignalValue?);
              OUTLINED_FUNCTION_7_85();
              if (v36 != v37)
              {
LABEL_132:
                __break(1u);
LABEL_133:
                __break(1u);
                goto LABEL_134;
              }

              OUTLINED_FUNCTION_6_81();
              if (!(v36 ^ v37 | v20)) {
                goto LABEL_133;
              }
              id v46 = OUTLINED_FUNCTION_17_6(v33, "setAppFreqForMessagesForCountryCode:");
              OUTLINED_FUNCTION_47_22((uint64_t)v46, "setMessageSignals:");

              uint64_t v27 = 4354048LL;
LABEL_34:
              id v47 = (uint64_t *)OUTLINED_FUNCTION_46_1(objc_allocWithZone(&OBJC_CLASS___INFERENCESchemaINFERENCECommsAppSelectionTrainingAppDependentPhoneCallSignals));
              if (!v47) {
                goto LABEL_50;
              }
              uint64_t v33 = v47;
              if (one-time initialization token for phoneCallKey == -1)
              {
LABEL_36:
                OUTLINED_FUNCTION_21_43((uint64_t)&static AppSelectionDependentKeys.phoneCallKey);
                OUTLINED_FUNCTION_3_94(v27, (uint64_t)v30, v17);
                OUTLINED_FUNCTION_87_0();
                uint64_t v48 = OUTLINED_FUNCTION_0_81();
                OUTLINED_FUNCTION_8_63(v48, &demangling cache variable for type metadata for SignalValue?);
                OUTLINED_FUNCTION_42_20(v49, "setAppAffinityScoreForPhoneCall:");
                if (one-time initialization token for phoneCallSiriKey != -1) {
                  swift_once( &one-time initialization token for phoneCallSiriKey,  one-time initialization function for phoneCallSiriKey);
                }
                OUTLINED_FUNCTION_21_43((uint64_t)&static AppSelectionDependentKeys.phoneCallSiriKey);
                OUTLINED_FUNCTION_3_94(v27, (uint64_t)v30, v17);
                OUTLINED_FUNCTION_87_0();
                uint64_t v50 = OUTLINED_FUNCTION_0_81();
                OUTLINED_FUNCTION_8_63(v50, &demangling cache variable for type metadata for SignalValue?);
                OUTLINED_FUNCTION_42_20(v51, "setAppAffinityScoreForPhoneCallUsingSiri:");
                if (one-time initialization token for phoneCallReceivedKey != -1) {
                  swift_once( &one-time initialization token for phoneCallReceivedKey,  one-time initialization function for phoneCallReceivedKey);
                }
                OUTLINED_FUNCTION_21_43((uint64_t)&static AppSelectionDependentKeys.phoneCallReceivedKey);
                OUTLINED_FUNCTION_3_94(v27, (uint64_t)v30, v17);
                OUTLINED_FUNCTION_87_0();
                OUTLINED_FUNCTION_0_81();
                OUTLINED_FUNCTION_32_37();
                OUTLINED_FUNCTION_42_20(v52, "setAppAffinityScoreForPhoneCallReceived:");
                OUTLINED_FUNCTION_57_16();
                OUTLINED_FUNCTION_1_75(v53 - 15, (uint64_t)"phone.makingPhoneCall.appTotalFrequency");
                OUTLINED_FUNCTION_4_83();
                OUTLINED_FUNCTION_32_37();
                OUTLINED_FUNCTION_7_85();
                if (v36 != v37)
                {
                  __break(1u);
LABEL_136:
                  __break(1u);
                  goto LABEL_137;
                }

                OUTLINED_FUNCTION_6_81();
                if (!(v36 ^ v37 | v20)) {
                  goto LABEL_136;
                }
                OUTLINED_FUNCTION_17_6(v33, "setAppFreqForPhoneCall:");
                OUTLINED_FUNCTION_57_16();
                OUTLINED_FUNCTION_1_75(v54 - 6, (uint64_t)"phone.makingPhoneCallUsingSiri.appTotalFrequency");
                uint64_t v55 = OUTLINED_FUNCTION_0_81();
                OUTLINED_FUNCTION_8_63(v55, &demangling cache variable for type metadata for SignalValue?);
                OUTLINED_FUNCTION_7_85();
                if (v36 != v37)
                {
LABEL_137:
                  __break(1u);
LABEL_138:
                  __break(1u);
                  goto LABEL_139;
                }

                OUTLINED_FUNCTION_6_81();
                if (!(v36 ^ v37 | v20)) {
                  goto LABEL_138;
                }
                OUTLINED_FUNCTION_17_6(v33, "setAppFreqForPhoneCallUsingSiri:");
                OUTLINED_FUNCTION_57_16();
                OUTLINED_FUNCTION_1_75(v56 - 2, (uint64_t)"phone.makingPhoneCall.appTotalFrequencyByCountryCode");
                uint64_t v57 = OUTLINED_FUNCTION_0_81();
                OUTLINED_FUNCTION_8_63(v57, &demangling cache variable for type metadata for SignalValue?);
                OUTLINED_FUNCTION_7_85();
                if (v36 != v37)
                {
LABEL_139:
                  __break(1u);
LABEL_140:
                  __break(1u);
                  goto LABEL_141;
                }

                OUTLINED_FUNCTION_6_81();
                if (!(v36 ^ v37 | v20)) {
                  goto LABEL_140;
                }
                id v58 = OUTLINED_FUNCTION_17_6(v33, "setAppFreqForPhoneCallForCountryCode:");
                OUTLINED_FUNCTION_47_22((uint64_t)v58, "setPhoneCallSignals:");

LABEL_50:
                id v59 = OUTLINED_FUNCTION_46_1(objc_allocWithZone(&OBJC_CLASS___INFERENCESchemaINFERENCECommsAppSelectionTrainingContactDependentSignals));
                if (!v59) {
                  return;
                }
                uint64_t v60 = v59;
                id v61 = OUTLINED_FUNCTION_46_1(objc_allocWithZone(&OBJC_CLASS___INFERENCESchemaINFERENCECommsAppSelectionTrainingContactDependentMessageSignals));
                if (v61)
                {
                  uint64_t v62 = v61;
                  OUTLINED_FUNCTION_10_60( 0xD000000000000040LL,  (uint64_t)"messages.sendingMessageToContact.appContactAffinityScoreByIntent");
                  OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_15_62();
                  OUTLINED_FUNCTION_11_32(v63, "setAppContactAffinityScoreForMessages:");
                  OUTLINED_FUNCTION_10_60( 0xD000000000000049LL,  (uint64_t)"messages.sendingMessageToContactUsingSiri.appContactAffinityScoreByIntent");
                  OUTLINED_FUNCTION_4_83();
                  OUTLINED_FUNCTION_15_62();
                  OUTLINED_FUNCTION_11_32(v64, "setAppContactAffinityScoreForMessagesUsingSiri:");
                  OUTLINED_FUNCTION_10_60( 0xD000000000000043LL,  (uint64_t)"messages.messageReceivedFromContact.appContactAffinityScoreByIntent");
                  OUTLINED_FUNCTION_4_83();
                  OUTLINED_FUNCTION_15_62();
                  OUTLINED_FUNCTION_11_32(v65, "setAppContactAffinityScoreForMessagesReceived:");
                  OUTLINED_FUNCTION_1_75( 0xD000000000000038LL,  (uint64_t)"messages.sendingMessageToContact.appContactFrequency.f2m");
                  OUTLINED_FUNCTION_4_83();
                  OUTLINED_FUNCTION_15_62();
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
                    __break(1u);
LABEL_143:
                    __break(1u);
                    goto LABEL_144;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_143;
                  }
                  OUTLINED_FUNCTION_2_71(v66, "setAppContactFreqForMessages2Min:");
                  OUTLINED_FUNCTION_1_75( 0xD000000000000039LL,  (uint64_t)"messages.sendingMessageToContact.appContactFrequency.f10m");
                  uint64_t v67 = OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_8_63(v67, &demangling cache variable for type metadata for SignalValue?);
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
LABEL_144:
                    __break(1u);
LABEL_145:
                    __break(1u);
                    goto LABEL_146;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_145;
                  }
                  OUTLINED_FUNCTION_2_71(v68, "setAppContactFreqForMessages10Min:");
                  OUTLINED_FUNCTION_1_75( 0xD000000000000038LL,  (uint64_t)"messages.sendingMessageToContact.appContactFrequency.f1h");
                  uint64_t v69 = OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_8_63(v69, &demangling cache variable for type metadata for SignalValue?);
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
LABEL_146:
                    __break(1u);
LABEL_147:
                    __break(1u);
                    goto LABEL_148;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_147;
                  }
                  OUTLINED_FUNCTION_2_71(v70, "setAppContactFreqForMessages1Hr:");
                  OUTLINED_FUNCTION_1_75( 0xD000000000000038LL,  (uint64_t)"messages.sendingMessageToContact.appContactFrequency.f6h");
                  uint64_t v71 = OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_8_63(v71, &demangling cache variable for type metadata for SignalValue?);
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
                    goto LABEL_150;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_149;
                  }
                  OUTLINED_FUNCTION_2_71(v72, "setAppContactFreqForMessages6Hr:");
                  OUTLINED_FUNCTION_1_75( 0xD000000000000038LL,  (uint64_t)"messages.sendingMessageToContact.appContactFrequency.f1d");
                  uint64_t v73 = OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_8_63(v73, &demangling cache variable for type metadata for SignalValue?);
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
                    goto LABEL_152;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_151;
                  }
                  OUTLINED_FUNCTION_2_71(v74, "setAppContactFreqForMessages1Day:");
                  OUTLINED_FUNCTION_1_75( 0xD000000000000038LL,  (uint64_t)"messages.sendingMessageToContact.appContactFrequency.f7d");
                  uint64_t v75 = OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_8_63(v75, &demangling cache variable for type metadata for SignalValue?);
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
                    goto LABEL_154;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_153;
                  }
                  OUTLINED_FUNCTION_2_71(v76, "setAppContactFreqForMessages7Day:");
                  OUTLINED_FUNCTION_1_75( 0xD000000000000039LL,  (uint64_t)"messages.sendingMessageToContact.appContactFrequency.f28d");
                  uint64_t v77 = OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_8_63(v77, &demangling cache variable for type metadata for SignalValue?);
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
                    goto LABEL_156;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_155;
                  }
                  OUTLINED_FUNCTION_2_71(v78, "setAppContactFreqForMessages28Day:");
                  OUTLINED_FUNCTION_1_75( 0xD000000000000039LL,  (uint64_t)"messages.sendingMessageToContact.appContactFrequency.finf");
                  uint64_t v79 = OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_8_63(v79, &demangling cache variable for type metadata for SignalValue?);
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
                    goto LABEL_158;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_157;
                  }
                  OUTLINED_FUNCTION_2_71(v80, "setAppContactFreqForMessagesInf:");
                  OUTLINED_FUNCTION_1_75( 0xD000000000000039LL,  (uint64_t)"messages.sendingMessageToContact.appContactTotalFrequency");
                  uint64_t v81 = OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_8_63(v81, &demangling cache variable for type metadata for SignalValue?);
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
LABEL_158:
                    __break(1u);
LABEL_159:
                    __break(1u);
                    goto LABEL_160;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_159;
                  }
                  OUTLINED_FUNCTION_2_71(v82, "setAppContactFreqForMessages:");
                  OUTLINED_FUNCTION_1_75( 0xD000000000000042LL,  (uint64_t)"messages.sendingMessageToContactUsingSiri.appContactTotalFrequency");
                  uint64_t v83 = OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_8_63(v83, &demangling cache variable for type metadata for SignalValue?);
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
LABEL_160:
                    __break(1u);
LABEL_161:
                    __break(1u);
                    goto LABEL_162;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_161;
                  }
                  OUTLINED_FUNCTION_2_71(v84, "setAppContactFreqForMessagesUsingSiri:");
                  OUTLINED_FUNCTION_1_75( 0xD000000000000044LL,  (uint64_t)"messages.sendingMessageToContactUsingHaptic.appContactTotalFrequency");
                  uint64_t v85 = OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_8_63(v85, &demangling cache variable for type metadata for SignalValue?);
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
LABEL_162:
                    __break(1u);
LABEL_163:
                    __break(1u);
                    goto LABEL_164;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_163;
                  }
                  id v87 = OUTLINED_FUNCTION_2_71(v86, "setAppContactFreqForMessagesHaptic:");
                  OUTLINED_FUNCTION_93_8((uint64_t)v87, "setContactDependentMessageSignals:");
                }

                id v88 = OUTLINED_FUNCTION_46_1(objc_allocWithZone(&OBJC_CLASS___INFERENCESchemaINFERENCECommsAppSelectionTrainingContactDependentPhoneCallSignals));
                if (v88)
                {
                  uint64_t v89 = v88;
                  OUTLINED_FUNCTION_10_60( 0xD00000000000003ELL,  (uint64_t)"phone.makingPhoneCallToContact.appContactAffinityScoreByIntent");
                  OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_15_62();
                  OUTLINED_FUNCTION_11_32(v90, "setAppContactAffinityScoreForPhoneCall:");
                  OUTLINED_FUNCTION_10_60( 0xD000000000000047LL,  (uint64_t)"phone.makingPhoneCallToContactUsingSiri.appContactAffinityScoreByIntent");
                  OUTLINED_FUNCTION_4_83();
                  OUTLINED_FUNCTION_15_62();
                  OUTLINED_FUNCTION_11_32(v91, "setAppContactAffinityScoreForPhoneCallUsingSiri:");
                  OUTLINED_FUNCTION_1_75( 0xD000000000000042LL,  (uint64_t)"phone.phoneCallReceivedFromContact.appContactAffinityScoreByIntent");
                  OUTLINED_FUNCTION_4_83();
                  OUTLINED_FUNCTION_15_62();
                  OUTLINED_FUNCTION_11_32(v92, "setAppContactAffinityScoreForPhoneCallReceived:");
                  OUTLINED_FUNCTION_3_94(0xD000000000000036LL, 0x800000000034DE80LL, v17);
                  OUTLINED_FUNCTION_4_83();
                  OUTLINED_FUNCTION_15_62();
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
LABEL_164:
                    __break(1u);
LABEL_165:
                    __break(1u);
                    goto LABEL_166;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_165;
                  }
                  OUTLINED_FUNCTION_2_71(v93, "setAppContactFreqForPhoneCall2Min:");
                  OUTLINED_FUNCTION_1_75( 0xD000000000000037LL,  (uint64_t)"phone.makingPhoneCallToContact.appContactFrequency.f10m");
                  uint64_t v94 = OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_8_63(v94, &demangling cache variable for type metadata for SignalValue?);
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
LABEL_166:
                    __break(1u);
LABEL_167:
                    __break(1u);
                    goto LABEL_168;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_167;
                  }
                  OUTLINED_FUNCTION_2_71(v95, "setAppContactFreqForPhoneCall10Min:");
                  OUTLINED_FUNCTION_3_94(0xD000000000000036LL, 0x800000000034DF00LL, v17);
                  uint64_t v96 = OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_8_63(v96, &demangling cache variable for type metadata for SignalValue?);
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
LABEL_168:
                    __break(1u);
LABEL_169:
                    __break(1u);
                    goto LABEL_170;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_169;
                  }
                  OUTLINED_FUNCTION_2_71(v97, "setAppContactFreqForPhoneCall1Hr:");
                  OUTLINED_FUNCTION_3_94(0xD000000000000036LL, 0x800000000034DF40LL, v17);
                  uint64_t v98 = OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_8_63(v98, &demangling cache variable for type metadata for SignalValue?);
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
LABEL_170:
                    __break(1u);
LABEL_171:
                    __break(1u);
                    goto LABEL_172;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_171;
                  }
                  OUTLINED_FUNCTION_2_71(v99, "setAppContactFreqForPhoneCall6Hr:");
                  OUTLINED_FUNCTION_3_94(0xD000000000000036LL, 0x800000000034DF80LL, v17);
                  uint64_t v100 = OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_8_63(v100, &demangling cache variable for type metadata for SignalValue?);
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
LABEL_172:
                    __break(1u);
LABEL_173:
                    __break(1u);
                    goto LABEL_174;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_173;
                  }
                  OUTLINED_FUNCTION_2_71(v101, "setAppContactFreqForPhoneCall1Day:");
                  OUTLINED_FUNCTION_3_94(0xD000000000000036LL, 0x800000000034DFC0LL, v17);
                  uint64_t v102 = OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_8_63(v102, &demangling cache variable for type metadata for SignalValue?);
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
LABEL_174:
                    __break(1u);
LABEL_175:
                    __break(1u);
                    goto LABEL_176;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_175;
                  }
                  OUTLINED_FUNCTION_2_71(v103, "setAppContactFreqForPhoneCall7Day:");
                  OUTLINED_FUNCTION_1_75( 0xD000000000000037LL,  (uint64_t)"phone.makingPhoneCallToContact.appContactFrequency.f28d");
                  uint64_t v104 = OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_8_63(v104, &demangling cache variable for type metadata for SignalValue?);
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
LABEL_176:
                    __break(1u);
LABEL_177:
                    __break(1u);
                    goto LABEL_178;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_177;
                  }
                  OUTLINED_FUNCTION_2_71(v105, "setAppContactFreqForPhoneCall28Day:");
                  OUTLINED_FUNCTION_1_75( 0xD000000000000037LL,  (uint64_t)"phone.makingPhoneCallToContact.appContactFrequency.finf");
                  uint64_t v106 = OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_8_63(v106, &demangling cache variable for type metadata for SignalValue?);
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
LABEL_178:
                    __break(1u);
LABEL_179:
                    __break(1u);
                    goto LABEL_180;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_179;
                  }
                  OUTLINED_FUNCTION_2_71(v107, "setAppContactFreqForPhoneCallInf:");
                  OUTLINED_FUNCTION_1_75( 0xD000000000000037LL,  (uint64_t)"phone.makingPhoneCallToContact.appContactTotalFrequency");
                  uint64_t v108 = OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_8_63(v108, &demangling cache variable for type metadata for SignalValue?);
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
LABEL_180:
                    __break(1u);
LABEL_181:
                    __break(1u);
                    goto LABEL_182;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_181;
                  }
                  OUTLINED_FUNCTION_2_71(v109, "setAppContactFreqForPhoneCall:");
                  OUTLINED_FUNCTION_1_75( 0xD000000000000040LL,  (uint64_t)"phone.makingPhoneCallToContactUsingSiri.appContactTotalFrequency");
                  uint64_t v110 = OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_8_63(v110, &demangling cache variable for type metadata for SignalValue?);
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
LABEL_182:
                    __break(1u);
LABEL_183:
                    __break(1u);
                    goto LABEL_184;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_183;
                  }
                  OUTLINED_FUNCTION_2_71(v111, "setAppContactFreqForPhoneCallUsingSiri:");
                  OUTLINED_FUNCTION_1_75( 0xD000000000000042LL,  (uint64_t)"phone.makingPhoneCallToContactUsingHaptic.appContactTotalFrequency");
                  uint64_t v112 = OUTLINED_FUNCTION_0_81();
                  OUTLINED_FUNCTION_8_63(v112, &demangling cache variable for type metadata for SignalValue?);
                  OUTLINED_FUNCTION_7_85();
                  if (v36 != v37)
                  {
LABEL_184:
                    __break(1u);
LABEL_185:
                    __break(1u);
                    return;
                  }

                  OUTLINED_FUNCTION_6_81();
                  if (!(v36 ^ v37 | v20)) {
                    goto LABEL_185;
                  }
                  id v114 = OUTLINED_FUNCTION_2_71(v113, "setAppContactFreqForPhoneCallHaptic:");
                  OUTLINED_FUNCTION_93_8((uint64_t)v114, "setContactDependentPhoneCallSignals:");
                }

                OUTLINED_FUNCTION_47_22((uint64_t)v88, "setContactDependentSignals:");

                return;
              }

LABEL_134:
              swift_once( &one-time initialization token for phoneCallKey,  one-time initialization function for phoneCallKey);
              goto LABEL_36;
            }

  uint64_t v106 = swift_bridgeObjectRelease();
  if (v127 >= -1)
  {
LABEL_135:
    *(void *)((char *)&dword_10 + (v129 & 0xFFFFFFFFFFFFF8LL)) = 0LL;
    specialized Array._endMutation()(v106, v107, v108, v109);
    swift_bridgeObjectRelease();
    return;
  }

LABEL_127:
            swift_once( &one-time initialization token for messageSendKey,  one-time initialization function for messageSendKey);
            goto LABEL_20;
          }

LABEL_125:
        __break(1u);
        goto LABEL_126;
      }
    }

    __break(1u);
    goto LABEL_125;
  }

  if (one-time initialization token for siriPhone != -1) {
LABEL_141:
  }
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  uint64_t v22 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v22, (uint64_t)static Logger.siriPhone);
  os_log_type_t v23 = OUTLINED_FUNCTION_59_8();
  if (OUTLINED_FUNCTION_10(v23))
  {
    unint64_t v24 = (_WORD *)OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_47(v24);
    OUTLINED_FUNCTION_2_2( &dword_0,  v25,  v26,  "PhoneAppSelectionSignalsGatherer CommsAppSelectionAppDependentSignals can't be constructed");
    OUTLINED_FUNCTION_0_2(v8);
  }
}

float SignalValueObject.floatValue.getter(double a1)
{
  return a1;
}

BOOL SignalValueObject.BOOLValue.getter(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0xFFFFFFFFFFFFFFFELL;
}

void *PhoneAppSelectionSignalsGatherer.buildMetrics(person:phoneCallNLIntent:candidateAppBundleIds:selectedAppId:signalMap:phoneAppSelectionSignalsGathererType:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  id v9 = v8;
  char v14 = (os_log_s *)OUTLINED_FUNCTION_12();
  uint64_t v15 = *((void *)v14 - 1);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v18 = v17 - v16;
  id v19 = [objc_allocWithZone(INFERENCESchemaINFERENCEClientEvent) init];
  if (!v19)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v25 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v25, (uint64_t)static Logger.siriPhone);
    os_log_type_t v26 = OUTLINED_FUNCTION_59_8();
    if (OUTLINED_FUNCTION_10(v26))
    {
      uint64_t v27 = (_WORD *)OUTLINED_FUNCTION_1_0();
      OUTLINED_FUNCTION_47(v27);
      OUTLINED_FUNCTION_2_2( &dword_0,  v28,  v29,  "#PhoneAppSelectionSignalsGatherer: failed to generate top-level SELF message");
      OUTLINED_FUNCTION_0_2((uint64_t)&CameraControlFlow.base_props);
    }

    goto LABEL_18;
  }

  uint64_t v7 = v19;
  id v20 = [objc_allocWithZone(INFERENCESchemaINFERENCEClientEventMetadata) init];
  if (!v20)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v30 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v30, (uint64_t)static Logger.siriPhone);
    os_log_type_t v31 = OUTLINED_FUNCTION_24();
    if (OUTLINED_FUNCTION_7(v31))
    {
      double v32 = (_WORD *)OUTLINED_FUNCTION_1_0();
      OUTLINED_FUNCTION_31_0(v32);
      OUTLINED_FUNCTION_5( &dword_0,  v14,  (os_log_type_t)&CameraControlFlow.base_props,  "#PhoneAppSelectionSignalsGatherer: failed to generate event metadata",  v9);
      OUTLINED_FUNCTION_0_2((uint64_t)v9);
    }

uint64_t PhoneAppSelectionSignalsGatherer.getIsResolvedContactInApp(phoneCallNLIntent:appBundleId:)( void *a1)
{
  uint64_t v1 = *(void *)(OUTLINED_FUNCTION_75_18() + 16);
  swift_bridgeObjectRelease();
  if (v1 != 1)
  {
    char v13 = 0;
    return v13 & 1;
  }

  uint64_t result = OUTLINED_FUNCTION_75_18();
  if (*(void *)(result + 16))
  {
    outlined init with copy of SharedGlobalsProviding(result + 32, (uint64_t)v17);
    OUTLINED_FUNCTION_62();
    uint64_t v3 = v18;
    uint64_t v4 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    uint64_t v5 = SiriPhoneContact.getVocabularyAppsBundleSet()(v3, v4);
    __swift_destroy_boxed_opaque_existential_1(v17);
    uint64_t v6 = OUTLINED_FUNCTION_99_2();
    static PhoneCallAppNameConstants.isPhoneCaseInsensitive(appId:)(v6, v7);
    if (((v8 & 1) != 0
       || (uint64_t v9 = OUTLINED_FUNCTION_99_2(),
           static PhoneCallAppNameConstants.isFaceTimeCaseInsensitive(appId:)(v9, v10),
           (v11 & 1) != 0))
      && (specialized Set.contains(_:)(0x73746361746E6F43LL, 0xE800000000000000LL, v5), (v12 & 1) != 0))
    {
      char v13 = 1;
    }

    else
    {
      uint64_t v14 = OUTLINED_FUNCTION_99_2();
      specialized Set.contains(_:)(v14, v15, v5);
      char v13 = v16;
    }

    OUTLINED_FUNCTION_62();
    return v13 & 1;
  }

  __break(1u);
  return result;
}

void PhoneAppSelectionSignalsGatherer.deinit()
{
  uint64_t v1 = OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_2_0(v1);

  OUTLINED_FUNCTION_2();
}

uint64_t PhoneAppSelectionSignalsGatherer.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

void *SignalValueObject.unsetValueInt.unsafeMutableAddressor()
{
  return &static SignalValueObject.unsetValueInt;
}

void SignalValueObject.doubleValue.setter(double a1)
{
  *(double *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = a1;
}

PhoneCallFlowDelegatePlugin::PhoneAppSelectionSignalsGathererType_optional __swiftcall PhoneAppSelectionSignalsGathererType.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of PhoneAppSelectionSignalsGathererType.init(rawValue:),  v2);
  OUTLINED_FUNCTION_39();
  if (v3 == 1) {
    v4.value = PhoneCallFlowDelegatePlugin_PhoneAppSelectionSignalsGathererType_appNameSpecifiedByUser;
  }
  else {
    v4.value = PhoneCallFlowDelegatePlugin_PhoneAppSelectionSignalsGathererType_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

unint64_t PhoneAppSelectionSignalsGathererType.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000016LL;
  }
  else {
    return 0xD000000000000017LL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PhoneAppSelectionSignalsGathererType( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance PhoneAppSelectionSignalsGathererType()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneAppSelectionSignalsGathererType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneAppSelectionSignalsGathererType( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::PhoneAppSelectionSignalsGathererType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneAppSelectionSignalsGathererType@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneAppSelectionSignalsGathererType_optional *a2@<X8>)
{
  result.value = PhoneAppSelectionSignalsGathererType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneAppSelectionSignalsGathererType@<X0>( unint64_t *a1@<X8>)
{
  unint64_t result = PhoneAppSelectionSignalsGathererType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_202B40()
{
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 97LL, 7LL);
}

void partial apply for closure #1 in PhoneAppSelectionSignalsGatherer.execute(person:phoneCallNLIntent:candidateAppBundleIds:selectedAppId:phoneAppSelectionSignalsGathererType:)( uint64_t a1)
{
}

void outlined bridged method (mbnn) of @objc INFERENCESchemaINFERENCECommsAppSelectionGroundTruthGenerated.inferenceCommsAppSelectionTrainingAppDependentSignals.setter( uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setInferenceCommsAppSelectionTrainingAppDependentSignals:isa];
}

unint64_t lazy protocol witness table accessor for type PhoneAppSelectionSignalsGathererType and conformance PhoneAppSelectionSignalsGathererType()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneAppSelectionSignalsGathererType and conformance PhoneAppSelectionSignalsGathererType;
  if (!lazy protocol witness table cache variable for type PhoneAppSelectionSignalsGathererType and conformance PhoneAppSelectionSignalsGathererType)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PhoneAppSelectionSignalsGathererType,  &type metadata for PhoneAppSelectionSignalsGathererType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PhoneAppSelectionSignalsGathererType and conformance PhoneAppSelectionSignalsGathererType);
  }

  return result;
}

uint64_t ObjC metadata update function for PhoneAppSelectionSignalsGatherer()
{
  return type metadata accessor for PhoneAppSelectionSignalsGatherer(0LL);
}

uint64_t type metadata accessor for PhoneAppSelectionSignalsGatherer(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for PhoneAppSelectionSignalsGatherer;
  if (!type metadata singleton initialization cache for PhoneAppSelectionSignalsGatherer) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PhoneAppSelectionSignalsGatherer);
  }
  return result;
}

uint64_t type metadata completion function for PhoneAppSelectionSignalsGatherer(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[2] = &unk_336DC8;
    void v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t getEnumTagSinglePayload for SignalValueObject(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SignalValueObject(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SignalValueObject()
{
  return &type metadata for SignalValueObject;
}

uint64_t storeEnumTagSinglePayload for PhoneAppSelectionSignalsGathererType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_202DC0 + 4 * byte_336CD5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_202DF4 + 4 * byte_336CD0[v4]))();
}

uint64_t sub_202DF4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_202DFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x202E04LL);
  }
  return result;
}

uint64_t sub_202E10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x202E18LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_202E1C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_202E24(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PhoneAppSelectionSignalsGathererType()
{
  return &type metadata for PhoneAppSelectionSignalsGathererType;
}

uint64_t OUTLINED_FUNCTION_0_81()
{
  return v0(v3, v2, v1, 0LL);
}

uint64_t OUTLINED_FUNCTION_1_75@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Dictionary.subscript.getter(a1, (a2 - 32) | 0x8000000000000000LL, v2, v3);
}

id OUTLINED_FUNCTION_2_71(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_3_94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized Dictionary.subscript.getter(a1, a2, v3, a3);
}

uint64_t OUTLINED_FUNCTION_4_83()
{
  return v0(v3, v2, v1, 0LL);
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_8_63(uint64_t a1, uint64_t *a2)
{
}

uint64_t OUTLINED_FUNCTION_10_60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Dictionary.subscript.getter(a1, (a2 - 32) | 0x8000000000000000LL, *(void *)(v3 - 104), v2);
}

uint64_t OUTLINED_FUNCTION_12_69(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRetain(a3);
}

void OUTLINED_FUNCTION_15_62()
{
}

uint64_t OUTLINED_FUNCTION_19_49()
{
  return v1(v0, 0LL, 0xE000000000000000LL, 1LL);
}

uint64_t OUTLINED_FUNCTION_20_51()
{
  return swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
}

uint64_t OUTLINED_FUNCTION_24_38()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(v0, v1);
}

void OUTLINED_FUNCTION_26_42()
{
}

void OUTLINED_FUNCTION_32_37()
{
}

uint64_t OUTLINED_FUNCTION_34_29@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)(v1 + 48) + 16 * a1 + 8));
}

  ;
}

id OUTLINED_FUNCTION_42_20(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t OUTLINED_FUNCTION_43_20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Dictionary.subscript.getter(a1, (a2 - 32) | 0x8000000000000000LL, v3, v2);
}

uint64_t OUTLINED_FUNCTION_44_23@<X0>(uint64_t a1@<X8>)
{
  return v1(*(void *)(a1 - 256), v2);
}

id OUTLINED_FUNCTION_47_22(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_48_21()
{
  return PhoneAppSelectionSignalsGatherer.areKeysEqual(appId:mappingKey:)(v1, v0);
}

void OUTLINED_FUNCTION_49_22()
{
}

uint64_t OUTLINED_FUNCTION_50_22()
{
  return SignalDefinitionParametersProvider.Builder.init()();
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_58_16@<X0>(uint64_t a1@<X8>)
{
  return v1 + *(void *)(a1 - 256);
}

  ;
}

__n128 OUTLINED_FUNCTION_61_16@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a2 - 256);
  a1[1] = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_62_14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized Dictionary.subscript.getter(a1, a2, v3, a3);
}

uint64_t OUTLINED_FUNCTION_63_16()
{
  return v2(v1, v0);
}

uint64_t OUTLINED_FUNCTION_75_18()
{
  return v2(v0, v1);
}

uint64_t OUTLINED_FUNCTION_78_17()
{
  return (*(uint64_t (**)(void))(v0 - 320))();
}

uint64_t OUTLINED_FUNCTION_81_15()
{
  return dispatch thunk of SignalDefinitionParametersProvider.Builder.create()();
}

uint64_t OUTLINED_FUNCTION_85_10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return swift_allocObject(a1, *(void *)(a3 - 256), a2);
}

id OUTLINED_FUNCTION_87_9(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

void OUTLINED_FUNCTION_88_14()
{
}

uint64_t OUTLINED_FUNCTION_91_11()
{
  return swift_release(v0);
}

id OUTLINED_FUNCTION_93_8(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t OUTLINED_FUNCTION_94_11()
{
  return String.lowercased()()._countAndFlagsBits;
}

PhoneCallFlowDelegatePlugin::PostCallInquiryAnswerCallCATsSimple::Properties_optional __swiftcall PostCallInquiryAnswerCallCATsSimple.Properties.init(rawValue:)( Swift::String rawValue)
{
  uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._rawValue = &outlined read-only object #0 of PostCallInquiryAnswerCallCATsSimple.Properties.init(rawValue:);
  OUTLINED_FUNCTION_33_3(v2, countAndFlagsBits);
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_2();
  return result;
}

unint64_t PostCallInquiryAnswerCallCATs.Properties.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD00000000000002DLL;
  }
  else {
    return 0xD00000000000002FLL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PostCallInquiryAnswerCallCATsSimple.Properties( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance PostCallInquiryAnswerCallCATsSimple.Properties()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PostCallInquiryAnswerCallCATsSimple.Properties( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PostCallInquiryAnswerCallCATsSimple.Properties( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::PostCallInquiryAnswerCallCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PostCallInquiryAnswerCallCATsSimple.Properties@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PostCallInquiryAnswerCallCATsSimple::Properties_optional *a2@<X8>)
{
  result.value = PostCallInquiryAnswerCallCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PostCallInquiryAnswerCallCATsSimple.Properties@<X0>( unint64_t *a1@<X8>)
{
  unint64_t result = PostCallInquiryAnswerCallCATs.Properties.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t PostCallInquiryAnswerCallCATsSimple.intentHandledResponse(incomingCallConcept:)(uint64_t a1)
{
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v2 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v1;
  return OUTLINED_FUNCTION_33_0((uint64_t)PostCallInquiryAnswerCallCATsSimple.intentHandledResponse(incomingCallConcept:));
}

uint64_t PostCallInquiryAnswerCallCATsSimple.intentHandledResponse(incomingCallConcept:)()
{
  uint64_t v2 = v1[2];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_15_3(v3);
  v1[4] = v4;
  *(_OWORD *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D870;
  uint64_t v5 = OUTLINED_FUNCTION_20(v4, (uint64_t)"incomingCallConcept");
  if (v2)
  {
    uint64_t v5 = type metadata accessor for PhoneIncomingCall();
  }

  else
  {
    *(void *)(v4 + 56) = 0LL;
    *(void *)(v4 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 0LL;
  }

  *(void *)(v4 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v2;
  *(void *)(v4 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v5;
  OUTLINED_FUNCTION_18_2();
  uint64_t v6 = (void *)swift_task_alloc(v0);
  v1[5] = v6;
  *uint64_t v6 = v1;
  v6[1] = OngoingCallCATs.informHangUpForEmergency(currentCall:);
  uint64_t v7 = OUTLINED_FUNCTION_21_19(0xD00000000000002FLL);
  return v9(v7);
}

PhoneCallFlowDelegatePlugin::PostCallInquiryAnswerCallCATsSimple::IntentHandledResponseDialogIds_optional __swiftcall PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds.init(rawValue:)( Swift::String rawValue)
{
  uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._rawValue = &outlined read-only object #0 of PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds.init(rawValue:);
  OUTLINED_FUNCTION_33_3(v2, countAndFlagsBits);
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_2();
  return result;
}

PhoneCallFlowDelegatePlugin::PostCallInquiryAnswerCallCATsSimple::IntentHandledResponseDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PostCallInquiryAnswerCallCATsSimple::IntentHandledResponseDialogIds_optional *a2@<X8>)
{
  result.value = PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t PostCallInquiryAnswerCallCATsSimple.intentHandledResponseAsLabels(incomingCallConcept:)(uint64_t a1)
{
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v2 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v1;
  return OUTLINED_FUNCTION_33_0((uint64_t)PostCallInquiryAnswerCallCATsSimple.intentHandledResponseAsLabels(incomingCallConcept:));
}

uint64_t PostCallInquiryAnswerCallCATsSimple.intentHandledResponseAsLabels(incomingCallConcept:)()
{
  uint64_t v2 = v1[2];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_15_3(v3);
  v1[4] = v4;
  *(_OWORD *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D870;
  uint64_t v5 = OUTLINED_FUNCTION_20(v4, (uint64_t)"incomingCallConcept");
  if (v2)
  {
    uint64_t v5 = type metadata accessor for PhoneIncomingCall();
  }

  else
  {
    *(void *)(v4 + 56) = 0LL;
    *(void *)(v4 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 0LL;
  }

  *(void *)(v4 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v2;
  *(void *)(v4 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v5;
  OUTLINED_FUNCTION_18_2();
  uint64_t v6 = (void *)swift_task_alloc(v0);
  v1[5] = v6;
  unint64_t v7 = lazy protocol witness table accessor for type PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds and conformance PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds();
  *uint64_t v6 = v1;
  v6[1] = OngoingCallCATs.confirmHangUpForForeignEmergency(currentCall:);
  return v9( 0xD00000000000002FLL,  0x8000000000346150LL,  v4,  &type metadata for PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds,  v7);
}

unint64_t lazy protocol witness table accessor for type PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds and conformance PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds and conformance PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds;
  if (!lazy protocol witness table cache variable for type PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds and conformance PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds,  &type metadata for PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds and conformance PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds and conformance PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds;
  if (!lazy protocol witness table cache variable for type PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds and conformance PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds,  &type metadata for PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds and conformance PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds);
  }

  return result;
}

uint64_t PostCallInquiryAnswerCallCATsSimple.offerFollowUpIntent(followUpOfferType:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PostCallInquiryAnswerCallCATsSimple.offerFollowUpIntent(followUpOfferType:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_15_3(v3);
  *(void *)(v0 + 40) = v4;
  *(_OWORD *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D870;
  *(void *)(v4 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v2;
  *(void *)(v4 + 40) = 0x8000000000349490LL;
  OUTLINED_FUNCTION_27_6(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  OUTLINED_FUNCTION_3_22(v6);
  if (v7)
  {
    outlined destroy of SpeakableString?(v1, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v4 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(_OWORD *)(v4 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 0u;
  }

  else
  {
    char v8 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v8);
  }

  uint64_t v9 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v9;
  *uint64_t v9 = v0;
  v9[1] = PostCallInquiryAnswerCallCATsSimple.offerFollowUpIntent(followUpOfferType:);
  uint64_t v10 = OUTLINED_FUNCTION_21_19(v2 + 28);
  return v12(v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_0();
  if (v1)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v3, v4, v5);
  }

  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_23_3();
    return OUTLINED_FUNCTION_8_3(v0, *(uint64_t (**)(void))(v2 + 8));
  }

void PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds.init(rawValue:)(uint64_t a1)
{
  v2._rawValue = &outlined read-only object #0 of PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds.init(rawValue:);
  OUTLINED_FUNCTION_33_3(v2, a1);
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_2();
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds( uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

uint64_t PostCallInquiryAnswerCallCATsSimple.offerFollowUpIntentAsLabels(followUpOfferType:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t PostCallInquiryAnswerCallCATsSimple.offerFollowUpIntentAsLabels(followUpOfferType:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_15_3(v3);
  *(void *)(v0 + 40) = v4;
  *(_OWORD *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D870;
  *(void *)(v4 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v2;
  *(void *)(v4 + 40) = 0x8000000000349490LL;
  OUTLINED_FUNCTION_27_6(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  OUTLINED_FUNCTION_3_22(v6);
  if (v7)
  {
    outlined destroy of SpeakableString?(v1, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v4 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(_OWORD *)(v4 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 0u;
  }

  else
  {
    char v8 = OUTLINED_FUNCTION_13_10();
    OUTLINED_FUNCTION_11_11((uint64_t)v8);
  }

  uint64_t v9 = (void *)OUTLINED_FUNCTION_0_1((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  *(void *)(v0 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v9;
  unint64_t v10 = lazy protocol witness table accessor for type PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds and conformance PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds();
  *uint64_t v9 = v0;
  v9[1] = PostCallInquiryAnswerCallCATsSimple.offerFollowUpIntentAsLabels(followUpOfferType:);
  return v12( v2 + 28,  0x8000000000346180LL,  v4,  &type metadata for PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds,  v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_0();
  if (v1)
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v3, v4, v5);
  }

  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_23_3();
    return OUTLINED_FUNCTION_8_3(v0, *(uint64_t (**)(void))(v2 + 8));
  }

unint64_t lazy protocol witness table accessor for type PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds and conformance PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds and conformance PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds;
  if (!lazy protocol witness table cache variable for type PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds and conformance PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds,  &type metadata for PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds and conformance PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds and conformance PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds;
  if (!lazy protocol witness table cache variable for type PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds and conformance PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds,  &type metadata for PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds and conformance PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PostCallInquiryAnswerCallCATsSimple.Properties and conformance PostCallInquiryAnswerCallCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type PostCallInquiryAnswerCallCATsSimple.Properties and conformance PostCallInquiryAnswerCallCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type PostCallInquiryAnswerCallCATsSimple.Properties and conformance PostCallInquiryAnswerCallCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PostCallInquiryAnswerCallCATsSimple.Properties,  &type metadata for PostCallInquiryAnswerCallCATsSimple.Properties);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PostCallInquiryAnswerCallCATsSimple.Properties and conformance PostCallInquiryAnswerCallCATsSimple.Properties);
  }

  return result;
}

uint64_t type metadata accessor for PostCallInquiryAnswerCallCATsSimple(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for PostCallInquiryAnswerCallCATsSimple;
  if (!type metadata singleton initialization cache for PostCallInquiryAnswerCallCATsSimple) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PostCallInquiryAnswerCallCATsSimple);
  }
  return result;
}

uint64_t type metadata completion function for PostCallInquiryAnswerCallCATsSimple(uint64_t a1)
{
  return swift_initClassMetadata2( a1,  0LL,  0LL,  v2,  a1 + class metadata base offset for PostCallInquiryAnswerCallCATsSimple);
}

uint64_t ObjC metadata update function for PostCallInquiryAnswerCallCATsSimple()
{
  return type metadata accessor for PostCallInquiryAnswerCallCATsSimple(0LL);
}

uint64_t storeEnumTagSinglePayload for PostCallInquiryAnswerCallCATsSimple.Properties( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_203990 + 4 * byte_336E35[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2039C4 + 4 * asc_336E30[v4]))();
}

uint64_t sub_2039C4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2039CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x2039D4LL);
  }
  return result;
}

uint64_t sub_2039E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x2039E8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_2039EC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2039F4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for PostCallInquiryAnswerCallCATsSimple.Properties()
{
}

uint64_t storeEnumTagSinglePayload for PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_203A58 + 4 * byte_336E3F[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_203A8C + 4 * byte_336E3A[v4]))();
}

uint64_t sub_203A8C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_203A94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x203A9CLL);
  }
  return result;
}

uint64_t sub_203AA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x203AB0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_203AB4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_203ABC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for PostCallInquiryAnswerCallCATsSimple.IntentHandledResponseDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_203B14 + 4 * byte_336E44[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_203B34 + 4 * byte_336E49[v4]))();
  }
}

_BYTE *sub_203B14(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_203B34(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_203B3C(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_203B44(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_203B4C(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_203B54(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void type metadata accessor for PostCallInquiryAnswerCallCATsSimple.OfferFollowUpIntentDialogIds()
{
}

uint64_t IdiomKeyedHintHistory.get(device:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  uint64_t v8 = (int)DeviceState.idiom.getter(v5, v6);
  return Dictionary.subscript.getter(&v8, a2, &type metadata for Int, a3, &protocol witness table for Int);
}

uint64_t IdiomKeyedHintHistory.set(device:hintHistory:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  type metadata accessor for Optional(0LL, v5);
  __chkstk_darwin();
  char v7 = (char *)&v13 - v6;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  uint64_t v10 = (int)DeviceState.idiom.getter(v8, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(v7, a2, v5);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0LL, 1LL, v5);
  uint64_t v14 = v10;
  uint64_t v11 = type metadata accessor for Dictionary(0LL, &type metadata for Int, v5, &protocol witness table for Int);
  return Dictionary.subscript.setter(v7, &v14, v11);
}

uint64_t IdiomKeyedHintHistory.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0LL;
  unint64_t v7 = 0xE000000000000000LL;
  uint64_t v5 = a1;
  uint64_t v2 = type metadata accessor for Dictionary(0LL, &type metadata for Int, a2, &protocol witness table for Int);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v2);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(&v5, v2, WitnessTable);
  return v6;
}

uint64_t static IdiomKeyedHintHistory.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Dictionary<>.== infix(_:_:)( a1,  a2,  &type metadata for Int,  a3,  &protocol witness table for Int,  *(void *)(a4 + 24));
}

uint64_t IdiomKeyedHintHistory.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x70614D6D6F696469LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease(0xE800000000000000LL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x70614D6D6F696469LL, 0xE800000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

uint64_t IdiomKeyedHintHistory.CodingKeys.stringValue.getter()
{
  return 0x70614D6D6F696469LL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IdiomKeyedHintHistory<A>.CodingKeys()
{
  return CallingIntentContinueInAppStrategy.shouldCheckResponseModeToOutputIntentHandledDialog.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance IdiomKeyedHintHistory<A>.CodingKeys()
{
  return LocalizationError.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance IdiomKeyedHintHistory<A>.CodingKeys()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IdiomKeyedHintHistory<A>.CodingKeys( uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IdiomKeyedHintHistory<A>.CodingKeys()
{
  return IdiomKeyedHintHistory.CodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IdiomKeyedHintHistory<A>.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = IdiomKeyedHintHistory.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance IdiomKeyedHintHistory<A>.CodingKeys()
{
  return AnnounceVoicemailDirectAction.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance IdiomKeyedHintHistory<A>.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = CallingIntentContinueInAppStrategy.shouldCheckResponseModeToOutputIntentHandledDialog.getter();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IdiomKeyedHintHistory<A>.CodingKeys( uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for IdiomKeyedHintHistory<A>.CodingKeys, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IdiomKeyedHintHistory<A>.CodingKeys( uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for IdiomKeyedHintHistory<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t IdiomKeyedHintHistory.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a2;
  uint64_t v6 = type metadata accessor for IdiomKeyedHintHistory.CodingKeys(255LL, a3, a4, a4);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for IdiomKeyedHintHistory<A>.CodingKeys, v6);
  uint64_t v8 = type metadata accessor for KeyedEncodingContainer(0LL, v6, WitnessTable);
  uint64_t v22 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  uint64_t v13 = dispatch thunk of Encoder.container<A>(keyedBy:)(v6, v6, WitnessTable, v11, v12);
  uint64_t v25 = v21;
  uint64_t v15 = OUTLINED_FUNCTION_1_76(v13, (uint64_t)&type metadata for Int, v14, (uint64_t)&protocol witness table for Int);
  uint64_t v16 = *(void *)(*(void *)(a4 + 8) + 16LL);
  uint64_t v23 = &protocol witness table for Int;
  uint64_t v24 = v16;
  uint64_t v17 = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v15);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, v18, v8, v15, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v10, v8);
}

uint64_t type metadata accessor for IdiomKeyedHintHistory.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for IdiomKeyedHintHistory.CodingKeys);
}

void *IdiomKeyedHintHistory.init(from:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for IdiomKeyedHintHistory.CodingKeys(255LL, a2, a3, a4);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for IdiomKeyedHintHistory<A>.CodingKeys, v7);
  uint64_t v23 = type metadata accessor for KeyedDecodingContainer(0LL, v7, WitnessTable);
  __chkstk_darwin();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, &type metadata for Int, a2, 0LL, 0LL);
  uint64_t v10 = static Array._allocateUninitialized(_:)(0LL, TupleTypeMetadata2);
  Dictionary.init(dictionaryLiteral:)(v10, &type metadata for Int, a2, &protocol witness table for Int);
  swift_bridgeObjectRelease();
  uint64_t v12 = a1[3];
  uint64_t v11 = a1[4];
  uint64_t v13 = __swift_project_boxed_opaque_existential_1(a1, v12);
  uint64_t v14 = v7;
  uint64_t v15 = v7;
  uint64_t v16 = v13;
  uint64_t v17 = dispatch thunk of Decoder.container<A>(keyedBy:)(v14, v15, WitnessTable, v12, v11);
  if (!v4)
  {
    uint64_t v19 = OUTLINED_FUNCTION_1_76(v17, (uint64_t)&type metadata for Int, v18, (uint64_t)&protocol witness table for Int);
    uint64_t v20 = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v19);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v19, v21, v23, v19, v20);
    OUTLINED_FUNCTION_0_82();
    uint64_t v16 = v24;
  }

  __swift_destroy_boxed_opaque_existential_1(a1);
  return v16;
}

uint64_t IdiomKeyedHintHistory.init()(uint64_t a1)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, &type metadata for Int, a1, 0LL, 0LL);
  uint64_t v3 = static Array._allocateUninitialized(_:)(0LL, TupleTypeMetadata2);
  return Dictionary.init(dictionaryLiteral:)(v3, &type metadata for Int, a1, &protocol witness table for Int);
}

uint64_t protocol witness for SiriPhoneDefaultsCodable.init() in conformance IdiomKeyedHintHistory<A>@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = IdiomKeyedHintHistory.init()(*(void *)(a1 + 16));
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IdiomKeyedHintHistory<A>( uint64_t a1)
{
  return IdiomKeyedHintHistory.description.getter(*v1, *(void *)(a1 + 16));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IdiomKeyedHintHistory<A>( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static IdiomKeyedHintHistory.__derived_struct_equals(_:_:)( *a1,  *a2,  *(void *)(a3 + 16),  *(void *)(a3 + 24));
}

void *protocol witness for Decodable.init(from:) in conformance IdiomKeyedHintHistory<A>@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t result = IdiomKeyedHintHistory.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
  if (!v4) {
    *a4 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IdiomKeyedHintHistory<A>( void *a1, uint64_t a2)
{
  return IdiomKeyedHintHistory.encode(to:)(a1, *v2, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t instantiation function for generic protocol witness table for IdiomKeyedHintHistory<A>( void *a1, uint64_t a2)
{
  a1[1] = swift_getWitnessTable(&protocol conformance descriptor for IdiomKeyedHintHistory<A>, a2);
  a1[2] = swift_getWitnessTable(&protocol conformance descriptor for IdiomKeyedHintHistory<A>, a2);
  uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for IdiomKeyedHintHistory<A>, a2);
  a1[3] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for IdiomKeyedHintHistory<A>( uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = swift_getWitnessTable(&protocol conformance descriptor for IdiomKeyedHintHistory<A>, a2);
  uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for IdiomKeyedHintHistory<A>, a2);
  *(void *)(a1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = result;
  return result;
}

uint64_t type metadata accessor for IdiomKeyedHintHistory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IdiomKeyedHintHistory);
}

uint64_t storeEnumTagSinglePayload for IdiomKeyedHintHistory.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_204498 + 4 * asc_3370B0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_2044B8 + 4 * byte_3370B5[v4]))();
  }
}

_BYTE *sub_204498(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_2044B8(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_2044C0(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_2044C8(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_2044D0(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_2044D8(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t base witness table accessor for Equatable in IdiomKeyedHintHistory<A>.CodingKeys(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for IdiomKeyedHintHistory<A>.CodingKeys, a1);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in IdiomKeyedHintHistory<A>.CodingKeys( uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for IdiomKeyedHintHistory<A>.CodingKeys, a1);
}

uint64_t base witness table accessor for CustomStringConvertible in IdiomKeyedHintHistory<A>.CodingKeys( uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for IdiomKeyedHintHistory<A>.CodingKeys, a1);
}

uint64_t OUTLINED_FUNCTION_0_82()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_1_76(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Dictionary(0LL, a2, v4, a4);
}

uint64_t PhoneCallNotificationFlowStrategy.makeNotificationBody(_:)( void (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = type metadata accessor for Locale(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  char v5 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v6 = [(id)objc_opt_self(AFLocalization) sharedInstance];
  if (!v6) {
    goto LABEL_4;
  }
  uint64_t v7 = v6;
  type metadata accessor for PhoneCallFlowDelegatePlugin();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v9 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  uint64_t v10 = static Locale.current.getter();
  uint64_t v11 = Locale.identifier.getter(v10);
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v30[2] = v11;
  v30[3] = v13;
  v30[0] = 45LL;
  v30[1] = 0xE100000000000000LL;
  v29[0] = 95LL;
  v29[1] = 0xE100000000000000LL;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v14 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v30,  v29,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String);
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  outlined bridged method (mbbnbnb) of @objc AFLocalization.localizedString(forKey:table:bundle:languageCode:)( 0xD000000000000015LL,  0x800000000034E6E0LL,  0xD000000000000010LL,  0x800000000034E700LL,  (uint64_t)v9,  v14,  v16,  v7);
  uint64_t v18 = v17;
  uint64_t v20 = v19;

  if (v20)
  {
    a1(v18, v20, 0LL);
    return swift_bridgeObjectRelease();
  }

  else
  {
LABEL_4:
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.siriPhone);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      os_log_type_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v26 = 0;
      _os_log_impl(&dword_0, v24, v25, "Could not localize the personal domain activity notification", v26, 2u);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    unint64_t v27 = lazy protocol witness table accessor for type LocalizationError and conformance LocalizationError();
    uint64_t v28 = swift_allocError(&type metadata for LocalizationError, v27, 0LL, 0LL);
    a1(v28, 0LL, 1LL);
    return swift_errorRelease(v28);
  }

unint64_t lazy protocol witness table accessor for type LocalizationError and conformance LocalizationError()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalizationError and conformance LocalizationError;
  if (!lazy protocol witness table cache variable for type LocalizationError and conformance LocalizationError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocalizationError,  &type metadata for LocalizationError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocalizationError and conformance LocalizationError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocalizationError and conformance LocalizationError;
  if (!lazy protocol witness table cache variable for type LocalizationError and conformance LocalizationError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocalizationError,  &type metadata for LocalizationError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocalizationError and conformance LocalizationError);
  }

  return result;
}

uint64_t protocol witness for PostPersonalDomainActivityNotificationFlowStrategy.makeNotificationBody() in conformance PhoneCallNotificationFlowStrategy( uint64_t a1, uint64_t a2)
{
  char v5 = (void *)swift_task_alloc(async function pointer to PostPersonalDomainActivityNotificationFlowStrategy.makeNotificationBody()[1]);
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v5;
  *char v5 = v2;
  v5[1] = protocol witness for PostPersonalDomainActivityNotificationFlowStrategy.makeNotificationBody() in conformance PhoneCallNotificationFlowStrategy;
  return PostPersonalDomainActivityNotificationFlowStrategy.makeNotificationBody()(a1, a2);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v6 = *(void *)(*v3 + 16);
  uint64_t v7 = *v3;
  uint64_t v8 = swift_task_dealloc(v6);
  if (!v2)
  {
    uint64_t v8 = a1;
    id v9 = a2;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
}

uint64_t type metadata accessor for PhoneCallNotificationFlowStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin33PhoneCallNotificationFlowStrategy);
}

uint64_t storeEnumTagSinglePayload for LocalizationError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_2049B0 + 4 * byte_337300[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_2049D0 + 4 * byte_337305[v4]))();
  }
}

_BYTE *sub_2049B0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_2049D0(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_2049D8(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_2049E0(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_2049E8(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_2049F0(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LocalizationError()
{
  return &type metadata for LocalizationError;
}

uint64_t static Transformer<>.transformer(callGroupTransformer:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Transformer<[SmsGroup], [INCallGroup]?>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))( (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v2);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 16) & ~v5;
  uint64_t v7 = swift_allocObject(&unk_40E488, v6 + v4, v5 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))( v7 + v6,  (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v2);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INCallGroupConversationFilter?);
  return Transformer.init(transform:)( partial apply for closure #1 in static Transformer<>.transformer(callGroupTransformer:),  v7,  v8);
}

void closure #1 in static Transformer<>.transformer(callGroupTransformer:)( void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  void (*v43)(__int128 *__return_ptr, __int128 *);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  Class v54;
  objc_class *v55;
  id v56;
  id v57;
  uint64_t v58;
  id v59;
  os_log_s *v60;
  uint64_t v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void v81[2];
  void *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  Class isa;
  void *v87;
  uint64_t (*v88)(uint64_t, uint64_t);
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  void *v95;
  uint64_t v84 = a1;
  uint64_t v82 = a3;
  uint64_t v83 = a2;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 24);
  id v87 = v5;
  id v88 = v6;
  uint64_t v7 = OUTLINED_FUNCTION_1_77(v6);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = v7 + 32;
    while (1)
    {
      outlined init with copy of SignalProviding(v9, (uint64_t)&v89);
      __swift_project_boxed_opaque_existential_1(&v89, v90);
      __int16 v10 = OUTLINED_FUNCTION_0_83();
      __swift_destroy_boxed_opaque_existential_1(&v89);
      v9 += 40LL;
      if (!--v8) {
        goto LABEL_8;
      }
    }

    outlined init with take of AppSelectionSignalComponent(&v89, (uint64_t)&v92);
  }

  else
  {
LABEL_8:
    uint64_t v94 = 0LL;
    uint64_t v92 = 0u;
    uint64_t v93 = 0u;
  }

  OUTLINED_FUNCTION_39();
  if (*((void *)&v93 + 1))
  {
    __swift_project_boxed_opaque_existential_1(&v92, *((uint64_t *)&v93 + 1));
    Class isa = SiriPhoneContact.toINPerson()().super.isa;
    OUTLINED_FUNCTION_18();
  }

  else
  {
    outlined destroy of SiriPhoneContact?((uint64_t)&v92);
    Class isa = 0LL;
  }

  uint64_t v12 = (uint64_t)v87;
  uint64_t v13 = OUTLINED_FUNCTION_1_77(v88);
  uint64_t v14 = v13;
  uint64_t v15 = _swiftEmptyArrayStorage;
  uint64_t v95 = _swiftEmptyArrayStorage;
  uint64_t v16 = *(void *)(v13 + 16);
  if (v16)
  {
    v81[0] = v4;
    v81[1] = v3;
    unint64_t v17 = 0LL;
    uint64_t v18 = v13 + 32;
    while (1)
    {
      unint64_t v19 = *(void *)(v14 + 16);
      if (v17 >= v19) {
        break;
      }
      outlined init with copy of SignalProviding(v18, (uint64_t)&v92);
      __swift_project_boxed_opaque_existential_1(&v92, *((uint64_t *)&v93 + 1));
      __int16 v20 = OUTLINED_FUNCTION_0_83();
      if ((v20 & 0xFF00) != 0x200 && v20 == 0)
      {
        __swift_destroy_boxed_opaque_existential_1(&v92);
      }

      else
      {
        outlined init with take of AppSelectionSignalComponent(&v92, (uint64_t)&v89);
        uint64_t v22 = v95;
        if ((swift_isUniquelyReferenced_nonNull_native(v95) & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v22 = v95;
        }

        unint64_t v23 = v22[2];
        if (v23 >= v22[3] >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        uint64_t v12 = v90;
        uint64_t v24 = v91;
        uint64_t v25 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v89, v90);
        __chkstk_darwin(v25);
        unint64_t v27 = (char *)v81 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v28 + 16))(v27);
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)( v23,  (uint64_t)v27,  (uint64_t *)&v95,  v12,  v24);
        __swift_destroy_boxed_opaque_existential_1(&v89);
      }

      ++v17;
      v18 += 40LL;
      if (v16 == v17)
      {
        uint64_t v15 = v95;
        goto LABEL_28;
      }
    }

    __break(1u);
LABEL_50:
    if (v12 >= 0) {
      uint64_t v49 = v19;
    }
    else {
      uint64_t v49 = v12;
    }
    swift_bridgeObjectRetain();
    uint64_t v50 = _CocoaArrayWrapper.endIndex.getter(v49);
    OUTLINED_FUNCTION_62();
    if (!v50) {
      goto LABEL_54;
    }
LABEL_46:
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (v12 & 0xC000000000000001LL) == 0, v12);
    if ((v12 & 0xC000000000000001LL) != 0) {
      id v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v12);
    }
    else {
      id v47 = *(id *)(v12 + 32);
    }
    uint64_t v48 = (unint64_t)v47;
    OUTLINED_FUNCTION_62();
    goto LABEL_56;
  }

uint64_t sub_205234()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Transformer<[SmsGroup], [INCallGroup]?>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void partial apply for closure #1 in static Transformer<>.transformer(callGroupTransformer:)( void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Transformer<[SmsGroup], [INCallGroup]?>)
                                      - 8)
                          + 80LL);
  closure #1 in static Transformer<>.transformer(callGroupTransformer:)(a1, v2 + ((v5 + 16) & ~v5), a2);
}

id @nonobjc INCallGroupConversationFilter.init(__caller:participants:matchCallerAndParticipantsExactly:callGroup:)( void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5 = v4;
  if (a2)
  {
    type metadata accessor for INPerson();
    v9.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }

  else
  {
    v9.super.Class isa = 0LL;
  }

  id v10 = [v5 initWithCaller:a1 participants:v9.super.isa matchCallerAndParticipantsExactly:a3 callGroup:a4];

  return v10;
}

uint64_t outlined destroy of SiriPhoneContact?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriPhoneContact?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_83()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 368))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_1_77@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_9_66()
{
  return outlined init with copy of SignalProviding(v0, v1 - 128);
}

void *UnsupportedCallControlIntentOutputProvider.__allocating_init(intent:sharedGlobals:callControlCats:unsupportedCats:)( uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  NSArray v9 = (void *)swift_allocObject(v4, 80LL, 7LL);
  v9[2] = a1;
  outlined init with take of AppSelectionSignalComponent(a2, (uint64_t)(v9 + 3));
  v9[8] = a3;
  v9[9] = a4;
  return v9;
}

void *UnsupportedCallControlIntentOutputProvider.init(intent:sharedGlobals:callControlCats:unsupportedCats:)( uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  void v4[2] = a1;
  outlined init with take of AppSelectionSignalComponent(a2, (uint64_t)(v4 + 3));
  v4[8] = a3;
  void v4[9] = a4;
  return v4;
}

uint64_t UnsupportedCallControlIntentOutputProvider.makeSimpleOutputFlowAsync()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  __swift_project_boxed_opaque_existential_1(v0 + 3, v2);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 16))(v12, v2, v3);
  uint64_t v4 = v13;
  uint64_t v5 = v14;
  uint64_t v6 = __swift_project_boxed_opaque_existential_1(v12, v13);
  void v11[3] = v4;
  void v11[4] = v5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16LL))(boxed_opaque_existential_1, v6, v4);
  uint64_t v8 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  swift_retain();
  uint64_t v9 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v11,  &async function pointer to partial apply for closure #1 in UnsupportedCallControlIntentOutputProvider.makeSimpleOutputFlowAsync(),  v1);
  __swift_destroy_boxed_opaque_existential_1(v12);
  return v9;
}

uint64_t closure #1 in UnsupportedCallControlIntentOutputProvider.makeSimpleOutputFlowAsync()( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int **)(*(void *)a2 + 128LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return v7(a1);
}

uint64_t partial apply for closure #1 in UnsupportedCallControlIntentOutputProvider.makeSimpleOutputFlowAsync()( uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_439A1C);
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return closure #1 in UnsupportedCallControlIntentOutputProvider.makeSimpleOutputFlowAsync()(a1, v1);
}

uint64_t UnsupportedCallControlIntentOutputProvider.makeOutput()(uint64_t a1)
{
  v2[31] = a1;
  v2[32] = v1;
  uint64_t v3 = type metadata accessor for DialogPhase(0LL);
  v2[33] = OUTLINED_FUNCTION_23(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[34] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[35] = v5;
  v2[36] = OUTLINED_FUNCTION_23(v5);
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  v2[37] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[38] = v7;
  v2[39] = OUTLINED_FUNCTION_23(v7);
  unint64_t v8 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                              - 8)
                  + 64LL)
      + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[40] = swift_task_alloc(v8);
  v2[41] = swift_task_alloc(v8);
  OUTLINED_FUNCTION_19_1();
  return swift_task_switch(v9, v10, v11);
}

{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v3 = (void *)*v2;
  v3[28] = v2;
  v3[29] = a1;
  v3[30] = v1;
  uint64_t v4 = v3[47];
  v3[48] = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    swift_release(v3[46]);
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_4_0();
}

uint64_t UnsupportedCallControlIntentOutputProvider.makeOutput()()
{
  uint64_t v1 = (void *)v0[32];
  uint64_t v2 = v1[6];
  uint64_t v3 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 120))(v2, v3);
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  swift_unknownObjectRelease(v6);
  __swift_destroy_boxed_opaque_existential_1(v0 + 2);
  if (v6)
  {
    OUTLINED_FUNCTION_21_44();
    OUTLINED_FUNCTION_12_29();
    __swift_project_boxed_opaque_existential_1(v0 + 7, v0[10]);
    OUTLINED_FUNCTION_12_29();
    uint64_t v7 = v0[15];
    uint64_t v8 = v0[16];
    __swift_project_boxed_opaque_existential_1(v0 + 12, v7);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
    __swift_destroy_boxed_opaque_existential_1(v0 + 12);
    __swift_destroy_boxed_opaque_existential_1(v0 + 7);
    uint64_t v10 = v0[32];
    if (!v9)
    {
      uint64_t v24 = *(void **)(v10 + 72);
      type metadata accessor for SirikitDeviceState(0LL);
      OUTLINED_FUNCTION_21_44();
      OUTLINED_FUNCTION_12_29();
      uint64_t v25 = SirikitDeviceState.__allocating_init(from:)(&v38);
      v0[46] = v25;
      uint64_t v26 = (void *)OUTLINED_FUNCTION_0_1(*(void *)(class metadata base offset for UnsupportedFlowCATsSimple
                                                      + *v24
                                                      + 96));
      v0[47] = v26;
      *uint64_t v26 = v0;
      v26[1] = UnsupportedCallControlIntentOutputProvider.makeOutput();
      return v37(v25);
    }

    uint64_t v11 = *(void *)(v10 + 16);
    uint64_t v38 = PhoneCallControlNLIntent.Verb.description.getter(*(_BYTE *)(v11 + 16));
    uint64_t v39 = v12;
    v13._uint64_t countAndFlagsBits = 58LL;
    v13._object = (void *)0xE100000000000000LL;
    String.append(_:)(v13);
    int v14 = *(unsigned __int8 *)(v11 + 17);
    if (v14 == 5)
    {
      uint64_t v15 = 0LL;
      unint64_t v16 = 0xE000000000000000LL;
    }

    else
    {
      uint64_t v15 = PhoneCallControlNLIntent.Target.description.getter(v14);
      unint64_t v16 = v28;
    }

    uint64_t v30 = v0[39];
    uint64_t v29 = v0[40];
    uint64_t v31 = v0[37];
    uint64_t v32 = v0[38];
    uint64_t v33 = v0[32];
    unint64_t v34 = v16;
    String.append(_:)(*(Swift::String *)&v15);
    swift_bridgeObjectRelease();
    String.toSpeakableString.getter(v38, v39);
    swift_bridgeObjectRelease();
    uint64_t v35 = *(void **)(v33 + 64);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v29, v30, v31);
    __swift_storeEnumTagSinglePayload(v29, 0LL, 1LL, v31);
    uint64_t v36 = (void *)OUTLINED_FUNCTION_0_1(*(void *)(class metadata base offset for PhoneCallControlCATsSimple
                                                    + *v35
                                                    + 48));
    v0[44] = v36;
    *uint64_t v36 = v0;
    v36[1] = UnsupportedCallControlIntentOutputProvider.makeOutput();
    uint64_t v23 = v0[40];
  }

  else
  {
    uint64_t v17 = v0[41];
    uint64_t v18 = v0[37];
    unint64_t v19 = *(void **)(v0[32] + 64LL);
    uint64_t v20 = PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds.rawValue.getter();
    String.toSpeakableString.getter(v20, v21);
    __swift_storeEnumTagSinglePayload(v17, 0LL, 1LL, v18);
    uint64_t v22 = (void *)OUTLINED_FUNCTION_0_1(*(void *)(class metadata base offset for PhoneCallControlCATsSimple
                                                    + *v19
                                                    + 16));
    v0[42] = v22;
    *uint64_t v22 = v0;
    v22[1] = UnsupportedCallControlIntentOutputProvider.makeOutput();
    uint64_t v23 = v0[41];
  }

  return v37(v23);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  OUTLINED_FUNCTION_27_7();
  v3[22] = v1;
  v3[23] = v2;
  _BYTE v3[24] = v0;
  uint64_t v5 = v3[41];
  uint64_t v4 = v3[42];
  *uint64_t v6 = *v1;
  v3[43] = v0;
  swift_task_dealloc(v4);
  outlined destroy of SpeakableString?(v5);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_4_0();
}

{
  uint64_t v0;
  uint64_t v1;
  __n128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;
  OUTLINED_FUNCTION_0_84();
  OUTLINED_FUNCTION_13_69();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_5_32(v1);
  uint64_t v6 = OUTLINED_FUNCTION_12_39(v2, v3, v4, v5, (__n128)xmmword_31FE60);
  OUTLINED_FUNCTION_14_56(v6, v7, v8, v9, v10, v11, v12, v13, v17);
  int v14 = OUTLINED_FUNCTION_26_43();
  OUTLINED_FUNCTION_10_61(v14, (uint64_t)closure #1 in UnsupportedCallControlIntentOutputProvider.makeOutput());
  uint64_t v15 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)[1]);
  *(void *)(v0 + 40__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v15;
  OUTLINED_FUNCTION_3_95(v15);
  return OUTLINED_FUNCTION_5_40();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  OUTLINED_FUNCTION_27_7();
  v3[25] = v1;
  v3[26] = v2;
  v3[27] = v0;
  uint64_t v4 = v3[44];
  uint64_t v5 = v3[40];
  *uint64_t v6 = *v1;
  v3[45] = v0;
  swift_task_dealloc(v4);
  outlined destroy of SpeakableString?(v5);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_4_0();
}

{
  uint64_t v0;
  uint64_t v1;
  __n128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;
  OUTLINED_FUNCTION_25_42();
  OUTLINED_FUNCTION_0_84();
  OUTLINED_FUNCTION_13_69();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_5_32(v1);
  uint64_t v6 = OUTLINED_FUNCTION_12_39(v2, v3, v4, v5, (__n128)xmmword_31FE60);
  OUTLINED_FUNCTION_14_56(v6, v7, v8, v9, v10, v11, v12, v13, v17);
  int v14 = OUTLINED_FUNCTION_26_43();
  OUTLINED_FUNCTION_10_61(v14, (uint64_t)closure #1 in UnsupportedCallControlIntentOutputProvider.makeOutput());
  uint64_t v15 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)[1]);
  *(void *)(v0 + 40__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v15;
  OUTLINED_FUNCTION_3_95(v15);
  return OUTLINED_FUNCTION_5_40();
}

{
  uint64_t v0;
  uint64_t v1;
  __n128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;
  OUTLINED_FUNCTION_0_84();
  OUTLINED_FUNCTION_13_69();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_5_32(v1);
  uint64_t v6 = OUTLINED_FUNCTION_12_39(v2, v3, v4, v5, (__n128)xmmword_31FE60);
  OUTLINED_FUNCTION_14_56(v6, v7, v8, v9, v10, v11, v12, v13, v17);
  int v14 = OUTLINED_FUNCTION_26_43();
  OUTLINED_FUNCTION_10_61(v14, (uint64_t)closure #1 in UnsupportedCallControlIntentOutputProvider.makeOutput());
  uint64_t v15 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)[1]);
  *(void *)(v0 + 40__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v15;
  OUTLINED_FUNCTION_3_95(v15);
  return OUTLINED_FUNCTION_5_40();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_27_7();
  uint64_t v2 = v0[35];
  uint64_t v1 = v0[36];
  uint64_t v3 = v0[34];
  swift_task_dealloc(v0[51]);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_4_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 264);

  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 136));
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_6_82();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  return OUTLINED_FUNCTION_12_4(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_25_42();
  OUTLINED_FUNCTION_6_82();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  return OUTLINED_FUNCTION_12_4(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  swift_release(*(void *)(v0 + 368));
  OUTLINED_FUNCTION_6_82();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  return OUTLINED_FUNCTION_12_4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t specialized UnsupportedAction.toSpeakableString.getter()
{
  uint64_t v0 = PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds.rawValue.getter();
  return String.toSpeakableString.getter(v0, v1);
}

{
  return String.toSpeakableString.getter(0xD000000000000023LL, 0x8000000000341DE0LL);
}

uint64_t specialized UnsupportedAction.toSpeakableString.getter(char a1)
{
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v1 = 0x8000000000341D90LL;
    }
    else {
      uint64_t v1 = 0x8000000000341DB0LL;
    }
  }

  else
  {
    uint64_t v1 = 0xEF6C6C6143646574LL;
  }

  String.toSpeakableString.getter();
  return OUTLINED_FUNCTION_16_6(v1);
}

uint64_t specialized UnsupportedAction.toSpeakableString.getter(unsigned __int8 a1)
{
  uint64_t v2 = v1;
  String.toSpeakableString.getter();
  return OUTLINED_FUNCTION_16_6(v2);
}

uint64_t closure #1 in UnsupportedCallControlIntentOutputProvider.makeOutput()()
{
  return OutputGenerationManifest.listenAfterSpeaking.setter(0LL);
}

void *UnsupportedCallControlIntentOutputProvider.deinit()
{
  return v0;
}

uint64_t UnsupportedCallControlIntentOutputProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

uint64_t type metadata accessor for UnsupportedCallControlIntentOutputProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin42UnsupportedCallControlIntentOutputProvider);
}

uint64_t OUTLINED_FUNCTION_0_84()
{
  uint64_t v2 = *(void **)(v0 + 256);
  *(void *)(v0 + 39__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v1;
  uint64_t v3 = v2[6];
  uint64_t v4 = v2[7];
  __swift_project_boxed_opaque_existential_1(v2 + 3, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 136))(v3, v4);
}

uint64_t OUTLINED_FUNCTION_3_95(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 248);
}

uint64_t OUTLINED_FUNCTION_6_82()
{
  return swift_task_dealloc(*(void *)(v0 + 328));
}

uint64_t OUTLINED_FUNCTION_10_61(uint64_t a1, uint64_t a2)
{
  return OutputGenerationManifest.init(dialogPhase:_:)(v2, a2, 0LL);
}

void *OUTLINED_FUNCTION_13_69()
{
  return __swift_project_boxed_opaque_existential_1(v1, *(void *)(v0 + 160));
}

id OUTLINED_FUNCTION_14_56( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 400) = a9;
  return v10;
}

uint64_t OUTLINED_FUNCTION_26_43()
{
  return static DialogPhase.completion.getter();
}

void CallingIntentContinueInAppStrategy.__allocating_init(sharedGlobals:startCallCATsSimple:phoneCallDisplayTextCATsSimple:)( __int128 *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t specialized SiriPhoneHintGenerator.generateHint()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 24;
  uint64_t v3 = OUTLINED_FUNCTION_5_0((void *)v0 + 3);
  OUTLINED_FUNCTION_38_26((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v51);
  uint64_t v11 = *((void *)&v52 + 1);
  uint64_t v12 = v53;
  OUTLINED_FUNCTION_5_0(&v51);
  uint64_t v13 = dispatch thunk of DeviceState.isHomePod.getter(v11, v12);
  char v14 = v13;
  OUTLINED_FUNCTION_221(v13, v15, v16, v17, v18, v19, v20, v21, v51);
  if ((v14 & 1) == 0) {
    return 0LL;
  }
  uint64_t v22 = OUTLINED_FUNCTION_5_0(v2);
  OUTLINED_FUNCTION_38_26((uint64_t)v22, v23, v24, v25, v26, v27, v28, v29, v51);
  uint64_t v30 = *((void *)&v52 + 1);
  uint64_t v31 = v53;
  __swift_project_boxed_opaque_existential_1(&v51, *((uint64_t *)&v52 + 1));
  uint64_t v32 = *v1;
  uint64_t v55 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for Int,  &type metadata for OneTimeHintHistory,  &protocol witness table for Int);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdiomKeyedHintHistory<OneTimeHintHistory>);
  unint64_t v34 = lazy protocol witness table accessor for type IdiomKeyedHintHistory<OneTimeHintHistory> and conformance IdiomKeyedHintHistory<A>();
  SiriPhoneDefaultsProviding.getOrDefault<A>(key:defaultValue:)(v32, (uint64_t)&v55, v30, v33, v31, v34, (uint64_t)&v56);
  uint64_t v35 = swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_221(v35, v36, v37, v38, v39, v40, v41, v42, v51);
  uint64_t v43 = v56;
  uint64_t v44 = specialized OneTimeHintGenerator<>.chooseHintIdentifier(history:)(v56);
  if (v45)
  {
    uint64_t v46 = v44;
    outlined init with copy of HangUpTipGenerator((uint64_t)v1, (uint64_t)&v51);
    uint64_t v47 = OUTLINED_FUNCTION_8_2((uint64_t)&unk_40E5B0, 88LL);
    __int128 v48 = v52;
    *(_OWORD *)(v47 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v51;
    *(_OWORD *)(v47 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v48;
    __int128 v49 = v54;
    *(_OWORD *)(v47 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v53;
    *(_OWORD *)(v47 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v49;
    *(void *)(v47 + 80) = v43;
  }

  else
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v46;
}

uint64_t specialized updateHintHistory #1 <A>(_:) in SiriPhoneHintGenerator.generateHint()( uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v4 = result;
    uint64_t v6 = a2[1];
    uint64_t v5 = a2[2];
    swift_bridgeObjectRetain();
    unint64_t v7 = lazy protocol witness table accessor for type String and conformance String();
    unint64_t v8 = lazy protocol witness table accessor for type String and conformance String();
    for (uint64_t i = (uint64_t *)(v4 + 40); ; i += 2)
    {
      uint64_t v11 = *(i - 1);
      uint64_t v10 = *i;
      v23[0] = v11;
      v23[1] = v10;
      v26[0] = v6;
      v26[1] = v5;
      swift_bridgeObjectRetain();
      if ((BidirectionalCollection<>.starts<A>(with:)( v26,  &type metadata for String,  &type metadata for String,  v7,  v8) & 1) != 0) {
        break;
      }
      swift_bridgeObjectRelease();
      if (!--v3) {
        return swift_bridgeObjectRelease();
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v12 = specialized OneTimeHintGenerator<>.makeUpdatedHintHistory(dialogIdentifier:previousHistory:)(v11, v10, a3);
    swift_bridgeObjectRelease();
    v26[0] = v12;
    uint64_t v13 = a2[6];
    uint64_t v14 = a2[7];
    __swift_project_boxed_opaque_existential_1(a2 + 3, v13);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v14 + 64))(v23, v13, v14);
    uint64_t v15 = v24;
    uint64_t v16 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    uint64_t v17 = *(void (**)(uint64_t, void *, uint64_t, unint64_t, uint64_t, uint64_t))(v16 + 16);
    uint64_t v18 = *(unsigned __int8 *)a2;
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdiomKeyedHintHistory<OneTimeHintHistory>);
    unint64_t v20 = lazy protocol witness table accessor for type IdiomKeyedHintHistory<OneTimeHintHistory> and conformance IdiomKeyedHintHistory<A>();
    v17(v18, v26, v19, v20, v15, v16);
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1(v23);
  }

  return result;
}

void CallingIntentContinueInAppStrategy.init(sharedGlobals:startCallCATsSimple:phoneCallDisplayTextCATsSimple:)( __int128 *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + direct field offset for CallingIntentContinueInAppStrategy.additionalCommands) = _swiftEmptyArrayStorage;
  outlined init with take of AppSelectionSignalComponent(a1, v3 + 16);
  *(void *)(v3 + 56) = a2;
  *(void *)(v3 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a3;
  OUTLINED_FUNCTION_6();
}

uint64_t CallingIntentContinueInAppStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:)( uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = *v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INStartCallIntent, INStartCallIntentResponse>?);
  v2[7] = OUTLINED_FUNCTION_23(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for IntentResolutionRecord(0LL, *(void *)(v3 + 80), *(void *)(v3 + 88));
  _BYTE v2[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  void v2[9] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[10] = swift_task_alloc(v7);
  v2[11] = swift_task_alloc(v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INStartCallIntent, INStartCallIntentResponse>);
  v2[12] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[13] = v9;
  v2[14] = OUTLINED_FUNCTION_23(v9);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t CallingIntentContinueInAppStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:)()
{
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = _swiftEmptyArrayStorage;
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 72) + 16LL);
  v4(v1, *(void *)(v0 + 40), v2);
  if (swift_dynamicCast(v3, v1, v2))
  {
    uint64_t v8 = *(void *)(v0 + 104);
    unint64_t v7 = *(void **)(v0 + 112);
    uint64_t v9 = *(void *)(v0 + 96);
    uint64_t v10 = *(void *)(v0 + 56);
    __swift_storeEnumTagSinglePayload(v10, 0LL, 1LL, v9);
    (*(void (**)(void *, uint64_t, uint64_t))(v8 + 32))(v7, v10, v9);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v11 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v11, (uint64_t)static Logger.siriPhone);
    os_log_type_t v12 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_27_1(v12))
    {
      uint64_t v13 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      *uint64_t v13 = 0;
      OUTLINED_FUNCTION_5_13( &dword_0,  v14,  v15,  "#CallingIntentContinueInAppStrategy: Building launch app command for INStartCallIntent");
      OUTLINED_FUNCTION_0_2((uint64_t)v13);
    }

    uint64_t v16 = *(void *)(v0 + 112);
    uint64_t v17 = *(void *)(v0 + 48);

    uint64_t v18 = swift_task_alloc(32LL);
    *(void *)(v0 + 120) = v18;
    *(void *)(v18 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v16;
    *(void *)(v18 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v17;
    uint64_t v19 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(void *)(v0 + 12__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v19;
    OUTLINED_FUNCTION_49( (uint64_t)v19,  (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent,  &OBJC_CLASS___SAIntentGroupLaunchAppWithIntent_ptr);
    *uint64_t v19 = v0;
    v19[1] = CallingIntentContinueInAppStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:);
    OUTLINED_FUNCTION_19_1();
    return withCheckedThrowingContinuation<A>(isolation:function:_:)( v20,  v21,  v22,  0xD000000000000040LL,  v23,  v24,  v18,  v25);
  }

  else
  {
    uint64_t v27 = *(void *)(v0 + 56);
    OUTLINED_FUNCTION_29_1(v27, v5, v6, *(void *)(v0 + 96));
    outlined destroy of UUID?( v27,  &demangling cache variable for type metadata for IntentResolutionRecord<INStartCallIntent, INStartCallIntentResponse>?);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v28 = *(void *)(v0 + 80);
    uint64_t v29 = *(void *)(v0 + 64);
    uint64_t v30 = *(void *)(v0 + 40);
    uint64_t v31 = OUTLINED_FUNCTION_15_1();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.siriPhone);
    uint64_t v32 = v4(v28, v30, v29);
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v35 = static os_log_type_t.debug.getter(v33, v34);
    BOOL v36 = os_log_type_enabled(v33, v35);
    uint64_t v37 = *(void *)(v0 + 64);
    if (v36)
    {
      uint64_t v58 = *(void *)(v0 + 72);
      os_log_type_t type = v35;
      uint64_t v38 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v59 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v61 = v59;
      *(_DWORD *)uint64_t v38 = 136315138;
      uint64_t v39 = (void *)IntentResolutionRecord.intent.getter(v37);
      id v40 = [v39 typeName];

      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      unint64_t v43 = v42;

      *(void *)(v0 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v38 + 4);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_53_22(v58);
      _os_log_impl( &dword_0,  v33,  type,  "#CallingIntentContinueInAppStrategy: Building launch app command for %s",  v38,  0xCu);
      swift_arrayDestroy(v59, 1LL);
      OUTLINED_FUNCTION_0_2(v59);
      OUTLINED_FUNCTION_0_2((uint64_t)v38);
    }

    else
    {
      OUTLINED_FUNCTION_53_22(*(void *)(v0 + 72));
    }

    uint64_t v44 = *(void *)(v0 + 64);
    OUTLINED_FUNCTION_49( v45,  (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent,  &OBJC_CLASS___SAIntentGroupLaunchAppWithIntent_ptr);
    uint64_t v46 = IntentResolutionRecord.app.getter(v44);
    uint64_t v47 = (void *)IntentResolutionRecord.intent.getter(v44);
    __int128 v48 = (void *)IntentResolutionRecord.intentResponse.getter(v44);
    __int128 v49 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)(v46, v47, v48);

    swift_release(v46);
    id v50 = v49;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v50);
    unint64_t v52 = *(void *)((char *)&dword_10 + (*(void *)(v0 + 16) & 0xFFFFFFFFFFFFFF8LL));
    unint64_t v51 = *(void *)((char *)&dword_18 + (*(void *)(v0 + 16) & 0xFFFFFFFFFFFFFF8LL));
    if (v52 >= v51 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1LL);
    }
    uint64_t v53 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v50);
    specialized Array._endMutation()(v53, v54, v55, v56);

    uint64_t v57 = *(void *)(v0 + 16);
    OUTLINED_FUNCTION_92_0();
    OUTLINED_FUNCTION_9_2();
    OUTLINED_FUNCTION_14_3();
    OUTLINED_FUNCTION_29_17();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v57);
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 128);
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_23_3();
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 120));
  }

  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_4_0();
}

{
  uint64_t v0;
  id v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  OUTLINED_FUNCTION_54_9(*(void *)(v0 + 104));
  uint64_t v1 = *(id *)(v0 + 32);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v1);
  uint64_t v3 = *(void *)((char *)&dword_10 + (*(void *)(v0 + 16) & 0xFFFFFFFFFFFFFF8LL));
  uint64_t v2 = *(void *)((char *)&dword_18 + (*(void *)(v0 + 16) & 0xFFFFFFFFFFFFFF8LL));
  if (v3 >= v2 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1, v3 + 1, 1LL);
  }
  uint64_t v4 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v3, v1);
  specialized Array._endMutation()(v4, v5, v6, v7);

  uint64_t v8 = *(void *)(v0 + 16);
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_14_3();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
}

{
  uint64_t v0;
  (*(void (**)(void, void))(*(void *)(v0 + 104) + 8LL))(*(void *)(v0 + 112), *(void *)(v0 + 96));
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void CallingIntentContinueInAppStrategy.deinit()
{
  uint64_t v1 = OUTLINED_FUNCTION_29_27();
  OUTLINED_FUNCTION_2_0(v1);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2();
}

uint64_t CallingIntentContinueInAppStrategy.deviceState.getter()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  OUTLINED_FUNCTION_82(v0 + 2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t CallingIntentContinueInAppStrategy.additionalCommands.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CallingIntentContinueInAppStrategy.additionalCommands.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + direct field offset for CallingIntentContinueInAppStrategy.additionalCommands);
  OUTLINED_FUNCTION_25_0((uint64_t)v3, (uint64_t)v5, 1LL);
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*CallingIntentContinueInAppStrategy.additionalCommands.modify(uint64_t a1))()
{
  return static SingleResultVoicemailModel.resultViewID.modify;
}

uint64_t CallingIntentContinueInAppStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:)()
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_10_2(*(void *)(*(void *)v0 + 200LL));
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v2;
  uint64_t v3 = OUTLINED_FUNCTION_52_19(v2);
  return OUTLINED_FUNCTION_22_3(v3, v4, v5);
}

uint64_t CallingIntentContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:)()
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_10_2(*(void *)(*(void *)v0 + 224LL));
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v2;
  uint64_t v3 = OUTLINED_FUNCTION_52_19(v2);
  return OUTLINED_FUNCTION_22_3(v3, v4, v5);
}

uint64_t CallingIntentContinueInAppStrategy.makePromptForDeviceUnlock()(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[14] = OUTLINED_FUNCTION_23(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for TemplatingText(0LL);
  v2[15] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[16] = v5;
  v2[17] = OUTLINED_FUNCTION_23(v5);
  uint64_t v6 = type metadata accessor for TemplatingSection(0LL);
  v2[18] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[19] = v7;
  void v2[20] = OUTLINED_FUNCTION_23(v7);
  uint64_t v8 = type metadata accessor for TemplatingResult(0LL);
  v2[21] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[22] = v9;
  v2[23] = OUTLINED_FUNCTION_23(v9);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v2 = OUTLINED_FUNCTION_49( a1,  &lazy cache variable for type metadata for SAUIAddDialogs,  &OBJC_CLASS___SAUIAddDialogs_ptr);
  unint64_t result = TemplatingResult.sections.getter(v2);
  if (*(void *)(result + 16))
  {
    uint64_t v4 = *(void *)(v1 + 184);
    uint64_t v5 = *(void *)(v1 + 160);
    uint64_t v20 = *(void *)(v1 + 176);
    uint64_t v21 = *(void *)(v1 + 168);
    uint64_t v7 = *(void *)(v1 + 144);
    uint64_t v6 = *(void *)(v1 + 152);
    uint64_t v9 = *(void *)(v1 + 128);
    uint64_t v8 = *(void *)(v1 + 136);
    uint64_t v19 = *(void *)(v1 + 120);
    uint64_t v10 = *(void *)(v1 + 112);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))( v5,  result + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)),  v7);
    uint64_t v11 = OUTLINED_FUNCTION_62();
    TemplatingSection.content.getter(v11);
    os_log_type_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    TemplatingText.text.getter(v12);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v19);
    TemplatingResult.templateIdentifier.getter(v13);
    uint64_t v14 = SAUIAddDialogs.init(dialogString:templateIdentifier:)();
    uint64_t v15 = type metadata accessor for NLContextUpdate(0LL);
    OUTLINED_FUNCTION_29_1(v10, v16, v17, v15);
    uint64_t v18 = type metadata accessor for AceOutput(0LL);
    *(_OWORD *)(v1 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
    *(void *)(v1 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0LL;
    *(_OWORD *)(v1 + 56) = 0u;
    OUTLINED_FUNCTION_72_19(v18, (uint64_t)&protocol witness table for AceOutput);
    static AceOutputHelper.makeAceOutput(addDialogs:nlContextUpdate:additionalCommands:flowActivity:)( v14,  v10,  _swiftEmptyArrayStorage,  v1 + 56);

    outlined destroy of UUID?(v1 + 56, &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of UUID?(v10, &demangling cache variable for type metadata for NLContextUpdate?);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v4, v21);
    OUTLINED_FUNCTION_92_0();
    OUTLINED_FUNCTION_46_0();
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_7_8();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t CallingIntentContinueInAppStrategy.makePromptForDeviceUnlock()()
{
  v0[24] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = (uint64_t *)CallingIntentContinueInAppStrategy.makePromptForDeviceUnlock();
  return static ResponseTemplates.unlockDeviceSegue(deviceState:)(v0[23], v0 + 2);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  OUTLINED_FUNCTION_27_7();
  uint64_t v3 = v2 + 16;
  uint64_t v4 = *(void *)(v2 + 192);
  *uint64_t v5 = *v1;
  *(void *)(v2 + 200) = v0;
  swift_task_dealloc(v4);
  outlined destroy of UUID?(v3, &demangling cache variable for type metadata for DeviceState?);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_4_0();
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(v0 + 184));
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CallingIntentContinueInAppStrategy.makeIntentHandledOutput(intentResolutionRecord:)( uint64_t a1, uint64_t a2)
{
  v3[60] = a2;
  v3[61] = v2;
  v3[59] = a1;
  uint64_t v5 = *v2;
  v3[62] = *v2;
  uint64_t v6 = type metadata accessor for Locale(0LL);
  v3[63] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[64] = v7;
  v3[65] = OUTLINED_FUNCTION_23(v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[66] = OUTLINED_FUNCTION_31_36(*(void *)(v8 - 8));
  v3[67] = OUTLINED_FUNCTION_46();
  uint64_t v9 = type metadata accessor for ResponseMode(0LL);
  v3[68] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[69] = v10;
  v3[70] = OUTLINED_FUNCTION_31_36(v10);
  v3[71] = OUTLINED_FUNCTION_46();
  _BYTE v3[72] = OUTLINED_FUNCTION_46();
  uint64_t v11 = type metadata accessor for DialogPhase(0LL);
  v3[73] = OUTLINED_FUNCTION_23(*(void *)(v11 - 8));
  uint64_t v12 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[74] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[75] = v13;
  v3[76] = OUTLINED_FUNCTION_23(v13);
  uint64_t v14 = (void *)OUTLINED_FUNCTION_0_1(*(void *)(v5 + 240));
  v3[77] = v14;
  *uint64_t v14 = v3;
  v14[1] = CallingIntentContinueInAppStrategy.makeIntentHandledOutput(intentResolutionRecord:);
  return v16(a2, 0LL);
}

uint64_t CallingIntentContinueInAppStrategy.makeIntentHandledOutput(intentResolutionRecord:)()
{
  uint64_t v2 = *(void *)(*v1 + 616);
  uint64_t v3 = *v1;
  *(void *)(v3 + 62__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v4;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_task_dealloc(*(void *)(v3 + 608));
    OUTLINED_FUNCTION_7_8();
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_46_0();
    OUTLINED_FUNCTION_92_0();
    OUTLINED_FUNCTION_9_2();
    OUTLINED_FUNCTION_14_3();
    OUTLINED_FUNCTION_29_17();
    return OUTLINED_FUNCTION_2_72(*(uint64_t (**)(void))(v3 + 8));
  }

  else
  {
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_4_0();
  }

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  OUTLINED_FUNCTION_27_7();
  v3[53] = v1;
  v3[54] = v2;
  v3[55] = v0;
  uint64_t v4 = v3[94];
  *uint64_t v5 = *v1;
  v3[95] = v0;
  swift_task_dealloc(v4);
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_16_3();
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_9_11(v6, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[10];
  if (*(_BYTE *)(v0 + 860) == 1)
  {
    uint64_t v1 = *(void **)(v0 + 488);
    uint64_t v2 = v1[5];
    uint64_t v3 = v1[6];
    OUTLINED_FUNCTION_82(v1 + 2);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 224))(v2, v3);
    (*(void (**)(uint64_t))(*(void *)v4 + 128LL))(v4);
    OUTLINED_FUNCTION_38_1();
  }

  uint64_t v5 = OUTLINED_FUNCTION_3_96((void *)(*(void *)(v0 + 488) + 16LL), *(void *)(v0 + 488));
  OUTLINED_FUNCTION_25_43( v5,  v6,  v7,  v8,  v9,  v10,  v11,  v12,  v26,  v28,  v30[0],  v30[1],  v30[2],  v30[3],  v30[4],  v30[5],  v30[6],  v30[7],  v30[8],  v30[9]);
  uint64_t v14 = v13;
  uint64_t v15 = OUTLINED_FUNCTION_11_12();
  uint64_t v16 = *(void **)(v0 + 736);
  uint64_t v17 = *(void **)(v0 + 728);
  if ((v14 & 1) != 0)
  {
    uint64_t v18 = *(void *)(v0 + 560);
    static ResponseMode.voiceOnly.getter(v15);
    OutputGenerationManifest.responseMode.setter(v18);
  }

  OUTLINED_FUNCTION_23_45(*(void *)(v0 + 432), v27, v29);
  *(void *)(v0 + 80__swift_destroy_boxed_opaque_existential_1(v0 + 8) = OUTLINED_FUNCTION_58_17((uint64_t)v30);
  if (v17)
  {
    OUTLINED_FUNCTION_32_38();
    OUTLINED_FUNCTION_49_23();
    OUTLINED_FUNCTION_34_0();
  }

  uint64_t v19 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_60_19(v19);
  uint64_t v21 = (void *)OUTLINED_FUNCTION_0_1(*(void *)(class metadata base offset for StartCallCATsSimple + v20 + 480));
  *(void *)(v0 + 8outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v21;
  uint64_t v22 = OUTLINED_FUNCTION_36_30( v21,  (uint64_t)CallingIntentContinueInAppStrategy.makeIntentHandledOutput(intentResolutionRecord:));
  return OUTLINED_FUNCTION_20_52(v22, v23, v24);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  OUTLINED_FUNCTION_27_7();
  v3[56] = v1;
  v3[57] = v2;
  v3[58] = v0;
  uint64_t v4 = v3[98];
  uint64_t v5 = v3[83];
  *uint64_t v6 = *v1;
  v3[99] = v0;
  swift_task_dealloc(v4);
  OUTLINED_FUNCTION_16_3();
  OUTLINED_FUNCTION_22();
  swift_release(v5);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_4_0();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[40];
  swift_release(v0[96]);
  OUTLINED_FUNCTION_23_45(v0[57], v9, v10);
  v0[101] = OUTLINED_FUNCTION_58_17((uint64_t)v11);
  if (v1)
  {
    OUTLINED_FUNCTION_32_38();
    OUTLINED_FUNCTION_49_23();
    OUTLINED_FUNCTION_34_0();
  }

  uint64_t v2 = OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_60_19(v2);
  uint64_t v4 = (void *)OUTLINED_FUNCTION_0_1(*(void *)(class metadata base offset for StartCallCATsSimple + v3 + 480));
  v0[102] = (uint64_t)v4;
  uint64_t v5 = OUTLINED_FUNCTION_36_30( v4,  (uint64_t)CallingIntentContinueInAppStrategy.makeIntentHandledOutput(intentResolutionRecord:));
  return OUTLINED_FUNCTION_20_52(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void (*v3)(void *);
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v1 = v0[85];
  if (v1)
  {
    uint64_t v2 = (void *)v0[103];
    uint64_t v3 = (void (*)(void *))v0[86];
    uint64_t v4 = v0[84];
    swift_bridgeObjectRetain();
    swift_retain();
    HintInstance.updateHintHistory(_:)(v2, v4, v1, v3);
    OUTLINED_FUNCTION_62();
    OUTLINED_FUNCTION_16_3();
    uint64_t v25 = v0[85];
  }

  else
  {
    uint64_t v25 = 0LL;
  }

  uint64_t v5 = v0[103];
  uint64_t v6 = (void *)v0[100];
  uint64_t v7 = v0[90];
  uint64_t v8 = v0[87];
  uint64_t v9 = v0[86];
  uint64_t v10 = v0[84];
  uint64_t v11 = v0[83];
  uint64_t v26 = v0[67];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = OUTLINED_FUNCTION_8_2(v12, 48LL);
  *(_OWORD *)(v13 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31FBC0;
  *(void *)(v13 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v6;
  *(void *)(v13 + 40) = v5;
  specialized Array._endMutation()(v13, v14, v15, v16);
  uint64_t v17 = v6;
  outlined consume of HintInstance?(v10, v25, v9, v8);
  swift_release(v7);
  swift_release(v11);

  outlined destroy of UUID?(v26, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_67();
  OUTLINED_FUNCTION_64_15();
  uint64_t v18 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)[1]);
  v0[106] = v18;
  uint64_t v19 = OUTLINED_FUNCTION_28_44(v18);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)( v19,  v20,  v21,  v22,  v23);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_27_7();
  swift_task_dealloc(*(void *)(v0 + 848));
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_54_9(*(void *)(v0 + 600));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 80));
  OUTLINED_FUNCTION_14_57();
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_14_3();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  OUTLINED_FUNCTION_48_22();
  uint64_t v1 = *(void *)(v0 + 632);
  uint64_t v2 = *(void *)(v0 + 608);
  uint64_t v3 = *(void *)(v0 + 600);
  uint64_t v4 = *(void *)(v0 + 592);
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = 0LL;
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  OUTLINED_FUNCTION_1_78();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_29_17();
  return OUTLINED_FUNCTION_2_72(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v1 = *(void **)(v0 + 736);
  uint64_t v2 = *(void *)(v0 + 696);
  uint64_t v3 = *(void *)(v0 + 688);
  uint64_t v4 = *(void *)(v0 + 680);
  uint64_t v5 = *(void *)(v0 + 672);
  uint64_t v6 = *(void *)(v0 + 664);
  uint64_t v7 = *(void *)(v0 + 600);
  uint64_t v10 = *(void *)(v0 + 592);
  uint64_t v11 = *(void *)(v0 + 608);
  uint64_t v8 = *(void *)(v0 + 536);

  outlined consume of HintInstance?(v5, v4, v3, v2);
  OUTLINED_FUNCTION_38_1();
  swift_release(v6);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v10);
  OUTLINED_FUNCTION_1_78();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_29_17();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  OUTLINED_FUNCTION_48_22();
  uint64_t v1 = OUTLINED_FUNCTION_63_17();
  uint64_t v2 = *(void *)(v0 + 608);
  uint64_t v3 = *(void *)(v0 + 600);
  uint64_t v4 = *(void *)(v0 + 592);
  uint64_t v5 = *(void *)(v0 + 536);
  outlined consume of HintInstance?(v1, v6, v7, v8);
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_16_3();
  outlined destroy of UUID?(v5, &demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  OUTLINED_FUNCTION_1_78();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_29_17();
  return OUTLINED_FUNCTION_2_72(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  OUTLINED_FUNCTION_48_22();
  uint64_t v1 = *(void **)(v0 + 800);
  uint64_t v2 = OUTLINED_FUNCTION_63_17();
  uint64_t v3 = *(void *)(v0 + 600);
  uint64_t v4 = *(void *)(v0 + 536);
  outlined consume of HintInstance?(v2, v5, v6, v7);
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_22();

  outlined destroy of UUID?(v4, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_29_25(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_1_78();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_29_17();
  return OUTLINED_FUNCTION_2_72(*(uint64_t (**)(void))(v0 + 8));
}

void CallingIntentContinueInAppStrategy.makeIntentHandledOutput(intentResolutionRecord:)(uint64_t a1)
{
  void (*v142)(_OWORD *__return_ptr);
  uint64_t v143;
  void *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(uint64_t, uint64_t);
  _OWORD v153[2];
  uint64_t v154;
  uint64_t v2 = *(void *)(v1 + 624);
  uint64_t v3 = *(void *)(v1 + 584);
  uint64_t v4 = *(void **)(v1 + 496);
  static DialogPhase.completion.getter(a1);
  uint64_t v5 = swift_task_alloc(32LL);
  *(void *)(v5 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v2;
  OutputGenerationManifest.init(dialogPhase:_:)( v3,  partial apply for closure #1 in CallingIntentContinueInAppStrategy.makeIntentHandledOutput(intentResolutionRecord:),  v5);
  OUTLINED_FUNCTION_46_0();
  uint64_t v6 = v4[10];
  uint64_t v7 = type metadata accessor for IntentResolutionRecord(0LL, v6, v4[11]);
  uint64_t v8 = (void *)IntentResolutionRecord.intent.getter(v7);
  uint64_t v9 = v4[12];
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 64))(v6, v9);
  unint64_t v12 = v11;

  uint64_t v13 = specialized Optional<A>.isNilOrEmpty.getter(v10, v12);
  OUTLINED_FUNCTION_34_0();
  if ((v13 & 1) != 0)
  {
    uint64_t v14 = *(void *)(v1 + 488);
    uint64_t v15 = *(void *)(v14 + 48);
    uint64_t v144 = (void *)(v14 + 16);
    uint64_t v146 = v14;
    OUTLINED_FUNCTION_49_0((void *)(v14 + 16));
    uint64_t v143 = v7;
    uint64_t v148 = v6;
    uint64_t v16 = *(void *)(v1 + 576);
    uint64_t v17 = *(void *)(v1 + 568);
    uint64_t v18 = *(void *)(v1 + 552);
    uint64_t v19 = *(void *)(v1 + 544);
    CurrentRequest.responseMode.getter();
    OUTLINED_FUNCTION_38_1();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v16, v17, v19);
    if (!ResponseMode.isDisplayMode()()
      || (uint64_t v20 = OUTLINED_FUNCTION_3_96(v144, v146),
          OUTLINED_FUNCTION_25_43( v20,  v21,  v22,  v23,  v24,  v25,  v26,  v27,  v133,  v134,  v136,  v137,  v138,  v140,  v141,  v143,  (uint64_t)v144,  v146,  v6,  v150),  char v29 = v28,  OUTLINED_FUNCTION_11_12(),  (v29 & 1) != 0)
      || (uint64_t v30 = *(void **)(v1 + 488), CallingIntentContinueInAppStrategy.isBusinessRedirectCall()()))
    {
      OUTLINED_FUNCTION_54_9(*(void *)(v1 + 552));
LABEL_13:
      OUTLINED_FUNCTION_62();
      uint64_t v41 = *(void *)(v1 + 520);
      uint64_t v139 = *(void *)(v1 + 512);
      uint64_t v151 = *(void *)(v1 + 504);
      uint64_t v42 = *(void *)(v1 + 488);
      uint64_t v43 = type metadata accessor for PhoneStartCallIntent(0LL);
      uint64_t v44 = (void *)IntentResolutionRecord.intent.getter(v143);
      uint64_t v135 = v9;
      specialized PhoneStartCallIntent.__allocating_init(intent:isRelationshipRequest:)(v44, 0, v43, v148, v9);
      *(void *)(v1 + 66__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v45;
      outlined init with copy of SharedGlobalsProviding((uint64_t)v144, v1 + 40);
      *(_BYTE *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = 1;
      *(void *)(v1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 0xD000000000000013LL;
      *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0x8000000000343C20LL;
      *(void *)(v1 + 67__swift_destroy_boxed_opaque_existential_1(v0 + 2) = specialized SiriPhoneHintGenerator.generateHint()();
      *(void *)(v1 + 680) = v46;
      *(void *)(v1 + 68__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v47;
      *(void *)(v1 + 696) = v48;
      outlined destroy of HangUpTipGenerator(v1 + 16);
      uint64_t v49 = *(void *)(v146 + 40);
      uint64_t v50 = *(void *)(v146 + 48);
      OUTLINED_FUNCTION_17_25(v144);
      (*(void (**)(uint64_t, uint64_t))(v50 + 168))(v49, v50);
      uint64_t v51 = *(void *)(v1 + 144);
      unint64_t v52 = *(uint64_t (***)(void, void, void, void))(v1 + 152);
      OUTLINED_FUNCTION_17_25((void *)(v1 + 120));
      uint64_t v53 = IntentResolutionRecord.app.getter(v143);
      uint64_t v54 = *(void (**)(void))(*(void *)v42 + 144LL);
      *(void *)(v1 + 70__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v54;
      uint64_t v142 = (void (*)(_OWORD *__return_ptr))v54;
      v54();
      uint64_t v55 = *(void *)(v1 + 184);
      uint64_t v56 = *(void *)(v1 + 192);
      OUTLINED_FUNCTION_82((void *)(v1 + 160));
      dispatch thunk of DeviceState.siriLocale.getter(v55, v56);
      uint64_t v57 = v52[2](v53, v41, v51, v52);
      uint64_t v59 = v58;
      swift_release(v53);
      uint64_t v60 = v151;
      uint64_t v152 = *(void (**)(uint64_t, uint64_t))(v139 + 8);
      v152(v41, v60);
      OUTLINED_FUNCTION_11_12();
      uint64_t v61 = *(void *)(v1 + 536);
      if (v59)
      {
        swift_bridgeObjectRetain();
        SpeakableString.init(print:speak:)(v57, v59, 0LL, 0LL);
        uint64_t v62 = OUTLINED_FUNCTION_26_0();
        __swift_storeEnumTagSinglePayload(v61, 0LL, 1LL, v62);
        OUTLINED_FUNCTION_62();
      }

      else
      {
        uint64_t v63 = OUTLINED_FUNCTION_26_0();
        OUTLINED_FUNCTION_29_1(v61, v64, v65, v63);
      }

      __swift_destroy_boxed_opaque_existential_1((void *)(v1 + 120));
      uint64_t v66 = v143;
      IntentResolutionRecord.app.getter(v143);
      uint64_t v67 = App.appIdentifier.getter();
      uint64_t v69 = v68;
      OUTLINED_FUNCTION_16_3();
      if (v69)
      {
        if (v67 != 0xD000000000000010LL || v69 != 0x800000000034B0D0LL) {
          _stringCompareWithSmolCheck(_:_:expecting:)(v67, v69, 0xD000000000000010LL, 0x800000000034B0D0LL, 0LL);
        }
        OUTLINED_FUNCTION_62();
      }

      *(void *)(v1 + 71__swift_destroy_boxed_opaque_existential_1(v0 + 2) = type metadata accessor for SirikitDeviceState(0LL);
      v142(v153);
      uint64_t v70 = OUTLINED_FUNCTION_58_17((uint64_t)v153);
      *(void *)(v1 + 720) = v70;
      uint64_t v71 = (void *)IntentResolutionRecord.intent.getter(v143);
      *(void *)(v1 + 72__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v71;
      uint64_t v72 = objc_opt_self(&OBJC_CLASS___INStartCallIntent);
      uint64_t v73 = swift_dynamicCastObjCClass(v71, v72);
      if (v73)
      {
        unint64_t v52 = (uint64_t (**)(void, void, void, void))v73;
        uint64_t v74 = (void *)IntentResolutionRecord.intentResponse.getter(v143);
        *(void *)(v1 + 736) = v74;
        uint64_t v75 = objc_opt_self(&OBJC_CLASS___INStartCallIntentResponse);
        if (swift_dynamicCastObjCClass(v74, v75))
        {
          uint64_t v76 = v74;
          OUTLINED_FUNCTION_76_16();
          char v78 = v77;

          if ((v78 & 1) != 0)
          {
            uint64_t v79 = (void *)(v1 + 280);
            uint64_t v149 = (void *)(v1 + 320);
            uint64_t v80 = *(void *)(v146 + 40);
            uint64_t v81 = *(void *)(v146 + 48);
            OUTLINED_FUNCTION_17_25(v144);
            uint64_t v82 = (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 224))(v80, v81);
            LOBYTE(v15__swift_destroy_boxed_opaque_existential_1(v0 + 2) = (*(uint64_t (**)(uint64_t))(*(void *)v82 + 120LL))(1LL);
            *(_BYTE *)(v1 + 860) = v152 & 1;
            OUTLINED_FUNCTION_38_1();
            if (one-time initialization token for siriPhone == -1) {
              goto LABEL_27;
            }
            goto LABEL_62;
          }
        }
      }

      else
      {
        uint64_t v74 = v71;
      }

      uint64_t v93 = (void *)IntentResolutionRecord.intent.getter(v143);
      uint64_t v76 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v135 + 8) + 8LL) + 8LL))(v148);

      if (!v76)
      {
        uint64_t v110 = _swiftEmptyArrayStorage;
        goto LABEL_60;
      }

      *(void *)&v153[0] = _swiftEmptyArrayStorage;
      if ((unint64_t)v76 >> 62)
      {
        if (v76 >= 0) {
          uint64_t v125 = v76 & 0xFFFFFFFFFFFFFF8LL;
        }
        else {
          uint64_t v125 = v76;
        }
        swift_bridgeObjectRetain();
        uint64_t v79 = (void *)_CocoaArrayWrapper.endIndex.getter(v125);
        if (v79) {
          goto LABEL_36;
        }
      }

      else
      {
        uint64_t v79 = *(void **)((char *)&dword_10 + (v76 & 0xFFFFFFFFFFFFFF8LL));
        swift_bridgeObjectRetain();
        if (v79)
        {
LABEL_36:
          uint64_t v142 = (void (*)(_OWORD *__return_ptr))v70;
          uint64_t v149 = (void *)type metadata accessor for PhonePerson(0LL);
          if ((uint64_t)v79 < 1)
          {
            __break(1u);
LABEL_62:
            swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
LABEL_27:
            uint64_t v83 = OUTLINED_FUNCTION_15_1();
            uint64_t v84 = (os_log_s *)OUTLINED_FUNCTION_12_1(v83, (uint64_t)static Logger.siriPhone);
            os_log_type_t v86 = static os_log_type_t.debug.getter(v84, v85);
            if (os_log_type_enabled(v84, v86))
            {
              id v87 = (uint8_t *)OUTLINED_FUNCTION_7_0(8LL);
              *(_DWORD *)id v87 = 67109120;
              *(_DWORD *)(v1 + 856) = v152 & 1;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 856, v1 + 860, v87 + 4);
              _os_log_impl( &dword_0,  v84,  v86,  "#CallingIntentContinueInAppStrategy is emergency confirmation reprompt: %{BOOL}d",  v87,  8u);
              OUTLINED_FUNCTION_0_2((uint64_t)v87);
            }

            uint64_t v88 = *(void *)(v1 + 488);

            uint64_t v89 = *(void **)(v88 + 56);
            *(void *)(v1 + 74__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v89;
            id v90 = (id)v76;
            uint64_t v91 = swift_retain();
            v142((_OWORD *)v91);
            OUTLINED_FUNCTION_76_16();
            LOBYTE(v8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v92;
            outlined init with copy of SharedGlobalsProviding((uint64_t)v79, (uint64_t)v149);
            if ((v88 & 1) != 0) {
              static EmergencyUtils.shouldOpenMicForEmergency(intent:deviceState:)(v52);
            }
            __swift_destroy_boxed_opaque_existential_1(v149);

            __swift_destroy_boxed_opaque_existential_1(v79);
            uint64_t v111 = *(unsigned int *)(*(void *)(class metadata base offset for StartCallCATsSimple + *v89 + 576) + 4LL);
            swift_retain();
            uint64_t v112 = (void *)swift_task_alloc(v111);
            *(void *)(v1 + 75__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v112;
            *uint64_t v112 = v1;
            v112[1] = CallingIntentContinueInAppStrategy.makeIntentHandledOutput(intentResolutionRecord:);
            OUTLINED_FUNCTION_55_19();
            __asm { BR              X5 }
          }

          uint64_t v94 = 0LL;
          id v145 = v76 & 0xC000000000000001LL;
          uint64_t v147 = v76;
          do
          {
            if (v145) {
              id v95 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v94, v76);
            }
            else {
              id v95 = *(id *)(v76 + 8LL * (void)v94 + 32);
            }
            uint64_t v96 = v95;
            uint64_t v97 = *(void *)(v1 + 520);
            uint64_t v98 = *(void *)(v1 + 504);
            static Device.current.getter((void *)(v1 + 240));
            uint64_t v100 = *(void *)(v1 + 264);
            uint64_t v99 = *(void *)(v1 + 272);
            __swift_project_boxed_opaque_existential_1((void *)(v1 + 240), v100);
            dispatch thunk of DeviceState.siriLocale.getter(v100, v99);
            __swift_destroy_boxed_opaque_existential_1((void *)(v1 + 240));
            static PhonePerson.make(phonePerson:options:locale:)(v96, 0, v97);
            uint64_t v102 = v101;
            v152(v97, v98);

            if (v102)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v103);
              unint64_t v105 = *(void *)((char *)&dword_10 + (*(void *)&v153[0] & 0xFFFFFFFFFFFFFF8LL));
              unint64_t v104 = *(void *)((char *)&dword_18 + (*(void *)&v153[0] & 0xFFFFFFFFFFFFFF8LL));
              if (v105 >= v104 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v104 > 1,  v105 + 1,  1LL);
              }
              uint64_t v106 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v105, v102);
              specialized Array._endMutation()(v106, v107, v108, v109);
            }

            uint64_t v94 = (void *)((char *)v94 + 1);
            uint64_t v76 = v147;
          }

          while (v79 != v94);
          OUTLINED_FUNCTION_39();
          uint64_t v110 = *(void **)&v153[0];
          uint64_t v66 = v143;
          goto LABEL_59;
        }
      }

      OUTLINED_FUNCTION_39();
      uint64_t v110 = _swiftEmptyArrayStorage;
LABEL_59:
      OUTLINED_FUNCTION_39();
LABEL_60:
      uint64_t v126 = *(void *)(v1 + 488);
      uint64_t v127 = type metadata accessor for PhonePersonList.Builder();
      uint64_t v128 = OUTLINED_FUNCTION_8_2(v127, 24LL);
      *(void *)(v128 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = _swiftEmptyArrayStorage;
      OUTLINED_FUNCTION_25_0(v128 + 16, v1 + 400, 1LL);
      *(void *)(v128 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v110;
      swift_bridgeObjectRelease();
      uint64_t v129 = type metadata accessor for PhonePersonList();
      OUTLINED_FUNCTION_8_2(v129, 32LL);
      *(void *)(v1 + 76__swift_destroy_boxed_opaque_existential_1(v0 + 8) = PhonePersonList.init(builder:)(v128);
      uint64_t v130 = *(void **)(v126 + 56);
      *(void *)(v1 + 776) = v130;
      swift_retain();
      swift_retain();
      swift_retain();
      IntentResolutionRecord.app.getter(v66);
      App.isFirstParty()();
      OUTLINED_FUNCTION_38_1();
      CallingIntentContinueInAppStrategy.shouldPrintDialogOnDisplayMode()();
      uint64_t v131 = (void *)OUTLINED_FUNCTION_41_30(*(void *)(class metadata base offset for StartCallCATsSimple
                                                         + *v130
                                                         + 560));
      *(void *)(v1 + 78__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v131;
      *uint64_t v131 = v1;
      v131[1] = CallingIntentContinueInAppStrategy.makeIntentHandledOutput(intentResolutionRecord:);
      OUTLINED_FUNCTION_55_19();
      __asm { BR              X7 }
    }

    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v114 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v114, (uint64_t)static Logger.siriPhone);
    os_log_type_t v115 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_27_1(v115))
    {
      uint64_t v116 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      *uint64_t v116 = 0;
      OUTLINED_FUNCTION_5_13( &dword_0,  v117,  v118,  "#CallingIntentContinueInAppStrategy device on display mode: skipping dialog and submitting post dialog commands");
      OUTLINED_FUNCTION_0_2((uint64_t)v116);
    }

    uint64_t v119 = *(void *)(v1 + 624);
    uint64_t v120 = *(void *)(v1 + 600);
    uint64_t v121 = *(void *)(v1 + 576);
    uint64_t v122 = *(void *)(v1 + 552);
    uint64_t v123 = *(void *)(v1 + 544);

    uint64_t v124 = type metadata accessor for AceOutput(0LL);
    memset(v153, 0, sizeof(v153));
    uint64_t v154 = 0LL;
    OUTLINED_FUNCTION_72_19(v124, (uint64_t)&protocol witness table for AceOutput);
    AceOutput.init(commands:flowActivity:)(v119, v153);
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v121, v123);
    OUTLINED_FUNCTION_29_25(*(uint64_t (**)(uint64_t, uint64_t))(v120 + 8));
    OUTLINED_FUNCTION_14_57();
    OUTLINED_FUNCTION_23_3();
    OUTLINED_FUNCTION_7_8();
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_46_0();
    OUTLINED_FUNCTION_92_0();
    OUTLINED_FUNCTION_9_2();
    OUTLINED_FUNCTION_14_3();
  }

  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v31 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v31, (uint64_t)static Logger.siriPhone);
    os_log_type_t v32 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_27_1(v32))
    {
      uint64_t v33 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      *uint64_t v33 = 0;
      OUTLINED_FUNCTION_5_13( &dword_0,  v34,  v35,  "#CallingIntentContinueInAppStrategy: Calling intentHandledResponseWithFaceTimeLink");
      OUTLINED_FUNCTION_0_2((uint64_t)v33);
    }

    uint64_t v36 = *(void *)(v1 + 488);

    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v38 = OUTLINED_FUNCTION_8_2(v37, 40LL);
    *(void *)(v1 + 63__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v38;
    *(_OWORD *)(v38 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31FE60;
    uint64_t v39 = (void *)OUTLINED_FUNCTION_41_30(*(void *)(class metadata base offset for StartCallCATsSimple
                                                      + **(void **)(v36 + 56)
                                                      + 592));
    *(void *)(v1 + 640) = v39;
    *uint64_t v39 = v1;
    v39[1] = CallingIntentContinueInAppStrategy.makeIntentHandledOutput(intentResolutionRecord:);
  }

  OUTLINED_FUNCTION_55_19();
  __asm { BR              X0 }

uint64_t CallingIntentContinueInAppStrategy.makeIntentHandledOutput(intentResolutionRecord:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 640);
  *(void *)(*v2 + 64__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v1;
  swift_task_dealloc(v5);
  if (!v1) {
    *(void *)(v4 + 656) = a1;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_9_11(v6, v7, v8);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 816);
  uint64_t v5 = *(void *)(*v2 + 528);
  *(void *)(v3 + 82__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a1;
  *(void *)(v3 + 83__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v1;
  swift_task_dealloc(v4);
  outlined destroy of UUID?(v5, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_9_11(v6, v7, v8);
}

uint64_t CallingIntentContinueInAppStrategy.makeIntentHandledOutput(intentResolutionRecord:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4[79] + 32LL) = v4[82];
  specialized Array._endMutation()(a1, a2, a3, a4);
  OUTLINED_FUNCTION_11_67();
  OUTLINED_FUNCTION_64_15();
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)[1]);
  v4[106] = v5;
  uint64_t v6 = OUTLINED_FUNCTION_28_44(v5);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v6, v7, v8, v9, v10);
}

BOOL CallingIntentContinueInAppStrategy.isBusinessRedirectCall()()
{
  uint64_t v1 = *(void *)(v0 + 48);
  OUTLINED_FUNCTION_49_0((void *)(v0 + 16));
  uint64_t v2 = OUTLINED_FUNCTION_6_2(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 72));
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 232LL))(&v13);
  OUTLINED_FUNCTION_38_1();
  if (v14[3] == 1LL)
  {
    outlined destroy of UUID?( (uint64_t)&v13,  (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    uint64_t v17 = 0LL;
LABEL_5:
    outlined destroy of UUID?((uint64_t)&v15, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    return 0;
  }

  outlined init with copy of PhoneCallNLIntent?((uint64_t)v14, (uint64_t)&v15);
  outlined destroy of TransformationResult((uint64_t)&v13);
  if (!*((void *)&v16 + 1)) {
    goto LABEL_5;
  }
  outlined init with take of AppSelectionSignalComponent(&v15, (uint64_t)&v13);
  OUTLINED_FUNCTION_49_0(&v13);
  BOOL v3 = PhoneCallNLIntent.isBusinessRedirectCall()();
  BOOL v4 = v3;
  OUTLINED_FUNCTION_221(v3, v5, v6, v7, v8, v9, v10, v11, v13);
  return v4;
}

BOOL CallingIntentContinueInAppStrategy.shouldPrintDialogOnDisplayMode()()
{
  uint64_t v1 = type metadata accessor for ResponseMode(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  BOOL v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v12 - v5;
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[6];
  OUTLINED_FUNCTION_17_25(v0 + 2);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 112))(v7, v8);
  BOOL v10 = v9;
  if (v9)
  {
    CurrentRequest.responseMode.getter();
    OUTLINED_FUNCTION_38_1();
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v6, v4, v1);
    BOOL v10 = ResponseMode.isDisplayMode()() && CallingIntentContinueInAppStrategy.isBusinessRedirectCall()();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v1);
  }

  return v10;
}

uint64_t CallingIntentContinueInAppStrategy.authenticationPolicy.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_105_2();
  return OUTLINED_FUNCTION_55_1(v0, v1, v2, v3);
}

uint64_t key path setter for CallingIntentContinueInAppStrategy.additionalCommands : <A, B>CallingIntentContinueInAppStrategy<A, B>( void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 160LL);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t closure #1 in CallingIntentContinueInAppStrategy.makeIntentHandledOutput(intentResolutionRecord:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_bridgeObjectRetain(a2);
  return OutputGenerationManifest.additionalCommands.setter(v3);
}

uint64_t closure #1 in CallingIntentContinueInAppStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v20[1] = a3;
  type metadata accessor for CATOption(0LL);
  __chkstk_darwin();
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SAIntentGroupLaunchAppWithIntent, Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INStartCallIntent, INStartCallIntentResponse>);
  uint64_t v10 = IntentResolutionRecord.app.getter(v9);
  uint64_t v11 = (void *)IntentResolutionRecord.intent.getter(v9);
  uint64_t v12 = (void *)IntentResolutionRecord.intentResponse.getter(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v6);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = (v13 + 16) & ~v13;
  uint64_t v15 = swift_allocObject(&unk_40E5D8, v14 + v8, v13 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))( v15 + v14,  (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v6);
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  __int128 v16 = (void *)static BiomeEventSender.instance;
  type metadata accessor for UnsupportedFlowCATs(0LL);
  id v17 = v16;
  static CATOption.defaultMode.getter(v17);
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)(v5, 0LL);
  specialized static StartCallRCHFlowDelegate.makeLaunchAppCommandForHandle(app:sharedGlobals:intent:intentResponse:biomeEventSender:unsupportedFlowCats:_:)();

  swift_release(v10);
  swift_release(v15);
  return swift_release(v18);
}

uint64_t _s27PhoneCallFlowDelegatePlugin34CallingIntentContinueInAppStrategyC22makePostDialogCommands22intentResolutionRecord16dialogTemplatingSaySo13SABaseCommandCG07SiriKitC00gqR0Vyxq_G_AA05Startb3CatT7ServiceCSgtYaKFyScCySo019SAIntentGroupLaunchj4WithG0Cs5Error_pGXEfU_ys6ResultOyARsAS_pGYucATcfu_yAWYucfu0_( void *a1, char a2)
{
  uint64_t v6 = a1;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SAIntentGroupLaunchAppWithIntent, Error>);
    return CheckedContinuation.resume(throwing:)(&v6, v5);
  }

  else
  {
    id v2 = a1;
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SAIntentGroupLaunchAppWithIntent, Error>);
    return CheckedContinuation.resume(returning:)(&v6, v3);
  }

uint64_t CallingIntentContinueInAppStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t protocol witness for ContinueInAppAutoPunchOutFlowStrategyAsync.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:) in conformance CallingIntentContinueInAppStrategy<A, B>( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(**(void **)v2 + 192LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  return v9(a1, a2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance CallingIntentContinueInAppStrategy<A, B>( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)[1]);
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v9;
  uint64_t v10 = type metadata accessor for CallingIntentContinueInAppStrategy(0LL, a3[10], a3[11], a3[12]);
  *uint64_t v9 = v4;
  v9[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)(a1, a2, v10, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance CallingIntentContinueInAppStrategy<A, B>( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)[1]);
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v9;
  uint64_t v10 = type metadata accessor for CallingIntentContinueInAppStrategy(0LL, a3[10], a3[11], a3[12]);
  *uint64_t v9 = v4;
  v9[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)(a1, a2, v10, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance CallingIntentContinueInAppStrategy<A, B>( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)[1]);
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v9;
  uint64_t v10 = type metadata accessor for CallingIntentContinueInAppStrategy(0LL, a3[10], a3[11], a3[12]);
  *uint64_t v9 = v4;
  v9[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)(a1, a2, v10, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance CallingIntentContinueInAppStrategy<A, B>( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:)[1]);
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v9;
  uint64_t v10 = type metadata accessor for CallingIntentContinueInAppStrategy(0LL, a3[10], a3[11], a3[12]);
  *uint64_t v9 = v4;
  v9[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  return HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:)(a1, a2, v10, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance CallingIntentContinueInAppStrategy<A, B>( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)[1]);
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v9;
  uint64_t v10 = type metadata accessor for CallingIntentContinueInAppStrategy(0LL, a3[10], a3[11], a3[12]);
  *uint64_t v9 = v4;
  v9[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)(a1, a2, v10, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance CallingIntentContinueInAppStrategy<A, B>( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)[1]);
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v9;
  uint64_t v10 = type metadata accessor for CallingIntentContinueInAppStrategy(0LL, a3[10], a3[11], a3[12]);
  *uint64_t v9 = v4;
  v9[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)(a1, a2, v10, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance CallingIntentContinueInAppStrategy<A, B>( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:)[1]);
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v9;
  uint64_t v10 = type metadata accessor for CallingIntentContinueInAppStrategy(0LL, a3[10], a3[11], a3[12]);
  *uint64_t v9 = v4;
  v9[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  return HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:)(a1, a2, v10, a4);
}

uint64_t protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance CallingIntentContinueInAppStrategy<A, B>( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(**(void **)v2 + 200LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  return v9(a1, a2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.authenticationPolicy.getter in conformance CallingIntentContinueInAppStrategy<A, B>()
{
  uint64_t v0 = OUTLINED_FUNCTION_105_2();
  return OUTLINED_FUNCTION_55_1(v0, v1, v2, v3);
}

uint64_t protocol witness for UnlockDeviceFlowStrategyAsync.makePromptForDeviceUnlock() in conformance CallingIntentContinueInAppStrategy<A, B>( uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 216LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  return v7(a1);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance CallingIntentContinueInAppStrategy<A, B>( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)[1]);
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v9;
  uint64_t v10 = type metadata accessor for CallingIntentContinueInAppStrategy(0LL, a3[10], a3[11], a3[12]);
  *uint64_t v9 = v4;
  v9[1] = protocol witness for Flow.onAsync(input:) in conformance ContactNeedsValueGuardFlow<A1>;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)(a1, a2, v10, a4);
}

uint64_t partial apply for closure #1 in CallingIntentContinueInAppStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:)( uint64_t a1)
{
  return closure #1 in CallingIntentContinueInAppStrategy.makePostDialogCommands(intentResolutionRecord:dialogTemplating:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in CallingIntentContinueInAppStrategy.makeIntentHandledOutput(intentResolutionRecord:)( uint64_t a1)
{
  return closure #1 in CallingIntentContinueInAppStrategy.makeIntentHandledOutput(intentResolutionRecord:)( a1,  *(void *)(v1 + 16));
}

uint64_t outlined consume of HintInstance?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_release(a4);
  }

  return result;
}

uint64_t base witness table accessor for ContinueInAppDialogFlowStrategyAsync in CallingIntentContinueInAppStrategy<A, B>( uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for CallingIntentContinueInAppStrategy<A, B>, a1);
}

uint64_t base witness table accessor for UnlockDeviceFlowStrategyAsync in CallingIntentContinueInAppStrategy<A, B>( uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for CallingIntentContinueInAppStrategy<A, B>, a1);
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in CallingIntentContinueInAppStrategy<A, B>( uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for CallingIntentContinueInAppStrategy<A, B>, a1);
}

uint64_t base witness table accessor for ContinueInAppFlowStrategy in CallingIntentContinueInAppStrategy<A, B>( uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for CallingIntentContinueInAppStrategy<A, B>, a1);
}

uint64_t sub_209238@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152LL))();
  *a2 = result;
  return result;
}

uint64_t sub_20926C()
{
  return 24LL;
}

__n128 sub_209278(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata completion function for CallingIntentContinueInAppStrategy(uint64_t a1)
{
  v4[0] = "(";
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for UnlockDevicePolicy(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(result - 8) + 64LL;
    void v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 5LL, v4, a1 + 104);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for CallingIntentContinueInAppStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for CallingIntentContinueInAppStrategy);
}

uint64_t specialized updateHintHistory #1 <A>(_:) in SiriPhoneHintGenerator.generateHint()( uint64_t a1, void *a2, uint64_t *a3)
{
  return specialized updateHintHistory #1 <A>(_:) in SiriPhoneHintGenerator.generateHint()(a1, a2, *a3);
}

uint64_t sub_209334()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t partial apply for specialized updateHintHistory #1 <A>(_:) in SiriPhoneHintGenerator.generateHint()( uint64_t a1)
{
  return specialized updateHintHistory #1 <A>(_:) in SiriPhoneHintGenerator.generateHint()( a1,  (void *)(v1 + 16),  (uint64_t *)(v1 + 80));
}

uint64_t sub_209374()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SAIntentGroupLaunchAppWithIntent, Error>)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = ((v2 + 16) & ~v2) + *(void *)(v1 + 64);
  uint64_t v4 = v2 | 7;
  OUTLINED_FUNCTION_54_9(v1);
  return swift_deallocObject(v0, v3, v4);
}

uint64_t OUTLINED_FUNCTION_1_78()
{
  return swift_task_dealloc(*(void *)(v0 + 608));
}

uint64_t OUTLINED_FUNCTION_2_72(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_3_96@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a2 + 40);
  uint64_t v3 = *(void *)(a2 + 48);
  __swift_project_boxed_opaque_existential_1(a1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
}

uint64_t OUTLINED_FUNCTION_11_67()
{
  *(void *)(v1 + 840) = v0;
  uint64_t v2 = *(void **)(v1 + 488);
  uint64_t v3 = v2[5];
  uint64_t v4 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 136))(v3, v4);
}

uint64_t OUTLINED_FUNCTION_14_57()
{
  return swift_task_dealloc(*(void *)(v0 + 608));
}

uint64_t OUTLINED_FUNCTION_20_52(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void *OUTLINED_FUNCTION_23_45@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, ...)
{
  void *(*v4)(uint64_t *__return_ptr);
  va_list va;
  va_start(va, a3);
  uint64_t v4 = *(void *(**)(uint64_t *__return_ptr))(v3 + 704);
  *(void *)(v3 + 800) = a1;
  return v4((uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_28_44(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 472);
}

uint64_t OUTLINED_FUNCTION_31_36@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t OUTLINED_FUNCTION_32_38()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 680));
}

uint64_t OUTLINED_FUNCTION_36_30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

void *OUTLINED_FUNCTION_38_26( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *(*v9)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  return v9(&a9, v10, v11);
}

uint64_t OUTLINED_FUNCTION_41_30@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

  ;
}

uint64_t OUTLINED_FUNCTION_49_23()
{
  return String.toSpeakableString.getter(v1, v0);
}

uint64_t OUTLINED_FUNCTION_52_19(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_53_22@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

  ;
}

uint64_t OUTLINED_FUNCTION_58_17(uint64_t a1)
{
  return SirikitDeviceState.__allocating_init(from:)(a1);
}

uint64_t OUTLINED_FUNCTION_60_19(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v2, v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_63_17()
{
  return *(void *)(v0 + 672);
}

void *OUTLINED_FUNCTION_72_19@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v2[3] = a1;
  v2[4] = a2;
  return __swift_allocate_boxed_opaque_existential_1(v2);
}

void OUTLINED_FUNCTION_76_16()
{
}

void *ContactGroupResolver.findGroups(query:config:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContactGroup(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = ContactGroupResolver.findGroups(query:config:)(a1, a2);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v23 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v10 = v23;
    unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v19[1] = v8;
    unint64_t v12 = v8 + v11;
    uint64_t v13 = *(void *)(v5 + 72);
    uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    do
    {
      v14(v7, v12, v4);
      uint64_t v23 = v10;
      unint64_t v15 = v10[2];
      if (v15 >= v10[3] >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      uint64_t v21 = v4;
      uint64_t v22 = &protocol witness table for ContactGroup;
      __int128 v16 = (char *)__swift_allocate_boxed_opaque_existential_1(&v20);
      v14(v16, (unint64_t)v7, v4);
      id v17 = v23;
      v23[2] = v15 + 1;
      outlined init with take of AppSelectionSignalComponent(&v20, (uint64_t)&v17[5 * v15 + 4]);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      uint64_t v10 = v23;
      v12 += v13;
      --v9;
    }

    while (v9);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }

  return v10;
}

uint64_t AnyIntentResolver.resolve(skIntent:nlIntent:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  void v3[2] = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)AnyIntentResolver.resolve(skIntent:nlIntent:));
}

uint64_t AnyIntentResolver.resolve(skIntent:nlIntent:)()
{
  uint64_t v1 = *(int **)(v0[4] + 48LL);
  uint64_t v4 = (int *)((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc(v1[1]);
  v0[5] = v2;
  *uint64_t v2 = v0;
  v2[1] = AnyIntentResolver.resolve(skIntent:nlIntent:);
  return ((uint64_t (*)(void, void))v4)(v0[2], v0[3]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  OUTLINED_FUNCTION_6_83();
  uint64_t v4 = OUTLINED_FUNCTION_14_1(*(void *)(v3 + 40));
  if (!v1) {
    uint64_t v4 = v0;
  }
  return OUTLINED_FUNCTION_116_1(v4, *(uint64_t (**)(void))(v2 + 8));
}

uint64_t SKIntentResolver.toAnyIntentResolver()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v16 - v6;
  OUTLINED_FUNCTION_5_81((uint64_t)&v16 - v6);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL);
  uint64_t v11 = type metadata accessor for AnyIntentResolver(0LL, AssociatedTypeWitness, v9, v10);
  uint64_t result = swift_dynamicCast(&v16, v7, a1);
  if ((_DWORD)result)
  {
    __int128 v13 = v17;
    *(_OWORD *)a2 = v16;
    *(_OWORD *)(a2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v13;
    __int128 v14 = v19;
    *(_OWORD *)(a2 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v18;
    *(_OWORD *)(a2 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v14;
  }

  else
  {
    uint64_t v15 = type metadata accessor for Optional(0LL, v11);
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    (*(void (**)(__int128 *, uint64_t))(*(void *)(v15 - 8) + 8LL))(&v16, v15);
    OUTLINED_FUNCTION_5_81((uint64_t)v5);
    return AnyIntentResolver.init<A>(_:)((uint64_t)v5, a1, (void *)a2);
  }

  return result;
}

uint64_t type metadata accessor for AnyIntentResolver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyIntentResolver);
}

uint64_t SKIntentResolver.run(skIntent:nlIntent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  void v5[4] = a3;
  v5[2] = a1;
  return OUTLINED_FUNCTION_33_0((uint64_t)SKIntentResolver.run(skIntent:nlIntent:));
}

uint64_t SKIntentResolver.run(skIntent:nlIntent:)()
{
  if (((*(uint64_t (**)(void, void, void))(*(void *)(v0 + 40) + 16LL))( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32)) & 1) == 0) {
    return (*(uint64_t (**)(id))(v0 + 8))(*(id *)(v0 + 16));
  }
  uint64_t v1 = *(int **)(*(void *)(v0 + 40) + 24LL);
  uint64_t v4 = (int *)((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc(v1[1]);
  *(void *)(v0 + 56) = v2;
  *uint64_t v2 = v0;
  v2[1] = SKIntentResolver.run(skIntent:nlIntent:);
  return ((uint64_t (*)(void, void, void, void))v4)( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  OUTLINED_FUNCTION_6_83();
  uint64_t v4 = OUTLINED_FUNCTION_14_1(*(void *)(v3 + 56));
  if (!v1) {
    uint64_t v4 = v0;
  }
  return OUTLINED_FUNCTION_116_1(v4, *(uint64_t (**)(void))(v2 + 8));
}

uint64_t AnyIntentResolver.shouldRunResolver(skIntent:nlIntent:)()
{
  return (*(uint64_t (**)(void))(v0 + 32))() & 1;
}

uint64_t AnyIntentResolver.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  a3[3] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  uint64_t v7 = *(void *)(a2 - 8);
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(boxed_opaque_existential_1, a1, a2);
  uint64_t v8 = OUTLINED_FUNCTION_0_21();
  a3[4] = implicit closure #1 in AnyIntentResolver.init<A>(_:)(v8, v9, v10, v11);
  a3[5] = v12;
  uint64_t v13 = OUTLINED_FUNCTION_0_21();
  __int128 v17 = implicit closure #3 in AnyIntentResolver.init<A>(_:)(v13, v14, v15, v16);
  uint64_t v19 = v18;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
  a3[6] = v17;
  a3[7] = v19;
  return result;
}

uint64_t AnyIntentResolver.description.getter()
{
  uint64_t v1 = v8;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v7, v8);
  uint64_t DynamicType = swift_getDynamicType(v2, v1, 1LL);
  __swift_destroy_boxed_opaque_existential_1(v7);
  uint64_t v6 = DynamicType;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  return String.init<A>(describing:)(&v6, v4);
}

uint64_t (*implicit closure #1 in AnyIntentResolver.init<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v7 + 16))(v9);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (v10 + 40) & ~v10;
  uint64_t v12 = (char *)swift_allocObject(&unk_40E798, v11 + v8, v10 | 7);
  *((void *)v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = a2;
  *((void *)v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 3) = a3;
  *((void *)v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], v9, a3);
  return partial apply for implicit closure #2 in implicit closure #1 in AnyIntentResolver.init<A>(_:);
}

void *implicit closure #3 in AnyIntentResolver.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v7 + 16))(v9);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (v10 + 40) & ~v10;
  uint64_t v12 = (char *)swift_allocObject(&unk_40E770, v11 + v8, v10 | 7);
  *((void *)v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = a2;
  *((void *)v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 3) = a3;
  *((void *)v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], v9, a3);
  return &async function pointer to partial apply for implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
}

uint64_t implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(int **)(a6 + 24);
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v11 + *v11);
  uint64_t v12 = (void *)swift_task_alloc(v11[1]);
  *(void *)(v6 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v12;
  *uint64_t v12 = v6;
  v12[1] = implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  return v14(a1, a2, a5, a6);
}

uint64_t implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:)(uint64_t a1)
{
  uint64_t v4 = OUTLINED_FUNCTION_14_1(*((void *)*v2 + 2));
  if (!v1) {
    uint64_t v4 = a1;
  }
  return OUTLINED_FUNCTION_116_1(v4, v2[1]);
}

uint64_t AnyIntentResolver.unbox<A>(as:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  outlined init with copy of Any(v3, (uint64_t)v8);
  int v6 = swift_dynamicCast(a2, v8, &type metadata for Any[1]);
  return __swift_storeEnumTagSinglePayload(a2, v6 ^ 1u, 1LL, a1);
}

uint64_t protocol witness for SKIntentResolver.resolve(skIntent:nlIntent:) in conformance AnyIntentResolver<A>( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_439C14);
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for SKIntentResolver.resolve(skIntent:nlIntent:) in conformance AnyIntentResolver<A>;
  return AnyIntentResolver.resolve(skIntent:nlIntent:)(a1, a2);
}

uint64_t destroy for AnyIntentResolver(void *a1)
{
  return swift_release(a1[7]);
}

uint64_t initializeWithCopy for AnyIntentResolver(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  __int128 v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  swift_retain(v6);
  swift_retain(v5);
  return a1;
}

void *assignWithCopy for AnyIntentResolver(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  uint64_t v5 = a1[5];
  a1[4] = a2[4];
  a1[5] = v4;
  swift_retain();
  swift_release(v5);
  uint64_t v7 = a2[6];
  uint64_t v6 = a2[7];
  uint64_t v8 = a1[7];
  a1[6] = v7;
  a1[7] = v6;
  swift_retain();
  swift_release(v8);
  return a1;
}

void *__swift_assign_boxed_opaque_existential_0(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        uint64_t result = (void *)swift_release(v11);
        *uint64_t v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

uint64_t assignWithTake for AnyIntentResolver(uint64_t a1, _OWORD *a2)
{
  __int128 v4 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v4;
  uint64_t v5 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a2[2];
  swift_release(v5);
  uint64_t v6 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a2[3];
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyIntentResolver(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 64))
    {
      LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(OUTLINED_FUNCTION_2_18(v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyIntentResolver(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 0u;
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:)( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  OUTLINED_FUNCTION_3_97();
  uint64_t v9 = (void *)swift_task_alloc(dword_439CCC);
  *(void *)(v3 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = partial apply for implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  return implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:)(a1, a2, (uint64_t)v2, v6, v7, v8);
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:)( uint64_t a1)
{
  return OUTLINED_FUNCTION_116_1(a1, v1[1]);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in AnyIntentResolver.init<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

  ;
}

void OUTLINED_FUNCTION_6_83()
{
  *(void *)(v1 - __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *v0;
}

double protocol witness for CustomCanvasModel.init(serializedData:) in conformance PhoneContactHeader@<D0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized CustomCanvasModel<>.init(serializedData:)(a1, a2, a3);
}

double specialized CustomCanvasModel<>.init(serializedData:)@<D0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for JSONDecoder(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t v8 = JSONDecoder.init()();
  unint64_t v9 = lazy protocol witness table accessor for type PhoneContactHeader and conformance PhoneContactHeader();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)( &type metadata for PhoneContactHeader,  a1,  a2,  &type metadata for PhoneContactHeader,  v9);
  outlined consume of Data._Representation(a1, a2);
  swift_release(v8);
  if (!v3)
  {
    double result = *(double *)&v11;
    *(_OWORD *)a3 = v11;
    *(_OWORD *)(a3 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v12;
    *(_OWORD *)(a3 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v13;
    *(void *)(a3 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v14;
    *(void *)(a3 + 56) = v15;
    *(_BYTE *)(a3 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v16;
  }

  return result;
}

uint64_t CustomCanvasModel<>.init(serializedData:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for JSONDecoder(0LL);
  OUTLINED_FUNCTION_15_2(v9);
  uint64_t v10 = JSONDecoder.init()();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(a3, a1, a2, a3, a5);
  outlined consume of Data._Representation(a1, a2);
  return swift_release(v10);
}

uint64_t specialized static CustomCanvasModel<>.name.getter()
{
  unint64_t v2 = &type metadata for PhoneContactHeader;
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneContactHeader.Type);
  return String.init<A>(describing:)(&v2, v0);
}

uint64_t static CustomCanvasModel<>.name.getter(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata(a1);
  return String.init<A>(describing:)(&v3, MetatypeMetadata);
}

uint64_t protocol witness for CATSerializable.serializedData() in conformance PhoneContactHeader()
{
  return specialized CustomCanvasModel<>.serializedData()();
}

uint64_t specialized CustomCanvasModel<>.serializedData()()
{
  uint64_t v1 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  uint64_t v2 = JSONEncoder.init()();
  unint64_t v3 = lazy protocol witness table accessor for type PhoneContactHeader and conformance PhoneContactHeader();
  uint64_t v4 = dispatch thunk of JSONEncoder.encode<A>(_:)(__dst, &type metadata for PhoneContactHeader, v3);
  swift_release(v2);
  return v4;
}

uint64_t CustomCanvasModel<>.serializedData()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = type metadata accessor for JSONEncoder(0LL);
  OUTLINED_FUNCTION_15_2(v8);
  uint64_t v9 = JSONEncoder.init()();
  uint64_t v10 = dispatch thunk of JSONEncoder.encode<A>(_:)(v5, a1, a4);
  swift_release(v9);
  return v10;
}

uint64_t static USOSerializedGraph.fromTaskBuilders(_:)(uint64_t a1)
{
  uint64_t v4 = v3 - v2;
  UsoBuilderOptions.init(longhandDefinedValues:)(1LL);
  uint64_t v5 = type metadata accessor for UsoBuilderOptions(0LL);
  __swift_storeEnumTagSinglePayload(v4, 0LL, 1LL, v5);
  uint64_t v6 = static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)(a1, v4);
  outlined destroy of UsoBuilderOptions?(v4);
  uint64_t v7 = static USOSerializedGraph.fromGraph(_:)();
  swift_release(v6);
  return v7;
}

uint64_t static USOSerializedGraph.fromGraph(_:)()
{
  uint64_t v0 = type metadata accessor for Siri_Nl_Core_Protocol_UsoGraph(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v4 = v3 - v2;
  Graph.protobufGraphSiriNl(vocabManager:)(0LL);
  uint64_t v5 = static USOSerializedGraph.fromProto(protoGraph:)(v4);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  return v5;
}

void PhonePersonWithAliasesList.Builder.build()()
{
  uint64_t v0 = type metadata accessor for PhonePersonWithAliasesList();
  OUTLINED_FUNCTION_8_2(v0, 32LL);
  uint64_t v1 = swift_retain();
  PhonePersonList.init(builder:)(v1);
  OUTLINED_FUNCTION_2();
}

void PhonePersonWithAliasesList.__allocating_init(builder:)(uint64_t a1)
{
}

uint64_t type metadata accessor for PhonePersonWithAliasesList()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin26PhonePersonWithAliasesList);
}

unint64_t static PhonePersonWithAliasesList.catTypeName.getter()
{
  return 0xD00000000000001BLL;
}

double PhonePersonWithAliasesList.getProperty(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4 = a1 == 0x68744F664F6D756ELL && a2 == 0xEB00000000737265LL;
  if (v4 || (OUTLINED_FUNCTION_1_3(0x68744F664F6D756ELL, 0xEB00000000737265LL) & 1) != 0)
  {
    PhonePersonWithAliasesListProperties<>.numOfOthers.getter();
    if ((v9 & 1) != 0)
    {
      double result = 0.0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = 0u;
    }

    else
    {
      *(void *)(a3 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = &type metadata for Double;
      *(void *)a3 = v7;
    }
  }

  else if (a1 == 0xD000000000000011LL && a2 == 0x800000000034E870LL {
         || (OUTLINED_FUNCTION_1_3(0xD000000000000011LL, 0x800000000034E870LL) & 1) != 0)
  }
  {
    char v10 = specialized PhonePersonWithAliasesListProperties<>.allSameFamilyName.getter();
    *(void *)(a3 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = &type metadata for Bool;
    *(_BYTE *)a3 = v10 & 1;
  }

  else
  {
    return PhonePersonList.getProperty(_:)(a1, a2, a3);
  }

  return result;
}

void PhonePersonWithAliasesListProperties<>.numOfOthers.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v3 = *(void *)(v0 + 24);
    }
    else {
      uint64_t v3 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v3);
    swift_bridgeObjectRelease(v1);
  }

  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL));
  }

  if (__OFSUB__(v2, 2LL)) {
    __break(1u);
  }
}

uint64_t specialized PhonePersonWithAliasesListProperties<>.allSameFamilyName.getter()
{
  uint64_t v1 = swift_bridgeObjectRetain();
  char v2 = specialized Sequence.allSatisfy(_:)(v1, v0);
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t PhonePersonWithAliasesList.__allocating_init(from:)(void *a1)
{
  return PhonePersonWithAliasesList.init(from:)(a1);
}

uint64_t PhonePersonWithAliasesList.init(from:)(void *a1)
{
  uint64_t v2 = PhonePersonList.init(from:)(v4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v2;
}

uint64_t PhonePersonWithAliasesList.__deallocating_deinit()
{
  uint64_t v0 = EligibleAppFinder.deinit();
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for PhonePersonWithAliasesList.Builder()
{
  return objc_opt_self(&OBJC_CLASS____TtCC27PhoneCallFlowDelegatePlugin26PhonePersonWithAliasesList7Builder);
}

uint64_t specialized closure #1 in PhonePersonWithAliasesListProperties<>.allSameFamilyName.getter( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for SpeakableString(0LL);
  uint64_t v28 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SpeakableString?, SpeakableString?));
  __chkstk_darwin();
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin();
  char v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  __int128 v12 = (char *)&v27 - v11;
  uint64_t v13 = __chkstk_darwin();
  uint64_t v15 = (char *)&v27 - v14;
  DialogPerson.familyName.getter(v13);
  uint64_t v16 = *(void *)(a2 + 24);
  if ((unint64_t)v16 >> 62)
  {
    if (v16 < 0) {
      uint64_t v26 = v16;
    }
    else {
      uint64_t v26 = v16 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v17 = *(void *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v17 < 1)
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 1LL, 1LL, v3);
  }

  else
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (v16 & 0xC000000000000001LL) == 0, v16);
    if ((v16 & 0xC000000000000001LL) != 0)
    {
      uint64_t v19 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v16);
      uint64_t v18 = v19;
    }

    else
    {
      uint64_t v18 = *(void *)(v16 + 32);
      uint64_t v19 = swift_retain();
    }

    DialogPerson.familyName.getter(v19);
    swift_release(v18);
  }

  uint64_t v20 = (uint64_t)&v8[*(int *)(v6 + 48)];
  outlined init with copy of SpeakableString?((uint64_t)v15, (uint64_t)v8);
  outlined init with copy of SpeakableString?((uint64_t)v12, v20);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1LL, v3) == 1)
  {
    uint64_t v21 = &demangling cache variable for type metadata for SpeakableString?;
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v12,  &demangling cache variable for type metadata for SpeakableString?);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v15,  &demangling cache variable for type metadata for SpeakableString?);
    if (__swift_getEnumTagSinglePayload(v20, 1LL, v3) == 1)
    {
      char v22 = -1;
    }

    else
    {
      uint64_t v21 = &demangling cache variable for type metadata for (SpeakableString?, SpeakableString?);
      char v22 = 0;
    }
  }

  else
  {
    outlined init with copy of SpeakableString?((uint64_t)v8, (uint64_t)v10);
    if (__swift_getEnumTagSinglePayload(v20, 1LL, v3) == 1)
    {
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v12,  &demangling cache variable for type metadata for SpeakableString?);
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v15,  &demangling cache variable for type metadata for SpeakableString?);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v3);
      char v22 = 0;
      uint64_t v21 = &demangling cache variable for type metadata for (SpeakableString?, SpeakableString?);
    }

    else
    {
      uint64_t v23 = v28;
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v5, v20, v3);
      lazy protocol witness table accessor for type SpeakableString and conformance SpeakableString();
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v5, v3);
      uint64_t v24 = *(void (**)(char *, uint64_t))(v23 + 8);
      v24(v5, v3);
      uint64_t v21 = &demangling cache variable for type metadata for SpeakableString?;
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v12,  &demangling cache variable for type metadata for SpeakableString?);
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v15,  &demangling cache variable for type metadata for SpeakableString?);
      v24(v10, v3);
    }
  }

  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v8,  v21);
  return v22 & 1;
}

uint64_t static ThirdPartyCallKitLaunchAppBuilder.makeLaunchApp(intent:intentResponse:)(void *a1, void *a2)
{
  return v4;
}

uint64_t closure #1 in static ThirdPartyCallKitLaunchAppBuilder.makeLaunchApp(intent:intentResponse:)@<X0>( void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = (uint64_t)static ThirdPartyCallKitLaunchAppBuilder.makeLaunchApp(intent:intentResponse:)(a1, a2);
  if (v4)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_8_55();
    uint64_t v9 = OUTLINED_FUNCTION_8_55();
    char v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      __int128 v12 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v13 = (void *)OUTLINED_FUNCTION_7_0(8LL);
      *(_DWORD *)__int128 v12 = 138412290;
      OUTLINED_FUNCTION_8_55();
      uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(v4);
      uint64_t v23 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v12 + 4);
      *uint64_t v13 = v14;
      OUTLINED_FUNCTION_7_68();
      OUTLINED_FUNCTION_7_68();
      _os_log_impl( &dword_0,  v10,  v11,  "#ThirdPartyCallKitLaunchAppBuilder Error building LaunchApp for 3P redial/callback: %@",  v12,  0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v13, 1LL);
      OUTLINED_FUNCTION_0_2((uint64_t)v13);
      OUTLINED_FUNCTION_0_2((uint64_t)v12);
    }

    else
    {
      OUTLINED_FUNCTION_7_68();
      OUTLINED_FUNCTION_7_68();
    }

    uint64_t result = swift_willThrow(v15, v16, v17, v18, v19, v20, v21, v22);
    *a3 = v4;
  }

  else
  {
    *a4 = result;
  }

  return result;
}

void *static ThirdPartyCallKitLaunchAppBuilder.makeLaunchApp(intent:intentResponse:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for PhoneError(0LL);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2)
  {
    id v7 = [a2 userActivity];
    if (v7 && (uint64_t v8 = v7, v9 = [v7 interaction], v8, v9))
    {
      id v10 = [v9 intent];
    }

    else
    {
      id v10 = 0LL;
    }

    id v11 = [a2 userActivity];
    id v12 = [v11 interaction];

    id v13 = [v12 intentResponse];
    INStartCallIntentResponse.thirdPartyCallKitCallBackBundleId.getter();
    uint64_t v15 = v14;
    unint64_t v17 = v16;
  }

  else
  {
    uint64_t v15 = 0LL;
    unint64_t v17 = 0LL;
    id v13 = 0LL;
    id v10 = 0LL;
  }

  swift_bridgeObjectRetain();
  char v18 = specialized Optional<A>.isNilOrEmpty.getter(v15, v17);
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
    swift_storeEnumTagMultiPayload(v6, v4, 12LL);
    unint64_t v19 = lazy protocol witness table accessor for type PhoneError and conformance PhoneError();
    swift_allocError(v4, v19, 0LL, 0LL);
    PhoneError.logged()(v20);
    uint64_t v21 = outlined destroy of PhoneError((uint64_t)v6);
    swift_willThrow(v21, v22, v23, v24, v25, v26, v27, v28);
    swift_bridgeObjectRelease();
  }

  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    uint64_t v30 = __swift_project_value_buffer(v29, (uint64_t)static Logger.siriPhone);
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v33 = static os_log_type_t.debug.getter(v31, v32);
    if (os_log_type_enabled(v31, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl(&dword_0, v31, v33, "userActivity launchId is valid for ThirdPartyCallKitCallBack request", v34, 2u);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    type metadata accessor for App(0LL);
    uint64_t v35 = App.__allocating_init(appIdentifier:)(v15, v17);
    if (v10)
    {
      uint64_t v36 = v10;
      id v37 = v10;
    }

    else
    {
      id v37 = a1;
      uint64_t v36 = 0LL;
    }

    type metadata accessor for SAIntentGroupLaunchAppWithIntent();
    id v38 = v36;
    a1 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)(v35, v37, v13);

    id v39 = v38;
    swift_retain_n(v35, 2LL);
    id v40 = v39;
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v57 = a1;
      id v58 = v13;
      uint64_t v43 = swift_slowAlloc(22LL, -1LL);
      uint64_t v44 = swift_slowAlloc(64LL, -1LL);
      uint64_t v61 = v44;
      *(_DWORD *)uint64_t v43 = 136315394;
      uint64_t v56 = v44;
      if (v10)
      {
        id v45 = [v40 typeName];
        uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
        id v10 = v47;
      }

      else
      {
        uint64_t v46 = 0LL;
      }

      uint64_t v59 = v46;
      id v60 = v10;
      uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      uint64_t v49 = String.init<A>(describing:)(&v59, v48);
      uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v43 + 4);

      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
      uint64_t v59 = App.appIdentifier.getter();
      id v60 = v51;
      uint64_t v52 = String.init<A>(describing:)(&v59, v48);
      uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v43 + 14);
      swift_release_n(v35, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( &dword_0,  v41,  v42,  "#StartCallRCHFlowDelegate ThirdPartyCallKitCallBack LaunchApp intentType: %s, appId: %s",  (uint8_t *)v43,  0x16u);
      uint64_t v54 = v56;
      swift_arrayDestroy(v56, 2LL);
      swift_slowDealloc(v54, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);

      swift_release(v35);
      return v57;
    }

    else
    {

      swift_release_n(v35, 3LL);
    }
  }

  return a1;
}

void static ThirdPartyCallKitLaunchAppBuilder.validateLaunchId(userActivityLaunchId:)( uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for PhoneError(0LL);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_bridgeObjectRetain();
  LOBYTE(a1) = specialized Optional<A>.isNilOrEmpty.getter(a1, a2);
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    swift_storeEnumTagMultiPayload(v6, v4, 12LL);
    unint64_t v7 = lazy protocol witness table accessor for type PhoneError and conformance PhoneError();
    swift_allocError(v4, v7, 0LL, 0LL);
    PhoneError.logged()(v8);
    uint64_t v9 = outlined destroy of PhoneError((uint64_t)v6);
    swift_willThrow(v9, v10, v11, v12, v13, v14, v15, v16);
  }

  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.siriPhone);
    unint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v21 = static os_log_type_t.debug.getter(v19, v20);
    if (os_log_type_enabled(v19, v21))
    {
      uint64_t v22 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_0, v19, v21, "userActivity launchId is valid for ThirdPartyCallKitCallBack request", v22, 2u);
      OUTLINED_FUNCTION_0_2((uint64_t)v22);
    }
  }

ValueMetadata *type metadata accessor for ThirdPartyCallKitLaunchAppBuilder()
{
  return &type metadata for ThirdPartyCallKitLaunchAppBuilder;
}

uint64_t static CallEmergencyResourceDirectInvocation.invocation(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject(v4, &v8);
  *(_OWORD *)(inited + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D870;
  *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xD00000000000001FLL;
  *(void *)(inited + 40) = 0x800000000034E960LL;
  *(void *)(inited + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = &type metadata for String;
  *(void *)(inited + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a1;
  *(void *)(inited + 56) = a2;
  swift_bridgeObjectRetain();
  uint64_t v6 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  &type metadata for Any[1],  &protocol witness table for String);
  return Parse.DirectInvocation.init(identifier:userData:)(0xD00000000000003FLL, 0x800000000034E920LL, v6);
}

void *CallEmergencyResourceDirectInvocation.identifier.unsafeMutableAddressor()
{
  return &static CallEmergencyResourceDirectInvocation.identifier;
}

unint64_t static CallEmergencyResourceDirectInvocation.identifier.getter()
{
  return 0xD00000000000003FLL;
}

void *CallEmergencyResourceDirectInvocation.payloadKey.unsafeMutableAddressor()
{
  return &static CallEmergencyResourceDirectInvocation.payloadKey;
}

unint64_t static CallEmergencyResourceDirectInvocation.payloadKey.getter()
{
  return 0xD00000000000001FLL;
}

ValueMetadata *type metadata accessor for CallEmergencyResourceDirectInvocation()
{
  return &type metadata for CallEmergencyResourceDirectInvocation;
}

uint64_t ActionableCallControlFlow.init(state:sharedGlobals:action:phoneCallControlCATsSimple:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(_BYTE *)(v4 + 56) = a3;
  *(void *)(v4 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a4;
  outlined init with take of ActionableCallControlFlow.State(a1, v4 + 72);
  return v4;
}

void *ActionableCallControlFlow.deinit()
{
  return v0;
}

void *outlined destroy of ActionableCallControlFlow.State(void *a1)
{
  return a1;
}

void ActionableCallControlFlow.state.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 72;
  swift_beginAccess(v3, v4, 0LL, 0LL);
  outlined init with copy of ActionableCallControlFlow.State(v3, a1);
  OUTLINED_FUNCTION_16_7();
}

uint64_t outlined init with copy of ActionableCallControlFlow.State(uint64_t a1, uint64_t a2)
{
  return a2;
}

void ActionableCallControlFlow.state.setter(uint64_t a1)
{
  uint64_t v3 = v1 + 72;
  OUTLINED_FUNCTION_5_9(v3, (uint64_t)v4);
  outlined assign with take of ActionableCallControlFlow.State(a1, v3);
  swift_endAccess(v4);
  OUTLINED_FUNCTION_16_7();
}

uint64_t (*ActionableCallControlFlow.state.modify(uint64_t a1))()
{
  return static SingleResultVoicemailModel.resultViewID.modify;
}

uint64_t ActionableCallControlFlow.__allocating_init(sharedGlobals:action:phoneCallControlCATsSimple:)( void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = 0LL;
  memset(v10, 0, sizeof(v10));
  _s27PhoneCallFlowDelegatePlugin22SharedGlobalsProviding_pWOcTm_0();
  uint64_t v7 = (*(uint64_t (**)(_OWORD *, _BYTE *, uint64_t, uint64_t))(v3 + 144))(v10, v9, a2, a3);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v7;
}

void static ActionableCallControlFlow.ActionableCallControlFlowError.unsupportedHoldAction(_:)( char a1@<W0>, uint64_t a2@<X8>)
{
}

void static ActionableCallControlFlow.ActionableCallControlFlowError.unsupportedSwitchToFaceTimeAction(_:)( char a1@<W0>, uint64_t a2@<X8>)
{
}

void static ActionableCallControlFlow.ActionableCallControlFlowError.unsupportedHoldAction(_:)( char a1@<W0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a2;
  *(void *)(a4 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a3();
  *(_BYTE *)a4 = a1;
  *(_BYTE *)(a4 + 40) = 1;
  OUTLINED_FUNCTION_2();
}

uint64_t UnsupportedAction.toSpeakableString.getter(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_62();
}

uint64_t UnsupportedAction.typeName.getter(uint64_t a1)
{
  uint64_t DynamicType = swift_getDynamicType(v1, a1, 0LL);
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata(a1);
  return String.init<A>(describing:)(&DynamicType, MetatypeMetadata);
}

uint64_t UnsupportedAction.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = UnsupportedAction.typeName.getter(a1);
  v4._uint64_t countAndFlagsBits = 46LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  dispatch thunk of RawRepresentable.rawValue.getter(a1, *(void *)(a2 + 24));
  String.append(_:)(v6);
  OUTLINED_FUNCTION_39();
  return v7;
}

void ActionableCallControlFlow.ActionableCallControlFlowError.description.getter()
{
  __asm { BR              X10 }

uint64_t sub_20C070()
{
  v1._uint64_t countAndFlagsBits = PhoneCallControlAction.description.getter(v3);
  String.append(_:)(v1);
  OUTLINED_FUNCTION_39();
  return v0 + 16;
}

uint64_t outlined init with copy of ActionableCallControlFlow.ActionableCallControlFlowError( uint64_t a1, uint64_t a2)
{
  return a2;
}

void static ActionableCallControlFlow.ActionableCallControlFlowError.unsupportedAction(_:)(uint64_t a1@<X8>)
{
  *(void *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = &type metadata for ActionableCallControlFlow.UnsupportedActionReason;
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedActionReason and conformance ActionableCallControlFlow.UnsupportedActionReason();
  *(_BYTE *)(a1 + 40) = 1;
  OUTLINED_FUNCTION_2();
}

void static ActionableCallControlFlow.ActionableCallControlFlowError.unsupportedSpeakerPhoneAction(_:)( uint64_t a1@<X8>)
{
  *(void *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = &type metadata for ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason;
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason and conformance ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason();
  *(_BYTE *)(a1 + 40) = 1;
  OUTLINED_FUNCTION_2();
}

void ActionableCallControlFlow.UnsupportedActionReason.init(rawValue:)()
{
}

{
  void *v0;
  Swift::OpaquePointer v1;
  uint64_t v2;
  OUTLINED_FUNCTION_11_3();
  v1._rawValue = v0;
  OUTLINED_FUNCTION_33_3(v1, v2);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_2();
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance ActionableCallControlFlow.UnsupportedActionReason( BOOL *a1@<X8>)
{
  *a1 = v2 != 0;
}

void ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason.init(rawValue:)()
{
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason( BOOL *a1@<X8>)
{
  *a1 = v2 != 0;
}

PhoneCallFlowDelegatePlugin::ActionableCallControlFlow::UnsupportedHoldActionReason_optional __swiftcall ActionableCallControlFlow.UnsupportedHoldActionReason.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of ActionableCallControlFlow.UnsupportedHoldActionReason.init(rawValue:);
  OUTLINED_FUNCTION_33_3(v1, v2);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_2();
  return result;
}

uint64_t ActionableCallControlFlow.UnsupportedHoldActionReason.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x726F707075736E75LL;
  }
  if (a1 == 1) {
    return 0xD000000000000017LL;
  }
  return 0xD000000000000016LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ActionableCallControlFlow.UnsupportedHoldActionReason( char *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance ActionableCallControlFlow.UnsupportedHoldActionReason()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ActionableCallControlFlow.UnsupportedHoldActionReason( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ActionableCallControlFlow.UnsupportedHoldActionReason( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::ActionableCallControlFlow::UnsupportedHoldActionReason_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ActionableCallControlFlow.UnsupportedHoldActionReason@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::ActionableCallControlFlow::UnsupportedHoldActionReason_optional *a2@<X8>)
{
  result.value = ActionableCallControlFlow.UnsupportedHoldActionReason.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ActionableCallControlFlow.UnsupportedHoldActionReason( uint64_t *a1@<X8>)
{
  *a1 = ActionableCallControlFlow.UnsupportedHoldActionReason.rawValue.getter(*v1);
  a1[1] = v3;
  OUTLINED_FUNCTION_2();
}

uint64_t protocol witness for UnsupportedAction.toSpeakableString.getter in conformance ActionableCallControlFlow.UnsupportedHoldActionReason()
{
  return specialized UnsupportedAction.toSpeakableString.getter(*v0);
}

void protocol witness for CustomStringConvertible.description.getter in conformance ActionableCallControlFlow.UnsupportedHoldActionReason()
{
}

PhoneCallFlowDelegatePlugin::ActionableCallControlFlow::UnsupportedSwitchToFaceTimeReason_optional __swiftcall ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason.init(rawValue:);
  OUTLINED_FUNCTION_33_3(v1, v2);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_2();
  return result;
}

uint64_t ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_20C4B4 + 4 * byte_337874[a1]))( 0xD00000000000001ALL,  0x8000000000341E10LL);
}

uint64_t sub_20C4B4()
{
  return v0 - 2;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::ActionableCallControlFlow::UnsupportedSwitchToFaceTimeReason_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::ActionableCallControlFlow::UnsupportedSwitchToFaceTimeReason_optional *a2@<X8>)
{
  result.value = ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason( uint64_t *a1@<X8>)
{
  *a1 = ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason.rawValue.getter(*v1);
  a1[1] = v3;
  OUTLINED_FUNCTION_2();
}

uint64_t protocol witness for UnsupportedAction.toSpeakableString.getter in conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason()
{
  return specialized UnsupportedAction.toSpeakableString.getter(*v0);
}

void protocol witness for CustomStringConvertible.description.getter in conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason()
{
}

unint64_t ActionableCallControlFlow.State.description.getter()
{
  unint64_t v1 = 0x6C616974696E692ELL;
  switch(v11)
  {
    case 0LL:
      return v1;
    case 1LL:
      unint64_t v1 = 0x6D726F667265702ELL;
      break;
    case 2LL:
      unint64_t v1 = 0xD00000000000001BLL;
      break;
    case 3LL:
      unint64_t v1 = 0x7373696D7369642ELL;
      break;
    default:
      outlined init with take of ActionableCallControlFlow.State((uint64_t)v10, (uint64_t)v7);
      _StringGuts.grow(_:)(36LL);
      v2._uint64_t countAndFlagsBits = 0xD000000000000021LL;
      v2._object = (void *)0x800000000034EA30LL;
      String.append(_:)(v2);
      uint64_t v3 = v8;
      uint64_t v4 = v9;
      uint64_t v5 = __swift_project_boxed_opaque_existential_1(v7, v8);
      DefaultStringInterpolation.appendInterpolation<A>(_:)(v5, v3, *(void *)(v4 + 8));
      OUTLINED_FUNCTION_33_24();
      unint64_t v1 = 0LL;
      __swift_destroy_boxed_opaque_existential_1(v7);
      break;
  }

  return v1;
}

uint64_t static ActionableCallControlFlow.State.== infix(_:_:)()
{
  unint64_t v0 = ActionableCallControlFlow.State.description.getter();
  uint64_t v2 = v1;
  unint64_t v3 = ActionableCallControlFlow.State.description.getter();
  if (v0 == v3 && v2 == v4) {
    char v6 = 1;
  }
  else {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v0, v2, v3, v4, 0LL);
  }
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_62();
  return v6 & 1;
}

uint64_t ActionableCallControlFlow.sharedGlobals.getter()
{
  return _s27PhoneCallFlowDelegatePlugin22SharedGlobalsProviding_pWOcTm_0();
}

uint64_t key path setter for ActionableCallControlFlow.state : ActionableCallControlFlow( uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_BYTE *))(**(void **)a2 + 120LL))(v4);
}

uint64_t ActionableCallControlFlow.__allocating_init(state:sharedGlobals:action:phoneCallControlCATsSimple:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v9 = OUTLINED_FUNCTION_8_2(v4, 112LL);
  ActionableCallControlFlow.init(state:sharedGlobals:action:phoneCallControlCATsSimple:)(a1, a2, a3, a4);
  return v9;
}

void ActionableCallControlFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActionableCallControlFlow();
  uint64_t v6 = lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy( &lazy protocol witness table cache variable for type ActionableCallControlFlow and conformance ActionableCallControlFlow,  v5,  (uint64_t (*)(uint64_t))type metadata accessor for ActionableCallControlFlow,  (uint64_t)&protocol conformance descriptor for ActionableCallControlFlow);
  Flow.deferToExecuteAsync(_:)(a1, a2, v4, v6);
  OUTLINED_FUNCTION_16_7();
}

uint64_t ActionableCallControlFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 26__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a1;
  *(void *)(v2 + 27__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v1;
  OUTLINED_FUNCTION_19_1();
  return swift_task_switch(v3, v4, v5);
}

uint64_t ActionableCallControlFlow.execute()()
{
  v236 = (void *)(v0 + 16);
  uint64_t v1 = v0 + 104;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v2 = (void *)(v0 + 64);
  v234 = (void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v4, (uint64_t)static Logger.siriPhone);
  swift_retain_n(v3, 6LL);
  uint64_t v5 = (os_log_s *)OUTLINED_FUNCTION_88_11();
  os_log_type_t v7 = static os_log_type_t.debug.getter(v5, v6);
  BOOL v8 = os_log_type_enabled(v5, v7);
  uint64_t v9 = *(unsigned __int8 **)(v0 + 272);
  if (v8)
  {
    uint64_t v10 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v233 = OUTLINED_FUNCTION_7_0(96LL);
    v239[0] = v233;
    *(_DWORD *)uint64_t v10 = 136315650;
    *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = *(void *)v9;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionableCallControlFlow.Type);
    uint64_t v12 = String.init<A>(describing:)(v236, v11);
    uint64_t v20 = OUTLINED_FUNCTION_13_8(v12, v13, v14, v15, v16, v17, v18, v19, v228);
    *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v20;
    OUTLINED_FUNCTION_52_20(v20, v21, v22, v10 + 12);
    OUTLINED_FUNCTION_34_0();
    OUTLINED_FUNCTION_31_1((uint64_t)v9);
    *(_WORD *)(v10 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    uint64_t v23 = PhoneCallControlAction.description.getter(v9[56]);
    uint64_t v31 = OUTLINED_FUNCTION_13_8(v23, v24, v25, v26, v27, v28, v29, v30, v229);
    *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v31;
    OUTLINED_FUNCTION_52_20(v31, v32, v33, v10 + 22);
    OUTLINED_FUNCTION_34_0();
    uint64_t v34 = OUTLINED_FUNCTION_31_1((uint64_t)v9);
    *(_WORD *)(v10 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    (*(void (**)(uint64_t))(*(void *)v9 + 112LL))(v34);
    unint64_t v35 = ActionableCallControlFlow.State.description.getter();
    unint64_t v37 = v36;
    outlined destroy of ActionableCallControlFlow.State(v236);
    *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, v239);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v236, v0 + 24, v10 + 24);
    uint64_t v1 = v0 + 104;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_31_1((uint64_t)v9);
    _os_log_impl(&dword_0, v5, v7, "#%s executing for action=%s in state=%s", (uint8_t *)v10, 0x20u);
    OUTLINED_FUNCTION_74_14();
    OUTLINED_FUNCTION_0_2(v233);
    uint64_t v38 = v10;
    uint64_t v2 = (void *)(v0 + 64);
    OUTLINED_FUNCTION_0_2(v38);
  }

  else
  {
    swift_release_n(*(void *)(v0 + 272), 6LL);
  }

  id v39 = (uint64_t *)(v0 + 184);
  (*(void (**)(void))(**(void **)(v0 + 272) + 112LL))();
  uint64_t v40 = v0 + 16;
  switch(*(void *)(v0 + 128))
  {
    case 0LL:
      OUTLINED_FUNCTION_22_40();
      uint64_t v41 = OUTLINED_FUNCTION_26_44();
      swift_unknownObjectRelease(v41);
      OUTLINED_FUNCTION_162_1();
      os_log_type_t v42 = (os_log_s *)OUTLINED_FUNCTION_88_11();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      BOOL v44 = os_log_type_enabled(v42, v43);
      if (v41)
      {
        if (v44)
        {
          id v45 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
          *(_WORD *)id v45 = 0;
          OUTLINED_FUNCTION_0_2((uint64_t)v45);
        }

        OUTLINED_FUNCTION_49_24();
        __int128 v240 = xmmword_31D8A0;
      }

      else
      {
        if (v44)
        {
          uint64_t v97 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
          *(_WORD *)uint64_t v97 = 0;
          OUTLINED_FUNCTION_0_2((uint64_t)v97);
        }

        *(void *)&__int128 v240 = &type metadata for ActionableCallControlFlow.UnsupportedActionReason;
        unint64_t v46 = lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedActionReason and conformance ActionableCallControlFlow.UnsupportedActionReason();
        *((void *)&v240 + 1) = v46;
      }

      OUTLINED_FUNCTION_19_50(v46, v47, v48, v49, v50, v51, v52);
      goto LABEL_46;
    case 1LL:
      OUTLINED_FUNCTION_22_40();
      uint64_t v62 = OUTLINED_FUNCTION_26_44();
      uint64_t v64 = *(void *)(v0 + 272);
      v235 = v2;
      if (v62)
      {
        uint64_t v65 = v62;
        uint64_t v66 = v63;
        OUTLINED_FUNCTION_162_1();
        uint64_t v67 = (*(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v64 + 152LL))( v239,  v65,  v66);
        OUTLINED_FUNCTION_19_50((uint64_t)v67, v116, v117, v118, v119, v120, v121);
        static ExecuteResponse.ongoing(requireInput:)(0LL);
        swift_unknownObjectRelease(v65);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }

      OUTLINED_FUNCTION_162_1();
      OUTLINED_FUNCTION_11_18(v64);
      uint64_t v98 = (void *)OUTLINED_FUNCTION_88_11();
      os_log_type_t v100 = static os_log_type_t.debug.getter(v98, v99);
      BOOL v101 = OUTLINED_FUNCTION_93(v100);
      uint64_t v102 = *(void **)(v0 + 272);
      if (v101)
      {
        uint64_t v103 = (_DWORD *)OUTLINED_FUNCTION_7_0(12LL);
        uint64_t v104 = OUTLINED_FUNCTION_7_0(32LL);
        v239[0] = v104;
        _DWORD *v103 = 136315138;
        *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = *v102;
        uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionableCallControlFlow.Type);
        uint64_t v106 = OUTLINED_FUNCTION_19(v105);
        *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = OUTLINED_FUNCTION_13_8(v106, v107, v108, v109, v110, v111, v112, v113, v228);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v236, v0 + 24, v103 + 1);
        uint64_t v40 = v0 + 16;
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_31_1((uint64_t)v102);
        OUTLINED_FUNCTION_34_16(&dword_0, v114, v115, "#ActionableCallControl executing %s found no active call.");
        OUTLINED_FUNCTION_17_0(v104);
        OUTLINED_FUNCTION_0_2(v104);
        OUTLINED_FUNCTION_0_2((uint64_t)v103);
      }

      else
      {
        OUTLINED_FUNCTION_31_1(*(void *)(v0 + 272));
      }

      unint64_t v122 = lazy protocol witness table accessor for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError();
      uint64_t v123 = OUTLINED_FUNCTION_4_4( (uint64_t)&type metadata for ActionableCallControlFlow.ActionableCallControlFlowError,  v122);
      uint64_t v125 = v124;
      *(void *)(v124 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = &type metadata for ActionableCallControlFlow.UnsupportedActionReason;
      unint64_t v126 = lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedActionReason and conformance ActionableCallControlFlow.UnsupportedActionReason();
      *(void *)(v125 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v126;
      *(_BYTE *)(v125 + 40) = 1;
      swift_willThrow(v126, v127, v128, v129, v130, v131, v132, v133);
      *id v39 = v123;
      OUTLINED_FUNCTION_61_17();
      uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      if (!*(_BYTE *)(v0 + 56))
      {
        uint64_t v175 = *(void *)(v0 + 272);
        OUTLINED_FUNCTION_38_27();
        unsigned __int8 v176 = *(_BYTE *)(v0 + 16);
        OUTLINED_FUNCTION_11_18(v175);
        uint64_t v177 = (os_log_s *)OUTLINED_FUNCTION_88_11();
        os_log_type_t v178 = static os_log_type_t.error.getter();
        BOOL v179 = os_log_type_enabled(v177, v178);
        uint64_t v180 = *(void **)(v0 + 272);
        if (v179)
        {
          uint64_t v181 = OUTLINED_FUNCTION_7_0(22LL);
          uint64_t v238 = OUTLINED_FUNCTION_7_0(64LL);
          v239[0] = v238;
          *(_DWORD *)uint64_t v181 = 136315394;
          *(void *)(v0 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = *v180;
          uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionableCallControlFlow.Type);
          uint64_t v183 = String.init<A>(describing:)(v235, v182);
          *(void *)(v0 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = OUTLINED_FUNCTION_13_8(v183, v184, v185, v186, v187, v188, v189, v190, v228);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v235, v0 + 72, v181 + 4);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_31_1((uint64_t)v180);
          *(_WORD *)(v181 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
          uint64_t v191 = PhoneCallControlAction.description.getter(v176);
          *(void *)(v0 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = OUTLINED_FUNCTION_13_8(v191, v192, v193, v194, v195, v196, v197, v198, v232);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v235, v0 + 72, v181 + 14);
          swift_bridgeObjectRelease();
          _os_log_impl( &dword_0,  v177,  v178,  "#ActionableCallControlFlow of type %s called with unsupported action %s",  (uint8_t *)v181,  0x16u);
          swift_arrayDestroy(v238, 2LL);
          OUTLINED_FUNCTION_0_2(v238);
          OUTLINED_FUNCTION_0_2(v181);
        }

        else
        {
          OUTLINED_FUNCTION_31_1(*(void *)(v0 + 272));
        }

        OUTLINED_FUNCTION_49_24();
        __int128 v240 = xmmword_327AF0;
        OUTLINED_FUNCTION_19_50(v220, v221, v222, v223, v224, v225, v226);
        goto LABEL_44;
      }

      if (*(_BYTE *)(v0 + 56) == 1)
      {
        uint64_t v135 = *(void *)(v0 + 272);
        OUTLINED_FUNCTION_38_27();
        outlined init with take of ActionableCallControlFlow.State(v40, (uint64_t)v234);
        uint64_t v136 = v235;
        OUTLINED_FUNCTION_60_20();
        swift_retain_n(v135, 4LL);
        uint64_t v137 = (os_log_s *)OUTLINED_FUNCTION_88_11();
        os_log_type_t v138 = static os_log_type_t.error.getter();
        BOOL v139 = os_log_type_enabled(v137, v138);
        uint64_t v140 = *(void *)(v0 + 272);
        if (v139)
        {
          uint64_t v141 = OUTLINED_FUNCTION_7_0(32LL);
          uint64_t v237 = OUTLINED_FUNCTION_7_0(96LL);
          v239[0] = v237;
          *(_DWORD *)uint64_t v141 = 136315650;
          *(void *)(v0 + 256) = *(void *)v140;
          uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionableCallControlFlow.Type);
          uint64_t v143 = String.init<A>(describing:)(v0 + 256, v142);
          uint64_t v151 = OUTLINED_FUNCTION_13_8(v143, v144, v145, v146, v147, v148, v149, v150, v228);
          *(void *)(v0 + 256) = v151;
          OUTLINED_FUNCTION_55_20(v151, v152, v153, v141 + 12);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_31_1(v140);
          *(_WORD *)(v141 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
          uint64_t v154 = PhoneCallControlAction.description.getter(*(_BYTE *)(v140 + 56));
          uint64_t v162 = OUTLINED_FUNCTION_13_8(v154, v155, v156, v157, v158, v159, v160, v161, v230);
          *(void *)(v0 + 256) = v162;
          OUTLINED_FUNCTION_55_20(v162, v163, v164, v141 + 22);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_31_1(v140);
          *(_WORD *)(v141 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
          uint64_t v166 = *(void *)(v0 + 88);
          uint64_t v165 = *(void *)(v0 + 96);
          __swift_project_boxed_opaque_existential_1(v235, v166);
          uint64_t v167 = dispatch thunk of CustomStringConvertible.description.getter(v166, *(void *)(v165 + 8));
          *(void *)(v0 + 256) = OUTLINED_FUNCTION_13_8(v167, v168, v169, v170, v171, v172, v173, v174, v231);
          uint64_t v136 = v235;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v141 + 24);
          OUTLINED_FUNCTION_62();
          OUTLINED_FUNCTION_62_1();
          _os_log_impl( &dword_0,  v137,  v138,  "#ActionableCallControlFlow of type %s -- unsupported action %s on current call. Reason: %s.",  (uint8_t *)v141,  0x20u);
          OUTLINED_FUNCTION_74_14();
          OUTLINED_FUNCTION_0_2(v237);
          OUTLINED_FUNCTION_0_2(v141);
        }

        else
        {
          swift_release_n(*(void *)(v0 + 272), 4LL);
          OUTLINED_FUNCTION_62_1();
        }

        uint64_t v219 = *(void *)(v0 + 272);
        OUTLINED_FUNCTION_60_20();
        (*(void (**)(void *))(*(void *)v219 + 120LL))(v136);
        __swift_destroy_boxed_opaque_existential_1(v234);
LABEL_44:
        uint64_t v218 = *(void *)(v0 + 184);
        goto LABEL_45;
      }

      outlined destroy of ActionableCallControlFlow.ActionableCallControlFlowError(v40);
LABEL_36:
      swift_errorRelease(*v39);
      OUTLINED_FUNCTION_61_17();
      OUTLINED_FUNCTION_61_17();
      v199 = (os_log_s *)OUTLINED_FUNCTION_88_11();
      os_log_type_t v200 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v199, v200))
      {
        v201 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
        uint64_t v202 = OUTLINED_FUNCTION_7_0(32LL);
        v239[0] = v202;
        *(_DWORD *)v201 = 136315138;
        swift_getErrorValue(v123, v0 + 248, v0 + 224);
        uint64_t v203 = Error.localizedDescription.getter(*(void *)(v0 + 232), *(void *)(v0 + 240));
        *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = OUTLINED_FUNCTION_13_8(v203, v204, v205, v206, v207, v208, v209, v210, v228);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v236, v0 + 24, v201 + 4);
        OUTLINED_FUNCTION_62();
        OUTLINED_FUNCTION_38_27();
        OUTLINED_FUNCTION_38_27();
        _os_log_impl(&dword_0, v199, v200, "#ActionableCallControlFlow encountered error: %s", v201, 0xCu);
        OUTLINED_FUNCTION_17_0(v202);
        OUTLINED_FUNCTION_0_2(v202);
        OUTLINED_FUNCTION_0_2((uint64_t)v201);
      }

      else
      {
        OUTLINED_FUNCTION_38_27();
        OUTLINED_FUNCTION_38_27();
      }

      OUTLINED_FUNCTION_49_24();
      __int128 v240 = xmmword_327AF0;
      OUTLINED_FUNCTION_19_50(v211, v212, v213, v214, v215, v216, v217);
      uint64_t v218 = v123;
LABEL_45:
      swift_errorRelease(v218);
LABEL_46:
      static ExecuteResponse.ongoing(requireInput:)(0LL);
      return (*(uint64_t (**)(void))(v0 + 8))();
    case 2LL:
      uint64_t v68 = *(void **)(v0 + 272);
      OUTLINED_FUNCTION_49_24();
      __int128 v240 = xmmword_327AF0;
      (*(void (**)(uint64_t *))(*v68 + 120LL))(v239);
      uint64_t v69 = v68[5];
      uint64_t v70 = v68[6];
      __swift_project_boxed_opaque_existential_1(v68 + 2, v69);
      (*(void (**)(uint64_t, uint64_t))(v70 + 16))(v69, v70);
      uint64_t v71 = *(void *)(v0 + 40);
      uint64_t v72 = *(void *)(v0 + 56);
      uint64_t v73 = __swift_project_boxed_opaque_existential_1(v236, v71);
      *(void *)(v0 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v71;
      *(void *)(v0 + 96) = v72;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v2);
      OUTLINED_FUNCTION_47_1((uint64_t)boxed_opaque_existential_1);
      uint64_t v75 = type metadata accessor for SimpleOutputFlowAsync(0LL);
      OUTLINED_FUNCTION_57_17(v75);
      swift_retain();
      uint64_t v61 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v2,  &async function pointer to partial apply for closure #2 in ActionableCallControlFlow.execute(),  v68);
      OUTLINED_FUNCTION_162_1();
      *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v61;
      static ExecuteResponse.ongoing<A>(next:)(v236, v73, &protocol witness table for SimpleOutputFlowAsync);
      goto LABEL_15;
    case 3LL:
      OUTLINED_FUNCTION_11_18(*(void *)(v0 + 272));
      char v77 = (void *)OUTLINED_FUNCTION_88_11();
      os_log_type_t v79 = static os_log_type_t.debug.getter(v77, v78);
      BOOL v80 = OUTLINED_FUNCTION_93(v79);
      uint64_t v81 = *(void **)(v0 + 272);
      if (v80)
      {
        uint64_t v82 = (_DWORD *)OUTLINED_FUNCTION_7_0(12LL);
        uint64_t v83 = OUTLINED_FUNCTION_7_0(32LL);
        v239[0] = v83;
        *uint64_t v82 = 136315138;
        *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = *v81;
        uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionableCallControlFlow.Type);
        uint64_t v85 = OUTLINED_FUNCTION_19(v84);
        *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = OUTLINED_FUNCTION_13_8(v85, v86, v87, v88, v89, v90, v91, v92, v228);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v236, v0 + 24, v82 + 1);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_31_1((uint64_t)v81);
        OUTLINED_FUNCTION_34_16( &dword_0,  v93,  v94,  "#ActionableCallControlFlow pushing DismissSiriFlow on behalf of %s");
        OUTLINED_FUNCTION_17_0(v83);
        OUTLINED_FUNCTION_0_2(v83);
        OUTLINED_FUNCTION_0_2((uint64_t)v82);
      }

      else
      {
        OUTLINED_FUNCTION_31_1(*(void *)(v0 + 272));
      }

      _s27PhoneCallFlowDelegatePlugin22SharedGlobalsProviding_pWOcTm_0();
      uint64_t v95 = type metadata accessor for DismissSiriFlow();
      uint64_t v96 = OUTLINED_FUNCTION_8_2(v95, 56LL);
      outlined init with take of ActionableCallControlFlow.State((uint64_t)v236, v96 + 16);
      *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v96;
      lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy( (unint64_t *)&lazy protocol witness table cache variable for type DismissSiriFlow and conformance DismissSiriFlow,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for DismissSiriFlow,  (uint64_t)"ّ\r");
      static ExecuteResponse.complete<A>(next:)(v236);
      uint64_t v76 = v96;
      goto LABEL_20;
    default:
      unint64_t v53 = *(void **)(v0 + 272);
      outlined init with take of ActionableCallControlFlow.State(v1, v0 + 184);
      OUTLINED_FUNCTION_49_24();
      __int128 v240 = xmmword_327AF0;
      (*(void (**)(uint64_t *))(*v53 + 120LL))(v239);
      uint64_t v54 = v53[5];
      uint64_t v55 = v53[6];
      __swift_project_boxed_opaque_existential_1(v53 + 2, v54);
      (*(void (**)(uint64_t, uint64_t))(v55 + 16))(v54, v55);
      uint64_t v56 = *(void *)(v0 + 40);
      uint64_t v57 = *(void *)(v0 + 56);
      __swift_project_boxed_opaque_existential_1(v236, v56);
      *(void *)(v0 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v56;
      *(void *)(v0 + 96) = v57;
      id v58 = __swift_allocate_boxed_opaque_existential_1(v2);
      OUTLINED_FUNCTION_47_1((uint64_t)v58);
      _s27PhoneCallFlowDelegatePlugin22SharedGlobalsProviding_pWOcTm_0();
      uint64_t v59 = OUTLINED_FUNCTION_8_2((uint64_t)&unk_40E898, 64LL);
      *(void *)(v59 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v53;
      outlined init with take of ActionableCallControlFlow.State((uint64_t)v234, v59 + 24);
      uint64_t v60 = type metadata accessor for SimpleOutputFlowAsync(0LL);
      OUTLINED_FUNCTION_57_17(v60);
      swift_retain();
      uint64_t v61 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v2,  &async function pointer to partial apply for closure #1 in ActionableCallControlFlow.execute(),  v59);
      __swift_destroy_boxed_opaque_existential_1(v236);
      *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v61;
      static ExecuteResponse.ongoing<A>(next:)(v236, v234, &protocol witness table for SimpleOutputFlowAsync);
      __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 184));
LABEL_15:
      uint64_t v76 = v61;
LABEL_20:
      swift_release(v76);
      return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t closure #1 in ActionableCallControlFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_task_alloc(dword_439EDC);
  *(void *)(v3 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = UnsupportedFlowCATs.deleteVoicemail();
  return ActionableCallControlFlow.makeUnsupportedActionOnCallOutput(unsupportedActionReason:)(a1, a3);
}

uint64_t ActionableCallControlFlow.makeUnsupportedActionOnCallOutput(unsupportedActionReason:)( uint64_t a1, uint64_t a2)
{
  v3[31] = a2;
  v3[32] = v2;
  v3[30] = a1;
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v3[33] = OUTLINED_FUNCTION_23(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[34] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[35] = v6;
  v3[36] = OUTLINED_FUNCTION_23(v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[37] = OUTLINED_FUNCTION_28();
  v3[38] = OUTLINED_FUNCTION_28();
  v3[39] = OUTLINED_FUNCTION_28();
  v3[40] = OUTLINED_FUNCTION_28();
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t ActionableCallControlFlow.makeUnsupportedActionOnCallOutput(unsupportedActionReason:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsupportedAction);
  uint64_t v2 = swift_dynamicCast(v1, v0 + 16, v1);
  if ((_DWORD)v2)
  {
    OUTLINED_FUNCTION_2_73();
    uint64_t v5 = OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_15_63(v5);
    os_log_type_t v7 = (void *)OUTLINED_FUNCTION_18_29(*(void *)(class metadata base offset for PhoneCallControlCATsSimple
                                                     + v6
                                                     + 16));
    *(void *)(v0 + 32__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v7;
    *os_log_type_t v7 = v0;
    v7[1] = ActionableCallControlFlow.makeUnsupportedActionOnCallOutput(unsupportedActionReason:);
    uint64_t v8 = *(void *)(v0 + 320);
    return v44(v8);
  }

  if (OUTLINED_FUNCTION_33_44( v2,  v3,  v4,  (uint64_t)&type metadata for ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason))
  {
    OUTLINED_FUNCTION_2_73();
    uint64_t v11 = OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_15_63(v11);
    unint64_t v13 = (void *)OUTLINED_FUNCTION_18_29(*(void *)(class metadata base offset for PhoneCallControlCATsSimple
                                                      + v12
                                                      + 64));
    *(void *)(v0 + 34__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v13;
    *unint64_t v13 = v0;
    v13[1] = ActionableCallControlFlow.makeUnsupportedActionOnCallOutput(unsupportedActionReason:);
    uint64_t v8 = *(void *)(v0 + 312);
    return v44(v8);
  }

  if (OUTLINED_FUNCTION_33_44( v0 + 416,  v9,  v10,  (uint64_t)&type metadata for ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason))
  {
    OUTLINED_FUNCTION_2_73();
    uint64_t v16 = OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_15_63(v16);
    uint64_t v18 = (void *)OUTLINED_FUNCTION_18_29(*(void *)(class metadata base offset for PhoneCallControlCATsSimple
                                                      + v17
                                                      + 80));
    *(void *)(v0 + 360) = v18;
    void *v18 = v0;
    v18[1] = ActionableCallControlFlow.makeUnsupportedActionOnCallOutput(unsupportedActionReason:);
    uint64_t v8 = *(void *)(v0 + 304);
    return v44(v8);
  }

  if (OUTLINED_FUNCTION_33_44( v0 + 417,  v14,  v15,  (uint64_t)&type metadata for ActionableCallControlFlow.UnsupportedHoldActionReason))
  {
    OUTLINED_FUNCTION_2_73();
    uint64_t v19 = OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_15_63(v19);
    uint64_t v21 = (void *)OUTLINED_FUNCTION_18_29(*(void *)(class metadata base offset for PhoneCallControlCATsSimple
                                                      + v20
                                                      + 32));
    *(void *)(v0 + 376) = v21;
    *uint64_t v21 = v0;
    v21[1] = ActionableCallControlFlow.makeUnsupportedActionOnCallOutput(unsupportedActionReason:);
    uint64_t v8 = *(void *)(v0 + 296);
    return v44(v8);
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
  uint64_t v24 = OUTLINED_FUNCTION_60_20();
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v27 = static os_log_type_t.debug.getter(v25, v26);
  if (os_log_type_enabled(v25, v27))
  {
    uint64_t v28 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v29 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v45 = v29;
    *(_DWORD *)uint64_t v28 = 136315138;
    uint64_t v31 = *(void *)(v0 + 80);
    uint64_t v30 = *(void *)(v0 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v31);
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter(v31, *(void *)(v30 + 8));
    *(void *)(v0 + 23__swift_destroy_boxed_opaque_existential_1(v0 + 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v28 + 4);
    OUTLINED_FUNCTION_62();
    OUTLINED_FUNCTION_62_1();
    _os_log_impl( &dword_0,  v25,  v27,  "#ActionableCallControlFlow makeUnsupportedActionOnCallOutput unrecognized unsupported action reason %s",  v28,  0xCu);
    OUTLINED_FUNCTION_17_0(v29);
    OUTLINED_FUNCTION_0_2(v29);
    OUTLINED_FUNCTION_0_2((uint64_t)v28);
  }

  else
  {
    OUTLINED_FUNCTION_62_1();
  }

  unint64_t v34 = lazy protocol witness table accessor for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError();
  uint64_t v35 = OUTLINED_FUNCTION_4_4((uint64_t)&type metadata for ActionableCallControlFlow.ActionableCallControlFlowError, v34);
  *(_OWORD *)uint64_t v36 = 0u;
  *(_OWORD *)(v36 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = 0u;
  *(void *)(v36 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
  *(_BYTE *)(v36 + 40) = 3;
  swift_willThrow(v35, v36, v37, v38, v39, v40, v41, v42);
  uint64_t v43 = *(void *)(v0 + 264);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_14_3();
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  OUTLINED_FUNCTION_49_3();
  v0[17] = v2;
  v0[18] = v3;
  v0[19] = v1;
  OUTLINED_FUNCTION_39_0(v4);
  v0[42] = v1;
  swift_task_dealloc(v5);
  outlined destroy of SpeakableString?(v0[40]);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_17_3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 272);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 96));
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  OUTLINED_FUNCTION_9_2();
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_8_64((void *)(v0 + 16));
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_14_3();
  return OUTLINED_FUNCTION_5_16(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_8_64((void *)(v0 + 16));
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_14_3();
  return OUTLINED_FUNCTION_5_16(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_8_64((void *)(v0 + 16));
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_14_3();
  return OUTLINED_FUNCTION_5_16(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_8_64((void *)(v0 + 16));
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_14_3();
  return OUTLINED_FUNCTION_5_16(*(uint64_t (**)(void))(v0 + 8));
}

#error "20DBB0: call analysis failed (funcsize=32)"
uint64_t ActionableCallControlFlow.makeUnsupportedActionOnCallOutput(unsupportedActionReason:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  OUTLINED_FUNCTION_49_3();
  v0[20] = v2;
  v0[21] = v3;
  v0[22] = v1;
  OUTLINED_FUNCTION_39_0(v4);
  v0[44] = v1;
  swift_task_dealloc(v5);
  outlined destroy of SpeakableString?(v0[39]);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_17_3();
}

#error "20DC98: call analysis failed (funcsize=32)"
uint64_t ActionableCallControlFlow.makeUnsupportedActionOnCallOutput(unsupportedActionReason:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  OUTLINED_FUNCTION_49_3();
  v0[23] = v2;
  v0[24] = v3;
  v0[25] = v1;
  OUTLINED_FUNCTION_39_0(v4);
  v0[46] = v1;
  swift_task_dealloc(v5);
  outlined destroy of SpeakableString?(v0[38]);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_17_3();
}

#error "20DD80: call analysis failed (funcsize=32)"
uint64_t ActionableCallControlFlow.makeUnsupportedActionOnCallOutput(unsupportedActionReason:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  OUTLINED_FUNCTION_49_3();
  v0[26] = v2;
  v0[27] = v3;
  v0[28] = v1;
  OUTLINED_FUNCTION_39_0(v4);
  v0[48] = v1;
  swift_task_dealloc(v5);
  outlined destroy of SpeakableString?(v0[37]);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_17_3();
}

#error "20DE68: call analysis failed (funcsize=32)"
uint64_t ActionableCallControlFlow.makeUnsupportedActionOnCallOutput(unsupportedActionReason:)()
{
  uint64_t v0;
  OUTLINED_FUNCTION_14_1(*(void *)(*(void *)v0 + 408LL));
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t closure #2 in ActionableCallControlFlow.execute()(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_439EEC);
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return ActionableCallControlFlow.makeCallControlOutput()(a1);
}

uint64_t ActionableCallControlFlow.makeCallControlOutput()(uint64_t a1)
{
  v2[7] = a1;
  _BYTE v2[8] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  void v2[9] = OUTLINED_FUNCTION_23(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v2[10] = OUTLINED_FUNCTION_23(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[12] = v6;
  v2[13] = OUTLINED_FUNCTION_23(v6);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v1;
  void *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  uint64_t v11 = (void *)*v2;
  uint64_t v4 = v11;
  OUTLINED_FUNCTION_39_0(&v11);
  v4[15] = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = v4[9];
  if (!v1) {
    v4[16] = a1;
  }
  outlined destroy of SpeakableString?(v6);
  OUTLINED_FUNCTION_19_1();
  return swift_task_switch(v7, v8, v9);
}

uint64_t ActionableCallControlFlow.makeCallControlOutput()()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[8];
  uint64_t v3 = static DialogPhase.summary.getter();
  OUTLINED_FUNCTION_16_48(v3, (uint64_t)INStartAudioCallIntent.overwriteCallGroups(newCallGroups:));
  uint64_t v4 = *(void **)(v2 + 64);
  PhoneCallControlAction.rawValue.getter(*(_BYTE *)(v2 + 56));
  String.toSpeakableString.getter();
  OUTLINED_FUNCTION_39();
  uint64_t v5 = OUTLINED_FUNCTION_26_0();
  __swift_storeEnumTagSinglePayload(v1, 0LL, 1LL, v5);
  uint64_t v6 = *(int **)(*v4 + class metadata base offset for PhoneCallControlCATsSimple);
  uint64_t v9 = (uint64_t (*)(void))((char *)v6 + *v6);
  os_log_type_t v7 = (void *)swift_task_alloc(v6[1]);
  v0[14] = v7;
  *os_log_type_t v7 = v0;
  v7[1] = ActionableCallControlFlow.makeCallControlOutput();
  return v9(v0[9]);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_14_1(*(void *)(*(void *)v0 + 144LL));
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 88);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_92_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 104);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 96) + 8LL))(v1, *(void *)(v0 + 88));
  swift_task_dealloc(v1);
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ActionableCallControlFlow.makeCallControlOutput()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = (void *)v10[16];
  OUTLINED_FUNCTION_4_50((void *)(v10[8] + 16LL));
  __swift_project_boxed_opaque_existential_1(v10 + 2, v10[5]);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  unint64_t v13 = (__n128 *)OUTLINED_FUNCTION_5_32(v12);
  OUTLINED_FUNCTION_14_31(v13, v14, v15, v16, (__n128)xmmword_31FE60);
  v10[17] = a10;
  id v17 = v11;
  uint64_t v18 = (void *)OUTLINED_FUNCTION_48_9();
  v10[18] = v18;
  void *v18 = v10;
  v18[1] = ActionableCallControlFlow.makeCallControlOutput();
  return OUTLINED_FUNCTION_3_54();
}

uint64_t ActionableCallControlFlow.executeAction(currentCall:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static Logger.siriPhone);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v5 = swift_slowAlloc(32LL, -1LL);
    uint64_t v18 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000055LL, 0x800000000034EA60LL, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v4 + 4);
    _os_log_impl(&dword_0, v2, v3, "#ActionableCallControlFlow %s", v4, 0xCu);
    swift_arrayDestroy(v5, 1LL);
    OUTLINED_FUNCTION_0_2(v5);
    OUTLINED_FUNCTION_0_2((uint64_t)v4);
  }

  unint64_t v6 = lazy protocol witness table accessor for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError();
  uint64_t v7 = swift_allocError(&type metadata for ActionableCallControlFlow.ActionableCallControlFlowError, v6, 0LL, 0LL);
  *(void *)uint64_t v8 = 0xD00000000000001BLL;
  *(void *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0x800000000034EAC0LL;
  *(_BYTE *)(v8 + 40) = 2;
  return swift_willThrow(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t ActionableCallControlFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

void protocol witness for Flow.execute(completion:) in conformance ActionableCallControlFlow( uint64_t a1, uint64_t a2)
{
}

uint64_t protocol witness for Flow.execute() in conformance ActionableCallControlFlow(uint64_t a1)
{
  os_log_type_t v3 = (void *)swift_task_alloc(dword_439EAC);
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v3;
  *os_log_type_t v3 = v1;
  v3[1] = protocol witness for Flow.execute() in conformance ContactNeedsValueGuardFlow<A>;
  return ActionableCallControlFlow.execute()(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance ActionableCallControlFlow( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ActionableCallControlFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

unint64_t lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedActionReason and conformance ActionableCallControlFlow.UnsupportedActionReason()
{
  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedActionReason and conformance ActionableCallControlFlow.UnsupportedActionReason;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedActionReason and conformance ActionableCallControlFlow.UnsupportedActionReason)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ActionableCallControlFlow.UnsupportedActionReason,  &type metadata for ActionableCallControlFlow.UnsupportedActionReason);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedActionReason and conformance ActionableCallControlFlow.UnsupportedActionReason);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedActionReason and conformance ActionableCallControlFlow.UnsupportedActionReason;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedActionReason and conformance ActionableCallControlFlow.UnsupportedActionReason)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ActionableCallControlFlow.UnsupportedActionReason,  &type metadata for ActionableCallControlFlow.UnsupportedActionReason);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedActionReason and conformance ActionableCallControlFlow.UnsupportedActionReason);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedActionReason and conformance ActionableCallControlFlow.UnsupportedActionReason;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedActionReason and conformance ActionableCallControlFlow.UnsupportedActionReason)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ActionableCallControlFlow.UnsupportedActionReason,  &type metadata for ActionableCallControlFlow.UnsupportedActionReason);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedActionReason and conformance ActionableCallControlFlow.UnsupportedActionReason);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedActionReason and conformance ActionableCallControlFlow.UnsupportedActionReason;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedActionReason and conformance ActionableCallControlFlow.UnsupportedActionReason)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ActionableCallControlFlow.UnsupportedActionReason,  &type metadata for ActionableCallControlFlow.UnsupportedActionReason);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedActionReason and conformance ActionableCallControlFlow.UnsupportedActionReason);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason and conformance ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason()
{
  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason and conformance ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason and conformance ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason,  &type metadata for ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason and conformance ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason and conformance ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason and conformance ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason,  &type metadata for ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason and conformance ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason and conformance ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason and conformance ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason,  &type metadata for ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason and conformance ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason and conformance ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason and conformance ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason,  &type metadata for ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason and conformance ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason);
  }

  return result;
}

uint64_t type metadata accessor for ActionableCallControlFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin25ActionableCallControlFlow);
}

uint64_t partial apply for closure #2 in ActionableCallControlFlow.execute()(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_439EBC);
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return closure #2 in ActionableCallControlFlow.execute()(a1);
}

uint64_t sub_20E7AC()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t partial apply for closure #1 in ActionableCallControlFlow.execute()(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_439ECC);
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = UnsupportedFlowCATs.deleteVoicemail();
  return closure #1 in ActionableCallControlFlow.execute()(a1, v4, v1 + 24);
}

uint64_t outlined destroy of ActionableCallControlFlow.ActionableCallControlFlowError(uint64_t a1)
{
  return a1;
}

uint64_t instantiation function for generic protocol witness table for ActionableCallControlFlow.UnsupportedActionReason( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for ActionableCallControlFlow.UnsupportedActionReason( a1,  a2,  a3,  (uint64_t (*)(void))lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedActionReason and conformance ActionableCallControlFlow.UnsupportedActionReason,  (uint64_t (*)(void))lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedActionReason and conformance ActionableCallControlFlow.UnsupportedActionReason,  (uint64_t (*)(void))lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedActionReason and conformance ActionableCallControlFlow.UnsupportedActionReason);
}

uint64_t instantiation function for generic protocol witness table for ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for ActionableCallControlFlow.UnsupportedActionReason( a1,  a2,  a3,  (uint64_t (*)(void))lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason and conformance ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason,  (uint64_t (*)(void))lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason and conformance ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason,  (uint64_t (*)(void))lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason and conformance ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason);
}

uint64_t instantiation function for generic protocol witness table for ActionableCallControlFlow.UnsupportedHoldActionReason( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for ActionableCallControlFlow.UnsupportedActionReason( a1,  a2,  a3,  (uint64_t (*)(void))lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason,  (uint64_t (*)(void))lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason,  (uint64_t (*)(void))lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason);
}

uint64_t instantiation function for generic protocol witness table for ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for ActionableCallControlFlow.UnsupportedActionReason( a1,  a2,  a3,  (uint64_t (*)(void))lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason and conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason,  (uint64_t (*)(void))lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason and conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason,  (uint64_t (*)(void))lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason and conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason);
}

uint64_t instantiation function for generic protocol witness table for ActionableCallControlFlow.UnsupportedActionReason( void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  uint64_t result = a6();
  a1[3] = result;
  return result;
}

void sub_20EC00(uint64_t a1)
{
}

uint64_t destroy for ActionableCallControlFlow.ActionableCallControlFlowError(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 3) {
    unsigned int v1 = *(_DWORD *)result + 3;
  }
  if (v1 == 2) {
    return swift_bridgeObjectRelease();
  }
  if (v1 == 1) {
    return __swift_destroy_boxed_opaque_existential_1((void *)result);
  }
  return result;
}

uint64_t initializeWithCopy for ActionableCallControlFlow.ActionableCallControlFlowError( uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 3) {
    unsigned int v3 = *(_DWORD *)a2 + 3;
  }
  if (v3 == 2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v4;
    *(_BYTE *)(a1 + 40) = 2;
    swift_bridgeObjectRetain(v4);
  }

  else if (v3 == 1)
  {
    __int128 v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 1;
  }

  else if (v3)
  {
    __int128 v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_BYTE *)(a1 + 40) = 0;
  }

  return a1;
}

uint64_t assignWithCopy for ActionableCallControlFlow.ActionableCallControlFlowError( uint64_t a1, __int128 *a2)
{
  if ((__int128 *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 == 2)
    {
      swift_bridgeObjectRelease();
    }

    else if (v4 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1((void *)a1);
    }

    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *((void *)a2 + 1);
      *(_BYTE *)(a1 + 40) = 2;
      swift_bridgeObjectRetain();
    }

    else if (v5 == 1)
    {
      uint64_t v6 = *((void *)a2 + 3);
      *(void *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v6;
      *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
    }

    else if (v5)
    {
      __int128 v7 = *a2;
      __int128 v8 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v7;
      *(_OWORD *)(a1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v8;
    }

    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_BYTE *)(a1 + 40) = 0;
    }
  }

  return a1;
}

uint64_t assignWithTake for ActionableCallControlFlow.ActionableCallControlFlowError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 == 2)
    {
      swift_bridgeObjectRelease();
    }

    else if (v4 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1((void *)a1);
    }

    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }

    else
    {
      if (v5 != 1)
      {
        if (v5)
        {
          __int128 v7 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v7;
          *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
        }

        else
        {
          *(_BYTE *)a1 = *(_BYTE *)a2;
          *(_BYTE *)(a1 + 40) = 0;
        }

        return a1;
      }

      __int128 v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v6;
      *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(void *)(a2 + 32);
      LOBYTE(v5) = 1;
    }

    *(_BYTE *)(a1 + 40) = v5;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for ActionableCallControlFlow.ActionableCallControlFlowError( uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 4) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for ActionableCallControlFlow.ActionableCallControlFlowError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 41) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 40) = -(char)a2;
    }
  }

  return result;
}

void type metadata accessor for ActionableCallControlFlow.ActionableCallControlFlowError()
{
}

void type metadata accessor for ActionableCallControlFlow.UnsupportedActionReason()
{
}

uint64_t storeEnumTagSinglePayload for ActionableCallControlFlow.UnsupportedActionReason( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_20EFC8 + 4 * byte_337886[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_20EFE8 + 4 * byte_33788B[v4]))();
  }
}

_BYTE *sub_20EFC8(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_20EFE8(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_20EFF0(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_20EFF8(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_20F000(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_20F008(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void type metadata accessor for ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason()
{
}

uint64_t storeEnumTagSinglePayload for ActionableCallControlFlow.UnsupportedHoldActionReason( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_20F06C + 4 * byte_337895[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_20F0A0 + 4 * byte_337890[v4]))();
}

uint64_t sub_20F0A0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20F0A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x20F0B0LL);
  }
  return result;
}

uint64_t sub_20F0BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x20F0C4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_20F0C8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20F0D0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ActionableCallControlFlow.UnsupportedHoldActionReason()
{
}

uint64_t storeEnumTagSinglePayload for ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF6) {
    return ((uint64_t (*)(void))((char *)&loc_20F134 + 4 * byte_33789F[v4]))();
  }
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_20F168 + 4 * byte_33789A[v4]))();
}

uint64_t sub_20F168(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20F170(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x20F178LL);
  }
  return result;
}

uint64_t sub_20F184(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x20F18CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 9;
  return result;
}

uint64_t sub_20F190(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20F198(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason()
{
}

void *destroy for ActionableCallControlFlow.State(void *result)
{
  if (result[3] >= 0xFFFFFFFFuLL) {
    return (void *)__swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

uint64_t initializeWithCopy for ActionableCallControlFlow.State(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    __int128 v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v5;
    *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(void *)(a2 + 32);
  }

  else
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
    *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }

  return a1;
}

uint64_t assignWithCopy for ActionableCallControlFlow.State(uint64_t a1, __int128 *a2)
{
  unint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(void *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v4;
      *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      return a1;
    }

uint64_t assignWithTake for ActionableCallControlFlow.State(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1((void *)a1);
  }
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v4;
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionableCallControlFlow.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFC && *(_BYTE *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 3;
  if (v4 >= 5) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for ActionableCallControlFlow.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)(result + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(_BYTE *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a2 + 3;
    }
  }

  return result;
}

uint64_t getEnumTag for ActionableCallControlFlow.State(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(outlined destroy of UUID?(v0, v1) = -1;
  }
  return (v1 + 1);
}

double destructiveInjectEnumTag for ActionableCallControlFlow.State(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(_OWORD *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }

  else if (a2)
  {
    *(void *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = (a2 - 1);
  }

  return result;
}

void type metadata accessor for ActionableCallControlFlow.State()
{
}

uint64_t OUTLINED_FUNCTION_2_73()
{
  unint64_t v1 = *(void **)(v0 + 248);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
}

uint64_t OUTLINED_FUNCTION_6_84(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 240);
}

uint64_t OUTLINED_FUNCTION_8_64(void *a1)
{
  uint64_t v2 = *(void *)(v1 + 320);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return swift_task_dealloc(v2);
}

uint64_t OUTLINED_FUNCTION_13_70(void *a1)
{
  *(void *)(v1 + 39__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v2;
  uint64_t v3 = __swift_destroy_boxed_opaque_existential_1(a1);
  return static DialogPhase.summary.getter(v3);
}

uint64_t OUTLINED_FUNCTION_15_63(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 0LL, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_16_48(uint64_t a1, uint64_t a2)
{
  return OutputGenerationManifest.init(dialogPhase:_:)(v2, a2, 0LL);
}

uint64_t OUTLINED_FUNCTION_19_50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  return (*(uint64_t (**)(char *))(*(void *)v7 + 120LL))(va);
}

void *OUTLINED_FUNCTION_20_53()
{
  return __swift_project_boxed_opaque_existential_1(v0, *(void *)(v1 + 120));
}

uint64_t OUTLINED_FUNCTION_22_40()
{
  uint64_t v1 = *(void **)(v0 + 272);
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 120))(v2, v3);
}

uint64_t OUTLINED_FUNCTION_26_44()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
}

uint64_t OUTLINED_FUNCTION_33_44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, v4, v5, a4, 0LL);
}

uint64_t OUTLINED_FUNCTION_38_27()
{
  return swift_errorRelease(v0);
}

void OUTLINED_FUNCTION_39_20( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v10 + 400) = a10;
}

  ;
}

uint64_t OUTLINED_FUNCTION_52_20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5, v6, v4, a4);
}

uint64_t OUTLINED_FUNCTION_55_20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4, v5, v6, a4);
}

uint64_t OUTLINED_FUNCTION_60_20()
{
  return _s27PhoneCallFlowDelegatePlugin22SharedGlobalsProviding_pWOcTm_0();
}

uint64_t OUTLINED_FUNCTION_61_17()
{
  return swift_errorRetain(v0);
}

uint64_t OUTLINED_FUNCTION_62_15(uint64_t result)
{
  *(void *)(v1 + 40__swift_destroy_boxed_opaque_existential_1(v0 + 8) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_74_14()
{
  return swift_arrayDestroy(v0, 3LL);
}

void *HangUpDirectAction.identifier.unsafeMutableAddressor()
{
  return &static HangUpDirectAction.identifier;
}

uint64_t static HangUpDirectInvocationFlowFactory.makeHangUpFlow(sharedGlobals:)(void *a1)
{
  void (*v6)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56[2];
  void v57[3];
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[56];
  __int128 v61;
  void v62[4];
  uint64_t v63;
  _BYTE v64[16];
  uint64_t v65;
  void __dst[23];
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  memcpy(__dst, &static PhoneCallFeatureFlags.instance, 0xB0uLL);
  uint64_t v2 = type metadata accessor for PhoneCallFeatureManager();
  uint64_t inited = swift_initStackObject(v2, v60);
  v62[1] = &type metadata for PhoneCallFeatureFlags;
  v62[2] = &protocol witness table for PhoneCallFeatureFlags;
  *(void *)&uint64_t v61 = swift_allocObject(&unk_40EDB0, 192LL, 7LL);
  memcpy((void *)(v61 + 16), __dst, 0xB0uLL);
  outlined init with take of AppSelectionSignalComponent(&v61, inited + 16);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t v6 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 8);
  outlined retain of PhoneCallFeatureFlags(__dst);
  v6(v57, v4, v5);
  FirstPartyAnnotatedAppStore.getDefaultApp(for:)(v57, (uint64_t)&v61);
  uint64_t v7 = OUTLINED_FUNCTION_16_3();
  OUTLINED_FUNCTION_1_79(v7, v8, v9, v10, v11, v12, v13, v14, v51);
  uint64_t v65 = *((void *)&v61 + 1);
  uint64_t v15 = v61;
  outlined release of Set<String>(&v65);
  outlined init with take of String?((uint64_t)v62, (uint64_t)v64);
  outlined release of String?((uint64_t)v64);
  uint64_t v63 = v62[3];
  outlined release of Set<String>(&v63);
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v57);
  uint64_t v16 = type metadata accessor for HangUpCallRCHFlowDelegate(0LL);
  uint64_t v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  uint64_t v18 = outlined init with copy of SignalProviding( (uint64_t)v57,  v17 + direct field offset for HangUpCallRCHFlowDelegate.sharedGlobals);
  uint64_t v19 = BaseRCHFlowDelegate.init()(v18);
  OUTLINED_FUNCTION_1_79(v19, v20, v21, v22, v23, v24, v25, v26, v52);
  os_log_type_t v27 = [objc_allocWithZone(INHangUpCallIntent) init];
  uint64_t v28 = swift_retain();
  INIntent.setMetaData(app:previousIntent:sharedGlobals:)(v28, 0LL);
  OUTLINED_FUNCTION_16_3();
  uint64_t v55 = v19;
  static PhoneCallFlowFactory.makeHangUpCallRCHFlow(delegate:intent:app:sharedGlobals:)();
  uint64_t v30 = v29;
  uint64_t v31 = a1[3];
  uint64_t v32 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v31);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v32 + 40))(v57, v31, v32);
  unint64_t v33 = v58;
  uint64_t v54 = v59;
  __swift_project_boxed_opaque_existential_1(v57, v58);
  type metadata accessor for SiriKitEvent(0LL);
  if (one-time initialization token for emptyHangUpCallIntent != -1) {
    swift_once( &one-time initialization token for emptyHangUpCallIntent,  one-time initialization function for emptyHangUpCallIntent);
  }
  unint64_t v34 = [(id)static PhoneCallIntentClassNames.emptyHangUpCallIntent typeName];
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  uint64_t v37 = v36;

  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v56);
  uint64_t v38 = swift_allocObject(&unk_40EDD8, 64LL, 7LL);
  *(void *)(v38 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v15;
  outlined init with take of AppSelectionSignalComponent(v56, v38 + 24);
  swift_retain();
  uint64_t v39 = SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)( 131LL,  v35,  v37,  31LL,  partial apply for closure #1 in static HangUpDirectInvocationFlowFactory.makeHangUpFlow(sharedGlobals:),  v38);
  dispatch thunk of SiriKitEventSending.send(_:)(v39, v33, v54);
  uint64_t v40 = swift_release(v39);
  OUTLINED_FUNCTION_1_79(v40, v41, v42, v43, v44, v45, v46, v47, v53);
  v57[0] = v30;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INHangUpCallIntent, INHangUpCallIntentResponse>>);
  lazy protocol witness table accessor for type AnyValueFlow<RCHFlowResult<INHangUpCallIntent, INHangUpCallIntentResponse>> and conformance AnyValueFlow<A>();
  uint64_t v49 = Flow.eraseToAnyFlow()(v48);
  swift_release(v30);

  swift_release(v55);
  OUTLINED_FUNCTION_16_3();
  return v49;
}

unint64_t static HangUpDirectAction.identifier.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t closure #1 in static HangUpDirectInvocationFlowFactory.makeHangUpFlow(sharedGlobals:)( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3[3];
  uint64_t v6 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 120))(v9, v5, v6);
  uint64_t v7 = static PhoneDomainContextMetricsUtils.populatePhoneDomainContextForHangUpDirectInvocation(callStateProvider:)(v9);
  __swift_destroy_boxed_opaque_existential_1(v9);
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.domainContext.setter(v7);
}

uint64_t sub_20FA38()
{
  return swift_deallocObject(v0, 192LL, 7LL);
}

uint64_t sub_20FADC()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t partial apply for closure #1 in static HangUpDirectInvocationFlowFactory.makeHangUpFlow(sharedGlobals:)( uint64_t a1)
{
  return closure #1 in static HangUpDirectInvocationFlowFactory.makeHangUpFlow(sharedGlobals:)( a1,  *(void *)(v1 + 16),  (void *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type AnyValueFlow<RCHFlowResult<INHangUpCallIntent, INHangUpCallIntentResponse>> and conformance AnyValueFlow<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INHangUpCallIntent, INHangUpCallIntentResponse>> and conformance AnyValueFlow<A>;
  if (!lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INHangUpCallIntent, INHangUpCallIntentResponse>> and conformance AnyValueFlow<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INHangUpCallIntent, INHangUpCallIntentResponse>>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AnyValueFlow<A>, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INHangUpCallIntent, INHangUpCallIntentResponse>> and conformance AnyValueFlow<A>);
  }

  return result;
}

ValueMetadata *type metadata accessor for HangUpDirectAction()
{
  return &type metadata for HangUpDirectAction;
}

ValueMetadata *type metadata accessor for HangUpDirectInvocationFlowFactory()
{
  return &type metadata for HangUpDirectInvocationFlowFactory;
}

uint64_t OUTLINED_FUNCTION_1_79( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t *)va);
}

void DestinationTypeSlotTemplating.makeParameterPromptDialog(app:parameterName:intent:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t DestinationTypeSlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v15 = [a4 itemToConfirm];
  _bridgeAnyObjectToAny(_:)(v29, v15);
  swift_unknownObjectRelease(v15);
  type metadata accessor for INCallDestinationType(0LL);
  else {
    uint64_t v16 = (*(uint64_t (**)(void))(*(void *)(a9 + 32) + 16LL))(*(void *)(a9 + 16));
  }
  uint64_t v17 = *(void **)(v9 + 40);
  if (v16)
  {
    uint64_t BackingType = INCallDestinationTypeGetBackingType(v16);
    switch((int)BackingType)
    {
      case 1:
        uint64_t v19 = @"NORMAL_DESTINATION";
        goto LABEL_13;
      case 2:
        uint64_t v19 = @"EMERGENCY_DESTINATION";
        goto LABEL_13;
      case 3:
        uint64_t v19 = @"VOICEMAIL_DESTINATION";
        goto LABEL_13;
      case 4:
        uint64_t v19 = @"REDIAL_DESTINATION";
        goto LABEL_13;
      case 5:
        uint64_t v19 = @"CALL_BACK_DESTINATION";
LABEL_13:
        uint64_t v22 = v19;
        break;
      default:
        uint64_t v19 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  BackingType));
        break;
    }

    uint64_t v23 = v19;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    unint64_t v20 = v24;
  }

  else
  {
    unint64_t v20 = 0xE700000000000000LL;
    uint64_t v21 = 0x4E574F4E4B4E55LL;
  }

  SpeakableString.init(print:speak:)(v21, v20, 0LL, 0LL);
  uint64_t v25 = type metadata accessor for SpeakableString(0LL);
  __swift_storeEnumTagSinglePayload((uint64_t)v14, 0LL, 1LL, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(class metadata base offset for StartCallCATs + *v17 + 96))( v14,  a7,  a8);
  return outlined destroy of SpeakableString?((uint64_t)v14);
}

void DestinationTypeSlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = OUTLINED_FUNCTION_1_80(a1, a2, a3, a4, a5, a6, a7, a8);
  (*(void (**)(uint64_t))(class metadata base offset for StartCallCATs + v9 + 448))(v8);
  OUTLINED_FUNCTION_2();
}

void DestinationTypeSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = OUTLINED_FUNCTION_1_80(a1, a2, a3, a4, a5, a6, a7, a8);
  (*(void (**)(uint64_t))(class metadata base offset for StartCallCATs + v9 + 1888))(v8);
  OUTLINED_FUNCTION_2();
}

uint64_t protocol witness for SlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:) in conformance DestinationTypeSlotTemplating<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return DestinationTypeSlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
}

void protocol witness for SlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:) in conformance DestinationTypeSlotTemplating<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void protocol witness for SlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:) in conformance DestinationTypeSlotTemplating<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t type metadata accessor for DestinationTypeSlotTemplating( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for DestinationTypeSlotTemplating);
}

uint64_t OUTLINED_FUNCTION_1_80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a8;
}

PhoneCallFlowDelegatePlugin::AnnounceGroupFaceTimeInviteCATPatternsIdentifiers_optional __swiftcall AnnounceGroupFaceTimeInviteCATPatternsIdentifiers.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of AnnounceGroupFaceTimeInviteCATPatternsIdentifiers.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    v4.value = PhoneCallFlowDelegatePlugin_AnnounceGroupFaceTimeInviteCATPatternsIdentifiers_readGroupFaceTimeInviteAnnouncement;
  }
  else {
    v4.value = PhoneCallFlowDelegatePlugin_AnnounceGroupFaceTimeInviteCATPatternsIdentifiers_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

PhoneCallFlowDelegatePlugin::AnnounceGroupFaceTimeInviteCATPatternsIdentifiers_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceGroupFaceTimeInviteCATPatternsIdentifiers@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::AnnounceGroupFaceTimeInviteCATPatternsIdentifiers_optional *a2@<X8>)
{
  result.value = AnnounceGroupFaceTimeInviteCATPatternsIdentifiers.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters.confirmAction.getter(uint64_t a1@<X8>)
{
}

void AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters.rejectAction.getter()
{
  uint64_t v1 = type metadata accessor for AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters(0LL);
  OUTLINED_FUNCTION_67_5(v0 + *(int *)(v1 + 20), v2, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_2();
}

uint64_t type metadata accessor for AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters,  (uint64_t)&nominal type descriptor for AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters);
}

uint64_t AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters.rejectAction.setter()
{
  uint64_t v2 = OUTLINED_FUNCTION_32_11();
  uint64_t v3 = type metadata accessor for AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters(v2);
  return OUTLINED_FUNCTION_16_16(v0, v1 + *(int *)(v3 + 20));
}

Swift::Void (__swiftcall *AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters.rejectAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters.asKeyValuePairs()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v15 - v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v7 = swift_allocObject(v6, 128LL, 7LL);
  *(_OWORD *)(v7 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D880;
  uint64_t v8 = (void *)(v7 + 48);
  strcpy((char *)(v7 + 32), "confirmAction");
  *(_WORD *)(v7 + 46) = -4864;
  outlined init with copy of Result<TemplatingResult, Error>( v1,  (uint64_t)v5,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_26_0();
  if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1LL, v9) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v7 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 0u;
  }

  else
  {
    *(void *)(v7 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v9;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v8);
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(boxed_opaque_existential_1, v5, v9);
  }

  strcpy((char *)(v7 + 80), "rejectAction");
  *(_BYTE *)(v7 + 9__swift_destroy_boxed_opaque_existential_1(v0 + 3) = 0;
  *(_WORD *)(v7 + 9__swift_destroy_boxed_opaque_existential_1(v0 + 4) = -5120;
  uint64_t v11 = type metadata accessor for AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters(0LL);
  OUTLINED_FUNCTION_67_5( v1 + *(int *)(v11 + 20),  v12,  &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v3, 1LL, v9) == 1)
  {
    outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v7 + 96) = 0u;
    *(_OWORD *)(v7 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0u;
  }

  else
  {
    *(void *)(v7 + 120) = v9;
    uint64_t v13 = __swift_allocate_boxed_opaque_existential_1((void *)(v7 + 96));
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v13, v3, v9);
  }

  return v7;
}

uint64_t AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = OUTLINED_FUNCTION_26_0();
  __swift_storeEnumTagSinglePayload(a1, 1LL, 1LL, v2);
  uint64_t v3 = type metadata accessor for AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters(0LL);
  return OUTLINED_FUNCTION_16_0(a1 + *(int *)(v3 + 20), 1LL, 1LL, v2);
}

uint64_t AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters.init(confirmAction:rejectAction:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a3 + *(int *)(type metadata accessor for AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters(0LL) + 20);
  return outlined init with take of SpeakableString?(a2, v5);
}

uint64_t AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters.burstIndex.getter()
{
  return *(void *)v0;
}

uint64_t AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters.burstIndex.setter( uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(_BYTE *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = a2 & 1;
  return result;
}

void AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters.messagesGroupName.getter()
{
  uint64_t GroupFaceTimeInviteAnnouncementParameters = type metadata accessor for AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters(0LL);
  OUTLINED_FUNCTION_67_5( v0 + *(int *)(GroupFaceTimeInviteAnnouncementParameters + 24),  v2,  &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_2();
}

uint64_t type metadata accessor for AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters( uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters,  (uint64_t)&nominal type descriptor for AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters);
}

uint64_t AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters.messagesGroupName.setter()
{
  uint64_t v2 = OUTLINED_FUNCTION_32_11();
  uint64_t GroupFaceTimeInviteAnnouncementParameters = type metadata accessor for AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters(v2);
  return OUTLINED_FUNCTION_16_16(v0, v1 + *(int *)(GroupFaceTimeInviteAnnouncementParameters + 24));
}

Swift::Void (__swiftcall *AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters.messagesGroupName.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters.numberOfParticipants.getter()
{
  return *(void *)(v0
}

void AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters.numberOfParticipants.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_13_71();
  OUTLINED_FUNCTION_25_44(*(int *)(v0 + 28));
  OUTLINED_FUNCTION_6();
}

Swift::Void (__swiftcall *AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters.numberOfParticipants.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters.numberOfParticipantsNotAnnounced.getter()
{
  return *(void *)(v0
}

void AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters.numberOfParticipantsNotAnnounced.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_13_71();
  OUTLINED_FUNCTION_25_44(*(int *)(v0 + 32));
  OUTLINED_FUNCTION_6();
}

Swift::Void (__swiftcall *AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters.numberOfParticipantsNotAnnounced.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters.participants.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters.asKeyValuePairs()()
{
  uint64_t v3 = v2 - v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = swift_allocObject(v4, 320LL, 7LL);
  uint64_t v6 = v5;
  *(_OWORD *)(v5 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_328A80;
  *(void *)(v5 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0x646E497473727562LL;
  *(void *)(v5 + 40) = 0xEA00000000007865LL;
  if ((v0[1] & 1) != 0)
  {
    uint64_t v7 = 0LL;
    *(void *)(v5 + 56) = 0LL;
    *(void *)(v5 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 0LL;
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = *v0;
    uint64_t v7 = &type metadata for Double;
  }

  *(void *)(v5 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v8;
  *(void *)(v5 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v7;
  *(void *)(v5 + 80) = 0x72656C6C6163LL;
  *(void *)(v5 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0xE600000000000000LL;
  uint64_t v9 = v0[2];
  if (v9)
  {
    uint64_t v10 = type metadata accessor for PhonePerson(0LL);
    uint64_t v11 = v9;
  }

  else
  {
    uint64_t v11 = 0LL;
    uint64_t v10 = 0LL;
    *(void *)(v6 + 10__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 0LL;
    *(void *)(v6 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
  }

  *(void *)(v6 + 96) = v11;
  *(void *)(v6 + 120) = v10;
  *(void *)(v6 + 12__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0xD000000000000011LL;
  *(void *)(v6 + 136) = 0x800000000034CEF0LL;
  uint64_t v12 = (int *)OUTLINED_FUNCTION_12_70();
  outlined init with copy of Result<TemplatingResult, Error>( (uint64_t)v0 + v12[6],  v3,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_26_0();
  if (__swift_getEnumTagSinglePayload(v3, 1LL, v13) == 1)
  {
    swift_retain();
    outlined destroy of UUID?(v3, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v6 + 14__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 0u;
    *(_OWORD *)(v6 + 160) = 0u;
  }

  else
  {
    *(void *)(v6 + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v6 + 144));
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))( boxed_opaque_existential_1,  v3,  v13);
    swift_retain();
  }

  *(void *)(v6 + 176) = 0xD000000000000014LL;
  *(void *)(v6 + 18__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 0x800000000034CF10LL;
  uint64_t v15 = (uint64_t *)((char *)v0 + v12[7]);
  if ((v15[1] & 1) != 0)
  {
    uint64_t v16 = 0LL;
    *(void *)(v6 + 200) = 0LL;
    *(void *)(v6 + 20__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0LL;
    uint64_t v17 = 0LL;
  }

  else
  {
    uint64_t v17 = *v15;
    uint64_t v16 = &type metadata for Double;
  }

  *(void *)(v6 + 19__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v17;
  *(void *)(v6 + 2outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v16;
  *(void *)(v6 + 22__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 0xD000000000000020LL;
  *(void *)(v6 + 23__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0x800000000034CF30LL;
  uint64_t v18 = (uint64_t *)((char *)v0 + v12[8]);
  if ((v18[1] & 1) != 0)
  {
    uint64_t v19 = 0LL;
    *(void *)(v6 + 24__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0LL;
    *(void *)(v6 + 256) = 0LL;
    uint64_t v20 = 0LL;
  }

  else
  {
    uint64_t v20 = *v18;
    uint64_t v19 = &type metadata for Double;
  }

  *(void *)(v6 + 240) = v20;
  *(void *)(v6 + 26__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v19;
  strcpy((char *)(v6 + 272), "participants");
  *(_BYTE *)(v6 + 285) = 0;
  *(_WORD *)(v6 + 286) = -5120;
  uint64_t v21 = *(uint64_t *)((char *)v0 + v12[9]);
  *(void *)(v6 + 31__swift_destroy_boxed_opaque_existential_1(v0 + 2) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhonePerson]);
  *(void *)(v6 + 28__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v21;
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters.init(burstIndex:caller:messagesGroupName:numberOfParticipants:numberOfParticipantsNotAnnounced:participants:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10)
{
  *(void *)a9 = a1;
  *(_BYTE *)(a9 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = a2 & 1;
  *(void *)(a9 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a3;
  uint64_t v16 = (int *)OUTLINED_FUNCTION_12_70();
  uint64_t result = outlined init with take of SpeakableString?(a4, a9 + v16[6]);
  uint64_t v18 = a9 + v16[7];
  *(void *)uint64_t v18 = a5;
  *(_BYTE *)(v18 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = a6 & 1;
  uint64_t v19 = a9 + v16[8];
  *(void *)uint64_t v19 = a7;
  *(_BYTE *)(v19 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = a8 & 1;
  *(void *)(a9 + v16[9]) = a10;
  return result;
}

uint64_t AnnounceGroupFaceTimeInviteCATPatternsExecutor.offerFollowUpIntent(_:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  void v3[2] = a1;
  uint64_t v4 = type metadata accessor for AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters(0LL);
  v3[5] = v4;
  v3[6] = OUTLINED_FUNCTION_12_0(v4);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t AnnounceGroupFaceTimeInviteCATPatternsExecutor.offerFollowUpIntent(_:)()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = (void (*)(uint64_t))v0[2];
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_15_12(v1);
  OUTLINED_FUNCTION_15_12(v1 + *(int *)(v2 + 20));
  v3(v1);
  uint64_t v4 = AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters.asKeyValuePairs()();
  v0[7] = v4;
  uint64_t v5 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[8] = v5;
  *uint64_t v5 = v0;
  v5[1] = AnnounceGroupFaceTimeInviteCATPatternsExecutor.offerFollowUpIntent(_:);
  return v7(0xD00000000000002FLL, 0x8000000000345A30LL, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  OUTLINED_FUNCTION_19_51();
  uint64_t v4 = v3[8];
  *uint64_t v5 = *v2;
  void v3[9] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  if (!v1) {
    v3[10] = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v6, v7, v8);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_25_18();
  OUTLINED_FUNCTION_23_3();
  return OUTLINED_FUNCTION_4_31(*(void *)(v0 + 80), *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_25_18();
  OUTLINED_FUNCTION_23_3();
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AnnounceGroupFaceTimeInviteCATPatternsExecutor.readGroupFaceTimeInviteAnnouncement(participants:_:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  void v4[5] = v3;
  void v4[2] = a1;
  void v4[3] = a2;
  uint64_t v5 = OUTLINED_FUNCTION_12_70();
  void v4[6] = v5;
  v4[7] = OUTLINED_FUNCTION_12_0(v5);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t AnnounceGroupFaceTimeInviteCATPatternsExecutor.readGroupFaceTimeInviteAnnouncement(participants:_:)()
{
  uint64_t v2 = (int *)v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = (void (*)(uint64_t))v0[3];
  uint64_t v4 = v0[2];
  uint64_t v5 = v1 + v2[6];
  uint64_t v6 = OUTLINED_FUNCTION_26_0();
  __swift_storeEnumTagSinglePayload(v5, 1LL, 1LL, v6);
  *(void *)uint64_t v1 = 0LL;
  *(_BYTE *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 1;
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = 0LL;
  uint64_t v7 = v1 + v2[7];
  *(void *)uint64_t v7 = 0LL;
  *(_BYTE *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 1;
  uint64_t v8 = v1 + v2[8];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 1;
  *(void *)(v1 + v2[9]) = v4;
  swift_bridgeObjectRetain();
  v3(v1);
  uint64_t GroupFaceTimeInviteAnnouncement = AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters.asKeyValuePairs()();
  v0[8] = GroupFaceTimeInviteAnnouncement;
  uint64_t v10 = (void *)OUTLINED_FUNCTION_10_2((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  void v0[9] = v10;
  *uint64_t v10 = v0;
  v10[1] = AnnounceGroupFaceTimeInviteCATPatternsExecutor.readGroupFaceTimeInviteAnnouncement(participants:_:);
  return v12(0xD00000000000003FLL, 0x8000000000345A60LL, GroupFaceTimeInviteAnnouncement);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  OUTLINED_FUNCTION_19_51();
  uint64_t v4 = v3[9];
  *uint64_t v5 = *v2;
  v3[10] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  if (!v1) {
    v3[11] = v0;
  }
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_2_26(v6, v7, v8);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_25_18();
  OUTLINED_FUNCTION_23_3();
  return OUTLINED_FUNCTION_4_31(*(void *)(v0 + 88), *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_25_18();
  OUTLINED_FUNCTION_23_3();
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AnnounceGroupFaceTimeInviteCATPatternsExecutor.__allocating_init(templateDir:options:globals:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnnounceGroupFaceTimeInviteCATPatternsExecutor.init(templateDir:options:globals:)(a1, a2, a3);
}

uint64_t AnnounceGroupFaceTimeInviteCATPatternsExecutor.init(templateDir:options:globals:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = OUTLINED_FUNCTION_32_11();
  uint64_t v7 = type metadata accessor for CATOption(v6);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v11 = v10 - v9;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v14 = v13 - v12;
  outlined init with copy of Result<TemplatingResult, Error>( v3,  v13 - v12,  (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, a2, v7);
  uint64_t v15 = CATWrapper.init(templateDir:options:globals:)(v14, v11, a3);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a2, v7);
  outlined destroy of UUID?(v3, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v15;
}

unint64_t lazy protocol witness table accessor for type AnnounceGroupFaceTimeInviteCATPatternsIdentifiers and conformance AnnounceGroupFaceTimeInviteCATPatternsIdentifiers()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceGroupFaceTimeInviteCATPatternsIdentifiers and conformance AnnounceGroupFaceTimeInviteCATPatternsIdentifiers;
  if (!lazy protocol witness table cache variable for type AnnounceGroupFaceTimeInviteCATPatternsIdentifiers and conformance AnnounceGroupFaceTimeInviteCATPatternsIdentifiers)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AnnounceGroupFaceTimeInviteCATPatternsIdentifiers,  &type metadata for AnnounceGroupFaceTimeInviteCATPatternsIdentifiers);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnnounceGroupFaceTimeInviteCATPatternsIdentifiers and conformance AnnounceGroupFaceTimeInviteCATPatternsIdentifiers);
  }

  return result;
}

uint64_t protocol witness for AnnounceGroupFaceTimeInviteCATPatternsExecuting.offerFollowUpIntent(_:) in conformance AnnounceGroupFaceTimeInviteCATPatternsExecutor( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(**v2 + class metadata base offset for AnnounceGroupFaceTimeInviteCATPatternsExecutor);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels();
  return v9(a1, a2);
}

uint64_t protocol witness for AnnounceGroupFaceTimeInviteCATPatternsExecuting.readGroupFaceTimeInviteAnnouncement(participants:_:) in conformance AnnounceGroupFaceTimeInviteCATPatternsExecutor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for AnnounceGroupFaceTimeInviteCATPatternsExecutor + **v3 + 8);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = SuggestionsCATsSimple.phoneCall_StartGFTCall();
  return v11(a1, a2, a3);
}

uint64_t storeEnumTagSinglePayload for AnnounceGroupFaceTimeInviteCATPatternsIdentifiers( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_210DF8 + 4 * byte_337F35[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_210E2C + 4 * byte_337F30[v4]))();
}

uint64_t sub_210E2C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_210E34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x210E3CLL);
  }
  return result;
}

uint64_t sub_210E48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x210E50LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_210E54(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_210E5C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnnounceGroupFaceTimeInviteCATPatternsIdentifiers()
{
  return &type metadata for AnnounceGroupFaceTimeInviteCATPatternsIdentifiers;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1LL, v7))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t destroy for AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t result = __swift_getEnumTagSinglePayload(v5, 1LL, v4);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v5, v4);
  }
  return result;
}

char *initializeWithCopy for AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters( char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1LL, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0LL, 1LL, v6);
  }

  return a1;
}

char *assignWithCopy for AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters( char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1LL, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v11], 1LL, v6);
  int v15 = __swift_getEnumTagSinglePayload((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 0LL, 1LL, v6);
  return a1;
}

char *initializeWithTake for AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters( char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1LL, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0LL, 1LL, v6);
  }

  return a1;
}

char *assignWithTake for AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters( char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1LL, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v11], 1LL, v6);
  int v15 = __swift_getEnumTagSinglePayload((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 0LL, 1LL, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2115C8);
}

uint64_t sub_2115C8()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  return __swift_getEnumTagSinglePayload(v1, v0, v2);
}

uint64_t storeEnumTagSinglePayload for AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_211608);
}

uint64_t sub_211608()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  return OUTLINED_FUNCTION_16_0(v1, v0, v0, v2);
}

void type metadata completion function for AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters( uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
  }

void *initializeBufferWithCopyOfBuffer for AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters( uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *((_BYTE *)a2 + 8);
    *(void *)(a1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a2[2];
    uint64_t v7 = a3[6];
    int v8 = (void *)(a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for SpeakableString(0LL);
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1LL, v10))
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0LL, 1LL, v10);
    }

    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    int v15 = (char *)v4 + v13;
    uint64_t v16 = (uint64_t)a2 + v13;
    *(void *)int v15 = *(void *)v16;
    v15[8] = *(_BYTE *)(v16 + 8);
    uint64_t v17 = (char *)v4 + v14;
    uint64_t v18 = (uint64_t)a2 + v14;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = *(_BYTE *)(v18 + 8);
    *(void *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    swift_bridgeObjectRetain();
  }

  return v4;
}

uint64_t destroy for AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for SpeakableString(0LL);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters( uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  int v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0LL, 1LL, v9);
  }

  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = a1 + v11;
  uint64_t v14 = a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  *(_BYTE *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_BYTE *)(v14 + 8);
  uint64_t v15 = a1 + v12;
  uint64_t v16 = a2 + v12;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_BYTE *)(v16 + 8);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters( uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v6;
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a2[2];
  swift_retain();
  swift_release(v7);
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v9, 1LL, v11);
  int v13 = __swift_getEnumTagSinglePayload((uint64_t)v10, 1LL, v11);
  if (!EnumTagSinglePayload)
  {
    uint64_t v14 = *(void *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 24))(v9, v10, v11);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }

  if (v13)
  {
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 0LL, 1LL, v11);
LABEL_7:
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = (uint64_t *)((char *)a2 + v16);
  uint64_t v19 = *v18;
  *(_BYTE *)(v17 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *((_BYTE *)v18 + 8);
  *(void *)uint64_t v17 = v19;
  uint64_t v20 = a3[8];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = (uint64_t *)((char *)a2 + v20);
  uint64_t v23 = *v22;
  *(_BYTE *)(v21 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *((_BYTE *)v22 + 8);
  *(void *)uint64_t v21 = v23;
  *(void *)(a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters( uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0LL, 1LL, v9);
  }

  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = a1 + v11;
  uint64_t v14 = a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  *(_BYTE *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_BYTE *)(v14 + 8);
  uint64_t v15 = a1 + v12;
  uint64_t v16 = a2 + v12;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_BYTE *)(v16 + 8);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters( uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = *(void *)(a2 + 16);
  swift_release(v6);
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for SpeakableString(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1LL, v10);
  int v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1LL, v10);
  if (!EnumTagSinglePayload)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v12)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0LL, 1LL, v10);
LABEL_7:
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = a2 + v15;
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(v17 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_BYTE *)(v18 + 8);
  uint64_t v19 = a1 + v16;
  uint64_t v20 = a2 + v16;
  *(void *)uint64_t v19 = *(void *)v20;
  *(_BYTE *)(v19 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(_BYTE *)(v20 + 8);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_211D88);
}

uint64_t sub_211D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)v3) {
    return __swift_getEnumTagSinglePayload(v4 + *(int *)(a3 + 24), v3, v6);
  }
  unint64_t v8 = *(void *)(v4 + *(int *)(a3 + 36));
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 8) = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_211E10);
}

void sub_211E10(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
  {
    __swift_storeEnumTagSinglePayload(v5 + *(int *)(a4 + 24), v4, v4, v8);
  }

  else
  {
    *(void *)(v5 + *(int *)(a4 + 36)) = (v4 - 1);
    OUTLINED_FUNCTION_6();
  }

void type metadata completion function for AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters( uint64_t a1)
{
  v4[0] = "\t";
  v4[1] = &unk_3380D8;
  type metadata accessor for SpeakableString?(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(v2 - 8) + 64LL;
    void v4[3] = "\t";
    void v4[4] = "\t";
    void v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
  }

uint64_t type metadata accessor for AnnounceGroupFaceTimeInviteCATPatternsExecutor(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State( a1,  (uint64_t *)&type metadata singleton initialization cache for AnnounceGroupFaceTimeInviteCATPatternsExecutor,  (uint64_t)&nominal type descriptor for AnnounceGroupFaceTimeInviteCATPatternsExecutor);
}

uint64_t type metadata completion function for AnnounceGroupFaceTimeInviteCATPatternsExecutor(uint64_t a1)
{
  return swift_initClassMetadata2( a1,  0LL,  0LL,  v2,  a1 + class metadata base offset for AnnounceGroupFaceTimeInviteCATPatternsExecutor);
}

uint64_t ObjC metadata update function for AnnounceGroupFaceTimeInviteCATPatternsExecutor()
{
  return type metadata accessor for AnnounceGroupFaceTimeInviteCATPatternsExecutor(0LL);
}

uint64_t OUTLINED_FUNCTION_12_70()
{
  return type metadata accessor for AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters(0LL);
}

uint64_t OUTLINED_FUNCTION_13_71()
{
  return type metadata accessor for AnnounceGroupFaceTimeInviteReadGroupFaceTimeInviteAnnouncementParameters(0LL);
}

void OUTLINED_FUNCTION_19_51()
{
  *(void *)(v1 - __swift_destroy_boxed_opaque_existential_1(v0 + 8) = *v0;
}

  ;
}

unint64_t specialized String.init<A>(describing:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AppResolutionBeforeResolveFlow.State(0LL);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of AppResolutionBeforeResolveFlow.State(a1, (uint64_t)v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v2);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      unint64_t v6 = 0xD00000000000001CLL;
      goto LABEL_7;
    }

    unint64_t v6 = 0x74656C706D6F632ELL;
  }

  else
  {
    unint64_t v6 = 0x6C616974696E692ELL;
  }

  outlined destroy of MainFlow((uint64_t)v4, type metadata accessor for AppResolutionBeforeResolveFlow.State);
LABEL_7:
  outlined destroy of MainFlow(a1, type metadata accessor for AppResolutionBeforeResolveFlow.State);
  return v6;
}

uint64_t specialized String.init<A>(describing:)(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_2120D8 + 4 * a7[a1]))( 0xD00000000000001DLL,  0x8000000000345D40LL);
}

uint64_t sub_2120D8()
{
  return v0 + 4;
}

void AppResolutionBeforeResolveFlow.__allocating_init(previousTurnIntent:previouslyResolvedApp:sharedGlobals:appFinder:)()
{
}

id EmergencyCountdownOutputBuilder.intentResponse.getter()
{
  return *(id *)(v0 + 16);
}

unint64_t AppResolutionBeforeResolveFlow.State.description.getter()
{
  uint64_t v1 = type metadata accessor for AppResolutionBeforeResolveFlow.State(0LL);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of AppResolutionBeforeResolveFlow.State(v0, (uint64_t)v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v3, v1);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1) {
      return 0xD00000000000001CLL;
    }
    uint64_t v5 = 0x74656C706D6F632ELL;
  }

  else
  {
    uint64_t v5 = 0x6C616974696E692ELL;
  }

  outlined destroy of MainFlow((uint64_t)v3, type metadata accessor for AppResolutionBeforeResolveFlow.State);
  return v5;
}

void AppResolutionBeforeResolveFlow.init(previousTurnIntent:previouslyResolvedApp:sharedGlobals:appFinder:)()
{
}

uint64_t AppResolutionBeforeResolveFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppResolutionBeforeResolveFlow(0LL);
  lazy protocol witness table accessor for type UUID and conformance UUID( &lazy protocol witness table cache variable for type AppResolutionBeforeResolveFlow and conformance AppResolutionBeforeResolveFlow,  type metadata accessor for AppResolutionBeforeResolveFlow,  (uint64_t)&protocol conformance descriptor for AppResolutionBeforeResolveFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
}

void *specialized AppResolutionBeforeResolveFlow.init(previousTurnIntent:previouslyResolvedApp:sharedGlobals:appFinder:)( void *a1, uint64_t a2, __int128 *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  a5[7] = a6;
  a5[8] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5 + 4);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32LL))(boxed_opaque_existential_1, a4, a6);
  a5[2] = a1;
  a5[3] = a2;
  outlined init with take of AppSelectionSignalComponent(a3, (uint64_t)(a5 + 9));
  uint64_t v14 = (void *)((char *)a5 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin30AppResolutionBeforeResolveFlow_state);
  *uint64_t v14 = a1;
  v14[1] = a2;
  uint64_t v15 = OUTLINED_FUNCTION_29_35();
  swift_storeEnumTagMultiPayload(v14, v15, 0LL);
  id v16 = a1;
  swift_retain();
  return a5;
}

uint64_t outlined assign with take of AppResolutionBeforeResolveFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppResolutionBeforeResolveFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_2124E0()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

void base witness table accessor for Flow in AppResolutionBeforeResolveFlow()
{
}

uint64_t ObjC metadata update function for AppResolutionBeforeResolveFlow()
{
  return type metadata accessor for AppResolutionBeforeResolveFlow(0LL);
}

uint64_t type metadata completion function for AppResolutionBeforeResolveFlow(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v4[2] = &unk_338230;
  void v4[3] = &unk_338230;
  uint64_t result = type metadata accessor for AppResolutionBeforeResolveFlow.State(319LL);
  if (v3 <= 0x3F)
  {
    void v4[4] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

char *initializeBufferWithCopyOfBuffer for AppResolutionBeforeResolveFlow.State( char *a1, char **a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)a1 = *a2;
    a1 = &v15[(v6 + 16LL) & ~(unint64_t)v6];
    swift_retain(v15);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v16 = type metadata accessor for AppResolutionFlowResult(0LL);
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v16 - 8) + 16LL))(a1, a2, v16);
      int v12 = a1;
      uint64_t v13 = a3;
      uint64_t v14 = 1LL;
    }

    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(v5 + 64));
        return a1;
      }

      uint64_t v9 = *a2;
      uint64_t v10 = a2[1];
      *(void *)a1 = v9;
      *((void *)a1 + 1) = v10;
      uint64_t v11 = v9;
      swift_retain(v10);
      int v12 = a1;
      uint64_t v13 = a3;
      uint64_t v14 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }

  return a1;
}

void *initializeWithTake for AppResolutionBeforeResolveFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = type metadata accessor for AppResolutionFlowResult(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *assignWithTake for AppResolutionBeforeResolveFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MainFlow((uint64_t)a1, type metadata accessor for AppResolutionBeforeResolveFlow.State);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = type metadata accessor for AppResolutionFlowResult(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t type metadata completion function for AppResolutionBeforeResolveFlow.State(uint64_t a1)
{
  v4[0] = &unk_338250;
  uint64_t result = type metadata accessor for AppResolutionFlowResult(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v4);
    return 0LL;
  }

  return result;
}

void outlined retain of AnnotatedApp?( void *a1, void (*a2)(void, void, void, void, void, void))
{
}

uint64_t OUTLINED_FUNCTION_4_84@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))( (char *)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
}

void *OUTLINED_FUNCTION_6_85()
{
  return specialized AppResolutionBeforeResolveFlow.init(previousTurnIntent:previouslyResolvedApp:sharedGlobals:appFinder:)( v3,  v2,  v1,  v6,  v0,  v4,  v5);
}

uint64_t OUTLINED_FUNCTION_15_64()
{
  return swift_retain_n(v0, 2LL);
}

void OUTLINED_FUNCTION_18_52( uint64_t a1, void (*a2)(void, void, void, void, void, void))
{
}

  ;
}

uint64_t OUTLINED_FUNCTION_22_41()
{
  return swift_task_dealloc(*(void *)(v0 + 160));
}

void OUTLINED_FUNCTION_26_45()
{
}

uint64_t OUTLINED_FUNCTION_29_35()
{
  return type metadata accessor for AppResolutionBeforeResolveFlow.State(0LL);
}

uint64_t OUTLINED_FUNCTION_32_39()
{
  return CATWrapperSimple.__allocating_init(options:globals:)(v0, 0LL);
}

uint64_t ContactNeedsValueFlowStrategy.init(outputProvider:sharedGlobals:)@<X0>( uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = a5 + *(int *)(type metadata accessor for ContactNeedsValueFlowStrategy(0LL, a3, a4, v9) + 36);
  return outlined init with take of AppSelectionSignalComponent(a2, v10);
}

uint64_t type metadata accessor for ContactNeedsValueFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for ContactNeedsValueFlowStrategy);
}

uint64_t ContactNeedsValueFlowStrategy.actionForInput(_:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Parse(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = outlined init with copy of SignalProviding(v3 + *(int *)(a3 + 36), (uint64_t)v14);
  Input.parse.getter(v9);
  unsigned __int8 v10 = ContactPromptResponseParser.parseResponse(from:)((uint64_t)v8);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v11 = outlined destroy of ContactPromptResponseParser((uint64_t)v14);
  if (v10 == 6) {
    return static ActionForInput.ignore()(v11);
  }
  return static ActionForInput.handle()(v11);
}

uint64_t ContactNeedsValueFlowStrategy.parseValueResponse(input:resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[37] = a4;
  v5[38] = v4;
  v5[35] = a2;
  v5[36] = a3;
  v5[34] = a1;
  uint64_t v6 = type metadata accessor for PhoneError(0LL);
  v5[39] = v6;
  v5[40] = OUTLINED_FUNCTION_23(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for Parse(0LL);
  v5[41] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[42] = v8;
  v5[43] = OUTLINED_FUNCTION_23(v8);
  uint64_t v9 = type metadata accessor for ParameterIdentifier(0LL);
  v5[44] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[45] = v10;
  v5[46] = OUTLINED_FUNCTION_23(v10);
  return OUTLINED_FUNCTION_5_7();
}

uint64_t ContactNeedsValueFlowStrategy.parseValueResponse(input:resolveRecord:)()
{
  uint64_t v213 = (__int128 *)(v0 + 15);
  uint64_t v190 = (uint64_t)(v0 + 33);
  uint64_t v2 = v0[45];
  uint64_t v1 = v0[46];
  uint64_t v3 = v0[44];
  uint64_t v4 = v0[37];
  uint64_t v5 = *(void *)(v4 + 24);
  v0[47] = v5;
  uint64_t v6 = *(void *)(v4 + 16);
  v0[48] = v6;
  uint64_t v193 = v6;
  uint64_t v197 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL);
  v0[49] = AssociatedTypeWitness;
  uint64_t v8 = type metadata accessor for ParameterResolutionRecord(0LL, AssociatedTypeWitness);
  uint64_t v9 = (void *)ParameterResolutionRecord.intent.getter(v8);
  v0[50] = v9;
  uint64_t v210 = v8;
  uint64_t v10 = ParameterResolutionRecord.parameter.getter(v8);
  uint64_t v11 = ParameterIdentifier.multicardinalIndex.getter(v10);
  char v13 = v12;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if ((v13 & 1) != 0) {
    uint64_t v14 = 0LL;
  }
  else {
    uint64_t v14 = v11;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
  v0[51] = v16;
  id v17 = v9;
  uint64_t v208 = v16;
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v20 = static os_log_type_t.debug.getter(v18, v19);
  v201 = v17;
  uint64_t v205 = AssociatedTypeWitness;
  if (os_log_type_enabled(v18, v20))
  {
    uint64_t v187 = v14;
    uint64_t v21 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v184 = OUTLINED_FUNCTION_7_0(32LL);
    *(void *)&__int128 v217 = v184;
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v197, v193, AssociatedTypeWitness);
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)(AssociatedConformanceWitness + 8) + 8LL))(AssociatedTypeWitness);
    if (v23) {
      unint64_t v24 = (void *)v23;
    }
    else {
      unint64_t v24 = _swiftEmptyArrayStorage;
    }
    unint64_t v25 = OUTLINED_FUNCTION_68();
    uint64_t v26 = Array.description.getter(v24, v25);
    unint64_t v28 = v27;
    swift_bridgeObjectRelease();
    v0[33] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, (uint64_t *)&v217);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v190, v0 + 34, v21 + 4);
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_57_0( &dword_0,  v18,  v20,  "#ContactNeedsValueFlowStrategy contacts before parsing NeedsValue prompt response: %s",  v21);
    OUTLINED_FUNCTION_17_0(v184);
    OUTLINED_FUNCTION_0_2(v184);
    uint64_t v29 = (uint64_t)v21;
    uint64_t v14 = v187;
    OUTLINED_FUNCTION_0_2(v29);
  }

  else
  {
  }

  uint64_t v31 = v0[42];
  uint64_t v30 = v0[43];
  uint64_t v32 = v0[41];
  unint64_t v33 = (void *)(v0[38] + *(int *)(v0[37] + 36LL));
  uint64_t v34 = v33[3];
  uint64_t v35 = v33[4];
  __swift_project_boxed_opaque_existential_1(v33, v34);
  uint64_t v36 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v35 + 72))(v34, v35);
  Input.parse.getter(v36);
  (*(void (**)(uint64_t))(*(void *)v36 + 192LL))(v30);
  swift_release(v36);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
  if (!v0[18])
  {
    outlined destroy of PhoneCallNLIntent?((uint64_t)v213);
    OUTLINED_FUNCTION_7_86();
    os_log_type_t v65 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_27_1(v65))
    {
      uint64_t v66 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      OUTLINED_FUNCTION_47(v66);
      OUTLINED_FUNCTION_5_13( &dword_0,  v67,  v68,  "#ContactNeedsValueFlowStrategy Received unsupported parse type. Skipping..");
      OUTLINED_FUNCTION_0_2(v32);
    }

    uint64_t v69 = v0[39];
    uint64_t v70 = (_OWORD *)v0[40];

    *uint64_t v70 = xmmword_3201A0;
    swift_storeEnumTagMultiPayload(v70, v69, 0LL);
    unint64_t v71 = lazy protocol witness table accessor for type PhoneError and conformance PhoneError();
    OUTLINED_FUNCTION_3_87(v71);
    PhoneError.logged()(v72);
    uint64_t v73 = outlined destroy of PhoneError((uint64_t)v70);
    uint64_t v81 = swift_willThrow(v73, v74, v75, v76, v77, v78, v79, v80);
    OUTLINED_FUNCTION_22_42( v81,  v82,  v83,  v84,  v85,  v86,  v87,  v88,  v162,  v165,  v169,  v173,  v177,  v181,  v184,  v187,  v190,  v193,  v197,  v201);
    goto LABEL_22;
  }

  outlined init with take of AppSelectionSignalComponent(v213, (uint64_t)(v0 + 10));
  OUTLINED_FUNCTION_16_49();
  OUTLINED_FUNCTION_9_67();
  uint64_t v37 = ParameterResolutionRecord.app.getter(v210);
  uint64_t v214 = v0 + 10;
  uint64_t v38 = v205;
  SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)((uint64_t)(v0 + 10), v37, 0LL, 0LL, v205);
  uint64_t v40 = v39;
  v0[52] = v39;
  swift_release(v37);
  uint64_t v41 = outlined destroy of SKTransformer((uint64_t)(v0 + 20));
  if (!v40)
  {
    uint64_t v89 = v0[40];
    swift_storeEnumTagMultiPayload(v89, v0[39], 13LL);
    unint64_t v90 = lazy protocol witness table accessor for type PhoneError and conformance PhoneError();
    OUTLINED_FUNCTION_3_87(v90);
    PhoneError.logged()(v91);
    uint64_t v92 = outlined destroy of PhoneError(v89);
    uint64_t v100 = swift_willThrow(v92, v93, v94, v95, v96, v97, v98, v99);
    OUTLINED_FUNCTION_22_42( v100,  v101,  v102,  v103,  v104,  v105,  v106,  v107,  v162,  v165,  v169,  v173,  v177,  v181,  v184,  v187,  v190,  v193,  v197,  v201);
    __swift_destroy_boxed_opaque_existential_1(v214);
LABEL_22:
    swift_task_dealloc(v0[46]);
    OUTLINED_FUNCTION_23_3();
    OUTLINED_FUNCTION_10_0();
    uint64_t v108 = (uint64_t (*)(void))v0[1];
    return v108();
  }

  OUTLINED_FUNCTION_15_65( v41,  v42,  v43,  v44,  v45,  v46,  v47,  v48,  v162,  v165,  v169,  v173,  v177,  v181,  v184,  v187,  v190,  v193,  v197,  (uint64_t)v201,  v205,  v208,  v210,  v214);
  uint64_t v49 = *(void **)(OUTLINED_FUNCTION_6_2(*(uint64_t (**)(uint64_t, uint64_t))(v37 + 136)) + 16);
  uint64_t v50 = swift_bridgeObjectRelease();
  if (v49)
  {
    OUTLINED_FUNCTION_7_86();
    os_log_type_t v58 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_27_1(v58))
    {
      uint64_t v59 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      OUTLINED_FUNCTION_47(v59);
      OUTLINED_FUNCTION_5_13( &dword_0,  v60,  v61,  "#ContactNeedsValueFlowStrategy User provided a group name. Rerun slot resolution.");
      OUTLINED_FUNCTION_0_2(v37);
    }

    OUTLINED_FUNCTION_16_49();
    OUTLINED_FUNCTION_9_67();
    uint64_t v62 = v0[29];
    __swift_project_boxed_opaque_existential_1(v0 + 25, v0[28]);
    v0[59] = ParameterResolutionRecord.intent.getter(v211);
    v0[60] = ParameterResolutionRecord.app.getter(v211);
    uint64_t v63 = (void *)swift_task_alloc(*(unsigned int *)(*(void *)(v62 + 8) + 4LL));
    v0[61] = v63;
    void *v63 = v0;
    v63[1] = ContactNeedsValueFlowStrategy.parseValueResponse(input:resolveRecord:);
    uint64_t v219 = v62;
    OUTLINED_FUNCTION_28_45();
    __asm { BR              X8 }
  }

  OUTLINED_FUNCTION_15_65( v50,  v51,  v52,  v53,  v54,  v55,  v56,  v57,  v163,  v166,  v170,  v174,  v178,  v182,  v185,  v188,  v191,  v194,  v198,  v202,  v206,  v209,  v211,  v215);
  uint64_t v110 = *(void **)(OUTLINED_FUNCTION_6_2(*(uint64_t (**)(uint64_t, uint64_t))(v37 + 24)) + 16);
  swift_bridgeObjectRelease();
  if (!v110)
  {
    OUTLINED_FUNCTION_7_86();
    os_log_type_t v134 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_27_1(v134))
    {
      uint64_t v135 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      OUTLINED_FUNCTION_47(v135);
      OUTLINED_FUNCTION_5_13( &dword_0,  v136,  v137,  "#ContactNeedsValueFlowStrategy contacts, resolved persons, and smsGroups were empty at prompt. IntentPromptAnswe r = nil, reprompt.");
      OUTLINED_FUNCTION_0_2(v37);
      os_log_type_t v138 = v40;
      uint64_t v40 = 0LL;
      uint64_t v110 = v203;
    }

    else
    {
      os_log_type_t v138 = v203;
    }

    uint64_t v157 = v0[34];
    uint64_t v158 = type metadata accessor for IntentPromptAnswer(0LL, v38);
    uint64_t v159 = v157;
    uint64_t v160 = 1LL;
LABEL_45:
    __swift_storeEnumTagSinglePayload(v159, v160, 1LL, v158);
    __swift_destroy_boxed_opaque_existential_1(v216);
    OUTLINED_FUNCTION_23_3();
    OUTLINED_FUNCTION_7_8();
    OUTLINED_FUNCTION_10_0();
    uint64_t v108 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
    return v108();
  }

  uint64_t v186 = v0[38];
  uint64_t v189 = v0 + 30;
  uint64_t v183 = swift_getAssociatedConformanceWitness(v199, v195, v38);
  uint64_t v111 = *(void *)(v183 + 8);
  v0[53] = v111;
  uint64_t v112 = *(uint64_t (**)(uint64_t, uint64_t))(v111 + 8);
  v0[54] = v112;
  uint64_t v113 = v203;
  uint64_t v114 = v112(v38, v111);
  uint64_t v115 = _swiftEmptyArrayStorage;
  if (v114) {
    uint64_t v115 = (void *)v114;
  }
  v0[30] = v115;
  os_log_type_t v200 = v112;
  uint64_t v116 = v112(v38, v111);
  ContactNeedsValueFlowStrategy.insertNewContacts(_:into:at:)(v116, v189, v14);
  swift_bridgeObjectRelease();
  (*(void (**)(void, uint64_t, uint64_t))(v111 + 16))(v0[30], v38, v111);
  swift_bridgeObjectRelease();
  id v204 = v203;
  uint64_t v117 = (os_log_s *)OUTLINED_FUNCTION_7_86();
  os_log_type_t v119 = static os_log_type_t.debug.getter(v117, v118);
  BOOL v120 = os_log_type_enabled(v117, v119);
  uint64_t v196 = v111;
  if (v120)
  {
    unsigned __int8 v176 = v0 + 32;
    uint64_t v128 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v172 = v128;
    uint64_t v180 = OUTLINED_FUNCTION_7_0(32LL);
    *(void *)&__int128 v217 = v180;
    *(_DWORD *)uint64_t v128 = 136315138;
    uint64_t v129 = v200(v207, v111);
    if (v129) {
      uint64_t v113 = (void *)v129;
    }
    else {
      uint64_t v113 = _swiftEmptyArrayStorage;
    }
    unint64_t v168 = v128 + 4;
    unint64_t v130 = OUTLINED_FUNCTION_68();
    uint64_t v131 = Array.description.getter(v113, v130);
    unint64_t v133 = v132;
    swift_bridgeObjectRelease();
    *unsigned __int8 v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v131, v133, (uint64_t *)&v217);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v176, v192, v168);
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_57_0( &dword_0,  v117,  v119,  "#ContactNeedsValueFlowStrategy contacts after parsing NeedsValue prompt response: %s",  v172);
    OUTLINED_FUNCTION_17_0(v180);
    OUTLINED_FUNCTION_0_2(v180);
    OUTLINED_FUNCTION_0_2((uint64_t)v172);
  }

  else
  {
    OUTLINED_FUNCTION_22_42( v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v164,  v167,  v171,  v175,  v179,  v183,  v186,  (uint64_t)v189,  v192,  v111,  (uint64_t)v200,  v204);
  }

  BOOL v139 = __swift_project_boxed_opaque_existential_1(v216, v0[13]);
  if (PhoneCallNLIntent.isBusinessNameCall()())
  {
    OUTLINED_FUNCTION_7_86();
    os_log_type_t v140 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_27_1(v140))
    {
      uint64_t v141 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      OUTLINED_FUNCTION_47(v141);
      OUTLINED_FUNCTION_5_13( &dword_0,  v142,  v143,  "#ContactNeedsValueFlowStrategy NLv4 indicates that contact cannot be resolved on-device. Skipping CRR.");
      OUTLINED_FUNCTION_0_2((uint64_t)v113);
    }

    uint64_t v144 = v200(v207, v196);
    if (v144)
    {
      uint64_t v145 = v144;
      *((void *)&v218 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
      *(void *)&__int128 v217 = v145;
    }

    else
    {
      __int128 v217 = 0u;
      __int128 v218 = 0u;
    }

    uint64_t v161 = v0[34];
    IntentPromptAnswer.init(answeredValue:updatedIntent:)(&v217, v204, v207);

    uint64_t v158 = OUTLINED_FUNCTION_83_0();
    uint64_t v159 = v161;
    uint64_t v160 = 0LL;
    goto LABEL_45;
  }

  ParameterResolutionRecord.app.getter(v212);
  OUTLINED_FUNCTION_28_45();
  static ContactSlotResolver.makeMulticardinalResolver<A>(multicardinalIndex:rchFlowContext:sharedGlobals:)( v146,  v147,  v148,  v149,  v150,  v207,  v151);
  OUTLINED_FUNCTION_38_1();
  uint64_t v152 = (void *)swift_task_alloc(dword_439C1C);
  v0[55] = v152;
  uint64_t v155 = type metadata accessor for AnyIntentResolver(0LL, v207, v153, v154);
  v0[56] = v155;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AnyIntentResolver<A>, v155);
  void *v152 = v0;
  v152[1] = ContactNeedsValueFlowStrategy.parseValueResponse(input:resolveRecord:);
  return SKIntentResolver.run(skIntent:nlIntent:)((uint64_t)v204, (uint64_t)v216, v155, WitnessTable);
}

{
  uint64_t v0;
  os_log_s *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  void *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v1 = (os_log_s *)Logger.logObject.getter(*(id *)(v0 + 456));
  uint64_t v3 = static os_log_type_t.debug.getter(v1, v2);
  if (os_log_type_enabled(v1, v3))
  {
    unint64_t v27 = *(void **)(v0 + 456);
    uint64_t v4 = *(void *)(v0 + 424);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 432);
    uint64_t v6 = *(void *)(v0 + 392);
    uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v8 = OUTLINED_FUNCTION_7_0(32LL);
    *(void *)&unint64_t v28 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v9 = v5(v6, v4);
    if (v9) {
      uint64_t v10 = (void *)v9;
    }
    else {
      uint64_t v10 = _swiftEmptyArrayStorage;
    }
    uint64_t v11 = OUTLINED_FUNCTION_68();
    char v12 = Array.description.getter(v10, v11);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 24__swift_destroy_boxed_opaque_existential_1(v0 + 8) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, (uint64_t *)&v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v7 + 4);
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_57_0(&dword_0, v1, v3, "#ContactNeedsValueFlowStrategy contacts after re-running CRR: %s", v7);
    OUTLINED_FUNCTION_17_0(v8);
    OUTLINED_FUNCTION_0_2(v8);
    OUTLINED_FUNCTION_0_2((uint64_t)v7);
  }

  else
  {
  }

  uint64_t v15 = (*(uint64_t (**)(void, void))(v0 + 432))(*(void *)(v0 + 392), *(void *)(v0 + 424));
  if (v15)
  {
    uint64_t v16 = v15;
    *((void *)&v29 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
    *(void *)&unint64_t v28 = v16;
  }

  else
  {
    unint64_t v28 = 0u;
    uint64_t v29 = 0u;
  }

  id v17 = *(void **)(v0 + 416);
  uint64_t v18 = *(void *)(v0 + 392);
  uint64_t v19 = *(void **)(v0 + 400);
  os_log_type_t v20 = *(void *)(v0 + 272);
  IntentPromptAnswer.init(answeredValue:updatedIntent:)(&v28, *(void *)(v0 + 456), v18);

  OUTLINED_FUNCTION_8_65();
  uint64_t v21 = type metadata accessor for IntentPromptAnswer(0LL, v18);
  OUTLINED_FUNCTION_18_53(v20, v22, v23, v21);
  unint64_t v24 = *(void *)(v0 + 320);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 80));
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_10_0();
  swift_task_dealloc(v24);
  unint64_t v25 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
  return v25();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  __int128 v16;
  __int128 v17;
  uint64_t v2 = v0[48];
  uint64_t v1 = v0[49];
  uint64_t v3 = v0[47];
  __swift_destroy_boxed_opaque_existential_1(v0 + 25);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v2, v1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(AssociatedConformanceWitness + 8) + 8LL))(v1);
  if (v5)
  {
    uint64_t v6 = v5;
    *((void *)&v17 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
    *(void *)&uint64_t v16 = v6;
  }

  else
  {
    uint64_t v16 = 0u;
    id v17 = 0u;
  }

  uint64_t v7 = (void *)v0[52];
  uint64_t v8 = (void *)v0[50];
  uint64_t v9 = v0[34];
  IntentPromptAnswer.init(answeredValue:updatedIntent:)(&v16, v0[62], v0[49]);

  uint64_t v10 = OUTLINED_FUNCTION_83_0();
  OUTLINED_FUNCTION_18_53(v9, v11, v12, v10);
  char v13 = v0[40];
  __swift_destroy_boxed_opaque_existential_1(v0 + 10);
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  swift_task_dealloc(v13);
  uint64_t v14 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
  return v14();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v2 = *(void **)(v0 + 472);
  uint64_t v1 = *(void *)(v0 + 480);
  uint64_t v3 = *(void **)(v0 + 416);

  swift_release(v1);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 200));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 80));
  OUTLINED_FUNCTION_14_58();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = *(void **)(v0 + 416);

  OUTLINED_FUNCTION_8_65();
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 80));
  OUTLINED_FUNCTION_14_58();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  return OUTLINED_FUNCTION_6_17(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ContactNeedsValueFlowStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 440);
  *(void *)(v3 + 456) = a1;
  *(void *)(v3 + 46__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v1;
  swift_task_dealloc(v4);
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)();
  void *v6;
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 488LL);
  v3[62] = a1;
  v3[63] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = ContactNeedsValueFlowStrategy.parseValueResponse(input:resolveRecord:);
  }

  else
  {
    uint64_t v6 = (void *)v3[59];
    swift_release(v3[60]);

    uint64_t v5 = ContactNeedsValueFlowStrategy.parseValueResponse(input:resolveRecord:);
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

void ContactNeedsValueFlowStrategy.insertNewContacts(_:into:at:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (!a1) {
    goto LABEL_8;
  }
  if ((unint64_t)a1 >> 62)
  {
    if (a1 >= 0) {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v14 = a1;
    }
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter(v14)) {
      goto LABEL_4;
    }
  }

  else
  {
    uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_4:
      uint64_t v7 = *a2;
      if ((unint64_t)*a2 >> 62)
      {
        if (v7 < 0) {
          uint64_t v15 = *a2;
        }
        else {
          uint64_t v15 = v7 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain();
        uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v15);
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v8 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8LL));
      }

      if (v8 >= a3)
      {
        specialized Array.replaceSubrange<A>(_:with:)(a3, a3, a1);
        return;
      }
    }
  }

  swift_bridgeObjectRelease();
LABEL_8:
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.siriPhone);
  oslog = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v11))
  {
    char v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v18 = v13;
    *(_DWORD *)char v12 = 136315138;
    uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x800000000034EC80LL, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v12 + 4);
    _os_log_impl( &dword_0,  oslog,  v11,  "#ContactNeedsValueFlowStrategy %s: Multicardinal index is beyond end of array. Leaving contacts as-is.",  v12,  0xCu);
    swift_arrayDestroy(v13, 1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {
  }

uint64_t ContactNeedsValueFlowStrategy.makePromptForValue(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  void v4[5] = v3;
  void v4[2] = a1;
  void v4[3] = a2;
  return swift_task_switch(ContactNeedsValueFlowStrategy.makePromptForValue(resolveRecord:), 0LL, 0LL);
}

uint64_t ContactNeedsValueFlowStrategy.makePromptForValue(resolveRecord:)()
{
  uint64_t v1 = v0[4];
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL);
  uint64_t v5 = type metadata accessor for ParameterResolutionRecord(0LL, AssociatedTypeWitness);
  uint64_t v6 = ParameterResolutionRecord.app.getter(v5);
  v0[6] = v6;
  uint64_t v7 = ParameterResolutionRecord.intent.getter(v5);
  v0[7] = v7;
  uint64_t v8 = ParameterResolutionRecord.result.getter(v5);
  v0[8] = v8;
  uint64_t v9 = *(int **)(v2 + 32);
  char v12 = (int *)((char *)v9 + *v9);
  uint64_t v10 = (void *)swift_task_alloc(v9[1]);
  void v0[9] = v10;
  *uint64_t v10 = v0;
  v10[1] = ContactNeedsValueFlowStrategy.makePromptForValue(resolveRecord:);
  return ((uint64_t (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v12)(v0[2], v6, v7, v8, v3, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t (*v6)(void);
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 72);
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    return swift_task_switch(ContactNeedsValueFlowStrategy.makePromptForValue(resolveRecord:), 0LL, 0LL);
  }
  uint64_t v5 = *(void **)(v2 + 56);

  OUTLINED_FUNCTION_38_1();
  uint64_t v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
  return v6();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = *(void **)(v0 + 56);

  OUTLINED_FUNCTION_38_1();
  return OUTLINED_FUNCTION_6_17(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.parseValueResponse(input:resolveRecord:) in conformance ContactNeedsValueFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(dword_43A49C);
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = UnsetRelationshipTemplatesWrapper.promptForPerson(relationship:);
  return ContactNeedsValueFlowStrategy.parseValueResponse(input:resolveRecord:)(a1, a2, a3, a4);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makePromptForValue(resolveRecord:) in conformance ContactNeedsValueFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_43A4A4);
  *(void *)(v3 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Action.run() in conformance PlayVoiceMailAction;
  return ContactNeedsValueFlowStrategy.makePromptForValue(resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:) in conformance ContactNeedsValueFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:)[1]);
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = UnsetRelationshipTemplatesWrapper.promptForPerson(relationship:);
  return NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:)(a1, a2, a3, a4);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:) in conformance ContactNeedsValueFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:)[1]);
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = UnsetRelationshipTemplatesWrapper.promptForPerson(relationship:);
  return NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:)(a1, a2, a3, a4);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance ContactNeedsValueFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)[1]);
  *(void *)(v6 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = UnsetRelationshipTemplatesWrapper.promptForPerson(relationship:);
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance ContactNeedsValueFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)[1]);
  *(void *)(v7 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v15;
  *uint64_t v15 = v7;
  v15[1] = UnsetRelationshipTemplatesWrapper.promptForPerson(relationship:);
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t base witness table accessor for ParameterResolutionHandlingAsync in ContactNeedsValueFlowStrategy<A>( uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for ContactNeedsValueFlowStrategy<A>, a1);
}

uint64_t type metadata completion function for ContactNeedsValueFlowStrategy(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "(";
    swift_initStructMetadata(a1, 0LL, 2LL, v4, a1 + 32);
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for ContactNeedsValueFlowStrategy(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(v5 + 64);
  if (v7 >= a2)
  {
    if (v6 < 0x7FFFFFFF)
    {
      unint64_t v13 = *(void *)((char *)&dword_18 + ((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8LL));
      if (v13 >= 0xFFFFFFFF) {
        LODWORD(v1__swift_destroy_boxed_opaque_existential_1(v0 + 3) = -1;
      }
      return (v13 + 1);
    }

    else
    {
      return __swift_getEnumTagSinglePayload(a1, v6, v4);
    }
  }

  else
  {
    if (((((v8 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 40) & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = a2 - v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_2141D4 + 4 * byte_338290[v11]))();
  }

void storeEnumTagSinglePayload for ContactNeedsValueFlowStrategy( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0;
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFD8) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
  }

  if (a2 > v6)
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFD8)
    {
      unsigned int v10 = ~v6 + a2;
      bzero(a1, ((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 40);
      *a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t sub_214340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_BYTE *)(v5 + v6) = 0;
  if ((_DWORD)a2)
  {
    if (a3 < 0x7FFFFFFF)
    {
      unint64_t v8 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      if ((a2 & 0x80000000) != 0)
      {
        *(_OWORD *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
        *(_OWORD *)(v8 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 0u;
        *(void *)unint64_t v8 = a2 ^ 0x80000000;
      }

      else
      {
        *(void *)(v8 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = (a2 - 1);
      }
    }

    else
    {
      return __swift_storeEnumTagSinglePayload(v5, a2, a3, a4);
    }
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_7_86()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_8_65()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_9_67()
{
  return v0(v1, v2);
}

uint64_t OUTLINED_FUNCTION_14_58()
{
  return swift_task_dealloc(*(void *)(v0 + 368));
}

void *OUTLINED_FUNCTION_15_65( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24)
{
  return __swift_project_boxed_opaque_existential_1(a24, *(void *)(v24 + 104));
}

void *OUTLINED_FUNCTION_16_49()
{
  return __swift_project_boxed_opaque_existential_1(v0, v0[3]);
}

uint64_t OUTLINED_FUNCTION_18_53(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, 0LL, 1LL, a4);
}

void OUTLINED_FUNCTION_22_42( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
}

  ;
}

void *CallingIntentNeedsValueFlowStrategy.__allocating_init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  return CallingIntentNeedsValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11);
}

void CallingIntentNeedsValueFlowStrategy.rePromptCount.setter(uint64_t a1)
{
  *uint64_t v1 = a1;
  OUTLINED_FUNCTION_60_2();
}

uint64_t (*CallingIntentNeedsValueFlowStrategy.rePromptCount.modify(uint64_t a1))()
{
  return PhoneFlow.state.modify;
}

void CallingIntentNeedsValueFlowStrategy.startingOver.setter(char a1)
{
  *uint64_t v1 = a1;
  OUTLINED_FUNCTION_60_2();
}

uint64_t (*CallingIntentNeedsValueFlowStrategy.startingOver.modify(uint64_t a1))()
{
  return static SingleResultVoicemailModel.resultViewID.modify;
}

uint64_t CallingIntentNeedsValueFlowStrategy.makeErrorResponse(error:app:intent:parameter:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[16] = a4;
  v5[17] = v4;
  v5[14] = a2;
  v5[15] = a3;
  v5[13] = a1;
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  v5[18] = OUTLINED_FUNCTION_23(*(void *)(v6 - 8));
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneError?);
  v5[19] = OUTLINED_FUNCTION_23(*(void *)(v7 - 8));
  v5[20] = type metadata accessor for PhoneError(0LL);
  v5[21] = OUTLINED_FUNCTION_28();
  v5[22] = OUTLINED_FUNCTION_28();
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t CallingIntentNeedsValueFlowStrategy.makeErrorResponse(error:app:intent:parameter:)()
{
  uint64_t v2 = *(void *)(v0 + 112);
  *(void *)(v0 + 96) = v2;
  uint64_t v3 = *(void *)(v0 + 152);
  swift_errorRetain(v2);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast(v3, v0 + 96, v4))
  {
    uint64_t v31 = *(void **)(v0 + 152);
    uint64_t v32 = OUTLINED_FUNCTION_88((uint64_t)v31, 1LL, v5, *(void *)(v0 + 160));
    OUTLINED_FUNCTION_71_14(v32, &demangling cache variable for type metadata for PhoneError?);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v33 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v33, (uint64_t)static Logger.siriPhone);
    os_log_type_t v34 = OUTLINED_FUNCTION_24();
    if (OUTLINED_FUNCTION_27_1(v34))
    {
      uint64_t v35 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      OUTLINED_FUNCTION_47(v35);
      OUTLINED_FUNCTION_5_13( &dword_0,  v36,  v37,  "#CallingIntentNeedsValueFlowStrategy failed to cast error as phoneError. Rethrow error.");
      OUTLINED_FUNCTION_0_2(v3);
    }

    uint64_t v38 = *(void *)(v0 + 112);

    swift_willThrow(v39, v40, v41, v42, v43, v44, v45, v46);
    goto LABEL_24;
  }

  uint64_t v6 = *(void **)(v0 + 176);
  uint64_t v8 = *(void *)(v0 + 152);
  uint64_t v7 = *(void *)(v0 + 160);
  OUTLINED_FUNCTION_44_2(v8, 0LL);
  outlined init with take of PhoneError(v8, (uint64_t)v6);
  uint64_t v9 = OUTLINED_FUNCTION_34_1();
  outlined init with copy of PhoneError(v9, v10);
  uint64_t v11 = OUTLINED_FUNCTION_120_0();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v12);
  if (EnumCaseMultiPayload != 16)
  {
    if (EnumCaseMultiPayload == 14)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v14 = OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_12_1(v14, (uint64_t)static Logger.siriPhone);
      os_log_type_t v15 = OUTLINED_FUNCTION_6_0();
      if (OUTLINED_FUNCTION_27_1(v15))
      {
        uint64_t v16 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
        OUTLINED_FUNCTION_47(v16);
        OUTLINED_FUNCTION_5_13( &dword_0,  v17,  v18,  "#CallingIntentNeedsValueFlowStrategy Returning unsupported device for Group FaceTime");
        OUTLINED_FUNCTION_0_2(v7);
      }

      uint64_t v19 = *(void *)(v0 + 136);
      uint64_t v20 = *(void *)(v0 + 144);

      OUTLINED_FUNCTION_95_9(v19 + 24);
      type metadata accessor for StartCallCATs(0LL);
      OUTLINED_FUNCTION_43_21();
      uint64_t v21 = OUTLINED_FUNCTION_18_26(v20);
      type metadata accessor for StartCallCATsSimple(0LL);
      OUTLINED_FUNCTION_43_21();
      OUTLINED_FUNCTION_9_36(v20);
      OUTLINED_FUNCTION_128_6();
      OUTLINED_FUNCTION_43_21();
      uint64_t v22 = OUTLINED_FUNCTION_9_36(v20);
      type metadata accessor for UnsupportedFlowCATs(0LL);
      OUTLINED_FUNCTION_43_21();
      uint64_t v23 = OUTLINED_FUNCTION_18_26(v20);
      uint64_t v24 = type metadata accessor for UnsupportedFaceTimeOutputProvider();
      uint64_t v25 = OUTLINED_FUNCTION_8_2(v24, 136LL);
      uint64_t v26 = specialized UnsupportedFaceTimeOutputProvider.init(unsupportedPhoneCall:sharedGlobals:startCallCats:startCallCATsSimple:phoneCallDisplayTextCATsSimple:unsupportedFlowCats:labelTemplates:)( 9,  (__int128 *)(v0 + 56),  v21,  v1,  v22,  v23,  0LL,  0LL,  0LL,  0LL,  v25);
      *(void *)(v0 + 18__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v26;
      uint64_t v27 = OUTLINED_FUNCTION_108_5(*(void *)(*(void *)v26 + 152LL));
      uint64_t v89 = v28;
      uint64_t v29 = (void *)swift_task_alloc(v27);
      *(void *)(v0 + 19__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v29;
      *uint64_t v29 = v0;
      v29[1] = CallingIntentNeedsValueFlowStrategy.makeErrorResponse(error:app:intent:parameter:);
      return v89(*(void *)(v0 + 104));
    }

    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v74 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v74, (uint64_t)static Logger.siriPhone);
    os_log_type_t v75 = OUTLINED_FUNCTION_24();
    if (OUTLINED_FUNCTION_27_1(v75))
    {
      uint64_t v76 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      OUTLINED_FUNCTION_47(v76);
      OUTLINED_FUNCTION_5_13( &dword_0,  v77,  v78,  "#CallingIntentNeedsValueFlowStrategy Missing specific error response. Throwing error for platform to provide gen eric error dialog.");
      OUTLINED_FUNCTION_0_2(v7);
    }

    uint64_t v80 = *(void *)(v0 + 168);
    uint64_t v79 = *(void *)(v0 + 176);
    uint64_t v38 = *(void *)(v0 + 112);

    swift_willThrow(v81, v82, v83, v84, v85, v86, v87, v88);
    outlined destroy of PhoneError(v79);
    outlined destroy of PhoneError(v80);
LABEL_24:
    swift_errorRetain(v38);
    OUTLINED_FUNCTION_65_14();
    OUTLINED_FUNCTION_7_8();
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_46_0();
    return OUTLINED_FUNCTION_36_14(*(uint64_t (**)(void))(v0 + 8));
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v47 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v47, (uint64_t)static Logger.siriPhone);
  os_log_type_t v48 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_27_1(v48))
  {
    uint64_t v49 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
    OUTLINED_FUNCTION_47(v49);
    OUTLINED_FUNCTION_5_13( &dword_0,  v50,  v51,  "#CallingIntentNeedsValueFlowStrategy Returning unsupported emergency contact call");
    OUTLINED_FUNCTION_0_2(v7);
  }

  uint64_t v52 = *(void *)(v0 + 136);
  uint64_t v53 = *(void *)(v0 + 144);
  uint64_t v55 = *(void *)(v0 + 120);
  uint64_t v54 = *(void **)(v0 + 128);

  OUTLINED_FUNCTION_95_9(v52 + 24);
  type metadata accessor for UnsupportedFlowCATs(0LL);
  uint64_t v56 = swift_retain();
  static CATOption.defaultMode.getter(v56);
  uint64_t v90 = OUTLINED_FUNCTION_18_26(v53);
  type metadata accessor for SearchCallHistoryCATs(0LL);
  OUTLINED_FUNCTION_100_5();
  uint64_t v57 = OUTLINED_FUNCTION_18_26(v53);
  type metadata accessor for UnsupportedFlowCATsSimple(0LL);
  OUTLINED_FUNCTION_100_5();
  uint64_t v58 = OUTLINED_FUNCTION_9_36(v53);
  uint64_t v59 = type metadata accessor for ResponseFactory(0LL);
  OUTLINED_FUNCTION_15_2(v59);
  uint64_t v60 = ResponseFactory.init()();
  uint64_t v61 = type metadata accessor for AppInfoBuilder();
  OUTLINED_FUNCTION_8_2(v61, 16LL);
  OUTLINED_FUNCTION_128_6();
  OUTLINED_FUNCTION_100_5();
  uint64_t v62 = OUTLINED_FUNCTION_9_36(v53);
  uint64_t v63 = type metadata accessor for UnsupportedCallFlowOutputFactory(0LL);
  uint64_t v64 = OUTLINED_FUNCTION_15_2(v63);
  id v65 = v54;
  uint64_t v66 = specialized UnsupportedCallFlowOutputFactory.init(unsupportedPhoneCall:app:sharedGlobals:intent:unsupportedFlowCats:searchCallHistoryCats:unsupportedFlowCatsSimple:responseGenerator:labelTemplating:appInfoBuilder:phoneCallDisplayTextCATsSimple:)( 10LL,  v55,  v0 + 16,  (uint64_t)v54,  v90,  v57,  v58,  v60,  0LL,  0LL,  0LL,  0LL,  v52,  v62,  v64);
  *(void *)(v0 + 20__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v66;
  uint64_t v67 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 2outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v67;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output);
  *uint64_t v67 = v0;
  v67[1] = CallingIntentNeedsValueFlowStrategy.makeErrorResponse(error:app:intent:parameter:);
  OUTLINED_FUNCTION_19_1();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v68,  v69,  v70,  0xD00000000000002ELL,  v71,  v72,  v66,  v73);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  OUTLINED_FUNCTION_27_7();
  uint64_t v3 = *(void *)(v2 + 192);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 200) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  swift_release(*(void *)(v0 + 184));
  OUTLINED_FUNCTION_74_15();
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
  return OUTLINED_FUNCTION_6_17(v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  OUTLINED_FUNCTION_27_7();
  uint64_t v3 = *(void *)(v2 + 216);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 22__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  swift_release(*(void *)(v0 + 208));
  OUTLINED_FUNCTION_74_15();
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
  return OUTLINED_FUNCTION_6_17(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 176);
  swift_release(*(void *)(v0 + 184));
  outlined destroy of PhoneError(v1);
  OUTLINED_FUNCTION_65_14();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  return OUTLINED_FUNCTION_6_17(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 176);
  swift_release(*(void *)(v0 + 208));
  outlined destroy of PhoneError(v1);
  OUTLINED_FUNCTION_65_14();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_46_0();
  return OUTLINED_FUNCTION_6_17(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t closure #1 in CallingIntentNeedsValueFlowStrategy.makeErrorResponse(error:app:intent:parameter:)( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Output, Error>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 16) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_40F260, v8 + v6, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v9 + v8,  (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  (*(void (**)(uint64_t (*)(uint64_t), uint64_t))(*(void *)a2 + 184LL))( partial apply for closure #1 in closure #1 in CallingIntentNeedsValueFlowStrategy.makeErrorResponse(error:app:intent:parameter:),  v9);
  return swift_release(v9);
}

uint64_t closure #1 in closure #1 in CallingIntentNeedsValueFlowStrategy.makeErrorResponse(error:app:intent:parameter:)( uint64_t a1)
{
  if ((v6 & 1) != 0)
  {
    v4[0] = *(void *)&v5[0];
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Output, Error>);
    return CheckedContinuation.resume(throwing:)(v4, v1);
  }

  else
  {
    outlined init with take of AppSelectionSignalComponent(v5, (uint64_t)v4);
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Output, Error>);
    return CheckedContinuation.resume(returning:)(v4, v3);
  }

uint64_t CallingIntentNeedsValueFlowStrategy.makeRepromptOnLowConfidence(resolveRecord:)( uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  void v3[2] = a1;
  v3[5] = *v2;
  uint64_t v4 = OUTLINED_FUNCTION_113_3();
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[7] = v5;
  v3[8] = OUTLINED_FUNCTION_23(v5);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t CallingIntentNeedsValueFlowStrategy.makeRepromptOnLowConfidence(resolveRecord:)()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v14 = v0[6];
  uint64_t v3 = OUTLINED_FUNCTION_93_0();
  uint64_t v4 = OUTLINED_FUNCTION_70_9(v3);
  uint64_t v5 = OUTLINED_FUNCTION_88_15(v4);
  void v0[9] = v5;
  uint64_t v6 = ParameterResolutionRecord.intent.getter(v4);
  v0[10] = v6;
  uint64_t v7 = ParameterResolutionRecord.parameter.getter(v4);
  uint64_t v8 = ParameterIdentifier.name.getter(v7);
  uint64_t v10 = v9;
  v0[11] = v9;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v14);
  uint64_t v11 = ParameterResolutionRecord.result.getter(v4);
  v0[12] = v11;
  uint64_t v12 = (uint64_t **)swift_task_alloc(dword_43A5AC);
  v0[13] = (uint64_t)v12;
  *uint64_t v12 = v0;
  v12[1] = (uint64_t *)CallingIntentNeedsValueFlowStrategy.makeRepromptOnLowConfidence(resolveRecord:);
  return CallingIntentNeedsValueFlowStrategy.makeRepromptOnLowConfidenceOutput(app:intent:parameterName:intentResolutionResult:)( v0[2],  v5,  v6,  v8,  v10,  v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t (*v7)(void);
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 104);
  *(void *)(*v1 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void **)(v2 + 96);
  uint64_t v5 = *(void **)(v2 + 80);
  if (v0)
  {

    OUTLINED_FUNCTION_34_0();
    OUTLINED_FUNCTION_22();
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_4_0();
  }

  else
  {

    OUTLINED_FUNCTION_22();
    OUTLINED_FUNCTION_34_0();
    OUTLINED_FUNCTION_23_3();
    uint64_t v7 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
    return OUTLINED_FUNCTION_6_17(v7);
  }

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(v0 + 64));
  return OUTLINED_FUNCTION_3_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CallingIntentNeedsValueFlowStrategy.makeRepromptOnLowConfidenceOutput(app:intent:parameterName:intentResolutionResult:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[11] = a6;
  v7[12] = v6;
  v7[9] = a4;
  v7[10] = a5;
  v7[7] = a2;
  _BYTE v7[8] = a3;
  v7[6] = a1;
  v7[13] = *v6;
  uint64_t v8 = type metadata accessor for OutputGenerationManifest(0LL);
  v7[14] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[15] = v9;
  v7[16] = OUTLINED_FUNCTION_23(v9);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

void (*CallingIntentNeedsValueFlowStrategy.makeRepromptOnLowConfidenceOutput(app:intent:parameterName:intentResolutionResult:)())(uint64_t, void)
{
  uint64_t result = (void (*)(uint64_t, void))(*(uint64_t (**)(uint64_t))(**(void **)(v0 + 96) + 320LL))(v0 + 16);
  if (__OFADD__(*v2, 1LL))
  {
    __break(1u);
  }

  else
  {
    ++*v2;
    result(v0 + 16, 0LL);
    if (OUTLINED_FUNCTION_72_20() > 2)
    {
      uint64_t v4 = OUTLINED_FUNCTION_108_5(*(void *)(class metadata base offset for StartCallCATsSimple
                                             + **(void **)(*(void *)(v0 + 96) + 112LL)
                                             + 448));
      uint64_t v7 = v5;
      uint64_t v6 = (void *)swift_task_alloc(v4);
      *(void *)(v0 + 14__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v6;
      *uint64_t v6 = v0;
      v6[1] = CallingIntentNeedsValueFlowStrategy.makeRepromptOnLowConfidenceOutput(app:intent:parameterName:intentResolutionResult:);
      return (void (*)(uint64_t, void))OUTLINED_FUNCTION_22_43(v7);
    }

    else
    {
      uint64_t v3 = (void *)swift_task_alloc(dword_43A57C);
      *(void *)(v0 + 136) = v3;
      *uint64_t v3 = v0;
      v3[1] = CallingIntentNeedsValueFlowStrategy.makeRepromptOnLowConfidenceOutput(app:intent:parameterName:intentResolutionResult:);
      return (void (*)(uint64_t, void))CallingIntentNeedsValueFlowStrategy.makePromptForNeedsValueOutput(app:intent:parameterName:intentResolutionResult:)( *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 72),  *(void *)(v0 + 80));
    }
  }

  return result;
}

uint64_t CallingIntentNeedsValueFlowStrategy.makeRepromptOnLowConfidenceOutput(app:intent:parameterName:intentResolutionResult:)()
{
  uint64_t v1 = *v0;
  uint64_t v3 = v1;
  OUTLINED_FUNCTION_132_2(*(void *)(v1 + 136), &v3);
  swift_task_dealloc(*(void *)(v1 + 128));
  return OUTLINED_FUNCTION_6_17((uint64_t (*)(void))v0[1]);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_132_2(v2[18], v4);
  if (v1)
  {
    swift_task_dealloc(v2[16]);
    return OUTLINED_FUNCTION_22_43(*(uint64_t (**)(void))(v3 + 8));
  }

  else
  {
    v2[19] = v0;
    OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_9_11(v6, v7, v8);
  }

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v1 = (void *)v0[19];
  uint64_t v2 = (void *)v0[12];
  uint64_t v3 = v0[8];
  uint64_t v4 = default argument 3 of SAUISayIt.init(message:dialogIdentifier:canUseServerTTS:listenAfterSpeaking:)( *(void *)(v0[13] + 264LL),  *(void *)(v0[13] + 272LL));
  (*(void (**)(uint64_t, void, void, void, void, void))(*v2 + 256LL))( v3,  0LL,  0LL,  0LL,  0LL,  v4 & 1);
  __swift_project_boxed_opaque_existential_1(v2 + 23, v2[26]);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_8_2(v5, 40LL);
  OUTLINED_FUNCTION_14_31(v6, v7, v8, v9, (__n128)xmmword_31FE60);
  v0[20] = v19;
  uint64_t v10 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)[1];
  uint64_t v11 = v1;
  uint64_t v12 = (void *)swift_task_alloc(v10);
  v0[21] = v12;
  *uint64_t v12 = v0;
  v12[1] = CallingIntentNeedsValueFlowStrategy.makeRepromptOnLowConfidenceOutput(app:intent:parameterName:intentResolutionResult:);
  OUTLINED_FUNCTION_80_9();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)( v13,  v14,  v15,  v16,  v17);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_27_7();
  OUTLINED_FUNCTION_14_1(*(void *)(v0 + 168));
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);

  uint64_t v1 = OUTLINED_FUNCTION_34_1();
  v2(v1);
  swift_task_dealloc(*(void *)(v0 + 128));
  uint64_t v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_13_0();
  return OUTLINED_FUNCTION_22_43(v3);
}

void *CallingIntentNeedsValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  *(void *)(v11 + direct field offset for CallingIntentNeedsValueFlowStrategy.rePromptCount) = 0LL;
  *(_BYTE *)(v11 + direct field offset for CallingIntentNeedsValueFlowStrategy.startingOver) = 0;
  *(_BYTE *)(v11 + direct field offset for CallingIntentNeedsValueFlowStrategy.isUnsupportedFollowUp) = 0;
  outlined init with copy of SharedGlobalsProviding((uint64_t)a3, (uint64_t)v26);
  outlined init with copy of SharedGlobalsProviding((uint64_t)a7, (uint64_t)v25);
  outlined init with copy of SharedGlobalsProviding((uint64_t)a9, (uint64_t)v24);
  outlined init with copy of SharedGlobalsProviding((uint64_t)a10, (uint64_t)v23);
  outlined init with copy of SharedGlobalsProviding((uint64_t)a11, (uint64_t)v22);
  uint64_t v17 = CallingIntentBaseFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)( a1,  a2,  v26,  a4,  a5,  a6,  v25,  a8,  v24,  v23,  v22);
  __swift_destroy_boxed_opaque_existential_1(a11);
  __swift_destroy_boxed_opaque_existential_1(a10);
  __swift_destroy_boxed_opaque_existential_1(a9);
  __swift_destroy_boxed_opaque_existential_1(a7);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v17;
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:) in conformance CallingIntentNeedsValueFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:)[1]);
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v9;
  uint64_t v11 = type metadata accessor for CallingIntentNeedsValueFlowStrategy( 0LL,  *(void *)(a3 + 264),  *(void *)(a3 + 272),  v10);
  *uint64_t v9 = v4;
  v9[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:)(a1, a2, v11, a4);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:) in conformance CallingIntentNeedsValueFlowStrategy<A>( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(**(void **)v2 + 408LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return v9(a1, a2);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance CallingIntentNeedsValueFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)[1]);
  *(void *)(v6 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v13;
  uint64_t v15 = type metadata accessor for CallingIntentNeedsValueFlowStrategy( 0LL,  *(void *)(a5 + 264),  *(void *)(a5 + 272),  v14);
  *unint64_t v13 = v6;
  v13[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)(a1, a2, a3, a4, v15, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance CallingIntentNeedsValueFlowStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *(int **)(**(void **)v5 + 400LL);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  unint64_t v13 = (void *)swift_task_alloc(v12[1]);
  *(void *)(v6 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v13;
  *unint64_t v13 = v6;
  v13[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return v15(a1, a2, a3, a4, a5);
}

uint64_t sub_21584C()
{
  uint64_t v1 = OUTLINED_FUNCTION_93_0();
  uint64_t v2 = *(void *)(OUTLINED_FUNCTION_70_9(v1) - 8);
  unint64_t v3 = (*(void *)(v2 + 64)
  OUTLINED_FUNCTION_147_2(v2);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + v3));
  return OUTLINED_FUNCTION_54();
}

uint64_t outlined init with take of PhoneError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PhoneError(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t specialized UnsupportedCallFlowOutputFactory.init(unsupportedPhoneCall:app:sharedGlobals:intent:unsupportedFlowCats:searchCallHistoryCats:unsupportedFlowCatsSimple:responseGenerator:labelTemplating:appInfoBuilder:phoneCallDisplayTextCATsSimple:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v57 = v15;
  uint64_t v58 = v16;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v46 = v25;
  uint64_t v27 = v26;
  uint64_t v44 = v28;
  char v30 = v29;
  type metadata accessor for CATOption(0LL);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v33 = v32 - v31;
  type metadata accessor for DialogPhase(0LL);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v53[3] = type metadata accessor for ResponseFactory(0LL);
  v53[4] = &protocol witness table for ResponseFactory;
  v53[0] = v18;
  uint64_t v34 = type metadata accessor for AppInfoBuilder();
  uint64_t v51 = v34;
  uint64_t v52 = &protocol witness table for AppInfoBuilder;
  *(void *)&__int128 v50 = a13;
  uint64_t v35 = static DialogPhase.completion.getter(v34);
  OUTLINED_FUNCTION_126_6( v35,  (uint64_t)closure #1 in variable initialization expression of UnsupportedCallFlowOutputFactory.completionOutputManifest);
  *(_BYTE *)(a15 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v30;
  *(void *)(a15 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v24;
  *(void *)(a15 + 40) = v20;
  *(void *)(a15 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v22;
  outlined init with copy of SharedGlobalsProviding((uint64_t)v53, a15 + 48);
  uint64_t v45 = (void *)v27;
  outlined init with copy of SharedGlobalsProviding(v27, a15 + 88);
  *(void *)(a15 + 12__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v44;
  outlined init with copy of SharedGlobalsProviding(v27, (uint64_t)&v47);
  type metadata accessor for PhoneCallDisplayTextCATs(0LL);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  OUTLINED_FUNCTION_133_7();
  uint64_t v36 = OUTLINED_FUNCTION_18_26(v33);
  type metadata accessor for PhoneCallCommonCATs(0LL);
  OUTLINED_FUNCTION_133_7();
  uint64_t v37 = OUTLINED_FUNCTION_18_26(v33);
  uint64_t v38 = OUTLINED_FUNCTION_8_2(v34, 16LL);
  type metadata accessor for StartCallCATs(0LL);
  OUTLINED_FUNCTION_133_7();
  uint64_t v39 = OUTLINED_FUNCTION_18_26(v33);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallBaseCatTemplatingService<INIntent, INIntentResponse>);
  uint64_t v41 = (void *)OUTLINED_FUNCTION_15_2(v40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v42 = specialized PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)( 0xD000000000000010LL,  0x8000000000342230LL,  &v47,  v36,  v37,  v38,  a9,  a10,  a11,  a12,  v39,  v41);
  uint64_t v48 = v40;
  uint64_t v49 = &protocol witness table for PhoneCallBaseCatTemplatingService<A, B>;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v44);
  OUTLINED_FUNCTION_45_14((uint64_t)&v55);
  OUTLINED_FUNCTION_45_14((uint64_t)&v54);
  OUTLINED_FUNCTION_45_14((uint64_t)&v56);
  *(void *)&__int128 v47 = v42;
  __swift_destroy_boxed_opaque_existential_1(v53);
  __swift_destroy_boxed_opaque_existential_1(v45);
  outlined init with take of AppSelectionSignalComponent(&v47, a15 + 136);
  *(void *)(a15 + 176) = v46;
  outlined init with take of AppSelectionSignalComponent(&v50, a15 + 192);
  *(void *)(a15 + 18__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a14;
  return a15;
}

uint64_t partial apply for closure #1 in CallingIntentNeedsValueFlowStrategy.makeErrorResponse(error:app:intent:parameter:)( uint64_t a1)
{
  return closure #1 in CallingIntentNeedsValueFlowStrategy.makeErrorResponse(error:app:intent:parameter:)(a1, v1);
}

uint64_t base witness table accessor for ParameterResolutionHandlingAsync in CallingIntentNeedsValueFlowStrategy<A>( uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for CallingIntentNeedsValueFlowStrategy<A>, a1);
}

void sub_215C34(uint64_t *a1@<X8>)
{
  *a1 = OUTLINED_FUNCTION_72_20();
  OUTLINED_FUNCTION_2();
}

void sub_215C58(void *a1, uint64_t a2)
{
}

void sub_215C88(_BYTE *a1@<X8>)
{
  *a1 = OUTLINED_FUNCTION_145_5() & 1;
  OUTLINED_FUNCTION_2();
}

void sub_215CB0(unsigned __int8 *a1, uint64_t a2)
{
}

uint64_t type metadata completion function for CallingIntentNeedsValueFlowStrategy(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[1] = &unk_338448;
  v2[2] = &unk_338448;
  return swift_initClassMetadata2(a1, 0LL, 3LL, v2, a1 + 280);
}

uint64_t type metadata accessor for CallingIntentNeedsValueFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for CallingIntentNeedsValueFlowStrategy);
}

uint64_t sub_2161C0()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Output, Error>);
  OUTLINED_FUNCTION_147_2(*(void *)(v0 - 8));
  OUTLINED_FUNCTION_34_1();
  return OUTLINED_FUNCTION_54();
}

uint64_t partial apply for closure #1 in closure #1 in CallingIntentNeedsValueFlowStrategy.makeErrorResponse(error:app:intent:parameter:)( uint64_t a1)
{
  return closure #1 in closure #1 in CallingIntentNeedsValueFlowStrategy.makeErrorResponse(error:app:intent:parameter:)(a1);
}

uint64_t sub_216250()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t OUTLINED_FUNCTION_22_43(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

uint64_t OUTLINED_FUNCTION_35_30@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_43_21()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_44_24()
{
  return swift_task_alloc(*(unsigned int *)(*(void *)(*(void *)v0 + 440LL) + 4LL));
}

void OUTLINED_FUNCTION_46_27(uint64_t a1, uint64_t a2)
{
}

uint64_t OUTLINED_FUNCTION_48_23@<X0>(uint64_t a1@<X8>, uint64_t a2, ...)
{
  return swift_beginAccess(v2 + a1, va, 1LL, 0LL);
}

uint64_t OUTLINED_FUNCTION_52_21(void *a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 80))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_55_21()
{
  return ParameterResolutionRecord.app.getter(v0);
}

uint64_t OUTLINED_FUNCTION_56_18()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_60_21()
{
  *(_WORD *)(v0 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2112;
  return ParameterResolutionRecord.intent.getter(v1);
}

uint64_t OUTLINED_FUNCTION_63_18()
{
  return v1(v0, v2);
}

void OUTLINED_FUNCTION_71_14(uint64_t a1, uint64_t *a2)
{
}

uint64_t OUTLINED_FUNCTION_72_20()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304LL))();
}

uint64_t OUTLINED_FUNCTION_73_20()
{
  return v3(v1, v2, v0);
}

uint64_t OUTLINED_FUNCTION_74_15()
{
  return outlined destroy of PhoneError(*(void *)(v0 + 176));
}

uint64_t OUTLINED_FUNCTION_76_17()
{
  return ParameterIdentifier.multicardinalIndex.getter();
}

  ;
}

uint64_t OUTLINED_FUNCTION_81_16()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 224) + 8LL))(v0, *(void *)(v1 - 216));
}

uint64_t OUTLINED_FUNCTION_83_16()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_84_12( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v7, v8, a4);
}

uint64_t OUTLINED_FUNCTION_87_10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t OUTLINED_FUNCTION_88_15(uint64_t a1)
{
  return ParameterResolutionRecord.app.getter(a1);
}

uint64_t OUTLINED_FUNCTION_97_11()
{
  return v1;
}

uint64_t OUTLINED_FUNCTION_98_9()
{
  return outlined destroy of PhoneError(v0);
}

void OUTLINED_FUNCTION_110_8()
{
}

uint64_t OUTLINED_FUNCTION_111_8()
{
  return v0(v2, v1);
}

uint64_t OUTLINED_FUNCTION_114_5(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a2 + 8))(v2);
}

uint64_t OUTLINED_FUNCTION_115_5()
{
  return v0 + 272;
}

  ;
}

uint64_t OUTLINED_FUNCTION_120_6()
{
  return v2(v1, v0);
}

uint64_t OUTLINED_FUNCTION_121_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_126_6(uint64_t a1, uint64_t a2)
{
  return OutputGenerationManifest.init(dialogPhase:_:)(v2, a2, 0LL);
}

uint64_t OUTLINED_FUNCTION_129_7()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_130_1()
{
  return type metadata accessor for IntentPromptAnswer(0LL, v0);
}

__n128 OUTLINED_FUNCTION_131_6(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t OUTLINED_FUNCTION_132_7()
{
  return 16LL;
}

uint64_t OUTLINED_FUNCTION_133_7()
{
  return static CATOption.defaultMode.getter();
}

  ;
}

uint64_t OUTLINED_FUNCTION_141_5()
{
  return v1(v0, v2);
}

uint64_t OUTLINED_FUNCTION_144_5@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t OUTLINED_FUNCTION_145_5()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328LL))();
}

uint64_t OUTLINED_FUNCTION_147_2@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v2 + v1);
}

uint64_t type metadata accessor for FlowFinder()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin10FlowFinder);
}

void *PersonIntentNode.speechAlternativeConfidenceThreshold.unsafeMutableAddressor()
{
  return &static PersonIntentNode.speechAlternativeConfidenceThreshold;
}

double static PersonIntentNode.speechAlternativeConfidenceThreshold.getter()
{
  return 0.2;
}

void *specialized Sequence<>.max()()
{
  __n128 result = specialized _NativeDictionary.makeIterator()(&v17);
  if (v21)
  {
    unint64_t v1 = (v21 - 1) & v21;
    unint64_t v2 = __clz(__rbit64(v21)) | (v20 << 6);
    int64_t v3 = (unint64_t)(v19 + 64) >> 6;
    int64_t v4 = v20;
    goto LABEL_3;
  }

  int64_t v14 = v20 + 1;
  if (!__OFADD__(v20, 1LL))
  {
    int64_t v3 = (unint64_t)(v19 + 64) >> 6;
    if (v14 < v3)
    {
      unint64_t v15 = *(void *)(v18 + 8 * v14);
      int64_t v4 = v20 + 1;
      if (v15)
      {
LABEL_29:
        unint64_t v1 = (v15 - 1) & v15;
        unint64_t v2 = __clz(__rbit64(v15)) + (v4 << 6);
LABEL_3:
        uint64_t v5 = v17;
        uint64_t v6 = *(void *)(v17 + 56);
        double v7 = *(double *)(v6 + 8 * v2);
        if (!v1) {
          goto LABEL_5;
        }
LABEL_4:
        unint64_t v8 = __clz(__rbit64(v1));
        v1 &= v1 - 1;
        unint64_t v9 = v8 | (v4 << 6);
        while (1)
        {
          if (v1) {
            goto LABEL_4;
          }
LABEL_5:
          int64_t v10 = v4 + 1;
          if (__OFADD__(v4, 1LL)) {
            break;
          }
          if (v10 >= v3) {
            goto LABEL_25;
          }
          unint64_t v11 = *(void *)(v18 + 8 * v10);
          int64_t v12 = v4 + 1;
          if (!v11)
          {
            int64_t v12 = v4 + 2;
            if (v4 + 2 >= v3) {
              goto LABEL_25;
            }
            unint64_t v11 = *(void *)(v18 + 8 * v12);
            if (!v11)
            {
              int64_t v12 = v4 + 3;
              if (v4 + 3 >= v3) {
                goto LABEL_25;
              }
              unint64_t v11 = *(void *)(v18 + 8 * v12);
              if (!v11)
              {
                int64_t v12 = v4 + 4;
                if (v4 + 4 >= v3) {
                  goto LABEL_25;
                }
                unint64_t v11 = *(void *)(v18 + 8 * v12);
                if (!v11)
                {
                  int64_t v12 = v4 + 5;
                  if (v4 + 5 >= v3) {
                    goto LABEL_25;
                  }
                  unint64_t v11 = *(void *)(v18 + 8 * v12);
                  if (!v11)
                  {
                    int64_t v13 = v4 + 6;
                    while (v13 < v3)
                    {
                      unint64_t v11 = *(void *)(v18 + 8 * v13++);
                      if (v11)
                      {
                        int64_t v12 = v13 - 1;
                        goto LABEL_20;
                      }
                    }

LABEL_44:
  __break(1u);
  return result;
}

  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v3);
  return _swiftEmptyArrayStorage;
}

    swift_bridgeObjectRelease();
    goto LABEL_45;
  }

  if (v44 == 0x6143656C62616E65LL && v45 == 0xEC0000006172656DLL) {
    goto LABEL_44;
  }
  __int128 v47 = 0x6143656C62616E65LL;
  uint64_t v48 = 0xEC0000006172656DLL;
LABEL_35:
  uint64_t v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v45, v47, v48, 0LL);
  swift_bridgeObjectRelease();
  if ((v68 & 1) == 0)
  {
    swift_retain_n(v4, 2LL);
    uint64_t v69 = (os_log_s *)OUTLINED_FUNCTION_62_18();
    uint64_t v71 = static os_log_type_t.debug.getter(v69, v70);
    if (os_log_type_enabled(v69, v71))
    {
      uint64_t v72 = OUTLINED_FUNCTION_7_0(22LL);
      uint64_t v73 = OUTLINED_FUNCTION_7_0(64LL);
      v89[0] = v73;
      *(_DWORD *)uint64_t v72 = 136315394;
      if ((v39 & 1) != 0) {
        uint64_t v74 = 0x64656C62616E65LL;
      }
      else {
        uint64_t v74 = 0x64656C6261736964LL;
      }
      if ((v39 & 1) != 0) {
        os_log_type_t v75 = 0xE700000000000000LL;
      }
      else {
        os_log_type_t v75 = 0xE800000000000000LL;
      }
      uint64_t v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v72 + 4);
      swift_bridgeObjectRelease();
      *(_WORD *)(v72 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
      uint64_t v76 = PhoneCallControlAction.description.getter(v8);
      uint64_t v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v72 + 14);
      swift_release_n(v4, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( &dword_0,  v69,  v71,  "#CameraControlFlow not changing camera state because camera is %s and action is %s",  (uint8_t *)v72,  0x16u);
      swift_arrayDestroy(v73, 2LL);
      OUTLINED_FUNCTION_0_2(v73);
      OUTLINED_FUNCTION_0_2(v72);
    }

    else
    {

      swift_release_n(v4, 2LL);
    }

    goto LABEL_49;
  }

Swift::String_optional __swiftcall PersonIntentNode.getFilteredAlternativesFullName()()
{
  uint64_t v0 = PersonIntentNode.getFilteredAlternativesFullName()((uint64_t (*)(void))&static PersonOntologyNode.personFullNameNode.getter);
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::String_optional __swiftcall PersonIntentNode.getFilteredAlternativesFirstName()()
{
  uint64_t v0 = PersonIntentNode.getFilteredAlternativesFullName()((uint64_t (*)(void))&static PersonOntologyNode.personFirstNameNode.getter);
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::String_optional __swiftcall PersonIntentNode.getFilteredAlternativesMiddleName()()
{
  uint64_t v0 = PersonIntentNode.getFilteredAlternativesFullName()((uint64_t (*)(void))&static PersonOntologyNode.personMiddleNameNode.getter);
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::String_optional __swiftcall PersonIntentNode.getFilteredAlternativesLastName()()
{
  uint64_t v0 = PersonIntentNode.getFilteredAlternativesFullName()((uint64_t (*)(void))&static PersonOntologyNode.personLastNameNode.getter);
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t PersonIntentNode.getFilteredAlternativesFullName()(uint64_t (*a1)(void))
{
  uint64_t v3 = a1();
  uint64_t v4 = static PersonIntentNode.getProcessedNameField(person:terminalNode:)(v1, v3);
  swift_release(v3);
  return v4;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  swift_bridgeObjectRetain_n(a2, 2LL);
  if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v4 = v5;
  }

  uint64_t v6 = *(void *)(v4 + 16);
  v8[0] = v4 + 32;
  v8[1] = v6;
  swift_bridgeObjectRetain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v8, a2);
  *a1 = v4;
  return swift_bridgeObjectRelease_n(a2, 3LL);
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  Swift::Int v5 = a1[1];
  swift_bridgeObjectRetain_n(a2, 3LL);
  Swift::Int v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 >= v5)
  {
    if (v5 < 0) {
      goto LABEL_155;
    }
    if (v5)
    {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0LL, v5, 1LL, a1, v3);
      goto LABEL_132;
    }

    goto LABEL_131;
  }

  Swift::Int v7 = v6;
  uint64_t v136 = v2;
  specialized static Array._allocateUninitialized(_:)(v5 / 2);
  uint64_t v127 = v8;
  uint64_t v128 = v5;
  uint64_t v131 = v9;
  uint64_t v139 = v3;
  uint64_t v125 = a1;
  if (v5 <= 0)
  {
    unint64_t v11 = (char *)_swiftEmptyArrayStorage;
    unint64_t v61 = _swiftEmptyArrayStorage[2];
LABEL_116:
    if (v61 >= 2)
    {
      uint64_t v113 = *v125;
      uint64_t v138 = *v125;
      uint64_t v3 = v139;
      while (1)
      {
        unint64_t v114 = v61 - 2;
        if (v61 < 2) {
          break;
        }
        if (!v113) {
          goto LABEL_164;
        }
        os_log_type_t v134 = v11;
        uint64_t v115 = v11 + 32;
        uint64_t v116 = *(void *)&v11[16 * v114 + 32];
        uint64_t v117 = *(void *)&v115[16 * v61 - 8];
        uint64_t v118 = (char *)(v113 + 16 * v116);
        os_log_type_t v119 = (char *)(v113 + 16LL * *(void *)&v115[16 * v61 - 16]);
        unint64_t v120 = v113 + 16 * v117;
        swift_bridgeObjectRetain();
        specialized _merge<A>(low:mid:high:buffer:by:)(v118, v119, v120, v131, v139);
        if (v136) {
          goto LABEL_113;
        }
        if (v117 < v116) {
          goto LABEL_150;
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v134) & 1) == 0) {
          os_log_type_t v134 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v134);
        }
        if (v114 >= *((void *)v134 + 2)) {
          goto LABEL_151;
        }
        uint64_t v121 = &v134[16 * v114 + 32];
        *(void *)uint64_t v121 = v116;
        *((void *)v121 + 1) = v117;
        unint64_t v122 = *((void *)v134 + 2);
        if (v61 > v122) {
          goto LABEL_152;
        }
        unint64_t v11 = v134;
        memmove(&v134[16 * v61 + 16], &v134[16 * v61 + 32], 16 * (v122 - v61));
        *((void *)v134 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v122 - 1;
        unint64_t v61 = v122 - 1;
        uint64_t v113 = v138;
        if (v122 <= 2) {
          goto LABEL_129;
        }
      }

LABEL_129:
    swift_bridgeObjectRelease();
    if (v128 < -1) {
      goto LABEL_160;
    }
    *(void *)(v127 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = 0LL;
    uint64_t v3 = v139;
    swift_bridgeObjectRelease();
LABEL_131:
    swift_bridgeObjectRelease();
    goto LABEL_132;
  }

  Swift::Int v126 = v7;
  Swift::Int v10 = 0LL;
  uint64_t v137 = *a1;
  uint64_t v124 = *a1 + 40;
  unint64_t v11 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v12 = v10++;
    if (v10 >= v5)
    {
      uint64_t v25 = v137;
    }

    else
    {
      int64_t v13 = (uint64_t *)(v137 + 16 * v10);
      uint64_t v14 = v13[1];
      unint64_t v15 = (uint64_t *)(v137 + 16 * v12);
      uint64_t v16 = v15[1];
      if (*(void *)(v3 + 16))
      {
        uint64_t v17 = *v15;
        uint64_t v18 = *v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v14);
        uint64_t v3 = v139;
        double v20 = 0.0;
        double v21 = 0.0;
        if ((v22 & 1) != 0) {
          double v21 = *(double *)(*(void *)(v139 + 56) + 8 * v19);
        }
        if (*(void *)(v139 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
          if ((v24 & 1) != 0) {
            double v20 = *(double *)(*(void *)(v139 + 56) + 8 * v23);
          }
          swift_bridgeObjectRelease();
        }
      }

      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        double v21 = 0.0;
        double v20 = 0.0;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Swift::Int v10 = v12 + 2;
      if (v12 + 2 < v5)
      {
        uint64_t v26 = (uint64_t *)(v124 + 16 * v12);
        while (1)
        {
          uint64_t v27 = *v26;
          uint64_t v28 = *(v26 - 2);
          if (*(void *)(v3 + 16))
          {
            uint64_t v29 = *(v26 - 3);
            uint64_t v30 = *(v26 - 1);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v27);
            uint64_t v3 = v139;
            double v32 = 0.0;
            double v33 = 0.0;
            if ((v34 & 1) != 0) {
              double v33 = *(double *)(*(void *)(v139 + 56) + 8 * v31);
            }
            if (*(void *)(v139 + 16))
            {
              swift_bridgeObjectRetain();
              unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
              if ((v36 & 1) != 0) {
                double v32 = *(double *)(*(void *)(v139 + 56) + 8 * v35);
              }
              swift_bridgeObjectRelease();
            }
          }

          else
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            double v33 = 0.0;
            double v32 = 0.0;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v20 < v21 == v32 >= v33) {
            break;
          }
          v26 += 2;
          if (++v10 >= v128)
          {
            Swift::Int v5 = v128;
            Swift::Int v10 = v128;
            goto LABEL_28;
          }
        }

        Swift::Int v5 = v128;
      }

LABEL_91:
    if ((v86 & 1) != 0) {
      goto LABEL_144;
    }
    uint64_t v94 = (uint64_t *)(v3 + 16 * v63);
    uint64_t v96 = *v94;
    uint64_t v95 = v94[1];
    BOOL v74 = __OFSUB__(v95, v96);
    uint64_t v97 = v95 - v96;
    if (v74) {
      goto LABEL_146;
    }
    if (v97 < v85) {
      goto LABEL_108;
    }
LABEL_99:
    unint64_t v102 = v63 - 1;
    if (v63 - 1 >= v61)
    {
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
      goto LABEL_149;
    }

    if (!v137) {
      goto LABEL_162;
    }
    uint64_t v103 = (uint64_t *)(v3 + 16 * v102);
    uint64_t v104 = *v103;
    uint64_t v105 = v3;
    unint64_t v106 = v63;
    uint64_t v107 = (void *)(v3 + 16 * v63);
    uint64_t v108 = v107[1];
    uint64_t v109 = (char *)(v137 + 16 * *v103);
    uint64_t v110 = (char *)(v137 + 16LL * *v107);
    uint64_t v3 = v139;
    swift_bridgeObjectRetain();
    specialized _merge<A>(low:mid:high:buffer:by:)(v109, v110, v137 + 16 * v108, v131, v139);
    if (v136) {
      break;
    }
    if (v108 < v104) {
      goto LABEL_135;
    }
    if (v106 > *((void *)v133 + 2)) {
      goto LABEL_136;
    }
    unint64_t v111 = v106;
    uint64_t *v103 = v104;
    *(void *)(v105 + 16 * v102 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v108;
    unint64_t v112 = *((void *)v133 + 2);
    if (v106 >= v112) {
      goto LABEL_137;
    }
    uint64_t v3 = v105;
    unint64_t v11 = v133;
    uint64_t v136 = 0LL;
    unint64_t v61 = v112 - 1;
    memmove(v107, v107 + 2, 16 * (v112 - 1 - v111));
    *((void *)v133 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v112 - 1;
    Swift::Int v10 = v130;
    if (v112 <= 2) {
      goto LABEL_108;
    }
  }

LABEL_113:
  swift_bridgeObjectRelease();
  uint64_t v3 = v139;
  if (v128 < -1) {
    goto LABEL_156;
  }
  *(void *)(v127 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = 0LL;
  swift_bridgeObjectRelease_n(v139, 2LL);
LABEL_132:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n(v3, 2LL);
}

      swift_bridgeObjectRetain();
      uint64_t v123 = OUTLINED_FUNCTION_10_29();
      uint64_t v124 = v53;
      double v53 = v123;
      OUTLINED_FUNCTION_7_4(v124);
    }

    else
    {
LABEL_18:
      if (v46)
      {
        OUTLINED_FUNCTION_8_1();
        double v53 = OUTLINED_FUNCTION_10_29();
LABEL_14:
        swift_bridgeObjectRelease();
      }

      else
      {
        double v53 = *(void *)((char *)&dword_10 + (v38 & 0xFFFFFFFFFFFFF8LL));
      }
    }
  }

  if ((OUTLINED_FUNCTION_171_7() & 1) != 0)
  {
    OUTLINED_FUNCTION_39();
    unint64_t v60 = (void *)*((void *)v28 + 5);
    v152[0] = _swiftEmptyArrayStorage;
    if (v54)
    {
      if (v45 < 0) {
        uint64_t v38 = v45;
      }
      else {
        uint64_t v38 = v45 & 0xFFFFFFFFFFFFFF8LL;
      }
      OUTLINED_FUNCTION_20_14();
      unint64_t v61 = OUTLINED_FUNCTION_15_4();
    }

    else
    {
      unint64_t v61 = *(void *)((char *)&dword_10 + (v45 & 0xFFFFFFFFFFFFF8LL));
      OUTLINED_FUNCTION_20_14();
    }

    if (!v61)
    {
      OUTLINED_FUNCTION_13_1();
      uint64_t v90 = _swiftEmptyArrayStorage;
LABEL_65:
      OUTLINED_FUNCTION_13_1();
      OUTLINED_FUNCTION_102_11( (uint64_t)v90,  *(uint64_t (**)(uint64_t, void, void))(class metadata base offset for StartCallCATs + *v60 + 352));
      OUTLINED_FUNCTION_34_0();
      goto LABEL_139;
    }

    uint64_t v150 = v60;
    OUTLINED_FUNCTION_18_22();
    if (v61 >= 1)
    {
      for (uint64_t i = 0LL; i != v61; ++i)
      {
        if ((v45 & 0xC000000000000001LL) != 0) {
          unint64_t v63 = OUTLINED_FUNCTION_28_61(i);
        }
        else {
          unint64_t v63 = (uint64_t)OUTLINED_FUNCTION_27_10(v45 + 8 * i);
        }
        uint64_t v64 = (void *)v63;
        OUTLINED_FUNCTION_144_9();
        uint64_t v65 = v154;
        OUTLINED_FUNCTION_195_3();
        OUTLINED_FUNCTION_64_28();
        __swift_destroy_boxed_opaque_existential_1(v153);
        static PhonePerson.make(phonePerson:options:locale:)(v64, 0, v147);
        OUTLINED_FUNCTION_211_1();
        OUTLINED_FUNCTION_52_32(v147, v66);

        if (v65)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v67);
          OUTLINED_FUNCTION_40_8();
          if (v69) {
            OUTLINED_FUNCTION_3_25((uint64_t)v64 + 1, v68);
          }
          uint64_t v70 = OUTLINED_FUNCTION_157_6();
          specialized Array._endMutation()(v70, v71, v72, v73);
        }
      }

      OUTLINED_FUNCTION_13_1();
      uint64_t v90 = (void *)v152[0];
      goto LABEL_65;
    }

    __break(1u);
    goto LABEL_115;
  }

  uint64_t v146 = (uint64_t)v28;
  BOOL v74 = OUTLINED_FUNCTION_20_14();
  PhoneContactDisambiguationProperties.isHandleDisambiguation.getter(v74);
  uint64_t v76 = v75;
  uint64_t v77 = OUTLINED_FUNCTION_13_1();
  if ((v76 & 1) != 0) {
    goto LABEL_56;
  }
  if (v54)
  {
LABEL_115:
    OUTLINED_FUNCTION_20_14();
    uint64_t v78 = OUTLINED_FUNCTION_61_1();
    uint64_t v77 = OUTLINED_FUNCTION_13_1();
    goto LABEL_52;
  }

  uint64_t v78 = *(void *)((char *)&dword_10 + (v45 & 0xFFFFFFFFFFFFF8LL));
LABEL_52:
  if (v78 == 1)
  {
    OUTLINED_FUNCTION_65_21(v77, (v45 & 0xC000000000000001LL) == 0);
    if ((v45 & 0xC000000000000001LL) != 0) {
      OUTLINED_FUNCTION_28_61(0LL);
    }
    else {
      OUTLINED_FUNCTION_129_14();
    }
    OUTLINED_FUNCTION_146_9();
    uint64_t v80 = v79;

    if ((v80 & 1) != 0)
    {
LABEL_56:
      if (v38)
      {
        if (v46)
        {
          OUTLINED_FUNCTION_8_1();
          uint64_t v125 = OUTLINED_FUNCTION_61_1();
          uint64_t v77 = OUTLINED_FUNCTION_39();
          if (v125) {
            goto LABEL_59;
          }
        }

        else if (*(void *)((char *)&dword_10 + (v38 & 0xFFFFFFFFFFFFFF8LL)))
        {
LABEL_59:
          OUTLINED_FUNCTION_6_7(v77, (v38 & 0xC000000000000001LL) == 0);
          if ((v38 & 0xC000000000000001LL) != 0) {
            uint64_t v81 = OUTLINED_FUNCTION_29_7();
          }
          else {
            uint64_t v81 = (uint64_t)OUTLINED_FUNCTION_109_12();
          }
          uint64_t v82 = (void *)v81;
          OUTLINED_FUNCTION_39();
          uint64_t v83 = v82;
          OUTLINED_FUNCTION_146_9();

          goto LABEL_119;
        }

        OUTLINED_FUNCTION_39();
      }

      uint64_t v83 = 0LL;
LABEL_119:
      OUTLINED_FUNCTION_91_19();
      uint64_t v127 = v126;
      if (v54) {
        goto LABEL_134;
      }
      uint64_t v128 = *(void *)((char *)&dword_10 + (v45 & 0xFFFFFFFFFFFFF8LL));
      OUTLINED_FUNCTION_20_14();
      for (; v128; uint64_t v128 = OUTLINED_FUNCTION_61_1())
      {
        OUTLINED_FUNCTION_123_10((uint64_t)&a17);
        while (1)
        {
          Swift::Int v129 = (char *)v83 - 4;
          Swift::Int v130 = v53 ? (id)OUTLINED_FUNCTION_28_61((uint64_t)v83 - 4) : *(id *)(v45 + 8LL * (void)v83);
          uint64_t v131 = v130;
          uint64_t v38 = (unint64_t)v83 - 3;
          if (__OFADD__(v129, 1LL)) {
            break;
          }
          unint64_t v132 = OUTLINED_FUNCTION_155_7();
          if (!v132)
          {
            OUTLINED_FUNCTION_13_1();

LABEL_132:
            uint64_t v83 = v150;
            goto LABEL_136;
          }

          OUTLINED_FUNCTION_175_4(v132);
          OUTLINED_FUNCTION_152_9();

          if (v46 == 2)
          {
            uint64_t v83 = (char *)v83 + 1;
            if (v38 != v128) {
              continue;
            }
          }

          unint64_t v133 = OUTLINED_FUNCTION_13_1();
          goto LABEL_132;
        }

        __break(1u);
LABEL_134:
        OUTLINED_FUNCTION_20_14();
      }

      unint64_t v133 = OUTLINED_FUNCTION_13_1();
      double v53 = v45 & 0xC000000000000001LL;
LABEL_136:
      OUTLINED_FUNCTION_65_21(v133, v53 == 0);
      if (v53) {
        os_log_type_t v134 = OUTLINED_FUNCTION_28_61(0LL);
      }
      else {
        os_log_type_t v134 = (uint64_t)OUTLINED_FUNCTION_129_14();
      }
      Swift::Int v135 = (void *)v134;
      OUTLINED_FUNCTION_13_1();
      OUTLINED_FUNCTION_18_22();
      OUTLINED_FUNCTION_90_21((uint64_t)&a12);
      OUTLINED_FUNCTION_51_6();
      OUTLINED_FUNCTION_70_23(v135, v127 & 1, v145);
      uint64_t v137 = v136;

      OUTLINED_FUNCTION_52_32(v145, *(uint64_t (**)(uint64_t, void))(v151 + 8));
      OUTLINED_FUNCTION_124_11();
      uint64_t v138 = OUTLINED_FUNCTION_212_3((uint64_t)&a13);
      ((void (*)(uint64_t))v38)(v138);

      OUTLINED_FUNCTION_31_1(v137);
      goto LABEL_139;
    }
  }

  outlined init with copy of Result<TemplatingResult, Error>(v146, (uint64_t)v153, a23);
  if (v78 < 6)
  {
    OUTLINED_FUNCTION_196_7();
LABEL_71:
    OUTLINED_FUNCTION_13_1();
    OUTLINED_FUNCTION_147_5();
    if (v59)
    {
      OUTLINED_FUNCTION_39();
      (*(void (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                               + **(void **)(v146 + 40)
                                               + 384))( v148,  v149);
      goto LABEL_139;
    }

    if (!v38) {
      goto LABEL_82;
    }
    if (v46)
    {
      OUTLINED_FUNCTION_8_1();
      uint64_t v95 = (void *)OUTLINED_FUNCTION_61_1();
      uint64_t v94 = OUTLINED_FUNCTION_39();
      if (!v95) {
        goto LABEL_80;
      }
    }

    else
    {
      uint64_t v95 = *(void **)((char *)&dword_10 + (v38 & 0xFFFFFFFFFFFFFF8LL));
      if (!v95) {
        goto LABEL_80;
      }
    }

    OUTLINED_FUNCTION_6_7(v94, (v38 & 0xC000000000000001LL) == 0);
    if ((v38 & 0xC000000000000001LL) != 0) {
      uint64_t v96 = OUTLINED_FUNCTION_29_7();
    }
    else {
      uint64_t v96 = (uint64_t)OUTLINED_FUNCTION_109_12();
    }
    uint64_t v95 = (void *)v96;
LABEL_80:
    uint64_t v97 = OUTLINED_FUNCTION_39();
    uint64_t v98 = OUTLINED_FUNCTION_46_7(v97, "relationship");

    if (v98)
    {
      uint64_t v99 = v141;
      INPersonRelationship.toSpeakableString(startCallCats:)();

LABEL_83:
      OUTLINED_FUNCTION_102_11( v99,  *(uint64_t (**)(uint64_t, void, void))(class metadata base offset for StartCallCATs + **(void **)(v146 + 40)
                                                          + 256));
      outlined destroy of PhoneCallNLIntent?(v99, &demangling cache variable for type metadata for SpeakableString?);
      goto LABEL_139;
    }

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    uint64_t v7 = *a4;
    uint64_t v8 = (uint64_t *)(*a4 + 16 * a3);
    while (2)
    {
      uint64_t v9 = *(void *)(v7 + 16 * v6 + 8);
      uint64_t v10 = a1;
      char v24 = v8;
      do
      {
        uint64_t v12 = *(v8 - 2);
        uint64_t v11 = *(v8 - 1);
        if (*(void *)(a5 + 16))
        {
          uint64_t v13 = *v8;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v9);
          double v15 = 0.0;
          double v16 = 0.0;
          if ((v17 & 1) != 0) {
            double v16 = *(double *)(*(void *)(a5 + 56) + 8 * v14);
          }
          if (*(void *)(a5 + 16))
          {
            swift_bridgeObjectRetain();
            unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v11);
            if ((v19 & 1) != 0) {
              double v15 = *(double *)(*(void *)(a5 + 56) + 8 * v18);
            }
            swift_bridgeObjectRelease();
          }
        }

        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          double v16 = 0.0;
          double v15 = 0.0;
        }

        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if (v15 >= v16) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }

        uint64_t v21 = *v8;
        uint64_t v9 = v8[1];
        *(_OWORD *)uint64_t v8 = *((_OWORD *)v8 - 1);
        *(v8 - 1) = v9;
        *(v8 - __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v21;
        v8 -= 2;
        ++v10;
      }

      while (v6 != v10);
      ++v6;
      uint64_t v8 = v24 + 2;
      if (v6 != a2) {
        continue;
      }
      break;
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)( char *a1, char *a2, unint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  uint64_t v10 = a2 - a1;
  uint64_t v11 = (a2 - a1) / 16;
  uint64_t v12 = a3 - (void)a2;
  uint64_t v13 = (uint64_t)(a3 - (void)a2) / 16;
  if (v11 >= v13)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    uint64_t v51 = a4;
    unint64_t v31 = &a4[16 * v13];
    if (v9 >= v8 || v12 <= 15)
    {
      double v16 = (uint64_t *)a4;
      unint64_t v14 = &a4[16 * v13];
      goto LABEL_59;
    }

    double v33 = (char *)(a3 - 16);
    unint64_t v14 = v31;
    while (1)
    {
      char v34 = (uint64_t *)(v14 - 16);
      uint64_t v35 = *((void *)v14 - 1);
      uint64_t v37 = *((void *)v8 - 2);
      uint64_t v36 = *((void *)v8 - 1);
      if (*(void *)(a5 + 16))
      {
        uint64_t v38 = *v34;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v38, v35);
        double v40 = 0.0;
        double v41 = 0.0;
        if ((v42 & 1) != 0) {
          double v41 = *(double *)(*(void *)(a5 + 56) + 8 * v39);
        }
        if (*(void *)(a5 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v36);
          if ((v44 & 1) != 0) {
            double v40 = *(double *)(*(void *)(a5 + 56) + 8 * v43);
          }
          swift_bridgeObjectRelease();
        }
      }

      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        double v41 = 0.0;
        double v40 = 0.0;
      }

      uint64_t v45 = v33 + 16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v40 >= v41)
      {
        BOOL v48 = v45 != v14 || v33 >= v14;
        v14 -= 16;
        Swift::Int v47 = v51;
        if (!v48) {
          goto LABEL_54;
        }
      }

      else
      {
        BOOL v46 = v45 != v8 || v33 >= v8;
        char v34 = (uint64_t *)(v8 - 16);
        v8 -= 16;
        Swift::Int v47 = v51;
        if (!v46) {
          goto LABEL_54;
        }
      }

      *(_OWORD *)double v33 = *(_OWORD *)v34;
LABEL_54:
      v33 -= 16;
      if (v8 <= v9 || v14 <= v47)
      {
        double v16 = (uint64_t *)v51;
        goto LABEL_59;
      }
    }
  }

  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 16, a4);
  unint64_t v14 = &a4[16 * v11];
  BOOL v15 = (unint64_t)v8 >= a3 || v10 <= 15;
  double v16 = (uint64_t *)a4;
  if (!v15)
  {
    while (1)
    {
      uint64_t v17 = *((void *)v8 + 1);
      uint64_t v18 = v16[1];
      if (*(void *)(a5 + 16))
      {
        uint64_t v19 = *v16;
        uint64_t v20 = *(void *)v8;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v17);
        double v22 = 0.0;
        double v23 = 0.0;
        if ((v24 & 1) != 0) {
          double v23 = *(double *)(*(void *)(a5 + 56) + 8 * v21);
        }
        if (*(void *)(a5 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v18);
          if ((v26 & 1) != 0) {
            double v22 = *(double *)(*(void *)(a5 + 56) + 8 * v25);
          }
          swift_bridgeObjectRelease();
        }
      }

      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        double v23 = 0.0;
        double v22 = 0.0;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v22 < v23) {
        break;
      }
      uint64_t v28 = v16;
      BOOL v27 = v9 == (char *)v16;
      v16 += 2;
      if (!v27) {
        goto LABEL_21;
      }
LABEL_22:
      v9 += 16;
    }

    BOOL v27 = v9 == v8;
    uint64_t v28 = v8;
    v8 += 16;
    if (v27 && v9 < v8) {
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)uint64_t v9 = *v28;
    goto LABEL_22;
  }

void *outlined release of _NativeDictionary<String, Double>.Iterator(void *a1)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_3_98@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

void *AddCallParticipantContactSlotResolver.__allocating_init(rchFlowContext:sharedGlobals:)( uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v9 = (void *)OUTLINED_FUNCTION_8_2(v4, 80LL);
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  outlined init with take of AppSelectionSignalComponent(a4, (uint64_t)(v9 + 5));
  return v9;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay27PhoneCallFlowDelegatePlugin04SiriF7Contact_pGSaySo8INPersonCGG_ALs5NeverOTg504_s27fghi25Plugin03AddB30Participantl45SlotResolverC07resolveI08skIntent02nlM0SaySo8m13CGSo05INAddbgY63C_AA0aB8NLIntent_ptYaKFAhA04SiriaH0_p_AHtcACcfu_AhaM_p_AHtcfu0_AH0qgsltU0CTf1cn_n( unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v33 = (unint64_t)a2 >> 62;
  uint64_t v6 = *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8LL));
  while (1)
  {
    uint64_t v7 = v6 >= v5 ? v5 : v6;
    double v40 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v7);
    if (v7 < 0) {
      break;
    }
    uint64_t v28 = v6;
    unint64_t v29 = v4;
    uint64_t v30 = v5;
    if (v7)
    {
      uint64_t v8 = v4 + 32;
      uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8LL;
      if (a2 < 0) {
        uint64_t v9 = a2;
      }
      else {
        uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v31 = v9;
      unint64_t v4 = a2 & 0xC000000000000001LL;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v10 = 0LL;
      while (v7 != v10)
      {
        outlined init with copy of SignalProviding(v8, (uint64_t)v36);
        if (v33)
        {
          swift_bridgeObjectRetain();
          uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v31);
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v11 = *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFFF8LL));
        }

        if (v10 == v11) {
          goto LABEL_51;
        }
        if (v4)
        {
          id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a2);
        }

        else
        {
          id v12 = *(id *)(a2 + 8 * v10 + 32);
        }

        uint64_t v13 = v12;
        ++v10;
        outlined init with take of AppSelectionSignalComponent(v36, (uint64_t)v38);
        *((void *)&v39 + 1) = v13;
        AddCallParticipantContactSlotResolver.downgradePartialMatches(contact:skeleton:)(v38, v13);
        uint64_t v14 = outlined destroy of SpeakableString?( (uint64_t)v38,  &demangling cache variable for type metadata for (SiriPhoneContact, INPerson));
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v14);
        uint64_t v15 = v40[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
        uint64_t v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v13);
        specialized ContiguousArray._endMutation()(v16);
        v8 += 40LL;
        if (v7 == v10) {
          goto LABEL_24;
        }
      }

      __break(1u);
LABEL_43:
      __break(1u);
    }

    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_24:
      unint64_t v4 = v29;
      uint64_t v17 = v30;
      if (v30 <= v28)
      {
LABEL_41:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v25 = v40;
        swift_release(a3);
        return (uint64_t)v25;
      }

      if (a2 < 0) {
        uint64_t v18 = a2;
      }
      else {
        uint64_t v18 = a2 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v32 = v18;
      uint64_t v19 = v29 + 40 * v7 + 32;
      while (v7 < v17)
      {
        outlined init with copy of SignalProviding(v19, (uint64_t)v35);
        if (v33)
        {
          swift_bridgeObjectRetain();
          uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v32);
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v20 = *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFFF8LL));
        }

        if (v7 == v20)
        {
          __swift_destroy_boxed_opaque_existential_1(v35);
          goto LABEL_41;
        }

        if ((a2 & 0xC000000000000001LL) != 0)
        {
          id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a2);
        }

        else
        {
          id v21 = *(id *)(a2 + 8 * v7 + 32);
        }

        double v22 = v21;
        ++v7;
        outlined init with take of AppSelectionSignalComponent(v35, (uint64_t)v36);
        *((void *)&v37 + 1) = v22;
        v38[0] = v36[0];
        v38[1] = v36[1];
        __int128 v39 = v37;
        AddCallParticipantContactSlotResolver.downgradePartialMatches(contact:skeleton:)(v38, v22);
        uint64_t v23 = outlined destroy of SpeakableString?( (uint64_t)v38,  &demangling cache variable for type metadata for (SiriPhoneContact, INPerson));
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v23);
        uint64_t v5 = v40[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v5);
        uint64_t v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, v22);
        specialized ContiguousArray._endMutation()(v24);
        v19 += 40LL;
        uint64_t v17 = v30;
        if (v30 == v7) {
          goto LABEL_41;
        }
      }
    }

    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    if (a2 < 0) {
      uint64_t v27 = a2;
    }
    else {
      uint64_t v27 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease();
  }

  __break(1u);
LABEL_51:
  swift_release(a3);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(v36);
  __break(1u);
  return result;
}

uint64_t SiriInferenceContactSlotResolver.rchFlowContext.getter()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = (void *)v0[3];
  uint64_t v3 = (void *)v0[4];
  swift_retain(v1);
  id v4 = v2;
  id v5 = v3;
  return v1;
}

void *AddCallParticipantContactSlotResolver.init(rchFlowContext:sharedGlobals:)( uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  void v4[2] = a1;
  void v4[3] = a2;
  void v4[4] = a3;
  outlined init with take of AppSelectionSignalComponent(a4, (uint64_t)(v4 + 5));
  return v4;
}

uint64_t AddCallParticipantContactSlotResolver.resolveSlot(skIntent:nlIntent:)(uint64_t a1, uint64_t a2)
{
  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  uint64_t v4 = type metadata accessor for ResolvedSiriKitContact(0LL);
  v3[22] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[23] = v5;
  _BYTE v3[24] = OUTLINED_FUNCTION_23(v5);
  uint64_t v6 = type metadata accessor for Locale(0LL);
  v3[25] = OUTLINED_FUNCTION_23(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for ContactResolverConfigHashable(0LL);
  v3[26] = OUTLINED_FUNCTION_23(*(void *)(v7 - 8));
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

char *AddCallParticipantContactSlotResolver.resolveSlot(skIntent:nlIntent:)()
{
  uint64_t v1 = *(void **)(v0 + 160);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  OUTLINED_FUNCTION_49_0(v1);
  uint64_t v4 = *(void *)((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 136))(v2, v3) + 16);
  swift_bridgeObjectRelease();
  if (v4)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v5 = OUTLINED_FUNCTION_15_1();
    uint64_t v6 = (os_log_s *)OUTLINED_FUNCTION_12_1(v5, (uint64_t)static Logger.siriPhone);
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_1_0();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl( &dword_0,  v6,  v7,  "#AddCallParticipantContactSlotResolver user requested group name, which is not supported. Adding placeholder INP ersons. This will force the extension to return MultipleContactsUnsupported, because we can only add 1 person at a time.",  v8,  2u);
      OUTLINED_FUNCTION_0_2((uint64_t)v8);
    }

    type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
    id v9 = objc_allocWithZone(&OBJC_CLASS___INPersonHandle);
    OUTLINED_FUNCTION_19_1();
    id v13 = @nonobjc INPersonHandle.init(value:type:)(v10, v11, v12);
    Class isa = INPerson.init(personHandle:)((INPersonHandle)v13).super.isa;
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)(2LL);
    uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFF8LL);
    void v16[2] = 2LL;
    uint64_t v98 = (void *)v15;
    void v16[4] = isa;
    v16[5] = isa;
    uint64_t v17 = isa;
    specialized Array._endMutation()(v17, v18, v19, v20);
    uint64_t v21 = (uint64_t)v98;
    goto LABEL_7;
  }

  if (*(void *)(*(void *)(v0 + 168) + 16LL))
  {
    uint64_t v24 = App.appIdentifier.getter();
    if (v25)
    {
      uint64_t v26 = v24;
      uint64_t v27 = v25;
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1LL,  (uint64_t)_swiftEmptyArrayStorage);
      uint64_t v29 = v28;
      unint64_t v31 = *(void *)(v28 + 16);
      unint64_t v30 = *(void *)(v28 + 24);
      if (v31 >= v30 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v30 > 1,  v31 + 1,  1LL,  v28);
        uint64_t v29 = v87;
      }

      *(void *)(v29 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v31 + 1;
      unint64_t v32 = v29 + 16 * v31;
      *(void *)(v32 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v26;
      *(void *)(v32 + 40) = v27;
    }
  }

  uint64_t v94 = (void *)(v0 + 96);
  uint64_t v92 = v1;
  if (one-time initialization token for emptyAddCallParticipantIntent != -1) {
    swift_once( &one-time initialization token for emptyAddCallParticipantIntent,  one-time initialization function for emptyAddCallParticipantIntent);
  }
  uint64_t v89 = *(void **)(v0 + 152);
  unint64_t v33 = *(void **)(v0 + 168);
  uint64_t v90 = *(void **)(v0 + 160);
  id v34 = [(id)static PhoneCallIntentClassNames.emptyAddCallParticipantIntent _className];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v34);

  uint64_t v35 = v33 + 5;
  uint64_t v37 = v33[8];
  uint64_t v36 = v33[9];
  __swift_project_boxed_opaque_existential_1(v33 + 5, v37);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v36);
  uint64_t v38 = *(void *)(v0 + 40);
  uint64_t v39 = *(void *)(v0 + 48);
  OUTLINED_FUNCTION_49_0((void *)(v0 + 16));
  dispatch thunk of DeviceState.siriLocale.getter(v38, v39);
  outlined init with copy of SignalProviding((uint64_t)(v33 + 5), v0 + 56);
  swift_bridgeObjectRetain();
  id v40 = v89;
  ContactResolverConfigHashable.init(intentTypeName:locale:bundleIds:siriKitIntent:sharedGlobals:)();
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  uint64_t v41 = v33[8];
  uint64_t v42 = v33[9];
  OUTLINED_FUNCTION_49_0(v35);
  (*(void (**)(uint64_t, uint64_t))(v42 + 96))(v41, v42);
  uint64_t v43 = *(void *)(v0 + 128);
  OUTLINED_FUNCTION_49_0(v94);
  char v44 = v1;
  uint64_t v45 = v1[3];
  uint64_t v46 = v1[4];
  __swift_project_boxed_opaque_existential_1(v90, v45);
  (*(void (**)(uint64_t, uint64_t))(v46 + 128))(v45, v46);
  uint64_t v47 = (*(uint64_t (**)(void))(v43 + 16))();
  OUTLINED_FUNCTION_13_1();
  uint64_t v48 = *(void *)(v47 + 16);
  if (v48)
  {
    uint64_t v49 = *(void *)(v0 + 184);
    uint64_t v98 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v48);
    unint64_t v50 = v47 + ((*(unsigned __int8 *)(v49 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80));
    uint64_t v51 = *(void *)(v49 + 72);
    unint64_t v52 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v49 + 16);
    do
    {
      uint64_t v53 = *(void *)(v0 + 192);
      uint64_t v54 = *(void *)(v0 + 176);
      uint64_t v55 = v52(v53, v50, v54);
      uint64_t v56 = ResolvedSiriKitContact.person.getter(v55);
      uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(v53, v54);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v57);
      uint64_t v58 = v98[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v58);
      uint64_t v59 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v58, v56);
      specialized ContiguousArray._endMutation()(v59);
      v50 += v51;
      --v48;
    }

    while (v48);
    unint64_t v60 = v98;
    swift_bridgeObjectRelease();
    char v44 = v92;
  }

  else
  {
    OUTLINED_FUNCTION_39();
    unint64_t v60 = _swiftEmptyArrayStorage;
  }

  uint64_t v62 = *(void **)(v0 + 160);
  uint64_t v61 = *(void *)(v0 + 168);
  __swift_destroy_boxed_opaque_existential_1(v94);
  uint64_t v64 = v44[3];
  uint64_t v63 = v44[4];
  __swift_project_boxed_opaque_existential_1(v62, v64);
  unint64_t v65 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 24))(v64, v63);
  swift_retain_n(v61, 2LL);
  uint64_t v21 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay27PhoneCallFlowDelegatePlugin04SiriF7Contact_pGSaySo8INPersonCGG_ALs5NeverOTg504_s27fghi25Plugin03AddB30Participantl45SlotResolverC07resolveI08skIntent02nlM0SaySo8m13CGSo05INAddbgY63C_AA0aB8NLIntent_ptYaKFAhA04SiriaH0_p_AHtcACcfu_AhaM_p_AHtcfu0_AH0qgsltU0CTf1cn_n( v65,  (uint64_t)v60,  v61);
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_13_1();
  swift_bridgeObjectRelease();
  swift_release(v61);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v66 = OUTLINED_FUNCTION_15_1();
  __swift_project_value_buffer(v66, (uint64_t)static Logger.siriPhone);
  uint64_t v67 = swift_bridgeObjectRetain_n(v21, 2LL);
  unint64_t v68 = (void *)Logger.logObject.getter(v67);
  os_log_type_t v70 = static os_log_type_t.debug.getter(v68, v69);
  uint64_t v71 = v0 + 152;
  if (!os_log_type_enabled((os_log_t)v68, v70))
  {
    uint64_t v81 = *(void *)(v0 + 208);

    OUTLINED_FUNCTION_7_4(v21);
    uint64_t v82 = v81;
LABEL_40:
    outlined destroy of ContactResolverConfigHashable(v82);
LABEL_7:
    uint64_t v22 = *(void *)(v0 + 192);
    swift_task_dealloc(*(void *)(v0 + 208));
    OUTLINED_FUNCTION_23_3();
    swift_task_dealloc(v22);
    return (char *)(*(uint64_t (**)(uint64_t))(v0 + 8))(v21);
  }

  os_log_type_t v95 = v70;
  uint64_t v72 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v93 = swift_slowAlloc(32LL, -1LL);
  uint64_t v96 = v72;
  uint64_t v97 = v93;
  *(_DWORD *)uint64_t v72 = 136315138;
  if ((unint64_t)v21 >> 62)
  {
    if (v21 < 0) {
      uint64_t v88 = v21;
    }
    else {
      uint64_t v88 = v21 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v73 = _CocoaArrayWrapper.endIndex.getter(v88);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v73 = *(void *)((char *)&dword_10 + (v21 & 0xFFFFFFFFFFFFF8LL));
  }

  if (!v73)
  {
    unint64_t v75 = _swiftEmptyArrayStorage;
LABEL_39:
    uint64_t v91 = *(void *)(v0 + 208);
    uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INScoredPerson]);
    uint64_t v84 = Array.description.getter(v75, v83);
    unint64_t v86 = v85;
    OUTLINED_FUNCTION_62();
    *(void *)(v0 + 14__swift_destroy_boxed_opaque_existential_1(v0 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v86, &v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v71, v96 + 4);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_7_4(v21);
    _os_log_impl( &dword_0,  (os_log_t)v68,  v95,  "#AddCallParticipantContactSlotResolver resolved contacts: %s",  v96,  0xCu);
    swift_arrayDestroy(v93, 1LL);
    OUTLINED_FUNCTION_0_2(v93);
    OUTLINED_FUNCTION_0_2((uint64_t)v96);

    uint64_t v82 = v91;
    goto LABEL_40;
  }

  uint64_t v98 = _swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v73 & ~(v73 >> 63),  0);
  if ((v73 & 0x8000000000000000LL) == 0)
  {
    uint64_t v74 = 0LL;
    unint64_t v75 = v98;
    do
    {
      if ((v21 & 0xC000000000000001LL) != 0) {
        id v76 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v74, v21);
      }
      else {
        id v76 = *(id *)(v21 + 8 * v74 + 32);
      }
      uint64_t v77 = v76;
      uint64_t v78 = (void *)outlined bridged method (pb) of @objc INPerson.scoredAlternatives.getter(v76);

      if (!v78) {
        uint64_t v78 = _swiftEmptyArrayStorage;
      }
      uint64_t v98 = v75;
      unint64_t v80 = v75[2];
      unint64_t v79 = v75[3];
      if (v80 >= v79 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v79 > 1),  v80 + 1,  1);
        unint64_t v75 = v98;
      }

      ++v74;
      v75[2] = v80 + 1;
      v75[v80 + 4] = v78;
    }

    while (v73 != v74);
    uint64_t v71 = v0 + 152;
    goto LABEL_39;
  }

  __break(1u);
  return result;
}

uint64_t AddCallParticipantContactSlotResolver.resolveSlot(skIntent:nlIntent:_:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = type metadata accessor for TaskPriority(0LL);
  __swift_storeEnumTagSinglePayload(v12, 1LL, 1LL, v13);
  outlined init with copy of SignalProviding(a2, (uint64_t)v18);
  uint64_t v14 = (void *)OUTLINED_FUNCTION_8_2((uint64_t)&unk_40F338, 104LL);
  v14[2] = 0LL;
  v14[3] = 0LL;
  v14[4] = v5;
  void v14[5] = a1;
  outlined init with take of AppSelectionSignalComponent(v18, (uint64_t)(v14 + 6));
  v14[11] = a3;
  v14[12] = a4;
  swift_retain();
  id v15 = a1;
  swift_retain();
  uint64_t v16 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v12,  (uint64_t)&async function pointer to partial apply for closure #1 in AddCallParticipantContactSlotResolver.resolveSlot(skIntent:nlIntent:_:),  (uint64_t)v14);
  return swift_release(v16);
}

uint64_t closure #1 in AddCallParticipantContactSlotResolver.resolveSlot(skIntent:nlIntent:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[7] = a7;
  v8[8] = a8;
  v8[5] = a5;
  void v8[6] = a6;
  v8[4] = a4;
  return swift_task_switch( closure #1 in AddCallParticipantContactSlotResolver.resolveSlot(skIntent:nlIntent:_:),  0LL,  0LL);
}

uint64_t closure #1 in AddCallParticipantContactSlotResolver.resolveSlot(skIntent:nlIntent:_:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = swift_task_alloc(48LL);
  *(void *)(v0 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v2;
  *(_OWORD *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = *(_OWORD *)(v0 + 32);
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v1;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to Result<>.init(catching:)[1]);
  *(void *)(v0 + 80) = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  *uint64_t v3 = v0;
  v3[1] = closure #1 in AddCallParticipantContactSlotResolver.resolveSlot(skIntent:nlIntent:_:);
  return Result<>.init(catching:)( v0 + 16,  &async function pointer to partial apply for closure #1 in closure #1 in AddCallParticipantContactSlotResolver.resolveSlot(skIntent:nlIntent:_:),  v2,  v4);
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 80LL));
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 24);
  (*(void (**)(uint64_t, void, void))(v0 + 56))(v1, 0LL, (v2 << 8));
  outlined consume of Result<[SAAceView], Error>(v1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in AddCallParticipantContactSlotResolver.resolveSlot(skIntent:nlIntent:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  os_log_type_t v7 = *(int **)(*(void *)a2 + 104LL);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)v7 + *v7);
  uint64_t v8 = (void *)swift_task_alloc(v7[1]);
  *(void *)(v4 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v8;
  *uint64_t v8 = v4;
  v8[1] = closure #1 in closure #1 in AddCallParticipantContactSlotResolver.resolveSlot(skIntent:nlIntent:_:);
  return v10(a3, a4);
}

uint64_t closure #1 in closure #1 in AddCallParticipantContactSlotResolver.resolveSlot(skIntent:nlIntent:_:)()
{
  if (v1) {
    return OUTLINED_FUNCTION_24_1(*(uint64_t (**)(void))(v3 + 8));
  }
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v0;
  OUTLINED_FUNCTION_19_1();
  return swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  **(void **)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = *(void *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void AddCallParticipantContactSlotResolver.updateIntent(value:skIntent:)(Swift::OpaquePointer a1)
{
}

void *AddCallParticipantContactSlotResolver.downgradePartialMatches(contact:skeleton:)(void *a1, void *a2)
{
  uint64_t v4 = outlined bridged method (pb) of @objc INPerson.scoredAlternatives.getter(a2);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = (uint64_t)_swiftEmptyArrayStorage;
  }
  if (!((unint64_t)v5 >> 62))
  {
    uint64_t v6 = *(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8LL));
    OUTLINED_FUNCTION_6_1();
    if (v6) {
      goto LABEL_6;
    }
LABEL_41:
    OUTLINED_FUNCTION_7_4(v5);
    goto LABEL_42;
  }

  if (v5 < 0) {
    uint64_t v43 = v5;
  }
  else {
    uint64_t v43 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  OUTLINED_FUNCTION_6_1();
  if (!_CocoaArrayWrapper.endIndex.getter(v43)) {
    goto LABEL_41;
  }
LABEL_6:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (v5 & 0xC000000000000001LL) == 0, v5);
  if ((v5 & 0xC000000000000001LL) != 0) {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v5);
  }
  else {
    id v7 = *(id *)(v5 + 32);
  }
  uint64_t v8 = v7;
  OUTLINED_FUNCTION_50();
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_6_1();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v10);
    OUTLINED_FUNCTION_50();
  }

  else
  {
    uint64_t v9 = *(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8LL));
  }

  OUTLINED_FUNCTION_50();
  if (v9 != 1 || [v8 recommendation])
  {
LABEL_31:

LABEL_42:
    id v44 = a2;
    return a2;
  }

  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v12 + 384))(v46, v11, v12);
  if (v47 != 2)
  {
    if (v47 == 255) {
      outlined destroy of SpeakableString?( (uint64_t)v46,  &demangling cache variable for type metadata for BackingContact?);
    }
    else {
      outlined destroy of BackingContact(v46);
    }
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v20 = OUTLINED_FUNCTION_15_1();
    uint64_t v21 = (void *)OUTLINED_FUNCTION_12_1(v20, (uint64_t)static Logger.siriPhone);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_29_4(v22))
    {
      uint64_t v23 = (_WORD *)OUTLINED_FUNCTION_1_0();
      *uint64_t v23 = 0;
      OUTLINED_FUNCTION_0_46( &dword_0,  v24,  v25,  "#AddCallParticipantContactSlotResolver INAddCallParticipantIntent is only supported on NLX. This should never happen!");
      OUTLINED_FUNCTION_0_2((uint64_t)v23);
    }

    goto LABEL_31;
  }

  outlined init with take of AppSelectionSignalComponent(v46, (uint64_t)v48);
  if ((AddCallParticipantContactSlotResolver.isFullMatch(contact:)(v48) & 1) != 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v13 = OUTLINED_FUNCTION_15_1();
    uint64_t v14 = (void *)OUTLINED_FUNCTION_12_1(v13, (uint64_t)static Logger.siriPhone);
    os_log_type_t v16 = static os_log_type_t.debug.getter(v14, v15);
    if (OUTLINED_FUNCTION_29_4(v16))
    {
      uint64_t v17 = (_WORD *)OUTLINED_FUNCTION_1_0();
      *uint64_t v17 = 0;
      OUTLINED_FUNCTION_0_46( &dword_0,  v18,  v19,  "#AddCallParticipantContactSlotResolver Use existing recommendation for full name match");
      OUTLINED_FUNCTION_0_2((uint64_t)v17);
    }

    __swift_destroy_boxed_opaque_existential_1(v48);
    goto LABEL_42;
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v26 = OUTLINED_FUNCTION_15_1();
  uint64_t v27 = (void *)OUTLINED_FUNCTION_12_1(v26, (uint64_t)static Logger.siriPhone);
  os_log_type_t v29 = static os_log_type_t.debug.getter(v27, v28);
  if (OUTLINED_FUNCTION_29_4(v29))
  {
    unint64_t v30 = (_WORD *)OUTLINED_FUNCTION_1_0();
    *unint64_t v30 = 0;
    OUTLINED_FUNCTION_0_46( &dword_0,  v31,  v32,  "#AddCallParticipantContactSlotResolver Downgrade confident => needsConfirmation for partial name match");
    OUTLINED_FUNCTION_0_2((uint64_t)v30);
  }

  id v33 = [v8 person];
  id v34 = [objc_allocWithZone(INScoredPerson) initWithPerson:v33 recommendation:1];

  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v36 = OUTLINED_FUNCTION_8_2(v35, 40LL);
  *(_OWORD *)(v36 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31FE60;
  *(void *)(v36 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v34;
  *(void *)&v46[0] = v36;
  specialized Array._endMutation()(v36, v37, v38, v39);
  uint64_t v40 = *(void *)&v46[0];
  id v41 = v34;
  outlined bridged method (mbgnn) of @objc INPerson.scoredAlternatives.setter(v40, (uint64_t)a2);
  id v42 = a2;

  OUTLINED_FUNCTION_62();
  __swift_destroy_boxed_opaque_existential_1(v48);
  return a2;
}

uint64_t AddCallParticipantContactSlotResolver.isFullMatch(contact:)(void *a1)
{
  uint64_t matched = type metadata accessor for MatchInfo.MatchSignals(0LL);
  uint64_t v38 = *(void *)(matched - 8);
  uint64_t v39 = matched;
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v37 = v4 - v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MatchInfo?);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v7 = v6 - v5;
  uint64_t v44 = type metadata accessor for UsoEntitySpan(0LL);
  uint64_t v8 = *(void *)(v44 - 8);
  __chkstk_darwin();
  uint64_t v36 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v45 = (char *)&v36 - v10;
  __chkstk_darwin();
  uint64_t v12 = (char *)&v36 - v11;
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  UsoContactConvertible.nameSpans.getter(v13, v14);
  uint64_t v16 = v15;
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t v46 = (char *)_swiftEmptyArrayStorage;
  uint64_t v18 = *(void *)(v15 + 16);
  if (v18)
  {
    unint64_t v19 = 0LL;
    uint64_t v42 = v8;
    uint64_t v43 = (void *)v7;
    uint64_t v20 = v44;
    uint64_t v40 = v18;
    uint64_t v41 = v15;
    while (v19 < *(void *)(v16 + 16))
    {
      unint64_t v21 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v22 = *(void *)(v8 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v12, v16 + v21 + v22 * v19, v20);
      if ((closure #1 in AddCallParticipantContactSlotResolver.isFullMatch(contact:)((uint64_t)v12) & 1) != 0)
      {
        uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
        v23(v45, v12, v20);
        uint64_t v24 = v46;
        if ((swift_isUniquelyReferenced_nonNull_native(v46) & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v20 = v44;
          uint64_t v24 = v46;
        }

        unint64_t v25 = *((void *)v24 + 2);
        if (v25 >= *((void *)v24 + 3) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v20 = v44;
          uint64_t v24 = v46;
        }

        *((void *)v24 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v25 + 1;
        v23(&v24[v21 + v25 * v22], v45, v20);
        uint64_t v46 = v24;
        uint64_t v8 = v42;
        uint64_t v7 = (uint64_t)v43;
        uint64_t v18 = v40;
        uint64_t v16 = v41;
      }

      else
      {
        OUTLINED_FUNCTION_12_71();
      }

      if (v18 == ++v19)
      {
        uint64_t v17 = v46;
        goto LABEL_14;
      }
    }

    __break(1u);
    OUTLINED_FUNCTION_12_71();
    OUTLINED_FUNCTION_39();
    uint64_t result = swift_release(v46);
    __break(1u);
  }

  else
  {
    uint64_t v20 = v44;
LABEL_14:
    OUTLINED_FUNCTION_39();
    uint64_t v26 = v17[2];
    uint64_t v27 = v36;
    if (v26)
    {
      uint64_t v28 = (char *)v17 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
      uint64_t v45 = *(char **)(v8 + 72);
      os_log_type_t v29 = *(uint64_t (**)(char *, char *, uint64_t))(v8 + 16);
      uint64_t v43 = v17;
      swift_retain();
      while (1)
      {
        uint64_t v30 = v29(v27, v28, v20);
        UsoEntitySpan.matchInfo.getter(v30);
        uint64_t v31 = v27;
        uint64_t v32 = type metadata accessor for MatchInfo(0LL);
        if (__swift_getEnumTagSinglePayload(v7, 1LL, v32) == 1)
        {
          outlined destroy of SpeakableString?(v7, &demangling cache variable for type metadata for MatchInfo?);
          OUTLINED_FUNCTION_11_68();
        }

        else
        {
          uint64_t v33 = v37;
          static MatchInfo.MatchSignals.exactMatch.getter();
          char v34 = MatchInfo.hasMatchSignals(_:)(v33);
          (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v33, v39);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8LL))(v7, v32);
          OUTLINED_FUNCTION_11_68();
          uint64_t v27 = v31;
          if ((v34 & 1) != 0)
          {
            OUTLINED_FUNCTION_24_40();
            return 1LL;
          }
        }

        uint64_t v20 = v44;
        uint64_t v28 = &v45[(void)v28];
        if (!--v26)
        {
          OUTLINED_FUNCTION_24_40();
          return 0LL;
        }
      }
    }

    swift_release(v17);
    return 0LL;
  }

  return result;
}

uint64_t closure #1 in AddCallParticipantContactSlotResolver.isFullMatch(contact:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IdentifierAppBundle(0LL);
  uint64_t v51 = *(void *)(v2 - 8);
  uint64_t v52 = v2;
  __chkstk_darwin();
  unint64_t v50 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v49 = (char *)&v48 - v4;
  uint64_t v55 = type metadata accessor for UsoEntitySpan(0LL);
  uint64_t v53 = *(void *)(v55 - 8);
  __chkstk_darwin();
  uint64_t v57 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v56 = (char *)&v48 - v6;
  uint64_t v7 = type metadata accessor for UsoEntitySpan.SpanSource(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntitySpan.SpanSource?, UsoEntitySpan.SpanSource?));
  __chkstk_darwin();
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v48 - v16;
  uint64_t v18 = __chkstk_darwin();
  uint64_t v20 = (char *)&v48 - v19;
  uint64_t v54 = a1;
  UsoEntitySpan.sourceComponent.getter(v18);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))( v17,  enum case for UsoEntitySpan.SpanSource.spanMatchSiriVocab(_:),  v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 0LL, 1LL, v7);
  uint64_t v21 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of UsoEntitySpan.SpanSource?((uint64_t)v20, (uint64_t)v13);
  outlined init with copy of UsoEntitySpan.SpanSource?((uint64_t)v17, v21);
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1LL, v7) == 1)
  {
    outlined destroy of SpeakableString?( (uint64_t)v17,  &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
    outlined destroy of SpeakableString?( (uint64_t)v20,  &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v21, 1LL, v7);
    if (EnumTagSinglePayload == 1) {
      uint64_t v23 = &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?;
    }
    else {
      uint64_t v23 = &demangling cache variable for type metadata for (UsoEntitySpan.SpanSource?, UsoEntitySpan.SpanSource?);
    }
    if (EnumTagSinglePayload == 1) {
      char v24 = -1;
    }
    else {
      char v24 = 0;
    }
  }

  else
  {
    outlined init with copy of UsoEntitySpan.SpanSource?((uint64_t)v13, (uint64_t)v15);
    if (__swift_getEnumTagSinglePayload(v21, 1LL, v7) == 1)
    {
      outlined destroy of SpeakableString?( (uint64_t)v17,  &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
      outlined destroy of SpeakableString?( (uint64_t)v20,  &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
      char v24 = 0;
      uint64_t v23 = &demangling cache variable for type metadata for (UsoEntitySpan.SpanSource?, UsoEntitySpan.SpanSource?);
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v10, v21, v7);
      lazy protocol witness table accessor for type UsoEntitySpan.SpanSource and conformance UsoEntitySpan.SpanSource();
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v10, v7);
      unint64_t v25 = *(void (**)(char *, uint64_t))(v8 + 8);
      v25(v10, v7);
      uint64_t v23 = &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?;
      outlined destroy of SpeakableString?( (uint64_t)v17,  &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
      outlined destroy of SpeakableString?( (uint64_t)v20,  &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
      v25(v15, v7);
    }
  }

  uint64_t v27 = v54;
  uint64_t v26 = v55;
  uint64_t v28 = v57;
  uint64_t v29 = v53;
  outlined destroy of SpeakableString?((uint64_t)v13, v23);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 16);
  uint64_t v31 = v56;
  uint64_t v32 = v30(v56, v27, v26);
  if ((v24 & 1) == 0)
  {
    uint64_t v40 = *(void (**)(char *, uint64_t))(v29 + 8);
    v40(v31, v26);
    v30(v28, v27, v26);
LABEL_20:
    v40(v28, v26);
    char v46 = 0;
    return v46 & 1;
  }

  uint64_t v33 = v49;
  UsoEntitySpan.appBundleSemantic.getter(v32);
  uint64_t v35 = v50;
  uint64_t v34 = v51;
  uint64_t v36 = v31;
  uint64_t v37 = v29;
  uint64_t v38 = v52;
  (*(void (**)(char *, void, uint64_t))(v51 + 104))( v50,  enum case for IdentifierAppBundle.abContacts(_:),  v52);
  LODWORD(v55) = static IdentifierAppBundle.== infix(_:_:)(v33, v35);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v34 + 8);
  v39(v35, v38);
  v39(v33, v38);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v37 + 8);
  uint64_t v41 = v36;
  uint64_t v28 = v57;
  v40(v41, v26);
  uint64_t v42 = v30(v28, v27, v26);
  if ((v55 & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v43 = UsoEntitySpan.label.getter(v42);
  if (!v44) {
    goto LABEL_20;
  }
  if (v43 == 0x75466E6F73726570LL && v44 == 0xEE00656D614E6C6CLL) {
    char v46 = 1;
  }
  else {
    char v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, 0x75466E6F73726570LL, 0xEE00656D614E6C6CLL, 0LL);
  }
  v40(v28, v26);
  swift_bridgeObjectRelease();
  return v46 & 1;
}

void *AddCallParticipantContactSlotResolver.deinit()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = (void *)v0[4];
  swift_release(v0[2]);

  __swift_destroy_boxed_opaque_existential_1(v0 + 5);
  return v0;
}

uint64_t AddCallParticipantContactSlotResolver.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

uint64_t protocol witness for SlotResolver.resolveSlot(skIntent:nlIntent:) in conformance AddCallParticipantContactSlotResolver( uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  uint64_t v7 = *(int **)(**(void **)v3 + 104LL);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)v7 + *v7);
  uint64_t v8 = (void *)swift_task_alloc(v7[1]);
  *(void *)(v4 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for SlotResolver.resolveSlot(skIntent:nlIntent:) in conformance AddCallParticipantContactSlotResolver;
  return v10(a2, a3);
}

uint64_t protocol witness for SlotResolver.resolveSlot(skIntent:nlIntent:) in conformance AddCallParticipantContactSlotResolver()
{
  if (!v1) {
    **(void **)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v0;
  }
  return OUTLINED_FUNCTION_24_1(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t protocol witness for SlotResolver.resolveSlot(skIntent:nlIntent:_:) in conformance AddCallParticipantContactSlotResolver( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = swift_allocObject(&unk_40F360, 32LL, 7LL);
  *(void *)(v9 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a3;
  *(void *)(v9 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a4;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, void (*)(uint64_t, uint64_t, __int16), uint64_t))(**(void **)v4 + 112LL);
  swift_retain();
  v10( a1,  a2,  partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<[INPerson], SlotResolverError>) -> (),  v9);
  return swift_release(v9);
}

uint64_t protocol witness for SlotResolver.updateIntent(value:skIntent:) in conformance AddCallParticipantContactSlotResolver( void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)v1 + 120LL))(*a1);
}

uint64_t outlined bridged method (pb) of @objc INPerson.scoredAlternatives.getter(void *a1)
{
  id v1 = [a1 scoredAlternatives];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INScoredPerson,  &OBJC_CLASS___INScoredPerson_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t sub_219530()
{
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 48));
  swift_release(*(void *)(v0 + 96));
  return swift_deallocObject(v0, 104LL, 7LL);
}

uint64_t partial apply for closure #1 in AddCallParticipantContactSlotResolver.resolveSlot(skIntent:nlIntent:_:)()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = (uint64_t)(v0 + 6);
  uint64_t v6 = v0[11];
  uint64_t v5 = v0[12];
  uint64_t v7 = (void *)swift_task_alloc(dword_43A744);
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v7;
  uint64_t v8 = OUTLINED_FUNCTION_15_66(v7);
  return closure #1 in AddCallParticipantContactSlotResolver.resolveSlot(skIntent:nlIntent:_:)( v8,  v9,  v10,  v2,  v3,  v4,  v6,  v5);
}

uint64_t type metadata accessor for AddCallParticipantContactSlotResolver()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin37AddCallParticipantContactSlotResolver);
}

uint64_t outlined init with copy of UsoEntitySpan.SpanSource?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UsoEntitySpan.SpanSource and conformance UsoEntitySpan.SpanSource()
{
  unint64_t result = lazy protocol witness table cache variable for type UsoEntitySpan.SpanSource and conformance UsoEntitySpan.SpanSource;
  if (!lazy protocol witness table cache variable for type UsoEntitySpan.SpanSource and conformance UsoEntitySpan.SpanSource)
  {
    uint64_t v1 = type metadata accessor for UsoEntitySpan.SpanSource(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UsoEntitySpan.SpanSource, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UsoEntitySpan.SpanSource and conformance UsoEntitySpan.SpanSource);
  }

  return result;
}

void *outlined destroy of BackingContact(void *a1)
{
  return a1;
}

uint64_t sub_2196D4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<[INPerson], SlotResolverError>) -> ()( uint64_t a1, uint64_t a2, __int16 a3)
{
}

uint64_t partial apply for closure #1 in closure #1 in AddCallParticipantContactSlotResolver.resolveSlot(skIntent:nlIntent:_:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_43A8A4);
  *(void *)(v1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v3;
  uint64_t v4 = OUTLINED_FUNCTION_15_66(v3);
  return closure #1 in closure #1 in AddCallParticipantContactSlotResolver.resolveSlot(skIntent:nlIntent:_:)( v4,  v5,  v6,  v2);
}

uint64_t OUTLINED_FUNCTION_11_68()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_12_71()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_15_66(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_24_40()
{
  return swift_release_n(*(void *)(v0 - 120), 2LL);
}

uint64_t static PhoneSelfPerformanceLogger.signpost<A>(domainExecutionType:taskType:siriKitEventSender:_:)( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for PhoneSelfPerformanceLogger();
  swift_allocObject(v13, 89LL, 7LL);
  swift_bridgeObjectRetain();
  uint64_t v20 = a6;
  v21[0] = PhoneSelfPerformanceLogger.init(siriKitEventSender:domainExecutionType:taskType:)(v21, a1, a2, a3);
  uint64_t v18 = a7;
  uint64_t v19 = a5;
  void v16[2] = a7;
  v16[3] = partial apply for closure #1 in static PhoneSelfPerformanceLogger.signpost<A>(domainExecutionType:taskType:siriKitEventSender:_:);
  void v16[4] = &v17;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  _ss20withExtendedLifetimeyq0_x_q0_xq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF( (uint64_t)v21,  (uint64_t)partial apply for thunk for @callee_guaranteed (@guaranteed PhoneSelfPerformanceLogger) -> (@out A, @error @owned Error),  (uint64_t)v16,  v13,  v14,  a7,  (uint64_t)&protocol self-conformance witness table for Error,  (uint64_t)&v22);
  return swift_release(v21[0]);
}

{
  uint64_t v13;
  uint64_t v14;
  void v16[6];
  uint64_t v17;
  _BYTE v18[96];
  void v19[5];
  outlined init with copy of SignalProviding(a4, (uint64_t)v19);
  uint64_t v13 = type metadata accessor for PhoneSelfPerformanceLogger();
  swift_initStackObject(v13, v18);
  swift_bridgeObjectRetain();
  char v17 = PhoneSelfPerformanceLogger.init(siriKitEventSender:domainExecutionType:taskType:)(v19, a1, a2, a3);
  void v16[2] = a7;
  v16[3] = a5;
  void v16[4] = a6;
  _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF( (uint64_t)&v17,  (uint64_t)partial apply for closure #1 in static PhoneSelfPerformanceLogger.signpost<A>(domainExecutionType:taskType:siriKitEventSender:_:),  (uint64_t)v16,  v13,  (uint64_t)&type metadata for Never,  a7,  (uint64_t)&protocol witness table for Never,  v14);
  return swift_release(v17);
}

uint64_t _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = v14(v13);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v13, a5);
  }
  return result;
}

uint64_t closure #1 in static PhoneSelfPerformanceLogger.signpost<A>(domainExecutionType:taskType:siriKitEventSender:_:)( uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2();
  if (v2)
  {
    PhoneSelfPerformanceLogger.createAndLogFailureEvent()();
    return swift_willThrow(v4, v5, v6, v7, v8, v9, v10, v11);
  }

  return result;
}

uint64_t partial apply for closure #1 in static PhoneSelfPerformanceLogger.signpost<A>(domainExecutionType:taskType:siriKitEventSender:_:)( uint64_t a1)
{
  return closure #1 in static PhoneSelfPerformanceLogger.signpost<A>(domainExecutionType:taskType:siriKitEventSender:_:)( a1,  *(uint64_t (**)(void))(v1 + 24));
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed PhoneSelfPerformanceLogger) -> (@out A, @error @owned Error)( void *a1, void *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 24))(*a1);
  if (v3) {
    *a2 = v3;
  }
  return result;
}

uint64_t _ss20withExtendedLifetimeyq0_x_q0_xq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = __chkstk_darwin(a1);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = v15(v12, v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t partial apply for closure #1 in static PhoneSelfPerformanceLogger.signpost<A>(domainExecutionType:taskType:siriKitEventSender:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

void PhoneSelfPerformanceLogger.createAndLogFailureEvent()()
{
  id v1 = [objc_allocWithZone(FLOWSchemaFLOWDomainExecutionFailed) init];
  if (v1)
  {
    uint64_t v2 = v1;
    OUTLINED_FUNCTION_14_59((uint64_t)v1, 1);

    v0[88] = 1;
  }

  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v3 = OUTLINED_FUNCTION_15_1();
    uint64_t v4 = OUTLINED_FUNCTION_4_23(v3, (uint64_t)static Logger.siriPhone);
    Logger.logObject.getter(v4);
    os_log_type_t v5 = OUTLINED_FUNCTION_24();
    if (OUTLINED_FUNCTION_29_4(v5))
    {
      uint64_t v6 = OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v7 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v8 = OUTLINED_FUNCTION_4_85(4.8149e-34);
      uint64_t v11 = OUTLINED_FUNCTION_12_72(v8, v9, v10);
      OUTLINED_FUNCTION_18_15(v11, v12, v13, v14, v15, v16, v17, v18, v21, v7);
      OUTLINED_FUNCTION_0_3();
      OUTLINED_FUNCTION_70_2();
      OUTLINED_FUNCTION_5_82(&dword_0, v19, v20, "#PhoneSelfPerformanceLogger Failed to register end event for %s");
      OUTLINED_FUNCTION_9_68();
      OUTLINED_FUNCTION_0_2(v7);
      OUTLINED_FUNCTION_0_2(v6);
    }

    else
    {

      OUTLINED_FUNCTION_0_3();
    }
  }

uint64_t OUTLINED_FUNCTION_4_85(float a1)
{
  *uint64_t v2 = a1;
  return FLOWSchemaFLOWDomainExecutionType.description.getter(*(unsigned int *)(v1 + 56));
}

uint64_t OUTLINED_FUNCTION_9_68()
{
  return swift_arrayDestroy(v0, 1LL);
}

void OUTLINED_FUNCTION_11_69(void *a1, os_log_s *a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_12_72(uint64_t a1, unint64_t a2, uint64_t a3, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

void OUTLINED_FUNCTION_14_59(uint64_t a1, char a2)
{
}

uint64_t StartAudioCallFlow.__allocating_init(app:sharedGlobals:)(uint64_t a1, void *a2)
{
  return StartAudioCallFlow.init(app:sharedGlobals:)(a1, a2);
}

uint64_t StartAudioCallFlow.init(app:sharedGlobals:)(uint64_t a1, void *a2)
{
  os_log_type_t v5 = (void *)(v2 + direct field offset for StartAudioCallFlow.flowName);
  *os_log_type_t v5 = 0xD000000000000012LL;
  v5[1] = 0x8000000000338550LL;
  outlined init with copy of SignalProviding((uint64_t)a2, (uint64_t)v8);
  uint64_t v6 = specialized CallingFlowAbstraction.init(app:flowName:sharedGlobals:)( a1,  0xD000000000000012LL,  0x8000000000338550LL,  v8);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v6;
}

uint64_t StartAudioCallFlow.makeRCHFlow(input:intent:app:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INStartAudioCallIntent, INStartAudioCallIntentResponse>);
  uint64_t v37 = *(void *)(v5 - 8);
  uint64_t v38 = v5;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v39 = v7 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INStartAudioCallIntent, INStartAudioCallIntentResponse>);
  uint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v11 = v10 - v9;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartAudioCallIntent, INStartAudioCallIntentResponse>);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v14 = v13 - v12;
  type metadata accessor for CATOption(0LL);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  (*(void (**)(void *__return_ptr))(*(void *)v3 + 152LL))(v45);
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  uint64_t v15 = (void *)static BiomeEventSender.instance;
  uint64_t v16 = type metadata accessor for StartAudioCallRCHFlowDelegate(0LL);
  uint64_t v17 = OUTLINED_FUNCTION_15_2(v16);
  id v18 = v15;
  swift_retain();
  uint64_t v33 = specialized StartAudioCallRCHFlowDelegate.init(sharedGlobals:appResolved:biomeEventSender:)( v45,  a3,  (uint64_t)v18,  v17);
  OUTLINED_FUNCTION_2_51();
  type metadata accessor for PhoneCallDisplayTextCATsSimple(0LL);
  OUTLINED_FUNCTION_55_0();
  uint64_t v19 = OUTLINED_FUNCTION_96();
  type metadata accessor for StartCallCATsSimple(0LL);
  OUTLINED_FUNCTION_55_0();
  uint64_t v20 = OUTLINED_FUNCTION_96();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentRCHFlowStrategy<INStartAudioCallIntent, INStartAudioCallIntentResponse>);
  swift_allocObject(v21, 80LL, 7LL);
  uint64_t v22 = specialized CallingIntentRCHFlowStrategy.init(sharedGlobals:appResolved:phoneCallDisplayTextCATsSimple:startCallCATsSimple:)( v45,  a3,  v19,  v20);
  swift_retain();
  specialized static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)();
  OUTLINED_FUNCTION_2_51();
  uint64_t v23 = v46;
  uint64_t v24 = v47;
  __swift_project_boxed_opaque_existential_1(v45, v46);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v24 + 104))(v42, v23, v24);
  uint64_t v25 = v43;
  uint64_t v26 = v44;
  __swift_project_boxed_opaque_existential_1(v42, v43);
  uint64_t v41 = v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v11, v14 + *(int *)(v34 + 36), v36);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v39, v14, v38);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<INStartAudioCallIntent, INStartAudioCallIntentResponse>);
  OUTLINED_FUNCTION_15_2(v27);
  uint64_t v28 = RCHChildFlowFactory.init(producers:withFallbacks:)(v11, v39);
  uint64_t v29 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v26 + 8);
  unint64_t v30 = lazy protocol witness table accessor for type CallingIntentRCHFlowStrategy<INStartAudioCallIntent, INStartAudioCallIntentResponse> and conformance CallingIntentRCHFlowStrategy<A, B>();
  uint64_t v31 = v29(&v41, v28, a3, a2, v21, v30, v25, v26);
  swift_release(v33);
  swift_release(v28);
  outlined destroy of PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartAudioCallIntent, INStartAudioCallIntentResponse>(v14);
  swift_release(v22);
  __swift_destroy_boxed_opaque_existential_1(v42);
  __swift_destroy_boxed_opaque_existential_1(v45);
  return v31;
}

void StartAudioCallFlow.init(app:flowName:sharedGlobals:)()
{
}

void StartAudioCallFlow.init(state:app:flowName:sharedGlobals:)()
{
}

uint64_t StartAudioCallFlow.__ivar_destroyer()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + direct field offset for StartAudioCallFlow.flowName + 8));
}

uint64_t StartAudioCallFlow.deinit()
{
  uint64_t v0 = specialized CallingFlowAbstraction.deinit();
  OUTLINED_FUNCTION_8_38(v0, direct field offset for StartAudioCallFlow.flowName);
  return v0;
}

uint64_t StartAudioCallFlow.__deallocating_deinit()
{
  uint64_t v0 = specialized CallingFlowAbstraction.deinit();
  OUTLINED_FUNCTION_8_38(v0, direct field offset for StartAudioCallFlow.flowName);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

unint64_t lazy protocol witness table accessor for type CallingIntentRCHFlowStrategy<INStartAudioCallIntent, INStartAudioCallIntentResponse> and conformance CallingIntentRCHFlowStrategy<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type CallingIntentRCHFlowStrategy<INStartAudioCallIntent, INStartAudioCallIntentResponse> and conformance CallingIntentRCHFlowStrategy<A, B>;
  if (!lazy protocol witness table cache variable for type CallingIntentRCHFlowStrategy<INStartAudioCallIntent, INStartAudioCallIntentResponse> and conformance CallingIntentRCHFlowStrategy<A, B>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CallingIntentRCHFlowStrategy<INStartAudioCallIntent, INStartAudioCallIntentResponse>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CallingIntentRCHFlowStrategy<A, B>, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CallingIntentRCHFlowStrategy<INStartAudioCallIntent, INStartAudioCallIntentResponse> and conformance CallingIntentRCHFlowStrategy<A, B>);
  }

  return result;
}

uint64_t outlined destroy of PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartAudioCallIntent, INStartAudioCallIntentResponse>( uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartAudioCallIntent, INStartAudioCallIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for StartAudioCallFlow(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for StartAudioCallFlow;
  if (!type metadata singleton initialization cache for StartAudioCallFlow) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StartAudioCallFlow);
  }
  return result;
}

uint64_t type metadata completion function for StartAudioCallFlow(uint64_t a1)
{
  uint64_t v2 = &unk_338590;
  return swift_initClassMetadata2(a1, 256LL, 1LL, &v2, a1 + 344);
}

uint64_t specialized INPersonContainingIntent.clearContactsSlotMatches()()
{
  return specialized INPersonContainingIntent.clearContactsSlotMatches()( (uint64_t (*)(uint64_t))outlined bridged method (pb) of @objc INStartAudioCallIntent.contacts.getter,  (void (*)(void *))INStartVideoCallIntent.overwriteContacts(newContacts:));
}

{
  return specialized INPersonContainingIntent.clearContactsSlotMatches()( (uint64_t (*)(uint64_t))outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter,  (void (*)(void *))INStartVideoCallIntent.overwriteContacts(newContacts:));
}

{
  return specialized INPersonContainingIntent.clearContactsSlotMatches()( (uint64_t (*)(uint64_t))outlined bridged method (pb) of @objc INStartCallIntent.contacts.getter,  (void (*)(void *))INStartCallIntent.overwriteContacts(newContacts:));
}

uint64_t specialized INPersonContainingIntent.clearContactsSlotMatches()( uint64_t (*a1)(uint64_t), void (*a2)(void *))
{
  uint64_t result = a1(v2);
  if (result)
  {
    uint64_t v5 = result;
    if ((unint64_t)result >> 62)
    {
      if (result >= 0) {
        result &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(result);
      if (!v6) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v6 = *(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFFF8LL));
      if (!v6)
      {
LABEL_15:
        OUTLINED_FUNCTION_50();
        a2(_swiftEmptyArrayStorage);
        return swift_bridgeObjectRelease();
      }
    }

    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)(v6);
    if ((v6 & 0x8000000000000000LL) == 0)
    {
      uint64_t v7 = 0LL;
      do
      {
        if ((v5 & 0xC000000000000001LL) != 0) {
          id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
        }
        else {
          id v8 = *(id *)(v5 + 8 * v7 + 32);
        }
        id v9 = v8;
        ++v7;
        outlined bridged method (mbgnn) of @objc INPerson.alternatives.setter((uint64_t)_swiftEmptyArrayStorage, v8);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
        uint64_t v11 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
        uint64_t v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
        specialized ContiguousArray._endMutation()(v12);
      }

      while (v6 != v7);
      goto LABEL_15;
    }

    __break(1u);
  }

  return result;
}

void *specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (v4)
  {
    while (1)
    {
      unint64_t v5 = 0LL;
      unint64_t v6 = a1 & 0xC000000000000001LL;
      uint64_t v26 = a2;
      while (v6)
      {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
LABEL_7:
        id v8 = v7;
        unint64_t v9 = v5 + 1;
        if (__OFADD__(v5, 1LL)) {
          goto LABEL_38;
        }
        outlined bridged method (pb) of @objc INPerson.contactIdentifier.getter(v7);
        if (!v10)
        {
          outlined bridged method (pb) of @objc INPerson.siriMatches.getter(v8);
          if (!v13) {
            goto LABEL_33;
          }
          uint64_t v14 = v13;
          unint64_t v15 = (unint64_t)v13 >> 62;
          if ((unint64_t)v13 >> 62)
          {
            if (v13 < 0) {
              uint64_t v20 = v13;
            }
            else {
              uint64_t v20 = v13 & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain();
            uint64_t v21 = _CocoaArrayWrapper.endIndex.getter(v20);
            swift_bridgeObjectRelease();
            if (!v21) {
              goto LABEL_31;
            }
          }

          else if (!*(void *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFF8LL)))
          {
            goto LABEL_31;
          }

          if ((v14 & 0xC000000000000001LL) != 0)
          {
            id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v14);
          }

          else
          {
            id v16 = *(id *)(v14 + 32);
          }

          outlined bridged method (ob) of @objc INPerson.contactIdentifier.getter(v16);
          if (!v17)
          {
LABEL_31:
            unint64_t v6 = a1 & 0xC000000000000001LL;
LABEL_32:
            uint64_t v13 = swift_bridgeObjectRelease();
            a2 = v26;
LABEL_33:
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
            uint64_t v22 = _swiftEmptyArrayStorage[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
            uint64_t v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v8);
            specialized ContiguousArray._endMutation()(v23);
            goto LABEL_34;
          }

          if (v15)
          {
            if (v14 < 0) {
              uint64_t v19 = v14;
            }
            else {
              uint64_t v19 = v14 & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain();
            uint64_t v18 = _CocoaArrayWrapper.endIndex.getter(v19);
            swift_bridgeObjectRelease();
          }

          else
          {
            uint64_t v18 = *(void *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFF8LL));
          }

          unint64_t v6 = a1 & 0xC000000000000001LL;
          swift_bridgeObjectRelease();
          if (v18 != 1) {
            goto LABEL_32;
          }
          a2 = v26;
        }

        specialized Set._Variant.insert(_:)();
        char v12 = v11;
        uint64_t v13 = swift_bridgeObjectRelease();
        if ((v12 & 1) != 0) {
          goto LABEL_33;
        }

LABEL_34:
        ++v5;
        if (v9 == v4) {
          goto LABEL_44;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      if (a1 < 0) {
        uint64_t v24 = a1;
      }
      else {
        uint64_t v24 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v24);
      if (!v4) {
        goto LABEL_44;
      }
    }

    id v7 = *(id *)(a1 + 8 * v5 + 32);
    goto LABEL_7;
  }

void static ContactResolution.updateSiriKitIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:locale:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  LOBYTE(v1outlined destroy of ActionableCallControlFlow.State(v0 + 9) = a10 & 1;
  specialized static ContactResolution.updateSiriKitIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:locale:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:)( a1,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  v19,  a11,  a12,  ObjectType,  a2,  v20,  a7,  a8,  v23,  v24,  v25,  v26,  v27,  v28,  v29,  v30,  v31);
}

#error "21A99C: call analysis failed (funcsize=26)"
uint64_t ContactQuery.isEmpty.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v1 = v0;
  uint64_t v2 = OUTLINED_FUNCTION_17_34();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  unint64_t v6 = v5 - v4;
  if (one-time initialization token for emptyQuery != -1) {
    swift_once(&one-time initialization token for emptyQuery, one-time initialization function for emptyQuery);
  }
  OUTLINED_FUNCTION_163_4(v2, (uint64_t)static ContactQuery.emptyQuery);
  id v7 = static ContactQuery.== infix(_:_:)(v1);
  OUTLINED_FUNCTION_142(v6, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  if ((v7 & 1) != 0)
  {
    id v8 = 1;
  }

  else
  {
    if (one-time initialization token for emptyNLv4Query != -1) {
      swift_once(&one-time initialization token for emptyNLv4Query, one-time initialization function for emptyNLv4Query);
    }
    OUTLINED_FUNCTION_163_4(v2, (uint64_t)static ContactQuery.emptyNLv4Query);
    id v8 = static ContactQuery.== infix(_:_:)(v6);
  }

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
  return v8 & 1;
}

void *static ContactResolution.resolveContactQueries(contactQueries:siriKitIntent:app:nlIntent:sharedGlobals:)( uint64_t a1, uint64_t a2)
{
  return specialized static ContactResolution.resolveContactQueries(contactQueries:siriKitIntent:app:nlIntent:sharedGlobals:)();
}

void closure #1 in static ContactResolution.updateSiriKitIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:locale:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:)( uint64_t a1, uint64_t a2, void *a3, os_log_type_t a4)
{
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  id v7 = specialized static PhoneDomainContextMetricsUtils.populatePhoneDomainContext(phoneCallNLIntent:contextNLType:app:resolvedSiriKitContacts:callStateProvider:)( a3,  1,  a2,  a4,  (uint64_t)static CallStateProvider.instance);
  dispatch thunk of SiriKitEvent.SiriKitEventBuilder.domainContext.setter(v7);
  OUTLINED_FUNCTION_6();
}

void static EmergencyContactResolution.fetchEmergencyContacts(sirikitIntent:locale:medicalIDStore:_:)()
{
}

void closure #1 in static EmergencyContactResolution.fetchEmergencyContacts(sirikitIntent:locale:medicalIDStore:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v77 = v27;
  uint64_t v78 = v26;
  int v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v40 = type metadata accessor for PhoneError(0LL);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_53_0();
  if (!v37)
  {
    uint64_t v76 = v35;
    if (v39) {
      unint64_t v49 = (unint64_t)v39;
    }
    else {
      unint64_t v49 = (unint64_t)_swiftEmptyArrayStorage;
    }
    uint64_t v50 = one-time initialization token for siriPhone;
    OUTLINED_FUNCTION_8_1();
    if (v50 != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v51 = OUTLINED_FUNCTION_15_1();
    __swift_project_value_buffer(v51, (uint64_t)static Logger.siriPhone);
    uint64_t v52 = swift_bridgeObjectRetain_n(v49, 2LL);
    Logger.logObject.getter(v52);
    os_log_type_t v53 = OUTLINED_FUNCTION_41();
    if (os_log_type_enabled(v39, v53))
    {
      uint64_t v54 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      *(_DWORD *)uint64_t v54 = 134217984;
      if (v49 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v55 = OUTLINED_FUNCTION_98_10();
        OUTLINED_FUNCTION_87_0();
      }

      else
      {
        uint64_t v55 = *(void *)((char *)&dword_10 + (v49 & 0xFFFFFFFFFFFFF8LL));
      }

      OUTLINED_FUNCTION_87_0();
      unint64_t v82 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v54 + 4);
      OUTLINED_FUNCTION_87_0();
      OUTLINED_FUNCTION_57_0(&dword_0, v39, v53, "#EmergencyContactResolution Found %ld emergency contacts", v54);
      OUTLINED_FUNCTION_0_2((uint64_t)v54);
    }

    else
    {

      OUTLINED_FUNCTION_7_4(v49);
    }

    uint64_t v57 = v73;
    __chkstk_darwin();
    v72[2] = a21;
    v72[3] = a24;
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo19_HKEmergencyContactCG_So8INPersonCs5NeverOTg5( (void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in closure #1 in static EmergencyContactResolution.fetchEmergencyContacts(sirikitIntent:locale:medicalIDStore:_:),  (uint64_t)v72,  v49);
    unint64_t v59 = v58;
    OUTLINED_FUNCTION_87_0();
    if (v59 >> 62)
    {
      OUTLINED_FUNCTION_26_27();
      uint64_t v57 = (_DWORD *)OUTLINED_FUNCTION_15_4();
      OUTLINED_FUNCTION_34_0();
    }

    else
    {
      OUTLINED_FUNCTION_114_6();
    }

    uint64_t ObjectType = swift_getObjectType(a22);
    uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(a23 + 8))(ObjectType, a23);
    if (!v61) {
      goto LABEL_33;
    }
    uint64_t v62 = v61;
    if ((unint64_t)v61 >> 62)
    {
      if (v61 >= 0) {
        v61 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      if (_CocoaArrayWrapper.endIndex.getter(v61)) {
        goto LABEL_24;
      }
    }

    else if (*(void *)((char *)&dword_10 + (v61 & 0xFFFFFFFFFFFFFF8LL)))
    {
LABEL_24:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (v62 & 0xC000000000000001LL) == 0, v62);
      if ((v62 & 0xC000000000000001LL) != 0) {
        id v63 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v62);
      }
      else {
        id v63 = *(id *)(v62 + 32);
      }
      uint64_t v64 = v63;
      OUTLINED_FUNCTION_39();
      uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v66 = OUTLINED_FUNCTION_8_2(v65, 40LL);
      *(_OWORD *)(v66 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31FE60;
      outlined bridged method (mbgnn) of @objc INPerson.alternatives.setter(v59, v64);
      id v67 = v64;
      uint64_t v68 = OUTLINED_FUNCTION_34_0();
      *(void *)(v66 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v67;
      unint64_t v82 = v66;
      specialized Array._endMutation()(v68, v69, v70, v71);
      unint64_t v59 = v82;

      goto LABEL_33;
    }

    OUTLINED_FUNCTION_39();
LABEL_33:
    v78(v59, 0LL);
    OUTLINED_FUNCTION_34_0();
    goto LABEL_34;
  }

  OUTLINED_FUNCTION_26_7();
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v41 = OUTLINED_FUNCTION_15_1();
  uint64_t v42 = __swift_project_value_buffer(v41, (uint64_t)static Logger.siriPhone);
  OUTLINED_FUNCTION_26_7();
  uint64_t v43 = OUTLINED_FUNCTION_26_7();
  Logger.logObject.getter(v43);
  os_log_type_t v44 = OUTLINED_FUNCTION_59_8();
  if (OUTLINED_FUNCTION_9_57(v44))
  {
    uint64_t v75 = v31;
    uint64_t v45 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v76 = v35;
    uint64_t v46 = OUTLINED_FUNCTION_7_0(32LL);
    unint64_t v82 = v46;
    v73[1] = v29;
    *(_DWORD *)uint64_t v45 = 136315138;
    uint64_t v74 = v33;
    swift_getErrorValue(v37, &v81, v80);
    uint64_t v47 = Error.localizedDescription.getter(v80[1], v80[2]);
    uint64_t v42 = v48;
    uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, (uint64_t *)&v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v80, v45 + 4);
    OUTLINED_FUNCTION_62();
    OUTLINED_FUNCTION_3_24();
    OUTLINED_FUNCTION_3_24();
    OUTLINED_FUNCTION_57_0( &dword_0,  v39,  v24,  "#EmergencyContactResolution Error gathering emergency contacts: %s",  v45);
    OUTLINED_FUNCTION_29_19();
    OUTLINED_FUNCTION_0_2(v46);
    OUTLINED_FUNCTION_0_2((uint64_t)v45);
  }

  else
  {
    OUTLINED_FUNCTION_3_24();
    OUTLINED_FUNCTION_3_24();
  }

  *uint64_t v25 = v37;
  swift_storeEnumTagMultiPayload(v25, v40, 9LL);
  unint64_t v56 = lazy protocol witness table accessor for type PhoneError and conformance PhoneError();
  swift_allocError(v40, v56, 0LL, 0LL);
  OUTLINED_FUNCTION_5_26();
  OUTLINED_FUNCTION_26_7();
  PhoneError.logged()(v42);
  outlined destroy of SingleResultCallHistoryModel((uint64_t)v25, type metadata accessor for PhoneError);
  v78((unint64_t)v39, 1LL);
  swift_errorRelease(v39);
  OUTLINED_FUNCTION_3_24();
LABEL_34:
  Signpost.OpenSignpost.end()();
  OUTLINED_FUNCTION_7_5();
}

id static EmergencyContactResolution.makeINPerson(emergencyContact:locale:)(void *a1)
{
  uint64_t v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = outlined bridged method (pb) of @objc _HKEmergencyContact.phoneNumberLabel.getter( a1,  (SEL *)&selRef_phoneNumberLabel);
  if (v5)
  {
    v27[0] = v4;
    v27[1] = v5;
    closure #1 in static EmergencyContactResolution.makeINPerson(emergencyContact:locale:)(v27, &v26);
    swift_bridgeObjectRelease();
    unint64_t v6 = v26;
  }

  else
  {
    unint64_t v6 = 0LL;
  }

  outlined bridged method (pb) of @objc _HKEmergencyContact.phoneNumberLabel.getter(a1, (SEL *)&selRef_relationship);
  if (v7)
  {
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v8 = 0LL;
  }

  uint64_t v9 = outlined bridged method (pb) of @objc _HKEmergencyContact.phoneNumberLabel.getter(a1, (SEL *)&selRef_phoneNumber);
  uint64_t v11 = v10;
  id v12 = objc_allocWithZone(&OBJC_CLASS___INPersonHandle);
  id v13 = v6;
  id v14 = @nonobjc INPersonHandle.init(value:type:label:)(v9, v11, 2LL, v6);
  uint64_t v15 = type metadata accessor for PersonNameComponents(0LL);
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 1LL, 1LL, v15);
  uint64_t v16 = outlined bridged method (pb) of @objc _HKEmergencyContact.phoneNumberLabel.getter(a1, (SEL *)&selRef_name);
  uint64_t v18 = v17;
  uint64_t v19 = outlined bridged method (pb) of @objc _HKEmergencyContact.phoneNumberLabel.getter( a1,  (SEL *)&selRef_nameContactIdentifier);
  uint64_t v21 = v20;
  id v22 = objc_allocWithZone(&OBJC_CLASS___INPerson);
  id v23 = @nonobjc INPerson.init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:relationship:)( v14,  (uint64_t)v3,  v16,  v18,  0LL,  v19,  v21,  0LL,  0LL,  v8);

  return v23;
}

void EmergencyContactResolution.populateEmergencyContacts(sirikitIntent:locale:medicalIDStore:)()
{
  v31[1] = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  v31[2] = *v0;
  v31[3] = v6;
  uint64_t v7 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v11 = (void *)(v10 - v9);
  uint64_t v12 = type metadata accessor for DispatchTime(0LL);
  uint64_t v32 = *(void *)(v12 - 8);
  uint64_t v33 = v12;
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  id v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v16 = (char *)v31 - v15;
  dispatch_semaphore_t v17 = dispatch_semaphore_create(0LL);
  swift_getObjectType(v5);
  uint64_t v18 = (void *)OUTLINED_FUNCTION_8_2((uint64_t)&unk_40F3B8, 40LL);
  __int128 v18[2] = v17;
  v18[3] = v5;
  _BYTE v18[4] = v3;
  uint64_t v19 = v17;
  id v20 = v5;
  specialized static EmergencyContactResolution.fetchEmergencyContacts(sirikitIntent:locale:medicalIDStore:_:)();
  uint64_t v21 = swift_release(v18);
  static DispatchTime.now()(v21);
  *uint64_t v11 = 300LL;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))( v11,  enum case for DispatchTimeInterval.milliseconds(_:),  v7);
  + infix(_:_:)(v14, v11);
  (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  uint64_t v22 = v33;
  id v23 = *(void (**)(char *, uint64_t))(v32 + 8);
  v23(v14, v33);
  char v24 = OS_dispatch_semaphore.wait(timeout:)(v16);
  v23(v16, v22);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v25 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v25, (uint64_t)static Logger.siriPhone);
  os_log_type_t v26 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_29_4(v26))
  {
    uint64_t v27 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v28 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v35 = v28;
    *(_DWORD *)uint64_t v27 = 136315138;
    LOBYTE(v3__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v24 & 1;
    uint64_t v29 = String.init<A>(describing:)(&v34, &type metadata for DispatchTimeoutResult);
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v27 + 4);
    OUTLINED_FUNCTION_70_2();
    OUTLINED_FUNCTION_57_0( &dword_0,  v19,  (os_log_type_t)v11,  "#ContactResolution Timeout result (set at 300ms): %s",  v27);
    OUTLINED_FUNCTION_17_0(v28);
    OUTLINED_FUNCTION_0_2(v28);
    OUTLINED_FUNCTION_0_2((uint64_t)v27);
  }

  OUTLINED_FUNCTION_7_5();
}

Swift::Int closure #1 in EmergencyContactResolution.populateEmergencyContacts(sirikitIntent:locale:medicalIDStore:)( uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5)
{
  if ((a2 & 1) == 0)
  {
    if (!((unint64_t)a1 >> 62))
    {
      goto LABEL_4;
    }

    if (a1 >= 0) {
      uint64_t v21 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v21 = a1;
    }
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v21);
    outlined consume of Result<[SAAceView], Error>(a1, 0);
    if (v22)
    {
LABEL_4:
      uint64_t ObjectType = swift_getObjectType(a4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a5 + 8) + 8LL) + 16LL))(a1, ObjectType);
    }
  }

void closure #1 in static EmergencyContactResolution.makeINPerson(emergencyContact:locale:)( uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  NSString v5 = String._bridgeToObjectiveC()();
  v25[0] = Locale.identifier.getter(v5);
  v25[1] = v6;
  uint64_t v23 = 45LL;
  unint64_t v24 = 0xE100000000000000LL;
  v22[0] = 95LL;
  v22[1] = 0xE100000000000000LL;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v7 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v23,  v22,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  uint64_t v26 = static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)(v5, v7, v9);
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n(v3, 2LL);
  uint64_t v13 = swift_bridgeObjectRetain_n(v11, 2LL);
  id v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v16 = static os_log_type_t.debug.getter(v14, v15);
  if (os_log_type_enabled(v14, v16))
  {
    NSString v21 = v5;
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    uint64_t v18 = swift_slowAlloc(64LL, -1LL);
    v25[0] = v18;
    *(_DWORD *)uint64_t v17 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v17 + 4);
    swift_bridgeObjectRelease_n(v3, 3LL);
    *(_WORD *)(v17 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v11, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v17 + 14);
    swift_bridgeObjectRelease_n(v11, 3LL);
    _os_log_impl(&dword_0, v14, v16, "#ContactResolution Converted originalLabel: %s to %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2LL);
    swift_slowDealloc(v18, -1LL, -1LL);
    uint64_t v19 = v17;
    NSString v5 = v21;
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v11, 2LL);
    swift_bridgeObjectRelease_n(v3, 2LL);
  }

  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  *a2 = v20;
}

uint64_t static SiriPhoneContact.personalLabel.getter()
{
  return 0x6C616E6F73726570LL;
}

uint64_t protocol witness for EmergencyContactProviding.fetchMedicalIDEmergencyContacts(completion:) in conformance HKMedicalIDStore( uint64_t a1, uint64_t a2)
{
  return @nonobjc HKMedicalIDStore.fetchMedicalIDEmergencyContacts(completion:)(a1, a2);
}

uint64_t @nonobjc HKMedicalIDStore.fetchMedicalIDEmergencyContacts(completion:)(uint64_t a1, uint64_t a2)
{
  void v5[4] = a1;
  uint64_t v6 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256LL;
  __int128 v5[2] = thunk for @escaping @callee_guaranteed (@guaranteed [_HKEmergencyContact]?, @guaranteed Error?) -> ();
  v5[3] = &block_descriptor_5;
  unint64_t v3 = _Block_copy(v5);
  swift_retain();
  [v2 fetchMedicalIDEmergencyContactsWithCompletion:v3];
  _Block_release(v3);
  return swift_release(v6);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [_HKEmergencyContact]?, @guaranteed Error?) -> ()( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  if (a2)
  {
    uint64_t v7 = type metadata accessor for CNContactStore( 0LL,  &lazy cache variable for type metadata for _HKEmergencyContact,  &OBJC_CLASS____HKEmergencyContact_ptr);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }

  swift_retain();
  id v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  return swift_bridgeObjectRelease();
}

void one-time initialization function for emptyQuery(uint64_t a1)
{
}

void one-time initialization function for emptyNLv4Query(uint64_t a1)
{
}

void one-time initialization function for emptyQuery(uint64_t a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5 = OUTLINED_FUNCTION_17_34();
  __swift_allocate_value_buffer(v5, a2);
  __swift_project_value_buffer(v5, (uint64_t)a2);
  a3();
  OUTLINED_FUNCTION_6();
}

uint64_t closure #1 in variable initialization expression of static ContactQuery.emptyNLv4Query@<X0>( uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ContactQuery(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UsoEntityBuilder_common_Person(0LL);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  uint64_t v7 = UsoEntityBuilder_common_Person.init()();
  uint64_t v8 = static UsoBuilderConversionUtils.convertEntityBuilderToEntity(entityBuilder:)();
  uint64_t v9 = type metadata accessor for UsoEntity_common_Person(0LL);
  unint64_t v10 = static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(&v14, v8, v9, v9);
  uint64_t v11 = v14;
  if (v14)
  {
    UsoEntity_common_Person.toContactQuery()(v10);
    swift_release(v11);
    swift_release(v8);
    swift_release(v7);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
  }

  else
  {
    ContactQuery.init()(v10);
    swift_release(v7);
    return swift_release(v8);
  }

uint64_t ContactQuery.init(isMe:phoneLabel:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for ContactHandle.HandleType(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v11 = v10 - v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandleQuery?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_135();
  ContactQuery.init()(v12);
  ContactQuery.isMe.setter(a1);
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))( v11,  enum case for ContactHandle.HandleType.phone(_:),  v7);
  OUTLINED_FUNCTION_137_7(v11, a2, a3);
  uint64_t v13 = OUTLINED_FUNCTION_108_6();
  OUTLINED_FUNCTION_18_53(v3, v14, v15, v13);
  return ContactQuery.handle.setter(v3);
}

uint64_t outlined bridged method (ob) of @objc INPerson.contactIdentifier.getter(void *a1)
{
  id v2 = [a1 contactIdentifier];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t outlined bridged method (pb) of @objc _HKEmergencyContact.phoneNumberLabel.getter(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    OUTLINED_FUNCTION_5_26();
  }

  return OUTLINED_FUNCTION_9_0();
}

void specialized static EmergencyContactResolution.fetchEmergencyContacts(sirikitIntent:locale:medicalIDStore:_:)()
{
  uint64_t v41 = v1;
  uint64_t v42 = v0;
  uint64_t v38 = v2;
  uint64_t v39 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v40 = v8;
  uint64_t v9 = *(void *)(OUTLINED_FUNCTION_94_4() - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Signpost.begin(_:)();
  uint64_t v13 = v12;
  uint64_t v34 = v14;
  uint64_t v16 = v15;
  __int16 v18 = v17;
  uint64_t v19 = v5[4];
  uint64_t v37 = v5[3];
  uint64_t v35 = v19;
  uint64_t v36 = __swift_project_boxed_opaque_existential_1(v5, v37);
  OUTLINED_FUNCTION_79_2((uint64_t)v11, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
  uint64_t v20 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v21 = (v20 + 64) & ~v20;
  unint64_t v22 = (v10 + v21 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v23 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v24 = swift_allocObject(&unk_40F4B0, v23 + 8, v20 | 7);
  uint64_t v25 = v34;
  *(void *)(v24 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v13;
  *(void *)(v24 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v25;
  *(void *)(v24 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v16;
  *(_BYTE *)(v24 + 40) = v18;
  *(_BYTE *)(v24 + 41) = HIBYTE(v18) & 1;
  uint64_t v26 = v39;
  *(void *)(v24 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v38;
  *(void *)(v24 + 56) = v26;
  OUTLINED_FUNCTION_79_2(v24 + v21, (uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
  uint64_t v27 = (void *)(v24 + v22);
  uint64_t v29 = v40;
  uint64_t v28 = v41;
  *uint64_t v27 = v40;
  v27[1] = v28;
  *(void *)(v24 + v2__swift_destroy_boxed_opaque_existential_1(v0 + 3) = v42;
  uint64_t v30 = v35;
  uint64_t v31 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v35 + 8);
  swift_retain();
  swift_retain();
  id v32 = v29;
  v31( partial apply for closure #1 in static EmergencyContactResolution.fetchEmergencyContacts(sirikitIntent:locale:medicalIDStore:_:),  v24,  v37,  v30);
  swift_release(v24);
  swift_release(v13);
  OUTLINED_FUNCTION_7_5();
}

void specialized static ContactResolution.updateSiriKitIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:locale:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, void *a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  uint64_t v133 = v26;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  Swift::Int v135 = v33;
  char v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v40 = type metadata accessor for ResolvedSiriKitContact(0LL);
  uint64_t v41 = *(void *)(v40 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_94_4();
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  type metadata accessor for ContactResolverConfigHashable(0LL);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v44 = v43 - v42;
  if ((v35 & 1) != 0)
  {
    uint64_t v130 = v32;
    uint64_t ObjectType = swift_getObjectType(v39);
    uint64_t v46 = dynamic_cast_existential_1_conditional( (uint64_t)v39,  ObjectType,  (uint64_t)&protocol descriptor for CallingIntent);
    unint64_t v48 = (os_log_s *)one-time initialization token for siriPhone;
    if (v46)
    {
      uint64_t v49 = v46;
      uint64_t v50 = v47;
      id v51 = v39;
      if (v48 != (os_log_s *)-1LL) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v52 = OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_12_1(v52, (uint64_t)static Logger.siriPhone);
      os_log_type_t v53 = OUTLINED_FUNCTION_6_0();
      if (OUTLINED_FUNCTION_29_4(v53))
      {
        uint64_t v54 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
        *(_WORD *)uint64_t v54 = 0;
        OUTLINED_FUNCTION_5( &dword_0,  v48,  (os_log_type_t)v28,  "#ContactResolution NL intent has an emergency contact. Bypassing contact resolution.",  v54);
        OUTLINED_FUNCTION_0_2((uint64_t)v54);
      }

      id v55 = [objc_allocWithZone(HKHealthStore) init];
      id v56 = OUTLINED_FUNCTION_17_6(objc_allocWithZone(&OBJC_CLASS___HKMedicalIDStore), "initWithHealthStore:");

      uint64_t v139 = type metadata accessor for CNContactStore( 0LL,  &lazy cache variable for type metadata for HKMedicalIDStore,  &OBJC_CLASS___HKMedicalIDStore_ptr);
      os_log_type_t v140 = &protocol witness table for HKMedicalIDStore;
      *(void *)&__int128 v138 = v56;
      (*(void (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(void *)a23 + 80LL))(v49, v50, v130, &v138);

      OUTLINED_FUNCTION_18();
      goto LABEL_75;
    }

    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v57 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v57, (uint64_t)static Logger.siriPhone);
    os_log_type_t v58 = OUTLINED_FUNCTION_24();
    if (OUTLINED_FUNCTION_93(v58))
    {
      unint64_t v59 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      OUTLINED_FUNCTION_28_22(v59);
      OUTLINED_FUNCTION_5( &dword_0,  v48,  (os_log_type_t)v32,  "#ContactResolution NL intent has an emergency contact but is not a CallingIntent!",  v30);
      OUTLINED_FUNCTION_0_2((uint64_t)v30);
    }
  }

  uint64_t v131 = v37;
  if ((specialized static ContactResolution.shouldSkipContactResolution(nlIntent:skIntent:contactQueries:)( v30,  v39,  v37,  a24,  a25) & 1) != 0)
  {
LABEL_75:
    OUTLINED_FUNCTION_7_5();
    return;
  }

  uint64_t v129 = v44;
  unint64_t v60 = v135;
  uint64_t v134 = (uint64_t)v30;
  if (v135)
  {
    uint64_t v61 = App.appIdentifier.getter();
    if (v62)
    {
      unint64_t v60 = (void *)v61;
      uint64_t v64 = v62;
      OUTLINED_FUNCTION_37_33(v61, v62, v63, (uint64_t)_swiftEmptyArrayStorage);
      uint64_t v66 = v65;
      unint64_t v68 = *(void *)(v65 + 16);
      unint64_t v67 = *(void *)(v65 + 24);
      if (v68 >= v67 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v67 > 1,  v68 + 1,  1LL,  v65);
        uint64_t v66 = v119;
      }

      *(void *)(v66 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v68 + 1;
      unint64_t v69 = v66 + 16 * v68;
      *(void *)(v69 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v60;
      *(void *)(v69 + 40) = v64;
    }
  }

  if (one-time initialization token for emptyStartCallIntent != -1) {
    swift_once( &one-time initialization token for emptyStartCallIntent,  one-time initialization function for emptyStartCallIntent);
  }
  OUTLINED_FUNCTION_112_3((uint64_t) [(id)static PhoneCallIntentClassNames.emptyStartCallIntent _className]);

  uint64_t v71 = v28[3];
  uint64_t v70 = v28[4];
  OUTLINED_FUNCTION_97_12();
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v70 + 8))(&v138, v71, v70);
  uint64_t v72 = (uint64_t)v140;
  uint64_t v73 = OUTLINED_FUNCTION_79_12(&v138);
  DeviceState.siriInputLocale.getter(v73, v72);
  outlined init with copy of SignalProviding((uint64_t)v28, (uint64_t)&v136);
  id v74 = v39;
  OUTLINED_FUNCTION_124();
  uint64_t v75 = v74;
  ContactResolverConfigHashable.init(intentTypeName:locale:bundleIds:siriKitIntent:sharedGlobals:)();
  OUTLINED_FUNCTION_18();
  __swift_project_boxed_opaque_existential_1(v28, v28[3]);
  OUTLINED_FUNCTION_11_26();
  uint64_t v76 = v139;
  uint64_t v77 = v140;
  __swift_project_boxed_opaque_existential_1(&v138, v139);
  uint64_t v78 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _UNKNOWN **))v77[2])(v131, v129, v76, v77);
  OUTLINED_FUNCTION_18();
  uint64_t v79 = a22[3];
  uint64_t v128 = a22[4];
  __swift_project_boxed_opaque_existential_1(a22, v79);
  type metadata accessor for SiriKitEvent(0LL);
  char v132 = (char)v75;
  id v80 = [v75 typeName];
  uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
  uint64_t v83 = v82;

  outlined init with copy of SignalProviding(v134, (uint64_t)&v138);
  uint64_t v84 = OUTLINED_FUNCTION_8_2((uint64_t)&unk_40F4D8, 72LL);
  *(void *)(v84 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v135;
  outlined init with take of AppSelectionSignalComponent(&v138, v84 + 24);
  *(void *)(v84 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v78;
  swift_retain();
  OUTLINED_FUNCTION_8_1();
  LOBYTE(v136) = 0;
  uint64_t v85 = SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)( 131LL,  v81,  v83,  31LL,  closure #1 in static ContactResolution.updateSiriKitIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:locale:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:)partial apply,  v84);
  dispatch thunk of SiriKitEventSending.send(_:)(v85, v79, v128);
  swift_release(v85);
  uint64_t v86 = *(void *)(v78 + 16);
  if (v86)
  {
    *(void *)&__int128 v138 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v86);
    OUTLINED_FUNCTION_158_4();
    uint64_t v83 = (uint8_t *)(v78 + v87);
    uint64_t v88 = *(void *)(v41 + 72);
    uint64_t v78 = *(void *)(v41 + 16);
    do
    {
      uint64_t v89 = ((uint64_t (*)(uint64_t, uint8_t *, uint64_t))v78)(v25, v83, v40);
      uint64_t v90 = ResolvedSiriKitContact.person.getter(v89);
      uint64_t v91 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v25, v40);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v91);
      uint64_t v92 = *(void *)(v138 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v92);
      uint64_t v93 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v92, v90);
      specialized ContiguousArray._endMutation()(v93);
      v83 += v88;
      --v86;
    }

    while (v86);
    unint64_t v94 = v138;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    OUTLINED_FUNCTION_39();
    swift_bridgeObjectRelease();
    unint64_t v94 = (unint64_t)_swiftEmptyArrayStorage;
  }

  if (v94 >> 62)
  {
    OUTLINED_FUNCTION_26_27();
    uint64_t v78 = OUTLINED_FUNCTION_15_4();
    OUTLINED_FUNCTION_34_0();
  }

  else
  {
    OUTLINED_FUNCTION_114_6();
  }

  if (v78)
  {
    uint64_t v78 = (uint64_t)OUTLINED_FUNCTION_129_8();
    OUTLINED_FUNCTION_34_0();
    unint64_t v94 = v78;
  }

  if ((a21 & 1) != 0)
  {
    OUTLINED_FUNCTION_143_4();
    if (!v97) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v98 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v98, (uint64_t)static Logger.siriPhone);
    os_log_type_t v99 = OUTLINED_FUNCTION_41();
    if (os_log_type_enabled((os_log_t)v78, v99))
    {
      uint64_t v100 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
      OUTLINED_FUNCTION_31_0(v100);
      OUTLINED_FUNCTION_5( &dword_0,  (os_log_s *)v78,  v99,  "#ContactResolution multicardinalIndex is nil, overwriting contacts slot",  v83);
      OUTLINED_FUNCTION_0_2((uint64_t)v83);
    }

    (*(void (**)(unint64_t, uint64_t))(*(void *)(a25 + 8) + 16LL))(v94, a24);
    goto LABEL_74;
  }

  LOBYTE(v95) = v132;
  uint64_t v96 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a25 + 8) + 8LL))(a24, *(void *)(a25 + 8));
  if (!v96)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v101 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v101, (uint64_t)static Logger.siriPhone);
    os_log_type_t v102 = OUTLINED_FUNCTION_41();
    if (!OUTLINED_FUNCTION_10(v102)) {
      goto LABEL_73;
    }
    uint64_t v103 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
    OUTLINED_FUNCTION_31_0(v103);
    uint64_t v104 = "#ContactResolution siriKitIntent contacts slot is nil, overwriting contacts slot";
    goto LABEL_72;
  }

  *(void *)&__int128 v138 = v96;
  if (!(v94 >> 62))
  {
    uint64_t v78 = *(void *)((char *)&dword_10 + (v94 & 0xFFFFFFFFFFFFF8LL));
    OUTLINED_FUNCTION_48_0();
    if (v78) {
      goto LABEL_34;
    }
LABEL_67:
    OUTLINED_FUNCTION_34_0();
    LOBYTE(v95) = v138;
    goto LABEL_68;
  }

  OUTLINED_FUNCTION_10_62();
  uint64_t v78 = OUTLINED_FUNCTION_15_4();
  if (!v78) {
    goto LABEL_67;
  }
LABEL_34:
  OUTLINED_FUNCTION_36_31();
  uint64_t v78 = OUTLINED_FUNCTION_64_18();
  OUTLINED_FUNCTION_34_0();
  uint64_t v95 = v138;
  if ((unint64_t)v138 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v83 = (uint8_t *)OUTLINED_FUNCTION_98_10();
    OUTLINED_FUNCTION_62();
  }

  else
  {
    uint64_t v83 = *(uint8_t **)((char *)&dword_10 + (v138 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v94 >> 62)
  {
    OUTLINED_FUNCTION_48_0();
    uint64_t v83 = (uint8_t *)OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_34_0();
    uint64_t v95 = v138;
  }

  else
  {
    uint64_t v83 = *(uint8_t **)((char *)&dword_10 + (v94 & 0xFFFFFFFFFFFFF8LL));
  }

  if ((unint64_t)v95 >> 62)
  {
    uint64_t v127 = v95 < 0 ? v95 : v95 & 0xFFFFFFFFFFFFFF8LL;
    swift_bridgeObjectRetain();
    uint64_t v105 = _CocoaArrayWrapper.endIndex.getter(v127);
    OUTLINED_FUNCTION_62();
  }

  else
  {
    uint64_t v105 = *(void *)((char *)&dword_10 + (v95 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v105 < (uint64_t)v83)
  {
LABEL_52:

LABEL_68:
    OUTLINED_FUNCTION_62();
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v120 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v120, (uint64_t)static Logger.siriPhone);
    os_log_type_t v121 = OUTLINED_FUNCTION_41();
    if (!OUTLINED_FUNCTION_10(v121)) {
      goto LABEL_73;
    }
    unint64_t v122 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
    OUTLINED_FUNCTION_31_0(v122);
    uint64_t v104 = "#ContactResolution: overwriting contacts slot";
LABEL_72:
    OUTLINED_FUNCTION_5(&dword_0, (os_log_s *)v78, (os_log_type_t)v95, v104, v83);
    OUTLINED_FUNCTION_0_2((uint64_t)v83);
LABEL_73:

    uint64_t v123 = OUTLINED_FUNCTION_112_7();
    v125(v123, v124);
    goto LABEL_74;
  }

  OUTLINED_FUNCTION_34_0();
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v106 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v106, (uint64_t)static Logger.siriPhone);
  os_log_type_t v107 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_7(v107))
  {
    uint64_t v108 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    *(_DWORD *)uint64_t v108 = 134217984;
    uint64_t v136 = v133;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v108 + 4, v108 + 12);
    OUTLINED_FUNCTION_57_0( &dword_0,  (os_log_s *)v95,  (os_log_type_t)v94,  "#ContactResolution updating person at index %ld",  v108);
    OUTLINED_FUNCTION_0_2((uint64_t)v108);
  }

  uint64_t v109 = v138;
  id v110 = (id)v78;
  if (v133 < 0)
  {
    __break(1u);
  }

  else
  {
    OUTLINED_FUNCTION_81_17();
    if (!v97 & v112)
    {
      OUTLINED_FUNCTION_50_23(v111);
      specialized Array._endMutation()(v113, v114, v115, v116);
      uint64_t v117 = OUTLINED_FUNCTION_112_7();
      v118(v117);

LABEL_74:
      uint64_t v126 = OUTLINED_FUNCTION_34_0();
      OUTLINED_FUNCTION_110_9(v126, type metadata accessor for ContactResolverConfigHashable);
      goto LABEL_75;
    }
  }

  __break(1u);
}

uint64_t specialized static ContactResolution.shouldSkipContactResolution(nlIntent:skIntent:contactQueries:)( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = swift_getObjectType(a2);
  uint64_t v11 = dynamic_cast_existential_1_conditional((uint64_t)a2, ObjectType, (uint64_t)&protocol descriptor for CallingIntent);
  if (v11)
  {
    uint64_t v13 = v12;
    uint64_t v14 = swift_getObjectType(v11);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 16);
    uint64_t v16 = a2;
    if (v15(v14, v13) == 2)
    {
      if (one-time initialization token for siriPhone != -1) {
LABEL_60:
      }
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      uint64_t v17 = type metadata accessor for Logger(0LL);
      uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.siriPhone);
      uint64_t v19 = (void *)Logger.logObject.getter(v18);
      os_log_type_t v21 = static os_log_type_t.debug.getter(v19, v20);
      if (!os_log_type_enabled((os_log_t)v19, v21))
      {

        return 1LL;
      }

      unint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v22 = 0;
      _os_log_impl( &dword_0,  (os_log_t)v19,  v21,  "#ContactResolution intent is emergency call. bypassing contact resolution",  v22,  2u);
      swift_slowDealloc(v22, -1LL, -1LL);

LABEL_71:
      return 1LL;
    }
  }

  if (!a3)
  {
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)(a5 + 8) + 8LL))(a4);
    if (v24)
    {
      uint64_t v25 = v24;
      if ((unint64_t)v24 >> 62)
      {
        if (v24 >= 0) {
          uint64_t v78 = v24 & 0xFFFFFFFFFFFFFF8LL;
        }
        else {
          uint64_t v78 = v24;
        }
        swift_bridgeObjectRetain();
        uint64_t v16 = (char *)_CocoaArrayWrapper.endIndex.getter(v78);
        swift_bridgeObjectRelease();
        if (v16)
        {
LABEL_13:
          unint64_t v26 = v25 & 0xC000000000000001LL;
          if ((v25 & 0xC000000000000001LL) != 0) {
            goto LABEL_75;
          }
          uint64_t v27 = *(void **)(v25 + 32);
          swift_bridgeObjectRetain();
          for (id i = v27; ; id i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v25))
          {
            uint64_t v29 = i;
            INPerson.hasHandleValue.getter();
            char v31 = v30;

            if ((v31 & 1) == 0) {
              goto LABEL_39;
            }
            if (v16 == (_BYTE *)&dword_0 + 1) {
              break;
            }
            id v41 = v26 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1LL, v25) : *(id *)(v25 + 40);
            uint64_t v42 = v41;
            INPerson.hasHandleValue.getter();
            char v44 = v43;

            if ((v44 & 1) == 0)
            {
LABEL_39:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              uint64_t v51 = 4LL;
              do
              {
                if (v26) {
                  id v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v51 - 4, v25);
                }
                else {
                  id v52 = *(id *)(v25 + 8 * v51);
                }
                os_log_type_t v53 = v52;
                uint64_t v54 = (char *)(v51 - 3);
                if (__OFADD__(v51 - 4, 1LL))
                {
                  __break(1u);
                  goto LABEL_60;
                }

                id v55 = [v52 personHandle];
                if (v55)
                {
                  id v56 = v55;
                  id v57 = [v55 emergencyType];

                  if (v57)
                  {
                    swift_bridgeObjectRelease_n(v25, 2LL);
                    if (one-time initialization token for siriPhone != -1) {
                      swift_once( &one-time initialization token for siriPhone,  one-time initialization function for siriPhone);
                    }
                    uint64_t v68 = type metadata accessor for Logger(0LL);
                    uint64_t v69 = __swift_project_value_buffer(v68, (uint64_t)static Logger.siriPhone);
                    uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
                    os_log_type_t v72 = static os_log_type_t.debug.getter(v70, v71);
                    if (os_log_type_enabled(v70, v72))
                    {
                      uint64_t v73 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                      uint64_t v74 = swift_slowAlloc(32LL, -1LL);
                      v83[0] = v74;
                      *(_DWORD *)uint64_t v73 = 136315138;
                      uint64_t v86 = (uint64_t)v57;
                      type metadata accessor for INPersonHandleEmergencyType(0LL);
                      uint64_t v76 = String.init<A>(describing:)(&v86, v75);
                      uint64_t v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v83);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v73 + 4, v73 + 12);
                      swift_bridgeObjectRelease();
                      _os_log_impl( &dword_0,  v70,  v72,  "#ContactResolution contact has a handle with an emergency type %s. bypassing contact resolution",  v73,  0xCu);
                      uint64_t v23 = 1LL;
                      swift_arrayDestroy(v74, 1LL);
                      swift_slowDealloc(v74, -1LL, -1LL);
                      swift_slowDealloc(v73, -1LL, -1LL);

                      return v23;
                    }

                    return 1LL;
                  }
                }

                ++v51;
              }

              while (v54 != v16);
              swift_bridgeObjectRelease();
              uint64_t v58 = a1[3];
              uint64_t v59 = a1[4];
              __swift_project_boxed_opaque_existential_1(a1, v58);
              uint64_t v60 = *(void *)((*(uint64_t (**)(uint64_t, uint64_t))(v59 + 24))(v58, v59) + 16);
              swift_bridgeObjectRelease();
              outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v83);
              if (!v60)
              {
                swift_bridgeObjectRelease();
                __swift_destroy_boxed_opaque_existential_1(v83);
                return 0LL;
              }

              uint64_t v61 = v84;
              uint64_t v62 = v85;
              __swift_project_boxed_opaque_existential_1(v83, v84);
              uint64_t v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 24))(v61, v62);
              char v64 = specialized Sequence.allSatisfy(_:)(v63, v25);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1(v83);
              if ((v64 & 1) == 0) {
                return 0LL;
              }
              if (one-time initialization token for siriPhone != -1) {
                swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
              }
              uint64_t v65 = type metadata accessor for Logger(0LL);
              uint64_t v66 = __swift_project_value_buffer(v65, (uint64_t)static Logger.siriPhone);
              uint64_t v19 = (void *)Logger.logObject.getter(v66);
              os_log_type_t v35 = static os_log_type_t.debug.getter(v19, v67);
              if (os_log_type_enabled((os_log_t)v19, v35))
              {
                uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                *(_WORD *)uint64_t v36 = 0;
                uint64_t v37 = "#ContactResolution server has already expanded contacts into the SK intent. bypassing contact resolution";
                goto LABEL_70;
              }

              goto LABEL_71;
            }

            if (v16 == (_BYTE *)&dword_0 + 2) {
              break;
            }
            uint64_t v45 = 6LL;
            while (1)
            {
              id v46 = v26
                  ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v45 - 4, v25)
                  : *(id *)(v25 + 8 * v45);
              uint64_t v47 = v46;
              unint64_t v48 = (char *)(v45 - 3);
              if (__OFADD__(v45 - 4, 1LL)) {
                break;
              }
              INPerson.hasHandleValue.getter();
              char v50 = v49;

              if ((v50 & 1) == 0) {
                goto LABEL_39;
              }
              ++v45;
              if (v48 == v16) {
                goto LABEL_17;
              }
            }

            __break(1u);
LABEL_75:
            swift_bridgeObjectRetain();
          }

void *specialized static ContactResolution.resolveContactQueries(contactQueries:siriKitIntent:app:nlIntent:sharedGlobals:)()
{
  uint64_t v54 = v0;
  uint64_t v55 = v1;
  id v47 = v2;
  uint64_t v48 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v49 = v8;
  uint64_t v9 = type metadata accessor for ResolvedSiriKitContact(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  OUTLINED_FUNCTION_94_4();
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  type metadata accessor for ContactResolverConfigHashable(0LL);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_11_0();
  uint64_t v51 = v13;
  if (v7 && (uint64_t v14 = App.appIdentifier.getter(), v15))
  {
    uint64_t v7 = (void *)v14;
    uint64_t v17 = v15;
    OUTLINED_FUNCTION_37_33(v14, v15, v16, (uint64_t)_swiftEmptyArrayStorage);
    uint64_t v19 = v18;
    unint64_t v21 = v18[2];
    unint64_t v20 = v18[3];
    if (v21 >= v20 >> 1)
    {
      BOOL v44 = OUTLINED_FUNCTION_142_8(v20);
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v44,  v21 + 1,  1LL,  v45);
      uint64_t v19 = v46;
    }

    void v19[2] = v21 + 1;
    unint64_t v22 = &v19[2 * v21];
    v22[4] = v7;
    v22[5] = v17;
  }

  else
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
  }

  char v50 = v19;
  if (one-time initialization token for emptyStartCallIntent != -1) {
    swift_once( &one-time initialization token for emptyStartCallIntent,  one-time initialization function for emptyStartCallIntent);
  }
  OUTLINED_FUNCTION_112_3((uint64_t) objc_msgSend( (id)static PhoneCallIntentClassNames.emptyStartCallIntent,  "_className",  v47,  v48));

  uint64_t v24 = v5[3];
  uint64_t v23 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v24);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v23 + 8))(v53, v24, v23);
  OUTLINED_FUNCTION_138_5();
  uint64_t v25 = OUTLINED_FUNCTION_9_0();
  DeviceState.siriInputLocale.getter(v25, v26);
  outlined init with copy of SignalProviding((uint64_t)v5, (uint64_t)&v52);
  swift_bridgeObjectRetain();
  id v27 = v47;
  uint64_t v28 = v51;
  ContactResolverConfigHashable.init(intentTypeName:locale:bundleIds:siriKitIntent:sharedGlobals:)();
  OUTLINED_FUNCTION_57_4();
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  OUTLINED_FUNCTION_11_26();
  uint64_t v29 = v53[3];
  uint64_t v30 = v53[4];
  OUTLINED_FUNCTION_138_5();
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 16))(v49, v28, v29, v30);
  OUTLINED_FUNCTION_57_4();
  uint64_t v32 = *(void *)(v31 + 16);
  uint64_t v33 = _swiftEmptyArrayStorage;
  if (v32)
  {
    v53[0] = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v32);
    OUTLINED_FUNCTION_158_4();
    uint64_t v49 = v31;
    uint64_t v35 = v31 + v34;
    uint64_t v36 = *(void *)(v10 + 72);
    uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
    do
    {
      uint64_t v38 = v37(v12, v35, v9);
      uint64_t v39 = ((uint64_t (*)(uint64_t))ResolvedSiriKitContact.person.getter)(v38);
      uint64_t v40 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v40);
      uint64_t v41 = *(void *)(v53[0] + 16LL);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v41);
      uint64_t v42 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v39);
      specialized ContiguousArray._endMutation()(v42);
      v35 += v36;
      --v32;
    }

    while (v32);
    uint64_t v33 = (void *)v53[0];
  }

  outlined destroy of SingleResultCallHistoryModel(v51, type metadata accessor for ContactResolverConfigHashable);
  OUTLINED_FUNCTION_39();
  swift_bridgeObjectRelease();
  return v33;
}

void specialized static ContactResolution.updateSiriKitIntentNLv3(siriKitIntent:nlIntent:app:locale:sharedGlobals:multicardinalIndex:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  uint64_t v23 = v22;
  HIDWORD(v7__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v24;
  uint64_t v76 = v25;
  uint64_t v77 = v26;
  uint64_t v75 = v27;
  uint64_t v82 = v28;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v33 = OUTLINED_FUNCTION_17_34();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_24_22();
  __chkstk_darwin();
  uint64_t v36 = (uint64_t *)((char *)&v72 - v35);
  __chkstk_darwin();
  uint64_t v38 = (char *)&v72 - v37;
  __chkstk_darwin();
  uint64_t v40 = (char *)&v72 - v39;
  uint64_t v41 = v23;
  uint64_t v42 = *(void *)(a21 + 8);
  if ((specialized static ContactResolution.shouldSkipContactResolution(nlIntent:skIntent:contactQueries:)( v30,  v32,  0LL,  v41,  v42) & 1) != 0) {
    goto LABEL_29;
  }
  uint64_t v83 = v38;
  uint64_t v79 = v36;
  uint64_t v81 = (uint64_t)v32;
  uint64_t v72 = v41;
  uint64_t v73 = v30;
  uint64_t v43 = v30[3];
  uint64_t v44 = v30[4];
  __swift_project_boxed_opaque_existential_1(v30, v43);
  uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 24))(v43, v44);
  uint64_t v46 = *(void *)(v45 + 16);
  uint64_t v84 = v42;
  if (v46)
  {
    uint64_t v86 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v80 = v45;
    uint64_t v47 = v45 + 32;
    uint64_t v48 = v86;
    do
    {
      outlined init with copy of SignalProviding(v47, (uint64_t)v85);
      OUTLINED_FUNCTION_79_12(v85);
      SiriPhoneContact.asSiriInferenceContact.getter();
      OUTLINED_FUNCTION_50_15();
      if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
      {
        OUTLINED_FUNCTION_60_10();
        uint64_t v48 = v86;
      }

      unint64_t v50 = v48[2];
      unint64_t v49 = v48[3];
      if (v50 >= v49 >> 1)
      {
        OUTLINED_FUNCTION_142_8(v49);
        OUTLINED_FUNCTION_60_10();
        uint64_t v48 = v86;
      }

      v48[2] = v50 + 1;
      OUTLINED_FUNCTION_158_4();
      OUTLINED_FUNCTION_142( (uint64_t)v48 + v51 + *(void *)(v34 + 72) * v50,  v21,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 32));
      uint64_t v86 = v48;
      v47 += 40LL;
      --v46;
      uint64_t v42 = v84;
    }

    while (v46);
    swift_bridgeObjectRelease();
  }

  else
  {
    OUTLINED_FUNCTION_4_1();
    uint64_t v48 = _swiftEmptyArrayStorage;
  }

  v85[0] = _swiftEmptyArrayStorage;
  uint64_t v53 = v81;
  uint64_t v52 = v82;
  uint64_t v80 = v48[2];
  if (!v80)
  {
LABEL_28:
    uint64_t v63 = v42;
    char v64 = BYTE4(v74) & 1;
    OUTLINED_FUNCTION_87_0();
    uint64_t v65 = v85[0];
    uint64_t v66 = v73;
    __swift_project_boxed_opaque_existential_1(v73, v73[3]);
    BOOL v67 = PhoneCallNLIntent.isDisplayNameEmergencyContact()();
    static SiriKitEventSender.current.getter(v85, v67);
    uint64_t v68 = type metadata accessor for EmergencyContactResolution();
    uint64_t v69 = OUTLINED_FUNCTION_8_2(v68, 16LL);
    LOBYTE(v70) = v64;
    specialized static ContactResolution.updateSiriKitIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:locale:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:)( v53,  v65,  v67,  v52,  v75,  (uint64_t)v66,  v76,  v77,  v70,  (uint64_t)v85,  v69,  v72,  v63,  v71,  v72,  (uint64_t)v73,  v74,  v75,  v76,  v77,  (char)v78,  v79,  v80,  v81,  v82);
    swift_release(v65);
    OUTLINED_FUNCTION_16_3();
    OUTLINED_FUNCTION_50_15();
LABEL_29:
    OUTLINED_FUNCTION_7_5();
    return;
  }

  unint64_t v54 = 0LL;
  while (v54 < v48[2])
  {
    unint64_t v55 = (*(unsigned __int8 *)(v34 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
    uint64_t v56 = *(void *)(v34 + 72);
    id v57 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    v57(v40, (char *)v48 + v55 + v56 * v54, v33);
    if (one-time initialization token for emptyQuery != -1) {
      swift_once(&one-time initialization token for emptyQuery, one-time initialization function for emptyQuery);
    }
    OUTLINED_FUNCTION_163_4(v33, (uint64_t)static ContactQuery.emptyQuery);
    char v58 = static ContactQuery.== infix(_:_:)(v40);
    v57(v83, v40, v33);
    if ((v58 & 1) != 0)
    {
      OUTLINED_FUNCTION_111_9();
    }

    else
    {
      if (one-time initialization token for emptyNLv4Query != -1) {
        swift_once( &one-time initialization token for emptyNLv4Query,  one-time initialization function for emptyNLv4Query);
      }
      OUTLINED_FUNCTION_163_4(v33, (uint64_t)static ContactQuery.emptyNLv4Query);
      char v59 = static ContactQuery.== infix(_:_:)(v83);
      OUTLINED_FUNCTION_111_9();
      if ((v59 & 1) == 0)
      {
        uint64_t v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 32);
        v78((uint64_t)v79, (uint64_t)v40, v33);
        uint64_t v60 = v85[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v85[0]) & 1) == 0)
        {
          OUTLINED_FUNCTION_60_10();
          uint64_t v60 = v85[0];
        }

        unint64_t v62 = *(void *)(v60 + 16);
        unint64_t v61 = *(void *)(v60 + 24);
        if (v62 >= v61 >> 1)
        {
          OUTLINED_FUNCTION_142_8(v61);
          OUTLINED_FUNCTION_60_10();
          uint64_t v60 = v85[0];
        }

        *(void *)(v60 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v62 + 1;
        OUTLINED_FUNCTION_142(v60 + v55 + v62 * v56, (uint64_t)v79, v78);
        v85[0] = v60;
        goto LABEL_27;
      }
    }

    ((void (*)(char *, uint64_t))v57)(v40, v33);
LABEL_27:
    ++v54;
    uint64_t v53 = v81;
    uint64_t v52 = v82;
    uint64_t v42 = v84;
    if (v80 == v54) {
      goto LABEL_28;
    }
  }

  __break(1u);
}

unint64_t lazy protocol witness table accessor for type [Substring] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Substring] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Substring] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Substring]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [Substring] and conformance [A]);
  }

  return result;
}

uint64_t sub_21DD6C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

Swift::Int partial apply for closure #1 in EmergencyContactResolution.populateEmergencyContacts(sirikitIntent:locale:medicalIDStore:)( uint64_t a1, char a2)
{
  return closure #1 in EmergencyContactResolution.populateEmergencyContacts(sirikitIntent:locale:medicalIDStore:)( a1,  a2 & 1,  *(void *)(v2 + 16),  *(void **)(v2 + 24),  *(void *)(v2 + 32));
}

ValueMetadata *type metadata accessor for ContactResolution()
{
  return &type metadata for ContactResolution;
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

#error "21DDF0: call analysis failed (funcsize=10)"
id specialized static ContactResolution.shouldSkipContactResolution(nlIntent:skIntent:contactQueries:)( uint64_t a1,  void *a2,  uint64_t a3,  uint64_t a4,  uint64_t a5)
{
  void *boxed_opaque_existential_1;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  char v30;
  char v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  const char *v38;
  void *v39;
  char v40;
  char v41;
  id v42;
  void *v43;
  char v44;
  char v45;
  id v46;
  void *v47;
  char v48;
  char v49;
  uint64_t v50;
  id result;
  void *v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  uint64_t v62;
  id v63;
  void *v64;
  id v65;
  uint64_t (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  os_log_s *v75;
  uint64_t v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89[5];
  uint64_t v90;
  void v91[5];
  v91[3] = a4;
  v91[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v91);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16LL))(boxed_opaque_existential_1, a1, a4);
  uint64_t ObjectType = swift_getObjectType(a2);
  uint64_t v12 = dynamic_cast_existential_1_conditional((uint64_t)a2, ObjectType, (uint64_t)&protocol descriptor for CallingIntent);
  if (v12)
  {
    uint64_t v14 = v13;
    uint64_t v15 = swift_getObjectType(v12);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 16);
    uint64_t v17 = a2;
    if (v16(v15, v14) == 2)
    {
      if (one-time initialization token for siriPhone != -1) {
LABEL_69:
      }
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      uint64_t v18 = type metadata accessor for Logger(0LL);
      uint64_t v19 = __swift_project_value_buffer(v18, (uint64_t)static Logger.siriPhone);
      unint64_t v20 = (void *)Logger.logObject.getter(v19);
      uint64_t v22 = static os_log_type_t.debug.getter(v20, v21);
      if (!os_log_type_enabled((os_log_t)v20, v22))
      {

LABEL_81:
        int v24 = 1LL;
        goto LABEL_82;
      }

      uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl( &dword_0,  (os_log_t)v20,  v22,  "#ContactResolution intent is emergency call. bypassing contact resolution",  v23,  2u);
      swift_slowDealloc(v23, -1LL, -1LL);

LABEL_80:
      goto LABEL_81;
    }
  }

  if (a3)
  {
    if (*(void *)(a3 + 16))
    {
LABEL_9:
      int v24 = 0LL;
LABEL_82:
      __swift_destroy_boxed_opaque_existential_1(v91);
      return (id)v24;
    }

    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    uint64_t v34 = __swift_project_value_buffer(v33, (uint64_t)static Logger.siriPhone);
    unint64_t v20 = (void *)Logger.logObject.getter(v34);
    uint64_t v36 = static os_log_type_t.debug.getter(v20, v35);
    if (!os_log_type_enabled((os_log_t)v20, v36)) {
      goto LABEL_80;
    }
    uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v37 = 0;
    uint64_t v38 = "#ContactResolution ContactQueries is empty, bypassing contact resolution";
LABEL_79:
    _os_log_impl(&dword_0, (os_log_t)v20, v36, v38, v37, 2u);
    swift_slowDealloc(v37, -1LL, -1LL);
    goto LABEL_80;
  }

  outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter(a2);
  if (!v25)
  {
LABEL_75:
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v84 = type metadata accessor for Logger(0LL);
    uint64_t v85 = __swift_project_value_buffer(v84, (uint64_t)static Logger.siriPhone);
    unint64_t v20 = (void *)Logger.logObject.getter(v85);
    uint64_t v36 = static os_log_type_t.debug.getter(v20, v86);
    if (!os_log_type_enabled((os_log_t)v20, v36)) {
      goto LABEL_80;
    }
    uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v37 = 0;
    uint64_t v38 = "#ContactResolution no contacts to resolve. bypassing contact resolution";
    goto LABEL_79;
  }

  uint64_t v17 = v25;
  if ((unint64_t)v25 >> 62)
  {
    if (v25 >= 0) {
      uint64_t v83 = v25 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v83 = v25;
    }
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter(v83);
    swift_bridgeObjectRelease();
    if (v26) {
      goto LABEL_13;
    }
    goto LABEL_74;
  }

  uint64_t v26 = *(void *)((char *)&dword_10 + (v25 & 0xFFFFFFFFFFFFFF8LL));
  if (!v26)
  {
LABEL_74:
    swift_bridgeObjectRelease();
    goto LABEL_75;
  }

void specialized static ContactResolution.updateSiriKitIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:locale:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
  uint64_t v35 = (uint8_t *)OUTLINED_FUNCTION_11_70(v27, v28, v29, v30, v31, v32, v33, v34);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_32_40();
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_29_36(v36, v113);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v38 = OUTLINED_FUNCTION_22_44(v37, v114);
  OUTLINED_FUNCTION_47_23((uint64_t)v38);
  if ((v22 & 1) != 0)
  {
    uint64_t v39 = OUTLINED_FUNCTION_100_8();
    uint64_t v40 = OUTLINED_FUNCTION_145_6(v39, v39, (uint64_t)&protocol descriptor for CallingIntent);
    uint64_t v41 = (os_log_s *)one-time initialization token for siriPhone;
    if (v40)
    {
      id v42 = OUTLINED_FUNCTION_73_21();
      if (v41 != (os_log_s *)-1LL) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v43 = OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_12_1(v43, (uint64_t)static Logger.siriPhone);
      os_log_type_t v44 = OUTLINED_FUNCTION_6_0();
      if (OUTLINED_FUNCTION_93(v44))
      {
        uint64_t v45 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
        OUTLINED_FUNCTION_28_22(v45);
        OUTLINED_FUNCTION_5( &dword_0,  v41,  v25,  "#ContactResolution NL intent has an emergency contact. Bypassing contact resolution.",  v35);
        OUTLINED_FUNCTION_0_2((uint64_t)v35);
      }

      [objc_allocWithZone(HKHealthStore) init];
      id v46 = OUTLINED_FUNCTION_147_3();
      OUTLINED_FUNCTION_17_6(v46, "initWithHealthStore:");
      OUTLINED_FUNCTION_154_5();
      uint64_t v48 = OUTLINED_FUNCTION_88_16(v47, &lazy cache variable for type metadata for HKMedicalIDStore);
      OUTLINED_FUNCTION_15_67(v48, (uint64_t)&protocol witness table for HKMedicalIDStore);

      OUTLINED_FUNCTION_78_18();
      goto LABEL_85;
    }

    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v49 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v49, (uint64_t)static Logger.siriPhone);
    os_log_type_t v50 = OUTLINED_FUNCTION_24();
    if (OUTLINED_FUNCTION_7(v50))
    {
      uint64_t v51 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
      *(_WORD *)uint64_t v51 = 0;
      OUTLINED_FUNCTION_5( &dword_0,  v41,  (os_log_type_t)v23._rawValue,  "#ContactResolution NL intent has an emergency contact but is not a CallingIntent!",  v51);
      OUTLINED_FUNCTION_0_2((uint64_t)v51);
    }

    os_log_type_t v25 = v117;
  }

  uint64_t v52 = OUTLINED_FUNCTION_58_18();
  if ((specialized static ContactResolution.shouldSkipContactResolution(nlIntent:skIntent:contactQueries:)( v52,  v53,  v54,  v55,  v56) & 1) != 0)
  {
LABEL_85:
    __swift_destroy_boxed_opaque_existential_1(&v121);
    OUTLINED_FUNCTION_7_5();
    return;
  }

  if (v118)
  {
    App.appIdentifier.getter();
    if (v57)
    {
      OUTLINED_FUNCTION_5_26();
      OUTLINED_FUNCTION_37_33(v58, v59, v60, (uint64_t)_swiftEmptyArrayStorage);
      OUTLINED_FUNCTION_83_17();
      if (v62) {
        OUTLINED_FUNCTION_44_25(v61);
      }
      OUTLINED_FUNCTION_116_7();
    }
  }

  if (one-time initialization token for emptyStartCallIntent != -1) {
    swift_once( &one-time initialization token for emptyStartCallIntent,  one-time initialization function for emptyStartCallIntent);
  }
  OUTLINED_FUNCTION_112_3((uint64_t) [(id)static PhoneCallIntentClassNames.emptyStartCallIntent _className]);
  OUTLINED_FUNCTION_35_13();
  OUTLINED_FUNCTION_25_46();
  OUTLINED_FUNCTION_19_53();
  OUTLINED_FUNCTION_94_12();
  uint64_t v63 = v24;
  OUTLINED_FUNCTION_89_11();
  OUTLINED_FUNCTION_18_54();
  OUTLINED_FUNCTION_13_72();
  OUTLINED_FUNCTION_14_60();
  if (v23._rawValue)
  {
    OUTLINED_FUNCTION_87_0();
    OUTLINED_FUNCTION_78_18();
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v64 = OUTLINED_FUNCTION_15_1();
    __swift_project_value_buffer(v64, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_26_7();
    uint64_t v65 = OUTLINED_FUNCTION_26_7();
    Logger.logObject.getter(v65);
    os_log_type_t v66 = OUTLINED_FUNCTION_59_8();
    if (OUTLINED_FUNCTION_9_57(v66))
    {
      BOOL v67 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v119 = OUTLINED_FUNCTION_7_0(32LL);
      *(_DWORD *)BOOL v67 = 136315138;
      OUTLINED_FUNCTION_26_7();
      uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v69 = OUTLINED_FUNCTION_74_16(v68);
      uint64_t v71 = OUTLINED_FUNCTION_68_20(v69, v70);
      OUTLINED_FUNCTION_43_22(v71);
      OUTLINED_FUNCTION_95_10();
      OUTLINED_FUNCTION_3_24();
      OUTLINED_FUNCTION_3_24();
      OUTLINED_FUNCTION_57_0(&dword_0, v21, v25, "#ContactResolution error=%s", v67);
      OUTLINED_FUNCTION_29_19();
      OUTLINED_FUNCTION_0_2(v119);
      OUTLINED_FUNCTION_0_2((uint64_t)v67);
    }

    else
    {
      OUTLINED_FUNCTION_3_24();
      OUTLINED_FUNCTION_3_24();
    }

    OUTLINED_FUNCTION_26_7();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v82 = OUTLINED_FUNCTION_63_19();
    if (OUTLINED_FUNCTION_42_21(v82))
    {
      OUTLINED_FUNCTION_130_2();
      OUTLINED_FUNCTION_38_1();
    }

    else
    {
      getpid();
      OUTLINED_FUNCTION_26_7();
      OUTLINED_FUNCTION_92_11();
      NSString v83 = OUTLINED_FUNCTION_128_7();
      OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_52_22();
    }

    OUTLINED_FUNCTION_134_4( (uint64_t (*)(uint64_t))outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter,  (void (*)(void *))INStartVideoCallIntent.overwriteContacts(newContacts:));
    uint64_t v84 = OUTLINED_FUNCTION_3_24();
    goto LABEL_84;
  }

  uint64_t v72 = OUTLINED_FUNCTION_12_73();
  id v73 = OUTLINED_FUNCTION_93_9(v72, "typeName");
  OUTLINED_FUNCTION_162_5();
  OUTLINED_FUNCTION_67_18();
  OUTLINED_FUNCTION_99_9();
  uint64_t v74 = OUTLINED_FUNCTION_8_2((uint64_t)&unk_40F460, 72LL);
  OUTLINED_FUNCTION_27_47(v74);
  OUTLINED_FUNCTION_140_7();
  OUTLINED_FUNCTION_77_16();
  uint64_t v79 = OUTLINED_FUNCTION_48_24( v75,  v76,  v77,  v78,  (uint64_t)closure #1 in static ContactResolution.updateSiriKitIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:locale:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:)partial apply);
  OUTLINED_FUNCTION_45_23(v79);
  OUTLINED_FUNCTION_16_3();
  uint64_t v80 = v24[2];
  if (v80)
  {
    OUTLINED_FUNCTION_69_17((uint64_t)_swiftEmptyArrayStorage);
    OUTLINED_FUNCTION_40_24();
    do
    {
      OUTLINED_FUNCTION_72_21();
      OUTLINED_FUNCTION_152_6();
      OUTLINED_FUNCTION_54_17();
      OUTLINED_FUNCTION_133_8();
      OUTLINED_FUNCTION_60_22();
      uint64_t v81 = OUTLINED_FUNCTION_71_15();
      specialized ContiguousArray._endMutation()(v81);
      v23._rawValue = (char *)v23._rawValue + v26;
      --v80;
    }

    while (v80);
    OUTLINED_FUNCTION_84_13();
    OUTLINED_FUNCTION_87_0();
  }

  else
  {
    OUTLINED_FUNCTION_50();
    OUTLINED_FUNCTION_87_0();
    v23._rawValue = _swiftEmptyArrayStorage;
  }

  if ((unint64_t)v23._rawValue >> 62)
  {
    OUTLINED_FUNCTION_26_27();
    uint64_t v80 = OUTLINED_FUNCTION_15_4();
    OUTLINED_FUNCTION_34_0();
  }

  else
  {
    OUTLINED_FUNCTION_114_6();
  }

  LOBYTE(v85) = a21;
  if (v80)
  {
    uint64_t v80 = (uint64_t)OUTLINED_FUNCTION_129_8();
    OUTLINED_FUNCTION_34_0();
    v23._rawValue = (void *)v80;
  }

  if ((a21 & 1) != 0)
  {
    OUTLINED_FUNCTION_143_4();
    if (!v89) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v92 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v92, (uint64_t)static Logger.siriPhone);
    os_log_type_t v93 = OUTLINED_FUNCTION_41();
    if (!OUTLINED_FUNCTION_10(v93)) {
      goto LABEL_82;
    }
    unint64_t v94 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
    OUTLINED_FUNCTION_31_0(v94);
    uint64_t v95 = "#ContactResolution multicardinalIndex is nil, overwriting contacts slot";
    goto LABEL_81;
  }

  outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter(v116);
  if (!v86)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v96 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v96, (uint64_t)static Logger.siriPhone);
    os_log_type_t v97 = OUTLINED_FUNCTION_41();
    if (!OUTLINED_FUNCTION_10(v97)) {
      goto LABEL_82;
    }
    uint64_t v98 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
    OUTLINED_FUNCTION_31_0(v98);
    uint64_t v95 = "#ContactResolution siriKitIntent contacts slot is nil, overwriting contacts slot";
    goto LABEL_81;
  }

  unint64_t v120 = v86;
  int v24 = (void *)((unint64_t)v23._rawValue >> 62);
  if (!((unint64_t)v23._rawValue >> 62))
  {
    uint64_t v87 = *(void *)((char *)&dword_10 + ((unint64_t)v23._rawValue & 0xFFFFFFFFFFFFF8LL));
    OUTLINED_FUNCTION_48_0();
    if (v87) {
      goto LABEL_44;
    }
LABEL_76:
    OUTLINED_FUNCTION_34_0();
    uint64_t v80 = v120;
    goto LABEL_77;
  }

  OUTLINED_FUNCTION_10_62();
  if (!OUTLINED_FUNCTION_15_4()) {
    goto LABEL_76;
  }
LABEL_44:
  OUTLINED_FUNCTION_36_31();
  uint64_t v88 = (void *)OUTLINED_FUNCTION_64_18();
  OUTLINED_FUNCTION_34_0();
  uint64_t v80 = v120;
  if (v120 >> 62)
  {
    OUTLINED_FUNCTION_8_1();
    LOBYTE(v85) = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_39();
  }

  else
  {
    uint64_t v85 = *(void *)((char *)&dword_10 + (v120 & 0xFFFFFFFFFFFFF8LL));
  }

  OUTLINED_FUNCTION_122_6();
  if (v90 ^ v91 | v89) {
    goto LABEL_61;
  }
  if (v24)
  {
    OUTLINED_FUNCTION_10_62();
    uint64_t v85 = OUTLINED_FUNCTION_15_4();
    OUTLINED_FUNCTION_34_0();
    uint64_t v80 = v120;
  }

  else
  {
    uint64_t v85 = *(void *)((char *)&dword_10 + ((unint64_t)v23._rawValue & 0xFFFFFFFFFFFFF8LL));
  }

  if ((unint64_t)v80 >> 62)
  {
    int v24 = (void *)(v80 < 0 ? v80 : v80 & 0xFFFFFFFFFFFFFF8LL);
    OUTLINED_FUNCTION_8_1();
    uint64_t v99 = OUTLINED_FUNCTION_98_10();
    OUTLINED_FUNCTION_39();
  }

  else
  {
    uint64_t v99 = *(void *)((char *)&dword_10 + (v80 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v99 < v85)
  {
LABEL_61:

LABEL_77:
    OUTLINED_FUNCTION_39();
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v110 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v110, (uint64_t)static Logger.siriPhone);
    os_log_type_t v111 = OUTLINED_FUNCTION_41();
    if (!OUTLINED_FUNCTION_10(v111)) {
      goto LABEL_82;
    }
    char v112 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
    OUTLINED_FUNCTION_31_0(v112);
    uint64_t v95 = "#ContactResolution: overwriting contacts slot";
LABEL_81:
    OUTLINED_FUNCTION_5(&dword_0, (os_log_s *)v80, (os_log_type_t)v85, v95, (uint8_t *)v24);
    OUTLINED_FUNCTION_0_2((uint64_t)v24);
LABEL_82:

    INStartVideoCallIntent.overwriteContacts(newContacts:)(v23);
    goto LABEL_83;
  }

  OUTLINED_FUNCTION_34_0();
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v100 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v100, (uint64_t)static Logger.siriPhone);
  os_log_type_t v101 = OUTLINED_FUNCTION_41();
  if (OUTLINED_FUNCTION_10(v101))
  {
    os_log_type_t v102 = (float *)OUTLINED_FUNCTION_7_0(12LL);
    OUTLINED_FUNCTION_17_50(v102, 3.852e-34);
    OUTLINED_FUNCTION_57_0( &dword_0,  (os_log_s *)v80,  (os_log_type_t)v85,  "#ContactResolution updating person at index %ld",  (uint8_t *)v102);
    OUTLINED_FUNCTION_0_2((uint64_t)v102);
  }

  OUTLINED_FUNCTION_151_4();
  if (v115 < 0)
  {
    __break(1u);
  }

  else
  {
    OUTLINED_FUNCTION_81_17();
    if (!v89 & v62)
    {
      OUTLINED_FUNCTION_50_23(v103);
      OUTLINED_FUNCTION_132_8(v104, v105, v106, v107);
      uint64_t v108 = OUTLINED_FUNCTION_105_6();
      INStartVideoCallIntent.overwriteContacts(newContacts:)((Swift::OpaquePointer)v108);

LABEL_83:
      uint64_t v84 = OUTLINED_FUNCTION_34_0();
LABEL_84:
      OUTLINED_FUNCTION_110_9(v84, type metadata accessor for ContactResolverConfigHashable);
      goto LABEL_85;
    }
  }

  __break(1u);
}

{
  os_log_s *v21;
  char v22;
  Swift::OpaquePointer v23;
  void *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  os_log_s *v41;
  id v42;
  uint64_t v43;
  os_log_type_t v44;
  _WORD *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSString v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void *v88;
  char v89;
  char v90;
  char v91;
  uint64_t v92;
  os_log_type_t v93;
  _WORD *v94;
  const char *v95;
  uint64_t v96;
  os_log_type_t v97;
  _WORD *v98;
  uint64_t v99;
  uint64_t v100;
  os_log_type_t v101;
  float *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v110;
  os_log_type_t v111;
  _WORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  os_log_type_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  OUTLINED_FUNCTION_29_2();
  uint64_t v35 = (uint8_t *)OUTLINED_FUNCTION_11_70(v27, v28, v29, v30, v31, v32, v33, v34);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_32_40();
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_29_36(v36, v113);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v38 = OUTLINED_FUNCTION_22_44(v37, v114);
  OUTLINED_FUNCTION_47_23((uint64_t)v38);
  if ((v22 & 1) != 0)
  {
    uint64_t v39 = OUTLINED_FUNCTION_100_8();
    uint64_t v40 = OUTLINED_FUNCTION_145_6(v39, v39, (uint64_t)&protocol descriptor for CallingIntent);
    uint64_t v41 = (os_log_s *)one-time initialization token for siriPhone;
    if (v40)
    {
      id v42 = OUTLINED_FUNCTION_73_21();
      if (v41 != (os_log_s *)-1LL) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v43 = OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_12_1(v43, (uint64_t)static Logger.siriPhone);
      os_log_type_t v44 = OUTLINED_FUNCTION_6_0();
      if (OUTLINED_FUNCTION_93(v44))
      {
        uint64_t v45 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
        OUTLINED_FUNCTION_28_22(v45);
        OUTLINED_FUNCTION_5( &dword_0,  v41,  v25,  "#ContactResolution NL intent has an emergency contact. Bypassing contact resolution.",  v35);
        OUTLINED_FUNCTION_0_2((uint64_t)v35);
      }

      [objc_allocWithZone(HKHealthStore) init];
      id v46 = OUTLINED_FUNCTION_147_3();
      OUTLINED_FUNCTION_17_6(v46, "initWithHealthStore:");
      OUTLINED_FUNCTION_154_5();
      uint64_t v48 = OUTLINED_FUNCTION_88_16(v47, &lazy cache variable for type metadata for HKMedicalIDStore);
      OUTLINED_FUNCTION_15_67(v48, (uint64_t)&protocol witness table for HKMedicalIDStore);

      OUTLINED_FUNCTION_78_18();
      goto LABEL_85;
    }

    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v49 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v49, (uint64_t)static Logger.siriPhone);
    os_log_type_t v50 = OUTLINED_FUNCTION_24();
    if (OUTLINED_FUNCTION_7(v50))
    {
      uint64_t v51 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
      *(_WORD *)uint64_t v51 = 0;
      OUTLINED_FUNCTION_5( &dword_0,  v41,  (os_log_type_t)v23._rawValue,  "#ContactResolution NL intent has an emergency contact but is not a CallingIntent!",  v51);
      OUTLINED_FUNCTION_0_2((uint64_t)v51);
    }

    os_log_type_t v25 = v117;
  }

  uint64_t v52 = OUTLINED_FUNCTION_58_18();
  if ((specialized static ContactResolution.shouldSkipContactResolution(nlIntent:skIntent:contactQueries:)( v52,  v53,  v54,  v55,  v56) & 1) != 0)
  {
LABEL_85:
    __swift_destroy_boxed_opaque_existential_1(&v121);
    OUTLINED_FUNCTION_7_5();
    return;
  }

  if (v118)
  {
    App.appIdentifier.getter();
    if (v57)
    {
      OUTLINED_FUNCTION_5_26();
      OUTLINED_FUNCTION_37_33(v58, v59, v60, (uint64_t)_swiftEmptyArrayStorage);
      OUTLINED_FUNCTION_83_17();
      if (v62) {
        OUTLINED_FUNCTION_44_25(v61);
      }
      OUTLINED_FUNCTION_116_7();
    }
  }

  if (one-time initialization token for emptyStartCallIntent != -1) {
    swift_once( &one-time initialization token for emptyStartCallIntent,  one-time initialization function for emptyStartCallIntent);
  }
  OUTLINED_FUNCTION_112_3((uint64_t) [(id)static PhoneCallIntentClassNames.emptyStartCallIntent _className]);
  OUTLINED_FUNCTION_35_13();
  OUTLINED_FUNCTION_25_46();
  OUTLINED_FUNCTION_19_53();
  OUTLINED_FUNCTION_94_12();
  uint64_t v63 = v24;
  OUTLINED_FUNCTION_89_11();
  OUTLINED_FUNCTION_18_54();
  OUTLINED_FUNCTION_13_72();
  OUTLINED_FUNCTION_14_60();
  if (v23._rawValue)
  {
    OUTLINED_FUNCTION_87_0();
    OUTLINED_FUNCTION_78_18();
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v64 = OUTLINED_FUNCTION_15_1();
    __swift_project_value_buffer(v64, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_26_7();
    uint64_t v65 = OUTLINED_FUNCTION_26_7();
    Logger.logObject.getter(v65);
    os_log_type_t v66 = OUTLINED_FUNCTION_59_8();
    if (OUTLINED_FUNCTION_9_57(v66))
    {
      BOOL v67 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v119 = OUTLINED_FUNCTION_7_0(32LL);
      *(_DWORD *)BOOL v67 = 136315138;
      OUTLINED_FUNCTION_26_7();
      uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v69 = OUTLINED_FUNCTION_74_16(v68);
      uint64_t v71 = OUTLINED_FUNCTION_68_20(v69, v70);
      OUTLINED_FUNCTION_43_22(v71);
      OUTLINED_FUNCTION_95_10();
      OUTLINED_FUNCTION_3_24();
      OUTLINED_FUNCTION_3_24();
      OUTLINED_FUNCTION_57_0(&dword_0, v21, v25, "#ContactResolution error=%s", v67);
      OUTLINED_FUNCTION_29_19();
      OUTLINED_FUNCTION_0_2(v119);
      OUTLINED_FUNCTION_0_2((uint64_t)v67);
    }

    else
    {
      OUTLINED_FUNCTION_3_24();
      OUTLINED_FUNCTION_3_24();
    }

    OUTLINED_FUNCTION_26_7();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v82 = OUTLINED_FUNCTION_63_19();
    if (OUTLINED_FUNCTION_42_21(v82))
    {
      OUTLINED_FUNCTION_130_2();
      OUTLINED_FUNCTION_38_1();
    }

    else
    {
      getpid();
      OUTLINED_FUNCTION_26_7();
      OUTLINED_FUNCTION_92_11();
      NSString v83 = OUTLINED_FUNCTION_128_7();
      OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_52_22();
    }

    OUTLINED_FUNCTION_134_4( (uint64_t (*)(uint64_t))outlined bridged method (pb) of @objc INStartAudioCallIntent.contacts.getter,  (void (*)(void *))INStartVideoCallIntent.overwriteContacts(newContacts:));
    uint64_t v84 = OUTLINED_FUNCTION_3_24();
    goto LABEL_84;
  }

  uint64_t v72 = OUTLINED_FUNCTION_12_73();
  id v73 = OUTLINED_FUNCTION_93_9(v72, "typeName");
  OUTLINED_FUNCTION_162_5();
  OUTLINED_FUNCTION_67_18();
  OUTLINED_FUNCTION_99_9();
  uint64_t v74 = OUTLINED_FUNCTION_8_2((uint64_t)&unk_40F438, 72LL);
  OUTLINED_FUNCTION_27_47(v74);
  OUTLINED_FUNCTION_140_7();
  OUTLINED_FUNCTION_77_16();
  uint64_t v79 = OUTLINED_FUNCTION_48_24( v75,  v76,  v77,  v78,  (uint64_t)partial apply for closure #1 in static ContactResolution.updateSiriKitIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:locale:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:));
  OUTLINED_FUNCTION_45_23(v79);
  OUTLINED_FUNCTION_16_3();
  uint64_t v80 = v24[2];
  if (v80)
  {
    OUTLINED_FUNCTION_69_17((uint64_t)_swiftEmptyArrayStorage);
    OUTLINED_FUNCTION_40_24();
    do
    {
      OUTLINED_FUNCTION_72_21();
      OUTLINED_FUNCTION_152_6();
      OUTLINED_FUNCTION_54_17();
      OUTLINED_FUNCTION_133_8();
      OUTLINED_FUNCTION_60_22();
      uint64_t v81 = OUTLINED_FUNCTION_71_15();
      specialized ContiguousArray._endMutation()(v81);
      v23._rawValue = (char *)v23._rawValue + v26;
      --v80;
    }

    while (v80);
    OUTLINED_FUNCTION_84_13();
    OUTLINED_FUNCTION_87_0();
  }

  else
  {
    OUTLINED_FUNCTION_50();
    OUTLINED_FUNCTION_87_0();
    v23._rawValue = _swiftEmptyArrayStorage;
  }

  if ((unint64_t)v23._rawValue >> 62)
  {
    OUTLINED_FUNCTION_26_27();
    uint64_t v80 = OUTLINED_FUNCTION_15_4();
    OUTLINED_FUNCTION_34_0();
  }

  else
  {
    OUTLINED_FUNCTION_114_6();
  }

  LOBYTE(v85) = a21;
  if (v80)
  {
    uint64_t v80 = (uint64_t)OUTLINED_FUNCTION_129_8();
    OUTLINED_FUNCTION_34_0();
    v23._rawValue = (void *)v80;
  }

  if ((a21 & 1) != 0)
  {
    OUTLINED_FUNCTION_143_4();
    if (!v89) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v92 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v92, (uint64_t)static Logger.siriPhone);
    os_log_type_t v93 = OUTLINED_FUNCTION_41();
    if (!OUTLINED_FUNCTION_10(v93)) {
      goto LABEL_82;
    }
    unint64_t v94 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
    OUTLINED_FUNCTION_31_0(v94);
    uint64_t v95 = "#ContactResolution multicardinalIndex is nil, overwriting contacts slot";
    goto LABEL_81;
  }

  outlined bridged method (pb) of @objc INStartAudioCallIntent.contacts.getter(v116);
  if (!v86)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v96 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v96, (uint64_t)static Logger.siriPhone);
    os_log_type_t v97 = OUTLINED_FUNCTION_41();
    if (!OUTLINED_FUNCTION_10(v97)) {
      goto LABEL_82;
    }
    uint64_t v98 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
    OUTLINED_FUNCTION_31_0(v98);
    uint64_t v95 = "#ContactResolution siriKitIntent contacts slot is nil, overwriting contacts slot";
    goto LABEL_81;
  }

  unint64_t v120 = v86;
  int v24 = (void *)((unint64_t)v23._rawValue >> 62);
  if (!((unint64_t)v23._rawValue >> 62))
  {
    uint64_t v87 = *(void *)((char *)&dword_10 + ((unint64_t)v23._rawValue & 0xFFFFFFFFFFFFF8LL));
    OUTLINED_FUNCTION_48_0();
    if (v87) {
      goto LABEL_44;
    }
LABEL_76:
    OUTLINED_FUNCTION_34_0();
    uint64_t v80 = v120;
    goto LABEL_77;
  }

  OUTLINED_FUNCTION_10_62();
  if (!OUTLINED_FUNCTION_15_4()) {
    goto LABEL_76;
  }
LABEL_44:
  OUTLINED_FUNCTION_36_31();
  uint64_t v88 = (void *)OUTLINED_FUNCTION_64_18();
  OUTLINED_FUNCTION_34_0();
  uint64_t v80 = v120;
  if (v120 >> 62)
  {
    OUTLINED_FUNCTION_8_1();
    LOBYTE(v85) = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_39();
  }

  else
  {
    uint64_t v85 = *(void *)((char *)&dword_10 + (v120 & 0xFFFFFFFFFFFFF8LL));
  }

  OUTLINED_FUNCTION_122_6();
  if (v90 ^ v91 | v89) {
    goto LABEL_61;
  }
  if (v24)
  {
    OUTLINED_FUNCTION_10_62();
    uint64_t v85 = OUTLINED_FUNCTION_15_4();
    OUTLINED_FUNCTION_34_0();
    uint64_t v80 = v120;
  }

  else
  {
    uint64_t v85 = *(void *)((char *)&dword_10 + ((unint64_t)v23._rawValue & 0xFFFFFFFFFFFFF8LL));
  }

  if ((unint64_t)v80 >> 62)
  {
    int v24 = (void *)(v80 < 0 ? v80 : v80 & 0xFFFFFFFFFFFFFF8LL);
    OUTLINED_FUNCTION_8_1();
    uint64_t v99 = OUTLINED_FUNCTION_98_10();
    OUTLINED_FUNCTION_39();
  }

  else
  {
    uint64_t v99 = *(void *)((char *)&dword_10 + (v80 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v99 < v85)
  {
LABEL_61:

LABEL_77:
    OUTLINED_FUNCTION_39();
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v110 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v110, (uint64_t)static Logger.siriPhone);
    os_log_type_t v111 = OUTLINED_FUNCTION_41();
    if (!OUTLINED_FUNCTION_10(v111)) {
      goto LABEL_82;
    }
    char v112 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
    OUTLINED_FUNCTION_31_0(v112);
    uint64_t v95 = "#ContactResolution: overwriting contacts slot";
LABEL_81:
    OUTLINED_FUNCTION_5(&dword_0, (os_log_s *)v80, (os_log_type_t)v85, v95, (uint8_t *)v24);
    OUTLINED_FUNCTION_0_2((uint64_t)v24);
LABEL_82:

    INStartVideoCallIntent.overwriteContacts(newContacts:)(v23);
    goto LABEL_83;
  }

  OUTLINED_FUNCTION_34_0();
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v100 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v100, (uint64_t)static Logger.siriPhone);
  os_log_type_t v101 = OUTLINED_FUNCTION_41();
  if (OUTLINED_FUNCTION_10(v101))
  {
    os_log_type_t v102 = (float *)OUTLINED_FUNCTION_7_0(12LL);
    OUTLINED_FUNCTION_17_50(v102, 3.852e-34);
    OUTLINED_FUNCTION_57_0( &dword_0,  (os_log_s *)v80,  (os_log_type_t)v85,  "#ContactResolution updating person at index %ld",  (uint8_t *)v102);
    OUTLINED_FUNCTION_0_2((uint64_t)v102);
  }

  OUTLINED_FUNCTION_151_4();
  if (v115 < 0)
  {
    __break(1u);
  }

  else
  {
    OUTLINED_FUNCTION_81_17();
    if (!v89 & v62)
    {
      OUTLINED_FUNCTION_50_23(v103);
      OUTLINED_FUNCTION_132_8(v104, v105, v106, v107);
      uint64_t v108 = OUTLINED_FUNCTION_105_6();
      INStartVideoCallIntent.overwriteContacts(newContacts:)((Swift::OpaquePointer)v108);

LABEL_83:
      uint64_t v84 = OUTLINED_FUNCTION_34_0();
LABEL_84:
      OUTLINED_FUNCTION_110_9(v84, type metadata accessor for ContactResolverConfigHashable);
      goto LABEL_85;
    }
  }

  __break(1u);
}

{
  os_log_s *v21;
  char v22;
  Swift::OpaquePointer v23;
  void *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  os_log_s *v41;
  id v42;
  uint64_t v43;
  os_log_type_t v44;
  _WORD *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSString v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void *v88;
  char v89;
  char v90;
  char v91;
  uint64_t v92;
  os_log_type_t v93;
  _WORD *v94;
  const char *v95;
  uint64_t v96;
  os_log_type_t v97;
  _WORD *v98;
  uint64_t v99;
  uint64_t v100;
  os_log_type_t v101;
  float *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v110;
  os_log_type_t v111;
  _WORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  os_log_type_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  OUTLINED_FUNCTION_29_2();
  uint64_t v35 = (uint8_t *)OUTLINED_FUNCTION_11_70(v27, v28, v29, v30, v31, v32, v33, v34);
  OUTLINED_FUNCTION_17_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_32_40();
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_29_36(v36, v113);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v38 = OUTLINED_FUNCTION_22_44(v37, v114);
  OUTLINED_FUNCTION_47_23((uint64_t)v38);
  if ((v22 & 1) != 0)
  {
    uint64_t v39 = OUTLINED_FUNCTION_100_8();
    uint64_t v40 = OUTLINED_FUNCTION_145_6(v39, v39, (uint64_t)&protocol descriptor for CallingIntent);
    uint64_t v41 = (os_log_s *)one-time initialization token for siriPhone;
    if (v40)
    {
      id v42 = OUTLINED_FUNCTION_73_21();
      if (v41 != (os_log_s *)-1LL) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v43 = OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_12_1(v43, (uint64_t)static Logger.siriPhone);
      os_log_type_t v44 = OUTLINED_FUNCTION_6_0();
      if (OUTLINED_FUNCTION_93(v44))
      {
        uint64_t v45 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
        OUTLINED_FUNCTION_28_22(v45);
        OUTLINED_FUNCTION_5( &dword_0,  v41,  v25,  "#ContactResolution NL intent has an emergency contact. Bypassing contact resolution.",  v35);
        OUTLINED_FUNCTION_0_2((uint64_t)v35);
      }

      [objc_allocWithZone(HKHealthStore) init];
      id v46 = OUTLINED_FUNCTION_147_3();
      OUTLINED_FUNCTION_17_6(v46, "initWithHealthStore:");
      OUTLINED_FUNCTION_154_5();
      uint64_t v48 = OUTLINED_FUNCTION_88_16(v47, &lazy cache variable for type metadata for HKMedicalIDStore);
      OUTLINED_FUNCTION_15_67(v48, (uint64_t)&protocol witness table for HKMedicalIDStore);

      OUTLINED_FUNCTION_78_18();
      goto LABEL_85;
    }

    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v49 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v49, (uint64_t)static Logger.siriPhone);
    os_log_type_t v50 = OUTLINED_FUNCTION_24();
    if (OUTLINED_FUNCTION_7(v50))
    {
      uint64_t v51 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
      *(_WORD *)uint64_t v51 = 0;
      OUTLINED_FUNCTION_5( &dword_0,  v41,  (os_log_type_t)v23._rawValue,  "#ContactResolution NL intent has an emergency contact but is not a CallingIntent!",  v51);
      OUTLINED_FUNCTION_0_2((uint64_t)v51);
    }

    os_log_type_t v25 = v117;
  }

  uint64_t v52 = OUTLINED_FUNCTION_58_18();
  if ((specialized static ContactResolution.shouldSkipContactResolution(nlIntent:skIntent:contactQueries:)( v52,  v53,  v54,  v55,  v56) & 1) != 0)
  {
LABEL_85:
    __swift_destroy_boxed_opaque_existential_1(&v121);
    OUTLINED_FUNCTION_7_5();
    return;
  }

  if (v118)
  {
    App.appIdentifier.getter();
    if (v57)
    {
      OUTLINED_FUNCTION_5_26();
      OUTLINED_FUNCTION_37_33(v58, v59, v60, (uint64_t)_swiftEmptyArrayStorage);
      OUTLINED_FUNCTION_83_17();
      if (v62) {
        OUTLINED_FUNCTION_44_25(v61);
      }
      OUTLINED_FUNCTION_116_7();
    }
  }

  if (one-time initialization token for emptyStartCallIntent != -1) {
    swift_once( &one-time initialization token for emptyStartCallIntent,  one-time initialization function for emptyStartCallIntent);
  }
  OUTLINED_FUNCTION_112_3((uint64_t) [(id)static PhoneCallIntentClassNames.emptyStartCallIntent _className]);
  OUTLINED_FUNCTION_35_13();
  OUTLINED_FUNCTION_25_46();
  OUTLINED_FUNCTION_19_53();
  OUTLINED_FUNCTION_94_12();
  uint64_t v63 = v24;
  OUTLINED_FUNCTION_89_11();
  OUTLINED_FUNCTION_18_54();
  OUTLINED_FUNCTION_13_72();
  OUTLINED_FUNCTION_14_60();
  if (v23._rawValue)
  {
    OUTLINED_FUNCTION_87_0();
    OUTLINED_FUNCTION_78_18();
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v64 = OUTLINED_FUNCTION_15_1();
    __swift_project_value_buffer(v64, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_26_7();
    uint64_t v65 = OUTLINED_FUNCTION_26_7();
    Logger.logObject.getter(v65);
    os_log_type_t v66 = OUTLINED_FUNCTION_59_8();
    if (OUTLINED_FUNCTION_9_57(v66))
    {
      BOOL v67 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v119 = OUTLINED_FUNCTION_7_0(32LL);
      *(_DWORD *)BOOL v67 = 136315138;
      OUTLINED_FUNCTION_26_7();
      uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v69 = OUTLINED_FUNCTION_74_16(v68);
      uint64_t v71 = OUTLINED_FUNCTION_68_20(v69, v70);
      OUTLINED_FUNCTION_43_22(v71);
      OUTLINED_FUNCTION_95_10();
      OUTLINED_FUNCTION_3_24();
      OUTLINED_FUNCTION_3_24();
      OUTLINED_FUNCTION_57_0(&dword_0, v21, v25, "#ContactResolution error=%s", v67);
      OUTLINED_FUNCTION_29_19();
      OUTLINED_FUNCTION_0_2(v119);
      OUTLINED_FUNCTION_0_2((uint64_t)v67);
    }

    else
    {
      OUTLINED_FUNCTION_3_24();
      OUTLINED_FUNCTION_3_24();
    }

    OUTLINED_FUNCTION_26_7();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v82 = OUTLINED_FUNCTION_63_19();
    if (OUTLINED_FUNCTION_42_21(v82))
    {
      OUTLINED_FUNCTION_130_2();
      OUTLINED_FUNCTION_38_1();
    }

    else
    {
      getpid();
      OUTLINED_FUNCTION_26_7();
      OUTLINED_FUNCTION_92_11();
      NSString v83 = OUTLINED_FUNCTION_128_7();
      OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_52_22();
    }

    OUTLINED_FUNCTION_134_4( (uint64_t (*)(uint64_t))outlined bridged method (pb) of @objc INStartCallIntent.contacts.getter,  (void (*)(void *))INStartCallIntent.overwriteContacts(newContacts:));
    uint64_t v84 = OUTLINED_FUNCTION_3_24();
    goto LABEL_84;
  }

  uint64_t v72 = OUTLINED_FUNCTION_12_73();
  id v73 = OUTLINED_FUNCTION_93_9(v72, "typeName");
  OUTLINED_FUNCTION_162_5();
  OUTLINED_FUNCTION_67_18();
  OUTLINED_FUNCTION_99_9();
  uint64_t v74 = OUTLINED_FUNCTION_8_2((uint64_t)&unk_40F488, 72LL);
  OUTLINED_FUNCTION_27_47(v74);
  OUTLINED_FUNCTION_140_7();
  OUTLINED_FUNCTION_77_16();
  uint64_t v79 = OUTLINED_FUNCTION_48_24( v75,  v76,  v77,  v78,  (uint64_t)closure #1 in static ContactResolution.updateSiriKitIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:locale:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:)partial apply);
  OUTLINED_FUNCTION_45_23(v79);
  OUTLINED_FUNCTION_16_3();
  uint64_t v80 = v24[2];
  if (v80)
  {
    OUTLINED_FUNCTION_69_17((uint64_t)_swiftEmptyArrayStorage);
    OUTLINED_FUNCTION_40_24();
    do
    {
      OUTLINED_FUNCTION_72_21();
      OUTLINED_FUNCTION_152_6();
      OUTLINED_FUNCTION_54_17();
      OUTLINED_FUNCTION_133_8();
      OUTLINED_FUNCTION_60_22();
      uint64_t v81 = OUTLINED_FUNCTION_71_15();
      specialized ContiguousArray._endMutation()(v81);
      v23._rawValue = (char *)v23._rawValue + v26;
      --v80;
    }

    while (v80);
    OUTLINED_FUNCTION_84_13();
    OUTLINED_FUNCTION_87_0();
  }

  else
  {
    OUTLINED_FUNCTION_50();
    OUTLINED_FUNCTION_87_0();
    v23._rawValue = _swiftEmptyArrayStorage;
  }

  if ((unint64_t)v23._rawValue >> 62)
  {
    OUTLINED_FUNCTION_26_27();
    uint64_t v80 = OUTLINED_FUNCTION_15_4();
    OUTLINED_FUNCTION_34_0();
  }

  else
  {
    OUTLINED_FUNCTION_114_6();
  }

  LOBYTE(v85) = a21;
  if (v80)
  {
    uint64_t v80 = (uint64_t)OUTLINED_FUNCTION_129_8();
    OUTLINED_FUNCTION_34_0();
    v23._rawValue = (void *)v80;
  }

  if ((a21 & 1) != 0)
  {
    OUTLINED_FUNCTION_143_4();
    if (!v89) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v92 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v92, (uint64_t)static Logger.siriPhone);
    os_log_type_t v93 = OUTLINED_FUNCTION_41();
    if (!OUTLINED_FUNCTION_10(v93)) {
      goto LABEL_82;
    }
    unint64_t v94 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
    OUTLINED_FUNCTION_31_0(v94);
    uint64_t v95 = "#ContactResolution multicardinalIndex is nil, overwriting contacts slot";
    goto LABEL_81;
  }

  outlined bridged method (pb) of @objc INStartCallIntent.contacts.getter(v116);
  if (!v86)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v96 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v96, (uint64_t)static Logger.siriPhone);
    os_log_type_t v97 = OUTLINED_FUNCTION_41();
    if (!OUTLINED_FUNCTION_10(v97)) {
      goto LABEL_82;
    }
    uint64_t v98 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
    OUTLINED_FUNCTION_31_0(v98);
    uint64_t v95 = "#ContactResolution siriKitIntent contacts slot is nil, overwriting contacts slot";
    goto LABEL_81;
  }

  unint64_t v120 = v86;
  int v24 = (void *)((unint64_t)v23._rawValue >> 62);
  if (!((unint64_t)v23._rawValue >> 62))
  {
    uint64_t v87 = *(void *)((char *)&dword_10 + ((unint64_t)v23._rawValue & 0xFFFFFFFFFFFFF8LL));
    OUTLINED_FUNCTION_48_0();
    if (v87) {
      goto LABEL_44;
    }
LABEL_76:
    OUTLINED_FUNCTION_34_0();
    uint64_t v80 = v120;
    goto LABEL_77;
  }

  OUTLINED_FUNCTION_10_62();
  if (!OUTLINED_FUNCTION_15_4()) {
    goto LABEL_76;
  }
LABEL_44:
  OUTLINED_FUNCTION_36_31();
  uint64_t v88 = (void *)OUTLINED_FUNCTION_64_18();
  OUTLINED_FUNCTION_34_0();
  uint64_t v80 = v120;
  if (v120 >> 62)
  {
    OUTLINED_FUNCTION_8_1();
    LOBYTE(v85) = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_39();
  }

  else
  {
    uint64_t v85 = *(void *)((char *)&dword_10 + (v120 & 0xFFFFFFFFFFFFF8LL));
  }

  OUTLINED_FUNCTION_122_6();
  if (v90 ^ v91 | v89) {
    goto LABEL_61;
  }
  if (v24)
  {
    OUTLINED_FUNCTION_10_62();
    uint64_t v85 = OUTLINED_FUNCTION_15_4();
    OUTLINED_FUNCTION_34_0();
    uint64_t v80 = v120;
  }

  else
  {
    uint64_t v85 = *(void *)((char *)&dword_10 + ((unint64_t)v23._rawValue & 0xFFFFFFFFFFFFF8LL));
  }

  if ((unint64_t)v80 >> 62)
  {
    int v24 = (void *)(v80 < 0 ? v80 : v80 & 0xFFFFFFFFFFFFFF8LL);
    OUTLINED_FUNCTION_8_1();
    uint64_t v99 = OUTLINED_FUNCTION_98_10();
    OUTLINED_FUNCTION_39();
  }

  else
  {
    uint64_t v99 = *(void *)((char *)&dword_10 + (v80 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v99 < v85)
  {
LABEL_61:

LABEL_77:
    OUTLINED_FUNCTION_39();
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v110 = OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_12_1(v110, (uint64_t)static Logger.siriPhone);
    os_log_type_t v111 = OUTLINED_FUNCTION_41();
    if (!OUTLINED_FUNCTION_10(v111)) {
      goto LABEL_82;
    }
    char v112 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
    OUTLINED_FUNCTION_31_0(v112);
    uint64_t v95 = "#ContactResolution: overwriting contacts slot";
LABEL_81:
    OUTLINED_FUNCTION_5(&dword_0, (os_log_s *)v80, (os_log_type_t)v85, v95, (uint8_t *)v24);
    OUTLINED_FUNCTION_0_2((uint64_t)v24);
LABEL_82:

    INStartCallIntent.overwriteContacts(newContacts:)(v23);
    goto LABEL_83;
  }

  OUTLINED_FUNCTION_34_0();
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v100 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v100, (uint64_t)static Logger.siriPhone);
  os_log_type_t v101 = OUTLINED_FUNCTION_41();
  if (OUTLINED_FUNCTION_10(v101))
  {
    os_log_type_t v102 = (float *)OUTLINED_FUNCTION_7_0(12LL);
    OUTLINED_FUNCTION_17_50(v102, 3.852e-34);
    OUTLINED_FUNCTION_57_0( &dword_0,  (os_log_s *)v80,  (os_log_type_t)v85,  "#ContactResolution updating person at index %ld",  (uint8_t *)v102);
    OUTLINED_FUNCTION_0_2((uint64_t)v102);
  }

  OUTLINED_FUNCTION_151_4();
  if (v115 < 0)
  {
    __break(1u);
  }

  else
  {
    OUTLINED_FUNCTION_81_17();
    if (!v89 & v62)
    {
      OUTLINED_FUNCTION_50_23(v103);
      OUTLINED_FUNCTION_132_8(v104, v105, v106, v107);
      uint64_t v108 = OUTLINED_FUNCTION_105_6();
      INStartCallIntent.overwriteContacts(newContacts:)((Swift::OpaquePointer)v108);

LABEL_83:
      uint64_t v84 = OUTLINED_FUNCTION_34_0();
LABEL_84:
      OUTLINED_FUNCTION_110_9(v84, type metadata accessor for ContactResolverConfigHashable);
      goto LABEL_85;
    }
  }

  __break(1u);
}

#error "21EEC4: call analysis failed (funcsize=10)"
void specialized static ContactResolution.updateSiriKitIntentNLv3(siriKitIntent:nlIntent:app:locale:sharedGlobals:multicardinalIndex:)( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t (*a22)(uint64_t, uint64_t, void, uint64_t, uint64_t),  void (*a23)(uint64_t, uint64_t, BOOL, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, void *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  char v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t (*v85)(uint64_t, uint64_t, void, uint64_t, uint64_t);
  void v86[5];
  char *v87;
  OUTLINED_FUNCTION_29_2();
  os_log_type_t v25 = v24;
  uint64_t v80 = v26;
  uint64_t v77 = v27;
  uint64_t v78 = v28;
  uint64_t v75 = v29;
  uint64_t v76 = v30;
  uint64_t v32 = v31;
  uint64_t v85 = a22;
  uint64_t v33 = OUTLINED_FUNCTION_17_34();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_24_22();
  __chkstk_darwin();
  uint64_t v81 = (uint64_t)&v71 - v35;
  __chkstk_darwin();
  uint64_t v37 = (char *)&v71 - v36;
  __chkstk_darwin();
  uint64_t v39 = (char *)&v71 - v38;
  uint64_t v40 = *(void *)(v25 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v43 = v42 - v41;
  (*(void (**)(void))(v40 + 16))();
  if ((v85(v43, v32, 0LL, v25, a21) & 1) != 0) {
    goto LABEL_29;
  }
  uint64_t v84 = v39;
  uint64_t v85 = (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))v37;
  uint64_t v72 = v40;
  NSString v83 = v32;
  os_log_type_t v44 = *(uint64_t (**)(uint64_t, uint64_t))(a21 + 24);
  uint64_t v74 = v25;
  uint64_t v45 = v44(v25, a21);
  id v46 = *(void *)(v45 + 16);
  id v73 = a21;
  uint64_t v79 = v43;
  if (v46)
  {
    uint64_t v87 = (char *)_swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v47 = v45 + 32;
    uint64_t v48 = v87;
    do
    {
      outlined init with copy of SignalProviding(v47, (uint64_t)v86);
      OUTLINED_FUNCTION_79_12(v86);
      SiriPhoneContact.asSiriInferenceContact.getter();
      OUTLINED_FUNCTION_50_15();
      if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
      {
        OUTLINED_FUNCTION_60_10();
        uint64_t v48 = v87;
      }

      uint64_t v49 = *((void *)v48 + 2);
      if (v49 >= *((void *)v48 + 3) >> 1)
      {
        OUTLINED_FUNCTION_60_10();
        uint64_t v48 = v87;
      }

      *((void *)v48 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v49 + 1;
      OUTLINED_FUNCTION_158_4();
      (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(&v48[v50 + *(void *)(v34 + 72) * v49], v23, v33);
      uint64_t v87 = v48;
      v47 += 40LL;
      --v46;
    }

    while (v46);
    swift_bridgeObjectRelease();
  }

  else
  {
    OUTLINED_FUNCTION_4_1();
    uint64_t v48 = (char *)_swiftEmptyArrayStorage;
  }

  v86[0] = _swiftEmptyArrayStorage;
  uint64_t v52 = v83;
  uint64_t v51 = (uint64_t)v84;
  uint64_t v53 = v80;
  uint64_t v82 = *((void *)v48 + 2);
  if (!v82)
  {
LABEL_28:
    uint64_t v64 = v53 & 1;
    swift_bridgeObjectRelease();
    uint64_t v65 = v86[0];
    os_log_type_t v66 = v73;
    os_log_type_t v25 = v74;
    BOOL v67 = PhoneCallNLIntent.isDisplayNameEmergencyContact()();
    static SiriKitEventSender.current.getter(v86, v67);
    uint64_t v68 = type metadata accessor for EmergencyContactResolution();
    uint64_t v69 = OUTLINED_FUNCTION_8_2(v68, 16LL);
    a23(v52, v65, v67, v75, v76, v79, v77, v78, v64, v86, v69, v25, v66);
    unint64_t v70 = v65;
    uint64_t v43 = v79;
    swift_release(v70);
    OUTLINED_FUNCTION_16_3();
    OUTLINED_FUNCTION_50_15();
    uint64_t v40 = v72;
LABEL_29:
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v43, v25);
    OUTLINED_FUNCTION_7_5();
    return;
  }

  uint64_t v54 = 0LL;
  while (v54 < *((void *)v48 + 2))
  {
    uint64_t v55 = (*(unsigned __int8 *)(v34 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
    uint64_t v56 = *(void *)(v34 + 72);
    uint64_t v57 = *(void (**)(char *, uint64_t))(v34 + 16);
    OUTLINED_FUNCTION_121_8(v51, (uint64_t)&v48[v55 + v56 * v54]);
    if (one-time initialization token for emptyQuery != -1) {
      swift_once(&one-time initialization token for emptyQuery, one-time initialization function for emptyQuery);
    }
    OUTLINED_FUNCTION_163_4(v33, (uint64_t)static ContactQuery.emptyQuery);
    uint64_t v58 = static ContactQuery.== infix(_:_:)(v51);
    uint64_t v59 = v51;
    uint64_t v60 = v58;
    OUTLINED_FUNCTION_121_8((uint64_t)v85, v59);
    if ((v60 & 1) != 0)
    {
      OUTLINED_FUNCTION_115_6();
    }

    else
    {
      if (one-time initialization token for emptyNLv4Query != -1) {
        swift_once( &one-time initialization token for emptyNLv4Query,  one-time initialization function for emptyNLv4Query);
      }
      OUTLINED_FUNCTION_163_4(v33, (uint64_t)static ContactQuery.emptyNLv4Query);
      unint64_t v61 = static ContactQuery.== infix(_:_:)(v85);
      OUTLINED_FUNCTION_115_6();
      if ((v61 & 1) == 0)
      {
        OUTLINED_FUNCTION_121_8(v81, (uint64_t)v84);
        char v62 = v86[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v86[0]) & 1) == 0)
        {
          OUTLINED_FUNCTION_60_10();
          char v62 = v86[0];
        }

        uint64_t v63 = *(void *)(v62 + 16);
        if (v63 >= *(void *)(v62 + 24) >> 1)
        {
          OUTLINED_FUNCTION_60_10();
          char v62 = v86[0];
        }

        *(void *)(v62 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v63 + 1;
        OUTLINED_FUNCTION_121_8(v62 + v55 + v63 * v56, v81);
        v86[0] = v62;
        uint64_t v53 = v80;
        uint64_t v51 = (uint64_t)v84;
        goto LABEL_27;
      }
    }

    uint64_t v51 = (uint64_t)v84;
    v57(v84, v33);
LABEL_27:
    ++v54;
    uint64_t v52 = v83;
    if (v82 == v54) {
      goto LABEL_28;
    }
  }

  __break(1u);
}

id specialized static ContactResolution.shouldSkipContactResolution(nlIntent:skIntent:contactQueries:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v91[3] = a4;
  v91[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v91);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16LL))(boxed_opaque_existential_1, a1, a4);
  uint64_t ObjectType = swift_getObjectType(a2);
  uint64_t v12 = dynamic_cast_existential_1_conditional((uint64_t)a2, ObjectType, (uint64_t)&protocol descriptor for CallingIntent);
  if (v12)
  {
    uint64_t v14 = v13;
    uint64_t v15 = swift_getObjectType(v12);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 16);
    uint64_t v17 = a2;
    if (v16(v15, v14) == 2)
    {
      if (one-time initialization token for siriPhone != -1) {
LABEL_69:
      }
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      uint64_t v18 = type metadata accessor for Logger(0LL);
      uint64_t v19 = __swift_project_value_buffer(v18, (uint64_t)static Logger.siriPhone);
      unint64_t v20 = (void *)Logger.logObject.getter(v19);
      os_log_type_t v22 = static os_log_type_t.debug.getter(v20, v21);
      if (!os_log_type_enabled((os_log_t)v20, v22))
      {

LABEL_81:
        uint64_t v24 = 1LL;
        goto LABEL_82;
      }

      Swift::OpaquePointer v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)Swift::OpaquePointer v23 = 0;
      _os_log_impl( &dword_0,  (os_log_t)v20,  v22,  "#ContactResolution intent is emergency call. bypassing contact resolution",  v23,  2u);
      swift_slowDealloc(v23, -1LL, -1LL);

LABEL_80:
      goto LABEL_81;
    }
  }

  if (a3)
  {
    if (*(void *)(a3 + 16))
    {
LABEL_9:
      uint64_t v24 = 0LL;
LABEL_82:
      __swift_destroy_boxed_opaque_existential_1(v91);
      return (id)v24;
    }

    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    uint64_t v34 = __swift_project_value_buffer(v33, (uint64_t)static Logger.siriPhone);
    unint64_t v20 = (void *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.debug.getter(v20, v35);
    if (!os_log_type_enabled((os_log_t)v20, v36)) {
      goto LABEL_80;
    }
    uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v37 = 0;
    uint64_t v38 = "#ContactResolution ContactQueries is empty, bypassing contact resolution";
LABEL_79:
    _os_log_impl(&dword_0, (os_log_t)v20, v36, v38, v37, 2u);
    swift_slowDealloc(v37, -1LL, -1LL);
    goto LABEL_80;
  }

  outlined bridged method (pb) of @objc INStartAudioCallIntent.contacts.getter(a2);
  if (!v25)
  {
LABEL_75:
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v84 = type metadata accessor for Logger(0LL);
    uint64_t v85 = __swift_project_value_buffer(v84, (uint64_t)static Logger.siriPhone);
    unint64_t v20 = (void *)Logger.logObject.getter(v85);
    os_log_type_t v36 = static os_log_type_t.debug.getter(v20, v86);
    if (!os_log_type_enabled((os_log_t)v20, v36)) {
      goto LABEL_80;
    }
    uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v37 = 0;
    uint64_t v38 = "#ContactResolution no contacts to resolve. bypassing contact resolution";
    goto LABEL_79;
  }

  uint64_t v17 = v25;
  if ((unint64_t)v25 >> 62)
  {
    if (v25 >= 0) {
      uint64_t v83 = v25 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v83 = v25;
    }
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter(v83);
    swift_bridgeObjectRelease();
    if (v26) {
      goto LABEL_13;
    }
    goto LABEL_74;
  }

  uint64_t v26 = *(void *)((char *)&dword_10 + (v25 & 0xFFFFFFFFFFFFFF8LL));
  if (!v26)
  {
LABEL_74:
    swift_bridgeObjectRelease();
    goto LABEL_75;
  }

void *specialized static PhoneDomainContextMetricsUtils.populatePhoneDomainContext(phoneCallNLIntent:contextNLType:app:resolvedSiriKitContacts:callStateProvider:)( void *a1, char a2, uint64_t a3, os_log_type_t a4, uint64_t a5)
{
  p_base_props = &CameraControlFlow.base_props;
  id v10 = [objc_allocWithZone(FLOWSchemaFLOWDomainContext) init];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = (__objc2_prop_list **)[objc_allocWithZone(FLOWSchemaFLOWPhoneCallContext) init];
    if (v12)
    {
      p_base_props = v12;
      if ((a2 & 1) != 0)
      {
        uint64_t v18 = (void *)OUTLINED_FUNCTION_9_0();
        static PhoneDomainContextMetricsUtils.addContactRecipientTypeNLv4(phoneContext:resolvedSiriKitContacts:)( v18,  v19);
      }

      else
      {
        uint64_t v13 = a1[4];
        OUTLINED_FUNCTION_97_12();
        uint64_t v14 = OUTLINED_FUNCTION_109_9(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 24));
        static PhoneDomainContextMetricsUtils.addContactRecipientTypeNLv3(phoneCallContacts:phoneContext:)( v14,  p_base_props);
        OUTLINED_FUNCTION_62();
      }

      uint64_t v20 = a1[4];
      OUTLINED_FUNCTION_97_12();
      uint64_t v21 = OUTLINED_FUNCTION_109_9(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 136));
      uint64_t v22 = *(void *)(v21 + 16);
      swift_bridgeObjectRelease(v21);
      if (v22) {
        [p_base_props addPersonType:10];
      }
      specialized static PhoneDomainContextMetricsUtils.addPhoneCallAppType(phoneCallNLIntent:app:phoneContext:callStateProvider:)( a1,  a3,  p_base_props);
      static PhoneDomainContextMetricsUtils.addPhoneCallType(phoneCallNLIntent:phoneContext:)((uint64_t)a1, p_base_props);
      static PhoneDomainContextMetricsUtils.addEmergencyType(phoneCallNLIntent:phoneContext:)((uint64_t)a1, p_base_props);
      [v11 setPhoneCallContext:p_base_props];
      [v11 setHasPhoneCallContext:1];
      goto LABEL_15;
    }
  }

  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v15 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v15, (uint64_t)static Logger.siriPhone);
  os_log_type_t v16 = OUTLINED_FUNCTION_59_8();
  if (OUTLINED_FUNCTION_10(v16))
  {
    uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_7_0(2LL);
    *(_WORD *)uint64_t v17 = 0;
    OUTLINED_FUNCTION_5( &dword_0,  (os_log_s *)&CameraControlFlow.base_props,  a4,  "#PhoneDomainContextMetricsUtils returning without logging phone domain context",  v17);
    OUTLINED_FUNCTION_0_2((uint64_t)v17);
  }

  uint64_t v11 = 0LL;
LABEL_15:

  outlined destroy of CallStateProvider(v24);
  return v11;
}

id specialized static PhoneDomainContextMetricsUtils.addPhoneCallAppType(phoneCallNLIntent:app:phoneContext:callStateProvider:)( void *a1, uint64_t a2, void *a3)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriPhone);
  uint64_t v7 = swift_retain_n(a2, 2LL);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    id v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v20 = a2;
    uint64_t v21 = v11;
    *(_DWORD *)id v10 = 136315138;
    swift_retain();
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for App?);
    uint64_t v13 = String.init<A>(describing:)(&v20, v12);
    unint64_t v15 = v14;
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v10 + 4, v10 + 12);
    swift_release_n(a2, 2LL);
    swift_bridgeObjectRelease(v15);
    _os_log_impl(&dword_0, v8, v9, "#PhoneDomainContextMetricsUtils addPhoneCallAppType with app: %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    if (a2) {
      goto LABEL_5;
    }
    return [a3 setPhoneCallAppType:0];
  }

  swift_release_n(a2, 2LL);
  if (!a2) {
    return [a3 setPhoneCallAppType:0];
  }
LABEL_5:
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  swift_retain();
  if (PhoneCallNLIntent.isFaceTimeCall()() && App.isFirstParty()())
  {
    [a3 setPhoneCallAppType:2];
  }

  else if (App.isFirstParty()())
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    if (PhoneCallNLIntent.isHangUpCall()()
      && (type metadata accessor for SiriEnvironment(0LL),
          uint64_t v17 = static SiriEnvironment.root.getter(),
          uint64_t v18 = SiriEnvironment.callState.getter(),
          uint64_t v19 = swift_release(v17),
          LOBYTE(v17) = dispatch thunk of CallStateEnvironmentProvider.isDropInCall.getter(v19),
          swift_release(v18),
          (v17 & 1) != 0))
    {
      [a3 setPhoneCallAppType:4];
    }

    else
    {
      [a3 setPhoneCallAppType:1];
    }
  }

  else
  {
    [a3 setPhoneCallAppType:3];
  }

  return (id)swift_release(a2);
}

uint64_t outlined destroy of (SiriPhoneContact, INPerson)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SiriPhoneContact, INPerson));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

#error "220948: call analysis failed (funcsize=10)"
id specialized static ContactResolution.shouldSkipContactResolution(nlIntent:skIntent:contactQueries:)( uint64_t a1,  void *a2,  uint64_t a3,  uint64_t a4,  uint64_t a5)
{
  void *boxed_opaque_existential_1;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  char v30;
  char v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  const char *v38;
  void *v39;
  char v40;
  char v41;
  id v42;
  void *v43;
  char v44;
  char v45;
  id v46;
  void *v47;
  char v48;
  char v49;
  uint64_t v50;
  id result;
  void *v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  uint64_t v62;
  id v63;
  void *v64;
  id v65;
  uint64_t (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  os_log_s *v75;
  uint64_t v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89[5];
  uint64_t v90;
  void v91[5];
  v91[3] = a4;
  v91[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v91);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16LL))(boxed_opaque_existential_1, a1, a4);
  uint64_t ObjectType = swift_getObjectType(a2);
  uint64_t v12 = dynamic_cast_existential_1_conditional((uint64_t)a2, ObjectType, (uint64_t)&protocol descriptor for CallingIntent);
  if (v12)
  {
    unint64_t v14 = v13;
    unint64_t v15 = swift_getObjectType(v12);
    os_log_type_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 16);
    uint64_t v17 = a2;
    if (v16(v15, v14) == 2)
    {
      if (one-time initialization token for siriPhone != -1) {
LABEL_69:
      }
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      uint64_t v18 = type metadata accessor for Logger(0LL);
      uint64_t v19 = __swift_project_value_buffer(v18, (uint64_t)static Logger.siriPhone);
      uint64_t v20 = (void *)Logger.logObject.getter(v19);
      uint64_t v22 = static os_log_type_t.debug.getter(v20, v21);
      if (!os_log_type_enabled((os_log_t)v20, v22))
      {

LABEL_81:
        uint64_t v24 = 1LL;
        goto LABEL_82;
      }

      Swift::OpaquePointer v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)Swift::OpaquePointer v23 = 0;
      _os_log_impl( &dword_0,  (os_log_t)v20,  v22,  "#ContactResolution intent is emergency call. bypassing contact resolution",  v23,  2u);
      swift_slowDealloc(v23, -1LL, -1LL);

LABEL_80:
      goto LABEL_81;
    }
  }

  if (a3)
  {
    if (*(void *)(a3 + 16))
    {
LABEL_9:
      uint64_t v24 = 0LL;
LABEL_82:
      __swift_destroy_boxed_opaque_existential_1(v91);
      return (id)v24;
    }

    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    uint64_t v34 = __swift_project_value_buffer(v33, (uint64_t)static Logger.siriPhone);
    uint64_t v20 = (void *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.debug.getter(v20, v35);
    if (!os_log_type_enabled((os_log_t)v20, v36)) {
      goto LABEL_80;
    }
    uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v37 = 0;
    uint64_t v38 = "#ContactResolution ContactQueries is empty, bypassing contact resolution";
LABEL_79:
    _os_log_impl(&dword_0, (os_log_t)v20, v36, v38, v37, 2u);
    swift_slowDealloc(v37, -1LL, -1LL);
    goto LABEL_80;
  }

  outlined bridged method (pb) of @objc INStartCallIntent.contacts.getter(a2);
  if (!v25)
  {
LABEL_75:
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v84 = type metadata accessor for Logger(0LL);
    uint64_t v85 = __swift_project_value_buffer(v84, (uint64_t)static Logger.siriPhone);
    uint64_t v20 = (void *)Logger.logObject.getter(v85);
    os_log_type_t v36 = static os_log_type_t.debug.getter(v20, v86);
    if (!os_log_type_enabled((os_log_t)v20, v36)) {
      goto LABEL_80;
    }
    uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v37 = 0;
    uint64_t v38 = "#ContactResolution no contacts to resolve. bypassing contact resolution";
    goto LABEL_79;
  }

  uint64_t v17 = v25;
  if ((unint64_t)v25 >> 62)
  {
    if (v25 >= 0) {
      uint64_t v83 = v25 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v83 = v25;
    }
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter(v83);
    swift_bridgeObjectRelease();
    if (v26) {
      goto LABEL_13;
    }
    goto LABEL_74;
  }

  uint64_t v26 = *(void *)((char *)&dword_10 + (v25 & 0xFFFFFFFFFFFFFF8LL));
  if (!v26)
  {
LABEL_74:
    swift_bridgeObjectRelease();
    goto LABEL_75;
  }

uint64_t sub_221A00()
{
  uint64_t v1 = OUTLINED_FUNCTION_94_4();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, ((v6 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8, v5);
}

#error "221B28: call analysis failed (funcsize=41)"
id partial apply for closure #1 in closure #1 in static EmergencyContactResolution.fetchEmergencyContacts(sirikitIntent:locale:medicalIDStore:_:)@<X0>( void **a1@<X0>,  void *a2@<X8>)
{
  id result;
  id result = static EmergencyContactResolution.makeINPerson(emergencyContact:locale:)(*a1);
  *a2 = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_10_62()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_11_70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 - 27__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a8;
  *(void *)(v8 - 26__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a5;
  *(void *)(v8 - 240) = a4;
  return type metadata accessor for ResolvedSiriKitContact(0LL);
}

uint64_t OUTLINED_FUNCTION_12_73()
{
  uint64_t v1 = *(void **)(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 - 168));
  uint64_t v2 = v1[3];
  *(void *)(v0 - 26__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return type metadata accessor for SiriKitEvent(0LL);
}

uint64_t OUTLINED_FUNCTION_13_72()
{
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 96))(v2, v3);
}

uint64_t OUTLINED_FUNCTION_14_60()
{
  uint64_t v2 = *(void *)(v1 - 144);
  uint64_t v3 = *(void *)(v1 - 136);
  __swift_project_boxed_opaque_existential_1((void *)(v1 - 168), v2);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(v3 + 16))(*(void *)(v1 - 248), v0, v2, v3);
}

uint64_t OUTLINED_FUNCTION_15_67@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v6 - 14__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a1;
  *(void *)(v6 - 136) = a2;
  *(void *)(v6 - 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v4;
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v2 + 80LL))( v3,  v5,  *(void *)(v6 - 264),  v6 - 168);
}

uint64_t OUTLINED_FUNCTION_17_50(float *a1, float a2)
{
  *a1 = a2;
  *(void *)(v3 - 20__swift_destroy_boxed_opaque_existential_1(v0 + 8) = *(void *)(v3 - 272);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 208, v3 - 200, a1 + 1, (char *)a1 + v2);
}

void OUTLINED_FUNCTION_18_54()
{
}

uint64_t OUTLINED_FUNCTION_19_53()
{
  uint64_t v1 = *(void *)(v0 - 144);
  uint64_t v2 = *(void *)(v0 - 136);
  __swift_project_boxed_opaque_existential_1((void *)(v0 - 168), v1);
  return DeviceState.siriInputLocale.getter(v1, v2);
}

void *OUTLINED_FUNCTION_22_44@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v4 - 23__swift_destroy_boxed_opaque_existential_1(v0 + 2) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v4 - 10__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  *(void *)(v4 - 96) = v2;
  return __swift_allocate_boxed_opaque_existential_1((void *)(v4 - 128));
}

uint64_t OUTLINED_FUNCTION_28_46()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_29_36@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 256) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return type metadata accessor for ContactResolverConfigHashable(0LL);
}

uint64_t OUTLINED_FUNCTION_32_40()
{
  return type metadata accessor for Locale(0LL);
}

uint64_t OUTLINED_FUNCTION_36_31()
{
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (v0 & 0xC000000000000001LL) == 0, v0);
}

void OUTLINED_FUNCTION_37_33(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t OUTLINED_FUNCTION_42_21(uint64_t a1)
{
  return swift_dynamicCast(v2 - 208, v2 - 168, v1, a1, 6LL);
}

uint64_t OUTLINED_FUNCTION_43_22(uint64_t a1)
{
  *(void *)(v4 - 20__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 208, v3 + 8, v2, v1);
}

void OUTLINED_FUNCTION_44_25(unint64_t a1@<X8>)
{
}

uint64_t OUTLINED_FUNCTION_45_23(uint64_t a1)
{
  return dispatch thunk of SiriKitEventSending.send(_:)(a1, v1, *(void *)(v2 - 264));
}

uint64_t OUTLINED_FUNCTION_47_23(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_48_24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)(131LL, v6, v5, a4, a5, v7);
}

void OUTLINED_FUNCTION_50_23(uint64_t a1@<X8>)
{
  uint64_t v3 = a1 + 8 * v1;
  uint64_t v4 = *(void **)(v3 + 32);
  *(void *)(v3 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v2;
}

uint64_t OUTLINED_FUNCTION_52_22()
{
  return SimulateCrash(v0, 0LL, v1);
}

uint64_t OUTLINED_FUNCTION_54_17()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_58_18()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_60_22()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)(*(void *)(v0 - 168)
                                                                                               + 16LL));
}

uint64_t OUTLINED_FUNCTION_61_18()
{
  return swift_isUniquelyReferenced_nonNull_bridgeObject(v0);
}

uint64_t OUTLINED_FUNCTION_63_19()
{
  return type metadata accessor for InferenceError(0LL);
}

void OUTLINED_FUNCTION_67_18()
{
  *(void *)(v2 - 24__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v0;
}

uint64_t OUTLINED_FUNCTION_68_20(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 168));
}

uint64_t OUTLINED_FUNCTION_69_17@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a1;
  return specialized ContiguousArray.reserveCapacity(_:)(v1);
}

uint64_t OUTLINED_FUNCTION_71_15()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_72_21()
{
  return v1(v3, v0, v2);
}

id OUTLINED_FUNCTION_73_21()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_74_16(uint64_t a1)
{
  return String.init<A>(describing:)(v1 - 208, a1);
}

  ;
}

void OUTLINED_FUNCTION_77_16()
{
  *(_BYTE *)(v0 - 20__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0;
}

uint64_t OUTLINED_FUNCTION_78_18()
{
  return __swift_destroy_boxed_opaque_existential_1((void *)(v0 - 168));
}

uint64_t OUTLINED_FUNCTION_80_10(uint64_t a1)
{
  return ContactQuery.handle.setter(v1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_82_14()
{
  return 1LL;
}

  ;
}

uint64_t OUTLINED_FUNCTION_84_13()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 248));
}

uint64_t OUTLINED_FUNCTION_88_16(uint64_t a1, unint64_t *a2)
{
  return type metadata accessor for CNContactStore(0LL, a2, v2);
}

uint64_t OUTLINED_FUNCTION_89_11()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_92_11()
{
  return String.init<A>(describing:)(v1 - 168, v0);
}

id OUTLINED_FUNCTION_93_9(uint64_t a1, const char *a2)
{
  *(void *)(v3 - 256) = v2;
  return [v2 a2];
}

uint64_t OUTLINED_FUNCTION_94_12()
{
  return outlined init with copy of SignalProviding(v0, v1 - 208);
}

void *OUTLINED_FUNCTION_97_12()
{
  return __swift_project_boxed_opaque_existential_1(v0, v1);
}

uint64_t OUTLINED_FUNCTION_98_10()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t OUTLINED_FUNCTION_99_9()
{
  return outlined init with copy of SignalProviding(v0 - 128, v0 - 168);
}

uint64_t OUTLINED_FUNCTION_100_8()
{
  *(void *)(v2 - 24__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v1;
  return swift_getObjectType(v0);
}

uint64_t OUTLINED_FUNCTION_101_8(uint64_t a1)
{
  return ContactHandleQuery.init(type:label:value:)(a1, 0LL, 0xE000000000000000LL, v1, v2);
}

void OUTLINED_FUNCTION_102_6( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t (*a23)(uint64_t, uint64_t, void, uint64_t, uint64_t), void (*a24)(uint64_t, uint64_t, BOOL, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, void *, uint64_t, uint64_t, uint64_t))
{
}

uint64_t OUTLINED_FUNCTION_105_6()
{
  return *(void *)(v0 - 168);
}

uint64_t OUTLINED_FUNCTION_110_9(uint64_t a1, uint64_t (*a2)(void))
{
  return outlined destroy of SingleResultCallHistoryModel(*(void *)(v2 - 232), a2);
}

uint64_t OUTLINED_FUNCTION_111_9()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_112_7()
{
  return v0;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_115_6()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

void OUTLINED_FUNCTION_116_7()
{
  *(void *)(v4 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v2;
  uint64_t v5 = v4 + 16 * v3;
  *(void *)(v5 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v0;
  *(void *)(v5 + 40) = v1;
}

id OUTLINED_FUNCTION_118_5()
{
  return *(id *)(v0 + 32);
}

uint64_t OUTLINED_FUNCTION_120_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _stringCompareInternal(_:_:_:_:expecting:)(a1, a2, a3, a4, a5, 0xE500000000000000LL, 0LL, 5LL);
}

uint64_t OUTLINED_FUNCTION_121_8(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

  ;
}

uint64_t OUTLINED_FUNCTION_124_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_127_7()
{
  return specialized _ArrayBuffer._consumeAndCreateNew()(v0);
}

void *OUTLINED_FUNCTION_129_8()
{
  return static ContactResolution.dedupeContacts(contacts:)(v0);
}

uint64_t OUTLINED_FUNCTION_130_2()
{
  return dispatch thunk of InferenceError.log()();
}

uint64_t OUTLINED_FUNCTION_132_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Array._endMutation()(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_133_8()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t OUTLINED_FUNCTION_134_4(uint64_t (*a1)(uint64_t), void (*a2)(void *))
{
  return specialized INPersonContainingIntent.clearContactsSlotMatches()(a1, a2);
}

uint64_t OUTLINED_FUNCTION_137_7(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ContactHandleQuery.init(type:label:value:)(a1, a2, a3, 0LL, 0xE000000000000000LL);
}

void *OUTLINED_FUNCTION_138_5()
{
  return __swift_project_boxed_opaque_existential_1((void *)(v1 - 120), v0);
}

uint64_t OUTLINED_FUNCTION_140_7()
{
  return swift_bridgeObjectRetain(*(void *)(v0 - 248));
}

  ;
}

uint64_t OUTLINED_FUNCTION_145_6(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dynamic_cast_existential_1_conditional(v3, a2, a3);
}

id OUTLINED_FUNCTION_147_3()
{
  return objc_allocWithZone(*v0);
}

uint64_t OUTLINED_FUNCTION_148_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_149_6(uint64_t a1, uint64_t a2)
{
  return v2(v3, a2, v4);
}

uint64_t OUTLINED_FUNCTION_152_6()
{
  return ResolvedSiriKitContact.person.getter();
}

void OUTLINED_FUNCTION_154_5()
{
}

uint64_t specialized Collection.emptyToNil.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = a1;
  swift_bridgeObjectRetain(a2);
  return v3;
}

uint64_t static PersonNameComponents.phoneticComponents(for:)(void *a1)
{
  uint64_t v4 = outlined bridged method (pb) of @objc INCallGroup.groupName.getter(a1, (SEL *)&selRef_pronunciationGivenName);
  if (!v5 || (specialized Collection.emptyToNil.getter(v4, v5), uint64_t v4 = OUTLINED_FUNCTION_1_81(), !v2))
  {
    id v6 = OUTLINED_FUNCTION_17_5(v4, "phoneticGivenName");
    OUTLINED_FUNCTION_126_3((uint64_t)v6);
    OUTLINED_FUNCTION_2_74();
    OUTLINED_FUNCTION_5_83();
    OUTLINED_FUNCTION_0_85();
    swift_bridgeObjectRelease();
  }

  PersonNameComponents.givenName.setter(v1, v2);
  uint64_t v7 = outlined bridged method (pb) of @objc INCallGroup.groupName.getter(a1, (SEL *)&selRef_pronunciationFamilyName);
  if (!v8 || (specialized Collection.emptyToNil.getter(v7, v8), uint64_t v7 = OUTLINED_FUNCTION_1_81(), !v2))
  {
    id v9 = OUTLINED_FUNCTION_17_5(v7, "phoneticFamilyName");
    OUTLINED_FUNCTION_126_3((uint64_t)v9);
    OUTLINED_FUNCTION_2_74();
    OUTLINED_FUNCTION_5_83();
    OUTLINED_FUNCTION_0_85();
    swift_bridgeObjectRelease();
  }

  uint64_t v10 = PersonNameComponents.familyName.setter(v1, v2);
  id v11 = OUTLINED_FUNCTION_17_5(v10, "phoneticMiddleName");
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  unint64_t v14 = v13;

  uint64_t v15 = specialized Collection.emptyToNil.getter(v12, v14);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  return PersonNameComponents.middleName.setter(v15, v17);
}

uint64_t PersonNameComponents.init(name:phoneticName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for PersonNameComponents(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin();
  unint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  PersonNameComponents.init()(v12);
  uint64_t v15 = PersonNameComponents.givenName.setter(a1, a2);
  PersonNameComponents.init()(v15);
  PersonNameComponents.givenName.setter(a3, a4);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v9, v14, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 0LL, 1LL, v10);
  PersonNameComponents.phoneticRepresentation.setter(v9);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t OUTLINED_FUNCTION_0_85()
{
  return swift_bridgeObjectRelease(0LL);
}

uint64_t OUTLINED_FUNCTION_1_81()
{
  return swift_bridgeObjectRelease(v0);
}

void OUTLINED_FUNCTION_2_74()
{
}

uint64_t SiriPhoneDefaultsKey.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_2224E4 + 4 * byte_338640[a1]))( 0xD000000000000011LL,  0x80000000003461C0LL);
}

unint64_t sub_2224E4()
{
  return 0xD000000000000010LL;
}

uint64_t sub_222500()
{
  return v0 + 14;
}

PhoneCallFlowDelegatePlugin::SiriPhoneDefaultsKey_optional __swiftcall SiriPhoneDefaultsKey.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of SiriPhoneDefaultsKey.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return (PhoneCallFlowDelegatePlugin::SiriPhoneDefaultsKey_optional)4;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::SiriPhoneDefaultsKey_optional)v3;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SiriPhoneDefaultsKey( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance SiriPhoneDefaultsKey()
{
}

void protocol witness for Hashable.hash(into:) in conformance SiriPhoneDefaultsKey(uint64_t a1)
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SiriPhoneDefaultsKey(uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::SiriPhoneDefaultsKey_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SiriPhoneDefaultsKey@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SiriPhoneDefaultsKey_optional *a2@<X8>)
{
  result.value = SiriPhoneDefaultsKey.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SiriPhoneDefaultsKey@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = SiriPhoneDefaultsKey.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t *SiriPhoneDefaults.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  return &static SiriPhoneDefaults.instance;
}

uint64_t static SiriPhoneDefaults.instance.getter()
{
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  uint64_t v0 = static SiriPhoneDefaults.instance;
  id v1 = (id)static SiriPhoneDefaults.instance;
  return v0;
}

void SiriPhoneDefaults.set<A>(key:value:)(char a1, uint64_t a2, uint64_t a3)
{
  id v8 = static DictionaryEncoderDecoder.encode<A>(_:)(v6, v7, *(void *)(*(void *)(v5 + 8) + 16LL));
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v9 = OUTLINED_FUNCTION_15_1();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.siriPhone);
  uint64_t v10 = swift_bridgeObjectRetain_n(v8, 2LL);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v13 = static os_log_type_t.debug.getter(v11, v12);
  char v25 = a1;
  if (os_log_type_enabled(v11, v13))
  {
    unint64_t v14 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
    uint64_t v15 = OUTLINED_FUNCTION_7_0(32LL);
    uint64_t v26 = v15;
    *(_DWORD *)unint64_t v14 = 136315138;
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v17 = a3;
    uint64_t v18 = Dictionary.description.getter( v16,  &type metadata for AnyHashable,  &type metadata for Any[1],  &protocol witness table for AnyHashable);
    unint64_t v20 = v19;
    OUTLINED_FUNCTION_129();
    uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v26);
    uint64_t v22 = OUTLINED_FUNCTION_7_87(v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22, v23, v24);
    OUTLINED_FUNCTION_7_4((uint64_t)v8);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_57_0(&dword_0, v11, v13, "#SiriPhoneDefaults Set: %s", v14);
    swift_arrayDestroy(v15, 1LL);
    OUTLINED_FUNCTION_0_2(v15);
    OUTLINED_FUNCTION_0_2((uint64_t)v14);

    if (v17) {
      goto LABEL_5;
    }
  }

  else
  {

    OUTLINED_FUNCTION_7_4((uint64_t)v8);
    if (a3)
    {
LABEL_5:
      Dictionary._bridgeToObjectiveC()();
      OUTLINED_FUNCTION_129();
      __asm { BR              X10 }
    }
  }

  OUTLINED_FUNCTION_129();
  OUTLINED_FUNCTION_7_5();
}

Swift::Void __swiftcall SiriPhoneDefaults.clear(key:)(PhoneCallFlowDelegatePlugin::SiriPhoneDefaultsKey key)
{
  if (v1) {
    __asm { BR              X11 }
  }

void sub_222BC8()
{
}

void protocol witness for SiriPhoneDefaultsProviding.set<A>(key:value:) in conformance SiriPhoneDefaults( char a1, uint64_t a2)
{
}

unint64_t lazy protocol witness table accessor for type SiriPhoneDefaultsKey and conformance SiriPhoneDefaultsKey()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriPhoneDefaultsKey and conformance SiriPhoneDefaultsKey;
  if (!lazy protocol witness table cache variable for type SiriPhoneDefaultsKey and conformance SiriPhoneDefaultsKey)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriPhoneDefaultsKey,  &type metadata for SiriPhoneDefaultsKey);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriPhoneDefaultsKey and conformance SiriPhoneDefaultsKey);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SiriPhoneDefaultsKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_222CC4 + 4 * byte_338651[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_222CF8 + 4 * byte_33864C[v4]))();
}

uint64_t sub_222CF8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_222D00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x222D08LL);
  }
  return result;
}

uint64_t sub_222D14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x222D1CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_222D20(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_222D28(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SiriPhoneDefaultsKey()
{
  return &type metadata for SiriPhoneDefaultsKey;
}

void **assignWithCopy for SiriPhoneDefaults(void **a1, void **a2)
{
  int v3 = *a1;
  uint64_t v4 = *a2;
  *a1 = *a2;
  id v5 = v4;

  return a1;
}

void **assignWithTake for SiriPhoneDefaults(void **a1, void **a2)
{
  int v3 = *a1;
  *a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for SiriPhoneDefaults()
{
  return &type metadata for SiriPhoneDefaults;
}

uint64_t OUTLINED_FUNCTION_7_87(uint64_t a1)
{
  *(void *)(v1 - 10__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a1;
  return v1 - 104;
}

  ;
}

void FaceTimeMessageControllerFlow.__allocating_init(app:skIntent:intentResponse:sharedGlobals:state:startCallCATs:flowFinder:siriKitEventSender:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v12 = OUTLINED_FUNCTION_1_82();
  specialized FaceTimeMessageControllerFlow.init(app:skIntent:intentResponse:sharedGlobals:state:startCallCATs:flowFinder:siriKitEventSender:)( v12,  v13,  v14,  v15,  v16,  v17,  v9,  v18,  a6,  a8,  v21);
  __swift_destroy_boxed_opaque_existential_1(a7);
  OUTLINED_FUNCTION_7_5();
}

uint64_t FaceTimeMessageControllerFlow.exitValue.getter@<X0>(uint64_t a1@<X8>)
{
  if (OUTLINED_FUNCTION_11_23() == 1)
  {
    uint64_t v4 = enum case for ConfirmationResponse.confirmed(_:);
    uint64_t v5 = type metadata accessor for ConfirmationResponse(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104LL))(v2, v4, v5);
    __swift_storeEnumTagSinglePayload(v2, 0LL, 1LL, v5);
    id v6 = *(void **)(v1 + 24);
    uint64_t v7 = type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INStartCallIntent,  &OBJC_CLASS___INStartCallIntent_ptr);
    ConfirmIntentAnswer.init(confirmationResponse:intent:)(v2, v6, v7);
    uint64_t v8 = enum case for PromptResult.answered<A>(_:);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<ConfirmIntentAnswer<INStartCallIntent>>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104LL))(a1, v8, v9);
  }

  else
  {
    uint64_t v11 = enum case for PromptResult.cancelled<A>(_:);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<ConfirmIntentAnswer<INStartCallIntent>>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104LL))(a1, v11, v12);
  }

unint64_t FaceTimeMessageControllerFlow.State.rawValue.getter(char a1)
{
  if (!a1) {
    return OUTLINED_FUNCTION_0_78();
  }
  if (a1 == 1) {
    return 0x65756E69746E6F63LL;
  }
  return 0x43526C65636E6163LL;
}

PhoneCallFlowDelegatePlugin::FaceTimeMessageControllerFlow::State_optional __swiftcall FaceTimeMessageControllerFlow.State.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of FaceTimeMessageControllerFlow.State.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return (PhoneCallFlowDelegatePlugin::FaceTimeMessageControllerFlow::State_optional)3;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::FaceTimeMessageControllerFlow::State_optional)v3;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance FaceTimeMessageControllerFlow.State( unsigned __int8 *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance FaceTimeMessageControllerFlow.State()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FaceTimeMessageControllerFlow.State( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance FaceTimeMessageControllerFlow.State( uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::FaceTimeMessageControllerFlow::State_optional protocol witness for RawRepresentable.init(rawValue:) in conformance FaceTimeMessageControllerFlow.State@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::FaceTimeMessageControllerFlow::State_optional *a2@<X8>)
{
  result.value = FaceTimeMessageControllerFlow.State.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance FaceTimeMessageControllerFlow.State@<X0>( unint64_t *a1@<X8>)
{
  unint64_t result = FaceTimeMessageControllerFlow.State.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance FaceTimeMessageControllerFlow.State()
{
  return FaceTimeMessageControllerFlow.State.rawValue.getter(*v0);
}

id FaceTimeMessageControllerFlow.intentResponse.getter()
{
  return *(id *)(v0 + 32);
}

uint64_t FaceTimeMessageControllerFlow.flowFinder.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 88, a1);
}

uint64_t SearchCallHistorySharedGlobals.phoneCallCommonCatPatterns.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 128, a1);
}

uint64_t key path setter for FaceTimeMessageControllerFlow.state : FaceTimeMessageControllerFlow( char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess(*a2 + 168, v5, 1LL, 0LL);
  *(_BYTE *)(v3 + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v2;
  return result;
}

uint64_t FaceTimeMessageControllerFlow.state.getter()
{
  return *(unsigned __int8 *)(v0 + 168);
}

void FaceTimeMessageControllerFlow.init(app:skIntent:intentResponse:sharedGlobals:state:startCallCATs:flowFinder:siriKitEventSender:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v20 = a6;
  uint64_t v21 = a8;
  OUTLINED_FUNCTION_13_73();
  __swift_mutable_project_boxed_opaque_existential_1(v9, *(void *)(v9 + 24));
  OUTLINED_FUNCTION_70_13();
  __chkstk_darwin();
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v12 + 16))(v11);
  uint64_t v13 = OUTLINED_FUNCTION_1_82();
  specialized FaceTimeMessageControllerFlow.init(app:skIntent:intentResponse:sharedGlobals:state:startCallCATs:flowFinder:siriKitEventSender:)( v13,  v14,  v15,  v16,  v17,  v18,  (uint64_t)v11,  v19,  v20,  v21,  v22);
  __swift_destroy_boxed_opaque_existential_1(a7);
  OUTLINED_FUNCTION_7_5();
}

uint64_t FaceTimeMessageControllerFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FaceTimeMessageControllerFlow();
  uint64_t v6 = lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy( &lazy protocol witness table cache variable for type FaceTimeMessageControllerFlow and conformance FaceTimeMessageControllerFlow,  v5,  (uint64_t (*)(uint64_t))type metadata accessor for FaceTimeMessageControllerFlow,  (uint64_t)&protocol conformance descriptor for FaceTimeMessageControllerFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v6);
}

uint64_t FaceTimeMessageControllerFlow.execute()(uint64_t a1)
{
  v2[13] = a1;
  v2[14] = v1;
  uint64_t v3 = type metadata accessor for CATOption(0LL);
  v2[15] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(FaceTimeMessageControllerFlow.execute(), 0LL, 0LL);
}

uint64_t FaceTimeMessageControllerFlow.execute()()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = OUTLINED_FUNCTION_15_1();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  uint64_t v3 = swift_retain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v6 = static os_log_type_t.debug.getter(v4, v5);
  if (os_log_type_enabled(v4, v6))
  {
    uint64_t v7 = OUTLINED_FUNCTION_7_0(22LL);
    uint64_t v8 = OUTLINED_FUNCTION_7_0(64LL);
    uint64_t v42 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    *(void *)(v0 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0x2865747563657865LL,  0xE900000000000029LL,  &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v7 + 4);
    *(_WORD *)(v7 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    int v9 = OUTLINED_FUNCTION_11_23();
    if (v9)
    {
      if (v9 == 1)
      {
        unint64_t v10 = 0xEF776F6C46484352LL;
        uint64_t v11 = 0x65756E69746E6F63LL;
      }

      else
      {
        unint64_t v10 = 0xED0000776F6C4648LL;
        uint64_t v11 = 0x43526C65636E6163LL;
      }
    }

    else
    {
      unint64_t v10 = 0x8000000000346250LL;
      uint64_t v11 = 0xD000000000000012LL;
    }

    uint64_t v12 = *(void *)(v0 + 112);
    *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v7 + 14);
    swift_bridgeObjectRelease();
    swift_release_n(v12, 2LL);
    _os_log_impl(&dword_0, v4, v6, "#FaceTimeMessageControllerFlow %s: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2LL);
    OUTLINED_FUNCTION_0_2(v8);
    OUTLINED_FUNCTION_0_2(v7);
  }

  else
  {
    swift_release_n(*(void *)(v0 + 112), 2LL);
  }

  uint64_t v13 = OUTLINED_FUNCTION_11_23();
  if ((_BYTE)v13)
  {
    static ExecuteResponse.complete()(v13);
  }

  else
  {
    char v41 = (void *)(v0 + 16);
    uint64_t v14 = *(void **)(v0 + 112);
    uint64_t v15 = v14[19];
    uint64_t v16 = v14[20];
    __swift_project_boxed_opaque_existential_1(v14 + 16, v15);
    uint64_t v17 = type metadata accessor for SiriKitEvent(0LL);
    id v18 = OUTLINED_FUNCTION_23_24(v17, "typeName");
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v21 = v20;

    swift_retain();
    uint64_t v22 = SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)( 131LL,  v19,  v21,  31LL,  partial apply for closure #1 in FaceTimeMessageControllerFlow.execute(),  v14);
    dispatch thunk of SiriKitEventSending.send(_:)(v22, v15, v16);
    uint64_t v23 = swift_release(v22);
    id v24 = OUTLINED_FUNCTION_23_24(v23, "faceTimeLink");
    if (v24)
    {
      char v25 = v24;
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      uint64_t v27 = v26;
    }

    else
    {
      uint64_t v40 = 0LL;
      uint64_t v27 = 0xE000000000000000LL;
    }

    id v28 = OUTLINED_FUNCTION_23_24((uint64_t)v24, "contacts");
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v30 = type metadata accessor for CNContactStore( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
      char v31 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v30);
    }

    else
    {
      char v31 = _swiftEmptyArrayStorage;
    }

    uint64_t v33 = *(void *)(v0 + 112);
    uint64_t v32 = *(void *)(v0 + 120);
    uint64_t v34 = type metadata accessor for MessagesFaceTimeLinkCompletionFlow(0LL);
    uint64_t v35 = *(void *)(v33 + 16);
    outlined init with copy of SignalProviding(v33 + 40, (uint64_t)v41);
    type metadata accessor for StartCallCATs(0LL);
    uint64_t v36 = swift_retain();
    static CATOption.defaultMode.getter(v36);
    uint64_t v37 = CATWrapper.__allocating_init(options:globals:)(v32, 0LL);
    uint64_t v38 = MessagesFaceTimeLinkCompletionFlow.__allocating_init(faceTimeLink:recipients:app:sharedGlobals:startCallCATs:)( v40,  v27,  (uint64_t)v31,  v35,  v41,  v37);
    OUTLINED_FUNCTION_3_3(v33 + 168, v0 + 56);
    *(_BYTE *)(v33 + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 1;
    *(void *)(v0 + 80) = v38;
    lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy( &lazy protocol witness table cache variable for type MessagesFaceTimeLinkCompletionFlow and conformance MessagesFaceTimeLinkCompletionFlow,  255LL,  type metadata accessor for MessagesFaceTimeLinkCompletionFlow,  (uint64_t)&protocol conformance descriptor for MessagesFaceTimeLinkCompletionFlow);
    swift_retain();
    static ExecuteResponse.ongoing<A>(next:childCompletion:)( v0 + 80,  partial apply for implicit closure #6 in implicit closure #5 in FaceTimeMessageControllerFlow.execute(),  v33,  v34);
    swift_release(v33);
    swift_release(v38);
  }

  swift_task_dealloc(*(void *)(v0 + 120));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in FaceTimeMessageControllerFlow.execute()()
{
  uint64_t v0 = swift_retain();
  dispatch thunk of SiriKitEvent.SiriKitEventBuilder.app.setter(v0);
  static PhoneDomainContextMetricsUtils.populatePhoneDomainContextForThirdPartyFaceTime()();
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.domainContext.setter(v1);
}

uint64_t FaceTimeMessageControllerFlow.messagesFlowOnComplete(exitValue:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSendMessageIntent, INSendMessageIntentResponse>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_5_1();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16))(v2, a1, v5);
  int v7 = (*(uint64_t (**)(uint64_t *, uint64_t))(v6 + 88))(v2, v5);
  if (v7 != enum case for RCHFlowResult.complete<A, B>(_:))
  {
    if (v7 == enum case for RCHFlowResult.error<A, B>(_:))
    {
      OUTLINED_FUNCTION_11_71(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 96));
      uint64_t v19 = *v2;
      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v20 = OUTLINED_FUNCTION_15_1();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.siriPhone);
      swift_errorRetain(v19);
      uint64_t v21 = swift_errorRetain(v19);
      uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        id v24 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
        uint64_t v25 = OUTLINED_FUNCTION_7_0(32LL);
        v39[0] = v25;
        *(_DWORD *)id v24 = 136315138;
        swift_getErrorValue(v19, v38, v37);
        uint64_t v26 = Error.localizedDescription.getter(v37[1], v37[2]);
        uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v24 + 4);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_3_24();
        OUTLINED_FUNCTION_3_24();
        _os_log_impl( &dword_0,  v22,  v23,  "#FaceTimeMessageControllerFlow handle messages flow encountered an error: %s",  v24,  0xCu);
        swift_arrayDestroy(v25, 1LL);
        OUTLINED_FUNCTION_0_2(v25);
        OUTLINED_FUNCTION_0_2((uint64_t)v24);

        OUTLINED_FUNCTION_3_24();
      }

      else
      {
        OUTLINED_FUNCTION_3_24();
        OUTLINED_FUNCTION_3_24();
        OUTLINED_FUNCTION_3_24();
      }
    }

    else
    {
      if (v7 != enum case for RCHFlowResult.cancelled<A, B>(_:))
      {
        OUTLINED_FUNCTION_3_3(v3 + 168, (uint64_t)v39);
        *(_BYTE *)(v3 + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 2;
        return OUTLINED_FUNCTION_11_71(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
      }

      if (one-time initialization token for siriPhone != -1) {
        swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
      }
      uint64_t v28 = OUTLINED_FUNCTION_15_1();
      uint64_t v29 = __swift_project_value_buffer(v28, (uint64_t)static Logger.siriPhone);
      uint64_t v30 = (void *)Logger.logObject.getter(v29);
      os_log_type_t v32 = static os_log_type_t.debug.getter(v30, v31);
      if (OUTLINED_FUNCTION_7(v32))
      {
        uint64_t v33 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
        *uint64_t v33 = 0;
        OUTLINED_FUNCTION_3_2( &dword_0,  v34,  v35,  "#FaceTimeMessageControllerFlow handle messages flow was cancelled or unanswered or encountered a generic error");
        OUTLINED_FUNCTION_0_2((uint64_t)v33);
      }
    }

    uint64_t result = OUTLINED_FUNCTION_3_3(v3 + 168, (uint64_t)v39);
    *(_BYTE *)(v3 + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 2;
    return result;
  }

  OUTLINED_FUNCTION_11_71(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 96));
  uint64_t v8 = *v2;
  int v9 = (void *)v2[1];

  swift_release(v8);
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v10 = OUTLINED_FUNCTION_15_1();
  uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.siriPhone);
  uint64_t v12 = (void *)Logger.logObject.getter(v11);
  os_log_type_t v14 = static os_log_type_t.debug.getter(v12, v13);
  if (OUTLINED_FUNCTION_7(v14))
  {
    uint64_t v15 = (_WORD *)OUTLINED_FUNCTION_7_0(2LL);
    *uint64_t v15 = 0;
    OUTLINED_FUNCTION_3_2( &dword_0,  v16,  v17,  "#FaceTimeMessageControllerFlow handle messages flow was successful and confirmed");
    OUTLINED_FUNCTION_0_2((uint64_t)v15);
  }

  uint64_t result = OUTLINED_FUNCTION_3_3(v3 + 168, (uint64_t)v39);
  *(_BYTE *)(v3 + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = 1;
  return result;
}

uint64_t FaceTimeMessageControllerFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 40));
  swift_release(*(void *)(v0 + 80));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 88));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 128));
  return v0;
}

uint64_t FaceTimeMessageControllerFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 169LL, 7LL);
}

uint64_t protocol witness for Flow.execute() in conformance FaceTimeMessageControllerFlow(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 200LL);
  int v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance ContactNeedsValueGuardFlow<A>;
  return v7(a1);
}

uint64_t specialized FaceTimeMessageControllerFlow.init(app:skIntent:intentResponse:sharedGlobals:state:startCallCATs:flowFinder:siriKitEventSender:)( uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, char a5, uint64_t a6, uint64_t a7, __int128 *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(a9 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a10;
  *(void *)(a9 + 120) = a11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(a9 + 88));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32LL))( boxed_opaque_existential_1,  a7,  a10);
  *(void *)(a9 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(a9 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a2;
  *(void *)(a9 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a3;
  outlined init with take of AppSelectionSignalComponent(a4, a9 + 40);
  *(_BYTE *)(a9 + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a5;
  *(void *)(a9 + 80) = a6;
  outlined init with take of AppSelectionSignalComponent(a8, a9 + 128);
  return a9;
}

uint64_t type metadata accessor for FaceTimeMessageControllerFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC27PhoneCallFlowDelegatePlugin29FaceTimeMessageControllerFlow);
}

uint64_t partial apply for closure #1 in FaceTimeMessageControllerFlow.execute()()
{
  return closure #1 in FaceTimeMessageControllerFlow.execute()();
}

uint64_t partial apply for implicit closure #6 in implicit closure #5 in FaceTimeMessageControllerFlow.execute()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208LL))();
}

unint64_t lazy protocol witness table accessor for type FaceTimeMessageControllerFlow.State and conformance FaceTimeMessageControllerFlow.State()
{
  unint64_t result = lazy protocol witness table cache variable for type FaceTimeMessageControllerFlow.State and conformance FaceTimeMessageControllerFlow.State;
  if (!lazy protocol witness table cache variable for type FaceTimeMessageControllerFlow.State and conformance FaceTimeMessageControllerFlow.State)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for FaceTimeMessageControllerFlow.State,  &type metadata for FaceTimeMessageControllerFlow.State);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type FaceTimeMessageControllerFlow.State and conformance FaceTimeMessageControllerFlow.State);
  }

  return result;
}

uint64_t base witness table accessor for Flow in FaceTimeMessageControllerFlow(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy( &lazy protocol witness table cache variable for type FaceTimeMessageControllerFlow and conformance FaceTimeMessageControllerFlow,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for FaceTimeMessageControllerFlow,  (uint64_t)&protocol conformance descriptor for FaceTimeMessageControllerFlow);
}

uint64_t sub_223DA8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = OUTLINED_FUNCTION_11_23();
  *a1 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for FaceTimeMessageControllerFlow.State( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_223E20 + 4 * byte_338795[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_223E54 + 4 * asc_338790[v4]))();
}

uint64_t sub_223E54(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_223E5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x223E64LL);
  }
  return result;
}

uint64_t sub_223E70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x223E78LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_223E7C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_223E84(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FaceTimeMessageControllerFlow.State()
{
  return &type metadata for FaceTimeMessageControllerFlow.State;
}

uint64_t OUTLINED_FUNCTION_1_82()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_71@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

  ;
}

uint64_t static RelationshipLabel.from(intentsRelationship:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  object = v4;
  uint64_t v20 = countAndFlagsBits;
  uint64_t v21 = v4;
  v19[0] = 46LL;
  v19[1] = 0xE100000000000000LL;
  unint64_t v6 = lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  if ((StringProtocol.contains<A>(_:)(v19, &type metadata for String, &type metadata for String, v6, v6) & 1) != 0)
  {
    uint64_t v20 = countAndFlagsBits;
    uint64_t v21 = object;
    swift_bridgeObjectRetain();
    uint64_t v7 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)( 46LL,  0xE100000000000000LL,  0x7FFFFFFFFFFFFFFFLL,  1LL,  &type metadata for String,  v6);
    OUTLINED_FUNCTION_34_0();
    uint64_t v8 = specialized BidirectionalCollection.last.getter(v7);
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    if (v14)
    {
      static String._fromSubstring(_:)(v8, v10, v12, v14);
      OUTLINED_FUNCTION_34_0();
      swift_bridgeObjectRelease();
    }

    Swift::String v15 = String.lowercased()();
    uint64_t countAndFlagsBits = v15._countAndFlagsBits;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_34_0();
    object = v15._object;
  }

  else
  {
    OUTLINED_FUNCTION_34_0();
  }

  *a2 = countAndFlagsBits;
  a2[1] = (uint64_t)object;
  uint64_t v16 = enum case for RelationshipLabel.custom(_:);
  uint64_t v17 = type metadata accessor for RelationshipLabel(0LL);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104LL))(a2, v16, v17);
}

  ;
}

uint64_t OUTLINED_FUNCTION_3_99()
{
  return v0;
}

uint64_t PhoneError.logged()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = v1;
  uint64_t v6 = OUTLINED_FUNCTION_82_0();
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_39_2();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v34 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v34 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v34 - v15;
  OUTLINED_FUNCTION_34_30(v4);
  if (OUTLINED_FUNCTION_31_37((uint64_t)v16) == 23)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v17 = OUTLINED_FUNCTION_15_1();
    id v18 = (os_log_s *)__swift_project_value_buffer(v17, (uint64_t)static Logger.siriPhone);
    uint64_t v19 = outlined init with copy of PhoneError(v4, (uint64_t)v14);
    Logger.logObject.getter(v19);
    os_log_type_t v20 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_11_5(v20))
    {
      uint64_t v21 = OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v36 = a1;
      uint64_t v22 = (uint8_t *)v21;
      uint64_t v35 = (void *)OUTLINED_FUNCTION_7_0(8LL);
      *(_DWORD *)uint64_t v22 = 138412290;
      uint64_t v34 = v22 + 4;
      unint64_t v23 = lazy protocol witness table accessor for type PhoneError and conformance PhoneError();
      uint64_t v24 = OUTLINED_FUNCTION_4_4(v6, v23);
      outlined init with copy of PhoneError((uint64_t)v14, v25);
      uint64_t v26 = _swift_stdlib_bridgeErrorToNSError(v24);
      uint64_t v37 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v34, v22 + 12);
      uint64_t v27 = (uint64_t)v35;
      void *v35 = v26;
      outlined destroy of PhoneError((uint64_t)v14);
      OUTLINED_FUNCTION_57_0(&dword_0, v18, v3, "#PhoneError Emitting signpost for %@", v22);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v27, 1LL);
      OUTLINED_FUNCTION_0_2(v27);
      uint64_t v28 = (uint64_t)v22;
      a1 = v36;
      OUTLINED_FUNCTION_0_2(v28);
    }

    else
    {
      outlined destroy of PhoneError((uint64_t)v14);
    }

    static Signpost.event(_:)();
  }

  else
  {
    OUTLINED_FUNCTION_32_41();
  }

  outlined init with copy of PhoneError(v4, (uint64_t)v11);
  unsigned int v29 = OUTLINED_FUNCTION_31_37((uint64_t)v11) - 14;
  if (v29 < 8 && ((0x8Du >> v29) & 1) != 0)
  {
    char v30 = 0;
  }

  else
  {
    outlined destroy of PhoneError((uint64_t)v11);
    char v30 = 1;
  }

  outlined init with copy of PhoneError(v4, v2);
  unsigned int v31 = OUTLINED_FUNCTION_31_37(v2) - 14;
  if (v31 < 0xA && ((0x28Du >> v31) & 1) != 0)
  {
    char v32 = 0;
  }

  else
  {
    outlined destroy of PhoneError(v2);
    char v32 = 1;
  }

  return specialized LoggableError.logged(shouldLogToAbc:shouldCreateTTR:)(v30, v32, a1);
}

uint64_t type metadata accessor for PhoneError(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for PhoneError;
  if (!type metadata singleton initialization cache for PhoneError) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PhoneError);
  }
  return result;
}

uint64_t specialized LoggableError.logged(shouldLogToAbc:shouldCreateTTR:)@<X0>( char w0_0@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v54 = 0LL;
  uint64_t v55 = 0xE000000000000000LL;
  uint64_t v53 = OUTLINED_FUNCTION_82_0();
  _print_unlocked<A, B>(_:_:)( v4,  &v54,  v53,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t v8 = v55;
  uint64_t v52 = v54;
  if ((w0_0 & 1) != 0)
  {
    uint64_t v50 = a3;
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v9 = OUTLINED_FUNCTION_15_1();
    uint64_t v10 = (os_log_s *)__swift_project_value_buffer(v9, (uint64_t)static Logger.siriPhone);
    uint64_t v11 = swift_bridgeObjectRetain_n(v8, 2LL);
    Logger.logObject.getter(v11);
    os_log_type_t v12 = OUTLINED_FUNCTION_6_0();
    if (os_log_type_enabled(v10, v12))
    {
      uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v14 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v54 = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v15 = OUTLINED_FUNCTION_124();
      OUTLINED_FUNCTION_26_47(v15, v16, v17, v18);
      OUTLINED_FUNCTION_43_23();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, v20, v13 + 4, v13 + 12);
      OUTLINED_FUNCTION_40_25();
      OUTLINED_FUNCTION_57_0(&dword_0, v10, v12, "#LoggableError Trying ABC for %s", v13);
      OUTLINED_FUNCTION_30_36();
      OUTLINED_FUNCTION_0_2(v14);
      OUTLINED_FUNCTION_0_2((uint64_t)v13);
    }

    else
    {

      OUTLINED_FUNCTION_28_16();
    }

    a3 = v50;
    uint64_t v21 = specialized LoggableError.caseName.getter();
    uint64_t v23 = v22;
    PhoneError.errorDescription.getter();
    uint64_t v54 = v24;
    uint64_t v55 = v25;
    OUTLINED_FUNCTION_7_88();
    PhoneError.subTypeContext.getter();
    String.append(_:)(v26);
    OUTLINED_FUNCTION_13_1();
    static FileRadarUtils.autoBugCapture(errorType:errorSubType:subTypeContext:logger:)( 0x4C41544146LL,  0xE500000000000000LL,  v21,  v23,  v54,  v55,  (uint64_t)v10);
    swift_bridgeObjectRelease(v23);
    OUTLINED_FUNCTION_62();
  }

  if ((a2 & 1) != 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v27 = OUTLINED_FUNCTION_15_1();
    uint64_t v28 = (os_log_s *)__swift_project_value_buffer(v27, (uint64_t)static Logger.siriPhone);
    uint64_t v29 = OUTLINED_FUNCTION_124();
    uint64_t v51 = v28;
    Logger.logObject.getter(v29);
    os_log_type_t v30 = OUTLINED_FUNCTION_6_0();
    if (OUTLINED_FUNCTION_11_5(v30))
    {
      unsigned int v31 = (uint8_t *)OUTLINED_FUNCTION_7_0(12LL);
      uint64_t v32 = OUTLINED_FUNCTION_7_0(32LL);
      uint64_t v54 = v32;
      *(_DWORD *)unsigned int v31 = 136315138;
      uint64_t v33 = OUTLINED_FUNCTION_124();
      OUTLINED_FUNCTION_26_47(v33, v34, v35, v36, v28, v52, v53);
      OUTLINED_FUNCTION_43_23();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v37, v38, v31 + 4, v31 + 12);
      OUTLINED_FUNCTION_40_25();
      OUTLINED_FUNCTION_57_0( &dword_0,  v28,  (os_log_type_t)&type metadata for Any,  "#LoggableError Trying TTR for %s",  v31);
      OUTLINED_FUNCTION_30_36();
      OUTLINED_FUNCTION_0_2(v32);
      OUTLINED_FUNCTION_0_2((uint64_t)v31);
    }

    else
    {

      OUTLINED_FUNCTION_28_16();
    }

    uint64_t v54 = 0LL;
    uint64_t v55 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(28LL);
    swift_bridgeObjectRelease(v55);
    OUTLINED_FUNCTION_179();
    uint64_t v54 = v39;
    uint64_t v55 = v40;
    v56._uint64_t countAndFlagsBits = specialized LoggableError.caseName.getter();
    OUTLINED_FUNCTION_9_41(v56);
    OUTLINED_FUNCTION_34_0();
    uint64_t v42 = v54;
    uint64_t v41 = v55;
    PhoneError.errorDescription.getter();
    uint64_t v54 = v43;
    uint64_t v55 = v44;
    OUTLINED_FUNCTION_7_88();
    PhoneError.subTypeContext.getter();
    OUTLINED_FUNCTION_9_41(v57);
    OUTLINED_FUNCTION_34_0();
    OUTLINED_FUNCTION_7_88();
    v58._uint64_t countAndFlagsBits = PhoneError.additionalContext.getter();
    OUTLINED_FUNCTION_9_41(v58);
    OUTLINED_FUNCTION_34_0();
    uint64_t v45 = v54;
    uint64_t v46 = v55;
    uint64_t v54 = 0LL;
    uint64_t v55 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(31LL);
    v47._uint64_t countAndFlagsBits = 0x45656E6F68502061LL;
    v47._object = (void *)0xEE002820726F7272LL;
    String.append(_:)(v47);
    _print_unlocked<A, B>(_:_:)( v4,  &v54,  v53,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    v48._uint64_t countAndFlagsBits = 0x6564207361772029LL;
    v48._object = (void *)0xEF2E646574636574LL;
    String.append(_:)(v48);
    uint64_t v8 = v55;
    static FileRadarUtils.tapToRadar(title:desc:reason:logger:)(v42, v41, v45, v46, v54, v55, v51);
    OUTLINED_FUNCTION_13_1();
    swift_bridgeObjectRelease(v46);
  }

  swift_bridgeObjectRelease(v8);
  return outlined init with copy of PhoneError(v4, a3);
}

uint64_t specialized LoggableError.caseName.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PhoneError(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v19[-2] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Mirror(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19[-2] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v19[1] = v2;
  uint64_t v9 = __swift_allocate_boxed_opaque_existential_1(&v18);
  outlined init with copy of PhoneError(v1, (uint64_t)v9);
  uint64_t v10 = Mirror.init(reflecting:)(&v18);
  uint64_t v11 = (void *)Mirror.children.getter(v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  specialized Collection.first.getter(v11, &v18);
  swift_release(v11);
  if (v19[3])
  {
    uint64_t v13 = (void *)*((void *)&v18 + 1);
    uint64_t v12 = v18;
    __swift_destroy_boxed_opaque_existential_1(v19);
  }

  else
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)&v18,  &demangling cache variable for type metadata for (label: String?, value: Any)?);
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
  }

  outlined init with copy of PhoneError(v1, (uint64_t)v4);
  if (!v13)
  {
    *(void *)&__int128 v18 = 0LL;
    *((void *)&v18 + 1) = 0xE000000000000000LL;
    _print_unlocked<A, B>(_:_:)( v4,  &v18,  v2,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v13 = (void *)*((void *)&v18 + 1);
    uint64_t v12 = v18;
  }

  outlined destroy of PhoneError((uint64_t)v4);
  *(void *)&__int128 v18 = 0LL;
  *((void *)&v18 + 1) = 0xE000000000000000LL;
  *(void *)&__int128 v18 = _typeName(_:qualified:)(v2, 0LL);
  *((void *)&v18 + 1) = v14;
  v15._uint64_t countAndFlagsBits = 46LL;
  v15._object = (void *)0xE100000000000000LL;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = v12;
  v16._object = v13;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v13);
  return v18;
}

void PhoneError.caseName.getter()
{
  uint64_t v1 = OUTLINED_FUNCTION_82_0();
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v3 = (char *)&v13[-2] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Mirror(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_134();
  v13[1] = v1;
  uint64_t v6 = __swift_allocate_boxed_opaque_existential_1(&v12);
  outlined init with copy of PhoneError(v0, (uint64_t)v6);
  uint64_t v7 = Mirror.init(reflecting:)(&v12);
  uint64_t v8 = (void *)Mirror.children.getter(v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0, v4);
  specialized Collection.first.getter(v8, &v12);
  swift_release(v8);
  if (v13[3])
  {
    uint64_t v10 = (void *)*((void *)&v12 + 1);
    uint64_t v9 = v12;
    __swift_destroy_boxed_opaque_existential_1(v13);
  }

  else
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)&v12,  &demangling cache variable for type metadata for (label: String?, value: Any)?);
    uint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
  }

  outlined init with copy of PhoneError(v0, (uint64_t)v3);
  if (!v10)
  {
    *(void *)&__int128 v12 = 0LL;
    *((void *)&v12 + 1) = 0xE000000000000000LL;
    _print_unlocked<A, B>(_:_:)( v3,  &v12,  v1,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v10 = (void *)*((void *)&v12 + 1);
    uint64_t v9 = v12;
  }

  outlined destroy of PhoneError((uint64_t)v3);
  *(void *)&__int128 v12 = 0x727245656E6F6850LL;
  *((void *)&v12 + 1) = 0xEB000000002E726FLL;
  v11._uint64_t countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_58();
}

void PhoneError.errorDescription.getter()
{
  uint64_t v1 = OUTLINED_FUNCTION_82_0();
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of PhoneError(v0, (uint64_t)v4);
  uint64_t v5 = (char *)sub_224B90 + 4 * byte_338960[swift_getEnumCaseMultiPayload(v4, v1)];
  __asm { BR              X10 }

void sub_224B90()
{
  uint64_t v2 = *v0;
  uint64_t v3 = v0[1];
  unint64_t v4 = lazy protocol witness table accessor for type ParseError and conformance ParseError();
  uint64_t v5 = OUTLINED_FUNCTION_4_4((uint64_t)&type metadata for ParseError, v4);
  *uint64_t v6 = v2;
  v6[1] = v3;
  swift_getErrorValue(v5, v1 - 136, v1 - 160);
  Error.localizedDescription.getter(*(void *)(v1 - 152), *(void *)(v1 - 144));
  swift_errorRelease(v5);
  OUTLINED_FUNCTION_58();
}

uint64_t PhoneError.logger.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v2 = OUTLINED_FUNCTION_15_1();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v3, v2);
}

void PhoneError.subTypeContext.getter()
{
  uint64_t v3 = OUTLINED_FUNCTION_82_0();
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_134();
  OUTLINED_FUNCTION_34_30(v0);
  switch(swift_getEnumCaseMultiPayload(v0, v3))
  {
    case 0u:
      uint64_t v5 = *(void *)v0;
      *((void *)&v24[0] + 1) = *(void *)(v0 + 8);
      unint64_t v6 = lazy protocol witness table accessor for type ParseError and conformance ParseError();
      Error.localizedDescription.getter(&type metadata for ParseError, v6);
      outlined consume of PhoneCallEmergencyType(v5, *((unint64_t *)&v24[0] + 1));
      break;
    case 1u:
      break;
    case 2u:
      uint64_t v7 = *(void *)(v0 + 48);
      char v8 = *(_BYTE *)(v0 + 56);
      __int128 v9 = *(_OWORD *)(v0 + 16);
      v24[0] = *(_OWORD *)v0;
      v24[1] = v9;
      v24[2] = *(_OWORD *)(v0 + 32);
      uint64_t v25 = v7;
      char v26 = v8;
      String.init<A>(describing:)(v24, &type metadata for TemplatingError);
      break;
    case 3u:
      outlined init with take of DialogResultError((__int128 *)v0, (uint64_t)v24);
      DialogResultError.description.getter();
      outlined release of DialogResultError(v24);
      break;
    case 4u:
      uint64_t v10 = *(void *)(v0 + 8);
      uint64_t v11 = *(void *)(v0 + 24);
      uint64_t v13 = *(void *)(v0 + 32);
      __int128 v12 = *(void **)(v0 + 40);
      uint64_t v14 = *(void *)(v0 + 48);
      _StringGuts.grow(_:)(50LL);
      OUTLINED_FUNCTION_39_21();
      *(void *)&v24[0] = 0x3D736C6961746564LL;
      *((void *)&v24[0] + 1) = 0xE800000000000000LL;
      OUTLINED_FUNCTION_13_74();
      swift_bridgeObjectRelease(v10);
      OUTLINED_FUNCTION_2_75(0x66202D20u);
      OUTLINED_FUNCTION_17_51();
      swift_bridgeObjectRelease(v11);
      OUTLINED_FUNCTION_0_86();
      v15._uint64_t countAndFlagsBits = v13;
      v15._object = v12;
      String.append(_:)(v15);
      OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_3_100();
      uint64_t v27 = v14;
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      goto LABEL_11;
    case 5u:
      OUTLINED_FUNCTION_21_45();
      _StringGuts.grow(_:)(21LL);
      OUTLINED_FUNCTION_39_21();
      *(void *)&v24[0] = 0x3D657079546F7375LL;
      *((void *)&v24[0] + 1) = 0xE800000000000000LL;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      v18._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_28_47();
      String.append(_:)(v18);
      OUTLINED_FUNCTION_34_0();
      v19._uint64_t countAndFlagsBits = 0x726F727265202D20LL;
      v19._object = (void *)0xE90000000000003DLL;
      String.append(_:)(v19);
      uint64_t v27 = v1;
      uint64_t v28 = v2;
      uint64_t v16 = OUTLINED_FUNCTION_28_47();
      uint64_t v20 = v17;
      goto LABEL_12;
    case 6u:
      uint64_t v16 = *(void *)v0;
      uint64_t v20 = *(void *)(v0 + 8);
      *(void *)&v24[0] = 0x614E646F6874656DLL;
      *((void *)&v24[0] + 1) = 0xEB000000003D656DLL;
      uint64_t v17 = v20;
      goto LABEL_12;
    case 7u:
      OUTLINED_FUNCTION_21_45();
      _StringGuts.grow(_:)(26LL);
      OUTLINED_FUNCTION_39_21();
      *(void *)&v24[0] = 0x656D614E776F6C66LL;
      *((void *)&v24[0] + 1) = 0xE90000000000003DLL;
      OUTLINED_FUNCTION_1_84();
      OUTLINED_FUNCTION_34_0();
      v21._uint64_t countAndFlagsBits = 0x53776F6C66202D20LL;
      v21._object = (void *)0xED00003D65746174LL;
      String.append(_:)(v21);
      OUTLINED_FUNCTION_13_74();
      uint64_t v22 = v2;
      goto LABEL_13;
    case 8u:
      uint64_t v23 = *(void *)v0;
      *(void *)&v24[0] = 0x3D65707974LL;
      *((void *)&v24[0] + 1) = 0xE500000000000000LL;
      uint64_t v16 = _typeName(_:qualified:)(v23, 0LL);
LABEL_11:
      uint64_t v20 = v17;
LABEL_12:
      String.append(_:)(*(Swift::String *)&v16);
      uint64_t v22 = v20;
LABEL_13:
      swift_bridgeObjectRelease(v22);
      break;
    default:
      OUTLINED_FUNCTION_32_41();
      break;
  }

  OUTLINED_FUNCTION_58();
}

unint64_t SlotResolutionError.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000020LL;
  }
  else {
    return 0xD000000000000014LL;
  }
}

uint64_t PhoneError.additionalContext.getter()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_39_2();
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v14 - v5;
  uint64_t v7 = OUTLINED_FUNCTION_82_0();
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_134();
  OUTLINED_FUNCTION_34_30(v0);
  if (swift_getEnumCaseMultiPayload(v0, v7) == 10)
  {
    outlined init with take of Parse?(v0, (uint64_t)v6);
    uint64_t v14 = 0LL;
    unint64_t v15 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(33LL);
    swift_bridgeObjectRelease(v15);
    OUTLINED_FUNCTION_179();
    uint64_t v14 = v9;
    unint64_t v15 = v10;
    outlined init with copy of Parse?((uint64_t)v6, v1);
    v11._uint64_t countAndFlagsBits = String.init<A>(describing:)(v1, v2);
    String.append(_:)(v11);
    OUTLINED_FUNCTION_34_0();
    uint64_t v12 = v14;
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)( (uint64_t)v6,  &demangling cache variable for type metadata for Parse?);
  }

  else
  {
    OUTLINED_FUNCTION_32_41();
    return 0LL;
  }

  return v12;
}

uint64_t protocol witness for LoggableError.logger.getter in conformance PhoneError@<X0>(uint64_t a1@<X8>)
{
  return PhoneError.logger.getter(a1);
}

uint64_t ParseError.errorDescription.getter(uint64_t a1, char *a2)
{
  unint64_t v2 = 0xD000000000000014LL;
  if (a2)
  {
    if (a2 == (_BYTE *)&dword_0 + 1)
    {
      return 0x61746E6F63206F4ELL;
    }

    else if (a2 == (_BYTE *)&dword_0 + 2)
    {
      return 0xD000000000000016LL;
    }

    else
    {
      _StringGuts.grow(_:)(44LL);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_179();
      uint64_t v8 = v5;
      v6._uint64_t countAndFlagsBits = a1;
      v6._object = a2;
      String.append(_:)(v6);
      return v8;
    }
  }

  return v2;
}

uint64_t TemplatingError.errorDescription.getter()
{
  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(48LL);
    swift_bridgeObjectRelease();
    uint64_t v5 = 0x2720746F6C53LL;
    OUTLINED_FUNCTION_1_84();
    outlined release of TemplatingError((uint64_t)v0);
    v1._uint64_t countAndFlagsBits = 0xD000000000000026LL;
    v1._object = (void *)0x800000000034F450LL;
    String.append(_:)(v1);
  }

  else
  {
    uint64_t v5 = 0LL;
    _StringGuts.grow(_:)(78LL);
    v2._object = (void *)0x800000000034F480LL;
    v2._uint64_t countAndFlagsBits = 0xD000000000000024LL;
    String.append(_:)(v2);
    OUTLINED_FUNCTION_1_84();
    OUTLINED_FUNCTION_2_75(0x46202E22u);
    OUTLINED_FUNCTION_17_51();
    OUTLINED_FUNCTION_0_86();
    OUTLINED_FUNCTION_13_74();
    OUTLINED_FUNCTION_3_100();
  }

  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v3);
  OUTLINED_FUNCTION_39();
  return v5;
}

uint64_t static TemplatingError.__derived_enum_equals(_:_:)(__int128 *a1, __int128 *a2)
{
  __int128 v3 = v33;
  if ((v39 & 1) != 0)
  {
    uint64_t v4 = v34;
    outlined init with take of TemplatingError(a2, &v26);
    if (v32 == 1)
    {
      uint64_t v5 = v27;
      if ((void)v3 == (void)v26 && *((void *)&v3 + 1) == *((void *)&v26 + 1)) {
        return v4 == v5;
      }
      _stringCompareWithSmolCheck(_:_:expecting:)(v3, *((void *)&v3 + 1), v26, *((void *)&v26 + 1), 0LL);
      uint64_t result = OUTLINED_FUNCTION_37_34();
      if ((v8 & 1) != 0) {
        return v4 == v5;
      }
      return result;
    }

    return 0LL;
  }

  uint64_t v10 = v34;
  uint64_t v11 = v35;
  uint64_t v12 = v36;
  uint64_t v13 = v37;
  uint64_t v14 = v38;
  outlined init with take of TemplatingError(a2, &v26);
  if ((v32 & 1) != 0) {
    return 0LL;
  }
  uint64_t v15 = v27;
  uint64_t v16 = v28;
  uint64_t v18 = v29;
  uint64_t v17 = v30;
  uint64_t v25 = v31;
  BOOL v19 = (void)v3 == (void)v26 && *((void *)&v3 + 1) == *((void *)&v26 + 1);
  if (v19
    || (OUTLINED_FUNCTION_38_28(v3, *((uint64_t *)&v3 + 1), v26, *((uint64_t *)&v26 + 1)),
        uint64_t result = OUTLINED_FUNCTION_37_34(),
        (v20 & 1) != 0))
  {
    BOOL v21 = v10 == v15 && v11 == v16;
    if (v21 || (OUTLINED_FUNCTION_38_28(v10, v11, v15, v16), uint64_t result = OUTLINED_FUNCTION_37_34(), (v22 & 1) != 0))
    {
      if (v12 == v18 && v13 == v17) {
        return v14 == v25;
      }
      _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v18, v17, 0LL);
      uint64_t result = OUTLINED_FUNCTION_37_34();
      if ((v24 & 1) != 0) {
        return v14 == v25;
      }
    }
  }

  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TemplatingError( __int128 *a1, __int128 *a2)
{
  return static TemplatingError.__derived_enum_equals(_:_:)(v4, v5) & 1;
}

uint64_t DialogResultError.description.getter()
{
  v1._object = (void *)0x800000000034F4B0LL;
  v1._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v1);
  OUTLINED_FUNCTION_13_74();
  OUTLINED_FUNCTION_2_75(0x46202E22u);
  OUTLINED_FUNCTION_17_51();
  OUTLINED_FUNCTION_0_86();
  OUTLINED_FUNCTION_1_84();
  OUTLINED_FUNCTION_3_100();
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v2);
  OUTLINED_FUNCTION_39();
  return 0LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DialogResultError()
{
  return DialogResultError.description.getter();
}

PhoneCallFlowDelegatePlugin::SlotResolutionError_optional __swiftcall SlotResolutionError.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of SlotResolutionError.init(rawValue:),  v2);
  OUTLINED_FUNCTION_39();
  if (v3 == 1) {
    v4.value = PhoneCallFlowDelegatePlugin_SlotResolutionError_resolutionTypeUnsupportedForSlot;
  }
  else {
    v4.value = PhoneCallFlowDelegatePlugin_SlotResolutionError_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SlotResolutionError( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance SlotResolutionError()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SlotResolutionError()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SlotResolutionError(uint64_t a1)
{
}

PhoneCallFlowDelegatePlugin::SlotResolutionError_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SlotResolutionError@<W0>( Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SlotResolutionError_optional *a2@<X8>)
{
  result.value = SlotResolutionError.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SlotResolutionError@<X0>( unint64_t *a1@<X8>)
{
  unint64_t result = SlotResolutionError.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type SlotResolutionError and conformance SlotResolutionError()
{
  unint64_t result = lazy protocol witness table cache variable for type SlotResolutionError and conformance SlotResolutionError;
  if (!lazy protocol witness table cache variable for type SlotResolutionError and conformance SlotResolutionError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SlotResolutionError,  &type metadata for SlotResolutionError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SlotResolutionError and conformance SlotResolutionError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SlotResolutionError and conformance SlotResolutionError;
  if (!lazy protocol witness table cache variable for type SlotResolutionError and conformance SlotResolutionError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SlotResolutionError,  &type metadata for SlotResolutionError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SlotResolutionError and conformance SlotResolutionError);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type TemplatingError and conformance TemplatingError()
{
  unint64_t result = lazy protocol witness table cache variable for type TemplatingError and conformance TemplatingError;
  if (!lazy protocol witness table cache variable for type TemplatingError and conformance TemplatingError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for TemplatingError,  &type metadata for TemplatingError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TemplatingError and conformance TemplatingError);
  }

  return result;
}

uint64_t outlined init with take of DialogResultError(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  __int128 v4 = a1[2];
  *(void *)(a2 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = *((void *)a1 + 6);
  *(_OWORD *)(a2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v3;
  *(_OWORD *)(a2 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v4;
  *(_OWORD *)a2 = v2;
  return a2;
}

void *outlined release of DialogResultError(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t outlined init with take of Parse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

_OWORD *outlined init with take of TemplatingError(__int128 *a1, _OWORD *a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  __int128 v4 = a1[2];
  *(_OWORD *)((char *)a2 + 41) = *(__int128 *)((char *)a1 + 41);
  a2[1] = v3;
  a2[2] = v4;
  *a2 = v2;
  return a2;
}

uint64_t outlined release of TemplatingError(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of TemplatingError( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t result = swift_bridgeObjectRelease(a2);
  if ((a8 & 1) == 0)
  {
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a6);
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PhoneError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        unint64_t v8 = a2[1];
        if (v8 >= 3)
        {
          *a1 = *a2;
          a1[1] = v8;
          swift_bridgeObjectRetain();
        }

        else
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }

        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 0LL;
        goto LABEL_20;
      case 2u:
        uint64_t v10 = *a2;
        uint64_t v11 = a2[1];
        uint64_t v12 = a2[2];
        uint64_t v13 = a2[3];
        uint64_t v14 = a2[4];
        uint64_t v15 = a2[5];
        uint64_t v16 = a2[6];
        char v17 = *((_BYTE *)a2 + 56);
        outlined copy of TemplatingError(v10, v11, v12, v13, v14, v15, v16, v17);
        *a1 = v10;
        a1[1] = v11;
        a1[2] = v12;
        a1[3] = v13;
        a1[4] = v14;
        a1[5] = v15;
        a1[6] = v16;
        *((_BYTE *)a1 + 56) = v17;
        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 2LL;
        goto LABEL_20;
      case 3u:
        uint64_t v21 = a2[1];
        *a1 = *a2;
        a1[1] = v21;
        uint64_t v22 = a2[3];
        a1[2] = a2[2];
        a1[3] = v22;
        uint64_t v23 = a2[5];
        a1[4] = a2[4];
        a1[5] = v23;
        a1[6] = a2[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 3LL;
        goto LABEL_20;
      case 4u:
        uint64_t v24 = a2[1];
        *a1 = *a2;
        a1[1] = v24;
        uint64_t v25 = a2[3];
        a1[2] = a2[2];
        a1[3] = v25;
        uint64_t v26 = a2[5];
        a1[4] = a2[4];
        a1[5] = v26;
        a1[6] = a2[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 4LL;
        goto LABEL_20;
      case 5u:
        uint64_t v27 = a2[1];
        *a1 = *a2;
        a1[1] = v27;
        uint64_t v28 = a2[2];
        uint64_t v29 = a2[3];
        a1[2] = v28;
        a1[3] = v29;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 5LL;
        goto LABEL_20;
      case 6u:
        uint64_t v30 = a2[1];
        *a1 = *a2;
        a1[1] = v30;
        swift_bridgeObjectRetain();
        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 6LL;
        goto LABEL_20;
      case 7u:
        uint64_t v31 = a2[1];
        *a1 = *a2;
        a1[1] = v31;
        uint64_t v32 = a2[2];
        uint64_t v33 = a2[3];
        a1[2] = v32;
        a1[3] = v33;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 7LL;
        goto LABEL_20;
      case 9u:
        uint64_t v34 = *a2;
        swift_errorRetain(v34);
        *a1 = v34;
        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 9LL;
        goto LABEL_20;
      case 0xAu:
        uint64_t v35 = type metadata accessor for Parse(0LL);
        if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v35))
        {
          uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
          memcpy(a1, a2, *(void *)(*(void *)(v36 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v35 - 8) + 16LL))(a1, a2, v35);
          __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v35);
        }

        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 10LL;
LABEL_20:
        swift_storeEnumTagMultiPayload(v18, v19, v20);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

uint64_t outlined copy of TemplatingError( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8 = a2;
  if ((a8 & 1) == 0)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    uint64_t v8 = a6;
  }

  return swift_bridgeObjectRetain(v8);
}

unint64_t destroy for PhoneError(void *a1, uint64_t a2)
{
  unint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      unint64_t result = a1[1];
      if (result >= 3) {
        goto LABEL_7;
      }
      return result;
    case 2:
      return outlined consume of TemplatingError(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], *((_BYTE *)a1 + 56));
    case 3:
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 5:
    case 7:
      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 6:
LABEL_7:
      unint64_t result = swift_bridgeObjectRelease();
      break;
    case 9:
      unint64_t result = swift_errorRelease(*a1);
      break;
    case 10:
      uint64_t v4 = type metadata accessor for Parse(0LL);
      unint64_t result = __swift_getEnumTagSinglePayload((uint64_t)a1, 1LL, v4);
      if (!(_DWORD)result) {
        unint64_t result = (*(uint64_t (**)(void *, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
      }
      break;
    default:
      return result;
  }

  return result;
}

uint64_t *initializeWithCopy for PhoneError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      unint64_t v6 = a2[1];
      if (v6 >= 3)
      {
        *a1 = *a2;
        a1[1] = v6;
        swift_bridgeObjectRetain();
      }

      else
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }

      uint64_t v15 = a1;
      uint64_t v16 = a3;
      uint64_t v17 = 0LL;
      goto LABEL_18;
    case 2u:
      uint64_t v7 = *a2;
      uint64_t v8 = a2[1];
      uint64_t v9 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v11 = a2[4];
      uint64_t v12 = a2[5];
      uint64_t v13 = a2[6];
      char v14 = *((_BYTE *)a2 + 56);
      outlined copy of TemplatingError(v7, v8, v9, v10, v11, v12, v13, v14);
      *a1 = v7;
      a1[1] = v8;
      a1[2] = v9;
      a1[3] = v10;
      a1[4] = v11;
      a1[5] = v12;
      a1[6] = v13;
      *((_BYTE *)a1 + 56) = v14;
      uint64_t v15 = a1;
      uint64_t v16 = a3;
      uint64_t v17 = 2LL;
      goto LABEL_18;
    case 3u:
      uint64_t v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      uint64_t v19 = a2[3];
      a1[2] = a2[2];
      a1[3] = v19;
      uint64_t v20 = a2[5];
      a1[4] = a2[4];
      a1[5] = v20;
      a1[6] = a2[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v15 = a1;
      uint64_t v16 = a3;
      uint64_t v17 = 3LL;
      goto LABEL_18;
    case 4u:
      uint64_t v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      uint64_t v22 = a2[3];
      a1[2] = a2[2];
      a1[3] = v22;
      uint64_t v23 = a2[5];
      a1[4] = a2[4];
      a1[5] = v23;
      a1[6] = a2[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v15 = a1;
      uint64_t v16 = a3;
      uint64_t v17 = 4LL;
      goto LABEL_18;
    case 5u:
      uint64_t v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      uint64_t v25 = a2[2];
      uint64_t v26 = a2[3];
      a1[2] = v25;
      a1[3] = v26;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v15 = a1;
      uint64_t v16 = a3;
      uint64_t v17 = 5LL;
      goto LABEL_18;
    case 6u:
      uint64_t v27 = a2[1];
      *a1 = *a2;
      a1[1] = v27;
      swift_bridgeObjectRetain();
      uint64_t v15 = a1;
      uint64_t v16 = a3;
      uint64_t v17 = 6LL;
      goto LABEL_18;
    case 7u:
      uint64_t v28 = a2[1];
      *a1 = *a2;
      a1[1] = v28;
      uint64_t v29 = a2[2];
      uint64_t v30 = a2[3];
      a1[2] = v29;
      a1[3] = v30;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v15 = a1;
      uint64_t v16 = a3;
      uint64_t v17 = 7LL;
      goto LABEL_18;
    case 9u:
      uint64_t v31 = *a2;
      swift_errorRetain(v31);
      *a1 = v31;
      uint64_t v15 = a1;
      uint64_t v16 = a3;
      uint64_t v17 = 9LL;
      goto LABEL_18;
    case 0xAu:
      uint64_t v32 = type metadata accessor for Parse(0LL);
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v32))
      {
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
        memcpy(a1, a2, *(void *)(*(void *)(v33 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v32 - 8) + 16LL))(a1, a2, v32);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v32);
      }

      uint64_t v15 = a1;
      uint64_t v16 = a3;
      uint64_t v17 = 10LL;
LABEL_18:
      swift_storeEnumTagMultiPayload(v15, v16, v17);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

uint64_t *assignWithCopy for PhoneError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of PhoneError((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        if ((unint64_t)a2[1] >= 3)
        {
          *a1 = *a2;
          a1[1] = a2[1];
          swift_bridgeObjectRetain();
        }

        else
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }

        char v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 0LL;
        goto LABEL_19;
      case 2u:
        uint64_t v6 = *a2;
        uint64_t v7 = a2[1];
        uint64_t v8 = a2[2];
        uint64_t v9 = a2[3];
        uint64_t v10 = a2[4];
        uint64_t v11 = a2[5];
        uint64_t v12 = a2[6];
        char v13 = *((_BYTE *)a2 + 56);
        outlined copy of TemplatingError(v6, v7, v8, v9, v10, v11, v12, v13);
        *a1 = v6;
        a1[1] = v7;
        a1[2] = v8;
        a1[3] = v9;
        a1[4] = v10;
        a1[5] = v11;
        a1[6] = v12;
        *((_BYTE *)a1 + 56) = v13;
        char v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 2LL;
        goto LABEL_19;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 3LL;
        goto LABEL_19;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 4LL;
        goto LABEL_19;
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 5LL;
        goto LABEL_19;
      case 6u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        char v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 6LL;
        goto LABEL_19;
      case 7u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 7LL;
        goto LABEL_19;
      case 9u:
        uint64_t v17 = *a2;
        swift_errorRetain(v17);
        *a1 = v17;
        char v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 9LL;
        goto LABEL_19;
      case 0xAu:
        uint64_t v18 = type metadata accessor for Parse(0LL);
        if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v18))
        {
          uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
          memcpy(a1, a2, *(void *)(*(void *)(v19 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v18 - 8) + 16LL))(a1, a2, v18);
          __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v18);
        }

        char v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 10LL;
LABEL_19:
        swift_storeEnumTagMultiPayload(v14, v15, v16);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

void *initializeWithTake for PhoneError(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 10)
  {
    uint64_t v6 = type metadata accessor for Parse(0LL);
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6))
    {
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
    }

    swift_storeEnumTagMultiPayload(a1, a3, 10LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *assignWithTake for PhoneError(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of PhoneError((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 10)
    {
      uint64_t v6 = type metadata accessor for Parse(0LL);
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1LL, v6))
      {
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0LL, 1LL, v6);
      }

      swift_storeEnumTagMultiPayload(a1, a3, 10LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

void type metadata completion function for PhoneError(uint64_t a1)
{
  v4[0] = &unk_338C98;
  v4[1] = &unk_338CB0;
  void v4[2] = &unk_338CC8;
  void v4[3] = &unk_338CE0;
  __int128 v4[4] = &unk_338CE0;
  void v4[5] = &unk_338CF8;
  void v4[6] = &unk_338D10;
  v4[7] = &unk_338D28;
  v4[8] = &unk_338D40;
  void v4[9] = &unk_338D58;
  type metadata accessor for Parse?(319LL);
  if (v3 <= 0x3F)
  {
    v4[10] = *(void *)(v2 - 8) + 64LL;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 11LL, v4);
  }

void type metadata accessor for Parse?(uint64_t a1)
{
  if (!lazy cache variable for type metadata for Parse?)
  {
    uint64_t v2 = type metadata accessor for Parse(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Parse?);
    }
  }

void initializeBufferWithCopyOfBuffer for ParseError(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v3;
    swift_bridgeObjectRetain();
  }

  OUTLINED_FUNCTION_2();
}

void type metadata accessor for ParseError()
{
}

uint64_t destroy for TemplatingError(uint64_t a1)
{
  return outlined consume of TemplatingError( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(_BYTE *)(a1 + 56));
}

uint64_t initializeWithCopy for TemplatingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  char v10 = *(_BYTE *)(a2 + 56);
  outlined copy of TemplatingError(*(void *)a2, v4, v5, v6, v7, v8, v9, v10);
  *(void *)a1 = v3;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v4;
  *(void *)(a1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v5;
  *(void *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v6;
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v9;
  *(_BYTE *)(a1 + 56) = v10;
  return a1;
}

uint64_t assignWithCopy for TemplatingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  char v10 = *(_BYTE *)(a2 + 56);
  outlined copy of TemplatingError(*(void *)a2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  char v18 = *(_BYTE *)(a1 + 56);
  *(void *)a1 = v3;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = v4;
  *(void *)(a1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v5;
  *(void *)(a1 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v6;
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v9;
  *(_BYTE *)(a1 + 56) = v10;
  outlined consume of TemplatingError(v11, v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v3;
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TemplatingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  char v4 = *(_BYTE *)(a2 + 56);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  char v12 = *(_BYTE *)(a1 + 56);
  __int128 v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v13;
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v3;
  *(_BYTE *)(a1 + 56) = v4;
  outlined consume of TemplatingError(v5, v7, v6, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for TemplatingError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 57))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 56);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TemplatingError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 0u;
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 57) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 57) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 56) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for TemplatingError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

uint64_t destructiveInjectEnumTag for TemplatingError(uint64_t result, char a2)
{
  *(_BYTE *)(result + 56) = a2 & 1;
  return result;
}

void type metadata accessor for TemplatingError()
{
}

void *initializeWithCopy for DialogResultError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for DialogResultError(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  return a1;
}

void *assignWithTake for DialogResultError(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  return a1;
}

void type metadata accessor for DialogResultError()
{
}

uint64_t storeEnumTagSinglePayload for SlotResolutionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 1;
  }
  else {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_226E0C + 4 * byte_3389B2[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_226E40 + 4 * byte_3389AD[v4]))();
}

uint64_t sub_226E40(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_226E48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x226E50LL);
  }
  return result;
}

uint64_t sub_226E5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x226E64LL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_226E68(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_226E70(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for SlotResolutionError()
{
}

void OUTLINED_FUNCTION_0_86()
{
  v0._uint64_t countAndFlagsBits = 0x6F6874656D202D20LL;
  v0._object = (void *)0xEE003D656D614E64LL;
  String.append(_:)(v0);
}

void OUTLINED_FUNCTION_1_84()
{
  v2._uint64_t countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

void OUTLINED_FUNCTION_2_75(unsigned int a1)
{
  v1._uint64_t countAndFlagsBits = a1 | 0x4E656C6900000000LL;
  v1._object = (void *)0xEC0000003D656D61LL;
  String.append(_:)(v1);
}

void OUTLINED_FUNCTION_3_100()
{
  v0._uint64_t countAndFlagsBits = 0x3D656E696C202D20LL;
  v0._object = (void *)0xE800000000000000LL;
  String.append(_:)(v0);
}

void OUTLINED_FUNCTION_7_88()
{
  v0._uint64_t countAndFlagsBits = 657930LL;
  v0._object = (void *)0xE300000000000000LL;
  String.append(_:)(v0);
}

void OUTLINED_FUNCTION_10_63(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

void OUTLINED_FUNCTION_13_74()
{
  v2._uint64_t countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

void OUTLINED_FUNCTION_14_61()
{
  *(void *)(v0 - 80) = 0LL;
  *(void *)(v0 - 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xE000000000000000LL;
}

void OUTLINED_FUNCTION_17_51()
{
  v2._uint64_t countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_22_45()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 72));
}

uint64_t OUTLINED_FUNCTION_26_47(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, v4, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_28_47()
{
  return String.init<A>(describing:)(v1 - 80, v0);
}

uint64_t OUTLINED_FUNCTION_30_36()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t OUTLINED_FUNCTION_31_37(uint64_t a1)
{
  return swift_getEnumCaseMultiPayload(a1, v1);
}

uint64_t OUTLINED_FUNCTION_32_41()
{
  return outlined destroy of PhoneError(v0);
}

uint64_t OUTLINED_FUNCTION_34_30(uint64_t a1)
{
  return outlined init with copy of PhoneError(a1, v1);
}

uint64_t OUTLINED_FUNCTION_37_34()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_38_28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
}

uint64_t OUTLINED_FUNCTION_39_21()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 136));
}

  ;
}

uint64_t *PhoneStartRequestUtterances.confirmUtterance.unsafeMutableAddressor()
{
  if (one-time initialization token for confirmUtterance != -1) {
    swift_once( &one-time initialization token for confirmUtterance,  one-time initialization function for confirmUtterance);
  }
  return &static PhoneStartRequestUtterances.confirmUtterance;
}

uint64_t *PhoneStartRequestUtterances.cancelUtterance.unsafeMutableAddressor()
{
  if (one-time initialization token for cancelUtterance != -1) {
    swift_once(&one-time initialization token for cancelUtterance, one-time initialization function for cancelUtterance);
  }
  return &static PhoneStartRequestUtterances.cancelUtterance;
}

uint64_t one-time initialization function for cancelUtterance(uint64_t a1)
{
  return one-time initialization function for cancelUtterance( a1,  28526LL,  0xE200000000000000LL,  &static PhoneStartRequestUtterances.cancelUtterance,  &qword_477F30);
}

uint64_t static PhoneStartRequestUtterances.cancelUtterance.getter()
{
  return static PhoneStartRequestUtterances.cancelUtterance.getter( &one-time initialization token for cancelUtterance,  &static PhoneStartRequestUtterances.cancelUtterance,  &qword_477F30);
}

uint64_t one-time initialization function for confirmUtterance(uint64_t a1)
{
  return one-time initialization function for cancelUtterance( a1,  7562617LL,  0xE300000000000000LL,  &static PhoneStartRequestUtterances.confirmUtterance,  &qword_477F40);
}

uint64_t one-time initialization function for cancelUtterance( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5)
{
  uint64_t v9 = type metadata accessor for MachineUtteranceBuilder(0LL);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  uint64_t v10 = MachineUtteranceBuilder.init()();
  uint64_t v11 = dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)( 0xD000000000000015LL,  0x8000000000342BF0LL,  a2,  a3);
  uint64_t v12 = swift_release(v10);
  uint64_t v13 = dispatch thunk of MachineUtteranceBuilder.build()(v12);
  uint64_t v15 = v14;
  uint64_t result = swift_release(v11);
  *a4 = v13;
  *a5 = v15;
  return result;
}

uint64_t static PhoneStartRequestUtterances.confirmUtterance.getter()
{
  return static PhoneStartRequestUtterances.cancelUtterance.getter( &one-time initialization token for confirmUtterance,  &static PhoneStartRequestUtterances.confirmUtterance,  &qword_477F40);
}

uint64_t static PhoneStartRequestUtterances.cancelUtterance.getter(void *a1, uint64_t *a2, void *a3)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  uint64_t v5 = *a2;
  swift_bridgeObjectRetain(*a3);
  return v5;
}

ValueMetadata *type metadata accessor for PhoneStartRequestUtterances()
{
  return &type metadata for PhoneStartRequestUtterances;
}

uint64_t specialized Sequence.allSatisfy(_:)(unint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v22))
  {
    uint64_t v23 = v2;
    unint64_t v24 = v2 & 0xC000000000000001LL;
    uint64_t v4 = 4LL;
    while (1)
    {
      id v5 = v24 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      uint64_t v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1LL)) {
        break;
      }
      INPerson.hasHandleLabel.getter();
      if ((v8 & 1) == 0)
      {
        INPerson.hasHandleValue.getter();
        if ((v9 & 1) == 0)
        {

          swift_bridgeObjectRelease();
          return 0LL;
        }
      }

      uint64_t v10 = v3;
      id v11 = [a2 displayName];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v14 = v13;

      id v15 = [v6 displayName];
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      uint64_t v18 = v17;

      BOOL v19 = v12 == v16 && v14 == v18;
      if (v19)
      {

        swift_bridgeObjectRelease_n(v14, 2LL);
      }

      else
      {
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v16, v18, 0LL);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0)
        {

          swift_bridgeObjectRelease();
          return 0LL;
        }
      }

      ++v4;
      uint64_t v3 = v10;
      BOOL v19 = v7 == v10;
      uint64_t v2 = v23;
      if (v19) {
        goto LABEL_27;
      }
    }

    __break(1u);
LABEL_23:
    if (v2 < 0) {
      uint64_t v22 = v2;
    }
    else {
      uint64_t v22 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
  }

void PhoneContactDisambiguationProperties.isHandleDisambiguation.getter(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    OUTLINED_FUNCTION_8_1();
    if (!OUTLINED_FUNCTION_61_1()) {
      goto LABEL_13;
    }
  }

  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
    OUTLINED_FUNCTION_8_1();
    if (!v3) {
      goto LABEL_13;
    }
  }

  OUTLINED_FUNCTION_5_84();
  if ((a1 & 0xC000000000000001LL) != 0) {
    id v4 = (id)OUTLINED_FUNCTION_5_49(0LL);
  }
  else {
    id v4 = *(id *)(a1 + 32);
  }
  id v5 = v4;
  OUTLINED_FUNCTION_39();
  if (v2)
  {
    if ((a1 & 0x8000000000000000LL) != 0LL) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_8_1();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v7);
    OUTLINED_FUNCTION_39();
  }

  else
  {
    uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v6 < 2)
  {

    goto LABEL_15;
  }

  OUTLINED_FUNCTION_8_1();
  id v8 = v5;
  specialized Sequence.allSatisfy(_:)(a1, v8);

LABEL_13:
  OUTLINED_FUNCTION_39();
LABEL_15:
  OUTLINED_FUNCTION_24_0();
}

void *PhoneContactDisambiguationProperties.maxItemsForVoxReadout.unsafeMutableAddressor()
{
  return &static PhoneContactDisambiguationProperties.maxItemsForVoxReadout;
}

void PhoneContactDisambiguationProperties.isEmergencyDisambiguation.getter(unint64_t a1)
{
  if ((OUTLINED_FUNCTION_6_6(a1) & 1) == 0 || (OUTLINED_FUNCTION_8_67() & 1) == 0) {
    specialized Sequence.allSatisfy(_:)(a1, (char *)&dword_0 + 1);
  }
  OUTLINED_FUNCTION_24_0();
}

void PhoneContactDisambiguationProperties.shouldReadItemsInVox.getter(unint64_t a1)
{
  if (a1 >> 62)
  {
    OUTLINED_FUNCTION_8_1();
    uint64_t v2 = OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_39();
  }

  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v2 < 6 || (PhoneContactDisambiguationProperties.isHandleDisambiguation.getter(a1), (v3 & 1) != 0))
  {
    if ((OUTLINED_FUNCTION_6_6(a1) & 1) != 0) {
      OUTLINED_FUNCTION_8_67();
    }
  }

  OUTLINED_FUNCTION_24_0();
}

uint64_t PhoneContactDisambiguationProperties.hasOneHandleType.getter(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_21;
  }
  unint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (v2 > 1)
  {
    OUTLINED_FUNCTION_8_1();
    while (1)
    {
      OUTLINED_FUNCTION_5_84();
      id v3 = (a1 & 0xC000000000000001LL) != 0 ? (id)OUTLINED_FUNCTION_5_49(0LL) : *(id *)(a1 + 32);
      id v4 = v3;
      OUTLINED_FUNCTION_39();
      id v5 = [v4 personHandle];

      if (!v5) {
        break;
      }
      id v6 = [v5 type];

      swift_bridgeObjectRetain_n(a1, 2LL);
      for (uint64_t i = 4LL; ; ++i)
      {
        id v8 = (a1 & 0xC000000000000001LL) != 0 ? (id)OUTLINED_FUNCTION_5_49(i - 4) : *(id *)(a1 + 8 * i);
        char v9 = v8;
        uint64_t v10 = i - 3;
        if (__OFADD__(i - 4, 1LL)) {
          break;
        }
        id v11 = [v8 personHandle];
        if (!v11)
        {
          OUTLINED_FUNCTION_2_12();

          return 0LL;
        }

        uint64_t v12 = v11;
        id v13 = [v11 type];

        if (v13 != v6 || !v6)
        {
          OUTLINED_FUNCTION_2_12();
          return 0LL;
        }

        if (v10 == v2)
        {
          OUTLINED_FUNCTION_2_12();
          return 1LL;
        }
      }

      __break(1u);
LABEL_21:
      OUTLINED_FUNCTION_8_1();
      uint64_t v15 = OUTLINED_FUNCTION_61_1();
      OUTLINED_FUNCTION_39();
      if (v15 <= 1) {
        break;
      }
      OUTLINED_FUNCTION_8_1();
      unint64_t v2 = OUTLINED_FUNCTION_61_1();
      if (!v2)
      {
        OUTLINED_FUNCTION_39();
        return 0LL;
      }
    }
  }

  return 0LL;
}

void protocol witness for DisambiguationListProperties.shouldReadItemsInVox.getter in conformance PhoneContactDisambiguationProperties()
{
}

ValueMetadata *type metadata accessor for PhoneContactDisambiguationProperties()
{
  return &type metadata for PhoneContactDisambiguationProperties;
}

uint64_t OUTLINED_FUNCTION_8_67()
{
  return specialized Sequence.contains(where:)(v0, (char *)&dword_0 + 1);
}

void *PhoneCallAppNameConstants.emergencyBundleId.unsafeMutableAddressor()
{
  return &static PhoneCallAppNameConstants.emergencyBundleId;
}

void *PhoneCallAppNameConstants.faceTimeBundleId.unsafeMutableAddressor()
{
  return &static PhoneCallAppNameConstants.faceTimeBundleId;
}

void static PhoneCallAppNameConstants.isFaceTime(appId:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t inited = swift_initStackObject(v2, &v5);
    *(_OWORD *)(inited + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D880;
    *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xD000000000000012LL;
    *(void *)(inited + 40) = 0x80000000003479B0LL;
    if (one-time initialization token for macFaceTimeBundleId != -1) {
      swift_once( &one-time initialization token for macFaceTimeBundleId,  one-time initialization function for macFaceTimeBundleId);
    }
    OUTLINED_FUNCTION_14_62(&static PhoneCallAppNameConstants.macFaceTimeBundleId);
    specialized Set.init(_nonEmptyArrayLiteral:)();
    OUTLINED_FUNCTION_8_68(v4);
    OUTLINED_FUNCTION_34_0();
  }

  OUTLINED_FUNCTION_12_74();
}

void static PhoneCallAppNameConstants.isPhone(appId:)(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    goto LABEL_14;
  }
  uint64_t v4 = "com.apple.InCallService";
  if (a1 == 0xD000000000000017LL)
  {
    OUTLINED_FUNCTION_3_101();
    if (v5) {
      goto LABEL_14;
    }
  }

  id v6 = "com.apple.Carousel";
  if (a1 == 0xD000000000000012LL)
  {
    OUTLINED_FUNCTION_3_101();
    if (v5) {
      goto LABEL_14;
    }
  }

  if ((OUTLINED_FUNCTION_49_2(a1, a2, 0xD000000000000012LL, (unint64_t)(v6 - 32) | 0x8000000000000000LL) & 1) != 0
    || (uint64_t v7 = 0xD000000000000013LL, v8 = "com.apple.NanoPhone", a1 == 0xD000000000000013LL)
    && (OUTLINED_FUNCTION_3_101(), v5)
    || (OUTLINED_FUNCTION_0_87(v7, (uint64_t)v8) & 1) != 0
    || (unint64_t v9 = 0xD000000000000015LL, v10 = "com.apple.mobilephone", a1 == 0xD000000000000015LL)
    && (OUTLINED_FUNCTION_3_101(), v5))
  {
LABEL_14:
    OUTLINED_FUNCTION_6();
  }

  else
  {
    _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v9, (unint64_t)(v10 - 32) | 0x8000000000000000LL, 0LL);
  }

void *PhoneCallAppNameConstants.phoneSettingsRoot.unsafeMutableAddressor()
{
  return &static PhoneCallAppNameConstants.phoneSettingsRoot;
}

void *PhoneCallAppNameConstants.faceTimeSettingsRoot.unsafeMutableAddressor()
{
  return &static PhoneCallAppNameConstants.faceTimeSettingsRoot;
}

void *PhoneCallAppNameConstants.mobilePhoneBundleId.unsafeMutableAddressor()
{
  return &static PhoneCallAppNameConstants.mobilePhoneBundleId;
}

void *PhoneCallAppNameConstants.mobilePhoneContactsTabURI.unsafeMutableAddressor()
{
  return &static PhoneCallAppNameConstants.mobilePhoneContactsTabURI;
}

uint64_t *PhoneCallAppNameConstants.macFaceTimeBundleId.unsafeMutableAddressor()
{
  if (one-time initialization token for macFaceTimeBundleId != -1) {
    swift_once( &one-time initialization token for macFaceTimeBundleId,  one-time initialization function for macFaceTimeBundleId);
  }
  return &static PhoneCallAppNameConstants.macFaceTimeBundleId;
}

void *PhoneCallAppNameConstants.inCallServiceBundleId.unsafeMutableAddressor()
{
  return &static PhoneCallAppNameConstants.inCallServiceBundleId;
}

void *PhoneCallAppNameConstants.walkieTalkieBundleId.unsafeMutableAddressor()
{
  return &static PhoneCallAppNameConstants.walkieTalkieBundleId;
}

uint64_t *PhoneCallAppNameConstants.inCallServiceLaunchId.unsafeMutableAddressor()
{
  if (one-time initialization token for inCallServiceLaunchId != -1) {
    swift_once( &one-time initialization token for inCallServiceLaunchId,  one-time initialization function for inCallServiceLaunchId);
  }
  return &static PhoneCallAppNameConstants.inCallServiceLaunchId;
}

void *PhoneCallAppNameConstants.systemExtensionBundleId.unsafeMutableAddressor()
{
  return &static PhoneCallAppNameConstants.systemExtensionBundleId;
}

const char *PhoneCallAppNameConstants.settingsRoot.unsafeMutableAddressor()
{
  return "prefs:";
}

void *PhoneCallAppNameConstants.mapBundleId.unsafeMutableAddressor()
{
  return &static PhoneCallAppNameConstants.mapBundleId;
}

void *PhoneCallAppNameConstants.macFaceTimeVocBundleId.unsafeMutableAddressor()
{
  return &static PhoneCallAppNameConstants.macFaceTimeVocBundleId;
}

void *PhoneCallAppNameConstants.carouselBundleId.unsafeMutableAddressor()
{
  return &static PhoneCallAppNameConstants.carouselBundleId;
}

void *PhoneCallAppNameConstants.nanophoneBundleId.unsafeMutableAddressor()
{
  return &static PhoneCallAppNameConstants.nanophoneBundleId;
}

uint64_t static PhoneCallAppNameConstants.sanitizeFirstPartyAppId(_:)(uint64_t a1, uint64_t a2)
{
  if ((v2 & 1) == 0) {
    swift_bridgeObjectRetain();
  }
  return OUTLINED_FUNCTION_34_1();
}

void static PhoneCallAppNameConstants.isFaceTimeCaseInsensitive(appId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (a2)
  {
    uint64_t v4 = OUTLINED_FUNCTION_18_55();
    uint64_t v6 = v5;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v4 = a1;
  }

  OUTLINED_FUNCTION_7_89();
  uint64_t v8 = v7;
  if (v6)
  {
    OUTLINED_FUNCTION_16_50();
    BOOL v10 = v10 && v6 == v8;
    if (v10) {
      goto LABEL_23;
    }
    char v11 = OUTLINED_FUNCTION_49_2(v4, v6, v9, v8);
    OUTLINED_FUNCTION_39();
    OUTLINED_FUNCTION_34_0();
    if ((v11 & 1) != 0) {
      goto LABEL_25;
    }
  }

  else
  {
    OUTLINED_FUNCTION_34_0();
  }

  if (a2)
  {
    uint64_t v3 = OUTLINED_FUNCTION_18_55();
    id v13 = v12;
  }

  else
  {
    id v13 = 0LL;
  }

  if (one-time initialization token for macFaceTimeBundleId != -1) {
    swift_once( &one-time initialization token for macFaceTimeBundleId,  one-time initialization function for macFaceTimeBundleId);
  }
  Swift::String v14 = String.lowercased()();
  if (!v13) {
    goto LABEL_24;
  }
  if (v3 != v14._countAndFlagsBits || v13 != v14._object)
  {
    uint64_t v16 = OUTLINED_FUNCTION_34_1();
    OUTLINED_FUNCTION_49_2(v16, v17, v18, (uint64_t)v14._object);
  }

void *PhoneCallAppNameConstants.systemUIExtensionBundleId.unsafeMutableAddressor()
{
  return &static PhoneCallAppNameConstants.systemUIExtensionBundleId;
}

void *PhoneCallAppNameConstants.walkieTalkieExtensionBundleId.unsafeMutableAddressor()
{
  return &static PhoneCallAppNameConstants.walkieTalkieExtensionBundleId;
}

unint64_t static PhoneCallAppNameConstants.getFaceTimeBundleIdForCurrentPlatform()()
{
  return OUTLINED_FUNCTION_13_9(18LL);
}

void static PhoneCallAppNameConstants.isPhoneCaseInsensitive(appId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (a2)
  {
    uint64_t v4 = OUTLINED_FUNCTION_4_86();
    uint64_t v6 = v5;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v4 = a1;
  }

  OUTLINED_FUNCTION_42_14();
  uint64_t v8 = v7;
  if (v6)
  {
    OUTLINED_FUNCTION_16_50();
    BOOL v10 = v10 && v6 == v8;
    if (v10) {
      goto LABEL_41;
    }
    OUTLINED_FUNCTION_49_2(v4, v6, v9, v8);
    OUTLINED_FUNCTION_7_28();
    OUTLINED_FUNCTION_50();
    if ((v4 & 1) != 0) {
      goto LABEL_43;
    }
    if (a2) {
      goto LABEL_11;
    }
  }

  else
  {
    OUTLINED_FUNCTION_50();
    if (a2)
    {
LABEL_11:
      uint64_t v11 = OUTLINED_FUNCTION_4_86();
      uint64_t v13 = v12;
      goto LABEL_14;
    }
  }

  uint64_t v13 = 0LL;
  uint64_t v11 = v3;
LABEL_14:
  OUTLINED_FUNCTION_7_89();
  uint64_t v15 = v14;
  if (v13)
  {
    OUTLINED_FUNCTION_16_50();
    if (v10 && v13 == v15) {
      goto LABEL_41;
    }
    OUTLINED_FUNCTION_49_2(v11, v13, v16, v15);
    OUTLINED_FUNCTION_7_28();
    OUTLINED_FUNCTION_50();
    if ((v11 & 1) != 0) {
      goto LABEL_43;
    }
    if (a2) {
      goto LABEL_21;
    }
  }

  else
  {
    OUTLINED_FUNCTION_50();
    if (a2)
    {
LABEL_21:
      uint64_t v18 = OUTLINED_FUNCTION_4_86();
      uint64_t v20 = v19;
      goto LABEL_24;
    }
  }

  uint64_t v20 = 0LL;
  uint64_t v18 = v3;
LABEL_24:
  OUTLINED_FUNCTION_42_14();
  uint64_t v22 = v21;
  if (v20)
  {
    OUTLINED_FUNCTION_16_50();
    if (v10 && v20 == v22) {
      goto LABEL_41;
    }
    OUTLINED_FUNCTION_49_2(v18, v20, v23, v22);
    OUTLINED_FUNCTION_7_28();
    OUTLINED_FUNCTION_50();
    if ((v18 & 1) != 0) {
      goto LABEL_43;
    }
  }

  else
  {
    OUTLINED_FUNCTION_50();
  }

  if (a2)
  {
    uint64_t v3 = OUTLINED_FUNCTION_4_86();
    uint64_t v26 = v25;
  }

  else
  {
    uint64_t v26 = 0LL;
  }

  uint64_t v27 = OUTLINED_FUNCTION_42_14();
  if (!v26) {
    goto LABEL_42;
  }
  if (v3 != v27 || v26 != v28) {
    OUTLINED_FUNCTION_49_2(v3, v26, v27, v28);
  }
LABEL_41:
  swift_bridgeObjectRelease();
LABEL_42:
  OUTLINED_FUNCTION_50();
LABEL_43:
  OUTLINED_FUNCTION_16();
}

void static PhoneCallAppNameConstants.isMessagePhoneAppCaseInsensitive(appId:)( uint64_t countAndFlagsBits, uint64_t a2)
{
  if (a2)
  {
    Swift::String v3 = String.lowercased()();
    uint64_t countAndFlagsBits = v3._countAndFlagsBits;
    object = v3._object;
  }

  else
  {
    object = 0LL;
  }

  Swift::String v5 = String.lowercased()();
  if (object)
  {
    if (countAndFlagsBits != v5._countAndFlagsBits || object != v5._object) {
      OUTLINED_FUNCTION_49_2(countAndFlagsBits, (uint64_t)object, v5._countAndFlagsBits, (uint64_t)v5._object);
    }
    OUTLINED_FUNCTION_39();
  }

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6();
}

void static PhoneCallAppNameConstants.isPhoneOrFaceTime(appId:isInsensitive:)( uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
  {
    uint64_t v5 = OUTLINED_FUNCTION_34_1();
    static PhoneCallAppNameConstants.isPhoneCaseInsensitive(appId:)(v5, v6);
    if ((v7 & 1) == 0)
    {
      uint64_t v8 = OUTLINED_FUNCTION_34_1();
      static PhoneCallAppNameConstants.isFaceTimeCaseInsensitive(appId:)(v8, v9);
      return;
    }
  }

  else if (a2)
  {
    BOOL v10 = "com.apple.InCallService";
    if (a1 != 0xD000000000000017LL || (OUTLINED_FUNCTION_3_101(), !v11))
    {
      if ((OUTLINED_FUNCTION_0_87(0xD000000000000017LL, (uint64_t)v10) & 1) == 0)
      {
        uint64_t v12 = "com.apple.Carousel";
        if (a1 != 0xD000000000000012LL || (OUTLINED_FUNCTION_3_101(), !v11))
        {
          if ((OUTLINED_FUNCTION_49_2( a1,  a2,  0xD000000000000012LL,  (unint64_t)(v12 - 32) | 0x8000000000000000LL) & 1) == 0)
          {
            uint64_t v13 = 0xD000000000000013LL;
            uint64_t v14 = "com.apple.NanoPhone";
            if (a1 != 0xD000000000000013LL || (OUTLINED_FUNCTION_3_101(), !v11))
            {
              if ((OUTLINED_FUNCTION_0_87(v13, (uint64_t)v14) & 1) == 0)
              {
                uint64_t v15 = 0xD000000000000015LL;
                uint64_t v16 = "com.apple.mobilephone";
                if (a1 != 0xD000000000000015LL || (OUTLINED_FUNCTION_3_101(), !v11))
                {
                  if ((OUTLINED_FUNCTION_0_87(v15, (uint64_t)v16) & 1) == 0)
                  {
                    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
                    uint64_t inited = swift_initStackObject(v17, &v20);
                    *(_OWORD *)(inited + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = xmmword_31D880;
                    *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xD000000000000012LL;
                    *(void *)(inited + 40) = 0x80000000003479B0LL;
                    if (one-time initialization token for macFaceTimeBundleId != -1) {
                      swift_once( &one-time initialization token for macFaceTimeBundleId,  one-time initialization function for macFaceTimeBundleId);
                    }
                    OUTLINED_FUNCTION_14_62(&static PhoneCallAppNameConstants.macFaceTimeBundleId);
                    specialized Set.init(_nonEmptyArrayLiteral:)();
                    OUTLINED_FUNCTION_8_68(v19);
                    OUTLINED_FUNCTION_34_0();
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  OUTLINED_FUNCTION_12_74();
}

unint64_t static PhoneCallAppNameConstants.inCallServiceBundleId.getter()
{
  return OUTLINED_FUNCTION_13_9(23LL);
}

unint64_t static PhoneCallAppNameConstants.carouselBundleId.getter()
{
  return OUTLINED_FUNCTION_13_9(18LL);
}

unint64_t static PhoneCallAppNameConstants.mobilePhoneBundleId.getter()
{
  return OUTLINED_FUNCTION_13_9(21LL);
}

unint64_t static PhoneCallAppNameConstants.macFaceTimeVocBundleId.getter()
{
  return OUTLINED_FUNCTION_13_9(18LL);
}

void one-time initialization function for macFaceTimeBundleId()
{
  id v0 = (id)TUPreferredFaceTimeBundleIdentifier();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
  uint64_t v3 = v2;

  static PhoneCallAppNameConstants.macFaceTimeBundleId = v1;
  unk_477F50 = v3;
}

uint64_t static PhoneCallAppNameConstants.macFaceTimeBundleId.getter()
{
  return static PhoneCallAppNameConstants.macFaceTimeBundleId.getter( &one-time initialization token for macFaceTimeBundleId,  (uint64_t)&static PhoneCallAppNameConstants.macFaceTimeBundleId,  (uint64_t)&unk_477F50,  (uint64_t)one-time initialization function for macFaceTimeBundleId);
}

unint64_t static PhoneCallAppNameConstants.nanophoneBundleId.getter()
{
  return OUTLINED_FUNCTION_13_9(19LL);
}

unint64_t static PhoneCallAppNameConstants.walkieTalkieBundleId.getter()
{
  return OUTLINED_FUNCTION_13_9(16LL);
}

void *PhoneCallAppNameConstants.walkieTalkieInternalBundleId.unsafeMutableAddressor()
{
  return &static PhoneCallAppNameConstants.walkieTalkieInternalBundleId;
}

unint64_t static PhoneCallAppNameConstants.walkieTalkieInternalBundleId.getter()
{
  return OUTLINED_FUNCTION_13_9(39LL);
}

unint64_t static PhoneCallAppNameConstants.walkieTalkieExtensionBundleId.getter()
{
  return OUTLINED_FUNCTION_13_9(30LL);
}

void *PhoneCallAppNameConstants.messagesBundleId.unsafeMutableAddressor()
{
  return &static PhoneCallAppNameConstants.messagesBundleId;
}

unint64_t static PhoneCallAppNameConstants.messagesBundleId.getter()
{
  return OUTLINED_FUNCTION_13_9(19LL);
}

unint64_t static PhoneCallAppNameConstants.emergencyBundleId.getter()
{
  return OUTLINED_FUNCTION_13_9(34LL);
}

unint64_t static PhoneCallAppNameConstants.mapBundleId.getter()
{
  return OUTLINED_FUNCTION_13_9(22LL);
}

unint64_t static PhoneCallAppNameConstants.faceTimeSettingsRoot.getter()
{
  return OUTLINED_FUNCTION_13_9(19LL);
}

unint64_t static PhoneCallAppNameConstants.phoneSettingsRoot.getter()
{
  return OUTLINED_FUNCTION_13_9(16LL);
}

uint64_t static PhoneCallAppNameConstants.settingsRoot.getter()
{
  return 0x3A7366657270LL;
}

uint64_t one-time initialization function for inCallServiceLaunchId()
{
  uint64_t result = swift_bridgeObjectRelease(0xE000000000000000LL);
  static PhoneCallAppNameConstants.inCallServiceLaunchId = 0xD00000000000002ALL;
  unk_477F60 = 0x800000000034F570LL;
  return result;
}

uint64_t static PhoneCallAppNameConstants.inCallServiceLaunchId.getter()
{
  return static PhoneCallAppNameConstants.macFaceTimeBundleId.getter( &one-time initialization token for inCallServiceLaunchId,  (uint64_t)&static PhoneCallAppNameConstants.inCallServiceLaunchId,  (uint64_t)&unk_477F60,  (uint64_t)one-time initialization function for inCallServiceLaunchId);
}

uint64_t static PhoneCallAppNameConstants.macFaceTimeBundleId.getter( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*a1 != -1LL) {
    swift_once(a1, a4);
  }
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_34_1();
}

unint64_t static PhoneCallAppNameConstants.systemExtensionBundleId.getter()
{
  return OUTLINED_FUNCTION_13_9(47LL);
}

unint64_t static PhoneCallAppNameConstants.systemUIExtensionBundleId.getter()
{
  return OUTLINED_FUNCTION_13_9(33LL);
}

void *PhoneCallAppNameConstants.internalWatchAppSuffix.unsafeMutableAddressor()
{
  return &static PhoneCallAppNameConstants.internalWatchAppSuffix;
}

unint64_t static PhoneCallAppNameConstants.internalWatchAppSuffix.getter()
{
  return OUTLINED_FUNCTION_13_9(23LL);
}

void *PhoneCallAppNameConstants.contactsBundleId.unsafeMutableAddressor()
{
  return &static PhoneCallAppNameConstants.contactsBundleId;
}

unint64_t static PhoneCallAppNameConstants.contactsBundleId.getter()
{
  return OUTLINED_FUNCTION_13_9(27LL);
}

const char *PhoneCallAppNameConstants.siriAppBundleId.unsafeMutableAddressor()
{
  return "com.apple.siri";
}

uint64_t static PhoneCallAppNameConstants.siriAppBundleId.getter()
{
  return 0x6C7070612E6D6F63LL;
}

unint64_t static PhoneCallAppNameConstants.mobilePhoneContactsTabURI.getter()
{
  return OUTLINED_FUNCTION_13_9(23LL);
}

void *PhoneCallAppNameConstants.openCallRecordURI.unsafeMutableAddressor()
{
  return &static PhoneCallAppNameConstants.openCallRecordURI;
}

unint64_t static PhoneCallAppNameConstants.openCallRecordURI.getter()
{
  return OUTLINED_FUNCTION_13_9(32LL);
}

ValueMetadata *type metadata accessor for PhoneCallAppNameConstants()
{
  return &type metadata for PhoneCallAppNameConstants;
}

uint64_t OUTLINED_FUNCTION_0_87@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, a1, (a2 - 32) | 0x8000000000000000LL, 0LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_4_86()
{
  return String.lowercased()()._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_7_89()
{
  return String.lowercased()()._countAndFlagsBits;
}

void OUTLINED_FUNCTION_8_68(uint64_t a1)
{
}

  ;
}

uint64_t OUTLINED_FUNCTION_14_62@<X0>(void *a1@<X8>)
{
  uint64_t v2 = a1[1];
  *(void *)(v1 + 4__swift_destroy_boxed_opaque_existential_1(v0 + 8) = *a1;
  *(void *)(v1 + 56) = v2;
  return swift_bridgeObjectRetain(v2);
}

  ;
}

uint64_t OUTLINED_FUNCTION_18_55()
{
  return String.lowercased()()._countAndFlagsBits;
}

uint64_t InCallActionHandleIntentFlowStrategy.__allocating_init(sharedGlobals:phoneCallBaseCatTemplatingService:aceViewProvider:nlContextProvider:canUseServerTTS:shouldShowDialogAfterIntentHandled:hangUpCallCATsSimple:responseGenerator:biomeEventSender:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 *a9)
{
  uint64_t v18 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  InCallActionHandleIntentFlowStrategy.init(sharedGlobals:phoneCallBaseCatTemplatingService:aceViewProvider:nlContextProvider:canUseServerTTS:shouldShowDialogAfterIntentHandled:hangUpCallCATsSimple:responseGenerator:biomeEventSender:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
  return v18;
}

void specialized closure #1 in Publisher.sink(receiveResultCompletion:)( uint64_t a1, void (*a2)(void *))
{
  if (a1)
  {
    v3[0] = a1;
    char v4 = 1;
    swift_errorRetain(a1);
    a2(v3);
    outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for Result<Output, Error>);
  }

void specialized closure #2 in Publisher.sink(receiveResultCompletion:)( uint64_t a1, void (*a2)(_BYTE *))
{
  v3[40] = 0;
  a2(v3);
  outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for Result<Output, Error>);
}

void EmergencyCountdownOutputBuilder.responseGenerator.getter(uint64_t a1@<X8>)
{
}

void PhoneAppResolutionLogger.eligibleAppsFinder.getter(uint64_t a1@<X8>)
{
}

uint64_t InCallActionHandleIntentFlowStrategy.completionOutputManifest.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for InCallActionHandleIntentFlowStrategy.completionOutputManifest;
  uint64_t v4 = OUTLINED_FUNCTION_94();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t InCallActionHandleIntentFlowStrategy.phoneCallBaseCatTemplatingService.getter()
{
  return OUTLINED_FUNCTION_59_12(direct field offset for InCallActionHandleIntentFlowStrategy.phoneCallBaseCatTemplatingService);
}

uint64_t InCallActionHandleIntentFlowStrategy.aceViewProvider.getter()
{
  return OUTLINED_FUNCTION_59_12(direct field offset for InCallActionHandleIntentFlowStrategy.aceViewProvider);
}

uint64_t InCallActionHandleIntentFlowStrategy.nlContextProvider.getter()
{
  return OUTLINED_FUNCTION_59_12(direct field offset for InCallActionHandleIntentFlowStrategy.nlContextProvider);
}

uint64_t InCallActionHandleIntentFlowStrategy.canUseServerTTS.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for InCallActionHandleIntentFlowStrategy.canUseServerTTS);
}

uint64_t InCallActionHandleIntentFlowStrategy.shouldShowDialogAfterIntentHandled.getter()
{
  return *(unsigned __int8 *)(v0
                            + direct field offset for InCallActionHandleIntentFlowStrategy.shouldShowDialogAfterIntentHandled);
}

uint64_t InCallActionHandleIntentFlowStrategy.init(sharedGlobals:phoneCallBaseCatTemplatingService:aceViewProvider:nlContextProvider:canUseServerTTS:shouldShowDialogAfterIntentHandled:hangUpCallCATsSimple:responseGenerator:biomeEventSender:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 *a9)
{
  uint64_t v11 = v10;
  char v13 = v12;
  char v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v30 = v24;
  type metadata accessor for DialogPhase(0LL);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v27 = v26 - v25;
  static DialogPhase.completion.getter(v28);
  OutputGenerationManifest.init(dialogPhase:_:)( v27,  closure #1 in variable initialization expression of UnsupportedCallFlowOutputFactory.completionOutputManifest,  0LL);
  *(void *)(v9 + direct field offset for InCallActionHandleIntentFlowStrategy.cancellable) = 0LL;
  outlined init with take of AppSelectionSignalComponent(v23, v9 + 16);
  *(void *)(v9 + direct field offset for InCallActionHandleIntentFlowStrategy.phoneCallBaseCatTemplatingService) = v21;
  *(void *)(v9 + direct field offset for InCallActionHandleIntentFlowStrategy.nlContextProvider) = v17;
  *(_BYTE *)(v9 + direct field offset for InCallActionHandleIntentFlowStrategy.canUseServerTTS) = v15;
  *(_BYTE *)(v9 + direct field offset for InCallActionHandleIntentFlowStrategy.shouldShowDialogAfterIntentHandled) = v13;
  *(void *)(v9 + direct field offset for InCallActionHandleIntentFlowStrategy.aceViewProvider) = v19;
  *(void *)(v9 + 56) = v11;
  outlined init with take of AppSelectionSignalComponent(v30, v9 + 64);
  outlined init with take of AppSelectionSignalComponent(a9, v9 + 104);
  return v9;
}

void InCallActionHandleIntentFlowStrategy.makePreHandleIntentOutput(app:intent:intentResponse:_:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v5 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v5, (uint64_t)static Logger.siriPhone);
  os_log_type_t v6 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_11_5(v6))
  {
    char v7 = (uint8_t *)OUTLINED_FUNCTION_1_0();
    *(_WORD *)char v7 = 0;
    OUTLINED_FUNCTION_5(&dword_0, v0, v4, "#InCallActionHandleIntentFlowStrategy makePreHandleIntentOutput", v7);
    OUTLINED_FUNCTION_0_2((uint64_t)v7);
  }

  uint64_t v8 = OUTLINED_FUNCTION_82_15();
  OUTLINED_FUNCTION_29_1(v3, v9, v10, v8);
  uint64_t v11 = (void *)OUTLINED_FUNCTION_8_2((uint64_t)&unk_40FCF0, 80LL);
  OUTLINED_FUNCTION_34_31(v11);
  OUTLINED_FUNCTION_59();
  id v12 = v2;
  id v13 = v1;
  OUTLINED_FUNCTION_3_8();
  uint64_t v14 = OUTLINED_FUNCTION_83_18( v3,  (uint64_t)&async function pointer to partial apply for closure #1 in InCallActionHandleIntentFlowStrategy.makePreHandleIntentOutput(app:intent:intentResponse:_:));
  swift_release(v14);
  OUTLINED_FUNCTION_7_5();
}

uint64_t closure #1 in InCallActionHandleIntentFlowStrategy.makePreHandleIntentOutput(app:intent:intentResponse:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[24] = a8;
  v8[25] = v18;
  v8[22] = a6;
  v8[23] = a7;
  v8[20] = a4;
  v8[21] = a5;
  uint64_t v13 = type metadata accessor for PhoneError(0LL);
  v8[26] = v13;
  v8[27] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(int **)(*(void *)a4 + 248LL);
  uint64_t v17 = (int *)((char *)v14 + *v14);
  char v15 = (void *)swift_task_alloc(v14[1]);
  v8[28] = v15;
  *char v15 = v8;
  v15[1] = closure #1 in InCallActionHandleIntentFlowStrategy.makePreHandleIntentOutput(app:intent:intentResponse:_:);
  return ((uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, void))v17)(v8 + 14, a5, a6, a7, 0LL);
}

uint64_t closure #1 in InCallActionHandleIntentFlowStrategy.makePreHandleIntentOutput(app:intent:intentResponse:_:)()
{
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_44_26();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((OUTLINED_FUNCTION_36_32(v2) & 1) == 0) {
    goto LABEL_5;
  }
  if (OUTLINED_FUNCTION_77_17() != 4)
  {
    OUTLINED_FUNCTION_98_9();
LABEL_5:
    OUTLINED_FUNCTION_61_19();
    OUTLINED_FUNCTION_58_19();
    OUTLINED_FUNCTION_175();
    uint64_t v3 = swift_errorRelease(v0);
    OUTLINED_FUNCTION_93_1(v3, &demangling cache variable for type metadata for Result<Output, Error>);
    goto LABEL_6;
  }

  OUTLINED_FUNCTION_43_24();
  OUTLINED_FUNCTION_98_9();
  OUTLINED_FUNCTION_67_19();
  InCallActionHandleIntentFlowStrategy.makeLegacyPreHandleIntentOutput(app:intent:intentResponse:_:)();
  swift_errorRelease(*(void *)(v1 + 152));
LABEL_6:
  OUTLINED_FUNCTION_87_11();
  return OUTLINED_FUNCTION_5_16(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t partial apply for closure #1 in InCallActionHandleIntentFlowStrategy.makePreHandleIntentOutput(app:intent:intentResponse:_:)()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_43AE8C);
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  OUTLINED_FUNCTION_2_76(v1);
  OUTLINED_FUNCTION_72_22();
  return closure #1 in InCallActionHandleIntentFlowStrategy.makePreHandleIntentOutput(app:intent:intentResponse:_:)( v2,  v3,  v4,  v5,  v6,  v7,  v8,  v9);
}

void InCallActionHandleIntentFlowStrategy.makeLegacyPreHandleIntentOutput(app:intent:intentResponse:_:)()
{
  uint64_t v1 = v0;
  uint64_t v31 = v2;
  uint64_t v32 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Publishers.Zip<Future<TemplatingResult?, Error>, Future<[SAAceView], Error>>, Output>);
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = (void *)OUTLINED_FUNCTION_8_2((uint64_t)&unk_40FFB0, 48LL);
  v13[2] = v1;
  v13[3] = v9;
  void v13[4] = v7;
  v13[5] = v5;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<TemplatingResult?, Error>);
  OUTLINED_FUNCTION_15_2(v14);
  OUTLINED_FUNCTION_3_8();
  swift_retain();
  id v15 = v7;
  id v16 = v5;
  uint64_t v17 = Future.init(_:)( partial apply for closure #1 in InCallActionHandleIntentFlowStrategy.makeLegacyPreHandleIntentOutput(app:intent:intentResponse:_:),  v13);
  uint64_t v18 = (void *)OUTLINED_FUNCTION_8_2((uint64_t)&unk_40FFD8, 48LL);
  __int128 v18[2] = v1;
  v18[3] = v9;
  _BYTE v18[4] = v15;
  v18[5] = v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<[SAAceView], Error>);
  OUTLINED_FUNCTION_15_2(v19);
  OUTLINED_FUNCTION_3_8();
  swift_retain();
  id v20 = v15;
  id v21 = v16;
  uint64_t v22 = Future.init(_:)( partial apply for closure #2 in InCallActionHandleIntentFlowStrategy.makeLegacyPreHandleIntentOutput(app:intent:intentResponse:_:),  v18);
  v35[0] = v22;
  v35[1] = v17;
  OUTLINED_FUNCTION_3_8();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output);
  lazy protocol witness table accessor for type Future<TemplatingResult, Error> and conformance Future<A, B>( &lazy protocol witness table cache variable for type Future<TemplatingResult?, Error> and conformance Future<A, B>,  &demangling cache variable for type metadata for Future<TemplatingResult?, Error>,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
  uint64_t v25 = v24;
  lazy protocol witness table accessor for type Future<TemplatingResult, Error> and conformance Future<A, B>( &lazy protocol witness table cache variable for type Future<[SAAceView], Error> and conformance Future<A, B>,  &demangling cache variable for type metadata for Future<[SAAceView], Error>,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
  Publisher.zip<A, B>(_:_:)( v35,  partial apply for closure #3 in InCallActionHandleIntentFlowStrategy.makeLegacyPreHandleIntentOutput(app:intent:intentResponse:_:),  v1,  v14,  v19,  v23,  v25,  v26);
  swift_release(v1);
  uint64_t v27 = OUTLINED_FUNCTION_8_2((uint64_t)&unk_410000, 32LL);
  *(void *)(v27 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v31;
  *(void *)(v27 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v32;
  uint64_t v28 = OUTLINED_FUNCTION_8_2((uint64_t)&unk_410028, 32LL);
  *(void *)(v28 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v31;
  *(void *)(v28 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v32;
  lazy protocol witness table accessor for type Future<TemplatingResult, Error> and conformance Future<A, B>( &lazy protocol witness table cache variable for type Publishers.Map<Publishers.Zip<Future<TemplatingResult?, Error>, Future<[SAAceView], Error>>, Output> and conformance Publishers.Map<A, B>,  &demangling cache variable for type metadata for Publishers.Map<Publishers.Zip<Future<TemplatingResult?, Error>, Future<[SAAceView], Error>>, Output>,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  uint64_t v30 = v29;
  swift_retain_n(v32, 2LL);
  Publisher.sink(receiveCompletion:receiveValue:)( partial apply for specialized closure #1 in Publisher.sink(receiveResultCompletion:),  v27,  partial apply for specialized closure #2 in Publisher.sink(receiveResultCompletion:),  v28,  v33,  v30);
  swift_release(v28);
  swift_release(v27);
  swift_release(v22);
  swift_release(v17);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v12, v33);
  OUTLINED_FUNCTION_78_19(direct field offset for InCallActionHandleIntentFlowStrategy.cancellable);
  OUTLINED_FUNCTION_7_5();
}

uint64_t closure #2 in InCallActionHandleIntentFlowStrategy.makeLegacyPreHandleIntentOutput(app:intent:intentResponse:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = swift_allocObject(&unk_410050, 32LL, 7LL);
  *(void *)(v11 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v11 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a2;
  swift_retain(a2);
  dispatch thunk of DefaultAceViewProvider.makeAceViewsForInterstitials(app:intent:intentResponse:_:)( a4,  a5,  a6,  partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<[SABaseCommand], Error>) -> (),  v11);
  return swift_release(v11);
}

void *closure #3 in InCallActionHandleIntentFlowStrategy.makeLegacyPreHandleIntentOutput(app:intent:intentResponse:_:)@<X0>( uint64_t a1@<X0>, unint64_t *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v87 = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for AceOutput(0LL);
  uint64_t v85 = *(void *)(v9 - 8);
  uint64_t v86 = (char *)v9;
  __chkstk_darwin();
  uint64_t v84 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v76 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void *)(type metadata accessor for TemplatingResult(0LL) - 8);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v19 = (char *)&v76 - v18;
  unint64_t v20 = *a2;
  uint64_t v22 = v21;
  outlined init with copy of CommonDirectAction?( a1,  (uint64_t)v14,  &demangling cache variable for type metadata for TemplatingResult?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1LL, v22) == 1)
  {
    outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for TemplatingResult?);
LABEL_3:
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v27 = static os_log_type_t.debug.getter(v25, v26);
    if (os_log_type_enabled(v25, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl(&dword_0, v25, v27, "#InCallActionHandleIntentFlowStrategy No Pre-Handle Output", v28, 2u);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    type metadata accessor for EmptyOutput(0LL);
    return static EmptyOutput.instance.getter(v87);
  }

  unint64_t v83 = v20;
  uint64_t v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v19, v14, v22);
  uint64_t v31 = *(void *)(TemplatingResult.print.getter(v30) + 16);
  swift_bridgeObjectRelease();
  uint64_t v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 16))(v17, v19, v22);
  uint64_t v82 = v22;
  if (v31)
  {
    uint64_t v33 = *(void *)(v15 + 8);
    ((void (*)(char *, uint64_t))v33)(v17, v22);
    goto LABEL_13;
  }

  uint64_t v34 = *(void *)(TemplatingResult.speak.getter(v32) + 16);
  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)(v15 + 8);
  ((void (*)(char *, uint64_t))v33)(v17, v22);
  if (!v34)
  {
    uint64_t v35 = v83;
    if (v83 >> 62) {
      goto LABEL_35;
    }
    if (!*(void *)((char *)&dword_10 + (v83 & 0xFFFFFFFFFFFFF8LL)))
    {
LABEL_39:
      ((void (*)(char *, uint64_t))v33)(v19, v22);
      goto LABEL_3;
    }
  }

  while (1)
  {
LABEL_13:
    uint64_t v36 = a3[5];
    uint64_t v37 = a3[6];
    __swift_project_boxed_opaque_existential_1(a3 + 2, v36);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v37 + 8))(v93, v36, v37);
    uint64_t v38 = a3[5];
    uint64_t v39 = a3[6];
    __swift_project_boxed_opaque_existential_1(a3 + 2, v38);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(v39 + 8))(&v90, v38, v39);
    uint64_t v40 = v92;
    __swift_project_boxed_opaque_existential_1(&v90, v92);
    LOBYTE(v40) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v40);
    Swift::Bool v41 = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
    uint64_t v22 = *((unsigned __int8 *)a3 + direct field offset for InCallActionHandleIntentFlowStrategy.canUseServerTTS);
    uint64_t v42 = type metadata accessor for NLContextUpdate(0LL);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 1LL, 1LL, v42);
    uint64_t v89 = 0LL;
    memset(v88, 0, sizeof(v88));
    static AceOutputHelper.makeConfirmedViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v19,  v93,  v40 & 1,  v83,  v41,  v22,  v8,  _swiftEmptyArrayStorage,  v88);
    outlined destroy of UUID?((uint64_t)v88, &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_1(v93);
    __swift_destroy_boxed_opaque_existential_1(&v90);
    if (one-time initialization token for siriPhone != -1) {
      swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
    }
    uint64_t v43 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v43, (uint64_t)static Logger.siriPhone);
    uint64_t v8 = v84;
    uint64_t v44 = v85;
    uint64_t v45 = *(uint64_t (**)(char *, char *, char *))(v85 + 16);
    unint64_t v83 = (unint64_t)v12;
    uint64_t v46 = v12;
    uint64_t v12 = v86;
    uint64_t v47 = v45(v84, v46, v86);
    Swift::String v48 = (void *)Logger.logObject.getter(v47);
    int v50 = static os_log_type_t.debug.getter(v48, v49);
    if (!os_log_type_enabled((os_log_t)v48, (os_log_type_t)v50))
    {
      (*(void (**)(char *, char *))(v44 + 8))(v8, v12);

      uint64_t v64 = v82;
      goto LABEL_33;
    }

    int v78 = v50;
    os_log_t v80 = (os_log_t)v48;
    uint64_t v81 = v33;
    uint64_t v51 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v52 = swift_slowAlloc(32LL, -1LL);
    uint64_t v77 = v52;
    v93[0] = v52;
    uint64_t v79 = v51;
    *(_DWORD *)uint64_t v51 = 136315138;
    uint64_t v53 = AceOutput.commands.getter(v52);
    uint64_t v54 = v53;
    if ((unint64_t)v53 >> 62)
    {
      if (v53 >= 0) {
        v53 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t v33 = _CocoaArrayWrapper.endIndex.getter(v53);
      if (!v33)
      {
LABEL_31:
        swift_bridgeObjectRelease();
        Swift::String v56 = _swiftEmptyArrayStorage;
        goto LABEL_32;
      }
    }

    else
    {
      uint64_t v33 = *(void *)((char *)&dword_10 + (v53 & 0xFFFFFFFFFFFFF8LL));
      if (!v33) {
        goto LABEL_31;
      }
    }

    uint64_t v90 = _swiftEmptyArrayStorage;
    uint64_t v35 = (uint64_t)&v90;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    if ((v33 & 0x8000000000000000LL) == 0) {
      break;
    }
    __break(1u);
LABEL_35:
    if (v35 < 0) {
      uint64_t v74 = v35;
    }
    else {
      uint64_t v74 = v35 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v75 = _CocoaArrayWrapper.endIndex.getter(v74);
    swift_bridgeObjectRelease();
    if (!v75) {
      goto LABEL_39;
    }
  }

  uint64_t v55 = 0LL;
  Swift::String v56 = v90;
  do
  {
    if ((v54 & 0xC000000000000001LL) != 0) {
      id v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v55, v54);
    }
    else {
      id v57 = *(id *)(v54 + 8 * v55 + 32);
    }
    Swift::String v58 = v57;
    uint64_t v59 = outlined bridged method (pb) of @objc AceObject.encodedClassName()(v57);
    uint64_t v61 = v60;

    uint64_t v90 = v56;
    unint64_t v62 = v56[2];
    if (v62 >= v56[3] >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      Swift::String v56 = v90;
    }

    ++v55;
    v56[2] = v62 + 1;
    id v63 = &v56[2 * v62];
    v63[4] = v59;
    v63[5] = v61;
  }

  while (v33 != v55);
  swift_bridgeObjectRelease();
  uint64_t v44 = v85;
  uint64_t v12 = v86;
  uint64_t v8 = v84;
LABEL_32:
  id v65 = v79;
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  uint64_t v67 = Array.description.getter(v56, v66);
  unint64_t v69 = v68;
  swift_bridgeObjectRelease();
  uint64_t v90 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v69, v93);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v65 + 4);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *))(v44 + 8))(v8, v12);
  os_log_t v70 = v80;
  _os_log_impl( &dword_0,  v80,  (os_log_type_t)v78,  "#InCallActionHandleIntentFlowStrategy Providing Pre-Handle Output: %s",  v65,  0xCu);
  uint64_t v71 = v77;
  swift_arrayDestroy(v77, 1LL);
  swift_slowDealloc(v71, -1LL, -1LL);
  swift_slowDealloc(v65, -1LL, -1LL);

  uint64_t v64 = v82;
  uint64_t v33 = v81;
LABEL_33:
  uint64_t v72 = v87;
  v87[3] = v12;
  void v72[4] = &protocol witness table for AceOutput;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v72);
  (*(void (**)(void *, unint64_t, char *))(v44 + 32))(boxed_opaque_existential_1, v83, v12);
  return (void *)((uint64_t (*)(char *, uint64_t))v33)(v19, v64);
}

void InCallActionHandleIntentFlowStrategy.makeIntentHandledResponse(app:intent:intentResponse:_:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v14 = v13 - v12;
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v15 = OUTLINED_FUNCTION_15_1();
  uint64_t v16 = (os_log_s *)__swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
  Logger.logObject.getter(v16);
  os_log_type_t v17 = OUTLINED_FUNCTION_6_0();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (_WORD *)OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_47(v18);
    OUTLINED_FUNCTION_5_38(&dword_0, v16, v17, "#InCallActionHandleIntentFlowStrategy makeIntentHandledResponse");
    OUTLINED_FUNCTION_0_2((uint64_t)v5);
  }

  InCallActionHandleIntentFlowStrategy.logForHandleIntent(intent:intentResponse:)(v9, v7);
  if (*(_BYTE *)(v0 + direct field offset for InCallActionHandleIntentFlowStrategy.shouldShowDialogAfterIntentHandled) == 1)
  {
    uint64_t v20 = OUTLINED_FUNCTION_82_15();
    OUTLINED_FUNCTION_29_1(v14, v21, v22, v20);
    uint64_t v23 = (void *)OUTLINED_FUNCTION_8_2((uint64_t)&unk_40FD18, 80LL);
    v23[2] = 0LL;
    void v23[3] = 0LL;
    v23[4] = v1;
    void v23[5] = v11;
    v23[6] = v9;
    v23[7] = v7;
    uint64_t v23[8] = v5;
    v23[9] = v3;
    OUTLINED_FUNCTION_59();
    swift_retain();
    id v24 = v9;
    id v25 = v7;
    OUTLINED_FUNCTION_3_8();
    uint64_t v26 = OUTLINED_FUNCTION_83_18( v14,  (uint64_t)&async function pointer to partial apply for closure #1 in InCallActionHandleIntentFlowStrategy.makeIntentHandledResponse(app:intent:intentResponse:_:));
    swift_release(v26);
  }

  else
  {
    Logger.logObject.getter(v19);
    os_log_type_t v27 = OUTLINED_FUNCTION_6_0();
    if (os_log_type_enabled(v16, v27))
    {
      uint64_t v28 = (_WORD *)OUTLINED_FUNCTION_1_0();
      OUTLINED_FUNCTION_47(v28);
      OUTLINED_FUNCTION_5_38( &dword_0,  v16,  v27,  "#InCallActionHandleIntentFlowStrategy Delegate opted to NOT provide output for HandleIntent = .success");
      OUTLINED_FUNCTION_0_2((uint64_t)v5);
    }

    type metadata accessor for EmptyOutput(0LL);
    static EmptyOutput.instance.getter(v29);
    char v30 = 0;
    v5(v29);
    outlined destroy of UUID?((uint64_t)v29, &demangling cache variable for type metadata for Result<Output, Error>);
  }

  OUTLINED_FUNCTION_7_5();
}

uint64_t closure #1 in InCallActionHandleIntentFlowStrategy.makeIntentHandledResponse(app:intent:intentResponse:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[24] = a8;
  v8[25] = v18;
  v8[22] = a6;
  v8[23] = a7;
  v8[20] = a4;
  v8[21] = a5;
  uint64_t v13 = type metadata accessor for PhoneError(0LL);
  v8[26] = v13;
  v8[27] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(int **)(*(void *)a4 + 248LL);
  os_log_type_t v17 = (int *)((char *)v14 + *v14);
  uint64_t v15 = (void *)swift_task_alloc(v14[1]);
  v8[28] = v15;
  *uint64_t v15 = v8;
  v15[1] = closure #1 in InCallActionHandleIntentFlowStrategy.makeIntentHandledResponse(app:intent:intentResponse:_:);
  return ((uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))v17)(v8 + 14, a5, a6, a7, 1LL);
}

uint64_t closure #1 in InCallActionHandleIntentFlowStrategy.makeIntentHandledResponse(app:intent:intentResponse:_:)()
{
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_88_17();
  *(_BYTE *)(v0 + 10__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 0;
  uint64_t v1 = OUTLINED_FUNCTION_175();
  OUTLINED_FUNCTION_93_1(v1, &demangling cache variable for type metadata for Result<Output, Error>);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 112));
  OUTLINED_FUNCTION_87_11();
  return OUTLINED_FUNCTION_5_31(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_44_26();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((OUTLINED_FUNCTION_36_32(v2) & 1) == 0) {
    goto LABEL_5;
  }
  if (OUTLINED_FUNCTION_77_17() != 4)
  {
    OUTLINED_FUNCTION_98_9();
LABEL_5:
    OUTLINED_FUNCTION_61_19();
    OUTLINED_FUNCTION_58_19();
    OUTLINED_FUNCTION_175();
    uint64_t v3 = swift_errorRelease(v0);
    OUTLINED_FUNCTION_93_1(v3, &demangling cache variable for type metadata for Result<Output, Error>);
    goto LABEL_6;
  }

  OUTLINED_FUNCTION_43_24();
  OUTLINED_FUNCTION_98_9();
  OUTLINED_FUNCTION_67_19();
  InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:)();
  swift_errorRelease(*(void *)(v1 + 152));
LABEL_6:
  OUTLINED_FUNCTION_87_11();
  return OUTLINED_FUNCTION_5_16(*(uint64_t (**)(void))(v1 + 8));
}

void InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:)()
{
  uint64_t v1 = v0;
  uint64_t v44 = v2;
  uint64_t v45 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Publishers.Zip4<Future<TemplatingResult, Error>, Future<[SAAceView], Error>, Future<NLContextUpdate?, Error>, Future<[SABaseCommand], Error>>, Output>);
  uint64_t v47 = *(void *)(v46 - 8);
  __chkstk_darwin();
  OUTLINED_FUNCTION_8();
  uint64_t v43 = v11 - v10;
  uint64_t v12 = (void *)OUTLINED_FUNCTION_8_2((uint64_t)&unk_40FE48, 48LL);
  v12[2] = v1;
  void v12[3] = v9;
  v12[4] = v7;
  v12[5] = v5;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<TemplatingResult, Error>);
  OUTLINED_FUNCTION_15_2(v42);
  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_95();
  id v13 = v7;
  id v14 = v5;
  uint64_t v48 = Future.init(_:)( partial apply for closure #1 in InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:),  v12);
  uint64_t v15 = (void *)OUTLINED_FUNCTION_8_2((uint64_t)&unk_40FE70, 48LL);
  v15[2] = v1;
  v15[3] = v9;
  void v15[4] = v13;
  v15[5] = v14;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<[SAAceView], Error>);
  OUTLINED_FUNCTION_15_2(v41);
  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_95();
  id v16 = v13;
  id v17 = v14;
  uint64_t v40 = Future.init(_:)( partial apply for closure #2 in InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:),  v15);
  uint64_t v18 = (void *)OUTLINED_FUNCTION_8_2((uint64_t)&unk_40FE98, 40LL);
  __int128 v18[2] = v1;
  v18[3] = v16;
  _BYTE v18[4] = v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<NLContextUpdate?, Error>);
  OUTLINED_FUNCTION_15_2(v19);
  OUTLINED_FUNCTION_3_8();
  id v20 = v16;
  id v21 = v17;
  uint64_t v22 = OUTLINED_FUNCTION_80_11((uint64_t)partial apply for closure #3 in InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:));
  uint64_t v23 = (void *)OUTLINED_FUNCTION_8_2((uint64_t)&unk_40FEC0, 48LL);
  v23[2] = v1;
  void v23[3] = v9;
  v23[4] = v20;
  void v23[5] = v21;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<[SABaseCommand], Error>);
  OUTLINED_FUNCTION_15_2(v24);
  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_95();
  id v25 = v20;
  id v26 = v21;
  uint64_t v27 = OUTLINED_FUNCTION_80_11((uint64_t)partial apply for closure #4 in InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:));
  v51[0] = v40;
  v51[1] = v48;
  uint64_t v49 = v27;
  uint64_t v50 = v22;
  OUTLINED_FUNCTION_3_8();
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output);
  OUTLINED_FUNCTION_68_21( &lazy protocol witness table cache variable for type Future<TemplatingResult, Error> and conformance Future<A, B>,  &demangling cache variable for type metadata for Future<TemplatingResult, Error>);
  uint64_t v30 = v29;
  OUTLINED_FUNCTION_68_21( &lazy protocol witness table cache variable for type Future<[SAAceView], Error> and conformance Future<A, B>,  &demangling cache variable for type metadata for Future<[SAAceView], Error>);
  uint64_t v32 = v31;
  OUTLINED_FUNCTION_68_21( &lazy protocol witness table cache variable for type Future<NLContextUpdate?, Error> and conformance Future<A, B>,  &demangling cache variable for type metadata for Future<NLContextUpdate?, Error>);
  uint64_t v34 = v33;
  OUTLINED_FUNCTION_68_21( &lazy protocol witness table cache variable for type Future<[SABaseCommand], Error> and conformance Future<A, B>,  &demangling cache variable for type metadata for Future<[SABaseCommand], Error>);
  Publisher.zip<A, B, C, D>(_:_:_:_:)( v51,  &v50,  &v49,  partial apply for closure #5 in InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:),  v1,  v42,  v41,  v19,  v24,  v28,  v30,  v32,  v34,  v35);
  swift_release(v1);
  uint64_t v36 = OUTLINED_FUNCTION_8_2((uint64_t)&unk_40FEE8, 32LL);
  *(void *)(v36 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v44;
  *(void *)(v36 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v45;
  uint64_t v37 = OUTLINED_FUNCTION_8_2((uint64_t)&unk_40FF10, 32LL);
  *(void *)(v37 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v44;
  *(void *)(v37 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v45;
  lazy protocol witness table accessor for type Future<TemplatingResult, Error> and conformance Future<A, B>( &lazy protocol witness table cache variable for type Publishers.Map<Publishers.Zip4<Future<TemplatingResult, Error>, Future<[SAAceView], Error>, Future<NLContextUpdate?, Error>, Future<[SABaseCommand], Error>>, Output> and conformance Publishers.Map<A, B>,  &demangling cache variable for type metadata for Publishers.Map<Publishers.Zip4<Future<TemplatingResult, Error>, Future<[SAAceView], Error>, Future<NLContextUpdate?, Error>, Future<[SABaseCommand], Error>>, Output>,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  uint64_t v39 = v38;
  swift_retain_n(v45, 2LL);
  Publisher.sink(receiveCompletion:receiveValue:)( partial apply for specialized closure #1 in Publisher.sink(receiveResultCompletion:),  v36,  partial apply for specialized closure #2 in Publisher.sink(receiveResultCompletion:),  v37,  v46,  v39);
  swift_release(v37);
  swift_release(v36);
  swift_release(v27);
  swift_release(v22);
  swift_release(v40);
  swift_release(v48);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v43, v46);
  OUTLINED_FUNCTION_78_19(direct field offset for InCallActionHandleIntentFlowStrategy.cancellable);
  OUTLINED_FUNCTION_7_5();
}

uint64_t closure #1 in InCallActionHandleIntentFlowStrategy.makeLegacyPreHandleIntentOutput(app:intent:intentResponse:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  return a7(a4, a5, a6, a1, a2);
}

uint64_t closure #2 in InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = swift_allocObject(&unk_40FF88, 32LL, 7LL);
  *(void *)(v11 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v11 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a2;
  swift_retain(a2);
  dispatch thunk of DefaultAceViewProvider.makeAceViewsForHandleIntentWithUser(app:intent:intentResponse:_:)( a4,  a5,  a6,  partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<[SABaseCommand], Error>) -> (),  v11);
  return swift_release(v11);
}

uint64_t closure #3 in InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = swift_allocObject(&unk_40FF60, 32LL, 7LL);
  *(void *)(v9 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v9 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a2;
  swift_retain();
  dispatch thunk of DefaultNLContextProvider.makeContextForHandleIntent(intent:handleIntentResponse:_:)( a4,  a5,  partial apply for closure #1 in closure #3 in InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:),  v9);
  return swift_release(v9);
}

void closure #1 in closure #3 in InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:)( uint64_t a1, void (*a2)(char *))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NLContextUpdate?, Error>);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of CommonDirectAction?( a1,  (uint64_t)v6,  &demangling cache variable for type metadata for NLContextUpdate?);
  swift_storeEnumTagMultiPayload(v6, v4, 0LL);
  a2(v6);
  outlined destroy of UUID?( (uint64_t)v6,  &demangling cache variable for type metadata for Result<NLContextUpdate?, Error>);
}

uint64_t closure #4 in InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = swift_allocObject(&unk_40FF38, 32LL, 7LL);
  *(void *)(v11 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v11 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a2;
  swift_retain(a2);
  dispatch thunk of DefaultAceViewProvider.makeCommandsAfterAceViewsForHandleIntentWithUser(app:intent:intentResponse:_:)( a4,  a5,  a6,  partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<[SABaseCommand], Error>) -> (),  v11);
  return swift_release(v11);
}

uint64_t closure #5 in InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X4>, void *a6@<X8>)
{
  uint64_t v10 = *a2;
  uint64_t v11 = *a4;
  uint64_t v12 = a5 + 2;
  uint64_t v13 = a5[5];
  uint64_t v14 = a5[6];
  __swift_project_boxed_opaque_existential_1(a5 + 2, v13);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v14 + 8))(v25, v13, v14);
  uint64_t v15 = a5[5];
  uint64_t v16 = a5[6];
  __swift_project_boxed_opaque_existential_1(v12, v15);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v16 + 8))(v23, v15, v16);
  uint64_t v17 = v24;
  __swift_project_boxed_opaque_existential_1(v23, v24);
  LOBYTE(v17) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v17);
  Swift::Bool v18 = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  uint64_t v19 = *((unsigned __int8 *)a5 + direct field offset for InCallActionHandleIntentFlowStrategy.canUseServerTTS);
  memset(v21, 0, sizeof(v21));
  uint64_t v22 = 0LL;
  a6[3] = type metadata accessor for AceOutput(0LL);
  a6[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(a6);
  static AceOutputHelper.makeConfirmedViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( a1,  v25,  v17 & 1,  v10,  v18,  v19,  a3,  v11,  v21);
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for FlowActivity?);
  __swift_destroy_boxed_opaque_existential_1(v25);
  return __swift_destroy_boxed_opaque_existential_1(v23);
}

uint64_t InCallActionHandleIntentFlowStrategy.makeIntentHandledOutput(app:intent:intentResponse:withContextUpdate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(_BYTE *)(v6 + 18__swift_destroy_boxed_opaque_existential_1(v0 + 4) = a5;
  *(void *)(v6 + 8__swift_destroy_boxed_opaque_existential_1(v0 + 8) = a4;
  *(void *)(v6 + 96) = v5;
  *(void *)(v6 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a1;
  *(void *)(v6 + 80) = a3;
  *(void *)(v6 + 10__swift_destroy_boxed_opaque_existential_1(v0 + 4) = *v5;
  uint64_t v7 = type metadata accessor for PhoneError(0LL);
  *(void *)(v6 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v7;
  *(void *)(v6 + 120) = OUTLINED_FUNCTION_23(*(void *)(v7 - 8));
  uint64_t v8 = OUTLINED_FUNCTION_94();
  *(void *)(v6 + 12__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v6 + 136) = v9;
  *(void *)(v6 + 14__swift_destroy_boxed_opaque_existential_1(v0 + 4) = OUTLINED_FUNCTION_23(v9);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t InCallActionHandleIntentFlowStrategy.makeIntentHandledOutput(app:intent:intentResponse:withContextUpdate:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v3 = OUTLINED_FUNCTION_15_1();
  uint64_t v4 = (os_log_s *)OUTLINED_FUNCTION_12_1(v3, (uint64_t)static Logger.siriPhone);
  os_log_type_t v6 = static os_log_type_t.debug.getter(v4, v5);
  if (OUTLINED_FUNCTION_87(v6))
  {
    uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_1_0();
    *(_WORD *)uint64_t v7 = 0;
    OUTLINED_FUNCTION_5(&dword_0, v4, v1, "#InCallActionHandleIntentFlowStrategy makeIntentHandledOutput", v7);
    OUTLINED_FUNCTION_0_2((uint64_t)v7);
  }

  uint64_t v8 = *(void *)(v2 + 80);

  uint64_t v9 = objc_opt_self(&OBJC_CLASS___INHangUpCallIntent);
  if (OUTLINED_FUNCTION_91_12(v9))
  {
    uint64_t v10 = objc_opt_self(&OBJC_CLASS___INHangUpCallIntentResponse);
    if (OUTLINED_FUNCTION_5_68(v10))
    {
      uint64_t v11 = (void *)OUTLINED_FUNCTION_10_2(*(void *)(class metadata base offset for HangUpCallCATsSimple
                                                       + **(void **)(*(void *)(v2 + 96) + 56LL)
                                                       + 32));
      *(void *)(v2 + 15__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v11;
      *uint64_t v11 = v2;
      v11[1] = InCallActionHandleIntentFlowStrategy.makeIntentHandledOutput(app:intent:intentResponse:withContextUpdate:);
      return OUTLINED_FUNCTION_23_46(v42);
    }

    Logger.logObject.getter(0LL);
    os_log_type_t v22 = OUTLINED_FUNCTION_24();
    if (OUTLINED_FUNCTION_27_1(v22))
    {
      uint64_t v23 = (_WORD *)OUTLINED_FUNCTION_1_0();
      OUTLINED_FUNCTION_47(v23);
      OUTLINED_FUNCTION_5_13( &dword_0,  v24,  v25,  "#InCallActionHandleIntentFlowStrategy makeIntentHandledOutput: unexpected intentResponse type");
      OUTLINED_FUNCTION_0_2(v8);
    }

    id v26 = *(void **)(v2 + 120);
    uint64_t v27 = *(void **)(v2 + 88);

    OUTLINED_FUNCTION_57_19();
    OUTLINED_FUNCTION_10_64();
    *(void *)(v2 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v27;
    id v28 = v27;
    uint64_t v29 = OUTLINED_FUNCTION_75_4((uint64_t)&protocol conformance descriptor for NSObject);
    v46._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_14_63(v29);
    OUTLINED_FUNCTION_31_38(v46);
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_17_52(0xD00000000000002ALL, (uint64_t)" is not of type INHangUpCallIntentResponse");
    *id v26 = v43;
    v26[1] = v44;
    OUTLINED_FUNCTION_39_22(0xD000000000000046LL);
    OUTLINED_FUNCTION_40_26((uint64_t)"makeIntentHandledOutput(app:intent:intentResponse:withContextUpdate:)");
    uint64_t v21 = 155LL;
  }

  else
  {
    Logger.logObject.getter(0LL);
    os_log_type_t v13 = OUTLINED_FUNCTION_24();
    if (OUTLINED_FUNCTION_27_1(v13))
    {
      uint64_t v14 = (_WORD *)OUTLINED_FUNCTION_1_0();
      OUTLINED_FUNCTION_47(v14);
      OUTLINED_FUNCTION_5_13( &dword_0,  v15,  v16,  "#InCallActionHandleIntentFlowStrategy makeIntentHandledOutput: unexpected intent type");
      OUTLINED_FUNCTION_0_2(v8);
    }

    uint64_t v17 = *(void **)(v2 + 120);
    Swift::Bool v18 = *(void **)(v2 + 80);

    OUTLINED_FUNCTION_56_19();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_54_18();
    *(void *)(v2 + 56) = v18;
    id v19 = v18;
    uint64_t v20 = OUTLINED_FUNCTION_75_4((uint64_t)&protocol conformance descriptor for NSObject);
    v45._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_14_63(v20);
    OUTLINED_FUNCTION_31_38(v45);
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_17_52(0xD000000000000022LL, (uint64_t)" is not of type INHangUpCallIntent");
    *uint64_t v17 = v43;
    v17[1] = v44;
    OUTLINED_FUNCTION_39_22(0xD000000000000046LL);
    OUTLINED_FUNCTION_40_26((uint64_t)"makeIntentHandledOutput(app:intent:intentResponse:withContextUpdate:)");
    uint64_t v21 = 151LL;
  }

  OUTLINED_FUNCTION_48_25(v21);
  unint64_t v30 = lazy protocol witness table accessor for type PhoneError and conformance PhoneError();
  uint64_t v31 = OUTLINED_FUNCTION_17_14(v30);
  OUTLINED_FUNCTION_69_18(v31, v32);
  uint64_t v33 = OUTLINED_FUNCTION_98_9();
  swift_willThrow(v33, v34, v35, v36, v37, v38, v39, v40);
  uint64_t v41 = *(void *)(v2 + 120);
  swift_task_dealloc(*(void *)(v2 + 144));
  swift_task_dealloc(v41);
  return OUTLINED_FUNCTION_23_46(*(uint64_t (**)(void))(v2 + 8));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v10;
  os_log_type_t v1 = *(void **)(v0 + 160);
  InCallActionHandleIntentFlowStrategy.getCompletionOutputManifest(intent:intentResponse:withContextUpdate:)( *(void *)(v0 + 80),  *(void *)(v0 + 88),  *(_BYTE *)(v0 + 184));
  OUTLINED_FUNCTION_5_85();
  OUTLINED_FUNCTION_41_31();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_8_2(v2, 40LL);
  OUTLINED_FUNCTION_14_31(v3, v4, v5, v6, (__n128)xmmword_31FE60);
  *(void *)(v0 + 16__swift_destroy_boxed_opaque_existential_1(v0 + 8) = v10;
  uint64_t v7 = v1;
  uint64_t v8 = (void *)OUTLINED_FUNCTION_48_9();
  *(void *)(v0 + 176) = v8;
  *uint64_t v8 = v0;
  v8[1] = InCallActionHandleIntentFlowStrategy.makeIntentHandledOutput(app:intent:intentResponse:withContextUpdate:);
  OUTLINED_FUNCTION_16_28();
  return OUTLINED_FUNCTION_3_54();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_27_7();
  OUTLINED_FUNCTION_14_1(*(void *)(v0 + 176));
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 120);

  OUTLINED_FUNCTION_72_0(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  OUTLINED_FUNCTION_7_8();
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t InCallActionHandleIntentFlowStrategy.makeIntentHandledOutput(app:intent:intentResponse:withContextUpdate:)( uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 152);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_task_dealloc(*(void *)(v4 + 144));
    OUTLINED_FUNCTION_7_8();
    return (*(uint64_t (**)(void))(v6 + 8))();
  }

  else
  {
    *(void *)(v4 + 160) = a1;
    OUTLINED_FUNCTION_19_1();
    return swift_task_switch(v8, v9, v10);
  }

void InCallActionHandleIntentFlowStrategy.makeFailureHandlingIntentResponse(app:intent:intentResponse:_:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v5 = OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_12_1(v5, (uint64_t)static Logger.siriPhone);
  os_log_type_t v6 = OUTLINED_FUNCTION_6_0();
  if (OUTLINED_FUNCTION_11_5(v6))
  {
    uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_1_0();
    *(_WORD *)uint64_t v7 = 0;
    OUTLINED_FUNCTION_5(&dword_0, v0, v4, "#InCallActionHandleIntentFlowStrategy makeFailureHandlingIntentResponse", v7);
    OUTLINED_FUNCTION_0_2((uint64_t)v7);
  }

  InCallActionHandleIntentFlowStrategy.logForHandleIntent(intent:intentResponse:)(v2, v1);
  uint64_t v8 = OUTLINED_FUNCTION_82_15();
  OUTLINED_FUNCTION_29_1(v3, v9, v10, v8);
  uint64_t v11 = (void *)OUTLINED_FUNCTION_8_2((uint64_t)&unk_40FD40, 80LL);
  OUTLINED_FUNCTION_34_31(v11);
  OUTLINED_FUNCTION_59();
  id v12 = v2;
  id v13 = v1;
  OUTLINED_FUNCTION_3_8();
  uint64_t v14 = OUTLINED_FUNCTION_83_18( v3,  (uint64_t)&async function pointer to partial apply for closure #1 in InCallActionHandleIntentFlowStrategy.makeFailureHandlingIntentResponse(app:intent:intentResponse:_:));
  swift_release(v14);
  OUTLINED_FUNCTION_7_5();
}

uint64_t closure #1 in InCallActionHandleIntentFlowStrategy.makeFailureHandlingIntentResponse(app:intent:intentResponse:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[19] = a8;
  v8[20] = v16;
  id v12 = *(int **)(*(void *)a4 + 264LL);
  uint64_t v15 = (int *)((char *)v12 + *v12);
  id v13 = (void *)swift_task_alloc(v12[1]);
  v8[21] = v13;
  *id v13 = v8;
  v13[1] = closure #1 in InCallActionHandleIntentFlowStrategy.makeFailureHandlingIntentResponse(app:intent:intentResponse:_:);
  return ((uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))v15)(v8 + 14, a5, a6, a7);
}

uint64_t closure #1 in InCallActionHandleIntentFlowStrategy.makeFailureHandlingIntentResponse(app:intent:intentResponse:_:)()
{
  uint64_t v3 = *(void *)(v2 + 168);
  *os_log_type_t v4 = *v1;
  *(void *)(v2 + 176) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_88_17();
  *(_BYTE *)(v0 + 10__swift_destroy_boxed_opaque_existential_1(v0 + 4) = 0;
  uint64_t v1 = OUTLINED_FUNCTION_175();
  OUTLINED_FUNCTION_93_1(v1, &demangling cache variable for type metadata for Result<Output, Error>);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 112));
  return OUTLINED_FUNCTION_5_31(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t InCallActionHandleIntentFlowStrategy.makeFailureHandlingIntentOutput(app:intent:intentResponse:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[17] = a4;
  v5[18] = v4;
  v5[15] = a1;
  v5[16] = a3;
  v5[19] = *v4;
  uint64_t v6 = type metadata accessor for PhoneError(0LL);
  v5[20] = v6;
  v5[21] = OUTLINED_FUNCTION_23(*(void *)(v6 - 8));
  uint64_t v7 = OUTLINED_FUNCTION_94();
  v5[22] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[23] = v8;
  _BYTE v5[24] = OUTLINED_FUNCTION_23(v8);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

uint64_t InCallActionHandleIntentFlowStrategy.makeFailureHandlingIntentOutput(app:intent:intentResponse:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once(&one-time initialization token for siriPhone, one-time initialization function for siriPhone);
  }
  uint64_t v3 = OUTLINED_FUNCTION_15_1();
  os_log_type_t v4 = (os_log_s *)OUTLINED_FUNCTION_12_1(v3, (uint64_t)static Logger.siriPhone);
  os_log_type_t v6 = static os_log_type_t.debug.getter(v4, v5);
  if (OUTLINED_FUNCTION_87(v6))
  {
    uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_1_0();
    *(_WORD *)uint64_t v7 = 0;
    OUTLINED_FUNCTION_5(&dword_0, v4, v1, "#InCallActionHandleIntentFlowStrategy makeFailureConfirmingIntentOutput", v7);
    OUTLINED_FUNCTION_0_2((uint64_t)v7);
  }

  uint64_t v8 = *(void *)(v2 + 128);

  uint64_t v9 = objc_opt_self(&OBJC_CLASS___INHangUpCallIntent);
  if (!OUTLINED_FUNCTION_91_12(v9))
  {
    Logger.logObject.getter(0LL);
    os_log_type_t v19 = OUTLINED_FUNCTION_24();
    if (OUTLINED_FUNCTION_27_1(v19))
    {
      uint64_t v20 = (_WORD *)OUTLINED_FUNCTION_1_0();
      OUTLINED_FUNCTION_47(v20);
      OUTLINED_FUNCTION_5_13( &dword_0,  v21,  v22,  "#InCallActionHandleIntentFlowStrategy makeFailureConfirmingIntentOutput: unexpected intent type");
      OUTLINED_FUNCTION_0_2(v8);
    }

    uint64_t v23 = *(void **)(v2 + 168);
    uint64_t v24 = *(void **)(v2 + 128);

    OUTLINED_FUNCTION_56_19();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_54_18();
    *(void *)(v2 + 10__swift_destroy_boxed_opaque_existential_1(v0 + 4) = v24;
    id v25 = v24;
    uint64_t v26 = OUTLINED_FUNCTION_75_4((uint64_t)&protocol conformance descriptor for NSObject);
    v52._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_14_63(v26);
    OUTLINED_FUNCTION_31_38(v52);
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_17_52(0xD000000000000022LL, (uint64_t)" is not of type INHangUpCallIntent");
    *uint64_t v23 = v50;
    v23[1] = v51;
    OUTLINED_FUNCTION_39_22(0xD000000000000046LL);
    OUTLINED_FUNCTION_40_26((uint64_t)"makeFailureHandlingIntentOutput(app:intent:intentResponse:)");
    uint64_t v27 = 188LL;
    goto LABEL_15;
  }

  uint64_t v10 = objc_opt_self(&OBJC_CLASS___INHangUpCallIntentResponse);
  uint64_t v11 = OUTLINED_FUNCTION_5_68(v10);
  if (!v11)
  {
    Logger.logObject.getter(0LL);
    os_log_type_t v28 = OUTLINED_FUNCTION_24();
    if (OUTLINED_FUNCTION_27_1(v28))
    {
      uint64_t v29 = (_WORD *)OUTLINED_FUNCTION_1_0();
      OUTLINED_FUNCTION_47(v29);
      OUTLINED_FUNCTION_5_13( &dword_0,  v30,  v31,  "#InCallActionHandleIntentFlowStrategy makeFailureConfirmingIntentOutput: unexpected intentResponse type");
      OUTLINED_FUNCTION_0_2(v8);
    }

    uint64_t v32 = *(void **)(v2 + 168);
    uint64_t v33 = *(void **)(v2 + 136);

    OUTLINED_FUNCTION_57_19();
    OUTLINED_FUNCTION_10_64();
    *(void *)(v2 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v33;
    id v34 = v33;
    uint64_t v35 = OUTLINED_FUNCTION_75_4((uint64_t)&protocol conformance descriptor for NSObject);
    v53._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_14_63(v35);
    OUTLINED_FUNCTION_31_38(v53);
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_17_52(0xD00000000000002ALL, (uint64_t)" is not of type INHangUpCallIntentResponse");
    *uint64_t v32 = v50;
    v32[1] = v51;
    OUTLINED_FUNCTION_39_22(0xD000000000000046LL);
    OUTLINED_FUNCTION_40_26((uint64_t)"makeFailureHandlingIntentOutput(app:intent:intentResponse:)");
    uint64_t v27 = 192LL;
LABEL_15:
    OUTLINED_FUNCTION_48_25(v27);
    unint64_t v36 = lazy protocol witness table accessor for type PhoneError and conformance PhoneError();
    uint64_t v37 = OUTLINED_FUNCTION_17_14(v36);
    OUTLINED_FUNCTION_69_18(v37, v38);
    uint64_t v39 = OUTLINED_FUNCTION_98_9();
    swift_willThrow(v39, v40, v41, v42, v43, v44, v45, v46);
    uint64_t v47 = *(void *)(v2 + 168);
    swift_task_dealloc(*(void *)(v2 + 192));
    swift_task_dealloc(v47);
    return OUTLINED_FUNCTION_23_46(*(uint64_t (**)(void))(v2 + 8));
  }

  id v12 = (void *)v11;
  uint64_t v13 = *(void *)(v2 + 144);
  id v14 = *(id *)(v2 + 136);
  uint64_t v15 = (char *)[v12 code];
  uint64_t v16 = **(void **)(v13 + 56);
  if (v15 == (_BYTE *)&dword_4 + 2)
  {
    uint64_t v17 = (void *)OUTLINED_FUNCTION_10_2(*(void *)(class metadata base offset for HangUpCallCATsSimple + v16 + 16));
    *(void *)(v2 + 200) = v17;
    Swift::Bool v18 = InCallActionHandleIntentFlowStrategy.makeFailureHandlingIntentOutput(app:intent:intentResponse:);
  }

  else
  {
    uint64_t v17 = (void *)OUTLINED_FUNCTION_10_2(*(void *)(v16 + class metadata base offset for HangUpCallCATsSimple));
    *(void *)(v2 + 2outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v17;
    Swift::Bool v18 = InCallActionHandleIntentFlowStrategy.makeFailureHandlingIntentOutput(app:intent:intentResponse:);
  }

  *uint64_t v17 = v2;
  v17[1] = v18;
  return OUTLINED_FUNCTION_23_46(v49);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  OUTLINED_FUNCTION_27_7();
  v3[7] = v1;
  v3[8] = v2;
  void v3[9] = v0;
  os_log_type_t v4 = v3[25];
  *uint64_t v5 = *v1;
  v3[26] = v0;
  swift_task_dealloc(v4);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v10;
  os_log_type_t v1 = (void *)v0[8];
  OUTLINED_FUNCTION_38_29();
  OUTLINED_FUNCTION_5_85();
  OUTLINED_FUNCTION_41_31();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_8_2(v2, 40LL);
  OUTLINED_FUNCTION_14_31(v3, v4, v5, v6, (__n128)xmmword_31FE60);
  v0[30] = v10;
  uint64_t v7 = v1;
  uint64_t v8 = (void *)OUTLINED_FUNCTION_48_9();
  v0[31] = v8;
  *uint64_t v8 = v0;
  v8[1] = InCallActionHandleIntentFlowStrategy.makeFailureHandlingIntentOutput(app:intent:intentResponse:);
  OUTLINED_FUNCTION_16_28();
  return OUTLINED_FUNCTION_3_54();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  OUTLINED_FUNCTION_27_7();
  v3[10] = v1;
  v3[11] = v2;
  v3[12] = v0;
  os_log_type_t v4 = v3[27];
  *uint64_t v5 = *v1;
  v3[28] = v0;
  swift_task_dealloc(v4);
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v10;
  os_log_type_t v1 = (void *)v0[11];
  OUTLINED_FUNCTION_38_29();
  OUTLINED_FUNCTION_5_85();
  OUTLINED_FUNCTION_41_31();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_8_2(v2, 40LL);
  OUTLINED_FUNCTION_14_31(v3, v4, v5, v6, (__n128)xmmword_31FE60);
  v0[30] = v10;
  uint64_t v7 = v1;
  uint64_t v8 = (void *)OUTLINED_FUNCTION_48_9();
  v0[31] = v8;
  *uint64_t v8 = v0;
  v8[1] = InCallActionHandleIntentFlowStrategy.makeFailureHandlingIntentOutput(app:intent:intentResponse:);
  OUTLINED_FUNCTION_16_28();
  return OUTLINED_FUNCTION_3_54();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_27_7();
  OUTLINED_FUNCTION_14_1(*(void *)(v0 + 248));
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_5_7();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v1 = *(void **)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 168);
  OUTLINED_FUNCTION_79_13();

  OUTLINED_FUNCTION_72_0(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 16));
  OUTLINED_FUNCTION_7_8();
  swift_task_dealloc(v3);
  return OUTLINED_FUNCTION_6_17(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_79_13();
  OUTLINED_FUNCTION_86_10();
  OUTLINED_FUNCTION_7_8();
  return OUTLINED_FUNCTION_6_17(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_79_13();
  OUTLINED_FUNCTION_86_10();
  OUTLINED_FUNCTION_7_8();
  return OUTLINED_FUNCTION_6_17(*(uint64_t (**)(void))(v0 + 8));
}

void InCallActionHandleIntentFlowStrategy.logForHandleIntent(intent:intentResponse:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  uint64_t v22 = a1;
  id v23 = a2;
  uint64_t v6 = *(void *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 88);
  id v8 = a1;
  id v9 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v6, v7, 0LL, 0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (INHangUpCallIntent, INHangUpCallIntentResponse));
  if (swift_dynamicCast(v21, &v22, TupleTypeMetadata2))
  {

    id v11 = v21[1];
    if (OUTLINED_FUNCTION_89_12() == (char *)&dword_0 + 3 || OUTLINED_FUNCTION_89_12() == (char *)&dword_4 + 2)
    {
      uint64_t v12 = v3[5];
      uint64_t v13 = v3[6];
      __swift_project_boxed_opaque_existential_1(v3 + 2, v12);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v13 + 40))(v20, v12, v13);
      __swift_project_boxed_opaque_existential_1(v20, v20[3]);
      SiriKitEventSending.sendCallStateEvent(hangUpIntentResponse:)((INHangUpCallIntentResponse)v11);
      __swift_destroy_boxed_opaque_existential_1(v20);
    }

    uint64_t v14 = v3[16];
    uint64_t v15 = v3[17];
    __swift_project_boxed_opaque_existential_1(v3 + 13, v14);
    uint64_t v16 = v3 + 2;
    uint64_t v18 = v3[5];
    uint64_t v17 = v3[6];
    __swift_project_boxed_opaque_existential_1(v16, v18);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v17 + 8))(v20, v18, v17);
    BiomeEventSending.logEventForHangUp(intentResponse:device:)(v11, (uint64_t)v20, v14, v15);

    __swift_destroy_boxed_opaque_existential_1(v20);
  }

  os_log_type_t v19 = v22;
}

void InCallActionHandleIntentFlowStrategy.getCompletionOutputManifest(intent:intentResponse:withContextUpdate:)( uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_5_2();
  __chkstk_darwin();
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  id v9 = (char *)&v12 - v8;
  uint64_t v10 = OUTLINED_FUNCTION_94();
  OUTLINED_FUNCTION_57(v10);
  if ((a3 & 1) != 0)
  {
    type metadata accessor for PhoneCallNLContextProvider(0LL, *(void *)(v5 + 80), *(void *)(v5 + 88), v11);
    static PhoneCallNLContextProvider.makeContextForHandleIntent(intent:handleIntentResponse:)();
    outlined init with copy of CommonDirectAction?( (uint64_t)v9,  (uint64_t)v7,  &demangling cache variable for type metadata for NLContextUpdate?);
    OutputGenerationManifest.nlContextUpdate.setter(v7);
    outlined destroy of UUID?((uint64_t)v9, &demangling cache variable for type metadata for NLContextUpdate?);
  }

void InCallActionHandleIntentFlowStrategy.deinit()
{
  uint64_t v1 = OUTLINED_FUNCTION_94();
  OUTLINED_FUNCTION_2_0(v1);
  OUTLINED_FUNCTION_62_16(direct field offset for InCallActionHandleIntentFlowStrategy.phoneCallBaseCatTemplatingService);
  OUTLINED_FUNCTION_62_16(direct field offset for InCallActionHandleIntentFlowStrategy.aceViewProvider);
  OUTLINED_FUNCTION_62_16(direct field offset for InCallActionHandleIntentFlowStrategy.nlContextProvider);
  OUTLINED_FUNCTION_62_16(direct field offset for InCallActionHandleIntentFlowStrategy.cancellable);
  OUTLINED_FUNCTION_2();
}

uint64_t InCallActionHandleIntentFlowStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t protocol witness for HandleIntentFlowStrategy.makePromptForDeviceUnlock(app:intent:intentResponse:_:) in conformance InCallActionHandleIntentFlowStrategy<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for HandleIntentFlowStrategy.makePromptForDeviceUnlock(app:intent:intentResponse:_:) in conformance InCallActionHandleIntentFlowStrategy<A, B>( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&HandleIntentFlowStrategy.makePromptForDeviceUnlock(app:intent:intentResponse:_:));
}

uint64_t protocol witness for HandleIntentFlowStrategy.makeHandoffForAuthenticationResponse(app:intent:intentResponse:_:) in conformance InCallActionHandleIntentFlowStrategy<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for HandleIntentFlowStrategy.makePromptForDeviceUnlock(app:intent:intentResponse:_:) in conformance InCallActionHandleIntentFlowStrategy<A, B>( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&HandleIntentFlowStrategy.makeHandoffForAuthenticationResponse(app:intent:intentResponse:_:));
}

uint64_t protocol witness for HandleIntentFlowStrategy.makePreHandleIntentOutput(app:intent:intentResponse:_:) in conformance InCallActionHandleIntentFlowStrategy<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 216LL))();
}

uint64_t protocol witness for HandleIntentFlowStrategy.makeContinueInAppResponse(app:intent:intentResponse:_:) in conformance InCallActionHandleIntentFlowStrategy<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for HandleIntentFlowStrategy.makePromptForDeviceUnlock(app:intent:intentResponse:_:) in conformance InCallActionHandleIntentFlowStrategy<A, B>( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&HandleIntentFlowStrategy.makeContinueInAppResponse(app:intent:intentResponse:_:));
}

uint64_t protocol witness for HandleIntentFlowStrategy.makeInProgressResponse(app:intent:intentResponse:_:) in conformance InCallActionHandleIntentFlowStrategy<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for HandleIntentFlowStrategy.makePromptForDeviceUnlock(app:intent:intentResponse:_:) in conformance InCallActionHandleIntentFlowStrategy<A, B>( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&HandleIntentFlowStrategy.makeInProgressResponse(app:intent:intentResponse:_:));
}

uint64_t protocol witness for HandleIntentFlowStrategy.makePromptForDeviceUnlock(app:intent:intentResponse:_:) in conformance InCallActionHandleIntentFlowStrategy<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v14 = type metadata accessor for InCallActionHandleIntentFlowStrategy( 0LL,  *(void *)(a6 + 80),  *(void *)(a6 + 88),  a4);
  return a8(a1, a2, a3, a4, a5, v14, a7);
}

uint64_t protocol witness for IntentExtensionCommunicating.shouldIntentBeExecutedOnRemoteCompanion(intent:) in conformance InCallActionHandleIntentFlowStrategy<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for InCallActionHandleIntentFlowStrategy( 0LL,  *(void *)(a2 + 80),  *(void *)(a2 + 88),  a4);
  return IntentExtensionCommunicating.shouldIntentBeExecutedOnRemoteCompanion(intent:)(a1, v6, a3);
}

uint64_t protocol witness for IntentExtensionCommunicating.makeSiriKitIntentHandler(app:intent:) in conformance InCallActionHandleIntentFlowStrategy<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for InCallActionHandleIntentFlowStrategy( 0LL,  *(void *)(a3 + 80),  *(void *)(a3 + 88),  a4);
  return IntentExtensionCommunicating.makeSiriKitIntentHandler(app:intent:)(a1, a2, v7, a4);
}

uint64_t protocol witness for IntentExtensionCommunicating.makeIntentExecutionBehavior(app:intent:) in conformance InCallActionHandleIntentFlowStrategy<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for InCallActionHandleIntentFlowStrategy( 0LL,  *(void *)(a3 + 80),  *(void *)(a3 + 88),  a4);
  return IntentExtensionCommunicating.makeIntentExecutionBehavior(app:intent:)(a1, a2, v7, a4);
}

uint64_t protocol witness for IntentExtensionCommunicating.makeIntentExecutionBehavior(app:intent:completion:) in conformance InCallActionHandleIntentFlowStrategy<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for InCallActionHandleIntentFlowStrategy( 0LL,  *(void *)(a5 + 80),  *(void *)(a5 + 88),  a4);
  return IntentExtensionCommunicating.makeIntentExecutionBehavior(app:intent:completion:)(a1, a2, a3, a4, v11, a6);
}

uint64_t partial apply for closure #1 in InCallActionHandleIntentFlowStrategy.makeIntentHandledResponse(app:intent:intentResponse:_:)()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_43AE9C);
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  OUTLINED_FUNCTION_2_76(v1);
  OUTLINED_FUNCTION_72_22();
  return closure #1 in InCallActionHandleIntentFlowStrategy.makeIntentHandledResponse(app:intent:intentResponse:_:)( v2,  v3,  v4,  v5,  v6,  v7,  v8,  v9);
}

uint64_t objectdestroyTm_15()
{
  swift_release(*(void *)(v0 + 72));
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t partial apply for closure #1 in InCallActionHandleIntentFlowStrategy.makeFailureHandlingIntentResponse(app:intent:intentResponse:_:)()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_43AEB4);
  *(void *)(v0 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v1;
  OUTLINED_FUNCTION_2_76(v1);
  OUTLINED_FUNCTION_72_22();
  return closure #1 in InCallActionHandleIntentFlowStrategy.makeFailureHandlingIntentResponse(app:intent:intentResponse:_:)( v2,  v3,  v4,  v5,  v6,  v7,  v8,  v9);
}

uint64_t base witness table accessor for IntentExtensionCommunicating in InCallActionHandleIntentFlowStrategy<A, B>( uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for InCallActionHandleIntentFlowStrategy<A, B>, a1);
}

uint64_t type metadata completion function for InCallActionHandleIntentFlowStrategy(uint64_t a1)
{
  v4[0] = "(";
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v4[2] = "(";
  void v4[3] = "(";
  uint64_t result = type metadata accessor for OutputGenerationManifest(319LL);
  if (v3 <= 0x3F)
  {
    __int128 v4[4] = *(void *)(result - 8) + 64LL;
    void v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    void v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[8] = &unk_338FA0;
    void v4[9] = &unk_338FA0;
    v4[10] = &unk_338FB8;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 11LL, v4, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for InCallActionHandleIntentFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for InCallActionHandleIntentFlowStrategy);
}

uint64_t partial apply for closure #1 in InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:)( uint64_t a1, uint64_t a2)
{
  return closure #1 in InCallActionHandleIntentFlowStrategy.makeLegacyPreHandleIntentOutput(app:intent:intentResponse:_:)( a1,  a2,  v2[2],  v2[3],  v2[4],  v2[5],  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of DucTemplatingService.makeIntentHandledDialog(app:intent:intentResponse:_:));
}

uint64_t partial apply for closure #2 in InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:)( uint64_t a1, uint64_t a2)
{
  return closure #2 in InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:)( a1,  a2,  v2[2],  v2[3],  v2[4],  v2[5]);
}

uint64_t sub_22B584()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t partial apply for closure #3 in InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:)( uint64_t a1, uint64_t a2)
{
  return closure #3 in InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:)( a1,  a2,  v2[2],  v2[3],  v2[4]);
}

uint64_t partial apply for closure #4 in InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:)( uint64_t a1, uint64_t a2)
{
  return closure #4 in InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:)( a1,  a2,  v2[2],  v2[3],  v2[4],  v2[5]);
}

uint64_t partial apply for closure #5 in InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  return closure #5 in InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:)( a1,  a2,  a3,  a4,  v5,  a5);
}

uint64_t outlined bridged method (pb) of @objc AceObject.encodedClassName()(void *a1)
{
  id v1 = [a1 encodedClassName];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void specialized closure #1 in Publisher.sink(receiveResultCompletion:)( uint64_t *a1, void (*a2)(void *))
{
}

uint64_t sub_22B654()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void partial apply for closure #1 in closure #3 in InCallActionHandleIntentFlowStrategy.makeLegacyIntentHandledResponse(app:intent:intentResponse:_:)( uint64_t a1)
{
}

uint64_t partial apply for closure #1 in InCallActionHandleIntentFlowStrategy.makeLegacyPreHandleIntentOutput(app:intent:intentResponse:_:)( uint64_t a1, uint64_t a2)
{
  return closure #1 in InCallActionHandleIntentFlowStrategy.makeLegacyPreHandleIntentOutput(app:intent:intentResponse:_:)( a1,  a2,  v2[2],  v2[3],  v2[4],  v2[5],  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of DucTemplatingService.makeInterstitialDialog(app:intent:intentResponse:_:));
}

uint64_t objectdestroy_18Tm_0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t partial apply for closure #2 in InCallActionHandleIntentFlowStrategy.makeLegacyPreHandleIntentOutput(app:intent:intentResponse:_:)( uint64_t a1, uint64_t a2)
{
  return closure #2 in InCallActionHandleIntentFlowStrategy.makeLegacyPreHandleIntentOutput(app:intent:intentResponse:_:)( a1,  a2,  v2[2],  v2[3],  v2[4],  v2[5]);
}

void *partial apply for closure #3 in InCallActionHandleIntentFlowStrategy.makeLegacyPreHandleIntentOutput(app:intent:intentResponse:_:)@<X0>( uint64_t a1@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  return closure #3 in InCallActionHandleIntentFlowStrategy.makeLegacyPreHandleIntentOutput(app:intent:intentResponse:_:)( a1,  a2,  v3,  a3);
}

void partial apply for specialized closure #1 in Publisher.sink(receiveResultCompletion:)(uint64_t *a1)
{
}

void partial apply for specialized closure #2 in Publisher.sink(receiveResultCompletion:)(uint64_t a1)
{
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<[SABaseCommand], Error>) -> ()( uint64_t a1, char a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t OUTLINED_FUNCTION_2_76(void *a1)
{
  *a1 = v4;
  a1[1] = v1;
  *(void *)(v5 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = v3;
  return v2;
}

void OUTLINED_FUNCTION_10_64()
{
  v0._uint64_t countAndFlagsBits = 0x6552746E65746E69LL;
  v0._object = (void *)0xEF3D65736E6F7073LL;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_14_63(uint64_t a1)
{
  return String.init<A>(describing:)(v2, v1, a1);
}

void OUTLINED_FUNCTION_17_52(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_23_46(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_29_37()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 224);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 23__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v0;
  return swift_task_dealloc(v5);
}

void OUTLINED_FUNCTION_31_38(Swift::String a1)
{
}

  ;
}

uint64_t OUTLINED_FUNCTION_34_31(void *a1)
{
  a1[2] = 0LL;
  a1[3] = 0LL;
  a1[4] = v4;
  a1[5] = v5;
  a1[6] = v3;
  a1[7] = v2;
  a1[8] = v6;
  a1[9] = v1;
  return swift_retain(v4);
}

uint64_t OUTLINED_FUNCTION_36_32(uint64_t a1)
{
  return swift_dynamicCast(v1, v2, a1, v3, 0LL);
}

void OUTLINED_FUNCTION_38_29()
{
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[16];
  v0[29] = v1;
  InCallActionHandleIntentFlowStrategy.getCompletionOutputManifest(intent:intentResponse:withContextUpdate:)(v3, v2, 1);
}

void OUTLINED_FUNCTION_39_22(uint64_t a1@<X8>)
{
  *(void *)(v2 + outlined init with copy of Any(*(void *)(v0 + 72), v0 + 16) = a1;
  *(void *)(v2 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 4) = (v1 - 32) | 0x8000000000000000LL;
}

void *OUTLINED_FUNCTION_41_31()
{
  return __swift_project_boxed_opaque_existential_1(v0, *(void *)(v1 + 40));
}