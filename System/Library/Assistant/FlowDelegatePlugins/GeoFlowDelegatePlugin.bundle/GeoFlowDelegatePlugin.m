uint64_t specialized GeoCATModel.getID()(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  Swift::String v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v37;
  char v38;
  ValueMetadata *v39;
  __int128 v40;
  void v41[4];
  v6 = type metadata accessor for Mirror(0LL);
  v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&v40 = &type metadata for GeoLabel;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeoLabel.Type);
  v11 = String.init<A>(describing:)(&v40, v10);
  v13 = v12;
  v39 = &type metadata for GeoLabel;
  *(void *)&v37 = a1;
  *((void *)&v37 + 1) = a2;
  v38 = a3;
  outlined copy of GeoLabel(a1, a2, a3);
  v14 = Mirror.init(reflecting:)(&v37);
  v15 = (void *)Mirror.children.getter(v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  specialized Collection.first.getter(v15, &v40);
  swift_release(v15);
  if (v41[3])
  {
    v16 = *((void *)&v40 + 1);
    v17 = v40;
    __swift_destroy_boxed_opaque_existential_0Tm(v41);
    if (v16) {
      goto LABEL_6;
    }
  }

  else
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v40,  &demangling cache variable for type metadata for (label: String?, value: Any)?);
  }

  *(void *)&v40 = a1;
  *((void *)&v40 + 1) = a2;
  LOBYTE(v41[0]) = a3;
  outlined copy of GeoLabel(a1, a2, a3);
  v17 = String.init<A>(describing:)(&v40, &type metadata for GeoLabel);
  v16 = v18;
LABEL_6:
  *(void *)&v40 = v11;
  *((void *)&v40 + 1) = v13;
  swift_bridgeObjectRetain(v13);
  v19._countAndFlagsBits = 35LL;
  v19._object = (void *)0xE100000000000000LL;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v13);
  v20 = v40;
  swift_bridgeObjectRetain(v16);
  specialized Collection.first.getter(v17, v16);
  v22 = v21;
  swift_bridgeObjectRelease(v16);
  if (v22)
  {
    v23 = Character.uppercased()();
    countAndFlagsBits = v23._countAndFlagsBits;
    object = v23._object;
    swift_bridgeObjectRelease(v22);
  }

  else
  {
    countAndFlagsBits = 0LL;
    object = (void *)0xE000000000000000LL;
  }

  v40 = v20;
  swift_bridgeObjectRetain(*((void *)&v20 + 1));
  v26._countAndFlagsBits = countAndFlagsBits;
  v26._object = object;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(*((void *)&v20 + 1));
  v27 = v40;
  v28 = specialized Collection.dropFirst(_:)(1uLL, v17, v16);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  swift_bridgeObjectRelease(v16);
  v37 = v27;
  *(void *)&v40 = v28;
  *((void *)&v40 + 1) = v30;
  v41[0] = v32;
  v41[1] = v34;
  v35 = lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain(*((void *)&v27 + 1));
  String.append<A>(contentsOf:)(&v40, &type metadata for Substring, v35);
  swift_bridgeObjectRelease(*((void *)&v27 + 1));
  swift_bridgeObjectRelease(v34);
  return v37;
}

uint64_t specialized GeoCATModel.getID()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ContactResolution(0LL);
  __chkstk_darwin();
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v6 = (char *)&v40 - v5;
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v42 = v2;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactResolution.Type);
  uint64_t v12 = String.init<A>(describing:)(&v42, v11);
  uint64_t v14 = v13;
  uint64_t v41 = v2;
  v15 = __swift_allocate_boxed_opaque_existential_0(&v40);
  outlined init with copy of TrafficIncident(v1, (uint64_t)v15, type metadata accessor for ContactResolution);
  uint64_t v16 = Mirror.init(reflecting:)(&v40);
  v17 = (void *)Mirror.children.getter(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  specialized Collection.first.getter(v17, &v42);
  swift_release(v17);
  if (v43[3])
  {
    unint64_t v18 = *((void *)&v42 + 1);
    uint64_t v19 = v42;
    __swift_destroy_boxed_opaque_existential_0Tm(v43);
    outlined init with copy of TrafficIncident(v1, (uint64_t)v6, type metadata accessor for ContactResolution);
    if (v18)
    {
      uint64_t v20 = (uint64_t)v6;
      goto LABEL_6;
    }
  }

  else
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v42,  &demangling cache variable for type metadata for (label: String?, value: Any)?);
    outlined init with copy of TrafficIncident(v1, (uint64_t)v6, type metadata accessor for ContactResolution);
  }

  outlined init with copy of TrafficIncident((uint64_t)v6, (uint64_t)v4, type metadata accessor for ContactResolution);
  uint64_t v19 = String.init<A>(describing:)(v4, v2);
  unint64_t v18 = v21;
  uint64_t v20 = (uint64_t)v6;
LABEL_6:
  outlined destroy of ShareETA(v20, type metadata accessor for ContactResolution);
  *(void *)&__int128 v42 = v12;
  *((void *)&v42 + 1) = v14;
  swift_bridgeObjectRetain(v14);
  v22._uint64_t countAndFlagsBits = 35LL;
  v22._object = (void *)0xE100000000000000LL;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v14);
  __int128 v23 = v42;
  swift_bridgeObjectRetain(v18);
  specialized Collection.first.getter(v19, v18);
  uint64_t v25 = v24;
  swift_bridgeObjectRelease(v18);
  if (v25)
  {
    Swift::String v26 = Character.uppercased()();
    uint64_t countAndFlagsBits = v26._countAndFlagsBits;
    object = v26._object;
    swift_bridgeObjectRelease(v25);
  }

  else
  {
    uint64_t countAndFlagsBits = 0LL;
    object = (void *)0xE000000000000000LL;
  }

  __int128 v42 = v23;
  swift_bridgeObjectRetain(*((void *)&v23 + 1));
  v29._uint64_t countAndFlagsBits = countAndFlagsBits;
  v29._object = object;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(*((void *)&v23 + 1));
  __int128 v30 = v42;
  unint64_t v31 = specialized Collection.dropFirst(_:)(1uLL, v19, v18);
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  swift_bridgeObjectRelease(v18);
  __int128 v40 = v30;
  *(void *)&__int128 v42 = v31;
  *((void *)&v42 + 1) = v33;
  v43[0] = v35;
  v43[1] = v37;
  unint64_t v38 = lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain(*((void *)&v30 + 1));
  String.append<A>(contentsOf:)(&v42, &type metadata for Substring, v38);
  swift_bridgeObjectRelease(*((void *)&v30 + 1));
  swift_bridgeObjectRelease(v37);
  return v40;
}

uint64_t specialized GeoCATModel.getID()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for Mirror(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v44 = a4;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = String.init<A>(describing:)(&v44, v14);
  uint64_t v17 = v16;
  *(void *)&__int128 v41 = a1;
  *((void *)&v41 + 1) = a2;
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  outlined copy of SaveParkingLocation(a1, a2, a3);
  uint64_t v18 = Mirror.init(reflecting:)(&v41);
  uint64_t v19 = (void *)Mirror.children.getter(v18);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  specialized Collection.first.getter(v19, &v44);
  swift_release(v19);
  if (v45[3])
  {
    unint64_t v20 = *((void *)&v44 + 1);
    uint64_t v21 = v44;
    __swift_destroy_boxed_opaque_existential_0Tm(v45);
    if (v20) {
      goto LABEL_6;
    }
  }

  else
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v44,  &demangling cache variable for type metadata for (label: String?, value: Any)?);
  }

  *(void *)&__int128 v44 = a1;
  *((void *)&v44 + 1) = a2;
  v45[0] = a3;
  outlined copy of SaveParkingLocation(a1, a2, a3);
  uint64_t v21 = String.init<A>(describing:)(&v44, a4);
  unint64_t v20 = v22;
LABEL_6:
  *(void *)&__int128 v44 = v15;
  *((void *)&v44 + 1) = v17;
  swift_bridgeObjectRetain(v17);
  v23._uint64_t countAndFlagsBits = 35LL;
  v23._object = (void *)0xE100000000000000LL;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v17);
  __int128 v24 = v44;
  swift_bridgeObjectRetain(v20);
  specialized Collection.first.getter(v21, v20);
  uint64_t v26 = v25;
  swift_bridgeObjectRelease(v20);
  if (v26)
  {
    Swift::String v27 = Character.uppercased()();
    uint64_t countAndFlagsBits = v27._countAndFlagsBits;
    object = v27._object;
    swift_bridgeObjectRelease(v26);
  }

  else
  {
    uint64_t countAndFlagsBits = 0LL;
    object = (void *)0xE000000000000000LL;
  }

  __int128 v44 = v24;
  swift_bridgeObjectRetain(*((void *)&v24 + 1));
  v30._uint64_t countAndFlagsBits = countAndFlagsBits;
  v30._object = object;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(*((void *)&v24 + 1));
  __int128 v31 = v44;
  unint64_t v32 = specialized Collection.dropFirst(_:)(1uLL, v21, v20);
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  swift_bridgeObjectRelease(v20);
  __int128 v41 = v31;
  *(void *)&__int128 v44 = v32;
  *((void *)&v44 + 1) = v34;
  v45[0] = v36;
  v45[1] = v38;
  unint64_t v39 = lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain(*((void *)&v31 + 1));
  String.append<A>(contentsOf:)(&v44, &type metadata for Substring, v39);
  swift_bridgeObjectRelease(*((void *)&v31 + 1));
  swift_bridgeObjectRelease(v38);
  return v41;
}

uint64_t specialized GeoCATModel.getID()(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v5 = v2;
  uint64_t v6 = a1(0LL);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v42 - v9;
  uint64_t v11 = type metadata accessor for Mirror(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v46 = v6;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v43 = String.init<A>(describing:)(&v46, v15);
  uint64_t v17 = v16;
  uint64_t v45 = v6;
  uint64_t v18 = __swift_allocate_boxed_opaque_existential_0(&v44);
  outlined init with copy of TrafficIncident(v5, (uint64_t)v18, a1);
  uint64_t v19 = Mirror.init(reflecting:)(&v44);
  unint64_t v20 = (void *)Mirror.children.getter(v19);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  specialized Collection.first.getter(v20, &v46);
  swift_release(v20);
  if (v47[3])
  {
    unint64_t v21 = *((void *)&v46 + 1);
    uint64_t v22 = v46;
    __swift_destroy_boxed_opaque_existential_0Tm(v47);
    outlined init with copy of TrafficIncident(v5, (uint64_t)v10, a1);
    if (v21) {
      goto LABEL_6;
    }
  }

  else
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v46,  &demangling cache variable for type metadata for (label: String?, value: Any)?);
    outlined init with copy of TrafficIncident(v5, (uint64_t)v10, a1);
  }

  outlined init with copy of TrafficIncident((uint64_t)v10, (uint64_t)v8, a1);
  uint64_t v22 = String.init<A>(describing:)(v8, v6);
  unint64_t v21 = v23;
LABEL_6:
  outlined destroy of ShareETA((uint64_t)v10, a1);
  *(void *)&__int128 v46 = v43;
  *((void *)&v46 + 1) = v17;
  swift_bridgeObjectRetain(v17);
  v24._uint64_t countAndFlagsBits = 35LL;
  v24._object = (void *)0xE100000000000000LL;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v17);
  __int128 v25 = v46;
  swift_bridgeObjectRetain(v21);
  specialized Collection.first.getter(v22, v21);
  uint64_t v27 = v26;
  swift_bridgeObjectRelease(v21);
  if (v27)
  {
    Swift::String v28 = Character.uppercased()();
    uint64_t countAndFlagsBits = v28._countAndFlagsBits;
    object = v28._object;
    swift_bridgeObjectRelease(v27);
  }

  else
  {
    uint64_t countAndFlagsBits = 0LL;
    object = (void *)0xE000000000000000LL;
  }

  __int128 v46 = v25;
  swift_bridgeObjectRetain(*((void *)&v25 + 1));
  v31._uint64_t countAndFlagsBits = countAndFlagsBits;
  v31._object = object;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(*((void *)&v25 + 1));
  __int128 v32 = v46;
  unint64_t v33 = specialized Collection.dropFirst(_:)(1uLL, v22, v21);
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  swift_bridgeObjectRelease(v21);
  __int128 v44 = v32;
  *(void *)&__int128 v46 = v33;
  *((void *)&v46 + 1) = v35;
  v47[0] = v37;
  v47[1] = v39;
  unint64_t v40 = lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain(*((void *)&v32 + 1));
  String.append<A>(contentsOf:)(&v46, &type metadata for Substring, v40);
  swift_bridgeObjectRelease(*((void *)&v32 + 1));
  swift_bridgeObjectRelease(v39);
  return v44;
}

uint64_t specialized GeoCATModel.getID()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v37 = &type metadata for LocationSearch;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocationSearch.Type);
  uint64_t v9 = String.init<A>(describing:)(&v37, v8);
  uint64_t v11 = v10;
  uint64_t v36 = &type metadata for LocationSearch;
  *(void *)&__int128 v35 = a1;
  *((void *)&v35 + 1) = a2;
  outlined copy of LocationSearch(a1, a2);
  uint64_t v12 = Mirror.init(reflecting:)(&v35);
  uint64_t v13 = (void *)Mirror.children.getter(v12);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  specialized Collection.first.getter(v13, &v37);
  swift_release(v13);
  if (v38[3])
  {
    unint64_t v14 = *((void *)&v37 + 1);
    uint64_t v15 = v37;
    __swift_destroy_boxed_opaque_existential_0Tm(v38);
    if (v14) {
      goto LABEL_6;
    }
  }

  else
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v37,  &demangling cache variable for type metadata for (label: String?, value: Any)?);
  }

  *(void *)&__int128 v37 = a1;
  *((void *)&v37 + 1) = a2;
  outlined copy of LocationSearch(a1, a2);
  uint64_t v15 = String.init<A>(describing:)(&v37, &type metadata for LocationSearch);
  unint64_t v14 = v16;
LABEL_6:
  *(void *)&__int128 v37 = v9;
  *((void *)&v37 + 1) = v11;
  swift_bridgeObjectRetain(v11);
  v17._uint64_t countAndFlagsBits = 35LL;
  v17._object = (void *)0xE100000000000000LL;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v11);
  __int128 v18 = v37;
  swift_bridgeObjectRetain(v14);
  specialized Collection.first.getter(v15, v14);
  uint64_t v20 = v19;
  swift_bridgeObjectRelease(v14);
  if (v20)
  {
    Swift::String v21 = Character.uppercased()();
    uint64_t countAndFlagsBits = v21._countAndFlagsBits;
    object = v21._object;
    swift_bridgeObjectRelease(v20);
  }

  else
  {
    uint64_t countAndFlagsBits = 0LL;
    object = (void *)0xE000000000000000LL;
  }

  __int128 v37 = v18;
  swift_bridgeObjectRetain(*((void *)&v18 + 1));
  v24._uint64_t countAndFlagsBits = countAndFlagsBits;
  v24._object = object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(*((void *)&v18 + 1));
  __int128 v25 = v37;
  unint64_t v26 = specialized Collection.dropFirst(_:)(1uLL, v15, v14);
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  swift_bridgeObjectRelease(v14);
  __int128 v35 = v25;
  *(void *)&__int128 v37 = v26;
  *((void *)&v37 + 1) = v28;
  v38[0] = v30;
  v38[1] = v32;
  unint64_t v33 = lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain(*((void *)&v25 + 1));
  String.append<A>(contentsOf:)(&v37, &type metadata for Substring, v33);
  swift_bridgeObjectRelease(*((void *)&v25 + 1));
  swift_bridgeObjectRelease(v32);
  return v35;
}

uint64_t specialized GeoCATModel.getID()(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v41 = a2;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v13 = String.init<A>(describing:)(&v41, v12);
  uint64_t v15 = v14;
  uint64_t v40 = a2;
  *(void *)&__int128 v39 = a1;
  a4(a1);
  uint64_t v16 = Mirror.init(reflecting:)(&v39);
  Swift::String v17 = (void *)Mirror.children.getter(v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  specialized Collection.first.getter(v17, &v41);
  swift_release(v17);
  if (v42[3])
  {
    unint64_t v18 = *((void *)&v41 + 1);
    uint64_t v19 = v41;
    __swift_destroy_boxed_opaque_existential_0Tm(v42);
    if (v18) {
      goto LABEL_6;
    }
  }

  else
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v41,  &demangling cache variable for type metadata for (label: String?, value: Any)?);
  }

  *(void *)&__int128 v41 = a1;
  a4(a1);
  uint64_t v19 = String.init<A>(describing:)(&v41, a2);
  unint64_t v18 = v20;
LABEL_6:
  *(void *)&__int128 v41 = v13;
  *((void *)&v41 + 1) = v15;
  swift_bridgeObjectRetain(v15);
  v21._uint64_t countAndFlagsBits = 35LL;
  v21._object = (void *)0xE100000000000000LL;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v15);
  __int128 v22 = v41;
  swift_bridgeObjectRetain(v18);
  specialized Collection.first.getter(v19, v18);
  uint64_t v24 = v23;
  swift_bridgeObjectRelease(v18);
  if (v24)
  {
    Swift::String v25 = Character.uppercased()();
    uint64_t countAndFlagsBits = v25._countAndFlagsBits;
    object = v25._object;
    swift_bridgeObjectRelease(v24);
  }

  else
  {
    uint64_t countAndFlagsBits = 0LL;
    object = (void *)0xE000000000000000LL;
  }

  __int128 v41 = v22;
  swift_bridgeObjectRetain(*((void *)&v22 + 1));
  v28._uint64_t countAndFlagsBits = countAndFlagsBits;
  v28._object = object;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(*((void *)&v22 + 1));
  __int128 v29 = v41;
  unint64_t v30 = specialized Collection.dropFirst(_:)(1uLL, v19, v18);
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  swift_bridgeObjectRelease(v18);
  __int128 v39 = v29;
  *(void *)&__int128 v41 = v30;
  *((void *)&v41 + 1) = v32;
  v42[0] = v34;
  v42[1] = v36;
  unint64_t v37 = lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain(*((void *)&v29 + 1));
  String.append<A>(contentsOf:)(&v41, &type metadata for Substring, v37);
  swift_bridgeObjectRelease(*((void *)&v29 + 1));
  swift_bridgeObjectRelease(v36);
  return v39;
}

uint64_t specialized GeoCATModel.getID()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Mirror(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v35 = &type metadata for Compass;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Compass.Type);
  uint64_t v7 = String.init<A>(describing:)(&v35, v6);
  uint64_t v9 = v8;
  uint64_t v34 = &type metadata for Compass;
  *(void *)&__int128 v33 = a1;
  swift_retain(a1);
  uint64_t v10 = Mirror.init(reflecting:)(&v33);
  uint64_t v11 = (void *)Mirror.children.getter(v10);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  specialized Collection.first.getter(v11, &v35);
  swift_release(v11);
  if (v36[3])
  {
    unint64_t v12 = *((void *)&v35 + 1);
    uint64_t v13 = v35;
    __swift_destroy_boxed_opaque_existential_0Tm(v36);
    if (v12) {
      goto LABEL_6;
    }
  }

  else
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v35,  &demangling cache variable for type metadata for (label: String?, value: Any)?);
  }

  *(void *)&__int128 v35 = a1;
  swift_retain(a1);
  uint64_t v13 = String.init<A>(describing:)(&v35, &type metadata for Compass);
  unint64_t v12 = v14;
LABEL_6:
  *(void *)&__int128 v35 = v7;
  *((void *)&v35 + 1) = v9;
  swift_bridgeObjectRetain(v9);
  v15._uint64_t countAndFlagsBits = 35LL;
  v15._object = (void *)0xE100000000000000LL;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v9);
  __int128 v16 = v35;
  swift_bridgeObjectRetain(v12);
  specialized Collection.first.getter(v13, v12);
  uint64_t v18 = v17;
  swift_bridgeObjectRelease(v12);
  if (v18)
  {
    Swift::String v19 = Character.uppercased()();
    uint64_t countAndFlagsBits = v19._countAndFlagsBits;
    object = v19._object;
    swift_bridgeObjectRelease(v18);
  }

  else
  {
    uint64_t countAndFlagsBits = 0LL;
    object = (void *)0xE000000000000000LL;
  }

  __int128 v35 = v16;
  swift_bridgeObjectRetain(*((void *)&v16 + 1));
  v22._uint64_t countAndFlagsBits = countAndFlagsBits;
  v22._object = object;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(*((void *)&v16 + 1));
  __int128 v23 = v35;
  unint64_t v24 = specialized Collection.dropFirst(_:)(1uLL, v13, v12);
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  swift_bridgeObjectRelease(v12);
  __int128 v33 = v23;
  *(void *)&__int128 v35 = v24;
  *((void *)&v35 + 1) = v26;
  v36[0] = v28;
  v36[1] = v30;
  unint64_t v31 = lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain(*((void *)&v23 + 1));
  String.append<A>(contentsOf:)(&v35, &type metadata for Substring, v31);
  swift_bridgeObjectRelease(*((void *)&v23 + 1));
  swift_bridgeObjectRelease(v30);
  return v33;
}

uint64_t specialized GeoCATModel.getID()(char a1)
{
  uint64_t v2 = type metadata accessor for Mirror(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v35 = &type metadata for LocationServices;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocationServices.Type);
  uint64_t v7 = String.init<A>(describing:)(&v35, v6);
  uint64_t v9 = v8;
  uint64_t v34 = &type metadata for LocationServices;
  LOBYTE(v33) = a1;
  uint64_t v10 = Mirror.init(reflecting:)(&v33);
  uint64_t v11 = (void *)Mirror.children.getter(v10);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  specialized Collection.first.getter(v11, &v35);
  swift_release(v11);
  if (v36[3])
  {
    unint64_t v12 = *((void *)&v35 + 1);
    uint64_t v13 = v35;
    __swift_destroy_boxed_opaque_existential_0Tm(v36);
    if (v12) {
      goto LABEL_6;
    }
  }

  else
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v35,  &demangling cache variable for type metadata for (label: String?, value: Any)?);
  }

  LOBYTE(v35) = a1;
  uint64_t v13 = String.init<A>(describing:)(&v35, &type metadata for LocationServices);
  unint64_t v12 = v14;
LABEL_6:
  *(void *)&__int128 v35 = v7;
  *((void *)&v35 + 1) = v9;
  swift_bridgeObjectRetain(v9);
  v15._uint64_t countAndFlagsBits = 35LL;
  v15._object = (void *)0xE100000000000000LL;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v9);
  __int128 v16 = v35;
  swift_bridgeObjectRetain(v12);
  specialized Collection.first.getter(v13, v12);
  uint64_t v18 = v17;
  swift_bridgeObjectRelease(v12);
  if (v18)
  {
    Swift::String v19 = Character.uppercased()();
    uint64_t countAndFlagsBits = v19._countAndFlagsBits;
    object = v19._object;
    swift_bridgeObjectRelease(v18);
  }

  else
  {
    uint64_t countAndFlagsBits = 0LL;
    object = (void *)0xE000000000000000LL;
  }

  __int128 v35 = v16;
  swift_bridgeObjectRetain(*((void *)&v16 + 1));
  v22._uint64_t countAndFlagsBits = countAndFlagsBits;
  v22._object = object;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(*((void *)&v16 + 1));
  __int128 v23 = v35;
  unint64_t v24 = specialized Collection.dropFirst(_:)(1uLL, v13, v12);
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  swift_bridgeObjectRelease(v12);
  __int128 v33 = v23;
  *(void *)&__int128 v35 = v24;
  *((void *)&v35 + 1) = v26;
  v36[0] = v28;
  v36[1] = v30;
  unint64_t v31 = lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain(*((void *)&v23 + 1));
  String.append<A>(contentsOf:)(&v35, &type metadata for Substring, v31);
  swift_bridgeObjectRelease(*((void *)&v23 + 1));
  swift_bridgeObjectRelease(v30);
  return v33;
}

Swift::String __swiftcall GeoCATModel.getID()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v43 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v43 - v6;
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v47 = swift_getDynamicType(v2, v3, 0LL);
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v3);
  uint64_t v44 = String.init<A>(describing:)(&v47, MetatypeMetadata);
  uint64_t v14 = v13;
  uint64_t v46 = v3;
  Swift::String v15 = (char *)__swift_allocate_boxed_opaque_existential_0(&v45);
  __int128 v16 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v16(v15, v2, v3);
  uint64_t v17 = Mirror.init(reflecting:)(&v45);
  uint64_t v18 = (void *)Mirror.children.getter(v17);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  specialized Collection.first.getter(v18, &v47);
  swift_release(v18);
  if (v48[3])
  {
    unint64_t v19 = *((void *)&v47 + 1);
    uint64_t v20 = v47;
    __swift_destroy_boxed_opaque_existential_0Tm(v48);
    v16(v7, v2, v3);
    if (v19) {
      goto LABEL_6;
    }
  }

  else
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v47,  &demangling cache variable for type metadata for (label: String?, value: Any)?);
    v16(v7, v2, v3);
  }

  Swift::String v21 = v43;
  v16(v43, (uint64_t)v7, v3);
  uint64_t v20 = String.init<A>(describing:)(v21, v3);
  unint64_t v19 = v22;
LABEL_6:
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  *(void *)&__int128 v47 = v44;
  *((void *)&v47 + 1) = v14;
  swift_bridgeObjectRetain(v14);
  v23._uint64_t countAndFlagsBits = 35LL;
  v23._object = (void *)0xE100000000000000LL;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v14);
  __int128 v24 = v47;
  swift_bridgeObjectRetain(v19);
  specialized Collection.first.getter(v20, v19);
  uint64_t v26 = v25;
  swift_bridgeObjectRelease(v19);
  if (v26)
  {
    Swift::String v27 = Character.uppercased()();
    uint64_t countAndFlagsBits = v27._countAndFlagsBits;
    object = v27._object;
    swift_bridgeObjectRelease(v26);
  }

  else
  {
    uint64_t countAndFlagsBits = 0LL;
    object = (void *)0xE000000000000000LL;
  }

  __int128 v47 = v24;
  swift_bridgeObjectRetain(*((void *)&v24 + 1));
  v30._uint64_t countAndFlagsBits = countAndFlagsBits;
  v30._object = object;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(*((void *)&v24 + 1));
  __int128 v31 = v47;
  unint64_t v32 = specialized Collection.dropFirst(_:)(1uLL, v20, v19);
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  swift_bridgeObjectRelease(v19);
  __int128 v45 = v31;
  *(void *)&__int128 v47 = v32;
  *((void *)&v47 + 1) = v34;
  v48[0] = v36;
  v48[1] = v38;
  unint64_t v39 = lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain(*((void *)&v31 + 1));
  String.append<A>(contentsOf:)(&v47, &type metadata for Substring, v39);
  swift_bridgeObjectRelease(*((void *)&v31 + 1));
  swift_bridgeObjectRelease(v38);
  __int128 v41 = (void *)*((void *)&v45 + 1);
  uint64_t v40 = v45;
  result._object = v41;
  result._uint64_t countAndFlagsBits = v40;
  return result;
}

uint64_t specialized Collection.first.getter@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t ObjectType = swift_getObjectType(v3);
  swift_unknownObjectRetain(v3);
  swift_unknownObjectRetain(v5);
  uint64_t v8 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v4);
  uint64_t v9 = swift_getObjectType(v5);
  uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter(v9, v6);
  if (v8 == result)
  {
    char v11 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v5, v6, ObjectType, v4);
    swift_unknownObjectRelease(v5);
    if ((v11 & 1) != 0)
    {
      uint64_t result = swift_unknownObjectRelease(v3);
      a2[1] = 0u;
      a2[2] = 0u;
      *a2 = 0u;
    }

    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter(v3, v4);
      return swift_unknownObjectRelease(v3);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t specialized Collection.first.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return String.subscript.getter(15LL, a1, a2);
  }
  else {
    return 0LL;
  }
}

void *__swift_allocate_boxed_opaque_existential_0(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t specialized GeoCATModel.getParams()(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = type metadata accessor for Mirror.DisplayStyle(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  v82 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
  __chkstk_darwin();
  char v11 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  __chkstk_darwin();
  uint64_t v85 = (uint64_t)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v75 - v13;
  __chkstk_darwin();
  __int128 v16 = (char *)&v75 - v15;
  uint64_t v17 = type metadata accessor for Mirror(0LL);
  v83 = *(void (***)(char *, void))(v17 - 8);
  uint64_t v84 = v17;
  __chkstk_darwin();
  v81 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  *((void *)&v105[0] + 1) = &type metadata for GeoLabel;
  *(void *)&__int128 v104 = a1;
  *((void *)&v104 + 1) = a2;
  LOBYTE(v105[0]) = a3;
  uint64_t v19 = a2;
  Swift::String v21 = (char *)&v75 - v20;
  outlined copy of GeoLabel(a1, v19, a3);
  uint64_t v22 = Mirror.init(reflecting:)(&v104);
  Mirror.displayStyle.getter(v22);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v14, enum case for Mirror.DisplayStyle.enum(_:), v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v14, 0LL, 1LL, v6);
  uint64_t v23 = (uint64_t)&v11[*(int *)(v9 + 48)];
  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v16,  (uint64_t)v11,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v14,  v23,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  __int128 v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v24((uint64_t)v11, 1LL, v6) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v14,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v16,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    if (v24(v23, 1LL, v6) == 1)
    {
      uint64_t v25 = outlined destroy of (label: String?, value: Any)?( (uint64_t)v11,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
      goto LABEL_8;
    }

LABEL_6:
    uint64_t v26 = &demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?);
    Swift::String v27 = (__int128 *)v11;
LABEL_45:
    outlined destroy of (label: String?, value: Any)?((uint64_t)v27, v26);
    goto LABEL_46;
  }

  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v11,  v85,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if (v24(v23, 1LL, v6) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v14,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v16,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v85, v6);
    goto LABEL_6;
  }

  uint64_t v28 = v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v82, v23, v6);
  char v29 = dispatch thunk of static Equatable.== infix(_:_:)(v85, v28, v6, &protocol witness table for Mirror.DisplayStyle);
  Swift::String v30 = *(void (**)(char *, uint64_t))(v7 + 8);
  v30(v28, v6);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v14,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v16,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v30((char *)v85, v6);
  uint64_t v25 = outlined destroy of (label: String?, value: Any)?( (uint64_t)v11,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if ((v29 & 1) == 0)
  {
LABEL_46:
    unint64_t v73 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
    v83[1](v21, v84);
    return v73;
  }

    Swift::String v27 = &demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?);
    uint64_t v28 = (__int128 *)v12;
LABEL_45:
    outlined destroy of (label: String?, value: Any)?((uint64_t)v28, v27);
    goto LABEL_46;
  }

  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v12,  v85,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if (v25(v24, 1LL, v7) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v15,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v17,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v85, v7);
    goto LABEL_6;
  }

  char v29 = v83;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v83, v24, v7);
  Swift::String v30 = v85;
  __int128 v31 = dispatch thunk of static Equatable.== infix(_:_:)(v85, v29, v7, &protocol witness table for Mirror.DisplayStyle);
  unint64_t v32 = *(void (**)(char *, uint64_t))(v8 + 8);
  v32(v29, v7);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v15,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v17,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v32((char *)v30, v7);
  uint64_t v26 = outlined destroy of (label: String?, value: Any)?( (uint64_t)v12,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if ((v31 & 1) == 0)
  {
LABEL_46:
    uint64_t v75 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v22, v87);
    return v75;
  }

    uint64_t v23 = &demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?);
    __int128 v24 = (__int128 *)v7;
LABEL_45:
    outlined destroy of (label: String?, value: Any)?((uint64_t)v24, v23);
    goto LABEL_46;
  }

  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v7,  (uint64_t)v9,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if (v21(v20, 1LL, v2) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v11,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v13,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
    goto LABEL_6;
  }

  uint64_t v25 = v79;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v79, v20, v2);
  uint64_t v26 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v25, v2, &protocol witness table for Mirror.DisplayStyle);
  Swift::String v27 = *(void (**)(char *, uint64_t))(v3 + 8);
  v27(v25, v2);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v11,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v13,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v27(v9, v2);
  uint64_t v22 = outlined destroy of (label: String?, value: Any)?( (uint64_t)v7,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if ((v26 & 1) == 0)
  {
LABEL_46:
    uint64_t v70 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v82, v81);
    return v70;
  }

    __int128 v24 = &demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?);
    uint64_t v25 = (__int128 *)v9;
LABEL_45:
    outlined destroy of (label: String?, value: Any)?((uint64_t)v25, v24);
    goto LABEL_46;
  }

  uint64_t v23 = v80;
  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v9,  v80,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if (v21(v20, 1LL, v4) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v12,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v14,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v23, v4);
    goto LABEL_6;
  }

  uint64_t v26 = v79;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v79, v20, v4);
  Swift::String v27 = dispatch thunk of static Equatable.== infix(_:_:)(v23, v26, v4, &protocol witness table for Mirror.DisplayStyle);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v5 + 8);
  v28(v26, v4);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v12,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v14,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v28((char *)v23, v4);
  uint64_t v22 = outlined destroy of (label: String?, value: Any)?( (uint64_t)v9,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if ((v27 & 1) == 0)
  {
LABEL_46:
    uint64_t v71 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v83, v82);
    return v71;
  }

    uint64_t v26 = &demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?);
    Swift::String v27 = (__int128 *)v11;
LABEL_45:
    outlined destroy of (label: String?, value: Any)?((uint64_t)v27, v26);
    goto LABEL_46;
  }

  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v11,  v85,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if (v24(v23, 1LL, v6) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v14,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v16,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v85, v6);
    goto LABEL_6;
  }

  uint64_t v28 = v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v82, v23, v6);
  char v29 = dispatch thunk of static Equatable.== infix(_:_:)(v85, v28, v6, &protocol witness table for Mirror.DisplayStyle);
  Swift::String v30 = *(void (**)(char *, uint64_t))(v7 + 8);
  v30(v28, v6);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v14,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v16,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v30((char *)v85, v6);
  uint64_t v25 = outlined destroy of (label: String?, value: Any)?( (uint64_t)v11,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if ((v29 & 1) == 0)
  {
LABEL_46:
    unint64_t v73 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
    v83[1](v21, v84);
    return v73;
  }

    uint64_t v22 = &demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?);
    uint64_t v23 = (__int128 *)v7;
LABEL_45:
    outlined destroy of (label: String?, value: Any)?((uint64_t)v23, v22);
    goto LABEL_46;
  }

  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v7,  (uint64_t)v9,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if (v20(v19, 1LL, v2) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v11,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v13,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
    goto LABEL_6;
  }

  __int128 v24 = v78;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v78, v19, v2);
  uint64_t v25 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v24, v2, &protocol witness table for Mirror.DisplayStyle);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v3 + 8);
  v26(v24, v2);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v11,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v13,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v26(v9, v2);
  Swift::String v21 = outlined destroy of (label: String?, value: Any)?( (uint64_t)v7,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if ((v25 & 1) == 0)
  {
LABEL_46:
    v69 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v81, v80);
    return v69;
  }

    uint64_t v22 = &demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?);
    uint64_t v23 = (__int128 *)v7;
LABEL_45:
    outlined destroy of (label: String?, value: Any)?((uint64_t)v23, v22);
    goto LABEL_46;
  }

  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v7,  (uint64_t)v9,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if (v20(v19, 1LL, v2) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v11,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v13,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
    goto LABEL_6;
  }

  __int128 v24 = v78;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v78, v19, v2);
  uint64_t v25 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v24, v2, &protocol witness table for Mirror.DisplayStyle);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v3 + 8);
  v26(v24, v2);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v11,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v13,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v26(v9, v2);
  Swift::String v21 = outlined destroy of (label: String?, value: Any)?( (uint64_t)v7,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if ((v25 & 1) == 0)
  {
LABEL_46:
    v69 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v81, v80);
    return v69;
  }

    uint64_t v23 = &demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?);
    __int128 v24 = (__int128 *)v7;
LABEL_45:
    outlined destroy of (label: String?, value: Any)?((uint64_t)v24, v23);
    goto LABEL_46;
  }

  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v7,  (uint64_t)v9,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if (v21(v20, 1LL, v2) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v11,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v13,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
    goto LABEL_6;
  }

  uint64_t v25 = v79;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v79, v20, v2);
  uint64_t v26 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v25, v2, &protocol witness table for Mirror.DisplayStyle);
  Swift::String v27 = *(void (**)(char *, uint64_t))(v3 + 8);
  v27(v25, v2);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v11,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v13,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v27(v9, v2);
  uint64_t v22 = outlined destroy of (label: String?, value: Any)?( (uint64_t)v7,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if ((v26 & 1) == 0)
  {
LABEL_46:
    uint64_t v70 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v82, v81);
    return v70;
  }

LABEL_8:
  __int128 v31 = (void *)Mirror.children.getter(v25);
  specialized Collection.first.getter(v31, &v101);
  swift_release(v31);
  if (!v103)
  {
    uint64_t v26 = &demangling cache variable for type metadata for (label: String?, value: Any)?;
    Swift::String v27 = &v101;
    goto LABEL_45;
  }

  v82 = v21;
  __int128 v104 = v101;
  outlined init with take of Any(&v102, v105);
  outlined init with copy of Any((uint64_t)v105, (uint64_t)&v102);
  unint64_t v32 = v81;
  uint64_t v33 = Mirror.init(reflecting:)(&v102);
  uint64_t v34 = Mirror.children.getter(v33);
  uint64_t v35 = v83[1];
  v35(v32, v84);
  uint64_t v36 = swift_retain(v34);
  uint64_t v37 = dispatch thunk of _AnySequenceBox._makeIterator()(v36);
  v81 = (char *)v34;
  swift_release(v34);
  uint64_t v38 = swift_retain(v37);
  dispatch thunk of _AnyIteratorBoxBase.next()(&v101, v38);
  if (!v103)
  {
    v83 = (void (**)(char *, void))&_swiftEmptyDictionarySingleton;
LABEL_48:
    swift_release_n(v37, 2LL);
    swift_release(v81);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v104,  &demangling cache variable for type metadata for (label: String?, value: Any));
    v35(v82, v84);
    return (uint64_t)v83;
  }

  v83 = (void (**)(char *, void))&_swiftEmptyDictionarySingleton;
  v77 = &v89;
  uint64_t v85 = (uint64_t)"ip";
  v78 = (char *)&type metadata for Any + 8;
  v79 = &v96;
  v80 = v35;
  while (1)
  {
    while (1)
    {
      __int128 v40 = v101;
      __int128 v99 = v101;
      outlined init with take of Any(&v102, v100);
      __int128 v97 = v40;
      outlined init with copy of Any((uint64_t)v100, (uint64_t)&v98);
      if (*((void *)&v40 + 1)) {
        break;
      }
      outlined destroy of (label: String?, value: Any)?( (uint64_t)&v97,  &demangling cache variable for type metadata for (label: String?, value: Any));
LABEL_12:
      uint64_t v39 = outlined destroy of (label: String?, value: Any)?( (uint64_t)&v99,  &demangling cache variable for type metadata for (label: String?, value: Any));
      dispatch thunk of _AnyIteratorBoxBase.next()(&v101, v39);
      if (!v103)
      {
        uint64_t v35 = v80;
        goto LABEL_48;
      }
    }

    if (v40 == __PAIR128__(0x800000000009B8A0LL, 0xD000000000000016LL))
    {
      swift_bridgeObjectRetain_n(*((void *)&v40 + 1), 2LL);
      outlined destroy of (label: String?, value: Any)?( (uint64_t)&v97,  &demangling cache variable for type metadata for (label: String?, value: Any));
LABEL_17:
      swift_bridgeObjectRelease(*((void *)&v40 + 1));
      goto LABEL_12;
    }

    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)( v40,  *((void *)&v40 + 1),  0xD000000000000016LL,  v85 | 0x8000000000000000LL,  0LL);
    swift_bridgeObjectRetain_n(*((void *)&v40 + 1), 2LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v97,  &demangling cache variable for type metadata for (label: String?, value: Any));
    if ((v41 & 1) != 0) {
      goto LABEL_17;
    }
    __int128 v95 = v40;
    uint64_t v42 = v79;
    outlined init with copy of Any((uint64_t)v100, (uint64_t)v79);
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CATType);
    if ((swift_dynamicCast(&v92, v42, v78, v43, 6LL) & 1) == 0) {
      break;
    }
    outlined init with take of CATType(&v92, (uint64_t)&v88);
    __int128 v95 = v40;
    outlined init with copy of Any((uint64_t)v100, (uint64_t)v42);
    uint64_t v75 = v90;
    unint64_t v76 = v91;
    __swift_project_boxed_opaque_existential_1(&v88, v90);
    uint64_t v44 = dispatch thunk of CATType.toDictionary.getter(v75, v76);
    *((void *)&v93 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(void *)&__int128 v92 = v44;
    outlined init with take of Any(&v92, v87);
    __int128 v45 = v83;
    LODWORD(v76) = swift_isUniquelyReferenced_nonNull_native(v83);
    v86 = v45;
    unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v40, *((uint64_t *)&v40 + 1));
    v48 = v45[2];
    BOOL v49 = (v46 & 1) == 0;
    uint64_t v50 = (uint64_t)v48 + v49;
    if (__OFADD__(v48, v49)) {
      goto LABEL_51;
    }
    if ((uint64_t)v45[3] >= v50)
    {
      if ((v76 & 1) == 0)
      {
        unint64_t v76 = v47;
        LODWORD(v83) = v46;
        specialized _NativeDictionary.copy()();
        LOBYTE(v46) = (_BYTE)v83;
        unint64_t v47 = v76;
      }
    }

    else
    {
      LODWORD(v83) = v46;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v50, v76);
      unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v40, *((uint64_t *)&v40 + 1));
      int v52 = v46 & 1;
      LOBYTE(v46) = (_BYTE)v83;
      unint64_t v47 = v51;
    }

    v62 = v86;
    v83 = (void (**)(char *, void))v86;
    if ((v46 & 1) != 0)
    {
      v63 = (void *)(v86[7] + 32 * v47);
      __swift_destroy_boxed_opaque_existential_0Tm(v63);
      outlined init with take of Any(v87, v63);
    }

    else
    {
      v86[(v47 >> 6) + 8] |= 1LL << v47;
      *(_OWORD *)(v62[6] + 16 * v47) = v40;
      outlined init with take of Any(v87, (_OWORD *)(v62[7] + 32 * v47));
      uint64_t v66 = v62[2];
      BOOL v67 = __OFADD__(v66, 1LL);
      uint64_t v68 = v66 + 1;
      if (v67) {
        goto LABEL_52;
      }
      v62[2] = v68;
      swift_bridgeObjectRetain(*((void *)&v40 + 1));
    }

    uint64_t v35 = v80;
    swift_bridgeObjectRelease(*((void *)&v40 + 1));
    swift_bridgeObjectRelease(0x8000000000000000LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v99,  &demangling cache variable for type metadata for (label: String?, value: Any));
    __swift_destroy_boxed_opaque_existential_0Tm(v79);
    v69 = &v88;
LABEL_41:
    uint64_t v72 = __swift_destroy_boxed_opaque_existential_0Tm(v69);
    dispatch thunk of _AnyIteratorBoxBase.next()(&v101, v72);
    if (!v103) {
      goto LABEL_48;
    }
  }

  uint64_t v94 = 0LL;
  __int128 v92 = 0u;
  __int128 v93 = 0u;
  outlined destroy of (label: String?, value: Any)?( (uint64_t)&v92,  &demangling cache variable for type metadata for CATType?);
  __int128 v95 = v40;
  outlined init with copy of Any((uint64_t)v100, (uint64_t)v42);
  __int128 v88 = v40;
  v53 = v77;
  outlined init with copy of Any((uint64_t)v100, (uint64_t)v77);
  outlined init with take of Any(v53, &v92);
  v54 = v83;
  LODWORD(v76) = swift_isUniquelyReferenced_nonNull_native(v83);
  *(void *)&v87[0] = v54;
  unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v40, *((uint64_t *)&v40 + 1));
  v57 = v54[2];
  BOOL v58 = (v55 & 1) == 0;
  uint64_t v59 = (uint64_t)v57 + v58;
  if (!__OFADD__(v57, v58))
  {
    if ((uint64_t)v54[3] >= v59)
    {
      if ((v76 & 1) == 0)
      {
        unint64_t v76 = v56;
        LODWORD(v83) = v55;
        specialized _NativeDictionary.copy()();
        LOBYTE(v55) = (_BYTE)v83;
        unint64_t v56 = v76;
      }
    }

    else
    {
      LODWORD(v83) = v55;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v59, v76);
      unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(v40, *((uint64_t *)&v40 + 1));
      int v61 = v55 & 1;
      LOBYTE(v55) = (_BYTE)v83;
      unint64_t v56 = v60;
    }

    v64 = *(void **)&v87[0];
    v83 = *(void (***)(char *, void))&v87[0];
    if ((v55 & 1) != 0)
    {
      v65 = (void *)(*(void *)(*(void *)&v87[0] + 56LL) + 32 * v56);
      __swift_destroy_boxed_opaque_existential_0Tm(v65);
      outlined init with take of Any(&v92, v65);
    }

    else
    {
      *(void *)(*(void *)&v87[0] + 8 * (v56 >> 6) + 64) |= 1LL << v56;
      *(_OWORD *)(v64[6] + 16 * v56) = v40;
      outlined init with take of Any(&v92, (_OWORD *)(v64[7] + 32 * v56));
      uint64_t v70 = v64[2];
      BOOL v67 = __OFADD__(v70, 1LL);
      uint64_t v71 = v70 + 1;
      if (v67) {
        goto LABEL_53;
      }
      v64[2] = v71;
      swift_bridgeObjectRetain(*((void *)&v40 + 1));
    }

    uint64_t v35 = v80;
    swift_bridgeObjectRelease(*((void *)&v40 + 1));
    swift_bridgeObjectRelease(0x8000000000000000LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v99,  &demangling cache variable for type metadata for (label: String?, value: Any));
    v69 = (__int128 *)v79;
    goto LABEL_41;
  }

  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  uint64_t v33 = (void *)Mirror.children.getter(v26);
  specialized Collection.first.getter(v33, &v103);
  swift_release(v33);
  if (!v105)
  {
    Swift::String v27 = &demangling cache variable for type metadata for (label: String?, value: Any)?;
    uint64_t v28 = &v103;
    goto LABEL_45;
  }

  uint64_t v84 = v22;
  v106 = v103;
  outlined init with take of Any(&v104, v107);
  outlined init with copy of Any((uint64_t)v107, (uint64_t)&v104);
  uint64_t v34 = v82;
  uint64_t v35 = Mirror.init(reflecting:)(&v104);
  uint64_t v36 = Mirror.children.getter(v35);
  uint64_t v37 = *(void (**)(uint64_t *, uint64_t))(v86 + 8);
  v37(v34, v87);
  uint64_t v38 = swift_retain(v36);
  uint64_t v39 = dispatch thunk of _AnySequenceBox._makeIterator()(v38);
  v83 = (char *)v36;
  swift_release(v36);
  __int128 v40 = swift_retain(v39);
  dispatch thunk of _AnyIteratorBoxBase.next()(&v103, v40);
  if (!v105)
  {
    uint64_t v85 = (uint64_t)&_swiftEmptyDictionarySingleton;
LABEL_48:
    swift_release_n(v39, 2LL);
    swift_release(v83);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v106,  &demangling cache variable for type metadata for (label: String?, value: Any));
    v37((uint64_t *)v84, v87);
    return v85;
  }

  v79 = &v91;
  uint64_t v85 = (uint64_t)&_swiftEmptyDictionarySingleton;
  v86 = (unint64_t)"ip";
  v80 = (char *)&type metadata for Any + 8;
  v81 = v37;
  v82 = &v98;
  while (1)
  {
    while (1)
    {
      uint64_t v42 = v103;
      __int128 v101 = v103;
      outlined init with take of Any(&v104, v102);
      __int128 v99 = v42;
      outlined init with copy of Any((uint64_t)v102, (uint64_t)&v100);
      if (*((void *)&v42 + 1)) {
        break;
      }
LABEL_11:
      outlined destroy of (label: String?, value: Any)?( (uint64_t)&v99,  &demangling cache variable for type metadata for (label: String?, value: Any));
LABEL_12:
      char v41 = outlined destroy of (label: String?, value: Any)?( (uint64_t)&v101,  &demangling cache variable for type metadata for (label: String?, value: Any));
      dispatch thunk of _AnyIteratorBoxBase.next()(&v103, v41);
      if (!v105)
      {
        uint64_t v37 = v81;
        goto LABEL_48;
      }
    }

    if (v42 == __PAIR128__(0x800000000009B8A0LL, 0xD000000000000016LL))
    {
      swift_bridgeObjectRetain(*((void *)&v42 + 1));
      goto LABEL_11;
    }

    uint64_t v43 = _stringCompareWithSmolCheck(_:_:expecting:)( v42,  *((void *)&v42 + 1),  0xD000000000000016LL,  v86 | 0x8000000000000000LL,  0LL);
    swift_bridgeObjectRetain_n(*((void *)&v42 + 1), 2LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v99,  &demangling cache variable for type metadata for (label: String?, value: Any));
    if ((v43 & 1) != 0)
    {
      swift_bridgeObjectRelease(*((void *)&v42 + 1));
      goto LABEL_12;
    }

    __int128 v97 = v42;
    uint64_t v44 = v82;
    outlined init with copy of Any((uint64_t)v102, (uint64_t)v82);
    __int128 v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CATType);
    outlined init with take of CATType(&v94, (uint64_t)&v90);
    __int128 v97 = v42;
    outlined init with copy of Any((uint64_t)v102, (uint64_t)v44);
    v77 = v92;
    v78 = v93;
    __swift_project_boxed_opaque_existential_1(&v90, v92);
    int v46 = dispatch thunk of CATType.toDictionary.getter(v77, v78);
    *((void *)&v95 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(void *)&uint64_t v94 = v46;
    outlined init with take of Any(&v94, v89);
    unint64_t v47 = v85;
    LODWORD(v78) = swift_isUniquelyReferenced_nonNull_native(v85);
    __int128 v88 = v47;
    BOOL v49 = specialized __RawDictionaryStorage.find<A>(_:)(v42, *((uint64_t *)&v42 + 1));
    uint64_t v50 = *(void *)(v47 + 16);
    unint64_t v51 = (v48 & 1) == 0;
    int v52 = v50 + v51;
    if (__OFADD__(v50, v51)) {
      goto LABEL_51;
    }
    if (*(void *)(v47 + 24) >= v52)
    {
      if ((v78 & 1) == 0)
      {
        v78 = v49;
        LODWORD(v85) = v48;
        specialized _NativeDictionary.copy()();
        LOBYTE(v48) = v85;
        BOOL v49 = v78;
      }
    }

    else
    {
      LODWORD(v85) = v48;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v52, v78);
      v53 = specialized __RawDictionaryStorage.find<A>(_:)(v42, *((uint64_t *)&v42 + 1));
      v54 = v48 & 1;
      LOBYTE(v48) = v85;
      if ((v85 & 1) != v54) {
        goto LABEL_54;
      }
      BOOL v49 = v53;
    }

    v64 = (void *)v88;
    uint64_t v85 = v88;
    if ((v48 & 1) != 0)
    {
      v65 = (void *)(*(void *)(v88 + 56) + 32 * v49);
      __swift_destroy_boxed_opaque_existential_0Tm(v65);
      outlined init with take of Any(v89, v65);
    }

    else
    {
      *(void *)(v88 + 8 * (v49 >> 6) + 64) |= 1LL << v49;
      *(_OWORD *)(v64[6] + 16 * v49) = v42;
      outlined init with take of Any(v89, (_OWORD *)(v64[7] + 32 * v49));
      uint64_t v68 = v64[2];
      v69 = __OFADD__(v68, 1LL);
      uint64_t v70 = v68 + 1;
      if (v69) {
        goto LABEL_52;
      }
      v64[2] = v70;
      swift_bridgeObjectRetain(*((void *)&v42 + 1));
    }

    uint64_t v37 = v81;
    swift_bridgeObjectRelease(*((void *)&v42 + 1));
    swift_bridgeObjectRelease(0x8000000000000000LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v101,  &demangling cache variable for type metadata for (label: String?, value: Any));
    __swift_destroy_boxed_opaque_existential_0Tm(v82);
    uint64_t v71 = &v90;
LABEL_41:
    v74 = __swift_destroy_boxed_opaque_existential_0Tm(v71);
    dispatch thunk of _AnyIteratorBoxBase.next()(&v103, v74);
    if (!v105) {
      goto LABEL_48;
    }
  }

  uint64_t v96 = 0LL;
  uint64_t v94 = 0u;
  __int128 v95 = 0u;
  outlined destroy of (label: String?, value: Any)?( (uint64_t)&v94,  &demangling cache variable for type metadata for CATType?);
  __int128 v97 = v42;
  outlined init with copy of Any((uint64_t)v102, (uint64_t)v44);
  uint64_t v90 = v42;
  int v55 = v79;
  outlined init with copy of Any((uint64_t)v102, (uint64_t)v79);
  outlined init with take of Any(v55, &v94);
  unint64_t v56 = v85;
  LODWORD(v78) = swift_isUniquelyReferenced_nonNull_native(v85);
  *(void *)&v89[0] = v56;
  BOOL v58 = specialized __RawDictionaryStorage.find<A>(_:)(v42, *((uint64_t *)&v42 + 1));
  uint64_t v59 = *(void *)(v56 + 16);
  unint64_t v60 = (v57 & 1) == 0;
  int v61 = v59 + v60;
  if (!__OFADD__(v59, v60))
  {
    if (*(void *)(v56 + 24) >= v61)
    {
      if ((v78 & 1) == 0)
      {
        v78 = v58;
        LODWORD(v85) = v57;
        specialized _NativeDictionary.copy()();
        LOBYTE(v57) = v85;
        BOOL v58 = v78;
      }
    }

    else
    {
      LODWORD(v85) = v57;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v61, v78);
      v62 = specialized __RawDictionaryStorage.find<A>(_:)(v42, *((uint64_t *)&v42 + 1));
      v63 = v57 & 1;
      LOBYTE(v57) = v85;
      if ((v85 & 1) != v63) {
        goto LABEL_54;
      }
      BOOL v58 = v62;
    }

    uint64_t v66 = *(void **)&v89[0];
    uint64_t v85 = *(void *)&v89[0];
    if ((v57 & 1) != 0)
    {
      BOOL v67 = (void *)(*(void *)(*(void *)&v89[0] + 56LL) + 32 * v58);
      __swift_destroy_boxed_opaque_existential_0Tm(v67);
      outlined init with take of Any(&v94, v67);
    }

    else
    {
      *(void *)(*(void *)&v89[0] + 8 * (v58 >> 6) + 64) |= 1LL << v58;
      *(_OWORD *)(v66[6] + 16 * v58) = v42;
      outlined init with take of Any(&v94, (_OWORD *)(v66[7] + 32 * v58));
      uint64_t v72 = v66[2];
      v69 = __OFADD__(v72, 1LL);
      unint64_t v73 = v72 + 1;
      if (v69) {
        goto LABEL_53;
      }
      v66[2] = v73;
      swift_bridgeObjectRetain(*((void *)&v42 + 1));
    }

    uint64_t v37 = v81;
    swift_bridgeObjectRelease(*((void *)&v42 + 1));
    swift_bridgeObjectRelease(0x8000000000000000LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v101,  &demangling cache variable for type metadata for (label: String?, value: Any));
    uint64_t v71 = (__int128 *)v82;
    goto LABEL_41;
  }

  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  uint64_t v28 = (void *)Mirror.children.getter(v22);
  specialized Collection.first.getter(v28, &v98);
  swift_release(v28);
  if (!v100)
  {
    uint64_t v23 = &demangling cache variable for type metadata for (label: String?, value: Any)?;
    __int128 v24 = &v98;
    goto LABEL_45;
  }

  __int128 v101 = v98;
  outlined init with take of Any(&v99, v102);
  outlined init with copy of Any((uint64_t)v102, (uint64_t)&v99);
  char v29 = v78;
  Swift::String v30 = Mirror.init(reflecting:)(&v99);
  __int128 v31 = Mirror.children.getter(v30);
  unint64_t v32 = *(void (**)(char *, uint64_t))(v80 + 8);
  v32(v29, v81);
  uint64_t v33 = swift_retain(v31);
  uint64_t v34 = dispatch thunk of _AnySequenceBox._makeIterator()(v33);
  v78 = (char *)v31;
  swift_release(v31);
  uint64_t v35 = swift_retain(v34);
  dispatch thunk of _AnyIteratorBoxBase.next()(&v98, v35);
  if (!v100)
  {
    v79 = (char *)&_swiftEmptyDictionarySingleton;
LABEL_48:
    swift_release_n(v34, 2LL);
    swift_release(v78);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v101,  &demangling cache variable for type metadata for (label: String?, value: Any));
    v32(v82, v81);
    return (uint64_t)v79;
  }

  v74 = &v86;
  v79 = (char *)&_swiftEmptyDictionarySingleton;
  v80 = (unint64_t)"ip";
  uint64_t v75 = (char *)&type metadata for Any + 8;
  unint64_t v76 = &v93;
  v77 = v32;
  while (1)
  {
    while (1)
    {
      uint64_t v37 = v98;
      uint64_t v96 = v98;
      outlined init with take of Any(&v99, v97);
      uint64_t v94 = v37;
      outlined init with copy of Any((uint64_t)v97, (uint64_t)&v95);
      if (*((void *)&v37 + 1)) {
        break;
      }
LABEL_11:
      outlined destroy of (label: String?, value: Any)?( (uint64_t)&v94,  &demangling cache variable for type metadata for (label: String?, value: Any));
LABEL_12:
      uint64_t v36 = outlined destroy of (label: String?, value: Any)?( (uint64_t)&v96,  &demangling cache variable for type metadata for (label: String?, value: Any));
      dispatch thunk of _AnyIteratorBoxBase.next()(&v98, v36);
      if (!v100)
      {
        unint64_t v32 = v77;
        goto LABEL_48;
      }
    }

    if (v37 == __PAIR128__(0x800000000009B8A0LL, 0xD000000000000016LL))
    {
      swift_bridgeObjectRetain(*((void *)&v37 + 1));
      goto LABEL_11;
    }

    uint64_t v38 = _stringCompareWithSmolCheck(_:_:expecting:)( v37,  *((void *)&v37 + 1),  0xD000000000000016LL,  v80 | 0x8000000000000000LL,  0LL);
    swift_bridgeObjectRetain_n(*((void *)&v37 + 1), 2LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v94,  &demangling cache variable for type metadata for (label: String?, value: Any));
    if ((v38 & 1) != 0)
    {
      swift_bridgeObjectRelease(*((void *)&v37 + 1));
      goto LABEL_12;
    }

    __int128 v92 = v37;
    uint64_t v39 = v76;
    outlined init with copy of Any((uint64_t)v97, (uint64_t)v76);
    __int128 v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CATType);
    outlined init with take of CATType(&v89, (uint64_t)&v85);
    __int128 v92 = v37;
    outlined init with copy of Any((uint64_t)v97, (uint64_t)v39);
    uint64_t v72 = v87;
    unint64_t v73 = v88;
    __swift_project_boxed_opaque_existential_1(&v85, v87);
    char v41 = dispatch thunk of CATType.toDictionary.getter(v72, v73);
    *((void *)&v90 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(void *)&uint64_t v89 = v41;
    outlined init with take of Any(&v89, v84);
    uint64_t v42 = v79;
    LODWORD(v73) = swift_isUniquelyReferenced_nonNull_native(v79);
    v83 = v42;
    uint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
    __int128 v45 = *((void *)v42 + 2);
    int v46 = (v43 & 1) == 0;
    unint64_t v47 = v45 + v46;
    if (__OFADD__(v45, v46)) {
      goto LABEL_51;
    }
    if (*((void *)v42 + 3) >= v47)
    {
      if ((v73 & 1) == 0)
      {
        unint64_t v73 = v44;
        LODWORD(v79) = v43;
        specialized _NativeDictionary.copy()();
        LOBYTE(v43) = (_BYTE)v79;
        uint64_t v44 = v73;
      }
    }

    else
    {
      LODWORD(v79) = v43;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, v73);
      v48 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
      BOOL v49 = v43 & 1;
      LOBYTE(v43) = (_BYTE)v79;
      uint64_t v44 = v48;
    }

    uint64_t v59 = v83;
    v79 = v83;
    if ((v43 & 1) != 0)
    {
      unint64_t v60 = (void *)(*((void *)v83 + 7) + 32 * v44);
      __swift_destroy_boxed_opaque_existential_0Tm(v60);
      outlined init with take of Any(v84, v60);
    }

    else
    {
      *(void *)&v83[8 * (v44 >> 6) + 64] |= 1LL << v44;
      *(_OWORD *)(*((void *)v59 + 6) + 16 * v44) = v37;
      outlined init with take of Any(v84, (_OWORD *)(*((void *)v59 + 7) + 32 * v44));
      v63 = *((void *)v59 + 2);
      v64 = __OFADD__(v63, 1LL);
      v65 = v63 + 1;
      if (v64) {
        goto LABEL_52;
      }
      *((void *)v59 + 2) = v65;
      swift_bridgeObjectRetain(*((void *)&v37 + 1));
    }

    unint64_t v32 = v77;
    swift_bridgeObjectRelease(*((void *)&v37 + 1));
    swift_bridgeObjectRelease(0x8000000000000000LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v96,  &demangling cache variable for type metadata for (label: String?, value: Any));
    __swift_destroy_boxed_opaque_existential_0Tm(v76);
    uint64_t v66 = &v85;
LABEL_41:
    v69 = __swift_destroy_boxed_opaque_existential_0Tm(v66);
    dispatch thunk of _AnyIteratorBoxBase.next()(&v98, v69);
    if (!v100) {
      goto LABEL_48;
    }
  }

  unint64_t v91 = 0LL;
  uint64_t v89 = 0u;
  uint64_t v90 = 0u;
  outlined destroy of (label: String?, value: Any)?( (uint64_t)&v89,  &demangling cache variable for type metadata for CATType?);
  __int128 v92 = v37;
  outlined init with copy of Any((uint64_t)v97, (uint64_t)v39);
  uint64_t v85 = v37;
  uint64_t v50 = v74;
  outlined init with copy of Any((uint64_t)v97, (uint64_t)v74);
  outlined init with take of Any(v50, &v89);
  unint64_t v51 = v79;
  LODWORD(v73) = swift_isUniquelyReferenced_nonNull_native(v79);
  *(void *)&v84[0] = v51;
  v53 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
  v54 = *((void *)v51 + 2);
  int v55 = (v52 & 1) == 0;
  unint64_t v56 = v54 + v55;
  if (!__OFADD__(v54, v55))
  {
    if (*((void *)v51 + 3) >= v56)
    {
      if ((v73 & 1) == 0)
      {
        unint64_t v73 = v53;
        LODWORD(v79) = v52;
        specialized _NativeDictionary.copy()();
        LOBYTE(v52) = (_BYTE)v79;
        v53 = v73;
      }
    }

    else
    {
      LODWORD(v79) = v52;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v56, v73);
      v57 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
      BOOL v58 = v52 & 1;
      LOBYTE(v52) = (_BYTE)v79;
      v53 = v57;
    }

    int v61 = *(void **)&v84[0];
    v79 = *(char **)&v84[0];
    if ((v52 & 1) != 0)
    {
      v62 = (void *)(*(void *)(*(void *)&v84[0] + 56LL) + 32 * v53);
      __swift_destroy_boxed_opaque_existential_0Tm(v62);
      outlined init with take of Any(&v89, v62);
    }

    else
    {
      *(void *)(*(void *)&v84[0] + 8 * (v53 >> 6) + 64) |= 1LL << v53;
      *(_OWORD *)(v61[6] + 16 * v53) = v37;
      outlined init with take of Any(&v89, (_OWORD *)(v61[7] + 32 * v53));
      BOOL v67 = v61[2];
      v64 = __OFADD__(v67, 1LL);
      uint64_t v68 = v67 + 1;
      if (v64) {
        goto LABEL_53;
      }
      v61[2] = v68;
      swift_bridgeObjectRetain(*((void *)&v37 + 1));
    }

    unint64_t v32 = v77;
    swift_bridgeObjectRelease(*((void *)&v37 + 1));
    swift_bridgeObjectRelease(0x8000000000000000LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v96,  &demangling cache variable for type metadata for (label: String?, value: Any));
    uint64_t v66 = (__int128 *)v76;
    goto LABEL_41;
  }

  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  char v29 = (void *)Mirror.children.getter(v22);
  specialized Collection.first.getter(v29, &v99);
  swift_release(v29);
  if (!v101)
  {
    __int128 v24 = &demangling cache variable for type metadata for (label: String?, value: Any)?;
    uint64_t v25 = &v99;
    goto LABEL_45;
  }

  __int128 v102 = v99;
  outlined init with take of Any(&v100, v103);
  outlined init with copy of Any((uint64_t)v103, (uint64_t)&v100);
  Swift::String v30 = v78;
  __int128 v31 = Mirror.init(reflecting:)(&v100);
  unint64_t v32 = Mirror.children.getter(v31);
  uint64_t v33 = *(void (**)(uint64_t *, uint64_t))(v81 + 8);
  v33(v30, v82);
  uint64_t v34 = swift_retain(v32);
  uint64_t v35 = dispatch thunk of _AnySequenceBox._makeIterator()(v34);
  v79 = (char *)v32;
  swift_release(v32);
  uint64_t v36 = swift_retain(v35);
  dispatch thunk of _AnyIteratorBoxBase.next()(&v99, v36);
  if (!v101)
  {
    v80 = (uint64_t)&_swiftEmptyDictionarySingleton;
LABEL_48:
    swift_release_n(v35, 2LL);
    swift_release(v79);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v102,  &demangling cache variable for type metadata for (label: String?, value: Any));
    v33((uint64_t *)v83, v82);
    return v80;
  }

  uint64_t v75 = &v87;
  v80 = (uint64_t)&_swiftEmptyDictionarySingleton;
  v81 = (unint64_t)"ip";
  unint64_t v76 = (char *)&type metadata for Any + 8;
  v77 = v33;
  v78 = &v94;
  while (1)
  {
    while (1)
    {
      uint64_t v38 = v99;
      __int128 v97 = v99;
      outlined init with take of Any(&v100, v98);
      __int128 v95 = v38;
      outlined init with copy of Any((uint64_t)v98, (uint64_t)&v96);
      if (*((void *)&v38 + 1)) {
        break;
      }
LABEL_11:
      outlined destroy of (label: String?, value: Any)?( (uint64_t)&v95,  &demangling cache variable for type metadata for (label: String?, value: Any));
LABEL_12:
      uint64_t v37 = outlined destroy of (label: String?, value: Any)?( (uint64_t)&v97,  &demangling cache variable for type metadata for (label: String?, value: Any));
      dispatch thunk of _AnyIteratorBoxBase.next()(&v99, v37);
      if (!v101)
      {
        uint64_t v33 = v77;
        goto LABEL_48;
      }
    }

    if (v38 == __PAIR128__(0x800000000009B8A0LL, 0xD000000000000016LL))
    {
      swift_bridgeObjectRetain(*((void *)&v38 + 1));
      goto LABEL_11;
    }

    uint64_t v39 = _stringCompareWithSmolCheck(_:_:expecting:)( v38,  *((void *)&v38 + 1),  0xD000000000000016LL,  v81 | 0x8000000000000000LL,  0LL);
    swift_bridgeObjectRetain_n(*((void *)&v38 + 1), 2LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v95,  &demangling cache variable for type metadata for (label: String?, value: Any));
    if ((v39 & 1) != 0)
    {
      swift_bridgeObjectRelease(*((void *)&v38 + 1));
      goto LABEL_12;
    }

    __int128 v93 = v38;
    __int128 v40 = v78;
    outlined init with copy of Any((uint64_t)v98, (uint64_t)v78);
    char v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CATType);
    outlined init with take of CATType(&v90, (uint64_t)&v86);
    __int128 v93 = v38;
    outlined init with copy of Any((uint64_t)v98, (uint64_t)v40);
    unint64_t v73 = v88;
    v74 = v89;
    __swift_project_boxed_opaque_existential_1(&v86, v88);
    uint64_t v42 = dispatch thunk of CATType.toDictionary.getter(v73, v74);
    *((void *)&v91 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(void *)&uint64_t v90 = v42;
    outlined init with take of Any(&v90, v85);
    uint64_t v43 = v80;
    LODWORD(v74) = swift_isUniquelyReferenced_nonNull_native(v80);
    uint64_t v84 = v43;
    __int128 v45 = specialized __RawDictionaryStorage.find<A>(_:)(v38, *((uint64_t *)&v38 + 1));
    int v46 = *(void *)(v43 + 16);
    unint64_t v47 = (v44 & 1) == 0;
    v48 = v46 + v47;
    if (__OFADD__(v46, v47)) {
      goto LABEL_51;
    }
    if (*(void *)(v43 + 24) >= v48)
    {
      if ((v74 & 1) == 0)
      {
        v74 = v45;
        LODWORD(v80) = v44;
        specialized _NativeDictionary.copy()();
        LOBYTE(v44) = v80;
        __int128 v45 = v74;
      }
    }

    else
    {
      LODWORD(v80) = v44;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v48, v74);
      BOOL v49 = specialized __RawDictionaryStorage.find<A>(_:)(v38, *((uint64_t *)&v38 + 1));
      uint64_t v50 = v44 & 1;
      LOBYTE(v44) = v80;
      if ((v80 & 1) != v50) {
        goto LABEL_54;
      }
      __int128 v45 = v49;
    }

    unint64_t v60 = (void *)v84;
    v80 = v84;
    if ((v44 & 1) != 0)
    {
      int v61 = (void *)(*(void *)(v84 + 56) + 32 * v45);
      __swift_destroy_boxed_opaque_existential_0Tm(v61);
      outlined init with take of Any(v85, v61);
    }

    else
    {
      *(void *)(v84 + 8 * (v45 >> 6) + 64) |= 1LL << v45;
      *(_OWORD *)(v60[6] + 16 * v45) = v38;
      outlined init with take of Any(v85, (_OWORD *)(v60[7] + 32 * v45));
      v64 = v60[2];
      v65 = __OFADD__(v64, 1LL);
      uint64_t v66 = v64 + 1;
      if (v65) {
        goto LABEL_52;
      }
      v60[2] = v66;
      swift_bridgeObjectRetain(*((void *)&v38 + 1));
    }

    uint64_t v33 = v77;
    swift_bridgeObjectRelease(*((void *)&v38 + 1));
    swift_bridgeObjectRelease(0x8000000000000000LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v97,  &demangling cache variable for type metadata for (label: String?, value: Any));
    __swift_destroy_boxed_opaque_existential_0Tm(v78);
    BOOL v67 = &v86;
LABEL_41:
    uint64_t v70 = __swift_destroy_boxed_opaque_existential_0Tm(v67);
    dispatch thunk of _AnyIteratorBoxBase.next()(&v99, v70);
    if (!v101) {
      goto LABEL_48;
    }
  }

  __int128 v92 = 0LL;
  uint64_t v90 = 0u;
  unint64_t v91 = 0u;
  outlined destroy of (label: String?, value: Any)?( (uint64_t)&v90,  &demangling cache variable for type metadata for CATType?);
  __int128 v93 = v38;
  outlined init with copy of Any((uint64_t)v98, (uint64_t)v40);
  v86 = v38;
  unint64_t v51 = v75;
  outlined init with copy of Any((uint64_t)v98, (uint64_t)v75);
  outlined init with take of Any(v51, &v90);
  int v52 = v80;
  LODWORD(v74) = swift_isUniquelyReferenced_nonNull_native(v80);
  *(void *)&v85[0] = v52;
  v54 = specialized __RawDictionaryStorage.find<A>(_:)(v38, *((uint64_t *)&v38 + 1));
  int v55 = *(void *)(v52 + 16);
  unint64_t v56 = (v53 & 1) == 0;
  v57 = v55 + v56;
  if (!__OFADD__(v55, v56))
  {
    if (*(void *)(v52 + 24) >= v57)
    {
      if ((v74 & 1) == 0)
      {
        v74 = v54;
        LODWORD(v80) = v53;
        specialized _NativeDictionary.copy()();
        LOBYTE(v53) = v80;
        v54 = v74;
      }
    }

    else
    {
      LODWORD(v80) = v53;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v57, v74);
      BOOL v58 = specialized __RawDictionaryStorage.find<A>(_:)(v38, *((uint64_t *)&v38 + 1));
      uint64_t v59 = v53 & 1;
      LOBYTE(v53) = v80;
      if ((v80 & 1) != v59) {
        goto LABEL_54;
      }
      v54 = v58;
    }

    v62 = *(void **)&v85[0];
    v80 = *(void *)&v85[0];
    if ((v53 & 1) != 0)
    {
      v63 = (void *)(*(void *)(*(void *)&v85[0] + 56LL) + 32 * v54);
      __swift_destroy_boxed_opaque_existential_0Tm(v63);
      outlined init with take of Any(&v90, v63);
    }

    else
    {
      *(void *)(*(void *)&v85[0] + 8 * (v54 >> 6) + 64) |= 1LL << v54;
      *(_OWORD *)(v62[6] + 16 * v54) = v38;
      outlined init with take of Any(&v90, (_OWORD *)(v62[7] + 32 * v54));
      uint64_t v68 = v62[2];
      v65 = __OFADD__(v68, 1LL);
      v69 = v68 + 1;
      if (v65) {
        goto LABEL_53;
      }
      v62[2] = v69;
      swift_bridgeObjectRetain(*((void *)&v38 + 1));
    }

    uint64_t v33 = v77;
    swift_bridgeObjectRelease(*((void *)&v38 + 1));
    swift_bridgeObjectRelease(0x8000000000000000LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v97,  &demangling cache variable for type metadata for (label: String?, value: Any));
    BOOL v67 = (__int128 *)v78;
    goto LABEL_41;
  }

  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  __int128 v31 = (void *)Mirror.children.getter(v25);
  specialized Collection.first.getter(v31, &v101);
  swift_release(v31);
  if (!v103)
  {
    uint64_t v26 = &demangling cache variable for type metadata for (label: String?, value: Any)?;
    Swift::String v27 = &v101;
    goto LABEL_45;
  }

  v82 = v21;
  __int128 v104 = v101;
  outlined init with take of Any(&v102, v105);
  outlined init with copy of Any((uint64_t)v105, (uint64_t)&v102);
  unint64_t v32 = v81;
  uint64_t v33 = Mirror.init(reflecting:)(&v102);
  uint64_t v34 = Mirror.children.getter(v33);
  uint64_t v35 = v83[1];
  v35(v32, v84);
  uint64_t v36 = swift_retain(v34);
  uint64_t v37 = dispatch thunk of _AnySequenceBox._makeIterator()(v36);
  v81 = (char *)v34;
  swift_release(v34);
  uint64_t v38 = swift_retain(v37);
  dispatch thunk of _AnyIteratorBoxBase.next()(&v101, v38);
  if (!v103)
  {
    v83 = (void (**)(char *, void))&_swiftEmptyDictionarySingleton;
LABEL_48:
    swift_release_n(v37, 2LL);
    swift_release(v81);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v104,  &demangling cache variable for type metadata for (label: String?, value: Any));
    v35(v82, v84);
    return (uint64_t)v83;
  }

  v83 = (void (**)(char *, void))&_swiftEmptyDictionarySingleton;
  v77 = &v89;
  uint64_t v85 = (uint64_t)"ip";
  v78 = (char *)&type metadata for Any + 8;
  v79 = &v96;
  v80 = v35;
  while (1)
  {
    while (1)
    {
      __int128 v40 = v101;
      __int128 v99 = v101;
      outlined init with take of Any(&v102, v100);
      __int128 v97 = v40;
      outlined init with copy of Any((uint64_t)v100, (uint64_t)&v98);
      if (*((void *)&v40 + 1)) {
        break;
      }
LABEL_11:
      outlined destroy of (label: String?, value: Any)?( (uint64_t)&v97,  &demangling cache variable for type metadata for (label: String?, value: Any));
LABEL_12:
      uint64_t v39 = outlined destroy of (label: String?, value: Any)?( (uint64_t)&v99,  &demangling cache variable for type metadata for (label: String?, value: Any));
      dispatch thunk of _AnyIteratorBoxBase.next()(&v101, v39);
      if (!v103)
      {
        uint64_t v35 = v80;
        goto LABEL_48;
      }
    }

    if (v40 == __PAIR128__(0x800000000009B8A0LL, 0xD000000000000016LL))
    {
      swift_bridgeObjectRetain(*((void *)&v40 + 1));
      goto LABEL_11;
    }

    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)( v40,  *((void *)&v40 + 1),  0xD000000000000016LL,  v85 | 0x8000000000000000LL,  0LL);
    swift_bridgeObjectRetain_n(*((void *)&v40 + 1), 2LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v97,  &demangling cache variable for type metadata for (label: String?, value: Any));
    if ((v41 & 1) != 0)
    {
      swift_bridgeObjectRelease(*((void *)&v40 + 1));
      goto LABEL_12;
    }

    __int128 v95 = v40;
    uint64_t v42 = v79;
    outlined init with copy of Any((uint64_t)v100, (uint64_t)v79);
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CATType);
    outlined init with take of CATType(&v92, (uint64_t)&v88);
    __int128 v95 = v40;
    outlined init with copy of Any((uint64_t)v100, (uint64_t)v42);
    uint64_t v75 = v90;
    unint64_t v76 = v91;
    __swift_project_boxed_opaque_existential_1(&v88, v90);
    uint64_t v44 = dispatch thunk of CATType.toDictionary.getter(v75, v76);
    *((void *)&v93 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(void *)&__int128 v92 = v44;
    outlined init with take of Any(&v92, v87);
    __int128 v45 = v83;
    LODWORD(v76) = swift_isUniquelyReferenced_nonNull_native(v83);
    v86 = v45;
    unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v40, *((uint64_t *)&v40 + 1));
    v48 = v45[2];
    BOOL v49 = (v46 & 1) == 0;
    uint64_t v50 = (uint64_t)v48 + v49;
    if (__OFADD__(v48, v49)) {
      goto LABEL_51;
    }
    if ((uint64_t)v45[3] >= v50)
    {
      if ((v76 & 1) == 0)
      {
        unint64_t v76 = v47;
        LODWORD(v83) = v46;
        specialized _NativeDictionary.copy()();
        LOBYTE(v46) = (_BYTE)v83;
        unint64_t v47 = v76;
      }
    }

    else
    {
      LODWORD(v83) = v46;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v50, v76);
      unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v40, *((uint64_t *)&v40 + 1));
      int v52 = v46 & 1;
      LOBYTE(v46) = (_BYTE)v83;
      unint64_t v47 = v51;
    }

    v62 = v86;
    v83 = (void (**)(char *, void))v86;
    if ((v46 & 1) != 0)
    {
      v63 = (void *)(v86[7] + 32 * v47);
      __swift_destroy_boxed_opaque_existential_0Tm(v63);
      outlined init with take of Any(v87, v63);
    }

    else
    {
      v86[(v47 >> 6) + 8] |= 1LL << v47;
      *(_OWORD *)(v62[6] + 16 * v47) = v40;
      outlined init with take of Any(v87, (_OWORD *)(v62[7] + 32 * v47));
      uint64_t v66 = v62[2];
      BOOL v67 = __OFADD__(v66, 1LL);
      uint64_t v68 = v66 + 1;
      if (v67) {
        goto LABEL_52;
      }
      v62[2] = v68;
      swift_bridgeObjectRetain(*((void *)&v40 + 1));
    }

    uint64_t v35 = v80;
    swift_bridgeObjectRelease(*((void *)&v40 + 1));
    swift_bridgeObjectRelease(0x8000000000000000LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v99,  &demangling cache variable for type metadata for (label: String?, value: Any));
    __swift_destroy_boxed_opaque_existential_0Tm(v79);
    v69 = &v88;
LABEL_41:
    uint64_t v72 = __swift_destroy_boxed_opaque_existential_0Tm(v69);
    dispatch thunk of _AnyIteratorBoxBase.next()(&v101, v72);
    if (!v103) {
      goto LABEL_48;
    }
  }

  uint64_t v94 = 0LL;
  __int128 v92 = 0u;
  __int128 v93 = 0u;
  outlined destroy of (label: String?, value: Any)?( (uint64_t)&v92,  &demangling cache variable for type metadata for CATType?);
  __int128 v95 = v40;
  outlined init with copy of Any((uint64_t)v100, (uint64_t)v42);
  __int128 v88 = v40;
  v53 = v77;
  outlined init with copy of Any((uint64_t)v100, (uint64_t)v77);
  outlined init with take of Any(v53, &v92);
  v54 = v83;
  LODWORD(v76) = swift_isUniquelyReferenced_nonNull_native(v83);
  *(void *)&v87[0] = v54;
  unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v40, *((uint64_t *)&v40 + 1));
  v57 = v54[2];
  BOOL v58 = (v55 & 1) == 0;
  uint64_t v59 = (uint64_t)v57 + v58;
  if (!__OFADD__(v57, v58))
  {
    if ((uint64_t)v54[3] >= v59)
    {
      if ((v76 & 1) == 0)
      {
        unint64_t v76 = v56;
        LODWORD(v83) = v55;
        specialized _NativeDictionary.copy()();
        LOBYTE(v55) = (_BYTE)v83;
        unint64_t v56 = v76;
      }
    }

    else
    {
      LODWORD(v83) = v55;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v59, v76);
      unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(v40, *((uint64_t *)&v40 + 1));
      int v61 = v55 & 1;
      LOBYTE(v55) = (_BYTE)v83;
      unint64_t v56 = v60;
    }

    v64 = *(void **)&v87[0];
    v83 = *(void (***)(char *, void))&v87[0];
    if ((v55 & 1) != 0)
    {
      v65 = (void *)(*(void *)(*(void *)&v87[0] + 56LL) + 32 * v56);
      __swift_destroy_boxed_opaque_existential_0Tm(v65);
      outlined init with take of Any(&v92, v65);
    }

    else
    {
      *(void *)(*(void *)&v87[0] + 8 * (v56 >> 6) + 64) |= 1LL << v56;
      *(_OWORD *)(v64[6] + 16 * v56) = v40;
      outlined init with take of Any(&v92, (_OWORD *)(v64[7] + 32 * v56));
      uint64_t v70 = v64[2];
      BOOL v67 = __OFADD__(v70, 1LL);
      uint64_t v71 = v70 + 1;
      if (v67) {
        goto LABEL_53;
      }
      v64[2] = v71;
      swift_bridgeObjectRetain(*((void *)&v40 + 1));
    }

    uint64_t v35 = v80;
    swift_bridgeObjectRelease(*((void *)&v40 + 1));
    swift_bridgeObjectRelease(0x8000000000000000LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v99,  &demangling cache variable for type metadata for (label: String?, value: Any));
    v69 = (__int128 *)v79;
    goto LABEL_41;
  }

  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  Swift::String v27 = (void *)Mirror.children.getter(v21);
  specialized Collection.first.getter(v27, &v97);
  swift_release(v27);
  if (!v99)
  {
    uint64_t v22 = &demangling cache variable for type metadata for (label: String?, value: Any)?;
    uint64_t v23 = &v97;
    goto LABEL_45;
  }

  v100 = v97;
  outlined init with take of Any(&v98, v101);
  outlined init with copy of Any((uint64_t)v101, (uint64_t)&v98);
  uint64_t v28 = v77;
  char v29 = Mirror.init(reflecting:)(&v98);
  Swift::String v30 = Mirror.children.getter(v29);
  __int128 v31 = *(void (**)(char *, uint64_t))(v79 + 8);
  v31(v28, v80);
  unint64_t v32 = swift_retain(v30);
  uint64_t v33 = dispatch thunk of _AnySequenceBox._makeIterator()(v32);
  v77 = (char *)v30;
  swift_release(v30);
  uint64_t v34 = swift_retain(v33);
  dispatch thunk of _AnyIteratorBoxBase.next()(&v97, v34);
  if (!v99)
  {
    v78 = (char *)&_swiftEmptyDictionarySingleton;
LABEL_48:
    swift_release_n(v33, 2LL);
    swift_release(v77);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v100,  &demangling cache variable for type metadata for (label: String?, value: Any));
    v31(v81, v80);
    return (uint64_t)v78;
  }

  unint64_t v73 = &v85;
  v78 = (char *)&_swiftEmptyDictionarySingleton;
  v79 = (unint64_t)"ip";
  v74 = (char *)&type metadata for Any + 8;
  uint64_t v75 = &v92;
  unint64_t v76 = v31;
  while (1)
  {
    while (1)
    {
      uint64_t v36 = v97;
      __int128 v95 = v97;
      outlined init with take of Any(&v98, v96);
      __int128 v93 = v36;
      outlined init with copy of Any((uint64_t)v96, (uint64_t)&v94);
      if (*((void *)&v36 + 1)) {
        break;
      }
LABEL_11:
      outlined destroy of (label: String?, value: Any)?( (uint64_t)&v93,  &demangling cache variable for type metadata for (label: String?, value: Any));
LABEL_12:
      uint64_t v35 = outlined destroy of (label: String?, value: Any)?( (uint64_t)&v95,  &demangling cache variable for type metadata for (label: String?, value: Any));
      dispatch thunk of _AnyIteratorBoxBase.next()(&v97, v35);
      if (!v99)
      {
        __int128 v31 = v76;
        goto LABEL_48;
      }
    }

    if (v36 == __PAIR128__(0x800000000009B8A0LL, 0xD000000000000016LL))
    {
      swift_bridgeObjectRetain(*((void *)&v36 + 1));
      goto LABEL_11;
    }

    uint64_t v37 = _stringCompareWithSmolCheck(_:_:expecting:)( v36,  *((void *)&v36 + 1),  0xD000000000000016LL,  v79 | 0x8000000000000000LL,  0LL);
    swift_bridgeObjectRetain_n(*((void *)&v36 + 1), 2LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v93,  &demangling cache variable for type metadata for (label: String?, value: Any));
    if ((v37 & 1) != 0)
    {
      swift_bridgeObjectRelease(*((void *)&v36 + 1));
      goto LABEL_12;
    }

    unint64_t v91 = v36;
    uint64_t v38 = v75;
    outlined init with copy of Any((uint64_t)v96, (uint64_t)v75);
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CATType);
    outlined init with take of CATType(&v88, (uint64_t)&v84);
    unint64_t v91 = v36;
    outlined init with copy of Any((uint64_t)v96, (uint64_t)v38);
    uint64_t v71 = v86;
    uint64_t v72 = v87;
    __swift_project_boxed_opaque_existential_1(&v84, v86);
    __int128 v40 = dispatch thunk of CATType.toDictionary.getter(v71, v72);
    *((void *)&v89 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(void *)&__int128 v88 = v40;
    outlined init with take of Any(&v88, v83);
    char v41 = v78;
    LODWORD(v72) = swift_isUniquelyReferenced_nonNull_native(v78);
    v82 = v41;
    uint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v36, *((uint64_t *)&v36 + 1));
    uint64_t v44 = *((void *)v41 + 2);
    __int128 v45 = (v42 & 1) == 0;
    int v46 = v44 + v45;
    if (__OFADD__(v44, v45)) {
      goto LABEL_51;
    }
    if (*((void *)v41 + 3) >= v46)
    {
      if ((v72 & 1) == 0)
      {
        uint64_t v72 = v43;
        LODWORD(v78) = v42;
        specialized _NativeDictionary.copy()();
        LOBYTE(v42) = (_BYTE)v78;
        uint64_t v43 = v72;
      }
    }

    else
    {
      LODWORD(v78) = v42;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v46, v72);
      unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v36, *((uint64_t *)&v36 + 1));
      v48 = v42 & 1;
      LOBYTE(v42) = (_BYTE)v78;
      uint64_t v43 = v47;
    }

    BOOL v58 = v82;
    v78 = v82;
    if ((v42 & 1) != 0)
    {
      uint64_t v59 = (void *)(*((void *)v82 + 7) + 32 * v43);
      __swift_destroy_boxed_opaque_existential_0Tm(v59);
      outlined init with take of Any(v83, v59);
    }

    else
    {
      *(void *)&v82[8 * (v43 >> 6) + 64] |= 1LL << v43;
      *(_OWORD *)(*((void *)v58 + 6) + 16 * v43) = v36;
      outlined init with take of Any(v83, (_OWORD *)(*((void *)v58 + 7) + 32 * v43));
      v62 = *((void *)v58 + 2);
      v63 = __OFADD__(v62, 1LL);
      v64 = v62 + 1;
      if (v63) {
        goto LABEL_52;
      }
      *((void *)v58 + 2) = v64;
      swift_bridgeObjectRetain(*((void *)&v36 + 1));
    }

    __int128 v31 = v76;
    swift_bridgeObjectRelease(*((void *)&v36 + 1));
    swift_bridgeObjectRelease(0x8000000000000000LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v95,  &demangling cache variable for type metadata for (label: String?, value: Any));
    __swift_destroy_boxed_opaque_existential_0Tm(v75);
    v65 = &v84;
LABEL_41:
    uint64_t v68 = __swift_destroy_boxed_opaque_existential_0Tm(v65);
    dispatch thunk of _AnyIteratorBoxBase.next()(&v97, v68);
    if (!v99) {
      goto LABEL_48;
    }
  }

  uint64_t v90 = 0LL;
  __int128 v88 = 0u;
  uint64_t v89 = 0u;
  outlined destroy of (label: String?, value: Any)?( (uint64_t)&v88,  &demangling cache variable for type metadata for CATType?);
  unint64_t v91 = v36;
  outlined init with copy of Any((uint64_t)v96, (uint64_t)v38);
  uint64_t v84 = v36;
  BOOL v49 = v73;
  outlined init with copy of Any((uint64_t)v96, (uint64_t)v73);
  outlined init with take of Any(v49, &v88);
  uint64_t v50 = v78;
  LODWORD(v72) = swift_isUniquelyReferenced_nonNull_native(v78);
  *(void *)&v83[0] = v50;
  int v52 = specialized __RawDictionaryStorage.find<A>(_:)(v36, *((uint64_t *)&v36 + 1));
  v53 = *((void *)v50 + 2);
  v54 = (v51 & 1) == 0;
  int v55 = v53 + v54;
  if (!__OFADD__(v53, v54))
  {
    if (*((void *)v50 + 3) >= v55)
    {
      if ((v72 & 1) == 0)
      {
        uint64_t v72 = v52;
        LODWORD(v78) = v51;
        specialized _NativeDictionary.copy()();
        LOBYTE(v51) = (_BYTE)v78;
        int v52 = v72;
      }
    }

    else
    {
      LODWORD(v78) = v51;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v55, v72);
      unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v36, *((uint64_t *)&v36 + 1));
      v57 = v51 & 1;
      LOBYTE(v51) = (_BYTE)v78;
      int v52 = v56;
    }

    unint64_t v60 = *(void **)&v83[0];
    v78 = *(char **)&v83[0];
    if ((v51 & 1) != 0)
    {
      int v61 = (void *)(*(void *)(*(void *)&v83[0] + 56LL) + 32 * v52);
      __swift_destroy_boxed_opaque_existential_0Tm(v61);
      outlined init with take of Any(&v88, v61);
    }

    else
    {
      *(void *)(*(void *)&v83[0] + 8 * (v52 >> 6) + 64) |= 1LL << v52;
      *(_OWORD *)(v60[6] + 16 * v52) = v36;
      outlined init with take of Any(&v88, (_OWORD *)(v60[7] + 32 * v52));
      uint64_t v66 = v60[2];
      v63 = __OFADD__(v66, 1LL);
      BOOL v67 = v66 + 1;
      if (v63) {
        goto LABEL_53;
      }
      v60[2] = v67;
      swift_bridgeObjectRetain(*((void *)&v36 + 1));
    }

    __int128 v31 = v76;
    swift_bridgeObjectRelease(*((void *)&v36 + 1));
    swift_bridgeObjectRelease(0x8000000000000000LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v95,  &demangling cache variable for type metadata for (label: String?, value: Any));
    v65 = (__int128 *)v75;
    goto LABEL_41;
  }

  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  Swift::String v27 = (void *)Mirror.children.getter(v21);
  specialized Collection.first.getter(v27, &v97);
  swift_release(v27);
  if (!v99)
  {
    uint64_t v22 = &demangling cache variable for type metadata for (label: String?, value: Any)?;
    uint64_t v23 = &v97;
    goto LABEL_45;
  }

  v100 = v97;
  outlined init with take of Any(&v98, v101);
  outlined init with copy of Any((uint64_t)v101, (uint64_t)&v98);
  uint64_t v28 = v77;
  char v29 = Mirror.init(reflecting:)(&v98);
  Swift::String v30 = Mirror.children.getter(v29);
  __int128 v31 = *(void (**)(char *, uint64_t))(v79 + 8);
  v31(v28, v80);
  unint64_t v32 = swift_retain(v30);
  uint64_t v33 = dispatch thunk of _AnySequenceBox._makeIterator()(v32);
  v77 = (char *)v30;
  swift_release(v30);
  uint64_t v34 = swift_retain(v33);
  dispatch thunk of _AnyIteratorBoxBase.next()(&v97, v34);
  if (!v99)
  {
    v78 = (char *)&_swiftEmptyDictionarySingleton;
LABEL_48:
    swift_release_n(v33, 2LL);
    swift_release(v77);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v100,  &demangling cache variable for type metadata for (label: String?, value: Any));
    v31(v81, v80);
    return (uint64_t)v78;
  }

  unint64_t v73 = &v85;
  v78 = (char *)&_swiftEmptyDictionarySingleton;
  v79 = (unint64_t)"ip";
  v74 = (char *)&type metadata for Any + 8;
  uint64_t v75 = &v92;
  unint64_t v76 = v31;
  while (1)
  {
    while (1)
    {
      uint64_t v36 = v97;
      __int128 v95 = v97;
      outlined init with take of Any(&v98, v96);
      __int128 v93 = v36;
      outlined init with copy of Any((uint64_t)v96, (uint64_t)&v94);
      if (*((void *)&v36 + 1)) {
        break;
      }
LABEL_11:
      outlined destroy of (label: String?, value: Any)?( (uint64_t)&v93,  &demangling cache variable for type metadata for (label: String?, value: Any));
LABEL_12:
      uint64_t v35 = outlined destroy of (label: String?, value: Any)?( (uint64_t)&v95,  &demangling cache variable for type metadata for (label: String?, value: Any));
      dispatch thunk of _AnyIteratorBoxBase.next()(&v97, v35);
      if (!v99)
      {
        __int128 v31 = v76;
        goto LABEL_48;
      }
    }

    if (v36 == __PAIR128__(0x800000000009B8A0LL, 0xD000000000000016LL))
    {
      swift_bridgeObjectRetain(*((void *)&v36 + 1));
      goto LABEL_11;
    }

    uint64_t v37 = _stringCompareWithSmolCheck(_:_:expecting:)( v36,  *((void *)&v36 + 1),  0xD000000000000016LL,  v79 | 0x8000000000000000LL,  0LL);
    swift_bridgeObjectRetain_n(*((void *)&v36 + 1), 2LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v93,  &demangling cache variable for type metadata for (label: String?, value: Any));
    if ((v37 & 1) != 0)
    {
      swift_bridgeObjectRelease(*((void *)&v36 + 1));
      goto LABEL_12;
    }

    unint64_t v91 = v36;
    uint64_t v38 = v75;
    outlined init with copy of Any((uint64_t)v96, (uint64_t)v75);
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CATType);
    outlined init with take of CATType(&v88, (uint64_t)&v84);
    unint64_t v91 = v36;
    outlined init with copy of Any((uint64_t)v96, (uint64_t)v38);
    uint64_t v71 = v86;
    uint64_t v72 = v87;
    __swift_project_boxed_opaque_existential_1(&v84, v86);
    __int128 v40 = dispatch thunk of CATType.toDictionary.getter(v71, v72);
    *((void *)&v89 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(void *)&__int128 v88 = v40;
    outlined init with take of Any(&v88, v83);
    char v41 = v78;
    LODWORD(v72) = swift_isUniquelyReferenced_nonNull_native(v78);
    v82 = v41;
    uint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v36, *((uint64_t *)&v36 + 1));
    uint64_t v44 = *((void *)v41 + 2);
    __int128 v45 = (v42 & 1) == 0;
    int v46 = v44 + v45;
    if (__OFADD__(v44, v45)) {
      goto LABEL_51;
    }
    if (*((void *)v41 + 3) >= v46)
    {
      if ((v72 & 1) == 0)
      {
        uint64_t v72 = v43;
        LODWORD(v78) = v42;
        specialized _NativeDictionary.copy()();
        LOBYTE(v42) = (_BYTE)v78;
        uint64_t v43 = v72;
      }
    }

    else
    {
      LODWORD(v78) = v42;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v46, v72);
      unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v36, *((uint64_t *)&v36 + 1));
      v48 = v42 & 1;
      LOBYTE(v42) = (_BYTE)v78;
      uint64_t v43 = v47;
    }

    BOOL v58 = v82;
    v78 = v82;
    if ((v42 & 1) != 0)
    {
      uint64_t v59 = (void *)(*((void *)v82 + 7) + 32 * v43);
      __swift_destroy_boxed_opaque_existential_0Tm(v59);
      outlined init with take of Any(v83, v59);
    }

    else
    {
      *(void *)&v82[8 * (v43 >> 6) + 64] |= 1LL << v43;
      *(_OWORD *)(*((void *)v58 + 6) + 16 * v43) = v36;
      outlined init with take of Any(v83, (_OWORD *)(*((void *)v58 + 7) + 32 * v43));
      v62 = *((void *)v58 + 2);
      v63 = __OFADD__(v62, 1LL);
      v64 = v62 + 1;
      if (v63) {
        goto LABEL_52;
      }
      *((void *)v58 + 2) = v64;
      swift_bridgeObjectRetain(*((void *)&v36 + 1));
    }

    __int128 v31 = v76;
    swift_bridgeObjectRelease(*((void *)&v36 + 1));
    swift_bridgeObjectRelease(0x8000000000000000LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v95,  &demangling cache variable for type metadata for (label: String?, value: Any));
    __swift_destroy_boxed_opaque_existential_0Tm(v75);
    v65 = &v84;
LABEL_41:
    uint64_t v68 = __swift_destroy_boxed_opaque_existential_0Tm(v65);
    dispatch thunk of _AnyIteratorBoxBase.next()(&v97, v68);
    if (!v99) {
      goto LABEL_48;
    }
  }

  uint64_t v90 = 0LL;
  __int128 v88 = 0u;
  uint64_t v89 = 0u;
  outlined destroy of (label: String?, value: Any)?( (uint64_t)&v88,  &demangling cache variable for type metadata for CATType?);
  unint64_t v91 = v36;
  outlined init with copy of Any((uint64_t)v96, (uint64_t)v38);
  uint64_t v84 = v36;
  BOOL v49 = v73;
  outlined init with copy of Any((uint64_t)v96, (uint64_t)v73);
  outlined init with take of Any(v49, &v88);
  uint64_t v50 = v78;
  LODWORD(v72) = swift_isUniquelyReferenced_nonNull_native(v78);
  *(void *)&v83[0] = v50;
  int v52 = specialized __RawDictionaryStorage.find<A>(_:)(v36, *((uint64_t *)&v36 + 1));
  v53 = *((void *)v50 + 2);
  v54 = (v51 & 1) == 0;
  int v55 = v53 + v54;
  if (!__OFADD__(v53, v54))
  {
    if (*((void *)v50 + 3) >= v55)
    {
      if ((v72 & 1) == 0)
      {
        uint64_t v72 = v52;
        LODWORD(v78) = v51;
        specialized _NativeDictionary.copy()();
        LOBYTE(v51) = (_BYTE)v78;
        int v52 = v72;
      }
    }

    else
    {
      LODWORD(v78) = v51;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v55, v72);
      unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v36, *((uint64_t *)&v36 + 1));
      v57 = v51 & 1;
      LOBYTE(v51) = (_BYTE)v78;
      int v52 = v56;
    }

    unint64_t v60 = *(void **)&v83[0];
    v78 = *(char **)&v83[0];
    if ((v51 & 1) != 0)
    {
      int v61 = (void *)(*(void *)(*(void *)&v83[0] + 56LL) + 32 * v52);
      __swift_destroy_boxed_opaque_existential_0Tm(v61);
      outlined init with take of Any(&v88, v61);
    }

    else
    {
      *(void *)(*(void *)&v83[0] + 8 * (v52 >> 6) + 64) |= 1LL << v52;
      *(_OWORD *)(v60[6] + 16 * v52) = v36;
      outlined init with take of Any(&v88, (_OWORD *)(v60[7] + 32 * v52));
      uint64_t v66 = v60[2];
      v63 = __OFADD__(v66, 1LL);
      BOOL v67 = v66 + 1;
      if (v63) {
        goto LABEL_53;
      }
      v60[2] = v67;
      swift_bridgeObjectRetain(*((void *)&v36 + 1));
    }

    __int128 v31 = v76;
    swift_bridgeObjectRelease(*((void *)&v36 + 1));
    swift_bridgeObjectRelease(0x8000000000000000LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v95,  &demangling cache variable for type metadata for (label: String?, value: Any));
    v65 = (__int128 *)v75;
    goto LABEL_41;
  }

  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  uint64_t v28 = (void *)Mirror.children.getter(v22);
  specialized Collection.first.getter(v28, &v98);
  swift_release(v28);
  if (!v100)
  {
    uint64_t v23 = &demangling cache variable for type metadata for (label: String?, value: Any)?;
    __int128 v24 = &v98;
    goto LABEL_45;
  }

  __int128 v101 = v98;
  outlined init with take of Any(&v99, v102);
  outlined init with copy of Any((uint64_t)v102, (uint64_t)&v99);
  char v29 = v78;
  Swift::String v30 = Mirror.init(reflecting:)(&v99);
  __int128 v31 = Mirror.children.getter(v30);
  unint64_t v32 = *(void (**)(char *, uint64_t))(v80 + 8);
  v32(v29, v81);
  uint64_t v33 = swift_retain(v31);
  uint64_t v34 = dispatch thunk of _AnySequenceBox._makeIterator()(v33);
  v78 = (char *)v31;
  swift_release(v31);
  uint64_t v35 = swift_retain(v34);
  dispatch thunk of _AnyIteratorBoxBase.next()(&v98, v35);
  if (!v100)
  {
    v79 = (char *)&_swiftEmptyDictionarySingleton;
LABEL_48:
    swift_release_n(v34, 2LL);
    swift_release(v78);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v101,  &demangling cache variable for type metadata for (label: String?, value: Any));
    v32(v82, v81);
    return (uint64_t)v79;
  }

  v74 = &v86;
  v79 = (char *)&_swiftEmptyDictionarySingleton;
  v80 = (unint64_t)"ip";
  uint64_t v75 = (char *)&type metadata for Any + 8;
  unint64_t v76 = &v93;
  v77 = v32;
  while (1)
  {
    while (1)
    {
      uint64_t v37 = v98;
      uint64_t v96 = v98;
      outlined init with take of Any(&v99, v97);
      uint64_t v94 = v37;
      outlined init with copy of Any((uint64_t)v97, (uint64_t)&v95);
      if (*((void *)&v37 + 1)) {
        break;
      }
LABEL_11:
      outlined destroy of (label: String?, value: Any)?( (uint64_t)&v94,  &demangling cache variable for type metadata for (label: String?, value: Any));
LABEL_12:
      uint64_t v36 = outlined destroy of (label: String?, value: Any)?( (uint64_t)&v96,  &demangling cache variable for type metadata for (label: String?, value: Any));
      dispatch thunk of _AnyIteratorBoxBase.next()(&v98, v36);
      if (!v100)
      {
        unint64_t v32 = v77;
        goto LABEL_48;
      }
    }

    if (v37 == __PAIR128__(0x800000000009B8A0LL, 0xD000000000000016LL))
    {
      swift_bridgeObjectRetain(*((void *)&v37 + 1));
      goto LABEL_11;
    }

    uint64_t v38 = _stringCompareWithSmolCheck(_:_:expecting:)( v37,  *((void *)&v37 + 1),  0xD000000000000016LL,  v80 | 0x8000000000000000LL,  0LL);
    swift_bridgeObjectRetain_n(*((void *)&v37 + 1), 2LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v94,  &demangling cache variable for type metadata for (label: String?, value: Any));
    if ((v38 & 1) != 0)
    {
      swift_bridgeObjectRelease(*((void *)&v37 + 1));
      goto LABEL_12;
    }

    __int128 v92 = v37;
    uint64_t v39 = v76;
    outlined init with copy of Any((uint64_t)v97, (uint64_t)v76);
    __int128 v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CATType);
    outlined init with take of CATType(&v89, (uint64_t)&v85);
    __int128 v92 = v37;
    outlined init with copy of Any((uint64_t)v97, (uint64_t)v39);
    uint64_t v72 = v87;
    unint64_t v73 = v88;
    __swift_project_boxed_opaque_existential_1(&v85, v87);
    char v41 = dispatch thunk of CATType.toDictionary.getter(v72, v73);
    *((void *)&v90 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(void *)&uint64_t v89 = v41;
    outlined init with take of Any(&v89, v84);
    uint64_t v42 = v79;
    LODWORD(v73) = swift_isUniquelyReferenced_nonNull_native(v79);
    v83 = v42;
    uint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
    __int128 v45 = *((void *)v42 + 2);
    int v46 = (v43 & 1) == 0;
    unint64_t v47 = v45 + v46;
    if (__OFADD__(v45, v46)) {
      goto LABEL_51;
    }
    if (*((void *)v42 + 3) >= v47)
    {
      if ((v73 & 1) == 0)
      {
        unint64_t v73 = v44;
        LODWORD(v79) = v43;
        specialized _NativeDictionary.copy()();
        LOBYTE(v43) = (_BYTE)v79;
        uint64_t v44 = v73;
      }
    }

    else
    {
      LODWORD(v79) = v43;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, v73);
      v48 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
      BOOL v49 = v43 & 1;
      LOBYTE(v43) = (_BYTE)v79;
      uint64_t v44 = v48;
    }

    uint64_t v59 = v83;
    v79 = v83;
    if ((v43 & 1) != 0)
    {
      unint64_t v60 = (void *)(*((void *)v83 + 7) + 32 * v44);
      __swift_destroy_boxed_opaque_existential_0Tm(v60);
      outlined init with take of Any(v84, v60);
    }

    else
    {
      *(void *)&v83[8 * (v44 >> 6) + 64] |= 1LL << v44;
      *(_OWORD *)(*((void *)v59 + 6) + 16 * v44) = v37;
      outlined init with take of Any(v84, (_OWORD *)(*((void *)v59 + 7) + 32 * v44));
      v63 = *((void *)v59 + 2);
      v64 = __OFADD__(v63, 1LL);
      v65 = v63 + 1;
      if (v64) {
        goto LABEL_52;
      }
      *((void *)v59 + 2) = v65;
      swift_bridgeObjectRetain(*((void *)&v37 + 1));
    }

    unint64_t v32 = v77;
    swift_bridgeObjectRelease(*((void *)&v37 + 1));
    swift_bridgeObjectRelease(0x8000000000000000LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v96,  &demangling cache variable for type metadata for (label: String?, value: Any));
    __swift_destroy_boxed_opaque_existential_0Tm(v76);
    uint64_t v66 = &v85;
LABEL_41:
    v69 = __swift_destroy_boxed_opaque_existential_0Tm(v66);
    dispatch thunk of _AnyIteratorBoxBase.next()(&v98, v69);
    if (!v100) {
      goto LABEL_48;
    }
  }

  unint64_t v91 = 0LL;
  uint64_t v89 = 0u;
  uint64_t v90 = 0u;
  outlined destroy of (label: String?, value: Any)?( (uint64_t)&v89,  &demangling cache variable for type metadata for CATType?);
  __int128 v92 = v37;
  outlined init with copy of Any((uint64_t)v97, (uint64_t)v39);
  uint64_t v85 = v37;
  uint64_t v50 = v74;
  outlined init with copy of Any((uint64_t)v97, (uint64_t)v74);
  outlined init with take of Any(v50, &v89);
  unint64_t v51 = v79;
  LODWORD(v73) = swift_isUniquelyReferenced_nonNull_native(v79);
  *(void *)&v84[0] = v51;
  v53 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
  v54 = *((void *)v51 + 2);
  int v55 = (v52 & 1) == 0;
  unint64_t v56 = v54 + v55;
  if (!__OFADD__(v54, v55))
  {
    if (*((void *)v51 + 3) >= v56)
    {
      if ((v73 & 1) == 0)
      {
        unint64_t v73 = v53;
        LODWORD(v79) = v52;
        specialized _NativeDictionary.copy()();
        LOBYTE(v52) = (_BYTE)v79;
        v53 = v73;
      }
    }

    else
    {
      LODWORD(v79) = v52;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v56, v73);
      v57 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
      BOOL v58 = v52 & 1;
      LOBYTE(v52) = (_BYTE)v79;
      v53 = v57;
    }

    int v61 = *(void **)&v84[0];
    v79 = *(char **)&v84[0];
    if ((v52 & 1) != 0)
    {
      v62 = (void *)(*(void *)(*(void *)&v84[0] + 56LL) + 32 * v53);
      __swift_destroy_boxed_opaque_existential_0Tm(v62);
      outlined init with take of Any(&v89, v62);
    }

    else
    {
      *(void *)(*(void *)&v84[0] + 8 * (v53 >> 6) + 64) |= 1LL << v53;
      *(_OWORD *)(v61[6] + 16 * v53) = v37;
      outlined init with take of Any(&v89, (_OWORD *)(v61[7] + 32 * v53));
      BOOL v67 = v61[2];
      v64 = __OFADD__(v67, 1LL);
      uint64_t v68 = v67 + 1;
      if (v64) {
        goto LABEL_53;
      }
      v61[2] = v68;
      swift_bridgeObjectRetain(*((void *)&v37 + 1));
    }

    unint64_t v32 = v77;
    swift_bridgeObjectRelease(*((void *)&v37 + 1));
    swift_bridgeObjectRelease(0x8000000000000000LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v96,  &demangling cache variable for type metadata for (label: String?, value: Any));
    uint64_t v66 = (__int128 *)v76;
    goto LABEL_41;
  }

  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t specialized GeoCATModel.getParams()(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v84 = a4;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  v83 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
  __chkstk_darwin();
  uint64_t v12 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  __chkstk_darwin();
  uint64_t v85 = (uint64_t)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v77 - v14;
  __chkstk_darwin();
  uint64_t v17 = (char *)&v77 - v16;
  uint64_t v18 = type metadata accessor for Mirror(0LL);
  unint64_t v86 = *(void *)(v18 - 8);
  uint64_t v87 = v18;
  __chkstk_darwin();
  v82 = (uint64_t *)((char *)&v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  *(void *)&__int128 v106 = a1;
  *((void *)&v106 + 1) = a2;
  *(void *)&v107[0] = a3;
  *((void *)&v107[0] + 1) = v84;
  uint64_t v20 = a1;
  uint64_t v22 = (char *)&v77 - v21;
  outlined copy of SaveParkingLocation(v20, a2, a3);
  uint64_t v23 = Mirror.init(reflecting:)(&v106);
  Mirror.displayStyle.getter(v23);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v15, enum case for Mirror.DisplayStyle.enum(_:), v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v15, 0LL, 1LL, v7);
  uint64_t v24 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v17,  (uint64_t)v12,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v15,  v24,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v25((uint64_t)v12, 1LL, v7) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v15,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v17,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    if (v25(v24, 1LL, v7) == 1)
    {
      uint64_t v26 = outlined destroy of (label: String?, value: Any)?( (uint64_t)v12,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
      goto LABEL_8;
    }

uint64_t specialized GeoCATModel.getParams()(uint64_t (*a1)(void))
{
  uint64_t v2 = type metadata accessor for Mirror.DisplayStyle(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  v79 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
  __chkstk_darwin();
  uint64_t v7 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v72 - v10;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v72 - v12;
  uint64_t v14 = type metadata accessor for Mirror(0LL);
  unint64_t v80 = *(void *)(v14 - 8);
  uint64_t v81 = v14;
  __chkstk_darwin();
  unint64_t v78 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v72 - v16;
  *((void *)&v102[0] + 1) = a1(0LL);
  uint64_t v18 = __swift_allocate_boxed_opaque_existential_0(&v101);
  outlined init with copy of TrafficIncident((uint64_t)v82, (uint64_t)v18, a1);
  uint64_t v19 = Mirror.init(reflecting:)(&v101);
  v82 = v17;
  Mirror.displayStyle.getter(v19);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v11, enum case for Mirror.DisplayStyle.enum(_:), v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v11, 0LL, 1LL, v2);
  uint64_t v20 = (uint64_t)&v7[*(int *)(v5 + 48)];
  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v13,  (uint64_t)v7,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v11,  v20,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v21((uint64_t)v7, 1LL, v2) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v11,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v13,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    if (v21(v20, 1LL, v2) == 1)
    {
      uint64_t v22 = outlined destroy of (label: String?, value: Any)?( (uint64_t)v7,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
      goto LABEL_8;
    }

uint64_t specialized GeoCATModel.getParams()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror.DisplayStyle(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  v79 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
  __chkstk_darwin();
  uint64_t v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  __chkstk_darwin();
  uint64_t v80 = (uint64_t)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v73 - v11;
  __chkstk_darwin();
  uint64_t v14 = (char *)&v73 - v13;
  uint64_t v15 = type metadata accessor for Mirror(0LL);
  unint64_t v81 = *(void *)(v15 - 8);
  uint64_t v82 = v15;
  __chkstk_darwin();
  unint64_t v78 = (uint64_t *)((char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v18 = (char *)&v73 - v17;
  *((void *)&v103[0] + 1) = &type metadata for LocationSearch;
  *(void *)&__int128 v102 = a1;
  *((void *)&v102 + 1) = a2;
  outlined copy of LocationSearch(a1, a2);
  uint64_t v19 = Mirror.init(reflecting:)(&v102);
  v83 = v18;
  Mirror.displayStyle.getter(v19);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v12, enum case for Mirror.DisplayStyle.enum(_:), v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v12, 0LL, 1LL, v4);
  uint64_t v20 = (uint64_t)&v9[*(int *)(v7 + 48)];
  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v14,  (uint64_t)v9,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v12,  v20,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v9, 1LL, v4) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v12,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v14,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    if (v21(v20, 1LL, v4) == 1)
    {
      uint64_t v22 = outlined destroy of (label: String?, value: Any)?( (uint64_t)v9,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
      goto LABEL_8;
    }

uint64_t specialized GeoCATModel.getParams()(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v6 = type metadata accessor for Mirror.DisplayStyle(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v82 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
  __chkstk_darwin();
  uint64_t v11 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  __chkstk_darwin();
  uint64_t v85 = (uint64_t)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v75 - v13;
  __chkstk_darwin();
  uint64_t v16 = (char *)&v75 - v15;
  uint64_t v17 = type metadata accessor for Mirror(0LL);
  v83 = *(void (***)(char *, void))(v17 - 8);
  uint64_t v84 = v17;
  __chkstk_darwin();
  unint64_t v81 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  *((void *)&v105[0] + 1) = a2;
  *(void *)&__int128 v104 = a1;
  uint64_t v19 = a1;
  uint64_t v21 = (char *)&v75 - v20;
  a3(v19);
  uint64_t v22 = Mirror.init(reflecting:)(&v104);
  Mirror.displayStyle.getter(v22);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v14, enum case for Mirror.DisplayStyle.enum(_:), v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v14, 0LL, 1LL, v6);
  uint64_t v23 = (uint64_t)&v11[*(int *)(v9 + 48)];
  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v16,  (uint64_t)v11,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v14,  v23,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v24((uint64_t)v11, 1LL, v6) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v14,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v16,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    if (v24(v23, 1LL, v6) == 1)
    {
      uint64_t v25 = outlined destroy of (label: String?, value: Any)?( (uint64_t)v11,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
      goto LABEL_8;
    }

uint64_t specialized GeoCATModel.getParams()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Mirror.DisplayStyle(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  unint64_t v78 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
  __chkstk_darwin();
  uint64_t v7 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v71 - v10;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v71 - v12;
  uint64_t v14 = type metadata accessor for Mirror(0LL);
  unint64_t v79 = *(void *)(v14 - 8);
  uint64_t v80 = v14;
  __chkstk_darwin();
  uint64_t v77 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v71 - v16;
  *((void *)&v101[0] + 1) = &type metadata for Compass;
  *(void *)&__int128 v100 = a1;
  swift_retain(a1);
  uint64_t v18 = Mirror.init(reflecting:)(&v100);
  unint64_t v81 = v17;
  Mirror.displayStyle.getter(v18);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v11, enum case for Mirror.DisplayStyle.enum(_:), v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v11, 0LL, 1LL, v2);
  uint64_t v19 = (uint64_t)&v7[*(int *)(v5 + 48)];
  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v13,  (uint64_t)v7,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v11,  v19,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v20((uint64_t)v7, 1LL, v2) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v11,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v13,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    if (v20(v19, 1LL, v2) == 1)
    {
      uint64_t v21 = outlined destroy of (label: String?, value: Any)?( (uint64_t)v7,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
      goto LABEL_8;
    }

uint64_t specialized GeoCATModel.getParams()(char a1)
{
  uint64_t v2 = type metadata accessor for Mirror.DisplayStyle(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  unint64_t v78 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
  __chkstk_darwin();
  uint64_t v7 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v71 - v10;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v71 - v12;
  uint64_t v14 = type metadata accessor for Mirror(0LL);
  unint64_t v79 = *(void *)(v14 - 8);
  uint64_t v80 = v14;
  __chkstk_darwin();
  uint64_t v77 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v71 - v16;
  *((void *)&v101[0] + 1) = &type metadata for LocationServices;
  LOBYTE(v100) = a1;
  uint64_t v18 = Mirror.init(reflecting:)(&v100);
  unint64_t v81 = v17;
  Mirror.displayStyle.getter(v18);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v11, enum case for Mirror.DisplayStyle.enum(_:), v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v11, 0LL, 1LL, v2);
  uint64_t v19 = (uint64_t)&v7[*(int *)(v5 + 48)];
  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v13,  (uint64_t)v7,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v11,  v19,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v20((uint64_t)v7, 1LL, v2) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v11,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v13,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    if (v20(v19, 1LL, v2) == 1)
    {
      uint64_t v21 = outlined destroy of (label: String?, value: Any)?( (uint64_t)v7,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
      goto LABEL_8;
    }

uint64_t GeoCATModel.getParams()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Mirror.DisplayStyle(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  unint64_t v79 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
  __chkstk_darwin();
  uint64_t v7 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v72 - v10;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v72 - v12;
  uint64_t v14 = type metadata accessor for Mirror(0LL);
  unint64_t v80 = *(void *)(v14 - 8);
  uint64_t v81 = v14;
  __chkstk_darwin();
  unint64_t v78 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v72 - v16;
  *((void *)&v102[0] + 1) = a1;
  uint64_t v18 = __swift_allocate_boxed_opaque_existential_0(&v101);
  (*(void (**)(void *, char *, uint64_t))(*(void *)(a1 - 8) + 16LL))(v18, v82, a1);
  uint64_t v19 = Mirror.init(reflecting:)(&v101);
  uint64_t v82 = v17;
  Mirror.displayStyle.getter(v19);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v11, enum case for Mirror.DisplayStyle.enum(_:), v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v11, 0LL, 1LL, v2);
  uint64_t v20 = (uint64_t)&v7[*(int *)(v5 + 48)];
  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v13,  (uint64_t)v7,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v11,  v20,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v21((uint64_t)v7, 1LL, v2) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v11,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v13,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    if (v21(v20, 1LL, v2) == 1)
    {
      uint64_t v22 = outlined destroy of (label: String?, value: Any)?( (uint64_t)v7,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
      goto LABEL_8;
    }

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    outlined init with copy of Mirror.DisplayStyle?( v7,  (uint64_t)&v16,  &demangling cache variable for type metadata for (String, Any));
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)outlined init with take of Any(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)( a1,  &demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchVerb, LocationSearchIntent.LocationSearchVerbValue),  &demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_LocationSearchVerb, LocationSearchIntent.LocationSearchVerbValue>,  (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:),  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchVerb);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)( a1,  &demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchNoun, LocationSearchIntent.LocationSearchNounValue),  &demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_LocationSearchNoun, LocationSearchIntent.LocationSearchNounValue>,  (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:),  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNoun);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)( a1,  &demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation, LocationSearchIntent.LocationSearchConfirmationValue),  &demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation, LocationSearchIntent.LocationSearchConfirmationValue>,  (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:),  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)( a1,  &demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType, LocationSearchIntent.LocationSearchIncidentTypeValue),  &demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType, LocationSearchIntent.LocationSearchIncidentTypeValue>,  (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:),  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    outlined init with copy of Mirror.DisplayStyle?( v7,  (uint64_t)v16,  &demangling cache variable for type metadata for (AnyHashable, Any));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v10 = v4[6] + 40 * result;
    char v11 = v16[0];
    uint64_t v12 = v16[1];
    *(void *)(v10 + 32) = v17;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    unint64_t result = (unint64_t)outlined init with take of Any(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 72LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  unint64_t result;
  char v10;
  _BYTE *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<FlowSelector.FlowSelectorKey, (_:)>);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = (unsigned __int8 *)(a1 + 32);
  swift_retain(v3);
  while (1)
  {
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    uint64_t v15 = *(_OWORD *)(v6 + 8);
    swift_retain(*((void *)v6 + 2));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v7 | (v8 << 8));
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    char v11 = (_BYTE *)(v4[6] + 2 * result);
    *char v11 = v7;
    v11[1] = v8;
    *(_OWORD *)(v4[7] + 16 * result) = v15;
    uint64_t v12 = v4[2];
    uint64_t v13 = __OFADD__(v12, 1LL);
    BOOL v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v4[2] = v14;
    v6 += 24;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)( uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(char *), uint64_t (*a5)(void))
{
  uint64_t v33 = a5;
  uint64_t v34 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  char v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
    BOOL v14 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v30 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v30);
    return (unint64_t)v14;
  }

  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v13 = static _DictionaryStorage.allocate(capacity:)(v12);
  BOOL v14 = (void *)v13;
  uint64_t v15 = *(void *)(a1 + 16);
  if (!v15) {
    goto LABEL_9;
  }
  uint64_t v16 = *(int *)(v8 + 48);
  uint64_t v17 = a1;
  uint64_t v18 = v13 + 64;
  unint64_t v19 = (*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v32 = v17;
  uint64_t v20 = v17 + v19;
  uint64_t v21 = *(void *)(v9 + 72);
  swift_retain(v13);
  while (1)
  {
    outlined init with copy of Mirror.DisplayStyle?(v20, (uint64_t)v11, a2);
    unint64_t result = v34(v11);
    if ((v23 & 1) != 0) {
      break;
    }
    unint64_t v24 = result;
    *(void *)(v18 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v25 = v14[6];
    uint64_t v26 = v33(0LL);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v26 - 8) + 32LL))( v25 + *(void *)(*(void *)(v26 - 8) + 72LL) * v24,  v11,  v26);
    *(_BYTE *)(v14[7] + v24) = v11[v16];
    uint64_t v27 = v14[2];
    BOOL v28 = __OFADD__(v27, 1LL);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_12;
    }
    v14[2] = v29;
    v20 += v21;
    if (!--v15)
    {
      swift_release(v14);
      uint64_t v30 = v32;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v11);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t v8 = *v3;
    void *v4 = v10;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v8);
  }

  else
  {
    outlined destroy of (label: String?, value: Any)?(a1, &demangling cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v11);
    swift_bridgeObjectRelease(a3);
    return outlined destroy of (label: String?, value: Any)?( (uint64_t)v11,  &demangling cache variable for type metadata for Any?);
  }
}

uint64_t GeoCATModel.getBehaviorAfterSpeaking()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v54 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  __chkstk_darwin();
  unint64_t v57 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Mirror.DisplayStyle(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  unint64_t v52 = (unint64_t)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
  __chkstk_darwin();
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  __chkstk_darwin();
  char v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v50 - v12;
  __chkstk_darwin();
  uint64_t v15 = (char *)&v50 - v14;
  uint64_t v55 = type metadata accessor for Mirror(0LL);
  unint64_t v53 = *(void *)(v55 - 8);
  __chkstk_darwin();
  int v51 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v18 = (char *)&v50 - v17;
  *((void *)&v68 + 1) = a1;
  unint64_t v19 = __swift_allocate_boxed_opaque_existential_0(&v67);
  (*(void (**)(void *, char *, uint64_t))(*(void *)(a1 - 8) + 16LL))(v19, v56, a1);
  uint64_t v20 = Mirror.init(reflecting:)(&v67);
  uint64_t v56 = v18;
  Mirror.displayStyle.getter(v20);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v13, enum case for Mirror.DisplayStyle.enum(_:), v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v13, 0LL, 1LL, v4);
  uint64_t v21 = (uint64_t)&v9[*(int *)(v7 + 48)];
  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v15,  (uint64_t)v9,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v13,  v21,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v22((uint64_t)v9, 1LL, v4) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v13,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v15,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    int v23 = v22(v21, 1LL, v4);
    unint64_t v24 = v56;
    if (v23 == 1)
    {
      uint64_t v25 = outlined destroy of (label: String?, value: Any)?( (uint64_t)v9,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  unint64_t v26 = v52;
  outlined init with copy of Mirror.DisplayStyle?( (uint64_t)v9,  (uint64_t)v11,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if (v22(v21, 1LL, v4) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v13,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v15,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    unint64_t v24 = v56;
LABEL_6:
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v9,  &demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
LABEL_20:
    (*(void (**)(char *, uint64_t))(v53 + 8))(v24, v55);
LABEL_21:
    uint64_t v44 = v54;
    uint64_t v45 = enum case for BehaviorAfterSpeaking.defaultBehavior(_:);
    uint64_t v46 = type metadata accessor for BehaviorAfterSpeaking(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 104LL))(v44, v45, v46);
  }

  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v26, v21, v4);
  char v27 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v26, v4, &protocol witness table for Mirror.DisplayStyle);
  BOOL v28 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  v28(v26, v4);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v13,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v15,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v28((unint64_t)v11, v4);
  uint64_t v25 = outlined destroy of (label: String?, value: Any)?( (uint64_t)v9,  &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  unint64_t v24 = v56;
  if ((v27 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_8:
  uint64_t v29 = (void *)Mirror.children.getter(v25);
  specialized Collection.first.getter(v29, &v64);
  swift_release(v29);
  if (!v66)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v24, v55);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v64,  &demangling cache variable for type metadata for (label: String?, value: Any)?);
    goto LABEL_21;
  }

  __int128 v67 = v64;
  outlined init with take of Any(&v65, &v68);
  outlined init with copy of Any((uint64_t)&v68, (uint64_t)&v65);
  uint64_t v30 = v51;
  uint64_t v31 = Mirror.init(reflecting:)(&v65);
  uint64_t v32 = Mirror.children.getter(v31);
  int v51 = *(char **)(v53 + 8);
  ((void (*)(char *, uint64_t))v51)(v30, v55);
  uint64_t v33 = swift_retain(v32);
  uint64_t v34 = dispatch thunk of _AnySequenceBox._makeIterator()(v33);
  uint64_t v50 = v32;
  swift_release(v32);
  uint64_t v35 = swift_retain(v34);
  dispatch thunk of _AnyIteratorBoxBase.next()(&v64, v35);
  if (!v66)
  {
LABEL_22:
    swift_release_n(v34, 2LL);
    swift_release(v50);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v67,  &demangling cache variable for type metadata for (label: String?, value: Any));
    ((void (*)(char *, uint64_t))v51)(v56, v55);
    uint64_t v48 = enum case for BehaviorAfterSpeaking.defaultBehavior(_:);
    uint64_t v49 = type metadata accessor for BehaviorAfterSpeaking(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 104LL))(v54, v48, v49);
  }

  unint64_t v52 = (unint64_t)"ip";
  unint64_t v53 = 0x800000000009B8A0LL;
  while (1)
  {
    __int128 v37 = v64;
    __int128 v62 = v64;
    outlined init with take of Any(&v65, v63);
    __int128 v60 = v37;
    outlined init with copy of Any((uint64_t)v63, (uint64_t)&v61);
    if (!*((void *)&v37 + 1))
    {
      outlined destroy of (label: String?, value: Any)?( (uint64_t)&v60,  &demangling cache variable for type metadata for (label: String?, value: Any));
      goto LABEL_12;
    }

    if (v37 == __PAIR128__(v53, 0xD000000000000016LL)) {
      break;
    }
    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)( v37,  *((void *)&v37 + 1),  0xD000000000000016LL,  v52 | 0x8000000000000000LL,  0LL);
    swift_bridgeObjectRetain_n(*((void *)&v37 + 1), 2LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v60,  &demangling cache variable for type metadata for (label: String?, value: Any));
    if ((v38 & 1) != 0) {
      goto LABEL_18;
    }
LABEL_12:
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v62,  &demangling cache variable for type metadata for (label: String?, value: Any));
    uint64_t v36 = swift_bridgeObjectRelease(*((void *)&v37 + 1));
LABEL_13:
    dispatch thunk of _AnyIteratorBoxBase.next()(&v64, v36);
    if (!v66) {
      goto LABEL_22;
    }
  }

  swift_bridgeObjectRetain_n(*((void *)&v37 + 1), 2LL);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)&v60,  &demangling cache variable for type metadata for (label: String?, value: Any));
LABEL_18:
  __int128 v58 = v37;
  outlined init with copy of Any((uint64_t)v63, (uint64_t)v59);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)&v62,  &demangling cache variable for type metadata for (label: String?, value: Any));
  swift_bridgeObjectRelease(*((void *)&v58 + 1));
  uint64_t v39 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  uint64_t v40 = (uint64_t)v57;
  int v41 = swift_dynamicCast(v57, v59, (char *)&type metadata for Any + 8, v39, 6LL);
  uint64_t v42 = *(void *)(v39 - 8);
  int v43 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56);
  if (!v41)
  {
    v43(v40, 1LL, 1LL, v39);
    uint64_t v36 = outlined destroy of (label: String?, value: Any)?( v40,  &demangling cache variable for type metadata for BehaviorAfterSpeaking?);
    goto LABEL_13;
  }

  v43(v40, 0LL, 1LL, v39);
  swift_release(v50);
  swift_release_n(v34, 2LL);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)&v67,  &demangling cache variable for type metadata for (label: String?, value: Any));
  ((void (*)(char *, uint64_t))v51)(v56, v55);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v54, v40, v39);
}

uint64_t protocol witness for GeoCATModel.getID() in conformance ShareETA()
{
  return specialized GeoCATModel.getID()( type metadata accessor for ShareETA,  &demangling cache variable for type metadata for ShareETA.Type);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance ShareETA()
{
  return specialized GeoCATModel.getParams()(type metadata accessor for ShareETA);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance ContactResolution()
{
  return specialized GeoCATModel.getParams()(type metadata accessor for ContactResolution);
}

uint64_t protocol witness for GeoCATModel.getID() in conformance RetrieveParkingLocation()
{
  return specialized GeoCATModel.getID()( *v0,  v0[1],  v0[2],  (uint64_t)&type metadata for RetrieveParkingLocation,  &demangling cache variable for type metadata for RetrieveParkingLocation.Type);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance RetrieveParkingLocation()
{
  return specialized GeoCATModel.getParams()(*v0, v0[1], v0[2], (char *)&type metadata for RetrieveParkingLocation);
}

uint64_t protocol witness for GeoCATModel.getID() in conformance DeleteParkingLocation()
{
  return specialized GeoCATModel.getID()( *v0,  v0[1],  v0[2],  (uint64_t)&type metadata for DeleteParkingLocation,  &demangling cache variable for type metadata for DeleteParkingLocation.Type);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance DeleteParkingLocation()
{
  return specialized GeoCATModel.getParams()(*v0, v0[1], v0[2], (char *)&type metadata for DeleteParkingLocation);
}

uint64_t protocol witness for GeoCATModel.getID() in conformance SaveParkingLocation()
{
  return specialized GeoCATModel.getID()( *v0,  v0[1],  v0[2],  (uint64_t)&type metadata for SaveParkingLocation,  &demangling cache variable for type metadata for SaveParkingLocation.Type);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance SaveParkingLocation()
{
  return specialized GeoCATModel.getParams()(*v0, v0[1], v0[2], (char *)&type metadata for SaveParkingLocation);
}

uint64_t default argument 1 of ShareETA.disambiguateContactsHandles(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for BehaviorAfterSpeaking.listen(_:);
  uint64_t v3 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL))(a1, v2, v3);
}

uint64_t protocol witness for GeoCATModel.getID() in conformance TrafficIncident()
{
  return specialized GeoCATModel.getID()( type metadata accessor for TrafficIncident,  &demangling cache variable for type metadata for TrafficIncident.Type);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance TrafficIncident()
{
  return specialized GeoCATModel.getParams()(type metadata accessor for TrafficIncident);
}

uint64_t protocol witness for GeoCATModel.getID() in conformance Common()
{
  return specialized GeoCATModel.getID()( *v0,  (uint64_t)&type metadata for Common,  &demangling cache variable for type metadata for Common.Type,  (void (*)(uint64_t))outlined copy of Common);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance Common()
{
  return specialized GeoCATModel.getParams()( *v0,  (uint64_t)&type metadata for Common,  (void (*)(uint64_t))outlined copy of Common);
}

uint64_t protocol witness for GeoCATModel.getID() in conformance GeoLabel()
{
  return specialized GeoCATModel.getID()(*(void *)v0, *(void *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance GeoLabel()
{
  return specialized GeoCATModel.getParams()(*(void *)v0, *(void *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t protocol witness for GeoCATModel.getID() in conformance LocationSearch()
{
  return specialized GeoCATModel.getID()(*v0, v0[1]);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance LocationSearch()
{
  return specialized GeoCATModel.getParams()(*v0, v0[1]);
}

uint64_t protocol witness for GeoCATModel.getID() in conformance NavigationControl()
{
  return specialized GeoCATModel.getID()( *v0,  (uint64_t)&type metadata for NavigationControl,  &demangling cache variable for type metadata for NavigationControl.Type,  (void (*)(uint64_t))outlined copy of NavigationControl);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance NavigationControl()
{
  return specialized GeoCATModel.getParams()( *v0,  (uint64_t)&type metadata for NavigationControl,  (void (*)(uint64_t))outlined copy of NavigationControl);
}

uint64_t protocol witness for GeoCATModel.getID() in conformance Compass()
{
  return specialized GeoCATModel.getID()(*v0);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance Compass()
{
  return specialized GeoCATModel.getParams()(*v0);
}

BOOL static LocationAccessLevelFor.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void LocationAccessLevelFor.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int LocationAccessLevelFor.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LocationServices( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocationServices()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance LocationServices()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocationServices(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for GeoCATModel.getID() in conformance LocationServices()
{
  return specialized GeoCATModel.getID()(*v0);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance LocationServices()
{
  return specialized GeoCATModel.getParams()(*v0);
}

uint64_t default argument 1 of FlowHelperImpl.init(device:rchFlowFactory:catGlobals:aceService:outputPublisher:catService:)@<X0>( uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GeoRCHFlowFactoryImpl();
  uint64_t result = swift_allocObject(v2, 16LL, 7LL);
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for GeoRCHFlowFactoryImpl;
  *a1 = result;
  return result;
}

uint64_t variable initialization expression of ShareETAContactDisambiguationStrategy.isUSO()
{
  return 0LL;
}

uint64_t variable initialization expression of ShareETAPromptForContactStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000020LL,  0x800000000009B8E0LL);
}

uint64_t variable initialization expression of ShareETAPromptForContactStrategy.weightedPromptResponseTargets()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v1 = swift_allocObject(v0, 80LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_949B0;
  uint64_t v2 = type metadata accessor for AddressOntologyNode.OccupantNode(0LL);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  uint64_t v3 = AddressOntologyNode.OccupantNode.init(name:multicardinal:)(0x746E61707563636FLL, 0xE800000000000000LL, 0LL);
  unint64_t v4 = specialized OntologyNode.javaClassName.getter((uint64_t (*)(void))&type metadata accessor for AddressOntologyNode.OccupantNode);
  uint64_t v6 = v5;
  uint64_t v7 = swift_release(v3);
  *(void *)(v1 + 32) = v4;
  *(void *)(v1 + 40) = v6;
  uint64_t v8 = static AddressOntologyNode.OccupantNode.occupantFullNameNode.getter(v7);
  unint64_t v9 = specialized OntologyNode.javaClassName.getter( &demangling cache variable for type metadata for TerminalOntologyNode<String>,  &lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>);
  uint64_t v11 = v10;
  swift_release(v8);
  *(void *)(v1 + 48) = v9;
  *(void *)(v1 + 56) = v11;
  if (one-time initialization token for confirmationNode != -1) {
    swift_once( &one-time initialization token for confirmationNode,  one-time initialization function for confirmationNode);
  }
  *(void *)(v1 + 64) = specialized OntologyNode.javaClassName.getter( &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue>,  &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue> and conformance TerminalOntologyNode<A>);
  *(void *)(v1 + 72) = v12;
  return v1;
}

uint64_t default argument 0 of AddressOntologyNode.OccupantNode.init(name:multicardinal:)()
{
  return 0x746E61707563636FLL;
}

unint64_t specialized OntologyNode.javaClassName.getter()
{
  return specialized OntologyNode.javaClassName.getter((uint64_t (*)(void))&type metadata accessor for AddressOntologyNode.OccupantNode);
}

{
  return specialized OntologyNode.javaClassName.getter( &demangling cache variable for type metadata for TerminalOntologyNode<String>,  &lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>);
}

{
  return specialized OntologyNode.javaClassName.getter( &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue>,  &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue> and conformance TerminalOntologyNode<A>);
}

{
  return specialized OntologyNode.javaClassName.getter((uint64_t (*)(void))&type metadata accessor for DomainOntologyNode);
}

{
  return specialized OntologyNode.javaClassName.getter( &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchIncidentTypeValue>,  &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchIncidentTypeValue> and conformance TerminalOntologyNode<A>);
}

{
  return specialized OntologyNode.javaClassName.getter( &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchReferenceValue>,  &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchReferenceValue> and conformance TerminalOntologyNode<A>);
}

{
  return specialized OntologyNode.javaClassName.getter((uint64_t (*)(void))&type metadata accessor for AddressOntologyNode.PersonPlaceNode);
}

unint64_t specialized OntologyNode.javaClassName.getter(uint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v5 = lazy protocol witness table accessor for type TerminalOntologyNode<LocationSearchIntent.LocationSearchIncidentTypeValue> and conformance TerminalOntologyNode<A>( a2,  a1);
  uint64_t v6 = dispatch thunk of OntologyNode.name.getter(v4, v5);
  unint64_t v8 = v7;
  specialized Collection.first.getter(v6, v7);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease(v8);
  if (v10)
  {
    Swift::String v11 = Character.uppercased()();
    uint64_t countAndFlagsBits = v11._countAndFlagsBits;
    object = v11._object;
    swift_bridgeObjectRelease(v10);
  }

  else
  {
    uint64_t countAndFlagsBits = 0LL;
    object = (void *)0xE000000000000000LL;
  }

  v14._uint64_t countAndFlagsBits = countAndFlagsBits;
  v14._object = object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  uint64_t v15 = dispatch thunk of OntologyNode.name.getter(v4, v5);
  unint64_t v17 = v16;
  unint64_t v18 = specialized Collection.dropFirst(_:)(1uLL, v15, v16);
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  swift_bridgeObjectRelease(v17);
  unint64_t v28 = 0xD000000000000012LL;
  unint64_t v29 = 0x800000000009BE20LL;
  v27[0] = v18;
  v27[1] = v20;
  v27[2] = v22;
  v27[3] = v24;
  unint64_t v25 = lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain(0x800000000009BE20LL);
  String.append<A>(contentsOf:)(v27, &type metadata for Substring, v25);
  swift_bridgeObjectRelease(0x800000000009BE20LL);
  swift_bridgeObjectRelease(v24);
  return v28;
}

unint64_t specialized OntologyNode.javaClassName.getter(uint64_t (*a1)(void))
{
  uint64_t v1 = a1(0LL);
  uint64_t v2 = dispatch thunk of OntologyNode.name.getter(v1, &protocol witness table for NonTerminalOntologyNode);
  unint64_t v4 = v3;
  specialized Collection.first.getter(v2, v3);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease(v4);
  if (v6)
  {
    Swift::String v7 = Character.uppercased()();
    uint64_t countAndFlagsBits = v7._countAndFlagsBits;
    object = v7._object;
    swift_bridgeObjectRelease(v6);
  }

  else
  {
    uint64_t countAndFlagsBits = 0LL;
    object = (void *)0xE000000000000000LL;
  }

  v10._uint64_t countAndFlagsBits = countAndFlagsBits;
  v10._object = object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(object);
  uint64_t v11 = dispatch thunk of OntologyNode.name.getter(v1, &protocol witness table for NonTerminalOntologyNode);
  unint64_t v13 = v12;
  unint64_t v14 = specialized Collection.dropFirst(_:)(1uLL, v11, v12);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  swift_bridgeObjectRelease(v13);
  unint64_t v24 = 0xD000000000000012LL;
  unint64_t v25 = 0x800000000009BE20LL;
  v23[0] = v14;
  v23[1] = v16;
  v23[2] = v18;
  v23[3] = v20;
  unint64_t v21 = lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain(0x800000000009BE20LL);
  String.append<A>(contentsOf:)(v23, &type metadata for Substring, v21);
  swift_bridgeObjectRelease(0x800000000009BE20LL);
  swift_bridgeObjectRelease(v20);
  return v24;
}

uint64_t variable initialization expression of ShareETAPromptForContactStrategy.locationSearchIntent()
{
  return 0LL;
}

uint64_t variable initialization expression of TrafficIncidentHandleIntentStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000023LL,  0x800000000009B910LL);
}

uint64_t variable initialization expression of AnswerETAFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x5445726577736E41LL,  0xED0000776F6C4641LL);
}

ValueMetadata *default argument 1 of AnswerETAFlow.init(with:checkNavigation:)()
{
  return &type metadata for AssistantProperties;
}

uint64_t variable initialization expression of SaveParkingLocationBaseFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001BLL,  0x800000000009B940LL);
}

id variable initialization expression of CATService.bundle()
{
  uint64_t v0 = type metadata accessor for CATService();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  return [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
}

uint64_t variable initialization expression of CATService.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
}

uint64_t variable initialization expression of RedirectToServerFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000014LL,  0x800000000009B960LL);
}

uint64_t variable initialization expression of ShareETAContactDisambiguationStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000025LL,  0x800000000009B980LL);
}

void *variable initialization expression of ShareETAContactDisambiguationStrategy.disambiguationItems()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of ShareETAContactDisambiguationStrategy.weightedPromptResponseTargets()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v1 = swift_allocObject(v0, 128LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_949C0;
  if (one-time initialization token for referenceNode != -1) {
    swift_once(&one-time initialization token for referenceNode, one-time initialization function for referenceNode);
  }
  *(void *)(v1 + 32) = specialized OntologyNode.javaClassName.getter( &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchReferenceValue>,  &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchReferenceValue> and conformance TerminalOntologyNode<A>);
  *(void *)(v1 + 40) = v2;
  if (one-time initialization token for confirmationNode != -1) {
    swift_once( &one-time initialization token for confirmationNode,  one-time initialization function for confirmationNode);
  }
  *(void *)(v1 + 48) = specialized OntologyNode.javaClassName.getter( &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue>,  &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue> and conformance TerminalOntologyNode<A>);
  *(void *)(v1 + 56) = v3;
  uint64_t v4 = type metadata accessor for AddressOntologyNode.PersonPlaceNode(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t v5 = AddressOntologyNode.PersonPlaceNode.init(name:multicardinal:)(0x6C506E6F73726570LL, 0xEB00000000656361LL, 0LL);
  unint64_t v6 = specialized OntologyNode.javaClassName.getter((uint64_t (*)(void))&type metadata accessor for AddressOntologyNode.PersonPlaceNode);
  uint64_t v8 = v7;
  swift_release(v5);
  *(void *)(v1 + 64) = v6;
  *(void *)(v1 + 72) = v8;
  uint64_t v9 = type metadata accessor for AddressOntologyNode.OccupantNode(0LL);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  uint64_t v10 = AddressOntologyNode.OccupantNode.init(name:multicardinal:)(0x746E61707563636FLL, 0xE800000000000000LL, 0LL);
  unint64_t v11 = specialized OntologyNode.javaClassName.getter((uint64_t (*)(void))&type metadata accessor for AddressOntologyNode.OccupantNode);
  uint64_t v13 = v12;
  uint64_t v14 = swift_release(v10);
  *(void *)(v1 + 80) = v11;
  *(void *)(v1 + 88) = v13;
  uint64_t v15 = static AddressOntologyNode.OccupantNode.occupantFullNameNode.getter(v14);
  unint64_t v16 = specialized OntologyNode.javaClassName.getter( &demangling cache variable for type metadata for TerminalOntologyNode<String>,  &lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>);
  uint64_t v18 = v17;
  swift_release(v15);
  *(void *)(v1 + 96) = v16;
  *(void *)(v1 + 104) = v18;
  type metadata accessor for PersonOntologyNode(0LL);
  uint64_t v19 = static PersonOntologyNode.personFullNameNode.getter();
  unint64_t v20 = specialized OntologyNode.javaClassName.getter( &demangling cache variable for type metadata for TerminalOntologyNode<String>,  &lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>);
  uint64_t v22 = v21;
  swift_release(v19);
  *(void *)(v1 + 112) = v20;
  *(void *)(v1 + 120) = v22;
  return v1;
}

uint64_t default argument 0 of AddressOntologyNode.PersonPlaceNode.init(name:multicardinal:)()
{
  return 0x6C506E6F73726570LL;
}

uint64_t default argument 4 of ShareETAContactDisambiguationStrategy.init(isPommes:isUSO:skeletonPerson:flowHelper:catService:)()
{
  uint64_t v0 = type metadata accessor for CATService();
  uint64_t v1 = swift_allocObject(v0, 40LL, 7LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  *(void *)(v1 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  type metadata accessor for OS_os_log();
  *(void *)(v1 + 32) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v1 + 16) = 1;
  return v1;
}

uint64_t variable initialization expression of ShareETAFlowDelegate.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000014LL,  0x800000000009B9B0LL);
}

uint64_t variable initialization expression of ShareETAAceViewProvider.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000017LL,  0x800000000009B9D0LL);
}

uint64_t variable initialization expression of ShareETAContextProvider.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000017LL,  0x800000000009B9F0LL);
}

uint64_t variable initialization expression of ShareETATemplatingService.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000019LL,  0x800000000009BA10LL);
}

uint64_t variable initialization expression of DeleteParkingLocationBaseFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001DLL,  0x800000000009BA30LL);
}

uint64_t variable initialization expression of TrafficIncidentContinueInAppPunchoutStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000002CLL,  0x800000000009BA50LL);
}

uint64_t default argument 5 of static TrafficIncidentUtils.sendCompletionViewOutput(result:snippets:device:listenAfterSpeaking:ttsEnabled:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:_:)()
{
  return 1LL;
}

uint64_t variable initialization expression of AnswerAltitudeFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000012LL,  0x800000000009BA80LL);
}

uint64_t variable initialization expression of ContactResolutionFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000015LL,  0x800000000009BAA0LL);
}

uint64_t variable initialization expression of ContactResolutionFlow.exitValue()
{
  return 0LL;
}

uint64_t variable initialization expression of ContactResolutionFlow.contactResolverConfig()
{
  uint64_t v0 = type metadata accessor for RecommenderType(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for SearchSuggestedContacts(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for ContactResolverDomain(0LL);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for Locale(0LL);
  uint64_t v10 = __chkstk_darwin();
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = static Locale.current.getter(v10);
  static ContactResolverDomain.all.getter(v13);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for SearchSuggestedContacts.ifOnlyMatchIsSuggested(_:),  v4);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for RecommenderType.mlRecommender(_:), v0);
  return ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:recommender:customGenerator:)( 0LL,  0xE000000000000000LL,  0LL,  0xE000000000000000LL,  v12,  1LL,  1LL,  &_swiftEmptyArrayStorage,  v9,  v7,  v3,  0LL,  0LL);
}

uint64_t default argument 4 of ContactResolutionFlow.init(occupantNode:disambiguationStrategy:confirmationStrategy:contactResolver:flowHelper:handleResolver:)@<X0>( uint64_t *a1@<X8>)
{
  a1[3] = (uint64_t)&type metadata for FlowHelperImpl;
  a1[4] = (uint64_t)&protocol witness table for FlowHelperImpl;
  uint64_t v2 = swift_allocObject(&unk_B7408, 192LL, 7LL);
  *a1 = v2;
  return FlowHelperImpl.init()((void *)(v2 + 16));
}

uint64_t variable initialization expression of StopShareETAFlowDelegate.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000018LL,  0x800000000009BAC0LL);
}

uint64_t variable initialization expression of StopShareETAContextProvider.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001BLL,  0x800000000009BAE0LL);
}

uint64_t variable initialization expression of StopShareETATemplatingService.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001DLL,  0x800000000009BB00LL);
}

uint64_t variable initialization expression of FlowSelector.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x656C6553776F6C46LL,  0xEC000000726F7463LL);
}

uint64_t variable initialization expression of RetrieveParkingLocationBaseFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001FLL,  0x800000000009BB20LL);
}

uint64_t variable initialization expression of EndNavigationFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000011LL,  0x800000000009BB40LL);
}

uint64_t variable initialization expression of ParkingCommon.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x43676E696B726150LL,  0xED00006E6F6D6D6FLL);
}

uint64_t variable initialization expression of SaveParkingLocationUnsupportedValueStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000002BLL,  0x800000000009BB60LL);
}

uint64_t variable initialization expression of UnsupportedRequestFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000016LL,  0x800000000009BB90LL);
}

uint64_t variable initialization expression of RetrieveParkingBaseRCHStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001ELL,  0x800000000009BBB0LL);
}

uint64_t variable initialization expression of TrafficIncidentUnsupportedValueStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000027LL,  0x800000000009BBD0LL);
}

uint64_t variable initialization expression of RetrieveParkingHandleIntentStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000023LL,  0x800000000009BC00LL);
}

uint64_t variable initialization expression of LocationSearchIntent.domainOntologyNode()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode( &one-time initialization token for domainNode,  &static LocationSearchIntent.domainNode);
}

uint64_t variable initialization expression of GeoFlowDelegatePlugin.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000015LL,  0x8000000000094A20LL);
}

uint64_t default argument 0 of GeoFlowDelegatePlugin.init(with:)()
{
  uint64_t v0 = type metadata accessor for GeoRCHFlowFactoryImpl();
  uint64_t v1 = swift_allocObject(v0, 16LL, 7LL);
  v11[8] = v0;
  v11[9] = &protocol witness table for GeoRCHFlowFactoryImpl;
  v11[5] = v1;
  v11[10] = static DialogHelper.globals.getter();
  uint64_t v2 = static AceService.currentAsync.getter(v12);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v2);
  uint64_t v3 = type metadata accessor for CATService();
  uint64_t v4 = swift_allocObject(v3, 40LL, 7LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v3);
  *(void *)(v4 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  type metadata accessor for OS_os_log();
  *(void *)(v4 + 32) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v4 + 16) = 0;
  v12[10] = v4;
  uint64_t v6 = type metadata accessor for FlowSelector();
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  outlined init with copy of FlowHelperImpl((uint64_t)v11, (uint64_t)v10);
  uint64_t v8 = specialized FlowSelector.init(with:)(v10, v7);
  outlined destroy of FlowHelperImpl(v11);
  return v8;
}

uint64_t variable initialization expression of DeleteParkingHandleIntentStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000021LL,  0x800000000009BC30LL);
}

uint64_t variable initialization expression of LocationSearchIntentBuilder.noun()
{
  return 8LL;
}

uint64_t variable initialization expression of LocationSearchIntentBuilder.verb()
{
  return 10LL;
}

uint64_t variable initialization expression of LocationSearchIntentBuilder.incidentType()
{
  return 9LL;
}

uint64_t variable initialization expression of LocationSearchIntentBuilder.confirmation()
{
  return 3LL;
}

uint64_t variable initialization expression of LocationSearchIntentBuilder.firstName()
{
  return 0LL;
}

unint64_t variable initialization expression of LocationSearchIntentBuilder.locationSearchVerbMap()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Apple_Parsec_Siri_V2alpha_LocationSearchVerb, LocationSearchIntent.LocationSearchVerbValue)>);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchVerb, LocationSearchIntent.LocationSearchVerbValue));
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = swift_allocObject(v0, v5 + 6 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_949C0;
  uint64_t v7 = v6 + v5;
  uint64_t v8 = *(int *)(v1 + 48);
  uint64_t v9 = enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.unknown(_:);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchVerb(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104LL);
  v11(v6 + v5, v9, v10);
  *(_BYTE *)(v7 + v8) = 0;
  uint64_t v12 = *(int *)(v1 + 48);
  v11(v6 + v5 + v3, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.share(_:), v10);
  *(_BYTE *)(v7 + v3 + v12) = 1;
  uint64_t v13 = *(int *)(v1 + 48);
  v11(v7 + 2 * v3, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.stopShare(_:), v10);
  *(_BYTE *)(v7 + 2 * v3 + v13) = 2;
  uint64_t v14 = *(int *)(v1 + 48);
  v11(v7 + 3 * v3, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.report(_:), v10);
  *(_BYTE *)(v7 + 3 * v3 + v14) = 3;
  uint64_t v15 = *(int *)(v1 + 48);
  v11(v7 + 4 * v3, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.confirmReport(_:), v10);
  *(_BYTE *)(v7 + 4 * v3 + v15) = 5;
  uint64_t v16 = v7 + 5 * v3;
  uint64_t v17 = *(int *)(v1 + 48);
  v11(v16, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.clearReport(_:), v10);
  *(_BYTE *)(v16 + v17) = 4;
  return specialized Dictionary.init(dictionaryLiteral:)( v6,  &demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchVerb, LocationSearchIntent.LocationSearchVerbValue),  &demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_LocationSearchVerb, LocationSearchIntent.LocationSearchVerbValue>,  (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:),  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchVerb);
}

unint64_t variable initialization expression of LocationSearchIntentBuilder.locationSearchNounMap()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Apple_Parsec_Siri_V2alpha_LocationSearchNoun, LocationSearchIntent.LocationSearchNounValue)>);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchNoun, LocationSearchIntent.LocationSearchNounValue));
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = swift_allocObject(v0, v5 + 2 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_949D0;
  uint64_t v7 = v6 + v5;
  uint64_t v8 = *(int *)(v1 + 48);
  uint64_t v9 = enum case for Apple_Parsec_Siri_V2alpha_LocationSearchNoun.unknown(_:);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNoun(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104LL);
  v11(v7, v9, v10);
  *(_BYTE *)(v7 + v8) = 0;
  uint64_t v12 = v7 + v3;
  uint64_t v13 = *(int *)(v1 + 48);
  v11(v12, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchNoun.eta(_:), v10);
  *(_BYTE *)(v12 + v13) = 6;
  return specialized Dictionary.init(dictionaryLiteral:)( v6,  &demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchNoun, LocationSearchIntent.LocationSearchNounValue),  &demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_LocationSearchNoun, LocationSearchIntent.LocationSearchNounValue>,  (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:),  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNoun);
}

unint64_t variable initialization expression of LocationSearchIntentBuilder.locationSearchConfirmationMap()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation, LocationSearchIntent.LocationSearchConfirmationValue)>);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation, LocationSearchIntent.LocationSearchConfirmationValue));
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = 2 * v3;
  uint64_t v7 = swift_allocObject(v0, v5 + 3 * v3, v4 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_949B0;
  uint64_t v8 = v7 + v5;
  uint64_t v9 = *(int *)(v1 + 48);
  uint64_t v10 = enum case for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation.yes(_:);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104LL);
  v12(v8, v10, v11);
  *(_BYTE *)(v8 + v9) = 0;
  uint64_t v13 = v8 + v3;
  uint64_t v14 = *(int *)(v1 + 48);
  v12(v13, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation.no(_:), v11);
  *(_BYTE *)(v13 + v14) = 1;
  uint64_t v15 = v8 + v6;
  uint64_t v16 = *(int *)(v1 + 48);
  v12(v15, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation.cancel(_:), v11);
  *(_BYTE *)(v15 + v16) = 2;
  return specialized Dictionary.init(dictionaryLiteral:)( v7,  &demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation, LocationSearchIntent.LocationSearchConfirmationValue),  &demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation, LocationSearchIntent.LocationSearchConfirmationValue>,  (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:),  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation);
}

unint64_t variable initialization expression of LocationSearchIntentBuilder.locationSearchIncidentTypeMap()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType, LocationSearchIntent.LocationSearchIncidentTypeValue)>);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType, LocationSearchIntent.LocationSearchIncidentTypeValue));
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = swift_allocObject(v0, v5 + 9 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_949E0;
  uint64_t v7 = v6 + v5;
  uint64_t v8 = *(int *)(v1 + 48);
  uint64_t v9 = enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.accident(_:);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104LL);
  v11(v7, v9, v10);
  *(_BYTE *)(v7 + v8) = 0;
  uint64_t v12 = *(int *)(v1 + 48);
  v11(v7 + v3, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.hazard(_:), v10);
  *(_BYTE *)(v7 + v3 + v12) = 2;
  uint64_t v13 = *(int *)(v1 + 48);
  v11(v7 + 2 * v3, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.incident(_:), v10);
  *(_BYTE *)(v7 + 2 * v3 + v13) = 1;
  uint64_t v14 = *(int *)(v1 + 48);
  v11(v7 + 3 * v3, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.laneClosed(_:), v10);
  *(_BYTE *)(v7 + 3 * v3 + v14) = 5;
  uint64_t v15 = *(int *)(v1 + 48);
  v11(v7 + 4 * v3, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.problem(_:), v10);
  *(_BYTE *)(v7 + 4 * v3 + v15) = 8;
  uint64_t v16 = *(int *)(v1 + 48);
  v11(v7 + 5 * v3, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.redLightCamera(_:), v10);
  *(_BYTE *)(v7 + 5 * v3 + v16) = 7;
  uint64_t v17 = *(int *)(v1 + 48);
  v11(v7 + 6 * v3, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.roadClosed(_:), v10);
  *(_BYTE *)(v7 + 6 * v3 + v17) = 6;
  uint64_t v18 = *(int *)(v1 + 48);
  v11(v7 + 7 * v3, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.roadwork(_:), v10);
  *(_BYTE *)(v7 + 7 * v3 + v18) = 4;
  uint64_t v19 = v7 + 8 * v3;
  uint64_t v20 = *(int *)(v1 + 48);
  v11(v19, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.speedCheck(_:), v10);
  *(_BYTE *)(v19 + v20) = 3;
  return specialized Dictionary.init(dictionaryLiteral:)( v6,  &demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType, LocationSearchIntent.LocationSearchIncidentTypeValue),  &demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType, LocationSearchIntent.LocationSearchIncidentTypeValue>,  (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:),  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType);
}

uint64_t variable initialization expression of LocationFetchFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000017LL,  0x800000000009BC60LL);
}

uint64_t variable initialization expression of LocationFetchFlow.exitValue()
{
  uint64_t v0 = type metadata accessor for RuntimeError();
  uint64_t v1 = swift_allocObject(v0, 32LL, 7LL);
  *(void *)(v1 + 16) = 0xD000000000000019LL;
  *(void *)(v1 + 24) = 0x800000000009BC80LL;
  uint64_t v2 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError,  (uint64_t (*)(uint64_t))type metadata accessor for RuntimeError,  (uint64_t)&protocol conformance descriptor for RuntimeError);
  uint64_t result = swift_allocError(v0, v2, 0LL, 0LL);
  uint64_t *v4 = v1;
  return result;
}

uint64_t variable initialization expression of TrafficIncidentNeedsDisambiguationStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000002ALL,  0x800000000009BCA0LL);
}

uint64_t variable initialization expression of TrafficIncidentContinueInAppPunchoutStrategy.catService()
{
  uint64_t v0 = type metadata accessor for CATService();
  swift_allocObject(v0, 40LL, 7LL);
  return CATService.init(withMode:)(1);
}

uint64_t variable initialization expression of TrafficIncidentNeedsDisambiguationStrategy.weightedPromptResponseTargets()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v1 = swift_allocObject(v0, 80LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_949B0;
  if (one-time initialization token for incidentTypeNode != -1) {
    swift_once( &one-time initialization token for incidentTypeNode,  one-time initialization function for incidentTypeNode);
  }
  *(void *)(v1 + 32) = specialized OntologyNode.javaClassName.getter( &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchIncidentTypeValue>,  &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchIncidentTypeValue> and conformance TerminalOntologyNode<A>);
  *(void *)(v1 + 40) = v2;
  if (one-time initialization token for referenceNode != -1) {
    swift_once(&one-time initialization token for referenceNode, one-time initialization function for referenceNode);
  }
  *(void *)(v1 + 48) = specialized OntologyNode.javaClassName.getter( &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchReferenceValue>,  &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchReferenceValue> and conformance TerminalOntologyNode<A>);
  *(void *)(v1 + 56) = v3;
  if (one-time initialization token for confirmationNode != -1) {
    swift_once( &one-time initialization token for confirmationNode,  one-time initialization function for confirmationNode);
  }
  *(void *)(v1 + 64) = specialized OntologyNode.javaClassName.getter( &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue>,  &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue> and conformance TerminalOntologyNode<A>);
  *(void *)(v1 + 72) = v4;
  return v1;
}

uint64_t variable initialization expression of ShareETABaseFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000010LL,  0x800000000009BCD0LL);
}

uint64_t default argument 0 of TemplatingResult.getDialogAsSimpleOutputFlow(_:)@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  a1[3] = (uint64_t)&type metadata for FlowHelperImpl;
  a1[4] = (uint64_t)&protocol witness table for FlowHelperImpl;
  uint64_t v2 = swift_allocObject(&unk_B7408, 192LL, 7LL);
  *a1 = v2;
  return outlined init with copy of FlowHelperImpl((uint64_t)static FlowHelperImpl.instance, v2 + 16);
}

uint64_t variable initialization expression of LocalSearchIntent.domainOntologyNode()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode( &one-time initialization token for domainNode,  &static LocalSearchIntent.domainNode);
}

uint64_t variable initialization expression of LocationSearchIntent.domainOntologyNode( void *a1, void *a2)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  return swift_retain(*a2);
}

uint64_t variable initialization expression of DeleteParkingBaseRCHStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001CLL,  0x800000000009BCF0LL);
}

uint64_t variable initialization expression of SaveParkingBaseRCHStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001ALL,  0x800000000009BD10LL);
}

uint64_t variable initialization expression of TrafficIncidentBaseFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000017LL,  0x800000000009BD30LL);
}

uint64_t variable initialization expression of TrafficIncidentRequestSupportedCheckFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000028LL,  0x800000000009BD50LL);
}

uint64_t variable initialization expression of TrafficIncidentRequestSupportedCheckFlow.exitValue()
{
  uint64_t v0 = type metadata accessor for RuntimeError();
  uint64_t v1 = swift_allocObject(v0, 32LL, 7LL);
  *(void *)(v1 + 16) = 0xD00000000000002CLL;
  *(void *)(v1 + 24) = 0x800000000009BD80LL;
  uint64_t v2 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError,  (uint64_t (*)(uint64_t))type metadata accessor for RuntimeError,  (uint64_t)&protocol conformance descriptor for RuntimeError);
  uint64_t result = swift_allocError(v0, v2, 0LL, 0LL);
  uint64_t *v4 = v1;
  return result;
}

uint64_t variable initialization expression of SaveParkingHandleIntentStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001FLL,  0x800000000009BDB0LL);
}

uint64_t variable initialization expression of ShareETAContactConfirmationStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000023LL,  0x800000000009BDD0LL);
}

uint64_t variable initialization expression of FlowHelperImpl.catService()
{
  uint64_t v0 = type metadata accessor for CATService();
  swift_allocObject(v0, 40LL, 7LL);
  return CATService.init(withMode:)(0);
}

uint64_t variable initialization expression of ShareETAContactConfirmationStrategy.weightedPromptResponseTargets()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v1 = swift_allocObject(v0, 80LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_949B0;
  if (one-time initialization token for confirmationNode != -1) {
    swift_once( &one-time initialization token for confirmationNode,  one-time initialization function for confirmationNode);
  }
  *(void *)(v1 + 32) = specialized OntologyNode.javaClassName.getter( &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue>,  &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue> and conformance TerminalOntologyNode<A>);
  *(void *)(v1 + 40) = v2;
  uint64_t v3 = type metadata accessor for AddressOntologyNode.OccupantNode(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  uint64_t v4 = AddressOntologyNode.OccupantNode.init(name:multicardinal:)(0x746E61707563636FLL, 0xE800000000000000LL, 0LL);
  unint64_t v5 = specialized OntologyNode.javaClassName.getter((uint64_t (*)(void))&type metadata accessor for AddressOntologyNode.OccupantNode);
  uint64_t v7 = v6;
  uint64_t v8 = swift_release(v4);
  *(void *)(v1 + 48) = v5;
  *(void *)(v1 + 56) = v7;
  uint64_t v9 = static AddressOntologyNode.OccupantNode.occupantFullNameNode.getter(v8);
  unint64_t v10 = specialized OntologyNode.javaClassName.getter( &demangling cache variable for type metadata for TerminalOntologyNode<String>,  &lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>);
  uint64_t v12 = v11;
  swift_release(v9);
  *(void *)(v1 + 64) = v10;
  *(void *)(v1 + 72) = v12;
  return v1;
}

uint64_t variable initialization expression of TrafficIncidentBaseRCHStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001ELL,  0x800000000009BE00LL);
}

uint64_t variable initialization expression of WhereAmIFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x496D416572656857LL,  0xEC000000776F6C46LL);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance INPersonHandleLabel( uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance INPersonHandleLabel( a1,  a2,  (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance INPersonHandleLabel( uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance INPersonHandleLabel( uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance INPersonHandleLabel@<X0>( void *a1@<X8>)
{
  uint64_t v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance INPersonHandleType( void *a1@<X8>)
{
  *a1 = *v1;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance INShareETAMediumOptions@<X0>( void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance INTrafficIncidentType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance INIntentSlotValueType()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance INTrafficIncidentType( uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Error._domain.getter in conformance related decl 'e' for AFLocationServiceErrorCode( uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode,  (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode,  (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
  return Error<>._domain.getter(a1, v2);
}

uint64_t protocol witness for Error._code.getter in conformance related decl 'e' for AFLocationServiceErrorCode( uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode,  (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode,  (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
  return Error<>._code.getter(a1, v2);
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance related decl 'e' for AFLocationServiceErrorCode( uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode,  (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode,  (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id protocol witness for _BridgedStoredNSError._nsError.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  return *v0;
}

uint64_t protocol witness for _BridgedStoredNSError.init(_nsError:) in conformance related decl 'e' for AFLocationServiceErrorCode@<X0>( uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NSComparisonResult( void *a1, void *a2)
{
  return *a1 == *a2;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance INShareETAMediumOptions@<X0>( void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance INShareETAMediumOptions( void *result)
{
  *v1 &= *result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance INShareETAMediumOptions(void *a1)
{
  return (*v1 & ~*a1) == 0LL;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance INShareETAMediumOptions(void *a1)
{
  return (*a1 & ~*v1) == 0LL;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance INIntentSlotValueType@<X0>( void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for static CustomNSError.errorDomain.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(kAFLocationServiceErrorDomain);
}

uint64_t protocol witness for CustomNSError.errorCode.getter in conformance related decl 'e' for AFLocationServiceErrorCode( uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode,  (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode,  (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance related decl 'e' for AFLocationServiceErrorCode( uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode,  (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode,  (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance related decl 'e' for AFLocationServiceErrorCode( void *a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode,  (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode,  (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance related decl 'e' for AFLocationServiceErrorCode( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode,  (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode,  (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance related decl 'e' for AFLocationServiceErrorCode( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance INPersonHandleLabel@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance INPersonHandleLabel@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance INPersonHandleLabel( uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type INPersonHandleLabel and conformance INPersonHandleLabel,  (uint64_t (*)(uint64_t))type metadata accessor for INPersonHandleLabel,  (uint64_t)&protocol conformance descriptor for INPersonHandleLabel);
  uint64_t v3 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type INPersonHandleLabel and conformance INPersonHandleLabel,  (uint64_t (*)(uint64_t))type metadata accessor for INPersonHandleLabel,  (uint64_t)&protocol conformance descriptor for INPersonHandleLabel);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance related decl 'e' for AFLocationServiceErrorCode( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode,  (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode,  (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance INPersonHandleLabel( uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance INPersonHandleLabel( a1,  a2,  (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance INPersonHandleLabel( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  uint64_t v7 = v6;
  uint64_t v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance INPersonHandleLabel(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance INPersonHandleLabel(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance INPersonHandleLabel( void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v1 = result;
    if (result)
    {
      uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)(result, &type metadata for String);
      *(void *)(result + 16) = v1;
    }

    else
    {
      return (uint64_t)&_swiftEmptyArrayStorage;
    }
  }

  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v15 = *v4;
    uint64_t *v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v12 = v15;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    outlined init with take of Any((_OWORD *)(*(void *)(v12 + 56) + 32 * v9), a3);
    specialized _NativeDictionary._delete(at:)(v9, v12);
    uint64_t v13 = *v4;
    uint64_t *v4 = v12;
    swift_bridgeObjectRelease(v13);
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v5);
}

{
  uint64_t v2;
  Swift::Int v5;
  void v7[9];
  Hasher.init(_seed:)(v7, *(void *)(v2 + 40));
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(a2);
    String.hash(into:)(v7, a1, a2);
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Swift::Int v5 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType(0LL);
  uint64_t v6 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType and conformance Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)( a1,  v7,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType,  &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType and conformance Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation(0LL);
  uint64_t v6 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation and conformance Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)( a1,  v7,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation,  &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation and conformance Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNoun(0LL);
  uint64_t v6 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LocationSearchNoun and conformance Apple_Parsec_Siri_V2alpha_LocationSearchNoun,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNoun,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_LocationSearchNoun);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)( a1,  v7,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNoun,  &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LocationSearchNoun and conformance Apple_Parsec_Siri_V2alpha_LocationSearchNoun,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_LocationSearchNoun);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchVerb(0LL);
  uint64_t v6 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LocationSearchVerb and conformance Apple_Parsec_Siri_V2alpha_LocationSearchVerb,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchVerb,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_LocationSearchVerb);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)( a1,  v7,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchVerb,  &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LocationSearchVerb and conformance Apple_Parsec_Siri_V2alpha_LocationSearchVerb,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_LocationSearchVerb);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t v2 = v1;
  uint64_t v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  Swift::Int v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned int a1)
{
  Swift::Int v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = ~v5;
    char v10 = *(void *)(v3 + 48);
    do
    {
      uint64_t v11 = (void *)(v10 + 16 * v6);
      BOOL v12 = v11[1];
      if (v12)
      {
        if (a2)
        {
          uint64_t v13 = *v11 == a1 && v12 == a2;
          if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0LL) & 1) != 0) {
            return v6;
          }
        }
      }

      else if (!a2)
      {
        return v6;
      }

      unint64_t v6 = (v6 + 1) & v9;
    }

    while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
  }

  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v6 = v5;
  uint64_t v20 = a1;
  uint64_t v21 = a3;
  uint64_t v8 = a3(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v20 - v10;
  uint64_t v12 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  if (((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0)
  {
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v9 + 72);
    BOOL v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(void *)(v6 + 48) + v15 * v13, v8);
      uint64_t v17 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(v22, v21, v23);
      char v18 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v8, v17);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v18 & 1) != 0) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }

    while (((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0);
  }

  return v13;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  double result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    char v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (double result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            double result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(__int16 a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = 8LL * (char)a1;
    uint64_t v7 = *(void *)((char *)&unk_952A8 + v6);
    uint64_t v8 = *(void *)((char *)&unk_952F8 + v6);
    uint64_t v9 = SHIBYTE(a1);
    do
    {
      uint64_t v10 = (char *)(*(void *)(v2 + 48) + 2 * v4);
      uint64_t v11 = v10[1];
      uint64_t v12 = 8LL * *v10;
      uint64_t v13 = *(void *)((char *)&unk_952A8 + v12);
      uint64_t v14 = *(void *)((char *)&unk_952F8 + v12);
      if (v13 == v7 && v14 == v8)
      {
        swift_bridgeObjectRelease(*(void *)((char *)&unk_952F8 + v12));
        swift_bridgeObjectRelease(v8);
      }

      else
      {
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, *(void *)((char *)&unk_952F8 + v12), v7, v8, 0LL);
        swift_bridgeObjectRelease(v14);
        swift_bridgeObjectRelease(v8);
        if ((v16 & 1) == 0) {
          goto LABEL_3;
        }
      }

      uint64_t v17 = qword_95348[v11];
      uint64_t v18 = qword_95388[v11];
      uint64_t v19 = qword_95348[v9];
      uint64_t v20 = qword_95388[v9];
      if (v17 == v19 && v18 == v20)
      {
        swift_bridgeObjectRelease(qword_95388[v11]);
        swift_bridgeObjectRelease(v20);
        return v4;
      }

      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, qword_95388[v11], v19, qword_95388[v9], 0LL);
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v20);
      if ((v22 & 1) != 0) {
        return v4;
      }
LABEL_3:
      unint64_t v4 = (v4 + 1) & v5;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain(v5);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v19 >= v35) {
          goto LABEL_37;
        }
        unint64_t v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v35) {
            goto LABEL_37;
          }
          unint64_t v20 = v36[v14];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              uint64_t v3 = v34;
              if ((a2 & 1) != 0)
              {
                uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v36 = -1LL << v33;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_44;
                }
                if (v14 >= v35) {
                  goto LABEL_37;
                }
                unint64_t v20 = v36[v14];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v14 = v21;
          }
        }

LABEL_24:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      char v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      uint64_t v24 = *v22;
      uint64_t v23 = v22[1];
      unint64_t v25 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        outlined init with take of Any(v25, v38);
      }

      else
      {
        outlined init with copy of Any((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }

      Hasher.init(_seed:)(v37, *(void *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          BOOL v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0LL;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v28);
        }

        while (v32 == -1);
        unint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      char v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
      *char v16 = v24;
      v16[1] = v23;
      uint64_t result = (uint64_t)outlined init with take of Any(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

        unint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }

      int64_t v21 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v17);
      char v22 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
      int64_t v35 = v21;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + 16 * v17 + 8);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain(*((void *)&v21 + 1));
        swift_bridgeObjectRetain(v22);
      }

      Hasher.init(_seed:)(v36, *(void *)(v8 + 40));
      if (v23)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(v23);
        String.hash(into:)(v36, v35, v23);
        swift_bridgeObjectRelease(v23);
      }

      else
      {
        Hasher._combine(_:)(0);
      }

      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1LL << *(_BYTE *)(v8 + 32);
      unint64_t v25 = result & ~v24;
      uint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }

          char v29 = v26 == v28;
          if (v26 == v28) {
            uint64_t v26 = 0LL;
          }
          v27 |= v29;
          unint64_t v30 = *(void *)(v12 + 8 * v26);
        }

        while (v30 == -1);
        unint64_t v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *(_OWORD *)(*(void *)(v8 + 48) + 16 * v15) = v35;
      *(void *)(*(void *)(v8 + 56) + 8 * v15) = v22;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

      uint64_t v10 = (v16 - 1) & v16;
      int64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }

    unint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    unint64_t v20 = *v18;
    int64_t v19 = v18[1];
    int64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)(v34, *(void *)(v9 + 40));
    if (v19)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain_n(v19, 2LL);
      swift_bridgeObjectRetain(v21);
      String.hash(into:)(v34, v20, v19);
      swift_bridgeObjectRelease(v19);
    }

    else
    {
      Hasher._combine(_:)(0);
      swift_bridgeObjectRetain(v21);
    }

    uint64_t result = Hasher._finalize()();
    char v22 = -1LL << *(_BYTE *)(v9 + 32);
    uint64_t v23 = result & ~v22;
    uint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        unint64_t v28 = v24 == v27;
        if (v24 == v27) {
          uint64_t v24 = 0LL;
        }
        v26 |= v28;
        char v29 = *(void *)(v12 + 8 * v24);
      }

      while (v29 == -1);
      unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }

    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    unint64_t v30 = (void *)(*(void *)(v9 + 48) + 16 * v25);
    *unint64_t v30 = v20;
    v30[1] = v19;
    *(void *)(*(void *)(v9 + 56) + 8 * v25) = v21;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1LL)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }

  uint64_t v40 = 0LL;
LABEL_25:
  v41.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
  if ((v38 & 1) != 0)
  {
    uint64_t v42 = 0LL;
  }

  else
  {
    uint64_t v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v39);
  }

  int v43 = [objc_allocWithZone(INReportIncidentIntent) initWithIncidentType:v7 startTime:0 isClear:v41.super.super.isa userLocation:v40 additionalDetails:v42];

  return v43;
}

  unint64_t v53 = v20;
  uint64_t v54 = (void *)v22;
  result._object = v54;
  result._uint64_t countAndFlagsBits = v53;
  return result;
}

  __break(1u);
  return result;
}

Swift::Int specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String?, [INPerson]>);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v32 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    Swift::Int result = swift_retain(v5);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }

      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }

        if (v18 >= v33) {
          goto LABEL_39;
        }
        unint64_t v19 = v34[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_39;
          }
          unint64_t v19 = v34[v14];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_39:
              swift_release(v5);
              uint64_t v3 = v32;
              if ((a2 & 1) != 0)
              {
                uint64_t v31 = 1LL << *(_BYTE *)(v5 + 32);
                if (v31 >= 64) {
                  bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v34 = -1LL << v31;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v14 = v20 + 1;
                if (__OFADD__(v20, 1LL)) {
                  goto LABEL_46;
                }
                if (v14 >= v33) {
                  goto LABEL_39;
                }
                unint64_t v19 = v34[v14];
                ++v20;
                if (v19) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v14 = v20;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  __int128 v39;
  void v40[9];
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<FlowSelector.FlowSelectorKey, (_:)>);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  char v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v36 = v3;
  __int128 v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      uint64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      uint64_t v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }

    uint64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v37) {
      break;
    }
    unint64_t v25 = (void *)(v5 + 64);
    unint64_t v26 = *(void *)(v38 + 8 * v24);
    ++v14;
    if (!v26)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v26 = *(void *)(v38 + 8 * v14);
      if (!v26)
      {
        char v27 = v24 + 2;
        if (v27 >= v37)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = *(void *)(v38 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v14 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v37) {
              goto LABEL_36;
            }
            unint64_t v26 = *(void *)(v38 + 8 * v14);
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v27;
      }
    }

LABEL_33:
    unint64_t v11 = (v26 - 1) & v26;
    uint64_t v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    uint64_t v32 = (char *)(*(void *)(v5 + 48) + 2 * v23);
    int64_t v33 = *v32;
    uint64_t v34 = v32[1];
    uint64_t v39 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v23);
    if ((a2 & 1) == 0) {
      swift_retain(*((void *)&v39 + 1));
    }
    Hasher.init(_seed:)(v40, *(void *)(v8 + 40));
    unint64_t v15 = qword_952F8[v33];
    String.hash(into:)(v40, qword_952A8[v33], v15);
    swift_bridgeObjectRelease(v15);
    unint64_t v16 = qword_95388[v34];
    String.hash(into:)(v40, qword_95348[v34], v16);
    swift_bridgeObjectRelease(v16);
    Swift::Int result = Hasher._finalize()();
    unint64_t v17 = -1LL << *(_BYTE *)(v8 + 32);
    int64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1LL << v18) & ~*(void *)(v12 + 8 * (v18 >> 6))) != 0)
    {
      int64_t v20 = __clz(__rbit64((-1LL << v18) & ~*(void *)(v12 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v28 = 0;
      BOOL v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v30 = v19 == v29;
        if (v19 == v29) {
          unint64_t v19 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v19);
      }

      while (v31 == -1);
      int64_t v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }

    *(void *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    __int128 v21 = (_BYTE *)(*(void *)(v8 + 48) + 2 * v20);
    *__int128 v21 = v33;
    v21[1] = v34;
    *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20) = v39;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  unint64_t v25 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  __int128 v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v25, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v25 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v27, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        Swift::Int result = swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          unint64_t v16 = (_OWORD *)(v15 + 16 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *unint64_t v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          unint64_t v19 = (_OWORD *)(v18 + 32 * v3);
          int64_t v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 2))
          {
            __int128 v9 = v20[1];
            *unint64_t v19 = *v20;
            v19[1] = v9;
            int64_t v3 = v6;
          }
        }

LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    __int128 v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1LL << v3) - 1;
  }

  else
  {
    __int128 v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1LL << result) - 1;
  }

  *__int128 v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  BOOL v25 = __OFSUB__(v24, 1LL);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

  unint64_t v8 = *(void *)(v3 + 16);
  __int128 v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = type metadata accessor for DisplayHint(0LL);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  Swift::Int v13 = *(void *)(v11 + 72);
  unint64_t v14 = v3 + v12 + v13 * v8;
  uint64_t v15 = a1 + v12;
  unint64_t v16 = v13 * v2;
  unint64_t v17 = v14 + v16;
  uint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy(v14);
  if (!v2)
  {
LABEL_19:
    Swift::Int result = swift_bridgeObjectRelease(a1);
    *uint64_t v1 = v3;
    return result;
  }

  int64_t v20 = *(void *)(v3 + 16);
  __int128 v21 = __OFADD__(v20, v2);
  uint64_t v22 = v20 + v2;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
    goto LABEL_19;
  }

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        unint64_t v19 = (void *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_0Tm(v19);
        outlined init with take of Any(a1, v19);
        return;
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }

    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      unint64_t v12 = v20;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  Swift::Int result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    Swift::Int result = (void *)swift_release(v2);
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }

  BOOL v25 = v1;
  Swift::Int result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<FlowSelector.FlowSelectorKey, (_:)>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    Swift::Int result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    char v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      char v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    char v21 = (void *)(*(void *)(v4 + 48) + v16);
    *char v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    Swift::Int result = (void *)swift_bridgeObjectRetain(v18);
  }

  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    Swift::Int result = (void *)swift_release(v2);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 2 * v15;
    uint64_t v17 = *(_WORD *)(*(void *)(v2 + 48) + 2 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(_WORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    Swift::Int result = (void *)swift_retain(*((void *)&v19 + 1));
  }

  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  char v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

LABEL_30:
  __break(1u);
  return result;
}

  Swift::Int result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  swift_bridgeObjectRelease(a1);
  return 1LL;
}

  Swift::Int result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_28:
  __break(1u);
  return result;
}

    uint64_t v17 = 0;
    return v17 & 1;
  }

unint64_t specialized Collection.dropFirst(_:)( unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0) {
      uint64_t v3 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v4 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v4 = 11LL;
    }
    unint64_t v5 = v4 | (v3 << 16);
    Swift::Int result = String.index(_:offsetBy:limitedBy:)(15LL, result, v5, a2, a3);
    if ((v6 & 1) != 0) {
      Swift::Int result = v5;
    }
    if (4 * v3 >= result >> 14) {
      return String.subscript.getter();
    }
  }

  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }

  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined init with take of CATType(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0Tm(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_os_log);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }

  return result;
}

uint64_t sub_1175C()
{
  return swift_deallocObject(v0, 192LL, 7LL);
}

uint64_t outlined init with copy of FlowHelperImpl(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *outlined destroy of FlowHelperImpl(void *a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type LocationServices and conformance LocationServices()
{
  unint64_t result = lazy protocol witness table cache variable for type LocationServices and conformance LocationServices;
  if (!lazy protocol witness table cache variable for type LocationServices and conformance LocationServices)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationServices,  &type metadata for LocationServices);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationServices and conformance LocationServices);
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ShareETA(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v10);
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 1u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        uint64_t v8 = a2[1];
        uint64_t v9 = a2[2];
        a1[1] = v8;
        a1[2] = v9;
        swift_retain(v8);
        swift_storeEnumTagMultiPayload(a1, a3, 1LL);
        break;
      case 2u:
        uint64_t v12 = *a2;
        *a1 = *a2;
        swift_retain(v12);
        swift_storeEnumTagMultiPayload(a1, a3, 2LL);
        break;
      case 3u:
        uint64_t v13 = *a2;
        *a1 = *a2;
        swift_retain(v13);
        unint64_t v15 = (char *)a1 + v14;
        uint64_t v16 = (char *)a2 + v14;
        uint64_t v17 = type metadata accessor for BehaviorAfterSpeaking(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16LL))(v15, v16, v17);
        swift_storeEnumTagMultiPayload(a1, a3, 3LL);
        break;
      case 4u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        uint64_t v19 = (char *)a1 + v18;
        uint64_t v20 = (char *)a2 + v18;
        uint64_t v21 = type metadata accessor for BehaviorAfterSpeaking(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16LL))(v19, v20, v21);
        swift_storeEnumTagMultiPayload(a1, a3, 4LL);
        break;
      case 6u:
        uint64_t v22 = type metadata accessor for BehaviorAfterSpeaking(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v22 - 8) + 16LL))(a1, a2, v22);
        swift_storeEnumTagMultiPayload(a1, a3, 6LL);
        break;
      case 8u:
        uint64_t v23 = *a2;
        *a1 = *a2;
        swift_retain(v23);
        swift_storeEnumTagMultiPayload(a1, a3, 8LL);
        break;
      case 9u:
        uint64_t v24 = type metadata accessor for BehaviorAfterSpeaking(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v24 - 8) + 16LL))(a1, a2, v24);
        swift_storeEnumTagMultiPayload(a1, a3, 9LL);
        break;
      case 0xAu:
        uint64_t v25 = *a2;
        *a1 = *a2;
        swift_retain(v25);
        char v27 = (char *)a1 + v26;
        unint64_t v28 = (char *)a2 + v26;
        uint64_t v29 = type metadata accessor for BehaviorAfterSpeaking(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16LL))(v27, v28, v29);
        swift_storeEnumTagMultiPayload(a1, a3, 10LL);
        break;
      case 0xBu:
        uint64_t v30 = type metadata accessor for BehaviorAfterSpeaking(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v30 - 8) + 16LL))(a1, a2, v30);
        swift_storeEnumTagMultiPayload(a1, a3, 11LL);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

uint64_t destroy for ShareETA(void *a1, uint64_t a2)
{
  __int128 v2 = a1;
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 1:
      uint64_t v4 = v2[1];
      return swift_release(v4);
    case 2:
    case 8:
      uint64_t v4 = *v2;
      return swift_release(v4);
    case 3:
    case 10:
      swift_release(*v2);
      uint64_t v5 = &demangling cache variable for type metadata for (recipient: DialogPerson, behaviourAfterSpeaking: BehaviorAfterSpeaking);
      goto LABEL_7;
    case 4:
      uint64_t v5 = &demangling cache variable for type metadata for (directInvocation: Bool, behaviourAfterSpeaking: BehaviorAfterSpeaking);
LABEL_7:
      __int128 v2 = (void *)((char *)v2 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v5) + 48));
      goto LABEL_8;
    case 6:
    case 9:
    case 11:
LABEL_8:
      uint64_t v6 = type metadata accessor for BehaviorAfterSpeaking(0LL);
      uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v2, v6);
      break;
    default:
      return result;
  }

  return result;
}

void *initializeWithCopy for ShareETA(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 1u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      uint64_t v6 = a2[1];
      uint64_t v7 = a2[2];
      a1[1] = v6;
      a1[2] = v7;
      swift_retain(v6);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
      goto LABEL_12;
    case 2u:
      uint64_t v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 2LL;
      goto LABEL_12;
    case 3u:
      uint64_t v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      uint64_t v14 = (char *)a1 + v13;
      unint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for BehaviorAfterSpeaking(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 3LL;
      goto LABEL_12;
    case 4u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      uint64_t v20 = type metadata accessor for BehaviorAfterSpeaking(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16LL))(v18, v19, v20);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 4LL;
      goto LABEL_12;
    case 6u:
      uint64_t v21 = type metadata accessor for BehaviorAfterSpeaking(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16LL))(a1, a2, v21);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 6LL;
      goto LABEL_12;
    case 8u:
      uint64_t v22 = *a2;
      *a1 = *a2;
      swift_retain(v22);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 8LL;
      goto LABEL_12;
    case 9u:
      uint64_t v23 = type metadata accessor for BehaviorAfterSpeaking(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v23 - 8) + 16LL))(a1, a2, v23);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 9LL;
      goto LABEL_12;
    case 0xAu:
      uint64_t v24 = *a2;
      *a1 = *a2;
      swift_retain(v24);
      uint64_t v26 = (char *)a1 + v25;
      char v27 = (char *)a2 + v25;
      uint64_t v28 = type metadata accessor for BehaviorAfterSpeaking(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16LL))(v26, v27, v28);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 10LL;
      goto LABEL_12;
    case 0xBu:
      uint64_t v29 = type metadata accessor for BehaviorAfterSpeaking(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v29 - 8) + 16LL))(a1, a2, v29);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 11LL;
LABEL_12:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

void *assignWithCopy for ShareETA(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ShareETA((uint64_t)a1, type metadata accessor for ShareETA);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 1u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        uint64_t v6 = a2[1];
        a1[1] = v6;
        a1[2] = a2[2];
        swift_retain(v6);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 1LL;
        goto LABEL_13;
      case 2u:
        uint64_t v10 = *a2;
        *a1 = *a2;
        swift_retain(v10);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 2LL;
        goto LABEL_13;
      case 3u:
        uint64_t v11 = *a2;
        *a1 = *a2;
        swift_retain(v11);
        uint64_t v13 = (char *)a1 + v12;
        uint64_t v14 = (char *)a2 + v12;
        uint64_t v15 = type metadata accessor for BehaviorAfterSpeaking(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 3LL;
        goto LABEL_13;
      case 4u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        uint64_t v17 = (char *)a1 + v16;
        uint64_t v18 = (char *)a2 + v16;
        uint64_t v19 = type metadata accessor for BehaviorAfterSpeaking(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16LL))(v17, v18, v19);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 4LL;
        goto LABEL_13;
      case 6u:
        uint64_t v20 = type metadata accessor for BehaviorAfterSpeaking(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16LL))(a1, a2, v20);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 6LL;
        goto LABEL_13;
      case 8u:
        uint64_t v21 = *a2;
        *a1 = *a2;
        swift_retain(v21);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 8LL;
        goto LABEL_13;
      case 9u:
        uint64_t v22 = type metadata accessor for BehaviorAfterSpeaking(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16LL))(a1, a2, v22);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 9LL;
        goto LABEL_13;
      case 0xAu:
        uint64_t v23 = *a2;
        *a1 = *a2;
        swift_retain(v23);
        uint64_t v25 = (char *)a1 + v24;
        uint64_t v26 = (char *)a2 + v24;
        uint64_t v27 = type metadata accessor for BehaviorAfterSpeaking(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16LL))(v25, v26, v27);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 10LL;
        goto LABEL_13;
      case 0xBu:
        uint64_t v28 = type metadata accessor for BehaviorAfterSpeaking(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v28 - 8) + 16LL))(a1, a2, v28);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 11LL;
LABEL_13:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

uint64_t type metadata accessor for ShareETA(uint64_t a1)
{
  return type metadata accessor for ShareETA( a1,  (uint64_t *)&type metadata singleton initialization cache for ShareETA,  (uint64_t)&nominal type descriptor for ShareETA);
}

void *initializeWithTake for ShareETA(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 3u:
      *a1 = *a2;
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for BehaviorAfterSpeaking(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 3LL;
      goto LABEL_9;
    case 4u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for BehaviorAfterSpeaking(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32LL))(v14, v15, v16);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 4LL;
      goto LABEL_9;
    case 6u:
      uint64_t v17 = type metadata accessor for BehaviorAfterSpeaking(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 32LL))(a1, a2, v17);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 6LL;
      goto LABEL_9;
    case 9u:
      uint64_t v18 = type metadata accessor for BehaviorAfterSpeaking(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 32LL))(a1, a2, v18);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 9LL;
      goto LABEL_9;
    case 0xAu:
      *a1 = *a2;
      uint64_t v20 = (char *)a1 + v19;
      uint64_t v21 = (char *)a2 + v19;
      uint64_t v22 = type metadata accessor for BehaviorAfterSpeaking(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32LL))(v20, v21, v22);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 10LL;
      goto LABEL_9;
    case 0xBu:
      uint64_t v23 = type metadata accessor for BehaviorAfterSpeaking(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v23 - 8) + 32LL))(a1, a2, v23);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 11LL;
LABEL_9:
      swift_storeEnumTagMultiPayload(v10, v11, v12);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

void *assignWithTake for ShareETA(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ShareETA((uint64_t)a1, type metadata accessor for ShareETA);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 3u:
        *a1 = *a2;
        uint64_t v7 = (char *)a1 + v6;
        uint64_t v8 = (char *)a2 + v6;
        uint64_t v9 = type metadata accessor for BehaviorAfterSpeaking(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
        uint64_t v10 = a1;
        uint64_t v11 = a3;
        uint64_t v12 = 3LL;
        goto LABEL_10;
      case 4u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        uint64_t v14 = (char *)a1 + v13;
        uint64_t v15 = (char *)a2 + v13;
        uint64_t v16 = type metadata accessor for BehaviorAfterSpeaking(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32LL))(v14, v15, v16);
        uint64_t v10 = a1;
        uint64_t v11 = a3;
        uint64_t v12 = 4LL;
        goto LABEL_10;
      case 6u:
        uint64_t v17 = type metadata accessor for BehaviorAfterSpeaking(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 32LL))(a1, a2, v17);
        uint64_t v10 = a1;
        uint64_t v11 = a3;
        uint64_t v12 = 6LL;
        goto LABEL_10;
      case 9u:
        uint64_t v18 = type metadata accessor for BehaviorAfterSpeaking(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 32LL))(a1, a2, v18);
        uint64_t v10 = a1;
        uint64_t v11 = a3;
        uint64_t v12 = 9LL;
        goto LABEL_10;
      case 0xAu:
        *a1 = *a2;
        uint64_t v20 = (char *)a1 + v19;
        uint64_t v21 = (char *)a2 + v19;
        uint64_t v22 = type metadata accessor for BehaviorAfterSpeaking(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32LL))(v20, v21, v22);
        uint64_t v10 = a1;
        uint64_t v11 = a3;
        uint64_t v12 = 10LL;
        goto LABEL_10;
      case 0xBu:
        uint64_t v23 = type metadata accessor for BehaviorAfterSpeaking(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v23 - 8) + 32LL))(a1, a2, v23);
        uint64_t v10 = a1;
        uint64_t v11 = a3;
        uint64_t v12 = 11LL;
LABEL_10:
        swift_storeEnumTagMultiPayload(v10, v11, v12);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

uint64_t destructiveInjectEnumTag for ShareETA(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t type metadata completion function for ShareETA(uint64_t a1)
{
  v8[0] = &unk_94BA0;
  v8[1] = &unk_94BB8;
  v8[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for BehaviorAfterSpeaking(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_getTupleTypeLayout2(v7, (char *)&value witness table for Builtin.NativeObject + 64, v4);
    v8[3] = v7;
    swift_getTupleTypeLayout2(v6, &unk_94BD0, v4);
    v8[4] = v6;
    v8[5] = &unk_94BD0;
    v8[6] = v4;
    v8[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v8[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    void v8[9] = v4;
    swift_getTupleTypeLayout2(v5, (char *)&value witness table for Builtin.NativeObject + 64, v4);
    v8[10] = v5;
    v8[11] = v4;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 12LL, v8);
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ContactResolution(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v5);
  }

  else
  {
    swift_retain(v5);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for BehaviorAfterSpeaking(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  }

  return a1;
}

uint64_t destroy for ContactResolution(void *a1)
{
  __int128 v2 = (char *)a1
  uint64_t v3 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
}

uint64_t *initializeWithCopy for ContactResolution(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  swift_retain(v4);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
  return a1;
}

uint64_t *assignWithCopy for ContactResolution(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24LL))(v7, v8, v9);
  return a1;
}

void *initializeWithTake for ContactResolution(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for ContactResolution(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 40LL))(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactResolution(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (recipient: DialogPerson, behaviourAfterSpeaking: BehaviorAfterSpeaking));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ContactResolution(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (recipient: DialogPerson, behaviourAfterSpeaking: BehaviorAfterSpeaking));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(a1, a2, a3, v6);
}

uint64_t type metadata accessor for ContactResolution(uint64_t a1)
{
  return type metadata accessor for ShareETA( a1,  (uint64_t *)&type metadata singleton initialization cache for ContactResolution,  (uint64_t)&nominal type descriptor for ContactResolution);
}

uint64_t type metadata completion function for ContactResolution(uint64_t a1)
{
  uint64_t result = type metadata accessor for BehaviorAfterSpeaking(319LL);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2( v4,  (char *)&value witness table for Builtin.NativeObject + 64,  *(void *)(result - 8) + 64LL);
    swift_initEnumMetadataSingleCase(a1, 256LL, v4);
    uint64_t result = 0LL;
    *(_DWORD *)(*(void *)(a1 - 8) + 84LL) = v4[5];
  }

  return result;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for RetrieveParkingLocation()
{
  return &type metadata for RetrieveParkingLocation;
}

ValueMetadata *type metadata accessor for DeleteParkingLocation()
{
  return &type metadata for DeleteParkingLocation;
}

unint64_t destroy for RetrieveParkingLocation(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_release(result);
    return swift_bridgeObjectRelease(a1[2]);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for RetrieveParkingLocation(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = a2[2];
  }

  else
  {
    uint64_t v4 = a2[1];
    uint64_t v5 = a2[2];
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    swift_retain(v3);
    swift_bridgeObjectRetain(v5);
  }

  return a1;
}

unint64_t *assignWithCopy for RetrieveParkingLocation(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      a1[1] = a2[1];
      unint64_t v8 = a2[2];
      a1[2] = v8;
      swift_retain(v5);
      swift_bridgeObjectRetain(v8);
      return a1;
    }

LABEL_7:
    __int128 v9 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v9;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    swift_release(v4);
    swift_bridgeObjectRelease(a1[2]);
    goto LABEL_7;
  }

  *a1 = v5;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  unint64_t v6 = a2[2];
  unint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    swift_release(v4);
    swift_release(a1[1]);
    goto LABEL_7;
  }

  *a1 = v5;
  swift_retain(v5);
  swift_release(v4);
  unint64_t v6 = a2[1];
  unint64_t v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }

  *a1 = *a2;
  unint64_t v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

unint64_t *assignWithTake for RetrieveParkingLocation(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  if (v4 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (*a2 < 0xFFFFFFFF)
  {
    swift_release(v4);
    swift_bridgeObjectRelease(a1[2]);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    return a1;
  }

  *a1 = *a2;
  swift_release(v4);
  unint64_t v5 = a2[2];
  unint64_t v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for RetrieveParkingLocation(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for RetrieveParkingLocation( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }

  return result;
}

void *destructiveInjectEnumTag for SaveParkingLocation(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0LL;
    result[2] = 0LL;
  }

  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }

  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SaveParkingLocation()
{
  return &type metadata for SaveParkingLocation;
}

void *initializeBufferWithCopyOfBuffer for TrafficIncident(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v10);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 3:
        uint64_t v11 = type metadata accessor for BehaviorAfterSpeaking(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
        swift_storeEnumTagMultiPayload(a1, a3, 3LL);
        break;
      case 2:
        uint64_t v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        swift_bridgeObjectRetain(v12);
        swift_storeEnumTagMultiPayload(a1, a3, 2LL);
        break;
      case 1:
        uint64_t v9 = *a2;
        *a1 = *a2;
        *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
        swift_bridgeObjectRetain(v9);
        swift_storeEnumTagMultiPayload(a1, a3, 1LL);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

uint64_t destroy for TrafficIncident(void *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((_DWORD)result)
  {
    case 3:
      uint64_t v4 = type metadata accessor for BehaviorAfterSpeaking(0LL);
      return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
    case 2:
      return swift_bridgeObjectRelease(a1[1]);
    case 1:
      return swift_bridgeObjectRelease(*a1);
  }

  return result;
}

void *initializeWithCopy for TrafficIncident(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 3:
      uint64_t v8 = type metadata accessor for BehaviorAfterSpeaking(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 3LL);
      break;
    case 2:
      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      swift_bridgeObjectRetain(v9);
      swift_storeEnumTagMultiPayload(a1, a3, 2LL);
      break;
    case 1:
      uint64_t v7 = *a2;
      *a1 = *a2;
      *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
      swift_bridgeObjectRetain(v7);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

void *assignWithCopy for TrafficIncident(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ShareETA((uint64_t)a1, type metadata accessor for TrafficIncident);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 3:
        uint64_t v8 = type metadata accessor for BehaviorAfterSpeaking(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
        swift_storeEnumTagMultiPayload(a1, a3, 3LL);
        break;
      case 2:
        *a1 = *a2;
        uint64_t v9 = a2[1];
        a1[1] = v9;
        swift_bridgeObjectRetain(v9);
        swift_storeEnumTagMultiPayload(a1, a3, 2LL);
        break;
      case 1:
        uint64_t v7 = *a2;
        *a1 = *a2;
        *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
        swift_bridgeObjectRetain(v7);
        swift_storeEnumTagMultiPayload(a1, a3, 1LL);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

uint64_t outlined destroy of ShareETA(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for TrafficIncident(uint64_t a1)
{
  return type metadata accessor for ShareETA( a1,  (uint64_t *)&type metadata singleton initialization cache for TrafficIncident,  (uint64_t)&nominal type descriptor for TrafficIncident);
}

uint64_t type metadata accessor for ShareETA(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

void *initializeWithTake for TrafficIncident(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 3)
  {
    uint64_t v6 = type metadata accessor for BehaviorAfterSpeaking(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 3LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *assignWithTake for TrafficIncident(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ShareETA((uint64_t)a1, type metadata accessor for TrafficIncident);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 3)
    {
      uint64_t v6 = type metadata accessor for BehaviorAfterSpeaking(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 3LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for TrafficIncident(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t storeEnumTagSinglePayload for TrafficIncident(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t type metadata completion function for TrafficIncident(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = "\t";
  v4[2] = &unk_94C90;
  uint64_t result = type metadata accessor for BehaviorAfterSpeaking(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(result - 8) + 64LL;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 4LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Common(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = v3;
  return a1;
}

unint64_t destroy for Common(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

unint64_t *assignWithCopy for Common(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_bridgeObjectRetain(v4);
    }
  }

  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v3);
    *a1 = *a2;
  }

  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRelease(v3);
  }

  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for Common(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  return assignWithTake for Common(a1, a2, a3, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t getEnumTagSinglePayload for Common(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for Common(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Common()
{
  return &type metadata for Common;
}

uint64_t outlined copy of GeoLabel(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_retain(result);
  }
  if (!a3) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for GeoLabel(uint64_t a1)
{
  return outlined consume of GeoLabel(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of GeoLabel(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_release(result);
  }
  if (!a3) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for GeoLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of GeoLabel(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for GeoLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of GeoLabel(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of GeoLabel(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for GeoLabel(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of GeoLabel(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoLabel(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoLabel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 7) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 7) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for GeoLabel(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for GeoLabel(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GeoLabel()
{
  return &type metadata for GeoLabel;
}

unint64_t destroy for LocationSearch(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_release(result);
    return swift_release(a1[1]);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for LocationSearch(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    uint64_t v4 = a2[1];
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    swift_retain(v3);
    swift_retain(v4);
  }

  return a1;
}

unint64_t *assignWithCopy for LocationSearch(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      unint64_t v8 = a2[1];
      a1[1] = v8;
      swift_retain(v5);
      swift_retain(v8);
      return a1;
    }

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

unint64_t *assignWithTake for LocationSearch(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  if (v4 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (*a2 < 0xFFFFFFFF)
  {
    swift_release(v4);
    swift_release(a1[1]);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  *a1 = *a2;
  swift_release(v4);
  unint64_t v5 = a1[1];
  a1[1] = a2[1];
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationSearch(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for LocationSearch(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }

  return result;
}

uint64_t getEnumTag for LocationSearch(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (v1 + 1);
}

void *destructiveInjectEnumTag for LocationSearch(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }

  *__n128 result = v2;
  return result;
}

ValueMetadata *type metadata accessor for LocationSearch()
{
  return &type metadata for LocationSearch;
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigationControl(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = v3;
  return a1;
}

unint64_t destroy for NavigationControl(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_release(result);
  }
  return result;
}

unint64_t *assignWithCopy for NavigationControl(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_retain(v4);
    }
  }

  else if (v4 < 0xFFFFFFFF)
  {
    swift_release(v3);
    *a1 = *a2;
  }

  else
  {
    *a1 = v4;
    swift_retain(v4);
    swift_release(v3);
  }

  return a1;
}

unint64_t *assignWithTake for NavigationControl( unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  return assignWithTake for Common(a1, a2, a3, (void (*)(void))&_swift_release);
}

unint64_t *assignWithTake for Common( unint64_t *a1, unint64_t *a2, uint64_t a3, void (*a4)(void))
{
  unint64_t v5 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v5 < 0xFFFFFFFF)
  {
    a4();
LABEL_5:
    *a1 = v5;
    return a1;
  }

  *a1 = v5;
  a4();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationControl(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NavigationControl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 2;
    }
  }

  return result;
}

void *destructiveInjectEnumTag for NavigationControl(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }

  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }

  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for NavigationControl()
{
  return &type metadata for NavigationControl;
}

uint64_t *initializeBufferWithCopyOfBuffer for Compass(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for Compass(void *a1)
{
  return swift_release(*a1);
}

uint64_t *assignWithCopy for Compass(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t *assignWithTake for Compass(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for Compass(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for Compass(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0LL;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Compass()
{
  return &type metadata for Compass;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for LocationServices(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *((unsigned __int8 *)a1 + 1);
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1E;
  int v8 = v6 - 30;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationServices(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_13D24 + 4 * byte_94A33[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_13D58 + 4 * byte_94A2E[v4]))();
}

uint64_t sub_13D58(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_13D60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x13D68LL);
  }
  return result;
}

uint64_t sub_13D74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x13D7CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_13D80(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_13D88(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for LocationServices(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for LocationServices(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for LocationServices()
{
  return &type metadata for LocationServices;
}

void type metadata accessor for related decl 'e' for AFLocationServiceErrorCode(uint64_t a1)
{
}

uint64_t base witness table accessor for Equatable in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode,  (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode,  (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t base witness table accessor for Error in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode,  (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode,  (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t base witness table accessor for CustomNSError in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode,  (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode,  (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t base witness table accessor for _ObjectiveCBridgeableError in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode,  (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode,  (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t base witness table accessor for Hashable in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode,  (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode,  (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t associated type witness table accessor for _BridgedStoredNSError.Code : _ErrorCodeProtocol in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type AFLocationServiceErrorCode and conformance AFLocationServiceErrorCode,  (uint64_t (*)(uint64_t))type metadata accessor for AFLocationServiceErrorCode,  (uint64_t)&protocol conformance descriptor for AFLocationServiceErrorCode);
}

void type metadata accessor for AFLocationServiceErrorCode(uint64_t a1)
{
}

uint64_t associated type witness table accessor for _BridgedStoredNSError.Code : RawRepresentable in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type AFLocationServiceErrorCode and conformance AFLocationServiceErrorCode,  (uint64_t (*)(uint64_t))type metadata accessor for AFLocationServiceErrorCode,  (uint64_t)&protocol conformance descriptor for AFLocationServiceErrorCode);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }

  return result;
}

uint64_t base witness table accessor for Equatable in AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type AFLocationServiceErrorCode and conformance AFLocationServiceErrorCode,  (uint64_t (*)(uint64_t))type metadata accessor for AFLocationServiceErrorCode,  (uint64_t)&protocol conformance descriptor for AFLocationServiceErrorCode);
}

uint64_t associated type witness table accessor for _ErrorCodeProtocol._ErrorType : _BridgedStoredNSError in AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode,  (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode,  (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
}

unint64_t outlined copy of NavigationControl(unint64_t result)
{
  if (result >= 3) {
    return swift_retain(result);
  }
  return result;
}

uint64_t outlined copy of LocationSearch(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_retain(result);
    return swift_retain(a2);
  }

  return result;
}

unint64_t outlined copy of Common(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRetain(result);
  }
  return result;
}

uint64_t outlined copy of SaveParkingLocation(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_retain(result);
    return swift_bridgeObjectRetain(a3);
  }

  return result;
}

uint64_t outlined init with copy of TrafficIncident(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<INIntentSlotValueType, String>);
  int v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  Swift::UInt v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v6);
    return (unint64_t)v3;
  }

  uint64_t v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(void *)(v3[6] + 8 * result) = v4;
    uint64_t v10 = (void *)(v3[7] + 16 * result);
    void *v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v14 = v9 + 3;
    Swift::UInt v4 = *(v9 - 2);
    uint64_t v5 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain(v6);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    uint64_t v9 = v14;
    uint64_t v6 = v15;
    if ((v16 & 1) != 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

uint64_t lazy protocol witness table accessor for type TerminalOntologyNode<LocationSearchIntent.LocationSearchIncidentTypeValue> and conformance TerminalOntologyNode<A>( unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for TerminalOntologyNode<A>, v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t outlined init with copy of Mirror.DisplayStyle?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of (label: String?, value: Any)?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

void type metadata accessor for INTrafficIncidentType(uint64_t a1)
{
}

void type metadata accessor for INPersonHandleLabel(uint64_t a1)
{
}

void type metadata accessor for INIntentSlotValueType(uint64_t a1)
{
}

void type metadata accessor for related decl 'e' for AFLocationServiceErrorCode( uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t base witness table accessor for Equatable in INIntentSlotValueType()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type INIntentSlotValueType and conformance INIntentSlotValueType,  (uint64_t (*)(uint64_t))type metadata accessor for INIntentSlotValueType,  (uint64_t)&protocol conformance descriptor for INIntentSlotValueType);
}

uint64_t base witness table accessor for RawRepresentable in INPersonHandleLabel()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type INPersonHandleLabel and conformance INPersonHandleLabel,  (uint64_t (*)(uint64_t))type metadata accessor for INPersonHandleLabel,  (uint64_t)&protocol conformance descriptor for INPersonHandleLabel);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in INPersonHandleLabel()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type INPersonHandleLabel and conformance INPersonHandleLabel,  (uint64_t (*)(uint64_t))type metadata accessor for INPersonHandleLabel,  (uint64_t)&protocol conformance descriptor for INPersonHandleLabel);
}

uint64_t base witness table accessor for Equatable in INPersonHandleLabel()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type INPersonHandleLabel and conformance INPersonHandleLabel,  (uint64_t (*)(uint64_t))type metadata accessor for INPersonHandleLabel,  (uint64_t)&protocol conformance descriptor for INPersonHandleLabel);
}

uint64_t base witness table accessor for Equatable in INTrafficIncidentType()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type INTrafficIncidentType and conformance INTrafficIncidentType,  (uint64_t (*)(uint64_t))type metadata accessor for INTrafficIncidentType,  (uint64_t)&protocol conformance descriptor for INTrafficIncidentType);
}

void AnswerETAIntentResponse.code.setter()
{
}

uint64_t FlowHelperImpl.device.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1, a1);
}

uint64_t FlowHelperImpl.device.setter(__int128 *a1)
{
  return outlined init with take of CATType(a1, (uint64_t)v1);
}

uint64_t (*FlowHelperImpl.device.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t FlowHelperImpl.rchFlowFactory.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 40, a1);
}

uint64_t FlowHelperImpl.rchFlowFactory.setter(__int128 *a1)
{
  uint64_t v3 = (void *)(v1 + 40);
  __swift_destroy_boxed_opaque_existential_0Tm(v3);
  return outlined init with take of CATType(a1, (uint64_t)v3);
}

uint64_t (*FlowHelperImpl.rchFlowFactory.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t FlowHelperImpl.catGlobals.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 80));
}

uint64_t FlowHelperImpl.catGlobals.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 80));
  *(void *)(v1 + 80) = a1;
  return result;
}

uint64_t (*FlowHelperImpl.catGlobals.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t FlowHelperImpl.aceService.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 88, a1);
}

uint64_t FlowHelperImpl.aceService.setter(__int128 *a1)
{
  uint64_t v3 = (void *)(v1 + 88);
  __swift_destroy_boxed_opaque_existential_0Tm(v3);
  return outlined init with take of CATType(a1, (uint64_t)v3);
}

uint64_t (*FlowHelperImpl.aceService.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t FlowHelperImpl.outputPublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 128, a1);
}

uint64_t outlined init with copy of DeviceState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t FlowHelperImpl.outputPublisher.setter(__int128 *a1)
{
  uint64_t v3 = (void *)(v1 + 128);
  __swift_destroy_boxed_opaque_existential_0Tm(v3);
  return outlined init with take of CATType(a1, (uint64_t)v3);
}

uint64_t (*FlowHelperImpl.outputPublisher.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t FlowHelperImpl.catService.getter()
{
  return swift_retain(*(void *)(v0 + 168));
}

uint64_t FlowHelperImpl.catService.setter(uint64_t a1)
{
  uint64_t result = swift_release(*(void *)(v1 + 168));
  *(void *)(v1 + 168) = a1;
  return result;
}

uint64_t (*FlowHelperImpl.catService.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t one-time initialization function for instance()
{
  return FlowHelperImpl.init()(static FlowHelperImpl.instance);
}

uint64_t FlowHelperImpl.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GeoRCHFlowFactoryImpl();
  uint64_t v3 = swift_allocObject(v2, 16LL, 7LL);
  a1[8] = v2;
  a1[9] = &protocol witness table for GeoRCHFlowFactoryImpl;
  a1[5] = v3;
  a1[10] = static DialogHelper.globals.getter();
  uint64_t v4 = static AceService.currentAsync.getter();
  static OutputPublisherFactory.makeOutputPublisherAsync()(v4);
  uint64_t v5 = type metadata accessor for CATService();
  uint64_t v6 = swift_allocObject(v5, 40LL, 7LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v5);
  *(void *)(v6 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(void *)(v6 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = result;
  *(_BYTE *)(v6 + 16) = 0;
  a1[21] = v6;
  return result;
}

void *FlowHelperImpl.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  return static FlowHelperImpl.instance;
}

uint64_t static FlowHelperImpl.instance.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  return outlined init with copy of FlowHelperImpl((uint64_t)static FlowHelperImpl.instance, a1);
}

uint64_t default argument 5 of FlowHelperImpl.init(device:rchFlowFactory:catGlobals:aceService:outputPublisher:catService:)()
{
  uint64_t v0 = type metadata accessor for CATService();
  uint64_t v1 = swift_allocObject(v0, 40LL, 7LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  *(void *)(v1 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  type metadata accessor for OS_os_log();
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v1 + 16) = 0;
  return v1;
}

uint64_t FlowHelperImpl.init(device:rchFlowFactory:catGlobals:aceService:outputPublisher:catService:)@<X0>( __int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)(a7 + 80) = a3;
  outlined init with take of CATType(a4, a7 + 88);
  uint64_t result = outlined init with take of CATType(a5, a7 + 128);
  *(void *)(a7 + 168) = a6;
  return result;
}

uint64_t FlowHelper.makeDialogOnlyOutput(model:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[15] = a4;
  v5[16] = v4;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v5[17] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for TemplatingResult(0LL);
  v5[18] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[19] = v8;
  v5[20] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(FlowHelper.makeDialogOnlyOutput(model:), 0LL, 0LL);
}

uint64_t FlowHelper.makeDialogOnlyOutput(model:)()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[14];
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 128))(v2, v1);
  v0[21] = v3;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 80))(v2, v1);
  v0[22] = v4;
  uint64_t v5 = *(int **)(*(void *)v3 + 112LL);
  uint64_t v8 = (int *)((char *)v5 + *v5);
  uint64_t v6 = (void *)swift_task_alloc(v5[1]);
  v0[23] = v6;
  void *v6 = v0;
  v6[1] = FlowHelper.makeDialogOnlyOutput(model:);
  return ((uint64_t (*)(void, void, uint64_t))v8)(v0[20], v0[13], v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 184);
  *(void *)(*v1 + 19__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = FlowHelper.makeDialogOnlyOutput(model:);
  }

  else
  {
    uint64_t v5 = *(void *)(v2 + 168);
    swift_bridgeObjectRelease(*(void *)(v2 + 176));
    swift_release(v5);
    uint64_t v4 = FlowHelper.makeDialogOnlyOutput(model:);
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v5 = *(void **)(v0 + 96);
  (*(void (**)(void))(*(void *)(v0 + 120) + 32LL))(*(void *)(v0 + 112));
  uint64_t v6 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v4, 1LL, 1LL, v6);
  uint64_t v7 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v0 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0u;
  *(void *)(v0 + 88) = 0LL;
  *(_OWORD *)(v0 + 56) = 0u;
  v5[3] = v7;
  v5[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_0(v5);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v1,  v0 + 16,  1LL,  _swiftEmptyArrayStorage,  0LL,  1LL,  v4,  _swiftEmptyArrayStorage,  v0 + 56);
  outlined destroy of (label: String?, value: Any)?( v0 + 56,  &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (label: String?, value: Any)?( v4,  &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v8 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 168);
  swift_bridgeObjectRelease(*(void *)(v0 + 176));
  swift_release(v2);
  type metadata accessor for EmptyOutput(0LL);
  static EmptyOutput.instance.getter();
  swift_errorRelease(v1);
  uint64_t v3 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t initializeBufferWithCopyOfBuffer for FlowHelperImpl(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for FlowHelperImpl(void *a1)
{
  return swift_release(a1[21]);
}

uint64_t initializeWithCopy for FlowHelperImpl(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 80) = v6;
  __int128 v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain(v6);
  v9(a1 + 88, a2 + 88, v8);
  __int128 v10 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 128, a2 + 128);
  uint64_t v11 = *(void *)(a2 + 168);
  *(void *)(a1 + 168) = v11;
  swift_retain(v11);
  return a1;
}

void *assignWithCopy for FlowHelperImpl(void *a1, void *a2)
{
  uint64_t v4 = a2[10];
  uint64_t v5 = a1[10];
  a1[10] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  __swift_assign_boxed_opaque_existential_1(a1 + 11, a2 + 11);
  __swift_assign_boxed_opaque_existential_1(a1 + 16, a2 + 16);
  uint64_t v6 = a2[21];
  uint64_t v7 = a1[21];
  a1[21] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

void *__swift_assign_boxed_opaque_existential_1(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        uint64_t result = (void *)swift_release(v11);
        *uint64_t v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

__n128 __swift_memcpy176_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v3;
  *(_OWORD *)a1 = v2;
  __int128 v4 = a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  __int128 v8 = a2[8];
  __int128 v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for FlowHelperImpl(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 80);
  uint64_t v6 = *(void *)(a1 + 80);
  *(void *)(a1 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  swift_bridgeObjectRelease(v6);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(a1 + 88));
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(a1 + 128));
  __int128 v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  uint64_t v8 = *(void *)(a2 + 168);
  uint64_t v9 = *(void *)(a1 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v8;
  swift_release(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for FlowHelperImpl(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 176)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FlowHelperImpl(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0LL;
    *(_OWORD *)(result + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 176) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 176) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FlowHelperImpl()
{
  return &type metadata for FlowHelperImpl;
}

id GeoFlowDelegatePlugin.logObject.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t GeoFlowDelegatePlugin.flowSelector.getter()
{
  return swift_retain(*(void *)(v0 + 24));
}

uint64_t GeoFlowDelegatePlugin.flowSelector.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  *(void *)(v1 + 24) = a1;
  return swift_release(v3);
}

uint64_t (*GeoFlowDelegatePlugin.flowSelector.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t ShareETAPromptForContactStrategy.weightedPromptResponseTargets.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 32));
}

uint64_t ShareETAPromptForContactStrategy.locationSearchIntent.getter()
{
  return swift_retain(*(void *)(v0 + 40));
}

uint64_t ShareETAPromptForContactStrategy.locationSearchIntent.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  *(void *)(v1 + 40) = a1;
  return swift_release(v3);
}

uint64_t (*ShareETAPromptForContactStrategy.locationSearchIntent.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t ShareETAPromptForContactStrategy.directInvocation.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t ShareETAPromptForContactStrategy.directInvocation.setter(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 48, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 48) = a1;
  return result;
}

uint64_t (*ShareETAPromptForContactStrategy.directInvocation.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t ShareETAPromptForContactStrategy.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 56;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return outlined init with copy of DeviceState(v3, a1);
}

uint64_t ShareETAPromptForContactStrategy.flowHelper.setter(__int128 *a1)
{
  uint64_t v3 = (void *)(v1 + 56);
  swift_beginAccess(v3, v5, 33LL, 0LL);
  __swift_destroy_boxed_opaque_existential_0Tm(v3);
  outlined init with take of CATType(a1, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t (*ShareETAPromptForContactStrategy.flowHelper.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t ShareETAPromptForContactStrategy.isPOMMES.getter()
{
  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t ShareETAPromptForContactStrategy.isPOMMES.setter(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 96, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 96) = a1;
  return result;
}

uint64_t (*ShareETAPromptForContactStrategy.isPOMMES.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t ShareETAPromptForContactStrategy.catModel.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ShareETA( v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin32ShareETAPromptForContactStrategy_catModel,  a1);
}

uint64_t outlined init with copy of ShareETA(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShareETA(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t ShareETAPromptForContactStrategy.__allocating_init(isPommes:directInvocation:flowHelper:)( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = type metadata accessor for ShareETA(0LL);
  __chkstk_darwin();
  uint64_t v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  outlined init with copy of DeviceState((uint64_t)a3, (uint64_t)v16);
  *uint64_t v9 = a2;
  uint64_t v11 = enum case for BehaviorAfterSpeaking.listen(_:);
  uint64_t v12 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104LL))(v10, v11, v12);
  swift_storeEnumTagMultiPayload(v9, v7, 4LL);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _BYTE *))(v3 + 264))(a1, a2, v16, v9);
  __swift_destroy_boxed_opaque_existential_0Tm(a3);
  return v13;
}

uint64_t ShareETAPromptForContactStrategy.__allocating_init(isPommes:directInvocation:flowHelper:catModel:)( char a1, char a2, __int128 *a3, uint64_t a4)
{
  uint64_t v9 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  ShareETAPromptForContactStrategy.init(isPommes:directInvocation:flowHelper:catModel:)(a1, a2, a3, a4);
  return v9;
}

uint64_t ShareETAPromptForContactStrategy.init(isPommes:directInvocation:flowHelper:catModel:)( char a1, char a2, __int128 *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  *(void *)(v4 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000020LL,  0x8000000000095430LL);
  uint64_t v10 = type metadata accessor for CATService();
  uint64_t v11 = swift_allocObject(v10, 40LL, 7LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v10);
  *(void *)(v11 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  *(void *)(v11 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v11 + 16) = 0;
  *(void *)(v4 + 24) = v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v14 = swift_allocObject(v13, 80LL, 7LL);
  *(_OWORD *)(v14 + 16) = xmmword_949B0;
  uint64_t v15 = type metadata accessor for AddressOntologyNode.OccupantNode(0LL);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  uint64_t v16 = AddressOntologyNode.OccupantNode.init(name:multicardinal:)(0x746E61707563636FLL, 0xE800000000000000LL, 0LL);
  unint64_t v17 = specialized OntologyNode.javaClassName.getter();
  uint64_t v19 = v18;
  uint64_t v20 = swift_release(v16);
  *(void *)(v14 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v17;
  *(void *)(v14 + 40) = v19;
  uint64_t v21 = static AddressOntologyNode.OccupantNode.occupantFullNameNode.getter(v20);
  unint64_t v22 = specialized OntologyNode.javaClassName.getter();
  uint64_t v24 = v23;
  swift_release(v21);
  *(void *)(v14 + 48) = v22;
  *(void *)(v14 + 56) = v24;
  if (one-time initialization token for confirmationNode != -1) {
    swift_once( &one-time initialization token for confirmationNode,  one-time initialization function for confirmationNode);
  }
  uint64_t v25 = static LocationSearchIntent.confirmationNode;
  swift_retain(static LocationSearchIntent.confirmationNode);
  unint64_t v26 = specialized OntologyNode.javaClassName.getter();
  uint64_t v28 = v27;
  swift_release(v25);
  *(void *)(v14 + 64) = v26;
  *(void *)(v14 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v28;
  *(void *)(v5 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v14;
  *(void *)(v5 + 40) = 0LL;
  *(_BYTE *)(v5 + 48) = 0;
  *(_BYTE *)(v5 + 96) = 0;
  swift_beginAccess(v5 + 96, v31, 1LL, 0LL);
  *(_BYTE *)(v5 + 96) = a1 & 1;
  swift_beginAccess(v5 + 48, &v30, 1LL, 0LL);
  *(_BYTE *)(v5 + 48) = a2 & 1;
  outlined init with take of CATType(a3, v5 + 56);
  outlined init with take of ShareETA( a4,  v5 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin32ShareETAPromptForContactStrategy_catModel);
  return v5;
}

uint64_t ShareETAPromptForContactStrategy.actionForInput(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v59 = a2;
  uint64_t v5 = type metadata accessor for Parse(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (id *)((char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = type metadata accessor for Input(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (os_log_s *)v3[2];
  uint64_t v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v13, v15))
  {
    unint64_t v57 = v8;
    uint64_t v16 = swift_slowAlloc(12LL, -1LL);
    uint64_t v58 = v5;
    unint64_t v17 = (uint8_t *)v16;
    uint64_t v55 = swift_slowAlloc(32LL, -1LL);
    uint64_t v61 = v55;
    uint64_t v56 = v6;
    *(_DWORD *)unint64_t v17 = 136315138;
    uint64_t v54 = v17 + 4;
    unint64_t v18 = lazy protocol witness table accessor for type Input and conformance Input();
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter(v9, v18);
    uint64_t v20 = a1;
    uint64_t v21 = v3;
    unint64_t v23 = v22;
    uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v22, &v61);
    uint64_t v6 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61);
    unint64_t v24 = v23;
    uint64_t v3 = v21;
    a1 = v20;
    uint64_t v8 = v57;
    swift_bridgeObjectRelease(v24);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    _os_log_impl(&dword_0, v13, v15, "actionForInput %s", v17, 0xCu);
    uint64_t v25 = v55;
    swift_arrayDestroy(v55, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    unint64_t v26 = v17;
    uint64_t v5 = v58;
    uint64_t v27 = swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {
    uint64_t v27 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  uint64_t v28 = v13;
  Input.parse.getter(v27);
  uint64_t v29 = (*(uint64_t (**)(id *, uint64_t))(v6 + 88))(v8, v5);
  if ((_DWORD)v29 == enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v37 = static os_log_type_t.info.getter( v29,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v54,  v55,  v56,  v57,  v58,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  vars0);
    char v38 = "SiriGeo received supported parse type: NLv3Only.";
    uint64_t v39 = v13;
    uint64_t v40 = 48LL;
  }

  else
  {
    int v41 = v29;
    if ((_DWORD)v29 == enum case for Parse.directInvocation(_:))
    {
      uint64_t v37 = static os_log_type_t.info.getter( v29,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v54,  v55,  v56,  v57,  v58,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  vars0);
      char v38 = "SiriGeo received supported parse type: directInvocation.";
      uint64_t v39 = v28;
      uint64_t v40 = 56LL;
    }

    else
    {
      if ((_DWORD)v29 == enum case for Parse.pommesResponse(_:))
      {
        (*(void (**)(id *, uint64_t))(v6 + 96))(v8, v5);

        uint64_t v50 = static os_log_type_t.info.getter( v42,  v43,  v44,  v45,  v46,  v47,  v48,  v49,  v54,  v55,  v56,  v57,  v58,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  vars0);
        os_log(_:dso:log:_:_:)( v50,  &dword_0,  v28,  "SiriGeo received supported parse type: POMMES.",  46LL,  2LL,  &_swiftEmptyArrayStorage);
        return (*(uint64_t (**)(uint64_t))(*v3 + 280LL))(a1);
      }

      int v52 = enum case for Parse.uso(_:);
      uint64_t v37 = static os_log_type_t.info.getter( v29,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v54,  v55,  v56,  v57,  v58,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  vars0);
      if (v41 != v52)
      {
        uint64_t v53 = os_log(_:dso:log:_:_:)( v37,  &dword_0,  v28,  "SiriGeo received unsupported parse type.",  40LL,  2LL,  &_swiftEmptyArrayStorage);
        static ActionForInput.ignore()(v53);
        return (*(uint64_t (**)(id *, uint64_t))(v6 + 8))(v8, v5);
      }

      char v38 = "SiriGeo received supported parse type: USO.";
      uint64_t v39 = v28;
      uint64_t v40 = 43LL;
    }
  }

  os_log(_:dso:log:_:_:)(v37, &dword_0, v39, v38, v40, 2LL, &_swiftEmptyArrayStorage);
  (*(void (**)(uint64_t))(*v3 + 280LL))(a1);
  return (*(uint64_t (**)(id *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t ShareETAPromptForContactStrategy.handleParse(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v66 = a2;
  uint64_t v5 = type metadata accessor for Input(0LL);
  uint64_t v67 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v63 - v8;
  uint64_t v10 = type metadata accessor for Parse(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for GeoParse();
  Input.parse.getter(v14);
  static GeoParse.getDomainIntent(parse:)((uint64_t)v13, (uint64_t)&v74);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  outlined init with copy of GeoIntent?((uint64_t)&v74, (uint64_t)&v69);
  if (!v72)
  {
    uint64_t v17 = outlined destroy of (label: String?, value: Any)?( (uint64_t)&v69,  &demangling cache variable for type metadata for GeoIntent?);
    goto LABEL_7;
  }

  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeoIntent);
  uint64_t v16 = type metadata accessor for LocationSearchIntent(0LL);
  uint64_t v17 = swift_dynamicCast(&v68, &v69, v15, v16, 6LL);
  if ((v17 & 1) == 0)
  {
LABEL_7:
    uint64_t v47 = v5;
    os_log_type_t v48 = static os_log_type_t.info.getter( v17,  v18,  v19,  v20,  v21,  v22,  v23,  v24,  v63,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75,  v76,  v77,  v78,  v79,  v80,  v81);
    uint64_t v49 = (os_log_s *)v3[2];
    uint64_t v50 = v67;
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v7, a1, v47);
    os_log_type_t v51 = v48;
    if (os_log_type_enabled(v49, v48))
    {
      uint64_t v52 = swift_slowAlloc(12LL, -1LL);
      uint64_t v65 = v47;
      uint64_t v53 = (uint8_t *)v52;
      uint64_t v54 = swift_slowAlloc(32LL, -1LL);
      uint64_t v69 = v54;
      *(_DWORD *)uint64_t v53 = 136315138;
      Input.parse.getter(v54);
      uint64_t v55 = String.init<A>(describing:)(v13, v10);
      unint64_t v57 = v56;
      uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
      swift_bridgeObjectRelease(v57);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v7, v65);
      _os_log_impl(&dword_0, v49, v51, "ignoring parse %s as it is not LocationSearchIntent", v53, 0xCu);
      swift_arrayDestroy(v54, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1LL, -1LL);
      uint64_t v58 = swift_slowDealloc(v53, -1LL, -1LL);
    }

    else
    {
      uint64_t v58 = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v7, v47);
    }

    static ActionForInput.ignore()(v58);
    return outlined destroy of (label: String?, value: Any)?( (uint64_t)&v74,  &demangling cache variable for type metadata for GeoIntent?);
  }

  uint64_t v25 = v68;
  uint64_t v26 = (*(uint64_t (**)(void))(*(void *)v68 + 152LL))();
  if (v26 == 2)
  {
    os_log_type_t v34 = static os_log_type_t.info.getter( v26,  v27,  v28,  v29,  v30,  v31,  v32,  v33,  v63,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75,  v76,  v77,  v78,  v79,  v80,  v81);
    uint64_t v35 = v9;
    uint64_t v36 = (os_log_s *)v3[2];
    uint64_t v37 = v67;
    uint64_t v38 = v5;
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v35, a1, v5);
    os_log_type_t v39 = v34;
    os_log_t v64 = v36;
    if (os_log_type_enabled(v36, v34))
    {
      uint64_t v65 = v38;
      uint64_t v40 = v37;
      int v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v42 = swift_slowAlloc(32LL, -1LL);
      uint64_t v69 = v42;
      *(_DWORD *)int v41 = 136315138;
      uint64_t v63 = v41 + 4;
      Input.parse.getter(v42);
      uint64_t v43 = String.init<A>(describing:)(v13, v10);
      unint64_t v45 = v44;
      uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
      swift_bridgeObjectRelease(v45);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v35, v65);
      _os_log_impl(&dword_0, v64, v39, "cancelling for parse %s", v41, 0xCu);
      swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1LL, -1LL);
      uint64_t v46 = swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
      uint64_t v46 = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v35, v38);
    }

    static ActionForInput.cancel()(v46);
  }

  else
  {
    uint64_t v59 = *(uint64_t (**)(uint64_t))(*v3 + 176LL);
    uint64_t v60 = swift_retain(v25);
    uint64_t v61 = v59(v60);
    static ActionForInput.handle()(v61);
  }

  swift_release(v25);
  return outlined destroy of (label: String?, value: Any)?( (uint64_t)&v74,  &demangling cache variable for type metadata for GeoIntent?);
}

uint64_t ShareETAPromptForContactStrategy.parseValueResponse(input:)(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OccupantIntentNode?);
  v2[5] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Input(0LL);
  v2[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[7] = v5;
  v2[8] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(ShareETAPromptForContactStrategy.parseValueResponse(input:), 0LL, 0LL);
}

#error "162E4: call analysis failed (funcsize=186)"
uint64_t ShareETAPromptForContactStrategy.makePromptForValue()(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  v2[40] = a1;
  v2[41] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[42] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v2[43] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for ActivityType(0LL);
  v2[44] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[45] = v6;
  v2[46] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for PommesContext.Source(0LL);
  v2[47] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[48] = v8;
  v2[49] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  v2[50] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_SystemPrompted(0LL);
  v2[51] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[52] = v11;
  uint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[53] = swift_task_alloc(v12);
  v2[54] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for NLContextUpdate(0LL);
  v2[55] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v2[56] = v14;
  uint64_t v15 = (*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[57] = swift_task_alloc(v15);
  v2[58] = swift_task_alloc(v15);
  uint64_t v16 = type metadata accessor for TemplatingResult(0LL);
  v2[59] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v2[60] = v17;
  v2[61] = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(ShareETAPromptForContactStrategy.makePromptForValue(), 0LL, 0LL);
}

uint64_t ShareETAPromptForContactStrategy.makePromptForValue()()
{
  uint64_t v1 = v0[41];
  uint64_t v2 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin32ShareETAPromptForContactStrategy_catModel;
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 144LL))();
  v0[62] = v3;
  v0[5] = type metadata accessor for ShareETA(0LL);
  v0[6] = &protocol witness table for ShareETA;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v0 + 2);
  uint64_t v5 = outlined init with copy of ShareETA(v2, (uint64_t)boxed_opaque_existential_0);
  uint64_t v6 = *(void (**)(uint64_t))(*(void *)v1 + 216LL);
  v0[63] = v6;
  v6(v5);
  uint64_t v7 = v0[10];
  uint64_t v8 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 80))(v7, v8);
  v0[64] = v9;
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 7);
  uint64_t v10 = *(int **)(*(void *)v3 + 112LL);
  uint64_t v13 = (int *)((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc(v10[1]);
  v0[65] = v11;
  *uint64_t v11 = v0;
  v11[1] = ShareETAPromptForContactStrategy.makePromptForValue();
  return ((uint64_t (*)(void, void *, uint64_t))v13)(v0[61], v0 + 2, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 520LL);
  *(void *)(*(void *)v1 + 528LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[62];
    swift_bridgeObjectRelease(v2[64]);
    swift_release(v4);
    uint64_t v5 = ShareETAPromptForContactStrategy.makePromptForValue();
  }

  else
  {
    uint64_t v6 = v2[64];
    swift_release(v2[62]);
    swift_bridgeObjectRelease(v6);
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 2);
    uint64_t v5 = ShareETAPromptForContactStrategy.makePromptForValue();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v1 = *(void *)(v0 + 488);
  uint64_t v3 = *(void *)(v0 + 456);
  uint64_t v2 = *(void *)(v0 + 464);
  uint64_t v5 = *(void *)(v0 + 424);
  uint64_t v4 = *(void *)(v0 + 432);
  uint64_t v7 = *(void *)(v0 + 392);
  uint64_t v6 = *(void *)(v0 + 400);
  uint64_t v8 = *(void *)(v0 + 368);
  uint64_t v9 = *(void *)(v0 + 344);
  uint64_t v11 = *(void *)(v0 + 336);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id ShareETAPromptForContactStrategy.makePromptForValue()()
{
  uint64_t v1 = (void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 328);
  BOOL v3 = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  BOOL v128 = v3;
  os_log_type_t v11 = static os_log_type_t.info.getter(v3, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = *(os_log_s **)(v2 + 16);
  os_log_type_t v13 = v11;
  uint64_t v14 = os_log_type_enabled(v12, v11);
  if ((_DWORD)v14)
  {
    uint64_t v15 = *(void *)(v0 + 328);
    swift_retain(v15);
    uint64_t v16 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v16 = 67109120;
    *(_DWORD *)(v0 + 536) = (*(uint64_t (**)(void))(*(void *)v15 + 192LL))() & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 536, v0 + 540);
    swift_release(v15);
    _os_log_impl(&dword_0, v12, v13, "directInvocation: %{BOOL}d", v16, 8u);
    uint64_t v14 = swift_slowDealloc(v16, -1LL, -1LL);
  }

  uint64_t v17 = *(void *)(v0 + 328);
  uint64_t v18 = NLContextUpdate.init()(v14);
  char v19 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 192LL))(v18);
  uint64_t v20 = *(void *)(v0 + 464);
  if ((v19 & 1) != 0)
  {
    uint64_t v21 = *(void *)(v0 + 432);
    uint64_t v22 = *(void *)(v0 + 416);
    uint64_t v123 = *(void *)(v0 + 424);
    uint64_t v125 = *(void *)(v0 + 408);
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
    uint64_t v24 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL) - 8);
    uint64_t v25 = swift_allocObject( v23,  ((*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))
          + *(void *)(v24 + 72),
            *(unsigned __int8 *)(v24 + 80) | 7LL);
    *(_OWORD *)(v25 + 16) = xmmword_95430;
    uint64_t v26 = type metadata accessor for UsoTaskBuilder_noVerb_common_Person(0LL);
    swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    uint64_t v27 = UsoTaskBuilder_noVerb_common_Person.init()();
    uint64_t v28 = type metadata accessor for UsoEntityBuilder_common_Person(0LL);
    swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
    uint64_t v29 = UsoEntityBuilder_common_Person.init()();
    dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
    uint64_t v30 = static Siri_Nlu_External_SystemPrompted.from(_:)(v27, v21);
    Siri_Nlu_External_SystemDialogAct.init()(v30);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v123, v21, v125);
    Siri_Nlu_External_SystemDialogAct.prompted.setter(v123);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v125);
    swift_release(v29);
    uint64_t v31 = v27;
    uint64_t v1 = (void *)(v0 + 96);
    swift_release(v31);
    uint64_t v32 = NLContextUpdate.nluSystemDialogActs.setter(v25);
  }

  else
  {
    uint64_t v34 = *(void *)(v0 + 448);
    uint64_t v33 = *(void *)(v0 + 456);
    uint64_t v35 = *(void *)(v0 + 440);
    static GeoNLContextUtils.makeNLContextFor(weightedPromptResponseTargets:)(*(void *)(*(void *)(v0 + 328) + 32LL));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 40))(v20, v33, v35);
    uint64_t v36 = type metadata accessor for MachineUtteranceBuilder(0LL);
    swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
    uint64_t v37 = MachineUtteranceBuilder.init()();
    if (one-time initialization token for nounNode != -1) {
      swift_once(&one-time initialization token for nounNode, one-time initialization function for nounNode);
    }
    uint64_t v126 = v0 + 312;
    uint64_t v38 = TerminalOntologyNode.name.getter();
    uint64_t v40 = v39;
    uint64_t v41 = dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)(v38);
    swift_bridgeObjectRelease(v40);
    swift_release(v37);
    if (one-time initialization token for verbNode != -1) {
      swift_once(&one-time initialization token for verbNode, one-time initialization function for verbNode);
    }
    uint64_t v42 = TerminalOntologyNode.name.getter();
    uint64_t v44 = v43;
    uint64_t v45 = dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)(v42);
    swift_bridgeObjectRelease(v44);
    uint64_t v46 = swift_release(v41);
    uint64_t v47 = dispatch thunk of MachineUtteranceBuilder.build()(v46);
    uint64_t v49 = v48;
    swift_release(v45);
    uint64_t v50 = NLContextUpdate.nlInput.setter(v47, v49);
    os_log_type_t v58 = static os_log_type_t.info.getter(v50, v51, v52, v53, v54, v55, v56, v57);
    uint64_t v59 = os_log_type_enabled(v12, v58);
    if ((_DWORD)v59)
    {
      uint64_t v60 = *(void *)(v0 + 328);
      swift_retain_n(v60, 2LL);
      uint64_t v61 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v62 = swift_slowAlloc(32LL, -1LL);
      v129[0] = v62;
      *(_DWORD *)uint64_t v61 = 136315138;
      char v63 = (*(uint64_t (**)(void))(*(void *)v60 + 240LL))();
      BOOL v64 = (v63 & 1) == 0;
      if ((v63 & 1) != 0) {
        uint64_t v65 = 1702195828LL;
      }
      else {
        uint64_t v65 = 0x65736C6166LL;
      }
      if (v64) {
        unint64_t v66 = 0xE500000000000000LL;
      }
      else {
        unint64_t v66 = 0xE400000000000000LL;
      }
      *(void *)(v0 + 31__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v126, v0 + 320);
      unint64_t v67 = v66;
      uint64_t v1 = (void *)(v0 + 96);
      swift_bridgeObjectRelease(v67);
      swift_release_n(v60, 2LL);
      _os_log_impl(&dword_0, v12, v58, "updating nl context if true, isPommes: %s", v61, 0xCu);
      swift_arrayDestroy(v62, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1LL, -1LL);
      uint64_t v59 = swift_slowDealloc(v61, -1LL, -1LL);
    }

    uint64_t v32 = (*(uint64_t (**)(uint64_t))(**(void **)(v0 + 328) + 240LL))(v59);
    if ((v32 & 1) != 0)
    {
      uint64_t v69 = *(void *)(v0 + 392);
      uint64_t v68 = *(void *)(v0 + 400);
      (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 384) + 104LL))( v69,  enum case for PommesContext.Source.pluginDefined(_:),  *(void *)(v0 + 376));
      PommesContext.init(source:domain:listenAfterSpeaking:)(v69, 7300455LL, 0xE300000000000000LL, v128);
      uint64_t v70 = type metadata accessor for PommesContext(0LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56LL))(v68, 0LL, 1LL, v70);
      uint64_t v71 = NLContextUpdate.pommesContext.setter(v68);
      os_log_type_t v79 = static os_log_type_t.info.getter(v71, v72, v73, v74, v75, v76, v77, v78);
      uint64_t v32 = os_log_type_enabled(v12, v79);
      if ((_DWORD)v32)
      {
        uint64_t v81 = *(void *)(v0 + 456);
        uint64_t v80 = *(void *)(v0 + 464);
        uint64_t v82 = *(void *)(v0 + 440);
        uint64_t v83 = *(void *)(v0 + 448);
        __int128 v84 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v85 = swift_slowAlloc(32LL, -1LL);
        v129[0] = v85;
        *(_DWORD *)__int128 v84 = 136315138;
        swift_beginAccess(v80, v0 + 280, 0LL, 0LL);
        uint64_t v86 = v80;
        uint64_t v1 = (void *)(v0 + 96);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16))(v81, v86, v82);
        uint64_t v87 = String.init<A>(describing:)(v81, v82);
        unint64_t v89 = v88;
        *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v88, v129);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v126);
        swift_bridgeObjectRelease(v89);
        _os_log_impl(&dword_0, v12, v79, "updated nl context with pommes context. nl context = %s", v84, 0xCu);
        swift_arrayDestroy(v85, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v85, -1LL, -1LL);
        uint64_t v32 = swift_slowDealloc(v84, -1LL, -1LL);
      }
    }
  }

  uint64_t v91 = *(void *)(v0 + 360);
  uint64_t v90 = *(void *)(v0 + 368);
  uint64_t v92 = *(void *)(v0 + 352);
  static SiriKitEventSender.current.getter(v32);
  uint64_t v124 = *(void *)(v0 + 128);
  uint64_t v127 = *(void *)(v0 + 120);
  __swift_project_boxed_opaque_existential_1(v1, v127);
  (*(void (**)(uint64_t, void, uint64_t))(v91 + 104))(v90, enum case for ActivityType.promptForData(_:), v92);
  uint64_t v93 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INShareETAIntent,  &OBJC_CLASS___INShareETAIntent_ptr);
  id result = [(id)swift_getObjCClassFromMetadata(v93) typeName];
  if (result)
  {
    uint64_t v95 = result;
    v109 = *(void (**)(uint64_t))(v0 + 504);
    uint64_t v115 = *(void *)(v0 + 488);
    uint64_t v116 = *(void *)(v0 + 480);
    uint64_t v117 = *(void *)(v0 + 472);
    uint64_t v118 = *(void *)(v0 + 456);
    uint64_t v111 = *(void *)(v0 + 464);
    uint64_t v112 = *(void *)(v0 + 448);
    uint64_t v113 = *(void *)(v0 + 440);
    uint64_t v119 = *(void *)(v0 + 432);
    uint64_t v120 = *(void *)(v0 + 424);
    uint64_t v121 = *(void *)(v0 + 400);
    uint64_t v122 = *(void *)(v0 + 392);
    uint64_t v96 = *(void *)(v0 + 368);
    uint64_t v97 = *(void *)(v0 + 344);
    uint64_t v110 = *(void *)(v0 + 336);
    v114 = *(void **)(v0 + 320);
    type metadata accessor for SiriKitEvent(0LL);
    uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
    uint64_t v100 = v99;

    uint64_t v101 = enum case for SiriKitReliabilityCodes.normal(_:);
    uint64_t v102 = type metadata accessor for SiriKitReliabilityCodes(0LL);
    uint64_t v103 = *(void *)(v102 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 104))(v97, v101, v102);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v103 + 56))(v97, 0LL, 1LL, v102);
    uint64_t v104 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)( v96,  v98,  v100,  v97,  closure #1 in ShareETAPromptForContactStrategy.makePromptForValue(),  0LL);
    dispatch thunk of SiriKitEventSending.send(_:)(v104, v127, v124);
    swift_release(v104);
    uint64_t v105 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 96));
    v109(v105);
    uint64_t v106 = *(void *)(v0 + 160);
    uint64_t v107 = *(void *)(v0 + 168);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 136), v106);
    (*(void (**)(uint64_t, uint64_t))(v107 + 32))(v106, v107);
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 136));
    swift_beginAccess(v111, v0 + 256, 0LL, 0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 16))(v110, v111, v113);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v112 + 56))(v110, 0LL, 1LL, v113);
    uint64_t v108 = type metadata accessor for AceOutput(0LL);
    *(_OWORD *)(v0 + 23__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0u;
    *(void *)(v0 + 248) = 0LL;
    *(_OWORD *)(v0 + 216) = 0u;
    v114[3] = v108;
    v114[4] = &protocol witness table for AceOutput;
    __swift_allocate_boxed_opaque_existential_0(v114);
    static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v115,  v0 + 176,  1LL,  &_swiftEmptyArrayStorage,  v128,  1LL,  v110,  &_swiftEmptyArrayStorage,  v0 + 216);
    outlined destroy of (label: String?, value: Any)?( v0 + 216,  &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?( v110,  &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 176));
    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v115, v117);
    (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v111, v113);
    swift_task_dealloc(v115);
    swift_task_dealloc(v111);
    swift_task_dealloc(v118);
    swift_task_dealloc(v119);
    swift_task_dealloc(v120);
    swift_task_dealloc(v121);
    swift_task_dealloc(v122);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v110);
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t closure #1 in ShareETAPromptForContactStrategy.makePromptForValue()()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.parameterName.setter( 0x6E65697069636572LL,  0xE900000000000074LL);
}

uint64_t ShareETAPromptForContactStrategy.makeFlowCancelledResponse()(uint64_t a1)
{
  v2[22] = a1;
  v2[23] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  _BYTE v2[24] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for TemplatingResult(0LL);
  v2[25] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[26] = v5;
  v2[27] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v2[28] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ActivityType(0LL);
  v2[29] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[30] = v8;
  v2[31] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(ShareETAPromptForContactStrategy.makeFlowCancelledResponse(), 0LL, 0LL);
}

id ShareETAPromptForContactStrategy.makeFlowCancelledResponse()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = v8[30];
  uint64_t v9 = v8[31];
  uint64_t v11 = v8[29];
  uint64_t v12 = v8[23];
  uint64_t v13 = static os_log_type_t.info.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v14 = os_log(_:dso:log:_:_:)( v13,  &dword_0,  *(void *)(v12 + 16),  "flow cancelled response",  23LL,  2LL,  &_swiftEmptyArrayStorage);
  static SiriKitEventSender.current.getter(v14);
  uint64_t v33 = v8[6];
  uint64_t v34 = v8[5];
  __swift_project_boxed_opaque_existential_1(v8 + 2, v34);
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v9, enum case for ActivityType.canceled(_:), v11);
  uint64_t v15 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INShareETAIntent,  &OBJC_CLASS___INShareETAIntent_ptr);
  id result = [(id)swift_getObjCClassFromMetadata(v15) typeName];
  if (result)
  {
    uint64_t v17 = result;
    uint64_t v18 = v8[31];
    uint64_t v19 = v8[28];
    uint64_t v20 = v8[23];
    type metadata accessor for SiriKitEvent(0LL);
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v23 = v22;

    uint64_t v24 = enum case for SiriKitReliabilityCodes.rejectParameter(_:);
    uint64_t v25 = type metadata accessor for SiriKitReliabilityCodes(0LL);
    uint64_t v26 = *(void *)(v25 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 104))(v19, v24, v25);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v19, 0LL, 1LL, v25);
    uint64_t v27 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)( v18,  v21,  v23,  v19,  closure #1 in ShareETAPromptForContactStrategy.makeFlowCancelledResponse(),  0LL);
    dispatch thunk of SiriKitEventSending.send(_:)(v27, v34, v33);
    swift_release(v27);
    uint64_t v28 = __swift_destroy_boxed_opaque_existential_0Tm(v8 + 2);
    uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 144LL))(v28);
    v8[32] = v29;
    v8[10] = &type metadata for Common;
    v8[11] = &protocol witness table for Common;
    v8[7] = 0LL;
    uint64_t v30 = static DialogHelper.globals.getter();
    v8[33] = v30;
    uint64_t v31 = *(int **)(*(void *)v29 + 112LL);
    uint64_t v35 = (int *)((char *)v31 + *v31);
    uint64_t v32 = (void *)swift_task_alloc(v31[1]);
    v8[34] = v32;
    *uint64_t v32 = v8;
    v32[1] = ShareETAPromptForContactStrategy.makeFlowCancelledResponse();
    return (id)((uint64_t (*)(void, void *, uint64_t))v35)(v8[27], v8 + 7, v30);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t ShareETAPromptForContactStrategy.makeFlowCancelledResponse()()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 272LL);
  *(void *)(*(void *)v1 + 28swift_beginAccess(v0 + 96, v2, 0LL, 0LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[32];
    swift_bridgeObjectRelease(v2[33]);
    swift_release(v4);
    uint64_t v5 = ShareETAPromptForContactStrategy.makeFlowCancelledResponse();
  }

  else
  {
    uint64_t v6 = v2[33];
    swift_release(v2[32]);
    swift_bridgeObjectRelease(v6);
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 7);
    uint64_t v5 = ShareETAPromptForContactStrategy.makeFlowCancelledResponse();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  Swift::Bool v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v11 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v6 = *(void **)(v0 + 176);
  uint64_t v7 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v5, 1LL, 1LL, v7);
  static Device.current.getter((void *)(v0 + 96));
  uint64_t v8 = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  uint64_t v9 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v0 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0u;
  *(void *)(v0 + 168) = 0LL;
  *(_OWORD *)(v0 + 136) = 0u;
  v6[3] = v9;
  v6[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_0(v6);
  static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v2,  v0 + 96,  1LL,  &_swiftEmptyArrayStorage,  v8,  1LL,  v5,  &_swiftEmptyArrayStorage,  v0 + 136);
  outlined destroy of (label: String?, value: Any)?( v0 + 136,  &demangling cache variable for type metadata for FlowActivity?);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 96));
  outlined destroy of (label: String?, value: Any)?( v5,  &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v1);
  swift_task_dealloc(v11);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 192);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 56));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ShareETAPromptForContactStrategy.makeErrorResponse(_:)()
{
  *(void *)(v1 + 16) = v0;
  return swift_task_switch(ShareETAPromptForContactStrategy.makeErrorResponse(_:), 0LL, 0LL);
}

uint64_t ShareETAPromptForContactStrategy.makeErrorResponse(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = static os_log_type_t.info.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  os_log(_:dso:log:_:_:)(v10, &dword_0, *(void *)(v9 + 16), "error response", 14LL, 2LL, &_swiftEmptyArrayStorage);
  unint64_t v11 = lazy protocol witness table accessor for type Errors and conformance Errors();
  swift_allocError(&type metadata for Errors, v11, 0LL, 0LL);
  *(void *)uint64_t v12 = 0xD000000000000029LL;
  *(void *)(v12 + 8) = 0x800000000009C000LL;
  *(_BYTE *)(v12 + 16) = 0;
  swift_willThrow();
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t ShareETAPromptForContactStrategy.deinit()
{
  swift_release(*(void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 56));
  outlined destroy of ShareETA(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin32ShareETAPromptForContactStrategy_catModel);
  return v0;
}

uint64_t ShareETAPromptForContactStrategy.__deallocating_deinit()
{
  swift_release(*(void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 56));
  outlined destroy of ShareETA(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin32ShareETAPromptForContactStrategy_catModel);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.actionForInput(_:) in conformance ShareETAPromptForContactStrategy()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272LL))();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance ShareETAPromptForContactStrategy( uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v5 = *(int **)(*(void *)v2 + 288LL);
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)v5 + *v5);
  uint64_t v6 = (void *)swift_task_alloc(v5[1]);
  *(void *)(v3 + 24) = v6;
  void *v6 = v3;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance ShareETAPromptForContactStrategy;
  return v8(a2);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance ShareETAPromptForContactStrategy( uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 24);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1) {
    **(void **)(v4 + 16) = a1;
  }
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makePromptForValue() in conformance ShareETAPromptForContactStrategy( uint64_t a1)
{
  uint64_t v4 = *(int **)(*(void *)v1 + 296LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v7(a1);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse()[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse()(a1, a2, a3);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence() in conformance ShareETAPromptForContactStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence()[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence()(a1, a2, a3);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy( uint64_t a1)
{
  uint64_t v4 = *(int **)(*(void *)v1 + 304LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v7(a1);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeErrorResponse(_:) in conformance ShareETAPromptForContactStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(*(void *)v2 + 312LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v9(a1, a2);
}

uint64_t outlined init with take of ShareETA(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShareETA(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)( uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  unint64_t v8 = v7;
  uint64_t v9 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v10 = *a1 + 8;
  uint64_t v12 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
  uint64_t result = swift_bridgeObjectRelease(v8);
  *a1 = v10;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  __swift_destroy_boxed_opaque_existential_0Tm(v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)( uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v2 + 16) + 1LL,  1,  (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v3 > 1,  v4 + 1,  1,  (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return &_swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = _swift_stdlib_malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    unint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + __swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    unint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + __swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  _BYTE *v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type Input and conformance Input()
{
  unint64_t result = lazy protocol witness table cache variable for type Input and conformance Input;
  if (!lazy protocol witness table cache variable for type Input and conformance Input)
  {
    uint64_t v1 = type metadata accessor for Input(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Input, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input);
  }

  return result;
}

uint64_t outlined init with copy of GeoIntent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeoIntent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Errors and conformance Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type Errors and conformance Errors;
  if (!lazy protocol witness table cache variable for type Errors and conformance Errors)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Errors, &type metadata for Errors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Errors and conformance Errors);
  }

  return result;
}

void *closure #1 in serialize<A>(_:at:)(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v4 = a2 - (void)__src;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (!__dst)
  {
    if (v4 <= 0) {
      return __src;
    }
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawBufferPointer.copyMemory source has too many elements",  69LL,  2LL,  "Swift/UnsafeRawBufferPointer.swift",  34LL,  2,  487LL,  0);
    __break(1u);
    return __src;
  }

  if (__src) {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)( uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>( uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for OS_os_log(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t outlined destroy of ShareETA(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ShareETA(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_18724@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144LL))();
  *a2 = result;
  return result;
}

uint64_t sub_18754(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 152LL);
  uint64_t v3 = swift_retain(*a1);
  return v2(v3);
}

uint64_t sub_18784@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168LL))();
  *a2 = result;
  return result;
}

uint64_t sub_187B4(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 176LL);
  uint64_t v3 = swift_retain(*a1);
  return v2(v3);
}

uint64_t sub_187E4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 192LL))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_18818(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 200LL))(*a1);
}

uint64_t sub_18844(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 216LL))();
}

uint64_t sub_1886C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_BYTE *))(**(void **)a2 + 224LL))(v4);
}

uint64_t sub_188AC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 240LL))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_188E0(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 248LL))(*a1);
}

uint64_t ObjC metadata update function for ShareETAPromptForContactStrategy()
{
  return type metadata accessor for ShareETAPromptForContactStrategy(0LL);
}

uint64_t type metadata accessor for ShareETAPromptForContactStrategy(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for ShareETAPromptForContactStrategy;
  if (!type metadata singleton initialization cache for ShareETAPromptForContactStrategy) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShareETAPromptForContactStrategy);
  }
  return result;
}

uint64_t type metadata completion function for ShareETAPromptForContactStrategy(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = "\b";
  void v4[4] = &unk_95540;
  v4[5] = &unk_95558;
  v4[6] = &unk_95540;
  uint64_t result = type metadata accessor for ShareETA(319LL);
  if (v3 <= 0x3F)
  {
    v4[7] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 8LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t GeoContact.index.getter()
{
  return *(void *)v0;
}

uint64_t GeoContact.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain(*(void *)(v0 + 16));
  return v1;
}

uint64_t GeoContact.displayName.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(*(void *)(v0 + 32));
  return v1;
}

uint64_t GeoTrafficIncident.driPayload.getter()
{
  return *(void *)(v0 + 40);
}

void GeoTrafficIncident.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*v2);
  Swift::UInt v4 = v2[2];
  if (v4)
  {
    Swift::UInt v5 = v2[1];
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v4);
    String.hash(into:)(a1, v5, v4);
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Swift::UInt v6 = v2[3];
  Swift::UInt v7 = v2[4];
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(a1, v6, v7);
  swift_bridgeObjectRelease(v7);
  Hasher._combine(_:)(v2[5]);
}

uint64_t GeoTrafficIncident.CodingKeys.stringValue.getter(char a1)
{
  return *(void *)&aIndex_1[8 * a1];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GeoTrafficIncident.CodingKeys()
{
  return GeoTrafficIncident.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GeoTrafficIncident.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized GeoTrafficIncident.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GeoTrafficIncident.CodingKeys()
{
  return 0LL;
}

void protocol witness for CodingKey.init(intValue:) in conformance GeoTrafficIncident.CodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoTrafficIncident.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoTrafficIncident.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GeoTrafficIncident.encode(to:)(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoTrafficIncident.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  int64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  unint64_t v11 = lazy protocol witness table accessor for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_B7F70, &unk_B7F70, v11, v9, v10);
  uint64_t v12 = *v3;
  char v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v23, v5);
  if (!v2)
  {
    uint64_t v13 = v3[1];
    uint64_t v14 = v3[2];
    char v22 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, &v22, v5);
    uint64_t v15 = v3[3];
    uint64_t v16 = v3[4];
    char v21 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v21, v5);
    uint64_t v17 = v3[5];
    char v20 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v20, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int GeoTrafficIncident.hashValue.getter()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)(v7, 0LL);
  Hasher._combine(_:)(*v0);
  Swift::UInt v2 = v0[2];
  if (v2)
  {
    Swift::UInt v3 = v0[1];
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v2);
    String.hash(into:)(v7, v3, v2);
    swift_bridgeObjectRelease(v2);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Swift::UInt v4 = v0[3];
  Swift::UInt v5 = v1[4];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  Hasher._combine(_:)(v1[5]);
  return Hasher._finalize()();
}

double GeoTrafficIncident.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }

  return result;
}

void __swiftcall GeoTrafficIncident.init(index:id:displayName:driPayload:)( GeoFlowDelegatePlugin::GeoTrafficIncident *__return_ptr retstr, Swift::Int index, Swift::String_optional id, Swift::String displayName, Swift::Int driPayload)
{
  retstr->index = index;
  retstr->id = id;
  retstr->displayName = displayName;
  retstr->driPayload = driPayload;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GeoTrafficIncident(void *a1)
{
  return GeoTrafficIncident.encode(to:)(a1);
}

uint64_t protocol witness for Identifiable.id.getter in conformance GeoTrafficIncident@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *a1 = *(void *)(v1 + 8);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

void protocol witness for Hashable.hash(into:) in conformance GeoTrafficIncident(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::UInt v4 = v2[1];
  Swift::UInt v6 = v2[2];
  Swift::UInt v5 = v2[3];
  Swift::UInt v8 = v2[4];
  Swift::UInt v7 = v2[5];
  Hasher._combine(_:)(*v2);
  if (v6)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v6);
    String.hash(into:)(a1, v4, v6);
    swift_bridgeObjectRelease(v6);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  swift_bridgeObjectRetain(v8);
  String.hash(into:)(a1, v5, v8);
  swift_bridgeObjectRelease(v8);
  Hasher._combine(_:)(v7);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GeoTrafficIncident(uint64_t a1)
{
  Swift::UInt v3 = *v1;
  Swift::UInt v2 = v1[1];
  Swift::UInt v5 = v1[2];
  Swift::UInt v4 = v1[3];
  Swift::UInt v7 = v1[4];
  Swift::UInt v6 = v1[5];
  Hasher.init(_seed:)(v9, a1);
  Hasher._combine(_:)(v3);
  if (v5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v5);
    String.hash(into:)(v9, v2, v5);
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v9, v4, v7);
  swift_bridgeObjectRelease(v7);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GeoTrafficIncident( _OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  __int128 v3 = *a2;
  __int128 v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  __int128 v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return specialized static GeoTrafficIncident.__derived_struct_equals(_:_:)(v7, v8);
}

BOOL specialized static GeoTrafficIncident.__derived_struct_equals(_:_:)(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  uint64_t v4 = a1[2];
  uint64_t v5 = a2[2];
  if (!v4)
  {
    if (!v5)
    {
LABEL_13:
      uint64_t v11 = a1[3];
      uint64_t v12 = a1[4];
      uint64_t v13 = a2[3];
      uint64_t v14 = a2[4];
      if (v11 == v13 && v12 == v14) {
        return a1[5] == a2[5];
      }
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v13, v14, 0LL);
      BOOL result = 0LL;
      if ((v16 & 1) != 0) {
        return a1[5] == a2[5];
      }
      return result;
    }

    return 0LL;
  }

  if (!v5) {
    return 0LL;
  }
  uint64_t v6 = a1[1];
  uint64_t v7 = a2[1];
  if (v6 == v7 && v4 == v5) {
    goto LABEL_13;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v4, v7, v5, 0LL);
  BOOL result = 0LL;
  if ((v9 & 1) != 0) {
    goto LABEL_13;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoTrafficIncident.CodingKeys, &unk_B7F70);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoTrafficIncident.CodingKeys, &unk_B7F70);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoTrafficIncident.CodingKeys, &unk_B7F70);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoTrafficIncident.CodingKeys, &unk_B7F70);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys);
  }

  return result;
}

uint64_t specialized GeoTrafficIncident.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x7865646E69LL && a2 == 0xE500000000000000LL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7865646E69LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else if (a1 == 25705 && a2 == 0xE200000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(25705LL, 0xE200000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  else if (a1 == 0x4E79616C70736964LL && a2 == 0xEB00000000656D61LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x4E79616C70736964LL, 0xEB00000000656D61LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 2LL;
  }

  else if (a1 == 0x6F6C796150697264LL && a2 == 0xEA00000000006461LL)
  {
    swift_bridgeObjectRelease(0xEA00000000006461LL);
    return 3LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F6C796150697264LL, 0xEA00000000006461LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t specialized GeoTrafficIncident.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoTrafficIncident.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  Swift::UInt v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  unint64_t v11 = lazy protocol witness table accessor for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_B7F70, &unk_B7F70, v11, v9, v10);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_0Tm(a1);
  }
  char v30 = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v5);
  char v29 = 1;
  uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v29, v5);
  uint64_t v15 = v14;
  uint64_t v26 = v13;
  char v28 = 2;
  swift_bridgeObjectRetain(v14);
  uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v5);
  uint64_t v18 = v17;
  v24[0] = v16;
  char v27 = 3;
  swift_bridgeObjectRetain(v17);
  v24[1] = 0LL;
  uint64_t v25 = v18;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)(&v27, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  uint64_t v20 = v25;
  swift_bridgeObjectRelease(v25);
  uint64_t result = swift_bridgeObjectRelease(v15);
  uint64_t v22 = v26;
  *a2 = v12;
  a2[1] = v22;
  uint64_t v23 = v24[0];
  a2[2] = v15;
  a2[3] = v23;
  a2[4] = v20;
  a2[5] = v19;
  return result;
}

unint64_t lazy protocol witness table accessor for type String? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type String? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type String? and conformance <A> A?)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for String?);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String? and conformance <A> A?);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type GeoTrafficIncident and conformance GeoTrafficIncident()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoTrafficIncident and conformance GeoTrafficIncident;
  if (!lazy protocol witness table cache variable for type GeoTrafficIncident and conformance GeoTrafficIncident)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoTrafficIncident,  &type metadata for GeoTrafficIncident);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoTrafficIncident and conformance GeoTrafficIncident);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoTrafficIncident and conformance GeoTrafficIncident;
  if (!lazy protocol witness table cache variable for type GeoTrafficIncident and conformance GeoTrafficIncident)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoTrafficIncident,  &type metadata for GeoTrafficIncident);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoTrafficIncident and conformance GeoTrafficIncident);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoTrafficIncident and conformance GeoTrafficIncident;
  if (!lazy protocol witness table cache variable for type GeoTrafficIncident and conformance GeoTrafficIncident)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoTrafficIncident,  &type metadata for GeoTrafficIncident);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoTrafficIncident and conformance GeoTrafficIncident);
  }

  return result;
}

uint64_t destroy for GeoTrafficIncident(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 32));
}

uint64_t initializeWithCopy for GeoTrafficIncident(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v6;
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  return a1;
}

void *assignWithCopy for GeoTrafficIncident(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[3] = a2[3];
  uint64_t v6 = a2[4];
  uint64_t v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[5] = a2[5];
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GeoTrafficIncident(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v5;
  swift_bridgeObjectRelease(v6);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoTrafficIncident(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoTrafficIncident(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for GeoTrafficIncident()
{
  return &type metadata for GeoTrafficIncident;
}

uint64_t getEnumTagSinglePayload for GeoTrafficIncident.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for GeoTrafficIncident.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1986C + 4 * byte_95575[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_198A0 + 4 * byte_95570[v4]))();
}

uint64_t sub_198A0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_198A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x198B0LL);
  }
  return result;
}

uint64_t sub_198BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x198C4LL);
  }
  *(_BYTE *)__n128 result = a2 + 3;
  return result;
}

uint64_t sub_198C8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_198D0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for GeoTrafficIncident.CodingKeys()
{
  return &unk_B7F70;
}

uint64_t SaveParkingLocationUnsupportedValueStrategy.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 24, a1);
}

uint64_t TrafficIncidentHandleIntentStrategy.__allocating_init(with:)(__int128 *a1)
{
  uint64_t v3 = swift_allocObject(v1, 64LL, 7LL);
  type metadata accessor for OS_os_log();
  *(void *)(v3 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000023LL,  0x80000000000957E0LL);
  outlined init with take of CATType(a1, v3 + 24);
  return v3;
}

uint64_t TrafficIncidentHandleIntentStrategy.init(with:)(__int128 *a1)
{
  *(void *)(v1 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000023LL,  0x80000000000957E0LL);
  outlined init with take of CATType(a1, v1 + 24);
  return v1;
}

uint64_t TrafficIncidentHandleIntentStrategy.makeContinueInAppResponse(app:intent:intentResponse:)( uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[9] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( TrafficIncidentHandleIntentStrategy.makeContinueInAppResponse(app:intent:intentResponse:),  0LL,  0LL);
}

uint64_t TrafficIncidentHandleIntentStrategy.makeContinueInAppResponse(app:intent:intentResponse:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)(v8 + 64);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v11 = *(void **)(v8 + 56);
  uint64_t v12 = static os_log_type_t.info.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  os_log(_:dso:log:_:_:)( v12,  &dword_0,  *(void *)(v10 + 16),  "makeContinueInAppResponse",  25LL,  2LL,  &_swiftEmptyArrayStorage);
  uint64_t v13 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v9, 1LL, 1LL, v13);
  uint64_t v14 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v8 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0u;
  *(void *)(v8 + 48) = 0LL;
  *(_OWORD *)(v8 + 16) = 0u;
  v11[3] = v14;
  v11[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_0(v11);
  static AceOutputHelper.makeAceOutput(allAddViews:nlContextUpdate:additionalCommands:flowActivity:)( &_swiftEmptyArrayStorage,  v9,  &_swiftEmptyArrayStorage,  v8 + 16);
  outlined destroy of (label: String?, value: Any)?( v8 + 16,  &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (label: String?, value: Any)?( v9,  &demangling cache variable for type metadata for NLContextUpdate?);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t SaveParkingLocationUnsupportedValueStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 24));
  return v0;
}

uint64_t SaveParkingLocationUnsupportedValueStrategy.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 24));
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

unint64_t lazy protocol witness table accessor for type TrafficIncidentHandleIntentStrategy and conformance TrafficIncidentHandleIntentStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type TrafficIncidentHandleIntentStrategy and conformance TrafficIncidentHandleIntentStrategy;
  if (!lazy protocol witness table cache variable for type TrafficIncidentHandleIntentStrategy and conformance TrafficIncidentHandleIntentStrategy)
  {
    uint64_t v1 = type metadata accessor for TrafficIncidentHandleIntentStrategy();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for TrafficIncidentHandleIntentStrategy, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TrafficIncidentHandleIntentStrategy and conformance TrafficIncidentHandleIntentStrategy);
  }

  return result;
}

uint64_t type metadata accessor for TrafficIncidentHandleIntentStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin35TrafficIncidentHandleIntentStrategy);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance TrafficIncidentHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance TrafficIncidentHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance TrafficIncidentHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance TrafficIncidentHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance TrafficIncidentHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance TrafficIncidentHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance TrafficIncidentHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentHandleIntentStrategy;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)(a1, a2, v9, a4);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentHandleIntentStrategy( uint64_t a1)
{
  uint64_t v4 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t static GeoNLContextUtils.makeNLContextFor(weightedPromptResponseTargets:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = swift_allocObject(v2, 80LL, 7LL);
  *(_OWORD *)(v3 + 16) = xmmword_949B0;
  *(void *)(v3 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = specialized TerminalNodeBoundedSemanticValue<>.javaValue.getter(0);
  *(void *)(v3 + 40) = v4;
  *(void *)(v3 + 48) = specialized TerminalNodeBoundedSemanticValue<>.javaValue.getter(1);
  *(void *)(v3 + 56) = v5;
  *(void *)(v3 + 64) = specialized TerminalNodeBoundedSemanticValue<>.javaValue.getter(2);
  *(void *)(v3 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v6;
  NLContextUpdate.weightedPromptResponseOptions.setter(v3);
  uint64_t v7 = swift_bridgeObjectRetain(a1);
  NLContextUpdate.weightedPromptResponseTargets.setter(v7);
  if (one-time initialization token for domainNode != -1) {
    swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
  }
  uint64_t v8 = static LocationSearchIntent.domainNode;
  swift_retain(static LocationSearchIntent.domainNode);
  unint64_t v9 = specialized OntologyNode.javaClassName.getter();
  uint64_t v11 = v10;
  swift_release(v8);
  NLContextUpdate.weightedPromptTargetDomain.setter(v9, v11);
  uint64_t v12 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v12 + 16) = xmmword_95430;
  *(void *)(v12 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = specialized TerminalNodeBoundedSemanticValue<>.javaValue.getter(2);
  *(void *)(v12 + 40) = v13;
  NLContextUpdate.weightedPromptAbortValues.setter(v12);
  NLContextUpdate.weightedPromptStrict.setter(1LL);
  return NLContextUpdate.currentDomainName.setter(0x6E6F697461636F6CLL, 0xEE00686372616553LL);
}

uint64_t one-time initialization function for logObject()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000011LL,  0x8000000000095930LL);
  logObject = result;
  return result;
}

{
  uint64_t result;
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000014LL,  0x8000000000098AD0LL);
  logObject = result;
  return result;
}

ValueMetadata *specialized TerminalNodeBoundedSemanticValue<>.javaValue.getter(char a1)
{
  char v21 = &type metadata for LocationSearchIntent.LocationSearchConfirmationValue;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocationSearchIntent.LocationSearchConfirmationValue.Type);
  uint64_t v3 = String.init<A>(describing:)(&v21, v2);
  unint64_t v5 = v4;
  uint64_t v6 = specialized BidirectionalCollection.dropLast(_:)(5LL, v3, v4);
  unint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  swift_bridgeObjectRelease(v5);
  unint64_t v25 = 0xD000000000000012LL;
  unint64_t v26 = 0x800000000009BE20LL;
  char v21 = (ValueMetadata *)v6;
  unint64_t v22 = v8;
  uint64_t v23 = v10;
  uint64_t v24 = v12;
  unint64_t v13 = lazy protocol witness table accessor for type Substring and conformance Substring();
  String.append<A>(contentsOf:)(&v21, &type metadata for Substring, v13);
  swift_bridgeObjectRelease(v12);
  unint64_t v14 = v26;
  char v21 = (ValueMetadata *)v25;
  unint64_t v22 = v26;
  swift_bridgeObjectRetain(v26);
  v15._uint64_t countAndFlagsBits = 0x2E65756C61562ELL;
  v15._object = (void *)0xE700000000000000LL;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  uint64_t v16 = v21;
  unint64_t v17 = v22;
  uint64_t v18 = qword_959E8[a1];
  Swift::String v19 = String.uppercased()();
  swift_bridgeObjectRelease(v18);
  char v21 = v16;
  unint64_t v22 = v17;
  swift_bridgeObjectRetain(v17);
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v19._object);
  return v21;
}

uint64_t static GeoNLContextUtils.makeNLContext(weightedPromptResponseTargets:displayHints:)( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_bridgeObjectRetain(a1);
  NLContextUpdate.disambiguationPromptResponseTargets.setter(v4);
  if (one-time initialization token for domainNode != -1) {
    swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
  }
  uint64_t v5 = static LocationSearchIntent.domainNode;
  swift_retain(static LocationSearchIntent.domainNode);
  unint64_t v6 = specialized OntologyNode.javaClassName.getter();
  uint64_t v8 = v7;
  swift_release(v5);
  NLContextUpdate.disambiguationPromptTargetDomain.setter(v6, v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v10 = swift_allocObject(v9, 48LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_95430;
  *(void *)(v10 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = specialized TerminalNodeBoundedSemanticValue<>.javaValue.getter(2);
  *(void *)(v10 + 40) = v11;
  NLContextUpdate.disambiguationPromptAbortValues.setter(v10);
  uint64_t v12 = swift_bridgeObjectRetain(a1);
  NLContextUpdate.weightedPromptResponseTargets.setter(v12);
  uint64_t v13 = static LocationSearchIntent.domainNode;
  swift_retain(static LocationSearchIntent.domainNode);
  unint64_t v14 = specialized OntologyNode.javaClassName.getter();
  uint64_t v16 = v15;
  swift_release(v13);
  NLContextUpdate.weightedPromptTargetDomain.setter(v14, v16);
  uint64_t v17 = swift_allocObject(v9, 48LL, 7LL);
  *(_OWORD *)(v17 + 16) = xmmword_95430;
  *(void *)(v17 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = specialized TerminalNodeBoundedSemanticValue<>.javaValue.getter(2);
  *(void *)(v17 + 40) = v18;
  NLContextUpdate.weightedPromptAbortValues.setter(v17);
  uint64_t v19 = swift_allocObject(v9, 48LL, 7LL);
  *(_OWORD *)(v19 + 16) = xmmword_95430;
  *(void *)(v19 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = specialized TerminalNodeBoundedSemanticValue<>.javaValue.getter(2);
  *(void *)(v19 + 40) = v20;
  NLContextUpdate.weightedPromptResponseOptions.setter(v19);
  NLContextUpdate.weightedPromptStrict.setter(1LL);
  if (a2)
  {
    uint64_t v21 = swift_bridgeObjectRetain(a2);
    NLContextUpdate.displayHints.setter(v21);
  }

  return NLContextUpdate.currentDomainName.setter(0x6E6F697461636F6CLL, 0xEE00686372616553LL);
}

uint64_t TypedDisambiguationItems.makeDisambiguationItems(locale:_:)( uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0) {
    unint64_t v6 = specialized static DisambiguationListUtils.makeDisambiguationItems(incidentTypes:locale:)(a4, a1);
  }
  else {
    unint64_t v6 = specialized static DisambiguationListUtils.makeDisambiguationItems(persons:locale:)(a4, a1);
  }
  uint64_t v7 = v6;
  a2();
  return swift_bridgeObjectRelease(v7);
}

uint64_t TypedDisambiguationItems.makeDisambiguationItems(locale:)(uint64_t a1, uint64_t a2, char a3)
{
  *(_BYTE *)(v3 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a3;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  return swift_task_switch(TypedDisambiguationItems.makeDisambiguationItems(locale:), 0LL, 0LL);
}

uint64_t TypedDisambiguationItems.makeDisambiguationItems(locale:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  if ((*(_BYTE *)(v0 + 32) & 1) != 0) {
    uint64_t v3 = specialized static DisambiguationListUtils.makeDisambiguationItems(incidentTypes:locale:)(v1, v2);
  }
  else {
    uint64_t v3 = specialized static DisambiguationListUtils.makeDisambiguationItems(persons:locale:)(v1, v2);
  }
  return (*(uint64_t (**)(void *))(v0 + 8))(v3);
}

uint64_t TypedDisambiguationItems.makeNLContextUpdate(locale:weightedPromptResponseTargets:isPommes:isUSO:_:)( unint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(char *), uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v139 = a7;
  uint64_t v133 = a6;
  LODWORD(v136) = a4;
  int v128 = a3;
  uint64_t v131 = a2;
  v137.n128_u64[0] = a1;
  uint64_t v125 = type metadata accessor for PommesContext.Source(0LL);
  uint64_t v123 = *(void *)(v125 - 8);
  __chkstk_darwin();
  uint64_t v124 = (char *)&v123 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  __chkstk_darwin();
  uint64_t v126 = (char *)&v123 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DisplayHint(0LL);
  uint64_t v140 = *(void *)(v12 - 8);
  __chkstk_darwin();
  v138 = (char *)&v123 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v141 = (char *)&v123 - v14;
  __chkstk_darwin();
  uint64_t v16 = (char *)&v123 - v15;
  uint64_t v17 = type metadata accessor for Siri_Nlu_External_SystemPrompted(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin();
  uint64_t v20 = (char *)&v123 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v22 = (char *)&v123 - v21;
  uint64_t v23 = type metadata accessor for NLContextUpdate(0LL);
  uint64_t v134 = *(void *)(v23 - 8);
  uint64_t v135 = v23;
  __chkstk_darwin();
  v129 = (char *)&v123 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin();
  v132 = (char *)&v123 - v26;
  uint64_t v34 = static os_log_type_t.info.getter(v25, v27, v28, v29, v30, v31, v32, v33);
  if (one-time initialization token for logObject != -1) {
    swift_once(&one-time initialization token for logObject, one-time initialization function for logObject);
  }
  uint64_t v35 = (os_log_s *)logObject;
  uint64_t v36 = os_log(_:dso:log:_:_:)( v34,  &dword_0,  logObject,  "TypedDisambiguationItems makeNLContextUpdate",  44LL,  2LL,  &_swiftEmptyArrayStorage,  v123);
  if ((a8 & 1) != 0)
  {
    uint64_t v78 = specialized static GeoNLContextUtils.makeDisplayHints(items:locale:)(v139);
    os_log_type_t v86 = static os_log_type_t.info.getter(v78, v79, v80, v81, v82, v83, v84, v85);
    if (os_log_type_enabled(v35, v86))
    {
      swift_bridgeObjectRetain_n(v78, 2LL);
      uint64_t v87 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v88 = swift_slowAlloc(32LL, -1LL);
      v145[0] = v88;
      *(_DWORD *)uint64_t v87 = 136315138;
      swift_bridgeObjectRetain(v78);
      uint64_t v90 = Array.description.getter(v89, v12);
      unint64_t v92 = v91;
      swift_bridgeObjectRelease(v78);
      uint64_t v143 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v92, v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144);
      swift_bridgeObjectRelease_n(v78, 2LL);
      swift_bridgeObjectRelease(v92);
      _os_log_impl(&dword_0, v35, v86, "TypedDisambiguationItems IncidentType displayHints are: %s", v87, 0xCu);
      swift_arrayDestroy(v88, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1LL, -1LL);
      swift_slowDealloc(v87, -1LL, -1LL);
    }

    uint64_t v93 = v132;
    static GeoNLContextUtils.makeNLContext(weightedPromptResponseTargets:displayHints:)(v131, v78);
    swift_bridgeObjectRelease(v78);
    a5(v93);
    return (*(uint64_t (**)(char *, uint64_t))(v134 + 8))(v93, v135);
  }

  else
  {
    uint64_t v127 = a5;
    if ((v136 & 1) != 0)
    {
      uint64_t v37 = v132;
      NLContextUpdate.init()(v36);
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
      uint64_t v39 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL) - 8);
      uint64_t v40 = *(void *)(v39 + 72);
      uint64_t v41 = *(unsigned __int8 *)(v39 + 80);
      uint64_t v42 = (v41 + 32) & ~v41;
      uint64_t v43 = swift_allocObject(v38, v42 + v40, v41 | 7);
      v136 = (char *)v43;
      *(_OWORD *)(v43 + 16) = xmmword_95430;
      uint64_t v130 = v43 + v42;
      uint64_t v44 = type metadata accessor for UsoTaskBuilder_noVerb_common_Person(0LL);
      swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
      uint64_t v45 = UsoTaskBuilder_noVerb_common_Person.init()();
      uint64_t v46 = type metadata accessor for UsoEntityBuilder_common_Person(0LL);
      swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
      uint64_t v47 = UsoEntityBuilder_common_Person.init()();
      dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
      uint64_t v48 = static Siri_Nlu_External_SystemPrompted.from(_:)(v45, (uint64_t)v22);
      Siri_Nlu_External_SystemDialogAct.init()(v48);
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v20, v22, v17);
      Siri_Nlu_External_SystemDialogAct.prompted.setter(v20);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v17);
      swift_release(v45);
      swift_release(v47);
      NLContextUpdate.nluSystemDialogActs.setter(v136);
      v127(v37);
      uint64_t v49 = v37;
      a5 = v127;
      (*(void (**)(char *, uint64_t))(v134 + 8))(v49, v135);
    }

    uint64_t v50 = v139;
    specialized static RecipientDisambiguationHelper.allHaveSameIdentifier(recipients:)(v139);
    uint64_t v130 = specialized static GeoNLContextUtils.makeDisplayHints(persons:locale:handleDisambiguation:)( v50,  v137.n128_i64[0],  v51 & 1);
    uint64_t v52 = *(void *)(v130 + 16);
    p_opt_class_meths = &OBJC_PROTOCOL___SAAceSerializable.opt_class_meths;
    if (v52)
    {
      uint64_t v54 = v130 + ((*(unsigned __int8 *)(v140 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80));
      uint64_t v139 = *(void *)(v140 + 72);
      uint64_t v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v140 + 16);
      __n128 v56 = swift_bridgeObjectRetain(v130);
      v56.n128_u64[0] = 136315138LL;
      __n128 v137 = v56;
      v136 = (char *)&type metadata for Any + 8;
      uint64_t v57 = v141;
      do
      {
        uint64_t v59 = v55(v16, v54, v12);
        os_log_type_t v67 = static os_log_type_t.info.getter(v59, v60, v61, v62, v63, v64, v65, v66);
        uint64_t v68 = (os_log_s *)p_opt_class_meths[192];
        v55(v57, (uint64_t)v16, v12);
        os_log_type_t v69 = v67;
        if (os_log_type_enabled(v68, v67))
        {
          uint64_t v70 = swift_slowAlloc(12LL, -1LL);
          uint64_t v71 = swift_slowAlloc(32LL, -1LL);
          v145[0] = v71;
          *(_DWORD *)uint64_t v70 = v137.n128_u32[0];
          uint64_t v72 = v138;
          v55(v138, (uint64_t)v141, v12);
          uint64_t v73 = String.init<A>(describing:)(v72, v12);
          unint64_t v75 = v74;
          *(void *)(v70 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, v145);
          swift_bridgeObjectRelease(v75);
          uint64_t v76 = *(void (**)(char *, uint64_t))(v140 + 8);
          v76(v141, v12);
          _os_log_impl( &dword_0,  v68,  v69,  "TypedDisambiguationItems Contact displayHints are: %s",  (uint8_t *)v70,  0xCu);
          swift_arrayDestroy(v71, 1LL, v136);
          uint64_t v77 = v71;
          p_opt_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___SAAceSerializable + 48);
          swift_slowDealloc(v77, -1LL, -1LL);
          swift_slowDealloc(v70, -1LL, -1LL);
          v76(v16, v12);
          uint64_t v57 = v141;
        }

        else
        {
          os_log_type_t v58 = *(void (**)(char *, uint64_t))(v140 + 8);
          v58(v57, v12);
          v58(v16, v12);
        }

        v54 += v139;
        --v52;
      }

      while (v52);
      swift_bridgeObjectRelease(v130);
      a5 = v127;
    }

    uint64_t v96 = v129;
    uint64_t v95 = v130;
    static GeoNLContextUtils.makeNLContext(weightedPromptResponseTargets:displayHints:)(v131, v130);
    uint64_t v97 = swift_bridgeObjectRelease(v95);
    if ((v128 & 1) != 0)
    {
      uint64_t v105 = (os_log_s *)p_opt_class_meths[192];
      os_log_type_t v106 = static os_log_type_t.default.getter(v97);
      if (os_log_type_enabled(v105, v106))
      {
        uint64_t v107 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v107 = 0;
        _os_log_impl(&dword_0, v105, v106, "makeContextForConfirmIntent adding pommesContext", v107, 2u);
        swift_slowDealloc(v107, -1LL, -1LL);
      }

      uint64_t v108 = v124;
      (*(void (**)(char *, void, uint64_t))(v123 + 104))( v124,  enum case for PommesContext.Source.pluginDefined(_:),  v125);
      v109 = v126;
      PommesContext.init(source:domain:listenAfterSpeaking:)(v108, 7300455LL, 0xE300000000000000LL, 1LL);
      uint64_t v110 = type metadata accessor for PommesContext(0LL);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v110 - 8) + 56LL))(v109, 0LL, 1LL, v110);
      uint64_t v97 = NLContextUpdate.pommesContext.setter(v109);
    }

    os_log_type_t v111 = static os_log_type_t.info.getter(v97, v98, v99, v100, v101, v102, v103, v104);
    uint64_t v112 = (os_log_s *)p_opt_class_meths[192];
    os_log_type_t v113 = v111;
    if (os_log_type_enabled(v112, v111))
    {
      v114 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v115 = swift_slowAlloc(32LL, -1LL);
      v145[0] = v115;
      *(_DWORD *)v114 = 136315138;
      swift_beginAccess(v96, &v143, 0LL, 0LL);
      uint64_t v116 = v135;
      uint64_t v117 = a5;
      uint64_t v118 = v132;
      (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v132, v96, v135);
      uint64_t v119 = String.init<A>(describing:)(v118, v116);
      unint64_t v121 = v120;
      uint64_t v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v119, v120, v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143);
      unint64_t v122 = v121;
      a5 = v117;
      swift_bridgeObjectRelease(v122);
      _os_log_impl(&dword_0, v112, v113, "nlContext %s", v114, 0xCu);
      swift_arrayDestroy(v115, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v115, -1LL, -1LL);
      swift_slowDealloc(v114, -1LL, -1LL);
    }

    swift_beginAccess(v96, v145, 0LL, 0LL);
    a5(v96);
    return (*(uint64_t (**)(char *, uint64_t))(v134 + 8))(v96, v135);
  }

uint64_t TypedDisambiguationItems.makeNLContextUpdate(locale:weightedPromptResponseTargets:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(_BYTE *)(v5 + 144) = a5;
  *(void *)(v5 + 48) = a3;
  *(void *)(v5 + 56) = a4;
  *(void *)(v5 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a1;
  *(void *)(v5 + 40) = a2;
  uint64_t v6 = type metadata accessor for NLContextUpdate(0LL);
  *(void *)(v5 + 64) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v5 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v5 + 80) = swift_task_alloc(v8);
  *(void *)(v5 + 88) = swift_task_alloc(v8);
  *(void *)(v5 + 96) = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for DisplayHint(0LL);
  *(void *)(v5 + 104) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v5 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v5 + 120) = swift_task_alloc(v11);
  *(void *)(v5 + 128) = swift_task_alloc(v11);
  *(void *)(v5 + 136) = swift_task_alloc(v11);
  return swift_task_switch( TypedDisambiguationItems.makeNLContextUpdate(locale:weightedPromptResponseTargets:),  0LL,  0LL);
}

uint64_t TypedDisambiguationItems.makeNLContextUpdate(locale:weightedPromptResponseTargets:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v10 = v8 + 24;
  uint64_t v11 = static os_log_type_t.info.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  if (one-time initialization token for logObject != -1) {
    swift_once(&one-time initialization token for logObject, one-time initialization function for logObject);
  }
  char v12 = *(_BYTE *)(v9 + 144);
  uint64_t v13 = *(void *)(v9 + 56);
  p_opt_class_meths = &OBJC_PROTOCOL___SAAceSerializable.opt_class_meths;
  uint64_t v15 = (os_log_s *)logObject;
  os_log(_:dso:log:_:_:)( v11,  &dword_0,  logObject,  "TypedDisambiguationItems makeNLContextUpdate",  44LL,  2LL,  &_swiftEmptyArrayStorage);
  uint64_t v16 = *(void *)(v9 + 40);
  if ((v12 & 1) != 0)
  {
    uint64_t v52 = specialized static GeoNLContextUtils.makeDisplayHints(items:locale:)(v13);
    os_log_type_t v60 = static os_log_type_t.info.getter(v52, v53, v54, v55, v56, v57, v58, v59);
    if (os_log_type_enabled(v15, v60))
    {
      uint64_t v112 = v9 + 16;
      uint64_t v61 = *(void *)(v9 + 104);
      swift_bridgeObjectRetain_n(v52, 2LL);
      uint64_t v62 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v107 = v9;
      uint64_t v63 = swift_slowAlloc(32LL, -1LL);
      uint64_t v114 = v63;
      *(_DWORD *)uint64_t v62 = 136315138;
      swift_bridgeObjectRetain(v52);
      uint64_t v65 = Array.description.getter(v64, v61);
      unint64_t v67 = v66;
      swift_bridgeObjectRelease(v52);
      *(void *)(v107 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v67, &v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v112, v10);
      swift_bridgeObjectRelease(v67);
      swift_bridgeObjectRelease_n(v52, 2LL);
      _os_log_impl(&dword_0, v15, v60, "TypedDisambiguationItems IncidentType displayHints are: %s", v62, 0xCu);
      swift_arrayDestroy(v63, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v68 = v63;
      uint64_t v9 = v107;
      swift_slowDealloc(v68, -1LL, -1LL);
      swift_slowDealloc(v62, -1LL, -1LL);
    }

    static GeoNLContextUtils.makeNLContext(weightedPromptResponseTargets:displayHints:)(*(void *)(v9 + 48), v52);
    swift_bridgeObjectRelease(v52);
  }

  else
  {
    uint64_t v105 = v10;
    specialized static RecipientDisambiguationHelper.allHaveSameIdentifier(recipients:)(v13);
    uint64_t v18 = specialized static GeoNLContextUtils.makeDisplayHints(persons:locale:handleDisambiguation:)(v13, v16, v17 & 1);
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)(v18 + 16);
    if (v20)
    {
      uint64_t v21 = *(void *)(v9 + 112);
      unint64_t v22 = v18 + ((*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
      uint64_t v109 = *(void *)(v21 + 72);
      uint64_t v111 = v21;
      uint64_t v23 = *(uint64_t (**)(void, void, void))(v21 + 16);
      uint64_t v104 = v18;
      swift_bridgeObjectRetain(v18);
      uint64_t v110 = v23;
      uint64_t v106 = v9;
      do
      {
        uint64_t v26 = *(void *)(v9 + 128);
        uint64_t v27 = *(void *)(v9 + 136);
        uint64_t v28 = *(void *)(v9 + 104);
        uint64_t v29 = v23(v27, v22, v28);
        os_log_type_t v37 = static os_log_type_t.info.getter(v29, v30, v31, v32, v33, v34, v35, v36);
        uint64_t v38 = (os_log_s *)p_opt_class_meths[192];
        v23(v26, v27, v28);
        os_log_type_t v39 = v37;
        BOOL v40 = os_log_type_enabled(v38, v37);
        uint64_t v41 = *(void *)(v9 + 128);
        uint64_t v42 = *(void *)(v9 + 136);
        if (v40)
        {
          uint64_t v43 = *(void *)(v9 + 120);
          uint64_t v108 = *(void *)(v9 + 136);
          uint64_t v44 = *(void *)(v9 + 104);
          uint64_t v45 = swift_slowAlloc(12LL, -1LL);
          uint64_t v46 = swift_slowAlloc(32LL, -1LL);
          uint64_t v114 = v46;
          *(_DWORD *)uint64_t v45 = 136315138;
          v23(v43, v41, v44);
          uint64_t v47 = String.init<A>(describing:)(v43, v44);
          unint64_t v49 = v48;
          *(void *)(v45 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v114);
          swift_bridgeObjectRelease(v49);
          uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v111 + 8);
          v50(v41, v44);
          _os_log_impl( &dword_0,  v38,  v39,  "TypedDisambiguationItems Contact displayHints are: %s",  (uint8_t *)v45,  0xCu);
          swift_arrayDestroy(v46, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v51 = v46;
          uint64_t v9 = v106;
          swift_slowDealloc(v51, -1LL, -1LL);
          swift_slowDealloc(v45, -1LL, -1LL);
          v50(v108, v44);
          p_opt_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___SAAceSerializable + 48);
        }

        else
        {
          uint64_t v24 = *(void *)(v9 + 104);
          uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v111 + 8);
          v25(*(void *)(v9 + 128), v24);
          v25(v42, v24);
        }

        uint64_t v23 = v110;
        v22 += v109;
        --v20;
      }

      while (v20);
      uint64_t v19 = v104;
      swift_bridgeObjectRelease(v104);
    }

    uint64_t v70 = *(void *)(v9 + 88);
    uint64_t v69 = *(void *)(v9 + 96);
    uint64_t v72 = *(void *)(v9 + 64);
    uint64_t v71 = *(void *)(v9 + 72);
    static GeoNLContextUtils.makeNLContext(weightedPromptResponseTargets:displayHints:)(*(void *)(v9 + 48), v19);
    uint64_t v73 = swift_bridgeObjectRelease(v19);
    os_log_type_t v81 = static os_log_type_t.info.getter(v73, v74, v75, v76, v77, v78, v79, v80);
    uint64_t v82 = p_opt_class_meths;
    os_log_type_t v83 = v81;
    uint64_t v84 = (os_log_s *)v82[192];
    uint64_t v85 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16);
    v85(v70, v69, v72);
    os_log_type_t v86 = v83;
    BOOL v87 = os_log_type_enabled(v84, v83);
    uint64_t v88 = *(void *)(v9 + 88);
    if (v87)
    {
      uint64_t v89 = *(void *)(v9 + 80);
      uint64_t v113 = *(void *)(v9 + 72);
      uint64_t v90 = *(void *)(v9 + 64);
      unint64_t v91 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v92 = v9;
      uint64_t v93 = swift_slowAlloc(32LL, -1LL);
      uint64_t v114 = v93;
      *(_DWORD *)unint64_t v91 = 136315138;
      v85(v89, v88, v90);
      uint64_t v94 = String.init<A>(describing:)(v89, v90);
      unint64_t v96 = v95;
      *(void *)(v92 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v95, &v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v105, v92 + 32);
      swift_bridgeObjectRelease(v96);
      (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v88, v90);
      _os_log_impl(&dword_0, v84, v86, "nlContext %s", v91, 0xCu);
      swift_arrayDestroy(v93, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v97 = v93;
      uint64_t v9 = v92;
      swift_slowDealloc(v97, -1LL, -1LL);
      swift_slowDealloc(v91, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(void, void))(*(void *)(v9 + 72) + 8LL))(*(void *)(v9 + 88), *(void *)(v9 + 64));
    }

    (*(void (**)(void, void, void))(*(void *)(v9 + 72) + 32LL))( *(void *)(v9 + 32),  *(void *)(v9 + 96),  *(void *)(v9 + 64));
  }

  uint64_t v98 = *(void *)(v9 + 128);
  uint64_t v99 = *(void *)(v9 + 120);
  uint64_t v101 = *(void *)(v9 + 88);
  uint64_t v100 = *(void *)(v9 + 96);
  uint64_t v102 = *(void *)(v9 + 80);
  swift_task_dealloc(*(void *)(v9 + 136));
  swift_task_dealloc(v98);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t TypedDisambiguationItems.shouldReadItemsInVox.getter(int64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    if ((unint64_t)a1 >> 62)
    {
      if (a1 >= 0) {
        uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v4 = a1;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v4);
      outlined consume of TypedDisambiguationItems(a1, 0LL);
      if (v5 >= 6) {
        return specialized static RecipientDisambiguationHelper.hasAllSameRecipientsWithHandles(recipients:)(a1);
      }
    }

    else if (*(uint64_t *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8LL)) >= 6)
    {
      return specialized static RecipientDisambiguationHelper.hasAllSameRecipientsWithHandles(recipients:)(a1);
    }
  }

  return 1LL;
}

unint64_t *specialized _NativeDictionary.filter(_:)(uint64_t a1)
{
  uint64_t v2 = (unint64_t *)a1;
  char v3 = *(_BYTE *)(a1 + 32);
  unsigned int v4 = v3 & 0x3F;
  unint64_t v5 = (1LL << v3) + 63;
  uint64_t v6 = v5 >> 6;
  size_t v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD || (swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8LL) & 1) != 0)
  {
    __chkstk_darwin();
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL), v7);
    uint64_t v8 = specialized closure #1 in _NativeDictionary.filter(_:)( (unint64_t *)((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL)),  v6,  (uint64_t)v2);
    if (v1) {
      swift_willThrow(v8);
    }
    else {
      return v8;
    }
  }

  else
  {
    uint64_t v9 = (void *)swift_slowAlloc(v7, -1LL);
    bzero(v9, v7);
    uint64_t v2 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v9, v6, (uint64_t)v2);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  return v2;
}

unint64_t *specialized closure #1 in _NativeDictionary.filter(_:)( unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0LL;
  int64_t v5 = 0LL;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    unint64_t v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v13 = v12 | (v5 << 6);
LABEL_18:
    uint64_t v16 = *(void *)(*(void *)(a3 + 56) + 8 * v13);
    if ((unint64_t)v16 >> 62)
    {
      uint64_t v19 = *(void *)(*(void *)(a3 + 48) + 16 * v13 + 8);
      uint64_t v20 = result;
      if (v16 < 0) {
        uint64_t v17 = *(void *)(*(void *)(a3 + 56) + 8 * v13);
      }
      else {
        uint64_t v17 = v16 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v21 = a2;
      swift_bridgeObjectRetain(*(void *)(*(void *)(a3 + 48) + 16 * v13 + 8));
      swift_bridgeObjectRetain(v16);
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter(v17);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v16);
      uint64_t result = v20;
      a2 = v21;
      if (v18 >= 2) {
        goto LABEL_4;
      }
    }

    else if (*(uint64_t *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFF8LL)) >= 2)
    {
LABEL_4:
      *(unint64_t *)((char *)result + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      BOOL v11 = __OFADD__(v4++, 1LL);
      if (v11) {
        goto LABEL_33;
      }
    }
  }

  BOOL v11 = __OFADD__(v5++, 1LL);
  if (v11)
  {
    __break(1u);
    goto LABEL_32;
  }

  if (v5 >= v10) {
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
  }
  unint64_t v14 = *(void *)(v6 + 8 * v5);
  if (v14)
  {
LABEL_17:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v13 = __clz(__rbit64(v14)) + (v5 << 6);
    goto LABEL_18;
  }

  int64_t v15 = v5 + 1;
  if (v5 + 1 >= v10) {
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_16;
  }
  int64_t v15 = v5 + 2;
  if (v5 + 2 >= v10) {
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_16;
  }
  int64_t v15 = v5 + 3;
  if (v5 + 3 >= v10) {
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
LABEL_16:
    int64_t v5 = v15;
    goto LABEL_17;
  }

  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v5 >= v10) {
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_17;
    }
  }

LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

  if (v3)
  {
    swift_bridgeObjectRetain(a1);
    uint64_t v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v25 = *(id *)(a1 + 32);
  }

  uint64_t v26 = [v25 contactIdentifier];

  if (v26)
  {
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    uint64_t v29 = v28;

    swift_bridgeObjectRetain(v29);
    uint64_t v30 = &selRef_contactIdentifier;
LABEL_43:
    specialized Sequence.allSatisfy(_:)(a1, v27, v29, (SEL *)v30);
    swift_bridgeObjectRelease_n(v29, 2LL);
    return;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

Swift::Int specialized _NativeDictionary.extractDictionary(using:count:)( unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String?, [INPerson]>);
  Swift::Int result = static _DictionaryStorage.allocate(capacity:)(v5);
  Swift::Int v9 = result;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  Swift::Int v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }

    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1LL)) {
        goto LABEL_43;
      }
      if (v15 >= v33) {
        return v9;
      }
      unint64_t v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v33) {
          return v9;
        }
        unint64_t v16 = v32[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v33) {
            return v9;
          }
          unint64_t v16 = v32[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v33) {
              return v9;
            }
            unint64_t v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1LL)) {
                  goto LABEL_44;
                }
                if (v11 >= v33) {
                  return v9;
                }
                unint64_t v16 = v32[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v11 = v17;
          }
        }
      }

LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

uint64_t specialized static GeoNLContextUtils.makeDisplayHints(persons:locale:handleDisambiguation:)( uint64_t a1, uint64_t a2, int a3)
{
  int v271 = a3;
  uint64_t v254 = a2;
  uint64_t v245 = type metadata accessor for OrdinalDisplayHintsBuilder(0LL);
  uint64_t v244 = *(void *)(v245 - 8);
  __chkstk_darwin();
  v243 = (char *)&v238 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SemanticValue?);
  __chkstk_darwin();
  v242 = (char *)&v238 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v241 = (char *)&v238 - v6;
  __chkstk_darwin();
  v253 = (char *)&v238 - v7;
  __chkstk_darwin();
  v251 = (char *)&v238 - v8;
  __chkstk_darwin();
  v250 = (char *)&v238 - v9;
  __chkstk_darwin();
  v264 = (char *)&v238 - v10;
  __chkstk_darwin();
  v263 = (char *)&v238 - v11;
  uint64_t v281 = type metadata accessor for DisplayHint(0LL);
  uint64_t v276 = *(void *)(v281 - 8);
  __chkstk_darwin();
  v260 = (char *)&v238 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v247 = (char *)&v238 - v13;
  __chkstk_darwin();
  v246 = (char *)&v238 - v14;
  __chkstk_darwin();
  v259 = (char *)&v238 - v15;
  __chkstk_darwin();
  v258 = (char *)&v238 - v16;
  __chkstk_darwin();
  v257 = (char *)&v238 - v17;
  __chkstk_darwin();
  v273 = (char *)&v238 - v18;
  __chkstk_darwin();
  v272 = (char *)&v238 - v19;
  uint64_t v274 = type metadata accessor for SemanticValue(0LL);
  uint64_t v20 = *(uint64_t **)(v274 - 8);
  __chkstk_darwin();
  v240 = (char *)&v238 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v239 = (char *)&v238 - v22;
  __chkstk_darwin();
  v252 = (char *)&v238 - v23;
  __chkstk_darwin();
  v249 = (char *)&v238 - v24;
  __chkstk_darwin();
  v248 = (char *)&v238 - v25;
  __chkstk_darwin();
  v262 = (char *)&v238 - v26;
  __chkstk_darwin();
  v261 = (char *)&v238 - v27;
  __chkstk_darwin();
  v279 = (char *)&v238 - v28;
  __chkstk_darwin();
  *(void *)&__int128 v284 = (char *)&v238 - v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  __chkstk_darwin();
  v266 = (char *)&v238 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v265 = (uint64_t)&v238 - v31;
  __chkstk_darwin();
  v283 = (void (*)(char *, uint64_t, uint64_t))((char *)&v238 - v32);
  __chkstk_darwin();
  uint64_t v34 = (char *)&v238 - v33;
  __chkstk_darwin();
  uint64_t v36 = (char *)&v238 - v35;
  __chkstk_darwin();
  uint64_t v38 = (uint64_t)&v238 - v37;
  v287 = &_swiftEmptyArrayStorage;
  v285 = (uint64_t *)&_swiftEmptyArrayStorage;
  uint64_t v39 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  while (2)
  {
    v267 = v20;
    uint64_t v280 = v39;
    if (!v39)
    {
      swift_bridgeObjectRelease(a1);
      unint64_t v52 = (unint64_t)&_swiftEmptyArrayStorage;
      goto LABEL_24;
    }

    if (v39 < 1)
    {
      __break(1u);
      goto LABEL_139;
    }

    uint64_t v40 = 0LL;
    do
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v40, a1);
      }
      else {
        id v43 = *(id *)(a1 + 8 * v40 + 32);
      }
      uint64_t v44 = v43;
      id v45 = [v43 nameComponents];
      if (v45)
      {
        uint64_t v46 = v45;
        static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v47 = type metadata accessor for PersonNameComponents(0LL);
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56LL))(v36, 0LL, 1LL, v47);
      }

      else
      {
        uint64_t v47 = ((uint64_t (*)(void))type metadata accessor for PersonNameComponents)();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56LL))(v36, 1LL, 1LL, v47);
      }

      outlined init with take of PersonNameComponents?((uint64_t)v36, v38);
      type metadata accessor for PersonNameComponents(0LL);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 48LL))(v38, 1LL, v47))
      {
        outlined destroy of (label: String?, value: Any)?( v38,  &demangling cache variable for type metadata for PersonNameComponents?);
LABEL_16:
        swift_bridgeObjectRelease(0LL);
        uint64_t v48 = 0LL;
        unint64_t v49 = 0xE000000000000000LL;
        goto LABEL_18;
      }

      uint64_t v48 = PersonNameComponents.givenName.getter();
      unint64_t v49 = v50;
      outlined destroy of (label: String?, value: Any)?( v38,  &demangling cache variable for type metadata for PersonNameComponents?);
      if (!v49) {
        goto LABEL_16;
      }
LABEL_18:
      swift_bridgeObjectRelease(v49);
      uint64_t v51 = HIBYTE(v49) & 0xF;
      if ((v49 & 0x2000000000000000LL) == 0) {
        uint64_t v51 = v48 & 0xFFFFFFFFFFFFLL;
      }
      if (v51)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v41 = v285[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v41);
        uint64_t v42 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v44);
        specialized ContiguousArray._endMutation()(v42);
      }

      else
      {
      }

      ++v40;
    }

    while (v280 != v40);
    swift_bridgeObjectRelease(a1);
    unint64_t v52 = (unint64_t)v285;
LABEL_24:
    v285 = (uint64_t *)&_swiftEmptyDictionarySingleton;
    if ((v52 & 0x8000000000000000LL) != 0 || (v52 & 0x4000000000000000LL) != 0)
    {
      uint64_t v84 = swift_bridgeObjectRetain(v52);
      uint64_t v53 = _CocoaArrayWrapper.endIndex.getter(v84);
      swift_release(v52);
      uint64_t v277 = a1;
      if (v53) {
        goto LABEL_27;
      }
    }

    else
    {
      uint64_t v53 = *(void *)(v52 + 16);
      uint64_t v277 = a1;
      if (v53)
      {
LABEL_27:
        id v282 = (id)(v52 & 0xC000000000000001LL);
        uint64_t v54 = (uint64_t *)&_swiftEmptyDictionarySingleton;
        uint64_t v38 = 4LL;
        __int128 v270 = xmmword_95900;
        v278 = (char *)v52;
        v275 = (void *)v53;
        while (1)
        {
          uint64_t v20 = (uint64_t *)(v38 - 4);
          id v60 = v282
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38 - 4, v52)
              : *(id *)(v52 + 8 * v38);
          id v61 = v60;
          uint64_t v62 = (uint64_t)v283;
          uint64_t v63 = v38 - 3;
          if (__OFADD__(v20, 1LL)) {
            break;
          }
          id v64 = [v60 nameComponents];
          if (v64)
          {
            uint64_t v65 = v64;
            static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v66 = type metadata accessor for PersonNameComponents(0LL);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56LL))( v62,  0LL,  1LL,  v66);
          }

          else
          {
            uint64_t v66 = type metadata accessor for PersonNameComponents(0LL);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56LL))( v62,  1LL,  1LL,  v66);
          }

          outlined init with take of PersonNameComponents?(v62, (uint64_t)v34);
          type metadata accessor for PersonNameComponents(0LL);
          a1 = 0LL;
          uint64_t v36 = 0LL;
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v66 - 8) + 48LL))(v34, 1LL, v66))
          {
            a1 = PersonNameComponents.givenName.getter();
            uint64_t v36 = v67;
          }

          outlined destroy of (label: String?, value: Any)?( (uint64_t)v34,  &demangling cache variable for type metadata for PersonNameComponents?);
          uint64_t v20 = v54;
          unint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)v36);
          uint64_t v70 = v54[2];
          BOOL v71 = (v68 & 1) == 0;
          uint64_t v72 = v70 + v71;
          if (__OFADD__(v70, v71)) {
            goto LABEL_49;
          }
          char v73 = v68;
          if (v54[3] < v72)
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v72, 1LL);
            uint64_t v54 = v285;
            unint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)v36);
            if ((v73 & 1) != (v75 & 1)) {
              goto LABEL_140;
            }
            unint64_t v69 = v74;
          }

          if ((v73 & 1) != 0)
          {
            uint64_t v55 = swift_bridgeObjectRelease(v36);
            uint64_t v56 = (void *)(v54[7] + 8 * v69);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v55);
            unint64_t v58 = *(void *)((char *)&dword_10 + (*v56 & 0xFFFFFFFFFFFFFF8LL));
            unint64_t v57 = *(void *)((char *)&dword_18 + (*v56 & 0xFFFFFFFFFFFFFF8LL));
            a1 = v277;
            if (v58 >= v57 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1LL);
            }
            uint64_t v59 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v58, v61);
            specialized Array._endMutation()(v59);
          }

          else
          {
            uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
            uint64_t v77 = swift_allocObject(v76, 40LL, 7LL);
            *(_OWORD *)(v77 + 16) = v270;
            *(void *)(v77 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v61;
            uint64_t v286 = v77;
            uint64_t v20 = &v286;
            specialized Array._endMutation()(v77);
            uint64_t v78 = v286;
            v54[(v69 >> 6) + 8] |= 1LL << v69;
            uint64_t v79 = (uint64_t *)(v54[6] + 16 * v69);
            uint64_t *v79 = a1;
            v79[1] = (uint64_t)v36;
            *(void *)(v54[7] + 8 * v69) = v78;
            uint64_t v80 = v54[2];
            BOOL v81 = __OFADD__(v80, 1LL);
            uint64_t v82 = v80 + 1;
            if (v81) {
              goto LABEL_50;
            }
            v54[2] = v82;
            a1 = v277;
          }

          unint64_t v52 = (unint64_t)v278;
          ++v38;
          if ((void *)v63 == v275) {
            goto LABEL_57;
          }
        }

        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        if (a1 < 0) {
          uint64_t v83 = a1;
        }
        else {
          uint64_t v83 = a1 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(a1);
        uint64_t v39 = _CocoaArrayWrapper.endIndex.getter(v83);
        continue;
      }
    }

    break;
  }

  uint64_t v54 = (uint64_t *)&_swiftEmptyDictionarySingleton;
LABEL_57:
  swift_release(v52);
  uint64_t v85 = specialized _NativeDictionary.filter(_:)((uint64_t)v54);
  swift_release(v54);
  *(void *)&__int128 v270 = v85[2];
  swift_release(v85);
  if (!v280)
  {
    BOOL v87 = &_swiftEmptyArrayStorage;
    goto LABEL_126;
  }

  if (v280 >= 1)
  {
    unint64_t v269 = a1 & 0xC000000000000001LL;
    swift_bridgeObjectRetain(a1);
    os_log_type_t v86 = 0LL;
    BOOL v87 = &_swiftEmptyArrayStorage;
    __int128 v268 = xmmword_949D0;
    uint64_t v88 = v274;
    uint64_t v89 = v267;
    while (1)
    {
      v278 = v86;
      if (v269) {
        id v90 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v86, a1);
      }
      else {
        id v90 = *(id *)(a1 + 8LL * (void)v86 + 32);
      }
      unint64_t v91 = v90;
      uint64_t v92 = INPerson.encodeBase64.getter(v90);
      uint64_t v93 = v284;
      SemanticValue.init(string:label:)(v92);
      v283 = (void (*)(char *, uint64_t, uint64_t))v89[2];
      v283(v279, v93, v88);
      if ((swift_isUniquelyReferenced_nonNull_native(v87) & 1) == 0) {
        BOOL v87 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v87[2] + 1LL,  1,  (unint64_t)v87);
      }
      unint64_t v95 = v87[2];
      unint64_t v94 = v87[3];
      if (v95 >= v94 >> 1) {
        BOOL v87 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v94 > 1,  v95 + 1,  1,  (unint64_t)v87);
      }
      _OWORD v87[2] = v95 + 1;
      uint64_t v96 = ((uint64_t (*)(unint64_t, char *, uint64_t))v89[4])( (unint64_t)v87 + ((*((unsigned __int8 *)v89 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v89 + 80))
            + v89[9] * v95,
              v279,
              v88);
      uint64_t v104 = static os_log_type_t.info.getter(v96, v97, v98, v99, v100, v101, v102, v103);
      if (one-time initialization token for logObject != -1) {
        swift_once(&one-time initialization token for logObject, one-time initialization function for logObject);
      }
      uint64_t v105 = logObject;
      uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v107 = swift_allocObject(v106, 112LL, 7LL);
      *(_OWORD *)(v107 + 16) = v268;
      *(void *)(v107 + 56) = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
      *(void *)(v107 + 64) = lazy protocol witness table accessor for type INPerson and conformance NSObject();
      *(void *)(v107 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v91;
      id v108 = v91;
      uint64_t v109 = INPerson.encodeBase64.getter(v108);
      uint64_t v111 = v110;
      *(void *)(v107 + 96) = &type metadata for String;
      *(void *)(v107 + 104) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v107 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v109;
      *(void *)(v107 + 80) = v111;
      id v112 = v108;
      os_log(_:dso:log:_:_:)(v104, &dword_0, v105, "person %@ semantic value %@", 27LL, 2LL, v107);
      swift_bridgeObjectRelease(v107);
      id v113 = [v108 displayName];
      uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(v113);
      unint64_t v116 = v115;

      swift_bridgeObjectRelease(v116);
      uint64_t v117 = HIBYTE(v116) & 0xF;
      if ((v116 & 0x2000000000000000LL) == 0) {
        uint64_t v117 = v114 & 0xFFFFFFFFFFFFLL;
      }
      id v282 = v108;
      if (v117)
      {
        uint64_t v118 = v263;
        v283(v263, v284, v88);
        uint64_t v119 = (void (*)(char *, void, uint64_t, uint64_t))v89[7];
        v119(v118, 0LL, 1LL, v88);
        id v120 = [v112 displayName];
        uint64_t v121 = static String._unconditionallyBridgeFromObjectiveC(_:)(v120);
        uint64_t v123 = v122;

        type metadata accessor for PersonOntologyNode(0LL);
        uint64_t v124 = static PersonOntologyNode.personFullNameNode.getter();
        unint64_t v125 = specialized OntologyNode.javaClassName.getter();
        uint64_t v127 = v126;
        swift_release(v124);
        int v128 = v261;
        SemanticValue.init(string:label:nodeClass:)(v121, v123, 0x4E79616C70736964LL, 0xEB00000000656D61LL, v125, v127);
        DisplayHint.init(idValue:displayValue:)(v118, v128);
        unint64_t v129 = (unint64_t)v287;
        if ((swift_isUniquelyReferenced_nonNull_native(v287) & 1) == 0) {
          unint64_t v129 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v129 + 16) + 1LL,  1,  v129);
        }
        unint64_t v131 = *(void *)(v129 + 16);
        unint64_t v130 = *(void *)(v129 + 24);
        id v132 = v282;
        v275 = v87;
        if (v131 >= v130 >> 1) {
          unint64_t v129 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v130 > 1,  v131 + 1,  1,  v129);
        }
        *(void *)(v129 + 16) = v131 + 1;
        unint64_t v133 = (*(unsigned __int8 *)(v276 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v276 + 80);
        uint64_t v134 = *(void *)(v276 + 72);
        unint64_t v135 = v129 + v133 + v134 * v131;
        v136 = *(void (**)(unint64_t, char *, uint64_t))(v276 + 32);
        v136(v135, v272, v281);
        __n128 v137 = v264;
        uint64_t v138 = v274;
        v283(v264, v284, v274);
        v119(v137, 0LL, 1LL, v138);
        id v139 = [v132 displayName];
        uint64_t v140 = static String._unconditionallyBridgeFromObjectiveC(_:)(v139);
        uint64_t v142 = v141;

        uint64_t v143 = type metadata accessor for AddressOntologyNode.OccupantNode(0LL);
        uint64_t v144 = static AddressOntologyNode.OccupantNode.occupantFullNameNode.getter(v143);
        unint64_t v145 = specialized OntologyNode.javaClassName.getter();
        uint64_t v147 = v146;
        swift_release(v144);
        v148 = v262;
        SemanticValue.init(string:label:nodeClass:)(v140, v142, 0x4E79616C70736964LL, 0xEB00000000656D61LL, v145, v147);
        DisplayHint.init(idValue:displayValue:)(v137, v148);
        unint64_t v150 = *(void *)(v129 + 16);
        unint64_t v149 = *(void *)(v129 + 24);
        if (v150 >= v149 >> 1) {
          unint64_t v129 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v149 > 1,  v150 + 1,  1,  v129);
        }
        a1 = v277;
        *(void *)(v129 + 16) = v150 + 1;
        v136(v129 + v133 + v150 * v134, v273, v281);
        v287 = (void *)v129;
        uint64_t v88 = v274;
        BOOL v87 = v275;
        uint64_t v89 = v267;
        id v112 = v282;
      }

      if ((void)v270)
      {
        id v151 = [v112 nameComponents];
        if (v151)
        {
          v152 = v151;
          uint64_t v153 = (uint64_t)v266;
          static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v154 = type metadata accessor for PersonNameComponents(0LL);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v154 - 8) + 56LL))( v153,  0LL,  1LL,  v154);
        }

        else
        {
          uint64_t v154 = type metadata accessor for PersonNameComponents(0LL);
          uint64_t v153 = (uint64_t)v266;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v154 - 8) + 56LL))( v266,  1LL,  1LL,  v154);
        }

        uint64_t v155 = v265;
        outlined init with take of PersonNameComponents?(v153, v265);
        type metadata accessor for PersonNameComponents(0LL);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v154 - 8) + 48LL))(v155, 1LL, v154))
        {
          outlined destroy of (label: String?, value: Any)?( v155,  &demangling cache variable for type metadata for PersonNameComponents?);
        }

        else
        {
          uint64_t v156 = PersonNameComponents.familyName.getter();
          uint64_t v158 = v157;
          outlined destroy of (label: String?, value: Any)?( v155,  &demangling cache variable for type metadata for PersonNameComponents?);
          if (v158)
          {
            uint64_t v159 = v156;
            v160 = v250;
            v283(v250, v284, v88);
            v255 = (void (*)(char *, void, uint64_t, uint64_t))v89[7];
            v255(v160, 0LL, 1LL, v88);
            type metadata accessor for AddressOntologyNode.OccupantNode(0LL);
            uint64_t v161 = swift_bridgeObjectRetain(v158);
            uint64_t v162 = static AddressOntologyNode.OccupantNode.occupantFullNameNode.getter(v161);
            unint64_t v163 = specialized OntologyNode.javaClassName.getter();
            uint64_t v165 = v164;
            swift_release(v162);
            v166 = v248;
            uint64_t v256 = v159;
            SemanticValue.init(string:label:nodeClass:)( v159,  v158,  0x614E796C696D6166LL,  0xEA0000000000656DLL,  v163,  v165);
            DisplayHint.init(idValue:displayValue:)(v160, v166);
            unint64_t v167 = (unint64_t)v287;
            if ((swift_isUniquelyReferenced_nonNull_native(v287) & 1) == 0) {
              unint64_t v167 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v167 + 16) + 1LL,  1,  v167);
            }
            unint64_t v169 = *(void *)(v167 + 16);
            unint64_t v168 = *(void *)(v167 + 24);
            v275 = v87;
            if (v169 >= v168 >> 1) {
              unint64_t v167 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v168 > 1,  v169 + 1,  1,  v167);
            }
            *(void *)(v167 + 16) = v169 + 1;
            unint64_t v170 = (*(unsigned __int8 *)(v276 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v276 + 80);
            uint64_t v171 = *(void *)(v276 + 72);
            unint64_t v172 = v167 + v170 + v171 * v169;
            v173 = *(void (**)(unint64_t, char *, uint64_t))(v276 + 32);
            v173(v172, v257, v281);
            v174 = v251;
            v283(v251, v284, v88);
            uint64_t v175 = ((uint64_t (*)(char *, void, uint64_t, uint64_t))v255)(v174, 0LL, 1LL, v88);
            uint64_t Name = static AddressOntologyNode.OccupantNode.occupantLastNameNode.getter(v175);
            unint64_t v177 = specialized OntologyNode.javaClassName.getter();
            uint64_t v179 = v178;
            swift_release(Name);
            v180 = v249;
            SemanticValue.init(string:label:nodeClass:)( v256,  v158,  0x614E796C696D6166LL,  0xEA0000000000656DLL,  v177,  v179);
            DisplayHint.init(idValue:displayValue:)(v174, v180);
            unint64_t v182 = *(void *)(v167 + 16);
            unint64_t v181 = *(void *)(v167 + 24);
            if (v182 >= v181 >> 1) {
              unint64_t v167 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v181 > 1,  v182 + 1,  1,  v167);
            }
            a1 = v277;
            *(void *)(v167 + 16) = v182 + 1;
            v173(v167 + v170 + v182 * v171, v258, v281);
            v287 = (void *)v167;
            uint64_t v89 = v267;
            BOOL v87 = v275;
            id v112 = v282;
          }
        }
      }

      if ((v271 & 1) != 0 && (id v183 = [v112 personHandle]) != 0)
      {
        v184 = v183;
        id v185 = [v183 label];
        if (v185)
        {
          v186 = v185;
          uint64_t v187 = Locale.identifier.getter();
          uint64_t v189 = v188;
          uint64_t v190 = static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)(v186, v187, v188);
          swift_bridgeObjectRelease(v189);
          v191 = v253;
          v283(v253, v284, v88);
          ((void (*)(char *, void, uint64_t, uint64_t))v89[7])(v191, 0LL, 1LL, v88);
          v192 = v252;
          SemanticValue.init(string:label:)(v190);
          DisplayHint.init(idValue:displayValue:)(v191, v192);
          unint64_t v193 = (unint64_t)v287;
          if ((swift_isUniquelyReferenced_nonNull_native(v287) & 1) == 0) {
            unint64_t v193 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v193 + 16) + 1LL,  1,  v193);
          }
          unint64_t v195 = *(void *)(v193 + 16);
          unint64_t v194 = *(void *)(v193 + 24);
          if (v195 >= v194 >> 1) {
            unint64_t v193 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v194 > 1,  v195 + 1,  1,  v193);
          }
          *(void *)(v193 + 16) = v195 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v276 + 32))( v193 + ((*(unsigned __int8 *)(v276 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v276 + 80))
          + *(void *)(v276 + 72) * v195,
            v259,
            v281);

          v287 = (void *)v193;
        }

        id v196 = [v184 value];
        if (!v196)
        {

LABEL_123:
          ((void (*)(void, uint64_t))v89[1])(v284, v88);
          goto LABEL_61;
        }

        v197 = v196;
        uint64_t v198 = static String._unconditionallyBridgeFromObjectiveC(_:)(v196);
        unint64_t v200 = v199;

        uint64_t v201 = HIBYTE(v200) & 0xF;
        if ((v200 & 0x2000000000000000LL) == 0) {
          uint64_t v201 = v198 & 0xFFFFFFFFFFFFLL;
        }
        if (v201)
        {
          v202 = (char *)[v184 type];
          if (v202 == (_BYTE *)&dword_0 + 1)
          {
            v208 = v241;
            v283(v241, v284, v88);
            ((void (*)(char *, void, uint64_t, uint64_t))v89[7])(v208, 0LL, 1LL, v88);
            v209 = v239;
            SemanticValue.init(string:label:)(v198);
            DisplayHint.init(idValue:displayValue:)(v208, v209);
            unint64_t v205 = (unint64_t)v287;
            if ((swift_isUniquelyReferenced_nonNull_native(v287) & 1) == 0) {
              unint64_t v205 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v205 + 16) + 1LL,  1,  v205);
            }
            unint64_t v211 = *(void *)(v205 + 16);
            unint64_t v210 = *(void *)(v205 + 24);
            if (v211 >= v210 >> 1) {
              unint64_t v205 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v210 > 1,  v211 + 1,  1,  v205);
            }
            *(void *)(v205 + 16) = v211 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v276 + 32))( v205 + ((*(unsigned __int8 *)(v276 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v276 + 80))
            + *(void *)(v276 + 72) * v211,
              v246,
              v281);
            goto LABEL_122;
          }

          if (v202 == (_BYTE *)&dword_0 + 2)
          {
            v203 = v242;
            v283(v242, v284, v88);
            ((void (*)(char *, void, uint64_t, uint64_t))v89[7])(v203, 0LL, 1LL, v88);
            v204 = v240;
            SemanticValue.init(string:label:)(v198);
            DisplayHint.init(idValue:displayValue:)(v203, v204);
            unint64_t v205 = (unint64_t)v287;
            if ((swift_isUniquelyReferenced_nonNull_native(v287) & 1) == 0) {
              unint64_t v205 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v205 + 16) + 1LL,  1,  v205);
            }
            unint64_t v207 = *(void *)(v205 + 16);
            unint64_t v206 = *(void *)(v205 + 24);
            if (v207 >= v206 >> 1) {
              unint64_t v205 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v206 > 1,  v207 + 1,  1,  v205);
            }
            *(void *)(v205 + 16) = v207 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v276 + 32))( v205 + ((*(unsigned __int8 *)(v276 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v276 + 80))
            + *(void *)(v276 + 72) * v207,
              v247,
              v281);
LABEL_122:

            v287 = (void *)v205;
            goto LABEL_123;
          }
        }

        ((void (*)(void, uint64_t))v89[1])(v284, v88);
        swift_bridgeObjectRelease(v200);
      }

      else
      {
        ((void (*)(void, uint64_t))v89[1])(v284, v88);
      }

LABEL_61:
      os_log_type_t v86 = v278 + 1;
      if ((char *)v280 == v278 + 1)
      {
        swift_bridgeObjectRelease(a1);
LABEL_126:
        if (one-time initialization token for referenceNode != -1) {
          goto LABEL_137;
        }
LABEL_127:
        uint64_t v212 = TerminalOntologyNode.name.getter();
        v213 = v243;
        OrdinalDisplayHintsBuilder.init(referenceNode:)(v212);
        uint64_t v214 = OrdinalDisplayHintsBuilder.build(for:)(v87);
        swift_bridgeObjectRelease(v87);
        (*(void (**)(char *, uint64_t))(v244 + 8))(v213, v245);
        uint64_t v215 = specialized Array.append<A>(contentsOf:)(v214);
        uint64_t v224 = v287[2];
        if (!v224)
        {
LABEL_135:
          swift_beginAccess(&v287, &v285, 0LL, 0LL);
          return (uint64_t)v287;
        }

        unint64_t v225 = 0LL;
        *(void *)&__int128 v223 = 134218242LL;
        __int128 v284 = v223;
        v226 = v260;
        while (1)
        {
          os_log_type_t v227 = static os_log_type_t.info.getter(v215, v216, v217, v218, v219, v220, v221, v222);
          if (one-time initialization token for logObject != -1) {
            swift_once(&one-time initialization token for logObject, one-time initialization function for logObject);
          }
          v228 = (os_log_s *)logObject;
          v229 = v287;
          uint64_t v215 = os_log_type_enabled((os_log_t)logObject, v227);
          if ((_DWORD)v215)
          {
            swift_bridgeObjectRetain_n(v229, 2LL);
            uint64_t v230 = swift_slowAlloc(22LL, -1LL);
            v231 = (uint64_t *)swift_slowAlloc(32LL, -1LL);
            v285 = v231;
            *(_DWORD *)uint64_t v230 = v284;
            *(void *)(v230 + 4) = v225;
            *(_WORD *)(v230 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
            if (v225 >= v229[2])
            {
              __break(1u);
LABEL_137:
              swift_once( &one-time initialization token for referenceNode,  one-time initialization function for referenceNode);
              goto LABEL_127;
            }

            BOOL v87 = v231;
            uint64_t v232 = v281;
            (*(void (**)(char *, unint64_t, uint64_t))(v276 + 16))( v226,  (unint64_t)v229 + ((*(unsigned __int8 *)(v276 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v276 + 80))
            + *(void *)(v276 + 72) * v225,
              v281);
            uint64_t v233 = String.init<A>(describing:)(v226, v232);
            unint64_t v235 = v234;
            *(void *)(v230 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( v233,  v234,  (uint64_t *)&v285);
            swift_bridgeObjectRelease_n(v229, 2LL);
            swift_bridgeObjectRelease(v235);
            _os_log_impl(&dword_0, v228, v227, "display hint %ld %s", (uint8_t *)v230, 0x16u);
            swift_arrayDestroy(v87, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v87, -1LL, -1LL);
            uint64_t v215 = swift_slowDealloc(v230, -1LL, -1LL);
          }

          if (v224 == ++v225) {
            goto LABEL_135;
          }
        }
      }
    }
  }

LABEL_139:
  __break(1u);
LABEL_140:
  uint64_t v237 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v237);
  __break(1u);
  return result;
}

uint64_t specialized static GeoNLContextUtils.makeDisplayHints(items:locale:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OrdinalDisplayHintsBuilder(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SemanticValue?);
  __chkstk_darwin();
  os_log_type_t v86 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DisplayHint(0LL);
  uint64_t v84 = *(void *)(v7 - 8);
  uint64_t v85 = v7;
  __chkstk_darwin();
  uint64_t v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SemanticValue(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v83 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v82 = (char *)&v74 - v13;
  __chkstk_darwin();
  uint64_t v88 = (char *)&v74 - v14;
  __chkstk_darwin();
  id v90 = (char *)&v74 - v15;
  unint64_t v91 = &_swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v70 = a1;
    }
    else {
      uint64_t v70 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v70);
    uint64_t v16 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_34:
    swift_bridgeObjectRelease(a1);
    uint64_t v89 = &_swiftEmptyArrayStorage;
    goto LABEL_35;
  }

  uint64_t v16 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  uint64_t result = swift_bridgeObjectRetain(a1);
  if (!v16) {
    goto LABEL_34;
  }
LABEL_3:
  uint64_t v87 = v16;
  if (v16 < 1)
  {
    __break(1u);
    return result;
  }

  char v75 = v5;
  uint64_t v76 = v3;
  uint64_t v77 = v2;
  uint64_t v18 = 0LL;
  unint64_t v19 = a1 & 0xC000000000000001LL;
  uint64_t v89 = &_swiftEmptyArrayStorage;
  uint64_t v20 = v87;
  uint64_t v78 = v9;
  uint64_t v79 = a1;
  unint64_t v80 = a1 & 0xC000000000000001LL;
  uint64_t v81 = v10;
  do
  {
    if (v19) {
      id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, a1);
    }
    else {
      id v22 = *(id *)(a1 + 8 * v18 + 32);
    }
    uint64_t v30 = v22;
    uint64_t v31 = static os_log_type_t.info.getter(v22, v23, v24, v25, v26, v27, v28, v29);
    if (one-time initialization token for logObject != -1) {
      swift_once(&one-time initialization token for logObject, one-time initialization function for logObject);
    }
    os_log(_:dso:log:_:_:)( v31,  &dword_0,  logObject,  "convertNLIncidentTypeFromSupportedTrafficIncidentType",  53LL,  2LL,  &_swiftEmptyArrayStorage);
    uint64_t v32 = (char *)[v30 type];
    uint64_t v33 = v32 - 1;
    if ((unint64_t)(v32 - 1) <= 4 && ((0x17u >> (char)v33) & 1) != 0)
    {
      uint64_t v34 = v11;
      uint64_t v35 = 8LL * (void)v33;
      uint64_t v36 = *(void *)&aAccidenthazard[v35];
      uint64_t v37 = *(void *)&aSpeedChacciden[v35 + 24];
      uint64_t v38 = one-time initialization token for incidentTypeNode;
      swift_bridgeObjectRetain(v37);
      if (v38 != -1) {
        swift_once( &one-time initialization token for incidentTypeNode,  one-time initialization function for incidentTypeNode);
      }
      uint64_t v39 = static LocationSearchIntent.incidentTypeNode;
      uint64_t v40 = TerminalOntologyNode.name.getter();
      uint64_t v42 = v41;
      swift_retain(v39);
      unint64_t v43 = specialized OntologyNode.javaClassName.getter();
      uint64_t v45 = v44;
      swift_release(v39);
      SemanticValue.init(string:label:nodeClass:)(v36, v37, v40, v42, v43, v45);
      id v46 = [v30 localizedDisplayString];
      if (v46)
      {
        uint64_t v47 = v46;
        uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
        uint64_t v49 = v48;
        swift_bridgeObjectRelease(v37);

        uint64_t v37 = v49;
      }

      uint64_t v50 = static LocationSearchIntent.incidentTypeNode;
      uint64_t v51 = TerminalOntologyNode.name.getter();
      uint64_t v53 = v52;
      swift_retain(v50);
      unint64_t v54 = specialized OntologyNode.javaClassName.getter();
      uint64_t v56 = v55;
      swift_release(v50);
      SemanticValue.init(string:label:nodeClass:)(v36, v37, v51, v53, v54, v56);
      uint64_t v11 = v34;
      unint64_t v57 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
      uint64_t v59 = v81;
      unint64_t v58 = v82;
      v57(v82, v90, v81);
      if ((swift_isUniquelyReferenced_nonNull_native(v89) & 1) == 0) {
        uint64_t v89 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v89[2] + 1LL,  1,  (unint64_t)v89);
      }
      id v60 = v78;
      a1 = v79;
      unint64_t v62 = v89[2];
      unint64_t v61 = v89[3];
      if (v62 >= v61 >> 1) {
        uint64_t v89 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v61 > 1,  v62 + 1,  1,  (unint64_t)v89);
      }
      uint64_t v63 = v89;
      _OWORD v89[2] = v62 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))( (unint64_t)v63 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
      + *(void *)(v11 + 72) * v62,
        v58,
        v59);
      id v64 = v86;
      v57(v86, v90, v59);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v64, 0LL, 1LL, v59);
      uint64_t v65 = v83;
      v57(v83, v88, v59);
      DisplayHint.init(idValue:displayValue:)(v64, v65);
      unint64_t v66 = (unint64_t)v91;
      if ((swift_isUniquelyReferenced_nonNull_native(v91) & 1) == 0) {
        unint64_t v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v66 + 16) + 1LL,  1,  v66);
      }
      uint64_t v20 = v87;
      unint64_t v68 = *(void *)(v66 + 16);
      unint64_t v67 = *(void *)(v66 + 24);
      if (v68 >= v67 >> 1) {
        unint64_t v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v67 > 1,  v68 + 1,  1,  v66);
      }
      *(void *)(v66 + 16) = v68 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v84 + 32))( v66 + ((*(unsigned __int8 *)(v84 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80))
      + *(void *)(v84 + 72) * v68,
        v60,
        v85);

      unint64_t v91 = (void *)v66;
      unint64_t v69 = *(void (**)(char *, uint64_t))(v11 + 8);
      v69(v88, v59);
      v69(v90, v59);
      unint64_t v19 = v80;
    }

    else
    {
      uint64_t v21 = static os_log_type_t.error.getter(v32);
      if (one-time initialization token for logObject != -1) {
        swift_once(&one-time initialization token for logObject, one-time initialization function for logObject);
      }
      os_log(_:dso:log:_:_:)( v21,  &dword_0,  logObject,  "makeDisplayHints incident type doesn't match any of the existing supported ones",  79LL,  2LL,  &_swiftEmptyArrayStorage);
    }

    ++v18;
  }

  while (v20 != v18);
  swift_bridgeObjectRelease(a1);
  uint64_t v3 = v76;
  uint64_t v2 = v77;
  uint64_t v5 = v75;
LABEL_35:
  if (one-time initialization token for referenceNode != -1) {
    swift_once(&one-time initialization token for referenceNode, one-time initialization function for referenceNode);
  }
  uint64_t v71 = TerminalOntologyNode.name.getter();
  OrdinalDisplayHintsBuilder.init(referenceNode:)(v71);
  uint64_t v72 = v89;
  uint64_t v73 = OrdinalDisplayHintsBuilder.build(for:)(v89);
  swift_bridgeObjectRelease(v72);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  specialized Array.append<A>(contentsOf:)(v73);
  return (uint64_t)v91;
}

id specialized Sequence.allSatisfy(_:)(unint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v5 = a1;
  if (!(a1 >> 62))
  {
    uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain(a1);
    if (v6) {
      goto LABEL_3;
    }
LABEL_23:
    uint64_t v19 = 1LL;
LABEL_24:
    swift_bridgeObjectRelease(v5);
    return (id)v19;
  }

LABEL_19:
  if (v5 < 0) {
    uint64_t v20 = v5;
  }
  else {
    uint64_t v20 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v5);
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v20);
  if (!v6) {
    goto LABEL_23;
  }
LABEL_3:
  unint64_t v21 = v5 & 0xC000000000000001LL;
  uint64_t v7 = 4LL;
  while (1)
  {
    if (v21) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5);
    }
    else {
      id v8 = *(id *)(v5 + 8 * v7);
    }
    uint64_t v9 = v8;
    uint64_t v10 = v7 - 3;
    if (__OFADD__(v7 - 4, 1LL))
    {
      __break(1u);
      goto LABEL_19;
    }

    uint64_t v11 = v5;
    id result = [v8 *a4];
    if (!result) {
      break;
    }
    uint64_t v13 = result;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    uint64_t v16 = v15;

    if (v14 == a2 && v16 == a3)
    {

      swift_bridgeObjectRelease(a3);
      uint64_t v5 = v11;
    }

    else
    {
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, v14, v16, 0LL);

      swift_bridgeObjectRelease(v16);
      uint64_t v5 = v11;
      if ((v18 & 1) == 0)
      {
        uint64_t v19 = 0LL;
        goto LABEL_24;
      }
    }

    ++v7;
    if (v10 == v6)
    {
      uint64_t v19 = 1LL;
      goto LABEL_24;
    }
  }

  __break(1u);
  return result;
}

  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

  swift_bridgeObjectRelease(a1);
  return v6;
}

void specialized static RecipientDisambiguationHelper.allHaveSameIdentifier(recipients:)(int64_t a1)
{
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain(a1);
    if (v2) {
      goto LABEL_3;
    }
LABEL_50:
    swift_bridgeObjectRelease(a1);
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

LABEL_46:
  if (a1 < 0) {
    uint64_t v33 = a1;
  }
  else {
    uint64_t v33 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v33);
  if (!v2) {
    goto LABEL_50;
  }
LABEL_3:
  unint64_t v3 = a1 & 0xC000000000000001LL;
  uint64_t v4 = 4LL;
  do
  {
    if (v3) {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1);
    }
    else {
      id v5 = *(id *)(a1 + 8 * v4);
    }
    uint64_t v6 = v5;
    uint64_t v7 = v4 - 3;
    if (__OFADD__(v4 - 4, 1LL))
    {
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }

    id v8 = [v5 contactIdentifier];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      unint64_t v12 = v11;
    }

    else
    {
      uint64_t v10 = 0LL;
      unint64_t v12 = 0xE000000000000000LL;
    }

    swift_bridgeObjectRelease(v12);
    if ((v12 & 0x2000000000000000LL) != 0) {
      uint64_t v13 = HIBYTE(v12) & 0xF;
    }
    else {
      uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
    }
    if (!v13) {
      break;
    }
    ++v4;
  }

  while (v7 != v2);
  uint64_t v14 = 4LL;
  do
  {
    if (v3) {
      id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, a1);
    }
    else {
      id v15 = *(id *)(a1 + 8 * v14);
    }
    uint64_t v16 = v15;
    uint64_t v17 = v14 - 3;
    if (__OFADD__(v14 - 4, 1LL)) {
      goto LABEL_45;
    }
    id v18 = [v15 customIdentifier];
    if (v18)
    {
      uint64_t v19 = v18;
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      unint64_t v22 = v21;
    }

    else
    {
      uint64_t v20 = 0LL;
      unint64_t v22 = 0xE000000000000000LL;
    }

    swift_bridgeObjectRelease(v22);
    uint64_t v23 = HIBYTE(v22) & 0xF;
    if ((v22 & 0x2000000000000000LL) == 0) {
      uint64_t v23 = v20 & 0xFFFFFFFFFFFFLL;
    }
    if (!v23)
    {
      swift_bridgeObjectRelease(a1);
      if (!v13) {
        return;
      }
      goto LABEL_32;
    }

    ++v14;
  }

  while (v17 != v2);
  swift_bridgeObjectRelease(a1);
  if (!v13)
  {
    if (v3)
    {
      swift_bridgeObjectRetain(a1);
      id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
      swift_bridgeObjectRelease(a1);
    }

    else
    {
      id v24 = *(id *)(a1 + 32);
    }

    id v31 = [v24 customIdentifier];

    if (v31)
    {
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      uint64_t v29 = v32;

      swift_bridgeObjectRetain(v29);
      uint64_t v30 = &selRef_customIdentifier;
      goto LABEL_43;
    }

    goto LABEL_54;
  }

LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
}

uint64_t specialized Sequence.allSatisfy(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    uint64_t v7 = 4LL;
    while (1)
    {
      id v8 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a1)
         : *(id *)(a1 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      uint64_t v11 = a2;
      id v12 = [v8 displayName];
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      uint64_t v15 = v14;

      a2 = v11;
      if (v13 == v11 && v15 == a3)
      {

        swift_bridgeObjectRelease(a3);
      }

      else
      {
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, a3, v13, v15, 0LL);

        swift_bridgeObjectRelease(v15);
        if ((v17 & 1) == 0)
        {
          uint64_t v18 = 0LL;
          goto LABEL_23;
        }
      }

      ++v7;
      if (v10 == v6)
      {
        uint64_t v18 = 1LL;
        goto LABEL_23;
      }
    }

    __break(1u);
LABEL_18:
    if (a1 < 0) {
      uint64_t v19 = a1;
    }
    else {
      uint64_t v19 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

  uint64_t v18 = 1LL;
LABEL_23:
  swift_bridgeObjectRelease(a1);
  return v18;
}

{
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v19;
  id v5 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  for (; v5; id v5 = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    uint64_t v6 = 4LL;
    while (1)
    {
      uint64_t v7 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1)
         : *(id *)(a1 + 8 * v6);
      id v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1LL)) {
        break;
      }
      uint64_t v10 = [v7 person];
      uint64_t v11 = [v10 contactIdentifier];

      if (v11)
      {
        id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        uint64_t v14 = v13;

        if (!a3)
        {
          swift_bridgeObjectRelease(a1);

          char v17 = v14;
          goto LABEL_23;
        }

        if (v12 == a2 && v14 == a3)
        {

          swift_bridgeObjectRelease(v14);
        }

        else
        {
          uint64_t v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, a2, a3, 0LL);

          swift_bridgeObjectRelease(v14);
          if ((v16 & 1) == 0)
          {
            char v17 = a1;
LABEL_23:
            swift_bridgeObjectRelease(v17);
            return 0LL;
          }
        }
      }

      else
      {
        if (a3)
        {
          swift_bridgeObjectRelease(a1);

          return 0LL;
        }
      }

      ++v6;
      if (v9 == v5) {
        goto LABEL_30;
      }
    }

    __break(1u);
LABEL_26:
    if (a1 < 0) {
      uint64_t v19 = a1;
    }
    else {
      uint64_t v19 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

uint64_t specialized static RecipientDisambiguationHelper.hasRecipientsWithSameDisplayName(recipients:)( uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v10);
    if (result) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease(a1);
    uint64_t v7 = 0LL;
    unint64_t v9 = 0xE000000000000000LL;
    goto LABEL_12;
  }

  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  uint64_t result = swift_bridgeObjectRetain(a1);
  if (!v2) {
    goto LABEL_11;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
  }

  else
  {
    if (!*(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL)))
    {
      __break(1u);
      return result;
    }

    id v4 = *(id *)(a1 + 32);
  }

  id v5 = v4;
  swift_bridgeObjectRelease(a1);
  id v6 = [v5 displayName];

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  unint64_t v9 = v8;

LABEL_12:
  uint64_t v11 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000LL) == 0) {
    uint64_t v11 = v7 & 0xFFFFFFFFFFFFLL;
  }
  if (v11)
  {
    swift_bridgeObjectRetain(v9);
    char v12 = specialized Sequence.allSatisfy(_:)(a1, v7, v9);
    swift_bridgeObjectRelease(v9);
  }

  else
  {
    char v12 = 0;
  }

  swift_bridgeObjectRelease(v9);
  return v12 & 1;
}

uint64_t specialized static DisambiguationListUtils.makeHandleLabelItemComponent(handleLabel:handleType:locale:)( void *a1)
{
  uint64_t v2 = Locale.languageCode.getter();
  uint64_t v4 = 0x53555F6E65LL;
  if (v3)
  {
    uint64_t v4 = v2;
    unint64_t v5 = v3;
  }

  else
  {
    unint64_t v5 = 0xE500000000000000LL;
  }

  uint64_t v6 = static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)(a1, v4, v5);
  unint64_t v8 = v7;
  uint64_t v9 = swift_bridgeObjectRelease(v5);
  os_log_type_t v17 = static os_log_type_t.info.getter(v9, v10, v11, v12, v13, v14, v15, v16);
  if (one-time initialization token for logObject != -1) {
    swift_once(&one-time initialization token for logObject, one-time initialization function for logObject);
  }
  uint64_t v18 = (os_log_s *)logObject;
  if (os_log_type_enabled((os_log_t)logObject, v17))
  {
    id v19 = a1;
    swift_bridgeObjectRetain_n(v8, 2LL);
    id v20 = v19;
    uint64_t v21 = swift_slowAlloc(22LL, -1LL);
    uint64_t v22 = swift_slowAlloc(64LL, -1LL);
    uint64_t v33 = (uint64_t)v20;
    uint64_t v34 = v22;
    *(_DWORD *)uint64_t v21 = 136315394;
    type metadata accessor for INPersonHandleLabel(0LL);
    uint64_t v24 = v23;
    id v25 = v20;
    uint64_t v26 = String.init<A>(describing:)(&v33, v24);
    unint64_t v28 = v27;
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);

    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v21 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
    swift_bridgeObjectRetain(v8);
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
    swift_bridgeObjectRelease_n(v8, 3LL);
    _os_log_impl(&dword_0, v18, v17, "makeHandleLabelItemComponent %s label %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy(v22, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  type metadata accessor for SiriKitDisambiguationItemComponent(0LL);
  uint64_t v29 = dispatch thunk of static SiriKitDisambiguationItemComponent.makeBuilder(_:)(v6, v8);
  uint64_t v30 = swift_bridgeObjectRelease(v8);
  uint64_t v31 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.build()(v30);
  swift_release(v29);
  return v31;
}

uint64_t specialized static DisambiguationListUtils.makeHandleValueItemComponent(type:value:allowedOnLockScreen:)( uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  uint64_t v8 = type metadata accessor for SpeakableString(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1 == 2)
  {
    unint64_t v48 = a2;
    unint64_t v49 = a3;
    int v43 = a4;
    uint64_t v46 = 11370722LL;
    unint64_t v47 = 0xA300000000000000LL;
    uint64_t v44 = 0LL;
    unint64_t v45 = 0xE000000000000000LL;
    unint64_t v12 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v46,  &v44,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v12,  v12,  v12);
    unint64_t v15 = v14;
    unint64_t v48 = v13;
    unint64_t v49 = v14;
    uint64_t v46 = 11305186LL;
    unint64_t v47 = 0xA300000000000000LL;
    uint64_t v44 = 0LL;
    unint64_t v45 = 0xE000000000000000LL;
    uint64_t v16 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v46,  &v44,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v12,  v12,  v12);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(v15);
    unint64_t v48 = 0LL;
    unint64_t v49 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease(v49);
    unint64_t v48 = 0xD000000000000012LL;
    unint64_t v49 = 0x800000000009C520LL;
    v19._uint64_t countAndFlagsBits = v16;
    v19._object = v18;
    String.append(_:)(v19);
    v20._uint64_t countAndFlagsBits = 0xD000000000000013LL;
    v20._object = (void *)0x800000000009C540LL;
    String.append(_:)(v20);
    SpeakableString.init(print:speak:)(v16, v18, v48, v49);
    type metadata accessor for SiriKitDisambiguationItemComponent(0LL);
    uint64_t v21 = SpeakableString.print.getter();
    uint64_t v23 = v22;
    uint64_t v24 = dispatch thunk of static SiriKitDisambiguationItemComponent.makeBuilder(_:)(v21, v22);
    uint64_t v25 = swift_bridgeObjectRelease(v23);
    uint64_t v26 = SpeakableString.speak.getter(v25);
    uint64_t v28 = v27;
    uint64_t v29 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withSpeak(_:)(v26);
    swift_release(v24);
    uint64_t v30 = swift_bridgeObjectRelease(v28);
    uint64_t v31 = SpeakableString.speak.getter(v30);
    uint64_t v33 = v32;
    uint64_t v34 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withSpeakOnLockScreen(_:)(v31);
    swift_release(v29);
    swift_bridgeObjectRelease(v33);
    uint64_t v35 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withAllowedOnLockScreen(_:)(v43 & 1);
    uint64_t v36 = swift_release(v34);
    uint64_t v37 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.build()(v36);
    swift_release(v35);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  else
  {
    type metadata accessor for SiriKitDisambiguationItemComponent(0LL);
    uint64_t v38 = dispatch thunk of static SiriKitDisambiguationItemComponent.makeBuilder(_:)(a2, a3);
    uint64_t v39 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withAllowedOnLockScreen(_:)(a4 & 1);
    uint64_t v40 = swift_release(v38);
    uint64_t v37 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.build()(v40);
    swift_release(v39);
  }

  return v37;
}

void *specialized static DisambiguationListUtils.makeDisambiguationItemComponents(person:locale:handleDisambiguation:)( id a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
  {
    id v4 = [a1 personHandle];
    if (v4)
    {
      unint64_t v5 = v4;
      id v6 = [v4 label];
      if (v6)
      {
        unint64_t v7 = v6;
        [v5 type];
        uint64_t v8 = specialized static DisambiguationListUtils.makeHandleLabelItemComponent(handleLabel:handleType:locale:)(v7);
        uint64_t v9 = swift_retain(v8);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v9);
        unint64_t v10 = *(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v11 = *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        if (v10 >= v11 >> 1)
        {
          unint64_t v40 = *(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v10 + 1, 1LL);
          unint64_t v10 = v40;
        }

        uint64_t v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v8);
        specialized Array._endMutation()(v12);

        swift_release(v8);
      }

      id v13 = [v5 value];
      if (v13)
      {
        unint64_t v14 = v13;
        unint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        unint64_t v17 = v16;

        uint64_t v18 = specialized static DisambiguationListUtils.makeHandleValueItemComponent(type:value:allowedOnLockScreen:)( (uint64_t)[v5 type],  v15,  v17,  0);
        swift_bridgeObjectRelease(v17);
        uint64_t v19 = swift_retain(v18);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
        unint64_t v21 = *(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v20 = *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        if (v21 >= v20 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1LL);
        }
        uint64_t v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v18);
        specialized Array._endMutation()(v22);

        swift_release(v18);
      }

      else
      {
      }
    }
  }

  else
  {
    id v23 = [a1 displayName];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    unint64_t v26 = v25;

    swift_bridgeObjectRelease(v26);
    uint64_t v27 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000LL) == 0) {
      uint64_t v27 = v24 & 0xFFFFFFFFFFFFLL;
    }
    if (v27)
    {
      type metadata accessor for SiriKitDisambiguationItemComponent(0LL);
      id v28 = [a1 displayName];
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      uint64_t v31 = v30;

      uint64_t v32 = dispatch thunk of static SiriKitDisambiguationItemComponent.makeBuilder(_:)(v29, v31);
      uint64_t v33 = swift_bridgeObjectRelease(v31);
      uint64_t v34 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.build()(v33);
      uint64_t v35 = swift_release(v32);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
      unint64_t v37 = *(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
      unint64_t v36 = *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
      if (v37 >= v36 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1LL);
      }
      uint64_t v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v34);
      specialized Array._endMutation()(v38);
    }
  }

  return &_swiftEmptyArrayStorage;
}

uint64_t specialized static DisambiguationListUtils.makeDisambiguationItem(person:locale:handleDisambiguation:)( void *a1, uint64_t a2, char a3)
{
  unint64_t v3 = specialized static DisambiguationListUtils.makeDisambiguationItemComponents(person:locale:handleDisambiguation:)( a1,  a2,  a3);
  id v4 = objc_allocWithZone(&OBJC_CLASS___SKIDirectInvocationPayload);
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 initWithIdentifier:v5];

  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = swift_initStackObject(v7, v32);
  *(_OWORD *)(inited + 16) = xmmword_95430;
  v31[0] = 0x6E65697069636552LL;
  v31[1] = 0xE900000000000074LL;
  id v9 = v6;
  uint64_t v10 = AnyHashable.init<A>(_:)(v31, &type metadata for String, &protocol witness table for String);
  uint64_t v11 = INPerson.encodeBase64.getter(v10);
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v11;
  *(void *)(inited + 80) = v12;
  unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v13);
  [v9 setUserData:isa];

  if (one-time initialization token for logObject != -1) {
    swift_once(&one-time initialization token for logObject, one-time initialization function for logObject);
  }
  unint64_t v15 = (os_log_s *)logObject;
  id v16 = v9;
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v15, v17))
  {
    uint64_t v29 = v3;
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    v31[0] = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    id v20 = v16;
    id v21 = [v20 description];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    unint64_t v24 = v23;

    uint64_t v25 = v22;
    unint64_t v3 = v29;
    uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31);

    swift_bridgeObjectRelease(v24);
    _os_log_impl(&dword_0, v15, v17, "Make Disambiguation Item with DirectInvocation payload: %s", v18, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v26 = type metadata accessor for SiriKitDisambiguationItem(0LL);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  uint64_t v27 = SiriKitDisambiguationItem.init(components:directInvocation:allowLineWrapForDisplayText:)(v3, v16, 1LL);

  return v27;
}

void *specialized static DisambiguationListUtils.makeDisambiguationItems(persons:locale:)( int64_t a1, uint64_t a2)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v34 = a1;
    }
    else {
      uint64_t v34 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v34);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t result = &_swiftEmptyArrayStorage;
  if (v6)
  {
    specialized static RecipientDisambiguationHelper.allHaveSameIdentifier(recipients:)(a1);
    char v9 = v8;
    char v10 = specialized static RecipientDisambiguationHelper.hasRecipientsWithSameDisplayName(recipients:)(a1);
    if ((v9 & 1) == 0) {
      goto LABEL_10;
    }
    if ((a1 & 0xC000000000000001LL) != 0) {
      goto LABEL_25;
    }
    unint64_t v11 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
    if (!v11)
    {
      __break(1u);
      goto LABEL_27;
    }

    for (id i = *(id *)(a1 + 32); ; id i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1))
    {
      unint64_t v13 = i;
      type metadata accessor for SiriKitDisambiguationItemComponent(0LL);
      id v14 = [v13 displayName];
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      uint64_t v17 = v16;

      uint64_t v18 = dispatch thunk of static SiriKitDisambiguationItemComponent.makeBuilder(_:)(v15, v17);
      uint64_t v19 = swift_bridgeObjectRelease(v17);
      uint64_t v20 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.build()(v19);
      swift_release(v18);
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v22 = swift_allocObject(v21, 40LL, 7LL);
      *(_OWORD *)(v22 + 16) = xmmword_95900;
      *(void *)(v22 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v20;
      uint64_t v35 = v22;
      specialized Array._endMutation()(v22);
      uint64_t v23 = type metadata accessor for SiriKitDisambiguationItem(0LL);
      swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
      uint64_t v3 = SiriKitDisambiguationItem.init(components:utterance:allowLineWrapForDisplayText:)( v35,  0LL,  0xE000000000000000LL,  0LL);

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v24);
      unint64_t v2 = *(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
      unint64_t v11 = *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
      if (v2 >= v11 >> 1) {
LABEL_27:
      }
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v2 + 1, 1LL);
      uint64_t v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v2, v3);
      specialized Array._endMutation()(v25);
LABEL_10:
      if (v6 >= 1) {
        break;
      }
      __break(1u);
LABEL_25:
      ;
    }

    swift_bridgeObjectRetain(a1);
    uint64_t v26 = 0LL;
    char v27 = v10 & 1;
    do
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26, a1);
      }
      else {
        id v28 = *(id *)(a1 + 8 * v26 + 32);
      }
      uint64_t v29 = v28;
      uint64_t v30 = specialized static DisambiguationListUtils.makeDisambiguationItem(person:locale:handleDisambiguation:)( v28,  a2,  v27);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
      unint64_t v32 = *(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
      unint64_t v31 = *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
      if (v32 >= v31 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1LL);
      }
      ++v26;
      uint64_t v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
      specialized Array._endMutation()(v33);
    }

    while (v6 != v26);
    swift_bridgeObjectRelease(a1);
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

_OWORD *specialized static DisambiguationListUtils.makeDisambiguationItemComponents(item:locale:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = specialized static TrafficIncidentUtils.convertNLIncidentTypeFromSupportedTrafficIncidentType(incidentType:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
  if (v10)
  {
    uint64_t v11 = v9;
    uint64_t v12 = v10;
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    id v14 = (_OWORD *)swift_allocObject(v13, 40LL, 7LL);
    v14[1] = xmmword_95900;
    id v15 = [a1 localizedDisplayString];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      uint64_t v19 = v18;
    }

    else
    {
      swift_bridgeObjectRetain(v12);
      uint64_t v17 = v11;
      uint64_t v19 = v12;
    }

    uint64_t v21 = type metadata accessor for SiriKitDisambiguationItemComponent(0LL);
    uint64_t v22 = dispatch thunk of static SiriKitDisambiguationItemComponent.makeBuilder(_:)(v17, v19);
    swift_bridgeObjectRelease(v19);
    id v23 = [a1 localizedDisplayString];
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      uint64_t v26 = v25;
      swift_bridgeObjectRelease(v12);

      uint64_t v12 = v26;
    }

    uint64_t v27 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withSpeak(_:)(v11);
    swift_bridgeObjectRelease(v12);
    uint64_t v28 = swift_release(v22);
    uint64_t v29 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.build()(v28);
    uint64_t v30 = swift_release(v27);
    *((void *)v14 + 4) = v29;
    unint64_t v49 = v14;
    uint64_t v31 = specialized Array._endMutation()(v30);
    os_log_type_t v39 = static os_log_type_t.info.getter(v31, v32, v33, v34, v35, v36, v37, v38);
    if (one-time initialization token for logObject != -1) {
      swift_once(&one-time initialization token for logObject, one-time initialization function for logObject);
    }
    unint64_t v40 = (os_log_s *)logObject;
    if (os_log_type_enabled((os_log_t)logObject, v39))
    {
      swift_bridgeObjectRetain_n(v14, 2LL);
      uint64_t v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v42 = swift_slowAlloc(32LL, -1LL);
      unint64_t v49 = (_OWORD *)v42;
      *(_DWORD *)uint64_t v41 = 136315138;
      uint64_t v43 = swift_bridgeObjectRetain(v14);
      uint64_t v44 = Array.description.getter(v43, v21);
      unint64_t v46 = v45;
      swift_bridgeObjectRelease(v14);
      uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
      swift_bridgeObjectRelease_n(v14, 2LL);
      swift_bridgeObjectRelease(v46);
      _os_log_impl(&dword_0, v40, v39, "makeDisambiguationItemComponents made components %s", v41, 0xCu);
      swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1LL, -1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
    }
  }

  else
  {
    uint64_t v20 = static os_log_type_t.error.getter(v9);
    if (one-time initialization token for logObject != -1) {
      swift_once(&one-time initialization token for logObject, one-time initialization function for logObject);
    }
    id v14 = &_swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v20,  &dword_0,  logObject,  "makeDisambiguationItemComponents incident type doesn't match any of the existing supported ones",  95LL,  2LL,  &_swiftEmptyArrayStorage);
  }

  return v14;
}

uint64_t specialized static DisambiguationListUtils.makeMachineUtterance(item:locale:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = specialized static TrafficIncidentUtils.convertNLIncidentTypeFromSupportedTrafficIncidentType(incidentType:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = type metadata accessor for MachineUtteranceBuilder(0LL);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v12 = MachineUtteranceBuilder.init()();
    uint64_t v13 = dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)(0xD00000000000001ALL);
    swift_release(v12);
    uint64_t v14 = swift_bridgeObjectRelease(v10);
    uint64_t v15 = dispatch thunk of MachineUtteranceBuilder.build()(v14);
    unint64_t v17 = v16;
    swift_release(v13);
    if (one-time initialization token for logObject != -1) {
      swift_once(&one-time initialization token for logObject, one-time initialization function for logObject);
    }
    uint64_t v18 = (os_log_s *)logObject;
    uint64_t v19 = swift_bridgeObjectRetain_n(v17, 2LL);
    os_log_type_t v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v18, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      uint64_t v26 = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      swift_bridgeObjectRetain(v17);
      uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
      swift_bridgeObjectRelease_n(v17, 3LL);
      _os_log_impl(&dword_0, v18, v20, "makeMachineUtterance utterance is: %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v17, 2LL);
    }
  }

  else
  {
    uint64_t v23 = static os_log_type_t.error.getter(v8);
    if (one-time initialization token for logObject != -1) {
      swift_once(&one-time initialization token for logObject, one-time initialization function for logObject);
    }
    os_log(_:dso:log:_:_:)( v23,  &dword_0,  logObject,  "makeMachineUtterance incident type doesn't match any of the existing supported ones",  83LL,  2LL,  &_swiftEmptyArrayStorage);
    return 0LL;
  }

  return v15;
}

uint64_t specialized static DisambiguationListUtils.makeDisambiguationItem(item:locale:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = specialized static DisambiguationListUtils.makeDisambiguationItemComponents(item:locale:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
  uint64_t v17 = specialized static DisambiguationListUtils.makeMachineUtterance(item:locale:)( a1,  a2,  v11,  v12,  v13,  v14,  v15,  v16);
  uint64_t v19 = v18;
  uint64_t v20 = type metadata accessor for SiriKitDisambiguationItem(0LL);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  uint64_t v21 = SiriKitDisambiguationItem.init(components:utterance:allowLineWrapForDisplayText:)(v10, v17, v19, 1LL);
  if (one-time initialization token for logObject != -1) {
    swift_once(&one-time initialization token for logObject, one-time initialization function for logObject);
  }
  uint64_t v22 = (os_log_s *)logObject;
  uint64_t v23 = swift_retain_n(v21, 2LL);
  os_log_type_t v24 = static os_log_type_t.default.getter(v23);
  if (os_log_type_enabled(v22, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v31 = v21;
    uint64_t v32 = v26;
    *(_DWORD *)uint64_t v25 = 136315138;
    swift_retain(v21);
    uint64_t v27 = String.init<A>(describing:)(&v31, v20);
    unint64_t v29 = v28;
    uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_release_n(v21, 2LL);
    swift_bridgeObjectRelease(v29);
    _os_log_impl(&dword_0, v22, v24, "makeDisambiguationItem incident item is: %s", v25, 0xCu);
    swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v21, 2LL);
  }

  return v21;
}

void *specialized static DisambiguationListUtils.makeDisambiguationItems(incidentTypes:locale:)( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v26 = a1;
    }
    else {
      uint64_t v26 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v26);
    a1 = swift_bridgeObjectRelease(v2);
    if (v3) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
    if (v3)
    {
LABEL_3:
      unint64_t v33 = (unint64_t)&_swiftEmptyArrayStorage;
      if (v3 >= 1)
      {
        swift_bridgeObjectRetain(v2);
        uint64_t v4 = 0LL;
        while (1)
        {
          if ((v2 & 0xC000000000000001LL) != 0) {
            id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v2);
          }
          else {
            id v5 = *(id *)(v2 + 32 + 8 * v4);
          }
          uint64_t v6 = v5;
          if (one-time initialization token for siriSupportedIncidents != -1) {
            swift_once( &one-time initialization token for siriSupportedIncidents,  one-time initialization function for siriSupportedIncidents);
          }
          swift_beginAccess(&static TrafficIncidentUtils.siriSupportedIncidents, v32, 0LL, 0LL);
          uint64_t v7 = static TrafficIncidentUtils.siriSupportedIncidents;
          swift_bridgeObjectRetain(static TrafficIncidentUtils.siriSupportedIncidents);
          id v8 = [v6 type];
          if (*(void *)(v7 + 16))
          {
            Swift::UInt v9 = (Swift::UInt)v8;
            Hasher.init(_seed:)(v31, *(void *)(v7 + 40));
            Hasher._combine(_:)(v9);
            Swift::Int v10 = Hasher._finalize()();
            uint64_t v11 = -1LL << *(_BYTE *)(v7 + 32);
            unint64_t v12 = v10 & ~v11;
            if (((*(void *)(v7 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
            {
              uint64_t v13 = *(void *)(v7 + 48);
              if (*(void *)(v13 + 8 * v12) == v9)
              {
LABEL_18:
                swift_bridgeObjectRelease(v7);
                uint64_t v21 = specialized static DisambiguationListUtils.makeDisambiguationItem(item:locale:)( v6,  a2,  v15,  v16,  v17,  v18,  v19,  v20);
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
                unint64_t v23 = *(void *)((char *)&dword_10 + (v33 & 0xFFFFFFFFFFFFFF8LL));
                unint64_t v22 = *(void *)((char *)&dword_18 + (v33 & 0xFFFFFFFFFFFFFF8LL));
                if (v23 >= v22 >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v22 > 1,  v23 + 1,  1LL);
                }
                uint64_t v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
                specialized Array._endMutation()(v24);

                goto LABEL_6;
              }

              uint64_t v14 = ~v11;
              while (1)
              {
                unint64_t v12 = (v12 + 1) & v14;
                if (((*(void *)(v7 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
                  break;
                }
                if (*(void *)(v13 + 8 * v12) == v9) {
                  goto LABEL_18;
                }
              }
            }
          }

          swift_bridgeObjectRelease(v7);
LABEL_6:
          if (++v4 == v3)
          {
            swift_bridgeObjectRelease(v2);
            return (void *)v33;
          }
        }
      }

      __break(1u);
      goto LABEL_31;
    }
  }

  if (one-time initialization token for logObject != -1) {
LABEL_31:
  }
    a1 = swift_once(&one-time initialization token for logObject, one-time initialization function for logObject);
  uint64_t v27 = (os_log_s *)logObject;
  os_log_type_t v28 = static os_log_type_t.default.getter(a1);
  if (os_log_type_enabled(v27, v28))
  {
    unint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v29 = 0;
    _os_log_impl(&dword_0, v27, v28, "makeDisambiguationItems received empty list", v29, 2u);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  return &_swiftEmptyArrayStorage;
}

uint64_t specialized TypedDisambiguationItems.makeNLContextUpdate(locale:weightedPromptResponseTargets:isPommes:isUSO:_:)( unint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, char a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v137 = a8;
  uint64_t v138 = a7;
  uint64_t v144 = a5;
  LODWORD(v141) = a4;
  int v131 = a3;
  uint64_t v134 = a2;
  v142.n128_u64[0] = a1;
  uint64_t v9 = type metadata accessor for DisplayHint(0LL);
  uint64_t v145 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v143 = (char *)&v126 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v146 = (char *)&v126 - v11;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v126 - v12;
  uint64_t v130 = type metadata accessor for PommesContext.Source(0LL);
  uint64_t v128 = *(void *)(v130 - 8);
  __chkstk_darwin();
  unint64_t v129 = (char *)&v126 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v126 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin();
  v136 = (char *)&v126 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for Siri_Nlu_External_SystemPrompted(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin();
  uint64_t v21 = (char *)&v126 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v23 = (char *)&v126 - v22;
  uint64_t v24 = type metadata accessor for NLContextUpdate(0LL);
  uint64_t v139 = *(void *)(v24 - 8);
  uint64_t v140 = v24;
  __chkstk_darwin();
  id v132 = (char *)&v126 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin();
  unint64_t v135 = (char *)&v126 - v27;
  uint64_t v35 = static os_log_type_t.info.getter(v26, v28, v29, v30, v31, v32, v33, v34);
  if (one-time initialization token for logObject != -1) {
    swift_once(&one-time initialization token for logObject, one-time initialization function for logObject);
  }
  uint64_t v36 = (os_log_s *)logObject;
  uint64_t v37 = os_log(_:dso:log:_:_:)( v35,  &dword_0,  logObject,  "TypedDisambiguationItems makeNLContextUpdate",  44LL,  2LL,  _swiftEmptyArrayStorage);
  if ((a6 & 1) != 0)
  {
    uint64_t v77 = specialized static GeoNLContextUtils.makeDisplayHints(items:locale:)(v144);
    os_log_type_t v85 = static os_log_type_t.info.getter(v77, v78, v79, v80, v81, v82, v83, v84);
    if (os_log_type_enabled(v36, v85))
    {
      swift_bridgeObjectRetain_n(v77, 2LL);
      os_log_type_t v86 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v87 = swift_slowAlloc(32LL, -1LL);
      v150[0] = v87;
      *(_DWORD *)os_log_type_t v86 = 136315138;
      swift_bridgeObjectRetain(v77);
      uint64_t v89 = Array.description.getter(v88, v9);
      unint64_t v91 = v90;
      swift_bridgeObjectRelease(v77);
      uint64_t v148 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v91, v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149);
      swift_bridgeObjectRelease_n(v77, 2LL);
      swift_bridgeObjectRelease(v91);
      _os_log_impl(&dword_0, v36, v85, "TypedDisambiguationItems IncidentType displayHints are: %s", v86, 0xCu);
      swift_arrayDestroy(v87, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v87, -1LL, -1LL);
      swift_slowDealloc(v86, -1LL, -1LL);
    }

    uint64_t v92 = v135;
    static GeoNLContextUtils.makeNLContext(weightedPromptResponseTargets:displayHints:)(v134, v77);
    swift_bridgeObjectRelease(v77);
    uint64_t v94 = v139;
    uint64_t v93 = v140;
    uint64_t v95 = (uint64_t)v136;
    (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v136, v92, v140);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v94 + 56))(v95, 0LL, 1LL, v93);
    v138(v95);
    outlined destroy of (label: String?, value: Any)?( v95,  &demangling cache variable for type metadata for NLContextUpdate?);
    return (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v92, v93);
  }

  else
  {
    uint64_t v127 = v16;
    if ((v141 & 1) != 0)
    {
      NLContextUpdate.init()(v37);
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
      uint64_t v39 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL) - 8);
      uint64_t v141 = swift_allocObject( v38,  ((*(unsigned __int8 *)(v39 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))
             + *(void *)(v39 + 72),
               *(unsigned __int8 *)(v39 + 80) | 7LL);
      *(_OWORD *)(v141 + 16) = xmmword_95430;
      uint64_t v40 = type metadata accessor for UsoTaskBuilder_noVerb_common_Person(0LL);
      swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
      uint64_t v41 = UsoTaskBuilder_noVerb_common_Person.init()();
      uint64_t v42 = type metadata accessor for UsoEntityBuilder_common_Person(0LL);
      swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
      uint64_t v43 = UsoEntityBuilder_common_Person.init()();
      dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
      uint64_t v44 = static Siri_Nlu_External_SystemPrompted.from(_:)(v41, (uint64_t)v23);
      Siri_Nlu_External_SystemDialogAct.init()(v44);
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v21, v23, v18);
      Siri_Nlu_External_SystemDialogAct.prompted.setter(v21);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v18);
      swift_release(v41);
      swift_release(v43);
      unint64_t v45 = v135;
      NLContextUpdate.nluSystemDialogActs.setter(v141);
      uint64_t v47 = v139;
      uint64_t v46 = v140;
      uint64_t v48 = (uint64_t)v136;
      (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v136, v45, v140);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v48, 0LL, 1LL, v46);
      v138(v48);
      outlined destroy of (label: String?, value: Any)?( v48,  &demangling cache variable for type metadata for NLContextUpdate?);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v45, v46);
    }

    uint64_t v49 = v144;
    specialized static RecipientDisambiguationHelper.allHaveSameIdentifier(recipients:)(v144);
    uint64_t v133 = specialized static GeoNLContextUtils.makeDisplayHints(persons:locale:handleDisambiguation:)( v49,  v142.n128_i64[0],  v50 & 1);
    uint64_t v51 = *(void *)(v133 + 16);
    p_opt_class_meths = &OBJC_PROTOCOL___SAAceSerializable.opt_class_meths;
    if (v51)
    {
      uint64_t v53 = v133 + ((*(unsigned __int8 *)(v145 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v145 + 80));
      uint64_t v144 = *(void *)(v145 + 72);
      unint64_t v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v145 + 16);
      __n128 v55 = swift_bridgeObjectRetain(v133);
      v55.n128_u64[0] = 136315138LL;
      __n128 v142 = v55;
      uint64_t v141 = (uint64_t)&type metadata for Any + 8;
      uint64_t v56 = v146;
      do
      {
        uint64_t v58 = v54(v13, v53, v9);
        os_log_type_t v66 = static os_log_type_t.info.getter(v58, v59, v60, v61, v62, v63, v64, v65);
        unint64_t v67 = (os_log_s *)p_opt_class_meths[192];
        v54(v56, (uint64_t)v13, v9);
        os_log_type_t v68 = v66;
        if (os_log_type_enabled(v67, v66))
        {
          uint64_t v69 = swift_slowAlloc(12LL, -1LL);
          uint64_t v70 = swift_slowAlloc(32LL, -1LL);
          v150[0] = v70;
          *(_DWORD *)uint64_t v69 = v142.n128_u32[0];
          uint64_t v71 = v143;
          v54(v143, (uint64_t)v146, v9);
          uint64_t v72 = String.init<A>(describing:)(v71, v9);
          unint64_t v74 = v73;
          *(void *)(v69 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, v150);
          swift_bridgeObjectRelease(v74);
          char v75 = *(void (**)(char *, uint64_t))(v145 + 8);
          v75(v146, v9);
          _os_log_impl( &dword_0,  v67,  v68,  "TypedDisambiguationItems Contact displayHints are: %s",  (uint8_t *)v69,  0xCu);
          swift_arrayDestroy(v70, 1LL, v141);
          uint64_t v76 = v70;
          uint64_t v56 = v146;
          swift_slowDealloc(v76, -1LL, -1LL);
          swift_slowDealloc(v69, -1LL, -1LL);
          v75(v13, v9);
          p_opt_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___SAAceSerializable + 48);
        }

        else
        {
          unint64_t v57 = *(void (**)(char *, uint64_t))(v145 + 8);
          v57(v56, v9);
          v57(v13, v9);
        }

        v53 += v144;
        --v51;
      }

      while (v51);
      swift_bridgeObjectRelease(v133);
    }

    uint64_t v97 = v132;
    uint64_t v98 = v133;
    static GeoNLContextUtils.makeNLContext(weightedPromptResponseTargets:displayHints:)(v134, v133);
    uint64_t v99 = swift_bridgeObjectRelease(v98);
    if ((v131 & 1) != 0)
    {
      uint64_t v107 = (os_log_s *)p_opt_class_meths[192];
      os_log_type_t v108 = static os_log_type_t.default.getter(v99);
      if (os_log_type_enabled(v107, v108))
      {
        uint64_t v109 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v109 = 0;
        _os_log_impl(&dword_0, v107, v108, "makeContextForConfirmIntent adding pommesContext", v109, 2u);
        swift_slowDealloc(v109, -1LL, -1LL);
      }

      uint64_t v110 = v129;
      (*(void (**)(char *, void, uint64_t))(v128 + 104))( v129,  enum case for PommesContext.Source.pluginDefined(_:),  v130);
      uint64_t v111 = v127;
      PommesContext.init(source:domain:listenAfterSpeaking:)(v110, 7300455LL, 0xE300000000000000LL, 1LL);
      uint64_t v112 = type metadata accessor for PommesContext(0LL);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v112 - 8) + 56LL))(v111, 0LL, 1LL, v112);
      uint64_t v99 = NLContextUpdate.pommesContext.setter(v111);
    }

    os_log_type_t v113 = static os_log_type_t.info.getter(v99, v100, v101, v102, v103, v104, v105, v106);
    uint64_t v114 = (os_log_s *)p_opt_class_meths[192];
    os_log_type_t v115 = v113;
    if (os_log_type_enabled(v114, v113))
    {
      unint64_t v116 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v117 = swift_slowAlloc(32LL, -1LL);
      v150[0] = v117;
      *(_DWORD *)unint64_t v116 = 136315138;
      swift_beginAccess(v97, &v148, 0LL, 0LL);
      uint64_t v118 = v140;
      uint64_t v119 = v135;
      (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v135, v97, v140);
      uint64_t v120 = String.init<A>(describing:)(v119, v118);
      unint64_t v122 = v121;
      uint64_t v147 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, v121, v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
      swift_bridgeObjectRelease(v122);
      _os_log_impl(&dword_0, v114, v115, "nlContext %s", v116, 0xCu);
      swift_arrayDestroy(v117, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v117, -1LL, -1LL);
      swift_slowDealloc(v116, -1LL, -1LL);
    }

    swift_beginAccess(v97, v150, 0LL, 0LL);
    uint64_t v124 = v139;
    uint64_t v123 = v140;
    uint64_t v125 = (uint64_t)v136;
    (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v136, v97, v140);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v124 + 56))(v125, 0LL, 1LL, v123);
    v138(v125);
    outlined destroy of (label: String?, value: Any)?( v125,  &demangling cache variable for type metadata for NLContextUpdate?);
    return (*(uint64_t (**)(char *, uint64_t))(v124 + 8))(v97, v123);
  }

uint64_t specialized static RecipientDisambiguationHelper.hasAllSameRecipientsWithHandles(recipients:)( int64_t a1)
{
  if ((v2 & 1) == 0) {
    return 0LL;
  }
  uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      uint64_t v4 = 0LL;
      while (1)
      {
        uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
        uint64_t v6 = v4 + 1;
        if (__OFADD__(v4, 1LL)) {
          break;
        }
        uint64_t v7 = v5;
        if ((INPerson.hasHandleLabel.getter() & 1) != 0)
        {
          swift_unknownObjectRelease(v7);
        }

        else
        {
          char v8 = INPerson.hasHandleValue.getter();
          swift_unknownObjectRelease(v7);
          if ((v8 & 1) == 0) {
            goto LABEL_18;
          }
        }

        ++v4;
        if (v6 == v3) {
          goto LABEL_26;
        }
      }

      __break(1u);
    }

    else
    {
      uint64_t v9 = 0LL;
      while (1)
      {
        uint64_t v10 = v9 + 1;
        if (__OFADD__(v9, 1LL)) {
          break;
        }
        id v11 = *(id *)(a1 + 8 * v9 + 32);
        if ((INPerson.hasHandleLabel.getter() & 1) != 0)
        {
        }

        else
        {
          char v12 = INPerson.hasHandleValue.getter();

          if ((v12 & 1) == 0)
          {
LABEL_18:
            swift_bridgeObjectRelease(a1);
            return 0LL;
          }
        }

        ++v9;
        if (v10 == v3) {
          goto LABEL_26;
        }
      }
    }

    __break(1u);
LABEL_22:
    if (a1 < 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

LABEL_26:
  swift_bridgeObjectRelease(a1);
  return 1LL;
}

      uint64_t v34 = (v18 - 1) & v18;
      uint64_t v35 = v19;
      uint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
    }

    uint64_t v21 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v16);
    unint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    outlined init with copy of Any(*(void *)(v1 + 56) + 32 * v16, (uint64_t)v7);
    v39[0] = v23;
    v39[1] = v22;
    outlined init with copy of Any((uint64_t)v7, (uint64_t)v38);
    swift_bridgeObjectRetain_n(v22, 2LL);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v39, v9);
    if (!swift_dynamicCast(&v36, v38, v10, &type metadata for Int, 6LL))
    {
      uint64_t v36 = 0LL;
      uint64_t v37 = 1;
      swift_bridgeObjectRelease(v22);
      outlined consume of [String : Any].Iterator._Variant(v1);
      swift_release(v3);
      return;
    }

    uint64_t v24 = v36;
    uint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v22);
    uint64_t v26 = v25;
    if ((v27 & 1) != 0)
    {
      id v11 = v10;
      char v12 = v7;
      uint64_t v13 = v1;
      uint64_t v14 = v9;
      uint64_t v15 = (uint64_t *)(v3[6] + 16 * v25);
      swift_bridgeObjectRelease(v15[1]);
      os_log_s *v15 = v23;
      v15[1] = v22;
      uint64_t v9 = v14;
      uint64_t v1 = v13;
      uint64_t v7 = v12;
      uint64_t v10 = v11;
      *(void *)(v3[7] + 8 * v26) = v24;
      goto LABEL_8;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v25;
    uint64_t v28 = (uint64_t *)(v3[6] + 16 * v25);
    *uint64_t v28 = v23;
    v28[1] = v22;
    *(void *)(v3[7] + 8 * v25) = v24;
    uint64_t v29 = v3[2];
    uint64_t v30 = __OFADD__(v29, 1LL);
    uint64_t v31 = v29 + 1;
    if (v30) {
      goto LABEL_35;
    }
    v3[2] = v31;
LABEL_8:
    uint64_t v6 = v34;
    char v8 = v35;
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

      uint64_t v35 = (v19 - 1) & v19;
      uint64_t v16 = __clz(__rbit64(v19)) + (v17 << 6);
    }

    uint64_t v21 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v16);
    unint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    outlined init with copy of Any(*(void *)(v1 + 56) + 32 * v16, (uint64_t)v7);
    v38[0] = v23;
    v38[1] = v22;
    outlined init with copy of Any((uint64_t)v7, (uint64_t)v37);
    swift_bridgeObjectRetain_n(v22, 2LL);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v38,  &demangling cache variable for type metadata for (key: String, value: Any));
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(v9);
    if (!swift_dynamicCast(&v36, v37, (char *)&type metadata for Any + 8, v24, 6LL))
    {
      uint64_t v36 = xmmword_963E0;
      swift_bridgeObjectRelease(v22);
      outlined consume of String??(v36, *((uint64_t *)&v36 + 1));
      outlined consume of [String : Any].Iterator._Variant(v1);
      swift_release(v3);
      return;
    }

    uint64_t v34 = v17;
    uint64_t v25 = v36;
    uint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v22);
    if ((v27 & 1) != 0)
    {
      uint64_t v10 = v9;
      id v11 = 16 * v26;
      char v12 = v7;
      uint64_t v13 = v1;
      uint64_t v14 = (uint64_t *)(v3[6] + 16 * v26);
      swift_bridgeObjectRelease(v14[1]);
      *uint64_t v14 = v23;
      v14[1] = v22;
      uint64_t v15 = v3[7] + v11;
      uint64_t v9 = v10;
      swift_bridgeObjectRelease(*(void *)(v15 + 8));
      *(_OWORD *)uint64_t v15 = v25;
      uint64_t v1 = v13;
      uint64_t v7 = v12;
      goto LABEL_8;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v26;
    uint64_t v28 = (uint64_t *)(v3[6] + 16 * v26);
    *uint64_t v28 = v23;
    v28[1] = v22;
    *(_OWORD *)(v3[7] + 16 * v26) = v25;
    uint64_t v29 = v3[2];
    uint64_t v30 = __OFADD__(v29, 1LL);
    uint64_t v31 = v29 + 1;
    if (v30) {
      goto LABEL_35;
    }
    v3[2] = v31;
LABEL_8:
    char v8 = v34;
    uint64_t v6 = v35;
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

        id v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      uint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v30, *(void *)(v6 + 40));
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *char v2 = v6;
  return result;
}

    id v11 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    uint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v29, *(void *)(v6 + 40));
    Hasher._combine(_:)(v20);
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
    ++*(void *)(v6 + 16);
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    uint64_t result = swift_release(v3);
    char v2 = v28;
    goto LABEL_38;
  }

  uint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    uint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

ValueMetadata *type metadata accessor for GeoNLContextUtils()
{
  return &type metadata for GeoNLContextUtils;
}

ValueMetadata *type metadata accessor for DisambiguationListUtils()
{
  return &type metadata for DisambiguationListUtils;
}

uint64_t initializeBufferWithCopyOfBuffer for TypedDisambiguationItems(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned __int8 v4 = *((_BYTE *)a2 + 8);
  outlined copy of TypedDisambiguationItems(*a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for TypedDisambiguationItems(uint64_t a1)
{
  return outlined consume of TypedDisambiguationItems(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t *assignWithCopy for TypedDisambiguationItems(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned __int8 v4 = *((_BYTE *)a2 + 8);
  outlined copy of TypedDisambiguationItems(*a2, v4);
  uint64_t v5 = *a1;
  uint64_t v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((_BYTE *)a1 + 8) = v4;
  outlined consume of TypedDisambiguationItems(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t *assignWithTake for TypedDisambiguationItems(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((_BYTE *)a2 + 8);
  uint64_t v5 = *a1;
  uint64_t v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((_BYTE *)a1 + 8) = v4;
  outlined consume of TypedDisambiguationItems(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TypedDisambiguationItems(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TypedDisambiguationItems( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for TypedDisambiguationItems(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for TypedDisambiguationItems(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TypedDisambiguationItems()
{
  return &type metadata for TypedDisambiguationItems;
}

ValueMetadata *type metadata accessor for RecipientDisambiguationHelper()
{
  return &type metadata for RecipientDisambiguationHelper;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }

  return result;
}

uint64_t outlined init with take of PersonNameComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type INPerson and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type INPerson and conformance NSObject;
  if (!lazy protocol witness table cache variable for type INPerson and conformance NSObject)
  {
    uint64_t v1 = type metadata accessor for OS_os_log( 255LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type INPerson and conformance NSObject);
  }

  return result;
}

uint64_t Sharing_Medium.rawValue.getter(uint64_t result)
{
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance DeviceType@<X0>( unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized DeviceType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance DeviceType(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t static AssistantProperties.isNavigating()()
{
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  return AFNavigationStateIsNavigating([(id)static AssistantProperties.instance currentNavigationState]);
}

uint64_t *AssistantProperties.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  return &static AssistantProperties.instance;
}

id one-time initialization function for instance()
{
  id result = [(id)objc_opt_self(AFPreferences) sharedPreferences];
  static AssistantProperties.instance = (uint64_t)result;
  return result;
}

id static AssistantProperties.instance.getter()
{
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  return (id)static AssistantProperties.instance;
}

unint64_t specialized DeviceType.init(rawValue:)(unint64_t result)
{
  if (result >= 4) {
    return 4LL;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DeviceType and conformance DeviceType()
{
  unint64_t result = lazy protocol witness table cache variable for type DeviceType and conformance DeviceType;
  if (!lazy protocol witness table cache variable for type DeviceType and conformance DeviceType)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DeviceType, &type metadata for DeviceType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DeviceType and conformance DeviceType);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for DeviceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_20E80 + 4 * byte_95A55[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_20EB4 + 4 * byte_95A50[v4]))();
}

uint64_t sub_20EB4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20EBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x20EC4LL);
  }
  return result;
}

uint64_t sub_20ED0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x20ED8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_20EDC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20EE4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceType()
{
  return &type metadata for DeviceType;
}

ValueMetadata *type metadata accessor for AssistantProperties()
{
  return &type metadata for AssistantProperties;
}

uint64_t one-time initialization function for locationServicesURL()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __swift_allocate_value_buffer(v0, static LocationServicesViews.locationServicesURL);
  __swift_project_value_buffer(v0, (uint64_t)static LocationServicesViews.locationServicesURL);
  return URL.init(string:)(0xD000000000000020LL, 0x800000000009C610LL);
}

uint64_t DeepLinkParams.init(catModel:deepLinkURL:buttonLabel:)@<X0>( __int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for CATService();
  uint64_t v11 = swift_allocObject(v10, 40LL, 7LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v10);
  *(void *)(v11 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  type metadata accessor for OS_os_log();
  *(void *)(v11 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v11 + 16) = 0;
  *a5 = v11;
  outlined init with take of CATType(a1, (uint64_t)(a5 + 1));
  uint64_t v13 = type metadata accessor for DeepLinkParams(0LL);
  uint64_t v14 = (char *)a5 + *(int *)(v13 + 24);
  uint64_t v15 = type metadata accessor for URL(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32LL))(v14, a2, v15);
  uint64_t v17 = (uint64_t *)((char *)a5 + *(int *)(v13 + 28));
  void *v17 = a3;
  v17[1] = a4;
  return result;
}

void *DeepLinkParams.makeDeepLink(device:)(void *a1)
{
  unint64_t v26 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  char v4 = dispatch thunk of DeviceState.isPhone.getter(v2, v3);
  outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v23);
  if ((v4 & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v23);
  }

  else
  {
    uint64_t v5 = v24;
    uint64_t v6 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    LOBYTE(v5) = dispatch thunk of DeviceState.isPad.getter(v5, v6);
    __swift_destroy_boxed_opaque_existential_0Tm(v23);
    if ((v5 & 1) == 0) {
      return _swiftEmptyArrayStorage;
    }
  }

  id v7 = [objc_allocWithZone(SAUIButton) init];
  uint64_t v8 = type metadata accessor for DeepLinkParams(0LL);
  NSString v9 = String._bridgeToObjectiveC()();
  [v7 setText:v9];

  id v10 = [objc_allocWithZone(SAUIOpenLink) init];
  URL._bridgeToObjectiveC()((NSURL *)*(int *)(v8 + 24));
  char v12 = v11;
  [v10 setRef:v11];

  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = swift_allocObject(v13, 40LL, 7LL);
  *(_OWORD *)(v14 + 16) = xmmword_95900;
  *(void *)(v14 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v10;
  uint64_t v22 = v14;
  specialized Array._endMutation()(v14);
  id v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v22);
  [v7 setCommands:isa];

  id v17 = v7;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
  unint64_t v19 = *(void *)((char *)&dword_10 + (v26 & 0xFFFFFFFFFFFFFF8LL));
  unint64_t v18 = *(void *)((char *)&dword_18 + (v26 & 0xFFFFFFFFFFFFFF8LL));
  if (v19 >= v18 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1LL);
  }
  uint64_t v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v17);
  specialized Array._endMutation()(v20);

  return (void *)v26;
}

uint64_t DeepLinkParams.catModel.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 8, a1);
}

uint64_t DeepLinkParams.catModel.setter(__int128 *a1)
{
  uint64_t v3 = (void *)(v1 + 8);
  __swift_destroy_boxed_opaque_existential_0Tm(v3);
  return outlined init with take of CATType(a1, (uint64_t)v3);
}

uint64_t (*DeepLinkParams.catModel.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t DeepLinkParams.deepLinkURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DeepLinkParams(0LL) + 24);
  uint64_t v4 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t DeepLinkParams.deepLinkURL.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DeepLinkParams(0LL) + 24);
  uint64_t v4 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*DeepLinkParams.deepLinkURL.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t DeepLinkParams.buttonLabel.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for DeepLinkParams(0LL) + 28));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t DeepLinkParams.buttonLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for DeepLinkParams(0LL) + 28));
  uint64_t result = swift_bridgeObjectRelease(v5[1]);
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*DeepLinkParams.buttonLabel.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t type metadata accessor for DeepLinkParams(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for DeepLinkParams;
  if (!type metadata singleton initialization cache for DeepLinkParams) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeepLinkParams);
  }
  return result;
}

uint64_t specialized static LocationServicesViews.locationServiceLabel.getter()
{
  uint64_t v0 = type metadata accessor for CATService();
  uint64_t inited = swift_initStackObject(v0, v13);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  *(void *)(inited + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  type metadata accessor for OS_os_log();
  *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(inited + 16) = 0;
  uint64_t v3 = specialized GeoCATModel.getID()(1LL, 0LL, 2);
  uint64_t v5 = v4;
  uint64_t v6 = specialized GeoCATModel.getParams()(1LL, 0LL, 2);
  uint64_t v7 = CATService.getLabel(catId:params:)(v3, v5, v6);
  uint64_t v9 = v8;
  char v11 = v10;
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  if ((v11 & 1) != 0)
  {
    outlined consume of Result<String, Error>(v7, v9, 1);
    swift_release(inited);
    return 0LL;
  }

  else
  {
    swift_release(inited);
  }

  return v7;
}

uint64_t specialized static LocationServicesViews.makeDeepLink(status:device:)( unsigned __int8 a1, void *a2)
{
  int v3 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v36 - v7;
  uint64_t v9 = type metadata accessor for DeepLinkParams(0LL);
  __chkstk_darwin();
  char v11 = (uint64_t *)((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v13 = (uint64_t *)((char *)&v36 - v12);
  if (v3)
  {
    uint64_t v38 = &type metadata for LocationServices;
    uint64_t v39 = &protocol witness table for LocationServices;
    LOBYTE(v3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 7) = 0;
    if (one-time initialization token for locationServicesURL != -1) {
      swift_once( &one-time initialization token for locationServicesURL,  one-time initialization function for locationServicesURL);
    }
    uint64_t v14 = __swift_project_value_buffer(v4, (uint64_t)static LocationServicesViews.locationServicesURL);
    outlined init with copy of URL?(v14, (uint64_t)v6);
    uint64_t v15 = type metadata accessor for URL(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v6, 1LL, v15);
    if ((_DWORD)result != 1)
    {
      uint64_t v18 = specialized static LocationServicesViews.locationServiceLabel.getter();
      uint64_t v20 = v19;
      uint64_t v21 = type metadata accessor for CATService();
      uint64_t v22 = swift_allocObject(v21, 40LL, 7LL);
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v21);
      *(void *)(v22 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
      type metadata accessor for OS_os_log();
      *(void *)(v22 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
      *(_BYTE *)(v22 + 16) = 0;
      *char v11 = v22;
      outlined init with take of CATType(&v37, (uint64_t)(v11 + 1));
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))((char *)v11 + *(int *)(v9 + 24), v6, v15);
      uint64_t v24 = (uint64_t *)((char *)v11 + *(int *)(v9 + 28));
      *uint64_t v24 = v18;
      v24[1] = v20;
      uint64_t v13 = v11;
LABEL_10:
      uint64_t v35 = DeepLinkParams.makeDeepLink(device:)(a2);
      outlined destroy of DeepLinkParams((uint64_t)v13);
      return (uint64_t)v35;
    }

    __break(1u);
  }

  else
  {
    uint64_t v38 = &type metadata for LocationServices;
    uint64_t v39 = &protocol witness table for LocationServices;
    LOBYTE(v3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 7) = 1;
    if (one-time initialization token for locationServicesURL != -1) {
      swift_once( &one-time initialization token for locationServicesURL,  one-time initialization function for locationServicesURL);
    }
    uint64_t v25 = __swift_project_value_buffer(v4, (uint64_t)static LocationServicesViews.locationServicesURL);
    outlined init with copy of URL?(v25, (uint64_t)v8);
    uint64_t v26 = type metadata accessor for URL(0LL);
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v8, 1LL, v26);
    if ((_DWORD)result != 1)
    {
      uint64_t v28 = specialized static LocationServicesViews.locationServiceLabel.getter();
      uint64_t v30 = v29;
      uint64_t v31 = type metadata accessor for CATService();
      uint64_t v32 = swift_allocObject(v31, 40LL, 7LL);
      uint64_t v33 = swift_getObjCClassFromMetadata(v31);
      *(void *)(v32 + 24) = [(id)objc_opt_self(NSBundle) bundleForClass:v33];
      type metadata accessor for OS_os_log();
      *(void *)(v32 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
      *(_BYTE *)(v32 + 16) = 0;
      *uint64_t v13 = v32;
      outlined init with take of CATType(&v37, (uint64_t)(v13 + 1));
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))((char *)v13 + *(int *)(v9 + 24), v8, v26);
      uint64_t v34 = (uint64_t *)((char *)v13 + *(int *)(v9 + 28));
      *uint64_t v34 = v28;
      v34[1] = v30;
      goto LABEL_10;
    }
  }

  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type LocationStatus and conformance LocationStatus()
{
  unint64_t result = lazy protocol witness table cache variable for type LocationStatus and conformance LocationStatus;
  if (!lazy protocol witness table cache variable for type LocationStatus and conformance LocationStatus)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationStatus,  &type metadata for LocationStatus);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationStatus and conformance LocationStatus);
  }

  return result;
}

ValueMetadata *type metadata accessor for LocationServicesViews()
{
  return &type metadata for LocationServicesViews;
}

uint64_t initializeBufferWithCopyOfBuffer for DeepLinkParams(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16LL) & ~(unint64_t)v4);
    swift_retain(v5);
  }

  else
  {
    uint64_t v8 = a2 + 1;
    __int128 v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v9;
    uint64_t v10 = v9;
    char v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_retain(v5);
    v11(a1 + 8, v8, v10);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = a1 + v12;
    uint64_t v14 = (uint64_t)a2 + v12;
    uint64_t v15 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
    uint64_t v16 = *(int *)(a3 + 28);
    id v17 = (void *)(a1 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    void *v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain(v19);
  }

  return a1;
}

uint64_t destroy for DeepLinkParams(void *a1, uint64_t a2)
{
  int v4 = a1 + 1;
  swift_release(*a1);
  __swift_destroy_boxed_opaque_existential_0Tm(v4);
  uint64_t v5 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  return swift_bridgeObjectRelease(*(void *)((char *)a1 + *(int *)(a2 + 28) + 8));
}

uint64_t initializeWithCopy for DeepLinkParams(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(void *)a1 = *a2;
  uint64_t v7 = a2 + 1;
  __int128 v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v8;
  uint64_t v9 = v8;
  uint64_t v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
  swift_retain(v6);
  v10(a1 + 8, v7, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (uint64_t)a2 + v11;
  uint64_t v14 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = (void *)(a1 + v15);
  id v17 = (uint64_t *)((char *)a2 + v15);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t *assignWithCopy for DeepLinkParams(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (uint64_t *)((char *)a1 + v12);
  uint64_t v14 = (uint64_t *)((char *)a2 + v12);
  *uint64_t v13 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t initializeWithTake for DeepLinkParams(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  *(_OWORD *)(a1 + *(int *)(a3 + 28)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t *assignWithTake for DeepLinkParams(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  __swift_destroy_boxed_opaque_existential_0Tm(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (uint64_t)a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (uint64_t *)((char *)a1 + v11);
  uint64_t v13 = (uint64_t *)((char *)a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  uint64_t v16 = v12[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeepLinkParams(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_21E54);
}

uint64_t sub_21E54(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 24)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for DeepLinkParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_21EDC);
}

char *sub_21EDC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)unint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 24)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata completion function for DeepLinkParams(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = "(";
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(result - 8) + 64LL;
    v4[3] = &unk_95C50;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for LocationStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_22024 + 4 * byte_95B65[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_22058 + 4 * asc_95B60[v4]))();
}

uint64_t sub_22058(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22060(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x22068LL);
  }
  return result;
}

uint64_t sub_22074(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x2207CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_22080(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22088(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationStatus()
{
  return &type metadata for LocationStatus;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DeepLinkParams(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DeepLinkParams(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t outlined consume of Result<String, Error>(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  else {
    return swift_bridgeObjectRelease(a2);
  }
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t ShareETAContactDisambiguationStrategy.catService.getter()
{
  return swift_retain(*(void *)(v0 + 24));
}

unint64_t AnswerETAFlow.flowState.getter()
{
  unint64_t v1 = *(void *)(v0 + 32);
  outlined copy of AnswerETAFlow.State(v1);
  return v1;
}

unint64_t outlined copy of AnswerETAFlow.State(unint64_t result)
{
  if (result >= 4) {
    return swift_errorRetain();
  }
  return result;
}

unint64_t AnswerETAFlow.flowState.setter(uint64_t a1)
{
  unint64_t v3 = *(void *)(v1 + 32);
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a1;
  return outlined consume of AnswerETAFlow.State(v3);
}

unint64_t outlined consume of AnswerETAFlow.State(unint64_t result)
{
  if (result >= 4) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t (*AnswerETAFlow.flowState.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t AnswerETAFlow.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 40;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return outlined init with copy of DeviceState(v3, a1);
}

uint64_t AnswerETAFlow.flowHelper.setter(__int128 *a1)
{
  uint64_t v3 = (void *)(v1 + 40);
  swift_beginAccess(v3, v5, 33LL, 0LL);
  __swift_destroy_boxed_opaque_existential_0Tm(v3);
  outlined init with take of CATType(a1, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t (*AnswerETAFlow.flowHelper.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t AnswerETAFlow.directInvocation.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t AnswerETAFlow.directInvocation.setter(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 80, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 80) = a1;
  return result;
}

uint64_t (*AnswerETAFlow.directInvocation.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t AnswerETAFlow.checkNavigation.getter()
{
  return *(void *)(v0 + 88);
}

uint64_t AnswerETAFlow.checkNavigation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_beginAccess(v2 + 88, v6, 1LL, 0LL);
  *(void *)(v2 + 88) = a1;
  *(void *)(v2 + 96) = a2;
  return result;
}

uint64_t (*AnswerETAFlow.checkNavigation.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t AnswerETAFlow.isPOMMES.getter()
{
  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t AnswerETAFlow.isPOMMES.setter(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 104, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 104) = a1;
  return result;
}

uint64_t (*AnswerETAFlow.isPOMMES.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t AnswerETAFlow.duration.getter()
{
  return swift_retain(*(void *)(v0 + 112));
}

uint64_t AnswerETAFlow.duration.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 112);
  *(void *)(v1 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a1;
  return swift_release(v3);
}

uint64_t (*AnswerETAFlow.duration.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t AnswerETAFlow.__allocating_init(with:checkNavigation:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = swift_allocObject(v3, 120LL, 7LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v12 + 16))(v11);
  uint64_t v13 = specialized AnswerETAFlow.init(with:checkNavigation:)((uint64_t)v11, a2, a3, v7, v8, v9);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v13;
}

uint64_t AnswerETAFlow.init(with:checkNavigation:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v7);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v11 + 16))(v10);
  uint64_t v12 = specialized AnswerETAFlow.init(with:checkNavigation:)((uint64_t)v10, a2, a3, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v12;
}

uint64_t AnswerETAFlow.__allocating_init()()
{
  v2[3] = &type metadata for FlowHelperImpl;
  v2[4] = &protocol witness table for FlowHelperImpl;
  v2[0] = swift_allocObject(&unk_B83C8, 192LL, 7LL);
  FlowHelperImpl.init()((void *)(v2[0] + 16LL));
  return (*(uint64_t (**)(void *, ValueMetadata *, _UNKNOWN **))(v0 + 288))( v2,  &type metadata for AssistantProperties,  &protocol witness table for AssistantProperties);
}

uint64_t AnswerETAFlow.executeState()(uint64_t a1)
{
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a1;
  *(void *)(v2 + 40) = v1;
  return swift_task_switch(AnswerETAFlow.executeState(), 0LL, 0LL);
}

uint64_t AnswerETAFlow.executeState()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 40) + 144LL))();
  unint64_t v2 = v1;
  *(void *)(v0 + 48) = v1;
  switch(v1)
  {
    case 0LL:
      uint64_t v3 = *(int **)(**(void **)(v0 + 40) + 312LL);
      uint64_t v24 = (uint64_t (*)(void))((char *)v3 + *v3);
      uint64_t v4 = (void *)swift_task_alloc(v3[1]);
      *(void *)(v0 + 56) = v4;
      uint64_t v5 = AnswerETAFlow.executeState();
      goto LABEL_9;
    case 1LL:
      uint64_t v6 = *(int **)(**(void **)(v0 + 40) + 336LL);
      uint64_t v25 = (uint64_t (*)(void))((char *)v6 + *v6);
      uint64_t v7 = (void *)swift_task_alloc(v6[1]);
      *(void *)(v0 + 64) = v7;
      *uint64_t v7 = v0;
      v7[1] = AnswerETAFlow.executeState();
      return v25();
    case 2LL:
      uint64_t v9 = *(int **)(**(void **)(v0 + 40) + 328LL);
      uint64_t v24 = (uint64_t (*)(void))((char *)v9 + *v9);
      uint64_t v4 = (void *)swift_task_alloc(v9[1]);
      *(void *)(v0 + 80) = v4;
      uint64_t v5 = AnswerETAFlow.executeState();
      goto LABEL_9;
    case 3LL:
      uint64_t v10 = *(void *)(v0 + 40);
      uint64_t v11 = static os_log_type_t.default.getter(v1);
      uint64_t v12 = os_log(_:dso:log:_:_:)( v11,  &dword_0,  *(void *)(v10 + 16),  "AnswerETAFlow execute rchComplete",  33LL,  2LL,  &_swiftEmptyArrayStorage);
      static ExecuteResponse.complete()(v12);
      return (*(uint64_t (**)(void))(v0 + 8))();
    default:
      uint64_t v13 = *(void *)(v0 + 40);
      os_log_type_t v14 = static os_log_type_t.default.getter(v1);
      uint64_t v15 = *(os_log_s **)(v13 + 16);
      os_log_type_t v16 = v14;
      if (os_log_type_enabled(v15, v14))
      {
        outlined copy of AnswerETAFlow.State(v2);
        outlined copy of AnswerETAFlow.State(v2);
        id v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v18 = swift_slowAlloc(32LL, -1LL);
        uint64_t v26 = v18;
        *(_DWORD *)id v17 = 136315138;
        *(void *)(v0 + 16) = v2;
        swift_errorRetain(v2);
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v20 = String.init<A>(describing:)(v0 + 16, v19);
        unint64_t v22 = v21;
        *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
        swift_bridgeObjectRelease(v22);
        outlined consume of AnswerETAFlow.State(v2);
        outlined consume of AnswerETAFlow.State(v2);
        _os_log_impl(&dword_0, v15, v16, "AnswerETAFlow execute request unsupported with err: %s", v17, 0xCu);
        swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1LL, -1LL);
        swift_slowDealloc(v17, -1LL, -1LL);
      }

      unint64_t v23 = *(int **)(**(void **)(v0 + 40) + 320LL);
      uint64_t v24 = (uint64_t (*)(void))((char *)v23 + *v23);
      uint64_t v4 = (void *)swift_task_alloc(v23[1]);
      *(void *)(v0 + 88) = v4;
      uint64_t v5 = AnswerETAFlow.executeState();
LABEL_9:
      void *v4 = v0;
      v4[1] = v5;
      return v24(*(void *)(v0 + 32));
  }

{
  uint64_t *v0;
  uint64_t v2;
  unint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 56));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  void *v5;
  uint64_t (*v7)(void);
  uint64_t v1 = *v0;
  unint64_t v2 = *(void *)(*v0 + 40);
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 64));
  uint64_t v4 = *(int **)(*(void *)v2 + 304LL);
  uint64_t v7 = (uint64_t (*)(void))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v1 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v5;
  *uint64_t v5 = v3;
  v5[1] = AnswerETAFlow.executeState();
  return v7(*(void *)(v1 + 32));
}

{
  uint64_t *v0;
  uint64_t v2;
  unint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 72));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t *v0;
  uint64_t v2;
  unint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 80));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 88LL));
  return swift_task_switch(AnswerETAFlow.executeState(), 0LL, 0LL);
}

{
  uint64_t v0;
  outlined consume of AnswerETAFlow.State(*(void *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AnswerETAFlow.preChecks()(uint64_t a1)
{
  v2[23] = a1;
  _BYTE v2[24] = v1;
  uint64_t v3 = type metadata accessor for TemplatingResult(0LL);
  v2[25] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[26] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[27] = v5;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[28] = swift_task_alloc(v6);
  v2[29] = swift_task_alloc(v6);
  return swift_task_switch(AnswerETAFlow.preChecks(), 0LL, 0LL);
}

uint64_t AnswerETAFlow.preChecks()()
{
  if (((*(uint64_t (**)(void))(v1 + 8))() & 1) != 0)
  {
    (*(void (**)(uint64_t))(**(void **)(v0 + 192) + 152LL))(1LL);
    static ExecuteResponse.ongoing(requireInput:)(0LL);
    uint64_t v2 = *(void *)(v0 + 224);
    swift_task_dealloc(*(void *)(v0 + 232));
    swift_task_dealloc(v2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v4 = *(void **)(v0 + 192);
    uint64_t v5 = v4[3];
    *(void *)(v0 + 40) = &type metadata for NavigationControl;
    *(void *)(v0 + 48) = &protocol witness table for NavigationControl;
    *(void *)(v0 + 16) = 0LL;
    unint64_t v6 = *(void (**)(void))(*v4 + 168LL);
    *(void *)(v0 + 240) = v6;
    v6();
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v7);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 80))(v7, v8);
    *(void *)(v0 + 248) = v9;
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 56));
    uint64_t v10 = *(int **)(*(void *)v5 + 112LL);
    uint64_t v12 = (int *)((char *)v10 + *v10);
    uint64_t v11 = (void *)swift_task_alloc(v10[1]);
    *(void *)(v0 + 256) = v11;
    *uint64_t v11 = v0;
    v11[1] = AnswerETAFlow.preChecks();
    return ((uint64_t (*)(void, uint64_t, uint64_t))v12)(*(void *)(v0 + 232), v0 + 16, v9);
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 248);
  uint64_t v3 = *(void *)(*v1 + 256);
  *(void *)(*v1 + 264) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = AnswerETAFlow.preChecks();
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 16));
    uint64_t v5 = AnswerETAFlow.preChecks();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void v17[5];
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);
  os_log_type_t v16 = *(void *)(v0 + 216);
  (*(void (**)(void))(v0 + 240))();
  uint64_t v5 = *(void *)(v0 + 120);
  unint64_t v6 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 104))(v17, v5, v6);
  uint64_t v7 = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  outlined init with copy of DeviceState(v0 + 96, v0 + 136);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = (v16 + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = swift_allocObject(&unk_B83F0, v10 + 40, v8 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v11 + v9, v2, v3);
  outlined init with take of CATType((__int128 *)(v0 + 136), v11 + v10);
  uint64_t v12 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v17,  &async function pointer to partial apply for closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:),  v11);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 96));
  *(void *)(v0 + 176) = v13;
  static ExecuteResponse.complete<A>(next:)(v0 + 176, v12, &protocol witness table for SimpleOutputFlowAsync);
  swift_release(v13);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  os_log_type_t v14 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void **)(v0 + 192);
  uint64_t v3 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 16));
  uint64_t v4 = static os_log_type_t.error.getter(v3);
  os_log(_:dso:log:_:_:)( v4,  &dword_0,  v2[2],  "Dialog Engine error while building NotNavigating",  48LL,  2LL,  &_swiftEmptyArrayStorage);
  uint64_t v5 = *(void (**)(uint64_t))(*v2 + 152LL);
  swift_errorRetain(v1);
  v5(v1);
  static ExecuteResponse.ongoing(requireInput:)(0LL);
  swift_errorRelease(v1);
  unint64_t v6 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AnswerETAFlow.errorDialog()(uint64_t a1)
{
  v2[23] = a1;
  _BYTE v2[24] = v1;
  uint64_t v3 = type metadata accessor for TemplatingResult(0LL);
  v2[25] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[26] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[27] = v5;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[28] = swift_task_alloc(v6);
  v2[29] = swift_task_alloc(v6);
  return swift_task_switch(AnswerETAFlow.errorDialog(), 0LL, 0LL);
}

uint64_t AnswerETAFlow.errorDialog()()
{
  uint64_t v1 = (void *)v0[24];
  uint64_t v2 = v1[3];
  v0[5] = &type metadata for NavigationControl;
  v0[6] = &protocol witness table for NavigationControl;
  v0[2] = 1LL;
  uint64_t v3 = *(void (**)(void))(*v1 + 168LL);
  v0[30] = v3;
  v3();
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 80))(v4, v5);
  v0[31] = v6;
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 7);
  uint64_t v7 = *(int **)(*(void *)v2 + 112LL);
  uint64_t v10 = (int *)((char *)v7 + *v7);
  uint64_t v8 = (void *)swift_task_alloc(v7[1]);
  v0[32] = v8;
  *uint64_t v8 = v0;
  v8[1] = AnswerETAFlow.errorDialog();
  return ((uint64_t (*)(void, void *, uint64_t))v10)(v0[29], v0 + 2, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 248);
  uint64_t v3 = *(void *)(*v1 + 256);
  *(void *)(*v1 + 264) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = AnswerETAFlow.errorDialog();
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 16));
    uint64_t v5 = AnswerETAFlow.errorDialog();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void v17[5];
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);
  os_log_type_t v16 = *(void *)(v0 + 216);
  (*(void (**)(void))(v0 + 240))();
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 104))(v17, v5, v6);
  uint64_t v7 = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  outlined init with copy of DeviceState(v0 + 96, v0 + 136);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = (v16 + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = swift_allocObject(&unk_B8418, v10 + 40, v8 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v11 + v9, v2, v3);
  outlined init with take of CATType((__int128 *)(v0 + 136), v11 + v10);
  uint64_t v12 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v17,  &closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)partial apply,  v11);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 96));
  *(void *)(v0 + 176) = v13;
  static ExecuteResponse.complete<A>(next:)(v0 + 176, v12, &protocol witness table for SimpleOutputFlowAsync);
  swift_release(v13);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  os_log_type_t v14 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void **)(v0 + 192);
  uint64_t v3 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 16));
  uint64_t v4 = static os_log_type_t.error.getter(v3);
  os_log(_:dso:log:_:_:)( v4,  &dword_0,  v2[2],  "Dialog Engine error while building fetchETAError",  48LL,  2LL,  &_swiftEmptyArrayStorage);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*v2 + 152LL);
  swift_errorRetain(v1);
  uint64_t v6 = v5(v1);
  static ExecuteResponse.complete()(v6);
  swift_errorRelease(v1);
  uint64_t v7 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AnswerETAFlow.handleDialog()(uint64_t a1)
{
  v2[23] = a1;
  _BYTE v2[24] = v1;
  uint64_t v3 = type metadata accessor for TemplatingResult(0LL);
  v2[25] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[26] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[27] = v5;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[28] = swift_task_alloc(v6);
  v2[29] = swift_task_alloc(v6);
  return swift_task_switch(AnswerETAFlow.handleDialog(), 0LL, 0LL);
}

uint64_t AnswerETAFlow.handleDialog()()
{
  uint64_t v1 = (void *)v0[24];
  uint64_t v2 = v1[3];
  uint64_t v3 = (*(uint64_t (**)(void))(*v1 + 264LL))();
  uint64_t v4 = dispatch thunk of DialogDuration.Builder.build()();
  uint64_t v5 = swift_release(v3);
  v0[5] = &type metadata for NavigationControl;
  v0[6] = &protocol witness table for NavigationControl;
  v0[2] = v4;
  unint64_t v6 = *(void (**)(uint64_t))(*v1 + 168LL);
  v0[30] = v6;
  v6(v5);
  uint64_t v7 = v0[10];
  uint64_t v8 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 80))(v7, v8);
  v0[31] = v9;
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 7);
  uint64_t v10 = *(int **)(*(void *)v2 + 112LL);
  uint64_t v13 = (int *)((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc(v10[1]);
  v0[32] = v11;
  *uint64_t v11 = v0;
  v11[1] = AnswerETAFlow.handleDialog();
  return ((uint64_t (*)(void, void *, uint64_t))v13)(v0[29], v0 + 2, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 248);
  uint64_t v3 = *(void *)(*v1 + 256);
  *(void *)(*v1 + 264) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = AnswerETAFlow.handleDialog();
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 16));
    uint64_t v5 = AnswerETAFlow.handleDialog();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void v17[5];
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);
  os_log_type_t v16 = *(void *)(v0 + 216);
  (*(void (**)(void))(v0 + 240))();
  uint64_t v5 = *(void *)(v0 + 120);
  unint64_t v6 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 104))(v17, v5, v6);
  uint64_t v7 = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  outlined init with copy of DeviceState(v0 + 96, v0 + 136);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = (v16 + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = swift_allocObject(&unk_B8440, v10 + 40, v8 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v11 + v9, v2, v3);
  outlined init with take of CATType((__int128 *)(v0 + 136), v11 + v10);
  uint64_t v12 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v17,  &closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)partial apply,  v11);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 96));
  *(void *)(v0 + 176) = v13;
  static ExecuteResponse.complete<A>(next:)(v0 + 176, v12, &protocol witness table for SimpleOutputFlowAsync);
  swift_release(v13);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  os_log_type_t v14 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void **)(v0 + 192);
  uint64_t v3 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 16));
  uint64_t v4 = static os_log_type_t.error.getter(v3);
  os_log(_:dso:log:_:_:)( v4,  &dword_0,  v2[2],  "Dialog Engine error when building AnswerETA experience",  54LL,  2LL,  &_swiftEmptyArrayStorage);
  uint64_t v5 = *(void (**)(uint64_t))(*v2 + 152LL);
  swift_errorRetain(v1);
  v5(v1);
  static ExecuteResponse.ongoing(requireInput:)(0LL);
  swift_errorRelease(v1);
  unint64_t v6 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AnswerETAFlow.fetchETA()()
{
  *(void *)(v1 + 128) = v0;
  return swift_task_switch(AnswerETAFlow.fetchETA(), 0LL, 0LL);
}

{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v1 = (void *)v0[16];
  uint64_t v2 = [objc_allocWithZone(SALocalSearchGetNavigationStatus) init];
  v0[17] = v2;
  uint64_t v3 = static os_log_type_t.debug.getter();
  uint64_t v4 = v1[2];
  v0[18] = v4;
  uint64_t v5 = os_log(_:dso:log:_:_:)(v3, &dword_0, v4, "entered do loop for fetching ETA", 32LL, 2LL, &_swiftEmptyArrayStorage);
  (*(void (**)(uint64_t))(*v1 + 168LL))(v5);
  unint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 2);
  uint64_t v8 = v0[10];
  uint64_t v9 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v8);
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to AceServiceInvokerAsync.submit<A>(_:)[1]);
  v0[19] = v10;
  uint64_t v11 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for SABaseCommand,  &OBJC_CLASS___SABaseCommand_ptr);
  int *v10 = v0;
  v10[1] = AnswerETAFlow.fetchETA();
  return AceServiceInvokerAsync.submit<A>(_:)(v2, v8, v11, v9);
}

{
  uint64_t v0;
  os_log_s *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  os_log_s *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void (*v14)(uint64_t);
  uint64_t v16;
  uint64_t v1 = *(os_log_s **)(v0 + 144);
  uint64_t v2 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 56));
  uint64_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v1, v3))
  {
    uint64_t v4 = *(void *)(v0 + 168);
    uint64_t v5 = *(os_log_s **)(v0 + 144);
    swift_errorRetain(v4);
    swift_errorRetain(v4);
    unint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)unint64_t v6 = 136315138;
    os_log_type_t v16 = v7;
    *(void *)(v0 + 96) = v4;
    swift_errorRetain(v4);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v9 = String.init<A>(describing:)(v0 + 96, v8);
    uint64_t v11 = v10;
    *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl(&dword_0, v5, v3, "Ace Command submission failed with error: %s ", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  uint64_t v12 = *(void *)(v0 + 168);
  uint64_t v13 = *(void **)(v0 + 136);
  os_log_type_t v14 = *(void (**)(uint64_t))(**(void **)(v0 + 128) + 152LL);
  swift_errorRetain(v12);
  v14(v12);

  swift_errorRelease(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AnswerETAFlow.fetchETA()(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 152);
  *(void *)(v3 + 160) = a1;
  *(void *)(v3 + 168) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = AnswerETAFlow.fetchETA();
  }
  else {
    uint64_t v5 = AnswerETAFlow.fetchETA();
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

void AnswerETAFlow.fetchETA()()
{
  uint64_t v1 = *(os_log_s **)(v0 + 144);
  uint64_t v2 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 56));
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v1, v3))
  {
    log = *(os_log_s **)(v0 + 144);
    id v4 = *(id *)(v0 + 160);
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v50 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    id v7 = v4;
    id v8 = [v7 description];
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    unint64_t v11 = v10;

    *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128);
    swift_bridgeObjectRelease(v11);

    _os_log_impl(&dword_0, log, v3, "fetchETA result: %s ", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v12 = *(void *)(v0 + 160);
  uint64_t v13 = objc_opt_self(&OBJC_CLASS___SALocalSearchGetNavigationStatusCompleted);
  uint64_t v14 = swift_dynamicCastObjCClass(v12, v13);
  uint64_t v15 = *(void **)(v0 + 160);
  if (!v14)
  {
    uint64_t v40 = *(void *)(v0 + 128);
    uint64_t v39 = *(void **)(v0 + 136);
    unint64_t v41 = lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v42 = swift_allocError(&type metadata for Errors, v41, 0LL, 0LL);
    *(_OWORD *)uint64_t v43 = xmmword_95DA0;
    *(_BYTE *)(v43 + 16) = 3;
    (*(void (**)(uint64_t))(*(void *)v40 + 152LL))(v42);
LABEL_12:

    (*(void (**)(void))(v0 + 8))();
    return;
  }

  os_log_type_t v16 = (void *)v14;
  id v17 = v15;
  id v18 = [v16 overallEta];
  if (v18)
  {
    uint64_t v19 = v18;
    id v20 = [v18 timeEta];

    if (v20)
    {
      id v21 = [v20 value];

      if (v21)
      {
        unint64_t v23 = *(os_log_s **)(v0 + 144);
        os_log_type_t v24 = static os_log_type_t.default.getter(v22);
        uint64_t v25 = os_log_type_enabled(v23, v24);
        if ((_DWORD)v25)
        {
          loga = *(os_log_s **)(v0 + 144);
          id v26 = v21;
          uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v28 = swift_slowAlloc(32LL, -1LL);
          uint64_t v50 = v28;
          *(_DWORD *)uint64_t v27 = 136315138;
          id v29 = v26;
          id v30 = [v29 description];
          uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
          unint64_t v33 = v32;

          *(void *)(v0 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &v50);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120);
          swift_bridgeObjectRelease(v33);

          _os_log_impl(&dword_0, loga, v24, "duration result: %s minutes", v27, 0xCu);
          swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v28, -1LL, -1LL);
          uint64_t v25 = swift_slowDealloc(v27, -1LL, -1LL);
        }

        uint64_t v15 = *(void **)(v0 + 160);
        uint64_t v34 = *(void *)(v0 + 128);
        uint64_t v35 = *(void **)(v0 + 136);
        uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 264LL))(v25);
        [v21 doubleValue];
        uint64_t v38 = ((uint64_t (*)(void, void))dispatch thunk of DialogDuration.Builder.withSecs(_:))( v37 * 60.0,  0LL);
        swift_release(v36);
        swift_release(v38);
        (*(void (**)(uint64_t))(*(void *)v34 + 152LL))(2LL);

        uint64_t v39 = v15;
      }

      else
      {
        uint64_t v15 = *(void **)(v0 + 160);
        uint64_t v44 = *(void *)(v0 + 128);
        uint64_t v39 = *(void **)(v0 + 136);
        unint64_t v45 = lazy protocol witness table accessor for type Errors and conformance Errors();
        uint64_t v46 = swift_allocError(&type metadata for Errors, v45, 0LL, 0LL);
        *(void *)uint64_t v47 = 0xD00000000000001CLL;
        *(void *)(v47 + 8) = 0x800000000009C760LL;
        *(_BYTE *)(v47 + 16) = 2;
        (*(void (**)(uint64_t))(*(void *)v44 + 152LL))(v46);
      }

      goto LABEL_12;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t AnswerETAFlow.deinit()
{
  swift_release(*(void *)(v0 + 24));
  outlined consume of AnswerETAFlow.State(*(void *)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 40));
  swift_release(*(void *)(v0 + 112));
  return v0;
}

uint64_t AnswerETAFlow.__deallocating_deinit()
{
  swift_release(*(void *)(v0 + 24));
  outlined consume of AnswerETAFlow.State(*(void *)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 40));
  swift_release(*(void *)(v0 + 112));
  return swift_deallocClassInstance(v0, 120LL, 7LL);
}

uint64_t protocol witness for FSMFlow.flowState.getter in conformance AnswerETAFlow@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 144LL))();
  *a1 = result;
  return result;
}

id protocol witness for FSMFlow.logObject.getter in conformance AnswerETAFlow()
{
  return *(id *)(*(void *)v0 + 16LL);
}

uint64_t protocol witness for FSMFlow.onInput(input:) in conformance AnswerETAFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 296LL))() & 1;
}

uint64_t protocol witness for FSMFlow.executeState() in conformance AnswerETAFlow(uint64_t a1)
{
  id v4 = *(int **)(**(void **)v1 + 304LL);
  id v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v7(a1);
}

uint64_t protocol witness for Flow.on(input:) in conformance AnswerETAFlow(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AnswerETAFlow, a2);
  return FSMFlow.on(input:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance AnswerETAFlow( uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = (void *)swift_task_alloc(async function pointer to Flow.onAsync(input:)[1]);
  *(void *)(v3 + 16) = v7;
  *id v7 = v3;
  v7[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentHandleIntentStrategy;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance AnswerETAFlow( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AnswerETAFlow, a3);
  return FSMFlow.execute(completion:)(a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for Flow.execute() in conformance AnswerETAFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_C6814);
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AnswerETAFlow, a2);
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return FSMFlow.execute()(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance AnswerETAFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for AnswerETAFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnswerETAFlow( uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AnswerETAFlow, a1);
  return FSMFlow.description.getter(a1, WitnessTable);
}

uint64_t specialized AnswerETAFlow.init(with:checkNavigation:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v19[3] = a5;
  v19[4] = a6;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v19);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32LL))(boxed_opaque_existential_0, a1, a5);
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  *(void *)(a4 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x5445726577736E41LL,  0xED0000776F6C4641LL);
  uint64_t v12 = type metadata accessor for CATService();
  uint64_t v13 = swift_allocObject(v12, 40LL, 7LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v12);
  *(void *)(v13 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  *(void *)(v13 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v13 + 16) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  *(void *)(a4 + 24) = v13;
  *(void *)(a4 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0LL;
  *(void *)(a4 + 88) = a2;
  *(void *)(a4 + 96) = a3;
  outlined init with copy of DeviceState((uint64_t)v19, a4 + 40);
  uint64_t v15 = type metadata accessor for DialogDuration.Builder(0LL);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  uint64_t v16 = DialogDuration.Builder.init()();
  *(void *)(a4 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v16;
  uint64_t v17 = static os_log_type_t.default.getter(v16);
  os_log(_:dso:log:_:_:)( v17,  &dword_0,  *(void *)(a4 + 16),  "AnswerETAFlow init with prechecks",  33LL,  2LL,  &_swiftEmptyArrayStorage);
  __swift_destroy_boxed_opaque_existential_0Tm(v19);
  return a4;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t sub_246D0()
{
  return swift_deallocObject(v0, 192LL, 7LL);
}

uint64_t partial apply for closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for TemplatingResult(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  id v8 = (void *)swift_task_alloc(dword_C952C);
  *(void *)(v2 + 16) = v8;
  *id v8 = v2;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)(a1, v6, v7);
}

uint64_t closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)partial apply(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for TemplatingResult(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  id v8 = (void *)swift_task_alloc(dword_C952C);
  *(void *)(v2 + 16) = v8;
  *id v8 = v2;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)(a1, v6, v7);
}

uint64_t objectdestroy_8Tm()
{
  uint64_t v1 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 40, v5);
}

uint64_t instantiation function for generic protocol witness table for AnswerETAFlow(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type AnswerETAFlow and conformance AnswerETAFlow( &lazy protocol witness table cache variable for type AnswerETAFlow and conformance AnswerETAFlow,  (uint64_t)&protocol conformance descriptor for AnswerETAFlow);
  uint64_t result = lazy protocol witness table accessor for type AnswerETAFlow and conformance AnswerETAFlow( &lazy protocol witness table cache variable for type AnswerETAFlow and conformance AnswerETAFlow,  (uint64_t)&protocol conformance descriptor for AnswerETAFlow);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for AnswerETAFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin13AnswerETAFlow);
}

uint64_t lazy protocol witness table accessor for type AnswerETAFlow and conformance AnswerETAFlow( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for AnswerETAFlow();
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_24964@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144LL))();
  *a2 = result;
  return result;
}

uint64_t sub_24994(unint64_t *a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(unint64_t))(**(void **)a2 + 152LL);
  outlined copy of AnswerETAFlow.State(*a1);
  return v3(v2);
}

uint64_t sub_249D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 168LL))();
}

uint64_t sub_249FC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_BYTE *))(**(void **)a2 + 176LL))(v4);
}

uint64_t sub_24A3C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 192LL))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_24A70(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 200LL))(*a1);
}

uint64_t sub_24A9C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 216LL))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_24ACC(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)a2 + 224LL))(*a1, a1[1]);
}

uint64_t sub_24B00@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 240LL))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_24B34(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 248LL))(*a1);
}

uint64_t sub_24B60@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 264LL))();
  *a2 = result;
  return result;
}

uint64_t sub_24B90(void *a1, uint64_t a2)
{
  unint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 272LL);
  uint64_t v3 = swift_retain(*a1);
  return v2(v3);
}

void *initializeBufferWithCopyOfBuffer for AnswerETAFlow.State(void *a1, void *a2)
{
  uint64_t v3 = *a2;
  if (*a2 >= 0xFFFFFFFFuLL) {
    swift_errorRetain(*a2);
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for AnswerETAFlow.State(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_errorRelease(result);
  }
  return result;
}

unint64_t *assignWithCopy for AnswerETAFlow.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF) {
      swift_errorRetain(*a2);
    }
    *a1 = v4;
  }

  else if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
    *a1 = *a2;
  }

  else
  {
    swift_errorRetain(*a2);
    unint64_t v5 = *a1;
    *a1 = v4;
    swift_errorRelease(v5);
  }

  return a1;
}

unint64_t *assignWithTake for AnswerETAFlow.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
LABEL_6:
    *a1 = v4;
    return a1;
  }

  *a1 = v4;
  swift_errorRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnswerETAFlow.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFC && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 3;
  if (v4 >= 5) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AnswerETAFlow.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)unint64_t result = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 3;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AnswerETAFlow.State()
{
  return &type metadata for AnswerETAFlow.State;
}

uint64_t key path setter for SaveParkingLocationBaseFlow.flowState : SaveParkingLocationBaseFlow( uint64_t a1, uint64_t a2)
{
  unsigned int v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of SaveParkingLocationBaseFlow.State(a1, (uint64_t)v5);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 120LL))(v5);
}

uint64_t SaveParkingLocationBaseFlow.flowState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowState;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return outlined init with copy of SaveParkingLocationBaseFlow.State(v3, a1);
}

uint64_t outlined init with copy of SaveParkingLocationBaseFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SaveParkingLocationBaseFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SaveParkingLocationBaseFlow.State(uint64_t a1)
{
  return type metadata accessor for ShareETA( a1,  (uint64_t *)&type metadata singleton initialization cache for SaveParkingLocationBaseFlow.State,  (uint64_t)&nominal type descriptor for SaveParkingLocationBaseFlow.State);
}

uint64_t SaveParkingLocationBaseFlow.flowState.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowState;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  outlined assign with take of SaveParkingLocationBaseFlow.State(a1, v3);
  return swift_endAccess(v5);
}

uint64_t outlined assign with take of SaveParkingLocationBaseFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SaveParkingLocationBaseFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t (*SaveParkingLocationBaseFlow.flowState.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t SaveParkingLocationBaseFlow.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowHelper;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return outlined init with copy of DeviceState(v3, a1);
}

uint64_t SaveParkingLocationBaseFlow.flowHelper.setter(__int128 *a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowHelper);
  swift_beginAccess(v3, v5, 33LL, 0LL);
  __swift_destroy_boxed_opaque_existential_0Tm(v3);
  outlined init with take of CATType(a1, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t (*SaveParkingLocationBaseFlow.flowHelper.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t SaveParkingLocationBaseFlow.isPOMMES.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_isPOMMES);
  swift_beginAccess(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_isPOMMES, v3, 0LL, 0LL);
  return *v1;
}

uint64_t SaveParkingLocationBaseFlow.isPOMMES.setter(char a1)
{
  uint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_isPOMMES);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*SaveParkingLocationBaseFlow.isPOMMES.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t SaveParkingLocationBaseFlow.__allocating_init(flowHelper:intent:)(void *a1, uint64_t a2)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v5);
  uint64_t v8 = specialized SaveParkingLocationBaseFlow.__allocating_init(flowHelper:intent:)(v7, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v8;
}

uint64_t SaveParkingLocationBaseFlow.init(flowHelper:intent:)(void *a1, uint64_t a2)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v5);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v9 + 16))(v8);
  uint64_t v10 = specialized SaveParkingLocationBaseFlow.init(flowHelper:intent:)((uint64_t)v8, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v10;
}

uint64_t SaveParkingLocationBaseFlow.exitValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SaveParkingLocationBaseFlow.State(0LL);
  uint64_t v4 = __chkstk_darwin();
  uint64_t v6 = (uint64_t *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t))(*(void *)v1 + 112LL))(v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v3);
  if (EnumCaseMultiPayload == 2)
  {
    *(void *)a1 = *v6;
    *(_BYTE *)(a1 + 8) = 0;
    uint64_t v10 = enum case for RCHFlowResult.error<A, B>(_:);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104LL))(a1, v10, v11);
  }

  else if (EnumCaseMultiPayload == 3)
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
    return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, v6, v8);
  }

  else
  {
    unint64_t v12 = lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v13 = swift_allocError(&type metadata for Errors, v12, 0LL, 0LL);
    *(void *)uint64_t v14 = 0LL;
    *(void *)(v14 + 8) = 0LL;
    *(_BYTE *)(v14 + 16) = 3;
    *(void *)a1 = v13;
    *(_BYTE *)(a1 + 8) = 0;
    uint64_t v15 = enum case for RCHFlowResult.error<A, B>(_:);
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104LL))(a1, v15, v16);
    return outlined destroy of SaveParkingLocationBaseFlow.State((uint64_t)v6);
  }

uint64_t SaveParkingLocationBaseFlow.onInput(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Input(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Parse(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin();
  unint64_t v12 = (id *)((char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Input.parse.getter(v10);
  int v13 = (*(uint64_t (**)(id *, uint64_t))(v9 + 88))(v12, v8);
  if (v13 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(id *, uint64_t))(v9 + 96))(v12, v8);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    uint64_t v15 = swift_release(*(id *)((char *)v12 + *(int *)(v14 + 48)));
    uint64_t v16 = (os_log_s *)v2[2];
    os_log_type_t v17 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v18 = 0;
      _os_log_impl( &dword_0,  v16,  v17,  "SaveParkingLocationBaseFlow onInput returns true for NLv3IntentPlusServerConversion.",  v18,  2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    uint64_t v19 = type metadata accessor for NLIntent(0LL);
    (*(void (**)(id *, uint64_t))(*(void *)(v19 - 8) + 8LL))(v12, v19);
    return 1LL;
  }

  else if (v13 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(id *, uint64_t))(v9 + 96))(v12, v8);

    uint64_t v20 = 1LL;
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*v2 + 168LL))(1LL);
    uint64_t v22 = (os_log_s *)v2[2];
    os_log_type_t v23 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v22, v23))
    {
      os_log_type_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v24 = 0;
      _os_log_impl(&dword_0, v22, v23, "SaveParkingLocationBaseFlow onInput returns true for Pommes response.", v24, 2u);
      swift_slowDealloc(v24, -1LL, -1LL);
      return 1LL;
    }
  }

  else
  {
    uint64_t v25 = (os_log_s *)v2[2];
    uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    os_log_type_t v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v25, v27))
    {
      uint64_t v28 = swift_slowAlloc(12LL, -1LL);
      os_log_t v36 = v25;
      id v29 = (uint8_t *)v28;
      uint64_t v37 = swift_slowAlloc(32LL, -1LL);
      uint64_t v39 = v37;
      *(_DWORD *)id v29 = 136315138;
      v35[1] = v29 + 4;
      uint64_t v30 = Input.description.getter();
      unint64_t v32 = v31;
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_bridgeObjectRelease(v32);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      _os_log_impl(&dword_0, v36, v27, "SiriGeo currently doesn't support parse type: %s", v29, 0xCu);
      uint64_t v33 = v37;
      swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }

    (*(void (**)(id *, uint64_t))(v9 + 8))(v12, v8);
    return 0LL;
  }

  return v20;
}

uint64_t SaveParkingLocationBaseFlow.executeState()(uint64_t a1)
{
  void v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
  v2[7] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[8] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[9] = swift_task_alloc(v5);
  v2[10] = swift_task_alloc(v5);
  v2[11] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for SaveParkingLocationBaseFlow.State(0LL);
  v2[12] = v6;
  unint64_t v7 = (*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[13] = swift_task_alloc(v7);
  v2[14] = swift_task_alloc(v7);
  return swift_task_switch(SaveParkingLocationBaseFlow.executeState(), 0LL, 0LL);
}

void SaveParkingLocationBaseFlow.executeState()()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 96);
  (*(void (**)(void))(**(void **)(v0 + 48) + 112LL))();
  uint64_t v3 = (char *)sub_258A8 + 4 * byte_95DB0[swift_getEnumCaseMultiPayload(v1, v2)];
  __asm { BR              X10 }

uint64_t sub_258A8( uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_log_t log, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v25 = **(void ***)(v24 + 112);
  uint64_t v26 = *(os_log_s **)(*(void *)(v24 + 48) + 16LL);
  os_log_type_t v27 = static os_log_type_t.default.getter(a1);
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl(&dword_0, v26, v27, "SaveParkingLocationBaseFlow execute state fallthrough to handle.", v28, 2u);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  uint64_t v29 = *(void *)(v24 + 96);
  uint64_t v30 = *(void **)(v24 + 104);
  uint64_t v31 = *(void *)(v24 + 48);
  *uint64_t v30 = v25;
  swift_storeEnumTagMultiPayload(v30, v29, 1LL);
  unint64_t v32 = *(uint64_t (**)(void *))(*(void *)v31 + 120LL);
  id v33 = v25;
  uint64_t v34 = v32(v30);
  *(void *)(v24 + 120) = v33;
  uint64_t v35 = *(os_log_s **)(*(void *)(v24 + 48) + 16LL);
  os_log_type_t v36 = static os_log_type_t.default.getter(v34);
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl(&dword_0, v35, v36, "SaveParkingLocationBaseFlow execute state handle.", v37, 2u);
    swift_slowDealloc(v37, -1LL, -1LL);
  }

  uint64_t v38 = *(int **)(**(void **)(v24 + 48) + 216LL);
  unint64_t v41 = (int *)((char *)v38 + *v38);
  uint64_t v39 = (void *)swift_task_alloc(v38[1]);
  *(void *)(v24 + 128) = v39;
  *uint64_t v39 = v24;
  v39[1] = SaveParkingLocationBaseFlow.executeState();
  return ((uint64_t (*)(void, id))v41)(*(void *)(v24 + 40), v33);
}

uint64_t SaveParkingLocationBaseFlow.executeState()()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = *(void **)(*v0 + 120);
  uint64_t v9 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 128));

  uint64_t v4 = v1[13];
  uint64_t v3 = v1[14];
  uint64_t v6 = v1[10];
  uint64_t v5 = v1[11];
  uint64_t v7 = v1[9];
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t SaveParkingLocationBaseFlow.makeRCHFlow(intent:)(uint64_t a1, uint64_t a2)
{
  v3[26] = a2;
  v3[27] = v2;
  v3[25] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
  v3[28] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[29] = v5;
  v3[30] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(SaveParkingLocationBaseFlow.makeRCHFlow(intent:), 0LL, 0LL);
}

uint64_t SaveParkingLocationBaseFlow.makeRCHFlow(intent:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(v8 + 240);
  uint64_t v11 = *(void **)(v8 + 216);
  uint64_t v10 = *(void *)(v8 + 224);
  uint64_t v44 = *(void *)(v8 + 208);
  uint64_t v45 = *(void *)(v8 + 232);
  uint64_t v12 = static os_log_type_t.info.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  os_log(_:dso:log:_:_:)( v12,  &dword_0,  v11[2],  "SaveParkingLocationBaseFlow makeRCHFlow",  39LL,  2LL,  &_swiftEmptyArrayStorage);
  uint64_t v13 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INSaveParkingLocationIntent,  &OBJC_CLASS___INSaveParkingLocationIntent_ptr);
  uint64_t v14 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INSaveParkingLocationIntentResponse,  &OBJC_CLASS___INSaveParkingLocationIntentResponse_ptr);
  uint64_t v46 = v9;
  RCHChildFlowProducersAsync.init()(v13, v14);
  uint64_t v15 = type metadata accessor for App(0LL);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  uint64_t v43 = App.init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)( 0LL,  0LL,  0xD00000000000002DLL,  0x800000000009C810LL,  0LL,  0LL,  0LL,  0LL);
  uint64_t v16 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)(v43, v13, v14);
  uint64_t v17 = RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v16);
  id v18 = *(void (**)(void))(*v11 + 136LL);
  uint64_t v42 = v11;
  ((void (*)(uint64_t))v18)(v17);
  uint64_t v19 = type metadata accessor for SaveParkingLocationUnsupportedValueStrategy();
  uint64_t v20 = swift_allocObject(v19, 64LL, 7LL);
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  *(void *)(v20 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000002BLL,  0x800000000009BB60LL);
  outlined init with take of CATType((__int128 *)(v8 + 16), v20 + 24);
  *(void *)(v8 + 184) = v20;
  uint64_t v21 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type SaveParkingLocationUnsupportedValueStrategy and conformance SaveParkingLocationUnsupportedValueStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for SaveParkingLocationUnsupportedValueStrategy,  (uint64_t)&protocol conformance descriptor for SaveParkingLocationUnsupportedValueStrategy);
  uint64_t v22 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)(v8 + 184, v19, v21);
  uint64_t v24 = v23;
  swift_release(v20);
  uint64_t v25 = RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter(v22, v24, v10);
  ((void (*)(uint64_t))v18)(v25);
  uint64_t v26 = type metadata accessor for SaveParkingHandleIntentStrategy();
  uint64_t v27 = swift_allocObject(v26, 65LL, 7LL);
  *(void *)(v27 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001FLL,  0x800000000009BDB0LL);
  outlined init with take of CATType((__int128 *)(v8 + 96), v27 + 24);
  *(_BYTE *)(v27 + 64) = 0;
  *(void *)(v8 + 176) = v27;
  uint64_t v28 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type SaveParkingHandleIntentStrategy and conformance SaveParkingHandleIntentStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for SaveParkingHandleIntentStrategy,  (uint64_t)&protocol conformance descriptor for SaveParkingHandleIntentStrategy);
  uint64_t v29 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)(v8 + 176, v26, v28);
  uint64_t v31 = v30;
  swift_release(v27);
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v29, v31, v10);
  uint64_t v32 = type metadata accessor for SaveParkingBaseRCHStrategy();
  uint64_t v33 = swift_allocObject(v32, 24LL, 7LL);
  *(void *)(v33 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001ALL,  0x800000000009BD10LL);
  v18();
  uint64_t v34 = *(void *)(v8 + 160);
  uint64_t v35 = *(void *)(v8 + 168);
  __swift_project_boxed_opaque_existential_1((void *)(v8 + 136), v34);
  (*(void (**)(uint64_t, uint64_t))(v35 + 56))(v34, v35);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v8 + 136));
  uint64_t v36 = *(void *)(v8 + 80);
  uint64_t v37 = *(void *)(v8 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v8 + 56), v36);
  *(void *)(v8 + 19__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v33;
  uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 8);
  uint64_t v39 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type SaveParkingBaseRCHStrategy and conformance SaveParkingBaseRCHStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for SaveParkingBaseRCHStrategy,  (uint64_t)&protocol conformance descriptor for SaveParkingBaseRCHStrategy);
  uint64_t v40 = v38(v8 + 192, v46, v43, v44, v32, v39, v36, v37);
  swift_retain(v42);
  static ExecuteResponse.ongoing<A>(next:childCompletion:)( v40,  partial apply for closure #1 in SaveParkingLocationBaseFlow.makeRCHFlow(intent:),  v42);
  swift_release(v43);
  swift_release(v33);
  swift_release(v40);
  swift_release(v42);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v10);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v8 + 56));
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t closure #1 in SaveParkingLocationBaseFlow.makeRCHFlow(intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SaveParkingLocationBaseFlow.State(0LL);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v6, a1, v7);
  swift_storeEnumTagMultiPayload(v6, v4, 3LL);
  return (*(uint64_t (**)(char *))(*(void *)a2 + 120LL))(v6);
}

uint64_t SaveParkingLocationBaseFlow.deinit()
{
  outlined destroy of SaveParkingLocationBaseFlow.State(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowState);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0
                                                        + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowHelper));
  return v0;
}

uint64_t SaveParkingLocationBaseFlow.__deallocating_deinit()
{
  outlined destroy of SaveParkingLocationBaseFlow.State((uint64_t)v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowState);
  __swift_destroy_boxed_opaque_existential_0Tm((id *)((char *)v0
                                                    + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowHelper));
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t protocol witness for FSMFlow.flowState.getter in conformance SaveParkingLocationBaseFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112LL))();
}

uint64_t protocol witness for FSMFlow.onInput(input:) in conformance SaveParkingLocationBaseFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200LL))() & 1;
}

uint64_t protocol witness for FSMFlow.executeState() in conformance SaveParkingLocationBaseFlow(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 208LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v7(a1);
}

uint64_t protocol witness for Flow.on(input:) in conformance SaveParkingLocationBaseFlow( uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for SaveParkingLocationBaseFlow, a2);
  return FSMFlow.on(input:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance SaveParkingLocationBaseFlow( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for SaveParkingLocationBaseFlow, a3);
  return FSMFlow.execute(completion:)(a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for Flow.execute() in conformance SaveParkingLocationBaseFlow( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_C6814);
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for SaveParkingLocationBaseFlow, a2);
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return FSMFlow.execute()(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance SaveParkingLocationBaseFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192LL))();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SaveParkingLocationBaseFlow( uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for SaveParkingLocationBaseFlow, a1);
  return FSMFlow.description.getter(a1, WitnessTable);
}

uint64_t specialized SaveParkingLocationBaseFlow.init(flowHelper:intent:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v9 = __swift_allocate_boxed_opaque_existential_0(&v13);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32LL))(v9, a1, a4);
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  *(void *)(a3 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001BLL,  0x8000000000095E70LL);
  *(_BYTE *)(a3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_isPOMMES) = 0;
  outlined init with take of CATType( &v13,  a3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowHelper);
  uint64_t v10 = a3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowState;
  *(void *)(a3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowState) = a2;
  uint64_t v11 = type metadata accessor for SaveParkingLocationBaseFlow.State(0LL);
  swift_storeEnumTagMultiPayload(v10, v11, 0LL);
  return a3;
}

uint64_t specialized SaveParkingLocationBaseFlow.__allocating_init(flowHelper:intent:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a4 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SaveParkingLocationBaseFlow(0LL);
  uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  return specialized SaveParkingLocationBaseFlow.init(flowHelper:intent:)((uint64_t)v11, a2, v13, a4, a5);
}

uint64_t outlined destroy of SaveParkingLocationBaseFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SaveParkingLocationBaseFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in SaveParkingLocationBaseFlow.makeRCHFlow(intent:)(uint64_t a1)
{
  return closure #1 in SaveParkingLocationBaseFlow.makeRCHFlow(intent:)(a1, v1);
}

uint64_t instantiation function for generic protocol witness table for SaveParkingLocationBaseFlow( uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type SaveParkingLocationBaseFlow and conformance SaveParkingLocationBaseFlow,  type metadata accessor for SaveParkingLocationBaseFlow,  (uint64_t)&protocol conformance descriptor for SaveParkingLocationBaseFlow);
  uint64_t result = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type SaveParkingLocationBaseFlow and conformance SaveParkingLocationBaseFlow,  type metadata accessor for SaveParkingLocationBaseFlow,  (uint64_t)&protocol conformance descriptor for SaveParkingLocationBaseFlow);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for SaveParkingLocationBaseFlow(uint64_t a1)
{
  return type metadata accessor for ShareETA( a1,  (uint64_t *)&type metadata singleton initialization cache for SaveParkingLocationBaseFlow,  (uint64_t)&nominal type descriptor for SaveParkingLocationBaseFlow);
}

uint64_t sub_26878(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 112LL))();
}

uint64_t sub_268A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 136LL))();
}

uint64_t sub_268CC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_BYTE *))(**(void **)a2 + 144LL))(v4);
}

uint64_t sub_2690C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160LL))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_26940(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 168LL))(*a1);
}

uint64_t ObjC metadata update function for SaveParkingLocationBaseFlow()
{
  return type metadata accessor for SaveParkingLocationBaseFlow(0LL);
}

uint64_t type metadata completion function for SaveParkingLocationBaseFlow(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for SaveParkingLocationBaseFlow.State(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = "(";
    v4[3] = &unk_95EC8;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SaveParkingLocationBaseFlow.State( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    uint64_t v5 = (char *)&loc_26A54 + 4 * byte_95DB4[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = v6 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain(v6);
  return v7;
}

void destroy for SaveParkingLocationBaseFlow.State(id *a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
    case 1u:

      break;
    case 2u:
      swift_errorRelease(*a1);
      break;
    case 3u:
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
      (*(void (**)(id *, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
      break;
    default:
      return;
  }

void initializeWithCopy for SaveParkingLocationBaseFlow.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (char *)sub_26BE4 + 4 * byte_95DBC[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }

void **sub_26BE4()
{
  uint64_t v3 = *v2;
  *uint64_t v0 = *v2;
  id v4 = v3;
  swift_storeEnumTagMultiPayload(v0, v1, 0LL);
  return v0;
}

uint64_t assignWithCopy for SaveParkingLocationBaseFlow.State(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    outlined destroy of SaveParkingLocationBaseFlow.State(result);
    uint64_t v5 = (char *)&loc_26CD8 + 4 * byte_95DC0[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  return result;
}

void *initializeWithTake for SaveParkingLocationBaseFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 3)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 3LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *assignWithTake for SaveParkingLocationBaseFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of SaveParkingLocationBaseFlow.State((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 3)
    {
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 3LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

void type metadata completion function for SaveParkingLocationBaseFlow.State(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = "\b";
  type metadata accessor for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(v2 - 8) + 64LL;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 4LL, v4);
  }

void type metadata accessor for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>( uint64_t a1)
{
  if (!lazy cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>)
  {
    uint64_t v2 = type metadata accessor for OS_os_log( 255LL,  &lazy cache variable for type metadata for INSaveParkingLocationIntent,  &OBJC_CLASS___INSaveParkingLocationIntent_ptr);
    uint64_t v3 = type metadata accessor for OS_os_log( 255LL,  &lazy cache variable for type metadata for INSaveParkingLocationIntentResponse,  &OBJC_CLASS___INSaveParkingLocationIntentResponse_ptr);
    unint64_t v4 = type metadata accessor for RCHFlowResult(a1, v2, v3);
    if (!v5) {
      atomic_store( v4,  (unint64_t *)&lazy cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
    }
  }

uint64_t CATService.__allocating_init(with:)(char a1)
{
  return (*(uint64_t (**)(void))(v1 + 104))(a1 & 1);
}

uint64_t CATService.Mode.options.getter(char a1)
{
  if (!a1) {
    return static CATOption.defaultMode.getter();
  }
  if (a1 == 1) {
    return static CATOption.debugMode.getter();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CATOption>);
  uint64_t v3 = type metadata accessor for CATOption(0LL);
  uint64_t v4 = swift_allocObject( v2,  ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL))
       + 2LL * *(void *)(*(void *)(v3 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v4 + 16) = xmmword_949D0;
  uint64_t v5 = static CATOption.testMode.getter();
  static CATOption.resetState.getter(v5);
  uint64_t v9 = v4;
  unint64_t v6 = lazy protocol witness table accessor for type CATOption and conformance CATOption();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CATOption]);
  unint64_t v8 = lazy protocol witness table accessor for type [CATOption] and conformance [A]();
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v9, v7, v8, v3, v6);
}

unint64_t lazy protocol witness table accessor for type CATOption and conformance CATOption()
{
  unint64_t result = lazy protocol witness table cache variable for type CATOption and conformance CATOption;
  if (!lazy protocol witness table cache variable for type CATOption and conformance CATOption)
  {
    uint64_t v1 = type metadata accessor for CATOption(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CATOption, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CATOption and conformance CATOption);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type [CATOption] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CATOption] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CATOption] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CATOption]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [CATOption] and conformance [A]);
  }

  return result;
}

uint64_t CATService.__allocating_init(withMode:)(char a1)
{
  uint64_t v3 = swift_allocObject(v1, 40LL, 7LL);
  CATService.init(withMode:)(a1);
  return v3;
}

uint64_t CATService.init(withMode:)(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CATService();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v4);
  *(void *)(v2 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  type metadata accessor for OS_os_log();
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v2 + 16) = a1;
  return v2;
}

uint64_t type metadata accessor for CATService()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin10CATService);
}

uint64_t CATService.execute(model:globals:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[22] = a3;
  v4[23] = v3;
  v4[20] = a1;
  v4[21] = a2;
  uint64_t v5 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  _BYTE v4[24] = v5;
  v4[25] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(CATService.execute(model:globals:), 0LL, 0LL);
}

uint64_t CATService.execute(model:globals:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = v1 + 2;
  uint64_t v4 = v1 + 7;
  uint64_t v5 = v1 + 12;
  uint64_t v6 = v1[23];
  uint64_t v7 = v1[21];
  os_log_type_t v8 = static os_log_type_t.debug.getter(a1);
  uint64_t v9 = *(os_log_s **)(v6 + 32);
  outlined init with copy of DeviceState(v7, (uint64_t)v3);
  outlined init with copy of DeviceState(v7, (uint64_t)v4);
  outlined init with copy of DeviceState(v7, (uint64_t)v5);
  os_log_type_t v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    uint64_t v34 = v2[25];
    uint64_t v35 = v2[24];
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v38 = swift_slowAlloc(96LL, -1LL);
    uint64_t v39 = v38;
    *(_DWORD *)uint64_t v11 = 136315650;
    log = v9;
    uint64_t v13 = v2[5];
    uint64_t v12 = v2[6];
    __swift_project_boxed_opaque_existential_1(v3, v13);
    os_log_type_t type = v10;
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v13, v12);
    unint64_t v16 = v15;
    v2[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 17, v2 + 18);
    swift_bridgeObjectRelease(v16);
    __swift_destroy_boxed_opaque_existential_0Tm(v3);
    *(_WORD *)(v11 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
    uint64_t v18 = v2[10];
    uint64_t v17 = v2[11];
    __swift_project_boxed_opaque_existential_1(v4, v18);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v18, v17);
    uint64_t v21 = Dictionary.description.getter(v20);
    unint64_t v23 = v22;
    swift_bridgeObjectRelease(v19);
    v2[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 18, v2 + 19);
    swift_bridgeObjectRelease(v23);
    __swift_destroy_boxed_opaque_existential_0Tm(v4);
    *(_WORD *)(v11 + 2__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
    uint64_t v24 = v2[15];
    __swift_project_boxed_opaque_existential_1(v5, v24);
    GeoCATModel.getBehaviorAfterSpeaking()(v24, v34);
    uint64_t v25 = String.init<A>(describing:)(v34, v35);
    unint64_t v27 = v26;
    v2[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 19, v2 + 20);
    swift_bridgeObjectRelease(v27);
    __swift_destroy_boxed_opaque_existential_0Tm(v5);
    _os_log_impl(&dword_0, log, type, "catId %s\nwith parameters %s\nbehaviourAfterSpeaking %s", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy(v38, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v3);
    __swift_destroy_boxed_opaque_existential_0Tm(v4);
    __swift_destroy_boxed_opaque_existential_0Tm(v5);
  }

  uint64_t v28 = v2[23];
  uint64_t v29 = swift_task_alloc(48LL);
  v2[26] = v29;
  __int128 v30 = *(_OWORD *)(v2 + 21);
  *(void *)(v29 + 16) = v28;
  *(_OWORD *)(v29 + 24) = v30;
  v2[27] = v31;
  uint64_t v32 = type metadata accessor for TemplatingResult(0LL);
  *uint64_t v31 = v2;
  v31[1] = CATService.execute(model:globals:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v2[20],  0LL,  0LL,  0xD000000000000017LL,  0x800000000009C880LL,  partial apply for closure #1 in CATService.execute(model:globals:),  v29,  v32);
}

uint64_t CATService.execute(model:globals:)()
{
  uint64_t v2 = *(void *)(*v1 + 216);
  uint64_t v3 = *v1;
  *(void *)(v3 + 224) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(CATService.execute(model:globals:), 0LL, 0LL);
  }
  uint64_t v5 = *(void *)(v3 + 200);
  swift_task_dealloc(*(void *)(v3 + 208));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 200);
  swift_task_dealloc(*(void *)(v0 + 208));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in CATService.execute(model:globals:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v27 = a4;
  uint64_t v28 = a2;
  uint64_t v24 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TemplatingResult, Error>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin();
  uint64_t v8 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  uint64_t v25 = *(void *)(v8 - 8);
  uint64_t v26 = v8;
  __chkstk_darwin();
  os_log_type_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a3[3];
  uint64_t v12 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v11);
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  unint64_t v14 = v13;
  uint64_t v16 = a3[3];
  uint64_t v15 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v16);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v16, v15);
  uint64_t v18 = a3[3];
  __swift_project_boxed_opaque_existential_1(a3, v18);
  GeoCATModel.getBehaviorAfterSpeaking()(v18, (uint64_t)v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))( (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v24,  v5);
  uint64_t v19 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v20 = (v19 + 16) & ~v19;
  uint64_t v21 = swift_allocObject(&unk_B8708, v20 + v7, v19 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))( v21 + v20,  (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v5);
  CATService.execute(catId:parameters:globals:behaviorAfterSpeaking:_:)( v23,  v14,  v17,  v27,  (uint64_t)v10,  (uint64_t)partial apply for closure #1 in closure #1 in CATService.execute(model:globals:),  v21);
  swift_release(v21);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v14);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v10, v26);
}

uint64_t closure #1 in closure #1 in CATService.execute(model:globals:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v14 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin();
  os_log_type_t v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    uint64_t v15 = *v10;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TemplatingResult, Error>);
    return CheckedContinuation.resume(throwing:)(&v15, v11);
  }

  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v7, v10, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v7, v2);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TemplatingResult, Error>);
    CheckedContinuation.resume(returning:)(v5, v13);
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  }

uint64_t CATService.execute(model:globals:_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  uint64_t v52 = a2;
  uint64_t v7 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin();
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_log_type_t v12 = static os_log_type_t.debug.getter(v9);
  uint64_t v13 = *(os_log_s **)(v5 + 32);
  outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v62);
  outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v59);
  outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v57);
  if (os_log_type_enabled(v13, v12))
  {
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v50 = v8;
    uint64_t v15 = v14;
    uint64_t v49 = swift_slowAlloc(96LL, -1LL);
    uint64_t v56 = v49;
    *(_DWORD *)uint64_t v15 = 136315650;
    uint64_t v51 = v5;
    os_log_t v48 = v13;
    uint64_t v17 = v63;
    uint64_t v16 = v64;
    __swift_project_boxed_opaque_existential_1(v62, v63);
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
    HIDWORD(v4__swift_destroy_boxed_opaque_existential_0Tm(v0 + 7) = v12;
    uint64_t v19 = v18(v17, v16);
    unint64_t v21 = v20;
    uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
    swift_bridgeObjectRelease(v21);
    __swift_destroy_boxed_opaque_existential_0Tm(v62);
    *(_WORD *)(v15 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
    uint64_t v22 = v60;
    uint64_t v23 = v61;
    __swift_project_boxed_opaque_existential_1(v59, v60);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v22, v23);
    uint64_t v26 = Dictionary.description.getter(v25);
    uint64_t v27 = v7;
    unint64_t v29 = v28;
    swift_bridgeObjectRelease(v24);
    uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v29, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
    unint64_t v30 = v29;
    uint64_t v7 = v27;
    swift_bridgeObjectRelease(v30);
    __swift_destroy_boxed_opaque_existential_0Tm(v59);
    *(_WORD *)(v15 + 2__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
    uint64_t v31 = v58;
    __swift_project_boxed_opaque_existential_1(v57, v58);
    GeoCATModel.getBehaviorAfterSpeaking()(v31, (uint64_t)v11);
    uint64_t v32 = String.init<A>(describing:)(v11, v27);
    unint64_t v34 = v33;
    uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
    swift_bridgeObjectRelease(v34);
    __swift_destroy_boxed_opaque_existential_0Tm(v57);
    _os_log_impl( &dword_0,  v48,  BYTE4(v47),  "catId %s\nwith parameters %s\nbehaviourAfterSpeaking %s",  (uint8_t *)v15,  0x20u);
    uint64_t v35 = v49;
    swift_arrayDestroy(v49, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    uint64_t v36 = v15;
    uint64_t v8 = v50;
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v62);
    __swift_destroy_boxed_opaque_existential_0Tm(v59);
    __swift_destroy_boxed_opaque_existential_0Tm(v57);
  }

  uint64_t v37 = a1[3];
  uint64_t v38 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v37);
  uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v37, v38);
  unint64_t v41 = v40;
  uint64_t v42 = a1[3];
  uint64_t v43 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v42);
  uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 16))(v42, v43);
  uint64_t v45 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v45);
  GeoCATModel.getBehaviorAfterSpeaking()(v45, (uint64_t)v11);
  CATService.execute(catId:parameters:globals:behaviorAfterSpeaking:_:)(v39, v41, v44, v52, (uint64_t)v11, v53, v54);
  swift_bridgeObjectRelease(v44);
  swift_bridgeObjectRelease(v41);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t CATService.execute(catId:parameters:globals:behaviorAfterSpeaking:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v76 = a6;
  uint64_t v77 = a7;
  uint64_t v71 = a4;
  uint64_t v81 = a3;
  uint64_t v11 = type metadata accessor for CATOption(0LL);
  uint64_t v82 = *(void *)(v11 - 8);
  uint64_t v83 = v11;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  uint64_t v72 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v74 = v16;
  uint64_t v17 = __chkstk_darwin();
  uint64_t v19 = (char *)&v66 - v18;
  os_log_type_t v27 = static os_log_type_t.info.getter(v17, v20, v21, v22, v23, v24, v25, v26);
  uint64_t v84 = v7;
  unint64_t v28 = *(os_log_s **)(v7 + 32);
  unint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v75 = a5;
  v29(v19, a5, v14);
  os_log_t v70 = v28;
  BOOL v30 = os_log_type_enabled(v28, v27);
  uint64_t v79 = v13;
  unint64_t v80 = a2;
  uint64_t v78 = a1;
  unint64_t v73 = v29;
  if (v30)
  {
    swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v31 = v81;
    swift_bridgeObjectRetain_n(v81, 2LL);
    uint64_t v32 = a1;
    uint64_t v33 = swift_slowAlloc(32LL, -1LL);
    uint64_t v69 = swift_slowAlloc(96LL, -1LL);
    *(void *)&__int128 v86 = v69;
    *(_DWORD *)uint64_t v33 = 136315650;
    swift_bridgeObjectRetain(a2);
    uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, a2, (uint64_t *)&v86);
    int v68 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v33 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
    __n128 v34 = swift_bridgeObjectRetain(v31);
    unint64_t v67 = (char *)&type metadata for Any + 8;
    uint64_t v35 = Dictionary.description.getter(v34);
    uint64_t v36 = (void (*)(char *, char *, uint64_t))v29;
    unint64_t v38 = v37;
    swift_bridgeObjectRelease(v31);
    uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v38, (uint64_t *)&v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease_n(v31, 2LL);
    *(_WORD *)(v33 + 2__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
    uint64_t v39 = v72;
    v36(v72, v19, v14);
    uint64_t v40 = String.init<A>(describing:)(v39, v14);
    unint64_t v42 = v41;
    uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, (uint64_t *)&v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
    swift_bridgeObjectRelease(v42);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
    _os_log_impl( &dword_0,  v70,  (os_log_type_t)v68,  "catId %s\nwith parameters %s\nbehaviourAfterSpeaking %s",  (uint8_t *)v33,  0x20u);
    uint64_t v43 = v69;
    swift_arrayDestroy(v69, 3LL, v67);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v33, -1LL, -1LL);
    uint64_t v44 = v39;
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
    uint64_t v44 = v72;
  }

  uint64_t v72 = *(char **)(v84 + 24);
  int v45 = *(unsigned __int8 *)(v84 + 16);
  if (v45 == 2)
  {
    type metadata accessor for CATGlobals.Builder(0LL);
    uint64_t v46 = CATGlobals.Builder.__allocating_init(siriLocale:)(28261LL, 0xE200000000000000LL);
    uint64_t v47 = dispatch thunk of CATGlobals.Builder.withRandomSeed(_:)(1LL);
    uint64_t v48 = swift_release(v46);
    uint64_t v49 = (void *)dispatch thunk of CATGlobals.Builder.build()(v48);
    swift_release(v47);
    uint64_t v88 = 0LL;
    __int128 v86 = 0u;
    __int128 v87 = 0u;
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CATOption>);
    uint64_t v51 = swift_allocObject( v50,  ((*(unsigned __int8 *)(v82 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80))
          + 2LL * *(void *)(v82 + 72),
            *(unsigned __int8 *)(v82 + 80) | 7LL);
    *(_OWORD *)(v51 + 16) = xmmword_949D0;
    uint64_t v52 = static CATOption.testMode.getter();
    static CATOption.resetState.getter(v52);
    uint64_t v85 = v51;
    unint64_t v53 = lazy protocol witness table accessor for type CATOption and conformance CATOption();
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CATOption]);
    unint64_t v55 = lazy protocol witness table accessor for type [CATOption] and conformance [A]();
    uint64_t v56 = v79;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v85, v54, v55, v83, v53);
  }

  else
  {
    type metadata accessor for CATGlobals(0LL);
    __n128 v57 = swift_bridgeObjectRetain(v71);
    uint64_t v49 = (void *)CATGlobals.__allocating_init(dictionary:)(v57);
    uint64_t v88 = 0LL;
    __int128 v86 = 0u;
    __int128 v87 = 0u;
    uint64_t v56 = v79;
    if (v45) {
      static CATOption.debugMode.getter();
    }
    else {
      static CATOption.defaultMode.getter();
    }
  }

  type metadata accessor for CATExecutor(0LL);
  v73(v44, v75, v14);
  uint64_t v58 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v59 = (v58 + 40) & ~v58;
  uint64_t v60 = (char *)swift_allocObject(&unk_B86E0, v59 + v74, v58 | 7);
  uint64_t v61 = v44;
  uint64_t v62 = v84;
  uint64_t v63 = v76;
  uint64_t v64 = v77;
  *((void *)v60 + __swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v84;
  *((void *)v60 + 3) = v63;
  *((void *)v60 + 4) = v64;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v60[v59], v61, v14);
  swift_retain(v62);
  swift_retain(v64);
  static CATExecutor.execute(bundle:catId:parameters:globals:callback:options:_:)( v72,  v78,  v80,  v81,  v49,  &v86,  v56,  partial apply for closure #1 in CATService.execute(catId:parameters:globals:behaviorAfterSpeaking:_:),  v60);
  swift_release(v60);

  (*(void (**)(char *, uint64_t))(v82 + 8))(v56, v83);
  return outlined destroy of (label: String?, value: Any)?( (uint64_t)&v86,  &demangling cache variable for type metadata for CatCallable?);
}

uint64_t closure #1 in CATService.execute(catId:parameters:globals:behaviorAfterSpeaking:_:)( uint64_t a1, uint64_t a2, void (*a3)(void *), uint64_t a4, uint64_t a5)
{
  unint64_t v37 = a3;
  uint64_t v8 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin();
  uint64_t v14 = (uint64_t *)((char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v16 = (uint64_t *)((char *)&v36 - v15);
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)&v36 - v15);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v12);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v18 = *v16;
    uint64_t v19 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    uint64_t v20 = *(void *)(a2 + 32);
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v22 = swift_allocObject(v21, 72LL, 7LL);
    *(_OWORD *)(v22 + 16) = xmmword_95430;
    swift_getErrorValue(v18, v39, v38);
    uint64_t v23 = Error.localizedDescription.getter(v38[1], v38[2]);
    uint64_t v25 = v24;
    *(void *)(v22 + 56) = &type metadata for String;
    *(void *)(v22 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v22 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v23;
    *(void *)(v22 + 40) = v25;
    os_log(_:dso:log:_:_:)(v19, &dword_0, v20, "CAT execute failed with %@", 26LL, 2LL, v22);
    swift_bridgeObjectRelease(v22);
    *uint64_t v14 = v18;
    swift_storeEnumTagMultiPayload(v14, v12, 1LL);
    swift_errorRetain(v18);
    v37(v14);
    swift_errorRelease(v18);
    return outlined destroy of (label: String?, value: Any)?( (uint64_t)v14,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  }

  else
  {
    uint64_t v27 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v11, v16, v8);
    uint64_t v35 = static os_log_type_t.info.getter(v27, v28, v29, v30, v31, v32, v33, v34);
    os_log(_:dso:log:_:_:)( v35,  &dword_0,  *(void *)(a2 + 32),  "CAT executed successfully",  25LL,  2LL,  &_swiftEmptyArrayStorage);
    TemplatingResult.withBehaviorAfterSpeaking(_:)(a5);
    swift_storeEnumTagMultiPayload(v14, v12, 0LL);
    v37(v14);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v14,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

uint64_t CATService.getLabel(model:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  uint64_t v6 = v5;
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
  uint64_t v10 = CATService.getLabel(catId:params:)(v4, v6, v9);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v9);
  return v10;
}

uint64_t CATService.getLabel(catId:params:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v40 = a1;
  uint64_t v4 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  __chkstk_darwin();
  unint64_t v37 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin();
  uint64_t v12 = (uint64_t *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v14 = (char *)&v35 - v13;
  type metadata accessor for CATExecutor(0LL);
  uint64_t v36 = v3;
  uint64_t v15 = *(void *)(v3 + 24);
  type metadata accessor for CATGlobals(0LL);
  memset(v45, 0, sizeof(v45));
  uint64_t v46 = 0LL;
  uint64_t v16 = (void *)CATGlobals.__allocating_init()();
  static CATOption.defaultMode.getter();
  static CATExecutor.execute(bundle:catId:parameters:globals:callback:options:)(v15, v40, v41, v42, v16, v45, v9);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v45,  &demangling cache variable for type metadata for CatCallable?);
  outlined init with copy of Result<TemplatingResult, Error>((uint64_t)v14, (uint64_t)v12);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v10);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v18 = *v12;
    uint64_t v19 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    uint64_t v20 = *(void *)(v36 + 32);
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v22 = swift_allocObject(v21, 72LL, 7LL);
    *(_OWORD *)(v22 + 16) = xmmword_95430;
    swift_getErrorValue(v18, v44, v43);
    uint64_t v23 = Error.localizedDescription.getter(v43[1], v43[2]);
    uint64_t v25 = v24;
    *(void *)(v22 + 56) = &type metadata for String;
    *(void *)(v22 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v22 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v23;
    *(void *)(v22 + 40) = v25;
    os_log(_:dso:log:_:_:)(v19, &dword_0, v20, "Error while executing dialog %@:", 32LL, 2LL, v22);
    swift_bridgeObjectRelease(v22);
LABEL_6:
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v14,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    return v18;
  }

  uint64_t v27 = v37;
  uint64_t v26 = v38;
  uint64_t v28 = v39;
  uint64_t v29 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v38 + 32))(v37, v12, v39);
  uint64_t v30 = (void *)TemplatingResult.print.getter(v29);
  uint64_t v31 = v30;
  if (!v30[2])
  {
    swift_bridgeObjectRelease(v30);
    unint64_t v32 = lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v18 = swift_allocError(&type metadata for Errors, v32, 0LL, 0LL);
    *(void *)uint64_t v33 = 0xD000000000000014LL;
    *(void *)(v33 + 8) = 0x800000000009C940LL;
    *(_BYTE *)(v33 + 16) = 0;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v28);
    goto LABEL_6;
  }

  uint64_t v18 = v30[4];
  swift_bridgeObjectRetain(v30[5]);
  swift_bridgeObjectRelease(v31);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v28);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v14,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  return v18;
}

uint64_t CATService.executeRF(model:globals:)(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  return swift_task_switch(CATService.executeRF(model:globals:), 0LL, 0LL);
}

uint64_t CATService.executeRF(model:globals:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 2;
  uint64_t v3 = v1[17];
  uint64_t v4 = v1[18];
  uint64_t v5 = (void *)v1[16];
  type metadata accessor for CATGlobals(0LL);
  __n128 v6 = swift_bridgeObjectRetain(v3);
  uint64_t v7 = (void *)CATGlobals.__allocating_init(dictionary:)(v6);
  uint64_t v8 = dispatch thunk of CATGlobals.toDictionary.getter();
  swift_bridgeObjectRelease(v8);

  uint64_t v9 = (void *)objc_opt_self(&OBJC_CLASS___CATDialog);
  uint64_t v10 = *(void *)(v4 + 24);
  uint64_t v11 = v5[3];
  uint64_t v12 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  uint64_t v14 = v13;
  NSString v15 = String._bridgeToObjectiveC()();
  v1[19] = v15;
  swift_bridgeObjectRelease(v14);
  uint64_t v16 = v5[3];
  uint64_t v17 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v16);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
  uint64_t v19 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v18);
  swift_bridgeObjectRelease(v18);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v1[20] = isa;
  swift_bridgeObjectRelease(v19);
  Class v21 = Dictionary._bridgeToObjectiveC()().super.isa;
  v1[21] = v21;
  v1[7] = v1 + 15;
  v1[2] = v1;
  v1[3] = CATService.executeRF(model:globals:);
  uint64_t v22 = swift_continuation_init(v2, 1LL);
  v1[10] = _NSConcreteStackBlock;
  v1 += 10;
  v1[1] = 0x40000000LL;
  v1[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned DialogExecutionResult, @unowned NSError?) -> () with result type DialogExecutionResult;
  v1[3] = &block_descriptor;
  v1[4] = v22;
  [v9 execute:v10 catId:v15 parameters:isa globals:v21 completion:v1];
  return swift_continuation_await(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 176LL) = v1;
  if (v1) {
    uint64_t v2 = CATService.executeRF(model:globals:);
  }
  else {
    uint64_t v2 = CATService.executeRF(model:globals:);
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v1 = *(void **)(v0 + 160);
  uint64_t v2 = *(void **)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 120);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v1 = *(void **)(v0 + 168);
  uint64_t v3 = *(void **)(v0 + 152);
  uint64_t v2 = *(void **)(v0 + 160);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v29 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain(v3);
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }

    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v14 >= v28) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v29 + 8 * v14);
    int64_t v16 = v9 + 1;
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v28) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v29 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v28) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v29 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v28) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v29 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }

LABEL_27:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    int64_t v9 = v16;
LABEL_28:
    uint64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v13);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(void *)&__int128 v40 = v20;
    *((void *)&v40 + 1) = v19;
    _OWORD v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(void *)&v38[0] = v20;
    *((void *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7LL);
    outlined init with take of Any(v39, v33);
    __int128 v34 = v30;
    __int128 v35 = v31;
    uint64_t v36 = v32;
    outlined init with take of Any(v33, v37);
    __int128 v30 = v34;
    __int128 v31 = v35;
    uint64_t v32 = v36;
    outlined init with take of Any(v37, v38);
    outlined init with take of Any(v38, &v34);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v21 = -1LL << *((_BYTE *)v3 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)]) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)&v7[8 * v23];
      }

      while (v27 == -1);
      unint64_t v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    uint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)uint64_t v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(void *)(v11 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v32;
    uint64_t result = (uint64_t)outlined init with take of Any(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  int64_t v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    outlined consume of [String : Any].Iterator._Variant(a1);
    return (uint64_t)v3;
  }

  unint64_t v15 = *(void *)(v29 + 8 * v17);
  if (v15)
  {
    int64_t v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v28) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v29 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  int64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

LABEL_39:
  __break(1u);
  return result;
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned DialogExecutionResult, @unowned NSError?) -> () with result type DialogExecutionResult( uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    **(void **)(*(void *)(v3 + 64) + 4swift_beginAccess(v1 + 112, v5, 1LL, 0LL) = a2;
    id v10 = a2;
    return swift_continuation_throwingResume(v3);
  }

uint64_t CATService.deinit()
{
  return v0;
}

uint64_t CATService.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t partial apply for closure #1 in CATService.execute(model:globals:)(uint64_t a1)
{
  return closure #1 in CATService.execute(model:globals:)( a1,  *(void *)(v1 + 16),  *(void **)(v1 + 24),  *(void *)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type CATService.Mode and conformance CATService.Mode()
{
  unint64_t result = lazy protocol witness table cache variable for type CATService.Mode and conformance CATService.Mode;
  if (!lazy protocol witness table cache variable for type CATService.Mode and conformance CATService.Mode)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CATService.Mode,  &type metadata for CATService.Mode);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CATService.Mode and conformance CATService.Mode);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for CATService.Mode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_29234 + 4 * byte_95F15[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_29268 + 4 * byte_95F10[v4]))();
}

uint64_t sub_29268(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_29270(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x29278LL);
  }
  return result;
}

uint64_t sub_29284(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x2928CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_29290(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_29298(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CATService.Mode()
{
  return &type metadata for CATService.Mode;
}

uint64_t outlined init with copy of Result<TemplatingResult, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_29304()
{
  uint64_t v1 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in CATService.execute(catId:parameters:globals:behaviorAfterSpeaking:_:)( uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for BehaviorAfterSpeaking(0LL) - 8) + 80LL);
  return closure #1 in CATService.execute(catId:parameters:globals:behaviorAfterSpeaking:_:)( a1,  *(void *)(v1 + 16),  *(void (**)(void *))(v1 + 24),  *(void *)(v1 + 32),  v1 + ((v3 + 40) & ~v3));
}

uint64_t sub_293C4()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TemplatingResult, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in CATService.execute(model:globals:)(uint64_t a1)
{
  return closure #1 in closure #1 in CATService.execute(model:globals:)(a1);
}

uint64_t RedirectToServerFlow.execute()(uint64_t a1)
{
  v2[63] = a1;
  v2[64] = v1;
  uint64_t v3 = type metadata accessor for FlowUnhandledReason(0LL);
  v2[65] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[66] = v4;
  v2[67] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[68] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for AceOutput(0LL);
  v2[69] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[70] = v7;
  v2[71] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for TemplatingResult(0LL);
  v2[72] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[73] = v9;
  v2[74] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  v2[75] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  v2[76] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext(0LL);
  v2[77] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[78] = v13;
  v2[79] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for PommesContext.Source(0LL);
  v2[80] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v2[81] = v15;
  v2[82] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for PommesContext(0LL);
  v2[83] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v2[84] = v17;
  v2[85] = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for NLContextUpdate(0LL);
  v2[86] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v2[87] = v19;
  v2[88] = swift_task_alloc((*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(RedirectToServerFlow.execute(), 0LL, 0LL);
}

uint64_t RedirectToServerFlow.execute()()
{
  uint64_t v1 = (uint64_t *)v0[82];
  uint64_t v2 = v0[81];
  uint64_t v3 = v0[80];
  uint64_t v4 = v0[78];
  uint64_t v5 = v0[77];
  uint64_t v6 = v0[76];
  static GeoNLContextUtils.makeNLContextFor(weightedPromptResponseTargets:)((uint64_t)&_swiftEmptyArrayStorage);
  NLContextUpdate.weightedPromptTargetDomain.setter(0xD00000000000001DLL, 0x800000000009C9A0LL);
  NLContextUpdate.currentDomainName.setter(0x6165536C61636F6CLL, 0xEB00000000686372LL);
  uint64_t v7 = Data.init(base64Encoded:options:)(0xD000000000000048LL, 0x800000000009C9C0LL, 0LL);
  unint64_t v9 = v8;
  v0[89] = v7;
  v0[90] = v8;
  *uint64_t v1 = v7;
  v1[1] = v8;
  (*(void (**)(uint64_t *, void, uint64_t))(v2 + 104))( v1,  enum case for PommesContext.Source.pegasusResponse(_:),  v3);
  outlined copy of Data?(v7, v9);
  uint64_t v10 = PommesContext.init(source:domain:listenAfterSpeaking:)(v1, 7300455LL, 0xE300000000000000LL, 1LL);
  PommesContext.exportPromptContext()(v10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1LL, v5) == 1)
  {
    uint64_t v11 = v0[64];
    uint64_t v12 = outlined destroy of (label: String?, value: Any)?( v0[76],  &demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
    os_log_type_t v13 = static os_log_type_t.error.getter(v12);
    uint64_t v14 = *(os_log_s **)(v11 + 16);
    os_log_type_t v15 = v13;
    if (os_log_type_enabled(v14, v13))
    {
      uint64_t v16 = v0[85];
      uint64_t v17 = v0[83];
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v49 = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      swift_beginAccess(v16, v0 + 54, 0LL, 0LL);
      uint64_t v20 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type PommesContext and conformance PommesContext,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for PommesContext,  (uint64_t)&protocol conformance descriptor for PommesContext);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(v17, v20);
      unint64_t v23 = v22;
      v0[62] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 62, v0 + 63);
      swift_bridgeObjectRelease(v23);
      _os_log_impl(&dword_0, v14, v15, "No promptContext on %s", v18, 0xCu);
      swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }
  }

  else
  {
    uint64_t v24 = v0[79];
    uint64_t v25 = v0[78];
    uint64_t v26 = v0[77];
    (*(void (**)(uint64_t, void, uint64_t))(v25 + 32))(v24, v0[76], v26);
    Com_Apple_Siri_Product_Proto_PromptContext.previousDomainName.setter(0x6165536C61636F6CLL, 0xEB00000000686372LL);
    Com_Apple_Siri_Product_Proto_PromptContext.strictPrompt.setter(1LL);
    Com_Apple_Siri_Product_Proto_PromptContext.listenAfterSpeaking.setter(1LL);
    PommesContext.update(with:)(v24);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  }

  uint64_t v27 = v0[85];
  uint64_t v28 = v0[84];
  uint64_t v29 = v0[83];
  uint64_t v30 = v0[75];
  uint64_t v31 = v0[64];
  swift_beginAccess(v27, v0 + 57, 0LL, 0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v30, v27, v29);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v30, 0LL, 1LL, v29);
  uint64_t v32 = NLContextUpdate.pommesContext.setter(v30);
  uint64_t v40 = static os_log_type_t.info.getter(v32, v33, v34, v35, v36, v37, v38, v39);
  uint64_t v41 = *(void *)(v31 + 16);
  v0[91] = v41;
  os_log(_:dso:log:_:_:)(v40, &dword_0, v41, "setting NLOutput", 16LL, 2LL, &_swiftEmptyArrayStorage);
  uint64_t v42 = type metadata accessor for CATService();
  v0[92] = v42;
  uint64_t v43 = swift_allocObject(v42, 40LL, 7LL);
  v0[93] = v43;
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v42);
  v0[94] = ObjCClassFromMetadata;
  int v45 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
  v0[95] = v45;
  *(void *)(v43 + 24) = [v45 bundleForClass:ObjCClassFromMetadata];
  v0[96] = type metadata accessor for OS_os_log();
  *(void *)(v43 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v43 + 16) = 0;
  v0[27] = &type metadata for LocationSearch;
  v0[28] = &protocol witness table for LocationSearch;
  v0[25] = 0LL;
  v0[24] = 0LL;
  uint64_t v46 = static DialogHelper.globals.getter();
  v0[97] = v46;
  uint64_t v47 = (void *)swift_task_alloc(dword_C5C5C);
  v0[98] = v47;
  *uint64_t v47 = v0;
  v47[1] = RedirectToServerFlow.execute();
  return CATService.execute(model:globals:)(v0[74], (uint64_t)(v0 + 24), v46);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 784LL);
  *(void *)(*(void *)v1 + 792LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[93];
    swift_bridgeObjectRelease(v2[97]);
    swift_release(v4);
    uint64_t v5 = RedirectToServerFlow.execute();
  }

  else
  {
    uint64_t v6 = v2[97];
    swift_release(v2[93]);
    swift_bridgeObjectRelease(v6);
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 24);
    uint64_t v5 = RedirectToServerFlow.execute();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *boxed_opaque_existential_0;
  void *v14;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v18 = *(void *)(v0 + 752);
  uint64_t v17 = *(void **)(v0 + 760);
  uint64_t v16 = *(void *)(v0 + 736);
  uint64_t v1 = *(void *)(v0 + 704);
  uint64_t v2 = *(void *)(v0 + 696);
  uint64_t v3 = *(void *)(v0 + 688);
  uint64_t v4 = *(void *)(v0 + 592);
  uint64_t v5 = *(void *)(v0 + 568);
  uint64_t v20 = *(void *)(v0 + 560);
  uint64_t v19 = *(void *)(v0 + 552);
  uint64_t v6 = *(void *)(v0 + 544);
  static Device.current.getter((void *)(v0 + 232));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v6, v1, v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v6, 0LL, 1LL, v3);
  *(void *)(v0 + 304) = 0LL;
  *(_OWORD *)(v0 + 27__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v4,  v0 + 232,  1LL,  &_swiftEmptyArrayStorage,  1LL,  1LL,  v6,  &_swiftEmptyArrayStorage,  v0 + 272);
  outlined destroy of (label: String?, value: Any)?( v0 + 272,  &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (label: String?, value: Any)?( v6,  &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 232));
  static Device.current.getter((void *)(v0 + 16));
  uint64_t v7 = type metadata accessor for GeoRCHFlowFactoryImpl();
  uint64_t inited = swift_initStackObject(v7, v0 + 480);
  *(void *)(v0 + 800) = inited;
  *(void *)(v0 + 80) = v7;
  *(void *)(v0 + 88) = &protocol witness table for GeoRCHFlowFactoryImpl;
  *(void *)(v0 + 56) = inited;
  *(void *)(v0 + 96) = static DialogHelper.globals.getter();
  unint64_t v9 = static AceService.currentAsync.getter((void *)(v0 + 104));
  static OutputPublisherFactory.makeOutputPublisherAsync()(v9);
  uint64_t v10 = swift_initStackObject(v16, v0 + 392);
  *(void *)(v0 + 808) = v10;
  *(void *)(v10 + 24) = [v17 bundleForClass:v18];
  *(void *)(v10 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v10 + 16) = 0;
  *(void *)(v0 + 184) = v10;
  outlined init with copy of DeviceState(v0 + 144, v0 + 352);
  outlined destroy of FlowHelperImpl((void *)(v0 + 16));
  uint64_t v11 = *(void *)(v0 + 376);
  uint64_t v12 = *(void *)(v0 + 384);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 352), v11);
  *(void *)(v0 + 336) = v19;
  *(void *)(v0 + 344) = &protocol witness table for AceOutput;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((void *)(v0 + 312));
  (*(void (**)(void *, uint64_t, uint64_t))(v20 + 16))(boxed_opaque_existential_0, v5, v19);
  uint64_t v14 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 816) = v14;
  *uint64_t v14 = v0;
  v14[1] = RedirectToServerFlow.execute();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 312, v11, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 816);
  *(void *)(*v1 + 824) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = RedirectToServerFlow.execute();
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 312));
    uint64_t v4 = RedirectToServerFlow.execute();
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v1 = *(void *)(v0 + 728);
  uint64_t v2 = *(void *)(v0 + 592);
  uint64_t v3 = *(void *)(v0 + 584);
  uint64_t v4 = *(void *)(v0 + 576);
  uint64_t v5 = *(void *)(v0 + 568);
  uint64_t v6 = *(void *)(v0 + 560);
  uint64_t v7 = *(void *)(v0 + 552);
  unint64_t v8 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 352));
  uint64_t v16 = static os_log_type_t.info.getter(v8, v9, v10, v11, v12, v13, v14, v15);
  os_log(_:dso:log:_:_:)(v16, &dword_0, v1, "setting NLOutput success", 24LL, 2LL, &_swiftEmptyArrayStorage);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v18 = *(void *)(v0 + 728);
  uint64_t v19 = *(void *)(v0 + 720);
  uint64_t v20 = *(void *)(v0 + 712);
  uint64_t v21 = *(void *)(v0 + 704);
  uint64_t v35 = *(void *)(v0 + 696);
  uint64_t v36 = *(void *)(v0 + 688);
  unint64_t v22 = *(void *)(v0 + 680);
  uint64_t v37 = *(void *)(v0 + 672);
  uint64_t v38 = *(void *)(v0 + 664);
  uint64_t v39 = *(void *)(v0 + 656);
  uint64_t v40 = *(void *)(v0 + 632);
  uint64_t v41 = *(void *)(v0 + 608);
  uint64_t v42 = *(void *)(v0 + 600);
  uint64_t v43 = *(void *)(v0 + 592);
  uint64_t v44 = *(void *)(v0 + 568);
  int v45 = *(void *)(v0 + 544);
  unint64_t v23 = *(void *)(v0 + 536);
  uint64_t v24 = *(void *)(v0 + 528);
  uint64_t v25 = *(void *)(v0 + 520);
  uint64_t v33 = static os_log_type_t.info.getter(v17, v26, v27, v28, v29, v30, v31, v32);
  os_log(_:dso:log:_:_:)( v33,  &dword_0,  v18,  "unhandled. Reason: .needsInfoDomainFallback, isComplete: true",  61LL,  2LL,  &_swiftEmptyArrayStorage);
  (*(void (**)(uint64_t, void, uint64_t))(v24 + 104))( v23,  enum case for FlowUnhandledReason.needsInfoDomainFallback(_:),  v25);
  static ExecuteResponse.unhandled(reason:isComplete:)(v23, 1LL);
  outlined consume of Data?(v20, v19);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v21, v36);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v22, v38);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v1 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 192));
  uint64_t v2 = *(void *)(v0 + 792);
  uint64_t v3 = *(void *)(v0 + 728);
  uint64_t v4 = static os_log_type_t.error.getter(v1);
  os_log(_:dso:log:_:_:)(v4, &dword_0, v3, "could not set NLContext", 23LL, 2LL, &_swiftEmptyArrayStorage);
  uint64_t v5 = swift_errorRelease(v2);
  uint64_t v6 = *(void *)(v0 + 728);
  uint64_t v7 = *(void *)(v0 + 720);
  unint64_t v8 = *(void *)(v0 + 712);
  unint64_t v9 = *(void *)(v0 + 704);
  unint64_t v23 = *(void *)(v0 + 696);
  uint64_t v24 = *(void *)(v0 + 688);
  uint64_t v10 = *(void *)(v0 + 680);
  uint64_t v25 = *(void *)(v0 + 672);
  uint64_t v26 = *(void *)(v0 + 664);
  uint64_t v27 = *(void *)(v0 + 656);
  uint64_t v28 = *(void *)(v0 + 632);
  uint64_t v29 = *(void *)(v0 + 608);
  uint64_t v30 = *(void *)(v0 + 600);
  uint64_t v31 = *(void *)(v0 + 592);
  uint64_t v32 = *(void *)(v0 + 568);
  uint64_t v33 = *(void *)(v0 + 544);
  uint64_t v11 = *(void *)(v0 + 536);
  uint64_t v12 = *(void *)(v0 + 528);
  os_log_type_t v13 = *(void *)(v0 + 520);
  uint64_t v21 = static os_log_type_t.info.getter(v5, v14, v15, v16, v17, v18, v19, v20);
  os_log(_:dso:log:_:_:)( v21,  &dword_0,  v6,  "unhandled. Reason: .needsInfoDomainFallback, isComplete: true",  61LL,  2LL,  &_swiftEmptyArrayStorage);
  (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))( v11,  enum case for FlowUnhandledReason.needsInfoDomainFallback(_:),  v13);
  static ExecuteResponse.unhandled(reason:isComplete:)(v11, 1LL);
  outlined consume of Data?(v8, v7);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v9, v24);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v10, v26);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v1 = *(void *)(v0 + 592);
  uint64_t v2 = *(void *)(v0 + 584);
  uint64_t v3 = *(void *)(v0 + 576);
  (*(void (**)(void, void))(*(void *)(v0 + 560) + 8LL))(*(void *)(v0 + 568), *(void *)(v0 + 552));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 312));
  uint64_t v4 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 352));
  uint64_t v5 = *(void *)(v0 + 824);
  uint64_t v6 = *(void *)(v0 + 728);
  uint64_t v7 = static os_log_type_t.error.getter(v4);
  os_log(_:dso:log:_:_:)(v7, &dword_0, v6, "could not set NLContext", 23LL, 2LL, &_swiftEmptyArrayStorage);
  unint64_t v8 = swift_errorRelease(v5);
  unint64_t v9 = *(void *)(v0 + 728);
  uint64_t v10 = *(void *)(v0 + 720);
  uint64_t v11 = *(void *)(v0 + 712);
  uint64_t v12 = *(void *)(v0 + 704);
  uint64_t v26 = *(void *)(v0 + 696);
  uint64_t v27 = *(void *)(v0 + 688);
  os_log_type_t v13 = *(void *)(v0 + 680);
  uint64_t v28 = *(void *)(v0 + 672);
  uint64_t v29 = *(void *)(v0 + 664);
  uint64_t v30 = *(void *)(v0 + 656);
  uint64_t v31 = *(void *)(v0 + 632);
  uint64_t v32 = *(void *)(v0 + 608);
  uint64_t v33 = *(void *)(v0 + 600);
  uint64_t v34 = *(void *)(v0 + 592);
  uint64_t v35 = *(void *)(v0 + 568);
  uint64_t v36 = *(void *)(v0 + 544);
  uint64_t v14 = *(void *)(v0 + 536);
  os_log_type_t v15 = *(void *)(v0 + 528);
  uint64_t v16 = *(void *)(v0 + 520);
  uint64_t v24 = static os_log_type_t.info.getter(v8, v17, v18, v19, v20, v21, v22, v23);
  os_log(_:dso:log:_:_:)( v24,  &dword_0,  v9,  "unhandled. Reason: .needsInfoDomainFallback, isComplete: true",  61LL,  2LL,  &_swiftEmptyArrayStorage);
  (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))( v14,  enum case for FlowUnhandledReason.needsInfoDomainFallback(_:),  v16);
  static ExecuteResponse.unhandled(reason:isComplete:)(v14, 1LL);
  outlined consume of Data?(v11, v10);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v12, v27);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v13, v29);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t outlined copy of Data?(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(result, a2);
  }
  return result;
}

uint64_t outlined copy of Data._Representation(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t outlined consume of Data?(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(result, a2);
  }
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t RedirectToServerFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RedirectToServerFlow();
  uint64_t v6 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type RedirectToServerFlow and conformance RedirectToServerFlow,  v5,  (uint64_t (*)(uint64_t))type metadata accessor for RedirectToServerFlow,  (uint64_t)&protocol conformance descriptor for RedirectToServerFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v6);
}

uint64_t TrafficIncidentBaseRCHStrategy.deinit()
{
  return v0;
}

uint64_t TrafficIncidentBaseRCHStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t RedirectToServerFlow.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  type metadata accessor for OS_os_log();
  *(void *)(v1 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000014LL,  0x8000000000095FB0LL);
  return v1;
}

uint64_t RedirectToServerFlow.init()()
{
  *(void *)(v0 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000014LL,  0x8000000000095FB0LL);
  return v0;
}

uint64_t protocol witness for SiriEnvironmentLocating.siriEnvironment.getter in conformance RedirectToServerFlow()
{
  return SiriEnvironmentLocating<>.siriEnvironment.getter();
}

uint64_t protocol witness for SiriEnvironmentLocating.siriEnvironment.setter in conformance RedirectToServerFlow()
{
  return SiriEnvironmentLocating<>.siriEnvironment.setter();
}

void (*protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance RedirectToServerFlow( void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SiriEnvironmentLocating<>.siriEnvironment.modify();
  return protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance RedirectToServerFlow;
}

void protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance RedirectToServerFlow( void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

uint64_t protocol witness for Flow.on(input:) in conformance RedirectToServerFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88LL))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance RedirectToServerFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104LL))();
}

uint64_t protocol witness for Flow.execute() in conformance RedirectToServerFlow(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 96LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance RedirectToServerFlow( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for RedirectToServerFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t type metadata accessor for RedirectToServerFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin20RedirectToServerFlow);
}

uint64_t base witness table accessor for Flow in RedirectToServerFlow(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type RedirectToServerFlow and conformance RedirectToServerFlow,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for RedirectToServerFlow,  (uint64_t)&protocol conformance descriptor for RedirectToServerFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in RedirectToServerFlow( uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type RedirectToServerFlow and conformance RedirectToServerFlow,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for RedirectToServerFlow,  (uint64_t)&protocol conformance descriptor for RedirectToServerFlow);
}

uint64_t lazy protocol witness table accessor for type PommesContext and conformance PommesContext( unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

void static GeoParse.getDomainIntent(parse:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v144 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  __chkstk_darwin();
  unint64_t v135 = (char *)&v127 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v133 = *(void *)(v4 - 8);
  uint64_t v134 = v4;
  __chkstk_darwin();
  id v132 = (char *)&v127 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v140 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v136 = *(void *)(v140 - 8);
  __chkstk_darwin();
  int v131 = (char *)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v139 = type metadata accessor for USOParse(0LL);
  uint64_t v142 = *(void *)(v139 - 8);
  __chkstk_darwin();
  uint64_t v141 = (char *)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v130 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNode(0LL);
  uint64_t v129 = *(void *)(v130 - 8);
  __chkstk_darwin();
  uint64_t v138 = (char *)&v127 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v137 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent(0LL);
  uint64_t v9 = *(void *)(v137 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v127 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NonTerminalIntentNode?);
  __chkstk_darwin();
  os_log_type_t v13 = (char *)&v127 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for NLIntent(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  uint64_t v128 = (char *)&v127 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v143 = (char *)&v127 - v17;
  __chkstk_darwin();
  uint64_t v19 = (char *)&v127 - v18;
  uint64_t v20 = type metadata accessor for Parse(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin();
  unint64_t v23 = (void **)((char *)&v127 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(void **, uint64_t, uint64_t))(v21 + 16))(v23, a1, v20);
  int v24 = (*(uint64_t (**)(void **, uint64_t))(v21 + 88))(v23, v20);
  if (v24 != enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v29 = v14;
    if (v24 == enum case for Parse.pommesResponse(_:))
    {
      (*(void (**)(void **, uint64_t))(v21 + 96))(v23, v20);
      uint64_t v30 = *v23;
      uint64_t v31 = PommesResponse.firstGeoExperience.getter();
      if (!v31)
      {
        int v68 = (_OWORD *)v144;
        *(void *)(v144 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0LL;
        *int v68 = 0u;
        v68[1] = 0u;

        return;
      }

      uint64_t v32 = (void *)v31;
      uint64_t v33 = ((uint64_t (*)(void))GeoExperience.geoClientComponent.getter)();
      char v34 = Apple_Parsec_Siri_V2alpha_GeoClientComponent.hasLocationSearchNode.getter(v33);
      uint64_t v35 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
      uint64_t v36 = v137;
      uint64_t v37 = v35(v11, v137);
      if ((v34 & 1) == 0)
      {

LABEL_25:
        uint64_t v76 = (_OWORD *)v144;
        *(void *)(v144 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0LL;
        *uint64_t v76 = 0u;
        v76[1] = 0u;
        return;
      }

      uint64_t v38 = GeoExperience.geoClientComponent.getter(v37);
      uint64_t v39 = v138;
      Apple_Parsec_Siri_V2alpha_GeoClientComponent.locationSearchNode.getter(v38);
      v35(v11, v36);
      uint64_t v40 = type metadata accessor for LocationSearchIntentBuilder();
      swift_allocObject(v40, 120LL, 7LL);
      uint64_t v41 = LocationSearchIntentBuilder.init()();
      uint64_t v42 = (*(uint64_t (**)(char *))(*(void *)v41 + 376LL))(v39);
      uint64_t v43 = swift_release(v41);
      uint64_t v44 = v143;
      (*(void (**)(uint64_t))(*(void *)v42 + 456LL))(v43);
      swift_release(v42);
      int v45 = v128;
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v128, v44, v29);
      uint64_t v46 = type metadata accessor for LocationSearchIntent(0LL);
      uint64_t v47 = swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
      uint64_t v48 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
      if (one-time initialization token for domainNode != -1) {
        swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
      }
      uint64_t v49 = static LocationSearchIntent.domainNode;
      *(void *)(v47 + v48) = static LocationSearchIntent.domainNode;
      (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))( v47 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent,  v45,  v29);
      uint64_t v50 = (uint64_t *)v144;
      *(void *)(v144 + 24) = v46;
      v50[4] = (uint64_t)&protocol witness table for LocationSearchIntent;
      swift_retain(v49);

      *uint64_t v50 = v47;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v143, v29);
      (*(void (**)(char *, uint64_t))(v129 + 8))(v138, v130);
      return;
    }

    if (v24 != enum case for Parse.uso(_:))
    {
      unint64_t v67 = (_OWORD *)v144;
      *(void *)(v144 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0LL;
      *unint64_t v67 = 0u;
      v67[1] = 0u;
      (*(void (**)(void **, uint64_t))(v21 + 8))(v23, v20);
      return;
    }

    (*(void (**)(void **, uint64_t))(v21 + 96))(v23, v20);
    unint64_t v55 = v23;
    uint64_t v56 = v139;
    uint64_t v57 = (*(uint64_t (**)(char *, void **, uint64_t))(v142 + 32))(v141, v55, v139);
    uint64_t v58 = v132;
    uint64_t v59 = USOParse.userParse.getter(v57);
    uint64_t v60 = Siri_Nlu_External_UserParse.userDialogActs.getter(v59);
    (*(void (**)(char *, uint64_t))(v133 + 8))(v58, v134);
    if (*(void *)(v60 + 16))
    {
      uint64_t v62 = (uint64_t)v135;
      uint64_t v61 = v136;
      uint64_t v63 = v140;
      (*(void (**)(char *, unint64_t, uint64_t))(v136 + 16))( v135,  v60 + ((*(unsigned __int8 *)(v136 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v136 + 80)),  v140);
      uint64_t v64 = 0LL;
      uint64_t v65 = v15;
      uint64_t v66 = v143;
    }

    else
    {
      uint64_t v64 = 1LL;
      uint64_t v65 = v15;
      uint64_t v66 = v143;
      uint64_t v63 = v140;
      uint64_t v62 = (uint64_t)v135;
      uint64_t v61 = v136;
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56))(v62, v64, 1LL, v63);
    swift_bridgeObjectRelease(v60);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v62, 1LL, v63) == 1)
    {
      (*(void (**)(char *, uint64_t))(v142 + 8))(v141, v56);
      outlined destroy of (label: String?, value: Any)?( v62,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      uint64_t v77 = v144;
      *(_OWORD *)uint64_t v144 = 0u;
      *(_OWORD *)(v77 + 16) = 0u;
      *(void *)(v77 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0LL;
      return;
    }

    uint64_t v78 = v61;
    uint64_t v79 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 32);
    unint64_t v80 = v131;
    v79(v131, v62, v63);
    uint64_t v81 = type metadata accessor for LocationSearchIntentBuilder();
    swift_allocObject(v81, 120LL, 7LL);
    uint64_t v82 = LocationSearchIntentBuilder.init()();
    uint64_t v83 = swift_retain(v82);
    if ((Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v83) & 1) != 0)
    {
      uint64_t v84 = (*(uint64_t (**)(uint64_t))(*(void *)v82 + 408LL))(2LL);
    }

    else if ((Siri_Nlu_External_UserDialogAct.hasAccepted.getter() & 1) != 0)
    {
      uint64_t v84 = (*(uint64_t (**)(void))(*(void *)v82 + 408LL))(0LL);
    }

    else
    {
      if ((Siri_Nlu_External_UserDialogAct.hasRejected.getter() & 1) == 0)
      {
        uint64_t v86 = swift_release(v82);
LABEL_36:
        uint64_t v87 = (uint64_t)v80;
        uint64_t v88 = Siri_Nlu_External_UserDialogAct.getTasks()(v86);
        uint64_t v89 = v88;
        if ((unint64_t)v88 >> 62)
        {
          if (v88 >= 0) {
            v88 &= 0xFFFFFFFFFFFFFF8uLL;
          }
          if (_CocoaArrayWrapper.endIndex.getter(v88))
          {
LABEL_38:
            if ((v89 & 0xC000000000000001LL) != 0)
            {
              uint64_t v56 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v89);
            }

            else
            {
              if (!*(void *)((char *)&dword_10 + (v89 & 0xFFFFFFFFFFFFF8LL)))
              {
                __break(1u);
LABEL_70:
                swift_once( &one-time initialization token for domainNode,  one-time initialization function for domainNode);
LABEL_61:
                uint64_t v119 = static LocationSearchIntent.domainNode;
                *(void *)(v89 + v6__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = static LocationSearchIntent.domainNode;
                (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))( v89 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent,  v66,  v14);
                uint64_t v120 = (uint64_t *)v144;
                *(void *)(v144 + 24) = v87;
                v120[4] = (uint64_t)&protocol witness table for LocationSearchIntent;
                swift_retain(v119);
                swift_release(v82);
                swift_release(v56);
                *uint64_t v120 = v89;
                outlined destroy of (label: String?, value: Any)?( (uint64_t)v148,  &demangling cache variable for type metadata for Any?);
                (*(void (**)(char *, uint64_t))(v78 + 8))(v131, v140);
                (*(void (**)(char *, uint64_t))(v142 + 8))(v141, v139);
                return;
              }

              uint64_t v56 = *(void *)(v89 + 32);
              swift_retain(v56);
            }

            swift_bridgeObjectRelease(v89);
            uint64_t v90 = swift_retain(v56);
            static UsoTask_CodegenConverter.convert(task:)(v148, v90);
            swift_release(v56);
            outlined init with copy of Any?((uint64_t)v148, (uint64_t)v146);
            if (v147)
            {
              uint64_t v91 = type metadata accessor for UsoTask_noVerb_common_Person(0LL);
              if ((swift_dynamicCast(&v145, v146, (char *)&type metadata for Any + 8, v91, 6LL) & 1) != 0)
              {
                uint64_t v92 = v145;
                uint64_t v93 = swift_retain(v145);
                dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter(v146, v93);
                uint64_t v94 = swift_release(v92);
                uint64_t v95 = v146[0];
                if (v146[0])
                {
                  uint64_t v96 = dispatch thunk of UsoEntity_common_Person.name.getter(v94);
                  uint64_t v98 = v97;
                  swift_release(v95);
                  if (v98)
                  {
                    uint64_t v99 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v82 + 440LL))(v96, v98);
                    swift_bridgeObjectRelease(v98);
                    swift_release(v82);
                    uint64_t v82 = v99;
                  }
                }

                uint64_t v100 = swift_retain(v92);
                dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter(v146, v100);
                uint64_t v101 = swift_release(v92);
                uint64_t v102 = v146[0];
                if (v146[0]
                  && (uint64_t v103 = dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter(v101),
                      uint64_t v104 = swift_release(v102),
                      v103)
                  && (uint64_t v105 = dispatch thunk of UsoEntity_common_PersonRelationship.relationshipType.getter(v104),
                      uint64_t v107 = v106,
                      swift_release(v103),
                      v107))
                {
                  uint64_t v108 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v82 + 432LL))(v105, v107);
                  swift_bridgeObjectRelease(v107);
                  swift_release(v82);
                  swift_release(v92);
                  uint64_t v82 = v108;
                }

                else
                {
                  swift_release(v92);
                }
              }
            }

            else
            {
              outlined destroy of (label: String?, value: Any)?( (uint64_t)v146,  &demangling cache variable for type metadata for Any?);
            }

            outlined init with copy of Any?((uint64_t)v148, (uint64_t)v146);
            if (v147)
            {
              uint64_t v109 = type metadata accessor for UsoTask_noVerb_common_PersonRelationship(0LL);
              uint64_t v110 = swift_dynamicCast(&v145, v146, (char *)&type metadata for Any + 8, v109, 6LL);
              if ((v110 & 1) != 0)
              {
                uint64_t v111 = v145;
                uint64_t v112 = swift_retain(v145);
                dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter(v146, v112);
                uint64_t v113 = swift_release(v111);
                uint64_t v114 = v146[0];
                if (v146[0]
                  && (uint64_t v115 = dispatch thunk of UsoEntity_common_PersonRelationship.relationshipType.getter(v113),
                      uint64_t v117 = v116,
                      swift_release(v114),
                      v117))
                {
                  uint64_t v118 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v82 + 432LL))(v115, v117);
                  swift_bridgeObjectRelease(v117);
                  swift_release(v82);
                  uint64_t v110 = swift_release(v111);
                  uint64_t v82 = v118;
                }

                else
                {
                  uint64_t v110 = swift_release(v111);
                }
              }
            }

            else
            {
              uint64_t v110 = outlined destroy of (label: String?, value: Any)?( (uint64_t)v146,  &demangling cache variable for type metadata for Any?);
            }

            uint64_t v66 = v143;
            (*(void (**)(uint64_t))(*(void *)v82 + 456LL))(v110);
            uint64_t v87 = type metadata accessor for LocationSearchIntent(0LL);
            uint64_t v89 = swift_allocObject(v87, *(unsigned int *)(v87 + 48), *(unsigned __int16 *)(v87 + 52));
            uint64_t v62 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
            if (one-time initialization token for domainNode == -1) {
              goto LABEL_61;
            }
            goto LABEL_70;
          }
        }

        else if (*(void *)((char *)&dword_10 + (v88 & 0xFFFFFFFFFFFFF8LL)))
        {
          goto LABEL_38;
        }

        uint64_t v121 = swift_bridgeObjectRelease(v89);
        (*(void (**)(uint64_t))(*(void *)v82 + 456LL))(v121);
        uint64_t v122 = type metadata accessor for LocationSearchIntent(0LL);
        uint64_t v123 = swift_allocObject(v122, *(unsigned int *)(v122 + 48), *(unsigned __int16 *)(v122 + 52));
        uint64_t v124 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
        if (one-time initialization token for domainNode != -1) {
          swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
        }
        uint64_t v125 = static LocationSearchIntent.domainNode;
        *(void *)(v123 + v124) = static LocationSearchIntent.domainNode;
        (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))( v123 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent,  v66,  v14);
        uint64_t v126 = (uint64_t *)v144;
        *(void *)(v144 + 24) = v122;
        v126[4] = (uint64_t)&protocol witness table for LocationSearchIntent;
        swift_retain(v125);
        swift_release(v82);
        *uint64_t v126 = v123;
        (*(void (**)(char *, uint64_t))(v78 + 8))(v131, v140);
        (*(void (**)(char *, uint64_t))(v142 + 8))(v141, v56);
        return;
      }

      uint64_t v84 = (*(uint64_t (**)(uint64_t))(*(void *)v82 + 408LL))(1LL);
    }

    uint64_t v85 = v84;
    uint64_t v86 = swift_release_n(v82, 2LL);
    uint64_t v82 = v85;
    goto LABEL_36;
  }

  (*(void (**)(void **, uint64_t))(v21 + 96))(v23, v20);
  uint64_t v25 = *(uint64_t (**)(char *, void **, uint64_t))(v15 + 32);
  uint64_t v26 = v25(v19, v23, v14);
  NLIntent.domainNode.getter(v26);
  uint64_t v27 = type metadata accessor for NonTerminalIntentNode(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v13, 1LL, v27) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v13,  &demangling cache variable for type metadata for NonTerminalIntentNode?);
LABEL_24:
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
    goto LABEL_25;
  }

  uint64_t v51 = NonTerminalIntentNode.ontologyNodeName.getter();
  uint64_t v53 = v52;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v27);
  uint64_t v54 = v143;
  if (!v53) {
    goto LABEL_24;
  }
  if (v51 == 0x6E6F697461636F6CLL && v53 == 0xEE00686372616553LL)
  {
    swift_bridgeObjectRelease(0xEE00686372616553LL);
  }

  else
  {
    char v69 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v53, 0x6E6F697461636F6CLL, 0xEE00686372616553LL, 0LL);
    swift_bridgeObjectRelease(v53);
    if ((v69 & 1) == 0) {
      goto LABEL_24;
    }
  }

  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v54, v19, v14);
  uint64_t v70 = type metadata accessor for LocationSearchIntent(0LL);
  uint64_t v71 = swift_allocObject(v70, *(unsigned int *)(v70 + 48), *(unsigned __int16 *)(v70 + 52));
  uint64_t v72 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
  if (one-time initialization token for domainNode != -1) {
    swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
  }
  uint64_t v73 = static LocationSearchIntent.domainNode;
  *(void *)(v71 + v7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = static LocationSearchIntent.domainNode;
  v25((char *)(v71 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent), (void **)v54, v14);
  uint64_t v74 = (uint64_t *)v144;
  *(void *)(v144 + 24) = v70;
  v74[4] = (uint64_t)&protocol witness table for LocationSearchIntent;
  *uint64_t v74 = v71;
  uint64_t v75 = *(void (**)(char *, uint64_t))(v15 + 8);
  swift_retain(v73);
  v75(v19, v14);
}

GeoFlowDelegatePlugin::GeoIntentType_optional __swiftcall GeoIntentType.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of GeoIntentType.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    v4.value = GeoFlowDelegatePlugin_GeoIntentType_locationSearch;
  }
  else {
    v4.value = GeoFlowDelegatePlugin_GeoIntentType_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t GeoIntentType.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x6E6F697461636F6CLL;
  }
  else {
    return 0x6165536C61636F6CLL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GeoIntentType( char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = GeoIntentType.rawValue.getter(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = GeoIntentType.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GeoIntentType()
{
  char v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = GeoIntentType.rawValue.getter(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GeoIntentType(uint64_t a1)
{
  uint64_t v3 = GeoIntentType.rawValue.getter(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GeoIntentType(uint64_t a1)
{
  char v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = GeoIntentType.rawValue.getter(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GeoIntentType@<X0>( uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._uint64_t countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of GeoIntentType.init(rawValue:),  v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GeoIntentType@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = GeoIntentType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t static GeoParse.getDomainIntent(input:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Parse(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin();
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Input.parse.getter(v4);
  static GeoParse.getDomainIntent(parse:)((uint64_t)v6, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t GeoParse.deinit()
{
  return v0;
}

uint64_t GeoParse.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t GeoParse.__allocating_init()()
{
  return swift_allocObject(v0, 16LL, 7LL);
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type GeoIntentType and conformance GeoIntentType()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoIntentType and conformance GeoIntentType;
  if (!lazy protocol witness table cache variable for type GeoIntentType and conformance GeoIntentType)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoIntentType, &type metadata for GeoIntentType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoIntentType and conformance GeoIntentType);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for GeoIntentType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for GeoIntentType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_2BB70 + 4 * byte_960E5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2BBA4 + 4 * asc_960E0[v4]))();
}

uint64_t sub_2BBA4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2BBAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x2BBB4LL);
  }
  return result;
}

uint64_t sub_2BBC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x2BBC8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_2BBCC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2BBD4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for GeoIntentType(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GeoIntentType()
{
  return &type metadata for GeoIntentType;
}

uint64_t type metadata accessor for GeoParse()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin8GeoParse);
}

uint64_t ShareETAContactDisambiguationStrategy.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 32, a1);
}

id ShareETAContactDisambiguationStrategy.skeletonPerson.getter()
{
  return *(id *)(v0 + 72);
}

uint64_t ShareETAContactDisambiguationStrategy.isPOMMES.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t ShareETAContactDisambiguationStrategy.isUSO.getter()
{
  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t ShareETAContactDisambiguationStrategy.isUSO.setter(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 81, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 81) = a1;
  return result;
}

uint64_t (*ShareETAContactDisambiguationStrategy.isUSO.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t ShareETAContactDisambiguationStrategy.disambiguationItems.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 88));
}

uint64_t ShareETAContactDisambiguationStrategy.disambiguationItems.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 88);
  *(void *)(v1 + 88) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*ShareETAContactDisambiguationStrategy.disambiguationItems.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t ShareETAContactDisambiguationStrategy.weightedPromptResponseTargets.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 96));
}

BOOL static ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError.__derived_enum_equals(_:_:)( int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError.hash(into:)( uint64_t a1, char a2)
{
}

Swift::Int ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError.hashValue.getter( char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t ShareETAContactDisambiguationStrategy.__allocating_init(isPommes:isUSO:skeletonPerson:flowHelper:catService:)( char a1, char a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v11 = swift_allocObject(v5, 104LL, 7LL);
  uint64_t v12 = a4[3];
  uint64_t v13 = a4[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a4, v12);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v16 + 16))(v15);
  uint64_t v17 = specialized ShareETAContactDisambiguationStrategy.init(isPommes:isUSO:skeletonPerson:flowHelper:catService:)( a1,  a2,  a3,  (uint64_t)v15,  a5,  v11,  v12,  v13);
  __swift_destroy_boxed_opaque_existential_0Tm(a4);
  return v17;
}

uint64_t ShareETAContactDisambiguationStrategy.init(isPommes:isUSO:skeletonPerson:flowHelper:catService:)( char a1, char a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v11 = a4[3];
  uint64_t v12 = a4[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a4, v11);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v15 + 16))(v14);
  uint64_t v16 = specialized ShareETAContactDisambiguationStrategy.init(isPommes:isUSO:skeletonPerson:flowHelper:catService:)( a1,  a2,  a3,  (uint64_t)v14,  a5,  v5,  v11,  v12);
  __swift_destroy_boxed_opaque_existential_0Tm(a4);
  return v16;
}

uint64_t ShareETAContactDisambiguationStrategy.actionForInput(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v159 = a2;
  v160 = (os_log_s *)type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v155 = *((void *)v160 - 1);
  __chkstk_darwin();
  v152 = (char *)&v140 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v153 = (char *)&v140 - v5;
  uint64_t v6 = type metadata accessor for USOParse(0LL);
  uint64_t v148 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v145 = (char *)&v140 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v149 = (char *)&v140 - v8;
  uint64_t v9 = type metadata accessor for NLIntent(0LL);
  uint64_t v157 = *(void *)(v9 - 8);
  uint64_t v158 = v9;
  __chkstk_darwin();
  uint64_t v154 = (char *)&v140 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v156 = (char *)&v140 - v11;
  uint64_t v12 = type metadata accessor for Parse(0LL);
  uint64_t v162 = *(void *)(v12 - 8);
  uint64_t v163 = v12;
  __chkstk_darwin();
  uint64_t v161 = (void **)((char *)&v140 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v15 = (char *)&v140 - v14;
  uint64_t v16 = type metadata accessor for Input(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin();
  uint64_t v147 = (char *)&v140 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  id v151 = (char *)&v140 - v19;
  __chkstk_darwin();
  uint64_t v21 = (char *)&v140 - v20;
  uint64_t v144 = v2;
  uint64_t v22 = *(os_log_s **)(v2 + 16);
  unint64_t v150 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v23 = v150((char *)&v140 - v20, a1, v16);
  os_log_type_t v24 = static os_log_type_t.default.getter(v23);
  BOOL v25 = os_log_type_enabled(v22, v24);
  uint64_t v146 = v15;
  if (v25)
  {
    uint64_t v142 = v16;
    uint64_t v26 = swift_slowAlloc(12LL, -1LL);
    uint64_t v141 = a1;
    uint64_t v27 = (uint8_t *)v26;
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    uint64_t v143 = v6;
    uint64_t v29 = v28;
    v167[0] = v28;
    *(_DWORD *)uint64_t v27 = 136315138;
    Input.parse.getter(v28);
    uint64_t v30 = String.init<A>(describing:)(v15, v163);
    uint64_t v31 = v22;
    unint64_t v33 = v32;
    *(void *)&__int128 v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, (char *)&v165 + 8);
    unint64_t v34 = v33;
    uint64_t v22 = v31;
    uint64_t v16 = v142;
    swift_bridgeObjectRelease(v34);
    uint64_t v35 = *(void (**)(char *, uint64_t))(v17 + 8);
    v35(v21, v16);
    _os_log_impl(&dword_0, v31, v24, "actionForInput %s", v27, 0xCu);
    swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v36 = v29;
    uint64_t v6 = v143;
    swift_slowDealloc(v36, -1LL, -1LL);
    uint64_t v37 = v27;
    a1 = v141;
    uint64_t v38 = swift_slowDealloc(v37, -1LL, -1LL);
  }

  else
  {
    uint64_t v35 = *(void (**)(char *, uint64_t))(v17 + 8);
    uint64_t v38 = ((uint64_t (*)(char *, uint64_t))v35)(v21, v16);
  }

  uint64_t v39 = v161;
  Input.parse.getter(v38);
  uint64_t v41 = v162;
  uint64_t v40 = v163;
  uint64_t v42 = (*(uint64_t (**)(void **, uint64_t))(v162 + 88))(v39, v163);
  if ((_DWORD)v42 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(void **, uint64_t))(v41 + 96))(v39, v40);
    uint64_t v51 = v156;
    uint64_t v50 = v157;
    uint64_t v52 = *(void (**)(char *, void **, uint64_t))(v157 + 32);
    uint64_t v53 = v158;
    v52(v156, v39, v158);
    uint64_t v54 = v154;
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v154, v51, v53);
    uint64_t v55 = type metadata accessor for LocationSearchIntent(0LL);
    uint64_t v56 = swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
    uint64_t v57 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
    if (one-time initialization token for domainNode != -1) {
      swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
    }
    uint64_t v58 = static LocationSearchIntent.domainNode;
    *(void *)(v56 + v5__swift_destroy_boxed_opaque_existential_0Tm(v0 + 7) = static LocationSearchIntent.domainNode;
    v52((char *)(v56 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent), (void **)v54, v53);
    v167[0] = v56;
    uint64_t v59 = one-time initialization token for confirmationNode;
    swift_retain(v58);
    if (v59 != -1) {
      swift_once( &one-time initialization token for confirmationNode,  one-time initialization function for confirmationNode);
    }
    uint64_t v60 = static LocationSearchIntent.confirmationNode;
    uint64_t v61 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent,  type metadata accessor for LocationSearchIntent,  (uint64_t)&protocol conformance descriptor for LocationSearchIntent);
    IntentNodeTraversable.value<A>(forNode:)(&v165, v60, v55, v61);
    swift_release(v56);
    __asm { BR              X10 }
  }

  if ((_DWORD)v42 == enum case for Parse.directInvocation(_:))
  {
    uint64_t v62 = a1;
    uint64_t v63 = v16;
    (*(void (**)(void **, uint64_t))(v41 + 96))(v39, v40);
    uint64_t v64 = v153;
    uint64_t v65 = (*(uint64_t (**)(char *, void **, os_log_s *))(v155 + 32))(v153, v39, v160);
    uint64_t v66 = Parse.DirectInvocation.identifier.getter(v65);
    uint64_t v68 = v67;
    if (v66 == 0xD00000000000002CLL && v67 == 0x800000000009B750LL)
    {
      char v69 = v22;
      swift_bridgeObjectRelease(0x800000000009B750LL);
      uint64_t v70 = v155;
      uint64_t v71 = v152;
      uint64_t v72 = (*(uint64_t (**)(char *, char *, os_log_s *))(v155 + 16))(v152, v64, v160);
    }

    else
    {
      char v69 = v22;
      char v77 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v67, 0xD00000000000002CLL, 0x800000000009B750LL, 0LL);
      swift_bridgeObjectRelease(v68);
      uint64_t v70 = v155;
      uint64_t v71 = v152;
      uint64_t v72 = (*(uint64_t (**)(char *, char *, os_log_s *))(v155 + 16))(v152, v64, v160);
      if ((v77 & 1) == 0)
      {
        uint64_t v81 = *(uint64_t (**)(char *, os_log_s *))(v70 + 8);
        uint64_t v82 = v81(v71, v160);
        goto LABEL_23;
      }
    }

    uint64_t v78 = Parse.DirectInvocation.userData.getter(v72);
    uint64_t v79 = v71;
    uint64_t v80 = v78;
    uint64_t v81 = *(uint64_t (**)(char *, os_log_s *))(v70 + 8);
    v81(v79, v160);
    uint64_t v82 = swift_bridgeObjectRelease(v80);
    if (v80)
    {
      static ActionForInput.handle()(v82);
      return v81(v64, v160);
    }

LABEL_23:
    os_log_type_t v99 = static os_log_type_t.info.getter(v82, v83, v84, v85, v86, v87, v88, v89);
    uint64_t v100 = v151;
    v150(v151, v62, v63);
    os_log_type_t v101 = v99;
    if (os_log_type_enabled(v69, v99))
    {
      uint64_t v102 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v103 = swift_slowAlloc(32LL, -1LL);
      v167[0] = v103;
      *(_DWORD *)uint64_t v102 = 136315138;
      uint64_t v104 = Input.description.getter();
      unint64_t v106 = v105;
      *(void *)&__int128 v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v105, v167);
      uint64_t v64 = v153;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, (char *)&v165 + 8);
      swift_bridgeObjectRelease(v106);
      v35(v151, v63);
      _os_log_impl(&dword_0, v69, v101, "Received invalid directInvocation type for ShareETA %s.", v102, 0xCu);
      swift_arrayDestroy(v103, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v103, -1LL, -1LL);
      uint64_t v107 = swift_slowDealloc(v102, -1LL, -1LL);
    }

    else
    {
      uint64_t v107 = ((uint64_t (*)(char *, uint64_t))v35)(v100, v63);
    }

    static ActionForInput.ignore()(v107);
    return v81(v64, v160);
  }

  if ((_DWORD)v42 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(void **, uint64_t))(v41 + 96))(v39, v40);
    uint64_t v73 = *v39;
    uint64_t v74 = type metadata accessor for LocationSearchIntent(0LL);
    swift_allocObject(v74, *(unsigned int *)(v74 + 48), *(unsigned __int16 *)(v74 + 52));
    uint64_t v75 = LocationSearchIntent.init(from:)(v73);
    char v76 = (*(uint64_t (**)(uint64_t))(*(void *)v75 + 152LL))(v75);
    swift_release(v75);
    __asm { BR              X10 }
  }

  if ((_DWORD)v42 == enum case for Parse.uso(_:))
  {
    (*(void (**)(void **, uint64_t))(v41 + 96))(v39, v40);
    uint64_t v90 = v41;
    uint64_t v91 = v148;
    (*(void (**)(char *, void **, uint64_t))(v148 + 32))(v149, v39, v6);
    uint64_t v92 = type metadata accessor for GeoParse();
    uint64_t v93 = (uint64_t)v146;
    Input.parse.getter(v92);
    static GeoParse.getDomainIntent(parse:)(v93, (uint64_t)&v165);
    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v93, v40);
    if (v166)
    {
      outlined init with take of CATType(&v165, (uint64_t)v167);
      outlined init with copy of DeviceState((uint64_t)v167, (uint64_t)&v165);
      uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeoIntent);
      uint64_t v95 = type metadata accessor for LocationSearchIntent(0LL);
      uint64_t v96 = swift_dynamicCast(&v164, &v165, v94, v95, 7LL);
      uint64_t v97 = v164;
      char v98 = (*(uint64_t (**)(uint64_t))(*(void *)v164 + 152LL))(v96);
      swift_release(v97);
      __asm { BR              X10 }
    }

    uint64_t v121 = v22;
    uint64_t v122 = outlined destroy of (label: String?, value: Any)?( (uint64_t)&v165,  &demangling cache variable for type metadata for GeoIntent?);
    os_log_type_t v130 = static os_log_type_t.info.getter(v122, v123, v124, v125, v126, v127, v128, v129);
    int v131 = v145;
    (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v145, v149, v6);
    os_log_type_t v132 = v130;
    if (os_log_type_enabled(v22, v130))
    {
      uint64_t v133 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v134 = swift_slowAlloc(32LL, -1LL);
      v167[0] = v134;
      *(_DWORD *)uint64_t v133 = 136315138;
      uint64_t v135 = USOParse.debugDescription.getter();
      unint64_t v137 = v136;
      *(void *)&__int128 v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v135, v136, v167);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, (char *)&v165 + 8);
      swift_bridgeObjectRelease(v137);
      uint64_t v138 = *(void (**)(char *, uint64_t))(v148 + 8);
      v138(v131, v6);
      _os_log_impl(&dword_0, v121, v132, "SiriGeo received a USO parse it doesn't support %s.", v133, 0xCu);
      swift_arrayDestroy(v134, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v134, -1LL, -1LL);
      uint64_t v139 = swift_slowDealloc(v133, -1LL, -1LL);
    }

    else
    {
      uint64_t v138 = *(void (**)(char *, uint64_t))(v91 + 8);
      uint64_t v139 = ((uint64_t (*)(char *, uint64_t))v138)(v131, v6);
    }

    static ActionForInput.ignore()(v139);
    return ((uint64_t (*)(char *, uint64_t))v138)(v149, v6);
  }

  else
  {
    uint64_t v109 = v16;
    os_log_type_t v110 = static os_log_type_t.info.getter(v42, v43, v44, v45, v46, v47, v48, v49);
    uint64_t v111 = v147;
    v150(v147, a1, v109);
    os_log_type_t v112 = v110;
    if (os_log_type_enabled(v22, v110))
    {
      uint64_t v113 = v40;
      uint64_t v114 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v115 = swift_slowAlloc(32LL, -1LL);
      v167[0] = v115;
      v160 = v22;
      *(_DWORD *)uint64_t v114 = 136315138;
      uint64_t v116 = Input.description.getter();
      unint64_t v118 = v117;
      *(void *)&__int128 v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v116, v117, v167);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, (char *)&v165 + 8);
      unint64_t v119 = v118;
      uint64_t v40 = v113;
      uint64_t v39 = v161;
      swift_bridgeObjectRelease(v119);
      v35(v111, v109);
      _os_log_impl(&dword_0, v160, v112, "SiriGeo received unsupported parse type %s.", v114, 0xCu);
      swift_arrayDestroy(v115, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v115, -1LL, -1LL);
      uint64_t v120 = swift_slowDealloc(v114, -1LL, -1LL);
    }

    else
    {
      uint64_t v120 = ((uint64_t (*)(char *, uint64_t))v35)(v111, v109);
    }

    static ActionForInput.ignore()(v120);
    return (*(uint64_t (**)(void **, uint64_t))(v162 + 8))(v39, v40);
  }

  __break(1u);
LABEL_24:
  BOOL v25 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v25,  1092LL,  0);
  __break(1u);
  return result;
}

  v408 = v80 & 0xC000000000000001LL;
  v406 = v90;
  if ((v80 & 0xC000000000000001LL) != 0)
  {
    uint64_t v92 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v80);
  }

  else
  {
    uint64_t v91 = *(void *)(v90 + 16);
    if (!v91)
    {
      __break(1u);
LABEL_218:
      __break(1u);
      goto LABEL_219;
    }

    uint64_t v92 = (char *)*(id *)(v80 + 32);
  }

  uint64_t v93 = v92;
  uint64_t v94 = INPerson.encodeBase64.getter(v92);
  uint64_t v96 = v95;
  if ((uint8_t *)v94 == v67 && v95 == v89)
  {
    swift_bridgeObjectRelease(v80);
    uint64_t v97 = swift_bridgeObjectRelease_n(v89, 2LL);
    goto LABEL_35;
  }

  char v98 = _stringCompareWithSmolCheck(_:_:expecting:)(v94, v95, v67, v89, 0LL);
  swift_bridgeObjectRelease(v96);
  if ((v98 & 1) != 0)
  {
    swift_bridgeObjectRelease(v89);
    uint64_t v97 = swift_bridgeObjectRelease(v80);
    goto LABEL_35;
  }

  if (v69 == (_BYTE *)&dword_0 + 1)
  {
LABEL_49:
    swift_bridgeObjectRelease(v89);

    swift_bridgeObjectRelease(v80);
    uint64_t v50 = (uint64_t)v411;
    uint64_t v67 = v407;
    char v69 = (_BYTE *)&unk_D2000;
    goto LABEL_31;
  }

  uint64_t v50 = 5LL;
  while (1)
  {
    uint64_t v115 = (char *)(v50 - 4);
    if (v408)
    {
      uint64_t v116 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v50 - 4, v80);
      goto LABEL_44;
    }

    unint64_t v118 = *(char **)(v406 + 16);
    if (v115 >= v118)
    {
      __break(1u);
LABEL_225:
      __break(1u);
      goto LABEL_226;
    }

    uint64_t v116 = (char *)*(id *)(v80 + 8 * v50);
LABEL_44:
    uint64_t v93 = v116;
    uint64_t v40 = v50 - 3;
    if (__OFADD__(v115, 1LL)) {
      goto LABEL_210;
    }
    unint64_t v119 = INPerson.encodeBase64.getter(v116);
    uint64_t v121 = v120;
    if ((uint8_t *)v119 == v67 && v120 == v89)
    {
      swift_bridgeObjectRelease(v80);
      uint64_t v97 = swift_bridgeObjectRelease_n(v89, 2LL);
      uint64_t v50 = (uint64_t)v411;
      goto LABEL_35;
    }

    char v98 = _stringCompareWithSmolCheck(_:_:expecting:)(v119, v120, v67, v89, 0LL);
    swift_bridgeObjectRelease(v121);
    if ((v98 & 1) != 0) {
      break;
    }

    ++v50;
  }

  swift_bridgeObjectRelease(v89);
  uint64_t v97 = swift_bridgeObjectRelease(v80);
  uint64_t v50 = (uint64_t)v411;
LABEL_35:
  os_log_type_t v99 = static os_log_type_t.default.getter(v97);
  if (os_log_type_enabled((os_log_t)v50, v99))
  {
    uint64_t v100 = v93;
    os_log_type_t v101 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v102 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)os_log_type_t v101 = 136315138;
    v415 = v101 + 4;
    v416[0] = v102;
    uint64_t v103 = v100;
    uint64_t v104 = [v103 description];
    unint64_t v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
    uint64_t v107 = v106;

    v417 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v107, v416);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v417, v418);

    swift_bridgeObjectRelease(v107);
    _os_log_impl(&dword_0, v411, v99, "chosen item %s", v101, 0xCu);
    swift_arrayDestroy(v102, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v102, -1LL, -1LL);
    swift_slowDealloc(v101, -1LL, -1LL);
  }

  (*(void (**)(void))(class metadata base offset for ShareETAFlowDelegate + *v409 + 104))(0LL);
  uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v109 = swift_allocObject(v108, 40LL, 7LL);
  *(_OWORD *)(v109 + 16) = xmmword_95900;
  *(void *)(v109 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v93;
  v416[0] = v109;
  specialized Array._endMutation()(v109);
  os_log_type_t v110 = v416[0];
  uint64_t v111 = objc_allocWithZone(&OBJC_CLASS___INShareETAIntent);
  type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
  os_log_type_t v112 = v93;
  uint64_t v113 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v110);
  uint64_t v67 = (uint8_t *)[v111 initWithRecipients:v113];

  uint64_t v114 = v422;
LABEL_150:
  swift_release(v114);
  return v67;
}

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8LL));
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for SAAceView,  &OBJC_CLASS___SAAceView_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

uint64_t ShareETAContactDisambiguationStrategy.parseDisambiguationResponse(input:paginatedItems:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[35] = a3;
  v4[36] = v3;
  v4[33] = a1;
  v4[34] = a2;
  uint64_t v5 = type metadata accessor for Parse.DirectInvocation(0LL);
  v4[37] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[38] = v6;
  v4[39] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Google_Protobuf_StringValue(0LL);
  _BYTE v4[40] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[41] = v8;
  v4[42] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier(0LL);
  v4[43] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[44] = v10;
  v4[45] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  v4[46] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v4[47] = v12;
  v4[48] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Siri_Nlu_External_UserStatedTask(0LL);
  v4[49] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v4[50] = v14;
  v4[51] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  v4[52] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v4[53] = v16;
  v4[54] = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v4[55] = swift_task_alloc((*(void *)(*(void *)(v17 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
  v4[56] = swift_task_alloc((*(void *)(*(void *)(v18 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for USOParse(0LL);
  v4[57] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v4[58] = v20;
  unint64_t v21 = (*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[59] = swift_task_alloc(v21);
  v4[60] = swift_task_alloc(v21);
  uint64_t v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNode(0LL);
  v4[61] = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  v4[62] = v23;
  v4[63] = swift_task_alloc((*(void *)(v23 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent(0LL);
  v4[64] = v24;
  uint64_t v25 = *(void *)(v24 - 8);
  v4[65] = v25;
  v4[66] = swift_task_alloc((*(void *)(v25 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INPerson>);
  v4[67] = v26;
  uint64_t v27 = *(void *)(v26 - 8);
  v4[68] = v27;
  unint64_t v28 = (*(void *)(v27 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[69] = swift_task_alloc(v28);
  v4[70] = swift_task_alloc(v28);
  v4[71] = swift_task_alloc(v28);
  uint64_t v29 = type metadata accessor for Input(0LL);
  v4[72] = v29;
  uint64_t v30 = *(void *)(v29 - 8);
  v4[73] = v30;
  unint64_t v31 = (*(void *)(v30 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[74] = swift_task_alloc(v31);
  v4[75] = swift_task_alloc(v31);
  uint64_t v32 = type metadata accessor for NLIntent(0LL);
  v4[76] = v32;
  uint64_t v33 = *(void *)(v32 - 8);
  v4[77] = v33;
  unint64_t v34 = (*(void *)(v33 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[78] = swift_task_alloc(v34);
  v4[79] = swift_task_alloc(v34);
  uint64_t v35 = type metadata accessor for Parse(0LL);
  v4[80] = v35;
  uint64_t v36 = *(void *)(v35 - 8);
  v4[81] = v36;
  unint64_t v37 = (*(void *)(v36 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[82] = swift_task_alloc(v37);
  v4[83] = swift_task_alloc(v37);
  return swift_task_switch( ShareETAContactDisambiguationStrategy.parseDisambiguationResponse(input:paginatedItems:),  0LL,  0LL);
}

id ShareETAContactDisambiguationStrategy.parseDisambiguationResponse(input:paginatedItems:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = v1 + 208;
  uint64_t v4 = *(void *)(v1 + 664);
  uint64_t v5 = *(void *)(v2 + 648);
  uint64_t v6 = *(void *)(v2 + 640);
  Input.parse.getter(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 88))(v4, v6);
  v542 = (void *)v2;
  if ((_DWORD)v7 == enum case for Parse.NLv3IntentOnly(_:))
  {
    v528 = (void *)(v2 + 256);
    uint64_t v8 = *(void *)(v2 + 664);
    uint64_t v9 = *(void *)(v2 + 632);
    uint64_t v10 = *(void *)(v2 + 616);
    uint64_t v11 = *(void *)(v2 + 608);
    uint64_t v12 = *(void *)(v2 + 600);
    uint64_t v13 = *(void *)(v2 + 584);
    uint64_t v14 = *(void *)(v2 + 576);
    uint64_t v15 = *(void *)(v2 + 288);
    uint64_t v16 = *(void *)(v2 + 272);
    (*(void (**)(uint64_t, void))(*(void *)(v2 + 648) + 96LL))(v8, *(void *)(v2 + 640));
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
    uint64_t v18 = v17(v9, v8, v11);
    LOBYTE(v8) = static os_log_type_t.default.getter(v18);
    uint64_t v19 = *(os_log_s **)(v15 + 16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v16, v14);
    os_log_type_t v20 = v8;
    v545 = v19;
    if (os_log_type_enabled(v19, (os_log_type_t)v8))
    {
      uint64_t v21 = *(void *)(v2 + 656);
      uint64_t v22 = *(void *)(v2 + 640);
      uint64_t v23 = *(void *)(v2 + 600);
      uint64_t v508 = *(void *)(v2 + 584);
      uint64_t v516 = *(void *)(v2 + 576);
      uint64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v25 = swift_slowAlloc(32LL, -1LL);
      v548[0] = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      Input.parse.getter(v25);
      uint64_t v26 = String.init<A>(describing:)(v21, v22);
      unint64_t v28 = v27;
      *(void *)(v2 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v548);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v528, v2 + 264);
      swift_bridgeObjectRelease(v28);
      (*(void (**)(uint64_t, uint64_t))(v508 + 8))(v23, v516);
      _os_log_impl(&dword_0, v545, v20, "parseDisambiguationResponse NLv3IntentOnly input.parse: %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(void, void))(*(void *)(v2 + 584) + 8LL))( *(void *)(v2 + 600),  *(void *)(v2 + 576));
    }

    unint64_t v509 = v2 + 232;
    v517 = (void *)(v2 + 32);
    (*(void (**)(void, void, void))(*(void *)(v2 + 616) + 16LL))( *(void *)(v2 + 624),  *(void *)(v2 + 632),  *(void *)(v2 + 608));
    uint64_t v57 = type metadata accessor for LocationSearchIntent(0LL);
    uint64_t v58 = swift_allocObject(v57, *(unsigned int *)(v57 + 48), *(unsigned __int16 *)(v57 + 52));
    uint64_t v59 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
    if (one-time initialization token for domainNode != -1) {
      swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
    }
    uint64_t v60 = *(void *)(v2 + 624);
    uint64_t v61 = *(void *)(v2 + 608);
    uint64_t v62 = *(void *)(v2 + 568);
    uint64_t v63 = *(void *)(v2 + 544);
    uint64_t v64 = *(void *)(v2 + 536);
    uint64_t v65 = *(void *)(v2 + 280);
    uint64_t v66 = static LocationSearchIntent.domainNode;
    *(void *)(v58 + v59) = static LocationSearchIntent.domainNode;
    v17(v58 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent, v60, v61);
    uint64_t v67 = swift_retain(v66);
    os_log_type_t v75 = static os_log_type_t.info.getter(v67, v68, v69, v70, v71, v72, v73, v74);
    uint64_t v76 = v58;
    char v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16);
    v77(v62, v65, v64);
    BOOL v78 = os_log_type_enabled(v545, v75);
    uint64_t v79 = *(void *)(v2 + 568);
    if (v78)
    {
      uint64_t v486 = v2 + 240;
      uint64_t v80 = *(void *)(v2 + 560);
      uint64_t v501 = *(void *)(v2 + 544);
      uint64_t v494 = *(void *)(v2 + 536);
      swift_retain_n(v76, 2LL);
      uint64_t v81 = swift_slowAlloc(22LL, -1LL);
      unint64_t v497 = swift_slowAlloc(64LL, -1LL);
      v548[0] = v497;
      *(_DWORD *)uint64_t v81 = 136315394;
      *(void *)(v2 + 23__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v76;
      uint64_t v82 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent,  type metadata accessor for LocationSearchIntent,  (uint64_t)&protocol conformance descriptor for LocationSearchIntent);
      LODWORD(type) = v75;
      uint64_t v83 = NLIntentWrapper.description.getter(v57, v82);
      unint64_t v85 = v84;
      *(void *)(v2 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, v548);
      uint64_t v86 = v2 + 248;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v486, v86);
      swift_release_n(v76, 2LL);
      swift_bridgeObjectRelease(v85);
      *(_WORD *)(v81 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
      v77(v80, v79, v494);
      uint64_t v87 = String.init<A>(describing:)(v80, v494);
      unint64_t v89 = v88;
      v542[31] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v88, v548);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v86, v528);
      swift_bridgeObjectRelease(v89);
      uint64_t v2 = (uint64_t)v542;
      (*(void (**)(uint64_t, uint64_t))(v501 + 8))(v79, v494);
      _os_log_impl(&dword_0, v545, v75, "intent %s, paginatedItems %s", (uint8_t *)v81, 0x16u);
      swift_arrayDestroy(v497, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v497, -1LL, -1LL);
      swift_slowDealloc(v81, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(void, void))(*(void *)(v2 + 544) + 8LL))( *(void *)(v2 + 568),  *(void *)(v2 + 536));
    }

    *(void *)(v2 + 208) = v76;
    type metadata accessor for AddressOntologyNode.PersonPlaceNode(0LL);
    unint64_t v47 = static AddressOntologyNode.PersonPlaceNode.personPlaceIdNode.getter();
    uint64_t v111 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent,  type metadata accessor for LocationSearchIntent,  (uint64_t)&protocol conformance descriptor for LocationSearchIntent);
    IntentNodeTraversable.value<A>(forNode:)(v517, v47, v57, v111);
    swift_release(v47);
    uint64_t v38 = *(void **)(v2 + 40);
    if (v38)
    {
      uint64_t v532 = v76;
      uint64_t v29 = *(void *)(v2 + 32);
      uint64_t v112 = PaginatedItemContainer.items.getter(*(void *)(v2 + 536));
      uint64_t v2 = v112;
      if ((unint64_t)v112 >> 62)
      {
        if (v112 >= 0) {
          v112 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        uint64_t v113 = _CocoaArrayWrapper.endIndex.getter(v112);
        if (v113)
        {
LABEL_28:
          unint64_t v114 = v2 & 0xC000000000000001LL;
          if ((v2 & 0xC000000000000001LL) != 0) {
            goto LABEL_196;
          }
          if (*(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL)))
          {
            for (id i = *(id *)(v2 + 32); ; id i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v2))
            {
              id v56 = i;
              uint64_t v116 = INPerson.encodeBase64.getter(i);
              uint64_t v118 = (uint64_t)v117;
              if (v116 == v29 && v38 == v117) {
                break;
              }
              char v147 = _stringCompareWithSmolCheck(_:_:expecting:)(v116, v117, v29, v38, 0LL);
              swift_bridgeObjectRelease(v118);
              if ((v147 & 1) != 0)
              {
                unint64_t v119 = v545;
                goto LABEL_41;
              }

              if (v113 == 1) {
                goto LABEL_92;
              }
              v528 = (void *)(v2 & 0xFFFFFFFFFFFFFF8LL);
              uint64_t v76 = 5LL;
              while (1)
              {
                unint64_t v47 = v76 - 4;
                if (v114)
                {
                  id v284 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v76 - 4, v2);
                }

                else
                {
                  id v284 = *(id *)(v2 + 8 * v76);
                }

                v285 = v284;
                uint64_t v286 = v76 - 3;
                if (__OFADD__(v47, 1LL)) {
                  break;
                }
                uint64_t v287 = INPerson.encodeBase64.getter(v284);
                uint64_t v118 = (uint64_t)v288;
                if (v287 == v29 && v38 == v288)
                {
                  unint64_t v119 = v545;
                  id v56 = v285;
                  goto LABEL_34;
                }

                char v289 = _stringCompareWithSmolCheck(_:_:expecting:)(v287, v288, v29, v38, 0LL);
                swift_bridgeObjectRelease(v118);
                if ((v289 & 1) != 0)
                {
                  unint64_t v119 = v545;
                  id v56 = v285;
                  goto LABEL_41;
                }

                ++v76;
                if (v286 == v113) {
                  goto LABEL_92;
                }
              }

              __break(1u);
LABEL_195:
              __break(1u);
LABEL_196:
              ;
            }

            unint64_t v119 = v545;
LABEL_34:
            swift_bridgeObjectRelease(v2);
            uint64_t v2 = v118;
LABEL_41:
            uint64_t v148 = v532;
            uint64_t v149 = v542 + 27;
            swift_bridgeObjectRelease(v2);
            uint64_t v150 = swift_bridgeObjectRelease(v38);
            os_log_type_t v151 = static os_log_type_t.default.getter(v150);
            if (os_log_type_enabled(v119, v151))
            {
              id v152 = v56;
              uint64_t v153 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              id v529 = v56;
              uint64_t v154 = swift_slowAlloc(32LL, -1LL);
              v548[0] = v154;
              *(_DWORD *)uint64_t v153 = 136315138;
              id v155 = v152;
              id v156 = [v155 description];
              uint64_t v157 = static String._unconditionallyBridgeFromObjectiveC(_:)(v156);
              unint64_t v159 = v158;

              uint64_t v149 = v542 + 27;
              uint64_t v160 = v157;
              uint64_t v148 = v532;
              v542[28] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v160, v159, v548);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v542 + 28, v509);

              swift_bridgeObjectRelease(v159);
              _os_log_impl(&dword_0, v545, v151, "chosen item %s", v153, 0xCu);
              swift_arrayDestroy(v154, 1LL, (char *)&type metadata for Any + 8);
              uint64_t v161 = v154;
              id v56 = v529;
              swift_slowDealloc(v161, -1LL, -1LL);
              swift_slowDealloc(v153, -1LL, -1LL);
            }

            uint64_t v162 = v542[79];
            uint64_t v163 = v542[77];
            uint64_t v164 = v542[76];
            v542[27] = v56;
            uint64_t v165 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
            static DisambiguationResult.chosenItem(_:)(v149, v165);
            swift_release(v148);
            (*(void (**)(uint64_t, uint64_t))(v163 + 8))(v162, v164);
            uint64_t v2 = (uint64_t)v542;
            goto LABEL_44;
          }

          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
          goto LABEL_200;
        }
      }

      else
      {
        uint64_t v113 = *(void *)((char *)&dword_10 + (v112 & 0xFFFFFFFFFFFFF8LL));
        if (v113) {
          goto LABEL_28;
        }
      }

LABEL_92:
      swift_release(v532);
      swift_bridgeObjectRelease(v2);
      uint64_t v2 = (uint64_t)v542;
      uint64_t v290 = v542[79];
      uint64_t v291 = v542[77];
      uint64_t v292 = v542[76];
      v293 = v38;
      goto LABEL_93;
    }

    (*(void (**)(void, void))(*(void *)(v2 + 616) + 8LL))(*(void *)(v2 + 632), *(void *)(v2 + 608));
    uint64_t v120 = swift_release(v76);
    uint64_t v121 = v545;
LABEL_213:
    uint64_t v467 = *(void *)(v2 + 664);
    uint64_t v468 = *(void *)(v2 + 656);
    v469 = (void *)v2;
    uint64_t v470 = *(void *)(v2 + 632);
    uint64_t v471 = v469[78];
    uint64_t v472 = v469[75];
    uint64_t v473 = v469[74];
    uint64_t v474 = v469[71];
    uint64_t v480 = v469[70];
    uint64_t v482 = v469[69];
    uint64_t v485 = v469[66];
    uint64_t v490 = v469[63];
    uint64_t typeb = v469[60];
    uint64_t v496 = v469[59];
    uint64_t v499 = v469[56];
    uint64_t v507 = v469[55];
    uint64_t v514 = v469[54];
    uint64_t v526 = v469[51];
    uint64_t v531 = v469[48];
    uint64_t v541 = v469[45];
    uint64_t v544 = v469[42];
    uint64_t v547 = v469[39];
    uint64_t v475 = static os_log_type_t.default.getter(v120);
    os_log(_:dso:log:_:_:)( v475,  &dword_0,  v121,  "parseDisambiguationResult failure, no chosen item",  49LL,  2LL,  &_swiftEmptyArrayStorage);
    unint64_t v476 = lazy protocol witness table accessor for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError();
    uint64_t v477 = swift_allocError( &type metadata for ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError,  v476,  0LL,  0LL);
    _BYTE *v478 = 0;
    swift_willThrow(v477);
    swift_task_dealloc(v467);
    swift_task_dealloc(v468);
    swift_task_dealloc(v470);
    swift_task_dealloc(v471);
    swift_task_dealloc(v472);
    swift_task_dealloc(v473);
    swift_task_dealloc(v474);
    swift_task_dealloc(v480);
    swift_task_dealloc(v482);
    swift_task_dealloc(v485);
    swift_task_dealloc(v490);
    swift_task_dealloc(typeb);
    swift_task_dealloc(v496);
    swift_task_dealloc(v499);
    swift_task_dealloc(v507);
    swift_task_dealloc(v514);
    swift_task_dealloc(v526);
    swift_task_dealloc(v531);
    swift_task_dealloc(v541);
    swift_task_dealloc(v544);
    swift_task_dealloc(v547);
    unint64_t v177 = (uint64_t (*)(void))v469[1];
    return (id)v177();
  }

  uint64_t v29 = v2 + 152;
  if ((_DWORD)v7 != enum case for Parse.directInvocation(_:))
  {
    uint64_t v518 = v2 + 200;
    uint64_t v90 = v2 + 120;
    if ((_DWORD)v7 == enum case for Parse.pommesResponse(_:))
    {
      uint64_t v502 = v2 + 192;
      uint64_t v510 = v2 + 168;
      uint64_t v91 = *(void ***)(v2 + 664);
      uint64_t v92 = *(void *)(v2 + 592);
      uint64_t v93 = *(void *)(v2 + 584);
      uint64_t v94 = *(void *)(v2 + 576);
      uint64_t v95 = *(void *)(v2 + 288);
      uint64_t v96 = *(void *)(v2 + 272);
      uint64_t v97 = (*(uint64_t (**)(void **, void))(*(void *)(v2 + 648) + 96LL))(v91, *(void *)(v2 + 640));
      v533 = *v91;
      LOBYTE(v91) = static os_log_type_t.default.getter(v97);
      char v98 = *(os_log_s **)(v95 + 16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 16))(v92, v96, v94);
      os_log_type_t v99 = v91;
      v545 = v98;
      uint64_t v494 = v2 + 152;
      uint64_t type = v2 + 120;
      if (os_log_type_enabled(v98, (os_log_type_t)v91))
      {
        uint64_t v100 = *(void *)(v2 + 656);
        uint64_t v101 = *(void *)(v2 + 640);
        uint64_t v102 = *(void *)(v2 + 592);
        uint64_t v103 = *(void *)(v2 + 584);
        uint64_t v104 = v542[72];
        unint64_t v105 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v106 = swift_slowAlloc(32LL, -1LL);
        v548[0] = v106;
        *(_DWORD *)unint64_t v105 = 136315138;
        Input.parse.getter(v106);
        uint64_t v107 = String.init<A>(describing:)(v100, v101);
        unint64_t v109 = v108;
        v542[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v108, v548);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v502, v518);
        swift_bridgeObjectRelease(v109);
        os_log_type_t v110 = *(void (**)(uint64_t, uint64_t))(v103 + 8);
        uint64_t v2 = (uint64_t)v542;
        v110(v102, v104);
        _os_log_impl(&dword_0, v98, v99, "parseDisambiguationResponse pommesResponse input.parse: %s", v105, 0xCu);
        swift_arrayDestroy(v106, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v106, -1LL, -1LL);
        swift_slowDealloc(v105, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(void, void))(*(void *)(v2 + 584) + 8LL))( *(void *)(v2 + 592),  *(void *)(v2 + 576));
      }

      uint64_t v220 = *(void *)(v2 + 552);
      uint64_t v221 = *(void *)(v2 + 544);
      uint64_t v222 = *(void *)(v2 + 536);
      uint64_t v223 = *(void *)(v2 + 280);
      uint64_t v224 = type metadata accessor for LocationSearchIntent(0LL);
      swift_allocObject(v224, *(unsigned int *)(v224 + 48), *(unsigned __int16 *)(v224 + 52));
      v528 = v533;
      uint64_t v225 = LocationSearchIntent.init(from:)(v528);
      os_log_type_t v233 = static os_log_type_t.info.getter(v225, v226, v227, v228, v229, v230, v231, v232);
      unint64_t v234 = *(void (**)(uint64_t, uint64_t, uint64_t))(v221 + 16);
      v234(v220, v223, v222);
      os_log_type_t v235 = v233;
      unint64_t v497 = v225;
      if (os_log_type_enabled(v98, v233))
      {
        uint64_t v483 = *(void *)(v2 + 560);
        uint64_t v488 = *(void *)(v2 + 552);
        uint64_t v536 = *(void *)(v2 + 544);
        uint64_t v236 = *(void *)(v2 + 536);
        swift_retain_n(v225, 2LL);
        uint64_t v237 = swift_slowAlloc(22LL, -1LL);
        uint64_t v521 = swift_slowAlloc(64LL, -1LL);
        v548[0] = v521;
        *(_DWORD *)uint64_t v237 = 136315394;
        *(void *)(v2 + 168) = v225;
        uint64_t v238 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent,  type metadata accessor for LocationSearchIntent,  (uint64_t)&protocol conformance descriptor for LocationSearchIntent);
        uint64_t v239 = NLIntentWrapper.description.getter(v224, v238);
        unint64_t v241 = v240;
        *(void *)(v2 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v239, v240, v548);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 176, v2 + 184);
        swift_release_n(v225, 2LL);
        swift_bridgeObjectRelease(v241);
        *(_WORD *)(v237 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
        v234(v483, v488, v236);
        uint64_t v242 = String.init<A>(describing:)(v483, v236);
        unint64_t v244 = v243;
        *(void *)(v2 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v242, v243, v548);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 184, v502);
        swift_bridgeObjectRelease(v244);
        (*(void (**)(uint64_t, uint64_t))(v536 + 8))(v488, v236);
        _os_log_impl(&dword_0, v545, v235, "intent %s, paginatedItems %s", (uint8_t *)v237, 0x16u);
        swift_arrayDestroy(v521, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v521, -1LL, -1LL);
        uint64_t v245 = v237;
        char v98 = v545;
        uint64_t v246 = swift_slowDealloc(v245, -1LL, -1LL);
      }

      else
      {
        uint64_t v246 = (*(uint64_t (**)(void, void))(*(void *)(v2 + 544) + 8LL))( *(void *)(v2 + 552),  *(void *)(v2 + 536));
      }

      os_log_type_t v257 = static os_log_type_t.info.getter(v246, v247, v248, v249, v250, v251, v252, v253);
      if (os_log_type_enabled(v98, v257))
      {
        uint64_t v258 = v2 + 16;
        uint64_t v259 = v2 + 160;
        v260 = (void *)v2;
        v261 = v528;
        v262 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v263 = swift_slowAlloc(32LL, -1LL);
        v548[0] = v263;
        *(_DWORD *)v262 = 136315138;
        uint64_t v264 = PommesResponse.firstGeoExperience.getter();
        uint64_t v265 = (void *)v264;
        if (v264)
        {
          uint64_t v266 = v260[66];
          v267 = v261;
          uint64_t v268 = v258;
          uint64_t v269 = v259;
          uint64_t v270 = v260[65];
          uint64_t v489 = v260[64];
          uint64_t v537 = v263;
          uint64_t v271 = v260[63];
          uint64_t v504 = v260[62];
          uint64_t v522 = v260[61];
          GeoExperience.geoClientComponent.getter(v264);

          Apple_Parsec_Siri_V2alpha_GeoClientComponent.locationSearchNode.getter(v272);
          v273 = *(uint64_t (**)(uint64_t, uint64_t))(v270 + 8);
          uint64_t v259 = v269;
          uint64_t v258 = v268;
          v261 = v267;
          uint64_t v274 = v273(v266, v489);
          uint64_t v265 = (void *)Apple_Parsec_Siri_V2alpha_LocationSearchNode.personPlaceID.getter(v274);
          uint64_t v276 = v275;
          uint64_t v277 = v271;
          uint64_t v263 = v537;
          (*(void (**)(uint64_t, uint64_t))(v504 + 8))(v277, v522);
        }

        else
        {
          uint64_t v276 = 0LL;
        }

        v260[2] = v265;
        v260[3] = v276;
        uint64_t v303 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        uint64_t v304 = String.init<A>(describing:)(v258, v303);
        unint64_t v306 = v305;
        v260[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v304, v305, v548);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v259, v510);

        swift_bridgeObjectRelease(v306);
        char v98 = v545;
        _os_log_impl(&dword_0, v545, v257, "PPID: %s", v262, 0xCu);
        swift_arrayDestroy(v263, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v263, -1LL, -1LL);
        swift_slowDealloc(v262, -1LL, -1LL);
        uint64_t v2 = (uint64_t)v260;
      }

      uint64_t v307 = PommesResponse.firstGeoExperience.getter();
      if (!v307) {
        goto LABEL_206;
      }
      v308 = (void *)v307;
      unint64_t v47 = *(void *)(v2 + 536);
      uint64_t v309 = *(void *)(v2 + 528);
      uint64_t v310 = *(void *)(v2 + 520);
      uint64_t v312 = *(void *)(v2 + 504);
      uint64_t v311 = *(void *)(v2 + 512);
      uint64_t v313 = *(void *)(v2 + 488);
      uint64_t v314 = *(void *)(v2 + 496);
      uint64_t v315 = *(void *)(v2 + 288);
      GeoExperience.geoClientComponent.getter(v307);

      Apple_Parsec_Siri_V2alpha_GeoClientComponent.locationSearchNode.getter(v316);
      uint64_t v317 = (*(uint64_t (**)(uint64_t, uint64_t))(v310 + 8))(v309, v311);
      unint64_t v114 = Apple_Parsec_Siri_V2alpha_LocationSearchNode.personPlaceID.getter(v317);
      uint64_t v29 = v318;
      (*(void (**)(uint64_t, uint64_t))(v314 + 8))(v312, v313);
      uint64_t v76 = PaginatedItemContainer.items.getter(v47);
      uint64_t v38 = (void *)(*(uint64_t (**)(void))(*(void *)v315 + 168LL))();
      if (!((unint64_t)v76 >> 62))
      {
        uint64_t v2 = *(void *)((char *)&dword_10 + (v76 & 0xFFFFFFFFFFFFF8LL));
        char v98 = v545;
        if (!v2)
        {
LABEL_204:
          swift_bridgeObjectRelease(v38);
          swift_bridgeObjectRelease(v76);
          goto LABEL_205;
        }

        goto LABEL_102;
      }

LABEL_200:
      if (v76 < 0) {
        uint64_t v457 = v76;
      }
      else {
        uint64_t v457 = v76 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v76);
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v457);
      swift_bridgeObjectRelease(v76);
      char v98 = v545;
      if (!v2) {
        goto LABEL_204;
      }
LABEL_102:
      unint64_t v45 = v76 & 0xC000000000000001LL;
      if ((v76 & 0xC000000000000001LL) != 0)
      {
        id v319 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v76);
LABEL_105:
        v320 = v319;
        uint64_t v321 = v38[2];
        if (!v321)
        {
LABEL_189:
          swift_bridgeObjectRelease(v38);
          swift_bridgeObjectRelease(v76);

LABEL_205:
          swift_bridgeObjectRelease(v29);
          uint64_t v2 = (uint64_t)v542;
LABEL_206:
          uint64_t v525 = (*(uint64_t (**)(void))(**(void **)(v2 + 288) + 168LL))();
          uint64_t v458 = *(void *)(v525 + 16);
          if (v458)
          {
            v459 = (unint64_t *)(v525 + 40);
            do
            {
              uint64_t v464 = *(v459 - 1);
              unint64_t v463 = *v459;
              swift_bridgeObjectRetain(*v459);
              os_log_type_t v466 = static os_log_type_t.default.getter(v465);
              if (os_log_type_enabled(v98, v466))
              {
                swift_bridgeObjectRetain(v463);
                uint64_t v460 = swift_slowAlloc(12LL, -1LL);
                uint64_t v461 = swift_slowAlloc(32LL, -1LL);
                v548[0] = v461;
                *(_DWORD *)uint64_t v460 = 136315138;
                swift_bridgeObjectRetain(v463);
                *(void *)(v460 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v464, v463, v548);
                swift_bridgeObjectRelease_n(v463, 3LL);
                _os_log_impl(&dword_0, v545, v466, "handle %s", (uint8_t *)v460, 0xCu);
                swift_arrayDestroy(v461, 1LL, (char *)&type metadata for Any + 8);
                uint64_t v462 = v461;
                char v98 = v545;
                swift_slowDealloc(v462, -1LL, -1LL);
                swift_slowDealloc(v460, -1LL, -1LL);
              }

              else
              {
                swift_bridgeObjectRelease(v463);
              }

              v459 += 2;
              --v458;
            }

            while (v458);
          }

          swift_bridgeObjectRelease(v525);
          uint64_t v120 = swift_release(v497);
          uint64_t v2 = (uint64_t)v542;
          uint64_t v121 = v98;
          goto LABEL_213;
        }

        uint64_t v322 = v38[4];
        unint64_t v523 = v38[5];
        swift_bridgeObjectRetain(v523);
        v538 = v320;
        uint64_t v324 = INPerson.encodeBase64.getter(v323);
        uint64_t v326 = v325;
        if (v324 == v114 && v325 == v29)
        {
LABEL_108:
          uint64_t v2 = (uint64_t)v542;
          uint64_t v512 = v322;
          swift_bridgeObjectRelease(v76);
          uint64_t v76 = v29;
LABEL_130:
          v363 = v538;
          uint64_t v364 = v2 + 144;
          swift_bridgeObjectRelease(v76);
          swift_bridgeObjectRelease(v29);
          uint64_t v365 = swift_bridgeObjectRelease(v38);
          os_log_type_t v366 = static os_log_type_t.default.getter(v365);
          uint64_t v367 = os_log_type_enabled(v545, v366);
          if ((_DWORD)v367)
          {
            id v375 = v538;
            v376 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v377 = swift_slowAlloc(32LL, -1LL);
            v548[0] = v377;
            *(_DWORD *)v376 = 136315138;
            id v378 = v375;
            id v379 = [v378 description];
            uint64_t v380 = static String._unconditionallyBridgeFromObjectiveC(_:)(v379);
            unint64_t v382 = v381;

            uint64_t v383 = v380;
            uint64_t v364 = v2 + 144;
            *(void *)(v2 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v383, v382, v548);
            uint64_t v384 = v2 + 144;
            uint64_t v2 = (uint64_t)v542;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v384, v494);

            unint64_t v385 = v382;
            v363 = v538;
            swift_bridgeObjectRelease(v385);
            _os_log_impl(&dword_0, v545, v366, "chosen item %s", v376, 0xCu);
            swift_arrayDestroy(v377, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v377, -1LL, -1LL);
            uint64_t v367 = swift_slowDealloc(v376, -1LL, -1LL);
          }

          os_log_type_t v386 = static os_log_type_t.info.getter(v367, v368, v369, v370, v371, v372, v373, v374);
          id v56 = v363;
          swift_bridgeObjectRetain(v523);
          if (os_log_type_enabled(v545, v386))
          {
            uint64_t v387 = swift_slowAlloc(22LL, -1LL);
            v388 = v56;
            uint64_t v389 = swift_slowAlloc(64LL, -1LL);
            v548[0] = v389;
            *(_DWORD *)uint64_t v387 = 136315394;
            uint64_t v390 = INPerson.encodeBase64.getter(v389);
            unint64_t v392 = v391;
            *(void *)(v2 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v390, v391, v548);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 128, v542 + 17);

            swift_bridgeObjectRelease(v392);
            *(_WORD *)(v387 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
            swift_bridgeObjectRetain(v523);
            v542[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v512, v523, v548);
            uint64_t v2 = (uint64_t)v542;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v542 + 17, v364);
            swift_bridgeObjectRelease_n(v523, 3LL);
            _os_log_impl(&dword_0, v545, v386, "sessionHandle: %s\nAlternateHandle: %s", (uint8_t *)v387, 0x16u);
            swift_arrayDestroy(v389, 2LL, (char *)&type metadata for Any + 8);
            uint64_t v393 = v389;
            id v56 = v388;
            swift_slowDealloc(v393, -1LL, -1LL);
            swift_slowDealloc(v387, -1LL, -1LL);
          }

          else
          {
            swift_bridgeObjectRelease_n(v523, 2LL);
          }

          *(void *)(v2 + 120) = v56;
          uint64_t v394 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
          static DisambiguationResult.chosenItem(_:)(type, v394);
          swift_release(v497);

          goto LABEL_44;
        }

        char v362 = _stringCompareWithSmolCheck(_:_:expecting:)(v324, v325, v114, v29, 0LL);
        swift_bridgeObjectRelease(v326);
        if ((v362 & 1) == 0)
        {
          if (v322 == v114 && v523 == v29)
          {
LABEL_128:
            uint64_t v512 = v114;
            unint64_t v523 = v29;
            goto LABEL_129;
          }

          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v322, v523, v114, v29, 0LL) & 1) == 0)
          {

            id result = (id)swift_bridgeObjectRelease(v523);
            uint64_t v506 = v2 - 1;
            if (v2 != 1)
            {
              uint64_t v449 = 0LL;
              v450 = v38 + 7;
              while (1)
              {
                unint64_t v451 = v449 + 1;
                char v98 = v545;
                if ((v76 & 0xC000000000000001LL) != 0)
                {
                  id result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v449 + 1, v76);
                }

                else
                {
                  id result = *(id *)(v76 + 40 + 8 * v449);
                }

                v320 = result;
                if (v321 - 1 == v449) {
                  goto LABEL_189;
                }
                if (v451 >= v38[2]) {
                  break;
                }
                uint64_t v322 = *(v450 - 1);
                unint64_t v523 = *v450;
                swift_bridgeObjectRetain(*v450);
                v538 = v320;
                uint64_t v453 = INPerson.encodeBase64.getter(v452);
                uint64_t v455 = v454;
                if (v453 == v114 && v454 == v29) {
                  goto LABEL_108;
                }
                char v456 = _stringCompareWithSmolCheck(_:_:expecting:)(v453, v454, v114, v29, 0LL);
                swift_bridgeObjectRelease(v455);
                if ((v456 & 1) != 0) {
                  goto LABEL_122;
                }
                if (v322 == v114 && v523 == v29) {
                  goto LABEL_128;
                }
                if ((_stringCompareWithSmolCheck(_:_:expecting:)(v322, v523, v114, v29, 0LL) & 1) != 0) {
                  goto LABEL_122;
                }

                id result = (id)swift_bridgeObjectRelease(v523);
                v450 += 2;
                if (v506 == ++v449) {
                  goto LABEL_173;
                }
              }

              __break(1u);
LABEL_230:
              __break(1u);
              return result;
            }

LABEL_173:
            swift_bridgeObjectRelease(v38);
            swift_bridgeObjectRelease(v76);
            char v98 = v545;
            goto LABEL_205;
          }
        }

LABEL_122:
        uint64_t v512 = v322;
LABEL_129:
        uint64_t v2 = (uint64_t)v542;
        goto LABEL_130;
      }

      if (*(void *)((char *)&dword_10 + (v76 & 0xFFFFFFFFFFFFF8LL)))
      {
        id v319 = *(id *)(v76 + 32);
        goto LABEL_105;
      }

      __break(1u);
      goto LABEL_217;
    }

    v528 = (void *)(v2 + 104);
    uint64_t v122 = *(void *)(v2 + 664);
    uint64_t v123 = *(void *)(v2 + 648);
    uint64_t v124 = *(void *)(v2 + 640);
    if ((_DWORD)v7 != enum case for Parse.uso(_:))
    {
      uint64_t v254 = *(void *)(v2 + 288);
      uint64_t v255 = static os_log_type_t.default.getter(v7);
      uint64_t v121 = *(os_log_s **)(v254 + 16);
      os_log(_:dso:log:_:_:)( v255,  &dword_0,  v121,  "parseDisambiguationResult failure, no supported parse",  53LL,  2LL,  &_swiftEmptyArrayStorage);
      uint64_t v218 = *(uint64_t (**)(uint64_t, uint64_t))(v123 + 8);
      uint64_t v219 = v122;
      goto LABEL_74;
    }

    uint64_t v125 = (uint64_t *)(v2 + 112);
    uint64_t v127 = *(void *)(v2 + 472);
    uint64_t v126 = *(void *)(v2 + 480);
    uint64_t v128 = *(void *)(v2 + 464);
    uint64_t v129 = *(void *)(v2 + 456);
    os_log_type_t v130 = (void *)v542[36];
    (*(void (**)(uint64_t, uint64_t))(v123 + 96))(v122, v124);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v128 + 32))(v126, v122, v129);
    uint64_t v131 = (*(uint64_t (**)(uint64_t))(*v130 + 152LL))(1LL);
    os_log_type_t v132 = static os_log_type_t.default.getter(v131);
    v545 = (os_log_s *)v130[2];
    uint64_t v133 = v129;
    uint64_t v2 = (uint64_t)v542;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v128 + 16))(v127, v126, v133);
    os_log_type_t v134 = v132;
    BOOL v135 = os_log_type_enabled(v545, v132);
    uint64_t v137 = v542[58];
    uint64_t v136 = v542[59];
    v519 = v125;
    if (v135)
    {
      uint64_t v534 = v542[57];
      uint64_t v138 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v139 = swift_slowAlloc(32LL, -1LL);
      v548[0] = v139;
      *(_DWORD *)uint64_t v138 = 136315138;
      uint64_t v140 = USOParse.debugDescription.getter();
      uint64_t v141 = v90;
      unint64_t v143 = v142;
      *uint64_t v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v140, v142, v548);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v125, v141);
      swift_bridgeObjectRelease(v143);
      uint64_t v144 = *(void (**)(uint64_t, uint64_t))(v137 + 8);
      v144(v136, v534);
      _os_log_impl(&dword_0, v545, v134, "received parse: %s", v138, 0xCu);
      swift_arrayDestroy(v139, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v145 = v139;
      uint64_t v2 = (uint64_t)v542;
      swift_slowDealloc(v145, -1LL, -1LL);
      uint64_t v146 = swift_slowDealloc(v138, -1LL, -1LL);
    }

    else
    {
      uint64_t v144 = *(void (**)(uint64_t, uint64_t))(v137 + 8);
      uint64_t v146 = ((uint64_t (*)(uint64_t, void))v144)(v136, v542[57]);
    }

    uint64_t v294 = *(void *)(v2 + 424);
    uint64_t v295 = *(void *)(v2 + 432);
    uint64_t v296 = *(void *)(v2 + 416);
    uint64_t v297 = USOParse.userParse.getter(v146);
    uint64_t v298 = Siri_Nlu_External_UserParse.userDialogActs.getter(v297);
    (*(void (**)(uint64_t, uint64_t))(v294 + 8))(v295, v296);
    uint64_t v299 = *(void *)(v298 + 16);
    uint64_t v300 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
    uint64_t v301 = *(void *)(v300 - 8);
    if (v299)
    {
      (*(void (**)(void, unint64_t, uint64_t))(v301 + 16))( *(void *)(v2 + 440),  v298 + ((*(unsigned __int8 *)(v301 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v301 + 80)),  v300);
      uint64_t v302 = 0LL;
    }

    else
    {
      uint64_t v302 = 1LL;
    }

    uint64_t v327 = *(void *)(v2 + 440);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v301 + 56))(v327, v302, 1LL, v300);
    swift_bridgeObjectRelease(v298);
    int v328 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v301 + 48))(v327, 1LL, v300);
    uint64_t v329 = *(void *)(v2 + 440);
    if (v328 == 1)
    {
      v330 = &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?;
LABEL_140:
      outlined destroy of (label: String?, value: Any)?(v329, v330);
LABEL_141:
      uint64_t v120 = ((uint64_t (*)(void, void))v144)(*(void *)(v2 + 480), *(void *)(v2 + 456));
LABEL_142:
      uint64_t v121 = v545;
      goto LABEL_213;
    }

    v484 = v144;
    uint64_t v332 = *(void *)(v2 + 400);
    uint64_t v331 = *(void *)(v2 + 408);
    v333 = (void *)v2;
    uint64_t v336 = v2 + 384;
    uint64_t v335 = *(void *)(v2 + 384);
    uint64_t v334 = *(void *)(v336 + 8);
    uint64_t v338 = v333[46];
    uint64_t v337 = v333[47];
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    uint64_t v339 = (*(uint64_t (**)(uint64_t, uint64_t))(v301 + 8))(v329, v300);
    Siri_Nlu_External_UserStatedTask.task.getter(v339);
    uint64_t v340 = (*(uint64_t (**)(uint64_t, uint64_t))(v332 + 8))(v331, v334);
    uint64_t v38 = (void *)Siri_Nlu_External_UsoGraph.identifiers.getter(v340);
    (*(void (**)(uint64_t, uint64_t))(v337 + 8))(v335, v338);
    uint64_t v341 = v38[2];
    if (v341)
    {
      uint64_t v342 = v333[44];
      uint64_t v343 = v333[41];
      v344 = (char *)v38
           + ((*(unsigned __int8 *)(v342 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v342 + 80));
      v345 = v38;
      uint64_t v346 = *(void *)(v342 + 72);
      v347 = *(uint64_t (**)(uint64_t, char *, void, __n128))(v342 + 16);
      v539 = v345;
      __n128 v348 = swift_bridgeObjectRetain(v345);
      uint64_t v2 = (uint64_t)v333;
      while (1)
      {
        uint64_t v349 = *(void *)(v2 + 360);
        uint64_t v350 = v2;
        uint64_t v352 = v2 + 336;
        uint64_t v351 = *(void *)(v2 + 336);
        uint64_t v353 = *(void *)(v350 + 320);
        uint64_t v354 = v347(v349, v344, *(void *)(v352 + 8), v348);
        uint64_t v355 = Siri_Nlu_External_UsoEntityIdentifier.namespace.getter(v354);
        uint64_t v356 = Google_Protobuf_StringValue.value.getter(v355);
        uint64_t v358 = v357;
        (*(void (**)(uint64_t, uint64_t))(v343 + 8))(v351, v353);
        if (v356 == 0x64695F6D657469LL && v358 == 0xE700000000000000LL) {
          break;
        }
        char v360 = _stringCompareWithSmolCheck(_:_:expecting:)(v356, v358, 0x64695F6D657469LL, 0xE700000000000000LL, 0LL);
        swift_bridgeObjectRelease(v358);
        if ((v360 & 1) != 0) {
          goto LABEL_137;
        }
        uint64_t v2 = (uint64_t)v542;
        (*(void (**)(void, void))(v342 + 8))(v542[45], v542[43]);
        v344 += v346;
        if (!--v341)
        {
          uint64_t v38 = v539;
          swift_bridgeObjectRelease(v539);
          uint64_t v361 = 1LL;
          goto LABEL_138;
        }
      }

      swift_bridgeObjectRelease(0xE700000000000000LL);
LABEL_137:
      uint64_t v38 = v539;
      swift_bridgeObjectRelease(v539);
      uint64_t v2 = (uint64_t)v542;
      (*(void (**)(void, void, void))(v542[44] + 32LL))(v542[56], v542[45], v542[43]);
      uint64_t v361 = 0LL;
    }

    else
    {
      uint64_t v361 = 1LL;
      uint64_t v2 = (uint64_t)v333;
    }

LABEL_138:
    uint64_t v395 = *(void *)(v2 + 448);
    uint64_t v397 = *(void *)(v2 + 344);
    uint64_t v396 = *(void *)(v2 + 352);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v396 + 56))(v395, v361, 1LL, v397);
    swift_bridgeObjectRelease(v38);
    int v398 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v396 + 48))(v395, 1LL, v397);
    uint64_t v329 = *(void *)(v2 + 448);
    uint64_t v144 = v484;
    uint64_t v76 = (uint64_t)v519;
    if (v398 == 1)
    {
      v330 = (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?;
      goto LABEL_140;
    }

    uint64_t v400 = *(void *)(v2 + 344);
    uint64_t v399 = *(void *)(v2 + 352);
    uint64_t v540 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
    unint64_t v497 = v401;
    uint64_t v402 = (*(uint64_t (**)(uint64_t, uint64_t))(v399 + 8))(v329, v400);
    os_log_type_t v403 = static os_log_type_t.default.getter(v402);
    if (os_log_type_enabled(v545, v403))
    {
      swift_bridgeObjectRetain_n(v497, 2LL);
      v404 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v405 = swift_slowAlloc(32LL, -1LL);
      v548[0] = v405;
      *(_DWORD *)v404 = 136315138;
      uint64_t v38 = v404 + 12;
      swift_bridgeObjectRetain(v497);
      void *v528 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v540, v497, v548);
      uint64_t v2 = (uint64_t)v542;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v528, v519);
      swift_bridgeObjectRelease_n(v497, 3LL);
      _os_log_impl(&dword_0, v545, v403, "contactId on disambiguation is %s", v404, 0xCu);
      swift_arrayDestroy(v405, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v405, -1LL, -1LL);
      swift_slowDealloc(v404, -1LL, -1LL);
    }

    uint64_t v406 = PaginatedItemContainer.items.getter(*(void *)(v2 + 536));
    uint64_t v407 = v406;
    if ((unint64_t)v406 >> 62)
    {
      if (v406 >= 0) {
        v406 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      unint64_t v47 = _CocoaArrayWrapper.endIndex.getter(v406);
      if (v47)
      {
LABEL_147:
        uint64_t v408 = 0LL;
        uint64_t v494 = v2 + 64;
        uint64_t v481 = v2 + 88;
        unint64_t v524 = v407 & 0xC000000000000001LL;
        uint64_t type = 136315394LL;
        uint64_t v29 = v497;
        unint64_t v505 = v47;
        uint64_t v513 = v407;
        do
        {
          if (v524) {
            id v410 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v408, v407);
          }
          else {
            id v410 = *(id *)(v407 + 8 * v408 + 32);
          }
          v411 = v410;
          unint64_t v114 = v408 + 1;
          if (__OFADD__(v408, 1LL)) {
            goto LABEL_198;
          }
          uint64_t v76 = static os_log_type_t.default.getter(v410);
          id v56 = v411;
          if (os_log_type_enabled(v545, (os_log_type_t)v76))
          {
            v528 = v56;
            id v412 = v56;
            uint64_t v413 = swift_slowAlloc(22LL, -1LL);
            uint64_t v38 = (void *)swift_slowAlloc(64LL, -1LL);
            v548[0] = (uint64_t)v38;
            *(_DWORD *)uint64_t v413 = 136315394;
            id v414 = v412;
            id v415 = [v414 description];
            uint64_t v416 = static String._unconditionallyBridgeFromObjectiveC(_:)(v415);
            unint64_t v418 = v417;

            *(void *)(v413 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v416, v418, v548);
            swift_bridgeObjectRelease(v418);
            *(_WORD *)(v413 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
            id v419 = [v414 contactIdentifier];
            if (v419)
            {
              v420 = v419;
              uint64_t v421 = static String._unconditionallyBridgeFromObjectiveC(_:)(v419);
              uint64_t v423 = v422;
            }

            else
            {
              uint64_t v421 = 0LL;
              uint64_t v423 = 0LL;
            }

            uint64_t v29 = v497;
            v542[8] = v421;
            v542[9] = v423;
            uint64_t v424 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
            uint64_t v425 = String.init<A>(describing:)(v494, v424);
            unint64_t v427 = v426;
            *(void *)(v413 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v425, v426, v548);

            uint64_t v2 = (uint64_t)v542;
            swift_bridgeObjectRelease(v427);
            _os_log_impl(&dword_0, v545, (os_log_type_t)v76, "%s has contactId %s", (uint8_t *)v413, 0x16u);
            swift_arrayDestroy(v38, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v38, -1LL, -1LL);
            swift_slowDealloc(v413, -1LL, -1LL);
            id v56 = v528;
          }

          else
          {
          }

          uint64_t v407 = v513;
          v428 = [v56 contactIdentifier];
          if (v428)
          {
            uint64_t v38 = v428;
            uint64_t v429 = static String._unconditionallyBridgeFromObjectiveC(_:)(v428);
            uint64_t v431 = v430;

            if (v540 == v429 && v29 == v431)
            {
              swift_bridgeObjectRelease(v513);
              uint64_t v407 = v29;
LABEL_164:
              uint64_t v432 = *(void *)(v2 + 480);
              uint64_t v433 = *(void *)(v2 + 456);
              swift_bridgeObjectRelease(v29);
              swift_bridgeObjectRelease(v407);
              *(void *)(v2 + 88) = v56;
              uint64_t v434 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
              static DisambiguationResult.chosenItem(_:)(v481, v434);
              v484(v432, v433);
              goto LABEL_44;
            }

            char v409 = _stringCompareWithSmolCheck(_:_:expecting:)(v540, v29, v429, v431, 0LL);
            swift_bridgeObjectRelease(v431);
            if ((v409 & 1) != 0) {
              goto LABEL_164;
            }
          }

          ++v408;
          unint64_t v47 = v505;
        }

        while (v114 != v505);
        swift_bridgeObjectRelease(v513);
        swift_bridgeObjectRelease(v29);
        uint64_t v120 = ((uint64_t (*)(void, void))v484)(*(void *)(v2 + 480), *(void *)(v2 + 456));
        goto LABEL_142;
      }
    }

    else
    {
      unint64_t v47 = *(void *)((char *)&dword_10 + (v406 & 0xFFFFFFFFFFFFF8LL));
      if (v47) {
        goto LABEL_147;
      }
    }

    swift_bridgeObjectRelease(v407);
    swift_bridgeObjectRelease(v497);
    goto LABEL_141;
  }

  uint64_t v30 = *(void *)(v2 + 664);
  uint64_t v31 = *(void *)(v2 + 304);
  uint64_t v32 = *(void *)(v2 + 312);
  uint64_t v33 = *(void *)(v2 + 296);
  (*(void (**)(uint64_t, void))(*(void *)(v2 + 648) + 96LL))(v30, *(void *)(v2 + 640));
  uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v32, v30, v33);
  uint64_t v35 = Parse.DirectInvocation.userData.getter(v34);
  if (v35)
  {
    uint64_t v36 = v35;
    specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v35);
    uint64_t v38 = v37;
    uint64_t v35 = swift_bridgeObjectRelease(v36);
    if (v38)
    {
      uint64_t v39 = *(os_log_s **)(*(void *)(v2 + 288) + 16LL);
      os_log_type_t v40 = static os_log_type_t.default.getter(v35);
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v41 = 0;
        _os_log_impl(&dword_0, v39, v40, "choose by index", v41, 2u);
        swift_slowDealloc(v41, -1LL, -1LL);
      }

      if (v38[2])
      {
        unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(0x7865646E69LL, 0xE500000000000000LL);
        if ((v43 & 1) != 0)
        {
          uint64_t v44 = *(void *)(v2 + 536);
          unint64_t v45 = *(void *)(v38[7] + 8 * v42);
          swift_bridgeObjectRelease(v38);
          uint64_t v46 = PaginatedItemContainer.items.getter(v44);
          unint64_t v47 = v46;
          if ((v46 & 0xC000000000000001LL) != 0)
          {
LABEL_217:
            id v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v45, v47);
            goto LABEL_15;
          }

          if ((v45 & 0x8000000000000000LL) != 0)
          {
            __break(1u);
          }

          else if (v45 < *(void *)((char *)&dword_10 + (v46 & 0xFFFFFFFFFFFFF8LL)))
          {
            id v48 = *(id *)(v46 + 8 * v45 + 32);
LABEL_15:
            id v49 = v48;
            uint64_t v50 = v2 + 80;
            uint64_t v51 = *(void *)(v2 + 312);
            uint64_t v52 = v542[38];
            uint64_t v53 = v542[37];
            swift_bridgeObjectRelease(v47);
            v542[10] = v49;
            uint64_t v54 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
            static DisambiguationResult.chosenItem(_:)(v50, v54);
            uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
            uint64_t v2 = (uint64_t)v542;
            v55(v51, v53);
            id v56 = v49;
            goto LABEL_44;
          }

          __break(1u);
          goto LABEL_220;
        }
      }

      uint64_t v35 = swift_bridgeObjectRelease(v38);
    }
  }

  uint64_t v178 = Parse.DirectInvocation.userData.getter(v35);
  if (!v178
    || (uint64_t v179 = v178,
        specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v178),
        uint64_t v181 = v180,
        uint64_t v178 = swift_bridgeObjectRelease(v179),
        !v181))
  {
    uint64_t v214 = *(void *)(v2 + 304);
    uint64_t v215 = *(void *)(v2 + 312);
    uint64_t v216 = *(void *)(v2 + 288);
    uint64_t v124 = *(void *)(v2 + 296);
    uint64_t v217 = static os_log_type_t.error.getter(v178);
    uint64_t v121 = *(os_log_s **)(v216 + 16);
    os_log(_:dso:log:_:_:)(v217, &dword_0, v121, "invalid payload data", 20LL, 2LL, &_swiftEmptyArrayStorage);
    uint64_t v218 = *(uint64_t (**)(uint64_t, uint64_t))(v214 + 8);
    uint64_t v219 = v215;
LABEL_74:
    uint64_t v256 = v124;
LABEL_80:
    uint64_t v120 = v218(v219, v256);
    goto LABEL_213;
  }

  if (!*(void *)(v181 + 16)
    || (unint64_t v182 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E65697069636552LL, 0xE900000000000074LL),
        (v183 & 1) == 0))
  {
    uint64_t v279 = *(void *)(v2 + 304);
    uint64_t v278 = *(void *)(v2 + 312);
    uint64_t v281 = *(void *)(v2 + 288);
    uint64_t v280 = *(void *)(v2 + 296);
    uint64_t v282 = swift_bridgeObjectRelease(v181);
    uint64_t v283 = static os_log_type_t.error.getter(v282);
    uint64_t v121 = *(os_log_s **)(v281 + 16);
    os_log(_:dso:log:_:_:)( v283,  &dword_0,  v121,  "invalid payload data for contact",  32LL,  2LL,  &_swiftEmptyArrayStorage);
    uint64_t v218 = *(uint64_t (**)(uint64_t, uint64_t))(v279 + 8);
    uint64_t v219 = v278;
    uint64_t v256 = v280;
    goto LABEL_80;
  }

  uint64_t v494 = v2 + 152;
  uint64_t v184 = *(void *)(v2 + 288);
  uint64_t v185 = *(void *)(v181 + 56) + 16 * v182;
  uint64_t v38 = *(void **)v185;
  v527 = *(void **)(v185 + 8);
  uint64_t v532 = v3;
  swift_bridgeObjectRetain(v527);
  uint64_t v186 = swift_bridgeObjectRelease(v181);
  os_log_type_t v187 = static os_log_type_t.default.getter(v186);
  uint64_t v188 = *(os_log_s **)(v184 + 16);
  os_log_type_t v189 = v187;
  v500 = v38;
  v515 = (uint64_t *)(v2 + 200);
  if (os_log_type_enabled(v188, v187))
  {
    swift_bridgeObjectRetain_n(v527, 2LL);
    uint64_t v190 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v191 = swift_slowAlloc(32LL, -1LL);
    v548[0] = v191;
    *(_DWORD *)uint64_t v190 = 136315138;
    *(void *)(v2 + 48) = v38;
    *(void *)(v2 + 56) = v527;
    swift_bridgeObjectRetain(v527);
    uint64_t v192 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v193 = String.init<A>(describing:)(v2 + 48, v192);
    unint64_t v195 = v194;
    *(void *)(v2 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v193, v194, v548);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 96, v2 + 104);
    swift_bridgeObjectRelease_n(v527, 2LL);
    unint64_t v196 = v195;
    uint64_t v38 = v500;
    swift_bridgeObjectRelease(v196);
    _os_log_impl(&dword_0, v188, v189, "From Payload person: %s", v190, 0xCu);
    swift_arrayDestroy(v191, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v191, -1LL, -1LL);
    swift_slowDealloc(v190, -1LL, -1LL);
  }

  uint64_t v29 = PaginatedItemContainer.items.getter(*(void *)(v2 + 536));
  v545 = v188;
  if (!((unint64_t)v29 >> 62))
  {
    unint64_t v114 = *(void *)((char *)&dword_10 + (v29 & 0xFFFFFFFFFFFFF8LL));
    if (!v114)
    {
LABEL_224:
      uint64_t v291 = *(void *)(v2 + 304);
      uint64_t v290 = *(void *)(v2 + 312);
      uint64_t v292 = *(void *)(v2 + 296);
      swift_bridgeObjectRelease(v29);
      v293 = v527;
LABEL_93:
      swift_bridgeObjectRelease(v293);
      uint64_t v120 = (*(uint64_t (**)(uint64_t, uint64_t))(v291 + 8))(v290, v292);
      uint64_t v121 = v545;
      goto LABEL_213;
    }

    goto LABEL_54;
  }

LABEL_220:
  if (v29 < 0) {
    uint64_t v479 = v29;
  }
  else {
    uint64_t v479 = v29 & 0xFFFFFFFFFFFFFF8LL;
  }
  unint64_t v114 = _CocoaArrayWrapper.endIndex.getter(v479);
  if (!v114) {
    goto LABEL_224;
  }
LABEL_54:
  uint64_t v197 = 0LL;
  unint64_t v509 = v29 & 0xC000000000000001LL;
  unint64_t v497 = 136315138LL;
  uint64_t type = (uint64_t)&type metadata for Any + 8;
  while (1)
  {
    if (v509) {
      id v199 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v197, v29);
    }
    else {
      id v199 = *(id *)(v29 + 8 * v197 + 32);
    }
    unint64_t v200 = v199;
    uint64_t v113 = v197 + 1;
    if (__OFADD__(v197, 1LL)) {
      goto LABEL_195;
    }
    os_log_type_t v201 = static os_log_type_t.default.getter(v199);
    id v202 = v200;
    if (os_log_type_enabled(v545, v201))
    {
      uint64_t v203 = swift_slowAlloc(12LL, -1LL);
      uint64_t v204 = swift_slowAlloc(32LL, -1LL);
      v548[0] = v204;
      *(_DWORD *)uint64_t v203 = 136315138;
      uint64_t v205 = INPerson.encodeBase64.getter(v204);
      unint64_t v207 = v206;
      *(void *)(v203 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v205, v206, v548);

      unint64_t v208 = v207;
      uint64_t v2 = (uint64_t)v542;
      swift_bridgeObjectRelease(v208);
      _os_log_impl(&dword_0, v545, v201, "person from list: %s", (uint8_t *)v203, 0xCu);
      swift_arrayDestroy(v204, 1LL, type);
      uint64_t v209 = v204;
      uint64_t v38 = v500;
      swift_slowDealloc(v209, -1LL, -1LL);
      uint64_t v210 = swift_slowDealloc(v203, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v211 = INPerson.encodeBase64.getter(v210);
    uint64_t v213 = v212;
    if (!v527)
    {
      swift_bridgeObjectRelease(v212);
      goto LABEL_56;
    }

    if ((void *)v211 == v38 && v527 == (void *)v212)
    {
      swift_bridgeObjectRelease(v29);
      goto LABEL_166;
    }

    char v198 = _stringCompareWithSmolCheck(_:_:expecting:)(v211, v212, v38, v527, 0LL);
    swift_bridgeObjectRelease(v213);
    if ((v198 & 1) != 0) {
      break;
    }
LABEL_56:

    ++v197;
    if (v113 == v114) {
      goto LABEL_224;
    }
  }

  uint64_t v213 = v29;
LABEL_166:
  swift_bridgeObjectRelease(v213);
  uint64_t v435 = swift_bridgeObjectRelease(v527);
  os_log_type_t v436 = static os_log_type_t.default.getter(v435);
  id v56 = v202;
  if (os_log_type_enabled(v545, v436))
  {
    v437 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v438 = swift_slowAlloc(32LL, -1LL);
    v548[0] = v438;
    *(_DWORD *)v437 = 136315138;
    id v439 = v56;
    id v440 = [v439 description];
    uint64_t v441 = static String._unconditionallyBridgeFromObjectiveC(_:)(v440);
    unint64_t v443 = v442;

    uint64_t *v515 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v441, v443, v548);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v515, v532);

    uint64_t v2 = (uint64_t)v542;
    swift_bridgeObjectRelease(v443);
    _os_log_impl(&dword_0, v545, v436, "chosen item %s", v437, 0xCu);
    swift_arrayDestroy(v438, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v438, -1LL, -1LL);
    swift_slowDealloc(v437, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v445 = *(void *)(v2 + 304);
  uint64_t v444 = *(void *)(v2 + 312);
  uint64_t v446 = *(void *)(v2 + 296);
  *(void *)(v2 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v56;
  uint64_t v447 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
  static DisambiguationResult.chosenItem(_:)(v494, v447);
  (*(void (**)(uint64_t, uint64_t))(v445 + 8))(v444, v446);
LABEL_44:

  uint64_t v166 = *(void *)(v2 + 664);
  uint64_t v167 = *(void *)(v2 + 656);
  uint64_t v168 = *(void *)(v2 + 632);
  uint64_t v169 = *(void *)(v2 + 624);
  uint64_t v170 = *(void *)(v2 + 600);
  uint64_t v171 = *(void *)(v2 + 592);
  uint64_t v172 = *(void *)(v2 + 568);
  uint64_t v173 = *(void *)(v2 + 560);
  v174 = (void *)v2;
  uint64_t v175 = *(void *)(v2 + 552);
  uint64_t v176 = v174[66];
  uint64_t v487 = v174[63];
  uint64_t typea = v174[60];
  uint64_t v495 = v174[59];
  uint64_t v498 = v174[56];
  uint64_t v503 = v174[55];
  uint64_t v511 = v174[54];
  uint64_t v520 = v174[51];
  uint64_t v530 = v174[48];
  uint64_t v535 = v174[45];
  uint64_t v543 = v174[42];
  uint64_t v546 = v174[39];
  swift_task_dealloc(v166);
  swift_task_dealloc(v167);
  swift_task_dealloc(v168);
  swift_task_dealloc(v169);
  swift_task_dealloc(v170);
  swift_task_dealloc(v171);
  swift_task_dealloc(v172);
  swift_task_dealloc(v173);
  swift_task_dealloc(v175);
  swift_task_dealloc(v176);
  swift_task_dealloc(v487);
  swift_task_dealloc(typea);
  swift_task_dealloc(v495);
  swift_task_dealloc(v498);
  swift_task_dealloc(v503);
  swift_task_dealloc(v511);
  swift_task_dealloc(v520);
  swift_task_dealloc(v530);
  swift_task_dealloc(v535);
  swift_task_dealloc(v543);
  swift_task_dealloc(v546);
  unint64_t v177 = (uint64_t (*)(void))v174[1];
  return (id)v177();
}

void specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v33 = v1 + 64;
  uint64_t v4 = -1LL;
  uint64_t v5 = -1LL << *(_BYTE *)(v1 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v5);
  }
  unint64_t v6 = v4 & *(void *)(v1 + 64);
  uint64_t v7 = &v40;
  int64_t v32 = (unint64_t)(63 - v5) >> 6;
  swift_bridgeObjectRetain(v1);
  int64_t v8 = 0LL;
  uint64_t v9 = (uint64_t *)&demangling cache variable for type metadata for (key: String, value: Any);
  uint64_t v10 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v6)
    {
      uint64_t v34 = (v6 - 1) & v6;
      int64_t v35 = v8;
      unint64_t v16 = __clz(__rbit64(v6)) | (v8 << 6);
    }

    else
    {
      int64_t v17 = v8 + 1;
      if (__OFADD__(v8, 1LL)) {
        goto LABEL_36;
      }
      if (v17 >= v32)
      {
LABEL_33:
        outlined consume of [String : Any].Iterator._Variant(v1);
        return;
      }

      unint64_t v18 = *(void *)(v33 + 8 * v17);
      int64_t v19 = v8 + 1;
      if (!v18)
      {
        int64_t v19 = v8 + 2;
        if (v8 + 2 >= v32) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v33 + 8 * v19);
        if (!v18)
        {
          int64_t v19 = v8 + 3;
          if (v8 + 3 >= v32) {
            goto LABEL_33;
          }
          unint64_t v18 = *(void *)(v33 + 8 * v19);
          if (!v18)
          {
            int64_t v19 = v8 + 4;
            if (v8 + 4 >= v32) {
              goto LABEL_33;
            }
            unint64_t v18 = *(void *)(v33 + 8 * v19);
            if (!v18)
            {
              uint64_t v20 = v8 + 5;
              if (v8 + 5 >= v32) {
                goto LABEL_33;
              }
              unint64_t v18 = *(void *)(v33 + 8 * v20);
              if (!v18)
              {
                while (1)
                {
                  int64_t v19 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_37;
                  }
                  if (v19 >= v32) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = *(void *)(v33 + 8 * v19);
                  ++v20;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v19 = v8 + 5;
            }
          }
        }
      }

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  __int128 v36;
  _BYTE v37[32];
  void v38[2];
  uint64_t v39;
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v33 = v1 + 64;
  uint64_t v4 = -1LL;
  uint64_t v5 = -1LL << *(_BYTE *)(v1 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v5);
  }
  unint64_t v6 = v4 & *(void *)(v1 + 64);
  uint64_t v7 = &v39;
  int64_t v32 = (unint64_t)(63 - v5) >> 6;
  swift_bridgeObjectRetain(v1);
  int64_t v8 = 0LL;
  uint64_t v9 = &demangling cache variable for type metadata for String?;
  while (1)
  {
    if (v6)
    {
      int64_t v35 = (v6 - 1) & v6;
      unint64_t v16 = __clz(__rbit64(v6)) | (v8 << 6);
      int64_t v17 = v8;
    }

    else
    {
      unint64_t v18 = v8 + 1;
      if (__OFADD__(v8, 1LL)) {
        goto LABEL_36;
      }
      if (v18 >= v32)
      {
LABEL_33:
        outlined consume of [String : Any].Iterator._Variant(v1);
        return;
      }

      int64_t v19 = *(void *)(v33 + 8 * v18);
      int64_t v17 = v8 + 1;
      if (!v19)
      {
        int64_t v17 = v8 + 2;
        if (v8 + 2 >= v32) {
          goto LABEL_33;
        }
        int64_t v19 = *(void *)(v33 + 8 * v17);
        if (!v19)
        {
          int64_t v17 = v8 + 3;
          if (v8 + 3 >= v32) {
            goto LABEL_33;
          }
          int64_t v19 = *(void *)(v33 + 8 * v17);
          if (!v19)
          {
            int64_t v17 = v8 + 4;
            if (v8 + 4 >= v32) {
              goto LABEL_33;
            }
            int64_t v19 = *(void *)(v33 + 8 * v17);
            if (!v19)
            {
              uint64_t v20 = v8 + 5;
              if (v8 + 5 >= v32) {
                goto LABEL_33;
              }
              int64_t v19 = *(void *)(v33 + 8 * v20);
              if (!v19)
              {
                while (1)
                {
                  int64_t v17 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_37;
                  }
                  if (v17 >= v32) {
                    goto LABEL_33;
                  }
                  int64_t v19 = *(void *)(v33 + 8 * v17);
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v17 = v8 + 5;
            }
          }
        }
      }

uint64_t ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:)( uint64_t a1, uint64_t a2)
{
  v3[83] = v2;
  v3[82] = a2;
  v3[81] = a1;
  uint64_t v4 = type metadata accessor for ContactResolution(0LL);
  v3[84] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[85] = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  v3[86] = v6;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[87] = swift_task_alloc(v7);
  v3[88] = swift_task_alloc(v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[89] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for ResponseType(0LL);
  v3[90] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[91] = v10;
  v3[92] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DialogPhase(0LL);
  v3[93] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[94] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[95] = v13;
  v3[96] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v3[97] = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for ActivityType(0LL);
  v3[98] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v3[99] = v16;
  unint64_t v17 = (*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[100] = swift_task_alloc(v17);
  v3[101] = swift_task_alloc(v17);
  uint64_t v18 = type metadata accessor for Siri_Nlu_External_SystemPrompted(0LL);
  v3[102] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v3[103] = v19;
  unint64_t v20 = (*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[104] = swift_task_alloc(v20);
  v3[105] = swift_task_alloc(v20);
  uint64_t v21 = type metadata accessor for PommesContext.Source(0LL);
  v3[106] = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  v3[107] = v22;
  v3[108] = swift_task_alloc((*(void *)(v22 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  v3[109] = v23;
  unint64_t v24 = (*(void *)(*(void *)(v23 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[110] = swift_task_alloc(v24);
  v3[111] = swift_task_alloc(v24);
  uint64_t v25 = type metadata accessor for NLContextUpdate(0LL);
  v3[112] = v25;
  uint64_t v26 = *(void *)(v25 - 8);
  v3[113] = v26;
  unint64_t v27 = (*(void *)(v26 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[114] = swift_task_alloc(v27);
  v3[115] = swift_task_alloc(v27);
  uint64_t v28 = type metadata accessor for ImageSize(0LL);
  v3[116] = v28;
  uint64_t v29 = *(void *)(v28 - 8);
  v3[117] = v29;
  v3[118] = swift_task_alloc((*(void *)(v29 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for Locale(0LL);
  v3[119] = v30;
  uint64_t v31 = *(void *)(v30 - 8);
  v3[120] = v31;
  v3[121] = swift_task_alloc((*(void *)(v31 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:), 0LL, 0LL);
}

uint64_t ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:)()
{
  uint64_t v104 = (void *)(v0 + 56);
  os_log_type_t v99 = (void *)(v0 + 96);
  uint64_t v1 = *(void **)(v0 + 664);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INPerson>);
  int64_t v3 = PaginatedItemContainer.items.getter(v2);
  *(void *)(v0 + 976) = v3;
  swift_bridgeObjectRetain(v3);
  uint64_t v5 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySo8INPersonCGG_SSs5NeverOTg507_sSiSo8f34CSSIgygo_Si6offset_AB7elementtSSs5g162OIegnrzr_TR0150_s21GeoFlowDelegatePlugin37ShareETAContactDisambiguationStrategyC013makePromptForG014paginatedItems07SiriKitB06Output_pAF22PaginatedItemContainerVyJ34A21CG_tYaKFSSSi_AKtXEfU_Tf3nnnpf_nTf1cn_n(v4);
  swift_bridgeObjectRelease(v3);
  (*(void (**)(void *))(*v1 + 176LL))(v5);
  specialized static RecipientDisambiguationHelper.allHaveSameIdentifier(recipients:)(v3);
  int v7 = v6 & 1;
  *(_BYTE *)(v0 + 1068) = v6 & 1;
  uint64_t v8 = (os_log_s *)v1[2];
  *(void *)(v0 + 984) = v8;
  uint64_t v9 = swift_bridgeObjectRetain_n(v3, 2LL);
  os_log_type_t v10 = static os_log_type_t.default.getter(v9);
  oslog = v8;
  if (os_log_type_enabled(v8, v10))
  {
    uint64_t v11 = swift_slowAlloc(18LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    v107[0] = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v13 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
    swift_bridgeObjectRetain(v3);
    uint64_t v15 = Array.description.getter(v14, v13);
    unint64_t v17 = v16;
    swift_bridgeObjectRelease(v3);
    *(void *)(v0 + 640) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 640, v0 + 648);
    swift_bridgeObjectRelease_n(v3, 2LL);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v11 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 1024;
    *(_DWORD *)(v0 + 1064) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1064, v0 + 1068);
    _os_log_impl(&dword_0, v8, v10, "persons %s handleDisambiguation %{BOOL}d", (uint8_t *)v11, 0x12u);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v3, 2LL);
  }

  uint64_t v18 = *(void *)(v0 + 968);
  uint64_t v95 = *(void *)(v0 + 960);
  uint64_t v97 = *(void *)(v0 + 952);
  uint64_t v19 = *(void **)(v0 + 664);
  unint64_t v20 = v19 + 4;
  uint64_t v21 = v19[7];
  uint64_t v22 = v19[8];
  __swift_project_boxed_opaque_existential_1(v19 + 4, v21);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, __n128))(v22 + 32);
  __n128 v24 = swift_bridgeObjectRetain(v3);
  v23(v21, v22, v24);
  uint64_t v25 = *(void *)(v0 + 80);
  uint64_t v26 = *(void *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1(v104, v25);
  dispatch thunk of DeviceState.siriLocale.getter(v25, v26);
  unint64_t v27 = specialized static DisambiguationListUtils.makeDisambiguationItems(persons:locale:)(v3, v18);
  swift_bridgeObjectRelease(v3);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
  *(void *)(v0 + 99__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v28;
  v28(v18, v97);
  __swift_destroy_boxed_opaque_existential_0Tm(v104);
  unint64_t v105 = v19;
  uint64_t v29 = v19[7];
  uint64_t v30 = v19[8];
  __swift_project_boxed_opaque_existential_1(v20, v29);
  (*(void (**)(uint64_t, uint64_t))(v30 + 32))(v29, v30);
  uint64_t v31 = *(void *)(v0 + 120);
  uint64_t v32 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1(v99, v31);
  char v33 = dispatch thunk of DeviceState.isCarPlay.getter(v31, v32);
  __swift_destroy_boxed_opaque_existential_0Tm(v99);
  uint64_t v34 = v3;
  if ((v33 & 1) != 0)
  {
    uint64_t v100 = v20;
    int64_t v35 = (void *)static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForCarPlay(disambiguationItems:deviceIsLocked:)( v27,  0LL);
    uint64_t v36 = swift_bridgeObjectRelease(v27);
  }

  else
  {
    uint64_t v44 = v105[7];
    uint64_t v45 = v105[8];
    __swift_project_boxed_opaque_existential_1(v20, v44);
    (*(void (**)(uint64_t, uint64_t))(v45 + 32))(v44, v45);
    uint64_t v46 = *(void *)(v0 + 160);
    uint64_t v47 = *(void *)(v0 + 168);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 136), v46);
    char v48 = dispatch thunk of DeviceState.isPad.getter(v46, v47);
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 136));
    if ((v48 & 1) != 0)
    {
      uint64_t v100 = v20;
      uint64_t v49 = *(void *)(v0 + 944);
      uint64_t v50 = *(void *)(v0 + 936);
      uint64_t v51 = *(void *)(v0 + 928);
      (*(void (**)(uint64_t, void, uint64_t))(v50 + 104))(v49, enum case for ImageSize.default(_:), v51);
      uint64_t v52 = static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetPad(disambiguationItems:deviceIsLocked:imageSize:)( v27,  0LL,  v49);
    }

    else
    {
      uint64_t v53 = v105[7];
      uint64_t v54 = v105[8];
      __swift_project_boxed_opaque_existential_1(v20, v53);
      (*(void (**)(uint64_t, uint64_t))(v54 + 32))(v53, v54);
      uint64_t v55 = *(void *)(v0 + 200);
      uint64_t v56 = *(void *)(v0 + 208);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), v55);
      char v57 = dispatch thunk of DeviceState.isPhone.getter(v55, v56);
      __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 176));
      if ((v57 & 1) == 0)
      {
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(v3);
        uint64_t v78 = type metadata accessor for RuntimeError();
        uint64_t v79 = swift_allocObject(v78, 32LL, 7LL);
        *(void *)(v79 + 16) = 0xD000000000000012LL;
        *(void *)(v79 + 24) = 0x800000000009CBF0LL;
        uint64_t v80 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError,  (uint64_t (*)(uint64_t))type metadata accessor for RuntimeError,  (uint64_t)&protocol conformance descriptor for RuntimeError);
        uint64_t v106 = swift_allocError(v78, v80, 0LL, 0LL);
        uint64_t *v81 = v79;
        swift_willThrow(v106);
        uint64_t v82 = *(void *)(v0 + 944);
        uint64_t v83 = *(void *)(v0 + 920);
        uint64_t v84 = *(void *)(v0 + 912);
        uint64_t v85 = *(void *)(v0 + 888);
        uint64_t v86 = *(void *)(v0 + 880);
        uint64_t v87 = *(void *)(v0 + 864);
        uint64_t v88 = *(void *)(v0 + 840);
        uint64_t v89 = *(void *)(v0 + 832);
        uint64_t v90 = *(void *)(v0 + 808);
        uint64_t v91 = *(void *)(v0 + 800);
        uint64_t v92 = *(void *)(v0 + 776);
        uint64_t v93 = *(void *)(v0 + 768);
        uint64_t v94 = *(void *)(v0 + 744);
        uint64_t v96 = *(void *)(v0 + 736);
        uint64_t v98 = *(void *)(v0 + 712);
        uint64_t v101 = *(void *)(v0 + 704);
        os_log_t osloga = *(os_log_t *)(v0 + 696);
        swift_task_dealloc(*(void *)(v0 + 968));
        swift_task_dealloc(v82);
        swift_task_dealloc(v83);
        swift_task_dealloc(v84);
        swift_task_dealloc(v85);
        swift_task_dealloc(v86);
        swift_task_dealloc(v87);
        swift_task_dealloc(v88);
        swift_task_dealloc(v89);
        swift_task_dealloc(v90);
        swift_task_dealloc(v91);
        swift_task_dealloc(v92);
        swift_task_dealloc(v93);
        swift_task_dealloc(v94);
        swift_task_dealloc(v96);
        swift_task_dealloc(v98);
        swift_task_dealloc(v101);
        swift_task_dealloc(osloga);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }

      uint64_t v100 = v20;
      uint64_t v49 = *(void *)(v0 + 944);
      uint64_t v50 = *(void *)(v0 + 936);
      uint64_t v51 = *(void *)(v0 + 928);
      (*(void (**)(uint64_t, void, uint64_t))(v50 + 104))(v49, enum case for ImageSize.default(_:), v51);
      uint64_t v52 = static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetPhone(disambiguationItems:deviceIsLocked:imageSize:)( v27,  0LL,  v49);
    }

    int64_t v35 = (void *)v52;
    swift_bridgeObjectRelease(v27);
    uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
  }

  *(void *)(v0 + 1000) = v35;
  os_log_type_t v58 = static os_log_type_t.info.getter(v36, v37, v38, v39, v40, v41, v42, v43);
  if (os_log_type_enabled(oslog, v58))
  {
    id v59 = v35;
    uint64_t v60 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v61 = swift_slowAlloc(32LL, -1LL);
    v107[0] = v61;
    *(_DWORD *)uint64_t v60 = 136315138;
    id v62 = v59;
    id v63 = [v62 description];
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    unint64_t v66 = v65;

    *(void *)(v0 + 63__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v66, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 632, v0 + 640);

    unint64_t v67 = v66;
    uint64_t v34 = v3;
    swift_bridgeObjectRelease(v67);
    _os_log_impl(&dword_0, oslog, v58, "disambiguation snippet is: %s", v60, 0xCu);
    swift_arrayDestroy(v61, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1LL, -1LL);
    swift_slowDealloc(v60, -1LL, -1LL);
  }

  uint64_t v68 = *(void *)(v0 + 664);
  uint64_t v69 = v105[7];
  uint64_t v70 = v105[8];
  __swift_project_boxed_opaque_existential_1(v100, v69);
  uint64_t v71 = *(void (**)(uint64_t, uint64_t, __n128))(v70 + 32);
  __n128 v72 = swift_bridgeObjectRetain(v34);
  v71(v69, v70, v72);
  uint64_t v73 = *(void *)(v0 + 240);
  uint64_t v74 = *(void *)(v0 + 248);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 216), v73);
  dispatch thunk of DeviceState.siriLocale.getter(v73, v74);
  uint64_t v75 = *(void *)(v68 + 96);
  uint64_t v76 = (void *)swift_task_alloc(dword_C5614);
  *(void *)(v0 + 1008) = v76;
  *uint64_t v76 = v0;
  v76[1] = ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:);
  return TypedDisambiguationItems.makeNLContextUpdate(locale:weightedPromptResponseTargets:)( *(void *)(v0 + 920),  *(void *)(v0 + 968),  v75,  v34,  0);
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v1 = (void *)(*(void *)v0 + 216LL);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 992LL);
  int64_t v3 = *(void *)(*(void *)v0 + 976LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 968LL);
  uint64_t v5 = *(void *)(*(void *)v0 + 952LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 1008LL));
  swift_bridgeObjectRelease(v3);
  v2(v4, v5);
  __swift_destroy_boxed_opaque_existential_0Tm(v1);
  return swift_task_switch(ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v2 = *v1;
  int64_t v3 = *(void *)(*v1 + 1032);
  *(void *)(*v1 + 1040) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(*(void *)(v2 + 976));
  if (v0) {
    uint64_t v4 = ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:);
  }
  else {
    uint64_t v4 = ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:);
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v1 = *(void *)(v0 + 1016);
  uint64_t v2 = *(void **)(v0 + 1000);
  int64_t v3 = *(void *)(v0 + 920);
  uint64_t v4 = *(void *)(v0 + 904);
  uint64_t v5 = *(void *)(v0 + 896);
  char v6 = *(void *)(v0 + 768);
  int v7 = *(void *)(v0 + 760);
  uint64_t v8 = *(void *)(v0 + 752);
  swift_release(*(void *)(v0 + 1024));
  swift_release(v1);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v9 = *(void *)(v0 + 944);
  os_log_type_t v10 = *(void *)(v0 + 920);
  uint64_t v11 = *(void *)(v0 + 912);
  uint64_t v12 = *(void *)(v0 + 888);
  uint64_t v13 = *(void *)(v0 + 880);
  uint64_t v14 = *(void *)(v0 + 864);
  uint64_t v15 = *(void *)(v0 + 840);
  unint64_t v16 = *(void *)(v0 + 832);
  unint64_t v17 = *(void *)(v0 + 808);
  uint64_t v19 = *(void *)(v0 + 800);
  unint64_t v20 = *(void *)(v0 + 776);
  uint64_t v21 = *(void *)(v0 + 768);
  uint64_t v22 = *(void *)(v0 + 744);
  uint64_t v23 = *(void *)(v0 + 736);
  __n128 v24 = *(void *)(v0 + 712);
  uint64_t v25 = *(void *)(v0 + 704);
  uint64_t v26 = *(void *)(v0 + 696);
  swift_task_dealloc(*(void *)(v0 + 968));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = (void *)(*(void *)v0 + 376LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 1056LL));
  __swift_destroy_boxed_opaque_existential_0Tm(v1);
  return swift_task_switch(ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v31 = *(void *)(v0 + 1040);
  uint64_t v1 = *(void *)(v0 + 1016);
  uint64_t v2 = *(void **)(v0 + 1000);
  int64_t v3 = *(void *)(v0 + 984);
  uint64_t v4 = *(void *)(v0 + 920);
  uint64_t v5 = *(void *)(v0 + 904);
  char v6 = *(void *)(v0 + 896);
  int v7 = *(void *)(v0 + 768);
  uint64_t v8 = *(void *)(v0 + 760);
  uint64_t v9 = *(void *)(v0 + 752);
  swift_release(*(void *)(v0 + 1024));
  os_log_type_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  uint64_t v11 = static os_log_type_t.default.getter(v10);
  os_log(_:dso:log:_:_:)( v11,  &dword_0,  v3,  "failed to build disambiguate contacts handles dialog",  52LL,  2LL,  &_swiftEmptyArrayStorage);
  uint64_t v12 = lazy protocol witness table accessor for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError();
  char v33 = swift_allocError( &type metadata for ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError,  v12,  0LL,  0LL);
  *uint64_t v13 = 0;
  swift_willThrow(v33);
  swift_release(v1);

  swift_errorRelease(v31);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v14 = *(void *)(v0 + 944);
  uint64_t v15 = *(void *)(v0 + 920);
  unint64_t v16 = *(void *)(v0 + 912);
  unint64_t v17 = *(void *)(v0 + 888);
  uint64_t v18 = *(void *)(v0 + 880);
  uint64_t v19 = *(void *)(v0 + 864);
  unint64_t v20 = *(void *)(v0 + 840);
  uint64_t v21 = *(void *)(v0 + 832);
  uint64_t v22 = *(void *)(v0 + 808);
  __n128 v24 = *(void *)(v0 + 800);
  uint64_t v25 = *(void *)(v0 + 776);
  uint64_t v26 = *(void *)(v0 + 768);
  unint64_t v27 = *(void *)(v0 + 744);
  uint64_t v28 = *(void *)(v0 + 736);
  uint64_t v29 = *(void *)(v0 + 712);
  uint64_t v30 = *(void *)(v0 + 704);
  uint64_t v32 = *(void *)(v0 + 696);
  swift_task_dealloc(*(void *)(v0 + 968));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

os_log_s *ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:)()
{
  unint64_t v128 = v0 + 608;
  uint64_t v2 = *(_BYTE **)(v0 + 664);
  if (v2[80] == 1)
  {
    int64_t v3 = *(os_log_s **)(v0 + 984);
    uint64_t v4 = *(void *)(v0 + 888);
    uint64_t v1 = *(void *)(v0 + 864);
    (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 856) + 104LL))( v1,  enum case for PommesContext.Source.pluginDefined(_:),  *(void *)(v0 + 848));
    PommesContext.init(source:domain:listenAfterSpeaking:)(v1, 7300455LL, 0xE300000000000000LL, 1LL);
    uint64_t v5 = type metadata accessor for PommesContext(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 0LL, 1LL, v5);
    uint64_t v6 = NLContextUpdate.pommesContext.setter(v4);
    os_log_type_t v14 = static os_log_type_t.info.getter(v6, v7, v8, v9, v10, v11, v12, v13);
    uint64_t v15 = os_log_type_enabled(v3, v14);
    if ((_DWORD)v15)
    {
      uint64_t v120 = (os_log_s *)(v0 + 624);
      loga = *(os_log_s **)(v0 + 984);
      uint64_t v16 = *(void *)(v0 + 920);
      uint64_t v17 = *(void *)(v0 + 880);
      uint64_t v18 = *(void *)(v0 + 872);
      uint64_t v1 = swift_slowAlloc(12LL, -1LL);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v131 = (os_log_s *)v19;
      *(_DWORD *)uint64_t v1 = 136315138;
      uint64_t v20 = swift_beginAccess(v16, v0 + 544, 32LL, 0LL);
      NLContextUpdate.pommesContext.getter(v20);
      swift_endAccess(v0 + 544);
      uint64_t v21 = String.init<A>(describing:)(v17, v18);
      unint64_t v23 = v22;
      *(void *)(v0 + 624) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, (uint64_t *)&v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 624, v0 + 632);
      swift_bridgeObjectRelease(v23);
      _os_log_impl( &dword_0,  loga,  v14,  "updated nl context with pommes context. pommesContext = %s",  (uint8_t *)v1,  0xCu);
      swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1LL, -1LL);
      uint64_t v15 = swift_slowDealloc(v1, -1LL, -1LL);
    }
  }

  else
  {
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v2 + 144LL))();
    if ((v15 & 1) != 0)
    {
      uint64_t v24 = *(void *)(v0 + 840);
      uint64_t v25 = *(void *)(v0 + 832);
      uint64_t v26 = *(void *)(v0 + 824);
      uint64_t v1 = *(void *)(v0 + 816);
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
      uint64_t v28 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL) - 8);
      uint64_t v29 = swift_allocObject( v27,  ((*(unsigned __int8 *)(v28 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))
            + *(void *)(v28 + 72),
              *(unsigned __int8 *)(v28 + 80) | 7LL);
      *(_OWORD *)(v29 + 16) = xmmword_95430;
      uint64_t v30 = type metadata accessor for UsoTaskBuilder_noVerb_common_Person(0LL);
      swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
      uint64_t v31 = UsoTaskBuilder_noVerb_common_Person.init()();
      uint64_t v32 = type metadata accessor for UsoEntityBuilder_common_Person(0LL);
      swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
      uint64_t v33 = UsoEntityBuilder_common_Person.init()();
      dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
      uint64_t v34 = static Siri_Nlu_External_SystemPrompted.from(_:)(v31, v24);
      Siri_Nlu_External_SystemDialogAct.init()(v34);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v25, v24, v1);
      Siri_Nlu_External_SystemDialogAct.prompted.setter(v25);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v1);
      swift_release(v31);
      swift_release(v33);
      uint64_t v15 = NLContextUpdate.nluSystemDialogActs.setter(v29);
    }
  }

  os_log_t log = (os_log_t)(v0 + 600);
  int64_t v35 = *(os_log_s **)(v0 + 984);
  os_log_type_t v36 = static os_log_type_t.default.getter(v15);
  uint64_t v37 = os_log_type_enabled(v35, v36);
  if ((_DWORD)v37)
  {
    uint64_t v120 = *(os_log_s **)(v0 + 984);
    uint64_t v38 = *(void *)(v0 + 920);
    uint64_t v39 = *(void *)(v0 + 912);
    uint64_t v1 = *(void *)(v0 + 904);
    uint64_t v40 = *(void *)(v0 + 896);
    uint64_t v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v42 = swift_slowAlloc(32LL, -1LL);
    uint64_t v131 = (os_log_s *)v42;
    *(_DWORD *)uint64_t v41 = 136315138;
    swift_beginAccess(v38, v0 + 496, 0LL, 0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v39, v38, v40);
    uint64_t v43 = String.init<A>(describing:)(v39, v40);
    int64_t v35 = (os_log_s *)v44;
    *(void *)(v0 + 608) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, (uint64_t *)&v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v128, v0 + 616);
    swift_bridgeObjectRelease(v35);
    _os_log_impl(&dword_0, v120, v36, "makePromptForDisambiguation nlContextUpdate is: %s", v41, 0xCu);
    swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1LL, -1LL);
    uint64_t v37 = swift_slowDealloc(v41, -1LL, -1LL);
  }

  uint64_t v45 = *(os_log_s **)(v0 + 984);
  if (*(_BYTE *)(v0 + 1068) == 1)
  {
    os_log_type_t v46 = static os_log_type_t.default.getter(v37);
    BOOL v47 = os_log_type_enabled(v45, v46);
    uint64_t v48 = *(void *)(v0 + 976);
    if (!v47)
    {
      unint64_t v55 = v48 & 0xC000000000000001LL;
      goto LABEL_18;
    }

    swift_bridgeObjectRetain_n(*(void *)(v0 + 976), 2LL);
    int64_t v35 = (os_log_s *)swift_slowAlloc(12LL, -1LL);
    id result = (os_log_s *)swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)int64_t v35 = 136315138;
    uint64_t v1 = *(void *)(v0 + 976);
    unint64_t v128 = v48 & 0xC000000000000001LL;
    uint64_t v131 = result;
    uint64_t v120 = result;
    if ((v48 & 0xC000000000000001LL) != 0) {
      goto LABEL_25;
    }
    if (*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL)))
    {
      id v50 = *(id *)(v1 + 32);
      while (1)
      {
        uint64_t v118 = *(os_log_s **)(v0 + 984);
        id v51 = [v50 description];
        uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
        unint64_t v54 = v53;

        *(void *)(v0 + 59__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v54, (uint64_t *)&v131);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 592, log);
        swift_bridgeObjectRelease_n(v1, 2LL);
        swift_bridgeObjectRelease(v54);
        _os_log_impl(&dword_0, v118, v46, "handleDisambiguation %s", (uint8_t *)v35, 0xCu);
        swift_arrayDestroy(v120, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v120, -1LL, -1LL);
        swift_slowDealloc(v35, -1LL, -1LL);
        uint64_t v48 = *(void *)(v0 + 976);
        unint64_t v55 = v128;
LABEL_18:
        if (v55) {
          break;
        }
        if (*(void *)((char *)&dword_10 + (v48 & 0xFFFFFFFFFFFFF8LL)))
        {
          id v84 = *(id *)(v48 + 32);
          goto LABEL_21;
        }

        __break(1u);
LABEL_25:
        id v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v1);
        uint64_t v1 = *(void *)(v0 + 976);
      }

      id v84 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v48);
LABEL_21:
      id v85 = v84;
      uint64_t v86 = *(void *)(v0 + 968);
      uint64_t v129 = *(void *)(v0 + 808);
      uint64_t v87 = *(void *)(v0 + 792);
      os_log_t logc = *(os_log_t *)(v0 + 784);
      uint64_t v88 = *(void **)(v0 + 664);
      uint64_t v89 = v88 + 4;
      type metadata accessor for DialogPerson(0LL);
      uint64_t v91 = v88[7];
      uint64_t v90 = v88[8];
      __swift_project_boxed_opaque_existential_1(v89, v91);
      (*(void (**)(uint64_t, uint64_t))(v90 + 32))(v91, v90);
      uint64_t v92 = *(void *)(v0 + 440);
      uint64_t v93 = *(void *)(v0 + 448);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 416), v92);
      dispatch thunk of DeviceState.siriLocale.getter(v92, v93);
      *(void *)(v0 + 1016) = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)(v85, v86, 0LL);
      uint64_t v94 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 416));
      static SiriKitEventSender.current.getter(v94);
      uint64_t v117 = *(void *)(v0 + 368);
      os_log_t v119 = *(os_log_t *)(v0 + 360);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 336), (uint64_t)v119);
      (*(void (**)(uint64_t, void, os_log_t))(v87 + 104))( v129,  enum case for ActivityType.disambiguation(_:),  logc);
      uint64_t v95 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INShareETAIntent,  &OBJC_CLASS___INShareETAIntent_ptr);
      id result = (os_log_s *)[(id)swift_getObjCClassFromMetadata(v95) typeName];
      if (result)
      {
        uint64_t v96 = result;
        uint64_t v115 = *(void *)(v0 + 920);
        os_log_t logd = *(os_log_t *)(v0 + 904);
        uint64_t v130 = *(void *)(v0 + 896);
        uint64_t v97 = *(void *)(v0 + 776);
        uint64_t v98 = *(void *)(v0 + 744);
        uint64_t v110 = *(void *)(v0 + 808);
        uint64_t v111 = *(void *)(v0 + 728);
        uint64_t v112 = *(void *)(v0 + 736);
        uint64_t v113 = *(void *)(v0 + 720);
        uint64_t v114 = *(void *)(v0 + 712);
        type metadata accessor for SiriKitEvent(0LL);
        uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
        uint64_t v101 = v100;

        uint64_t v102 = enum case for SiriKitReliabilityCodes.normal(_:);
        uint64_t v103 = type metadata accessor for SiriKitReliabilityCodes(0LL);
        uint64_t v104 = *(void *)(v103 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 104))(v97, v102, v103);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v104 + 56))(v97, 0LL, 1LL, v103);
        uint64_t v105 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)( v110,  v99,  v101,  v97,  closure #1 in ShareETAPromptForContactStrategy.makePromptForValue(),  0LL);
        dispatch thunk of SiriKitEventSending.send(_:)(v105, v119, v117);
        swift_release(v105);
        uint64_t v106 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 336));
        static DialogPhase.clarification.getter(v106);
        OutputGenerationManifest.init(dialogPhase:_:)(v98, AnswerETAIntentResponseCode.rawValue.getter, 0LL);
        OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
        OutputGenerationManifest.responseViewId.setter(0x6465722D7370616DLL, 0xED00006465746361LL);
        (*(void (**)(uint64_t, void, uint64_t))(v111 + 104))( v112,  enum case for ResponseType.disambiguation(_:),  v113);
        OutputGenerationManifest.responseType.setter(v112);
        swift_beginAccess(v115, v0 + 568, 0LL, 0LL);
        (*((void (**)(uint64_t, uint64_t, uint64_t))logd + 2))(v114, v115, v130);
        (*((void (**)(uint64_t, void, uint64_t, uint64_t))logd + 7))(v114, 0LL, 1LL, v130);
        OutputGenerationManifest.nlContextUpdate.setter(v114);
        type metadata accessor for CATGlobals(0LL);
        uint64_t v107 = CATGlobals.__allocating_init()();
        uint64_t v108 = type metadata accessor for ContactResolutionSnippetGenerator(0LL);
        swift_allocObject(v108, *(unsigned int *)(v108 + 48), *(unsigned __int16 *)(v108 + 52));
        *(void *)(v0 + 1024) = ContactResolutionSnippetGenerator.init(appBundleId:globals:)( 0x6C7070612E6D6F63LL,  0xEE007370614D2E65LL,  v107);
        unint64_t v109 = (void *)swift_task_alloc(async function pointer to ContactResolutionSnippetGenerator.generateSimpleDisambiguationMixedLabels(contacts:directInvocationID:outputGenerationManifest:)[1]);
        *(void *)(v0 + 103__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v109;
        void *v109 = v0;
        v109[1] = ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:);
        return (os_log_s *)ContactResolutionSnippetGenerator.generateSimpleDisambiguationMixedLabels(contacts:directInvocationID:outputGenerationManifest:)( *(void *)(v0 + 648),  *(void *)(v0 + 976),  0xD00000000000002CLL,  0x800000000009B750LL,  *(void *)(v0 + 768));
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  else
  {
    uint64_t v56 = swift_bridgeObjectRelease(*(void *)(v0 + 976));
    os_log_type_t v57 = static os_log_type_t.default.getter(v56);
    if (os_log_type_enabled(v45, v57))
    {
      uint64_t v121 = *(os_log_s **)(v0 + 984);
      uint64_t v58 = *(void *)(v0 + 664);
      swift_retain_n(v58, 2LL);
      id v59 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v60 = swift_slowAlloc(32LL, -1LL);
      uint64_t v131 = (os_log_s *)v60;
      *(_DWORD *)id v59 = 136315138;
      id v61 = *(id *)(v58 + 72);
      id v62 = [v61 description];
      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
      unint64_t v65 = v64;

      *(void *)(v0 + 600) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v65, (uint64_t *)&v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(log, v128);
      swift_release_n(v58, 2LL);
      swift_bridgeObjectRelease(v65);
      _os_log_impl(&dword_0, v121, v57, "contactDisambiguation %s", v59, 0xCu);
      swift_arrayDestroy(v60, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1LL, -1LL);
      swift_slowDealloc(v59, -1LL, -1LL);
    }

    uint64_t v66 = *(void *)(v0 + 968);
    os_log_t v122 = *(os_log_t *)(v0 + 920);
    unint64_t v67 = *(uint64_t **)(v0 + 704);
    uint64_t v116 = *(void *)(v0 + 672);
    uint64_t v68 = *(void **)(v0 + 664);
    type metadata accessor for DialogPerson(0LL);
    uint64_t v69 = v68[8];
    uint64_t v70 = (void *)v68[9];
    uint64_t v71 = v68[7];
    __swift_project_boxed_opaque_existential_1(v68 + 4, v71);
    __n128 v72 = *(void (**)(uint64_t, uint64_t))(v69 + 32);
    id v73 = v70;
    v72(v71, v69);
    uint64_t v74 = *(void *)(v0 + 280);
    uint64_t v75 = *(void *)(v0 + 288);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 256), v74);
    dispatch thunk of DeviceState.siriLocale.getter(v74, v75);
    uint64_t v76 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)(v73, v66, 0LL);
    *(void *)(v0 + 1048) = v76;
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 256));
    char v77 = (char *)v67
    *unint64_t v67 = v76;
    uint64_t v78 = enum case for BehaviorAfterSpeaking.listen(_:);
    uint64_t v79 = type metadata accessor for BehaviorAfterSpeaking(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v79 - 8) + 104LL))(v77, v78, v79);
    *(void *)(v0 + 400) = v116;
    *(void *)(v0 + 408) = &protocol witness table for ContactResolution;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((void *)(v0 + 376));
    outlined init with copy of ContactResolution((uint64_t)v67, (uint64_t)boxed_opaque_existential_0);
    swift_beginAccess(v122, v0 + 520, 0LL, 0LL);
    uint64_t v81 = *(int **)(*v68 + 248LL);
    uint64_t v82 = v81[1];
    os_log_t logb = (os_log_t)((char *)v81 + *v81);
    swift_retain(v76);
    uint64_t v83 = (void *)swift_task_alloc(v82);
    *(void *)(v0 + 1056) = v83;
    void *v83 = v0;
    v83[1] = ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:);
    return (os_log_s *)((uint64_t (*)(uint64_t, uint64_t, void, void))logb)( v0 + 16,  v0 + 376,  *(void *)(v0 + 656),  *(void *)(v0 + 920));
  }

  return result;
}

id ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:)()
{
  uint64_t v1 = (__int128 *)(v0 + 16);
  if (!*(void *)(v0 + 40))
  {
    uint64_t v33 = *(void *)(v0 + 1048);
    uint64_t v34 = *(void **)(v0 + 1000);
    uint64_t v35 = *(void *)(v0 + 984);
    uint64_t v78 = *(void *)(v0 + 920);
    uint64_t v36 = *(void *)(v0 + 904);
    uint64_t v37 = *(void *)(v0 + 896);
    uint64_t v38 = *(void *)(v0 + 704);
    uint64_t v39 = outlined destroy of (label: String?, value: Any)?( (uint64_t)v1,  &demangling cache variable for type metadata for Output?);
    uint64_t v40 = static os_log_type_t.default.getter(v39);
    uint64_t v41 = os_log(_:dso:log:_:_:)( v40,  &dword_0,  v35,  "failed to build disambiguate contacts dialog",  44LL,  2LL,  &_swiftEmptyArrayStorage);
    uint64_t v42 = static os_log_type_t.default.getter(v41);
    os_log(_:dso:log:_:_:)( v42,  &dword_0,  v35,  "failed to build disambiguate contacts dialog",  44LL,  2LL,  &_swiftEmptyArrayStorage);
    unint64_t v43 = lazy protocol witness table accessor for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError();
    uint64_t v81 = swift_allocError( &type metadata for ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError,  v43,  0LL,  0LL);
    *unint64_t v44 = 1;
    swift_willThrow(v81);

    swift_release(v33);
    outlined destroy of ContactResolution(v38);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v78, v37);
    uint64_t v45 = *(void *)(v0 + 944);
    uint64_t v46 = *(void *)(v0 + 920);
    uint64_t v47 = *(void *)(v0 + 912);
    uint64_t v48 = *(void *)(v0 + 888);
    uint64_t v49 = *(void *)(v0 + 880);
    uint64_t v50 = *(void *)(v0 + 864);
    uint64_t v51 = *(void *)(v0 + 840);
    uint64_t v52 = *(void *)(v0 + 832);
    uint64_t v53 = *(void *)(v0 + 808);
    uint64_t v59 = *(void *)(v0 + 800);
    uint64_t v62 = *(void *)(v0 + 776);
    uint64_t v65 = *(void *)(v0 + 768);
    uint64_t v68 = *(void *)(v0 + 744);
    uint64_t v70 = *(void *)(v0 + 736);
    uint64_t v73 = *(void *)(v0 + 712);
    uint64_t v76 = *(void *)(v0 + 704);
    uint64_t v79 = *(void *)(v0 + 696);
    swift_task_dealloc(*(void *)(v0 + 968));
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v59);
    swift_task_dealloc(v62);
    swift_task_dealloc(v65);
    swift_task_dealloc(v68);
    swift_task_dealloc(v70);
    swift_task_dealloc(v73);
    swift_task_dealloc(v76);
    swift_task_dealloc(v79);
    uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
    return (id)v32();
  }

  uint64_t v2 = *(void *)(v0 + 800);
  uint64_t v3 = *(void *)(v0 + 792);
  uint64_t v4 = *(void *)(v0 + 784);
  uint64_t v5 = outlined init with take of CATType(v1, v0 + 296);
  static SiriKitEventSender.current.getter(v5);
  uint64_t v71 = *(void *)(v0 + 488);
  uint64_t v74 = *(void *)(v0 + 480);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 456), v74);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for ActivityType.disambiguation(_:), v4);
  uint64_t v6 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INShareETAIntent,  &OBJC_CLASS___INShareETAIntent_ptr);
  id result = [(id)swift_getObjCClassFromMetadata(v6) typeName];
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v56 = *(void **)(v0 + 1000);
    uint64_t v57 = *(void *)(v0 + 1048);
    uint64_t v63 = *(void *)(v0 + 896);
    uint64_t v66 = *(void *)(v0 + 920);
    uint64_t v55 = *(void *)(v0 + 800);
    uint64_t v9 = *(void *)(v0 + 776);
    uint64_t v10 = *(void *)(v0 + 704);
    uint64_t v11 = *(void *)(v0 + 696);
    uint64_t v12 = *(void *)(v0 + 688);
    uint64_t v13 = *(void *)(v0 + 680);
    uint64_t v58 = *(void *)(v0 + 648);
    uint64_t v60 = *(void *)(v0 + 904);
    type metadata accessor for SiriKitEvent(0LL);
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v54 = v15;

    uint64_t v16 = enum case for SiriKitReliabilityCodes.normal(_:);
    uint64_t v17 = type metadata accessor for SiriKitReliabilityCodes(0LL);
    uint64_t v18 = *(void *)(v17 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 104))(v9, v16, v17);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v9, 0LL, 1LL, v17);
    outlined init with copy of ContactResolution(v10, v11);
    uint64_t v19 = *(unsigned __int8 *)(v13 + 80);
    uint64_t v20 = (v19 + 16) & ~v19;
    uint64_t v21 = swift_allocObject(&unk_B88C8, v20 + v12, v19 | 7);
    outlined init with take of ContactResolution(v11, v21 + v20, type metadata accessor for ContactResolution);
    uint64_t v22 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)( v55,  v14,  v54,  v9,  partial apply for closure #3 in ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:),  v21);
    dispatch thunk of SiriKitEventSending.send(_:)(v22, v74, v71);

    swift_release(v57);
    swift_release(v22);
    outlined destroy of ContactResolution(v10);
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 456));
    outlined init with take of CATType((__int128 *)(v0 + 296), v58);
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v66, v63);
    uint64_t v23 = *(void *)(v0 + 944);
    uint64_t v24 = *(void *)(v0 + 920);
    uint64_t v25 = *(void *)(v0 + 912);
    uint64_t v26 = *(void *)(v0 + 888);
    uint64_t v27 = *(void *)(v0 + 880);
    uint64_t v28 = *(void *)(v0 + 864);
    uint64_t v29 = *(void *)(v0 + 840);
    uint64_t v30 = *(void *)(v0 + 832);
    uint64_t v31 = *(void *)(v0 + 808);
    uint64_t v61 = *(void *)(v0 + 800);
    uint64_t v64 = *(void *)(v0 + 776);
    uint64_t v67 = *(void *)(v0 + 768);
    uint64_t v69 = *(void *)(v0 + 744);
    uint64_t v72 = *(void *)(v0 + 736);
    uint64_t v75 = *(void *)(v0 + 712);
    uint64_t v77 = *(void *)(v0 + 704);
    uint64_t v80 = *(void *)(v0 + 696);
    swift_task_dealloc(*(void *)(v0 + 968));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v61);
    swift_task_dealloc(v64);
    swift_task_dealloc(v67);
    swift_task_dealloc(v69);
    swift_task_dealloc(v72);
    swift_task_dealloc(v75);
    swift_task_dealloc(v77);
    swift_task_dealloc(v80);
    uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
    return (id)v32();
  }

  __break(1u);
  return result;
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySo8INPersonCGG_SSs5NeverOTg507_sSiSo8f34CSSIgygo_Si6offset_AB7elementtSSs5g162OIegnrzr_TR0150_s21GeoFlowDelegatePlugin37ShareETAContactDisambiguationStrategyC013makePromptForG014paginatedItems07SiriKitB06Output_pAF22PaginatedItemContainerVyJ34A21CG_tYaKFSSSi_AKtXEfU_Tf3nnnpf_nTf1cn_n( uint64_t a1)
{
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = 0LL;
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
      unint64_t v17 = a1 & 0xC000000000000001LL;
      uint64_t v15 = a1;
      while (v17)
      {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1);
LABEL_7:
        uint64_t v5 = v4;
        unint64_t v6 = v3 + 1;
        if (__OFADD__(v3, 1LL)) {
          goto LABEL_14;
        }
        uint64_t v7 = INPerson.encodeBase64.getter(v4);
        uint64_t v9 = v8;

        unint64_t v11 = _swiftEmptyArrayStorage[2];
        unint64_t v10 = _swiftEmptyArrayStorage[3];
        if (v11 >= v10 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v10 > 1,  v11 + 1,  1);
        }
        _swiftEmptyArrayStorage[2] = v11 + 1;
        uint64_t v12 = (char *)&_swiftEmptyArrayStorage[2 * v11];
        *((void *)v12 + 4) = v7;
        *((void *)v12 + 5) = v9;
        ++v3;
        a1 = v15;
        if (v6 == v2) {
          goto LABEL_19;
        }
      }

      if (v3 < *(void *)(v16 + 16)) {
        break;
      }
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      if (a1 < 0) {
        uint64_t v13 = a1;
      }
      else {
        uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v13);
      if (!v2) {
        goto LABEL_19;
      }
    }

    id v4 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_7;
  }

uint64_t ShareETAContactDisambiguationStrategy.makeFlowCancelledResponse()(uint64_t a1)
{
  v2[22] = a1;
  v2[23] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  _BYTE v2[24] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for ActivityType(0LL);
  v2[25] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[26] = v5;
  v2[27] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for TemplatingResult(0LL);
  v2[28] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[29] = v7;
  uint64_t v8 = *(void *)(v7 + 64);
  v2[30] = v8;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[31] = swift_task_alloc(v9);
  v2[32] = swift_task_alloc(v9);
  return swift_task_switch(ShareETAContactDisambiguationStrategy.makeFlowCancelledResponse(), 0LL, 0LL);
}

uint64_t ShareETAContactDisambiguationStrategy.makeFlowCancelledResponse()()
{
  uint64_t v1 = (void *)v0[23];
  uint64_t v2 = v1[3];
  uint64_t v3 = type metadata accessor for ShareETA(0LL);
  v0[5] = v3;
  v0[6] = &protocol witness table for ShareETA;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v0 + 2);
  *(_BYTE *)boxed_opaque_existential_0 = 0;
  boxed_opaque_existential_0[1] = 0LL;
  swift_storeEnumTagMultiPayload(boxed_opaque_existential_0, v3, 0LL);
  uint64_t v5 = v1 + 4;
  uint64_t v6 = v1[7];
  uint64_t v7 = v1[8];
  __swift_project_boxed_opaque_existential_1(v5, v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 80))(v6, v7);
  v0[33] = v8;
  unint64_t v9 = *(int **)(*(void *)v2 + 112LL);
  uint64_t v12 = (int *)((char *)v9 + *v9);
  unint64_t v10 = (void *)swift_task_alloc(v9[1]);
  v0[34] = v10;
  void *v10 = v0;
  v10[1] = ShareETAContactDisambiguationStrategy.makeFlowCancelledResponse();
  return ((uint64_t (*)(void, void *, uint64_t))v12)(v0[32], v0 + 2, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 264);
  uint64_t v3 = *(void *)(*v1 + 272);
  *(void *)(*v1 + 28specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = ShareETAContactDisambiguationStrategy.makeFlowCancelledResponse();
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 16));
    uint64_t v5 = ShareETAContactDisambiguationStrategy.makeFlowCancelledResponse();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 192);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 16));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id ShareETAContactDisambiguationStrategy.makeFlowCancelledResponse()(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 208);
  uint64_t v2 = *(void *)(v1 + 216);
  uint64_t v4 = *(void *)(v1 + 200);
  static SiriKitEventSender.current.getter(a1);
  uint64_t v28 = *(void *)(v1 + 88);
  uint64_t v29 = *(void *)(v1 + 80);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 56), v29);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for ActivityType.canceled(_:), v4);
  uint64_t v5 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INShareETAIntent,  &OBJC_CLASS___INShareETAIntent_ptr);
  id result = [(id)swift_getObjCClassFromMetadata(v5) typeName];
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v9 = *(void *)(v1 + 248);
    uint64_t v8 = *(void *)(v1 + 256);
    uint64_t v10 = *(void *)(v1 + 232);
    uint64_t v24 = *(void *)(v1 + 240);
    uint64_t v11 = *(void *)(v1 + 224);
    uint64_t v27 = *(void *)(v1 + 216);
    uint64_t v12 = *(void *)(v1 + 192);
    uint64_t v13 = *(void **)(v1 + 176);
    type metadata accessor for SiriKitEvent(0LL);
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v25 = v15;
    uint64_t v26 = v14;

    uint64_t v16 = enum case for SiriKitReliabilityCodes.cancelDisambiguation(_:);
    uint64_t v17 = type metadata accessor for SiriKitReliabilityCodes(0LL);
    uint64_t v18 = *(void *)(v17 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 104))(v12, v16, v17);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v12, 0LL, 1LL, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v8, v11);
    uint64_t v19 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v20 = (v19 + 16) & ~v19;
    uint64_t v21 = swift_allocObject(&unk_B88F0, v20 + v24, v19 | 7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v21 + v20, v9, v11);
    uint64_t v22 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)( v27,  v26,  v25,  v12,  partial apply for closure #1 in ShareETAContactDisambiguationStrategy.makeFlowCancelledResponse(),  v21);
    dispatch thunk of SiriKitEventSending.send(_:)(v22, v29, v28);
    swift_release(v22);
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v1 + 56));
    static Device.current.getter((void *)(v1 + 96));
    uint64_t v23 = type metadata accessor for AceOutput(0LL);
    *(_OWORD *)(v1 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0u;
    *(void *)(v1 + 168) = 0LL;
    *(_OWORD *)(v1 + 136) = 0u;
    v13[3] = v23;
    v13[4] = &protocol witness table for AceOutput;
    __swift_allocate_boxed_opaque_existential_0(v13);
    static AceOutputHelper.makeCancellationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:canUseServerTTS:flowActivity:)( v8,  v1 + 96,  1LL,  _swiftEmptyArrayStorage,  1LL,  v1 + 136);
    outlined destroy of (label: String?, value: Any)?( v1 + 136,  &demangling cache variable for type metadata for FlowActivity?);
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v1 + 96));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v11);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v27);
    swift_task_dealloc(v12);
    return (id)(*(uint64_t (**)(void))(v1 + 8))();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t closure #3 in ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = dispatch thunk of SiriKitEvent.SiriKitEventBuilder.parameterName.setter( 0x6E65697069636572LL,  0xE900000000000074LL);
  uint64_t v5 = a3(v4);
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.responseId.setter(v5);
}

uint64_t ShareETAContactDisambiguationStrategy.makeErrorResponse(_:)()
{
  *(void *)(v1 + 16) = v0;
  return swift_task_switch(ShareETAContactDisambiguationStrategy.makeErrorResponse(_:), 0LL, 0LL);
}

uint64_t ShareETAContactDisambiguationStrategy.makeErrorResponse(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = static os_log_type_t.default.getter(a1);
  os_log(_:dso:log:_:_:)(v3, &dword_0, *(void *)(v2 + 16), "makeErrorResponse", 17LL, 2LL, _swiftEmptyArrayStorage);
  unint64_t v4 = lazy protocol witness table accessor for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError();
  uint64_t v5 = swift_allocError( &type metadata for ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError,  v4,  0LL,  0LL);
  _BYTE *v6 = 0;
  swift_willThrow(v5);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[15] = a3;
  v4[16] = v3;
  v4[13] = a1;
  v4[14] = a2;
  uint64_t v5 = type metadata accessor for ResponseType(0LL);
  v4[17] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[18] = v6;
  v4[19] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DialogPhase(0LL);
  v4[20] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OutputGenerationManifest(0LL);
  v4[21] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[22] = v9;
  v4[23] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:),  0LL,  0LL);
}

uint64_t ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:)()
{
  uint64_t v1 = (void *)v0[16];
  uint64_t v2 = v1[3];
  v0[24] = v2;
  uint64_t v3 = v1[7];
  uint64_t v4 = v1[8];
  __swift_project_boxed_opaque_existential_1(v1 + 4, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 80))(v3, v4);
  v0[25] = v5;
  uint64_t v6 = *(int **)(*(void *)v2 + 152LL);
  uint64_t v9 = (int *)((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  v0[26] = v7;
  *uint64_t v7 = v0;
  v7[1] = ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:);
  return ((uint64_t (*)(void, uint64_t))v9)(v0[14], v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = (void *)(*(void *)v0 + 56LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 240LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 232LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 248LL));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  __swift_destroy_boxed_opaque_existential_0Tm(v1);
  return swift_task_switch( ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:),  0LL,  0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 168);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 160);
  swift_task_dealloc(*(void *)(v0 + 184));
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(void *)(v0 + 104);
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0LL;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 160);
  swift_task_dealloc(*(void *)(v0 + 184));
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:)( uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 208LL);
  v3[27] = a1;
  v3[28] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v3[25]);
  if (v1)
  {
    swift_errorRelease(v1);
    uint64_t v5 = ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:);
  }

  else
  {
    uint64_t v5 = ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:);
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v2 = *(void *)(v1 + 192);
  uint64_t v4 = *(void *)(v1 + 152);
  uint64_t v3 = *(void *)(v1 + 160);
  uint64_t v6 = *(void *)(v1 + 136);
  uint64_t v5 = *(void *)(v1 + 144);
  uint64_t v7 = *(void *)(v1 + 128);
  uint64_t v8 = static os_log_type_t.default.getter(a1);
  uint64_t v28 = *(void *)(v7 + 16);
  uint64_t v9 = os_log(_:dso:log:_:_:)(v8, &dword_0, v28, "RF: dialogResult success", 24LL, 2LL, _swiftEmptyArrayStorage);
  static DialogPhase.clarification.getter(v9);
  OutputGenerationManifest.init(dialogPhase:_:)(v3, AnswerETAIntentResponseCode.rawValue.getter, 0LL);
  OutputGenerationManifest.responseViewId.setter(1936744813LL, 0xE400000000000000LL);
  OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for ResponseType.disambiguation(_:), v6);
  OutputGenerationManifest.responseType.setter(v4);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INPerson>);
  uint64_t v11 = PaginatedItemContainer.items.getter(v10);
  uint64_t v12 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySo8INPersonCGG_21GeoFlowDelegatePlugin0G7ContactVs5NeverOTg507_sSiSo8f3C21ghi9Plugin0B7k32VIgygr_Si6offset_AB7elementtAEs5L11OIegnrzr_TRSiAiNIgygr_Tf1cn_nTf4ng_n( v11,  (void (*)(unint64_t, id))partial apply for closure #1 in ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:),  v7);
  swift_bridgeObjectRelease(v11);
  *(_OWORD *)(v1 + 16) = xmmword_963F0;
  *(void *)(v1 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &type metadata for GeoLabel;
  *(void *)(v1 + 48) = &protocol witness table for GeoLabel;
  *(_BYTE *)(v1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2;
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 136LL))(v1 + 16);
  uint64_t v15 = v14;
  LOBYTE(v11) = v16;
  uint64_t v17 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v1 + 16));
  if ((v11 & 1) != 0)
  {
    uint64_t v17 = outlined consume of Result<String, Error>(v13, v15, 1);
    uint64_t v13 = 0LL;
    uint64_t v15 = 0xE000000000000000LL;
  }

  uint64_t v18 = *(void **)(v1 + 216);
  uint64_t v19 = static os_log_type_t.default.getter(v17);
  os_log(_:dso:log:_:_:)(v19, &dword_0, v28, "RF: made snippet model successfully", 35LL, 2LL, _swiftEmptyArrayStorage);
  uint64_t v20 = type metadata accessor for ResponseFactory(0LL);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  *(void *)(v1 + 23__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = ResponseFactory.init()();
  *(void *)(v1 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &type metadata for GeoDataModels;
  *(void *)(v1 + 88) = lazy protocol witness table accessor for type GeoDataModels and conformance GeoDataModels();
  uint64_t v21 = swift_allocObject(&unk_B8918, 97LL, 7LL);
  *(void *)(v1 + 56) = v21;
  *(void *)(v21 + 16) = v13;
  *(void *)(v21 + 24) = v15;
  *(void *)(v21 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v12;
  *(_OWORD *)(v21 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0u;
  *(_OWORD *)(v21 + 56) = 0u;
  *(_OWORD *)(v21 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0u;
  *(_OWORD *)(v21 + 81) = 0u;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v23 = swift_allocObject(v22, 40LL, 7LL);
  *(_OWORD *)(v23 + 16) = xmmword_95900;
  *(void *)(v23 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v18;
  uint64_t v30 = v23;
  specialized Array._endMutation()(v23);
  *(void *)(v1 + 24specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v30;
  uint64_t v25 = v18;
  uint64_t v26 = (void *)swift_task_alloc(v24);
  *(void *)(v1 + 248) = v26;
  *uint64_t v26 = v1;
  v26[1] = ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:);
  return ((uint64_t (*)(void, uint64_t, uint64_t, void))v29)( *(void *)(v1 + 104),  v1 + 56,  v30,  *(void *)(v1 + 184));
}

uint64_t closure #1 in ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v42 = a1;
  uint64_t v41 = type metadata accessor for ImageElement.ImageStyle(0LL);
  uint64_t v7 = *(void *)(v41 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ContactQuery(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = INPerson.toContactQuery()(v12);
  uint64_t v16 = ContactQuery.id.getter(v15);
  uint64_t v39 = v17;
  uint64_t v40 = v16;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  id v18 = [a2 displayName];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v37 = v20;
  uint64_t v38 = v19;

  Swift::String v21 = INPerson.getContactInitials()();
  uint64_t v22 = INPerson.encodeBase64.getter(v21._countAndFlagsBits);
  uint64_t v24 = v23;
  uint64_t v25 = a3 + 4;
  uint64_t v27 = a3[7];
  uint64_t v26 = a3[8];
  __swift_project_boxed_opaque_existential_1(v25, v27);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v26 + 32))(v43, v27, v26);
  uint64_t v28 = v44;
  uint64_t v29 = v45;
  __swift_project_boxed_opaque_existential_1(v43, v44);
  LOBYTE(v__swift_destroy_boxed_opaque_existential_0Tm(v0 + 18) = dispatch thunk of DeviceState.isCarPlay.getter(v28, v29);
  __swift_destroy_boxed_opaque_existential_0Tm(v43);
  uint64_t v30 = (unsigned int *)&enum case for ImageElement.ImageStyle.contactImage3(_:);
  uint64_t v31 = v41;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *v30, v41);
  uint64_t v32 = v40;
  *(void *)a4 = v42;
  *(void *)(a4 + 8) = v32;
  uint64_t v33 = v38;
  *(void *)(a4 + 16) = v39;
  *(void *)(a4 + 24) = v33;
  *(void *)(a4 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v37;
  *(Swift::String *)(a4 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v21;
  *(void *)(a4 + 56) = v22;
  *(void *)(a4 + 64) = v24;
  *(void *)(a4 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0LL;
  uint64_t v34 = type metadata accessor for GeoContact(0LL);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a4 + *(int *)(v34 + 40), v9, v31);
}

uint64_t ShareETAContactDisambiguationStrategy.deinit()
{
  swift_release(*(void *)(v0 + 24));
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 32));

  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  return v0;
}

uint64_t ShareETAContactDisambiguationStrategy.__deallocating_deinit()
{
  swift_release(*(void *)(v0 + 24));
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 32));

  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.paginationStyle() in conformance ShareETAContactDisambiguationStrategy()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200LL))();
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.actionForInput(_:) in conformance ShareETAContactDisambiguationStrategy()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208LL))();
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.parseDisambiguationResponse(input:paginatedItems:) in conformance ShareETAContactDisambiguationStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(*(void *)v3 + 216LL);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v11(a1, a2, a3);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:) in conformance ShareETAContactDisambiguationStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(*(void *)v2 + 224LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v9(a1, a2);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:) in conformance ShareETAContactDisambiguationStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PromptForDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for ShareETAContactDisambiguationStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return PromptForDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:) in conformance ShareETAContactDisambiguationStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PromptForDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for ShareETAContactDisambiguationStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return PromptForDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAContactDisambiguationStrategy( uint64_t a1)
{
  uint64_t v4 = *(int **)(*(void *)v1 + 232LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v7(a1);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeErrorResponse(_:) in conformance ShareETAContactDisambiguationStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(*(void *)v2 + 240LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v9(a1, a2);
}

uint64_t specialized ShareETAContactDisambiguationStrategy.init(isPommes:isUSO:skeletonPerson:flowHelper:catService:)( char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v49 = a7;
  uint64_t v50 = a8;
  uint64_t v14 = __swift_allocate_boxed_opaque_existential_0(&v48);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32LL))(v14, a4, a7);
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v15 = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000025LL,  0x8000000000096360LL);
  *(_BYTE *)(a6 + 81) = 0;
  *(void *)(a6 + 16) = v15;
  *(void *)(a6 + 88) = &_swiftEmptyArrayStorage;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v17 = swift_allocObject(v16, 128LL, 7LL);
  *(_OWORD *)(v17 + 16) = xmmword_949C0;
  if (one-time initialization token for referenceNode != -1) {
    swift_once(&one-time initialization token for referenceNode, one-time initialization function for referenceNode);
  }
  uint64_t v18 = static LocationSearchIntent.referenceNode;
  swift_retain(static LocationSearchIntent.referenceNode);
  unint64_t v19 = specialized OntologyNode.javaClassName.getter();
  uint64_t v21 = v20;
  swift_release(v18);
  *(void *)(v17 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v19;
  *(void *)(v17 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v21;
  if (one-time initialization token for confirmationNode != -1) {
    swift_once( &one-time initialization token for confirmationNode,  one-time initialization function for confirmationNode);
  }
  uint64_t v22 = static LocationSearchIntent.confirmationNode;
  swift_retain(static LocationSearchIntent.confirmationNode);
  unint64_t v23 = specialized OntologyNode.javaClassName.getter();
  uint64_t v25 = v24;
  swift_release(v22);
  *(void *)(v17 + 48) = v23;
  *(void *)(v17 + 56) = v25;
  uint64_t v26 = type metadata accessor for AddressOntologyNode.PersonPlaceNode(0LL);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  uint64_t v27 = AddressOntologyNode.PersonPlaceNode.init(name:multicardinal:)(0x6C506E6F73726570LL, 0xEB00000000656361LL, 0LL);
  unint64_t v28 = specialized OntologyNode.javaClassName.getter();
  uint64_t v30 = v29;
  swift_release(v27);
  *(void *)(v17 + 64) = v28;
  *(void *)(v17 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v30;
  uint64_t v31 = type metadata accessor for AddressOntologyNode.OccupantNode(0LL);
  swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  uint64_t v32 = AddressOntologyNode.OccupantNode.init(name:multicardinal:)(0x746E61707563636FLL, 0xE800000000000000LL, 0LL);
  unint64_t v33 = specialized OntologyNode.javaClassName.getter();
  uint64_t v35 = v34;
  uint64_t v36 = swift_release(v32);
  *(void *)(v17 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v33;
  *(void *)(v17 + 88) = v35;
  uint64_t v37 = static AddressOntologyNode.OccupantNode.occupantFullNameNode.getter(v36);
  unint64_t v38 = specialized OntologyNode.javaClassName.getter();
  uint64_t v40 = v39;
  swift_release(v37);
  *(void *)(v17 + 96) = v38;
  *(void *)(v17 + 104) = v40;
  type metadata accessor for PersonOntologyNode(0LL);
  uint64_t v41 = static PersonOntologyNode.personFullNameNode.getter();
  unint64_t v42 = specialized OntologyNode.javaClassName.getter();
  uint64_t v44 = v43;
  swift_release(v41);
  *(void *)(v17 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v42;
  *(void *)(v17 + 12specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v44;
  *(void *)(a6 + 96) = v17;
  *(_BYTE *)(a6 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = a1 & 1;
  swift_beginAccess(a6 + 81, v47, 1LL, 0LL);
  *(_BYTE *)(a6 + 81) = a2 & 1;
  *(void *)(a6 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a3;
  outlined init with take of CATType(&v48, a6 + 32);
  *(void *)(a6 + 24) = a5;
  return a6;
}

unint64_t lazy protocol witness table accessor for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError()
{
  unint64_t result = lazy protocol witness table cache variable for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError;
  if (!lazy protocol witness table cache variable for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError,  &type metadata for ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError;
  if (!lazy protocol witness table cache variable for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError,  &type metadata for ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError);
  }

  return result;
}

uint64_t outlined init with copy of ContactResolution(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContactResolution(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ContactResolution(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContactResolution(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_339BC()
{
  uint64_t v1 = *(void *)(type metadata accessor for ContactResolution(0LL) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  swift_release(*(void *)(v0 + v3));
  uint64_t v7 = v6
  uint64_t v8 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t partial apply for closure #3 in ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:)( uint64_t a1)
{
  return partial apply for closure #3 in ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:)( a1,  type metadata accessor for ContactResolution,  (uint64_t (*)(uint64_t))specialized GeoCATModel.getID());
}

uint64_t sub_33A5C()
{
  uint64_t v1 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in ShareETAContactDisambiguationStrategy.makeFlowCancelledResponse()( uint64_t a1)
{
  return partial apply for closure #3 in ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:)( a1,  (uint64_t (*)(void))&type metadata accessor for TemplatingResult,  (uint64_t (*)(uint64_t))&TemplatingResult.templateIdentifier.getter);
}

uint64_t partial apply for closure #3 in ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:)( uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t))
{
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(a2(0LL) - 8) + 80LL);
  return closure #3 in ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:)( a1,  v3 + ((v6 + 16) & ~v6),  a3);
}

uint64_t partial apply for closure #1 in ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:)( a1,  a2,  v3,  a3);
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySo8INPersonCGG_21GeoFlowDelegatePlugin0G7ContactVs5NeverOTg507_sSiSo8f3C21ghi9Plugin0B7k32VIgygr_Si6offset_AB7elementtAEs5L11OIegnrzr_TRSiAiNIgygr_Tf1cn_nTf4ng_n( uint64_t a1, void (*a2)(unint64_t, id), uint64_t a3)
{
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v19 = *(void *)(type metadata accessor for GeoContact(0LL) - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0);
  uint64_t v6 = v22;
  uint64_t v7 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0LL;
      uint64_t v17 = a1 & 0xFFFFFFFFFFFFFF8LL;
      unint64_t v18 = a1 & 0xC000000000000001LL;
      while (v18)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
LABEL_7:
        uint64_t v10 = v9;
        unint64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1LL)) {
          goto LABEL_14;
        }
        v20(v8, v9);

        uint64_t v22 = v6;
        unint64_t v13 = v6[2];
        unint64_t v12 = v6[3];
        if (v13 >= v12 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v12 > 1,  v13 + 1,  1);
          uint64_t v6 = v22;
        }

        _OWORD v6[2] = v13 + 1;
        outlined init with take of ContactResolution( (uint64_t)v5,  (uint64_t)v6 + ((*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))
        + *(void *)(v19 + 72) * v13,
          type metadata accessor for GeoContact);
        ++v8;
        if (v11 == v7) {
          goto LABEL_19;
        }
      }

      if (v8 < *(void *)(v17 + 16)) {
        break;
      }
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      if (a1 < 0) {
        uint64_t v14 = a1;
      }
      else {
        uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v14);
      if (!v7) {
        goto LABEL_19;
      }
    }

    id v9 = *(id *)(a1 + 8 * v8 + 32);
    goto LABEL_7;
  }

unint64_t lazy protocol witness table accessor for type GeoDataModels and conformance GeoDataModels()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels and conformance GeoDataModels;
  if (!lazy protocol witness table cache variable for type GeoDataModels and conformance GeoDataModels)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoDataModels, &type metadata for GeoDataModels);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels and conformance GeoDataModels);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels and conformance GeoDataModels;
  if (!lazy protocol witness table cache variable for type GeoDataModels and conformance GeoDataModels)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoDataModels, &type metadata for GeoDataModels);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels and conformance GeoDataModels);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels and conformance GeoDataModels;
  if (!lazy protocol witness table cache variable for type GeoDataModels and conformance GeoDataModels)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoDataModels, &type metadata for GeoDataModels);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels and conformance GeoDataModels);
  }

  return result;
}

uint64_t sub_33D48()
{
  return swift_deallocObject(v0, 97LL, 7LL);
}

uint64_t outlined consume of GeoDataModels( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11 = a4;
  uint64_t result = a6;
  switch(a11)
  {
    case 0:
    case 2:
      goto LABEL_4;
    case 1:
      goto LABEL_3;
    case 3:
      uint64_t result = a4;
      a10 = a8;
      uint64_t v11 = a6;
LABEL_3:
      swift_bridgeObjectRelease(result);
      swift_bridgeObjectRelease(a10);
      a3 = v11;
LABEL_4:
      swift_bridgeObjectRelease(a2);
      uint64_t result = swift_bridgeObjectRelease(a3);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_33E68@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144LL))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_33E9C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 152LL))(*a1);
}

uint64_t sub_33EC8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168LL))();
  *a2 = result;
  return result;
}

uint64_t sub_33EF8(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 176LL);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t type metadata accessor for ShareETAContactDisambiguationStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin37ShareETAContactDisambiguationStrategy);
}

uint64_t storeEnumTagSinglePayload for ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_33F94 + 4 * byte_961ED[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_33FC8 + 4 * byte_961E8[v4]))();
}

uint64_t sub_33FC8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_33FD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x33FD8LL);
  }
  return result;
}

uint64_t sub_33FE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x33FECLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_33FF0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_33FF8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError()
{
  return &type metadata for ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError;
}

uint64_t outlined init with take of ContactResolution( uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t outlined consume of String??(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v23 = v4 + v2;
  }
  else {
    int64_t v23 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v23,  1,  v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      unint64_t v17 = a1;
    }
    else {
      unint64_t v17 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    unint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    unint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  }

  int64_t v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    int64_t v5 = *(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8LL));
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v4 < 0) {
    unint64_t v18 = *v1;
  }
  else {
    unint64_t v18 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v1);
  int64_t v5 = _CocoaArrayWrapper.endIndex.getter(v18);
  swift_bridgeObjectRelease(v4);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_29;
  }
LABEL_5:
  int64_t v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *__int16 v1 = v4;
  int64_t v5 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000LL) == 0 && (v4 & 0x4000000000000000LL) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
    int64_t v5 = 1LL;
  }

  uint64_t v9 = *(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8LL));
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    uint64_t v10 = swift_bridgeObjectRetain(v4);
    int64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v5,  v9,  1LL,  v4,  v10);
    swift_bridgeObjectRelease(*v1);
    *__int16 v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)( v8 + 8LL * *(void *)(v8 + 16) + 32,  (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16),  a1);
    if (v12 >= v3) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0) {
      uint64_t v19 = v4;
    }
    else {
      uint64_t v19 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(v4);
  }

  if (v12 < 1) {
    goto LABEL_19;
  }
  uint64_t v13 = *(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8LL));
  unint64_t v14 = __OFADD__(v13, v12);
  unint64_t v15 = v13 + v12;
  if (!v14)
  {
    *(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8LL)) = v15;
LABEL_19:
    uint64_t v16 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v16);
  }

  __break(1u);
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Sharing_Medium@<X0>( unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized Sharing_Medium.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t ShareETAFlowDelegate.currentDeviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState( v1 + direct field offset for ShareETAFlowDelegate.currentDeviceState,  a1);
}

id ShareETAFlowDelegate.logObject.getter()
{
  return *(id *)(v0 + direct field offset for ShareETAFlowDelegate.logObject);
}

uint64_t ShareETAFlowDelegate.isPOMMES.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for ShareETAFlowDelegate.isPOMMES);
  swift_beginAccess(v0 + direct field offset for ShareETAFlowDelegate.isPOMMES, v3, 0LL, 0LL);
  return *v1;
}

uint64_t ShareETAFlowDelegate.isPOMMES.setter(char a1)
{
  unint64_t v3 = (_BYTE *)(v1 + direct field offset for ShareETAFlowDelegate.isPOMMES);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *unint64_t v3 = a1;
  return result;
}

uint64_t (*ShareETAFlowDelegate.isPOMMES.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t ShareETAFlowDelegate.isUSO.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for ShareETAFlowDelegate.isUSO);
  swift_beginAccess(v0 + direct field offset for ShareETAFlowDelegate.isUSO, v3, 0LL, 0LL);
  return *v1;
}

uint64_t ShareETAFlowDelegate.isUSO.setter(char a1)
{
  unint64_t v3 = (_BYTE *)(v1 + direct field offset for ShareETAFlowDelegate.isUSO);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *unint64_t v3 = a1;
  return result;
}

uint64_t (*ShareETAFlowDelegate.isUSO.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t ShareETAFlowDelegate.__allocating_init(deviceState:isPOMMES:isUSO:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ShareETAFlowDelegate.__allocating_init(deviceState:isPOMMES:isUSO:)( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))ShareETAFlowDelegate.init(deviceState:isPOMMES:isUSO:));
}

uint64_t ShareETAFlowDelegate.init(deviceState:isPOMMES:isUSO:)(void *a1, char a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = direct field offset for ShareETAFlowDelegate.logObject;
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  swift_retain(v3);
  *(void *)(v3 + v8) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000014LL,  0x80000000000963F0LL);
  uint64_t v9 = (_BYTE *)(v3 + direct field offset for ShareETAFlowDelegate.isPOMMES);
  *uint64_t v9 = 0;
  uint64_t v10 = (_BYTE *)(v4 + direct field offset for ShareETAFlowDelegate.isUSO);
  *(_BYTE *)(v4 + direct field offset for ShareETAFlowDelegate.isUSO) = 0;
  *(void *)(v4 + direct field offset for ShareETAFlowDelegate.disambiguationState) = 0LL;
  outlined init with copy of DeviceState( (uint64_t)a1,  v4 + direct field offset for ShareETAFlowDelegate.currentDeviceState);
  swift_beginAccess(v9, v15, 1LL, 0LL);
  *uint64_t v9 = a2;
  swift_beginAccess(v10, &v14, 1LL, 0LL);
  _BYTE *v10 = a3;
  uint64_t v11 = swift_release(v4);
  uint64_t v12 = BaseRCHFlowDelegate.init()(v11);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v12;
}

uint64_t ShareETAFlowDelegate.disambiguationState.getter()
{
  uint64_t v1 = (void *)(v0 + direct field offset for ShareETAFlowDelegate.disambiguationState);
  swift_beginAccess(v0 + direct field offset for ShareETAFlowDelegate.disambiguationState, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t ShareETAFlowDelegate.disambiguationState.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + direct field offset for ShareETAFlowDelegate.disambiguationState);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*ShareETAFlowDelegate.disambiguationState.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint8_t *ShareETAFlowDelegate.makeIntentFromParse(parse:previousIntent:)(uint64_t a1, void *a2)
{
  id v415 = (uint8_t *)a1;
  uint64_t v378 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v379 = *(void *)(v378 - 8);
  __chkstk_darwin();
  uint64_t v390 = (char *)&v371 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v398 = type metadata accessor for Google_Protobuf_StringValue(0LL);
  uint64_t v397 = *(void *)(v398 - 8);
  __chkstk_darwin();
  uint64_t v396 = (char *)&v371 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v402 = (uint8_t *)type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier(0LL);
  os_log_type_t v403 = (char *)*((void *)v402 - 1);
  __chkstk_darwin();
  *(void *)&__int128 v401 = (char *)&v371 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v377 = type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  uint64_t v376 = *(void *)(v377 - 8);
  __chkstk_darwin();
  id v375 = (char *)&v371 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v374 = type metadata accessor for Siri_Nlu_External_UserStatedTask(0LL);
  uint64_t v373 = *(void *)(v374 - 8);
  __chkstk_darwin();
  uint64_t v372 = (char *)&v371 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v389 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v388 = *(void *)(v389 - 8);
  __chkstk_darwin();
  uint64_t v387 = (char *)&v371 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  __chkstk_darwin();
  os_log_type_t v386 = (char *)&v371 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
  __chkstk_darwin();
  uint64_t v371 = (char *)&v371 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v394 = type metadata accessor for USOParse(0LL);
  uint64_t v393 = *(void *)(v394 - 8);
  __chkstk_darwin();
  v404.n128_u64[0] = (unint64_t)&v371 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v385 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNode(0LL);
  uint64_t v384 = *(void *)(v385 - 8);
  __chkstk_darwin();
  uint64_t v383 = (char *)&v371 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v382 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent(0LL);
  uint64_t v381 = *(void *)(v382 - 8);
  __chkstk_darwin();
  uint64_t v380 = (char *)&v371 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v410 = type metadata accessor for Parse(0LL);
  *(void *)&__int128 v414 = *(void *)(v410 - 8);
  __chkstk_darwin();
  unint64_t v391 = (char *)&v371 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v395 = (char *)&v371 - v16;
  __chkstk_darwin();
  unint64_t v408 = (unint64_t)&v371 - v17;
  __chkstk_darwin();
  uint64_t v19 = (char *)&v371 - v18;
  __chkstk_darwin();
  BOOL v21 = (char *)&v371 - v20;
  uint64_t v22 = type metadata accessor for NLIntent(0LL);
  unint64_t v406 = *(void *)(v22 - 8);
  __chkstk_darwin();
  uint64_t v400 = (char *)&v371 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v399 = (char *)&v371 - v24;
  __chkstk_darwin();
  uint64_t v26 = (char *)&v371 - v25;
  char v409 = v2;
  uint64_t v27 = *(os_log_s **)((char *)v2 + direct field offset for ShareETAFlowDelegate.logObject);
  id v28 = a2;
  os_log_type_t v29 = static os_log_type_t.default.getter(v28);
  BOOL v30 = os_log_type_enabled(v27, v29);
  os_log_t v411 = v27;
  uint64_t v407 = (uint8_t *)a2;
  id v405 = v28;
  unint64_t v392 = v26;
  if (v30)
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v32 = swift_slowAlloc(32LL, -1LL);
    v416[0] = v32;
    *(_DWORD *)uint64_t v31 = 136315138;
    uint64_t v417 = (uint64_t)a2;
    id v33 = v28;
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INShareETAIntent?);
    uint64_t v35 = String.init<A>(describing:)(&v417, v34);
    unint64_t v37 = v36;
    uint64_t v417 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v416);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v417, v418);

    swift_bridgeObjectRelease(v37);
    _os_log_impl(&dword_0, v411, v29, "makeIntentFromParse previous intent %s", v31, 0xCu);
    swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v422 = 0LL;
  uint64_t v38 = v414;
  uint64_t v39 = (uint8_t *)v410;
  *(void *)&__int128 v413 = *(void *)(v414 + 16);
  ((void (*)(char *, uint8_t *, uint64_t))v413)(v21, v415, v410);
  id v412 = *(unsigned int (**)(char *, uint8_t *))(v38 + 88);
  int64_t v40 = (int64_t)&off_C4000;
  if (v412(v21, v39) == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(char *, uint8_t *))(v38 + 96))(v21, v39);
    unint64_t v41 = v406;
    unint64_t v42 = *(void (**)(char *, char *, uint64_t))(v406 + 32);
    uint64_t v43 = v392;
    v42(v392, v21, v22);
    uint64_t v44 = v399;
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v399, v43, v22);
    uint64_t v45 = type metadata accessor for LocationSearchIntent(0LL);
    uint64_t v46 = swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
    uint64_t v47 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
    if (one-time initialization token for domainNode != -1) {
      swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
    }
    uint64_t v48 = static LocationSearchIntent.domainNode;
    *(void *)(v46 + v4__swift_destroy_boxed_opaque_existential_0Tm(v0 + 7) = static LocationSearchIntent.domainNode;
    v42((char *)(v46 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent), v44, v22);
    uint64_t v49 = *(void (**)(char *, uint64_t))(v41 + 8);
    swift_retain(v48);
    v49(v43, v22);
    swift_release(v422);
    uint64_t v422 = v46;
    uint64_t v39 = (uint8_t *)v410;
    uint64_t v50 = (uint64_t)v411;
    uint64_t v38 = v414;
    uint64_t v51 = v400;
  }

  else
  {
    (*(void (**)(char *, uint8_t *))(v38 + 8))(v21, v39);
    uint64_t v50 = (uint64_t)v411;
    uint64_t v51 = v400;
  }

  ((void (*)(char *, uint8_t *, uint8_t *))v413)(v19, v415, v39);
  if (v412(v19, v39) == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(char *, uint8_t *))(v38 + 96))(v19, v39);
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release(*(void *)&v19[*(int *)(v52 + 48)]);
    unint64_t v53 = v406;
    uint64_t v54 = *(uint64_t (**)(char *, char *, uint64_t))(v406 + 32);
    uint64_t v55 = v54(v51, v19, v22);
    os_log_type_t v56 = static os_log_type_t.default.getter(v55);
    if (os_log_type_enabled((os_log_t)v50, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v57 = 0;
      _os_log_impl( &dword_0,  (os_log_t)v50,  v56,  "makeIntentFromParse, parsing NLv3IntentPlusServerConversion)",  v57,  2u);
      uint64_t v58 = v57;
      unint64_t v53 = v406;
      swift_slowDealloc(v58, -1LL, -1LL);
    }

    uint64_t v59 = v399;
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v399, v51, v22);
    uint64_t v60 = type metadata accessor for LocationSearchIntent(0LL);
    uint64_t v61 = swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
    uint64_t v62 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
    uint64_t v63 = v51;
    unint64_t v64 = v53;
    if (one-time initialization token for domainNode != -1) {
      swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
    }
    uint64_t v65 = static LocationSearchIntent.domainNode;
    *(void *)(v61 + v6__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = static LocationSearchIntent.domainNode;
    v54((char *)(v61 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent), v59, v22);
    uint64_t v66 = *(void (**)(char *, uint64_t))(v64 + 8);
    swift_retain(v65);
    v66(v63, v22);
    swift_release(v422);
    uint64_t v422 = v61;
    uint64_t v67 = v407;
    uint64_t v39 = (uint8_t *)v410;
  }

  else
  {
    (*(void (**)(char *, uint8_t *))(v38 + 8))(v19, v39);
    uint64_t v67 = v407;
  }

  unint64_t v68 = v408;
  ((void (*)(unint64_t, uint8_t *, uint8_t *))v413)(v408, v415, v39);
  uint64_t v69 = (char *)&unk_D2000;
  if (v412((char *)v68, v39) != enum case for Parse.pommesResponse(_:))
  {
    uint64_t v82 = v414;
    (*(void (**)(unint64_t, uint8_t *))(v414 + 8))(v408, v39);
    goto LABEL_57;
  }

  uint64_t v70 = (void **)v408;
  uint64_t v71 = (*(uint64_t (**)(unint64_t, uint8_t *))(v414 + 96))(v408, v39);
  uint64_t v72 = *v70;
  os_log_type_t v73 = static os_log_type_t.default.getter(v71);
  if (os_log_type_enabled((os_log_t)v50, v73))
  {
    uint64_t v74 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v74 = 0;
    _os_log_impl(&dword_0, (os_log_t)v50, v73, "makeIntentFromParse, POMMES)", v74, 2u);
    swift_slowDealloc(v74, -1LL, -1LL);
  }

  uint64_t v75 = type metadata accessor for LocationSearchIntent(0LL);
  swift_allocObject(v75, *(unsigned int *)(v75 + 48), *(unsigned __int16 *)(v75 + 52));
  uint64_t v76 = v72;
  uint64_t v77 = LocationSearchIntent.init(from:)(v76);
  uint64_t v78 = swift_release(v422);
  uint64_t v422 = v77;
  uint64_t v79 = (*(uint64_t (**)(uint64_t))(class metadata base offset for ShareETAFlowDelegate + *v409 + 96))(v78);
  if (!v79)
  {

LABEL_31:
    uint64_t v39 = (uint8_t *)v410;
    uint64_t v82 = v414;
    goto LABEL_57;
  }

  uint64_t v80 = v79;
  uint64_t v81 = PommesResponse.firstGeoExperience.getter();
  uint64_t v82 = v414;
  if (!v81)
  {
    swift_bridgeObjectRelease(v80);

    uint64_t v39 = (uint8_t *)v410;
    goto LABEL_57;
  }

  uint64_t v83 = (void *)v81;
  id v84 = v380;
  GeoExperience.geoClientComponent.getter(v81);

  id v85 = v383;
  Apple_Parsec_Siri_V2alpha_GeoClientComponent.locationSearchNode.getter(v86);
  uint64_t v87 = (*(uint64_t (**)(char *, uint64_t))(v381 + 8))(v84, v382);
  uint64_t v67 = (uint8_t *)Apple_Parsec_Siri_V2alpha_LocationSearchNode.personPlaceID.getter(v87);
  uint64_t v89 = v88;
  (*(void (**)(char *, uint64_t))(v384 + 8))(v85, v385);
  uint64_t v90 = v80 & 0xFFFFFFFFFFFFFF8LL;
  if (!((unint64_t)v80 >> 62))
  {
    uint64_t v69 = *(char **)((char *)&dword_10 + (v80 & 0xFFFFFFFFFFFFFF8LL));
    uint64_t v39 = (uint8_t *)v410;
    if (v69) {
      goto LABEL_23;
    }
    goto LABEL_56;
  }

  if (v80 >= 0) {
    uint64_t v122 = v80 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    uint64_t v122 = v80;
  }
  swift_bridgeObjectRetain(v80);
  uint64_t v123 = v122;
  uint64_t v82 = v414;
  uint64_t v69 = (char *)_CocoaArrayWrapper.endIndex.getter(v123);
  swift_bridgeObjectRelease(v80);
  uint64_t v90 = v80 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v39 = (uint8_t *)v410;
  if (!v69)
  {
LABEL_56:
    swift_bridgeObjectRelease(v89);

    swift_bridgeObjectRelease(v80);
    uint64_t v67 = v407;
    uint64_t v69 = (char *)&unk_D2000;
LABEL_57:
    uint64_t v124 = v395;
    ((void (*)(char *, uint8_t *, uint8_t *))v413)(v395, v415, v39);
    if (v412(v124, v39) != enum case for Parse.uso(_:))
    {
      (*(void (**)(char *, uint8_t *))(v82 + 8))(v124, v39);
      if (!v67) {
        goto LABEL_149;
      }
LABEL_89:
      uint64_t v165 = *(uint64_t (**)(void))(*((void *)v69 + 323) + *v409 + 96LL);
      uint64_t v76 = (uint8_t *)v405;
      uint64_t v166 = v165();
      if (!v166)
      {

        goto LABEL_149;
      }

      uint64_t v98 = v166;
      os_log_type_t v174 = static os_log_type_t.info.getter(v166, v167, v168, v169, v170, v171, v172, v173);
      BOOL v175 = os_log_type_enabled((os_log_t)v50, v174);
      unint64_t v408 = v98;
      if (v175)
      {
        swift_bridgeObjectRetain_n(v98, 2LL);
        uint64_t v176 = swift_slowAlloc(22LL, -1LL);
        uint64_t v177 = swift_slowAlloc(64LL, -1LL);
        v416[0] = v177;
        *(_DWORD *)uint64_t v176 = 136315394;
        swift_beginAccess(&v422, &v417, 0LL, 0LL);
        uint64_t v419 = v422;
        swift_retain(v422);
        uint64_t v178 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocationSearchIntent?);
        uint64_t v179 = String.init<A>(describing:)(&v419, v178);
        unint64_t v181 = v180;
        uint64_t v419 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v179, v180, v416);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v419, &v420);
        swift_bridgeObjectRelease(v181);
        *(_WORD *)(v176 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
        uint64_t v182 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
        swift_bridgeObjectRetain(v408);
        uint64_t v183 = Array.description.getter(v408, v182);
        int64_t v40 = v184;
        swift_bridgeObjectRelease(v408);
        uint64_t v419 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v183, v40, v416);
        uint64_t v98 = v408;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v419, &v420);
        swift_bridgeObjectRelease_n(v98, 2LL);
        swift_bridgeObjectRelease(v40);
        _os_log_impl(&dword_0, (os_log_t)v50, v174, "intent %s, paginatedItems %s", (uint8_t *)v176, 0x16u);
        swift_arrayDestroy(v177, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v177, -1LL, -1LL);
        swift_slowDealloc(v176, -1LL, -1LL);
      }

      swift_beginAccess(&v422, v416, 0LL, 0LL);
      uint64_t v185 = v422;
      if (!v422
        || (uint64_t v186 = *(uint64_t (**)(uint64_t))(*(void *)v422 + 216LL),
            uint64_t v187 = swift_retain(v422),
            uint64_t v67 = (uint8_t *)v186(v187),
            uint64_t v93 = v188,
            swift_release(v185),
            !v93))
      {
LABEL_141:
        v260 = v391;
        uint64_t v261 = v410;
        ((void (*)(char *, uint8_t *, uint64_t))v413)(v391, v415, v410);
        if (v412(v260, (uint8_t *)v261) == enum case for Parse.directInvocation(_:))
        {
          (*(void (**)(char *, uint64_t))(v414 + 96))(v260, v261);
          uint64_t v262 = v379;
          uint64_t v263 = v378;
          uint64_t v264 = (*(uint64_t (**)(char *, char *, uint64_t))(v379 + 32))(v390, v260, v378);
          uint64_t v265 = Parse.DirectInvocation.userData.getter(v264);
          if (v265
            && (uint64_t v266 = v265,
                specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v265),
                uint64_t v268 = v267,
                swift_bridgeObjectRelease(v266),
                v268))
          {
            if (*(void *)(v268 + 16))
            {
              unint64_t v269 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E65697069636552LL, 0xE900000000000074LL);
              if ((v270 & 1) != 0)
              {
                uint64_t v271 = (uint64_t *)(*(void *)(v268 + 56) + 16 * v269);
                uint64_t v80 = *v271;
                uint64_t v93 = (char *)v271[1];
                swift_bridgeObjectRetain(v93);
                uint64_t v272 = swift_bridgeObjectRelease(v268);
                os_log_type_t v273 = static os_log_type_t.default.getter(v272);
                swift_bridgeObjectRetain_n(v93, 2LL);
                os_log_type_t v274 = v273;
                BOOL v275 = os_log_type_enabled((os_log_t)v50, v273);
                *(void *)&__int128 v414 = v80;
                if (v275)
                {
                  uint64_t v276 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                  uint64_t v277 = swift_slowAlloc(32LL, -1LL);
                  v420 = v93;
                  uint64_t v421 = v277;
                  *(_DWORD *)uint64_t v276 = 136315138;
                  int64_t v40 = (int64_t)(v276 + 4);
                  uint64_t v419 = v414;
                  swift_bridgeObjectRetain(v93);
                  uint64_t v278 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
                  uint64_t v279 = String.init<A>(describing:)(&v419, v278);
                  unint64_t v281 = v280;
                  uint64_t v419 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v279, v280, &v421);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v419, &v420);
                  swift_bridgeObjectRelease_n(v93, 2LL);
                  unint64_t v282 = v281;
                  uint64_t v50 = (uint64_t)v411;
                  swift_bridgeObjectRelease(v282);
                  _os_log_impl(&dword_0, (os_log_t)v50, v274, "From Payload person: %s", v276, 0xCu);
                  swift_arrayDestroy(v277, 1LL, (char *)&type metadata for Any + 8);
                  uint64_t v283 = v277;
                  uint64_t v80 = v414;
                  swift_slowDealloc(v283, -1LL, -1LL);
                  swift_slowDealloc(v276, -1LL, -1LL);
                }

                else
                {
                  swift_bridgeObjectRelease_n(v93, 2LL);
                }

                uint64_t v118 = (char *)(v98 & 0xFFFFFFFFFFFFFF8LL);
                if (!((unint64_t)v98 >> 62))
                {
                  uint64_t v39 = *(uint8_t **)((char *)&dword_10 + (v98 & 0xFFFFFFFFFFFFFF8LL));
                  if (!v39)
                  {
LABEL_230:
                    swift_bridgeObjectRelease(v93);

                    swift_bridgeObjectRelease(v408);
                    (*(void (**)(char *, uint64_t))(v379 + 8))(v390, v378);
                    uint64_t v67 = v407;
                    uint64_t v69 = (_BYTE *)&unk_D2000;
                    goto LABEL_149;
                  }

LABEL_170:
                  id v415 = v39;
                  if ((v408 & 0xC000000000000001LL) != 0)
                  {
                    uint64_t v69 = 0LL;
                    *(void *)&__int128 v284 = 136315138LL;
                    __int128 v414 = v284;
                    *(void *)&__int128 v413 = (char *)&type metadata for Any + 8;
                    while (1)
                    {
                      uint64_t v316 = v76;
                      uint64_t v317 = specialized _ArrayBuffer._getElementSlowPath(_:)(v69, v408);
                      uint64_t v67 = (uint8_t *)(v69 + 1);
                      if (__OFADD__(v69, 1LL)) {
                        goto LABEL_218;
                      }
                      uint64_t v39 = (uint8_t *)v317;
                      os_log_type_t v318 = static os_log_type_t.default.getter(v317);
                      swift_unknownObjectRetain_n(v39, 2LL);
                      if (os_log_type_enabled((os_log_t)v50, v318))
                      {
                        uint64_t v319 = swift_slowAlloc(12LL, -1LL);
                        int64_t v40 = swift_slowAlloc(32LL, -1LL);
                        uint64_t v419 = v40;
                        *(_DWORD *)uint64_t v319 = v414;
                        uint64_t v320 = INPerson.encodeBase64.getter(v40);
                        unint64_t v322 = v321;
                        *(void *)(v319 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( v320,  v321,  &v419);
                        swift_unknownObjectRelease(v39);

                        unint64_t v323 = v322;
                        uint64_t v50 = (uint64_t)v411;
                        swift_bridgeObjectRelease(v323);
                        _os_log_impl( &dword_0,  (os_log_t)v50,  v318,  "person's contact handle from list: %s",  (uint8_t *)v319,  0xCu);
                        swift_arrayDestroy(v40, 1LL, v413);
                        swift_slowDealloc(v40, -1LL, -1LL);
                        uint64_t v324 = swift_slowDealloc(v319, -1LL, -1LL);
                      }

                      else
                      {
                        swift_unknownObjectRelease(v39);
                      }

                      uint64_t v325 = INPerson.encodeBase64.getter(v324);
                      unint64_t v327 = (unint64_t)v326;
                      if (v93)
                      {
                        if (v325 == v80 && v93 == v326)
                        {
                          swift_bridgeObjectRelease(v93);
                          swift_bridgeObjectRelease(v408);
                          unint64_t v345 = v327;
LABEL_199:
                          uint64_t v346 = swift_bridgeObjectRelease(v345);
                          uint64_t v76 = v316;
                          goto LABEL_203;
                        }

                        char v328 = _stringCompareWithSmolCheck(_:_:expecting:)(v325, v326, v80, v93, 0LL);
                        swift_bridgeObjectRelease(v327);
                        if ((v328 & 1) != 0)
                        {
                          swift_bridgeObjectRelease(v93);
                          unint64_t v345 = v408;
                          goto LABEL_199;
                        }

                        swift_unknownObjectRelease(v39);
                      }

                      else
                      {
                        swift_unknownObjectRelease(v39);
                        swift_bridgeObjectRelease(v327);
                      }

                      uint64_t v76 = v316;
                      ++v69;
                      if (v67 == v415) {
                        goto LABEL_230;
                      }
                    }
                  }

                  int64_t v40 = 0LL;
                  *(void *)&__int128 v284 = 136315138LL;
                  __int128 v413 = v284;
                  uint64_t v118 = (char *)&type metadata for Any + 8;
                  id v412 = (unsigned int (*)(char *, uint8_t *))((char *)&type metadata for Any + 8);
                  while (1)
                  {
                    int64_t v329 = v40 + 1;
                    if (__OFADD__(v40, 1LL)) {
                      goto LABEL_225;
                    }
                    id v330 = *(id *)(v408 + 8 * v40 + 32);
                    os_log_type_t v331 = static os_log_type_t.default.getter(v330);
                    uint64_t v39 = (uint8_t *)v330;
                    uint64_t v332 = v411;
                    if (os_log_type_enabled(v411, v331))
                    {
                      v333 = v76;
                      uint64_t v334 = swift_slowAlloc(12LL, -1LL);
                      uint64_t v335 = swift_slowAlloc(32LL, -1LL);
                      uint64_t v419 = v335;
                      *(_DWORD *)uint64_t v334 = v413;
                      uint64_t v336 = INPerson.encodeBase64.getter(v335);
                      unint64_t v338 = v337;
                      *(void *)(v334 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( v336,  v337,  &v419);

                      swift_bridgeObjectRelease(v338);
                      _os_log_impl(&dword_0, v332, v331, "person's contact handle from list: %s", (uint8_t *)v334, 0xCu);
                      swift_arrayDestroy(v335, 1LL, v412);
                      swift_slowDealloc(v335, -1LL, -1LL);
                      uint64_t v339 = v334;
                      uint64_t v76 = v333;
                      uint64_t v80 = v414;
                      uint64_t v340 = swift_slowDealloc(v339, -1LL, -1LL);
                    }

                    else
                    {
                    }

                    uint64_t v341 = INPerson.encodeBase64.getter(v340);
                    uint64_t v50 = (uint64_t)v342;
                    uint64_t v98 = v408;
                    if (v93)
                    {
                      if (v341 == v80 && v93 == (char *)v342)
                      {
                        swift_bridgeObjectRelease(v93);
                        swift_bridgeObjectRelease(v98);
                        uint64_t v347 = v50;
                        goto LABEL_202;
                      }

                      char v344 = _stringCompareWithSmolCheck(_:_:expecting:)(v341, v342, v80, v93, 0LL);
                      swift_bridgeObjectRelease(v50);
                      if ((v344 & 1) != 0)
                      {
                        swift_bridgeObjectRelease(v93);
                        uint64_t v347 = v98;
LABEL_202:
                        uint64_t v346 = swift_bridgeObjectRelease(v347);
                        uint64_t v50 = (uint64_t)v411;
LABEL_203:
                        os_log_type_t v348 = static os_log_type_t.default.getter(v346);
                        uint64_t v349 = v39;
                        if (os_log_type_enabled((os_log_t)v50, v348))
                        {
                          uint64_t v350 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                          uint64_t v351 = swift_slowAlloc(32LL, -1LL);
                          uint64_t v419 = v351;
                          *(_DWORD *)uint64_t v350 = 136315138;
                          id v415 = v350 + 4;
                          uint64_t v352 = v349;
                          id v353 = -[uint8_t description](v352, "description");
                          uint64_t v354 = static String._unconditionallyBridgeFromObjectiveC(_:)(v353);
                          uint64_t v355 = v76;
                          unint64_t v357 = v356;

                          uint64_t v421 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v354, v357, &v419);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v421, &v422);

                          unint64_t v358 = v357;
                          uint64_t v76 = v355;
                          swift_bridgeObjectRelease(v358);
                          _os_log_impl(&dword_0, v411, v348, "chosen item %s", v350, 0xCu);
                          swift_arrayDestroy(v351, 1LL, (char *)&type metadata for Any + 8);
                          swift_slowDealloc(v351, -1LL, -1LL);
                          swift_slowDealloc(v350, -1LL, -1LL);
                        }

                        else
                        {
                        }

                        uint64_t v359 = v378;
                        (*(void (**)(void))(class metadata base offset for ShareETAFlowDelegate
                                                       + *v409
                                                       + 104))(0LL);
                        uint64_t v360 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
                        uint64_t v361 = swift_allocObject(v360, 40LL, 7LL);
                        *(_OWORD *)(v361 + 16) = xmmword_95900;
                        *(void *)(v361 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v349;
                        uint64_t v419 = v361;
                        specialized Array._endMutation()(v361);
                        uint64_t v362 = v419;
                        id v363 = objc_allocWithZone(&OBJC_CLASS___INShareETAIntent);
                        type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
                        uint64_t v364 = v349;
                        Class isa = Array._bridgeToObjectiveC()().super.isa;
                        swift_bridgeObjectRelease(v362);
                        os_log_type_t v366 = (uint8_t *)[v363 initWithRecipients:isa];

                        uint64_t v367 = v359;
                        uint64_t v67 = v366;
                        (*(void (**)(char *, uint64_t))(v379 + 8))(v390, v367);
LABEL_160:
                        uint64_t v114 = v422;
                        goto LABEL_150;
                      }
                    }

                    else
                    {

                      swift_bridgeObjectRelease(v50);
                    }

                    ++v40;
                    uint64_t v118 = (char *)v415;
                  }
                }

LABEL_226:
                if (v98 >= 0) {
                  uint64_t v370 = v118;
                }
                else {
                  uint64_t v370 = (char *)v98;
                }
                swift_bridgeObjectRetain(v98);
                uint64_t v39 = (uint8_t *)_CocoaArrayWrapper.endIndex.getter(v370);
                swift_bridgeObjectRelease(v98);
                if (!v39) {
                  goto LABEL_230;
                }
                goto LABEL_170;
              }
            }

            swift_bridgeObjectRelease(v98);
            uint64_t v290 = swift_bridgeObjectRelease(v268);
            uint64_t v291 = static os_log_type_t.error.getter(v290);
            os_log(_:dso:log:_:_:)( v291,  &dword_0,  v50,  "invalid payload data for contact",  32LL,  2LL,  _swiftEmptyArrayStorage);
          }

          else
          {
            uint64_t v288 = swift_bridgeObjectRelease(v98);
            uint64_t v289 = static os_log_type_t.error.getter(v288);
            os_log(_:dso:log:_:_:)(v289, &dword_0, v50, "invalid payload data", 20LL, 2LL, _swiftEmptyArrayStorage);
          }

          (*(void (**)(char *, uint64_t))(v262 + 8))(v390, v263);
          uint64_t v292 = v422;
          v293 = v76;
          swift_release(v292);
          return v407;
        }

        swift_bridgeObjectRelease(v98);

        (*(void (**)(char *, uint64_t))(v414 + 8))(v260, v261);
        uint64_t v67 = v407;
LABEL_149:
        (*(void (**)(void))(*((void *)v69 + 323) + *v409 + 104LL))(0LL);
        uint64_t v285 = v422;
        id v286 = v405;
        uint64_t v114 = v285;
        goto LABEL_150;
      }

      uint64_t v117 = (char *)(v98 & 0xFFFFFFFFFFFFFF8LL);
      uint64_t v402 = v76;
      if (!((unint64_t)v98 >> 62))
      {
        int64_t v40 = *(void *)((char *)&dword_10 + (v98 & 0xFFFFFFFFFFFFFF8LL));
        __n128 v189 = swift_bridgeObjectRetain(v98);
        if (v40)
        {
LABEL_96:
          unint64_t v406 = v40;
          if ((v98 & 0xC000000000000001LL) != 0)
          {
            uint64_t v190 = 0LL;
            v189.n128_u64[0] = 136315394LL;
            __n128 v404 = v189;
            os_log_type_t v403 = (char *)&type metadata for Any + 8;
            while (1)
            {
              uint64_t v191 = specialized _ArrayBuffer._getElementSlowPath(_:)(v190, v98);
              uint64_t v192 = v190 + 1;
              if (__OFADD__(v190, 1LL)) {
                goto LABEL_208;
              }
              id v193 = (id)v191;
              swift_bridgeObjectRetain_n(v93, 2LL);
              uint64_t v194 = swift_unknownObjectRetain_n(v193, 2LL);
              os_log_type_t v195 = static os_log_type_t.default.getter(v194);
              if (os_log_type_enabled((os_log_t)v50, v195))
              {
                uint64_t v196 = swift_slowAlloc(22LL, -1LL);
                uint64_t v197 = swift_slowAlloc(64LL, -1LL);
                uint64_t v419 = v197;
                *(_DWORD *)uint64_t v196 = v404.n128_u32[0];
                swift_bridgeObjectRetain(v93);
                *(void *)(v196 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( (uint64_t)v67,  (unint64_t)v93,  &v419);
                uint64_t v198 = swift_bridgeObjectRelease_n(v93, 3LL);
                *(_WORD *)(v196 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
                uint64_t v199 = INPerson.encodeBase64.getter(v198);
                unint64_t v201 = v200;
                *(void *)(v196 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v199, v200, &v419);
                swift_unknownObjectRelease(v193);

                swift_bridgeObjectRelease(v201);
                _os_log_impl(&dword_0, v411, v195, "selected node %s person encode %s", (uint8_t *)v196, 0x16u);
                swift_arrayDestroy(v197, 2LL, v403);
                swift_slowDealloc(v197, -1LL, -1LL);
                uint64_t v202 = v196;
                uint64_t v50 = (uint64_t)v411;
                uint64_t v203 = swift_slowDealloc(v202, -1LL, -1LL);
              }

              else
              {
                swift_unknownObjectRelease(v193);

                uint64_t v203 = swift_bridgeObjectRelease_n(v93, 2LL);
              }

              uint64_t v204 = INPerson.encodeBase64.getter(v203);
              int64_t v40 = (int64_t)v205;
              char v206 = _stringCompareWithSmolCheck(_:_:expecting:)(v204, v205, v67, v93, 0LL);
              swift_bridgeObjectRelease(v40);
              if ((v206 & 1) != 0) {
                goto LABEL_155;
              }
              swift_unknownObjectRelease(v193);
              ++v190;
              if (v192 == v406) {
                goto LABEL_140;
              }
            }

            swift_bridgeObjectRelease_n(v98, 2LL);
            int64_t v294 = v40;
          }

          else
          {
            uint64_t v243 = 0LL;
            v189.n128_u64[0] = 136315394LL;
            __n128 v404 = v189;
            uint64_t v117 = (char *)&type metadata for Any + 8;
            os_log_type_t v403 = (char *)&type metadata for Any + 8;
            while (1)
            {
              uint64_t v244 = v243 + 1;
              if (__OFADD__(v243, 1LL)) {
                goto LABEL_209;
              }
              id v245 = *(id *)(v98 + 8 * v243 + 32);
              swift_bridgeObjectRetain_n(v93, 2LL);
              id v193 = v245;
              os_log_type_t v246 = static os_log_type_t.default.getter(v193);
              if (os_log_type_enabled((os_log_t)v50, v246))
              {
                uint64_t v247 = swift_slowAlloc(22LL, -1LL);
                uint64_t v248 = swift_slowAlloc(64LL, -1LL);
                uint64_t v419 = v248;
                *(_DWORD *)uint64_t v247 = v404.n128_u32[0];
                swift_bridgeObjectRetain(v93);
                *(void *)(v247 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( (uint64_t)v67,  (unint64_t)v93,  &v419);
                uint64_t v249 = swift_bridgeObjectRelease_n(v93, 3LL);
                *(_WORD *)(v247 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
                uint64_t v250 = INPerson.encodeBase64.getter(v249);
                unint64_t v252 = v251;
                *(void *)(v247 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v250, v251, &v419);

                unint64_t v253 = v252;
                int64_t v40 = v406;
                swift_bridgeObjectRelease(v253);
                _os_log_impl(&dword_0, (os_log_t)v50, v246, "selected node %s person encode %s", (uint8_t *)v247, 0x16u);
                swift_arrayDestroy(v248, 2LL, v403);
                swift_slowDealloc(v248, -1LL, -1LL);
                uint64_t v254 = swift_slowDealloc(v247, -1LL, -1LL);
              }

              else
              {

                uint64_t v254 = swift_bridgeObjectRelease_n(v93, 2LL);
              }

              uint64_t v255 = INPerson.encodeBase64.getter(v254);
              int64_t v257 = (int64_t)v256;
              BOOL v258 = (uint8_t *)v255 == v67 && v93 == v256;
              uint64_t v50 = (uint64_t)v411;
              uint64_t v98 = v408;
              if (v258) {
                break;
              }
              char v259 = _stringCompareWithSmolCheck(_:_:expecting:)(v255, v256, v67, v93, 0LL);
              swift_bridgeObjectRelease(v257);
              if ((v259 & 1) != 0)
              {
LABEL_155:
                swift_bridgeObjectRelease_n(v98, 2LL);
                goto LABEL_163;
              }

              ++v243;
              if (v244 == v40) {
                goto LABEL_140;
              }
            }

            swift_bridgeObjectRelease_n(v408, 2LL);
            int64_t v294 = v257;
          }

          swift_bridgeObjectRelease(v294);
LABEL_163:
          swift_bridgeObjectRelease(v93);
          id v300 = v193;
          os_log_type_t v301 = static os_log_type_t.default.getter(v300);
          if (os_log_type_enabled((os_log_t)v50, v301))
          {
            uint64_t v302 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v303 = swift_slowAlloc(32LL, -1LL);
            uint64_t v419 = v303;
            *(_DWORD *)uint64_t v302 = 136315138;
            id v415 = v302 + 4;
            id v304 = v300;
            id v305 = [v304 description];
            unint64_t v306 = (os_log_s *)v50;
            uint64_t v307 = static String._unconditionallyBridgeFromObjectiveC(_:)(v305);
            unint64_t v309 = v308;

            uint64_t v421 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v307, v309, &v419);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v421, &v422);

            swift_bridgeObjectRelease(v309);
            _os_log_impl(&dword_0, v306, v301, "chosen item %s", v302, 0xCu);
            swift_arrayDestroy(v303, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v303, -1LL, -1LL);
            swift_slowDealloc(v302, -1LL, -1LL);
          }

          else
          {
          }

          uint64_t v310 = v402;
          (*(void (**)(void))(class metadata base offset for ShareETAFlowDelegate + *v409 + 104))(0LL);
          uint64_t v311 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v312 = swift_allocObject(v311, 40LL, 7LL);
          *(_OWORD *)(v312 + 16) = xmmword_95900;
          *(void *)(v312 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v300;
          uint64_t v419 = v312;
          specialized Array._endMutation()(v312);
          uint64_t v313 = v419;
          id v314 = objc_allocWithZone(&OBJC_CLASS___INShareETAIntent);
          type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
          Class v315 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v313);
          uint64_t v67 = (uint8_t *)[v314 initWithRecipients:v315];

          uint64_t v114 = v422;
          goto LABEL_150;
        }

        goto LABEL_140;
      }

LABEL_211:
      if (v98 >= 0) {
        uint64_t v368 = v117;
      }
      else {
        uint64_t v368 = (char *)v98;
      }
      swift_bridgeObjectRetain(v98);
      int64_t v40 = _CocoaArrayWrapper.endIndex.getter(v368);
      if (v40) {
        goto LABEL_96;
      }
LABEL_140:
      swift_bridgeObjectRelease(v93);
      swift_bridgeObjectRelease(v98);
      uint64_t v69 = (char *)&unk_D2000;
      uint64_t v76 = v402;
      goto LABEL_141;
    }

    (*(void (**)(char *, uint8_t *))(v82 + 96))(v124, v39);
    uint64_t v125 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v393 + 32))(v404.n128_u64[0], v124, v394);
    os_log_type_t v126 = static os_log_type_t.default.getter(v125);
    uint64_t v127 = os_log_type_enabled((os_log_t)v50, v126);
    if ((_DWORD)v127)
    {
      unint64_t v128 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v128 = 0;
      _os_log_impl(&dword_0, (os_log_t)v50, v126, "makeIntentFromParse, parsing uso parse)", v128, 2u);
      uint64_t v127 = swift_slowDealloc(v128, -1LL, -1LL);
    }

    uint64_t v129 = (*(uint64_t (**)(uint64_t))(*((void *)v69 + 323) + *v409 + 96LL))(v127);
    if (!v129)
    {
LABEL_83:
      type metadata accessor for GeoParse();
      static GeoParse.getDomainIntent(parse:)((uint64_t)v415, (uint64_t)v416);
      (*(void (**)(unint64_t, uint64_t))(v393 + 8))(v404.n128_u64[0], v394);
      if (v416[3])
      {
        uint64_t v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeoIntent);
        uint64_t v163 = type metadata accessor for LocationSearchIntent(0LL);
        else {
          uint64_t v164 = 0LL;
        }
      }

      else
      {
        outlined destroy of (label: String?, value: Any)?( (uint64_t)v416,  &demangling cache variable for type metadata for GeoIntent?);
        uint64_t v164 = 0LL;
      }

      swift_release(v422);
      uint64_t v422 = v164;
      if (!v67) {
        goto LABEL_149;
      }
      goto LABEL_89;
    }

    int64_t v40 = v129;
    uint64_t v130 = v387;
    uint64_t v131 = USOParse.userParse.getter(v129);
    uint64_t v132 = Siri_Nlu_External_UserParse.userDialogActs.getter(v131);
    (*(void (**)(char *, uint64_t))(v388 + 8))(v130, v389);
    uint64_t v133 = *(void *)(v132 + 16);
    uint64_t v134 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
    uint64_t v135 = *(void *)(v134 - 8);
    if (v133)
    {
      uint64_t v136 = (uint64_t)v386;
      (*(void (**)(char *, unint64_t, uint64_t))(v135 + 16))( v386,  v132 + ((*(unsigned __int8 *)(v135 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80)),  v134);
      uint64_t v137 = 0LL;
    }

    else
    {
      uint64_t v137 = 1LL;
      uint64_t v136 = (uint64_t)v386;
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v135 + 56))(v136, v137, 1LL, v134);
    swift_bridgeObjectRelease(v132);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v136, 1LL, v134) == 1)
    {
      swift_bridgeObjectRelease(v40);
      uint64_t v138 = &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?;
LABEL_82:
      outlined destroy of (label: String?, value: Any)?(v136, v138);
      goto LABEL_83;
    }

    uint64_t v139 = v136;
    uint64_t v140 = v372;
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    uint64_t v141 = (*(uint64_t (**)(uint64_t, uint64_t))(v135 + 8))(v139, v134);
    unint64_t v142 = v375;
    Siri_Nlu_External_UserStatedTask.task.getter(v141);
    uint64_t v143 = (*(uint64_t (**)(char *, uint64_t))(v373 + 8))(v140, v374);
    uint64_t v144 = Siri_Nlu_External_UsoGraph.identifiers.getter(v143);
    (*(void (**)(char *, uint64_t))(v376 + 8))(v142, v377);
    uint64_t v145 = *(void *)(v144 + 16);
    uint64_t v400 = (char *)v40;
    if (v145)
    {
      unint64_t v146 = v144 + ((v403[80] + 32LL) & ~(unint64_t)v403[80]);
      uint64_t v147 = *((void *)v403 + 9);
      uint64_t v148 = (uint64_t (*)(uint64_t, unint64_t, unint64_t, __n128))*((void *)v403 + 2);
      __n128 v149 = swift_bridgeObjectRetain(v144);
      unint64_t v150 = (unint64_t)v402;
      uint64_t v151 = v401;
      id v152 = v396;
      while (1)
      {
        uint64_t v153 = v148(v151, v146, v150, v149);
        uint64_t v154 = Siri_Nlu_External_UsoEntityIdentifier.namespace.getter(v153);
        uint64_t v155 = Google_Protobuf_StringValue.value.getter(v154);
        uint64_t v157 = v156;
        (*(void (**)(char *, uint64_t))(v397 + 8))(v152, v398);
        if (v155 == 0x64695F6D657469LL && v157 == 0xE700000000000000LL)
        {
          swift_bridgeObjectRelease(v144);
          unint64_t v161 = 0xE700000000000000LL;
          goto LABEL_78;
        }

        char v158 = _stringCompareWithSmolCheck(_:_:expecting:)(v155, v157, 0x64695F6D657469LL, 0xE700000000000000LL, 0LL);
        swift_bridgeObjectRelease(v157);
        if ((v158 & 1) != 0) {
          break;
        }
        uint64_t v151 = v401;
        unint64_t v150 = (unint64_t)v402;
        (*((void (**)(void, uint8_t *))v403 + 1))(v401, v402);
        v146 += v147;
        if (!--v145)
        {
          swift_bridgeObjectRelease(v144);
          uint64_t v159 = 1LL;
          uint64_t v50 = (uint64_t)v411;
          uint64_t v67 = v407;
          uint64_t v69 = (_BYTE *)&unk_D2000;
          uint64_t v160 = v403;
          uint64_t v136 = (uint64_t)v371;
          goto LABEL_79;
        }
      }

      unint64_t v161 = v144;
LABEL_78:
      swift_bridgeObjectRelease(v161);
      uint64_t v50 = (uint64_t)v411;
      unint64_t v150 = (unint64_t)v402;
      uint64_t v160 = v403;
      uint64_t v136 = (uint64_t)v371;
      (*((void (**)(char *, void, uint8_t *))v403 + 4))(v371, v401, v402);
      uint64_t v159 = 0LL;
      uint64_t v67 = v407;
      uint64_t v69 = (char *)&unk_D2000;
LABEL_79:
      int64_t v40 = (int64_t)v400;
    }

    else
    {
      uint64_t v159 = 1LL;
      unint64_t v150 = (unint64_t)v402;
      uint64_t v160 = v403;
      uint64_t v136 = (uint64_t)v371;
    }

    (*((void (**)(uint64_t, uint64_t, uint64_t, unint64_t))v160 + 7))(v136, v159, 1LL, v150);
    swift_bridgeObjectRelease(v144);
    if ((*((unsigned int (**)(uint64_t, uint64_t, unint64_t))v160 + 6))(v136, 1LL, v150) == 1)
    {
      swift_bridgeObjectRelease(v40);
      uint64_t v138 = &demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?;
      goto LABEL_82;
    }

    unint64_t v207 = v150;
    unint64_t v408 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
    uint64_t v39 = v208;
    uint64_t v209 = (*((uint64_t (**)(uint64_t, unint64_t))v160 + 1))(v136, v207);
    os_log_type_t v210 = static os_log_type_t.default.getter(v209);
    BOOL v211 = os_log_type_enabled((os_log_t)v50, v210);
    uint64_t v402 = v39;
    if (v211)
    {
      swift_bridgeObjectRetain_n(v39, 2LL);
      uint64_t v213 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v214 = swift_slowAlloc(32LL, -1LL);
      v416[0] = v214;
      *(_DWORD *)uint64_t v213 = 136315138;
      swift_bridgeObjectRetain(v402);
      uint64_t v417 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v408, (unint64_t)v402, v416);
      uint64_t v39 = v402;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v417, v418);
      swift_bridgeObjectRelease_n(v39, 3LL);
      _os_log_impl(&dword_0, (os_log_t)v50, v210, "contactId on disambiguation is %s", v213, 0xCu);
      swift_arrayDestroy(v214, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v214, -1LL, -1LL);
      uint64_t v215 = v213;
      uint64_t v67 = v407;
      swift_slowDealloc(v215, -1LL, -1LL);
    }

    uint64_t v91 = v40 & 0xFFFFFFFFFFFFFF8LL;
    if (!((unint64_t)v40 >> 62))
    {
      uint64_t v93 = *(char **)((char *)&dword_10 + (v40 & 0xFFFFFFFFFFFFFF8LL));
      if (v93)
      {
LABEL_112:
        unint64_t v406 = v40 & 0xC000000000000001LL;
        uint64_t v216 = 4LL;
        *(void *)&__int128 v212 = 136315394LL;
        __int128 v401 = v212;
        uint64_t v399 = (char *)&type metadata for Any + 8;
        os_log_type_t v403 = v93;
        while (1)
        {
          uint64_t v67 = (uint8_t *)(v216 - 4);
          id v218 = v406
               ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v216 - 4, v40)
               : *(id *)(v40 + 8 * v216);
          uint64_t v219 = v218;
          uint64_t v98 = v216 - 3;
          if (__OFADD__(v67, 1LL)) {
            break;
          }
          os_log_type_t v220 = static os_log_type_t.default.getter(v218);
          id v221 = v219;
          if (os_log_type_enabled((os_log_t)v50, v220))
          {
            uint64_t v222 = swift_slowAlloc(22LL, -1LL);
            uint64_t v223 = swift_slowAlloc(64LL, -1LL);
            uint64_t v417 = v223;
            *(_DWORD *)uint64_t v222 = v401;
            id v224 = v221;
            id v225 = [v224 description];
            uint64_t v226 = static String._unconditionallyBridgeFromObjectiveC(_:)(v225);
            unint64_t v228 = v227;

            *(void *)(v222 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v226, v228, &v417);
            swift_bridgeObjectRelease(v228);
            *(_WORD *)(v222 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
            id v229 = [v224 contactIdentifier];
            if (v229)
            {
              uint64_t v230 = v229;
              uint64_t v231 = static String._unconditionallyBridgeFromObjectiveC(_:)(v229);
              uint64_t v233 = v232;
            }

            else
            {
              uint64_t v231 = 0LL;
              uint64_t v233 = 0LL;
            }

            uint64_t v39 = v402;
            v416[0] = v231;
            v416[1] = v233;
            uint64_t v234 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
            uint64_t v235 = String.init<A>(describing:)(v416, v234);
            unint64_t v237 = v236;
            *(void *)(v222 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v235, v236, &v417);

            swift_bridgeObjectRelease(v237);
            uint64_t v50 = (uint64_t)v411;
            _os_log_impl(&dword_0, v411, v220, "%s has contactId %s", (uint8_t *)v222, 0x16u);
            swift_arrayDestroy(v223, 2LL, v399);
            swift_slowDealloc(v223, -1LL, -1LL);
            swift_slowDealloc(v222, -1LL, -1LL);
            uint64_t v69 = (char *)&unk_D2000;
            int64_t v40 = (int64_t)v400;
          }

          else
          {
          }

          id v238 = [v221 contactIdentifier];
          if (v238)
          {
            uint64_t v239 = v238;
            uint64_t v240 = static String._unconditionallyBridgeFromObjectiveC(_:)(v238);
            uint64_t v242 = v241;

            if (v408 == v240 && v39 == v242)
            {
              swift_bridgeObjectRelease(v40);
              swift_bridgeObjectRelease_n(v39, 2LL);
LABEL_159:
              (*(void (**)(void))(*((void *)v69 + 323) + *v409 + 104LL))(0LL);
              uint64_t v295 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
              uint64_t v296 = swift_allocObject(v295, 40LL, 7LL);
              *(_OWORD *)(v296 + 16) = xmmword_95900;
              *(void *)(v296 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v221;
              v416[0] = v296;
              specialized Array._endMutation()(v296);
              uint64_t v297 = v416[0];
              id v298 = objc_allocWithZone(&OBJC_CLASS___INShareETAIntent);
              type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
              Class v299 = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease(v297);
              uint64_t v67 = (uint8_t *)[v298 initWithRecipients:v299];

              (*(void (**)(unint64_t, uint64_t))(v393 + 8))(v404.n128_u64[0], v394);
              goto LABEL_160;
            }

            char v217 = _stringCompareWithSmolCheck(_:_:expecting:)(v408, v39, v240, v242, 0LL);
            swift_bridgeObjectRelease(v242);
            if ((v217 & 1) != 0)
            {
              swift_bridgeObjectRelease(v39);
              swift_bridgeObjectRelease(v40);
              goto LABEL_159;
            }
          }

          ++v216;
          uint64_t v93 = v403;
          if ((char *)v98 == v403)
          {
            swift_bridgeObjectRelease(v39);
            swift_bridgeObjectRelease(v40);
            uint64_t v67 = v407;
            goto LABEL_83;
          }
        }

        __break(1u);
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
        goto LABEL_211;
      }

      goto LABEL_223;
    }

LABEL_219:
    if (v40 >= 0) {
      uint64_t v369 = v91;
    }
    else {
      uint64_t v369 = v40;
    }
    swift_bridgeObjectRetain(v40);
    uint64_t v93 = (char *)_CocoaArrayWrapper.endIndex.getter(v369);
    swift_bridgeObjectRelease(v40);
    if (v93) {
      goto LABEL_112;
    }
LABEL_223:
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(v40);
    goto LABEL_83;
  }

uint64_t ShareETAFlowDelegate.makeAppResolution()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = static os_log_type_t.info.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  os_log(_:dso:log:_:_:)( v9,  &dword_0,  *(void *)(v8 + direct field offset for ShareETAFlowDelegate.logObject),  "makeAppResolution executed",  26LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeoAppResolutionService<INShareETAIntent>);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  return AppResolutionService.init()();
}

uint64_t ShareETAFlowDelegate.makeDialogTemplating()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = static os_log_type_t.info.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  os_log(_:dso:log:_:_:)( v9,  &dword_0,  *(void *)(v8 + direct field offset for ShareETAFlowDelegate.logObject),  "makeDialogTemplating executed",  29LL,  2LL,  _swiftEmptyArrayStorage);
  outlined init with copy of DeviceState( v8 + direct field offset for ShareETAFlowDelegate.currentDeviceState,  (uint64_t)v12);
  uint64_t v10 = type metadata accessor for ShareETATemplatingService(0LL);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  return ShareETATemplatingService.init(deviceState:)(v12);
}

uint64_t ShareETATemplatingService.__allocating_init(deviceState:)(void *a1)
{
  return ShareETATemplatingService.init(deviceState:)(a1);
}

uint64_t ShareETAFlowDelegate.makeUnsupportedValueBehavior(app:intent:parameterName:intentResolutionResult:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12 = static os_log_type_t.info.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v13 = *(void *)(v9 + direct field offset for ShareETAFlowDelegate.logObject);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_95430;
  id v16 = [a5 unsupportedReason];
  *(void *)(v15 + 56) = &type metadata for Int;
  *(void *)(v15 + 64) = &protocol witness table for Int;
  *(void *)(v15 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v16;
  os_log(_:dso:log:_:_:)(v12, &dword_0, v13, "makeUnsupportedValueBehavior with result %d", v21);
  swift_bridgeObjectRelease(v15);
  id v17 = [a5 unsupportedReason];
  uint64_t v18 = type metadata accessor for UnsupportedValueBehavior(0LL);
  uint64_t v19 = (unsigned int *)&enum case for UnsupportedValueBehavior.dialogAndPrompt(_:);
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v18 - 8) + 104LL))(a9, *v19, v18);
}

uint64_t ShareETAFlowDelegate.makeAceViewProvider()(uint64_t a1)
{
  uint64_t v2 = *(os_log_s **)(v1 + direct field offset for ShareETAFlowDelegate.logObject);
  os_log_type_t v3 = static os_log_type_t.default.getter(a1);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "makeAceViewProvider executed", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = type metadata accessor for ShareETAAceViewProvider(0LL);
  uint64_t v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  uint64_t v7 = direct field offset for ShareETAAceViewProvider.logObject;
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  swift_retain(v6);
  *(void *)(v6 + v__swift_destroy_boxed_opaque_existential_0Tm(v0 + 7) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000017LL,  0x8000000000096410LL);
  uint64_t v8 = swift_release(v6);
  return DefaultAceViewProvider.init()(v8);
}

uint64_t ShareETAAceViewProvider.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v2 = direct field offset for ShareETAAceViewProvider.logObject;
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  swift_retain(v1);
  *(void *)(v1 + v__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000017LL,  0x8000000000096410LL);
  uint64_t v3 = swift_release(v1);
  return DefaultAceViewProvider.init()(v3);
}

uint64_t ShareETAFlowDelegate.makeDisambiguationList(app:intent:parameterName:intentResolutionResult:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(void), uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v63 = a4;
  uint64_t v13 = type metadata accessor for Locale(0LL);
  uint64_t v61 = *(void *)(v13 - 8);
  uint64_t v62 = v13;
  uint64_t v14 = __chkstk_darwin();
  uint64_t v60 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = static os_log_type_t.info.getter(v14, v16, v17, v18, v19, v20, v21, v22);
  uint64_t v24 = *(os_log_s **)((char *)v7 + direct field offset for ShareETAFlowDelegate.logObject);
  os_log(_:dso:log:_:_:)(v23, &dword_0, v24, "makeDisambiguationList", 22LL, 2LL, _swiftEmptyArrayStorage);
  id v25 = [a5 disambiguationItems];
  uint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v27 = *(void *)(v26 + 16);
  uint64_t v28 = swift_bridgeObjectRelease(v26);
  if (!v27)
  {
    uint64_t v46 = static os_log_type_t.error.getter(v28);
    os_log(_:dso:log:_:_:)( v46,  &dword_0,  v24,  "disambiguation items can't be empty",  35LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v47 = type metadata accessor for SiriKitDisambiguationList(0LL);
    swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
    uint64_t v48 = SiriKitDisambiguationList.init(rawItems:disambiguationItems:shouldReadItemsInVox:requestUnlockForEmptyOrDuplicateItems:)( _swiftEmptyArrayStorage,  _swiftEmptyArrayStorage,  0LL,  0LL);
    a6();
    return swift_release(v48);
  }

  uint64_t v59 = a6;
  id v29 = objc_msgSend(a5, "disambiguationItems", a7);
  uint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v31 = specialized _arrayConditionalCast<A, B>(_:)( v30,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
  uint64_t v32 = swift_bridgeObjectRelease(v30);
  if (!v31)
  {
    uint64_t v49 = static os_log_type_t.error.getter(v32);
    os_log(_:dso:log:_:_:)( v49,  &dword_0,  v24,  "disambiguation items can't be empty",  35LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v50 = type metadata accessor for SiriKitDisambiguationList(0LL);
    swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
    goto LABEL_12;
  }

  uint64_t v33 = v63;
  if (a3 != 0x6E65697069636572LL || v63 != 0xE900000000000074LL)
  {
    uint64_t v32 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E65697069636572LL, 0xE900000000000074LL, a3, v63, 0LL);
    if ((v32 & 1) == 0)
    {
      uint64_t v51 = swift_bridgeObjectRelease(v31);
      uint64_t v52 = static os_log_type_t.error.getter(v51);
      uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v54 = swift_allocObject(v53, 72LL, 7LL);
      *(_OWORD *)(v54 + 16) = xmmword_95430;
      *(void *)(v54 + 56) = &type metadata for String;
      *(void *)(v54 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v54 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a3;
      *(void *)(v54 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v33;
      *(void *)&double v55 = swift_bridgeObjectRetain(v33).n128_u64[0];
      os_log(_:dso:log:_:_:)(v52, &dword_0, v24, "unhandles parameter name %@", 27LL, 2LL, v54, v55);
      swift_bridgeObjectRelease(v54);
      uint64_t v56 = type metadata accessor for SiriKitDisambiguationList(0LL);
      swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
LABEL_12:
      uint64_t v57 = SiriKitDisambiguationList.init(rawItems:disambiguationItems:shouldReadItemsInVox:requestUnlockForEmptyOrDuplicateItems:)( _swiftEmptyArrayStorage,  _swiftEmptyArrayStorage,  0LL,  0LL);
      v59();
      return swift_release(v57);
    }
  }

  os_log_type_t v34 = static os_log_type_t.default.getter(v32);
  if (os_log_type_enabled(v24, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v35 = 0;
    _os_log_impl(&dword_0, v24, v34, "Building contacts disambiguation list", v35, 2u);
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  uint64_t v36 = *(void *)((char *)v8 + direct field offset for ShareETAFlowDelegate.currentDeviceState + 24);
  uint64_t v37 = *(void *)((char *)v8 + direct field offset for ShareETAFlowDelegate.currentDeviceState + 32);
  __swift_project_boxed_opaque_existential_1( (void *)((char *)v8 + direct field offset for ShareETAFlowDelegate.currentDeviceState),  v36);
  swift_bridgeObjectRetain(v31);
  uint64_t v38 = (uint64_t)v60;
  dispatch thunk of DeviceState.siriLocale.getter(v36, v37);
  uint64_t v39 = specialized static DisambiguationListUtils.makeDisambiguationItems(persons:locale:)((int64_t)v31, v38);
  int64_t v40 = *(void (**)(__n128))(class metadata base offset for ShareETAFlowDelegate + *v8 + 104);
  __n128 v41 = swift_bridgeObjectRetain(v31);
  v40(v41);
  uint64_t v42 = specialized _arrayForceCast<A, B>(_:)((uint64_t)v31);
  uint64_t v43 = type metadata accessor for SiriKitDisambiguationList(0LL);
  swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
  swift_bridgeObjectRetain(v39);
  uint64_t v44 = SiriKitDisambiguationList.init(rawItems:disambiguationItems:shouldReadItemsInVox:requestUnlockForEmptyOrDuplicateItems:)( v42,  v39,  1LL,  0LL);
  v59();
  swift_bridgeObjectRelease_n(v31, 2LL);
  swift_bridgeObjectRelease(v39);
  swift_release(v44);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 8))(v38, v62);
}

void *specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1)
{
  return specialized _arrayConditionalCast<A, B>(_:)( a1,  &lazy cache variable for type metadata for INSupportedTrafficIncidentType,  &OBJC_CLASS___INSupportedTrafficIncidentType_ptr);
}

void *specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t v15 = _swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v6);
  if (!v6) {
    return v15;
  }
  for (uint64_t i = a1 + 32; ; i += 32LL)
  {
    outlined init with copy of Any(i, (uint64_t)v14);
    uint64_t v8 = type metadata accessor for OS_os_log(0LL, a2, a3);
    id v9 = v13;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v10 = v15[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
    uint64_t v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v9);
    specialized ContiguousArray._endMutation()(v11);
    if (!--v6) {
      return v15;
    }
  }

  id v13 = 0LL;
  swift_release(v15);

  return 0LL;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v2 & ~(v2 >> 63),  0);
  if ((v2 & 0x8000000000000000LL) == 0)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
      {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        uint64_t v6 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
        swift_dynamicCast(v16, &v15, v6, (char *)&type metadata for Any + 8, 7LL);
        uint64_t v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1LL, 1);
          uint64_t v3 = v17;
        }

        unint64_t v8 = v3[2];
        unint64_t v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
          uint64_t v3 = v17;
        }

        v3[2] = v8 + 1;
        outlined init with take of Any(v16, &v3[4 * v8 + 4]);
      }
    }

    else
    {
      id v9 = (id *)(a1 + 32);
      uint64_t v10 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
      do
      {
        id v15 = *v9;
        id v11 = v15;
        swift_dynamicCast(v16, &v15, v10, (char *)&type metadata for Any + 8, 7LL);
        uint64_t v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1LL, 1);
          uint64_t v3 = v17;
        }

        unint64_t v13 = v3[2];
        unint64_t v12 = v3[3];
        if (v13 >= v12 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v12 > 1,  v13 + 1,  1);
          uint64_t v3 = v17;
        }

        v3[2] = v13 + 1;
        outlined init with take of Any(v16, &v3[4 * v13 + 4]);
        ++v9;
        --v2;
      }

      while (v2);
    }

    return (uint64_t)v3;
  }

  __break(1u);
  return result;
}

uint64_t ShareETAFlowDelegate.makeNLContextProvider()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = static os_log_type_t.info.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  os_log(_:dso:log:_:_:)( v9,  &dword_0,  *(void *)((char *)v8 + direct field offset for ShareETAFlowDelegate.logObject),  "Returning ShareETAContextProvider",  33LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v10 = outlined init with copy of DeviceState( (uint64_t)v8 + direct field offset for ShareETAFlowDelegate.currentDeviceState,  (uint64_t)v19);
  char v11 = (*(uint64_t (**)(uint64_t))(class metadata base offset for ShareETAFlowDelegate + *v8 + 40))(v10);
  char v12 = (*(uint64_t (**)(void))(class metadata base offset for ShareETAFlowDelegate + *v8 + 64))();
  uint64_t v13 = type metadata accessor for ShareETAContextProvider(0LL);
  uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v15 = direct field offset for ShareETAContextProvider.logObject;
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  swift_retain(v14);
  *(void *)(v14 + v15) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000017LL,  0x8000000000096430LL);
  outlined init with copy of DeviceState( (uint64_t)v19,  v14 + direct field offset for ShareETAContextProvider.currentDeviceState);
  *(_BYTE *)(v14 + direct field offset for ShareETAContextProvider.isPOMMES) = v11 & 1;
  *(_BYTE *)(v14 + direct field offset for ShareETAContextProvider.isUSO) = v12 & 1;
  uint64_t v16 = swift_release(v14);
  uint64_t v17 = DefaultNLContextProvider.init()(v16);
  __swift_destroy_boxed_opaque_existential_0Tm(v19);
  return v17;
}

uint64_t ShareETAContextProvider.__allocating_init(deviceState:isPOMMES:isUSO:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ShareETAFlowDelegate.__allocating_init(deviceState:isPOMMES:isUSO:)( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))ShareETAContextProvider.init(deviceState:isPOMMES:isUSO:));
}

uint64_t ShareETAFlowDelegate.__allocating_init(deviceState:isPOMMES:isUSO:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  return a4(a1, a2, a3);
}

BOOL ShareETAFlowDelegate.shouldConfirmIntentWithUser(intent:intentResponse:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = static os_log_type_t.info.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v11 = *(void *)(v8 + direct field offset for ShareETAFlowDelegate.logObject);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
  *(_OWORD *)(v13 + 16) = xmmword_95430;
  uint64_t v14 = (char *)[a2 code];
  if (v14 == (_BYTE *)&dword_0 + 2) {
    uint64_t v15 = 1702195828LL;
  }
  else {
    uint64_t v15 = 0x65736C6166LL;
  }
  if (v14 == (_BYTE *)&dword_0 + 2) {
    unint64_t v16 = 0xE400000000000000LL;
  }
  else {
    unint64_t v16 = 0xE500000000000000LL;
  }
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v13 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v15;
  *(void *)(v13 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v16;
  os_log(_:dso:log:_:_:)(v10, &dword_0, v11, "share ETA shouldConfirmIntentWithUser: %@", 41LL, 2LL, v13);
  swift_bridgeObjectRelease(v13);
  return [a2 code] == (char *)&dword_0 + 2;
}

uint64_t ShareETAFlowDelegate.makeConfirmationStateFromParse(parse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for USOParse(0LL);
  uint64_t v114 = *(void *)(v5 - 8);
  uint64_t v115 = v5;
  __chkstk_darwin();
  uint64_t v112 = (char *)v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  id v111 = (char *)v109 - v7;
  __chkstk_darwin();
  uint64_t v116 = (char *)v109 - v8;
  uint64_t v120 = type metadata accessor for NLIntent(0LL);
  uint64_t v118 = *(void *)(v120 - 8);
  __chkstk_darwin();
  uint64_t v119 = (void **)((char *)v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v117 = (void **)((char *)v109 - v10);
  uint64_t v11 = type metadata accessor for Parse(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (void **)((char *)v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  unint64_t v16 = (char *)v109 - v15;
  uint64_t v17 = __chkstk_darwin();
  uint64_t v19 = (char *)v109 - v18;
  os_log_type_t v27 = static os_log_type_t.info.getter(v17, v20, v21, v22, v23, v24, v25, v26);
  uint64_t v28 = *(os_log_s **)(v2 + direct field offset for ShareETAFlowDelegate.logObject);
  id v29 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v121 = a1;
  v29(v19, a1, v11);
  os_log_type_t v30 = v27;
  if (os_log_type_enabled(v28, v27))
  {
    uint64_t v31 = swift_slowAlloc(12LL, -1LL);
    uint64_t v110 = a2;
    uint64_t v32 = (uint8_t *)v31;
    uint64_t v33 = swift_slowAlloc(32LL, -1LL);
    v125[0] = v33;
    os_log_t v113 = v28;
    *(_DWORD *)uint64_t v32 = 136315138;
    v109[1] = v32 + 4;
    v29(v16, (uint64_t)v19, v11);
    uint64_t v34 = String.init<A>(describing:)(v16, v11);
    unint64_t v36 = v35;
    *(void *)&__int128 v123 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v125);
    uint64_t v28 = v113;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, (char *)&v123 + 8);
    swift_bridgeObjectRelease(v36);
    uint64_t v37 = *(void (**)(char *, uint64_t))(v12 + 8);
    v37(v19, v11);
    _os_log_impl(&dword_0, v28, v30, "share ETA makeConfirmationStateFromParse: %s", v32, 0xCu);
    swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1LL, -1LL);
    uint64_t v38 = v32;
    a2 = v110;
    swift_slowDealloc(v38, -1LL, -1LL);
  }

  else
  {
    uint64_t v37 = *(void (**)(char *, uint64_t))(v12 + 8);
    v37(v19, v11);
  }

  uint64_t v39 = v121;
  v29((char *)v14, v121, v11);
  int v40 = (*(uint64_t (**)(void **, uint64_t))(v12 + 88))(v14, v11);
  if (v40 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(void **, uint64_t))(v12 + 96))(v14, v11);
    goto LABEL_8;
  }

  if (v40 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(void **, uint64_t))(v12 + 96))(v14, v11);
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release(*(void **)((char *)v14 + *(int *)(v41 + 48)));
LABEL_8:
    uint64_t v42 = v117;
    uint64_t v43 = *(void (**)(char *, void **, uint64_t))(v118 + 32);
    uint64_t v44 = v120;
    v43((char *)v117, v14, v120);
    uint64_t v45 = v119;
    v43((char *)v119, v42, v44);
    uint64_t v46 = type metadata accessor for LocationSearchIntent(0LL);
    uint64_t v47 = swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
    uint64_t v48 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
    if (one-time initialization token for domainNode != -1) {
      swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
    }
    uint64_t v49 = static LocationSearchIntent.domainNode;
    *(void *)(v47 + v48) = static LocationSearchIntent.domainNode;
    v43((char *)(v47 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent), v45, v44);
    v125[0] = v47;
    uint64_t v50 = one-time initialization token for confirmationNode;
    swift_retain(v49);
    if (v50 != -1) {
      swift_once( &one-time initialization token for confirmationNode,  one-time initialization function for confirmationNode);
    }
    uint64_t v51 = static LocationSearchIntent.confirmationNode;
    unint64_t v52 = lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent();
    IntentNodeTraversable.value<A>(forNode:)(&v123, v51, v46, v52);
    __asm { BR              X10 }
  }

  if (v40 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(void **, uint64_t))(v12 + 96))(v14, v11);
    uint64_t v53 = *v14;
    uint64_t v54 = type metadata accessor for LocationSearchIntent(0LL);
    swift_allocObject(v54, *(unsigned int *)(v54 + 48), *(unsigned __int16 *)(v54 + 52));
    id v55 = v53;
    uint64_t v56 = LocationSearchIntent.init(from:)(v55);
    (*(void (**)(uint64_t))(*(void *)v56 + 256LL))(v56);

    return swift_release(v56);
  }

  if (v40 != enum case for Parse.uso(_:))
  {
    uint64_t v76 = enum case for SiriKitConfirmationState.unset(_:);
    uint64_t v77 = type metadata accessor for SiriKitConfirmationState(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 104LL))(a2, v76, v77);
    return ((uint64_t (*)(void **, uint64_t))v37)(v14, v11);
  }

  (*(void (**)(void **, uint64_t))(v12 + 96))(v14, v11);
  uint64_t v58 = v114;
  uint64_t v59 = v115;
  uint64_t v60 = v116;
  uint64_t v61 = (*(uint64_t (**)(char *, void **, uint64_t))(v114 + 32))(v116, v14, v115);
  os_log_type_t v62 = static os_log_type_t.default.getter(v61);
  uint64_t v63 = v28;
  if (os_log_type_enabled(v28, v62))
  {
    unint64_t v64 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v64 = 0;
    _os_log_impl(&dword_0, v63, v62, "makeConfirmationstateFromParse, parsing uso parse", v64, 2u);
    swift_slowDealloc(v64, -1LL, -1LL);
  }

  type metadata accessor for GeoParse();
  static GeoParse.getDomainIntent(parse:)(v39, (uint64_t)&v123);
  if (v124)
  {
    outlined init with take of CATType(&v123, (uint64_t)v125);
    outlined init with copy of DeviceState((uint64_t)v125, (uint64_t)&v123);
    uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeoIntent);
    uint64_t v66 = type metadata accessor for LocationSearchIntent(0LL);
    uint64_t v67 = swift_dynamicCast(&v122, &v123, v65, v66, 6LL);
    if ((_DWORD)v67)
    {
      uint64_t v75 = v122;
      (*(void (**)(void))(*(void *)v122 + 256LL))();
      swift_release(v75);
      __swift_destroy_boxed_opaque_existential_0Tm(v125);
      return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v60, v59);
    }

    os_log_type_t v95 = static os_log_type_t.info.getter(v67, v68, v69, v70, v71, v72, v73, v74);
    uint64_t v96 = v111;
    (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v111, v60, v59);
    uint64_t v97 = v58;
    os_log_type_t v98 = v95;
    if (!os_log_type_enabled(v63, v95))
    {
      unint64_t v106 = *(void (**)(char *, uint64_t))(v58 + 8);
      v106(v96, v59);
      __swift_destroy_boxed_opaque_existential_0Tm(v125);
      v106(v60, v59);
      goto LABEL_29;
    }

    os_log_t v113 = v63;
    os_log_type_t v99 = v96;
    uint64_t v100 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v101 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 v123 = v101;
    *(_DWORD *)uint64_t v100 = 136315138;
    uint64_t v102 = USOParse.debugDescription.getter();
    unint64_t v104 = v103;
    uint64_t v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v103, (uint64_t *)&v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123);
    swift_bridgeObjectRelease(v104);
    uint64_t v94 = *(void (**)(char *, uint64_t))(v97 + 8);
    v94(v99, v59);
    _os_log_impl(&dword_0, v113, v98, "SiriGeo expected LocationSearchIntent, recieved %s.", v100, 0xCu);
    swift_arrayDestroy(v101, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v101, -1LL, -1LL);
    swift_slowDealloc(v100, -1LL, -1LL);
    __swift_destroy_boxed_opaque_existential_0Tm(v125);
  }

  else
  {
    uint64_t v78 = outlined destroy of (label: String?, value: Any)?( (uint64_t)&v123,  &demangling cache variable for type metadata for GeoIntent?);
    os_log_type_t v86 = static os_log_type_t.info.getter(v78, v79, v80, v81, v82, v83, v84, v85);
    uint64_t v87 = v112;
    (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v112, v60, v59);
    os_log_type_t v88 = v86;
    if (!os_log_type_enabled(v63, v86))
    {
      uint64_t v105 = *(void (**)(char *, uint64_t))(v58 + 8);
      v105(v87, v59);
      v105(v60, v59);
      goto LABEL_29;
    }

    os_log_t v113 = v63;
    uint64_t v89 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v90 = swift_slowAlloc(32LL, -1LL);
    v125[0] = v90;
    *(_DWORD *)uint64_t v89 = 136315138;
    uint64_t v91 = USOParse.debugDescription.getter();
    unint64_t v93 = v92;
    *(void *)&__int128 v123 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, v125);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, (char *)&v123 + 8);
    swift_bridgeObjectRelease(v93);
    uint64_t v94 = *(void (**)(char *, uint64_t))(v58 + 8);
    v94(v87, v59);
    _os_log_impl(&dword_0, v113, v88, "SiriGeo received a USO parse it doesn't support %s.", v89, 0xCu);
    swift_arrayDestroy(v90, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v90, -1LL, -1LL);
    swift_slowDealloc(v89, -1LL, -1LL);
  }

  v94(v116, v59);
LABEL_29:
  uint64_t v107 = enum case for SiriKitConfirmationState.unset(_:);
  uint64_t v108 = type metadata accessor for SiriKitConfirmationState(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 104LL))(a2, v107, v108);
}

void ShareETAFlowDelegate.init()()
{
}

uint64_t ShareETAFlowDelegate.__ivar_destroyer()
{
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0
                                                        + direct field offset for ShareETAFlowDelegate.currentDeviceState));

  return swift_bridgeObjectRelease(*(void *)(v0 + direct field offset for ShareETAFlowDelegate.disambiguationState));
}

uint64_t ShareETAFlowDelegate.deinit()
{
  uint64_t v0 = BaseRCHFlowDelegate.deinit();
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0
                                                        + direct field offset for ShareETAFlowDelegate.currentDeviceState));

  swift_bridgeObjectRelease(*(void *)(v0 + direct field offset for ShareETAFlowDelegate.disambiguationState));
  return v0;
}

uint64_t ShareETAFlowDelegate.__deallocating_deinit()
{
  uint64_t v0 = BaseRCHFlowDelegate.deinit();
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0
                                                        + direct field offset for ShareETAFlowDelegate.currentDeviceState));

  swift_bridgeObjectRelease(*(void *)(v0 + direct field offset for ShareETAFlowDelegate.disambiguationState));
  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

id ShareETAAceViewProvider.logObject.getter()
{
  return *(id *)(v0 + direct field offset for ShareETAAceViewProvider.logObject);
}

uint64_t ShareETAAceViewProvider.makeAceViewsForResolveNeedsDisambiguation(app:parameterName:intent:utteranceViews:disambiguationList:deviceIsLocked:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, void (*a8)(void, void))
{
  uint64_t v48 = a8;
  uint64_t v11 = type metadata accessor for ImageSize(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin();
  uint64_t v15 = (char *)&v49[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = static os_log_type_t.info.getter(v13, v16, v17, v18, v19, v20, v21, v22);
  os_log(_:dso:log:_:_:)( v23,  &dword_0,  *(void *)(v8 + direct field offset for ShareETAAceViewProvider.logObject),  "makeAceViewsForResolveNeedsDisambiguation",  41LL,  2LL,  _swiftEmptyArrayStorage);
  static Device.current.getter(v49);
  uint64_t v24 = v50;
  uint64_t v25 = v51;
  __swift_project_boxed_opaque_existential_1(v49, v50);
  char v26 = dispatch thunk of DeviceState.isCarPlay.getter(v24, v25);
  uint64_t v27 = __swift_destroy_boxed_opaque_existential_0Tm(v49);
  if ((v26 & 1) != 0)
  {
    uint64_t v28 = v48;
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v30 = swift_allocObject(v29, 40LL, 7LL);
    *(_OWORD *)(v30 + 16) = xmmword_95900;
    uint64_t v31 = SiriKitDisambiguationList.disambiguationItems.getter(v30);
    uint64_t v32 = static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForCarPlay(disambiguationItems:deviceIsLocked:)( v31,  a7 & 1);
    uint64_t v33 = swift_bridgeObjectRelease(v31);
    *(void *)(v30 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v32;
    v49[0] = v30;
    specialized Array._endMutation()(v33);
    uint64_t v34 = v49[0];
    if ((unint64_t)a5 >> 62)
    {
      if (a5 < 0) {
        uint64_t v44 = a5;
      }
      else {
        uint64_t v44 = a5 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v45 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for SAAceView,  &OBJC_CLASS___SAAceView_ptr);
      __n128 v46 = swift_bridgeObjectRetain(a5);
      uint64_t v47 = _bridgeCocoaArray<A>(_:)(v44, v45, v46);
      swift_bridgeObjectRelease(a5);
      a5 = v47;
    }

    else
    {
      __n128 v35 = swift_bridgeObjectRetain(a5);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v35);
      type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for SAAceView,  &OBJC_CLASS___SAAceView_ptr);
    }

    v49[0] = v34;
    specialized Array.append<A>(contentsOf:)(a5);
    uint64_t v36 = v49[0];
    v28(v49[0], 0LL);
  }

  else
  {
    uint64_t v37 = SiriKitDisambiguationList.disambiguationItems.getter(v27);
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v15, enum case for ImageSize.default(_:), v11);
    uint64_t v38 = (void *)static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetPhone(disambiguationItems:deviceIsLocked:imageSize:)( v37,  a7 & 1,  v15);
    swift_bridgeObjectRelease(v37);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    type metadata accessor for SiriKitAceViewBuilder(0LL);
    static Device.current.getter(v49);
    uint64_t v39 = dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)(v49);
    __swift_destroy_boxed_opaque_existential_0Tm(v49);
    uint64_t v40 = dispatch thunk of SiriKitAceViewBuilder.addSnippet(snippet:)(v38);
    swift_release(v39);
    uint64_t v41 = dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)(a5);
    uint64_t v42 = swift_release(v40);
    uint64_t v36 = dispatch thunk of SiriKitAceViewBuilder.build()(v42);
    swift_release(v41);
    v48(v36, 0LL);
  }

  return swift_bridgeObjectRelease(v36);
}

uint64_t ShareETAAceViewProvider.init()()
{
  uint64_t v1 = direct field offset for ShareETAAceViewProvider.logObject;
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  swift_retain(v0);
  *(void *)(v0 + v1) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000017LL,  0x8000000000096410LL);
  uint64_t v2 = swift_release(v0);
  return DefaultAceViewProvider.init()(v2);
}

void ShareETAAceViewProvider.__ivar_destroyer()
{
}

uint64_t ShareETAAceViewProvider.deinit()
{
  uint64_t v0 = DefaultAceViewProvider.deinit();

  return v0;
}

uint64_t ShareETAAceViewProvider.__deallocating_deinit()
{
  uint64_t v0 = DefaultAceViewProvider.deinit();

  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t ShareETAContextProvider.currentDeviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return ShareETAContextProvider.currentDeviceState.getter( &direct field offset for ShareETAContextProvider.currentDeviceState,  a1);
}

uint64_t ShareETAContextProvider.currentDeviceState.setter(__int128 *a1)
{
  return ShareETAContextProvider.currentDeviceState.setter( a1,  &direct field offset for ShareETAContextProvider.currentDeviceState);
}

uint64_t (*ShareETAContextProvider.currentDeviceState.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t ShareETAContextProvider.isPOMMES.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for ShareETAContextProvider.isPOMMES);
}

uint64_t ShareETAContextProvider.isUSO.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for ShareETAContextProvider.isUSO);
}

uint64_t ShareETAContextProvider.init(deviceState:isPOMMES:isUSO:)(void *a1, char a2, char a3)
{
  uint64_t v7 = direct field offset for ShareETAContextProvider.logObject;
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  swift_retain(v3);
  *(void *)(v3 + v__swift_destroy_boxed_opaque_existential_0Tm(v0 + 7) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000017LL,  0x8000000000096430LL);
  outlined init with copy of DeviceState( (uint64_t)a1,  v3 + direct field offset for ShareETAContextProvider.currentDeviceState);
  *(_BYTE *)(v3 + direct field offset for ShareETAContextProvider.isPOMMES) = a2;
  *(_BYTE *)(v3 + direct field offset for ShareETAContextProvider.isUSO) = a3;
  uint64_t v8 = swift_release(v3);
  uint64_t v9 = DefaultNLContextProvider.init()(v8);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v9;
}

id ShareETAContextProvider.logObject.getter()
{
  return *(id *)(v0 + direct field offset for ShareETAContextProvider.logObject);
}

void *ShareETAContextProvider.NLNodes.domain.unsafeMutableAddressor()
{
  return &static ShareETAContextProvider.NLNodes.domain;
}

unint64_t static ShareETAContextProvider.NLNodes.domain.getter()
{
  return 0xD000000000000020LL;
}

void *ShareETAContextProvider.NLNodes.confirmation.unsafeMutableAddressor()
{
  return &static ShareETAContextProvider.NLNodes.confirmation;
}

unint64_t static ShareETAContextProvider.NLNodes.confirmation.getter()
{
  return 0xD00000000000002CLL;
}

void *ShareETAContextProvider.NLNodes.occupant.unsafeMutableAddressor()
{
  return &static ShareETAContextProvider.NLNodes.occupant;
}

unint64_t static ShareETAContextProvider.NLNodes.occupant.getter()
{
  return 0xD00000000000001ALL;
}

void *ShareETAContextProvider.NLNodes.occupantFullName.unsafeMutableAddressor()
{
  return &static ShareETAContextProvider.NLNodes.occupantFullName;
}

unint64_t static ShareETAContextProvider.NLNodes.occupantFullName.getter()
{
  return 0xD000000000000022LL;
}

void *ShareETAContextProvider.NLNodes.personPlace.unsafeMutableAddressor()
{
  return &static ShareETAContextProvider.NLNodes.personPlace;
}

unint64_t static ShareETAContextProvider.NLNodes.personPlace.getter()
{
  return 0xD00000000000001DLL;
}

void *ShareETAContextProvider.NLNodes.personFullName.unsafeMutableAddressor()
{
  return &static ShareETAContextProvider.NLNodes.personFullName;
}

unint64_t static ShareETAContextProvider.NLNodes.personFullName.getter()
{
  return 0xD000000000000020LL;
}

void *ShareETAContextProvider.NLNodes.locationSearchReference.unsafeMutableAddressor()
{
  return &static ShareETAContextProvider.NLNodes.locationSearchReference;
}

unint64_t static ShareETAContextProvider.NLNodes.locationSearchReference.getter()
{
  return 0xD000000000000029LL;
}

void *ShareETAContextProvider.ConfirmationValues.abort.unsafeMutableAddressor()
{
  return &static ShareETAContextProvider.ConfirmationValues.abort;
}

unint64_t static ShareETAContextProvider.ConfirmationValues.abort.getter()
{
  return 0xD000000000000039LL;
}

void *ShareETAContextProvider.ConfirmationValues.yes.unsafeMutableAddressor()
{
  return &static ShareETAContextProvider.ConfirmationValues.yes;
}

unint64_t static ShareETAContextProvider.ConfirmationValues.yes.getter()
{
  return 0xD000000000000036LL;
}

void *ShareETAContextProvider.ConfirmationValues.no.unsafeMutableAddressor()
{
  return &static ShareETAContextProvider.ConfirmationValues.no;
}

unint64_t static ShareETAContextProvider.ConfirmationValues.no.getter()
{
  return 0xD000000000000035LL;
}

uint64_t ShareETAContextProvider.makeContextForHandleIntent(intent:handleIntentResponse:_:)( uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = type metadata accessor for PommesContext.Source(0LL);
  uint64_t v34 = *(void *)(v36 - 8);
  __chkstk_darwin();
  __n128 v35 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  __chkstk_darwin();
  uint64_t v37 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(os_log_s **)(v3 + direct field offset for ShareETAContextProvider.logObject);
  os_log_type_t v16 = static os_log_type_t.default.getter(v12);
  uint64_t v17 = os_log_type_enabled(v15, v16);
  if ((_DWORD)v17)
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v33 = v3;
    uint64_t v19 = a3;
    uint64_t v20 = v18;
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_0, v15, v16, "makeContextForHandleIntent", v18, 2u);
    uint64_t v21 = v20;
    a3 = v19;
    uint64_t v3 = v33;
    uint64_t v17 = swift_slowDealloc(v21, -1LL, -1LL);
  }

  uint64_t v22 = NLContextUpdate.init()(v17);
  if (*(_BYTE *)(v3 + direct field offset for ShareETAContextProvider.isPOMMES) == 1)
  {
    os_log_type_t v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v15, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_0, v15, v23, "makeContextForHandleIntent adding pommesContext", v24, 2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    uint64_t v25 = v35;
    (*(void (**)(char *, void, uint64_t))(v34 + 104))( v35,  enum case for PommesContext.Source.pluginDefined(_:),  v36);
    char v26 = v37;
    PommesContext.init(source:domain:listenAfterSpeaking:)(v25, 7300455LL, 0xE300000000000000LL, 0LL);
    uint64_t v27 = type metadata accessor for PommesContext(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v26, 0LL, 1LL, v27);
    NLContextUpdate.pommesContext.setter(v26);
  }

  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v29 = swift_allocObject(v28, 40LL, 7LL);
  *(_OWORD *)(v29 + 16) = xmmword_95900;
  uint64_t v30 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INShareETAIntent,  &OBJC_CLASS___INShareETAIntent_ptr);
  uint64_t v31 = static ConversationStateAttachmentUtils.makeAttachmentToClearSlotResolutionState<A>(intent:)(a1, v30);
  *(void *)(v29 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v31;
  uint64_t v38 = v29;
  specialized Array._endMutation()(v31);
  NLContextUpdate.conversationStateAttachments.setter(v38);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v7, v14, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0LL, 1LL, v10);
  a3(v7);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v7,  &demangling cache variable for type metadata for NLContextUpdate?);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t ShareETAContextProvider.makeContextForConfirmIntent(intent:confirmIntentResponse:_:)( uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4)
{
  uint64_t v59 = a4;
  uint64_t v60 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_SystemPrompted(0LL);
  uint64_t v56 = *(void *)(v7 - 8);
  uint64_t v57 = v7;
  __chkstk_darwin();
  uint64_t v54 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v55 = (uint64_t)&v53 - v9;
  uint64_t v10 = type metadata accessor for PommesContext.Source(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = type metadata accessor for NLContextUpdate(0LL);
  uint64_t v16 = *(void *)(v58 - 8);
  uint64_t v17 = __chkstk_darwin();
  uint64_t v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *(os_log_s **)(v4 + direct field offset for ShareETAContextProvider.logObject);
  os_log_type_t v21 = static os_log_type_t.default.getter(v17);
  uint64_t v22 = os_log_type_enabled(v20, v21);
  if ((_DWORD)v22)
  {
    os_log_type_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v53 = v4;
    uint64_t v24 = v11;
    uint64_t v25 = v10;
    char v26 = v15;
    uint64_t v27 = v16;
    uint64_t v28 = v13;
    uint64_t v29 = v23;
    *(_WORD *)os_log_type_t v23 = 0;
    _os_log_impl(&dword_0, v20, v21, "makeContextForConfirmIntent", v23, 2u);
    uint64_t v30 = v29;
    uint64_t v13 = v28;
    uint64_t v16 = v27;
    uint64_t v15 = v26;
    uint64_t v10 = v25;
    uint64_t v11 = v24;
    uint64_t v4 = v53;
    uint64_t v22 = swift_slowDealloc(v30, -1LL, -1LL);
  }

  uint64_t v31 = NLContextUpdate.init()(v22);
  if (*(_BYTE *)(v4 + direct field offset for ShareETAContextProvider.isPOMMES) == 1)
  {
    os_log_type_t v32 = static os_log_type_t.default.getter(v31);
    if (os_log_type_enabled(v20, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl(&dword_0, v20, v32, "makeContextForConfirmIntent adding pommesContext", v33, 2u);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    (*(void (**)(char *, void, uint64_t))(v11 + 104))( v13,  enum case for PommesContext.Source.pluginDefined(_:),  v10);
    PommesContext.init(source:domain:listenAfterSpeaking:)(v13, 7300455LL, 0xE300000000000000LL, 1LL);
    uint64_t v34 = type metadata accessor for PommesContext(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))(v15, 0LL, 1LL, v34);
    NLContextUpdate.pommesContext.setter(v15);
  }

  else if (*(_BYTE *)(v4 + direct field offset for ShareETAContextProvider.isUSO) == 1)
  {
    __n128 v35 = v54;
    uint64_t v53 = v16;
    os_log_type_t v36 = static os_log_type_t.default.getter(v31);
    if (os_log_type_enabled(v20, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl(&dword_0, v20, v36, "makeContextForConfirmIntent adding uso context", v37, 2u);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
    uint64_t v39 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL) - 8);
    uint64_t v40 = swift_allocObject( v38,  ((*(unsigned __int8 *)(v39 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))
          + *(void *)(v39 + 72),
            *(unsigned __int8 *)(v39 + 80) | 7LL);
    *(_OWORD *)(v40 + 16) = xmmword_95430;
    uint64_t v41 = type metadata accessor for UsoTaskBuilder_noVerb_common_Person(0LL);
    swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
    uint64_t v42 = UsoTaskBuilder_noVerb_common_Person.init()();
    uint64_t v43 = type metadata accessor for UsoEntityBuilder_common_Person(0LL);
    swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
    uint64_t v44 = UsoEntityBuilder_common_Person.init()();
    dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
    uint64_t v45 = v55;
    uint64_t v46 = static Siri_Nlu_External_SystemPrompted.from(_:)(v42, v55);
    Siri_Nlu_External_SystemDialogAct.init()(v46);
    uint64_t v47 = v56;
    uint64_t v48 = v35;
    uint64_t v49 = v35;
    uint64_t v50 = v57;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v49, v45, v57);
    Siri_Nlu_External_SystemDialogAct.prompted.setter(v48);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v50);
    swift_release(v42);
    swift_release(v44);
    NLContextUpdate.nluSystemDialogActs.setter(v40);
    uint64_t v16 = v53;
  }

  NLContextUpdate.weightedPromptTargetDomain.setter(0xD000000000000020LL, 0x800000000009CD80LL);
  NLContextUpdate.weightedPromptStrict.setter(1LL);
  NLContextUpdate.weightedPromptAbortValues.setter(&outlined read-only object #0 of ShareETAContextProvider.makeContextForConfirmIntent(intent:confirmIntentResponse:_:));
  NLContextUpdate.weightedPromptResponseTargets.setter(&outlined read-only object #1 of ShareETAContextProvider.makeContextForConfirmIntent(intent:confirmIntentResponse:_:));
  NLContextUpdate.weightedPromptResponseOptions.setter(&outlined read-only object #2 of ShareETAContextProvider.makeContextForConfirmIntent(intent:confirmIntentResponse:_:));
  uint64_t v51 = v58;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v6, v19, v58);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v6, 0LL, 1LL, v51);
  v60(v6);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v6,  &demangling cache variable for type metadata for NLContextUpdate?);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v51);
}

uint64_t ShareETAContextProvider.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:_:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v7 = v6;
  __n128 v35 = a5;
  uint64_t v36 = a6;
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  uint64_t v32 = type metadata accessor for Locale(0LL);
  uint64_t v9 = *(void *)(v32 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(os_log_s **)((char *)v6 + direct field offset for ShareETAContextProvider.logObject);
  os_log_type_t v16 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_0, v15, v16, "makeNeedsDisambiguationContextFor", v17, 2u);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  id v18 = objc_msgSend(a4, "disambiguationItems", v32);
  uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v21 = swift_bridgeObjectRelease(v19);
  if (v20
    && (id v22 = [a4 disambiguationItems],
        uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
        v22,
        v24 = specialized _arrayConditionalCast<A, B>(_:)( v23,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr),  uint64_t v21 = swift_bridgeObjectRelease(v23),  v24))
  {
    if (v33 == 0x6E65697069636572LL && v34 == 0xE900000000000074LL
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65697069636572LL, 0xE900000000000074LL, v33, v34, 0LL) & 1) != 0)
    {
      (*(void (**)(void *__return_ptr))(class metadata base offset for ShareETAContextProvider + *v7 + 32))(v37);
      uint64_t v25 = v38;
      uint64_t v26 = v39;
      __swift_project_boxed_opaque_existential_1(v37, v38);
      dispatch thunk of DeviceState.siriLocale.getter(v25, v26);
      LODWORD(v25) = *((unsigned __int8 *)v7 + direct field offset for ShareETAContextProvider.isPOMMES);
      int v27 = *((unsigned __int8 *)v7 + direct field offset for ShareETAContextProvider.isUSO);
      uint64_t v28 = v36;
      swift_retain(v36);
      specialized TypedDisambiguationItems.makeNLContextUpdate(locale:weightedPromptResponseTargets:isPommes:isUSO:_:)( (unint64_t)v11,  (uint64_t)&outlined read-only object #0 of ShareETAContextProvider.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:_:),  v25,  v27,  (uint64_t)v24,  0,  v35,  v28);
      swift_bridgeObjectRelease(v24);
      swift_release(v28);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v32);
      return __swift_destroy_boxed_opaque_existential_0Tm(v37);
    }

    else
    {
      return swift_bridgeObjectRelease(v24);
    }
  }

  else
  {
    uint64_t v30 = static os_log_type_t.error.getter(v21);
    os_log(_:dso:log:_:_:)( v30,  &dword_0,  v15,  "disambiguation items can't be empty",  35LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v31 = type metadata accessor for NLContextUpdate(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v14, 1LL, 1LL, v31);
    v35((uint64_t)v14);
    return outlined destroy of (label: String?, value: Any)?( (uint64_t)v14,  &demangling cache variable for type metadata for NLContextUpdate?);
  }

uint64_t ShareETAContextProvider.makeNeedsValueContextFor(intent:parameter:resolutionResult:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = type metadata accessor for PommesContext.Source(0LL);
  uint64_t v31 = *(void *)(v33 - 8);
  __chkstk_darwin();
  uint64_t v32 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for NLContextUpdate(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin();
  os_log_type_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(os_log_s **)(v5 + direct field offset for ShareETAContextProvider.logObject);
  os_log_type_t v18 = static os_log_type_t.default.getter(v14);
  uint64_t v19 = os_log_type_enabled(v17, v18);
  if ((_DWORD)v19)
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v30 = v5;
    uint64_t v21 = a5;
    id v22 = v20;
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_0, v17, v18, "makeNeedsValueContextFor", v20, 2u);
    uint64_t v23 = v22;
    a5 = v21;
    uint64_t v5 = v30;
    uint64_t v19 = swift_slowDealloc(v23, -1LL, -1LL);
  }

  uint64_t v24 = NLContextUpdate.init()(v19);
  if (*(_BYTE *)(v5 + direct field offset for ShareETAContextProvider.isPOMMES) == 1)
  {
    os_log_type_t v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v17, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_0, v17, v25, "makeNeedsValueContextFor adding pommesContext", v26, 2u);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    int v27 = v32;
    (*(void (**)(char *, void, uint64_t))(v31 + 104))( v32,  enum case for PommesContext.Source.pluginDefined(_:),  v33);
    PommesContext.init(source:domain:listenAfterSpeaking:)(v27, 7300455LL, 0xE300000000000000LL, 1LL);
    uint64_t v28 = type metadata accessor for PommesContext(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v11, 0LL, 1LL, v28);
    NLContextUpdate.pommesContext.setter(v11);
  }

  NLContextUpdate.weightedPromptTargetDomain.setter(0xD000000000000020LL, 0x800000000009CD80LL);
  NLContextUpdate.weightedPromptStrict.setter(1LL);
  NLContextUpdate.weightedPromptResponseTargets.setter(&outlined read-only object #0 of ShareETAContextProvider.makeNeedsValueContextFor(intent:parameter:resolutionResult:_:));
  NLContextUpdate.weightedPromptAbortValues.setter(&outlined read-only object #1 of ShareETAContextProvider.makeNeedsValueContextFor(intent:parameter:resolutionResult:_:));
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v8, v16, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v8, 0LL, 1LL, v12);
  a5(v8);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v8,  &demangling cache variable for type metadata for NLContextUpdate?);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

void ShareETAContextProvider.init()()
{
}

void ShareETAContextProvider.__ivar_destroyer()
{
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0
                                                        + direct field offset for ShareETAContextProvider.currentDeviceState));
}

uint64_t ShareETAContextProvider.deinit()
{
  uint64_t v0 = DefaultNLContextProvider.deinit();
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0
                                                        + direct field offset for ShareETAContextProvider.currentDeviceState));

  return v0;
}

uint64_t ShareETAContextProvider.__deallocating_deinit()
{
  uint64_t v0 = DefaultNLContextProvider.deinit();
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0
                                                        + direct field offset for ShareETAContextProvider.currentDeviceState));

  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t ShareETATemplatingService.catService.getter()
{
  return swift_retain(*(void *)(v0 + direct field offset for ShareETATemplatingService.catService));
}

id ShareETATemplatingService.logObject.getter()
{
  return *(id *)(v0 + direct field offset for ShareETATemplatingService.logObject);
}

uint64_t ShareETATemplatingService.device.getter@<X0>(uint64_t a1@<X8>)
{
  return ShareETAContextProvider.currentDeviceState.getter( &direct field offset for ShareETATemplatingService.device,  a1);
}

uint64_t ShareETAContextProvider.currentDeviceState.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *a1;
  swift_beginAccess(v4, v6, 0LL, 0LL);
  return outlined init with copy of DeviceState(v4, a2);
}

uint64_t ShareETATemplatingService.device.setter(__int128 *a1)
{
  return ShareETAContextProvider.currentDeviceState.setter( a1,  &direct field offset for ShareETATemplatingService.device);
}

uint64_t ShareETAContextProvider.currentDeviceState.setter(__int128 *a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess(v4, v6, 33LL, 0LL);
  __swift_destroy_boxed_opaque_existential_0Tm(v4);
  outlined init with take of CATType(a1, (uint64_t)v4);
  return swift_endAccess(v6);
}

uint64_t (*ShareETATemplatingService.device.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t ShareETATemplatingService.init(deviceState:)(void *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DucTemplatingLocalContext?);
  __chkstk_darwin();
  uint64_t v34 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Locale(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CATService();
  uint64_t v10 = swift_allocObject(v9, 40LL, 7LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v9);
  uint64_t v12 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
  swift_retain(v2);
  *(void *)(v10 + 24) = [v12 bundleForClass:ObjCClassFromMetadata];
  uint64_t v13 = direct field offset for ShareETATemplatingService.catService;
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  *(void *)(v10 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v10 + 16) = 0;
  *(void *)(v2 + v__swift_destroy_boxed_opaque_existential_0Tm(v0 + 13) = v10;
  uint64_t v14 = direct field offset for ShareETATemplatingService.logObject;
  uint64_t v15 = (os_log_s *)OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000019LL,  0x8000000000096450LL);
  *(void *)(v2 + v14) = v15;
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_0, v15, v16, "initializing", v17, 2u);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  outlined init with copy of DeviceState((uint64_t)a1, v2 + direct field offset for ShareETATemplatingService.device);
  swift_release(v2);
  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v18);
  uint64_t v20 = dispatch thunk of DeviceState.siriLocale.getter(v18, v19);
  uint64_t v21 = Locale.identifier.getter(v20);
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v36[0] = v21;
  v36[1] = v23;
  v35[0] = 45LL;
  v35[1] = 0xE100000000000000LL;
  v37[0] = 95LL;
  v37[1] = 0xE100000000000000LL;
  unint64_t v24 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v35,  v37,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v24,  v24,  v24);
  uint64_t v27 = v26;
  swift_bridgeObjectRelease(v23);
  static Device.current.getter(v36);
  uint64_t v28 = type metadata accessor for DucTemplatingLocalContext(0LL);
  uint64_t v29 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v34, 1LL, 1LL, v28);
  unint64_t v30 = specialized Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  static AceService.current.getter(v35);
  uint64_t v31 = DucTemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:deviceState:localContext:)( 0x4154456572616853LL,  0xE800000000000000LL,  v25,  v27,  v30,  v35,  v36,  v29);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v31;
}

uint64_t ShareETATemplatingService.makeFailureHandlingIntentDialog(app:intent:intentResponse:_:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(os_log_s **)(v5 + direct field offset for ShareETATemplatingService.logObject);
  os_log_type_t v10 = static os_log_type_t.default.getter(a1);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_0, v9, v10, "makeFailureHandlingIntentDialog", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  if (!a3) {
    goto LABEL_7;
  }
  uint64_t v12 = (int *)[a3 code];
  if (v12 == (int *)((char *)&dword_C + 1))
  {
    uint64_t v13 = *(void *)(v5 + direct field offset for ShareETATemplatingService.catService);
    uint64_t v19 = type metadata accessor for ShareETA(0LL);
    uint64_t v24 = v19;
    uint64_t v25 = &protocol witness table for ShareETA;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v23);
    uint64_t v16 = v19;
    uint64_t v17 = 17LL;
    goto LABEL_9;
  }

  if (v12 == &dword_C)
  {
    uint64_t v13 = *(void *)(v5 + direct field offset for ShareETATemplatingService.catService);
    uint64_t v14 = type metadata accessor for ShareETA(0LL);
    uint64_t v24 = v14;
    uint64_t v25 = &protocol witness table for ShareETA;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v23);
    uint64_t v16 = v14;
    uint64_t v17 = 13LL;
  }

  else
  {
LABEL_7:
    uint64_t v13 = *(void *)(v5 + direct field offset for ShareETATemplatingService.catService);
    uint64_t v18 = type metadata accessor for ShareETA(0LL);
    uint64_t v24 = v18;
    uint64_t v25 = &protocol witness table for ShareETA;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v23);
    *(_BYTE *)boxed_opaque_existential_0 = 0;
    uint64_t v16 = v18;
    uint64_t v17 = 5LL;
  }

LABEL_9:
  uint64_t v20 = swift_storeEnumTagMultiPayload(boxed_opaque_existential_0, v16, v17);
  uint64_t v21 = static DialogHelper.globals.getter(v20);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 120LL))(v23, v21, a4, a5);
  swift_bridgeObjectRelease(v21);
  return __swift_destroy_boxed_opaque_existential_0Tm(v23);
}

  if ((v40 & 0xC000000000000001LL) != 0)
  {
    uint64_t v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v40);
  }

  else
  {
    if (!*(void *)((char *)&dword_10 + (v40 & 0xFFFFFFFFFFFFF8LL)))
    {
      __break(1u);
      return;
    }

    uint64_t v41 = *(id *)(v40 + 32);
  }

  uint64_t v42 = v41;
  swift_bridgeObjectRelease(v40);
  if (v21 == 1)
  {
    uint64_t v43 = *(void *)(v9 + direct field offset for StopShareETATemplatingService.catService);
    uint64_t v53 = type metadata accessor for ShareETA(0LL);
    uint64_t v75 = v53;
    uint64_t v76 = &protocol witness table for ShareETA;
    uint64_t v54 = __swift_allocate_boxed_opaque_existential_0(v74);
    type metadata accessor for DialogPerson(0LL);
    uint64_t v46 = v42;
    static Device.current.getter(v71);
    uint64_t v55 = v72;
    uint64_t v56 = v73;
    __swift_project_boxed_opaque_existential_1(v71, v72);
    dispatch thunk of DeviceState.siriLocale.getter(v55, v56);
    uint64_t v57 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)(v46, v17, 1LL);
    __swift_destroy_boxed_opaque_existential_0Tm(v71);
    *uint64_t v54 = v57;
    uint64_t v50 = v54;
    uint64_t v51 = v53;
    unint64_t v52 = 8LL;
    goto LABEL_16;
  }

  if (v21 != 4)
  {

LABEL_18:
    uint64_t v32 = *(void *)(v9 + direct field offset for StopShareETATemplatingService.catService);
    uint64_t v60 = type metadata accessor for ShareETA(0LL);
    uint64_t v75 = v60;
    uint64_t v76 = &protocol witness table for ShareETA;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v74);
    *(_BYTE *)boxed_opaque_existential_0 = 1;
    __n128 v35 = v60;
    uint64_t v36 = 5LL;
    goto LABEL_19;
  }

  uint64_t v43 = *(void *)(v9 + direct field offset for StopShareETATemplatingService.catService);
  uint64_t v44 = type metadata accessor for ShareETA(0LL);
  uint64_t v75 = v44;
  uint64_t v76 = &protocol witness table for ShareETA;
  uint64_t v45 = __swift_allocate_boxed_opaque_existential_0(v74);
  type metadata accessor for DialogPerson(0LL);
  uint64_t v46 = v42;
  static Device.current.getter(v71);
  uint64_t v47 = v72;
  uint64_t v48 = v73;
  __swift_project_boxed_opaque_existential_1(v71, v72);
  dispatch thunk of DeviceState.siriLocale.getter(v47, v48);
  uint64_t v49 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)(v46, v17, 1LL);
  __swift_destroy_boxed_opaque_existential_0Tm(v71);
  *uint64_t v45 = v49;
  uint64_t v50 = v45;
  uint64_t v51 = v44;
  unint64_t v52 = 2LL;
LABEL_16:
  uint64_t v58 = swift_storeEnumTagMultiPayload(v50, v51, v52);
  uint64_t v59 = static DialogHelper.globals.getter(v58);
  (*(void (**)(void *, uint64_t, void (*)(uint64_t *), uint64_t))(*(void *)v43 + 120LL))( v74,  v59,  v70,  a9);
  swift_bridgeObjectRelease(v59);

LABEL_20:
  __swift_destroy_boxed_opaque_existential_0Tm(v74);
}

void ShareETATemplatingService.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t *), uint64_t a9)
{
  uint64_t v60 = a8;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin();
  uint64_t v14 = (uint64_t *)((char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  type metadata accessor for Locale(0LL);
  uint64_t v15 = __chkstk_darwin();
  uint64_t v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(os_log_s **)(v9 + direct field offset for ShareETATemplatingService.logObject);
  os_log_type_t v19 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_0, v18, v19, "makeParameterValueUnsupportedDialog", v20, 2u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  uint64_t v21 = (char *)[a4 unsupportedReason];
  uint64_t v29 = static os_log_type_t.info.getter(v21, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v31 = swift_allocObject(v30, 72LL, 7LL);
  *(_OWORD *)(v31 + 16) = xmmword_95430;
  *(void *)(v31 + 56) = &type metadata for Int;
  *(void *)(v31 + 64) = &protocol witness table for Int;
  *(void *)(v31 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v21;
  os_log(_:dso:log:_:_:)(v29, &dword_0, v18, "unsupported reason %d", v59);
  swift_bridgeObjectRelease(v31);
  if ((unint64_t)(v21 - 1) < 3)
  {
    uint64_t v32 = *(void *)(v9 + direct field offset for ShareETATemplatingService.catService);
    uint64_t v33 = type metadata accessor for ShareETA(0LL);
    uint64_t v65 = v33;
    uint64_t v66 = &protocol witness table for ShareETA;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v64);
    uint64_t v35 = v33;
    uint64_t v36 = 12LL;
LABEL_8:
    uint64_t v38 = swift_storeEnumTagMultiPayload(boxed_opaque_existential_0, v35, v36);
    uint64_t v39 = static DialogHelper.globals.getter(v38);
    (*(void (**)(void *, uint64_t, void (*)(uint64_t *), uint64_t))(*(void *)v32 + 120LL))( v64,  v39,  v60,  a9);
    swift_bridgeObjectRelease(v39);
LABEL_9:
    __swift_destroy_boxed_opaque_existential_0Tm(v64);
    return;
  }

  if (v21 == (_BYTE *)&dword_4 + 1)
  {
LABEL_7:
    uint64_t v32 = *(void *)(v9 + direct field offset for ShareETATemplatingService.catService);
    uint64_t v37 = type metadata accessor for ShareETA(0LL);
    uint64_t v65 = v37;
    uint64_t v66 = &protocol witness table for ShareETA;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v64);
    *(_BYTE *)boxed_opaque_existential_0 = 0;
    uint64_t v35 = v37;
    uint64_t v36 = 5LL;
    goto LABEL_8;
  }

  id v40 = [a5 recipients];
  if (v40)
  {
    uint64_t v41 = v40;
    uint64_t v42 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
    uint64_t v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, v42);

    if ((v43 & 0xC000000000000001LL) != 0)
    {
      id v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v43);
      goto LABEL_14;
    }

    if (*(void *)((char *)&dword_10 + (v43 & 0xFFFFFFFFFFFFF8LL)))
    {
      id v44 = *(id *)(v43 + 32);
LABEL_14:
      uint64_t v45 = v44;
      swift_bridgeObjectRelease(v43);
      uint64_t v46 = *(void *)(v9 + direct field offset for ShareETATemplatingService.catService);
      uint64_t v47 = type metadata accessor for ShareETA(0LL);
      uint64_t v65 = v47;
      uint64_t v66 = &protocol witness table for ShareETA;
      uint64_t v48 = __swift_allocate_boxed_opaque_existential_0(v64);
      type metadata accessor for DialogPerson(0LL);
      id v49 = v45;
      static Device.current.getter(v61);
      uint64_t v50 = v62;
      uint64_t v51 = v63;
      __swift_project_boxed_opaque_existential_1(v61, v62);
      dispatch thunk of DeviceState.siriLocale.getter(v50, v51);
      uint64_t v52 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)(v49, v17, 1LL);
      __swift_destroy_boxed_opaque_existential_0Tm(v61);
      *uint64_t v48 = v52;
      uint64_t v53 = swift_storeEnumTagMultiPayload(v48, v47, 2LL);
      uint64_t v54 = static DialogHelper.globals.getter(v53);
      (*(void (**)(void *, uint64_t, void (*)(uint64_t *), uint64_t))(*(void *)v46 + 120LL))( v64,  v54,  v60,  a9);
      swift_bridgeObjectRelease(v54);

      goto LABEL_9;
    }

    __break(1u);
  }

  else
  {
    uint64_t v55 = static os_log_type_t.error.getter(0LL);
    os_log(_:dso:log:_:_:)(v55, &dword_0, v18, "recipients can't be nil", 23LL, 2LL, _swiftEmptyArrayStorage);
    unint64_t v56 = lazy protocol witness table accessor for type ShareETATemplatingService.ShareETATemplatingServiceError and conformance ShareETATemplatingService.ShareETATemplatingServiceError();
    uint64_t v57 = swift_allocError(&type metadata for ShareETATemplatingService.ShareETATemplatingServiceError, v56, 0LL, 0LL);
    *uint64_t v58 = 0xD000000000000017LL;
    v58[1] = 0x800000000009CFB0LL;
    *uint64_t v14 = v57;
    swift_storeEnumTagMultiPayload(v14, v12, 1LL);
    v60(v14);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v14,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  }

uint64_t ShareETATemplatingService.makeParameterPromptDialog(app:parameterName:intent:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(os_log_s **)(v6 + direct field offset for ShareETATemplatingService.logObject);
  os_log_type_t v10 = static os_log_type_t.default.getter(a1);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_0, v9, v10, "makeParameterPromptDialog", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  uint64_t v12 = *(void *)(v6 + direct field offset for ShareETATemplatingService.catService);
  uint64_t v13 = type metadata accessor for ShareETA(0LL);
  v21[3] = v13;
  v21[4] = &protocol witness table for ShareETA;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v21);
  uint64_t v15 = (char *)boxed_opaque_existential_0
  *(_BYTE *)boxed_opaque_existential_0 = 0;
  uint64_t v16 = enum case for BehaviorAfterSpeaking.listen(_:);
  uint64_t v17 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104LL))(v15, v16, v17);
  uint64_t v18 = swift_storeEnumTagMultiPayload(boxed_opaque_existential_0, v13, 4LL);
  uint64_t v19 = static DialogHelper.globals.getter(v18);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 120LL))(v21, v19, a5, a6);
  swift_bridgeObjectRelease(v19);
  return __swift_destroy_boxed_opaque_existential_0Tm(v21);
}

void ShareETATemplatingService.makeIntentHandledDialog(app:intent:intentResponse:_:)( uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin();
  uint64_t v11 = (uint64_t *)((char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  type metadata accessor for Locale(0LL);
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(os_log_s **)(v5 + direct field offset for ShareETATemplatingService.logObject);
  os_log_type_t v16 = static os_log_type_t.default.getter(v12);
  uint64_t v17 = os_log_type_enabled(v15, v16);
  if ((_DWORD)v17)
  {
    uint64_t v18 = a5;
    uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl(&dword_0, v15, v16, "makeIntentHandledDialog", v19, 2u);
    uint64_t v20 = v19;
    a5 = v18;
    uint64_t v17 = swift_slowDealloc(v20, -1LL, -1LL);
  }

  if (!a3)
  {
    uint64_t v30 = static os_log_type_t.error.getter(v17);
    os_log(_:dso:log:_:_:)(v30, &dword_0, v15, "response can't be nil", 21LL, 2LL, _swiftEmptyArrayStorage);
    unint64_t v31 = lazy protocol witness table accessor for type ShareETATemplatingService.ShareETATemplatingServiceError and conformance ShareETATemplatingService.ShareETATemplatingServiceError();
    uint64_t v32 = swift_allocError(&type metadata for ShareETATemplatingService.ShareETATemplatingServiceError, v31, 0LL, 0LL);
    *uint64_t v33 = 0xD000000000000015LL;
    v33[1] = 0x800000000009CFD0LL;
    *uint64_t v11 = v32;
    swift_storeEnumTagMultiPayload(v11, v9, 1LL);
    a4(v11);
LABEL_13:
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v11,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    return;
  }

  id v21 = a3;
  id v22 = [v21 recipients];
  if (!v22)
  {
    uint64_t v34 = static os_log_type_t.error.getter(0LL);
    os_log(_:dso:log:_:_:)(v34, &dword_0, v15, "recipients can't be nil", 23LL, 2LL, _swiftEmptyArrayStorage);
    unint64_t v35 = lazy protocol witness table accessor for type ShareETATemplatingService.ShareETATemplatingServiceError and conformance ShareETATemplatingService.ShareETATemplatingServiceError();
    uint64_t v36 = swift_allocError(&type metadata for ShareETATemplatingService.ShareETATemplatingServiceError, v35, 0LL, 0LL);
    *uint64_t v37 = 0xD000000000000017LL;
    v37[1] = 0x800000000009CFB0LL;
    *uint64_t v11 = v36;
    swift_storeEnumTagMultiPayload(v11, v9, 1LL);
    a4(v11);

    goto LABEL_13;
  }

  uint64_t v23 = v22;
  uint64_t v24 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
  uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, v24);

  if ((v25 & 0xC000000000000001LL) != 0)
  {
    id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v25);
  }

  else
  {
    if (!*(void *)((char *)&dword_10 + (v25 & 0xFFFFFFFFFFFFF8LL)))
    {
      __break(1u);
      return;
    }

    id v26 = *(id *)(v25 + 32);
  }

  uint64_t v27 = v26;
  swift_bridgeObjectRelease(v25);
  unsigned __int8 v28 = [v21 mediums];
  uint64_t v50 = a5;
  uint64_t v51 = a4;
  if ((v28 & 4) != 0)
  {
    unint64_t v29 = 3LL;
  }

  else if (([v21 mediums] & 8) != 0)
  {
    unint64_t v29 = 2LL;
  }

  else
  {
    unint64_t v29 = ((unint64_t)[v21 mediums] >> 1) & 1;
  }

  unint64_t v49 = v29;
  uint64_t v38 = *(void *)(v5 + direct field offset for ShareETATemplatingService.catService);
  uint64_t v39 = type metadata accessor for ShareETA(0LL);
  v55[3] = v39;
  v55[4] = &protocol witness table for ShareETA;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v55);
  type metadata accessor for DialogPerson(0LL);
  id v41 = v27;
  static Device.current.getter(v52);
  uint64_t v42 = v53;
  uint64_t v43 = v54;
  __swift_project_boxed_opaque_existential_1(v52, v53);
  dispatch thunk of DeviceState.siriLocale.getter(v42, v43);
  uint64_t v44 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)(v41, v14, 0LL);
  __swift_destroy_boxed_opaque_existential_0Tm(v52);
  *(_BYTE *)boxed_opaque_existential_0 = 0;
  unint64_t v45 = v49;
  boxed_opaque_existential_0[1] = v44;
  boxed_opaque_existential_0[2] = v45;
  uint64_t v46 = swift_storeEnumTagMultiPayload(boxed_opaque_existential_0, v39, 1LL);
  uint64_t v47 = static DialogHelper.globals.getter(v46);
  (*(void (**)(void *, uint64_t, void (*)(uint64_t *), uint64_t))(*(void *)v38 + 120LL))( v55,  v47,  v51,  v50);
  swift_bridgeObjectRelease(v47);

  __swift_destroy_boxed_opaque_existential_0Tm(v55);
}

void ShareETATemplatingService.makeIntentConfirmationDialog(app:intent:intentResponse:_:)( uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  uint64_t v10 = __chkstk_darwin();
  uint64_t v12 = (void *)((char *)&v31[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = *(os_log_s **)(v5 + direct field offset for ShareETATemplatingService.logObject);
  os_log_type_t v14 = static os_log_type_t.default.getter(v10);
  uint64_t v15 = os_log_type_enabled(v13, v14);
  if ((_DWORD)v15)
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v16 = 0;
    _os_log_impl(&dword_0, v13, v14, "makeIntentConfirmationDialog", v16, 2u);
    uint64_t v15 = swift_slowDealloc(v16, -1LL, -1LL);
  }

  if (a3)
  {
    id v30 = a3;
    if ([v30 code] == (char *)&dword_0 + 2)
    {
      os_log_type_t v17 = static os_log_type_t.default.getter(2LL);
      if (os_log_type_enabled(v13, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl(&dword_0, v13, v17, "intent needs confirmation", v18, 2u);
        swift_slowDealloc(v18, -1LL, -1LL);
      }

      uint64_t v19 = *(void *)(v5 + direct field offset for ShareETATemplatingService.catService);
      uint64_t v20 = type metadata accessor for ShareETA(0LL);
      v31[3] = v20;
      v31[4] = &protocol witness table for ShareETA;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v31);
      uint64_t v22 = enum case for BehaviorAfterSpeaking.listen(_:);
      uint64_t v23 = type metadata accessor for BehaviorAfterSpeaking(0LL);
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104LL))( boxed_opaque_existential_0,  v22,  v23);
      uint64_t v24 = swift_storeEnumTagMultiPayload(boxed_opaque_existential_0, v20, 6LL);
      uint64_t v25 = static DialogHelper.globals.getter(v24);
      (*(void (**)(void *, uint64_t, void (*)(uint64_t *), uint64_t))(*(void *)v19 + 120LL))( v31,  v25,  a4,  a5);
      swift_bridgeObjectRelease(v25);

      __swift_destroy_boxed_opaque_existential_0Tm(v31);
    }

    else
    {
    }
  }

  else
  {
    uint64_t v26 = static os_log_type_t.error.getter(v15);
    os_log(_:dso:log:_:_:)(v26, &dword_0, v13, "response can't be nil", 21LL, 2LL, _swiftEmptyArrayStorage);
    unint64_t v27 = lazy protocol witness table accessor for type ShareETATemplatingService.ShareETATemplatingServiceError and conformance ShareETATemplatingService.ShareETATemplatingServiceError();
    uint64_t v28 = swift_allocError(&type metadata for ShareETATemplatingService.ShareETATemplatingServiceError, v27, 0LL, 0LL);
    *unint64_t v29 = 0xD000000000000015LL;
    v29[1] = 0x800000000009CFD0LL;
    *uint64_t v12 = v28;
    swift_storeEnumTagMultiPayload(v12, v9, 1LL);
    a4(v12);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v12,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  }

uint64_t ShareETATemplatingService.makeIntentConfirmationCancelledDialog(app:intent:intentResponse:_:)( uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  uint64_t v10 = __chkstk_darwin();
  uint64_t v12 = (void *)((char *)&v41[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = *(os_log_s **)(v5 + direct field offset for ShareETATemplatingService.logObject);
  os_log_type_t v14 = static os_log_type_t.default.getter(v10);
  uint64_t v15 = os_log_type_enabled(v13, v14);
  if ((_DWORD)v15)
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v16 = 0;
    _os_log_impl(&dword_0, v13, v14, "makeIntentConfirmationCancelledDialog", v16, 2u);
    uint64_t v15 = swift_slowDealloc(v16, -1LL, -1LL);
  }

  if (a3)
  {
    id v17 = a3;
    uint64_t v25 = static os_log_type_t.info.getter(v17, v18, v19, v20, v21, v22, v23, v24);
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v27 = swift_allocObject(v26, 72LL, 7LL);
    *(_OWORD *)(v27 + 16) = xmmword_95430;
    *(void *)(v27 + 56) = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INShareETAIntentResponse,  &OBJC_CLASS___INShareETAIntentResponse_ptr);
    *(void *)(v27 + 64) = lazy protocol witness table accessor for type INShareETAIntentResponse and conformance NSObject();
    *(void *)(v27 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v17;
    id v28 = v17;
    os_log(_:dso:log:_:_:)(v25, &dword_0, v13, "response %@", 11LL, 2LL, v27);
    swift_bridgeObjectRelease(v27);
    if (([v28 mediums] & 4) != 0)
    {
      unint64_t v29 = 3LL;
    }

    else if (([v28 mediums] & 8) != 0)
    {
      unint64_t v29 = 2LL;
    }

    else
    {
      unint64_t v29 = ((unint64_t)[v28 mediums] >> 1) & 1;
    }

    uint64_t v35 = *(void *)(v5 + direct field offset for ShareETATemplatingService.catService);
    uint64_t v36 = type metadata accessor for ShareETA(0LL);
    v41[3] = v36;
    v41[4] = &protocol witness table for ShareETA;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v41);
    *(_BYTE *)boxed_opaque_existential_0 = 0;
    boxed_opaque_existential_0[1] = v29;
    uint64_t v38 = swift_storeEnumTagMultiPayload(boxed_opaque_existential_0, v36, 0LL);
    uint64_t v39 = static DialogHelper.globals.getter(v38);
    (*(void (**)(void *, uint64_t, void (*)(uint64_t *), uint64_t))(*(void *)v35 + 120LL))( v41,  v39,  a4,  a5);
    swift_bridgeObjectRelease(v39);

    return __swift_destroy_boxed_opaque_existential_0Tm(v41);
  }

  else
  {
    uint64_t v30 = static os_log_type_t.error.getter(v15);
    os_log(_:dso:log:_:_:)(v30, &dword_0, v13, "response can't be nil", 21LL, 2LL, _swiftEmptyArrayStorage);
    unint64_t v31 = lazy protocol witness table accessor for type ShareETATemplatingService.ShareETATemplatingServiceError and conformance ShareETATemplatingService.ShareETATemplatingServiceError();
    uint64_t v32 = swift_allocError(&type metadata for ShareETATemplatingService.ShareETATemplatingServiceError, v31, 0LL, 0LL);
    *uint64_t v33 = 0xD000000000000015LL;
    v33[1] = 0x800000000009CFD0LL;
    *uint64_t v12 = v32;
    swift_storeEnumTagMultiPayload(v12, v9, 1LL);
    a4(v12);
    return outlined destroy of (label: String?, value: Any)?( (uint64_t)v12,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  }

uint64_t *ShareETATemplatingService.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = __chkstk_darwin();
  os_log_type_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = static os_log_type_t.info.getter(v12, v15, v16, v17, v18, v19, v20, v21);
  os_log(_:dso:log:_:_:)( v22,  &dword_0,  *(void *)(v9 + direct field offset for ShareETATemplatingService.logObject),  "makeParameterValueDisambiguationDialog",  38LL,  2LL,  _swiftEmptyArrayStorage);
  id v23 = [a4 disambiguationItems];
  uint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, (char *)&type metadata for Any + 8);

  uint64_t v25 = specialized _arrayConditionalCast<A, B>(_:)( v24,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
  swift_bridgeObjectRelease(v24);
  if (v25) {
    unint64_t v26 = (unint64_t)v25;
  }
  else {
    unint64_t v26 = (unint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v27 = *(void *)(v9 + direct field offset for ShareETATemplatingService.catService);
  uint64_t v28 = type metadata accessor for ShareETA(0LL);
  v46[3] = v28;
  v46[4] = &protocol witness table for ShareETA;
  uint64_t result = __swift_allocate_boxed_opaque_existential_0(v46);
  uint64_t v30 = result;
  uint64_t v42 = a8;
  if ((v26 & 0xC000000000000001LL) != 0)
  {
    id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v26);
    goto LABEL_7;
  }

  if (*(void *)((char *)&dword_10 + (v26 & 0xFFFFFFFFFFFFF8LL)))
  {
    id v31 = *(id *)(v26 + 32);
LABEL_7:
    id v32 = v31;
    uint64_t v41 = a9;
    swift_bridgeObjectRelease(v26);
    uint64_t v33 = (char *)v30
    type metadata accessor for DialogPerson(0LL);
    static Device.current.getter(v43);
    uint64_t v34 = v44;
    uint64_t v35 = v45;
    __swift_project_boxed_opaque_existential_1(v43, v44);
    dispatch thunk of DeviceState.siriLocale.getter(v34, v35);
    uint64_t v36 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)(v32, v14, 1LL);
    __swift_destroy_boxed_opaque_existential_0Tm(v43);
    *uint64_t v30 = v36;
    uint64_t v37 = enum case for BehaviorAfterSpeaking.listen(_:);
    uint64_t v38 = type metadata accessor for BehaviorAfterSpeaking(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 104LL))(v33, v37, v38);
    uint64_t v39 = swift_storeEnumTagMultiPayload(v30, v28, 3LL);
    uint64_t v40 = static DialogHelper.globals.getter(v39);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)v27 + 120LL))(v46, v40, v42, v41);
    swift_bridgeObjectRelease(v40);
    return (uint64_t *)__swift_destroy_boxed_opaque_existential_0Tm(v46);
  }

  __break(1u);
  return result;
}

void ShareETATemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:)()
{
}

void ShareETATemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:deviceState:localContext:)()
{
}

uint64_t ShareETATemplatingService.__ivar_destroyer()
{
  return __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0
                                                               + direct field offset for ShareETATemplatingService.device));
}

uint64_t ShareETATemplatingService.deinit()
{
  uint64_t v0 = DucTemplatingService.deinit();
  swift_release(*(void *)(v0 + direct field offset for ShareETATemplatingService.catService));

  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + direct field offset for ShareETATemplatingService.device));
  return v0;
}

uint64_t ShareETATemplatingService.__deallocating_deinit()
{
  uint64_t v0 = DucTemplatingService.deinit();
  swift_release(*(void *)(v0 + direct field offset for ShareETATemplatingService.catService));

  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + direct field offset for ShareETATemplatingService.device));
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL));
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SAAceView] and conformance [A]();
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SAAceView]);
          uint64_t v13 = specialized protocol witness for Collection.subscript.read in conformance [A](v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

void (*specialized protocol witness for Collection.subscript.read in conformance [A]( void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance RedirectToServerFlow;
}

void (*specialized Array.subscript.read( void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL)) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }

  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{
}

unint64_t specialized Sharing_Medium.init(rawValue:)(unint64_t result)
{
  if (result >= 5) {
    return 5LL;
  }
  return result;
}

uint64_t type metadata accessor for ShareETATemplatingService(uint64_t a1)
{
  return type metadata accessor for ShareETA( a1,  (uint64_t *)&type metadata singleton initialization cache for ShareETATemplatingService,  (uint64_t)&nominal type descriptor for ShareETATemplatingService);
}

uint64_t type metadata accessor for ShareETAAceViewProvider(uint64_t a1)
{
  return type metadata accessor for ShareETA( a1,  (uint64_t *)&type metadata singleton initialization cache for ShareETAAceViewProvider,  (uint64_t)&nominal type descriptor for ShareETAAceViewProvider);
}

uint64_t type metadata accessor for ShareETAContextProvider(uint64_t a1)
{
  return type metadata accessor for ShareETA( a1,  (uint64_t *)&type metadata singleton initialization cache for ShareETAContextProvider,  (uint64_t)&nominal type descriptor for ShareETAContextProvider);
}

unint64_t lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent()
{
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent)
  {
    uint64_t v1 = type metadata accessor for LocationSearchIntent(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LocationSearchIntent, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type ShareETATemplatingService.ShareETATemplatingServiceError and conformance ShareETATemplatingService.ShareETATemplatingServiceError()
{
  unint64_t result = lazy protocol witness table cache variable for type ShareETATemplatingService.ShareETATemplatingServiceError and conformance ShareETATemplatingService.ShareETATemplatingServiceError;
  if (!lazy protocol witness table cache variable for type ShareETATemplatingService.ShareETATemplatingServiceError and conformance ShareETATemplatingService.ShareETATemplatingServiceError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ShareETATemplatingService.ShareETATemplatingServiceError,  &type metadata for ShareETATemplatingService.ShareETATemplatingServiceError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ShareETATemplatingService.ShareETATemplatingServiceError and conformance ShareETATemplatingService.ShareETATemplatingServiceError);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type INShareETAIntentResponse and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type INShareETAIntentResponse and conformance NSObject;
  if (!lazy protocol witness table cache variable for type INShareETAIntentResponse and conformance NSObject)
  {
    uint64_t v1 = type metadata accessor for OS_os_log( 255LL,  &lazy cache variable for type metadata for INShareETAIntentResponse,  &OBJC_CLASS___INShareETAIntentResponse_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type INShareETAIntentResponse and conformance NSObject);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Sharing_Medium and conformance Sharing_Medium()
{
  unint64_t result = lazy protocol witness table cache variable for type Sharing_Medium and conformance Sharing_Medium;
  if (!lazy protocol witness table cache variable for type Sharing_Medium and conformance Sharing_Medium)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Sharing_Medium,  &type metadata for Sharing_Medium);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Sharing_Medium and conformance Sharing_Medium);
  }

  return result;
}

uint64_t sub_3C310@<X0>(void **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for ShareETAFlowDelegate + **a1 + 40))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_3C350(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))(class metadata base offset for ShareETAFlowDelegate + **a2 + 48))(*a1);
}

uint64_t sub_3C388@<X0>(void **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for ShareETAFlowDelegate + **a1 + 64))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_3C3C8(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))(class metadata base offset for ShareETAFlowDelegate + **a2 + 72))(*a1);
}

uint64_t sub_3C400@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for ShareETAFlowDelegate + **a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_3C43C(void *a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(class metadata base offset for ShareETAFlowDelegate + **a2 + 104);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t sub_3C478(void **a1)
{
  return (*(uint64_t (**)(void))(class metadata base offset for ShareETAContextProvider + **a1 + 32))();
}

uint64_t sub_3C4AC(uint64_t a1, void **a2)
{
  return (*(uint64_t (**)(_BYTE *))(class metadata base offset for ShareETAContextProvider + **a2 + 40))(v4);
}

uint64_t sub_3C4F8(void **a1)
{
  return (*(uint64_t (**)(void))(class metadata base offset for ShareETATemplatingService + **a1 + 24))();
}

uint64_t sub_3C52C(uint64_t a1, void **a2)
{
  return (*(uint64_t (**)(_BYTE *))(class metadata base offset for ShareETATemplatingService + **a2 + 32))(v4);
}

uint64_t getEnumTagSinglePayload for Sharing_Medium(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

uint64_t storeEnumTagSinglePayload for Sharing_Medium(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_3C654 + 4 * byte_96409[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_3C688 + 4 * byte_96404[v4]))();
}

uint64_t sub_3C688(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_3C690(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x3C698LL);
  }
  return result;
}

uint64_t sub_3C6A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x3C6ACLL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_3C6B0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_3C6B8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Sharing_Medium()
{
  return &type metadata for Sharing_Medium;
}

uint64_t type metadata accessor for ShareETAFlowDelegate(uint64_t a1)
{
  return type metadata accessor for ShareETA( a1,  (uint64_t *)&type metadata singleton initialization cache for ShareETAFlowDelegate,  (uint64_t)&nominal type descriptor for ShareETAFlowDelegate);
}

uint64_t type metadata completion function for ShareETAFlowDelegate(uint64_t a1)
{
  v2[0] = "(";
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[2] = &unk_965B0;
  v2[3] = &unk_965B0;
  v2[4] = &unk_965C8;
  return swift_initClassMetadata2(a1, 0LL, 5LL, v2, a1 + class metadata base offset for ShareETAFlowDelegate);
}

uint64_t ObjC metadata update function for ShareETAFlowDelegate()
{
  return type metadata accessor for ShareETAFlowDelegate(0LL);
}

uint64_t type metadata completion function for ShareETAAceViewProvider(uint64_t a1)
{
  int v2 = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 1LL, &v2, a1 + class metadata base offset for ShareETAAceViewProvider);
}

uint64_t ObjC metadata update function for ShareETAAceViewProvider()
{
  return type metadata accessor for ShareETAAceViewProvider(0LL);
}

uint64_t type metadata completion function for ShareETAContextProvider(uint64_t a1)
{
  v2[0] = "(";
  v2[1] = &unk_965B0;
  v2[2] = &unk_965B0;
  v2[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 4LL, v2, a1 + class metadata base offset for ShareETAContextProvider);
}

uint64_t ObjC metadata update function for ShareETAContextProvider()
{
  return type metadata accessor for ShareETAContextProvider(0LL);
}

ValueMetadata *type metadata accessor for ShareETAContextProvider.NLNodes()
{
  return &type metadata for ShareETAContextProvider.NLNodes;
}

ValueMetadata *type metadata accessor for ShareETAContextProvider.ConfirmationValues()
{
  return &type metadata for ShareETAContextProvider.ConfirmationValues;
}

uint64_t type metadata completion function for ShareETATemplatingService(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[2] = "(";
  return swift_initClassMetadata2(a1, 0LL, 3LL, v2, a1 + class metadata base offset for ShareETATemplatingService);
}

uint64_t ObjC metadata update function for ShareETATemplatingService()
{
  return type metadata accessor for ShareETATemplatingService(0LL);
}

void *initializeBufferWithCopyOfBuffer for ShareETATemplatingService.ShareETATemplatingServiceError( void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for ShareETATemplatingService.ShareETATemplatingServiceError(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *assignWithCopy for ShareETATemplatingService.ShareETATemplatingServiceError(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

void *assignWithTake for ShareETATemplatingService.ShareETATemplatingServiceError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareETATemplatingService.ShareETATemplatingServiceError( uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShareETATemplatingService.ShareETATemplatingServiceError( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ShareETATemplatingService.ShareETATemplatingServiceError()
{
  return &type metadata for ShareETATemplatingService.ShareETATemplatingServiceError;
}

unint64_t lazy protocol witness table accessor for type [SAAceView] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [SAAceView] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SAAceView] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SAAceView]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [SAAceView] and conformance [A]);
  }

  return result;
}

uint64_t key path setter for DeleteParkingLocationBaseFlow.flowState : DeleteParkingLocationBaseFlow( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of DeleteParkingLocationBaseFlow.State(a1, (uint64_t)v5);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 120LL))(v5);
}

uint64_t DeleteParkingLocationBaseFlow.flowState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowState;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return outlined init with copy of DeleteParkingLocationBaseFlow.State(v3, a1);
}

uint64_t outlined init with copy of DeleteParkingLocationBaseFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeleteParkingLocationBaseFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for DeleteParkingLocationBaseFlow.State(uint64_t a1)
{
  return type metadata accessor for ShareETA( a1,  (uint64_t *)&type metadata singleton initialization cache for DeleteParkingLocationBaseFlow.State,  (uint64_t)&nominal type descriptor for DeleteParkingLocationBaseFlow.State);
}

uint64_t DeleteParkingLocationBaseFlow.flowState.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowState;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  outlined assign with take of DeleteParkingLocationBaseFlow.State(a1, v3);
  return swift_endAccess(v5);
}

uint64_t outlined assign with take of DeleteParkingLocationBaseFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeleteParkingLocationBaseFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t (*DeleteParkingLocationBaseFlow.flowState.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t DeleteParkingLocationBaseFlow.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowHelper;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return outlined init with copy of DeviceState(v3, a1);
}

uint64_t DeleteParkingLocationBaseFlow.flowHelper.setter(__int128 *a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowHelper);
  swift_beginAccess(v3, v5, 33LL, 0LL);
  __swift_destroy_boxed_opaque_existential_0Tm(v3);
  outlined init with take of CATType(a1, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t (*DeleteParkingLocationBaseFlow.flowHelper.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t DeleteParkingLocationBaseFlow.isPOMMES.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_isPOMMES);
  swift_beginAccess(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_isPOMMES, v3, 0LL, 0LL);
  return *v1;
}

uint64_t DeleteParkingLocationBaseFlow.isPOMMES.setter(char a1)
{
  uint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_isPOMMES);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*DeleteParkingLocationBaseFlow.isPOMMES.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t DeleteParkingLocationBaseFlow.__allocating_init(flowHelper:intent:)(void *a1, uint64_t a2)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v5);
  uint64_t v8 = specialized DeleteParkingLocationBaseFlow.__allocating_init(flowHelper:intent:)(v7, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v8;
}

uint64_t DeleteParkingLocationBaseFlow.init(flowHelper:intent:)(void *a1, uint64_t a2)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v5);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v9 + 16))(v8);
  uint64_t v10 = specialized DeleteParkingLocationBaseFlow.init(flowHelper:intent:)((uint64_t)v8, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v10;
}

uint64_t DeleteParkingLocationBaseFlow.exitValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DeleteParkingLocationBaseFlow.State(0LL);
  uint64_t v4 = __chkstk_darwin();
  uint64_t v6 = (uint64_t *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t))(*(void *)v1 + 112LL))(v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v3);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)a1 = *v6;
      *(_BYTE *)(a1 + 8) = 0;
      uint64_t v8 = enum case for RCHFlowResult.error<A, B>(_:);
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104LL))(a1, v8, v9);
    }

    else
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)(v16 - 8) + 32LL))(a1, v6, v16);
    }
  }

  else
  {
    unint64_t v11 = lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v12 = swift_allocError(&type metadata for Errors, v11, 0LL, 0LL);
    *(void *)uint64_t v13 = 0LL;
    *(void *)(v13 + 8) = 0LL;
    *(_BYTE *)(v13 + 16) = 3;
    *(void *)a1 = v12;
    *(_BYTE *)(a1 + 8) = 0;
    uint64_t v14 = enum case for RCHFlowResult.error<A, B>(_:);
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104LL))(a1, v14, v15);
    return outlined destroy of DeleteParkingLocationBaseFlow.State((uint64_t)v6);
  }

uint64_t DeleteParkingLocationBaseFlow.onInput(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Input(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Parse(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin();
  uint64_t v12 = (id *)((char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Input.parse.getter(v10);
  int v13 = (*(uint64_t (**)(id *, uint64_t))(v9 + 88))(v12, v8);
  if (v13 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(id *, uint64_t))(v9 + 96))(v12, v8);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    uint64_t v15 = swift_release(*(id *)((char *)v12 + *(int *)(v14 + 48)));
    uint64_t v16 = (os_log_s *)v2[2];
    os_log_type_t v17 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl( &dword_0,  v16,  v17,  "DeleteParkingLocationBaseFlow onInput returns true for NLv3IntentPlusServerConversion.",  v18,  2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    uint64_t v19 = type metadata accessor for NLIntent(0LL);
    (*(void (**)(id *, uint64_t))(*(void *)(v19 - 8) + 8LL))(v12, v19);
    return 1LL;
  }

  else if (v13 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(id *, uint64_t))(v9 + 96))(v12, v8);

    uint64_t v20 = 1LL;
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*v2 + 168LL))(1LL);
    uint64_t v22 = (os_log_s *)v2[2];
    os_log_type_t v23 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl( &dword_0,  v22,  v23,  "DeleteParkingLocationBaseFlow onInput returns true for Pommes response.",  v24,  2u);
      swift_slowDealloc(v24, -1LL, -1LL);
      return 1LL;
    }
  }

  else
  {
    uint64_t v25 = (os_log_s *)v2[2];
    uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    os_log_type_t v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v25, v27))
    {
      uint64_t v28 = swift_slowAlloc(12LL, -1LL);
      os_log_t v36 = v25;
      unint64_t v29 = (uint8_t *)v28;
      uint64_t v37 = swift_slowAlloc(32LL, -1LL);
      uint64_t v39 = v37;
      *(_DWORD *)unint64_t v29 = 136315138;
      v35[1] = v29 + 4;
      uint64_t v30 = Input.description.getter();
      unint64_t v32 = v31;
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_bridgeObjectRelease(v32);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      _os_log_impl(&dword_0, v36, v27, "SiriGeo currently doesn't support parse type: %s", v29, 0xCu);
      uint64_t v33 = v37;
      swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }

    (*(void (**)(id *, uint64_t))(v9 + 8))(v12, v8);
    return 0LL;
  }

  return v20;
}

uint64_t DeleteParkingLocationBaseFlow.executeState()(uint64_t a1)
{
  void v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
  v2[7] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[8] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[9] = swift_task_alloc(v5);
  v2[10] = swift_task_alloc(v5);
  v2[11] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for DeleteParkingLocationBaseFlow.State(0LL);
  v2[12] = v6;
  v2[13] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(DeleteParkingLocationBaseFlow.executeState(), 0LL, 0LL);
}

uint64_t DeleteParkingLocationBaseFlow.executeState()()
{
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 104);
  (*(void (**)(void))(**(void **)(v0 + 48) + 112LL))();
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v1, v2);
  if ((_DWORD)EnumCaseMultiPayload)
  {
    if ((_DWORD)EnumCaseMultiPayload == 1)
    {
      uint64_t v4 = *(void *)(v0 + 48);
      uint64_t v5 = **(void **)(v0 + 104);
      os_log_type_t v6 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
      uint64_t v7 = *(os_log_s **)(v4 + 16);
      os_log_type_t v8 = v6;
      uint64_t v9 = os_log_type_enabled(v7, v6);
      if ((_DWORD)v9)
      {
        swift_errorRetain(v5);
        swift_errorRetain(v5);
        uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v11 = swift_slowAlloc(32LL, -1LL);
        uint64_t v60 = v11;
        *(_DWORD *)uint64_t v10 = 136315138;
        *(void *)(v0 + 24) = v5;
        swift_errorRetain(v5);
        uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v13 = String.init<A>(describing:)(v0 + 24, v12);
        unint64_t v15 = v14;
        *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40);
        swift_bridgeObjectRelease(v15);
        swift_errorRelease(v5);
        swift_errorRelease(v5);
        _os_log_impl( &dword_0,  v7,  v8,  "DeleteParkingLocationBaseFlow execute requestUnsupported with error %s",  v10,  0xCu);
        swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v11, -1LL, -1LL);
        uint64_t v9 = swift_slowDealloc(v10, -1LL, -1LL);
      }

      static ExecuteResponse.complete()(v9);
      swift_errorRelease(v5);
    }

    else
    {
      uint64_t v26 = *(void *)(v0 + 80);
      uint64_t v25 = *(void *)(v0 + 88);
      uint64_t v28 = *(void *)(v0 + 56);
      uint64_t v27 = *(void *)(v0 + 64);
      uint64_t v29 = *(void *)(v0 + 48);
      uint64_t v30 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v27 + 32))(v25, *(void *)(v0 + 104), v28);
      os_log_type_t v38 = static os_log_type_t.info.getter(v30, v31, v32, v33, v34, v35, v36, v37);
      uint64_t v39 = *(os_log_s **)(v29 + 16);
      uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
      v40(v26, v25, v28);
      os_log_type_t v41 = v38;
      BOOL v42 = os_log_type_enabled(v39, v38);
      uint64_t v43 = *(void *)(v0 + 80);
      if (v42)
      {
        uint64_t v44 = *(void *)(v0 + 72);
        uint64_t v59 = *(void *)(v0 + 64);
        uint64_t v45 = *(void *)(v0 + 56);
        uint64_t v46 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v47 = swift_slowAlloc(32LL, -1LL);
        uint64_t v60 = v47;
        *(_DWORD *)uint64_t v46 = 136315138;
        v40(v44, v43, v45);
        uint64_t v48 = String.init<A>(describing:)(v44, v45);
        unint64_t v50 = v49;
        *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
        swift_bridgeObjectRelease(v50);
        uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
        v51(v43, v45);
        _os_log_impl(&dword_0, v39, v41, "DeleteParkingLocationBaseFlow execute rchComplete with result %s", v46, 0xCu);
        swift_arrayDestroy(v47, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1LL, -1LL);
        uint64_t v52 = swift_slowDealloc(v46, -1LL, -1LL);
      }

      else
      {
        uint64_t v51 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 64) + 8LL);
        uint64_t v52 = ((uint64_t (*)(void, void))v51)(*(void *)(v0 + 80), *(void *)(v0 + 56));
      }

      uint64_t v53 = *(void *)(v0 + 88);
      uint64_t v54 = *(void *)(v0 + 56);
      static ExecuteResponse.complete()(v52);
      v51(v53, v54);
    }

    uint64_t v55 = *(void *)(v0 + 80);
    uint64_t v56 = *(void *)(v0 + 88);
    uint64_t v57 = *(void *)(v0 + 72);
    swift_task_dealloc(*(void *)(v0 + 104));
    swift_task_dealloc(v56);
    swift_task_dealloc(v55);
    swift_task_dealloc(v57);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v16 = *(uint64_t **)(v0 + 104);
    uint64_t v17 = *(void *)(v0 + 48);
    uint64_t v18 = *v16;
    *(void *)(v0 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = *v16;
    uint64_t v19 = *(os_log_s **)(v17 + 16);
    os_log_type_t v20 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl(&dword_0, v19, v20, "DeleteParkingLocationBaseFlow execute state handle.", v21, 2u);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    uint64_t v22 = *(int **)(**(void **)(v0 + 48) + 216LL);
    uint64_t v58 = (int *)((char *)v22 + *v22);
    os_log_type_t v23 = (void *)swift_task_alloc(v22[1]);
    *(void *)(v0 + 12specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v23;
    *os_log_type_t v23 = v0;
    v23[1] = DeleteParkingLocationBaseFlow.executeState();
    return ((uint64_t (*)(void, uint64_t))v58)(*(void *)(v0 + 40), v18);
  }

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 120LL));
  return swift_task_switch(DeleteParkingLocationBaseFlow.executeState(), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 104));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DeleteParkingLocationBaseFlow.makeRCHFlow(intent:)(uint64_t a1, uint64_t a2)
{
  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
  v3[22] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[23] = v5;
  _BYTE v3[24] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(DeleteParkingLocationBaseFlow.makeRCHFlow(intent:), 0LL, 0LL);
}

uint64_t DeleteParkingLocationBaseFlow.makeRCHFlow(intent:)(uint64_t a1)
{
  uint64_t v2 = *(os_log_s **)(*(void *)(v1 + 168) + 16LL);
  os_log_type_t v3 = static os_log_type_t.default.getter(a1);
  uint64_t v4 = os_log_type_enabled(v2, v3);
  if ((_DWORD)v4)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_0, v2, v3, "DeleteParkingLocationBaseFlow makeRCHflow.", v12, 2u);
    uint64_t v4 = swift_slowDealloc(v12, -1LL, -1LL);
  }

  uint64_t v13 = *(void *)(v1 + 192);
  uint64_t v15 = *(void *)(v1 + 168);
  uint64_t v14 = *(void *)(v1 + 176);
  uint64_t v41 = *(void *)(v1 + 160);
  uint64_t v42 = *(void *)(v1 + 184);
  uint64_t v16 = static os_log_type_t.info.getter(v4, v5, v6, v7, v8, v9, v10, v11);
  os_log(_:dso:log:_:_:)( v16,  &dword_0,  v2,  "DeleteParkingLocationBaseFlow makeRCHFlow",  41LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v17 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INDeleteParkingLocationIntent,  &OBJC_CLASS___INDeleteParkingLocationIntent_ptr);
  uint64_t v18 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INDeleteParkingLocationIntentResponse,  &OBJC_CLASS___INDeleteParkingLocationIntentResponse_ptr);
  RCHChildFlowProducersAsync.init()(v17, v18);
  uint64_t v19 = type metadata accessor for App(0LL);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  uint64_t v40 = App.init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)( 0LL,  0LL,  0xD00000000000002DLL,  0x800000000009C810LL,  0LL,  0LL,  0LL,  0LL);
  uint64_t v20 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)(v40, v17, v18);
  uint64_t v38 = v13;
  uint64_t v21 = RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v20);
  uint64_t v39 = *(void (**)(void))(*(void *)v15 + 136LL);
  ((void (*)(uint64_t))v39)(v21);
  uint64_t v22 = type metadata accessor for DeleteParkingHandleIntentStrategy();
  uint64_t v23 = swift_allocObject(v22, 65LL, 7LL);
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  *(void *)(v23 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000021LL,  0x800000000009BC30LL);
  outlined init with take of CATType((__int128 *)(v1 + 16), v23 + 24);
  *(_BYTE *)(v23 + 64) = 0;
  *(void *)(v1 + 136) = v23;
  uint64_t v24 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type DeleteParkingHandleIntentStrategy and conformance DeleteParkingHandleIntentStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for DeleteParkingHandleIntentStrategy,  (uint64_t)&protocol conformance descriptor for DeleteParkingHandleIntentStrategy);
  uint64_t v25 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)(v1 + 136, v22, v24);
  uint64_t v27 = v26;
  swift_release(v23);
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v25, v27, v14);
  uint64_t v28 = type metadata accessor for DeleteParkingBaseRCHStrategy();
  uint64_t v29 = swift_allocObject(v28, 24LL, 7LL);
  *(void *)(v29 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001CLL,  0x800000000009BCF0LL);
  v39();
  uint64_t v30 = *(void *)(v1 + 80);
  uint64_t v31 = *(void *)(v1 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 56), v30);
  (*(void (**)(uint64_t, uint64_t))(v31 + 56))(v30, v31);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v1 + 56));
  uint64_t v32 = *(void *)(v1 + 120);
  uint64_t v33 = *(void *)(v1 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 96), v32);
  *(void *)(v1 + 144) = v29;
  uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 8);
  uint64_t v35 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type DeleteParkingBaseRCHStrategy and conformance DeleteParkingBaseRCHStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for DeleteParkingBaseRCHStrategy,  (uint64_t)&protocol conformance descriptor for DeleteParkingBaseRCHStrategy);
  uint64_t v36 = v34(v1 + 144, v38, v40, v41, v28, v35, v32, v33);
  swift_retain(v15);
  static ExecuteResponse.ongoing<A>(next:childCompletion:)( v36,  partial apply for closure #1 in DeleteParkingLocationBaseFlow.makeRCHFlow(intent:),  v15);
  swift_release(v40);
  swift_release(v29);
  swift_release(v36);
  swift_release(v15);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v38, v14);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v1 + 96));
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t closure #1 in DeleteParkingLocationBaseFlow.makeRCHFlow(intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeleteParkingLocationBaseFlow.State(0LL);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v6, a1, v7);
  swift_storeEnumTagMultiPayload(v6, v4, 2LL);
  return (*(uint64_t (**)(char *))(*(void *)a2 + 120LL))(v6);
}

uint64_t DeleteParkingLocationBaseFlow.deinit()
{
  outlined destroy of DeleteParkingLocationBaseFlow.State(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowState);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0
                                                        + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowHelper));
  return v0;
}

uint64_t DeleteParkingLocationBaseFlow.__deallocating_deinit()
{
  outlined destroy of DeleteParkingLocationBaseFlow.State((uint64_t)v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowState);
  __swift_destroy_boxed_opaque_existential_0Tm((id *)((char *)v0
                                                    + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowHelper));
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t protocol witness for Flow.on(input:) in conformance DeleteParkingLocationBaseFlow( uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for DeleteParkingLocationBaseFlow, a2);
  return FSMFlow.on(input:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance DeleteParkingLocationBaseFlow( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for DeleteParkingLocationBaseFlow, a3);
  return FSMFlow.execute(completion:)(a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for Flow.execute() in conformance DeleteParkingLocationBaseFlow( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_C6814);
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for DeleteParkingLocationBaseFlow, a2);
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return FSMFlow.execute()(a1, a2, WitnessTable);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DeleteParkingLocationBaseFlow( uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for DeleteParkingLocationBaseFlow, a1);
  return FSMFlow.description.getter(a1, WitnessTable);
}

uint64_t specialized DeleteParkingLocationBaseFlow.init(flowHelper:intent:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v9 = __swift_allocate_boxed_opaque_existential_0(&v13);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32LL))(v9, a1, a4);
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  *(void *)(a3 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001DLL,  0x80000000000966E0LL);
  *(_BYTE *)(a3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_isPOMMES) = 0;
  outlined init with take of CATType( &v13,  a3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowHelper);
  uint64_t v10 = a3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowState;
  *(void *)(a3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowState) = a2;
  uint64_t v11 = type metadata accessor for DeleteParkingLocationBaseFlow.State(0LL);
  swift_storeEnumTagMultiPayload(v10, v11, 0LL);
  return a3;
}

uint64_t specialized DeleteParkingLocationBaseFlow.__allocating_init(flowHelper:intent:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a4 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DeleteParkingLocationBaseFlow(0LL);
  uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  return specialized DeleteParkingLocationBaseFlow.init(flowHelper:intent:)((uint64_t)v11, a2, v13, a4, a5);
}

uint64_t outlined destroy of DeleteParkingLocationBaseFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DeleteParkingLocationBaseFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in DeleteParkingLocationBaseFlow.makeRCHFlow(intent:)(uint64_t a1)
{
  return closure #1 in DeleteParkingLocationBaseFlow.makeRCHFlow(intent:)(a1, v1);
}

uint64_t instantiation function for generic protocol witness table for DeleteParkingLocationBaseFlow( uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type DeleteParkingLocationBaseFlow and conformance DeleteParkingLocationBaseFlow,  type metadata accessor for DeleteParkingLocationBaseFlow,  (uint64_t)&protocol conformance descriptor for DeleteParkingLocationBaseFlow);
  uint64_t result = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type DeleteParkingLocationBaseFlow and conformance DeleteParkingLocationBaseFlow,  type metadata accessor for DeleteParkingLocationBaseFlow,  (uint64_t)&protocol conformance descriptor for DeleteParkingLocationBaseFlow);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for DeleteParkingLocationBaseFlow(uint64_t a1)
{
  return type metadata accessor for ShareETA( a1,  (uint64_t *)&type metadata singleton initialization cache for DeleteParkingLocationBaseFlow,  (uint64_t)&nominal type descriptor for DeleteParkingLocationBaseFlow);
}

uint64_t sub_3E2F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 112LL))();
}

uint64_t sub_3E31C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 136LL))();
}

uint64_t sub_3E344(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_BYTE *))(**(void **)a2 + 144LL))(v4);
}

uint64_t sub_3E384@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160LL))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_3E3B8(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 168LL))(*a1);
}

uint64_t ObjC metadata update function for DeleteParkingLocationBaseFlow()
{
  return type metadata accessor for DeleteParkingLocationBaseFlow(0LL);
}

uint64_t type metadata completion function for DeleteParkingLocationBaseFlow(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for DeleteParkingLocationBaseFlow.State(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = "(";
    v4[3] = &unk_96738;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

char *initializeBufferWithCopyOfBuffer for DeleteParkingLocationBaseFlow.State( char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *(void *)a1 = *a2;
    a1 = &v12[(v5 + 16LL) & ~(unint64_t)v5];
    swift_retain(v12);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
      uint64_t v9 = a1;
      uint64_t v10 = a3;
      uint64_t v11 = 2LL;
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = *a2;
      swift_errorRetain(v8);
      *(void *)a1 = v8;
      uint64_t v9 = a1;
      uint64_t v10 = a3;
      uint64_t v11 = 1LL;
    }

    else
    {
      uint64_t v14 = *a2;
      *(void *)a1 = *a2;
      uint64_t v15 = v14;
      uint64_t v9 = a1;
      uint64_t v10 = a3;
      uint64_t v11 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }

  return a1;
}

void destroy for DeleteParkingLocationBaseFlow.State(id *a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
      (*(void (**)(id *, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
      break;
    case 1:
      swift_errorRelease(*a1);
      break;
    case 0:

      break;
  }

void **initializeWithCopy for DeleteParkingLocationBaseFlow.State(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
    uint64_t v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 2LL;
  }

  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = *a2;
    swift_errorRetain(v7);
    *a1 = v7;
    uint64_t v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 1LL;
  }

  else
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    id v13 = v12;
    uint64_t v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

void **assignWithCopy for DeleteParkingLocationBaseFlow.State(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of DeleteParkingLocationBaseFlow.State((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 2LL;
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = *a2;
      swift_errorRetain(v7);
      *a1 = v7;
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
    }

    else
    {
      uint64_t v12 = *a2;
      *a1 = *a2;
      id v13 = v12;
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }

  return a1;
}

void *initializeWithTake for DeleteParkingLocationBaseFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 2LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *assignWithTake for DeleteParkingLocationBaseFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of DeleteParkingLocationBaseFlow.State((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
    {
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 2LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

void type metadata completion function for DeleteParkingLocationBaseFlow.State(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "\b";
  type metadata accessor for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(v2 - 8) + 64LL;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 3LL, v4);
  }

void type metadata accessor for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>( uint64_t a1)
{
  if (!lazy cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>)
  {
    uint64_t v2 = type metadata accessor for OS_os_log( 255LL,  &lazy cache variable for type metadata for INDeleteParkingLocationIntent,  &OBJC_CLASS___INDeleteParkingLocationIntent_ptr);
    uint64_t v3 = type metadata accessor for OS_os_log( 255LL,  &lazy cache variable for type metadata for INDeleteParkingLocationIntentResponse,  &OBJC_CLASS___INDeleteParkingLocationIntentResponse_ptr);
    unint64_t v4 = type metadata accessor for RCHFlowResult(a1, v2, v3);
    if (!v5) {
      atomic_store( v4,  (unint64_t *)&lazy cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
    }
  }

uint64_t GeoFeatureFlags.isAltimeterEnabled.getter()
{
  void v2[3] = &type metadata for SiriGeoFeature;
  void v2[4] = lazy protocol witness table accessor for type SiriGeoFeature and conformance SiriGeoFeature();
  LOBYTE(v2[0]) = 1;
  char v0 = isFeatureEnabled(_:)(v2);
  __swift_destroy_boxed_opaque_existential_0Tm(v2);
  return v0 & 1;
}

unint64_t lazy protocol witness table accessor for type SiriGeoFeature and conformance SiriGeoFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriGeoFeature and conformance SiriGeoFeature;
  if (!lazy protocol witness table cache variable for type SiriGeoFeature and conformance SiriGeoFeature)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriGeoFeature,  &type metadata for SiriGeoFeature);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriGeoFeature and conformance SiriGeoFeature);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriGeoFeature and conformance SiriGeoFeature;
  if (!lazy protocol witness table cache variable for type SiriGeoFeature and conformance SiriGeoFeature)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriGeoFeature,  &type metadata for SiriGeoFeature);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriGeoFeature and conformance SiriGeoFeature);
  }

  return result;
}

const char *SiriGeoFeature.domain.getter()
{
  return "SiriGeo";
}

const char *SiriGeoFeature.feature.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return "Altimeter";
  }
  else {
    return "placeHolder";
  }
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance SiriGeoFeature()
{
  if (*v0) {
    return "Altimeter";
  }
  else {
    return "placeHolder";
  }
}

ValueMetadata *type metadata accessor for GeoFeatureFlags()
{
  return &type metadata for GeoFeatureFlags;
}

uint64_t storeEnumTagSinglePayload for SiriGeoFeature(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_3EB44 + 4 * byte_96775[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_3EB78 + 4 * byte_96770[v4]))();
}

uint64_t sub_3EB78(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_3EB80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x3EB88LL);
  }
  return result;
}

uint64_t sub_3EB94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x3EB9CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_3EBA0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_3EBA8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SiriGeoFeature()
{
  return &type metadata for SiriGeoFeature;
}

void one-time initialization function for bundleName()
{
  static GeoDataModels.bundleuint64_t Name = 0x756C5049556F6547LL;
  *(void *)algn_D2A78 = 0xEB000000006E6967LL;
}

uint64_t *GeoDataModels.bundleName.unsafeMutableAddressor()
{
  if (one-time initialization token for bundleName != -1) {
    swift_once(&one-time initialization token for bundleName, one-time initialization function for bundleName);
  }
  return &static GeoDataModels.bundleName;
}

uint64_t static GeoDataModels.bundleName.getter()
{
  if (one-time initialization token for bundleName != -1) {
    swift_once(&one-time initialization token for bundleName, one-time initialization function for bundleName);
  }
  uint64_t v0 = static GeoDataModels.bundleName;
  swift_bridgeObjectRetain(*(void *)algn_D2A78);
  return v0;
}

uint64_t StandardMapData.label.getter(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t GeoDataModels.ContactDisambiguationDataModel.systemText.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(v2[1]);
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t GeoDataModels.TrafficDisambiguationDataModel.candidates.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRetain(a3);
}

uint64_t GeoDataModels.ContactDisambiguationDataModel.candidates.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 16));
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*GeoDataModels.TrafficDisambiguationDataModel.candidates.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t GeoDataModels.ContactDisambiguationDataModel.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x74616469646E6163LL;
  }
  else {
    return 0x65546D6574737973LL;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys()
{
  return GeoDataModels.ContactDisambiguationDataModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized GeoDataModels.ContactDisambiguationDataModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GeoDataModels.ContactDisambiguationDataModel.encode(to:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoDataModels.ContactDisambiguationDataModel.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  unint64_t v14 = lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_B97E0, &unk_B97E0, v14, v12, v13);
  char v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v21, v8);
  if (!v4)
  {
    uint64_t v19 = v18;
    char v20 = 1;
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GeoContact]);
    uint64_t v16 = lazy protocol witness table accessor for type [GeoContact] and conformance <A> [A]( &lazy protocol witness table cache variable for type [GeoContact] and conformance <A> [A],  &lazy protocol witness table cache variable for type GeoContact and conformance GeoContact,  (uint64_t)&protocol conformance descriptor for GeoContact,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v8, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.ContactDisambiguationDataModel.CodingKeys,  &unk_B97E0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.ContactDisambiguationDataModel.CodingKeys,  &unk_B97E0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.ContactDisambiguationDataModel.CodingKeys,  &unk_B97E0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.ContactDisambiguationDataModel.CodingKeys,  &unk_B97E0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys);
  }

  return result;
}

uint64_t GeoDataModels.ContactDisambiguationDataModel.init(from:)(uint64_t a1)
{
  return GeoDataModels.ContactDisambiguationDataModel.init(from:)( a1,  (uint64_t (*)(void))specialized GeoDataModels.ContactDisambiguationDataModel.init(from:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance GeoDataModels.ContactDisambiguationDataModel@<X0>( uint64_t *a1@<X8>)
{
  return protocol witness for Decodable.init(from:) in conformance GeoDataModels.ContactDisambiguationDataModel( (uint64_t (*)(void))specialized GeoDataModels.ContactDisambiguationDataModel.init(from:),  a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GeoDataModels.ContactDisambiguationDataModel( void *a1)
{
  return GeoDataModels.ContactDisambiguationDataModel.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t GeoDataModels.ParkingLocationDataModel.parkedCar.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of GeoParkedCar(v1, a1);
}

uint64_t GeoDataModels.ParkingLocationDataModel.buttonLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain(*(void *)(v0 + 72));
  return v1;
}

void __swiftcall GeoDataModels.ParkingLocationDataModel.init(parkedCar:buttonLabel:)( GeoFlowDelegatePlugin::GeoDataModels::ParkingLocationDataModel *__return_ptr retstr, GeoFlowDelegatePlugin::GeoParkedCar *parkedCar, Swift::String buttonLabel)
{
  uint64_t countAndFlagsBits = parkedCar->locationInfo.label._countAndFlagsBits;
  object = parkedCar->locationInfo.label._object;
  Swift::String_optional localizedAddress = parkedCar->localizedAddress;
  retstr->parkedCar.note = parkedCar->note;
  retstr->parkedCar.Swift::String_optional localizedAddress = localizedAddress;
  retstr->parkedCar.locationInfo.label._uint64_t countAndFlagsBits = countAndFlagsBits;
  retstr->parkedCar.locationInfo.label._object = object;
  *(_OWORD *)&retstr->parkedCar.locationInfo.latitude = *(_OWORD *)&parkedCar->locationInfo.latitude;
  retstr->buttonLabel = buttonLabel;
}

uint64_t GeoDataModels.ParkingLocationDataModel.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x614C6E6F74747562LL;
  }
  else {
    return 0x614364656B726170LL;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GeoDataModels.ParkingLocationDataModel.CodingKeys()
{
  return GeoDataModels.ParkingLocationDataModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GeoDataModels.ParkingLocationDataModel.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized GeoDataModels.ParkingLocationDataModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoDataModels.ParkingLocationDataModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoDataModels.ParkingLocationDataModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GeoDataModels.ParkingLocationDataModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoDataModels.ParkingLocationDataModel.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  unint64_t v11 = lazy protocol witness table accessor for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_B9750, &unk_B9750, v11, v9, v10);
  __int128 v12 = *(_OWORD *)(v3 + 16);
  v20[0] = *(_OWORD *)v3;
  v20[1] = v12;
  __int128 v13 = *(_OWORD *)(v3 + 48);
  v20[2] = *(_OWORD *)(v3 + 32);
  v20[3] = v13;
  char v19 = 0;
  unint64_t v14 = lazy protocol witness table accessor for type GeoParkedCar and conformance GeoParkedCar();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v19, v5, &type metadata for GeoParkedCar, v14);
  if (!v2)
  {
    uint64_t v15 = *(void *)(v3 + 64);
    uint64_t v16 = *(void *)(v3 + 72);
    LOBYTE(v20[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, v20, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 GeoDataModels.ParkingLocationDataModel.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[3];
    *(_OWORD *)(a2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }

  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GeoDataModels.ParkingLocationDataModel( void *a1)
{
  return GeoDataModels.ParkingLocationDataModel.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GeoDataModels.TrafficDisambiguationDataModel.encode(to:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoDataModels.TrafficDisambiguationDataModel.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  unint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  unint64_t v14 = lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_B96C0, &unk_B96C0, v14, v12, v13);
  char v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v21, v8);
  if (!v4)
  {
    uint64_t v19 = v18;
    char v20 = 1;
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GeoTrafficIncident]);
    uint64_t v16 = lazy protocol witness table accessor for type [GeoTrafficIncident] and conformance <A> [A]( &lazy protocol witness table cache variable for type [GeoTrafficIncident] and conformance <A> [A],  (void (*)(void))lazy protocol witness table accessor for type GeoTrafficIncident and conformance GeoTrafficIncident,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v8, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t GeoDataModels.TrafficDisambiguationDataModel.init(from:)(uint64_t a1)
{
  return GeoDataModels.ContactDisambiguationDataModel.init(from:)( a1,  (uint64_t (*)(void))specialized GeoDataModels.TrafficDisambiguationDataModel.init(from:));
}

uint64_t GeoDataModels.ContactDisambiguationDataModel.init(from:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2();
  if (v2) {
    return v4;
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GeoDataModels.TrafficDisambiguationDataModel@<X0>( uint64_t *a1@<X8>)
{
  return protocol witness for Decodable.init(from:) in conformance GeoDataModels.ContactDisambiguationDataModel( (uint64_t (*)(void))specialized GeoDataModels.TrafficDisambiguationDataModel.init(from:),  a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GeoDataModels.ContactDisambiguationDataModel@<X0>( uint64_t (*a1)(void)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GeoDataModels.TrafficDisambiguationDataModel( void *a1)
{
  return GeoDataModels.TrafficDisambiguationDataModel.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t GeoParkedCar.note.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t RuntimeError.message.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t GeoParkedCar.label.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain(*(void *)(v0 + 40));
  return v1;
}

double GeoDataModels.WhereAmIDataModel.currentLocation.getter()
{
  double v1 = *(double *)(v0 + 64);
  swift_bridgeObjectRetain(*(void *)(v0 + 56));
  return v1;
}

uint64_t GeoDataModels.WhereAmIDataModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_3F604 + 4 * byte_96860[a1]))( 0xD000000000000010LL,  0x800000000009D310LL);
}

uint64_t sub_3F604()
{
  return 1145660781LL;
}

uint64_t sub_3F614()
{
  return 0x4C746E6572727563LL;
}

uint64_t sub_3F638()
{
  return 0x614C6E6F74747562LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GeoDataModels.WhereAmIDataModel.CodingKeys()
{
  return GeoDataModels.WhereAmIDataModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GeoDataModels.WhereAmIDataModel.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized GeoDataModels.WhereAmIDataModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoDataModels.WhereAmIDataModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoDataModels.WhereAmIDataModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GeoDataModels.WhereAmIDataModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoDataModels.WhereAmIDataModel.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  unint64_t v11 = lazy protocol witness table accessor for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_B9630, &unk_B9630, v11, v9, v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  LOBYTE(v23[0]) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v23, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    LOBYTE(v23[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v23, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    LOBYTE(v23[0]) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v23, v5);
    __int128 v18 = *((_OWORD *)v3 + 4);
    v23[0] = *((_OWORD *)v3 + 3);
    v23[1] = v18;
    char v22 = 3;
    unint64_t v19 = lazy protocol witness table accessor for type StandardMapData and conformance StandardMapData();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v22, v5, &type metadata for StandardMapData, v19);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 GeoDataModels.WhereAmIDataModel.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[3];
    *(_OWORD *)(a2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }

  return result;
}

void __swiftcall GeoDataModels.WhereAmIDataModel.init(meID:buttonLabel:localizedAddress:currentLocation:)( GeoFlowDelegatePlugin::GeoDataModels::WhereAmIDataModel *__return_ptr retstr, Swift::String_optional meID, Swift::String buttonLabel, Swift::String_optional localizedAddress, GeoFlowDelegatePlugin::StandardMapData currentLocation)
{
  retstr->meID = meID;
  retstr->buttonLabel = buttonLabel;
  retstr->Swift::String_optional localizedAddress = localizedAddress;
  retstr->currentLocation = currentLocation;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GeoDataModels.WhereAmIDataModel( void *a1)
{
  return GeoDataModels.WhereAmIDataModel.encode(to:)(a1);
}

uint64_t GeoDataModels.snippetHidden(for:idiom:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for DeviceIdiom(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  outlined init with take of GeoDataModels(v3, (uint64_t)v12);
  if ((v12[80] | 2) == 2)
  {
    char v9 = 0;
  }

  else
  {
    (*(void (**)(_BYTE *, void, uint64_t))(v6 + 104))(v8, enum case for DeviceIdiom.car(_:), v5);
    char v9 = static DeviceIdiom.== infix(_:_:)(a2, v8);
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  }

  return v9 & 1;
}

uint64_t GeoDataModels.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_3F9D0 + 4 * byte_96864[a1]))( 0xD000000000000015LL,  0x800000000009D330LL);
}

uint64_t sub_3F9D0()
{
  return 0x4C676E696B726170LL;
}

  ;
}

uint64_t sub_3FA08()
{
  return 0x496D416572656877LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GeoDataModels.CodingKeys()
{
  return GeoDataModels.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GeoDataModels.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized GeoDataModels.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoDataModels.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoDataModels.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void protocol witness for CodingKey.init(intValue:) in conformance GeoDataModels.ContactDisambiguationCodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoDataModels.ContactDisambiguationCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoDataModels.ContactDisambiguationCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoDataModels.ParkingLocationCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoDataModels.ParkingLocationCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoDataModels.TrafficDisambiguationCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoDataModels.TrafficDisambiguationCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GeoDataModels.ContactDisambiguationCodingKeys()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance GeoDataModels.WhereAmICodingKeys()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GeoDataModels.ContactDisambiguationCodingKeys( uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GeoDataModels.WhereAmICodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized GeoDataModels.ContactDisambiguationCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoDataModels.WhereAmICodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoDataModels.WhereAmICodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void GeoDataModels.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoDataModels.WhereAmICodingKeys>);
  uint64_t v16 = *(void *)(v2 - 8);
  uint64_t v17 = v2;
  __chkstk_darwin();
  uint64_t v15 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoDataModels.TrafficDisambiguationCodingKeys>);
  uint64_t v13 = *(void *)(v4 - 8);
  uint64_t v14 = v4;
  __chkstk_darwin();
  v11[1] = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoDataModels.ParkingLocationCodingKeys>);
  v11[0] = *(void *)(v12 - 8);
  __chkstk_darwin();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoDataModels.ContactDisambiguationCodingKeys>);
  __chkstk_darwin();
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoDataModels.CodingKeys>);
  uint64_t v18 = *(void *)(v20 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  unint64_t v10 = lazy protocol witness table accessor for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys();
  unint64_t v19 = v7;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_B9360, &unk_B9360, v10, v8, v9);
  outlined init with take of GeoDataModels(v22, (uint64_t)v21);
  __asm { BR              X10 }

uint64_t sub_3FE8C()
{
  *(_OWORD *)(v0 + 27__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = *(_OWORD *)(v0 + 184);
  *(void *)(v0 + 288) = *(void *)(v0 + 200);
  *(_BYTE *)(v0 + 96) = 0;
  unint64_t v4 = lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys();
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 80);
  ((void (*)(void *, uint64_t, uint64_t, void *, unint64_t))KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:))( &unk_B93F0,  v0 + 96,  v5,  &unk_B93F0,  v4);
  *(_OWORD *)(v0 + 96) = *(_OWORD *)(v0 + 272);
  *(void *)(v0 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = *(void *)(v0 + 288);
  unint64_t v7 = lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationDataModel and conformance GeoDataModels.ContactDisambiguationDataModel();
  KeyedEncodingContainer.encode<A>(_:forKey:)( v0 + 96,  v8,  v1,  &type metadata for GeoDataModels.ContactDisambiguationDataModel,  v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v0 + 64) + 8LL))(v6, v5);
}

uint64_t GeoDataModels.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized GeoDataModels.init(from:)(a1, (uint64_t)v5);
  if (!v2) {
    return outlined init with take of GeoDataModels((uint64_t)v5, a2);
  }
  return result;
}

uint64_t protocol witness for SnippetPluginModel.snippetHidden(for:idiom:) in conformance GeoDataModels( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeviceIdiom(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  unint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned __int8 *)(v2 + 80) | 2) == 2)
  {
    char v8 = 0;
  }

  else
  {
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DeviceIdiom.car(_:), v4);
    char v8 = static DeviceIdiom.== infix(_:_:)(a2, v7);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  return v8 & 1;
}

void protocol witness for Encodable.encode(to:) in conformance GeoDataModels(void *a1)
{
}

uint64_t specialized GeoDataModels.ContactDisambiguationDataModel.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoDataModels.ContactDisambiguationDataModel.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  unint64_t v9 = lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_B97E0, &unk_B97E0, v9, v7, v8);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0Tm(a1);
  }

  else
  {
    char v20 = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)(&v20, v3);
    uint64_t v12 = v11;
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GeoContact]);
    char v18 = 1;
    uint64_t v14 = lazy protocol witness table accessor for type [GeoContact] and conformance <A> [A]( &lazy protocol witness table cache variable for type [GeoContact] and conformance <A> [A],  &lazy protocol witness table cache variable for type GeoContact and conformance GeoContact,  (uint64_t)&protocol conformance descriptor for GeoContact,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    __n128 v15 = swift_bridgeObjectRetain(v12);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, v13, &v18, v3, v13, v14, v15);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v16 = v19;
    swift_bridgeObjectRetain(v19);
    __swift_destroy_boxed_opaque_existential_0Tm(a1);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v12);
  }

  return v8;
}

uint64_t outlined init with copy of GeoParkedCar(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.ParkingLocationDataModel.CodingKeys,  &unk_B9750);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.ParkingLocationDataModel.CodingKeys,  &unk_B9750);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.ParkingLocationDataModel.CodingKeys,  &unk_B9750);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.ParkingLocationDataModel.CodingKeys,  &unk_B9750);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type GeoParkedCar and conformance GeoParkedCar()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoParkedCar and conformance GeoParkedCar;
  if (!lazy protocol witness table cache variable for type GeoParkedCar and conformance GeoParkedCar)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoParkedCar, &type metadata for GeoParkedCar);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoParkedCar and conformance GeoParkedCar);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoParkedCar and conformance GeoParkedCar;
  if (!lazy protocol witness table cache variable for type GeoParkedCar and conformance GeoParkedCar)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoParkedCar, &type metadata for GeoParkedCar);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoParkedCar and conformance GeoParkedCar);
  }

  return result;
}

uint64_t specialized GeoDataModels.ParkingLocationDataModel.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x614364656B726170LL && a2 == 0xE900000000000072LL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x614364656B726170LL, 0xE900000000000072LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else if (a1 == 0x614C6E6F74747562LL && a2 == 0xEB000000006C6562LL)
  {
    swift_bridgeObjectRelease(0xEB000000006C6562LL);
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x614C6E6F74747562LL, 0xEB000000006C6562LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t specialized GeoDataModels.ParkingLocationDataModel.init(from:)@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoDataModels.ParkingLocationDataModel.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  unint64_t v11 = lazy protocol witness table accessor for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_B9750, &unk_B9750, v11, v9, v10);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_0Tm(a1);
  }
  char v36 = 0;
  unint64_t v12 = lazy protocol witness table accessor for type GeoParkedCar and conformance GeoParkedCar();
  KeyedDecodingContainer.decode<A>(_:forKey:)( v30,  &type metadata for GeoParkedCar,  &v36,  v5,  &type metadata for GeoParkedCar,  v12,  v13);
  uint64_t v14 = v30[1];
  uint64_t v15 = v31;
  uint64_t v27 = v30[2];
  uint64_t v28 = v30[0];
  uint64_t v16 = v33;
  uint64_t v26 = v32;
  uint64_t v17 = v34;
  uint64_t v18 = v35;
  LOBYTE(v30[0]) = 1;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v16);
  uint64_t v29 = v14;
  swift_bridgeObjectRetain(v14);
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)(v30, v5);
  uint64_t v21 = v20;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v23 = v19;
  v22(v8, v5);
  swift_bridgeObjectRetain(v21);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v15);
  uint64_t v24 = v29;
  uint64_t result = swift_bridgeObjectRelease(v29);
  *a2 = v28;
  a2[1] = v24;
  a2[2] = v27;
  a2[3] = v15;
  a2[4] = v26;
  a2[5] = v16;
  a2[6] = v17;
  a2[7] = v18;
  a2[8] = v23;
  a2[9] = v21;
  return result;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.TrafficDisambiguationDataModel.CodingKeys,  &unk_B96C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.TrafficDisambiguationDataModel.CodingKeys,  &unk_B96C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.TrafficDisambiguationDataModel.CodingKeys,  &unk_B96C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.TrafficDisambiguationDataModel.CodingKeys,  &unk_B96C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys);
  }

  return result;
}

uint64_t lazy protocol witness table accessor for type [GeoTrafficIncident] and conformance <A> [A]( unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GeoTrafficIncident]);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t specialized GeoDataModels.ContactDisambiguationDataModel.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  if (a1 == 0x65546D6574737973LL && a2 == 0xEA00000000007478LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65546D6574737973LL, 0xEA00000000007478LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else if (a1 == 0x74616469646E6163LL && a2 == 0xEA00000000007365LL)
  {
    swift_bridgeObjectRelease(0xEA00000000007365LL);
    return 1LL;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74616469646E6163LL, 0xEA00000000007365LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v5 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t specialized GeoDataModels.TrafficDisambiguationDataModel.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoDataModels.TrafficDisambiguationDataModel.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  unint64_t v9 = lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_B96C0, &unk_B96C0, v9, v7, v8);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0Tm(a1);
  }

  else
  {
    char v20 = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)(&v20, v3);
    uint64_t v12 = v11;
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GeoTrafficIncident]);
    char v18 = 1;
    uint64_t v14 = lazy protocol witness table accessor for type [GeoTrafficIncident] and conformance <A> [A]( &lazy protocol witness table cache variable for type [GeoTrafficIncident] and conformance <A> [A],  (void (*)(void))lazy protocol witness table accessor for type GeoTrafficIncident and conformance GeoTrafficIncident,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    __n128 v15 = swift_bridgeObjectRetain(v12);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, v13, &v18, v3, v13, v14, v15);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v16 = v19;
    swift_bridgeObjectRetain(v19);
    __swift_destroy_boxed_opaque_existential_0Tm(a1);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v12);
  }

  return v8;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.WhereAmIDataModel.CodingKeys,  &unk_B9630);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.WhereAmIDataModel.CodingKeys,  &unk_B9630);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.WhereAmIDataModel.CodingKeys,  &unk_B9630);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.WhereAmIDataModel.CodingKeys,  &unk_B9630);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type StandardMapData and conformance StandardMapData()
{
  unint64_t result = lazy protocol witness table cache variable for type StandardMapData and conformance StandardMapData;
  if (!lazy protocol witness table cache variable for type StandardMapData and conformance StandardMapData)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StandardMapData,  &type metadata for StandardMapData);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type StandardMapData and conformance StandardMapData);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type StandardMapData and conformance StandardMapData;
  if (!lazy protocol witness table cache variable for type StandardMapData and conformance StandardMapData)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StandardMapData,  &type metadata for StandardMapData);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type StandardMapData and conformance StandardMapData);
  }

  return result;
}

uint64_t specialized GeoDataModels.WhereAmIDataModel.CodingKeys.init(stringValue:)( uint64_t a1, unint64_t a2)
{
  BOOL v3 = a1 == 1145660781 && a2 == 0xE400000000000000LL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(1145660781LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  if (a1 == 0x614C6E6F74747562LL && a2 == 0xEB000000006C6562LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x614C6E6F74747562LL, 0xEB000000006C6562LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v6 = 0x800000000009D310LL;
    if (a2 == 0x800000000009D310LL) {
      goto LABEL_15;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000000009D310LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
LABEL_15:
    swift_bridgeObjectRelease(v6);
    return 2LL;
  }

  if (a1 == 0x4C746E6572727563LL && a2 == 0xEF6E6F697461636FLL)
  {
    swift_bridgeObjectRelease(0xEF6E6F697461636FLL);
    return 3LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4C746E6572727563LL, 0xEF6E6F697461636FLL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t specialized GeoDataModels.WhereAmIDataModel.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoDataModels.WhereAmIDataModel.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  unint64_t v11 = lazy protocol witness table accessor for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_B9630, &unk_B9630, v11, v9, v10);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_0Tm(a1);
  }
  LOBYTE(v34[0]) = 0;
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v34, v5);
  uint64_t v14 = v13;
  uint64_t v32 = v12;
  LOBYTE(v34[0]) = 1;
  swift_bridgeObjectRetain(v13);
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)(v34, v5);
  uint64_t v33 = v16;
  uint64_t v31 = v15;
  LOBYTE(v34[0]) = 2;
  swift_bridgeObjectRetain(v16);
  uint64_t v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v34, v5);
  char v35 = 3;
  uint64_t v18 = v17;
  unint64_t v19 = lazy protocol witness table accessor for type StandardMapData and conformance StandardMapData();
  uint64_t v30 = v18;
  __n128 v20 = swift_bridgeObjectRetain(v18);
  KeyedDecodingContainer.decode<A>(_:forKey:)( v34,  &type metadata for StandardMapData,  &v35,  v5,  &type metadata for StandardMapData,  v19,  v20);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v22 = v34[0];
  uint64_t v21 = v34[1];
  uint64_t v23 = v34[2];
  uint64_t v24 = v34[3];
  swift_bridgeObjectRetain(v14);
  uint64_t v25 = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v25);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  swift_bridgeObjectRelease(v21);
  uint64_t v26 = v30;
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v25);
  uint64_t result = swift_bridgeObjectRelease(v14);
  *a2 = v32;
  a2[1] = v14;
  a2[2] = v31;
  a2[3] = v25;
  a2[4] = v29;
  a2[5] = v26;
  a2[6] = v22;
  a2[7] = v21;
  a2[8] = v23;
  a2[9] = v24;
  return result;
}

uint64_t outlined init with take of GeoDataModels(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a1 + 32);
  __int128 v4 = *(_OWORD *)(a1 + 48);
  __int128 v5 = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(a2 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = *(_BYTE *)(a1 + 80);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v3;
  return a2;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoDataModels.CodingKeys, &unk_B9360);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoDataModels.CodingKeys, &unk_B9360);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoDataModels.CodingKeys, &unk_B9360);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoDataModels.CodingKeys, &unk_B9360);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoDataModels.WhereAmICodingKeys, &unk_B95A0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoDataModels.WhereAmICodingKeys, &unk_B95A0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoDataModels.WhereAmICodingKeys, &unk_B95A0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoDataModels.WhereAmICodingKeys, &unk_B95A0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.WhereAmIDataModel and conformance GeoDataModels.WhereAmIDataModel()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel and conformance GeoDataModels.WhereAmIDataModel;
  if (!lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel and conformance GeoDataModels.WhereAmIDataModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.WhereAmIDataModel,  &type metadata for GeoDataModels.WhereAmIDataModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel and conformance GeoDataModels.WhereAmIDataModel);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel and conformance GeoDataModels.WhereAmIDataModel;
  if (!lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel and conformance GeoDataModels.WhereAmIDataModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.WhereAmIDataModel,  &type metadata for GeoDataModels.WhereAmIDataModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel and conformance GeoDataModels.WhereAmIDataModel);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.TrafficDisambiguationCodingKeys,  &unk_B9510);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.TrafficDisambiguationCodingKeys,  &unk_B9510);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.TrafficDisambiguationCodingKeys,  &unk_B9510);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.TrafficDisambiguationCodingKeys,  &unk_B9510);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationDataModel and conformance GeoDataModels.TrafficDisambiguationDataModel()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel and conformance GeoDataModels.TrafficDisambiguationDataModel;
  if (!lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel and conformance GeoDataModels.TrafficDisambiguationDataModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.TrafficDisambiguationDataModel,  &type metadata for GeoDataModels.TrafficDisambiguationDataModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel and conformance GeoDataModels.TrafficDisambiguationDataModel);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel and conformance GeoDataModels.TrafficDisambiguationDataModel;
  if (!lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel and conformance GeoDataModels.TrafficDisambiguationDataModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.TrafficDisambiguationDataModel,  &type metadata for GeoDataModels.TrafficDisambiguationDataModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel and conformance GeoDataModels.TrafficDisambiguationDataModel);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.ParkingLocationCodingKeys,  &unk_B9480);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.ParkingLocationCodingKeys,  &unk_B9480);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.ParkingLocationCodingKeys,  &unk_B9480);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.ParkingLocationCodingKeys,  &unk_B9480);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.ParkingLocationDataModel and conformance GeoDataModels.ParkingLocationDataModel()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel and conformance GeoDataModels.ParkingLocationDataModel;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel and conformance GeoDataModels.ParkingLocationDataModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.ParkingLocationDataModel,  &type metadata for GeoDataModels.ParkingLocationDataModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel and conformance GeoDataModels.ParkingLocationDataModel);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel and conformance GeoDataModels.ParkingLocationDataModel;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel and conformance GeoDataModels.ParkingLocationDataModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.ParkingLocationDataModel,  &type metadata for GeoDataModels.ParkingLocationDataModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel and conformance GeoDataModels.ParkingLocationDataModel);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.ContactDisambiguationCodingKeys,  &unk_B93F0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.ContactDisambiguationCodingKeys,  &unk_B93F0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.ContactDisambiguationCodingKeys,  &unk_B93F0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.ContactDisambiguationCodingKeys,  &unk_B93F0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationDataModel and conformance GeoDataModels.ContactDisambiguationDataModel()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel and conformance GeoDataModels.ContactDisambiguationDataModel;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel and conformance GeoDataModels.ContactDisambiguationDataModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.ContactDisambiguationDataModel,  &type metadata for GeoDataModels.ContactDisambiguationDataModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel and conformance GeoDataModels.ContactDisambiguationDataModel);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel and conformance GeoDataModels.ContactDisambiguationDataModel;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel and conformance GeoDataModels.ContactDisambiguationDataModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDataModels.ContactDisambiguationDataModel,  &type metadata for GeoDataModels.ContactDisambiguationDataModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel and conformance GeoDataModels.ContactDisambiguationDataModel);
  }

  return result;
}

uint64_t specialized GeoDataModels.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v4 = 0x800000000009D330LL;
    if (a2 == 0x800000000009D330LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000000009D330LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x4C676E696B726170LL && a2 == 0xEF6E6F697461636FLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x4C676E696B726170LL, 0xEF6E6F697461636FLL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v6 = 0x800000000009D350LL;
    if (a2 == 0x800000000009D350LL) {
      goto LABEL_14;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000000009D350LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
LABEL_14:
    swift_bridgeObjectRelease(v6);
    return 2LL;
  }

  if (a1 == 0x496D416572656877LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease(0xE800000000000000LL);
    return 3LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x496D416572656877LL, 0xE800000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t specialized GeoDataModels.ContactDisambiguationCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000LL)
  {
    swift_bridgeObjectRelease(a2);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(12383LL, 0xE200000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

uint64_t specialized GeoDataModels.WhereAmICodingKeys.stringValue.getter()
{
  return 12383LL;
}

uint64_t specialized GeoDataModels.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoDataModels.WhereAmICodingKeys>);
  uint64_t v33 = *(void *)(v30 - 8);
  __chkstk_darwin();
  uint64_t v39 = (char *)v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoDataModels.TrafficDisambiguationCodingKeys>);
  uint64_t v34 = *(void *)(v4 - 8);
  uint64_t v35 = v4;
  __chkstk_darwin();
  uint64_t v38 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoDataModels.ParkingLocationCodingKeys>);
  uint64_t v31 = *(void *)(v32 - 8);
  __chkstk_darwin();
  uint64_t v37 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoDataModels.ContactDisambiguationCodingKeys>)
                 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoDataModels.CodingKeys>);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = a1[3];
  uint64_t v14 = a1[4];
  uint64_t v41 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  unint64_t v16 = lazy protocol witness table accessor for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys();
  uint64_t v17 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_B9360, &unk_B9360, v16, v15, v14);
  if (!v17)
  {
    v28[4] = v9;
    v28[3] = v7;
    *(void *)&__int128 v40 = v11;
    uint64_t v29 = v10;
    uint64_t v18 = v13;
    uint64_t v19 = KeyedDecodingContainer.allKeys.getter(v10);
    uint64_t v20 = v19;
    if (*(void *)(v19 + 16) == 1LL)
    {
      v28[2] = v19;
      __asm { BR              X9 }
    }

    uint64_t v21 = type metadata accessor for DecodingError(0LL);
    swift_allocError(v21, &protocol witness table for DecodingError, 0LL, 0LL);
    uint64_t v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v23 = &type metadata for GeoDataModels;
    uint64_t v24 = v29;
    uint64_t v25 = KeyedDecodingContainer.codingPath.getter(v29);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v25,  0xD00000000000002BLL,  0x800000000009D370LL,  0LL);
    uint64_t v26 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v23,  enum case for DecodingError.typeMismatch(_:),  v21);
    swift_willThrow(v26);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v18, v24);
  }

  return __swift_destroy_boxed_opaque_existential_0Tm(v41);
}

void sub_419EC()
{
  *(_BYTE *)(v4 - 168) = 1;
  unint64_t v5 = lazy protocol witness table accessor for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys();
  uint64_t v6 = v1;
  uint64_t v7 = *(void *)(v4 - 280);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&unk_B9480, v4 - 168, v7, &unk_B9480, v5);
  if (!v3)
  {
    unint64_t v8 = lazy protocol witness table accessor for type GeoDataModels.ParkingLocationDataModel and conformance GeoDataModels.ParkingLocationDataModel();
    uint64_t v9 = *(void *)(v4 - 256);
    KeyedDecodingContainer.decode<A>(_:forKey:)( (void *)(v4 - 168),  &type metadata for GeoDataModels.ParkingLocationDataModel,  v10,  v9,  &type metadata for GeoDataModels.ParkingLocationDataModel,  v8,  v11);
    uint64_t v12 = *(void *)(v4 - 192);
    *(void *)(v4 - 31__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v0;
    *(void *)(v4 - 288) = 0LL;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 264) + 8LL))(v6, v9);
    swift_bridgeObjectRelease(*(void *)(v4 - 304));
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v2, v7);
    *(_OWORD *)(v4 - 19__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = *(_OWORD *)(v4 - 160);
    JUMPOUT(0x41D9CLL);
  }

  swift_bridgeObjectRelease(*(void *)(v4 - 304));
  JUMPOUT(0x419BCLL);
}

void sub_41AE4()
{
  *(_BYTE *)(v3 - 168) = 3;
  unint64_t v4 = lazy protocol witness table accessor for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)( &unk_B95A0,  v3 - 168,  *(void *)(v3 - 280),  &unk_B95A0,  v4);
  if (v2)
  {
    swift_bridgeObjectRelease(*(void *)(v3 - 304));
    JUMPOUT(0x419BCLL);
  }

  unint64_t v5 = lazy protocol witness table accessor for type GeoDataModels.WhereAmIDataModel and conformance GeoDataModels.WhereAmIDataModel();
  uint64_t v6 = *(void *)(v3 - 272);
  KeyedDecodingContainer.decode<A>(_:forKey:)( (void *)(v3 - 168),  &type metadata for GeoDataModels.WhereAmIDataModel,  v7,  v6,  &type metadata for GeoDataModels.WhereAmIDataModel,  v5,  v8);
  *(void *)(v3 - 31__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v0;
  *(void *)(v3 - 288) = 0LL;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 248) + 8LL))(v1, v6);
  swift_bridgeObjectRelease(*(void *)(v3 - 304));
  JUMPOUT(0x41D7CLL);
}

uint64_t outlined copy of GeoDataModels( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v13 = a6;
  uint64_t result = a4;
  switch(a11)
  {
    case 0:
    case 2:
      goto LABEL_4;
    case 1:
      goto LABEL_3;
    case 3:
      uint64_t v13 = a8;
      uint64_t result = a6;
      a10 = a2;
      a2 = a4;
LABEL_3:
      a3 = a2;
      swift_bridgeObjectRetain(result);
      swift_bridgeObjectRetain(v13);
      a2 = a10;
LABEL_4:
      swift_bridgeObjectRetain(a2);
      uint64_t result = swift_bridgeObjectRetain(a3);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t destroy for GeoDataModels(uint64_t a1)
{
  return outlined consume of GeoDataModels( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(_BYTE *)(a1 + 80));
}

uint64_t initializeWithCopy for GeoDataModels(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  char v14 = *(_BYTE *)(a2 + 80);
  outlined copy of GeoDataModels(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v7;
  *(void *)(a1 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v13;
  *(_BYTE *)(a1 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v14;
  return a1;
}

uint64_t assignWithCopy for GeoDataModels(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v24 = *(void *)(a2 + 72);
  char v25 = *(_BYTE *)(a2 + 80);
  outlined copy of GeoDataModels(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 72);
  char v22 = *(_BYTE *)(a1 + 80);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v7;
  *(void *)(a1 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v24;
  *(_BYTE *)(a1 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v25;
  outlined consume of GeoDataModels(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  return a1;
}

__n128 __swift_memcpy81_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = result;
  return result;
}

uint64_t assignWithTake for GeoDataModels(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 80);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  char v14 = *(_BYTE *)(a1 + 80);
  __int128 v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  __int128 v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v3;
  outlined consume of GeoDataModels(v4, v6, v5, v7, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoDataModels(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoDataModels(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 81) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 81) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for GeoDataModels(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t destructiveInjectEnumTag for GeoDataModels(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GeoDataModels()
{
  return &type metadata for GeoDataModels;
}

ValueMetadata *type metadata accessor for GeoDataModels.ContactDisambiguationDataModel()
{
  return &type metadata for GeoDataModels.ContactDisambiguationDataModel;
}

uint64_t destroy for GeoDataModels.ParkingLocationDataModel(void *a1)
{
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t initializeWithCopy for GeoDataModels.ParkingLocationDataModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

void *assignWithCopy for GeoDataModels.ParkingLocationDataModel(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  uint64_t v10 = a2[9];
  uint64_t v11 = a1[9];
  a1[9] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v3;
  return result;
}

uint64_t assignWithTake for GeoDataModels.ParkingLocationDataModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v8;
  swift_bridgeObjectRelease(v9);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoDataModels.ParkingLocationDataModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoDataModels.ParkingLocationDataModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for GeoDataModels.ParkingLocationDataModel()
{
  return &type metadata for GeoDataModels.ParkingLocationDataModel;
}

uint64_t destroy for GeoDataModels.ContactDisambiguationDataModel(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

void *initializeBufferWithCopyOfBuffer for GeoDataModels.ContactDisambiguationDataModel( void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for GeoDataModels.ContactDisambiguationDataModel(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *assignWithTake for GeoDataModels.ContactDisambiguationDataModel(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoDataModels.ContactDisambiguationDataModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoDataModels.ContactDisambiguationDataModel( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for GeoDataModels.TrafficDisambiguationDataModel()
{
  return &type metadata for GeoDataModels.TrafficDisambiguationDataModel;
}

uint64_t destroy for GeoDataModels.WhereAmIDataModel(void *a1)
{
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for GeoDataModels.WhereAmIDataModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

void *assignWithCopy for GeoDataModels.WhereAmIDataModel(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[8] = a2[8];
  a1[9] = a2[9];
  return a1;
}

uint64_t assignWithTake for GeoDataModels.WhereAmIDataModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoDataModels.WhereAmIDataModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoDataModels.WhereAmIDataModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for GeoDataModels.WhereAmIDataModel()
{
  return &type metadata for GeoDataModels.WhereAmIDataModel;
}

void *type metadata accessor for GeoDataModels.CodingKeys()
{
  return &unk_B9360;
}

void *type metadata accessor for GeoDataModels.ContactDisambiguationCodingKeys()
{
  return &unk_B93F0;
}

void *type metadata accessor for GeoDataModels.ParkingLocationCodingKeys()
{
  return &unk_B9480;
}

void *type metadata accessor for GeoDataModels.TrafficDisambiguationCodingKeys()
{
  return &unk_B9510;
}

uint64_t getEnumTagSinglePayload for GeoDataModels.ContactDisambiguationCodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for GeoDataModels.ContactDisambiguationCodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_42B14 + 4 * byte_96878[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_42B34 + 4 * byte_9687D[v4]))();
  }
}

_BYTE *sub_42B14(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

_BYTE *sub_42B34(_BYTE *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_42B3C(_DWORD *result, int a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_42B44(_WORD *result, __int16 a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_42B4C(_WORD *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_42B54(_DWORD *result)
{
  *__n128 result = 0;
  return result;
}

void *type metadata accessor for GeoDataModels.WhereAmICodingKeys()
{
  return &unk_B95A0;
}

uint64_t storeEnumTagSinglePayload for GeoDataModels.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_42BBC + 4 * byte_96887[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_42BF0 + 4 * byte_96882[v4]))();
}

uint64_t sub_42BF0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_42BF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x42C00LL);
  }
  return result;
}

uint64_t sub_42C0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x42C14LL);
  }
  *(_BYTE *)__n128 result = a2 + 3;
  return result;
}

uint64_t sub_42C18(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_42C20(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for GeoDataModels.WhereAmIDataModel.CodingKeys()
{
  return &unk_B9630;
}

void *type metadata accessor for GeoDataModels.TrafficDisambiguationDataModel.CodingKeys()
{
  return &unk_B96C0;
}

void *type metadata accessor for GeoDataModels.ParkingLocationDataModel.CodingKeys()
{
  return &unk_B9750;
}

uint64_t storeEnumTagSinglePayload for GeoDataModels.TrafficDisambiguationDataModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_42CB0 + 4 * byte_96891[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_42CE4 + 4 * byte_9688C[v4]))();
}

uint64_t sub_42CE4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_42CEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x42CF4LL);
  }
  return result;
}

uint64_t sub_42D00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x42D08LL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_42D0C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_42D14(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for GeoDataModels.ContactDisambiguationDataModel.CodingKeys()
{
  return &unk_B97E0;
}

uint64_t lazy protocol witness table accessor for type [GeoContact] and conformance <A> [A]( unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GeoContact]);
    lazy protocol witness table accessor for type GeoContact and conformance GeoContact(a2, a3);
    uint64_t result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t lazy protocol witness table accessor for type GeoContact and conformance GeoContact( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for GeoContact(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t static GeoFeatureManager.shouldEnableAltimeter.getter()
{
  void v2[3] = &type metadata for SiriGeoFeature;
  void v2[4] = lazy protocol witness table accessor for type SiriGeoFeature and conformance SiriGeoFeature();
  LOBYTE(v2[0]) = 1;
  char v0 = isFeatureEnabled(_:)(v2);
  __swift_destroy_boxed_opaque_existential_0Tm(v2);
  return v0 & 1;
}

ValueMetadata *type metadata accessor for GeoFeatureManager()
{
  return &type metadata for GeoFeatureManager;
}

uint64_t FSMFlow.on(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Input(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = &v47[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = *(void *)(a2 - 8);
  __chkstk_darwin();
  uint64_t v13 = &v47[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  __int128 v15 = &v47[-v14];
  __int128 v16 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 40);
  uint64_t v51 = a3;
  uint64_t v56 = v16;
  uint64_t v17 = (os_log_s *)v16(a2, a3);
  uint64_t v18 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v52 = v3;
  uint64_t v55 = v18;
  v18(v15, v3, a2);
  uint64_t v53 = v8;
  uint64_t v19 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v20 = v7;
  uint64_t v57 = a1;
  uint64_t v21 = v19(v10, a1, v7);
  os_log_type_t v22 = static os_log_type_t.default.getter(v21);
  int v23 = v22;
  if (os_log_type_enabled(v17, v22))
  {
    uint64_t v24 = swift_slowAlloc(22LL, -1LL);
    unint64_t v50 = v13;
    uint64_t v25 = v24;
    uint64_t v49 = swift_slowAlloc(64LL, -1LL);
    uint64_t v59 = v49;
    *(_DWORD *)uint64_t v25 = 136315394;
    uint64_t v54 = (void (*)(_BYTE *, uint64_t))(v25 + 4);
    int v48 = v23;
    uint64_t v26 = v51;
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(a2, *(void *)(v51 + 16));
    unint64_t v29 = v28;
    uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
    swift_bridgeObjectRelease(v29);
    uint64_t v54 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
    v54(v15, a2);
    *(_WORD *)(v25 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
    unint64_t v30 = lazy protocol witness table accessor for type Input and conformance Input();
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v20, v30);
    unint64_t v33 = v32;
    uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
    swift_bridgeObjectRelease(v33);
    (*(void (**)(_BYTE *, uint64_t))(v53 + 8))(v10, v20);
    _os_log_impl(&dword_0, v17, (os_log_type_t)v48, "on %s input %s", (uint8_t *)v25, 0x16u);
    uint64_t v34 = v49;
    swift_arrayDestroy(v49, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    uint64_t v35 = v25;
    uint64_t v13 = v50;
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  else
  {

    uint64_t v54 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
    v54(v15, a2);
    (*(void (**)(_BYTE *, uint64_t))(v53 + 8))(v10, v20);
    uint64_t v26 = v51;
  }

  uint64_t v36 = v52;
  char v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v57, a2, v26);
  uint64_t v38 = (os_log_s *)v56(a2, v26);
  uint64_t v39 = v55(v13, v36, a2);
  os_log_type_t v40 = static os_log_type_t.default.getter(v39);
  if (os_log_type_enabled(v38, v40))
  {
    uint64_t v41 = swift_slowAlloc(18LL, -1LL);
    uint64_t v42 = swift_slowAlloc(32LL, -1LL);
    uint64_t v59 = v42;
    *(_DWORD *)uint64_t v41 = 136315394;
    uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter(a2, *(void *)(v26 + 16));
    unint64_t v45 = v44;
    uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
    swift_bridgeObjectRelease(v45);
    v54(v13, a2);
    *(_WORD *)(v41 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 1024;
    LODWORD(v58) = v37 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, (char *)&v58 + 4);
    _os_log_impl(&dword_0, v38, v40, "on exit %s return %{BOOL}d", (uint8_t *)v41, 0x12u);
    swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1LL, -1LL);
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  else
  {

    v54(v13, a2);
  }

  return v37 & 1;
}

uint64_t FSMFlow.execute(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a3 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (os_log_s *)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 40))(v13, v12);
  uint64_t v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a3);
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v14, v16))
  {
    uint64_t v17 = swift_slowAlloc(12LL, -1LL);
    uint64_t v28 = a1;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v29 = a2;
    uint64_t v30 = v4;
    uint64_t v20 = v19;
    uint64_t v32 = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v27 = v18 + 4;
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(a3, *(void *)(a4 + 16));
    unint64_t v23 = v22;
    uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_bridgeObjectRelease(v23);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a3);
    _os_log_impl(&dword_0, v14, v16, "execute %s", v18, 0xCu);
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v24 = v20;
    a2 = v29;
    swift_slowDealloc(v24, -1LL, -1LL);
    uint64_t v25 = v18;
    a1 = v28;
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a3);
  }

  return Flow.deferToExecuteAsync(_:)(a1, a2, a3, *(void *)(a4 + 8));
}

uint64_t FSMFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  v4[5] = v3;
  void v4[3] = a2;
  uint64_t v8 = *(void *)(a2 - 8);
  v4[6] = v8;
  v4[7] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(int **)(a3 + 56);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
  uint64_t v10 = (void *)swift_task_alloc(v9[1]);
  void v4[8] = v10;
  void *v10 = v4;
  v10[1] = FSMFlow.execute();
  return v12(a1, a2, a3);
}

uint64_t FSMFlow.execute()()
{
  return swift_task_switch(FSMFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_s *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v1 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 48);
  int v2 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = (os_log_s *)(*(uint64_t (**)(uint64_t))(*(void *)(v0 + 32) + 40LL))(v1);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v4, v1);
  uint64_t v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v5, v7))
  {
    uint64_t v19 = *(void *)(v0 + 56);
    uint64_t v20 = *(void *)(v0 + 48);
    uint64_t v8 = *(void *)(v0 + 24);
    uint64_t v18 = *(void *)(v0 + 32);
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v21 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter(v8, *(void *)(v18 + 16));
    uint64_t v13 = v12;
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    swift_bridgeObjectRelease(v13);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v8);
    _os_log_impl(&dword_0, v5, v7, "execute return %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 48);
    uint64_t v14 = *(void *)(v0 + 56);
    os_log_type_t v16 = *(void *)(v0 + 24);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }

  swift_task_dealloc(*(void *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t FSMFlow.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v4,  a1,  &protocol requirements base descriptor for Flow,  &associated type descriptor for Flow.ExitValue);
  __chkstk_darwin();
  uint64_t v7 = (char *)v17 - v6;
  uint64_t v8 = swift_getAssociatedTypeWitness( 0LL,  a2,  a1,  &protocol requirements base descriptor for FSMFlow,  &associated type descriptor for FSMFlow.StateType);
  __chkstk_darwin();
  uint64_t v10 = (char *)v17 - v9;
  v17[0] = 0LL;
  v17[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(28LL);
  swift_bridgeObjectRelease(v17[1]);
  strcpy((char *)v17, " flowState: ");
  BYTE5(v17[1]) = 0;
  HIWORD(v17[1]) = -5120;
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  v11._uint64_t countAndFlagsBits = String.init<A>(describing:)(v10, v8);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  v13._object = (void *)0xEC000000203A6575LL;
  v13._uint64_t countAndFlagsBits = 0x6C61567469786520LL;
  String.append(_:)(v13);
  dispatch thunk of Flow.exitValue.getter(a1, v4);
  v14._uint64_t countAndFlagsBits = String.init<A>(describing:)(v7, AssociatedTypeWitness);
  uint64_t v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15);
  return v17[0];
}

uint64_t specialized String.init<A>(describing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of CustomStringConvertible.description.getter(a2, a3);
}

uint64_t TrafficIncidentContinueInAppPunchoutStrategy.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 32, a1);
}

uint64_t TrafficIncidentContinueInAppPunchoutStrategy.__allocating_init(with:)(__int128 *a1)
{
  uint64_t v3 = swift_allocObject(v1, 72LL, 7LL);
  TrafficIncidentContinueInAppPunchoutStrategy.init(with:)(a1);
  return v3;
}

uint64_t TrafficIncidentContinueInAppPunchoutStrategy.init(with:)(__int128 *a1)
{
  *(void *)(v1 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000002CLL,  0x8000000000097600LL);
  uint64_t v3 = type metadata accessor for CATService();
  uint64_t v4 = swift_allocObject(v3, 40LL, 7LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v3);
  *(void *)(v4 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  *(void *)(v4 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v4 + 16) = 1;
  *(void *)(v1 + 24) = v4;
  outlined init with take of CATType(a1, v1 + 32);
  return v1;
}

uint64_t TrafficIncidentContinueInAppPunchoutStrategy.requireUnlock(intentResolutionRecord:)()
{
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  uint64_t IsNavigating = AFNavigationStateIsNavigating([(id)static AssistantProperties.instance currentNavigationState]);
  int v2 = IsNavigating;
  uint64_t v3 = *(os_log_s **)(v0 + 16);
  os_log_type_t v4 = static os_log_type_t.default.getter(IsNavigating);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v11 = v6;
    if (v2) {
      uint64_t v7 = 1702195828LL;
    }
    else {
      uint64_t v7 = 0x65736C6166LL;
    }
    if (v2) {
      unint64_t v8 = 0xE400000000000000LL;
    }
    else {
      unint64_t v8 = 0xE500000000000000LL;
    }
    uint64_t v10 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
    swift_bridgeObjectRelease(v8);
    _os_log_impl(&dword_0, v3, v4, "isNavigating returns %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  return v2 ^ 1u;
}

uint64_t TrafficIncidentContinueInAppPunchoutStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:)( uint64_t a1, uint64_t a2)
{
  v3[34] = a2;
  v3[35] = v2;
  v3[33] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[36] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for TemplatingResult(0LL);
  v3[37] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[38] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[39] = swift_task_alloc(v7);
  v3[40] = swift_task_alloc(v7);
  return swift_task_switch( TrafficIncidentContinueInAppPunchoutStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:),  0LL,  0LL);
}

uint64_t TrafficIncidentContinueInAppPunchoutStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:)()
{
  uint64_t v1 = v0[35];
  type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent,  &OBJC_CLASS___SAIntentGroupLaunchAppWithIntent_ptr);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INReportIncidentIntent, INReportIncidentIntentResponse>);
  uint64_t v3 = IntentResolutionRecord.app.getter();
  uint64_t v4 = (void *)IntentResolutionRecord.intent.getter(v2);
  uint64_t v5 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)(v3, v4, 0LL);
  v0[41] = v5;

  swift_release(v3);
  uint64_t v6 = *(os_log_s **)(v1 + 16);
  id v7 = v5;
  os_log_type_t v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v6, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v36 = swift_slowAlloc(32LL, -1LL);
    uint64_t v38 = v36;
    *(_DWORD *)uint64_t v9 = 136315138;
    id v10 = v7;
    id v11 = [v10 description];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    unint64_t v14 = v13;

    v0[32] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 33);
    swift_bridgeObjectRelease(v14);

    _os_log_impl(&dword_0, v6, v8, "appLaunch command is %s", v9, 0xCu);
    swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v15 = (void *)v0[35];
  os_log_type_t v16 = (void *)IntentResolutionRecord.intent.getter(v2);
  char v17 = specialized static TrafficIncidentUtils.isUpdateIntent(intent:)(v16);

  uint64_t v18 = v15[3];
  uint64_t v19 = v15 + 4;
  if ((v17 & 1) != 0)
  {
    uint64_t v20 = v0 + 17;
    uint64_t v21 = type metadata accessor for TrafficIncident(0LL);
    v0[20] = v21;
    v0[21] = &protocol witness table for TrafficIncident;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v0 + 17);
    swift_storeEnumTagMultiPayload(boxed_opaque_existential_0, v21, 5LL);
    uint64_t v23 = v15[7];
    uint64_t v24 = v15[8];
    __swift_project_boxed_opaque_existential_1(v19, v23);
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 80))(v23, v24);
    v0[42] = v25;
    uint64_t v26 = *(int **)(*(void *)v18 + 112LL);
    char v37 = (int *)((char *)v26 + *v26);
    uint64_t v27 = (void *)swift_task_alloc(v26[1]);
    v0[43] = v27;
    *uint64_t v27 = v0;
    v27[1] = TrafficIncidentContinueInAppPunchoutStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:);
    uint64_t v28 = v0[40];
  }

  else
  {
    uint64_t v20 = v0 + 2;
    uint64_t v29 = type metadata accessor for TrafficIncident(0LL);
    v0[5] = v29;
    v0[6] = &protocol witness table for TrafficIncident;
    uint64_t v30 = __swift_allocate_boxed_opaque_existential_0(v0 + 2);
    swift_storeEnumTagMultiPayload(v30, v29, 4LL);
    uint64_t v31 = v15[7];
    uint64_t v32 = v15[8];
    __swift_project_boxed_opaque_existential_1(v19, v31);
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 80))(v31, v32);
    v0[45] = v25;
    unint64_t v33 = *(int **)(*(void *)v18 + 112LL);
    char v37 = (int *)((char *)v33 + *v33);
    uint64_t v34 = (void *)swift_task_alloc(v33[1]);
    v0[46] = v34;
    *uint64_t v34 = v0;
    v34[1] = TrafficIncidentContinueInAppPunchoutStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:);
    uint64_t v28 = v0[39];
  }

  return ((uint64_t (*)(uint64_t, void *, uint64_t))v37)(v28, v20, v25);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 336);
  uint64_t v3 = *(void *)(*v1 + 344);
  *(void *)(*v1 + 35__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = TrafficIncidentContinueInAppPunchoutStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 136));
    uint64_t v5 = TrafficIncidentContinueInAppPunchoutStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:);
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void **)(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 304);
  os_log_type_t v16 = *(void *)(v0 + 296);
  uint64_t v4 = *(void **)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 288);
  uint64_t v6 = *(void **)(v0 + 264);
  id v7 = v4[7];
  os_log_type_t v8 = v4[8];
  __swift_project_boxed_opaque_existential_1(v4 + 4, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  uint64_t v9 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v5, 1LL, 1LL, v9);
  id v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  id v11 = swift_allocObject(v10, 40LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_95900;
  *(void *)(v11 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v2;
  char v17 = v11;
  specialized Array._endMutation()(v11);
  *(void *)(v0 + 248) = 0LL;
  *(_OWORD *)(v0 + 23__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 216) = 0u;
  uint64_t v12 = v2;
  static TrafficIncidentUtils.sendCompletionViewOutput(result:snippets:device:listenAfterSpeaking:ttsEnabled:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v1,  (uint8_t *)_swiftEmptyArrayStorage,  v0 + 176,  0,  0,  1,  v5,  v17,  v6,  v0 + 216);
  swift_bridgeObjectRelease(v17);

  outlined destroy of (label: String?, value: Any)?( v0 + 216,  &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (label: String?, value: Any)?( v5,  &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 176));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v16);
  unint64_t v13 = *(void *)(v0 + 312);
  unint64_t v14 = *(void *)(v0 + 288);
  swift_task_dealloc(*(void *)(v0 + 320));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 360);
  uint64_t v3 = *(void *)(*v1 + 368);
  *(void *)(*v1 + 376) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = TrafficIncidentContinueInAppPunchoutStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 16));
    uint64_t v5 = TrafficIncidentContinueInAppPunchoutStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:);
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v1 = *(void **)(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 288);
  os_log_type_t v16 = *(void *)(v0 + 296);
  uint64_t v5 = *(void **)(v0 + 280);
  uint64_t v6 = *(void **)(v0 + 264);
  id v7 = v5[7];
  os_log_type_t v8 = v5[8];
  __swift_project_boxed_opaque_existential_1(v5 + 4, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  uint64_t v9 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v4, 1LL, 1LL, v9);
  id v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  id v11 = swift_allocObject(v10, 40LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_95900;
  *(void *)(v11 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v1;
  char v17 = v11;
  specialized Array._endMutation()(v11);
  *(void *)(v0 + 128) = 0LL;
  *(_OWORD *)(v0 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  uint64_t v12 = v1;
  static TrafficIncidentUtils.sendCompletionViewOutput(result:snippets:device:listenAfterSpeaking:ttsEnabled:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v2,  (uint8_t *)_swiftEmptyArrayStorage,  v0 + 56,  0,  0,  1,  v4,  v17,  v6,  v0 + 96);
  swift_bridgeObjectRelease(v17);

  outlined destroy of (label: String?, value: Any)?( v0 + 96,  &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (label: String?, value: Any)?( v4,  &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v16);
  unint64_t v13 = *(void *)(v0 + 312);
  unint64_t v14 = *(void *)(v0 + 288);
  swift_task_dealloc(*(void *)(v0 + 320));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 136));
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 288);
  swift_task_dealloc(*(void *)(v0 + 320));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 16));
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 288);
  swift_task_dealloc(*(void *)(v0 + 320));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TrafficIncidentContinueInAppPunchoutStrategy.makePromptForDeviceUnlock()(uint64_t a1)
{
  v2[22] = a1;
  v2[23] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  _BYTE v2[24] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for TemplatingResult(0LL);
  v2[25] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[26] = v5;
  v2[27] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(TrafficIncidentContinueInAppPunchoutStrategy.makePromptForDeviceUnlock(), 0LL, 0LL);
}

uint64_t TrafficIncidentContinueInAppPunchoutStrategy.makePromptForDeviceUnlock()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (void *)v8[23];
  uint64_t v10 = static os_log_type_t.info.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  os_log(_:dso:log:_:_:)(v10, &dword_0, v9[2], "makePromptForDeviceUnlock", 25LL, 2LL, _swiftEmptyArrayStorage);
  uint64_t v11 = v9[3];
  v8[5] = &type metadata for Common;
  v8[6] = &protocol witness table for Common;
  v8[2] = 1LL;
  uint64_t v12 = v9[7];
  uint64_t v13 = v9[8];
  __swift_project_boxed_opaque_existential_1(v9 + 4, v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 80))(v12, v13);
  v8[28] = v14;
  uint64_t v15 = *(int **)(*(void *)v11 + 112LL);
  uint64_t v18 = (int *)((char *)v15 + *v15);
  os_log_type_t v16 = (void *)swift_task_alloc(v15[1]);
  v8[29] = v16;
  *os_log_type_t v16 = v8;
  v16[1] = TrafficIncidentContinueInAppPunchoutStrategy.makePromptForDeviceUnlock();
  return ((uint64_t (*)(void, void *, uint64_t))v18)(v8[27], v8 + 2, v14);
}

uint64_t TrafficIncidentContinueInAppPunchoutStrategy.makePromptForDeviceUnlock()()
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 224);
  uint64_t v3 = *(void *)(*v1 + 232);
  *(void *)(*v1 + 24specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = TrafficIncidentContinueInAppPunchoutStrategy.makePromptForDeviceUnlock();
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 16));
    uint64_t v5 = TrafficIncidentContinueInAppPunchoutStrategy.makePromptForDeviceUnlock();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v14 = *(void *)(v0 + 216);
  uint64_t v15 = *(void *)(v0 + 208);
  uint64_t v1 = *(void *)(v0 + 192);
  os_log_type_t v16 = *(void *)(v0 + 200);
  uint64_t v3 = *(void **)(v0 + 176);
  uint64_t v2 = *(void **)(v0 + 184);
  uint64_t v5 = v2[7];
  uint64_t v4 = v2[8];
  __swift_project_boxed_opaque_existential_1(v2 + 4, v5);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v5, v4);
  uint64_t v6 = v2[7];
  id v7 = v2[8];
  __swift_project_boxed_opaque_existential_1(v2 + 4, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  os_log_type_t v8 = *(void *)(v0 + 120);
  uint64_t v9 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v8);
  uint64_t v10 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v8, v9);
  uint64_t v11 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v1, 1LL, 1LL, v11);
  uint64_t v12 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v0 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0u;
  *(void *)(v0 + 168) = 0LL;
  *(_OWORD *)(v0 + 136) = 0u;
  v3[3] = v12;
  v3[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_0(v3);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v14,  v0 + 56,  v10 & 1,  _swiftEmptyArrayStorage,  0LL,  1LL,  v1,  _swiftEmptyArrayStorage,  v0 + 136);
  outlined destroy of (label: String?, value: Any)?( v0 + 136,  &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (label: String?, value: Any)?( v1,  &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 96));
  swift_task_dealloc(v14);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 192);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TrafficIncidentContinueInAppPunchoutStrategy.deinit()
{
  swift_release(*(void *)(v0 + 24));
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 32));
  return v0;
}

uint64_t TrafficIncidentContinueInAppPunchoutStrategy.__deallocating_deinit()
{
  swift_release(*(void *)(v0 + 24));
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 32));
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t protocol witness for ContinueInAppAutoPunchOutFlowStrategyAsync.requireUnlock(intentResolutionRecord:) in conformance TrafficIncidentContinueInAppPunchoutStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112LL))() & 1;
}

uint64_t protocol witness for ContinueInAppAutoPunchOutFlowStrategyAsync.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:) in conformance TrafficIncidentContinueInAppPunchoutStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(**(void **)v2 + 120LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  id v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *id v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v9(a1, a2);
}

uint64_t protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance TrafficIncidentContinueInAppPunchoutStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_log_type_t v8 = (void *)swift_task_alloc(async function pointer to ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentContinueInAppPunchoutStrategy();
  *os_log_type_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for UnlockDeviceFlowStrategyAsync.makePromptForDeviceUnlock() in conformance TrafficIncidentContinueInAppPunchoutStrategy( uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 128LL);
  id v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v7(a1);
}

uint64_t base witness table accessor for ContinueInAppDialogFlowStrategyAsync in TrafficIncidentContinueInAppPunchoutStrategy()
{
  return lazy protocol witness table accessor for type TrafficIncidentContinueInAppPunchoutStrategy and conformance TrafficIncidentContinueInAppPunchoutStrategy( &lazy protocol witness table cache variable for type TrafficIncidentContinueInAppPunchoutStrategy and conformance TrafficIncidentContinueInAppPunchoutStrategy,  (uint64_t)&protocol conformance descriptor for TrafficIncidentContinueInAppPunchoutStrategy);
}

uint64_t type metadata accessor for TrafficIncidentContinueInAppPunchoutStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin44TrafficIncidentContinueInAppPunchoutStrategy);
}

uint64_t base witness table accessor for UnlockDeviceFlowStrategyAsync in TrafficIncidentContinueInAppPunchoutStrategy()
{
  return lazy protocol witness table accessor for type TrafficIncidentContinueInAppPunchoutStrategy and conformance TrafficIncidentContinueInAppPunchoutStrategy( &lazy protocol witness table cache variable for type TrafficIncidentContinueInAppPunchoutStrategy and conformance TrafficIncidentContinueInAppPunchoutStrategy,  (uint64_t)&protocol conformance descriptor for TrafficIncidentContinueInAppPunchoutStrategy);
}

uint64_t base witness table accessor for ContinueInAppFlowStrategy in TrafficIncidentContinueInAppPunchoutStrategy()
{
  return lazy protocol witness table accessor for type TrafficIncidentContinueInAppPunchoutStrategy and conformance TrafficIncidentContinueInAppPunchoutStrategy( &lazy protocol witness table cache variable for type TrafficIncidentContinueInAppPunchoutStrategy and conformance TrafficIncidentContinueInAppPunchoutStrategy,  (uint64_t)&protocol conformance descriptor for TrafficIncidentContinueInAppPunchoutStrategy);
}

uint64_t lazy protocol witness table accessor for type TrafficIncidentContinueInAppPunchoutStrategy and conformance TrafficIncidentContinueInAppPunchoutStrategy( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for TrafficIncidentContinueInAppPunchoutStrategy();
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t AnswerAltitudeFlow.flowState.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  outlined copy of AnswerAltitudeFlow.State(v1, *(_BYTE *)(v0 + 40));
  return v1;
}

uint64_t outlined copy of AnswerAltitudeFlow.State(uint64_t result, char a2)
{
  if (a2 == 1) {
    return swift_errorRetain(result);
  }
  return result;
}

uint64_t AnswerAltitudeFlow.flowState.setter(uint64_t a1, char a2)
{
  uint64_t v5 = *(void *)(v2 + 32);
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a1;
  char v6 = *(_BYTE *)(v2 + 40);
  *(_BYTE *)(v2 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = a2;
  return outlined consume of AnswerAltitudeFlow.State(v5, v6);
}

uint64_t outlined consume of AnswerAltitudeFlow.State(uint64_t result, char a2)
{
  if (a2 == 1) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t AnswerAltitudeFlow.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 48;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return outlined init with copy of DeviceState(v3, a1);
}

uint64_t AnswerAltitudeFlow.flowHelper.setter(__int128 *a1)
{
  uint64_t v3 = (void *)(v1 + 48);
  swift_beginAccess(v3, v5, 33LL, 0LL);
  __swift_destroy_boxed_opaque_existential_0Tm(v3);
  outlined init with take of CATType(a1, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t (*AnswerAltitudeFlow.flowHelper.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t AnswerAltitudeFlow.__allocating_init(with:)(void *a1)
{
  uint64_t v3 = swift_allocObject(v1, 88LL, 7LL);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v4);
  __chkstk_darwin();
  id v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v8 + 16))(v7);
  uint64_t v9 = specialized AnswerAltitudeFlow.init(with:)((uint64_t)v7, v3, v4, v5);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v9;
}

uint64_t AnswerAltitudeFlow.init(with:)(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v3);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v7 + 16))(v6);
  uint64_t v8 = specialized AnswerAltitudeFlow.init(with:)((uint64_t)v6, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v8;
}

uint64_t AnswerAltitudeFlow.__allocating_init()()
{
  void v2[3] = &type metadata for FlowHelperImpl;
  void v2[4] = &protocol witness table for FlowHelperImpl;
  v2[0] = swift_allocObject(&unk_B9990, 192LL, 7LL);
  FlowHelperImpl.init()((void *)(v2[0] + 16LL));
  return (*(uint64_t (**)(void *))(v0 + 160))(v2);
}

uint64_t AnswerAltitudeFlow.onInput(input:)()
{
  uint64_t v1 = static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)(v1, &dword_0, *(void *)(v0 + 16), "onInput altitude", 16LL, 2LL, &_swiftEmptyArrayStorage);
  return 1LL;
}

uint64_t AnswerAltitudeFlow.executeState()(uint64_t a1)
{
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a1;
  *(void *)(v2 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v1;
  return swift_task_switch(AnswerAltitudeFlow.executeState(), 0LL, 0LL);
}

uint64_t AnswerAltitudeFlow.executeState()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 40) + 112LL))();
  uint64_t v3 = v1;
  *(void *)(v0 + 48) = v1;
  if (v2)
  {
    if (v2 != 1) {
      __asm { BR              X9 }
    }

    uint64_t v4 = *(void *)(v0 + 40);
    os_log_type_t v5 = static os_log_type_t.default.getter(v1);
    uint64_t v6 = *(os_log_s **)(v4 + 16);
    os_log_type_t v7 = v5;
    if (os_log_type_enabled(v6, v5))
    {
      outlined copy of AnswerAltitudeFlow.State(v3, 1);
      outlined copy of AnswerAltitudeFlow.State(v3, 1);
      uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v9 = swift_slowAlloc(32LL, -1LL);
      uint64_t v22 = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      *(void *)(v0 + 16) = v3;
      swift_errorRetain(v3);
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v11 = String.init<A>(describing:)(v0 + 16, v10);
      unint64_t v13 = v12;
      *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
      swift_bridgeObjectRelease(v13);
      outlined consume of AnswerAltitudeFlow.State(v3, 1);
      outlined consume of AnswerAltitudeFlow.State(v3, 1);
      _os_log_impl(&dword_0, v6, v7, "AnswerAltitudeFlow execute request unsupported with err: %s", v8, 0xCu);
      swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1LL, -1LL);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v14 = *(int **)(**(void **)(v0 + 40) + 200LL);
    uint64_t v20 = (uint64_t (*)(void))((char *)v14 + *v14);
    uint64_t v15 = (void *)swift_task_alloc(v14[1]);
    *(void *)(v0 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v15;
    void *v15 = v0;
    v15[1] = AnswerAltitudeFlow.executeState();
    return v20(*(void *)(v0 + 32));
  }

  else
  {
    double v16 = *(double *)&v1;
    char v17 = *(int **)(**(void **)(v0 + 40) + 208LL);
    uint64_t v21 = (uint64_t (*)(void, double))((char *)v17 + *v17);
    uint64_t v18 = (void *)swift_task_alloc(v17[1]);
    *(void *)(v0 + 56) = v18;
    *uint64_t v18 = v0;
    v18[1] = AnswerETAFlow.executeState();
    return v21(*(void *)(v0 + 32), v16);
  }

{
  uint64_t *v0;
  uint64_t v2;
  char v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 64));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 80LL));
  return swift_task_switch(AnswerAltitudeFlow.executeState(), 0LL, 0LL);
}

{
  uint64_t v0;
  outlined consume of AnswerAltitudeFlow.State(*(void *)(v0 + 48), 1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_45B1C()
{
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v2 = ((uint64_t (*)(void))static os_log_type_t.info.getter)();
  os_log(_:dso:log:_:_:)( v2,  &dword_0,  v1[2],  "Altimeter not available on OS, falling back to location based altitude",  70LL,  2LL,  &_swiftEmptyArrayStorage);
  (*(void (**)(void, uint64_t))(*v1 + 120LL))(0LL, 2LL);
  ((void (*)(void))static ExecuteResponse.ongoing(requireInput:))(0LL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AnswerAltitudeFlow.fetchLocationCheck()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch(AnswerAltitudeFlow.fetchLocationCheck(), 0LL, 0LL);
}

uint64_t AnswerAltitudeFlow.fetchLocationCheck()()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AnswerAltitudeFlow.fetchLocation()(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v1;
  return swift_task_switch(AnswerAltitudeFlow.fetchLocation(), 0LL, 0LL);
}

uint64_t AnswerAltitudeFlow.fetchLocation()()
{
  uint64_t v1 = *(void *)(v0 + 32);
  (*(void (**)(__int128 *__return_ptr))(*(void *)v1 + 136LL))(v5);
  uint64_t Flow = type metadata accessor for LocationFetchFlow();
  swift_allocObject(Flow, 89LL, 7LL);
  *(void *)(v0 + 16) = LocationFetchFlow.init(flowHelper:requiredAccess:)(v5, 2);
  uint64_t v3 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type LocationFetchFlow and conformance LocationFetchFlow,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for LocationFetchFlow,  (uint64_t)&protocol conformance descriptor for LocationFetchFlow);
  swift_retain(v1);
  static ExecuteResponse.ongoing<A>(next:childCompletion:)( v0 + 16,  partial apply for closure #1 in AnswerAltitudeFlow.fetchLocation(),  v1,  Flow,  v3);
  swift_release(v1);
  swift_release(*(void *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in AnswerAltitudeFlow.fetchLocation()(uint64_t a1)
{
  __asm { BR              X10 }

void sub_45E40()
{
  id v2 = v0;
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  uint64_t v4 = (os_log_s *)v1[2];
  os_log_type_t v5 = v3;
  if (os_log_type_enabled(v4, v3))
  {
    outlined copy of LocationFetchFlow.ExitValue(v0, 0);
    outlined copy of LocationFetchFlow.ExitValue(v0, 0);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    v17[0] = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = ((uint64_t (*)(id))Double.description.getter)([v2 verticalAccuracy]);
    unint64_t v10 = v9;
    uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, v17);
    swift_bridgeObjectRelease(v10);
    outlined consume of LocationFetchFlow.ExitValue(v0, 0);
    outlined consume of LocationFetchFlow.ExitValue(v0, 0);
    _os_log_impl(&dword_0, v4, v5, "altitude accuracy: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  [v2 verticalAccuracy];
  if (v11 >= 0.0)
  {
    [v2 altitude];
    (*(void (**)(uint64_t, void))(*v1 + 120LL))(v15, 0LL);
  }

  else
  {
    unint64_t v12 = lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v13 = swift_allocError(&type metadata for Errors, v12, 0LL, 0LL);
    *(void *)uint64_t v14 = 0xD00000000000001FLL;
    *(void *)(v14 + 8) = 0x800000000009D6F0LL;
    *(_BYTE *)(v14 + 16) = 2;
    (*(void (**)(uint64_t, uint64_t))(*v1 + 120LL))(v13, 1LL);
  }

  outlined consume of LocationFetchFlow.ExitValue(v0, 0);
}

uint64_t AnswerAltitudeFlow.errorDialog()(uint64_t a1)
{
  v2[23] = a1;
  _BYTE v2[24] = v1;
  uint64_t v3 = type metadata accessor for TemplatingResult(0LL);
  v2[25] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[26] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[27] = v5;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[28] = swift_task_alloc(v6);
  v2[29] = swift_task_alloc(v6);
  return swift_task_switch(AnswerAltitudeFlow.errorDialog(), 0LL, 0LL);
}

uint64_t AnswerAltitudeFlow.errorDialog()()
{
  uint64_t v1 = (void *)v0[24];
  uint64_t v2 = v1[3];
  v0[5] = &type metadata for Compass;
  v0[6] = &protocol witness table for Compass;
  v0[2] = 0LL;
  uint64_t v3 = *(void (**)(void))(*v1 + 136LL);
  v0[30] = v3;
  v3();
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 80))(v4, v5);
  v0[31] = v6;
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 7);
  uint64_t v7 = *(int **)(*(void *)v2 + 112LL);
  unint64_t v10 = (int *)((char *)v7 + *v7);
  uint64_t v8 = (void *)swift_task_alloc(v7[1]);
  v0[32] = v8;
  *uint64_t v8 = v0;
  v8[1] = AnswerAltitudeFlow.errorDialog();
  return ((uint64_t (*)(void, void *, uint64_t))v10)(v0[29], v0 + 2, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 248);
  uint64_t v3 = *(void *)(*v1 + 256);
  *(void *)(*v1 + 264) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = AnswerAltitudeFlow.errorDialog();
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 16));
    uint64_t v5 = AnswerAltitudeFlow.errorDialog();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void v17[5];
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v16 = *(void *)(v0 + 216);
  (*(void (**)(void))(v0 + 240))();
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 104))(v17, v5, v6);
  uint64_t v7 = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  outlined init with copy of DeviceState(v0 + 96, v0 + 136);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  unint64_t v9 = (v8 + 16) & ~v8;
  unint64_t v10 = (v16 + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  double v11 = swift_allocObject(&unk_B99B8, v10 + 40, v8 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v11 + v9, v2, v3);
  outlined init with take of CATType((__int128 *)(v0 + 136), v11 + v10);
  unint64_t v12 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v17,  &async function pointer to partial apply for closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:),  v11);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 96));
  *(void *)(v0 + 176) = v13;
  static ExecuteResponse.complete<A>(next:)(v0 + 176, v12, &protocol witness table for SimpleOutputFlowAsync);
  swift_release(v13);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  uint64_t v14 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void **)(v0 + 192);
  uint64_t v3 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 16));
  uint64_t v4 = static os_log_type_t.error.getter(v3);
  os_log(_:dso:log:_:_:)( v4,  &dword_0,  v2[2],  "Dialog Engine error while building fetchAlitutdeError",  53LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*v2 + 120LL);
  swift_errorRetain(v1);
  uint64_t v6 = v5(v1, 1LL);
  static ExecuteResponse.complete()(v6);
  swift_errorRelease(v1);
  uint64_t v7 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AnswerAltitudeFlow.handle(altitude:)(uint64_t a1, double a2)
{
  *(void *)(v3 + 20specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v2;
  *(double *)(v3 + 19__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a2;
  *(void *)(v3 + 184) = a1;
  uint64_t v4 = type metadata accessor for TemplatingResult(0LL);
  *(void *)(v3 + 208) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 216) = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  *(void *)(v3 + 224) = v6;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 23__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = swift_task_alloc(v7);
  *(void *)(v3 + 24specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = swift_task_alloc(v7);
  return swift_task_switch(AnswerAltitudeFlow.handle(altitude:), 0LL, 0LL);
}

uint64_t AnswerAltitudeFlow.handle(altitude:)(uint64_t a1)
{
  uint64_t v2 = (void *)*((void *)v1 + 25);
  double v3 = v1[24];
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  uint64_t v5 = v2[2];
  *((void *)v1 + 31) = v5;
  os_log(_:dso:log:_:_:)(v4, &dword_0, v5, "handleDialog", 12LL, 2LL, _swiftEmptyArrayStorage);
  uint64_t v6 = v2[3];
  uint64_t v7 = AnswerAltitudeFlow.convert(altitudeMeters:)(v3);
  *((void *)v1 + 5) = &type metadata for Compass;
  *((void *)v1 + 6) = &protocol witness table for Compass;
  *((void *)v1 + __swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v7;
  uint64_t v8 = *(void (**)(void))(*v2 + 136LL);
  *((void *)v1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v8;
  v8();
  uint64_t v9 = *((void *)v1 + 10);
  uint64_t v10 = *((void *)v1 + 11);
  __swift_project_boxed_opaque_existential_1((void *)v1 + 7, v9);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 80))(v9, v10);
  *((void *)v1 + 33) = v11;
  __swift_destroy_boxed_opaque_existential_0Tm((void *)v1 + 7);
  unint64_t v12 = *(int **)(*(void *)v6 + 112LL);
  uint64_t v15 = (int *)((char *)v12 + *v12);
  uint64_t v13 = (double **)swift_task_alloc(v12[1]);
  *((void *)v1 + 34) = v13;
  *uint64_t v13 = v1;
  v13[1] = (double *)AnswerAltitudeFlow.handle(altitude:);
  return ((uint64_t (*)(void, double *, uint64_t))v15)(*((void *)v1 + 30), v1 + 2, v11);
}

uint64_t AnswerAltitudeFlow.handle(altitude:)()
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 264);
  uint64_t v3 = *(void *)(*v1 + 272);
  *(void *)(*v1 + 28specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = AnswerAltitudeFlow.handle(altitude:);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 16));
    uint64_t v5 = AnswerAltitudeFlow.handle(altitude:);
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void v17[5];
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v16 = *(void *)(v0 + 224);
  (*(void (**)(void))(v0 + 256))();
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 104))(v17, v5, v6);
  uint64_t v7 = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  outlined init with copy of DeviceState(v0 + 96, v0 + 136);
  uint64_t v8 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = (v16 + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = swift_allocObject(&unk_B99E0, v10 + 40, v8 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v11 + v9, v2, v4);
  outlined init with take of CATType((__int128 *)(v0 + 136), v11 + v10);
  unint64_t v12 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v17,  &closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)partial apply,  v11);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 96));
  *(void *)(v0 + 176) = v13;
  static ExecuteResponse.complete<A>(next:)(v0 + 176, v12, &protocol witness table for SimpleOutputFlowAsync);
  swift_release(v13);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v4);
  uint64_t v14 = *(void *)(v0 + 232);
  swift_task_dealloc(*(void *)(v0 + 240));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 16));
  uint64_t v5 = static os_log_type_t.error.getter(v4);
  os_log(_:dso:log:_:_:)( v5,  &dword_0,  v2,  "Dialog Engine error when building answerAtltitude experience",  60LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)v3 + 120LL);
  swift_errorRetain(v1);
  v6(v1, 1LL);
  static ExecuteResponse.ongoing(requireInput:)(0LL);
  swift_errorRelease(v1);
  uint64_t v7 = *(void *)(v0 + 232);
  swift_task_dealloc(*(void *)(v0 + 240));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AnswerAltitudeFlow.convert(altitudeMeters:)(double a1)
{
  uint64_t v91 = (char *)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Locale.MeasurementSystem(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  os_log_type_t v88 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v83 - v7;
  uint64_t v9 = type metadata accessor for Locale(0LL);
  uint64_t v86 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v85 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  uint64_t v89 = *(v11 - 1);
  id v90 = v11;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (void *)objc_opt_self(&OBJC_CLASS___NSUnitLength);
  id v15 = [v14 meters];
  uint64_t v16 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for NSUnitLength,  &OBJC_CLASS___NSUnitLength_ptr);
  Measurement.init(value:unit:)(v15, v16, a1);
  id v17 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v17 valueForKey:v18];

  uint64_t v84 = v5;
  uint64_t v87 = v9;
  if (v19)
  {
    _bridgeAnyObjectToAny(_:)(&v95, v19);
    swift_unknownObjectRelease(v19);
  }

  else
  {
    __int128 v95 = 0u;
    __int128 v96 = 0u;
  }

  uint64_t v20 = outlined init with take of Any?((uint64_t)&v95, (uint64_t)v97);
  os_log_type_t v21 = static os_log_type_t.default.getter(v20);
  uint64_t v22 = *(os_log_s **)(v1 + 16);
  outlined init with copy of Any?((uint64_t)v97, (uint64_t)&v95);
  if (os_log_type_enabled(v22, v21))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    uint64_t v94 = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    uint64_t v83 = v23 + 4;
    outlined init with copy of Any?((uint64_t)&v95, (uint64_t)&v92);
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    uint64_t v26 = String.init<A>(describing:)(&v92, v25);
    uint64_t v27 = v4;
    uint64_t v28 = v8;
    uint64_t v29 = v14;
    uint64_t v30 = v22;
    uint64_t v31 = v13;
    unint64_t v33 = v32;
    uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v32, &v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93);
    unint64_t v34 = v33;
    uint64_t v13 = v31;
    uint64_t v22 = v30;
    uint64_t v14 = v29;
    uint64_t v8 = v28;
    uint64_t v4 = v27;
    swift_bridgeObjectRelease(v34);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v95,  &demangling cache variable for type metadata for Any?);
    _os_log_impl(&dword_0, v22, v21, "%s", v23, 0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)&v95,  &demangling cache variable for type metadata for Any?);
  }

  id v35 = v90;
  uint64_t v36 = v88;
  outlined init with copy of Any?((uint64_t)v97, (uint64_t)&v95);
  if (!*((void *)&v96 + 1))
  {
    uint64_t v37 = outlined destroy of (label: String?, value: Any)?( (uint64_t)&v95,  &demangling cache variable for type metadata for Any?);
    goto LABEL_15;
  }

  uint64_t v37 = swift_dynamicCast(&v92, &v95, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  if ((v37 & 1) == 0)
  {
LABEL_15:
    uint64_t v45 = v84;
    uint64_t v46 = v85;
    uint64_t v47 = static Locale.current.getter(v37);
    Locale.measurementSystem.getter(v47);
    uint64_t v48 = (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v46, v87);
    static Locale.MeasurementSystem.us.getter(v48);
    uint64_t v49 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Locale.MeasurementSystem,  (uint64_t)&protocol conformance descriptor for Locale.MeasurementSystem);
    LOBYTE(v46) = dispatch thunk of static Equatable.== infix(_:_:)(v36, v8, v4, v49);
    unint64_t v50 = *(uint64_t (**)(char *, uint64_t))(v45 + 8);
    uint64_t v51 = v50(v36, v4);
    if ((v46 & 1) != 0)
    {
      v50(v8, v4);
    }

    else
    {
      static Locale.MeasurementSystem.uk.getter(v51);
      char v52 = dispatch thunk of static Equatable.== infix(_:_:)(v36, v8, v4, v49);
      v50(v36, v4);
      uint64_t v53 = v50(v8, v4);
      if ((v52 & 1) == 0)
      {
        uint64_t v54 = 0x73726574656DLL;
        uint64_t v56 = static os_log_type_t.default.getter(v53);
        os_log(_:dso:log:_:_:)( v56,  &dword_0,  v22,  "Units already in meters no conversion. ",  39LL,  2LL,  _swiftEmptyArrayStorage);
        unint64_t v57 = 0xE600000000000000LL;
        goto LABEL_23;
      }
    }

    uint64_t v54 = 1952802150LL;
    id v55 = [v14 feet];
    goto LABEL_22;
  }

  id v90 = v14;
  uint64_t v38 = v22;
  uint64_t v40 = v92;
  unint64_t v39 = v93[0];
  os_log_type_t v41 = static os_log_type_t.default.getter(v37);
  uint64_t v42 = v38;
  if (os_log_type_enabled(v38, v41))
  {
    swift_bridgeObjectRetain_n(v39, 2LL);
    uint64_t v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v44 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 v95 = v44;
    *(_DWORD *)uint64_t v43 = 136315138;
    swift_bridgeObjectRetain(v39);
    uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v39, (uint64_t *)&v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93);
    swift_bridgeObjectRelease_n(v39, 3LL);
    _os_log_impl(&dword_0, v42, v41, "%s", v43, 0xCu);
    swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1LL, -1LL);
    swift_slowDealloc(v43, -1LL, -1LL);
  }

  if (v40 == 0x736568636E49LL && v39 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    uint64_t v22 = v42;
LABEL_21:
    uint64_t v54 = 1952802150LL;
    id v55 = [v90 feet];
LABEL_22:
    id v59 = v55;
    Measurement<>.convert(to:)();

    unint64_t v57 = 0xE400000000000000LL;
    goto LABEL_23;
  }

  unint64_t v57 = 0xE600000000000000LL;
  char v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v39, 0x736568636E49LL, 0xE600000000000000LL, 0LL);
  swift_bridgeObjectRelease(v39);
  uint64_t v22 = v42;
  if ((v58 & 1) != 0) {
    goto LABEL_21;
  }
  uint64_t v54 = 0x73726574656DLL;
LABEL_23:
  double v60 = Measurement.value.getter(v35);
  uint64_t v61 = Measurement.value.setter(v35, round(v60));
  os_log_type_t v62 = static os_log_type_t.default.getter(v61);
  if (os_log_type_enabled(v22, v62))
  {
    uint64_t v63 = v22;
    unint64_t v64 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v65 = swift_slowAlloc(32LL, -1LL);
    id v90 = (id)v54;
    uint64_t v66 = v65;
    uint64_t v92 = v65;
    *(_DWORD *)unint64_t v64 = 136315138;
    swift_beginAccess(v13, &v95, 32LL, 0LL);
    double v67 = Measurement.value.getter(v35);
    uint64_t v68 = swift_endAccess(&v95);
    uint64_t v69 = Double.description.getter(v68, v67);
    unint64_t v71 = v70;
    *(void *)&__int128 v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, &v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, (char *)&v95 + 8);
    swift_bridgeObjectRelease(v71);
    _os_log_impl(&dword_0, v63, v62, "altitude: %s", v64, 0xCu);
    swift_arrayDestroy(v66, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v72 = v66;
    uint64_t v54 = (uint64_t)v90;
    swift_slowDealloc(v72, -1LL, -1LL);
    swift_slowDealloc(v64, -1LL, -1LL);
  }

  uint64_t v73 = type metadata accessor for DialogLength.Builder(0LL);
  swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
  uint64_t v74 = DialogLength.Builder.init()();
  swift_beginAccess(v13, &v95, 32LL, 0LL);
  double v75 = Measurement.value.getter(v35);
  swift_endAccess(&v95);
  uint64_t v76 = dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)(*(void *)&v75, 0LL);
  swift_release(v74);
  uint64_t v77 = (uint64_t)v91;
  String.toSpeakableString.getter(v54, v57);
  swift_bridgeObjectRelease(v57);
  uint64_t v78 = type metadata accessor for SpeakableString(0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56LL))(v77, 0LL, 1LL, v78);
  uint64_t v79 = dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)(v77);
  swift_release(v76);
  uint64_t v80 = outlined destroy of (label: String?, value: Any)?( v77,  &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v81 = dispatch thunk of DialogAbstractMeasurement.Builder.build()(v80);
  swift_release(v79);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v97, &demangling cache variable for type metadata for Any?);
  (*(void (**)(char *, id))(v89 + 8))(v13, v35);
  return v81;
}

uint64_t AnswerAltitudeFlow.deinit()
{
  swift_release(*(void *)(v0 + 24));
  outlined consume of AnswerAltitudeFlow.State(*(void *)(v0 + 32), *(_BYTE *)(v0 + 40));
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 48));
  return v0;
}

uint64_t AnswerAltitudeFlow.__deallocating_deinit()
{
  swift_release(*(void *)(v0 + 24));
  outlined consume of AnswerAltitudeFlow.State(*(void *)(v0 + 32), *(_BYTE *)(v0 + 40));
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 48));
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t protocol witness for FSMFlow.flowState.getter in conformance AnswerAltitudeFlow@<X0>( uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 112LL))();
  *(void *)a1 = result;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t protocol witness for FSMFlow.onInput(input:) in conformance AnswerAltitudeFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168LL))() & 1;
}

uint64_t protocol witness for FSMFlow.executeState() in conformance AnswerAltitudeFlow(uint64_t a1)
{
  char v4 = *(int **)(**(void **)v1 + 176LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v7(a1);
}

uint64_t protocol witness for Flow.on(input:) in conformance AnswerAltitudeFlow(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AnswerAltitudeFlow, a2);
  return FSMFlow.on(input:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance AnswerAltitudeFlow( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AnswerAltitudeFlow, a3);
  return FSMFlow.execute(completion:)(a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for Flow.execute() in conformance AnswerAltitudeFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_C6814);
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AnswerAltitudeFlow, a2);
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return FSMFlow.execute()(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance AnswerAltitudeFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for AnswerAltitudeFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnswerAltitudeFlow( uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AnswerAltitudeFlow, a1);
  return FSMFlow.description.getter(a1, WitnessTable);
}

uint64_t specialized AnswerAltitudeFlow.init(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[3] = a3;
  v14[4] = a4;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v14);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32LL))(boxed_opaque_existential_0, a1, a3);
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  *(void *)(a2 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000012LL,  0x8000000000097830LL);
  uint64_t v8 = type metadata accessor for CATService();
  uint64_t v9 = swift_allocObject(v8, 40LL, 7LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v8);
  *(void *)(v9 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  *(void *)(v9 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v9 + 16) = 0;
  *(void *)(a2 + 24) = v9;
  *(void *)(a2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2LL;
  *(_BYTE *)(a2 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 2;
  uint64_t v11 = outlined init with copy of DeviceState((uint64_t)v14, a2 + 48);
  uint64_t v12 = static os_log_type_t.default.getter(v11);
  os_log(_:dso:log:_:_:)( v12,  &dword_0,  *(void *)(a2 + 16),  "AnswerAltitudeFlow init with fetch altitude",  43LL,  2LL,  _swiftEmptyArrayStorage);
  __swift_destroy_boxed_opaque_existential_0Tm(v14);
  return a2;
}

uint64_t sub_476F0()
{
  return swift_deallocObject(v0, 192LL, 7LL);
}

void partial apply for closure #1 in AnswerAltitudeFlow.fetchLocation()(uint64_t a1)
{
}

uint64_t instantiation function for generic protocol witness table for AnswerAltitudeFlow( uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type AnswerAltitudeFlow and conformance AnswerAltitudeFlow,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for AnswerAltitudeFlow,  (uint64_t)&protocol conformance descriptor for AnswerAltitudeFlow);
  uint64_t result = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type AnswerAltitudeFlow and conformance AnswerAltitudeFlow,  v3,  (uint64_t (*)(uint64_t))type metadata accessor for AnswerAltitudeFlow,  (uint64_t)&protocol conformance descriptor for AnswerAltitudeFlow);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for AnswerAltitudeFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin18AnswerAltitudeFlow);
}

uint64_t sub_477C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 112LL))();
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_477FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 120LL);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 8);
  outlined copy of AnswerAltitudeFlow.State(*(void *)a1, v4);
  return v3(v2, v4);
}

uint64_t sub_47848(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 136LL))();
}

uint64_t sub_47870(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_BYTE *))(**(void **)a2 + 144LL))(v4);
}

uint64_t initializeBufferWithCopyOfBuffer for AnswerAltitudeFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  outlined copy of AnswerAltitudeFlow.State(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for AnswerAltitudeFlow.State(uint64_t a1)
{
  return outlined consume of AnswerAltitudeFlow.State(*(void *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for AnswerAltitudeFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  outlined copy of AnswerAltitudeFlow.State(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  char v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of AnswerAltitudeFlow.State(v5, v6);
  return a1;
}

uint64_t assignWithTake for AnswerAltitudeFlow.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  outlined consume of AnswerAltitudeFlow.State(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnswerAltitudeFlow.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnswerAltitudeFlow.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for AnswerAltitudeFlow.State(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for AnswerAltitudeFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2;
  }

  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnswerAltitudeFlow.State()
{
  return &type metadata for AnswerAltitudeFlow.State;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void outlined consume of LocationFetchFlow.ExitValue(id a1, unsigned __int8 a2)
{
  if (a2 == 2)
  {
    swift_errorRelease(a1);
  }

  else if (a2 <= 1u)
  {
  }

id outlined copy of LocationFetchFlow.ExitValue(id result, unsigned __int8 a2)
{
  if (a2 == 2) {
    return (id)swift_errorRetain(result);
  }
  if (a2 <= 1u) {
    return result;
  }
  return result;
}

unint64_t ContactResolutionFlowError.errorDescription.getter(uint64_t a1, uint64_t a2)
{
  unint64_t result = 0xD000000000000016LL;
  switch(a2)
  {
    case 0LL:
      unint64_t result = 0x696C616974696E69LL;
      break;
    case 1LL:
      unint64_t result = 0x61707563634F6F6ELL;
      break;
    case 3LL:
      unint64_t result = 0x6F636552656E6F6ELL;
      break;
    case 4LL:
      unint64_t result = 1701736302LL;
      break;
    case 5LL:
    case 6LL:
      return result;
    case 7LL:
      unint64_t result = 0xD000000000000015LL;
      break;
    case 8LL:
      unint64_t result = 0xD000000000000017LL;
      break;
    case 9LL:
      unint64_t result = 0xD000000000000014LL;
      break;
    case 10LL:
      unint64_t result = 0xD000000000000013LL;
      break;
    default:
      unint64_t result = 0x6361746E6F436F6ELL;
      break;
  }

  return result;
}

uint64_t ContactResolutionFlow.exitValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  outlined copy of Result<ContactResolutionOutput, ContactResolutionFlowError>( v1,  *(void *)(v0 + 32),  *(_BYTE *)(v0 + 40),  (uint64_t (*)(uint64_t, void))outlined copy of ContactResolutionOutput,  (uint64_t (*)(void))outlined copy of ContactResolutionFlowError);
  return v1;
}

id outlined copy of ContactResolutionOutput(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    return (id)swift_bridgeObjectRetain(a1);
  }
  else {
    return a1;
  }
}

uint64_t outlined copy of ContactResolutionFlowError(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xB) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t ContactResolutionFlow.exitValue.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v8 = *(void *)(v3 + 32);
  char v9 = *(_BYTE *)(v3 + 40);
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a2;
  *(_BYTE *)(v3 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = a3 & 1;
  return outlined copy of Result<ContactResolutionOutput, ContactResolutionFlowError>( v7,  v8,  v9,  (uint64_t (*)(uint64_t, void))outlined consume of ContactResolutionOutput,  (uint64_t (*)(void))outlined consume of ContactResolutionFlowError);
}

uint64_t outlined copy of Result<ContactResolutionOutput, ContactResolutionFlowError>( uint64_t a1, char a2, char a3, uint64_t (*a4)(uint64_t, void), uint64_t (*a5)(void))
{
  if ((a3 & 1) != 0) {
    return a5();
  }
  else {
    return a4(a1, a2 & 1);
  }
}

void outlined consume of ContactResolutionOutput(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    swift_bridgeObjectRelease(a1);
  }
  else {
}
  }

uint64_t outlined consume of ContactResolutionFlowError(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xB) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t key path setter for ContactResolutionFlow.flowState : <A, B>ContactResolutionFlow<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v6 = *(_OWORD *)(a4 + a3 - 16);
  v11[0] = *(_OWORD *)(a4 + a3 - 32);
  v11[1] = v6;
  type metadata accessor for ContactResolutionFlow.State(0LL, (uint64_t)v11);
  __chkstk_darwin();
  uint64_t v8 = (char *)v11 - v7;
  (*(void (**)(char *, uint64_t))(v9 + 16))((char *)v11 - v7, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 216LL))(v8);
}

uint64_t ContactResolutionFlow.flowState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 128);
  swift_beginAccess(v4, v9, 0LL, 0LL);
  __int128 v5 = *(_OWORD *)(v3 + 96);
  v8[0] = *(_OWORD *)(v3 + 80);
  v8[1] = v5;
  uint64_t v6 = type metadata accessor for ContactResolutionFlow.State(0LL, (uint64_t)v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, v4, v6);
}

uint64_t type metadata accessor for ContactResolutionFlow.State(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for ContactResolutionFlow.State);
}

uint64_t ContactResolutionFlow.flowState.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 128);
  swift_beginAccess(v4, v9, 33LL, 0LL);
  __int128 v5 = *(_OWORD *)(v3 + 96);
  v8[0] = *(_OWORD *)(v3 + 80);
  v8[1] = v5;
  uint64_t v6 = type metadata accessor for ContactResolutionFlow.State(0LL, (uint64_t)v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(v4, a1, v6);
  return swift_endAccess(v9);
}

uint64_t (*ContactResolutionFlow.flowState.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t ContactResolutionFlow.disambiguationStrategy.getter()
{
  return swift_unknownObjectRetain(*(void *)(v0 + *(void *)(*(void *)v0 + 136LL)));
}

uint64_t ContactResolutionFlow.confirmationStrategy.getter()
{
  return swift_unknownObjectRetain(*(void *)(v0 + *(void *)(*(void *)v0 + 144LL)));
}

uint64_t ContactResolutionFlow.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + *(void *)(*(void *)v1 + 152LL), a1);
}

uint64_t ContactResolutionFlow.handleResolver.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Mirror.DisplayStyle?( v1 + *(void *)(*(void *)v1 + 160LL),  a1,  &demangling cache variable for type metadata for HandleFilterProtocolAsync?);
}

uint64_t ContactResolutionFlow.contactResolverConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 176LL);
  uint64_t v4 = type metadata accessor for ContactResolverConfig(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t ContactResolutionFlow.__allocating_init(occupantNode:disambiguationStrategy:confirmationStrategy:contactResolver:flowHelper:handleResolver:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  uint64_t v13 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  ContactResolutionFlow.init(occupantNode:disambiguationStrategy:confirmationStrategy:contactResolver:flowHelper:handleResolver:)( a1,  a2,  a3,  a4,  a5,  a6);
  return v13;
}

uint64_t *ContactResolutionFlow.init(occupantNode:disambiguationStrategy:confirmationStrategy:contactResolver:flowHelper:handleResolver:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  uint64_t v7 = v6;
  id v35 = a5;
  uint64_t v36 = a6;
  uint64_t v30 = a4;
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v33 = a1;
  uint64_t v34 = *v6;
  uint64_t v8 = type metadata accessor for RecommenderType(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SearchSuggestedContacts(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  id v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for ContactResolverDomain(0LL);
  __chkstk_darwin();
  id v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for Locale(0LL);
  __chkstk_darwin();
  id v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v20 = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000015LL,  0x8000000000097870LL);
  v6[3] = 0LL;
  v6[4] = 0LL;
  _OWORD v6[2] = v20;
  *((_BYTE *)v6 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 1;
  uint64_t v21 = static Locale.current.getter(v20);
  static ContactResolverDomain.all.getter(v21);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))( v15,  enum case for SearchSuggestedContacts.ifOnlyMatchIsSuggested(_:),  v12);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for RecommenderType.mlRecommender(_:), v8);
  ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:recommender:customGenerator:)( 0LL,  0xE000000000000000LL,  0LL,  0xE000000000000000LL,  v19,  1LL,  1LL,  _swiftEmptyArrayStorage,  v17,  v15,  v11,  0LL,  0LL);
  uint64_t v22 = (uint64_t)v7 + *(void *)(*v7 + 168);
  uint64_t v23 = type metadata accessor for SiriKitContactResolver(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32LL))(v22, v30, v23);
  *(uint64_t *)((char *)v7 + *(void *)(*v7 + 136)) = v31;
  *(uint64_t *)((char *)v7 + *(void *)(*v7 + 144)) = v32;
  uint64_t v24 = (uint64_t)v7 + *(void *)(*v7 + 128);
  uint64_t v25 = type metadata accessor for OccupantIntentNode(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32LL))(v24, v33, v25);
  __int128 v26 = *(_OWORD *)(v34 + 96);
  v37[0] = *(_OWORD *)(v34 + 80);
  v37[1] = v26;
  uint64_t v27 = type metadata accessor for ContactResolutionFlow.State(0LL, (uint64_t)v37);
  swift_storeEnumTagMultiPayload(v24, v27, 0LL);
  outlined init with take of CATType(v35, (uint64_t)v7 + *(void *)(*v7 + 152));
  outlined init with take of HandleFilterProtocolAsync?( v36,  (uint64_t)v7 + *(void *)(*v7 + 160),  &demangling cache variable for type metadata for HandleFilterProtocolAsync?);
  return v7;
}

uint64_t ContactResolutionFlow.onInput(input:)()
{
  uint64_t v1 = type metadata accessor for Parse(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin();
  __int128 v5 = (id *)((char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Input.parse.getter(v3);
  int v6 = (*(uint64_t (**)(id *, uint64_t))(v2 + 88))(v5, v1);
  if (v6 == enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v7 = *(os_log_s **)(v0 + 16);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      uint64_t v10 = "ContactResolutionFlow onInput returns true.";
      uint64_t v11 = v7;
      os_log_type_t v12 = v8;
LABEL_10:
      _os_log_impl(&dword_0, v11, v12, v10, v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
      goto LABEL_11;
    }

    goto LABEL_11;
  }

  int v13 = v6;
  if (v6 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(id *, uint64_t))(v2 + 96))(v5, v1);

    uint64_t v14 = *(os_log_s **)(v0 + 16);
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_0, v14, v15, "ContactResolutionFlow onInput returns true for POMMES.", v16, 2u);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    return 1LL;
  }

  int v17 = enum case for Parse.uso(_:);
  uint64_t v18 = *(os_log_s **)(v0 + 16);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  if (v13 == v17)
  {
    if (v20)
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      os_log_type_t v12 = v19;
      uint64_t v10 = "ContactResolutionFlow onInput returns true for USO parse.";
      uint64_t v11 = v18;
      goto LABEL_10;
    }

LABEL_11:
    (*(void (**)(id *, uint64_t))(v2 + 8))(v5, v1);
    return 1LL;
  }

  if (v20)
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl(&dword_0, v18, v19, "SiriGeo currently doesn't support parse type.", v22, 2u);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  (*(void (**)(id *, uint64_t))(v2 + 8))(v5, v1);
  return 0LL;
}

  uint64_t v21 = swift_storeEnumTagMultiPayload(boxed_opaque_existential_0, v16, v17);
  uint64_t v22 = static DialogHelper.globals.getter(v21);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 120LL))(v24, v22, a4, a5);
  swift_bridgeObjectRelease(v22);
  return __swift_destroy_boxed_opaque_existential_0Tm(v24);
}

uint64_t ContactResolutionFlow.executeState()(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  uint64_t v3 = (void *)*v1;
  unint64_t v4 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OccupantIntentNode?)
                              - 8)
                  + 64LL)
      + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[18] = swift_task_alloc(v4);
  v2[19] = swift_task_alloc(v4);
  uint64_t v5 = type metadata accessor for ContactQuery(0LL);
  v2[20] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[21] = v6;
  v2[22] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SiriKitContactResolver(0LL);
  v2[23] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  _BYTE v2[24] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[25] = swift_task_alloc(v9);
  v2[26] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for OccupantIntentNode(0LL);
  v2[27] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[28] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[29] = swift_task_alloc(v12);
  v2[30] = swift_task_alloc(v12);
  v2[31] = swift_task_alloc(v12);
  v2[32] = swift_task_alloc(v12);
  uint64_t v13 = v3[10];
  v2[33] = v13;
  uint64_t v14 = v3[11];
  v2[34] = v14;
  uint64_t v15 = v3[12];
  v2[35] = v15;
  uint64_t v16 = v3[13];
  v2[36] = v16;
  v2[2] = v13;
  void v2[3] = v14;
  void v2[4] = v15;
  void v2[5] = v16;
  uint64_t v17 = type metadata accessor for ContactResolutionFlow.State(0LL, (uint64_t)(v2 + 2));
  v2[37] = v17;
  unint64_t v18 = (*(void *)(*(void *)(v17 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[38] = swift_task_alloc(v18);
  v2[39] = swift_task_alloc(v18);
  v2[40] = swift_task_alloc(v18);
  v2[41] = swift_task_alloc(v18);
  return swift_task_switch(ContactResolutionFlow.executeState(), 0LL, 0LL);
}

void ContactResolutionFlow.executeState()()
{
  uint64_t v1 = *(void *)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 296);
  (*(void (**)(void))(**(void **)(v0 + 136) + 208LL))();
  uint64_t v3 = (char *)&loc_487D8 + dword_49F44[swift_getEnumCaseMultiPayload(v1, v2)];
  __asm { BR              X10 }

uint64_t sub_487E8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_log_t log, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_log_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34)
{
  uint64_t v37 = v35[41];
  uint64_t v38 = v35[31];
  uint64_t v39 = v35[32];
  unint64_t v104 = v35;
  uint64_t v40 = v35[28];
  uint64_t v41 = v104[27];
  uint64_t v42 = v104[21];
  uint64_t v43 = v104[17];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v39, v37, v41);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
  uint64_t v45 = swift_allocObject( v44,  ((*(unsigned __int8 *)(v42 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))
        + *(void *)(v42 + 72),
          *(unsigned __int8 *)(v42 + 80) | 7LL);
  *(_OWORD *)(v45 + 16) = xmmword_95430;
  OccupantIntentNode.asContactQuery.getter();
  uint64_t v46 = *(os_log_s **)(v43 + 16);
  uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16);
  v47(v38, v39, v41);
  uint64_t v48 = swift_bridgeObjectRetain_n(v45, 2LL);
  os_log_type_t v49 = static os_log_type_t.default.getter(v48);
  BOOL v50 = os_log_type_enabled(v46, v49);
  uint64_t v51 = v104[31];
  os_log_type_t v99 = (void (*)(char *, uint64_t, uint64_t))v47;
  if (v50)
  {
    uint64_t v52 = v104[30];
    uint64_t v53 = v104[27];
    uint64_t v95 = v104[28];
    uint64_t v96 = v104[20];
    uint64_t v100 = v36;
    uint64_t v54 = swift_slowAlloc(22LL, -1LL);
    uint64_t v98 = swift_slowAlloc(64LL, -1LL);
    v106[0] = v98;
    *(_DWORD *)uint64_t v54 = 136315394;
    uint64_t v97 = v46;
    v47(v52, v51, v53);
    uint64_t v55 = String.init<A>(describing:)(v52, v53);
    unint64_t v57 = v56;
    v104[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, v106);
    ((void (*)(uint64_t))UnsafeMutableRawBufferPointer.copyMemory(from:))(v34);
    swift_bridgeObjectRelease(v57);
    char v58 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
    v58(v51, v53);
    *(_WORD *)(v54 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
    swift_bridgeObjectRetain(v45);
    uint64_t v60 = Array.description.getter(v59, v96);
    unint64_t v62 = v61;
    swift_bridgeObjectRelease(v45);
    v104[15] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v62, v106);
    ((void (*)(void *))UnsafeMutableRawBufferPointer.copyMemory(from:))(v104 + 16);
    swift_bridgeObjectRelease(v62);
    swift_bridgeObjectRelease_n(v45, 2LL);
    uint64_t v63 = v97;
    _os_log_impl(&dword_0, v97, v49, "occupant node %s contactQuery %s", (uint8_t *)v54, 0x16u);
    swift_arrayDestroy(v98, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v98, -1LL, -1LL);
    uint64_t v64 = v54;
    uint64_t v36 = v100;
    swift_slowDealloc(v64, -1LL, -1LL);
  }

  else
  {
    char v58 = *(void (**)(uint64_t, uint64_t))(v104[28] + 8LL);
    v58(v51, v104[27]);
    swift_bridgeObjectRelease_n(v45, 2LL);
    uint64_t v63 = v46;
  }

  uint64_t v65 = v104[17];
  (*(void (**)(void, uint64_t, void))(v104[24] + 16LL))( v104[26],  v65 + *(void *)(*(void *)v65 + 168LL),  v104[23]);
  uint64_t v66 = ((uint64_t (*)(uint64_t, uint64_t))SiriKitContactResolver.resolve(queries:config:))( v45,  v65 + *(void *)(*(void *)v65 + 176LL));
  (*(void (**)(void, void))(v104[24] + 8LL))(v104[26], v104[23]);
  uint64_t v67 = swift_bridgeObjectRelease(v45);
  uint64_t v68 = static os_log_type_t.default.getter(v67);
  unint64_t v69 = (unint64_t)v66 >> 62;
  if (os_log_type_enabled(v63, (os_log_type_t)v68))
  {
    swift_bridgeObjectRetain_n(v66, 2LL);
    unint64_t v70 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)unint64_t v70 = 134217984;
    if (v69)
    {
      if (v66 < 0) {
        uint64_t v94 = v66;
      }
      else {
        uint64_t v94 = v66 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v66);
      uint64_t v71 = _CocoaArrayWrapper.endIndex.getter(v94);
      swift_bridgeObjectRelease(v66);
    }

    else
    {
      uint64_t v71 = *(void *)((char *)&dword_10 + (v66 & 0xFFFFFFFFFFFFF8LL));
    }

    swift_bridgeObjectRelease(v66);
    *uint64_t v102 = v71;
    ((void (*)(void (*)(uint64_t, uint64_t)))UnsafeMutableRawBufferPointer.copyMemory(from:))(v36);
    swift_bridgeObjectRelease(v66);
    _os_log_impl(&dword_0, v63, (os_log_type_t)v68, "number of persons resolved %ld", v70, 0xCu);
    swift_slowDealloc(v70, -1LL, -1LL);
  }

  if (!v69)
  {
LABEL_18:
    swift_bridgeObjectRelease(v66);
    __break(1u);
    goto LABEL_19;
  }

  if (v66 < 0) {
    uint64_t v92 = v66;
  }
  else {
    uint64_t v92 = v66 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v66);
  uint64_t v93 = _CocoaArrayWrapper.endIndex.getter(v92);
  swift_bridgeObjectRelease(v66);
  if (!v93) {
    goto LABEL_18;
  }
LABEL_10:
  uint64_t v100 = v58;
  if ((v66 & 0xC000000000000001LL) != 0)
  {
LABEL_19:
    id v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v66);
    goto LABEL_13;
  }

  if (!*(void *)((char *)&dword_10 + (v66 & 0xFFFFFFFFFFFFF8LL)))
  {
    __break(1u);
    JUMPOUT(0x49EB0LL);
  }

  id v72 = *(id *)(v66 + 32);
LABEL_13:
  id v73 = v72;
  uint64_t v74 = v104;
  double v75 = (void *)v104[40];
  uint64_t v76 = v104[37];
  uint64_t v77 = v104[32];
  uint64_t v78 = v104[27];
  uint64_t v79 = v104[28];
  uint64_t v80 = v104[17];
  swift_bridgeObjectRelease(v66);
  uint64_t v81 = (char *)v75
  *double v75 = v73;
  v99(v81, v77, v78);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v81, 0LL, 1LL, v78);
  swift_storeEnumTagMultiPayload(v75, v76, 2LL);
  (*(void (**)(void *))(*(void *)v80 + 216LL))(v75);
  static ExecuteResponse.ongoing(requireInput:)(0LL);
  v100(v77, v78);
  uint64_t v82 = v104[40];
  uint64_t v84 = v104[38];
  uint64_t v83 = v104[39];
  uint64_t v86 = v104[31];
  uint64_t v85 = v104[32];
  uint64_t v88 = v104[29];
  uint64_t v87 = v104[30];
  uint64_t v90 = v104[25];
  uint64_t v89 = v104[26];
  uint64_t v101 = v104[22];
  uint64_t v103 = v104[19];
  uint64_t v105 = v104[18];
  swift_task_dealloc(v74[41]);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v101);
  swift_task_dealloc(v103);
  swift_task_dealloc(v105);
  return ((uint64_t (*)(void))v74[1])();
}

uint64_t closure #1 in ContactResolutionFlow.executeState()(uint64_t a1, void *a2, void *a3)
{
  id v64 = a3;
  uint64_t v3 = a2;
  uint64_t v5 = (void *)*a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  __chkstk_darwin();
  double v75 = (char *)v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v71 = type metadata accessor for ConfirmationResponse(0LL);
  uint64_t v68 = *(void *)(v71 - 8);
  __chkstk_darwin();
  uint64_t v65 = (char *)v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v76 = (char *)v62 - v8;
  uint64_t v9 = v5[13];
  uint64_t v10 = v5[11];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v9,  v10,  &protocol requirements base descriptor for PromptForConfirmationFlowStrategyAsync,  &associated type descriptor for PromptForConfirmationFlowStrategyAsync.AnswerType);
  uint64_t v69 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  id v72 = (char *)v62 - v12;
  uint64_t v13 = v5[12];
  v80[0] = v5[10];
  v80[1] = v10;
  uint64_t v66 = v10;
  uint64_t v67 = v9;
  v80[2] = v13;
  v80[3] = v9;
  uint64_t v73 = type metadata accessor for ContactResolutionFlow.State(0LL, (uint64_t)v80);
  __chkstk_darwin();
  uint64_t v15 = (char *)v62 - v14;
  uint64_t v70 = AssociatedTypeWitness;
  uint64_t v16 = type metadata accessor for PromptResult(0LL, AssociatedTypeWitness);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin();
  os_log_type_t v19 = (char *)v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin();
  uint64_t v22 = (char *)v62 - v21;
  LOBYTE(v1specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = static os_log_type_t.info.getter(v20, v23, v24, v25, v26, v27, v28, v29);
  uint64_t v30 = (os_log_s *)v3[2];
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v74 = a1;
  v31(v22, a1, v16);
  os_log_type_t v32 = v10;
  BOOL v33 = os_log_type_enabled(v30, (os_log_type_t)v10);
  uint64_t v77 = v31;
  uint64_t v78 = v15;
  if (v33)
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    v80[0] = v35;
    uint64_t v63 = v3;
    *(_DWORD *)uint64_t v34 = 136315138;
    v62[1] = v34 + 4;
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for PromptResult<A>, v16);
    uint64_t v37 = specialized String.init<A>(describing:)((uint64_t)v22, v16, WitnessTable);
    unint64_t v39 = v38;
    uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v80);
    uint64_t v3 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v80);
    swift_bridgeObjectRelease(v39);
    uint64_t v40 = *(void (**)(char *, uint64_t))(v17 + 8);
    v40(v22, v16);
    _os_log_impl(&dword_0, v30, v32, "PromptForConfirmation childCompletion %s", v34, 0xCu);
    swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  else
  {
    uint64_t v40 = *(void (**)(char *, uint64_t))(v17 + 8);
    v40(v22, v16);
  }

  uint64_t v42 = (uint64_t)v75;
  uint64_t v41 = v76;
  uint64_t v43 = v74;
  uint64_t v44 = v78;
  swift_storeEnumTagMultiPayload(v78, v73, 5LL);
  (*(void (**)(char *))(*v3 + 216LL))(v44);
  v77(v19, v43, v16);
  int v45 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v19, v16);
  if (v45 != enum case for PromptResult.answered<A>(_:))
  {
    uint64_t v53 = *(uint64_t (**)(void, uint64_t, uint64_t))(*v3 + 192LL);
    if (v45 == enum case for PromptResult.cancelled<A>(_:) || v45 == enum case for PromptResult.unanswered<A>(_:)) {
      return v53(0LL, 7LL, 1LL);
    }
    v53(0LL, 4LL, 1LL);
    uint64_t v59 = v19;
    uint64_t v60 = v16;
    return ((uint64_t (*)(char *, uint64_t))v40)(v59, v60);
  }

  (*(void (**)(char *, uint64_t))(v17 + 96))(v19, v16);
  uint64_t v47 = v69;
  uint64_t v46 = v70;
  uint64_t v48 = v72;
  (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v72, v19, v70);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v67,  v66,  v46,  &protocol requirements base descriptor for PromptForConfirmationFlowStrategyAsync,  &associated conformance descriptor for PromptForConfirmationFlowStrategyAsync.PromptForConfirmationFlowStrategyAsync.AnswerType: ConfirmationResponseProviding);
  dispatch thunk of ConfirmationResponseProviding.confirmationResponse.getter(v46, AssociatedConformanceWitness);
  uint64_t v50 = v68;
  uint64_t v51 = v71;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v42, 1LL, v71) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( v42,  &demangling cache variable for type metadata for ConfirmationResponse?);
    (*(void (**)(void, uint64_t, uint64_t))(*v3 + 192LL))(0LL, 5LL, 1LL);
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v48, v46);
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v41, v42, v51);
  uint64_t v55 = v65;
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v65, v41, v51);
  if ((*(unsigned int (**)(char *, uint64_t))(v50 + 88))(v55, v51) != enum case for ConfirmationResponse.confirmed(_:))
  {
    (*(void (**)(void, uint64_t, uint64_t))(*v3 + 192LL))(0LL, 6LL, 1LL);
    unint64_t v61 = v55;
    uint64_t v40 = *(void (**)(char *, uint64_t))(v50 + 8);
    v40(v41, v51);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v72, v46);
    uint64_t v59 = v61;
    uint64_t v60 = v51;
    return ((uint64_t (*)(char *, uint64_t))v40)(v59, v60);
  }

  unint64_t v56 = *(void (**)(id, void, void))(*v3 + 192LL);
  id v57 = v64;
  id v58 = v64;
  v56(v57, 0LL, 0LL);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v41, v51);
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v72, v46);
}

void closure #3 in ContactResolutionFlow.executeState()(uint64_t a1, void *a2, int a3)
{
  int v46 = a3;
  uint64_t v3 = a2;
  __int128 v5 = *(_OWORD *)(*a2 + 96LL);
  v51[0] = *(_OWORD *)(*a2 + 80LL);
  v51[1] = v5;
  uint64_t v49 = type metadata accessor for ContactResolutionFlow.State(0LL, (uint64_t)v51);
  __chkstk_darwin();
  uint64_t v7 = (void *)((char *)v42 - v6);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<INPerson>);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (void **)((char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = (char *)v42 - v13;
  os_log_type_t v22 = static os_log_type_t.info.getter(v12, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v23 = (os_log_s *)v3[2];
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v48 = a1;
  v47(v14, a1, v8);
  os_log_type_t v24 = v22;
  os_log_t v45 = v23;
  if (os_log_type_enabled(v23, v22))
  {
    uint64_t v25 = swift_slowAlloc(12LL, -1LL);
    uint64_t v43 = v7;
    uint64_t v44 = v3;
    uint64_t v26 = (uint8_t *)v25;
    uint64_t v27 = swift_slowAlloc(32LL, -1LL);
    *(void *)&v51[0] = v27;
    *(_DWORD *)uint64_t v26 = 136315138;
    v42[1] = v26 + 4;
    uint64_t v28 = lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>( &lazy protocol witness table cache variable for type PromptResult<INPerson> and conformance PromptResult<A>,  &demangling cache variable for type metadata for PromptResult<INPerson>,  (uint64_t)&protocol conformance descriptor for PromptResult<A>);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v8, v28);
    unint64_t v31 = v30;
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, (uint64_t *)v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);
    swift_bridgeObjectRelease(v31);
    os_log_type_t v32 = *(void (**)(char *, uint64_t))(v9 + 8);
    v32(v14, v8);
    _os_log_impl(&dword_0, v45, v24, "prompt output %s", v26, 0xCu);
    swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    BOOL v33 = v26;
    uint64_t v7 = v43;
    uint64_t v3 = v44;
    swift_slowDealloc(v33, -1LL, -1LL);
  }

  else
  {
    os_log_type_t v32 = *(void (**)(char *, uint64_t))(v9 + 8);
    v32(v14, v8);
  }

  v47((char *)v11, v48, v8);
  int v34 = (*(uint64_t (**)(void **, uint64_t))(v9 + 88))(v11, v8);
  if (v34 == enum case for PromptResult.answered<A>(_:))
  {
    (*(void (**)(void **, uint64_t))(v9 + 96))(v11, v8);
    uint64_t v35 = *v11;
    if ((v46 & 1) != 0)
    {
      swift_storeEnumTagMultiPayload(v7, v49, 5LL);
      (*(void (**)(void *))(*v3 + 216LL))(v7);
      uint64_t v36 = *(void (**)(void *, void, void))(*v3 + 192LL);
      id v37 = v35;
      v36(v35, 0LL, 0LL);
    }

    else
    {
      *uint64_t v7 = v35;
      swift_storeEnumTagMultiPayload(v7, v49, 1LL);
      uint64_t v41 = *(void (**)(void *))(*v3 + 216LL);
      id v37 = v35;
      v41(v7);
    }
  }

  else
  {
    int v38 = v34;
    int v39 = enum case for PromptResult.cancelled<A>(_:);
    swift_storeEnumTagMultiPayload(v7, v49, 5LL);
    (*(void (**)(void *))(*v3 + 216LL))(v7);
    uint64_t v40 = *(void (**)(void, uint64_t, uint64_t))(*v3 + 192LL);
    if (v38 == v39)
    {
      v40(0LL, 8LL, 1LL);
    }

    else
    {
      v40(0LL, 3LL, 1LL);
      v32((char *)v11, v8);
    }
  }

uint64_t closure #2 in ContactResolutionFlow.executeState()( void **a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *a1;
  os_log_type_t v11 = static os_log_type_t.info.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v12 = *(os_log_s **)(a2 + 16);
  os_log_type_t v13 = v11;
  uint64_t result = os_log_type_enabled(v12, v11);
  if ((_DWORD)result)
  {
    id v15 = v10;
    format = a3;
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v26 = v22;
    *(_DWORD *)uint64_t v16 = 136315138;
    id v17 = v15;
    id v18 = [v17 description];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    unint64_t v21 = v20;

    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);

    swift_bridgeObjectRelease(v21);
    _os_log_impl(&dword_0, v12, v13, format, v16, 0xCu);
    swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    return swift_slowDealloc(v16, -1LL, -1LL);
  }

  return result;
}

uint64_t *ContactResolutionFlow.deinit()
{
  uint64_t v1 = *v0;

  outlined copy of Result<ContactResolutionOutput, ContactResolutionFlowError>( v0[3],  v0[4],  *((_BYTE *)v0 + 40),  (uint64_t (*)(uint64_t, void))outlined consume of ContactResolutionOutput,  (uint64_t (*)(void))outlined consume of ContactResolutionFlowError);
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 128);
  __int128 v3 = *(_OWORD *)(v1 + 96);
  v10[0] = *(_OWORD *)(v1 + 80);
  v10[1] = v3;
  uint64_t v4 = type metadata accessor for ContactResolutionFlow.State(0LL, (uint64_t)v10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v2, v4);
  swift_unknownObjectRelease(*(uint64_t *)((char *)v0 + *(void *)(*v0 + 136)));
  swift_unknownObjectRelease(*(uint64_t *)((char *)v0 + *(void *)(*v0 + 144)));
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t *)((char *)v0 + *(void *)(*v0 + 152)));
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v0 + *(void *)(*v0 + 160),  &demangling cache variable for type metadata for HandleFilterProtocolAsync?);
  uint64_t v5 = (uint64_t)v0 + *(void *)(*v0 + 168);
  uint64_t v6 = type metadata accessor for SiriKitContactResolver(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  uint64_t v7 = (uint64_t)v0 + *(void *)(*v0 + 176);
  uint64_t v8 = type metadata accessor for ContactResolverConfig(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  return v0;
}

uint64_t ContactResolutionFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t protocol witness for FSMFlow.flowState.getter in conformance ContactResolutionFlow<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208LL))();
}

uint64_t protocol witness for FSMFlow.onInput(input:) in conformance ContactResolutionFlow<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 264LL))() & 1;
}

uint64_t protocol witness for FSMFlow.executeState() in conformance ContactResolutionFlow<A, B>(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 272LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v7(a1);
}

uint64_t protocol witness for Flow.on(input:) in conformance ContactResolutionFlow<A1, B1>( uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContactResolutionFlow<A, B>, a2);
  return FSMFlow.on(input:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance ContactResolutionFlow<A1, B1>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContactResolutionFlow<A, B>, a3);
  return FSMFlow.execute(completion:)(a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for Flow.execute() in conformance ContactResolutionFlow<A1, B1>( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_C6814);
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContactResolutionFlow<A, B>, a2);
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return FSMFlow.execute()(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance ContactResolutionFlow<A, B>@<X0>( uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 184LL))();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContactResolutionFlow<A1, B1>( uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContactResolutionFlow<A, B>, a1);
  return FSMFlow.description.getter(a1, WitnessTable);
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t outlined init with take of HandleFilterProtocolAsync?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t specialized ContactResolutionFlow.handleDisambiguationCase(_:)(unint64_t a1)
{
  uint64_t v1 = a1;
  if (!(a1 >> 62))
  {
    unint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
    if (v2 > 1)
    {
      swift_bridgeObjectRetain(a1);
      goto LABEL_4;
    }

LABEL_21:
  if (v1 < 0) {
    uint64_t v18 = v1;
  }
  else {
    uint64_t v18 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v1);
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v18);
  swift_bridgeObjectRelease(v1);
  if (v19 <= 1) {
    goto LABEL_28;
  }
  swift_bridgeObjectRetain(v1);
  unint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v18);
  if (v2)
  {
LABEL_4:
    unint64_t v3 = v1 & 0xC000000000000001LL;
    uint64_t v4 = 4LL;
    do
    {
      if (v3) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v1);
      }
      else {
        id v5 = *(id *)(v1 + 8 * v4);
      }
      uint64_t v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1LL))
      {
        __break(1u);
        goto LABEL_21;
      }

      id v8 = [v5 recommendation];

      if (v8)
      {
        char v17 = 0;
        goto LABEL_19;
      }

      ++v4;
    }

    while (v7 != v2);
    uint64_t result = swift_bridgeObjectRelease(v1);
    if (v3) {
      goto LABEL_27;
    }
    goto LABEL_12;
  }

  uint64_t result = swift_bridgeObjectRelease(v1);
  if ((v1 & 0xC000000000000001LL) != 0)
  {
LABEL_27:
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v1);
LABEL_14:
    os_log_type_t v11 = v10;
    id v12 = [v10 person];

    id v13 = [v12 contactIdentifier];
    if (v13)
    {
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      uint64_t v16 = v15;
    }

    else
    {
      uint64_t v14 = 0LL;
      uint64_t v16 = 0LL;
    }

    swift_bridgeObjectRetain(v16);
    char v17 = specialized Sequence.allSatisfy(_:)(v1, v14, v16);
    swift_bridgeObjectRelease(v16);
    uint64_t v1 = v16;
LABEL_19:
    swift_bridgeObjectRelease(v1);
    return v17 & 1;
  }

  (*(void (**)(char *, uint64_t))(v24 + 8))(v17, v61);
  return v23;
}

LABEL_12:
  if (*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL)))
  {
    id v10 = *(id *)(v1 + 32);
    goto LABEL_14;
  }

  __break(1u);
  return result;
}

uint64_t sub_4B1D4()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

void partial apply for closure #3 in ContactResolutionFlow.executeState()(uint64_t a1)
{
}

uint64_t sub_4B204()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t partial apply for closure #1 in ContactResolutionFlow.executeState()(uint64_t a1)
{
  return closure #1 in ContactResolutionFlow.executeState()(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t instantiation function for generic protocol witness table for ContactResolutionFlow<A, B>( uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = swift_getWitnessTable(&protocol conformance descriptor for ContactResolutionFlow<A, B>, a2);
  uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ContactResolutionFlow<A, B>, a2);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_4B27C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 184LL))();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5 & 1;
  return result;
}

uint64_t sub_4B2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**(void **)a2 + 192LL);
  outlined copy of Result<ContactResolutionOutput, ContactResolutionFlowError>( *(void *)a1,  v3,  v4,  (uint64_t (*)(uint64_t, void))outlined copy of ContactResolutionOutput,  (uint64_t (*)(void))outlined copy of ContactResolutionFlowError);
  return v5(v2, v3, v4);
}

uint64_t sub_4B320()
{
  return 32LL;
}

__n128 sub_4B32C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  __int128 v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_4B338(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 208LL))();
}

uint64_t sub_4B364()
{
  return 32LL;
}

__n128 sub_4B370(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  __int128 v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

unint64_t destroy for ContactResolutionFlowError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ContactResolutionFlowError(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }

  return a1;
}

void *assignWithCopy for ContactResolutionFlowError(void *a1, void *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      uint64_t v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }

uint64_t assignWithTake for ContactResolutionFlowError(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactResolutionFlowError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 > 0x7FFFFFF4 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483637);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 10;
  if (v4 >= 0xC) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for ContactResolutionFlowError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF5)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483637;
    if (a3 >= 0x7FFFFFF5) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFF5) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 10;
    }
  }

  return result;
}

uint64_t getEnumTag for ContactResolutionFlowError(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for ContactResolutionFlowError(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else if (a2)
  {
    result[1] = (a2 - 1);
  }

  return result;
}

ValueMetadata *type metadata accessor for ContactResolutionFlowError()
{
  return &type metadata for ContactResolutionFlowError;
}

uint64_t initializeBufferWithCopyOfBuffer for ContactResolutionOutput(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  outlined copy of ContactResolutionOutput(*(void **)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for ContactResolutionOutput(uint64_t a1)
{
}

uint64_t assignWithCopy for ContactResolutionOutput(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  outlined copy of ContactResolutionOutput(*(void **)a2, v4);
  unsigned int v5 = *(void **)a1;
  char v6 = *(_BYTE *)(a1 + 8);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of ContactResolutionOutput(v5, v6);
  return a1;
}

uint64_t assignWithTake for ContactResolutionOutput(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((_BYTE *)a2 + 8);
  unsigned int v5 = *(void **)a1;
  char v6 = *(_BYTE *)(a1 + 8);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of ContactResolutionOutput(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for ContactResolutionOutput()
{
  return &type metadata for ContactResolutionOutput;
}

uint64_t type metadata completion function for ContactResolutionFlow(uint64_t a1)
{
  v8[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[1] = &unk_97A38;
  __int128 v2 = *(_OWORD *)(a1 + 96);
  v7[0] = *(_OWORD *)(a1 + 80);
  v7[1] = v2;
  uint64_t result = type metadata accessor for ContactResolutionFlow.State(319LL, (uint64_t)v7);
  if (v4 <= 0x3F)
  {
    _OWORD v8[2] = *(void *)(result - 8) + 64LL;
    _OWORD v8[3] = &unk_97A50;
    v8[4] = &unk_97A50;
    v8[5] = &unk_97A68;
    v8[6] = &unk_97A80;
    uint64_t result = type metadata accessor for SiriKitContactResolver(319LL);
    if (v5 <= 0x3F)
    {
      v8[7] = *(void *)(result - 8) + 64LL;
      uint64_t result = type metadata accessor for ContactResolverConfig(319LL);
      if (v6 <= 0x3F)
      {
        v8[8] = *(void *)(result - 8) + 64LL;
        return swift_initClassMetadata2(a1, 0LL, 9LL, v8, a1 + 112);
      }
    }
  }

  return result;
}

uint64_t type metadata accessor for ContactResolutionFlow(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for ContactResolutionFlow);
}

uint64_t type metadata instantiation function for ContactResolutionFlow.State( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40LL);
}

void type metadata completion function for ContactResolutionFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OccupantIntentNode(319LL);
  if (v3 <= 0x3F)
  {
    v7[0] = *(void *)(v2 - 8) + 64LL;
    v7[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    type metadata accessor for OccupantIntentNode?(319LL);
    if (v5 <= 0x3F)
    {
      swift_getTupleTypeLayout2( v6,  (char *)&value witness table for Builtin.UnknownObject + 64,  *(void *)(v4 - 8) + 64LL);
      _OWORD v7[2] = v6;
      _OWORD v7[3] = &unk_97AA0;
      v7[4] = &unk_97AB8;
      swift_initEnumMetadataMultiPayload(a1, 0LL, 5LL, v7);
    }
  }

char *initializeBufferWithCopyOfBuffer for ContactResolutionFlow.State(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = &v9[(v6 + 16LL) & ~(unint64_t)v6];
    swift_retain(v9);
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v8 = type metadata accessor for OccupantIntentNode(0LL);
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
        swift_storeEnumTagMultiPayload(a1, a3, 0LL);
        break;
      case 1u:
        os_log_type_t v11 = *a2;
        *(void *)a1 = *a2;
        id v12 = v11;
        swift_storeEnumTagMultiPayload(a1, a3, 1LL);
        break;
      case 2u:
        id v13 = *a2;
        *(void *)a1 = *a2;
        uint64_t v14 = v13;
        uint64_t v16 = &a1[v15];
        char v17 = (char *)a2 + v15;
        uint64_t v18 = type metadata accessor for OccupantIntentNode(0LL);
        uint64_t v19 = *(void *)(v18 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
        {
          uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OccupantIntentNode?);
          memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
        }

        swift_storeEnumTagMultiPayload(a1, a3, 2LL);
        break;
      case 3u:
        unint64_t v21 = *a2;
        uint64_t v22 = a2[1];
        *(void *)a1 = v21;
        *((void *)a1 + 1) = v22;
        uint64_t v23 = v21;
        uint64_t v24 = v22;
        swift_storeEnumTagMultiPayload(a1, a3, 3LL);
        break;
      case 4u:
        uint64_t v25 = *a2;
        *(void *)a1 = *a2;
        a1[8] = *((_BYTE *)a2 + 8);
        swift_bridgeObjectRetain(v25);
        swift_storeEnumTagMultiPayload(a1, a3, 4LL);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

void destroy for ContactResolutionFlow.State(char *a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
      uint64_t v3 = type metadata accessor for OccupantIntentNode(0LL);
      uint64_t v4 = *(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8LL);
      uint64_t v5 = a1;
      goto LABEL_10;
    case 1u:
      id v6 = *(id *)a1;
      goto LABEL_7;
    case 2u:

      uint64_t v8 = type metadata accessor for OccupantIntentNode(0LL);
      uint64_t v9 = *(void *)(v8 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8))
      {
        uint64_t v4 = *(void (**)(char *, uint64_t))(v9 + 8);
        uint64_t v5 = v7;
        uint64_t v3 = v8;
LABEL_10:
        v4(v5, v3);
      }

      return;
    case 3u:

      id v6 = (id)*((void *)a1 + 1);
LABEL_7:

      break;
    case 4u:
      swift_bridgeObjectRelease(*(void *)a1);
      break;
    default:
      return;
  }

void *initializeWithCopy for ContactResolutionFlow.State(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v6 = type metadata accessor for OccupantIntentNode(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 0LL;
      goto LABEL_11;
    case 1u:
      id v10 = (void *)*a2;
      *a1 = *a2;
      id v11 = v10;
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 1LL;
      goto LABEL_11;
    case 2u:
      id v12 = (void *)*a2;
      *a1 = *a2;
      id v13 = v12;
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = type metadata accessor for OccupantIntentNode(0LL);
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OccupantIntentNode?);
        memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
      }

      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 2LL;
      goto LABEL_11;
    case 3u:
      uint64_t v20 = (void *)*a2;
      unint64_t v21 = (void *)a2[1];
      *a1 = v20;
      a1[1] = v21;
      id v22 = v20;
      id v23 = v21;
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 3LL;
      goto LABEL_11;
    case 4u:
      uint64_t v24 = (void *)*a2;
      *a1 = *a2;
      *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
      swift_bridgeObjectRetain(v24);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 4LL;
LABEL_11:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

void *assignWithCopy for ContactResolutionFlow.State(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = *(void *)(a3 - 8);
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, a3);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v7 = type metadata accessor for OccupantIntentNode(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 0LL;
        goto LABEL_12;
      case 1u:
        id v11 = (void *)*a2;
        *a1 = *a2;
        id v12 = v11;
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 1LL;
        goto LABEL_12;
      case 2u:
        id v13 = (void *)*a2;
        *a1 = *a2;
        id v14 = v13;
        uint64_t v16 = (char *)a1 + v15;
        uint64_t v17 = (char *)a2 + v15;
        uint64_t v18 = type metadata accessor for OccupantIntentNode(0LL);
        uint64_t v19 = *(void *)(v18 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
        {
          uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OccupantIntentNode?);
          memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
        }

        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 2LL;
        goto LABEL_12;
      case 3u:
        unint64_t v21 = (void *)*a2;
        *a1 = *a2;
        id v22 = (void *)a2[1];
        a1[1] = v22;
        id v23 = v21;
        id v24 = v22;
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 3LL;
        goto LABEL_12;
      case 4u:
        uint64_t v25 = (void *)*a2;
        *a1 = *a2;
        *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
        swift_bridgeObjectRetain(v25);
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 4LL;
LABEL_12:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }

  return a1;
}

void *initializeWithTake for ContactResolutionFlow.State(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    id v12 = (char *)a1 + v11;
    id v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for OccupantIntentNode(0LL);
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OccupantIntentNode?);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
    }

    uint64_t v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 2LL;
    goto LABEL_9;
  }

  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = type metadata accessor for OccupantIntentNode(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
    uint64_t v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 0LL;
LABEL_9:
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    return a1;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

void *assignWithTake for ContactResolutionFlow.State(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = *(void *)(a3 - 8);
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, a3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      id v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for OccupantIntentNode(0LL);
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OccupantIntentNode?);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
      }

      uint64_t v9 = a1;
      uint64_t v10 = a3;
      uint64_t v11 = 2LL;
      goto LABEL_10;
    }

    if (!EnumCaseMultiPayload)
    {
      uint64_t v8 = type metadata accessor for OccupantIntentNode(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
      uint64_t v9 = a1;
      uint64_t v10 = a3;
      uint64_t v11 = 0LL;
LABEL_10:
      swift_storeEnumTagMultiPayload(v9, v10, v11);
      return a1;
    }

    memcpy(a1, a2, *(void *)(v6 + 64));
  }

  return a1;
}

void type metadata accessor for OccupantIntentNode?(uint64_t a1)
{
  if (!lazy cache variable for type metadata for OccupantIntentNode?)
  {
    uint64_t v2 = type metadata accessor for OccupantIntentNode(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for OccupantIntentNode?);
    }
  }

uint64_t lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>( unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t PommesResponse.firstGeoExperience.getter()
{
  unint64_t v0 = dispatch thunk of PommesResponse.experiences.getter();
  uint64_t v1 = v0;
  if (v0 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(v0);
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v11))
  {
    uint64_t v3 = 4LL;
    while (1)
    {
      id v4 = (v1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, v1)
         : *(id *)(v1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1LL)) {
        break;
      }
      uint64_t v7 = type metadata accessor for GeoExperience(0LL);
      uint64_t v8 = swift_dynamicCastClass(v5, v7);
      if (v8)
      {
        uint64_t v9 = v8;
        swift_bridgeObjectRelease_n(v1, 2LL);
        return v9;
      }

      ++v3;
      if (v6 == v2) {
        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_14:
    if (v1 < 0) {
      uint64_t v11 = v1;
    }
    else {
      uint64_t v11 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
  }

LABEL_10:
  swift_bridgeObjectRelease_n(v1, 2LL);
  return 0LL;
}

  uint64_t v20 = OccupantIntentNode.fullName.getter(v12);
  if (!v21)
  {
    uint64_t v20 = 0LL;
    unint64_t v21 = 0xE000000000000000LL;
  }

  id v22 = ContactQuery.fullName.setter(v20, v21);
  id v23 = OccupantIntentNode.lastName.getter(v22);
  if (!v24)
  {
    id v23 = 0LL;
    id v24 = 0xE000000000000000LL;
  }

  uint64_t v25 = ContactQuery.familyName.setter(v23, v24);
  uint64_t v26 = OccupantIntentNode.nickname.getter(v25);
  if (!v27)
  {
    uint64_t v26 = 0LL;
    uint64_t v27 = 0xE000000000000000LL;
  }

  uint64_t v28 = ContactQuery.nickname.setter(v26, v27);
  OccupantIntentNode.namePrefix.getter(v28);
  uint64_t v29 = type metadata accessor for PersonOntologyNode.PersonNamePrefix(0LL);
  unint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v8, 1LL, v29) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v8,  &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?);
    unint64_t v31 = 0LL;
    os_log_type_t v32 = 0xE000000000000000LL;
  }

  else
  {
    unint64_t v31 = PersonOntologyNode.PersonNamePrefix.rawValue.getter();
    os_log_type_t v32 = v33;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v29);
  }

  int v34 = ContactQuery.namePrefix.setter(v31, v32);
  OccupantIntentNode.namePostfix.getter(v34);
  uint64_t v35 = type metadata accessor for PersonOntologyNode.PersonNamePostfix(0LL);
  uint64_t v36 = *(void *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v5, 1LL, v35) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v5,  &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?);
    id v37 = 0LL;
    int v38 = 0xE000000000000000LL;
  }

  else
  {
    id v37 = PersonOntologyNode.PersonNamePostfix.rawValue.getter();
    int v38 = v39;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v5, v35);
  }

  uint64_t v40 = ContactQuery.nameSuffix.setter(v37, v38);
  uint64_t v41 = OccupantIntentNode.company.getter(v40);
  if (!v42)
  {
    uint64_t v41 = 0LL;
    uint64_t v42 = 0xE000000000000000LL;
  }

  uint64_t v43 = ContactQuery.organizationName.setter(v41, v42);
  uint64_t v44 = OccupantIntentNode.relationship.getter(v43);
  if (v45) {
    int v46 = v44;
  }
  else {
    int v46 = 0LL;
  }
  if (v45) {
    uint64_t v47 = v45;
  }
  else {
    uint64_t v47 = 0xE000000000000000LL;
  }
  uint64_t v48 = type metadata accessor for ContactQuery(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56LL))(v1, 1LL, 1LL, v48);
  ContactRelationshipQuery.init(label:fromContact:)(v46, v47, v1);
  uint64_t v49 = type metadata accessor for ContactRelationshipQuery(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56LL))(v3, 0LL, 1LL, v49);
  return ContactQuery.relationship.setter(v3);
}

uint64_t StopShareETAFlowDelegate.currentDeviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return ShareETAContextProvider.currentDeviceState.getter( &direct field offset for StopShareETAFlowDelegate.currentDeviceState,  a1);
}

uint64_t StopShareETAFlowDelegate.currentDeviceState.setter(__int128 *a1)
{
  return ShareETAContextProvider.currentDeviceState.setter( a1,  &direct field offset for StopShareETAFlowDelegate.currentDeviceState);
}

uint64_t (*StopShareETAFlowDelegate.currentDeviceState.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

id StopShareETAFlowDelegate.logObject.getter()
{
  return *(id *)(v0 + direct field offset for StopShareETAFlowDelegate.logObject);
}

void *StopShareETAFlowDelegate.stopShareETAIntent.getter()
{
  uint64_t v1 = (void **)(v0 + direct field offset for StopShareETAFlowDelegate.stopShareETAIntent);
  swift_beginAccess(v0 + direct field offset for StopShareETAFlowDelegate.stopShareETAIntent, v5, 0LL, 0LL);
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void StopShareETAFlowDelegate.stopShareETAIntent.setter(void *a1)
{
  id v3 = (void **)(v1 + direct field offset for StopShareETAFlowDelegate.stopShareETAIntent);
  swift_beginAccess(v3, v5, 1LL, 0LL);
  id v4 = *v3;
  *id v3 = a1;
}

uint64_t (*StopShareETAFlowDelegate.stopShareETAIntent.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t StopShareETAFlowDelegate.isPOMMES.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for StopShareETAFlowDelegate.isPOMMES);
  swift_beginAccess(v0 + direct field offset for StopShareETAFlowDelegate.isPOMMES, v3, 0LL, 0LL);
  return *v1;
}

uint64_t StopShareETAFlowDelegate.isPOMMES.setter(char a1)
{
  id v3 = (_BYTE *)(v1 + direct field offset for StopShareETAFlowDelegate.isPOMMES);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *id v3 = a1;
  return result;
}

uint64_t (*StopShareETAFlowDelegate.isPOMMES.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t StopShareETAFlowDelegate.__allocating_init(stopShareETAIntent:isPOMMES:)(void *a1, char a2)
{
  uint64_t v5 = specialized StopShareETAFlowDelegate.init(stopShareETAIntent:isPOMMES:)(a1, a2);

  return v5;
}

uint64_t StopShareETAFlowDelegate.init(stopShareETAIntent:isPOMMES:)(void *a1, char a2)
{
  uint64_t v3 = specialized StopShareETAFlowDelegate.init(stopShareETAIntent:isPOMMES:)(a1, a2);

  return v3;
}

uint64_t StopShareETAFlowDelegate.__allocating_init(deviceState:isPOMMES:)(void *a1, char a2)
{
  return StopShareETAFlowDelegate.init(deviceState:isPOMMES:)(a1, a2);
}

uint64_t StopShareETAFlowDelegate.init(deviceState:isPOMMES:)(void *a1, char a2)
{
  uint64_t v5 = direct field offset for StopShareETAFlowDelegate.logObject;
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  swift_retain(v2);
  *(void *)(v2 + v5) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000018LL,  0x8000000000097AE0LL);
  *(void *)(v2 + direct field offset for StopShareETAFlowDelegate.stopShareETAIntent) = 0LL;
  outlined init with copy of DeviceState( (uint64_t)a1,  v2 + direct field offset for StopShareETAFlowDelegate.currentDeviceState);
  *(_BYTE *)(v2 + direct field offset for StopShareETAFlowDelegate.isPOMMES) = a2;
  uint64_t v6 = swift_release(v2);
  uint64_t v7 = BaseRCHFlowDelegate.init()(v6);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v7;
}

uint64_t StopShareETAFlowDelegate.makeIntentFromParse(parse:previousIntent:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for StopShareETAFlowDelegate + *v0 + 56))();
}

uint64_t StopShareETAFlowDelegate.makeUnsupportedValueBehavior(app:intent:parameterName:intentResolutionResult:)@<X0>( void *a1@<X4>, uint64_t a2@<X8>)
{
  id v4 = *(os_log_s **)(v2 + direct field offset for StopShareETAFlowDelegate.logObject);
  id v5 = a1;
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v4, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v16 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    [v5 unsupportedReason];
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    unint64_t v11 = v10;
    uint64_t v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);

    swift_bridgeObjectRelease(v11);
    _os_log_impl(&dword_0, v4, v6, "makeUnsupportedValueBehavior with result %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v12 = enum case for UnsupportedValueBehavior.dialogAndStop(_:);
  uint64_t v13 = type metadata accessor for UnsupportedValueBehavior(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104LL))(a2, v12, v13);
}

uint64_t StopShareETAFlowDelegate.makeAppResolution()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = static os_log_type_t.info.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  os_log(_:dso:log:_:_:)( v9,  &dword_0,  *(void *)(v8 + direct field offset for StopShareETAFlowDelegate.logObject),  "makeAppResolution executed",  26LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeoAppResolutionService<INStopShareETAIntent>);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  return AppResolutionService.init()();
}

uint64_t StopShareETAFlowDelegate.makeDialogTemplating()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = static os_log_type_t.info.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = os_log(_:dso:log:_:_:)( v9,  &dword_0,  *(void *)((char *)v8 + direct field offset for StopShareETAFlowDelegate.logObject),  "makeDialogTemplating executed",  29LL,  2LL,  _swiftEmptyArrayStorage);
  (*(void (**)(void *__return_ptr, uint64_t))(class metadata base offset for StopShareETAFlowDelegate
                                                        + *v8
                                                        + 32))( v13,  v10);
  uint64_t v11 = type metadata accessor for StopShareETATemplatingService(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  return StopShareETATemplatingService.init(deviceState:)(v13);
}

uint64_t StopShareETATemplatingService.__allocating_init(deviceState:)(void *a1)
{
  return StopShareETATemplatingService.init(deviceState:)(a1);
}

BOOL StopShareETAFlowDelegate.shouldConfirmIntentWithUser(intent:intentResponse:)( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = static os_log_type_t.info.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v12 = *(os_log_s **)(v8 + direct field offset for StopShareETAFlowDelegate.logObject);
  os_log(_:dso:log:_:_:)(v11, &dword_0, v12, "shouldConfirmIntentWithUser", 27LL, 2LL, _swiftEmptyArrayStorage);
  id v13 = [a1 recipients];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
    uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

    if ((unint64_t)v16 >> 62)
    {
      uint64_t v31 = v16 < 0 ? v16 : v16 & 0xFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRetain(v16);
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v31);
      swift_bridgeObjectRelease(v16);
    }

    else
    {
      uint64_t v17 = *(void *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFF8LL));
    }

    uint64_t v18 = swift_bridgeObjectRelease(v16);
    if (v17)
    {
      os_log_type_t v19 = static os_log_type_t.default.getter(v18);
      BOOL result = os_log_type_enabled(v12, v19);
      if (!result) {
        return result;
      }
      unint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v21 = 0;
      _os_log_impl(&dword_0, v12, v19, "specific contact in intent", v21, 2u);
      swift_slowDealloc(v21, -1LL, -1LL);
      return 0LL;
    }
  }

  id v22 = [a2 recipients];
  if (!v22)
  {
    uint64_t v30 = static os_log_type_t.error.getter(0LL);
    os_log(_:dso:log:_:_:)(v30, &dword_0, v12, "recipients nil", 14LL, 2LL, _swiftEmptyArrayStorage);
    return 0LL;
  }

  id v23 = v22;
  uint64_t v24 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
  uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, v24);

  if ((unint64_t)v25 >> 62)
  {
    if (v25 < 0) {
      uint64_t v32 = v25;
    }
    else {
      uint64_t v32 = v25 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v25);
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_bridgeObjectRelease(v25);
  }

  else
  {
    uint64_t v26 = *(void *)((char *)&dword_10 + (v25 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v27 = swift_bridgeObjectRelease(v25);
  if (v26 < 2) {
    return 0LL;
  }
  os_log_type_t v28 = static os_log_type_t.default.getter(v27);
  if (os_log_type_enabled(v12, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl(&dword_0, v12, v28, "stop sharing ETA - recipients should confirm with user", v29, 2u);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  return 1LL;
}

uint64_t StopShareETAFlowDelegate.makeConfirmationStateFromParse(parse:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Parse(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (void **)((char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = type metadata accessor for NLIntent(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin();
  uint64_t v15 = (char *)&v42 - v14;
  uint64_t v23 = static os_log_type_t.info.getter(v13, v16, v17, v18, v19, v20, v21, v22);
  os_log(_:dso:log:_:_:)( v23,  &dword_0,  *(void *)(v2 + direct field offset for StopShareETAFlowDelegate.logObject),  "stop sharing ETA makeConfirmationStateFromParse",  47LL,  2LL,  _swiftEmptyArrayStorage);
  (*(void (**)(void **, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  int v24 = (*(uint64_t (**)(void **, uint64_t))(v6 + 88))(v8, v5);
  if (v24 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(void **, uint64_t))(v6 + 96))(v8, v5);
    goto LABEL_5;
  }

  if (v24 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(void **, uint64_t))(v6 + 96))(v8, v5);
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release(*(void **)((char *)v8 + *(int *)(v25 + 48)));
LABEL_5:
    uint64_t v26 = *(void (**)(char *, void **, uint64_t))(v10 + 32);
    v26(v15, v8, v9);
    v26(v12, (void **)v15, v9);
    uint64_t v27 = type metadata accessor for LocationSearchIntent(0LL);
    uint64_t v28 = swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
    uint64_t v29 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
    if (one-time initialization token for domainNode != -1) {
      swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
    }
    uint64_t v30 = static LocationSearchIntent.domainNode;
    *(void *)(v28 + v29) = static LocationSearchIntent.domainNode;
    v26((char *)(v28 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent), (void **)v12, v9);
    uint64_t v42 = v28;
    uint64_t v31 = one-time initialization token for confirmationNode;
    swift_retain(v30);
    if (v31 != -1) {
      swift_once( &one-time initialization token for confirmationNode,  one-time initialization function for confirmationNode);
    }
    uint64_t v32 = static LocationSearchIntent.confirmationNode;
    unint64_t v33 = lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent();
    IntentNodeTraversable.value<A>(forNode:)(&v43, v32, v27, v33);
    swift_release(v28);
    __asm { BR              X10 }
  }

  if (v24 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(void **, uint64_t))(v6 + 96))(v8, v5);
    int v34 = *v8;
    uint64_t v35 = type metadata accessor for LocationSearchIntent(0LL);
    swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
    id v36 = v34;
    uint64_t v37 = LocationSearchIntent.init(from:)(v36);
    char v38 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 152LL))(v37);
    swift_release(v37);

    __asm { BR              X10 }
  }

  uint64_t v39 = enum case for SiriKitConfirmationState.unset(_:);
  uint64_t v40 = type metadata accessor for SiriKitConfirmationState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 104LL))(a2, v39, v40);
  return (*(uint64_t (**)(void **, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t StopShareETAFlowDelegate.makeNLContextProvider()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = static os_log_type_t.info.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = os_log(_:dso:log:_:_:)( v9,  &dword_0,  *(void *)((char *)v8 + direct field offset for StopShareETAFlowDelegate.logObject),  "Returning StopShareETAContextProvider",  37LL,  2LL,  _swiftEmptyArrayStorage);
  char v11 = (*(uint64_t (**)(uint64_t))(class metadata base offset for StopShareETAFlowDelegate + *v8 + 80))(v10);
  uint64_t v12 = type metadata accessor for StopShareETAContextProvider(0LL);
  uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v14 = direct field offset for StopShareETAContextProvider.logObject;
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  swift_retain(v13);
  *(void *)(v13 + v14) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001BLL,  0x8000000000097B00LL);
  *(_BYTE *)(v13 + direct field offset for StopShareETAContextProvider.isPOMMES) = v11 & 1;
  uint64_t v15 = swift_release(v13);
  return DefaultNLContextProvider.init()(v15);
}

uint64_t StopShareETAContextProvider.__allocating_init(isPOMMES:)(char a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  uint64_t v4 = direct field offset for StopShareETAContextProvider.logObject;
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  swift_retain(v3);
  *(void *)(v3 + v4) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001BLL,  0x8000000000097B00LL);
  *(_BYTE *)(v3 + direct field offset for StopShareETAContextProvider.isPOMMES) = a1;
  uint64_t v5 = swift_release(v3);
  return DefaultNLContextProvider.init()(v5);
}

void StopShareETAFlowDelegate.init()()
{
}

void StopShareETAFlowDelegate.__ivar_destroyer()
{
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0
                                                        + direct field offset for StopShareETAFlowDelegate.currentDeviceState));
}

uint64_t StopShareETAFlowDelegate.deinit()
{
  uint64_t v0 = BaseRCHFlowDelegate.deinit();
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0
                                                        + direct field offset for StopShareETAFlowDelegate.currentDeviceState));

  return v0;
}

uint64_t StopShareETAFlowDelegate.__deallocating_deinit()
{
  uint64_t v0 = BaseRCHFlowDelegate.deinit();
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0
                                                        + direct field offset for StopShareETAFlowDelegate.currentDeviceState));

  return swift_deallocClassInstance(v0, 73LL, 7LL);
}

id StopShareETAContextProvider.logObject.getter()
{
  return *(id *)(v0 + direct field offset for StopShareETAContextProvider.logObject);
}

uint64_t StopShareETAContextProvider.isPOMMES.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for StopShareETAContextProvider.isPOMMES);
  swift_beginAccess(v0 + direct field offset for StopShareETAContextProvider.isPOMMES, v3, 0LL, 0LL);
  return *v1;
}

uint64_t StopShareETAContextProvider.isPOMMES.setter(char a1)
{
  uint64_t v3 = (_BYTE *)(v1 + direct field offset for StopShareETAContextProvider.isPOMMES);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*StopShareETAContextProvider.isPOMMES.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t StopShareETAContextProvider.init(isPOMMES:)(char a1)
{
  uint64_t v3 = direct field offset for StopShareETAContextProvider.logObject;
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  swift_retain(v1);
  *(void *)(v1 + v3) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001BLL,  0x8000000000097B00LL);
  *(_BYTE *)(v1 + direct field offset for StopShareETAContextProvider.isPOMMES) = a1;
  uint64_t v4 = swift_release(v1);
  return DefaultNLContextProvider.init()(v4);
}

uint64_t StopShareETAContextProvider.makeContextForHandleIntent(intent:handleIntentResponse:_:)( uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = type metadata accessor for PommesContext.Source(0LL);
  uint64_t v35 = *(void *)(v37 - 8);
  __chkstk_darwin();
  id v36 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  __chkstk_darwin();
  char v38 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(os_log_s **)((char *)v3 + direct field offset for StopShareETAContextProvider.logObject);
  os_log_type_t v16 = static os_log_type_t.default.getter(v12);
  uint64_t v17 = os_log_type_enabled(v15, v16);
  if ((_DWORD)v17)
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    int v34 = v7;
    uint64_t v19 = a3;
    uint64_t v20 = v18;
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_0, v15, v16, "makeContextForHandleIntent", v18, 2u);
    uint64_t v21 = v20;
    a3 = v19;
    uint64_t v7 = v34;
    uint64_t v17 = swift_slowDealloc(v21, -1LL, -1LL);
  }

  uint64_t v22 = NLContextUpdate.init()(v17);
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(class metadata base offset for StopShareETAContextProvider + *v3 + 16))(v22);
  if ((v23 & 1) != 0)
  {
    os_log_type_t v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v15, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_0, v15, v24, "makeContextForHandleIntent adding pommesContext", v25, 2u);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    uint64_t v26 = v36;
    (*(void (**)(char *, void, uint64_t))(v35 + 104))( v36,  enum case for PommesContext.Source.pluginDefined(_:),  v37);
    uint64_t v27 = v38;
    PommesContext.init(source:domain:listenAfterSpeaking:)(v26, 7300455LL, 0xE300000000000000LL, 0LL);
    uint64_t v28 = type metadata accessor for PommesContext(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v27, 0LL, 1LL, v28);
    NLContextUpdate.pommesContext.setter(v27);
  }

  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v30 = swift_allocObject(v29, 40LL, 7LL);
  *(_OWORD *)(v30 + 16) = xmmword_95900;
  uint64_t v31 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INStopShareETAIntent,  &OBJC_CLASS___INStopShareETAIntent_ptr);
  uint64_t v32 = static ConversationStateAttachmentUtils.makeAttachmentToClearSlotResolutionState<A>(intent:)(a1, v31);
  *(void *)(v30 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v32;
  uint64_t v39 = v30;
  specialized Array._endMutation()(v32);
  NLContextUpdate.conversationStateAttachments.setter(v39);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v7, v14, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0LL, 1LL, v10);
  a3(v7);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v7,  &demangling cache variable for type metadata for NLContextUpdate?);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t StopShareETAContextProvider.makeContextForConfirmIntent(intent:confirmIntentResponse:_:)( uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v39 = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = type metadata accessor for PommesContext.Source(0LL);
  uint64_t v8 = *(void *)(v38 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for NLContextUpdate(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin();
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = static os_log_type_t.info.getter(v15, v18, v19, v20, v21, v22, v23, v24);
  uint64_t v26 = *(os_log_s **)((char *)v4 + direct field offset for StopShareETAContextProvider.logObject);
  uint64_t v27 = os_log(_:dso:log:_:_:)( v25,  &dword_0,  v26,  "stop sharing ETA makeContextForConfirmIntent",  44LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v28 = NLContextUpdate.init()(v27);
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(class metadata base offset for StopShareETAContextProvider + *v4 + 16))(v28);
  if ((v29 & 1) != 0)
  {
    os_log_type_t v30 = static os_log_type_t.default.getter(v29);
    if (os_log_type_enabled(v26, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      uint64_t v37 = a3;
      uint64_t v32 = v31;
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl(&dword_0, v26, v30, "makeContextForConfirmIntent adding pommesContext", v31, 2u);
      unint64_t v33 = v32;
      a3 = v37;
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    (*(void (**)(char *, void, uint64_t))(v8 + 104))( v10,  enum case for PommesContext.Source.pluginDefined(_:),  v38);
    PommesContext.init(source:domain:listenAfterSpeaking:)(v10, 7300455LL, 0xE300000000000000LL, 1LL);
    uint64_t v34 = type metadata accessor for PommesContext(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))(v12, 0LL, 1LL, v34);
    NLContextUpdate.pommesContext.setter(v12);
  }

  NLContextUpdate.weightedPromptTargetDomain.setter(0xD000000000000020LL, 0x800000000009CD80LL);
  NLContextUpdate.weightedPromptStrict.setter(1LL);
  NLContextUpdate.weightedPromptAbortValues.setter(&outlined read-only object #0 of StopShareETAContextProvider.makeContextForConfirmIntent(intent:confirmIntentResponse:_:));
  NLContextUpdate.weightedPromptResponseTargets.setter(&outlined read-only object #1 of StopShareETAContextProvider.makeContextForConfirmIntent(intent:confirmIntentResponse:_:));
  NLContextUpdate.weightedPromptResponseOptions.setter(&outlined read-only object #2 of StopShareETAContextProvider.makeContextForConfirmIntent(intent:confirmIntentResponse:_:));
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v7, v17, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v7, 0LL, 1LL, v13);
  a3(v7);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v7,  &demangling cache variable for type metadata for NLContextUpdate?);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

void StopShareETAContextProvider.init()()
{
}

void StopShareETAContextProvider.__ivar_destroyer()
{
}

uint64_t StopShareETAContextProvider.deinit()
{
  uint64_t v0 = DefaultNLContextProvider.deinit();

  return v0;
}

uint64_t StopShareETAContextProvider.__deallocating_deinit()
{
  uint64_t v0 = DefaultNLContextProvider.deinit();

  return swift_deallocClassInstance(v0, 25LL, 7LL);
}

uint64_t StopShareETATemplatingService.catService.getter()
{
  return swift_retain(*(void *)(v0 + direct field offset for StopShareETATemplatingService.catService));
}

id StopShareETATemplatingService.logObject.getter()
{
  return *(id *)(v0 + direct field offset for StopShareETATemplatingService.logObject);
}

uint64_t StopShareETATemplatingService.device.getter@<X0>(uint64_t a1@<X8>)
{
  return ShareETAContextProvider.currentDeviceState.getter( &direct field offset for StopShareETATemplatingService.device,  a1);
}

uint64_t StopShareETATemplatingService.device.setter(__int128 *a1)
{
  return ShareETAContextProvider.currentDeviceState.setter( a1,  &direct field offset for StopShareETATemplatingService.device);
}

uint64_t (*StopShareETATemplatingService.device.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t StopShareETATemplatingService.init(deviceState:)(void *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DucTemplatingLocalContext?);
  __chkstk_darwin();
  uint64_t v34 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Locale(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CATService();
  uint64_t v10 = swift_allocObject(v9, 40LL, 7LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v9);
  uint64_t v12 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
  swift_retain(v2);
  *(void *)(v10 + 24) = [v12 bundleForClass:ObjCClassFromMetadata];
  uint64_t v13 = direct field offset for StopShareETATemplatingService.catService;
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  *(void *)(v10 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v10 + 16) = 0;
  *(void *)(v2 + v__swift_destroy_boxed_opaque_existential_0Tm(v0 + 13) = v10;
  uint64_t v14 = direct field offset for StopShareETATemplatingService.logObject;
  uint64_t v15 = (os_log_s *)OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001DLL,  0x8000000000097B20LL);
  *(void *)(v2 + v14) = v15;
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_0, v15, v16, "initializing", v17, 2u);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  outlined init with copy of DeviceState((uint64_t)a1, v2 + direct field offset for StopShareETATemplatingService.device);
  swift_release(v2);
  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v18);
  uint64_t v20 = dispatch thunk of DeviceState.siriLocale.getter(v18, v19);
  uint64_t v21 = Locale.identifier.getter(v20);
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v36[0] = v21;
  v36[1] = v23;
  v35[0] = 45LL;
  v35[1] = 0xE100000000000000LL;
  v37[0] = 95LL;
  v37[1] = 0xE100000000000000LL;
  unint64_t v24 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v35,  v37,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v24,  v24,  v24);
  uint64_t v27 = v26;
  swift_bridgeObjectRelease(v23);
  static Device.current.getter(v36);
  uint64_t v28 = type metadata accessor for DucTemplatingLocalContext(0LL);
  uint64_t v29 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v34, 1LL, 1LL, v28);
  unint64_t v30 = specialized Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  static AceService.current.getter(v35);
  uint64_t v31 = DucTemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:deviceState:localContext:)( 0x4154456572616853LL,  0xE800000000000000LL,  v25,  v27,  v30,  v35,  v36,  v29);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v31;
}

void StopShareETATemplatingService.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t *), uint64_t a9)
{
  uint64_t v70 = a8;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin();
  uint64_t v14 = (uint64_t *)((char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  type metadata accessor for Locale(0LL);
  uint64_t v15 = __chkstk_darwin();
  uint64_t v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(os_log_s **)(v9 + direct field offset for StopShareETATemplatingService.logObject);
  os_log_type_t v19 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_0, v18, v19, "makeParameterValueUnsupportedDialog", v20, 2u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  unint64_t v21 = (unint64_t)[a4 unsupportedReason];
  uint64_t v29 = static os_log_type_t.info.getter(v21, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v31 = swift_allocObject(v30, 72LL, 7LL);
  *(_OWORD *)(v31 + 16) = xmmword_95430;
  *(void *)(v31 + 56) = &type metadata for Int;
  *(void *)(v31 + 64) = &protocol witness table for Int;
  *(void *)(v31 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v21;
  os_log(_:dso:log:_:_:)(v29, &dword_0, v18, "unsupported reason %d", v69);
  swift_bridgeObjectRelease(v31);
  if ((v21 & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    uint64_t v32 = *(void *)(v9 + direct field offset for StopShareETATemplatingService.catService);
    uint64_t v33 = type metadata accessor for ShareETA(0LL);
    uint64_t v75 = v33;
    uint64_t v76 = &protocol witness table for ShareETA;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v74);
    uint64_t v35 = v33;
    uint64_t v36 = 12LL;
LABEL_19:
    uint64_t v61 = swift_storeEnumTagMultiPayload(boxed_opaque_existential_0, v35, v36);
    uint64_t v62 = static DialogHelper.globals.getter(v61);
    (*(void (**)(void *, uint64_t, void (*)(uint64_t *), uint64_t))(*(void *)v32 + 120LL))( v74,  v62,  v70,  a9);
    swift_bridgeObjectRelease(v62);
    goto LABEL_20;
  }

  id v37 = [a5 recipients];
  if (!v37)
  {
LABEL_27:
    uint64_t v65 = static os_log_type_t.error.getter(v37);
    os_log(_:dso:log:_:_:)(v65, &dword_0, v18, "recipients can't be nil or empty", 32LL, 2LL, _swiftEmptyArrayStorage);
    unint64_t v66 = lazy protocol witness table accessor for type StopShareETATemplatingService.StopShareETATemplatingServiceError and conformance StopShareETATemplatingService.StopShareETATemplatingServiceError();
    uint64_t v67 = swift_allocError( &type metadata for StopShareETATemplatingService.StopShareETATemplatingServiceError,  v66,  0LL,  0LL);
    *uint64_t v68 = 0xD000000000000020LL;
    v68[1] = 0x800000000009D9D0LL;
    *uint64_t v14 = v67;
    swift_storeEnumTagMultiPayload(v14, v12, 1LL);
    v70(v14);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v14,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    return;
  }

  uint64_t v38 = v37;
  uint64_t v39 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
  uint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v38, v39);

  if (!((unint64_t)v40 >> 62))
  {
    goto LABEL_26;
  }

  if (v40 < 0) {
    uint64_t v63 = v40;
  }
  else {
    uint64_t v63 = v40 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v40);
  uint64_t v64 = _CocoaArrayWrapper.endIndex.getter(v63);
  swift_bridgeObjectRelease(v40);
  if (!v64)
  {
LABEL_26:
    id v37 = (id)swift_bridgeObjectRelease(v40);
    goto LABEL_27;
  }

uint64_t StopShareETATemplatingService.makeIntentConfirmationDialog(app:intent:intentResponse:_:)( uint64_t a1, void *a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin();
  uint64_t v11 = (void *)((char *)&v34[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v12 = [a2 recipients];
  if (!v12) {
    goto LABEL_6;
  }
  uint64_t v13 = v12;
  uint64_t v14 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
  uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

  if ((unint64_t)v15 >> 62)
  {
    uint64_t v32 = v15 < 0 ? v15 : v15 & 0xFFFFFFFFFFFFFF8LL;
    swift_bridgeObjectRetain(v15);
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_bridgeObjectRelease(v15);
  }

  else
  {
    uint64_t v16 = *(void *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFF8LL));
  }

  id v12 = (id)swift_bridgeObjectRelease(v15);
  if (v16)
  {
    uint64_t v17 = static os_log_type_t.error.getter(v12);
    os_log(_:dso:log:_:_:)( v17,  &dword_0,  *(void *)(v5 + direct field offset for StopShareETATemplatingService.logObject),  "stop sharing ETA - shouldn't need confirmation dialog with specific recipient",  77LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v18 = lazy protocol witness table accessor for type StopShareETATemplatingService.StopShareETATemplatingServiceError and conformance StopShareETATemplatingService.StopShareETATemplatingServiceError();
    uint64_t v19 = swift_allocError( &type metadata for StopShareETATemplatingService.StopShareETATemplatingServiceError,  v18,  0LL,  0LL);
    *uint64_t v20 = 0xD000000000000043LL;
    v20[1] = 0x800000000009DA50LL;
    *uint64_t v11 = v19;
    swift_storeEnumTagMultiPayload(v11, v9, 1LL);
    a4(v11);
    return outlined destroy of (label: String?, value: Any)?( (uint64_t)v11,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  }

  else
  {
LABEL_6:
    uint64_t v22 = *(os_log_s **)(v5 + direct field offset for StopShareETATemplatingService.logObject);
    os_log_type_t v23 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_0, v22, v23, "stop sharing ETA - makeIntentConfirmationDialog", v24, 2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    uint64_t v25 = *(void *)(v5 + direct field offset for StopShareETATemplatingService.catService);
    uint64_t v26 = type metadata accessor for ShareETA(0LL);
    v34[3] = v26;
    void v34[4] = &protocol witness table for ShareETA;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v34);
    uint64_t v28 = enum case for BehaviorAfterSpeaking.listen(_:);
    uint64_t v29 = type metadata accessor for BehaviorAfterSpeaking(0LL);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 104LL))( boxed_opaque_existential_0,  v28,  v29);
    uint64_t v30 = swift_storeEnumTagMultiPayload(boxed_opaque_existential_0, v26, 9LL);
    uint64_t v31 = static DialogHelper.globals.getter(v30);
    (*(void (**)(void *, uint64_t, void (*)(uint64_t *), uint64_t))(*(void *)v25 + 120LL))( v34,  v31,  a4,  a5);
    swift_bridgeObjectRelease(v31);
    return __swift_destroy_boxed_opaque_existential_0Tm(v34);
  }

uint64_t StopShareETATemplatingService.makeFailureHandlingIntentDialog(app:intent:intentResponse:_:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(os_log_s **)(v5 + direct field offset for StopShareETATemplatingService.logObject);
  os_log_type_t v10 = static os_log_type_t.default.getter(a1);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_0, v9, v10, "makeFailureHandlingIntentDialog", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  if (!a3) {
    goto LABEL_8;
  }
  id v12 = (int *)[a3 code];
  if (v12 == (int *)((char *)&dword_C + 3))
  {
    uint64_t v13 = *(void *)(v5 + direct field offset for StopShareETATemplatingService.catService);
    uint64_t v19 = type metadata accessor for ShareETA(0LL);
    uint64_t v25 = v19;
    uint64_t v26 = &protocol witness table for ShareETA;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v24);
    uint64_t v16 = v19;
    uint64_t v17 = 20LL;
    goto LABEL_11;
  }

  if (v12 == (int *)((char *)&dword_C + 1))
  {
    uint64_t v13 = *(void *)(v5 + direct field offset for StopShareETATemplatingService.catService);
    uint64_t v20 = type metadata accessor for ShareETA(0LL);
    uint64_t v25 = v20;
    uint64_t v26 = &protocol witness table for ShareETA;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v24);
    uint64_t v16 = v20;
    uint64_t v17 = 17LL;
    goto LABEL_11;
  }

  if (v12 == &dword_C)
  {
    uint64_t v13 = *(void *)(v5 + direct field offset for StopShareETATemplatingService.catService);
    uint64_t v14 = type metadata accessor for ShareETA(0LL);
    uint64_t v25 = v14;
    uint64_t v26 = &protocol witness table for ShareETA;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v24);
    uint64_t v16 = v14;
    uint64_t v17 = 13LL;
  }

  else
  {
LABEL_8:
    uint64_t v13 = *(void *)(v5 + direct field offset for StopShareETATemplatingService.catService);
    uint64_t v18 = type metadata accessor for ShareETA(0LL);
    uint64_t v25 = v18;
    uint64_t v26 = &protocol witness table for ShareETA;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v24);
    *(_BYTE *)boxed_opaque_existential_0 = 1;
    uint64_t v16 = v18;
    uint64_t v17 = 5LL;
  }

void StopShareETATemplatingService.makeIntentHandledDialog(app:intent:intentResponse:_:)( uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin();
  uint64_t v11 = (void *)((char *)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  type metadata accessor for Locale(0LL);
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = (char *)v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(os_log_s **)(v5 + direct field offset for StopShareETATemplatingService.logObject);
  os_log_type_t v16 = static os_log_type_t.default.getter(v12);
  uint64_t v17 = os_log_type_enabled(v15, v16);
  if ((_DWORD)v17)
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_0, v15, v16, "stop sharing ETA - makeIntentHandledDialog", v18, 2u);
    uint64_t v17 = swift_slowDealloc(v18, -1LL, -1LL);
  }

  if (!a3)
  {
    uint64_t v35 = static os_log_type_t.error.getter(v17);
    os_log(_:dso:log:_:_:)( v35,  &dword_0,  v15,  "stop sharing ETA - intent response can't be nil",  47LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v36 = lazy protocol witness table accessor for type StopShareETATemplatingService.StopShareETATemplatingServiceError and conformance StopShareETATemplatingService.StopShareETATemplatingServiceError();
    uint64_t v37 = swift_allocError( &type metadata for StopShareETATemplatingService.StopShareETATemplatingServiceError,  v36,  0LL,  0LL);
    *uint64_t v38 = 0xD000000000000015LL;
    v38[1] = 0x800000000009CFD0LL;
    *uint64_t v11 = v37;
    swift_storeEnumTagMultiPayload(v11, v9, 1LL);
    a4(v11);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v11,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    return;
  }

  id v19 = a3;
  id v20 = [v19 recipients];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
    uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

    if ((v23 & 0xC000000000000001LL) != 0)
    {
      id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v23);
    }

    else
    {
      if (!*(void *)((char *)&dword_10 + (v23 & 0xFFFFFFFFFFFFF8LL)))
      {
        __break(1u);
        return;
      }

      id v24 = *(id *)(v23 + 32);
    }

    uint64_t v25 = v24;
    uint64_t v63 = a4;
    uint64_t v64 = a5;
    swift_bridgeObjectRelease(v23);
    id v26 = v25;
    os_log_type_t v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v15, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v61 = swift_slowAlloc(32LL, -1LL);
      v69[0] = v61;
      *(_DWORD *)uint64_t v28 = 136315138;
      v60[1] = v28 + 4;
      id v29 = [v26 displayName];
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      id v62 = v19;
      unint64_t v32 = v31;

      uint64_t v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);

      unint64_t v33 = v32;
      id v19 = v62;
      swift_bridgeObjectRelease(v33);
      _os_log_impl(&dword_0, v15, v27, "stop sharing ETA - stop sharing ETA to %s", v28, 0xCu);
      uint64_t v34 = v61;
      swift_arrayDestroy(v61, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v51 = *(void *)(v5 + direct field offset for StopShareETATemplatingService.catService);
    uint64_t v52 = type metadata accessor for ShareETA(0LL);
    uint64_t v70 = v52;
    uint64_t v71 = &protocol witness table for ShareETA;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v69);
    type metadata accessor for DialogPerson(0LL);
    id v54 = v26;
    static Device.current.getter(&v65);
    uint64_t v55 = v67;
    uint64_t v56 = v68;
    __swift_project_boxed_opaque_existential_1(&v65, v67);
    dispatch thunk of DeviceState.siriLocale.getter(v55, v56);
    uint64_t v57 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)(v54, v14, 1LL);
    __swift_destroy_boxed_opaque_existential_0Tm(&v65);
    *(_BYTE *)boxed_opaque_existential_0 = 1;
    boxed_opaque_existential_0[1] = v57;
    boxed_opaque_existential_0[2] = 0LL;
    uint64_t v58 = swift_storeEnumTagMultiPayload(boxed_opaque_existential_0, v52, 1LL);
    uint64_t v59 = static DialogHelper.globals.getter(v58);
    (*(void (**)(uint64_t *, uint64_t, void (*)(uint64_t *), uint64_t))(*(void *)v51 + 120LL))( v69,  v59,  v63,  v64);
    swift_bridgeObjectRelease(v59);
  }

  else
  {
    uint64_t v39 = a4;
    uint64_t v40 = a5;
    os_log_type_t v41 = static os_log_type_t.default.getter(0LL);
    if (os_log_type_enabled(v15, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl(&dword_0, v15, v41, "recipients nil - stop sharing ETA for all", v42, 2u);
      swift_slowDealloc(v42, -1LL, -1LL);
    }

    uint64_t v43 = *(void *)(v5 + direct field offset for StopShareETATemplatingService.catService);
    uint64_t v44 = type metadata accessor for ShareETA(0LL);
    uint64_t v70 = v44;
    uint64_t v71 = &protocol witness table for ShareETA;
    os_log_t v45 = __swift_allocate_boxed_opaque_existential_0(v69);
    uint64_t v46 = type metadata accessor for DialogPerson.Builder(0LL);
    swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
    uint64_t v47 = DialogPerson.Builder.init()();
    uint64_t v48 = dispatch thunk of DialogPerson.Builder.build()();
    swift_release(v47);
    *(_BYTE *)os_log_t v45 = 1;
    v45[1] = v48;
    _OWORD v45[2] = 0LL;
    uint64_t v49 = swift_storeEnumTagMultiPayload(v45, v44, 1LL);
    uint64_t v50 = static DialogHelper.globals.getter(v49);
    (*(void (**)(uint64_t *, uint64_t, void (*)(uint64_t *), uint64_t))(*(void *)v43 + 120LL))( v69,  v50,  v39,  v40);
    swift_bridgeObjectRelease(v50);
  }

  __swift_destroy_boxed_opaque_existential_0Tm(v69);
}

uint64_t StopShareETATemplatingService.makeIntentConfirmationCancelledDialog(app:intent:intentResponse:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(os_log_s **)(v5 + direct field offset for StopShareETATemplatingService.logObject);
  os_log_type_t v9 = static os_log_type_t.default.getter(a1);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_0, v8, v9, "makeIntentConfirmationCancelledDialog", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  uint64_t v11 = *(void *)(v5 + direct field offset for StopShareETATemplatingService.catService);
  uint64_t v12 = type metadata accessor for ShareETA(0LL);
  v17[3] = v12;
  v17[4] = &protocol witness table for ShareETA;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v17);
  *(_BYTE *)boxed_opaque_existential_0 = 1;
  boxed_opaque_existential_0[1] = 0LL;
  uint64_t v14 = swift_storeEnumTagMultiPayload(boxed_opaque_existential_0, v12, 0LL);
  uint64_t v15 = static DialogHelper.globals.getter(v14);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 120LL))(v17, v15, a4, a5);
  swift_bridgeObjectRelease(v15);
  return __swift_destroy_boxed_opaque_existential_0Tm(v17);
}

void StopShareETATemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:)()
{
}

void StopShareETATemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:deviceState:localContext:)()
{
}

uint64_t StopShareETATemplatingService.__ivar_destroyer()
{
  return __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0
                                                               + direct field offset for StopShareETATemplatingService.device));
}

uint64_t StopShareETATemplatingService.deinit()
{
  uint64_t v0 = DucTemplatingService.deinit();
  swift_release(*(void *)(v0 + direct field offset for StopShareETATemplatingService.catService));

  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0
                                                        + direct field offset for StopShareETATemplatingService.device));
  return v0;
}

uint64_t StopShareETATemplatingService.__deallocating_deinit()
{
  uint64_t v0 = DucTemplatingService.deinit();
  swift_release(*(void *)(v0 + direct field offset for StopShareETATemplatingService.catService));

  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0
                                                        + direct field offset for StopShareETATemplatingService.device));
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t specialized StopShareETAFlowDelegate.init(stopShareETAIntent:isPOMMES:)(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = direct field offset for StopShareETAFlowDelegate.logObject;
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  swift_retain(v2);
  *(void *)(v2 + v6) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000018LL,  0x8000000000097AE0LL);
  uint64_t v7 = (void **)(v2 + direct field offset for StopShareETAFlowDelegate.stopShareETAIntent);
  *uint64_t v7 = 0LL;
  swift_beginAccess(v7, v13, 1LL, 0LL);
  uint64_t v8 = *v7;
  *uint64_t v7 = a1;
  id v9 = a1;

  static Device.current.getter(v12);
  outlined init with take of CATType(v12, v3 + direct field offset for StopShareETAFlowDelegate.currentDeviceState);
  *(_BYTE *)(v3 + direct field offset for StopShareETAFlowDelegate.isPOMMES) = a2;
  uint64_t v10 = swift_release(v3);
  return BaseRCHFlowDelegate.init()(v10);
}

uint64_t type metadata accessor for StopShareETATemplatingService(uint64_t a1)
{
  return type metadata accessor for ShareETA( a1,  (uint64_t *)&type metadata singleton initialization cache for StopShareETATemplatingService,  (uint64_t)&nominal type descriptor for StopShareETATemplatingService);
}

uint64_t type metadata accessor for StopShareETAContextProvider(uint64_t a1)
{
  return type metadata accessor for ShareETA( a1,  (uint64_t *)&type metadata singleton initialization cache for StopShareETAContextProvider,  (uint64_t)&nominal type descriptor for StopShareETAContextProvider);
}

unint64_t lazy protocol witness table accessor for type StopShareETATemplatingService.StopShareETATemplatingServiceError and conformance StopShareETATemplatingService.StopShareETATemplatingServiceError()
{
  unint64_t result = lazy protocol witness table cache variable for type StopShareETATemplatingService.StopShareETATemplatingServiceError and conformance StopShareETATemplatingService.StopShareETATemplatingServiceError;
  if (!lazy protocol witness table cache variable for type StopShareETATemplatingService.StopShareETATemplatingServiceError and conformance StopShareETATemplatingService.StopShareETATemplatingServiceError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StopShareETATemplatingService.StopShareETATemplatingServiceError,  &type metadata for StopShareETATemplatingService.StopShareETATemplatingServiceError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type StopShareETATemplatingService.StopShareETATemplatingServiceError and conformance StopShareETATemplatingService.StopShareETATemplatingServiceError);
  }

  return result;
}

uint64_t sub_4F384(void **a1)
{
  return (*(uint64_t (**)(void))(class metadata base offset for StopShareETAFlowDelegate + **a1 + 32))();
}

uint64_t sub_4F3B8(uint64_t a1, void **a2)
{
  return (*(uint64_t (**)(_BYTE *))(class metadata base offset for StopShareETAFlowDelegate + **a2 + 40))(v4);
}

uint64_t sub_4F404@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for StopShareETAFlowDelegate + **a1 + 56))();
  *a2 = result;
  return result;
}

uint64_t sub_4F440(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(class metadata base offset for StopShareETAFlowDelegate + **a2 + 64);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_4F488@<X0>(void **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for StopShareETAFlowDelegate + **a1 + 80))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_4F4C8(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))(class metadata base offset for StopShareETAFlowDelegate + **a2 + 88))(*a1);
}

uint64_t sub_4F500@<X0>(void **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for StopShareETAContextProvider + **a1 + 16))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_4F540(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))(class metadata base offset for StopShareETAContextProvider + **a2 + 24))(*a1);
}

uint64_t sub_4F578(void **a1)
{
  return (*(uint64_t (**)(void))(class metadata base offset for StopShareETATemplatingService + **a1 + 24))();
}

uint64_t sub_4F5AC(uint64_t a1, void **a2)
{
  return (*(uint64_t (**)(_BYTE *))(class metadata base offset for StopShareETATemplatingService + **a2 + 32))(v4);
}

uint64_t type metadata accessor for StopShareETAFlowDelegate(uint64_t a1)
{
  return type metadata accessor for ShareETA( a1,  (uint64_t *)&type metadata singleton initialization cache for StopShareETAFlowDelegate,  (uint64_t)&nominal type descriptor for StopShareETAFlowDelegate);
}

uint64_t type metadata completion function for StopShareETAFlowDelegate(uint64_t a1)
{
  v2[0] = &unk_97BC8;
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[2] = &unk_97BE0;
  void v2[3] = &unk_97BF8;
  return swift_initClassMetadata2(a1, 0LL, 4LL, v2, a1 + class metadata base offset for StopShareETAFlowDelegate);
}

uint64_t ObjC metadata update function for StopShareETAFlowDelegate()
{
  return type metadata accessor for StopShareETAFlowDelegate(0LL);
}

uint64_t type metadata completion function for StopShareETAContextProvider(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[1] = &unk_97BF8;
  return swift_initClassMetadata2(a1, 0LL, 2LL, v2, a1 + class metadata base offset for StopShareETAContextProvider);
}

uint64_t ObjC metadata update function for StopShareETAContextProvider()
{
  return type metadata accessor for StopShareETAContextProvider(0LL);
}

uint64_t type metadata completion function for StopShareETATemplatingService(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v2[2] = &unk_97BC8;
  return swift_initClassMetadata2(a1, 0LL, 3LL, v2, a1 + class metadata base offset for StopShareETATemplatingService);
}

uint64_t ObjC metadata update function for StopShareETATemplatingService()
{
  return type metadata accessor for StopShareETATemplatingService(0LL);
}

ValueMetadata *type metadata accessor for StopShareETATemplatingService.StopShareETATemplatingServiceError()
{
  return &type metadata for StopShareETATemplatingService.StopShareETATemplatingServiceError;
}

uint64_t GeoAppResolutionService.__allocating_init()()
{
  return AppResolutionService.init()();
}

uint64_t GeoAppResolutionService.resolveApp(intent:appResolutionState:_:)( uint64_t a1, uint64_t a2, void (*a3)(void *))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<AppResolutionResult, Error>);
  __chkstk_darwin();
  uint64_t v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = type metadata accessor for App(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  void *v6 = App.init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)( 0LL,  0LL,  0xD00000000000002DLL,  0x800000000009C810LL,  0LL,  0LL,  0LL,  0LL);
  uint64_t v8 = enum case for AppResolutionResult.selected(_:);
  uint64_t v9 = type metadata accessor for AppResolutionResult(0LL);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104LL))(v6, v8, v9);
  swift_storeEnumTagMultiPayload(v6, v4, 0LL);
  a3(v6);
  return outlined destroy of Result<AppResolutionResult, Error>((uint64_t)v6);
}

uint64_t outlined destroy of Result<AppResolutionResult, Error>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<AppResolutionResult, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t GeoAppResolutionService.__deallocating_deinit()
{
  uint64_t v0 = AppResolutionService.deinit();
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t type metadata completion function for GeoAppResolutionService(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, class metadata base offset for GeoAppResolutionService + a1 + 8);
}

uint64_t type metadata accessor for GeoAppResolutionService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for GeoAppResolutionService);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  _OWORD v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)&aAny_1[v2 * 8];
  uint64_t v4 = qword_97D98[v2];
  uint64_t v5 = a2;
  uint64_t v6 = *(void *)&aAny_1[v5 * 8];
  uint64_t v7 = qword_97D98[v5];
  if (v3 == v6 && v4 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, qword_97D98[a2], 0LL);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD00000000000002CLL;
  unint64_t v3 = 0x800000000009B750LL;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0xD00000000000002ALL;
    }
    else {
      unint64_t v5 = 0xD000000000000033LL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0x800000000009B780LL;
    }
    else {
      unint64_t v6 = 0x800000000009B7B0LL;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }

  unint64_t v5 = 0xD00000000000002CLL;
  unint64_t v6 = 0x800000000009B750LL;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v2 = 0xD00000000000002ALL;
    }
    else {
      unint64_t v2 = 0xD000000000000033LL;
    }
    if (v7 == 1) {
      unint64_t v3 = 0x800000000009B780LL;
    }
    else {
      unint64_t v3 = 0x800000000009B7B0LL;
    }
  }

LABEL_15:
  if (v5 == v2 && v6 == v3)
  {
    char v8 = 1;
    unint64_t v3 = v6;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0LL);
  }

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

  id v29 = v18(v25);
  uint64_t v30 = LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(v29);
  unint64_t v32 = v31;
  if (v30 == 0x526D7269666E6F63LL && v31 == 0xED000074726F7065LL)
  {
    unint64_t v33 = swift_bridgeObjectRelease(0xED000074726F7065LL);
    goto LABEL_19;
  }

  uint64_t v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, 0x526D7269666E6F63LL, 0xED000074726F7065LL, 0LL);
  unint64_t v33 = swift_bridgeObjectRelease(v32);
  if ((v34 & 1) != 0)
  {
LABEL_19:
    uint64_t v35 = (os_log_s *)p_superclass[367];
    unint64_t v36 = static os_log_type_t.default.getter(v33);
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl(&dword_0, v35, v36, "makeSiriKitIntentWithUserLocation isUpdate=true", v37, 2u);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    uint64_t v38 = 0;
    uint64_t v39 = 0xE600000000000000LL;
    if (a2) {
      goto LABEL_22;
    }
    goto LABEL_24;
  }

  uint64_t v39 = 0LL;
  uint64_t v38 = 1;
  if (a2)
  {
LABEL_22:
    uint64_t v40 =  [(id)objc_opt_self(CLPlacemark) placemarkWithLocation:a2 name:0 postalAddress:0];
    goto LABEL_25;
  }

uint64_t FlowSelector.FlowSelectorKey.hash(into:)(uint64_t a1, unsigned int a2)
{
  unsigned int v3 = a2 >> 8;
  uint64_t v4 = LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(a2);
  uint64_t v6 = v5;
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = (char)v3;
  uint64_t v8 = qword_97D98[v7];
  String.hash(into:)(a1, *(void *)&aAny_1[v7 * 8], v8);
  return swift_bridgeObjectRelease(v8);
}

uint64_t static FlowSelector.FlowSelectorKey.== infix(_:_:)(__int16 a1, __int16 a2)
{
  char v3 = HIBYTE(a1);
  uint64_t v4 = LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(a1);
  uint64_t v6 = v5;
  uint64_t v8 = LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(a2);
  uint64_t v9 = v7;
  if (v4 == v8 && v6 == v7)
  {
    swift_bridgeObjectRelease_n(v6, 2LL);
    return specialized == infix<A>(_:_:)(v3, SHIBYTE(a2));
  }

  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v8, v7, 0LL);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v9);
  if ((v10 & 1) != 0) {
    return specialized == infix<A>(_:_:)(v3, SHIBYTE(a2));
  }
  return 0LL;
}

Swift::Int FlowSelector.FlowSelectorKey.hashValue.getter(unsigned int a1)
{
  return Hasher._finalize()();
}

GeoFlowDelegatePlugin::FlowSelector::FlowSelectorKey __swiftcall FlowSelector.FlowSelectorKey.init(values:)( GeoFlowDelegatePlugin::FlowSelector::FlowSelectorKey values)
{
  return values;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FlowSelector.FlowSelectorKey()
{
  unsigned int v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  FlowSelector.FlowSelectorKey.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FlowSelector.FlowSelectorKey(uint64_t a1)
{
  return FlowSelector.FlowSelectorKey.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FlowSelector.FlowSelectorKey( uint64_t a1)
{
  unsigned int v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  FlowSelector.FlowSelectorKey.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FlowSelector.FlowSelectorKey( char *a1, char *a2)
{
  char v2 = a1[1];
  char v3 = a2[1];
  char v4 = *a2;
  uint64_t v5 = LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(*a1);
  uint64_t v7 = v6;
  uint64_t v8 = LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(v4);
  if (v5 == v8 && v7 == v9)
  {
    swift_bridgeObjectRelease_n(v7, 2LL);
  }

  else
  {
    uint64_t v11 = v9;
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0LL);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v11);
    if ((v12 & 1) == 0) {
      return 0LL;
    }
  }

  return specialized == infix<A>(_:_:)(v2, v3);
}

uint64_t FlowSelector.__allocating_init(with:)(void *a1)
{
  uint64_t v3 = swift_allocObject(v1, 72LL, 7LL);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v4);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v8 + 16))(v7);
  uint64_t v9 = specialized FlowSelector.init(with:)((uint64_t)v7, v3, v4, v5);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v9;
}

uint64_t FlowSelector.init(with:)(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v3);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v7 + 16))(v6);
  uint64_t v8 = specialized FlowSelector.init(with:)((uint64_t)v6, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v8;
}

uint64_t closure #1 in FlowSelector.init(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for TrafficIncidentBaseFlow(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  uint64_t v4 = swift_retain(a1);
  uint64_t v5 = TrafficIncidentBaseFlow.init(with:flowHelper:)(v4, v9);
  v9[0] = v5;
  uint64_t v6 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type TrafficIncidentBaseFlow and conformance TrafficIncidentBaseFlow,  type metadata accessor for TrafficIncidentBaseFlow,  (uint64_t)&protocol conformance descriptor for TrafficIncidentBaseFlow);
  uint64_t v7 = Flow.eraseToAnyFlow()(v3, v6);
  swift_release(v5);
  return v7;
}

uint64_t closure #2 in FlowSelector.init(with:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in FlowSelector.init(with:)(a1, a2, 0LL);
}

uint64_t closure #3 in FlowSelector.init(with:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in FlowSelector.init(with:)(a1, a2, 1LL);
}

uint64_t closure #2 in FlowSelector.init(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ShareETABaseFlow();
  swift_allocObject(v5, 114LL, 7LL);
  uint64_t v6 = swift_retain(a1);
  uint64_t v7 = ShareETABaseFlow.init(with:stopSharing:flowHelper:checkNavigation:)( v6,  a3,  v11,  &type metadata for AssistantProperties,  &protocol witness table for AssistantProperties);
  v11[0] = v7;
  uint64_t v8 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type ShareETABaseFlow and conformance ShareETABaseFlow,  (uint64_t (*)(uint64_t))type metadata accessor for ShareETABaseFlow,  (uint64_t)&protocol conformance descriptor for ShareETABaseFlow);
  uint64_t v9 = Flow.eraseToAnyFlow()(v5, v8);
  swift_release(v7);
  return v9;
}

uint64_t closure #4 in FlowSelector.init(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for TrafficIncidentBaseFlow(0LL);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  uint64_t v6 = swift_retain(a1);
  uint64_t v7 = TrafficIncidentBaseFlow.init(with:flowHelper:)(v6, v10);
  v10[0] = v7;
  uint64_t v8 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type TrafficIncidentBaseFlow and conformance TrafficIncidentBaseFlow,  type metadata accessor for TrafficIncidentBaseFlow,  (uint64_t)&protocol conformance descriptor for TrafficIncidentBaseFlow);
  uint64_t v4 = Flow.eraseToAnyFlow()(v5, v8);
  swift_release(v7);
  return v4;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed LocationSearchIntent) -> (@out AnyFlow?)( uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v4 = a1;
  a2(&v3, &v4);
  return v3;
}

uint64_t FlowSelector.chooseFlow(nlIntent:)(uint64_t a1)
{
  void (*v57)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v58;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __n128 v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint8_t *v73;
  uint64_t v74;
  char *v75;
  os_log_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v3 = type metadata accessor for NLIntent(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin();
  uint64_t v9 = (char *)&v73 - v8;
  os_log_type_t v17 = static os_log_type_t.info.getter(v7, v10, v11, v12, v13, v14, v15, v16);
  uint64_t v77 = v1;
  uint64_t v18 = *(os_log_s **)(v1 + 16);
  id v19 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v19(v9, a1, v3);
  os_log_type_t v20 = v17;
  BOOL v21 = os_log_type_enabled(v18, v17);
  uint64_t v76 = v18;
  if (v21)
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v75 = v6;
    uint64_t v24 = v23;
    uint64_t v80 = v23;
    uint64_t v74 = a1;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v73 = v22 + 4;
    uint64_t v25 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type NLIntent and conformance NLIntent,  (uint64_t (*)(uint64_t))&type metadata accessor for NLIntent,  (uint64_t)&protocol conformance descriptor for NLIntent);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v3, v25);
    unint64_t v28 = v27;
    uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v80);
    a1 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
    unint64_t v29 = v28;
    uint64_t v18 = v76;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    _os_log_impl(&dword_0, v18, v20, "chooseFlow - receives NL intent: %s", v22, 0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v30 = v24;
    uint64_t v6 = v75;
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }

  v19(v6, a1, v3);
  uint64_t v31 = type metadata accessor for LocationSearchIntent(0LL);
  uint64_t v32 = swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  uint64_t v33 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
  if (one-time initialization token for domainNode != -1) {
    swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
  }
  uint64_t v34 = static LocationSearchIntent.domainNode;
  *(void *)(v32 + v33) = static LocationSearchIntent.domainNode;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))( v32 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent,  v6,  v3);
  swift_retain_n(v32, 4LL);
  uint64_t v35 = swift_retain(v34);
  os_log_type_t v36 = static os_log_type_t.default.getter(v35);
  if (os_log_type_enabled(v18, v36))
  {
    uint64_t v37 = swift_slowAlloc(22LL, -1LL);
    uint64_t v38 = swift_slowAlloc(64LL, -1LL);
    uint64_t v79 = v32;
    uint64_t v80 = v38;
    *(_DWORD *)uint64_t v37 = 136315394;
    if (one-time initialization token for verbNode != -1) {
      swift_once(&one-time initialization token for verbNode, one-time initialization function for verbNode);
    }
    uint64_t v39 = static LocationSearchIntent.verbNode;
    uint64_t v40 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent,  type metadata accessor for LocationSearchIntent,  (uint64_t)&protocol conformance descriptor for LocationSearchIntent);
    IntentNodeTraversable.value<A>(forNode:)(&v78, v39, v31, v40);
    char v41 = v78;
    if (v78 == 10) {
      char v41 = 0;
    }
    LOBYTE(v79) = v41;
    uint64_t v42 = String.init<A>(describing:)(&v79, &type metadata for LocationSearchIntent.LocationSearchVerbValue);
    unint64_t v44 = v43;
    uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
    swift_release_n(v32, 2LL);
    swift_bridgeObjectRelease(v44);
    *(_WORD *)(v37 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
    uint64_t v79 = v32;
    if (one-time initialization token for nounNode != -1) {
      swift_once(&one-time initialization token for nounNode, one-time initialization function for nounNode);
    }
    IntentNodeTraversable.value<A>(forNode:)(&v78, static LocationSearchIntent.nounNode, v31, v40);
    char v45 = v78;
    if (v78 == 8) {
      char v45 = 0;
    }
    LOBYTE(v79) = v45;
    uint64_t v46 = String.init<A>(describing:)(&v79, &type metadata for LocationSearchIntent.LocationSearchNounValue);
    unint64_t v48 = v47;
    uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
    swift_release_n(v32, 2LL);
    swift_bridgeObjectRelease(v48);
    uint64_t v18 = v76;
    _os_log_impl(&dword_0, v76, v36, "chooseFlow - receives NL intent with Verb: %s, Noun: %s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy(v38, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v37, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v32, 4LL);
  }

  uint64_t v80 = v32;
  if (one-time initialization token for verbNode != -1) {
    swift_once(&one-time initialization token for verbNode, one-time initialization function for verbNode);
  }
  uint64_t v49 = static LocationSearchIntent.verbNode;
  uint64_t v50 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent,  type metadata accessor for LocationSearchIntent,  (uint64_t)&protocol conformance descriptor for LocationSearchIntent);
  IntentNodeTraversable.value<A>(forNode:)(&v79, v49, v31, v50);
  else {
    int v51 = v79;
  }
  uint64_t v80 = v32;
  if (one-time initialization token for nounNode != -1) {
    swift_once(&one-time initialization token for nounNode, one-time initialization function for nounNode);
  }
  unint64_t v52 = (unint64_t)IntentNodeTraversable.value<A>(forNode:)(&v79, static LocationSearchIntent.nounNode, v31, v50);
  else {
    int v53 = v79;
  }
  uint64_t v54 = *(void *)(v77 + 24);
  if (*(void *)(v54 + 16)
    && (unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v51 | (v53 << 8)), (v55 & 1) != 0))
  {
    uint64_t v56 = *(void *)(v54 + 56) + 16 * v52;
    uint64_t v57 = *(void (**)(uint64_t *__return_ptr, uint64_t *))v56;
    uint64_t v58 = *(void *)(v56 + 8);
    uint64_t v80 = v32;
    swift_retain(v58);
    v57(&v79, &v80);
    swift_release(v32);
    swift_release(v58);
    return v79;
  }

  else
  {
    uint64_t v60 = static os_log_type_t.error.getter(v52);
    if (os_log_type_enabled(v18, v60))
    {
      swift_retain_n(v77, 2LL);
      uint64_t v61 = swift_slowAlloc(32LL, -1LL);
      id v62 = swift_slowAlloc(96LL, -1LL);
      uint64_t v80 = v62;
      *(_DWORD *)uint64_t v61 = 136315650;
      uint64_t v63 = LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(v51);
      uint64_t v65 = v64;
      uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
      swift_bridgeObjectRelease(v65);
      uint64_t v66 = (char)v53;
      uint64_t v67 = *(void *)&aAny_1[v66 * 8];
      *(_WORD *)(v61 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
      uint64_t v68 = qword_97D98[v66];
      uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
      swift_bridgeObjectRelease(v68);
      *(_WORD *)(v61 + 2__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
      swift_bridgeObjectRetain(v54);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
      lazy protocol witness table accessor for type FlowSelector.FlowSelectorKey and conformance FlowSelector.FlowSelectorKey();
      uint64_t v70 = Dictionary.description.getter(v69);
      uint64_t v72 = v71;
      swift_bridgeObjectRelease(v54);
      uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v72, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
      swift_release_n(v77, 2LL);
      swift_bridgeObjectRelease(v72);
      _os_log_impl( &dword_0,  v76,  v60,  "chooseFlow no flow found for (%s, %s) current dictionary %s",  (uint8_t *)v61,  0x20u);
      swift_arrayDestroy(v62, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1LL, -1LL);
      swift_slowDealloc(v61, -1LL, -1LL);
    }

    swift_release(v32);
    return 0LL;
  }

uint64_t FlowSelector.chooseFlow(pommesResponse:)(void *a1)
{
  char v2 = v1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = PommesResponse.firstGeoExperience.getter();
  if (v8)
  {
    uint64_t v16 = (void *)v8;
    os_log_type_t v17 = static os_log_type_t.info.getter(v8, v9, v10, v11, v12, v13, v14, v15);
    uint64_t v18 = v1[2];
    int v19 = v17;
    uint64_t v20 = os_log_type_enabled(v2[2], v17);
    if ((_DWORD)v20)
    {
      id v21 = a1;
      os_log_t v37 = v18;
      uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      uint64_t v40 = v36;
      *(_DWORD *)uint64_t v22 = 136315138;
      v34[1] = v22 + 4;
      id v23 = v21;
      id v24 = [v23 description];
      int v35 = v19;
      id v25 = v24;
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      uint64_t v38 = v4;
      unint64_t v28 = v27;

      uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);

      unint64_t v29 = v28;
      uint64_t v4 = v38;
      swift_bridgeObjectRelease(v29);
      _os_log_impl(&dword_0, v37, (os_log_type_t)v35, "chooseFlow - receives POMMES response: %s", v22, 0xCu);
      uint64_t v30 = v36;
      swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      uint64_t v20 = swift_slowDealloc(v22, -1LL, -1LL);
    }

    GeoExperience.geoClientComponent.getter(v20);
    uint64_t v31 = (*((uint64_t (**)(char *))*v2 + 16))(v7);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  else
  {
    uint64_t v32 = static os_log_type_t.error.getter(0LL);
    os_log(_:dso:log:_:_:)( v32,  &dword_0,  v1[2],  "chooseFlow - receieves no geoExperience from PommesResponse",  59LL,  2LL,  _swiftEmptyArrayStorage);
    return 0LL;
  }

  return v31;
}

uint64_t FlowSelector.chooseFlow(geoClientComponent:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ParkingLocationActionType(0LL);
  uint64_t v118 = *(void *)(v0 - 8);
  uint64_t v119 = v0;
  __chkstk_darwin();
  uint64_t v117 = (char *)&v113 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ParkingLocationAction(0LL);
  uint64_t v127 = *(void *)(v2 - 8);
  unint64_t v128 = (uint8_t *)v2;
  __chkstk_darwin();
  os_log_type_t v126 = (char *)&v113 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v125 = (char *)&v113 - v4;
  uint64_t v120 = type metadata accessor for NLIntent(0LL);
  uint64_t v122 = *(void *)(v120 - 8);
  __chkstk_darwin();
  uint64_t v121 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v129 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNode(0LL);
  uint64_t v124 = *(void *)(v129 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v113 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v113 - v8;
  __chkstk_darwin();
  uint64_t v11 = (char *)&v113 - v10;
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoExperienceType(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  os_log_type_t v17 = (char *)&v113 - v16;
  uint64_t v18 = (*(uint64_t (**)(char *, void, uint64_t))(v13 + 104))( (char *)&v113 - v16,  enum case for Apple_Parsec_Siri_V2alpha_GeoExperienceType.geoExperienceWhereAmI(_:),  v12);
  Apple_Parsec_Siri_V2alpha_GeoClientComponent.experienceType.getter(v18);
  uint64_t v19 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_GeoExperienceType and conformance Apple_Parsec_Siri_V2alpha_GeoExperienceType,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoExperienceType,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_GeoExperienceType);
  char v20 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v17, v12, v19);
  id v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v15, v12);
  uint64_t v22 = ((uint64_t (*)(char *, uint64_t))v21)(v17, v12);
  if ((v20 & 1) != 0)
  {
    static Device.current.getter(v131);
    uint64_t v23 = type metadata accessor for GeoRCHFlowFactoryImpl();
    uint64_t v24 = swift_allocObject(v23, 16LL, 7LL);
    uint64_t v133 = v23;
    uint64_t v134 = &protocol witness table for GeoRCHFlowFactoryImpl;
    uint64_t v132 = v24;
    uint64_t v135 = static DialogHelper.globals.getter(v24);
    id v25 = static AceService.currentAsync.getter(v136);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v25);
    uint64_t v26 = type metadata accessor for CATService();
    uint64_t v27 = swift_allocObject(v26, 40LL, 7LL);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v26);
    *(void *)(v27 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
    type metadata accessor for OS_os_log();
    *(void *)(v27 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
    *(_BYTE *)(v27 + 16) = 0;
    v136[10] = v27;
    uint64_t v29 = type metadata accessor for WhereAmIFlow();
    uint64_t v30 = swift_allocObject(v29, 88LL, 7LL);
    outlined init with copy of FlowHelperImpl((uint64_t)v131, (uint64_t)v130);
    uint64_t v31 = specialized WhereAmIFlow.init(with:)(v130, v30);
    outlined destroy of FlowHelperImpl(v131);
    *(void *)&v131[0] = v31;
    uint64_t v32 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type WhereAmIFlow and conformance WhereAmIFlow,  (uint64_t (*)(uint64_t))type metadata accessor for WhereAmIFlow,  (uint64_t)&protocol conformance descriptor for WhereAmIFlow);
    uint64_t v33 = Flow.eraseToAnyFlow()(v29, v32);
    uint64_t v34 = v31;
LABEL_3:
    swift_release(v34);
    return v33;
  }

  uint64_t v36 = v125;
  int v35 = v126;
  uint64_t v115 = v7;
  uint64_t v116 = v11;
  uint64_t v37 = v127;
  uint64_t v38 = v128;
  uint64_t v39 = v124;
  uint64_t v40 = Apple_Parsec_Siri_V2alpha_GeoClientComponent.hasLocationSearchNode.getter(v22);
  if ((v40 & 1) == 0)
  {
    if ((Apple_Parsec_Siri_V2alpha_GeoClientComponent.hasParkingLocationAction.getter() & 1) == 0) {
      return 0LL;
    }
    uint64_t v67 = ((uint64_t (*)(void))Apple_Parsec_Siri_V2alpha_GeoClientComponent.parkingLocationAction.getter)();
    Apple_Parsec_Siri_V2alpha_ParkingLocationAction.note.getter(v67);
    uint64_t v69 = v68;
    uint64_t v70 = *(uint64_t (**)(char *, uint8_t *))(v37 + 8);
    uint64_t v71 = v70(v36, v38);
    uint64_t v72 = Apple_Parsec_Siri_V2alpha_GeoClientComponent.parkingLocationAction.getter(v71);
    uint64_t v73 = v117;
    Apple_Parsec_Siri_V2alpha_ParkingLocationAction.parkingLocationActionType.getter(v72);
    v70(v35, v38);
    uint64_t v74 = v118;
    uint64_t v75 = v119;
    int v76 = (*(uint64_t (**)(char *, uint64_t))(v118 + 88))(v73, v119);
    if (v76 == enum case for Apple_Parsec_Siri_V2alpha_ParkingLocationActionType.save(_:))
    {
      id v77 = objc_allocWithZone(&OBJC_CLASS___INSaveParkingLocationIntent);
      NSString v78 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v69);
      id v79 = [v77 initWithParkingLocation:0 parkingNote:v78];

      outlined init with copy of DeviceState(v123 + 32, (uint64_t)v131);
      ParkingLocationBaseuint64_t Flow = type metadata accessor for SaveParkingLocationBaseFlow(0LL);
      uint64_t v81 = type metadata accessor for SaveParkingLocationBaseFlow;
      uint64_t v82 = swift_allocObject( ParkingLocationBaseFlow,  *(unsigned int *)(ParkingLocationBaseFlow + 48),  *(unsigned __int16 *)(ParkingLocationBaseFlow + 52));
      type metadata accessor for OS_os_log();
      id v83 = v79;
      *(void *)(v82 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001BLL,  0x800000000009B940LL);
      *(_BYTE *)(v82 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_isPOMMES) = 0;
      outlined init with take of CATType( v131,  v82 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowHelper);
      uint64_t v84 = v82 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowState;
      *(void *)(v82 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowState) = v83;
      uint64_t v85 = type metadata accessor for SaveParkingLocationBaseFlow.State(0LL);
      swift_storeEnumTagMultiPayload(v84, v85, 0LL);
      *(void *)&v131[0] = v82;
      uint64_t v86 = &lazy protocol witness table cache variable for type SaveParkingLocationBaseFlow and conformance SaveParkingLocationBaseFlow;
      uint64_t v87 = &protocol conformance descriptor for SaveParkingLocationBaseFlow;
    }

    else
    {
      int v97 = v76;
      if (v76 == enum case for Apple_Parsec_Siri_V2alpha_ParkingLocationActionType.retrieve(_:))
      {
        swift_bridgeObjectRelease(v69);
        id v98 = [objc_allocWithZone(INRetrieveParkingLocationIntent) init];
        outlined init with copy of DeviceState(v123 + 32, (uint64_t)v131);
        ParkingLocationBaseuint64_t Flow = type metadata accessor for RetrieveParkingLocationBaseFlow(0LL);
        uint64_t v81 = type metadata accessor for RetrieveParkingLocationBaseFlow;
        uint64_t v82 = swift_allocObject( ParkingLocationBaseFlow,  *(unsigned int *)(ParkingLocationBaseFlow + 48),  *(unsigned __int16 *)(ParkingLocationBaseFlow + 52));
        type metadata accessor for OS_os_log();
        id v83 = v98;
        *(void *)(v82 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001FLL,  0x800000000009BB20LL);
        *(_BYTE *)(v82 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_isPOMMES) = 0;
        outlined init with take of CATType( v131,  v82 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowHelper);
        uint64_t v99 = v82 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowState;
        *(void *)(v82 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowState) = v83;
        uint64_t ParkingLocationBase = type metadata accessor for RetrieveParkingLocationBaseFlow.State(0LL);
        swift_storeEnumTagMultiPayload(v99, ParkingLocationBase, 0LL);
        *(void *)&v131[0] = v82;
        uint64_t v86 = (unint64_t *)&lazy protocol witness table cache variable for type RetrieveParkingLocationBaseFlow and conformance RetrieveParkingLocationBaseFlow;
        uint64_t v87 = &protocol conformance descriptor for RetrieveParkingLocationBaseFlow;
      }

      else
      {
        int v101 = enum case for Apple_Parsec_Siri_V2alpha_ParkingLocationActionType.delete(_:);
        uint64_t v102 = swift_bridgeObjectRelease(v69);
        uint64_t v103 = v123;
        if (v97 != v101)
        {
          uint64_t v109 = static os_log_type_t.error.getter(v102);
          os_log(_:dso:log:_:_:)( v109,  &dword_0,  *(void *)(v103 + 16),  "chooseParkingLocationFlow - unsupported parking action type",  59LL,  2LL,  _swiftEmptyArrayStorage);
          (*(void (**)(char *, uint64_t))(v74 + 8))(v73, v75);
          uint64_t v110 = type metadata accessor for UnsupportedRequestFlow();
          uint64_t v111 = swift_allocObject(v110, 24LL, 7LL);
          type metadata accessor for OS_os_log();
          *(void *)(v111 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000016LL,  0x800000000009BB90LL);
          *(void *)&v131[0] = v111;
          uint64_t v112 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow,  (uint64_t (*)(uint64_t))type metadata accessor for UnsupportedRequestFlow,  (uint64_t)&protocol conformance descriptor for UnsupportedRequestFlow);
          uint64_t v33 = Flow.eraseToAnyFlow()(v110, v112);
          uint64_t v34 = v111;
          goto LABEL_3;
        }

        id v104 = [objc_allocWithZone(INDeleteParkingLocationIntent) init];
        outlined init with copy of DeviceState(v103 + 32, (uint64_t)v131);
        ParkingLocationBaseuint64_t Flow = type metadata accessor for DeleteParkingLocationBaseFlow(0LL);
        uint64_t v81 = type metadata accessor for DeleteParkingLocationBaseFlow;
        uint64_t v82 = swift_allocObject( ParkingLocationBaseFlow,  *(unsigned int *)(ParkingLocationBaseFlow + 48),  *(unsigned __int16 *)(ParkingLocationBaseFlow + 52));
        type metadata accessor for OS_os_log();
        id v83 = v104;
        *(void *)(v82 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001DLL,  0x800000000009BA30LL);
        *(_BYTE *)(v82 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_isPOMMES) = 0;
        outlined init with take of CATType( v131,  v82 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowHelper);
        uint64_t v105 = v82 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowState;
        *(void *)(v82 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowState) = v83;
        uint64_t v106 = type metadata accessor for DeleteParkingLocationBaseFlow.State(0LL);
        swift_storeEnumTagMultiPayload(v105, v106, 0LL);
        *(void *)&v131[0] = v82;
        uint64_t v86 = &lazy protocol witness table cache variable for type DeleteParkingLocationBaseFlow and conformance DeleteParkingLocationBaseFlow;
        uint64_t v87 = &protocol conformance descriptor for DeleteParkingLocationBaseFlow;
      }
    }

    uint64_t v107 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( v86,  v81,  (uint64_t)v87);
    uint64_t v33 = Flow.eraseToAnyFlow()(ParkingLocationBaseFlow, v107);
    swift_release(v82);

    return v33;
  }

  char v41 = v116;
  uint64_t v42 = Apple_Parsec_Siri_V2alpha_GeoClientComponent.locationSearchNode.getter(v40);
  os_log_type_t v50 = static os_log_type_t.info.getter(v42, v43, v44, v45, v46, v47, v48, v49);
  uint64_t v51 = v123;
  uint64_t v52 = v39;
  int v53 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  uint64_t v54 = v9;
  char v55 = *(os_log_s **)(v123 + 16);
  uint64_t v56 = v129;
  v53(v54, v41, v129);
  os_log_type_t v57 = v50;
  if (os_log_type_enabled(v55, v50))
  {
    uint64_t v58 = v54;
    uint64_t v114 = v54;
    uint64_t v59 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v60 = swift_slowAlloc(32LL, -1LL);
    *(void *)&v131[0] = v60;
    *(_DWORD *)uint64_t v59 = 136315138;
    unint64_t v128 = v59 + 4;
    uint64_t v61 = v115;
    v53(v115, v58, v129);
    uint64_t v62 = String.init<A>(describing:)(v61, v129);
    unint64_t v64 = v63;
    *(void *)&v130[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, (uint64_t *)v131);
    char v41 = v116;
    uint64_t v51 = v123;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v130, (char *)v130 + 8);
    swift_bridgeObjectRelease(v64);
    uint64_t v65 = *(void (**)(char *, uint64_t))(v52 + 8);
    v65(v114, v129);
    _os_log_impl(&dword_0, v55, v57, "chooseFlow - receives POMMES intent: %s", v59, 0xCu);
    swift_arrayDestroy(v60, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v66 = v60;
    uint64_t v56 = v129;
    swift_slowDealloc(v66, -1LL, -1LL);
    swift_slowDealloc(v59, -1LL, -1LL);
  }

  else
  {
    uint64_t v88 = v54;
    uint64_t v65 = *(void (**)(char *, uint64_t))(v52 + 8);
    v65(v88, v56);
  }

  uint64_t v89 = v120;
  uint64_t v90 = v121;
  uint64_t v91 = v122;
  uint64_t v92 = type metadata accessor for LocationSearchIntentBuilder();
  swift_allocObject(v92, 120LL, 7LL);
  uint64_t v93 = LocationSearchIntentBuilder.init()();
  uint64_t v94 = v41;
  uint64_t v95 = (*(uint64_t (**)(char *))(*(void *)v93 + 376LL))(v41);
  uint64_t v96 = swift_release(v93);
  (*(void (**)(uint64_t))(*(void *)v95 + 456LL))(v96);
  swift_release(v95);
  uint64_t v33 = (*(uint64_t (**)(char *))(*(void *)v51 + 112LL))(v90);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v90, v89);
  v65(v94, v56);
  return v33;
}

uint64_t FlowSelector.deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 32));
  return v0;
}

uint64_t FlowSelector.__deallocating_deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 32));
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t specialized WhereAmIFlow.init(with:)(_OWORD *a1, uint64_t a2)
{
  v15[3] = &type metadata for FlowHelperImpl;
  v15[4] = &protocol witness table for FlowHelperImpl;
  uint64_t v4 = swift_allocObject(&unk_BA208, 192LL, 7LL);
  v15[0] = v4;
  __int128 v5 = a1[9];
  *(_OWORD *)(v4 + 144) = a1[8];
  *(_OWORD *)(v4 + 16specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v5;
  *(_OWORD *)(v4 + 176) = a1[10];
  __int128 v6 = a1[5];
  *(_OWORD *)(v4 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = a1[4];
  *(_OWORD *)(v4 + 96) = v6;
  __int128 v7 = a1[7];
  *(_OWORD *)(v4 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a1[6];
  *(_OWORD *)(v4 + 128) = v7;
  __int128 v8 = a1[1];
  *(_OWORD *)(v4 + 16) = *a1;
  *(_OWORD *)(v4 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v8;
  __int128 v9 = a1[3];
  *(_OWORD *)(v4 + 48) = a1[2];
  *(_OWORD *)(v4 + 64) = v9;
  type metadata accessor for OS_os_log();
  *(void *)(a2 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x496D416572656857LL,  0xEC000000776F6C46LL);
  *(void *)(a2 + 24) = 0LL;
  *(_BYTE *)(a2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2;
  outlined init with copy of DeviceState((uint64_t)v15, a2 + 40);
  uint64_t v10 = *(void *)(v4 + 184);
  *(void *)(a2 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v10;
  uint64_t v11 = swift_retain(v10);
  uint64_t v12 = static os_log_type_t.default.getter(v11);
  id v13 = *(id *)(a2 + 16);
  os_log(_:dso:log:_:_:)( v12,  &dword_0,  v13,  "WhereAmIFlow has been initalized with .guardFlows",  49LL,  2LL,  _swiftEmptyArrayStorage);

  __swift_destroy_boxed_opaque_existential_0Tm(v15);
  return a2;
}

uint64_t specialized FlowSelector.init(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v63 = a3;
  uint64_t v64 = a4;
  __int128 v7 = __swift_allocate_boxed_opaque_existential_0(&v62);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32LL))(v7, a1, a3);
  type metadata accessor for OS_os_log();
  uint64_t v48 = a2;
  *(void *)(a2 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x656C6553776F6C46LL,  0xEC000000726F7463LL);
  __int128 v60 = xmmword_97C80;
  outlined init with copy of DeviceState((uint64_t)&v62, (uint64_t)v59);
  uint64_t v8 = swift_allocObject(&unk_BA230, 56LL, 7LL);
  outlined init with take of CATType(v59, v8 + 16);
  uint64_t v9 = swift_allocObject(&unk_BA258, 32LL, 7LL);
  *(void *)(v9 + 16) = partial apply for closure #1 in FlowSelector.init(with:);
  *(void *)(v9 + 24) = v8;
  v61[0] = &outlined read-only object #0 of specialized FlowSelector.init(with:);
  v61[1] = &outlined read-only object #0 of static LocationSearchIntent.LocationSearchNounValue.allCases.getter;
  v61[2] = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?);
  void v61[3] = v9;
  outlined init with copy of DeviceState((uint64_t)&v62, (uint64_t)v58);
  uint64_t v10 = swift_allocObject(&unk_BA280, 56LL, 7LL);
  outlined init with take of CATType(v58, v10 + 16);
  uint64_t v11 = swift_allocObject(&unk_BA2A8, 32LL, 7LL);
  *(void *)(v11 + 16) = partial apply for closure #2 in FlowSelector.init(with:);
  *(void *)(v11 + 24) = v10;
  v61[4] = &outlined read-only object #1 of specialized FlowSelector.init(with:);
  v61[5] = &outlined read-only object #0 of static LocationSearchIntent.LocationSearchNounValue.allCases.getter;
  v61[6] = thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)partial apply;
  v61[7] = v11;
  outlined init with copy of DeviceState((uint64_t)&v62, (uint64_t)v57);
  uint64_t v12 = swift_allocObject(&unk_BA2D0, 56LL, 7LL);
  outlined init with take of CATType(v57, v12 + 16);
  uint64_t v13 = swift_allocObject(&unk_BA2F8, 32LL, 7LL);
  *(void *)(v13 + 16) = partial apply for closure #3 in FlowSelector.init(with:);
  *(void *)(v13 + 24) = v12;
  v61[8] = &outlined read-only object #2 of specialized FlowSelector.init(with:);
  v61[9] = &outlined read-only object #0 of static LocationSearchIntent.LocationSearchNounValue.allCases.getter;
  v61[10] = thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)partial apply;
  v61[11] = v13;
  outlined init with copy of DeviceState((uint64_t)&v62, (uint64_t)v56);
  uint64_t v14 = swift_allocObject(&unk_BA320, 56LL, 7LL);
  outlined init with take of CATType(v56, v14 + 16);
  uint64_t v15 = swift_allocObject(&unk_BA348, 32LL, 7LL);
  *(void *)(v15 + 16) = partial apply for closure #4 in FlowSelector.init(with:);
  *(void *)(v15 + 24) = v14;
  v61[12] = &outlined read-only object #3 of specialized FlowSelector.init(with:);
  v61[13] = &outlined read-only object #4 of specialized FlowSelector.init(with:);
  v61[14] = thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)partial apply;
  v61[15] = v15;
  uint64_t v16 = (void *)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v17 = 0LL;
  while (1)
  {
    unint64_t v49 = v17;
    uint64_t v18 = &v61[4 * v17];
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v22 = v18[2];
    uint64_t v21 = v18[3];
    uint64_t v23 = swift_allocObject(&unk_BA370, 32LL, 7LL);
    *(void *)(v23 + 16) = v22;
    *(void *)(v23 + 24) = v21;
    uint64_t v52 = *(void *)(v19 + 16);
    if (v52) {
      break;
    }
    swift_retain(v21);
    swift_release(v23);
LABEL_3:
    unint64_t v17 = v49 + 1;
    if (v49 == 3) {
      goto LABEL_28;
    }
  }

  uint64_t v54 = *(void *)(v20 + 16);
  uint64_t v51 = v19 + 32;
  swift_bridgeObjectRetain_n(v19, 2LL);
  swift_retain(v21);
  swift_bridgeObjectRetain(v20);
  unint64_t v24 = 0LL;
  uint64_t v50 = v19;
  while (1)
  {
    if (v24 >= *(void *)(v19 + 16))
    {
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for FlowSelector.FlowSelectorKey);
      __break(1u);
      return result;
    }

    if (v54) {
      break;
    }
LABEL_8:
    if (++v24 == v52)
    {
      swift_release(v23);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease_n(v19, 2LL);
      goto LABEL_3;
    }
  }

  unint64_t v53 = v24;
  int v55 = *(unsigned __int8 *)(v51 + v24);
  swift_bridgeObjectRetain(v20);
  uint64_t v25 = 0LL;
  while (1)
  {
    uint64_t v27 = v20;
    int v28 = *(unsigned __int8 *)(v20 + v25 + 32);
    uint64_t v29 = swift_allocObject(&unk_BA398, 32LL, 7LL);
    *(void *)(v29 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed LocationSearchIntent) -> (@out AnyFlow?);
    *(void *)(v29 + 24) = v23;
    uint64_t v30 = v23;
    swift_retain(v23);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
    *(void *)&v59[0] = v16;
    unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v55 | (v28 << 8));
    uint64_t v34 = v16[2];
    BOOL v35 = (v32 & 1) == 0;
    uint64_t v36 = v34 + v35;
    if (__OFADD__(v34, v35)) {
      break;
    }
    char v37 = v32;
    if (v16[3] >= v36)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v16 = *(void **)&v59[0];
        if ((v32 & 1) != 0) {
          goto LABEL_12;
        }
      }

      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v16 = *(void **)&v59[0];
        if ((v37 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v36,  isUniquelyReferenced_nonNull_native);
      unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v55 | (v28 << 8));
      if ((v37 & 1) != (v39 & 1)) {
        goto LABEL_31;
      }
      unint64_t v33 = v38;
      uint64_t v16 = *(void **)&v59[0];
      if ((v37 & 1) != 0)
      {
LABEL_12:
        uint64_t v26 = (void *)(v16[7] + 16 * v33);
        swift_release(v26[1]);
        *uint64_t v26 = thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)partial apply;
        v26[1] = v29;
        goto LABEL_13;
      }
    }

    v16[(v33 >> 6) + 8] |= 1LL << v33;
    uint64_t v40 = (_BYTE *)(v16[6] + 2 * v33);
    *uint64_t v40 = v55;
    v40[1] = v28;
    char v41 = (void *)(v16[7] + 16 * v33);
    *char v41 = thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)partial apply;
    v41[1] = v29;
    uint64_t v42 = v16[2];
    BOOL v43 = __OFADD__(v42, 1LL);
    uint64_t v44 = v42 + 1;
    if (v43) {
      goto LABEL_27;
    }
    _OWORD v16[2] = v44;
LABEL_13:
    ++v25;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v20 = v27;
    uint64_t v23 = v30;
    if (v54 == v25)
    {
      swift_bridgeObjectRelease(v27);
      uint64_t v19 = v50;
      unint64_t v24 = v53;
      goto LABEL_8;
    }
  }

  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  uint64_t v45 = v60;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([LocationSearchIntent.LocationSearchVerbValue], [LocationSearchIntent.LocationSearchNounValue], ()));
  swift_arrayDestroy(v61, v45, v46);
  *(void *)(v48 + 24) = v16;
  outlined init with take of CATType(&v62, v48 + 32);
  return v48;
}

unint64_t lazy protocol witness table accessor for type FlowSelector.FlowSelectorKey and conformance FlowSelector.FlowSelectorKey()
{
  unint64_t result = lazy protocol witness table cache variable for type FlowSelector.FlowSelectorKey and conformance FlowSelector.FlowSelectorKey;
  if (!lazy protocol witness table cache variable for type FlowSelector.FlowSelectorKey and conformance FlowSelector.FlowSelectorKey)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for FlowSelector.FlowSelectorKey,  &type metadata for FlowSelector.FlowSelectorKey);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type FlowSelector.FlowSelectorKey and conformance FlowSelector.FlowSelectorKey);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type FlowSelector.FlowSelectorKey and conformance FlowSelector.FlowSelectorKey;
  if (!lazy protocol witness table cache variable for type FlowSelector.FlowSelectorKey and conformance FlowSelector.FlowSelectorKey)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for FlowSelector.FlowSelectorKey,  &type metadata for FlowSelector.FlowSelectorKey);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type FlowSelector.FlowSelectorKey and conformance FlowSelector.FlowSelectorKey);
  }

  return result;
}

uint64_t type metadata accessor for FlowSelector()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin12FlowSelector);
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FlowSelector.FlowSelectorKey(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 65287 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65287 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65287;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65287;
    }

    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65287;
    }
  }

uint64_t storeEnumTagSinglePayload for FlowSelector.FlowSelectorKey( _WORD *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 65287 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65287 < 0xFF0000) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_51FB0 + 4 * byte_97C95[v4]))();
  }
  *a1 = a2 - 249;
  return ((uint64_t (*)(void))((char *)sub_51FE4 + 4 * byte_97C90[v4]))();
}

uint64_t sub_51FE4(uint64_t result)
{
  *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v1;
  return result;
}

uint64_t sub_51FEC(uint64_t result, int a2)
{
  *(_WORD *)(result + __swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0;
  if (a2) {
    JUMPOUT(0x51FF4LL);
  }
  return result;
}

uint64_t sub_52000(uint64_t result, int a2)
{
  *(_DWORD *)(result + __swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0;
  if (!a2) {
    JUMPOUT(0x52008LL);
  }
  *(_BYTE *)(result + 1) = a2 + 7;
  return result;
}

uint64_t sub_5200C(uint64_t result)
{
  *(_DWORD *)(result + __swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v1;
  return result;
}

uint64_t sub_52014(uint64_t result)
{
  *(_WORD *)(result + __swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FlowSelector.FlowSelectorKey()
{
  return &type metadata for FlowSelector.FlowSelectorKey;
}

uint64_t sub_52030()
{
  return swift_deallocObject(v0, 192LL, 7LL);
}

uint64_t partial apply for closure #1 in FlowSelector.init(with:)(uint64_t a1)
{
  return closure #1 in FlowSelector.init(with:)(a1, v1 + 16);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)( a1,  *(uint64_t (**)(void))(v2 + 16),  a2);
}

uint64_t partial apply for closure #2 in FlowSelector.init(with:)(uint64_t a1)
{
  return closure #2 in FlowSelector.init(with:)(a1, v1 + 16, 0LL);
}

uint64_t sub_520A8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_520CC()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t partial apply for closure #3 in FlowSelector.init(with:)(uint64_t a1)
{
  return closure #2 in FlowSelector.init(with:)(a1, v1 + 16, 1LL);
}

uint64_t partial apply for closure #4 in FlowSelector.init(with:)(uint64_t a1)
{
  return closure #4 in FlowSelector.init(with:)(a1, v1 + 16);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed LocationSearchIntent) -> (@out AnyFlow?)( uint64_t a1)
{
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;
  uint64_t v2 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16);
  __int128 v5 = a1;
  v2(&v4, &v5);
  return v4;
}

uint64_t RuntimeError.__allocating_init(message:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject(v2, 32LL, 7LL);
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t RuntimeError.init(message:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t RuntimeError.deinit()
{
  return v0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RuntimeError()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96LL))();
}

uint64_t static RuntimeError.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  if (v4 == v6 && v5 == v7) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0LL);
  }
}

uint64_t RuntimeError.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RuntimeError( uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*a1 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  if (v4 == v6 && v5 == v7) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0LL);
  }
}

uint64_t outlined copy of Errors(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for Errors(uint64_t a1)
{
  return outlined consume of Errors(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of Errors(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Errors(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Errors(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Errors(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Errors(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Errors(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Errors(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of Errors(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Errors(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Errors(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 7) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 7) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for Errors(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for Errors(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 3;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Errors()
{
  return &type metadata for Errors;
}

uint64_t type metadata accessor for RuntimeError()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin12RuntimeError);
}

uint64_t type metadata accessor for UnsupportedError()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin16UnsupportedError);
}

uint64_t type metadata accessor for DataMissingError()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin16DataMissingError);
}

uint64_t RetrieveParkingLocationBaseFlow.__allocating_init(flowHelper:intent:)(void *a1, uint64_t a2)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v5);
  uint64_t v8 = specialized RetrieveParkingLocationBaseFlow.__allocating_init(flowHelper:intent:)(v7, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v8;
}

uint64_t key path setter for RetrieveParkingLocationBaseFlow.flowState : RetrieveParkingLocationBaseFlow( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of RetrieveParkingLocationBaseFlow.State(a1, (uint64_t)v5);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 120LL))(v5);
}

uint64_t RetrieveParkingLocationBaseFlow.flowState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowState;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return outlined init with copy of RetrieveParkingLocationBaseFlow.State(v3, a1);
}

uint64_t RetrieveParkingLocationBaseFlow.flowState.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowState;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  outlined assign with take of RetrieveParkingLocationBaseFlow.State(a1, v3);
  return swift_endAccess(v5);
}

uint64_t (*RetrieveParkingLocationBaseFlow.flowState.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t RetrieveParkingLocationBaseFlow.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowHelper;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return outlined init with copy of DeviceState(v3, a1);
}

uint64_t RetrieveParkingLocationBaseFlow.flowHelper.setter(__int128 *a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowHelper);
  swift_beginAccess(v3, v5, 33LL, 0LL);
  __swift_destroy_boxed_opaque_existential_0Tm(v3);
  outlined init with take of CATType(a1, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t (*RetrieveParkingLocationBaseFlow.flowHelper.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t RetrieveParkingLocationBaseFlow.isPOMMES.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_isPOMMES);
  swift_beginAccess( v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_isPOMMES,  v3,  0LL,  0LL);
  return *v1;
}

uint64_t RetrieveParkingLocationBaseFlow.isPOMMES.setter(char a1)
{
  uint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_isPOMMES);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*RetrieveParkingLocationBaseFlow.isPOMMES.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t RetrieveParkingLocationBaseFlow.init(flowHelper:intent:)(void *a1, uint64_t a2)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v5);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v9 + 16))(v8);
  uint64_t v10 = specialized RetrieveParkingLocationBaseFlow.init(flowHelper:intent:)((uint64_t)v8, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v10;
}

uint64_t RetrieveParkingLocationBaseFlow.exitValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t ParkingLocationBase = type metadata accessor for RetrieveParkingLocationBaseFlow.State(0LL);
  uint64_t v4 = __chkstk_darwin();
  uint64_t v6 = (uint64_t *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t))(*(void *)v1 + 112LL))(v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, ParkingLocationBase);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)a1 = *v6;
      *(_BYTE *)(a1 + 8) = 0;
      uint64_t v8 = enum case for RCHFlowResult.error<A, B>(_:);
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104LL))(a1, v8, v9);
    }

    else
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)(v16 - 8) + 32LL))(a1, v6, v16);
    }
  }

  else
  {
    unint64_t v11 = lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v12 = swift_allocError(&type metadata for Errors, v11, 0LL, 0LL);
    *(void *)uint64_t v13 = 0LL;
    *(void *)(v13 + 8) = 0LL;
    *(_BYTE *)(v13 + 16) = 3;
    *(void *)a1 = v12;
    *(_BYTE *)(a1 + 8) = 0;
    uint64_t v14 = enum case for RCHFlowResult.error<A, B>(_:);
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104LL))(a1, v14, v15);
    return outlined destroy of RetrieveParkingLocationBaseFlow.State((uint64_t)v6);
  }

uint64_t RetrieveParkingLocationBaseFlow.onInput(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Input(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Parse(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin();
  uint64_t v12 = (id *)((char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Input.parse.getter(v10);
  int v13 = (*(uint64_t (**)(id *, uint64_t))(v9 + 88))(v12, v8);
  if (v13 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(id *, uint64_t))(v9 + 96))(v12, v8);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    uint64_t v15 = swift_release(*(id *)((char *)v12 + *(int *)(v14 + 48)));
    uint64_t v16 = (os_log_s *)v2[2];
    os_log_type_t v17 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl( &dword_0,  v16,  v17,  "RetrieveParkingLocationBaseFlow onInput returns true for NLv3IntentPlusServerConversion.",  v18,  2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    uint64_t v19 = type metadata accessor for NLIntent(0LL);
    (*(void (**)(id *, uint64_t))(*(void *)(v19 - 8) + 8LL))(v12, v19);
    return 1LL;
  }

  else if (v13 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(id *, uint64_t))(v9 + 96))(v12, v8);

    uint64_t v20 = 1LL;
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*v2 + 168LL))(1LL);
    uint64_t v22 = (os_log_s *)v2[2];
    os_log_type_t v23 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v22, v23))
    {
      unint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v24 = 0;
      _os_log_impl( &dword_0,  v22,  v23,  "RetrieveParkingLocationBaseFlow onInput returns true for Pommes response.",  v24,  2u);
      swift_slowDealloc(v24, -1LL, -1LL);
      return 1LL;
    }
  }

  else
  {
    uint64_t v25 = (os_log_s *)v2[2];
    uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    os_log_type_t v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v25, v27))
    {
      uint64_t v28 = swift_slowAlloc(12LL, -1LL);
      os_log_t v36 = v25;
      uint64_t v29 = (uint8_t *)v28;
      uint64_t v37 = swift_slowAlloc(32LL, -1LL);
      uint64_t v39 = v37;
      *(_DWORD *)uint64_t v29 = 136315138;
      v35[1] = v29 + 4;
      uint64_t v30 = Input.description.getter();
      unint64_t v32 = v31;
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_bridgeObjectRelease(v32);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      _os_log_impl(&dword_0, v36, v27, "SiriGeo currently doesn't support parse type: %s", v29, 0xCu);
      uint64_t v33 = v37;
      swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }

    (*(void (**)(id *, uint64_t))(v9 + 8))(v12, v8);
    return 0LL;
  }

  return v20;
}

uint64_t RetrieveParkingLocationBaseFlow.executeState()(uint64_t a1)
{
  void v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
  v2[7] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  _BYTE v2[8] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v2[9] = swift_task_alloc(v5);
  v2[10] = swift_task_alloc(v5);
  v2[11] = swift_task_alloc(v5);
  uint64_t ParkingLocationBase = type metadata accessor for RetrieveParkingLocationBaseFlow.State(0LL);
  v2[12] = ParkingLocationBase;
  v2[13] = swift_task_alloc((*(void *)(*(void *)(ParkingLocationBase - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(RetrieveParkingLocationBaseFlow.executeState(), 0LL, 0LL);
}

uint64_t RetrieveParkingLocationBaseFlow.executeState()()
{
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 104);
  (*(void (**)(void))(**(void **)(v0 + 48) + 112LL))();
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v1, v2);
  if ((_DWORD)EnumCaseMultiPayload)
  {
    if ((_DWORD)EnumCaseMultiPayload == 1)
    {
      uint64_t v4 = *(void *)(v0 + 48);
      uint64_t v5 = **(void **)(v0 + 104);
      os_log_type_t v6 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
      uint64_t v7 = *(os_log_s **)(v4 + 16);
      os_log_type_t v8 = v6;
      uint64_t v9 = os_log_type_enabled(v7, v6);
      if ((_DWORD)v9)
      {
        swift_errorRetain(v5);
        swift_errorRetain(v5);
        uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v11 = swift_slowAlloc(32LL, -1LL);
        uint64_t v60 = v11;
        *(_DWORD *)uint64_t v10 = 136315138;
        *(void *)(v0 + 24) = v5;
        swift_errorRetain(v5);
        uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v13 = String.init<A>(describing:)(v0 + 24, v12);
        unint64_t v15 = v14;
        *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40);
        swift_bridgeObjectRelease(v15);
        swift_errorRelease(v5);
        swift_errorRelease(v5);
        _os_log_impl( &dword_0,  v7,  v8,  "RetrieveParkingLocationBaseFlow execute requestUnsupported with error %s",  v10,  0xCu);
        swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v11, -1LL, -1LL);
        uint64_t v9 = swift_slowDealloc(v10, -1LL, -1LL);
      }

      static ExecuteResponse.complete()(v9);
      swift_errorRelease(v5);
    }

    else
    {
      uint64_t v26 = *(void *)(v0 + 80);
      uint64_t v25 = *(void *)(v0 + 88);
      uint64_t v28 = *(void *)(v0 + 56);
      uint64_t v27 = *(void *)(v0 + 64);
      uint64_t v29 = *(void *)(v0 + 48);
      uint64_t v30 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v27 + 32))(v25, *(void *)(v0 + 104), v28);
      os_log_type_t v38 = static os_log_type_t.info.getter(v30, v31, v32, v33, v34, v35, v36, v37);
      uint64_t v39 = *(os_log_s **)(v29 + 16);
      uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
      v40(v26, v25, v28);
      os_log_type_t v41 = v38;
      BOOL v42 = os_log_type_enabled(v39, v38);
      uint64_t v43 = *(void *)(v0 + 80);
      if (v42)
      {
        uint64_t v44 = *(void *)(v0 + 72);
        uint64_t v59 = *(void *)(v0 + 64);
        uint64_t v45 = *(void *)(v0 + 56);
        uint64_t v46 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v47 = swift_slowAlloc(32LL, -1LL);
        uint64_t v60 = v47;
        *(_DWORD *)uint64_t v46 = 136315138;
        v40(v44, v43, v45);
        uint64_t v48 = String.init<A>(describing:)(v44, v45);
        unint64_t v50 = v49;
        *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
        swift_bridgeObjectRelease(v50);
        uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
        v51(v43, v45);
        _os_log_impl( &dword_0,  v39,  v41,  "RetrieveParkingLocationBaseFlow execute rchComplete with result %s",  v46,  0xCu);
        swift_arrayDestroy(v47, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1LL, -1LL);
        uint64_t v52 = swift_slowDealloc(v46, -1LL, -1LL);
      }

      else
      {
        uint64_t v51 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 64) + 8LL);
        uint64_t v52 = ((uint64_t (*)(void, void))v51)(*(void *)(v0 + 80), *(void *)(v0 + 56));
      }

      uint64_t v53 = *(void *)(v0 + 88);
      uint64_t v54 = *(void *)(v0 + 56);
      static ExecuteResponse.complete()(v52);
      v51(v53, v54);
    }

    uint64_t v55 = *(void *)(v0 + 80);
    uint64_t v56 = *(void *)(v0 + 88);
    uint64_t v57 = *(void *)(v0 + 72);
    swift_task_dealloc(*(void *)(v0 + 104));
    swift_task_dealloc(v56);
    swift_task_dealloc(v55);
    swift_task_dealloc(v57);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v16 = *(uint64_t **)(v0 + 104);
    uint64_t v17 = *(void *)(v0 + 48);
    uint64_t v18 = *v16;
    *(void *)(v0 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = *v16;
    uint64_t v19 = *(os_log_s **)(v17 + 16);
    os_log_type_t v20 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl(&dword_0, v19, v20, "RetrieveParkingLocationBaseFlow execute state handle.", v21, 2u);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    uint64_t v22 = *(int **)(**(void **)(v0 + 48) + 216LL);
    uint64_t v58 = (int *)((char *)v22 + *v22);
    os_log_type_t v23 = (void *)swift_task_alloc(v22[1]);
    *(void *)(v0 + 12specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v23;
    *os_log_type_t v23 = v0;
    v23[1] = DeleteParkingLocationBaseFlow.executeState();
    return ((uint64_t (*)(void, uint64_t))v58)(*(void *)(v0 + 40), v18);
  }

uint64_t RetrieveParkingLocationBaseFlow.makeRCHFlow(intent:)(uint64_t a1, uint64_t a2)
{
  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
  v3[22] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[23] = v5;
  _BYTE v3[24] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(RetrieveParkingLocationBaseFlow.makeRCHFlow(intent:), 0LL, 0LL);
}

uint64_t RetrieveParkingLocationBaseFlow.makeRCHFlow(intent:)(uint64_t a1)
{
  uint64_t v2 = *(os_log_s **)(*(void *)(v1 + 168) + 16LL);
  os_log_type_t v3 = static os_log_type_t.default.getter(a1);
  uint64_t v4 = os_log_type_enabled(v2, v3);
  if ((_DWORD)v4)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_0, v2, v3, "RetrieveParkingLocationBaseFlow makeRCHflow.", v12, 2u);
    uint64_t v4 = swift_slowDealloc(v12, -1LL, -1LL);
  }

  uint64_t v13 = *(void *)(v1 + 192);
  uint64_t v15 = *(void *)(v1 + 168);
  uint64_t v14 = *(void *)(v1 + 176);
  uint64_t v41 = *(void *)(v1 + 160);
  uint64_t v42 = *(void *)(v1 + 184);
  uint64_t v16 = static os_log_type_t.info.getter(v4, v5, v6, v7, v8, v9, v10, v11);
  os_log(_:dso:log:_:_:)( v16,  &dword_0,  v2,  "RetrieveParkingLocationBaseFlow makeRCHFlow",  43LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v17 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INRetrieveParkingLocationIntent,  &OBJC_CLASS___INRetrieveParkingLocationIntent_ptr);
  uint64_t v18 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INRetrieveParkingLocationIntentResponse,  &OBJC_CLASS___INRetrieveParkingLocationIntentResponse_ptr);
  RCHChildFlowProducersAsync.init()(v17, v18);
  uint64_t v19 = type metadata accessor for App(0LL);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  uint64_t v40 = App.init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)( 0LL,  0LL,  0xD00000000000002DLL,  0x800000000009C810LL,  0LL,  0LL,  0LL,  0LL);
  uint64_t v20 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)(v40, v17, v18);
  uint64_t v38 = v13;
  uint64_t v21 = RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v20);
  uint64_t v39 = *(void (**)(void))(*(void *)v15 + 136LL);
  ((void (*)(uint64_t))v39)(v21);
  uint64_t ParkingHandleIntentStrategy = type metadata accessor for RetrieveParkingHandleIntentStrategy();
  uint64_t v23 = swift_allocObject(ParkingHandleIntentStrategy, 65LL, 7LL);
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  *(void *)(v23 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000023LL,  0x800000000009BC00LL);
  outlined init with take of CATType((__int128 *)(v1 + 16), v23 + 24);
  *(_BYTE *)(v23 + 64) = 0;
  *(void *)(v1 + 136) = v23;
  uint64_t v24 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type RetrieveParkingHandleIntentStrategy and conformance RetrieveParkingHandleIntentStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for RetrieveParkingHandleIntentStrategy,  (uint64_t)&protocol conformance descriptor for RetrieveParkingHandleIntentStrategy);
  uint64_t v25 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)( v1 + 136,  ParkingHandleIntentStrategy,  v24);
  uint64_t v27 = v26;
  swift_release(v23);
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v25, v27, v14);
  uint64_t ParkingBaseRCHStrategy = type metadata accessor for RetrieveParkingBaseRCHStrategy();
  uint64_t v29 = swift_allocObject(ParkingBaseRCHStrategy, 24LL, 7LL);
  *(void *)(v29 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001ELL,  0x800000000009BBB0LL);
  v39();
  uint64_t v30 = *(void *)(v1 + 80);
  uint64_t v31 = *(void *)(v1 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 56), v30);
  (*(void (**)(uint64_t, uint64_t))(v31 + 56))(v30, v31);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v1 + 56));
  uint64_t v32 = *(void *)(v1 + 120);
  uint64_t v33 = *(void *)(v1 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 96), v32);
  *(void *)(v1 + 144) = v29;
  uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 8);
  uint64_t v35 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type RetrieveParkingBaseRCHStrategy and conformance RetrieveParkingBaseRCHStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for RetrieveParkingBaseRCHStrategy,  (uint64_t)&protocol conformance descriptor for RetrieveParkingBaseRCHStrategy);
  uint64_t v36 = v34(v1 + 144, v38, v40, v41, ParkingBaseRCHStrategy, v35, v32, v33);
  swift_retain(v15);
  static ExecuteResponse.ongoing<A>(next:childCompletion:)( v36,  partial apply for closure #1 in RetrieveParkingLocationBaseFlow.makeRCHFlow(intent:),  v15);
  swift_release(v40);
  swift_release(v29);
  swift_release(v36);
  swift_release(v15);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v38, v14);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v1 + 96));
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t closure #1 in RetrieveParkingLocationBaseFlow.makeRCHFlow(intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t ParkingLocationBase = type metadata accessor for RetrieveParkingLocationBaseFlow.State(0LL);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v6, a1, v7);
  swift_storeEnumTagMultiPayload(v6, ParkingLocationBase, 2LL);
  return (*(uint64_t (**)(char *))(*(void *)a2 + 120LL))(v6);
}

uint64_t RetrieveParkingLocationBaseFlow.deinit()
{
  outlined destroy of RetrieveParkingLocationBaseFlow.State(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowState);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0
                                                        + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowHelper));
  return v0;
}

uint64_t RetrieveParkingLocationBaseFlow.__deallocating_deinit()
{
  outlined destroy of RetrieveParkingLocationBaseFlow.State((uint64_t)v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowState);
  __swift_destroy_boxed_opaque_existential_0Tm((id *)((char *)v0
                                                    + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowHelper));
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t protocol witness for Flow.on(input:) in conformance RetrieveParkingLocationBaseFlow( uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for RetrieveParkingLocationBaseFlow, a2);
  return FSMFlow.on(input:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance RetrieveParkingLocationBaseFlow( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for RetrieveParkingLocationBaseFlow, a3);
  return FSMFlow.execute(completion:)(a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for Flow.execute() in conformance RetrieveParkingLocationBaseFlow( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_C6814);
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for RetrieveParkingLocationBaseFlow, a2);
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return FSMFlow.execute()(a1, a2, WitnessTable);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RetrieveParkingLocationBaseFlow( uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for RetrieveParkingLocationBaseFlow, a1);
  return FSMFlow.description.getter(a1, WitnessTable);
}

uint64_t specialized RetrieveParkingLocationBaseFlow.init(flowHelper:intent:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v9 = __swift_allocate_boxed_opaque_existential_0(&v13);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32LL))(v9, a1, a4);
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  *(void *)(a3 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001FLL,  0x8000000000098110LL);
  *(_BYTE *)(a3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_isPOMMES) = 0;
  outlined init with take of CATType( &v13,  a3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowHelper);
  uint64_t v10 = a3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowState;
  *(void *)(a3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowState) = a2;
  uint64_t ParkingLocationBase = type metadata accessor for RetrieveParkingLocationBaseFlow.State(0LL);
  swift_storeEnumTagMultiPayload(v10, ParkingLocationBase, 0LL);
  return a3;
}

uint64_t specialized RetrieveParkingLocationBaseFlow.__allocating_init(flowHelper:intent:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a4 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  ParkingLocationBaseuint64_t Flow = type metadata accessor for RetrieveParkingLocationBaseFlow(0LL);
  uint64_t v13 = swift_allocObject( ParkingLocationBaseFlow,  *(unsigned int *)(ParkingLocationBaseFlow + 48),  *(unsigned __int16 *)(ParkingLocationBaseFlow + 52));
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  return specialized RetrieveParkingLocationBaseFlow.init(flowHelper:intent:)((uint64_t)v11, a2, v13, a4, a5);
}

uint64_t outlined init with copy of RetrieveParkingLocationBaseFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t ParkingLocationBase = type metadata accessor for RetrieveParkingLocationBaseFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(ParkingLocationBase - 8) + 16LL))( a2,  a1,  ParkingLocationBase);
  return a2;
}

uint64_t type metadata accessor for RetrieveParkingLocationBaseFlow.State(uint64_t a1)
{
  return type metadata accessor for ShareETA( a1,  (uint64_t *)&type metadata singleton initialization cache for RetrieveParkingLocationBaseFlow.State,  (uint64_t)&nominal type descriptor for RetrieveParkingLocationBaseFlow.State);
}

uint64_t outlined assign with take of RetrieveParkingLocationBaseFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t ParkingLocationBase = type metadata accessor for RetrieveParkingLocationBaseFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(ParkingLocationBase - 8) + 40LL))( a2,  a1,  ParkingLocationBase);
  return a2;
}

uint64_t outlined destroy of RetrieveParkingLocationBaseFlow.State(uint64_t a1)
{
  uint64_t ParkingLocationBase = type metadata accessor for RetrieveParkingLocationBaseFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(ParkingLocationBase - 8) + 8LL))(a1, ParkingLocationBase);
  return a1;
}

uint64_t partial apply for closure #1 in RetrieveParkingLocationBaseFlow.makeRCHFlow(intent:)(uint64_t a1)
{
  return closure #1 in RetrieveParkingLocationBaseFlow.makeRCHFlow(intent:)(a1, v1);
}

uint64_t instantiation function for generic protocol witness table for RetrieveParkingLocationBaseFlow( uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type RetrieveParkingLocationBaseFlow and conformance RetrieveParkingLocationBaseFlow,  type metadata accessor for RetrieveParkingLocationBaseFlow,  (uint64_t)&protocol conformance descriptor for RetrieveParkingLocationBaseFlow);
  uint64_t result = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type RetrieveParkingLocationBaseFlow and conformance RetrieveParkingLocationBaseFlow,  type metadata accessor for RetrieveParkingLocationBaseFlow,  (uint64_t)&protocol conformance descriptor for RetrieveParkingLocationBaseFlow);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for RetrieveParkingLocationBaseFlow(uint64_t a1)
{
  return type metadata accessor for ShareETA( a1,  (uint64_t *)&type metadata singleton initialization cache for RetrieveParkingLocationBaseFlow,  (uint64_t)&nominal type descriptor for RetrieveParkingLocationBaseFlow);
}

uint64_t sub_53D00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 112LL))();
}

uint64_t sub_53D2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 136LL))();
}

uint64_t sub_53D54(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_BYTE *))(**(void **)a2 + 144LL))(v4);
}

uint64_t sub_53D94@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160LL))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_53DC8(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 168LL))(*a1);
}

uint64_t ObjC metadata update function for RetrieveParkingLocationBaseFlow()
{
  return type metadata accessor for RetrieveParkingLocationBaseFlow(0LL);
}

uint64_t type metadata completion function for RetrieveParkingLocationBaseFlow(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for RetrieveParkingLocationBaseFlow.State(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = "(";
    void v4[3] = &unk_98168;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

char *initializeBufferWithCopyOfBuffer for RetrieveParkingLocationBaseFlow.State( char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *(void *)a1 = *a2;
    a1 = &v12[(v5 + 16LL) & ~(unint64_t)v5];
    swift_retain(v12);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
      uint64_t v9 = a1;
      uint64_t v10 = a3;
      uint64_t v11 = 2LL;
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = *a2;
      swift_errorRetain(v8);
      *(void *)a1 = v8;
      uint64_t v9 = a1;
      uint64_t v10 = a3;
      uint64_t v11 = 1LL;
    }

    else
    {
      uint64_t v14 = *a2;
      *(void *)a1 = *a2;
      uint64_t v15 = v14;
      uint64_t v9 = a1;
      uint64_t v10 = a3;
      uint64_t v11 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }

  return a1;
}

void destroy for RetrieveParkingLocationBaseFlow.State(id *a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
      (*(void (**)(id *, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
      break;
    case 1:
      swift_errorRelease(*a1);
      break;
    case 0:

      break;
  }

void **initializeWithCopy for RetrieveParkingLocationBaseFlow.State(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
    uint64_t v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 2LL;
  }

  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = *a2;
    swift_errorRetain(v7);
    *a1 = v7;
    uint64_t v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 1LL;
  }

  else
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    id v13 = v12;
    uint64_t v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

void **assignWithCopy for RetrieveParkingLocationBaseFlow.State(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of RetrieveParkingLocationBaseFlow.State((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 2LL;
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = *a2;
      swift_errorRetain(v7);
      *a1 = v7;
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
    }

    else
    {
      uint64_t v12 = *a2;
      *a1 = *a2;
      id v13 = v12;
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }

  return a1;
}

void *initializeWithTake for RetrieveParkingLocationBaseFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 2LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *assignWithTake for RetrieveParkingLocationBaseFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of RetrieveParkingLocationBaseFlow.State((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
    {
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 2LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

void type metadata completion function for RetrieveParkingLocationBaseFlow.State(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "\b";
  type metadata accessor for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(v2 - 8) + 64LL;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 3LL, v4);
  }

void type metadata accessor for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>( uint64_t a1)
{
  if (!lazy cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>)
  {
    uint64_t v2 = type metadata accessor for OS_os_log( 255LL,  &lazy cache variable for type metadata for INRetrieveParkingLocationIntent,  &OBJC_CLASS___INRetrieveParkingLocationIntent_ptr);
    uint64_t v3 = type metadata accessor for OS_os_log( 255LL,  &lazy cache variable for type metadata for INRetrieveParkingLocationIntentResponse,  &OBJC_CLASS___INRetrieveParkingLocationIntentResponse_ptr);
    unint64_t v4 = type metadata accessor for RCHFlowResult(a1, v2, v3);
    if (!v5) {
      atomic_store( v4,  (unint64_t *)&lazy cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
    }
  }

unint64_t EndNavigationFlow.flowState.getter()
{
  unint64_t v1 = *(void *)(v0 + 32);
  outlined copy of EndNavigationFlow.State(v1);
  return v1;
}

unint64_t outlined copy of EndNavigationFlow.State(unint64_t result)
{
  if (result >= 3) {
    return swift_errorRetain(result);
  }
  return result;
}

unint64_t EndNavigationFlow.flowState.setter(uint64_t a1)
{
  unint64_t v3 = *(void *)(v1 + 32);
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a1;
  return outlined consume of EndNavigationFlow.State(v3);
}

unint64_t outlined consume of EndNavigationFlow.State(unint64_t result)
{
  if (result >= 3) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t EndNavigationFlow.checkNavigation.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t EndNavigationFlow.checkNavigation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_beginAccess(v2 + 80, v6, 1LL, 0LL);
  *(void *)(v2 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = a1;
  *(void *)(v2 + 88) = a2;
  return result;
}

uint64_t (*TrafficIncidentRequestSupportedCheckFlow.exitValue.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

void *EndNavigationFlow.__allocating_init(with:checkNavigation:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_allocObject(v3, 96LL, 7LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v12 + 16))(v11);
  id v13 = specialized EndNavigationFlow.init(with:checkNavigation:)((uint64_t)v11, a2, a3, v7, v8, v9);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v13;
}

void *EndNavigationFlow.init(with:checkNavigation:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v7);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v11 + 16))(v10);
  uint64_t v12 = specialized EndNavigationFlow.init(with:checkNavigation:)((uint64_t)v10, a2, a3, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v12;
}

uint64_t EndNavigationFlow.__allocating_init()()
{
  void v2[3] = &type metadata for FlowHelperImpl;
  void v2[4] = &protocol witness table for FlowHelperImpl;
  v2[0] = swift_allocObject(&unk_BA558, 192LL, 7LL);
  FlowHelperImpl.init()((void *)(v2[0] + 16LL));
  return (*(uint64_t (**)(void *, ValueMetadata *, _UNKNOWN **))(v0 + 192))( v2,  &type metadata for AssistantProperties,  &protocol witness table for AssistantProperties);
}

uint64_t EndNavigationFlow.executeState()(uint64_t a1)
{
  *(void *)(v2 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = a1;
  *(void *)(v2 + 48) = v1;
  return swift_task_switch(EndNavigationFlow.executeState(), 0LL, 0LL);
}

uint64_t EndNavigationFlow.executeState()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 48) + 120LL))();
  if (!v1)
  {
    uint64_t v6 = *(int **)(**(void **)(v0 + 48) + 216LL);
    uint64_t v23 = (uint64_t (*)(void))((char *)v6 + *v6);
    unint64_t v4 = (void *)swift_task_alloc(v6[1]);
    *(void *)(v0 + 56) = v4;
    uint64_t v5 = AnswerETAFlow.executeState();
    goto LABEL_6;
  }

  unint64_t v2 = v1;
  if (v1 == 1)
  {
    uint64_t v8 = *(int **)(**(void **)(v0 + 48) + 232LL);
    uint64_t v24 = (uint64_t (*)(void))((char *)v8 + *v8);
    uint64_t v9 = (void *)swift_task_alloc(v8[1]);
    *(void *)(v0 + 64) = v9;
    *uint64_t v9 = v0;
    v9[1] = EndNavigationFlow.executeState();
    return v24();
  }

  else
  {
    if (v1 == 2)
    {
      uint64_t v3 = *(int **)(**(void **)(v0 + 48) + 224LL);
      uint64_t v23 = (uint64_t (*)(void))((char *)v3 + *v3);
      unint64_t v4 = (void *)swift_task_alloc(v3[1]);
      *(void *)(v0 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v4;
      uint64_t v5 = AnswerETAFlow.executeState();
LABEL_6:
      void *v4 = v0;
      v4[1] = v5;
      return v23(*(void *)(v0 + 40));
    }

    uint64_t v10 = *(void *)(v0 + 48);
    os_log_type_t v11 = static os_log_type_t.default.getter(v1);
    uint64_t v12 = *(os_log_s **)(v10 + 16);
    os_log_type_t v13 = v11;
    if (os_log_type_enabled(v12, v11))
    {
      outlined copy of EndNavigationFlow.State(v2);
      outlined copy of EndNavigationFlow.State(v2);
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      uint64_t v25 = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      *(void *)(v0 + 24) = v2;
      swift_errorRetain(v2);
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v17 = String.init<A>(describing:)(v0 + 24, v16);
      unint64_t v19 = v18;
      *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40);
      swift_bridgeObjectRelease(v19);
      outlined consume of EndNavigationFlow.State(v2);
      outlined consume of EndNavigationFlow.State(v2);
      _os_log_impl(&dword_0, v12, v13, "EndNavigationFlow execute request unsupported with err: %s", v14, 0xCu);
      swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    uint64_t v20 = type metadata accessor for UnsupportedRequestFlow();
    uint64_t v21 = swift_allocObject(v20, 24LL, 7LL);
    type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
    *(void *)(v21 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000016LL,  0x800000000009BB90LL);
    *(void *)(v0 + 16) = v21;
    uint64_t v22 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for UnsupportedRequestFlow,  (uint64_t)&protocol conformance descriptor for UnsupportedRequestFlow);
    static ExecuteResponse.complete<A>(next:)(v0 + 16, v20, v22);
    outlined consume of EndNavigationFlow.State(v2);
    swift_release(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  void *v5;
  uint64_t (*v7)(void);
  uint64_t v1 = *v0;
  unint64_t v2 = *(void *)(*v0 + 48);
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 64));
  unint64_t v4 = *(int **)(*(void *)v2 + 208LL);
  uint64_t v7 = (uint64_t (*)(void))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v1 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v5;
  *uint64_t v5 = v3;
  v5[1] = AnswerETAFlow.executeState();
  return v7(*(void *)(v1 + 40));
}

uint64_t EndNavigationFlow.preChecks()(uint64_t a1)
{
  v2[23] = a1;
  _BYTE v2[24] = v1;
  uint64_t v3 = type metadata accessor for TemplatingResult(0LL);
  v2[25] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[26] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[27] = v5;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[28] = swift_task_alloc(v6);
  v2[29] = swift_task_alloc(v6);
  return swift_task_switch(EndNavigationFlow.preChecks(), 0LL, 0LL);
}

uint64_t EndNavigationFlow.preChecks()()
{
  if (((*(uint64_t (**)(void))(v1 + 8))() & 1) != 0)
  {
    (*(void (**)(uint64_t))(**(void **)(v0 + 192) + 128LL))(1LL);
    static ExecuteResponse.ongoing(requireInput:)(0LL);
    uint64_t v2 = *(void *)(v0 + 224);
    swift_task_dealloc(*(void *)(v0 + 232));
    swift_task_dealloc(v2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v4 = *(void **)(v0 + 192);
    uint64_t v5 = v4[3];
    *(void *)(v0 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &type metadata for NavigationControl;
    *(void *)(v0 + 48) = &protocol witness table for NavigationControl;
    *(void *)(v0 + 16) = 0LL;
    unint64_t v6 = *(void (**)(void))(*v4 + 144LL);
    *(void *)(v0 + 24specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v6;
    v6();
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v7);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 80))(v7, v8);
    *(void *)(v0 + 248) = v9;
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 56));
    uint64_t v10 = *(int **)(*(void *)v5 + 112LL);
    uint64_t v12 = (int *)((char *)v10 + *v10);
    os_log_type_t v11 = (void *)swift_task_alloc(v10[1]);
    *(void *)(v0 + 256) = v11;
    *os_log_type_t v11 = v0;
    v11[1] = EndNavigationFlow.preChecks();
    return ((uint64_t (*)(void, uint64_t, uint64_t))v12)(*(void *)(v0 + 232), v0 + 16, v9);
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 248);
  uint64_t v3 = *(void *)(*v1 + 256);
  *(void *)(*v1 + 264) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = EndNavigationFlow.preChecks();
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 16));
    uint64_t v5 = EndNavigationFlow.preChecks();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void v17[5];
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v16 = *(void *)(v0 + 216);
  (*(void (**)(void))(v0 + 240))();
  uint64_t v5 = *(void *)(v0 + 120);
  unint64_t v6 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 104))(v17, v5, v6);
  uint64_t v7 = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  outlined init with copy of DeviceState(v0 + 96, v0 + 136);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = (v16 + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  os_log_type_t v11 = swift_allocObject(&unk_BA580, v10 + 40, v8 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v11 + v9, v2, v3);
  outlined init with take of CATType((__int128 *)(v0 + 136), v11 + v10);
  uint64_t v12 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  os_log_type_t v13 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v17,  &async function pointer to partial apply for closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:),  v11);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 96));
  *(void *)(v0 + 176) = v13;
  static ExecuteResponse.complete<A>(next:)(v0 + 176, v12, &protocol witness table for SimpleOutputFlowAsync);
  swift_release(v13);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  uint64_t v14 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void **)(v0 + 192);
  uint64_t v3 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 16));
  uint64_t v4 = static os_log_type_t.error.getter(v3);
  os_log(_:dso:log:_:_:)( v4,  &dword_0,  v2[2],  "Dialog Engine error while building NotNavigating",  48LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v5 = *(void (**)(uint64_t))(*v2 + 128LL);
  swift_errorRetain(v1);
  v5(v1);
  static ExecuteResponse.ongoing(requireInput:)(0LL);
  swift_errorRelease(v1);
  unint64_t v6 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t EndNavigationFlow.handleDialog()(uint64_t a1)
{
  v2[23] = a1;
  _BYTE v2[24] = v1;
  uint64_t v3 = type metadata accessor for TemplatingResult(0LL);
  v2[25] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[26] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[27] = v5;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[28] = swift_task_alloc(v6);
  v2[29] = swift_task_alloc(v6);
  return swift_task_switch(EndNavigationFlow.handleDialog(), 0LL, 0LL);
}

uint64_t EndNavigationFlow.handleDialog()()
{
  uint64_t v1 = (void *)v0[24];
  uint64_t v2 = v1[3];
  v0[5] = &type metadata for NavigationControl;
  v0[6] = &protocol witness table for NavigationControl;
  v0[2] = 2LL;
  uint64_t v3 = *(void (**)(void))(*v1 + 144LL);
  v0[30] = v3;
  v3();
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 80))(v4, v5);
  v0[31] = v6;
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 7);
  uint64_t v7 = *(int **)(*(void *)v2 + 112LL);
  uint64_t v10 = (int *)((char *)v7 + *v7);
  uint64_t v8 = (void *)swift_task_alloc(v7[1]);
  v0[32] = v8;
  *uint64_t v8 = v0;
  v8[1] = EndNavigationFlow.handleDialog();
  return ((uint64_t (*)(void, void *, uint64_t))v10)(v0[29], v0 + 2, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 248);
  uint64_t v3 = *(void *)(*v1 + 256);
  *(void *)(*v1 + 264) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = EndNavigationFlow.handleDialog();
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 16));
    uint64_t v5 = EndNavigationFlow.handleDialog();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void v17[5];
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v16 = *(void *)(v0 + 216);
  (*(void (**)(void))(v0 + 240))();
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 104))(v17, v5, v6);
  uint64_t v7 = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  outlined init with copy of DeviceState(v0 + 96, v0 + 136);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = (v16 + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  os_log_type_t v11 = swift_allocObject(&unk_BA5A8, v10 + 40, v8 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v11 + v9, v2, v3);
  outlined init with take of CATType((__int128 *)(v0 + 136), v11 + v10);
  uint64_t v12 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  os_log_type_t v13 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v17,  &closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)partial apply,  v11);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 96));
  *(void *)(v0 + 176) = v13;
  static ExecuteResponse.complete<A>(next:)(v0 + 176, v12, &protocol witness table for SimpleOutputFlowAsync);
  swift_release(v13);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  uint64_t v14 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void **)(v0 + 192);
  uint64_t v3 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 16));
  uint64_t v4 = static os_log_type_t.error.getter(v3);
  os_log(_:dso:log:_:_:)( v4,  &dword_0,  v2[2],  "Dialog Engine error when building EndNavigation experience",  58LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v5 = *(void (**)(uint64_t))(*v2 + 128LL);
  swift_errorRetain(v1);
  v5(v1);
  static ExecuteResponse.ongoing(requireInput:)(0LL);
  swift_errorRelease(v1);
  uint64_t v6 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t EndNavigationFlow.endNavigation()()
{
  *(void *)(v1 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v0;
  return swift_task_switch(EndNavigationFlow.endNavigation(), 0LL, 0LL);
}

{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v1 = v0[14];
  uint64_t v2 = [objc_allocWithZone(SALocalSearchNavigationEnd) init];
  v0[15] = v2;
  (*(void (**)(void))(*(void *)v1 + 144LL))();
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 2);
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v5);
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to AceServiceInvokerAsync.submit<A>(_:)[1]);
  v0[16] = v7;
  uint64_t v8 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for SABaseCommand,  &OBJC_CLASS___SABaseCommand_ptr);
  *uint64_t v7 = v0;
  v7[1] = EndNavigationFlow.endNavigation();
  return AceServiceInvokerAsync.submit<A>(_:)(v2, v5, v8, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v1 = *(void *)(v0 + 136);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 56));
  uint64_t v2 = objc_opt_self(&OBJC_CLASS___SALocalSearchNavigationEndCompleted);
  uint64_t v3 = swift_dynamicCastObjCClass(v1, v2);
  uint64_t v4 = *(void **)(v0 + 136);
  uint64_t v5 = *(void **)(v0 + 112);
  uint64_t v6 = *(void **)(v0 + 120);
  if (v3)
  {
    uint64_t v7 = static os_log_type_t.default.getter(v3);
    uint64_t v8 = 2LL;
    os_log(_:dso:log:_:_:)( v7,  &dword_0,  v5[2],  "End Navigation results in SALocalSearchNavigationEndCompleted",  61LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v9 = v6;
  }

  else
  {
    uint64_t v10 = lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v8 = swift_allocError(&type metadata for Errors, v10, 0LL, 0LL);
    *(_OWORD *)os_log_type_t v11 = xmmword_95DA0;
    *(_BYTE *)(v11 + 16) = 3;
    uint64_t v9 = v4;
    uint64_t v4 = v6;
  }

  (*(void (**)(uint64_t))(*v5 + 128LL))(v8);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void (*v15)(uint64_t);
  uint64_t v17;
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 56));
  uint64_t v3 = static os_log_type_t.error.getter(v2);
  uint64_t v4 = *(os_log_s **)(v1 + 16);
  uint64_t v5 = v3;
  if (os_log_type_enabled(v4, v3))
  {
    uint64_t v6 = *(void *)(v0 + 144);
    swift_errorRetain(v6);
    swift_errorRetain(v6);
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v17 = v8;
    *(void *)(v0 + 96) = v6;
    swift_errorRetain(v6);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v10 = String.init<A>(describing:)(v0 + 96, v9);
    uint64_t v12 = v11;
    *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl(&dword_0, v4, v5, "Ace Command submission failed with error: %s ", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  os_log_type_t v13 = *(void *)(v0 + 144);
  uint64_t v14 = *(void **)(v0 + 120);
  uint64_t v15 = *(void (**)(uint64_t))(**(void **)(v0 + 112) + 128LL);
  swift_errorRetain(v13);
  v15(v13);

  swift_errorRelease(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t EndNavigationFlow.endNavigation()(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 128);
  *(void *)(v3 + 136) = a1;
  *(void *)(v3 + 144) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = EndNavigationFlow.endNavigation();
  }
  else {
    uint64_t v5 = EndNavigationFlow.endNavigation();
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t EndNavigationFlow.deinit()
{
  swift_release(*(void *)(v0 + 24));
  outlined consume of EndNavigationFlow.State(*(void *)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 40));
  return v0;
}

uint64_t EndNavigationFlow.__deallocating_deinit()
{
  swift_release(*(void *)(v0 + 24));
  outlined consume of EndNavigationFlow.State(*(void *)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 40));
  return swift_deallocClassInstance(v0, 96LL, 7LL);
}

uint64_t protocol witness for FSMFlow.flowState.getter in conformance EndNavigationFlow@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 120LL))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Flow.on(input:) in conformance EndNavigationFlow(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for EndNavigationFlow, a2);
  return FSMFlow.on(input:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance EndNavigationFlow( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for EndNavigationFlow, a3);
  return FSMFlow.execute(completion:)(a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for Flow.execute() in conformance EndNavigationFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_C6814);
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for EndNavigationFlow, a2);
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return FSMFlow.execute()(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance EndNavigationFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for EndNavigationFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance EndNavigationFlow( uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for EndNavigationFlow, a1);
  return FSMFlow.description.getter(a1, WitnessTable);
}

void *specialized EndNavigationFlow.init(with:checkNavigation:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  v18[3] = a5;
  v18[4] = a6;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v18);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32LL))(boxed_opaque_existential_0, a1, a5);
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  a4[2] = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000011LL,  0x8000000000098270LL);
  uint64_t v12 = type metadata accessor for CATService();
  uint64_t v13 = swift_allocObject(v12, 40LL, 7LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v12);
  *(void *)(v13 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  *(void *)(v13 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v13 + 16) = 0;
  a4[3] = v13;
  a4[4] = 0LL;
  a4[10] = a2;
  a4[11] = a3;
  uint64_t v15 = outlined init with copy of DeviceState((uint64_t)v18, (uint64_t)(a4 + 5));
  uint64_t v16 = static os_log_type_t.default.getter(v15);
  os_log(_:dso:log:_:_:)( v16,  &dword_0,  a4[2],  "EndNavigationFlow init with prechecks",  37LL,  2LL,  _swiftEmptyArrayStorage);
  __swift_destroy_boxed_opaque_existential_0Tm(v18);
  return a4;
}

uint64_t sub_55B4C()
{
  return swift_deallocObject(v0, 192LL, 7LL);
}

uint64_t instantiation function for generic protocol witness table for EndNavigationFlow( uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type EndNavigationFlow and conformance EndNavigationFlow,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for EndNavigationFlow,  (uint64_t)&protocol conformance descriptor for EndNavigationFlow);
  uint64_t result = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type EndNavigationFlow and conformance EndNavigationFlow,  v3,  (uint64_t (*)(uint64_t))type metadata accessor for EndNavigationFlow,  (uint64_t)&protocol conformance descriptor for EndNavigationFlow);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for EndNavigationFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin17EndNavigationFlow);
}

uint64_t sub_55C1C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120LL))();
  *a2 = result;
  return result;
}

uint64_t sub_55C4C(unint64_t *a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(unint64_t))(**(void **)a2 + 128LL);
  outlined copy of EndNavigationFlow.State(*a1);
  return v3(v2);
}

uint64_t sub_55C8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 144LL))();
}

uint64_t sub_55CB4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_BYTE *))(**(void **)a2 + 152LL))(v4);
}

uint64_t sub_55CF4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168LL))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_55D24(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)a2 + 176LL))(*a1, a1[1]);
}

ValueMetadata *type metadata accessor for EndNavigationFlow.State()
{
  return &type metadata for EndNavigationFlow.State;
}

double StandardMapData.longitude.getter(double a1, double a2)
{
  return a2;
}

uint64_t StandardMapData.CodingKeys.stringValue.getter(char a1)
{
  return *(void *)&aLabel_0[8 * a1];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance StandardMapData.CodingKeys()
{
  return StandardMapData.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance StandardMapData.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized StandardMapData.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance StandardMapData.CodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StandardMapData.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StandardMapData.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t StandardMapData.encode(to:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StandardMapData.CodingKeys>);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  unint64_t v17 = lazy protocol witness table accessor for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_BA800, &unk_BA800, v17, v15, v16);
  char v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v22, v11);
  if (!v5)
  {
    char v21 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v21, v11, a4);
    char v20 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v20, v11, a5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

unint64_t lazy protocol witness table accessor for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys;
  if (!lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for StandardMapData.CodingKeys, &unk_BA800);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys;
  if (!lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for StandardMapData.CodingKeys, &unk_BA800);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys;
  if (!lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for StandardMapData.CodingKeys, &unk_BA800);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys;
  if (!lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for StandardMapData.CodingKeys, &unk_BA800);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys);
  }

  return result;
}

void StandardMapData.init(from:)(void *a1)
{
}

void protocol witness for Decodable.init(from:) in conformance StandardMapData( void *a1@<X0>, uint64_t a2@<X8>)
{
  double v6 = specialized StandardMapData.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v5;
    *(double *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v7;
  }

uint64_t protocol witness for Encodable.encode(to:) in conformance StandardMapData(void *a1)
{
  return StandardMapData.encode(to:)(a1, *(void *)v1, *(void *)(v1 + 8), *(double *)(v1 + 16), *(double *)(v1 + 24));
}

uint64_t StandardMapData.makeAppPunchout(idiom:)( uint64_t a1, uint64_t a2, unint64_t a3, double a4, double a5)
{
  char v10 = VRXIdiom.isWatchOS.getter();
  uint64_t v11 = StandardMapData.makePunchoutURI(includeLabel:)((v10 & 1) == 0, a2, a3, a4, a5);
  uint64_t v13 = v12;
  if (one-time initialization token for appName != -1) {
    swift_once(&one-time initialization token for appName, one-time initialization function for appName);
  }
  BOOL v14 = a1 == 6;
  if (a1 == 6) {
    unint64_t v15 = 0x800000000009DF10LL;
  }
  else {
    unint64_t v15 = 0xEE007370614D2E65LL;
  }
  if (v14) {
    unint64_t v16 = 0xD000000000000012LL;
  }
  else {
    unint64_t v16 = 0x6C7070612E6D6F63LL;
  }
  uint64_t v17 = static MapsAppProperties.appName;
  uint64_t v18 = *(void *)algn_D2B18;
  __n128 v19 = swift_bridgeObjectRetain(*(void *)algn_D2B18);
  return AppPunchout.init(punchOutUri:bundleId:appDisplayName:)(v11, v13, v16, v15, v17, v18, v19);
}

uint64_t StandardMapData.makePunchoutURI(includeLabel:)( char a1, uint64_t a2, unint64_t a3, double a4, double a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_95430;
  *(void *)(v11 + 56) = &type metadata for Double;
  *(void *)(v11 + 64) = &protocol witness table for Double;
  *(double *)(v11 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a4;
  v12._uint64_t countAndFlagsBits = String.init(format:_:)(1714826789LL, 0xE400000000000000LL, v11);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRetain(0xE400000000000000LL);
  v14._uint64_t countAndFlagsBits = 44LL;
  v14._object = (void *)0xE100000000000000LL;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(0xE400000000000000LL);
  uint64_t v15 = swift_allocObject(v10, 72LL, 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_95430;
  *(void *)(v15 + 56) = &type metadata for Double;
  *(void *)(v15 + 64) = &protocol witness table for Double;
  *(double *)(v15 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a5;
  uint64_t v16 = String.init(format:_:)(1714826789LL, 0xE400000000000000LL, v15);
  uint64_t v18 = v17;
  swift_bridgeObjectRetain(0xE400000000000000LL);
  v19._uint64_t countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(0xE400000000000000LL);
  swift_bridgeObjectRelease(v18);
  if ((a1 & 1) != 0
    && (a2 || a3 != 0xE000000000000000LL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, 0LL, 0xE000000000000000LL, 0LL) & 1) == 0)
  {
    uint64_t v31 = a2;
    unint64_t v32 = a3;
    v30[0] = 32LL;
    v30[1] = 0xE100000000000000LL;
    v29[0] = 43LL;
    v29[1] = 0xE100000000000000LL;
    unint64_t v22 = lazy protocol witness table accessor for type String and conformance String();
    v23._uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v30,  v29,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v22,  v22,  v22);
    uint64_t v24 = v23._object;
    uint64_t v31 = 15729LL;
    unint64_t v32 = 0xE200000000000000LL;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(v24);
    v25._uint64_t countAndFlagsBits = v31;
    uint64_t v26 = (void *)v32;
    uint64_t v31 = 0xD000000000000017LL;
    unint64_t v32 = 0x800000000009DF30LL;
    v25._object = v26;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(v26);
    unint64_t v27 = v32;
    swift_bridgeObjectRetain(v32);
    v28._uint64_t countAndFlagsBits = 1030515750LL;
    v28._object = (void *)0xE400000000000000LL;
    String.append(_:)(v28);
    swift_bridgeObjectRelease(v27);
  }

  else
  {
    uint64_t v31 = 0xD000000000000017LL;
    unint64_t v32 = 0x800000000009DF30LL;
    v20._uint64_t countAndFlagsBits = 1030515750LL;
    v20._object = (void *)0xE400000000000000LL;
    String.append(_:)(v20);
  }

  swift_bridgeObjectRelease(0xE400000000000000LL);
  return v31;
}

uint64_t StandardMapData.makePunchoutURL(idiom:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v12 = type metadata accessor for CharacterSet(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v16 = VRXIdiom.isWatchOS.getter(a1);
  uint64_t v24 = StandardMapData.makePunchoutURI(includeLabel:)((v16 & 1) == 0, a2, a3, a5, a6);
  uint64_t v25 = v17;
  static CharacterSet.urlQueryAllowed.getter(v24);
  unint64_t v18 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v19 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)(v15, &type metadata for String, v18);
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  swift_bridgeObjectRelease(v25);
  if (v21)
  {
    URL.init(string:)(v19, v21);
    return swift_bridgeObjectRelease(v21);
  }

  else
  {
    uint64_t v23 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))( a4,  1LL,  1LL,  v23);
  }

id static StandardMapData.blueTint.getter()
{
  id v0 = [objc_allocWithZone(RFColor) init];
  [v0 setName:8];
  return v0;
}

void one-time initialization function for radius()
{
  static GeoMapViewConstants.radius = 0x4030000000000000LL;
}

uint64_t *GeoMapViewConstants.radius.unsafeMutableAddressor()
{
  if (one-time initialization token for radius != -1) {
    swift_once(&one-time initialization token for radius, one-time initialization function for radius);
  }
  return &static GeoMapViewConstants.radius;
}

double static GeoMapViewConstants.radius.getter()
{
  return static GeoMapViewConstants.radius.getter( &one-time initialization token for radius,  (uint64_t)&static GeoMapViewConstants.radius);
}

void one-time initialization function for frameHeight()
{
  static GeoMapViewConstants.frameHeight = 0x4063A00000000000LL;
}

uint64_t *GeoMapViewConstants.frameHeight.unsafeMutableAddressor()
{
  if (one-time initialization token for frameHeight != -1) {
    swift_once(&one-time initialization token for frameHeight, one-time initialization function for frameHeight);
  }
  return &static GeoMapViewConstants.frameHeight;
}

double static GeoMapViewConstants.frameHeight.getter()
{
  return static GeoMapViewConstants.radius.getter( &one-time initialization token for frameHeight,  (uint64_t)&static GeoMapViewConstants.frameHeight);
}

double static GeoMapViewConstants.radius.getter(void *a1, uint64_t a2)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  return *(double *)a2;
}

double one-time initialization function for marginPadding()
{
  double result = 0.0;
  __asm { FMOV            V1.2D, #6.0 }

  static GeoMapViewConstants.marginPadding = _Q1;
  *(_OWORD *)&qword_D2B00 = xmmword_982B0;
  return result;
}

__int128 *GeoMapViewConstants.marginPadding.unsafeMutableAddressor()
{
  if (one-time initialization token for marginPadding != -1) {
    swift_once(&one-time initialization token for marginPadding, one-time initialization function for marginPadding);
  }
  return &static GeoMapViewConstants.marginPadding;
}

double static GeoMapViewConstants.marginPadding.getter()
{
  if (one-time initialization token for marginPadding != -1) {
    swift_once(&one-time initialization token for marginPadding, one-time initialization function for marginPadding);
  }
  return *(double *)&static GeoMapViewConstants.marginPadding;
}

uint64_t specialized StandardMapData.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000LL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6562616CLL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x656475746974616CLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  else if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065LL)
  {
    swift_bridgeObjectRelease(0xE900000000000065LL);
    return 2LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x64757469676E6F6CLL, 0xE900000000000065LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

double specialized StandardMapData.init(from:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StandardMapData.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  unint64_t v10 = lazy protocol witness table accessor for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_BA800, &unk_BA800, v10, v8, v9);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0Tm(a1);
  }

  else
  {
    char v19 = 0;
    KeyedDecodingContainer.decode(_:forKey:)(&v19, v4);
    uint64_t v13 = v12;
    char v18 = 1;
    __n128 v14 = swift_bridgeObjectRetain(v12);
    KeyedDecodingContainer.decode(_:forKey:)(&v18, v4, v14);
    double v2 = v15.n128_f64[0];
    char v17 = 2;
    KeyedDecodingContainer.decode(_:forKey:)(&v17, v4, v15);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    __swift_destroy_boxed_opaque_existential_0Tm(a1);
    swift_bridgeObjectRelease(v13);
  }

  return v2;
}

uint64_t initializeWithCopy for StandardMapData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *assignWithCopy for StandardMapData(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for StandardMapData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for StandardMapData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StandardMapData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for StandardMapData()
{
  return &type metadata for StandardMapData;
}

ValueMetadata *type metadata accessor for GeoMapViewConstants()
{
  return &type metadata for GeoMapViewConstants;
}

uint64_t storeEnumTagSinglePayload for StandardMapData.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_56BEC + 4 * byte_982C5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_56C20 + 4 * byte_982C0[v4]))();
}

uint64_t sub_56C20(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_56C28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x56C30LL);
  }
  return result;
}

uint64_t sub_56C3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x56C44LL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_56C48(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_56C50(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for StandardMapData.CodingKeys()
{
  return &unk_BA800;
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.isPOMMES.getter()
{
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t ParkingCommon.__allocating_init(with:isPommes:)(__int128 *a1, char a2)
{
  uint64_t v5 = swift_allocObject(v2, 65LL, 7LL);
  ParkingCommon.init(with:isPommes:)(a1, a2);
  return v5;
}

uint64_t ParkingCommon.init(with:isPommes:)(__int128 *a1, char a2)
{
  *(void *)(v2 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x43676E696B726150LL,  0xED00006E6F6D6D6FLL);
  outlined init with take of CATType(a1, v2 + 24);
  *(_BYTE *)(v2 + 64) = a2;
  return v2;
}

uint64_t ParkingCommon.parkingRFView(dialog:parkingLocation:parkingNote:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[40] = a5;
  v6[41] = v5;
  v6[38] = a3;
  v6[39] = a4;
  v6[36] = a1;
  v6[37] = a2;
  uint64_t v7 = type metadata accessor for DialogPhase(0LL);
  v6[42] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OutputGenerationManifest(0LL);
  v6[43] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v6[44] = v9;
  v6[45] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(ParkingCommon.parkingRFView(dialog:parkingLocation:parkingNote:), 0LL, 0LL);
}

uint64_t ParkingCommon.parkingRFView(dialog:parkingLocation:parkingNote:)()
{
  __int16 v1 = (void *)v0[41];
  uint64_t v2 = v1 + 3;
  uint64_t v3 = v1[6];
  uint64_t v4 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 128))(v3, v4);
  v0[46] = v5;
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  __swift_project_boxed_opaque_existential_1(v2, v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 80))(v6, v7);
  v0[47] = v8;
  uint64_t v9 = *(int **)(*(void *)v5 + 152LL);
  uint64_t v12 = (int *)((char *)v9 + *v9);
  unint64_t v10 = (void *)swift_task_alloc(v9[1]);
  v0[48] = v10;
  void *v10 = v0;
  v10[1] = ParkingCommon.parkingRFView(dialog:parkingLocation:parkingNote:);
  return ((uint64_t (*)(void, uint64_t))v12)(v0[37], v8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v1 = (void *)(*(void *)v0 + 160LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 408LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 400LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 416LL));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  __swift_destroy_boxed_opaque_existential_0Tm(v1);
  return swift_task_switch(ParkingCommon.parkingRFView(dialog:parkingLocation:parkingNote:), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v2 = *(void *)(v0 + 352);
  __int16 v1 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 344);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = *(void *)(v0 + 336);
  swift_task_dealloc(*(void *)(v0 + 360));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v1 = *(void *)(v0 + 288);
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0LL;
  *(_OWORD *)__int16 v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  uint64_t v2 = *(void *)(v0 + 336);
  swift_task_dealloc(*(void *)(v0 + 360));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ParkingCommon.parkingRFView(dialog:parkingLocation:parkingNote:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 376LL);
  uint64_t v3 = *(void *)(*(void *)v2 + 384LL);
  uint64_t v5 = *(void *)(*(void *)v2 + 368LL);
  *(void *)(*(void *)v2 + 39(*(void (**)(uint64_t, uint64_t))(**(void **)(v0 + 24) + 120LL))(1LL, 2LL) = a1;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  swift_release(v5);
  if (v1)
  {
    swift_errorRelease(v1);
    uint64_t v6 = ParkingCommon.parkingRFView(dialog:parkingLocation:parkingNote:);
  }

  else
  {
    uint64_t v6 = ParkingCommon.parkingRFView(dialog:parkingLocation:parkingNote:);
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  os_log_s *oslog;
  os_log_t osloga;
  uint64_t v78;
  uint64_t v3 = *(void **)(v1 + 328);
  uint64_t v2 = *(void *)(v1 + 336);
  uint64_t v4 = v3 + 3;
  uint64_t v5 = static os_log_type_t.default.getter(a1);
  osos_log_t log = (os_log_s *)v3[2];
  uint64_t v6 = os_log(_:dso:log:_:_:)(v5, &dword_0, oslog, "RF: dialogResult success", 24LL, 2LL, _swiftEmptyArrayStorage);
  static DialogPhase.summary.getter(v6);
  OutputGenerationManifest.init(dialogPhase:_:)(v2, AnswerETAIntentResponseCode.rawValue.getter, 0LL);
  OutputGenerationManifest.listenAfterSpeaking.setter(0LL);
  OutputGenerationManifest.responseViewId.setter(0x6465722D7370616DLL, 0xED00006465746361LL);
  uint64_t v7 = v3[6];
  uint64_t v8 = v3[7];
  __swift_project_boxed_opaque_existential_1(v4, v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 128))(v7, v8);
  *(void *)(v1 + 20specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0LL;
  *(void *)(v1 + 224) = &type metadata for GeoLabel;
  *(void *)(v1 + 23__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &protocol witness table for GeoLabel;
  *(void *)(v1 + 208) = 0LL;
  *(_BYTE *)(v1 + 216) = 2;
  unint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 136LL))(v1 + 200);
  uint64_t v12 = v11;
  LOBYTE(v8) = v13;
  swift_release(v9);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v1 + 200));
  if ((v8 & 1) != 0)
  {
    outlined consume of Result<String, Error>(v10, v12, 1);
    unint64_t v10 = 0LL;
    uint64_t v12 = 0xE000000000000000LL;
  }

  uint64_t v75 = v12;
  uint64_t v70 = (void *)(v1 + 120);
  __n128 v14 = *(void *)(v1 + 320);
  uint64_t v72 = v10;
  if (!v14) {
    goto LABEL_9;
  }
  __n128 v15 = *(void *)(v1 + 312);
  uint64_t v16 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = v15 & 0xFFFFFFFFFFFFLL;
  }
  if (v16)
  {
    char v17 = *(void **)(v1 + 328);
    char v18 = v17[6];
    char v19 = v17[7];
    __swift_project_boxed_opaque_existential_1(v17 + 3, v18);
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v19 + 128);
    uint64_t v21 = swift_bridgeObjectRetain(v14);
    unint64_t v22 = v20(v18, v19, v21);
    *(void *)(v1 + 264) = &type metadata for GeoLabel;
    *(void *)(v1 + 27__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &protocol witness table for GeoLabel;
    *(void *)(v1 + 24specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v15;
    *(void *)(v1 + 248) = v14;
    *(_BYTE *)(v1 + 256) = 0;
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 136LL))(v1 + 240);
    uint64_t v25 = v24;
    unint64_t v27 = v26;
    swift_release(v22);
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v1 + 240));
    if ((v27 & 1) != 0)
    {
      outlined consume of Result<String, Error>(v23, v25, 1);
      uint64_t v23 = 0LL;
      uint64_t v73 = 0LL;
    }

    else
    {
      uint64_t v73 = v25;
    }

    unint64_t v10 = v72;
  }

  else
  {
LABEL_9:
    uint64_t v23 = 0LL;
    uint64_t v73 = 0LL;
  }

  Swift::String v28 = *(void **)(v1 + 328);
  uint64_t v29 = v28[6];
  uint64_t v30 = v28[7];
  __swift_project_boxed_opaque_existential_1(v28 + 3, v29);
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 128))(v29, v30);
  *(void *)(v1 + 104) = &type metadata for GeoLabel;
  *(void *)(v1 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &protocol witness table for GeoLabel;
  *(_OWORD *)(v1 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = xmmword_984B0;
  *(_BYTE *)(v1 + 96) = 2;
  unint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 136LL))(v1 + 80);
  uint64_t v34 = v33;
  LOBYTE(v29) = v35;
  swift_release(v31);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v1 + 80));
  if ((v29 & 1) != 0)
  {
    outlined consume of Result<String, Error>(v32, v34, 1);
    uint64_t v71 = 0LL;
    uint64_t v34 = 0xE000000000000000LL;
  }

  else
  {
    uint64_t v71 = v32;
  }

  uint64_t v36 = *(void **)(v1 + 328);
  uint64_t v37 = v36[6];
  uint64_t v38 = v36[7];
  __swift_project_boxed_opaque_existential_1(v36 + 3, v37);
  uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 128))(v37, v38);
  uint64_t v40 = CLPlacemark.makeDialogLocation()();
  *(void *)(v1 + 144) = &type metadata for GeoLabel;
  *(void *)(v1 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &protocol witness table for GeoLabel;
  *(void *)(v1 + 12specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v40;
  *(void *)(v1 + 128) = 0LL;
  *(_BYTE *)(v1 + 136) = 1;
  uint64_t v41 = (*(uint64_t (**)(void *))(*(void *)v39 + 136LL))(v70);
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  swift_release(v39);
  __swift_destroy_boxed_opaque_existential_0Tm(v70);
  uint64_t v74 = v23;
  if ((v45 & 1) != 0)
  {
    outlined consume of Result<String, Error>(v41, v43, 1);
    uint64_t v41 = 0LL;
    uint64_t v43 = 0xE000000000000000LL;
  }

  uint64_t v46 = [*(id *)(v1 + 304) location];
  uint64_t v47 = 0LL;
  uint64_t v48 = 0LL;
  if (v46)
  {
    unint64_t v49 = v46;
    [v46 coordinate];
    uint64_t v48 = v50;
  }

  uint64_t v51 = [*(id *)(v1 + 304) location];
  if (v51)
  {
    uint64_t v52 = v51;
    [v51 coordinate];
    uint64_t v47 = v53;
  }

  uint64_t v54 = static os_log_type_t.default.getter(v51);
  if (os_log_type_enabled(oslog, v54))
  {
    swift_bridgeObjectRetain_n(v73, 2LL);
    swift_bridgeObjectRetain_n(v43, 2LL);
    swift_bridgeObjectRetain_n(v75, 2LL);
    uint64_t v55 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v56 = swift_slowAlloc(32LL, -1LL);
    NSString v78 = v56;
    *(_DWORD *)uint64_t v55 = 136315138;
    *(void *)(v1 + 16) = v74;
    *(void *)(v1 + 24) = v73;
    *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v41;
    *(void *)(v1 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v43;
    *(void *)(v1 + 48) = v72;
    *(void *)(v1 + 56) = v75;
    *(void *)(v1 + 64) = v48;
    *(void *)(v1 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v47;
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v75);
    uint64_t v57 = String.init<A>(describing:)(v1 + 16, &type metadata for GeoParkedCar);
    uint64_t v59 = v58;
    *(void *)(v1 + 28specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 280, v1 + 288);
    swift_bridgeObjectRelease(v59);
    swift_bridgeObjectRelease_n(v73, 2LL);
    swift_bridgeObjectRelease_n(v43, 2LL);
    unint64_t v10 = v72;
    swift_bridgeObjectRelease_n(v75, 2LL);
    _os_log_impl(&dword_0, oslog, v54, "RF: parking model car: %s", v55, 0xCu);
    swift_arrayDestroy(v56, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1LL, -1LL);
    swift_slowDealloc(v55, -1LL, -1LL);
  }

  uint64_t v60 = *(void **)(v1 + 392);
  uint64_t v61 = type metadata accessor for ResponseFactory(0LL);
  swift_allocObject(v61, *(unsigned int *)(v61 + 48), *(unsigned __int16 *)(v61 + 52));
  *(void *)(v1 + 40specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = ResponseFactory.init()();
  *(void *)(v1 + 184) = &type metadata for GeoDataModels;
  *(void *)(v1 + 19__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = lazy protocol witness table accessor for type GeoDataModels and conformance GeoDataModels();
  __int128 v62 = swift_allocObject(&unk_BA8D0, 97LL, 7LL);
  *(void *)(v1 + 16specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v62;
  *(void *)(v62 + 16) = v74;
  *(void *)(v62 + 24) = v73;
  *(void *)(v62 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v41;
  *(void *)(v62 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v43;
  *(void *)(v62 + 48) = v10;
  *(void *)(v62 + 56) = v75;
  *(void *)(v62 + 64) = v48;
  *(void *)(v62 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v47;
  *(void *)(v62 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v71;
  *(void *)(v62 + 88) = v34;
  *(_BYTE *)(v62 + 96) = 1;
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v64 = swift_allocObject(v63, 40LL, 7LL);
  *(_OWORD *)(v64 + 16) = xmmword_95900;
  *(void *)(v64 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v60;
  NSString v78 = v64;
  specialized Array._endMutation()(v64);
  uint64_t v65 = v78;
  *(void *)(v1 + 408) = v78;
  uint64_t v67 = v60;
  uint64_t v68 = (void *)swift_task_alloc(v66);
  *(void *)(v1 + 416) = v68;
  *uint64_t v68 = v1;
  v68[1] = ParkingCommon.parkingRFView(dialog:parkingLocation:parkingNote:);
  return ((uint64_t (*)(void, uint64_t, uint64_t, void))osloga)( *(void *)(v1 + 288),  v1 + 160,  v65,  *(void *)(v1 + 360));
}

uint64_t RetrieveParkingHandleIntentStrategy.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 24));
  return swift_deallocClassInstance(v0, 65LL, 7LL);
}

uint64_t CLLocation.makeDialogLocation()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DialogLocation.Builder(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t v5 = DialogLocation.Builder.init()();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = swift_allocObject(v6, 40LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_95900;
  uint64_t v8 = type metadata accessor for DialogLocationValue.Builder(0LL);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  uint64_t v9 = DialogLocationValue.Builder.init()();
  uint64_t v10 = type metadata accessor for DialogLocationAddress.Builder(0LL);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  uint64_t v11 = DialogLocationAddress.Builder.init()();
  id v12 = [v1 shortDescription];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v15 = v14;

  String.toSpeakableString.getter(v13, v15);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = type metadata accessor for SpeakableString(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v3, 0LL, 1LL, v16);
  uint64_t v17 = dispatch thunk of DialogLocationAddress.Builder.withFullThoroughfare(_:)(v3);
  swift_release(v11);
  outlined destroy of SpeakableString?((uint64_t)v3);
  uint64_t v18 = dispatch thunk of DialogLocationValue.Builder.withAddress(_:)(v17);
  swift_release(v9);
  uint64_t v19 = swift_release(v17);
  uint64_t v20 = dispatch thunk of DialogLocationValue.Builder.build()(v19);
  uint64_t v21 = swift_release(v18);
  *(void *)(v7 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v20;
  uint64_t v28 = v7;
  specialized Array._endMutation()(v21);
  uint64_t v22 = v28;
  uint64_t v23 = dispatch thunk of DialogLocation.Builder.withValues(_:)(v28);
  swift_release(v5);
  uint64_t v24 = swift_bridgeObjectRelease(v22);
  uint64_t v25 = dispatch thunk of DialogLocation.Builder.build()(v24);
  swift_release(v23);
  return v25;
}

uint64_t sub_57A1C()
{
  return swift_deallocObject(v0, 97LL, 7LL);
}

uint64_t outlined destroy of SpeakableString?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ParkingCommon()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin13ParkingCommon);
}

uint64_t SaveParkingLocationUnsupportedValueStrategy.__allocating_init(with:)(__int128 *a1)
{
  uint64_t v3 = swift_allocObject(v1, 64LL, 7LL);
  type metadata accessor for OS_os_log();
  *(void *)(v3 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000002BLL,  0x80000000000984F0LL);
  outlined init with take of CATType(a1, v3 + 24);
  return v3;
}

uint64_t SaveParkingLocationUnsupportedValueStrategy.init(with:)(__int128 *a1)
{
  *(void *)(v1 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000002BLL,  0x80000000000984F0LL);
  outlined init with take of CATType(a1, v1 + 24);
  return v1;
}

uint64_t SaveParkingLocationUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return swift_task_switch( SaveParkingLocationUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:),  0LL,  0LL);
}

uint64_t SaveParkingLocationUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v1 = (void *)v0[8];
  uint64_t v3 = v1[6];
  uint64_t v2 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v3);
  v0[5] = &type metadata for SaveParkingLocation;
  v0[6] = &protocol witness table for SaveParkingLocation;
  v0[3] = 0LL;
  v0[4] = 0LL;
  v0[2] = 0LL;
  uint64_t v4 = (void *)swift_task_alloc(dword_C5274);
  v0[9] = v4;
  void *v4 = v0;
  v4[1] = SaveParkingLocationUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  return FlowHelper.makeDialogOnlyOutput(model:)(v0[7], (uint64_t)(v0 + 2), v3, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *(void *)(*v1 + 72);
  uint64_t v3 = *v1;
  *(void *)(v3 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch( SaveParkingLocationUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:),  0LL,  0LL);
  }
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v3 + 16));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

{
  uint64_t v0;
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SaveParkingLocationUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)( uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_task_switch( SaveParkingLocationUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:),  0LL,  0LL);
}

uint64_t SaveParkingLocationUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSaveParkingLocationIntent>);
  uint64_t v2 = ParameterResolutionRecord.intent.getter(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance SaveParkingLocationUnsupportedValueStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(**(void **)v2 + 104LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v9(a1, a2);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance SaveParkingLocationUnsupportedValueStrategy( uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 112LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance SaveParkingLocationUnsupportedValueStrategy;
  return v7(a1);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  uint64_t v6 = swift_task_dealloc(v4);
  if (!v1) {
    uint64_t v6 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance SaveParkingLocationUnsupportedValueStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for SaveParkingLocationUnsupportedValueStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t type metadata accessor for SaveParkingLocationUnsupportedValueStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin43SaveParkingLocationUnsupportedValueStrategy);
}

uint64_t GeoRCHFlowFactoryImpl.makeRCHFlow<A>(strategy:childProducers:resolvedApp:intent:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t v8 = *(void *)(a6 + 8);
  uint64_t v25 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v8 + 8),  a5,  &protocol requirements base descriptor for IntentExtensionCommunicatingAsync,  &associated type descriptor for IntentExtensionCommunicatingAsync.IntentType);
  uint64_t v9 = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v8 + 16),  a5,  &protocol requirements base descriptor for RouteConfirmIntentResponseFlowStrategyAsync,  &associated type descriptor for RouteConfirmIntentResponseFlowStrategyAsync.IntentResponseType);
  uint64_t v10 = type metadata accessor for RCHChildFlowProducersAsync(0LL, AssociatedTypeWitness, v9);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v14 = (char *)&v25 - v13;
  uint64_t v15 = *(void *)(a5 - 8);
  __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for RCHFlowFactory(0LL, a5, a6);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v25 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v27, a5);
  type metadata accessor for RCHChildFlowFactory(0LL, AssociatedTypeWitness, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v28, v10);
  uint64_t v22 = RCHChildFlowFactory.__allocating_init(producers:)(v14);
  RCHFlowFactory.init(strategy:childFlowFactory:)(v17, v22, a5, v25);
  uint64_t v23 = RCHFlowFactory.makeRCHFlowWithResolvedApp(_:intent:)(v29, v30, v18);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  return v23;
}

uint64_t protocol witness for GeoRCHFlowFactory.makeRCHFlow<A>(strategy:childProducers:resolvedApp:intent:) in conformance GeoRCHFlowFactoryImpl()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80LL))();
}

uint64_t type metadata accessor for GeoRCHFlowFactoryImpl()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin21GeoRCHFlowFactoryImpl);
}

uint64_t UnsupportedRequestFlow.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  type metadata accessor for OS_os_log();
  *(void *)(v1 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000016LL,  0x8000000000098610LL);
  return v1;
}

uint64_t UnsupportedRequestFlow.execute()(uint64_t a1)
{
  v1[17] = a1;
  uint64_t v2 = type metadata accessor for TemplatingResult(0LL);
  v1[18] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[19] = v3;
  uint64_t v4 = *(void *)(v3 + 64);
  v1[20] = v4;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v1[21] = swift_task_alloc(v5);
  uint64_t v6 = swift_task_alloc(v5);
  v1[22] = v6;
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to static ErrorTemplates.genericErrorLegacy()[1]);
  v1[23] = v7;
  *uint64_t v7 = v1;
  v7[1] = UnsupportedRequestFlow.execute();
  return static ErrorTemplates.genericErrorLegacy()(v6);
}

uint64_t UnsupportedRequestFlow.execute()()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184LL);
  *(void *)(*(void *)v1 + 19(*(void (**)(uint64_t, uint64_t))(**(void **)(v0 + 24) + 120LL))(1LL, 2LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = UnsupportedRequestFlow.execute();
  }
  else {
    uint64_t v3 = UnsupportedRequestFlow.execute();
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 160);
  unint64_t v5 = *(void *)(v0 + 144);
  *(void *)(v0 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &type metadata for FlowHelperImpl;
  *(void *)(v0 + 48) = &protocol witness table for FlowHelperImpl;
  uint64_t v6 = swift_allocObject(&unk_BA938, 192LL, 7LL);
  *(void *)(v0 + 16) = v6;
  outlined init with copy of FlowHelperImpl((uint64_t)static FlowHelperImpl.instance, v6 + 16);
  outlined init with copy of DeviceState(v6 + 144, v0 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v5);
  outlined init with copy of DeviceState(v0 + 16, v0 + 96);
  uint64_t v7 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = (v7 + 16) & ~v7;
  uint64_t v9 = (v4 + v8 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v10 = swift_allocObject(&unk_BA960, v9 + 40, v7 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v10 + v8, v2, v5);
  outlined init with take of CATType((__int128 *)(v0 + 96), v10 + v9);
  uint64_t v11 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  *(void *)(v0 + 20specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v0 + 56,  &async function pointer to partial apply for closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:),  v10);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v5);
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to SimpleOutputFlowAsync.execute()[1]);
  *(void *)(v0 + 208) = v12;
  *uint64_t v12 = v0;
  v12[1] = UnsupportedRequestFlow.execute();
  return SimpleOutputFlowAsync.execute()(*(void *)(v0 + 136));
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 200);
  unint64_t v5 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 208));
  swift_release(v2);
  uint64_t v3 = *(void *)(v1 + 168);
  swift_task_dealloc(*(void *)(v1 + 176));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 192);
  static ExecuteResponse.complete()();
  swift_errorRelease(v1);
  uint64_t v2 = *(void *)(v0 + 168);
  swift_task_dealloc(*(void *)(v0 + 176));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t UnsupportedRequestFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnsupportedRequestFlow();
  unint64_t v5 = lazy protocol witness table accessor for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow();
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
}

uint64_t UnsupportedRequestFlow.init()()
{
  *(void *)(v0 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000016LL,  0x8000000000098610LL);
  return v0;
}

uint64_t sub_58604()
{
  return swift_deallocObject(v0, 192LL, 7LL);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance UnsupportedRequestFlow( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UnsupportedRequestFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t sub_58674()
{
  uint64_t v1 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 40, v5);
}

uint64_t type metadata accessor for UnsupportedRequestFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin22UnsupportedRequestFlow);
}

unint64_t lazy protocol witness table accessor for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow;
  if (!lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow)
  {
    uint64_t v1 = type metadata accessor for UnsupportedRequestFlow();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UnsupportedRequestFlow, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow);
  }

  return result;
}

uint64_t RetrieveParkingBaseRCHStrategy.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  type metadata accessor for OS_os_log();
  *(void *)(v1 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001ELL,  0x80000000000986B0LL);
  return v1;
}

uint64_t RetrieveParkingBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for Parse(0LL);
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(RetrieveParkingBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:), 0LL, 0LL);
}

uint64_t RetrieveParkingBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:)()
{
  uint64_t v1 = *(void **)(v0 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 40);
    id v3 = v1;
    os_log_type_t v11 = static os_log_type_t.info.getter(v3, v4, v5, v6, v7, v8, v9, v10);
    uint64_t v12 = *(os_log_s **)(v2 + 16);
    os_log_type_t v13 = v11;
    if (os_log_type_enabled(v12, v11))
    {
      id v14 = v3;
      uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      uint64_t v61 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      id v3 = v14;
      id v17 = [v3 description];
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      unint64_t v20 = v19;

      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
      swift_bridgeObjectRelease(v20);

      _os_log_impl(&dword_0, v12, v13, "makeIntentFromParse with current intent: %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    goto LABEL_10;
  }

  uint64_t v22 = *(void *)(v0 + 56);
  uint64_t v21 = *(void *)(v0 + 64);
  uint64_t v23 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t, void, uint64_t))(v22 + 16))(v21, *(void *)(v0 + 24), v23);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 88))(v21, v23);
  if ((_DWORD)v24 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    uint64_t v25 = *(void *)(v0 + 64);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 56) + 96LL))(v25, *(void *)(v0 + 48));
    uint64_t v26 = *(void *)(v25
    uint64_t v27 = (void *)Parse.ServerConversion.siriKitIntent.getter();
    uint64_t v28 = objc_opt_self(&OBJC_CLASS___INRetrieveParkingLocationIntent);
    uint64_t v29 = swift_dynamicCastObjCClass(v27, v28);

    uint64_t v30 = *(void *)(v0 + 64);
    if (v29)
    {
      uint64_t v31 = Parse.ServerConversion.siriKitIntent.getter();
      swift_release(v26);
      uint64_t v32 = objc_opt_self(&OBJC_CLASS___INRetrieveParkingLocationIntent);
      id v3 = (id)swift_dynamicCastObjCClassUnconditional(v31, v32, 0LL, 0LL, 0LL);
      uint64_t v33 = type metadata accessor for NLIntent(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8LL))(v30, v33);
LABEL_10:
      swift_task_dealloc(*(void *)(v0 + 64));
      return (*(uint64_t (**)(id))(v0 + 8))(v3);
    }

    uint64_t v48 = type metadata accessor for RuntimeError();
    uint64_t v49 = swift_allocObject(v48, 32LL, 7LL);
    *(void *)(v49 + 16) = 0xD000000000000039LL;
    *(void *)(v49 + 24) = 0x800000000009E0B0LL;
    uint64_t v50 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RuntimeError,  (uint64_t)&protocol conformance descriptor for RuntimeError);
    uint64_t v51 = swift_allocError(v48, v50, 0LL, 0LL);
    *uint64_t v52 = v49;
    swift_willThrow(v51);
    swift_release(v26);
    uint64_t v53 = type metadata accessor for NLIntent(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8LL))(v30, v53);
  }

  else
  {
    uint64_t v35 = *(void *)(v0 + 56);
    uint64_t v34 = *(void ***)(v0 + 64);
    uint64_t v36 = *(void *)(v0 + 48);
    if ((_DWORD)v24 == enum case for Parse.pommesResponse(_:))
    {
      (*(void (**)(void, void))(v35 + 96))(*(void *)(v0 + 64), *(void *)(v0 + 48));
      uint64_t v37 = *v34;
      uint64_t v38 = PommesResponse.firstGeoExperience.getter();
      if (v38)
      {
        uint64_t v39 = (void *)v38;
        id v3 = [objc_allocWithZone(INRetrieveParkingLocationIntent) init];

        goto LABEL_10;
      }

      uint64_t v54 = *(void *)(v0 + 40);
      uint64_t v55 = static os_log_type_t.error.getter(0LL);
      os_log(_:dso:log:_:_:)( v55,  &dword_0,  *(void *)(v54 + 16),  "Received pommes response but no geo experience is present",  57LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v56 = type metadata accessor for RuntimeError();
      uint64_t v57 = swift_allocObject(v56, 32LL, 7LL);
      *(void *)(v57 + 16) = 0xD00000000000002BLL;
      *(void *)(v57 + 24) = 0x800000000009E130LL;
      uint64_t v58 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RuntimeError,  (uint64_t)&protocol conformance descriptor for RuntimeError);
      uint64_t v59 = swift_allocError(v56, v58, 0LL, 0LL);
      *uint64_t v60 = v57;
      swift_willThrow(v59);
    }

    else
    {
      uint64_t v41 = *(void *)(v0 + 40);
      uint64_t v42 = static os_log_type_t.error.getter(v24);
      os_log(_:dso:log:_:_:)( v42,  &dword_0,  *(void *)(v41 + 16),  "makeIntentFromParse should have INRetrieveParkingLocationIntent passed in",  73LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v43 = type metadata accessor for RuntimeError();
      uint64_t v44 = swift_allocObject(v43, 32LL, 7LL);
      *(void *)(v44 + 16) = 0xD000000000000049LL;
      *(void *)(v44 + 24) = 0x800000000009E060LL;
      uint64_t v45 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RuntimeError,  (uint64_t)&protocol conformance descriptor for RuntimeError);
      uint64_t v46 = swift_allocError(v43, v45, 0LL, 0LL);
      *uint64_t v47 = v44;
      swift_willThrow(v46);
      (*(void (**)(void **, uint64_t))(v35 + 8))(v34, v36);
    }
  }

  swift_task_dealloc(*(void *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RetrieveParkingBaseRCHStrategy.actionForInput(input:)()
{
  uint64_t v1 = type metadata accessor for Parse(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (id *)((char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = __chkstk_darwin();
  uint64_t v7 = (char *)&v26 - v6;
  Input.parse.getter(v5);
  (*(void (**)(id *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
  uint64_t v8 = (*(uint64_t (**)(id *, uint64_t))(v2 + 88))(v4, v1);
  if ((_DWORD)v8 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(id *, uint64_t))(v2 + 96))(v4, v1);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    uint64_t v10 = swift_release(*(id *)((char *)v4 + *(int *)(v9 + 48)));
    static ActionForInput.handle()(v10);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
    uint64_t v11 = type metadata accessor for NLIntent(0LL);
    return (*(uint64_t (**)(id *, uint64_t))(*(void *)(v11 - 8) + 8LL))(v4, v11);
  }

  else if ((_DWORD)v8 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(id *, uint64_t))(v2 + 96))(v4, v1);

    uint64_t v21 = static os_log_type_t.info.getter(v13, v14, v15, v16, v17, v18, v19, v20);
    uint64_t v22 = os_log(_:dso:log:_:_:)( v21,  &dword_0,  *(void *)(v0 + 16),  "actionForInput - pommesResponse",  31LL,  2LL,  _swiftEmptyArrayStorage);
    static ActionForInput.handle()(v22);
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v7, v1);
  }

  else
  {
    uint64_t v23 = static os_log_type_t.error.getter(v8);
    uint64_t v24 = os_log(_:dso:log:_:_:)( v23,  &dword_0,  *(void *)(v0 + 16),  "actionForInput - shouldn't hit default case",  43LL,  2LL,  _swiftEmptyArrayStorage);
    static ActionForInput.cancel()(v24);
    uint64_t v25 = *(void (**)(char *, uint64_t))(v2 + 8);
    v25(v7, v1);
    return ((uint64_t (*)(id *, uint64_t))v25)(v4, v1);
  }

uint64_t RetrieveParkingBaseRCHStrategy.init()()
{
  *(void *)(v0 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001ELL,  0x80000000000986B0LL);
  return v0;
}

uint64_t protocol witness for RCHFlowStrategyAsync.actionForInput(input:) in conformance RetrieveParkingBaseRCHStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96LL))();
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeIntentFromParse(parse:currentIntent:) in conformance RetrieveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(**(void **)v2 + 88LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance SaveParkingLocationUnsupportedValueStrategy;
  return v9(a1, a2);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeParameterMetadata(intent:) in conformance RetrieveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ParkingBaseRCHStrategy = type metadata accessor for RetrieveParkingBaseRCHStrategy();
  return RCHFlowStrategyAsync.makeParameterMetadata(intent:)(a1, ParkingBaseRCHStrategy, a3);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeErrorResponse(error:) in conformance RetrieveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to RCHFlowStrategyAsync.makeErrorResponse(error:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return RCHFlowStrategyAsync.makeErrorResponse(error:)(a1, a2, a3, a4);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance RetrieveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t ParkingBaseRCHStrategy = type metadata accessor for RetrieveParkingBaseRCHStrategy();
  void *v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)( a1,  a2,  a3,  ParkingBaseRCHStrategy,  a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:) in conformance RetrieveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t ParkingBaseRCHStrategy = type metadata accessor for RetrieveParkingBaseRCHStrategy();
  void *v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)( a1,  a2,  a3,  ParkingBaseRCHStrategy,  a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:) in conformance RetrieveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t ParkingBaseRCHStrategy = type metadata accessor for RetrieveParkingBaseRCHStrategy();
  void *v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)( a1,  a2,  a3,  ParkingBaseRCHStrategy,  a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance RetrieveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:)[1]);
  *(void *)(v6 + 16) = v12;
  uint64_t ParkingBaseRCHStrategy = type metadata accessor for RetrieveParkingBaseRCHStrategy();
  *uint64_t v12 = v6;
  v12[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:)( a1,  a2,  a3,  a4,  ParkingBaseRCHStrategy,  a6);
}

uint64_t protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance RetrieveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)[1]);
  *(void *)(v6 + 16) = v12;
  uint64_t ParkingBaseRCHStrategy = type metadata accessor for RetrieveParkingBaseRCHStrategy();
  *uint64_t v12 = v6;
  v12[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)( a1,  a2,  a3,  a4,  ParkingBaseRCHStrategy,  a6);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance RetrieveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t ParkingBaseRCHStrategy = type metadata accessor for RetrieveParkingBaseRCHStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentHandleIntentStrategy;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)(a1, a2, ParkingBaseRCHStrategy, a4);
}

uint64_t base witness table accessor for ResolveConfirmFlowStrategyAsync in RetrieveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type RetrieveParkingBaseRCHStrategy and conformance RetrieveParkingBaseRCHStrategy,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for RetrieveParkingBaseRCHStrategy,  (uint64_t)&protocol conformance descriptor for RetrieveParkingBaseRCHStrategy);
}

uint64_t type metadata accessor for RetrieveParkingBaseRCHStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin30RetrieveParkingBaseRCHStrategy);
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in RetrieveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type RetrieveParkingBaseRCHStrategy and conformance RetrieveParkingBaseRCHStrategy,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for RetrieveParkingBaseRCHStrategy,  (uint64_t)&protocol conformance descriptor for RetrieveParkingBaseRCHStrategy);
}

uint64_t base witness table accessor for RouteConfirmIntentResponseFlowStrategyAsync in RetrieveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type RetrieveParkingBaseRCHStrategy and conformance RetrieveParkingBaseRCHStrategy,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for RetrieveParkingBaseRCHStrategy,  (uint64_t)&protocol conformance descriptor for RetrieveParkingBaseRCHStrategy);
}

void __swiftcall GeoParkedCar.init(note:localizedAddress:locationInfo:)( GeoFlowDelegatePlugin::GeoParkedCar *__return_ptr retstr, Swift::String_optional note, Swift::String_optional localizedAddress, GeoFlowDelegatePlugin::StandardMapData locationInfo)
{
  retstr->note = note;
  retstr->Swift::String_optional localizedAddress = localizedAddress;
  retstr->locationInfo = locationInfo;
}

double GeoParkedCar.locationInfo.getter()
{
  double v1 = *(double *)(v0 + 48);
  swift_bridgeObjectRetain(*(void *)(v0 + 40));
  return v1;
}

double GeoParkedCar.latitude.getter()
{
  return *(double *)(v0 + 48);
}

double GeoParkedCar.longitude.getter()
{
  return *(double *)(v0 + 56);
}

uint64_t GeoParkedCar.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 1702129518LL;
  }
  if (a1 == 1) {
    return 0xD000000000000010LL;
  }
  return 0x6E6F697461636F6CLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GeoParkedCar.CodingKeys()
{
  return GeoParkedCar.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GeoParkedCar.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized GeoParkedCar.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoParkedCar.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoParkedCar.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GeoParkedCar.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoParkedCar.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  unint64_t v11 = lazy protocol witness table accessor for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_BAB60, &unk_BAB60, v11, v9, v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  LOBYTE(v21[0]) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v21, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    LOBYTE(v21[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v21, v5);
    __int128 v16 = *((_OWORD *)v3 + 3);
    v21[0] = *((_OWORD *)v3 + 2);
    v21[1] = v16;
    char v20 = 2;
    unint64_t v17 = lazy protocol witness table accessor for type StandardMapData and conformance StandardMapData();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v20, v5, &type metadata for StandardMapData, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t lazy protocol witness table accessor for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoParkedCar.CodingKeys, &unk_BAB60);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoParkedCar.CodingKeys, &unk_BAB60);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoParkedCar.CodingKeys, &unk_BAB60);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoParkedCar.CodingKeys, &unk_BAB60);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys);
  }

  return result;
}

double GeoParkedCar.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    __int128 v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }

  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GeoParkedCar(void *a1)
{
  return GeoParkedCar.encode(to:)(a1);
}

uint64_t specialized GeoParkedCar.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  BOOL v3 = a1 == 1702129518 && a2 == 0xE400000000000000LL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(1702129518LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v6 = 0x800000000009D310LL;
    if (a2 == 0x800000000009D310LL) {
      goto LABEL_11;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000000009D310LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC0000006F666E49LL)
  {
    swift_bridgeObjectRelease(0xEC0000006F666E49LL);
    return 2LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEC0000006F666E49LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t specialized GeoParkedCar.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoParkedCar.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  __int128 v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  unint64_t v11 = lazy protocol witness table accessor for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_BAB60, &unk_BAB60, v11, v9, v10);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_0Tm(a1);
  }
  LOBYTE(v30[0]) = 0;
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v30, v5);
  uint64_t v14 = v13;
  uint64_t v29 = v12;
  LOBYTE(v30[0]) = 1;
  swift_bridgeObjectRetain(v13);
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v30, v5);
  uint64_t v17 = v16;
  uint64_t v27 = v15;
  char v31 = 2;
  unint64_t v18 = lazy protocol witness table accessor for type StandardMapData and conformance StandardMapData();
  __n128 v19 = swift_bridgeObjectRetain(v17);
  uint64_t v28 = v17;
  KeyedDecodingContainer.decode<A>(_:forKey:)( v30,  &type metadata for StandardMapData,  &v31,  v5,  &type metadata for StandardMapData,  v18,  v19);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v21 = v30[0];
  uint64_t v20 = v30[1];
  uint64_t v22 = v30[2];
  uint64_t v23 = v30[3];
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v14);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  swift_bridgeObjectRelease(v20);
  uint64_t v24 = v28;
  swift_bridgeObjectRelease(v28);
  uint64_t result = swift_bridgeObjectRelease(v14);
  *a2 = v29;
  a2[1] = v14;
  a2[2] = v27;
  a2[3] = v24;
  a2[4] = v21;
  a2[5] = v20;
  a2[6] = v22;
  a2[7] = v23;
  return result;
}

uint64_t destroy for GeoParkedCar(void *a1)
{
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t initializeWithCopy for GeoParkedCar(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for GeoParkedCar(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for GeoParkedCar(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v8;
  swift_bridgeObjectRelease(v9);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoParkedCar(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoParkedCar(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for GeoParkedCar()
{
  return &type metadata for GeoParkedCar;
}

uint64_t storeEnumTagSinglePayload for GeoParkedCar.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_59E4C + 4 * byte_98825[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_59E80 + 4 * asc_98820[v4]))();
}

uint64_t sub_59E80(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_59E88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x59E90LL);
  }
  return result;
}

uint64_t sub_59E9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x59EA4LL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_59EA8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_59EB0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for GeoParkedCar.CodingKeys()
{
  return &unk_BAB60;
}

uint64_t TrafficIncidentUnsupportedValueStrategy.__allocating_init(with:)(__int128 *a1)
{
  uint64_t v3 = swift_allocObject(v1, 72LL, 7LL);
  TrafficIncidentUnsupportedValueStrategy.init(with:)(a1);
  return v3;
}

uint64_t TrafficIncidentUnsupportedValueStrategy.init(with:)(__int128 *a1)
{
  *(void *)(v1 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000027LL,  0x80000000000989A0LL);
  uint64_t v3 = type metadata accessor for CATService();
  uint64_t v4 = swift_allocObject(v3, 40LL, 7LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v3);
  *(void *)(v4 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  *(void *)(v4 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v4 + 16) = 1;
  *(void *)(v1 + 24) = v4;
  outlined init with take of CATType(a1, v1 + 32);
  return v1;
}

uint64_t TrafficIncidentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)( uint64_t a1, uint64_t a2)
{
  v3[35] = a2;
  v3[36] = v2;
  v3[34] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[37] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for TemplatingResult(0LL);
  v3[38] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[39] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[40] = swift_task_alloc(v7);
  v3[41] = swift_task_alloc(v7);
  return swift_task_switch(TrafficIncidentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:), 0LL, 0LL);
}

uint64_t TrafficIncidentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INReportIncidentIntent>);
  uint64_t v2 = (void *)ParameterResolutionRecord.result.getter();
  v0[42] = v2;
  uint64_t v3 = objc_opt_self(&OBJC_CLASS___INReportIncidentIncidentTypeResolutionResult);
  uint64_t v4 = swift_dynamicCastObjCClass(v2, v3);
  uint64_t v5 = v0[36];
  if (!v4)
  {

    uint64_t v18 = static os_log_type_t.error.getter(v17);
    os_log(_:dso:log:_:_:)( v18,  &dword_0,  *(void *)(v5 + 16),  "resolutionResult is not INReportIncidentIncidentTypeResolutionResult",  68LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v19 = type metadata accessor for RuntimeError();
    uint64_t v20 = swift_allocObject(v19, 32LL, 7LL);
    *(void *)(v20 + 16) = 0xD00000000000005CLL;
    *(void *)(v20 + 24) = 0x800000000009E240LL;
    unint64_t v21 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError();
    uint64_t v22 = swift_allocError(v19, v21, 0LL, 0LL);
    *uint64_t v23 = v20;
    swift_willThrow(v22);
LABEL_45:
    uint64_t v86 = v0[40];
    uint64_t v87 = v0[37];
    swift_task_dealloc(v0[41]);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    return ((uint64_t (*)(void))v0[1])();
  }

  uint64_t v6 = (void *)v4;
  uint64_t v93 = v0;
  unint64_t v7 = *(os_log_s **)(v5 + 16);
  id v8 = v2;
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  uint64_t v10 = &off_C4000;
  uint64_t v90 = v1;
  if (os_log_type_enabled(v7, v9))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v94 = v12;
    *(_DWORD *)unint64_t v11 = 136315138;
    v93[32] = [v6 unsupportedReason];
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    unint64_t v15 = v14;
    v93[33] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, (uint64_t *)&v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v93 + 33, v93 + 34);
    unint64_t v16 = v15;
    uint64_t v10 = &off_C4000;
    swift_bridgeObjectRelease(v16);

    _os_log_impl(&dword_0, v7, v9, "INReportIncidentIncidentTypeUnsupportedReason is %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
  }

  if ([v6 v10[46]] != (char *)&dword_0 + 2)
  {
    uint64_t v42 = (void *)v93[36];
    uint64_t v43 = v42[3];
    uint64_t v44 = type metadata accessor for TrafficIncident(0LL);
    v93[5] = v44;
    v93[6] = &protocol witness table for TrafficIncident;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v93 + 2);
    swift_storeEnumTagMultiPayload(boxed_opaque_existential_0, v44, 6LL);
    uint64_t v46 = v42[7];
    uint64_t v47 = v42[8];
    __swift_project_boxed_opaque_existential_1(v42 + 4, v46);
    uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 80))(v46, v47);
    v93[46] = v48;
    uint64_t v49 = *(int **)(*(void *)v43 + 112LL);
    uint64_t v91 = (int *)((char *)v49 + *v49);
    uint64_t v50 = (void *)swift_task_alloc(v49[1]);
    v93[47] = v50;
    *uint64_t v50 = v93;
    v50[1] = TrafficIncidentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    return ((uint64_t (*)(void, void *, uint64_t))v91)(v93[40], v93 + 2, v48);
  }

  id v24 = [v6 alternatives];
  uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, (char *)&type metadata for Any + 8);

  uint64_t v26 = (uint64_t)specialized _arrayConditionalCast<A, B>(_:)(v25);
  uint64_t v27 = swift_bridgeObjectRelease(v25);
  if (!v26)
  {
    uint64_t v61 = static os_log_type_t.error.getter(v27);
    os_log(_:dso:log:_:_:)( v61,  &dword_0,  v7,  "unsupportedIncidentTypes is not INSupportedTrafficIncidentType",  62LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v62 = type metadata accessor for RuntimeError();
    uint64_t v63 = swift_allocObject(v62, 32LL, 7LL);
    *(void *)(v63 + 16) = 0xD000000000000046LL;
    *(void *)(v63 + 24) = 0x800000000009E2E0LL;
    unint64_t v64 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError();
    uint64_t v65 = swift_allocError(v62, v64, 0LL, 0LL);
    *uint64_t v66 = v63;
    swift_willThrow(v65);

LABEL_44:
    uint64_t v0 = v93;
    goto LABEL_45;
  }

  uint64_t v89 = v7;
  if (!((unint64_t)v26 >> 62))
  {
    uint64_t v28 = *(void *)((char *)&dword_10 + (v26 & 0xFFFFFFFFFFFFFF8LL));
    uint64_t v88 = v8;
    if (v28) {
      goto LABEL_10;
    }
LABEL_39:
    swift_bridgeObjectRelease(v26);
    char v31 = _swiftEmptyArrayStorage;
    uint64_t v51 = _swiftEmptyArrayStorage[2];
    if (v51)
    {
LABEL_24:
      uint64_t v52 = v31 + 5;
      uint64_t v53 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v57 = *(v52 - 1);
        uint64_t v58 = *v52;
        uint64_t v59 = HIBYTE(*v52) & 0xFLL;
        if ((*v52 & 0x2000000000000000LL) == 0) {
          uint64_t v59 = v57 & 0xFFFFFFFFFFFFLL;
        }
        if (v59)
        {
          swift_bridgeObjectRetain(*v52);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v53);
          uint64_t v94 = v53;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v53[2] + 1LL,  1);
            uint64_t v53 = v94;
          }

          unint64_t v55 = v53[2];
          unint64_t v54 = v53[3];
          if (v55 >= v54 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v54 > 1,  v55 + 1,  1);
            uint64_t v53 = v94;
          }

          v53[2] = v55 + 1;
          uint64_t v56 = &v53[2 * v55];
          v56[4] = v57;
          v56[5] = v58;
        }

        v52 += 2;
        --v51;
      }

      while (v51);
      goto LABEL_41;
    }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 352);
  *(void *)(*v1 + 36specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(*(void *)(v2 + 344));
  if (v0)
  {
    uint64_t v4 = TrafficIncidentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 136));
    uint64_t v4 = TrafficIncidentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v1 = *(void *)(v0 + 328);
  uint64_t v2 = *(void **)(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v13 = *(void *)(v0 + 304);
  uint64_t v4 = *(void **)(v0 + 288);
  uint64_t v5 = *(void *)(v0 + 296);
  uint64_t v6 = *(void **)(v0 + 272);
  unint64_t v7 = v4[7];
  id v8 = v4[8];
  __swift_project_boxed_opaque_existential_1(v4 + 4, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  os_log_type_t v9 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v5, 1LL, 1LL, v9);
  *(void *)(v0 + 248) = 0LL;
  *(_OWORD *)(v0 + 23__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 216) = 0u;
  static TrafficIncidentUtils.sendCompletionViewOutput(result:snippets:device:listenAfterSpeaking:ttsEnabled:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v1,  (uint8_t *)_swiftEmptyArrayStorage,  v0 + 176,  0,  0,  1,  v5,  (uint64_t)_swiftEmptyArrayStorage,  v6,  v0 + 216);

  outlined destroy of (label: String?, value: Any)?( v0 + 216,  &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (label: String?, value: Any)?( v5,  &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 176));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v13);
  uint64_t v10 = *(void *)(v0 + 320);
  unint64_t v11 = *(void *)(v0 + 296);
  swift_task_dealloc(*(void *)(v0 + 328));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 376);
  *(void *)(*v1 + 384) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(*(void *)(v2 + 368));
  if (v0)
  {
    uint64_t v4 = TrafficIncidentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 16));
    uint64_t v4 = TrafficIncidentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v1 = *(void **)(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v4 = *(void *)(v0 + 296);
  uint64_t v13 = *(void *)(v0 + 304);
  uint64_t v5 = *(void **)(v0 + 288);
  uint64_t v6 = *(void **)(v0 + 272);
  unint64_t v7 = v5[7];
  id v8 = v5[8];
  __swift_project_boxed_opaque_existential_1(v5 + 4, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  os_log_type_t v9 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v4, 1LL, 1LL, v9);
  *(void *)(v0 + 128) = 0LL;
  *(_OWORD *)(v0 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  static TrafficIncidentUtils.sendCompletionViewOutput(result:snippets:device:listenAfterSpeaking:ttsEnabled:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v2,  (uint8_t *)_swiftEmptyArrayStorage,  v0 + 56,  0,  0,  1,  v4,  (uint64_t)_swiftEmptyArrayStorage,  v6,  v0 + 96);

  outlined destroy of (label: String?, value: Any)?( v0 + 96,  &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (label: String?, value: Any)?( v4,  &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v13);
  uint64_t v10 = *(void *)(v0 + 320);
  unint64_t v11 = *(void *)(v0 + 296);
  swift_task_dealloc(*(void *)(v0 + 328));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 136));
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 296);
  swift_task_dealloc(*(void *)(v0 + 328));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 16));
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 296);
  swift_task_dealloc(*(void *)(v0 + 328));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

LABEL_40:
    uint64_t v53 = _swiftEmptyArrayStorage;
LABEL_41:
    swift_bridgeObjectRelease(v31);
    if (v53[2])
    {
      uint64_t v68 = (void *)v93[36];
      uint64_t v69 = v68[3];
      uint64_t v70 = type metadata accessor for TrafficIncident(0LL);
      v93[20] = v70;
      v93[21] = &protocol witness table for TrafficIncident;
      uint64_t v71 = __swift_allocate_boxed_opaque_existential_0(v93 + 17);
      uint64_t v72 = (void *)ParameterResolutionRecord.intent.getter(v90);
      char v73 = specialized static TrafficIncidentUtils.isUpdateIntent(intent:)(v72);

      *uint64_t v71 = v53;
      *((_BYTE *)v71 + 8) = v73 & 1;
      swift_storeEnumTagMultiPayload(v71, v70, 1LL);
      uint64_t v74 = v68[7];
      uint64_t v75 = v68[8];
      __swift_project_boxed_opaque_existential_1(v68 + 4, v74);
      uint64_t v76 = (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 80))(v74, v75);
      v93[43] = v76;
      id v77 = *(int **)(*(void *)v69 + 112LL);
      uint64_t v92 = (int *)((char *)v77 + *v77);
      NSString v78 = (void *)swift_task_alloc(v77[1]);
      v93[44] = v78;
      void *v78 = v93;
      v78[1] = TrafficIncidentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      return ((uint64_t (*)(void, void *, uint64_t))v92)(v93[41], v93 + 17, v76);
    }

    uint64_t v79 = swift_release(v53);
    uint64_t v80 = static os_log_type_t.error.getter(v79);
    os_log(_:dso:log:_:_:)( v80,  &dword_0,  v89,  "unsupportedIncidentTypes should not be empty list of strings",  60LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v81 = type metadata accessor for RuntimeError();
    uint64_t v82 = swift_allocObject(v81, 32LL, 7LL);
    *(void *)(v82 + 16) = 0xD000000000000042LL;
    *(void *)(v82 + 24) = 0x800000000009E370LL;
    unint64_t v83 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError();
    uint64_t v84 = swift_allocError(v81, v83, 0LL, 0LL);
    *uint64_t v85 = v82;
    swift_willThrow(v84);

    goto LABEL_44;
  }

  if (v26 >= 0) {
    uint64_t v67 = v26 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    uint64_t v67 = v26;
  }
  swift_bridgeObjectRetain(v26);
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v67);
  swift_bridgeObjectRelease(v26);
  uint64_t v88 = v8;
  if (!v28) {
    goto LABEL_39;
  }
LABEL_10:
  uint64_t v94 = _swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v28 & ~(v28 >> 63),  0);
  if ((v28 & 0x8000000000000000LL) == 0)
  {
    uint64_t v30 = 0LL;
    char v31 = v94;
    do
    {
      if ((v26 & 0xC000000000000001LL) != 0) {
        id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v30, v26);
      }
      else {
        id v32 = *(id *)(v26 + 8 * v30 + 32);
      }
      uint64_t v33 = v32;
      id v34 = [v32 localizedDisplayString];
      if (v34)
      {
        uint64_t v35 = v34;
        uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
        unint64_t v38 = v37;
      }

      else
      {

        uint64_t v36 = 0LL;
        unint64_t v38 = 0xE000000000000000LL;
      }

      uint64_t v94 = v31;
      unint64_t v40 = v31[2];
      unint64_t v39 = v31[3];
      if (v40 >= v39 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
        char v31 = v94;
      }

      ++v30;
      uint64_t v31[2] = v40 + 1;
      uint64_t v41 = &v31[2 * v40];
      v41[4] = v36;
      void v41[5] = v38;
    }

    while (v28 != v30);
    swift_bridgeObjectRelease(v26);
    uint64_t v51 = v31[2];
    if (v51) {
      goto LABEL_24;
    }
    goto LABEL_40;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  swift_task_dealloc(v23);
  uint64_t v29 = v16 & v28;
  uint64_t v30 = *(void **)(v0 + 56);
  if ((v29 & 1) != 0)
  {
    char v31 = [objc_allocWithZone(CLLocation) initWithLatitude:*(double *)(v0 + 32) longitude:v18];
    unint64_t v39 = static os_log_type_t.info.getter(v31, v32, v33, v34, v35, v36, v37, v38);
    unint64_t v40 = (os_log_s *)v30[9];
    uint64_t v41 = v39;
    if (os_log_type_enabled(v40, v39))
    {
      uint64_t v42 = v31;
      uint64_t v53 = v31;
      uint64_t v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v44 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v43 = 138412290;
      *(void *)(v0 + 16) = v42;
      uint64_t v45 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v54, v0 + 24);
      *uint64_t v44 = v42;

      _os_log_impl(&dword_0, v40, v41, "location from NL intent is: %@", v43, 0xCu);
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v44, 1LL, v46);
      swift_slowDealloc(v44, -1LL, -1LL);
      uint64_t v47 = v43;
      char v31 = v53;
      swift_slowDealloc(v47, -1LL, -1LL);
    }

    else
    {
      uint64_t v42 = v31;
    }

    uint64_t v49 = *(uint64_t (**)(id, void))(**(void **)(v0 + 56) + 128LL);
    uint64_t v50 = v31;
    uint64_t v51 = v49(v42, 0LL);
    static ExecuteResponse.complete()(v51);
  }

  else
  {
    uint64_t v48 = (*(uint64_t (**)(void, uint64_t))(*v30 + 128LL))(0LL, 2LL);
    static ExecuteResponse.complete()(v48);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError()
{
  unint64_t result = lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError;
  if (!lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError)
  {
    uint64_t v1 = type metadata accessor for RuntimeError();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RuntimeError, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError);
  }

  return result;
}

uint64_t TrafficIncidentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)( uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_task_switch( TrafficIncidentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:),  0LL,  0LL);
}

uint64_t TrafficIncidentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INReportIncidentIntent>);
  uint64_t v2 = ParameterResolutionRecord.intent.getter(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance TrafficIncidentUnsupportedValueStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(**(void **)v2 + 112LL);
  os_log_type_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  unint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *unint64_t v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v9(a1, a2);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance TrafficIncidentUnsupportedValueStrategy( uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 120LL);
  unint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance SaveParkingLocationUnsupportedValueStrategy;
  return v7(a1);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance TrafficIncidentUnsupportedValueStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = (void *)swift_task_alloc(async function pointer to UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentUnsupportedValueStrategy();
  *id v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GeoContact>);
  uint64_t v11 = *(void *)(type metadata accessor for GeoContact(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  unint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = _swift_stdlib_malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v16 - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_34;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = type metadata accessor for GeoContact(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (char *)v15 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }

    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v23 = *(void *)(v19 + 72) * v8;
  id v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }

LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + __swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + __swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + __swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + __swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GeoTrafficIncident>);
    uint64_t v11 = (char *)swift_allocObject(v10, 48 * v9 + 32, 7LL);
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + __swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[48 * v8]) {
      memmove(v13, v14, 48 * v8);
    }
    *((void *)a4 + __swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[48 * v8] || v13 >= &v14[48 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t type metadata accessor for TrafficIncidentUnsupportedValueStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin39TrafficIncidentUnsupportedValueStrategy);
}

uint64_t static MapsAppProperties.getBundleID(idiom:)(uint64_t a1)
{
  if (a1 == 6) {
    return 0xD000000000000012LL;
  }
  else {
    return 0x6C7070612E6D6F63LL;
  }
}

uint64_t *MapsAppProperties.appName.unsafeMutableAddressor()
{
  if (one-time initialization token for appName != -1) {
    swift_once(&one-time initialization token for appName, one-time initialization function for appName);
  }
  return &static MapsAppProperties.appName;
}

void one-time initialization function for appName()
{
  static MapsAppProperties.appuint64_t Name = 1936744781LL;
  *(void *)algn_D2B18 = 0xE400000000000000LL;
}

uint64_t static MapsAppProperties.appName.getter()
{
  if (one-time initialization token for appName != -1) {
    swift_once(&one-time initialization token for appName, one-time initialization function for appName);
  }
  uint64_t v0 = static MapsAppProperties.appName;
  swift_bridgeObjectRetain(*(void *)algn_D2B18);
  return v0;
}

ValueMetadata *type metadata accessor for MapsAppProperties()
{
  return &type metadata for MapsAppProperties;
}

uint64_t *TrafficIncidentUtils.siriSupportedIncidents.unsafeMutableAddressor()
{
  if (one-time initialization token for siriSupportedIncidents != -1) {
    swift_once( &one-time initialization token for siriSupportedIncidents,  one-time initialization function for siriSupportedIncidents);
  }
  return &static TrafficIncidentUtils.siriSupportedIncidents;
}

uint64_t static TrafficIncidentUtils.sendCompletionViewOutput(result:snippets:device:listenAfterSpeaking:ttsEnabled:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)@<X0>( uint64_t a1@<X0>, uint8_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  int v69 = a5;
  LODWORD(v__swift_destroy_boxed_opaque_existential_0Tm(v0 + 13) = a4;
  uint64_t v70 = a3;
  uint64_t v71 = a2;
  uint64_t v72 = a9;
  uint64_t v15 = type metadata accessor for AceOutput(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  uint64_t v67 = &v65[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  uint64_t v19 = &v65[-v18];
  uint64_t v20 = __chkstk_darwin();
  char v73 = &v65[-v21];
  uint64_t v29 = static os_log_type_t.info.getter(v20, v22, v23, v24, v25, v26, v27, v28);
  if (one-time initialization token for logObject != -1) {
    swift_once(&one-time initialization token for logObject, one-time initialization function for logObject);
  }
  uint64_t v68 = a10;
  uint64_t v30 = (os_log_s *)logObject;
  uint64_t v31 = os_log(_:dso:log:_:_:)(v29, &dword_0, logObject, "sendCompletionViewOutput", 24LL, 2LL, _swiftEmptyArrayStorage);
  os_log_type_t v32 = static os_log_type_t.default.getter(v31);
  if (os_log_type_enabled(v30, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    int v66 = (int)v13;
    uint64_t v13 = v19;
    uint64_t v34 = v16;
    uint64_t v35 = a1;
    char v36 = a6;
    uint64_t v37 = a8;
    uint64_t v38 = a7;
    unint64_t v39 = v33;
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl(&dword_0, v30, v32, "sendCompletionViewOutputSuccess", v33, 2u);
    unint64_t v40 = v39;
    a7 = v38;
    a8 = v37;
    a6 = v36;
    a1 = v35;
    uint64_t v16 = v34;
    uint64_t v19 = v13;
    LOBYTE(v__swift_destroy_boxed_opaque_existential_0Tm(v0 + 13) = v66;
    swift_slowDealloc(v40, -1LL, -1LL);
  }

  uint64_t v41 = a6 & 1;
  uint64_t v42 = v73;
  uint64_t v43 = static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( a1,  v70,  v69 & 1,  v71,  v13 & 1,  v41,  a7,  a8,  v68);
  os_log_type_t v51 = static os_log_type_t.info.getter(v43, v44, v45, v46, v47, v48, v49, v50);
  uint64_t v52 = (os_log_s *)logObject;
  uint64_t v53 = v16;
  unint64_t v54 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v16 + 16);
  v54(v19, v42, v15);
  os_log_type_t v55 = v51;
  if (os_log_type_enabled(v52, v51))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v57 = swift_slowAlloc(32LL, -1LL);
    uint64_t v75 = v57;
    *(_DWORD *)uint64_t v56 = 136315138;
    uint64_t v71 = v56 + 4;
    uint64_t v58 = v67;
    v54(v67, v19, v15);
    uint64_t v59 = String.init<A>(describing:)(v58, v15);
    unint64_t v61 = v60;
    uint64_t v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
    swift_bridgeObjectRelease(v61);
    (*(void (**)(_BYTE *, uint64_t))(v53 + 8))(v19, v15);
    _os_log_impl(&dword_0, v52, v55, "sendCompletionViewOutput dialog final output is: %s", v56, 0xCu);
    swift_arrayDestroy(v57, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1LL, -1LL);
    swift_slowDealloc(v56, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v53 + 8))(v19, v15);
  }

  uint64_t v62 = v72;
  v72[3] = v15;
  v62[4] = &protocol witness table for AceOutput;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v62);
  return (*(uint64_t (**)(void *, _BYTE *, uint64_t))(v53 + 32))(boxed_opaque_existential_0, v73, v15);
}

uint64_t one-time initialization function for siriSupportedIncidents()
{
  uint64_t result = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for siriSupportedIncidents);
  static TrafficIncidentUtils.siriSupportedIncidents = result;
  return result;
}

double static TrafficIncidentUtils.siriSupportedIncidents.getter()
{
  if (one-time initialization token for siriSupportedIncidents != -1) {
    swift_once( &one-time initialization token for siriSupportedIncidents,  one-time initialization function for siriSupportedIncidents);
  }
  swift_beginAccess(&static TrafficIncidentUtils.siriSupportedIncidents, v1, 0LL, 0LL);
  *(void *)&double result = swift_bridgeObjectRetain(static TrafficIncidentUtils.siriSupportedIncidents).n128_u64[0];
  return result;
}

uint64_t static TrafficIncidentUtils.siriSupportedIncidents.setter(uint64_t a1)
{
  if (one-time initialization token for siriSupportedIncidents != -1) {
    swift_once( &one-time initialization token for siriSupportedIncidents,  one-time initialization function for siriSupportedIncidents);
  }
  swift_beginAccess(&static TrafficIncidentUtils.siriSupportedIncidents, v4, 1LL, 0LL);
  uint64_t v2 = static TrafficIncidentUtils.siriSupportedIncidents;
  static TrafficIncidentUtils.siriSupportedIncidents = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t (*static TrafficIncidentUtils.siriSupportedIncidents.modify(uint64_t a1))()
{
  if (one-time initialization token for siriSupportedIncidents != -1) {
    swift_once( &one-time initialization token for siriSupportedIncidents,  one-time initialization function for siriSupportedIncidents);
  }
  swift_beginAccess(&static TrafficIncidentUtils.siriSupportedIncidents, a1, 33LL, 0LL);
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t static TrafficIncidentUtils.convertINTrafficIncidentToLocationSearchValue(incidentType:)( unint64_t a1)
{
  if (a1 >= 6) {
    return 1LL;
  }
  else {
    return (0x40103020001uLL >> (8 * a1));
  }
}

uint64_t static TrafficIncidentUtils.sendCompletionViewOutput(result:snippets:device:listenAfterSpeaking:ttsEnabled:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:_:)( uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, uint8_t *a8, uint64_t a9, void (*a10)(uint64_t *), uint64_t a11)
{
  uint64_t v68 = a7;
  int v69 = a8;
  int v64 = a4;
  int v65 = a6;
  int v63 = a5;
  uint64_t v66 = a3;
  uint64_t v67 = a2;
  uint64_t v73 = a11;
  uint64_t v12 = type metadata accessor for AceOutput(0LL);
  uint64_t v70 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v62 - v15;
  __chkstk_darwin();
  uint64_t v18 = (char *)&v62 - v17;
  uint64_t v19 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v71 = *(void *)(v19 - 8);
  uint64_t v72 = v19;
  __chkstk_darwin();
  uint64_t v74 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  uint64_t v22 = __chkstk_darwin();
  uint64_t v24 = (uint64_t *)((char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v32 = static os_log_type_t.info.getter(v22, v25, v26, v27, v28, v29, v30, v31);
  if (one-time initialization token for logObject != -1) {
    swift_once(&one-time initialization token for logObject, one-time initialization function for logObject);
  }
  uint64_t v33 = (os_log_s *)logObject;
  os_log(_:dso:log:_:_:)(v32, &dword_0, logObject, "sendCompletionViewOutput", 24LL, 2LL, _swiftEmptyArrayStorage);
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v24);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v24, v21);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v35 = *v24;
    uint64_t v36 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    os_log(_:dso:log:_:_:)(v36, &dword_0, v33, "sendCompletionViewOutputFail", 28LL, 2LL, _swiftEmptyArrayStorage);
    v76[0] = v35;
    char v77 = 1;
    swift_errorRetain(v35);
    a10(v76);
    swift_errorRelease(v35);
  }

  else
  {
    uint64_t v62 = a10;
    uint64_t v37 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v71 + 32))(v74, v24, v72);
    os_log_type_t v38 = static os_log_type_t.default.getter(v37);
    if (os_log_type_enabled(v33, v38))
    {
      unint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v39 = 0;
      _os_log_impl(&dword_0, v33, v38, "sendCompletionViewOutputSuccess", v39, 2u);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    uint64_t v40 = static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v74,  v66,  v63 & 1,  v67,  v64 & 1,  v65 & 1,  v68,  v69,  a9);
    os_log_type_t v48 = static os_log_type_t.info.getter(v40, v41, v42, v43, v44, v45, v46, v47);
    uint64_t v49 = (os_log_s *)logObject;
    uint64_t v50 = v70;
    os_log_type_t v51 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
    v51(v16, v18, v12);
    os_log_type_t v52 = v48;
    if (os_log_type_enabled(v49, v48))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v54 = swift_slowAlloc(32LL, -1LL);
      v76[0] = v54;
      *(_DWORD *)uint64_t v53 = 136315138;
      int v69 = v53 + 4;
      v51(v14, v16, v12);
      uint64_t v55 = String.init<A>(describing:)(v14, v12);
      unint64_t v57 = v56;
      uint64_t v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76);
      swift_bridgeObjectRelease(v57);
      uint64_t v58 = *(void (**)(char *, uint64_t))(v70 + 8);
      v58(v16, v12);
      _os_log_impl(&dword_0, v49, v52, "sendCompletionViewOutput dialog final output is: %s", v53, 0xCu);
      swift_arrayDestroy(v54, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1LL, -1LL);
      swift_slowDealloc(v53, -1LL, -1LL);
    }

    else
    {
      uint64_t v58 = *(void (**)(char *, uint64_t))(v50 + 8);
      v58(v16, v12);
    }

    uint64_t v59 = v62;
    v76[3] = v12;
    v76[4] = (uint64_t)&protocol witness table for AceOutput;
    boxed_opaque_existential_0 = (char *)__swift_allocate_boxed_opaque_existential_0(v76);
    v51(boxed_opaque_existential_0, v18, v12);
    char v77 = 0;
    v59(v76);
    v58(v18, v12);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v74, v72);
  }

  return outlined destroy of Result<Output, Error>((uint64_t)v76);
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v14, *(void *)(*v2 + 40LL));
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v14[0] = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    uint64_t v13 = *v2;
    *uint64_t v2 = v14[0];
    swift_bridgeObjectRelease(v13);
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  if (*(void *)(v9 + 8 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(void *)(v9 + 8 * v8) != a2);
  }

  uint64_t result = 0LL;
  a2 = *(void *)(*(void *)(*v2 + 48LL) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

Swift::Int specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<INTrafficIncidentType>);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  Swift::Int v6 = result;
  if (*(void *)(v3 + 16))
  {
    uint64_t v29 = v2;
    int64_t v7 = 0LL;
    unint64_t v8 = (void *)(v3 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v3 + 56);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    Swift::Int v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }

      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                uint64_t v28 = 1LL << *(_BYTE *)(v3 + 32);
                if (v28 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *unint64_t v8 = -1LL << v28;
                }
                uint64_t v2 = v29;
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v7 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v7 = v19;
            }
          }
        }

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v8);
  }

  else
  {
    if (v7 > v6)
    {
      Swift::Int result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }

    specialized _NativeSet.copyAndResize(capacity:)(v8);
  }

  uint64_t v9 = *v3;
  Hasher.init(_seed:)(v17, *(void *)(*v3 + 40));
  Hasher._combine(_:)(v5);
  Swift::Int result = Hasher._finalize()();
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(void *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for INTrafficIncidentType(0LL);
      Swift::Int result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }

    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }

LABEL_14:
  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v13 + 48) + 8 * a__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v5;
  uint64_t v14 = *(void *)(v13 + 16);
  BOOL v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<INTrafficIncidentType>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    Swift::Int result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

Swift::Int specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<INTrafficIncidentType>);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  Swift::Int v6 = result;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v28 = v2;
  int64_t v7 = 0LL;
  Swift::Int v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  Swift::Int v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }

uint64_t specialized static TrafficIncidentUtils.convertNLIncidentTypeFromSupportedTrafficIncidentType(incidentType:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = static os_log_type_t.info.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  if (one-time initialization token for logObject != -1) {
    swift_once(&one-time initialization token for logObject, one-time initialization function for logObject);
  }
  os_log(_:dso:log:_:_:)( v9,  &dword_0,  logObject,  "convertNLIncidentTypeFromSupportedTrafficIncidentType",  53LL,  2LL,  &_swiftEmptyArrayStorage);
  uint64_t v10 = (char *)[a1 type];
  else {
    return *(void *)&aAccidenthazard_0[8 * (void)(v10 - 1)];
  }
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for INTrafficIncidentType(0LL);
  uint64_t v4 = v3;
  unint64_t v5 = lazy protocol witness table accessor for type INTrafficIncidentType and conformance INTrafficIncidentType();
  uint64_t result = Set.init(minimumCapacity:)(v2, v4, v5);
  uint64_t v10 = result;
  if (v2)
  {
    int64_t v7 = (Swift::UInt *)(a1 + 32);
    do
    {
      Swift::UInt v8 = *v7++;
      specialized Set._Variant.insert(_:)(&v9, v8);
      --v2;
    }

    while (v2);
    return v10;
  }

  return result;
}

id specialized static TrafficIncidentUtils.convertIncidentTypeFromNLIntent(locationSearchIntent:)( uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 232LL))(a1);
  if (!v3) {
    goto LABEL_7;
  }
  uint64_t v4 = v3;
  if (v2 == 0xD000000000000011LL && v3 == 0x800000000009B820LL)
  {
    uint64_t v2 = swift_bridgeObjectRelease(v3);
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, 0xD000000000000011LL, 0x800000000009B820LL, 0LL);
    uint64_t v2 = swift_bridgeObjectRelease(v4);
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
  }

  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 184LL))(v2);
  if (v2 != 9)
  {
LABEL_7:
    Swift::Int v6 = (char *)&loc_5CD34 + 4 * byte_98AB0[(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 160LL))(v2)];
    __asm { BR              X10 }
  }

  return [objc_allocWithZone(INSupportedTrafficIncidentType) initWithType:0 localizedDisplayString:0];
}

id specialized static TrafficIncidentUtils.makeSiriKitIntentWithUserLocation(locationSearchIntent:userLocation:)( uint64_t a1, uint64_t a2)
{
  id v4 = specialized static TrafficIncidentUtils.convertIncidentTypeFromNLIntent(locationSearchIntent:)(a1);
  if (one-time initialization token for logObject != -1) {
    swift_once(&one-time initialization token for logObject, one-time initialization function for logObject);
  }
  p_superclass = &OBJC_CLASS____TtC21GeoFlowDelegatePlugin12RuntimeError.superclass;
  Swift::Int v6 = (os_log_s *)logObject;
  id v7 = v4;
  os_log_type_t v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v6, v8))
  {
    Swift::UInt v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v45 = a2;
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v46 = (uint64_t)v4;
    uint64_t v47 = v10;
    *(_DWORD *)Swift::UInt v9 = 136315138;
    id v11 = v7;
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INSupportedTrafficIncidentType?);
    uint64_t v13 = String.init<A>(describing:)(&v46, v12);
    unint64_t v15 = v14;
    uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v47);
    p_superclass = (__objc2_class **)(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin12RuntimeError + 8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);

    swift_bridgeObjectRelease(v15);
    _os_log_impl(&dword_0, v6, v8, "makeSiriKitIntentWithUserLocation incidentType is %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v16 = v10;
    a2 = v45;
    swift_slowDealloc(v16, -1LL, -1LL);
    uint64_t v17 = swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
  }

  unint64_t v18 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 168LL);
  char v19 = v18(v17);
  uint64_t v20 = LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(v19);
  uint64_t v22 = v21;
  if (v20 == 0x7065527261656C63LL && v21 == 0xEB0000000074726FLL)
  {
    uint64_t v25 = swift_bridgeObjectRelease(v21);
  }

  else
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, 0x7065527261656C63LL, 0xEB0000000074726FLL, 0LL);
    uint64_t v25 = swift_bridgeObjectRelease(v22);
    if ((v24 & 1) == 0) {
      goto LABEL_15;
    }
  }

  BOOL v26 = (os_log_s *)p_superclass[367];
  os_log_type_t v27 = static os_log_type_t.default.getter(v25);
  uint64_t v25 = os_log_type_enabled(v26, v27);
  if ((_DWORD)v25)
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl(&dword_0, v26, v27, "makeSiriKitIntentWithUserLocation isClear=true", v28, 2u);
    uint64_t v25 = swift_slowDealloc(v28, -1LL, -1LL);
  }

uint64_t specialized static TrafficIncidentUtils.isUpdateIntent(intent:)(void *a1)
{
  id v2 = [a1 isClear];
  type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
  v3.super.super.Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  Class isa = v3.super.super.isa;
  if (v2)
  {
    id v5 = v2;
    char v6 = static NSObject.== infix(_:_:)();

    if ((v6 & 1) != 0)
    {
      char v7 = 1;
      return v7 & 1;
    }
  }

  else
  {
  }

  id v8 = [a1 additionalDetails];
  if (v8
    && (Swift::UInt v9 = v8, v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8), v12 = v11, v9, v12))
  {
    if (v10 == 0x657461647075LL && v12 == 0xE600000000000000LL) {
      char v7 = 1;
    }
    else {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, 0x657461647075LL, 0xE600000000000000LL, 0LL);
    }
    swift_bridgeObjectRelease(v12);
  }

  else
  {
    char v7 = 0;
  }

  return v7 & 1;
}

uint64_t outlined destroy of Result<Output, Error>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Output, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for TrafficIncidentUtils()
{
  return &type metadata for TrafficIncidentUtils;
}

unint64_t lazy protocol witness table accessor for type INTrafficIncidentType and conformance INTrafficIncidentType()
{
  unint64_t result = lazy protocol witness table cache variable for type INTrafficIncidentType and conformance INTrafficIncidentType;
  if (!lazy protocol witness table cache variable for type INTrafficIncidentType and conformance INTrafficIncidentType)
  {
    type metadata accessor for INTrafficIncidentType(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for INTrafficIncidentType, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type INTrafficIncidentType and conformance INTrafficIncidentType);
  }

  return result;
}

Swift::String __swiftcall INPerson.getContactInitials()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  __chkstk_darwin();
  NSNumber v3 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  id v5 = (char *)&v56 - v4;
  uint64_t v6 = type metadata accessor for PersonNameComponents(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  unint64_t v56 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v56 - v9;
  __chkstk_darwin();
  uint64_t v12 = (char *)&v56 - v11;
  id v13 = [objc_allocWithZone(NSPersonNameComponentsFormatter) init];
  [v13 setStyle:4];
  id v14 = [v1 nameComponents];
  if (v14)
  {
    unint64_t v15 = v14;
    ((void (*)(void))static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:))();

    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v16(v5, v10, v6);
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v17(v5, 0LL, 1LL, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) != 1)
    {
      v16(v12, v5, v6);
      Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      id v19 = [v13 stringFromPersonNameComponents:isa];

      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      unint64_t v22 = v21;

      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      goto LABEL_24;
    }
  }

  else
  {
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v17(v5, 1LL, 1LL, v6);
  }

  id v57 = v13;
  outlined destroy of PersonNameComponents?((uint64_t)v5);
  id v23 = [v1 displayName];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  unint64_t v26 = v25;

  swift_bridgeObjectRelease(v26);
  uint64_t v27 = HIBYTE(v26) & 0xF;
  if ((v26 & 0x2000000000000000LL) == 0) {
    uint64_t v27 = v24 & 0xFFFFFFFFFFFFLL;
  }
  if (v27)
  {
    NSString v28 = [v1 displayName];
    if (!v28)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v30 = v29;
      NSString v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v30);
    }

    id v31 = v57;
    id v32 = [v57 personNameComponentsFromString:v28];

    if (v32)
    {
      static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)(v32);

      uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v33(v3, v10, v6);
      v17(v3, 0LL, 1LL, v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v3, 1LL, v6) != 1)
      {
        char v34 = v56;
        v33(v56, v3, v6);
        Class v35 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
        id v36 = [v31 stringFromPersonNameComponents:v35];

        uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
        unint64_t v22 = v37;

        (*(void (**)(char *, uint64_t))(v7 + 8))(v34, v6);
        goto LABEL_24;
      }
    }

    else
    {
      v17(v3, 1LL, 1LL, v6);
    }

    outlined destroy of PersonNameComponents?((uint64_t)v3);
    id v40 = [v1 displayName];
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    unint64_t v39 = v41;
  }

  else
  {
    uint64_t v38 = 0LL;
    unint64_t v39 = 0xE000000000000000LL;
    id v31 = v57;
  }

  uint64_t v58 = v38;
  unint64_t v59 = v39;
  unint64_t v42 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v43 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)( 32LL,  0xE100000000000000LL,  0x7FFFFFFFFFFFFFFFLL,  1LL,  &type metadata for String,  v42);
  swift_bridgeObjectRelease(v39);
  uint64_t v58 = 0LL;
  unint64_t v59 = 0xE000000000000000LL;
  uint64_t v44 = *(void *)(v43 + 16);
  if (v44)
  {
    swift_bridgeObjectRetain(v43);
    uint64_t v45 = (void *)(v43 + 56);
    do
    {
      unint64_t v46 = *(v45 - 3);
      uint64_t v47 = *(v45 - 2);
      if ((v47 ^ v46) >= 0x4000)
      {
        uint64_t v49 = *(v45 - 1);
        uint64_t v48 = *v45;
        __n128 v50 = swift_bridgeObjectRetain(*v45);
        v51._uint64_t countAndFlagsBits = Substring.subscript.getter(v46, v46, v47, v49, v48, v50);
        object = v51._object;
        String.append(_:)(v51);
        swift_bridgeObjectRelease(v48);
        swift_bridgeObjectRelease(object);
      }

      v45 += 4;
      --v44;
    }

    while (v44);

    swift_bridgeObjectRelease_n(v43, 2LL);
    uint64_t v20 = v58;
    unint64_t v22 = v59;
  }

  else
  {
    swift_bridgeObjectRelease(v43);

    uint64_t v20 = 0LL;
    unint64_t v22 = 0xE000000000000000LL;
  }

uint64_t outlined destroy of PersonNameComponents?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t GeoContact.init(index:id:displayName:initials:encodeBase64:shareLevel:imageStyle:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  a9[9] = a11;
  uint64_t v12 = (char *)a9 + *(int *)(type metadata accessor for GeoContact(0LL) + 40);
  uint64_t v13 = type metadata accessor for ImageElement.ImageStyle(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v12, a12, v13);
}

uint64_t type metadata accessor for GeoContact(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for GeoContact;
  if (!type metadata singleton initialization cache for GeoContact) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GeoContact);
  }
  return result;
}

uint64_t GeoContact.initials.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain(*(void *)(v0 + 48));
  return v1;
}

uint64_t GeoContact.encodeBase64.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain(*(void *)(v0 + 64));
  return v1;
}

uint64_t GeoContact.shareLevel.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t GeoContact.imageStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for GeoContact(0LL) + 40);
  uint64_t v4 = type metadata accessor for ImageElement.ImageStyle(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t GeoContact.imageStyle.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for GeoContact(0LL) + 40);
  uint64_t v4 = type metadata accessor for ImageElement.ImageStyle(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*GeoContact.imageStyle.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t GeoContact.image.getter()
{
  uint64_t v1 = type metadata accessor for ImageElement.ImageStyle(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for ImageElement.Contact.Content(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *((void *)v0 + 2);
  if (v10)
  {
    uint64_t v23 = v6;
    uint64_t v11 = *((void *)v0 + 1);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v13 = swift_allocObject(v12, 48LL, 7LL);
    *(_OWORD *)(v13 + 16) = xmmword_95430;
    *(void *)(v13 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v11;
    *(void *)(v13 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v10;
    uint64_t v6 = v23;
    __n128 v7 = swift_bridgeObjectRetain(v10);
    id v14 = (void *)v13;
  }

  else
  {
    uint64_t v16 = *((void *)v0 + 5);
    unint64_t v17 = *((void *)v0 + 6);
    uint64_t v18 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000LL) == 0) {
      uint64_t v18 = v16 & 0xFFFFFFFFFFFFLL;
    }
    if (v18)
    {
      __n128 v19 = swift_bridgeObjectRetain(*((void *)v0 + 6));
      ImageElement.Contact.Monogram.init(letters:)(v16, v17, v19);
      unint64_t v15 = (unsigned int *)&enum case for ImageElement.Contact.Content.monogram(_:);
      goto LABEL_8;
    }

    id v14 = _swiftEmptyArrayStorage;
  }

  ImageElement.Contact.Avatar.init(contactIds:)(v14, v7);
  unint64_t v15 = (unsigned int *)&enum case for ImageElement.Contact.Content.avatar(_:);
LABEL_8:
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, *v15, v5);
  uint64_t v20 = type metadata accessor for GeoContact(0LL);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, &v0[*(int *)(v20 + 40)], v1);
  return ImageElement.Contact.init(_:imageStyle:)(v9, v4);
}

uint64_t GeoContact.app.getter()
{
  if ((*(void *)(v0 + 72) & 0xFFFFFFFFFFFFFFFELL) == 2) {
    return 0xD000000000000013LL;
  }
  else {
    return 0x6C7070612E6D6F63LL;
  }
}

uint64_t AppID.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000013LL;
  }
  else {
    return 0x6C7070612E6D6F63LL;
  }
}

uint64_t GeoContact.supplamentalText.getter()
{
  if ((*(void *)(v0 + 72) & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    swift_bridgeObjectRelease(0x800000000009B550LL);
    return 5459283LL;
  }

  char v1 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x6C7070612E6D6F63LL,  0xEE007370614D2E65LL,  0xD000000000000013LL,  0x800000000009B550LL,  0LL);
  swift_bridgeObjectRelease(0xEE007370614D2E65LL);
  if ((v1 & 1) != 0) {
    return 5459283LL;
  }
  return 0LL;
}

uint64_t GeoContact.hash(into:)(uint64_t a1)
{
  Swift::UInt v3 = v1[2];
  if (v3)
  {
    Swift::UInt v4 = v1[1];
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v3);
    String.hash(into:)(a1, v4, v3);
    swift_bridgeObjectRelease(v3);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Swift::UInt v5 = v1[3];
  Swift::UInt v6 = v1[4];
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(a1, v5, v6);
  swift_bridgeObjectRelease(v6);
  Swift::UInt v7 = v1[5];
  Swift::UInt v8 = v1[6];
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(a1, v7, v8);
  swift_bridgeObjectRelease(v8);
  Swift::UInt v9 = v1[7];
  Swift::UInt v10 = v1[8];
  swift_bridgeObjectRetain(v10);
  String.hash(into:)(a1, v9, v10);
  swift_bridgeObjectRelease(v10);
  Hasher._combine(_:)(v1[9]);
  type metadata accessor for GeoContact(0LL);
  uint64_t v11 = type metadata accessor for ImageElement.ImageStyle(0LL);
  uint64_t v12 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type ImageElement.ImageStyle and conformance ImageElement.ImageStyle,  (uint64_t (*)(uint64_t))&type metadata accessor for ImageElement.ImageStyle,  (uint64_t)&protocol conformance descriptor for ImageElement.ImageStyle);
  return dispatch thunk of Hashable.hash(into:)(a1, v11, v12);
}

uint64_t GeoContact.CodingKeys.stringValue.getter(char a1)
{
  return *(void *)&aIndex_2[8 * a1];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GeoContact.CodingKeys()
{
  return GeoContact.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GeoContact.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized GeoContact.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance GeoContact.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoContact.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoContact.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GeoContact.encode(to:)(void *a1)
{
  Swift::UInt v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoContact.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  Swift::UInt v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  unint64_t v11 = lazy protocol witness table accessor for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_BADA0, &unk_BADA0, v11, v9, v10);
  uint64_t v12 = *v3;
  char v33 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v33, v5);
  if (!v2)
  {
    uint64_t v13 = v3[1];
    uint64_t v14 = v3[2];
    char v32 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, &v32, v5);
    uint64_t v15 = v3[3];
    uint64_t v16 = v3[4];
    char v31 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v31, v5);
    uint64_t v17 = v3[5];
    uint64_t v18 = v3[6];
    char v30 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v30, v5);
    uint64_t v19 = v3[7];
    uint64_t v20 = v3[8];
    char v29 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v29, v5);
    uint64_t v21 = v3[9];
    char v28 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v21, &v28, v5);
    uint64_t v22 = (char *)v3 + *(int *)(type metadata accessor for GeoContact(0LL) + 40);
    char v27 = 6;
    uint64_t v23 = type metadata accessor for ImageElement.ImageStyle(0LL);
    uint64_t v24 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type ImageElement.ImageStyle and conformance ImageElement.ImageStyle,  (uint64_t (*)(uint64_t))&type metadata accessor for ImageElement.ImageStyle,  (uint64_t)&protocol conformance descriptor for ImageElement.ImageStyle);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v27, v5, v23, v24);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int GeoContact.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t GeoContact.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v3 = type metadata accessor for ImageElement.ImageStyle(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (uint64_t *)((char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoContact.CodingKeys>);
  uint64_t v7 = *(void *)(v31 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for GeoContact(0LL);
  __chkstk_darwin();
  Class v35 = (uint64_t *)((char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  char v33 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  unint64_t v14 = lazy protocol witness table accessor for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys();
  char v32 = v9;
  uint64_t v15 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_BADA0, &unk_BADA0, v14, v12, v13);
  if (v15) {
    return __swift_destroy_boxed_opaque_existential_0Tm(v33);
  }
  uint64_t v29 = v10;
  uint64_t v34 = v4;
  char v42 = 0;
  uint64_t v16 = v31;
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)(&v42, v31);
  uint64_t v18 = v35;
  *Class v35 = v17;
  char v41 = 1;
  v18[1] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v41, v16);
  v18[2] = v19;
  char v40 = 2;
  v18[3] = KeyedDecodingContainer.decode(_:forKey:)(&v40, v16);
  v18[4] = v20;
  char v39 = 3;
  uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)(&v39, v16);
  uint64_t v28 = v7;
  void v18[5] = v21;
  v18[6] = v22;
  char v38 = 4;
  v18[7] = KeyedDecodingContainer.decode(_:forKey:)(&v38, v16);
  v18[8] = v23;
  char v37 = 5;
  v18[9] = KeyedDecodingContainer.decode(_:forKey:)(&v37, v16);
  char v36 = 6;
  uint64_t v24 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type ImageElement.ImageStyle and conformance ImageElement.ImageStyle,  (uint64_t (*)(uint64_t))&type metadata accessor for ImageElement.ImageStyle,  (uint64_t)&protocol conformance descriptor for ImageElement.ImageStyle);
  unint64_t v25 = v32;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v6, v3, &v36, v16, v3, v24, v26);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v16);
  (*(void (**)(char *, void *, uint64_t))(v34 + 32))((char *)v18 + *(int *)(v29 + 40), v6, v3);
  outlined init with copy of GeoContact((uint64_t)v18, v30);
  __swift_destroy_boxed_opaque_existential_0Tm(v33);
  return outlined destroy of GeoContact((uint64_t)v18);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GeoContact@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return GeoContact.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GeoContact(void *a1)
{
  return GeoContact.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GeoContact(uint64_t a1)
{
  return Hasher._finalize()();
}

GeoFlowDelegatePlugin::AppID_optional __swiftcall AppID.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of AppID.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    v4.value = GeoFlowDelegatePlugin_AppID_messages;
  }
  else {
    v4.value = GeoFlowDelegatePlugin_AppID_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AppID(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = AppID.rawValue.getter(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = AppID.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AppID()
{
  char v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = AppID.rawValue.getter(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AppID(uint64_t a1)
{
  uint64_t v3 = AppID.rawValue.getter(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AppID(uint64_t a1)
{
  char v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = AppID.rawValue.getter(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AppID@<X0>( uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._uint64_t countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of AppID.init(rawValue:),  v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AppID@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AppID.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t specialized static GeoContact.__derived_struct_equals(_:_:)(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  uint64_t v4 = a1[2];
  uint64_t v5 = a2[2];
  if (v4)
  {
    if (!v5) {
      return 0LL;
    }
    uint64_t v6 = a1[1];
    uint64_t v7 = a2[1];
    BOOL v8 = v6 == v7 && v4 == v5;
    if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v4, v7, v5, 0LL) & 1) == 0) {
      return 0LL;
    }
  }

  else if (v5)
  {
    return 0LL;
  }

  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  BOOL v13 = v9 == v11 && v10 == v12;
  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v11, v12, 0LL) & 1) != 0)
  {
    if ((uint64_t v14 = a1[5], v15 = a1[6], v16 = a2[5], v17 = a2[6], v14 == v16) && v15 == v17
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v16, v17, 0LL) & 1) != 0)
    {
      if ((uint64_t v18 = a1[7], v19 = a1[8], v20 = a2[7], v21 = a2[8], v18 == v20) && v19 == v21
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v20, v21, 0LL) & 1) != 0)
      {
        if (a1[9] == a2[9])
        {
          uint64_t v22 = *(int *)(type metadata accessor for GeoContact(0LL) + 40);
          return static ImageElement.ImageStyle.== infix(_:_:)((char *)a1 + v22, (char *)a2 + v22);
        }
      }
    }
  }

  return 0LL;
}

unint64_t lazy protocol witness table accessor for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoContact.CodingKeys, &unk_BADA0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoContact.CodingKeys, &unk_BADA0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoContact.CodingKeys, &unk_BADA0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GeoContact.CodingKeys, &unk_BADA0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys);
  }

  return result;
}

uint64_t outlined init with copy of GeoContact(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GeoContact(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of GeoContact(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GeoContact(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t base witness table accessor for Equatable in GeoContact()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type GeoContact and conformance GeoContact,  type metadata accessor for GeoContact,  (uint64_t)&protocol conformance descriptor for GeoContact);
}

unint64_t lazy protocol witness table accessor for type AppID and conformance AppID()
{
  unint64_t result = lazy protocol witness table cache variable for type AppID and conformance AppID;
  if (!lazy protocol witness table cache variable for type AppID and conformance AppID)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AppID, &type metadata for AppID);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AppID and conformance AppID);
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for GeoContact(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  Swift::String v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *Swift::String v3 = *a2;
    Swift::String v3 = (uint64_t *)(v18 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v18);
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v6 = a2[2];
    uint64_t v5 = a2[3];
    a1[2] = v6;
    a1[3] = v5;
    uint64_t v8 = a2[4];
    uint64_t v7 = a2[5];
    a1[4] = v8;
    a1[5] = v7;
    uint64_t v10 = a2[6];
    uint64_t v9 = a2[7];
    a1[6] = v10;
    a1[7] = v9;
    uint64_t v12 = a2[8];
    uint64_t v11 = a2[9];
    uint64_t v13 = *(int *)(a3 + 40);
    uint64_t v14 = (char *)a2 + v13;
    uint64_t v15 = (char *)a1 + v13;
    a1[8] = v12;
    a1[9] = v11;
    uint64_t v16 = type metadata accessor for ImageElement.ImageStyle(0LL);
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v12);
    v17(v15, v14, v16);
  }

  return v3;
}

uint64_t destroy for GeoContact(void *a1, uint64_t a2)
{
  int v4 = (char *)a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for ImageElement.ImageStyle(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t initializeWithCopy for GeoContact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v7;
  *(void *)(a1 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v6;
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v8;
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = a2 + v12;
  uint64_t v14 = a1 + v12;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v10;
  uint64_t v15 = type metadata accessor for ImageElement.ImageStyle(0LL);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  v16(v14, v13, v15);
  return a1;
}

void *assignWithCopy for GeoContact(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[5] = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[7] = a2[7];
  uint64_t v12 = a2[8];
  uint64_t v13 = a1[8];
  a1[8] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[9] = a2[9];
  uint64_t v14 = *(int *)(a3 + 40);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for ImageElement.ImageStyle(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24LL))(v15, v16, v17);
  return a1;
}

uint64_t initializeWithTake for GeoContact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v4 = *(int *)(a3 + 40);
  uint64_t v5 = a2 + v4;
  uint64_t v6 = a1 + v4;
  *(void *)(a1 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = *(void *)(a2 + 72);
  uint64_t v7 = type metadata accessor for ImageElement.ImageStyle(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v6, v5, v7);
  return a1;
}

uint64_t assignWithTake for GeoContact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a1 + 48);
  *(void *)(a1 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v12 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v11;
  swift_bridgeObjectRelease(v12);
  *(void *)(a1 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = *(void *)(a2 + 72);
  uint64_t v13 = *(int *)(a3 + 40);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for ImageElement.ImageStyle(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40LL))(v14, v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoContact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_5F0F4);
}

uint64_t sub_5F0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for ImageElement.ImageStyle(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 40),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for GeoContact(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5F17C);
}

uint64_t sub_5F17C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for ImageElement.ImageStyle(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 40),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata completion function for GeoContact(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_98D38;
  v4[2] = &unk_98D50;
  void v4[3] = &unk_98D50;
  void v4[4] = &unk_98D50;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for ImageElement.ImageStyle(319LL);
  if (v3 <= 0x3F)
  {
    v4[6] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for AppID(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_5F2CC + 4 * byte_98B65[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_5F300 + 4 * byte_98B60[v4]))();
}

uint64_t sub_5F300(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_5F308(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x5F310LL);
  }
  return result;
}

uint64_t sub_5F31C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x5F324LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_5F328(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_5F330(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppID()
{
  return &type metadata for AppID;
}

uint64_t getEnumTagSinglePayload for GeoContact.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

uint64_t storeEnumTagSinglePayload for GeoContact.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_5F428 + 4 * byte_98B6F[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_5F45C + 4 * byte_98B6A[v4]))();
}

uint64_t sub_5F45C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_5F464(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x5F46CLL);
  }
  return result;
}

uint64_t sub_5F478(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x5F480LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_5F484(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_5F48C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for GeoContact.CodingKeys()
{
  return &unk_BADA0;
}

uint64_t specialized GeoContact.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x7865646E69LL && a2 == 0xE500000000000000LL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7865646E69LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else if (a1 == 25705 && a2 == 0xE200000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(25705LL, 0xE200000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  else if (a1 == 0x4E79616C70736964LL && a2 == 0xEB00000000656D61LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x4E79616C70736964LL, 0xEB00000000656D61LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 2LL;
  }

  else if (a1 == 0x736C616974696E69LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x736C616974696E69LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 3LL;
  }

  else if (a1 == 0x614265646F636E65LL && a2 == 0xEC00000034366573LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x614265646F636E65LL, 0xEC00000034366573LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 4LL;
  }

  else if (a1 == 0x76654C6572616873LL && a2 == 0xEA00000000006C65LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x76654C6572616873LL, 0xEA00000000006C65LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 5LL;
  }

  else if (a1 == 0x7974536567616D69LL && a2 == 0xEA0000000000656CLL)
  {
    swift_bridgeObjectRelease(0xEA0000000000656CLL);
    return 6LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7974536567616D69LL, 0xEA0000000000656CLL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 6LL;
    }
    else {
      return 7LL;
    }
  }

uint64_t RetrieveParkingHandleIntentStrategy.__allocating_init(with:isPommes:)(__int128 *a1, char a2)
{
  uint64_t v5 = swift_allocObject(v2, 65LL, 7LL);
  type metadata accessor for OS_os_log();
  *(void *)(v5 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000023LL,  0x8000000000098EE0LL);
  outlined init with take of CATType(a1, v5 + 24);
  *(_BYTE *)(v5 + 64) = a2;
  return v5;
}

uint64_t RetrieveParkingHandleIntentStrategy.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 24, a1);
}

uint64_t RetrieveParkingHandleIntentStrategy.init(with:isPommes:)(__int128 *a1, char a2)
{
  *(void *)(v2 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000023LL,  0x8000000000098EE0LL);
  outlined init with take of CATType(a1, v2 + 24);
  *(_BYTE *)(v2 + 64) = a2;
  return v2;
}

uint64_t RetrieveParkingHandleIntentStrategy.common.getter()
{
  char v1 = *(_BYTE *)(v0 + 64);
  uint64_t v2 = type metadata accessor for ParkingCommon();
  uint64_t v3 = swift_allocObject(v2, 65LL, 7LL);
  type metadata accessor for OS_os_log();
  *(void *)(v3 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x43676E696B726150LL,  0xED00006E6F6D6D6FLL);
  outlined init with take of CATType(v5, v3 + 24);
  *(_BYTE *)(v3 + 64) = v1;
  return v3;
}

uint64_t RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[29] = a2;
  v3[30] = v2;
  v3[28] = a1;
  return swift_task_switch(RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:), 0LL, 0LL);
}

uint64_t RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
  uint64_t v2 = (void *)((uint64_t (*)(void))IntentResolutionRecord.intentResponse.getter)();
  id v3 = [v2 parkingLocation];
  *(void *)(v0 + 248) = v3;

  if (!v3)
  {
    uint64_t v11 = *(int **)(**(void **)(v0 + 240) + 128LL);
    unint64_t v25 = (int *)((char *)v11 + *v11);
    uint64_t v12 = (void *)swift_task_alloc(v11[1]);
    uint64_t v13 = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    *(void *)(v0 + 336) = v12;
LABEL_7:
    *uint64_t v12 = v0;
    v12[1] = v13;
    return ((uint64_t (*)(void, void))v25)(*(void *)(v0 + 224), *(void *)(v0 + 232));
  }

  id v4 = [v3 location];
  *(void *)(v0 + 256) = v4;
  if (!v4)
  {
    uint64_t v14 = *(int **)(**(void **)(v0 + 240) + 128LL);
    unint64_t v25 = (int *)((char *)v14 + *v14);
    uint64_t v12 = (void *)swift_task_alloc(v14[1]);
    uint64_t v13 = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    *(void *)(v0 + 32specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v12;
    goto LABEL_7;
  }

  uint64_t v5 = CLLocation.makeDialogLocation()();
  *(void *)(v0 + 264) = v5;
  char v6 = (void *)IntentResolutionRecord.intentResponse.getter(v1);
  id v7 = [v6 parkingNote];

  if (v7)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    unint64_t v10 = v9;
  }

  else
  {
    uint64_t v8 = 0LL;
    unint64_t v10 = 0xE000000000000000LL;
  }

  *(void *)(v0 + 27__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v10;
  uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(v0 + 240) + 112LL))();
  *(void *)(v0 + 28specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v16;
  *(void *)(v0 + 12specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &type metadata for RetrieveParkingLocation;
  *(void *)(v0 + 128) = &protocol witness table for RetrieveParkingLocation;
  *(void *)(v0 + 96) = v5;
  *(void *)(v0 + 104) = v8;
  *(void *)(v0 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v10;
  swift_retain(v5);
  swift_bridgeObjectRetain(v10);
  uint64_t v17 = (void *)IntentResolutionRecord.intentResponse.getter(v1);
  id v18 = [v17 parkingNote];

  if (v18)
  {
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v21 = v20;
  }

  else
  {
    uint64_t v19 = 0LL;
    uint64_t v21 = 0LL;
  }

  *(void *)(v0 + 288) = v21;
  uint64_t v22 = *(int **)(*(void *)v16 + 112LL);
  uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, id, uint64_t, uint64_t))((char *)v22 + *v22);
  uint64_t v23 = (void *)swift_task_alloc(v22[1]);
  *(void *)(v0 + 296) = v23;
  *uint64_t v23 = v0;
  v23[1] = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  return v24(v0 + 56, v0 + 96, v3, v19, v21);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = (void *)(*(void *)v0 + 96LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 288LL);
  id v3 = *(void *)(*(void *)v0 + 280LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 296LL));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  __swift_destroy_boxed_opaque_existential_0Tm(v1);
  return swift_task_switch(RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:), 0LL, 0LL);
}

{
  uint64_t v0;
  __int128 *v1;
  void *v2;
  uint64_t v3;
  os_log_type_t v4;
  os_log_s *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int *v17;
  void *v18;
  uint64_t v20;
  void *v21;
  int *v22;
  uint64_t v23;
  uint64_t v1 = (__int128 *)(v0 + 56);
  uint64_t v2 = *(void **)(v0 + 240);
  if (*(void *)(v0 + 80))
  {
    id v3 = outlined init with take of CATType(v1, v0 + 16);
    id v4 = static os_log_type_t.default.getter(v3);
    uint64_t v5 = (os_log_s *)v2[2];
    outlined init with copy of DeviceState(v0 + 16, v0 + 136);
    char v6 = v4;
    id v7 = os_log_type_enabled(v5, v4);
    uint64_t v8 = *(void *)(v0 + 272);
    unint64_t v9 = *(void **)(v0 + 248);
    unint64_t v10 = *(void **)(v0 + 256);
    if (v7)
    {
      uint64_t v20 = *(void *)(v0 + 264);
      uint64_t v21 = *(void **)(v0 + 248);
      uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      uint64_t v23 = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      outlined init with copy of DeviceState(v0 + 136, v0 + 176);
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output);
      uint64_t v14 = String.init<A>(describing:)(v0 + 176, v13);
      uint64_t v16 = v15;
      *(void *)(v0 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224);
      swift_bridgeObjectRelease(v16);
      __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 136));
      _os_log_impl(&dword_0, v5, v6, "buildRFoutput: %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_release(v20);
      swift_bridgeObjectRelease(v8);
    }

    else
    {
      swift_release(*(void *)(v0 + 264));
      swift_bridgeObjectRelease(v8);

      __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 136));
    }

    outlined init with take of CATType((__int128 *)(v0 + 16), *(void *)(v0 + 224));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    outlined destroy of Output?((uint64_t)v1);
    uint64_t v17 = *(int **)(*v2 + 128LL);
    uint64_t v22 = (int *)((char *)v17 + *v17);
    id v18 = (void *)swift_task_alloc(v17[1]);
    *(void *)(v0 + 304) = v18;
    *id v18 = v0;
    v18[1] = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    return ((uint64_t (*)(void, void))v22)(*(void *)(v0 + 224), *(void *)(v0 + 232));
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *(void *)(*(void *)v1 + 304LL);
  *(void *)(*(void *)v1 + 31(*(void (**)(uint64_t, uint64_t))(**(void **)(v0 + 24) + 120LL))(1LL, 2LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    id v3 = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  else {
    id v3 = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v1 = *(void *)(v0 + 272);
  id v3 = *(void **)(v0 + 248);
  uint64_t v2 = *(void **)(v0 + 256);
  swift_release(*(void *)(v0 + 264));
  swift_bridgeObjectRelease(v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v2 = *(void *)(*(void *)v1 + 320LL);
  *(void *)(*(void *)v1 + 328LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    id v3 = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  else {
    id v3 = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t *v0;
  uint64_t v2;
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 336));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v1 = *(void *)(v0 + 272);
  id v3 = *(void **)(v0 + 248);
  uint64_t v2 = *(void **)(v0 + 256);
  swift_release(*(void *)(v0 + 264));
  swift_bridgeObjectRelease(v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t outlined destroy of Output?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t RetrieveParkingHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return swift_task_switch(RetrieveParkingHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:), 0LL, 0LL);
}

uint64_t RetrieveParkingHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)()
{
  uint64_t v1 = (void *)v0[8];
  uint64_t v3 = v1[6];
  uint64_t v2 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v3);
  v0[5] = &type metadata for RetrieveParkingLocation;
  v0[6] = &protocol witness table for RetrieveParkingLocation;
  v0[3] = 0LL;
  v0[4] = 0LL;
  v0[2] = 0LL;
  id v4 = (void *)swift_task_alloc(dword_C5274);
  v0[9] = v4;
  void *v4 = v0;
  v4[1] = SaveParkingLocationUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  return FlowHelper.makeDialogOnlyOutput(model:)(v0[7], (uint64_t)(v0 + 2), v3, v2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance RetrieveParkingHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t ParkingHandleIntentStrategy = type metadata accessor for RetrieveParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)(a1, a2, ParkingHandleIntentStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance RetrieveParkingHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t ParkingHandleIntentStrategy = type metadata accessor for RetrieveParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)( a1,  a2,  ParkingHandleIntentStrategy,  a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance RetrieveParkingHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t ParkingHandleIntentStrategy = type metadata accessor for RetrieveParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)(a1, a2, ParkingHandleIntentStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance RetrieveParkingHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t ParkingHandleIntentStrategy = type metadata accessor for RetrieveParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)(a1, a2, ParkingHandleIntentStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance RetrieveParkingHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t ParkingHandleIntentStrategy = type metadata accessor for RetrieveParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)(a1, a2, ParkingHandleIntentStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance RetrieveParkingHandleIntentStrategy( uint64_t a1, uint64_t a2)
{
  char v6 = *(int **)(**(void **)v2 + 128LL);
  unint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  id v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *id v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v9(a1, a2);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance RetrieveParkingHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t ParkingHandleIntentStrategy = type metadata accessor for RetrieveParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentHandleIntentStrategy;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)( a1,  a2,  ParkingHandleIntentStrategy,  a4);
}

unint64_t lazy protocol witness table accessor for type RetrieveParkingHandleIntentStrategy and conformance RetrieveParkingHandleIntentStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type RetrieveParkingHandleIntentStrategy and conformance RetrieveParkingHandleIntentStrategy;
  if (!lazy protocol witness table cache variable for type RetrieveParkingHandleIntentStrategy and conformance RetrieveParkingHandleIntentStrategy)
  {
    uint64_t ParkingHandleIntentStrategy = type metadata accessor for RetrieveParkingHandleIntentStrategy();
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RetrieveParkingHandleIntentStrategy,  ParkingHandleIntentStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RetrieveParkingHandleIntentStrategy and conformance RetrieveParkingHandleIntentStrategy);
  }

  return result;
}

uint64_t type metadata accessor for RetrieveParkingHandleIntentStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin35RetrieveParkingHandleIntentStrategy);
}

unint64_t OntologyNode.javaClassName.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = dispatch thunk of OntologyNode.name.getter(a1, a2);
  unint64_t v6 = v5;
  specialized Collection.first.getter(v4, v5);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease(v6);
  if (v8)
  {
    Swift::String v9 = Character.uppercased()();
    uint64_t countAndFlagsBits = v9._countAndFlagsBits;
    object = v9._object;
    swift_bridgeObjectRelease(v8);
  }

  else
  {
    uint64_t countAndFlagsBits = 0LL;
    object = (void *)0xE000000000000000LL;
  }

  v12._uint64_t countAndFlagsBits = countAndFlagsBits;
  v12._object = object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  uint64_t v13 = dispatch thunk of OntologyNode.name.getter(a1, a2);
  unint64_t v15 = v14;
  unint64_t v16 = specialized Collection.dropFirst(_:)(1uLL, v13, v14);
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  swift_bridgeObjectRelease(v15);
  unint64_t v26 = 0xD000000000000012LL;
  unint64_t v27 = 0x800000000009BE20LL;
  v25[0] = v16;
  v25[1] = v18;
  v25[2] = v20;
  v25[3] = v22;
  unint64_t v23 = lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain(0x800000000009BE20LL);
  String.append<A>(contentsOf:)(v25, &type metadata for Substring, v23);
  swift_bridgeObjectRelease(0x800000000009BE20LL);
  swift_bridgeObjectRelease(v22);
  return v26;
}

uint64_t TerminalNodeBoundedSemanticValue<>.stringValue.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return v5;
}

uint64_t TerminalNodeBoundedSemanticValue<>.javaValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DynamicType = swift_getDynamicType(v4, a1, 0LL);
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata(a1);
  uint64_t v8 = String.init<A>(describing:)(&DynamicType, MetatypeMetadata);
  unint64_t v10 = v9;
  uint64_t v11 = specialized BidirectionalCollection.dropLast(_:)(5LL, v8, v9);
  unint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  swift_bridgeObjectRelease(v10);
  unint64_t v30 = 0xD000000000000012LL;
  unint64_t v31 = 0x800000000009BE20LL;
  uint64_t DynamicType = v11;
  unint64_t v27 = v13;
  uint64_t v28 = v15;
  uint64_t v29 = v17;
  unint64_t v18 = lazy protocol witness table accessor for type Substring and conformance Substring();
  String.append<A>(contentsOf:)(&DynamicType, &type metadata for Substring, v18);
  swift_bridgeObjectRelease(v17);
  unint64_t v19 = v31;
  uint64_t DynamicType = v30;
  unint64_t v27 = v31;
  swift_bridgeObjectRetain(v31);
  v20._uint64_t countAndFlagsBits = 0x2E65756C61562ELL;
  v20._object = (void *)0xE700000000000000LL;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v19);
  uint64_t v22 = DynamicType;
  unint64_t v21 = v27;
  dispatch thunk of RawRepresentable.rawValue.getter(&DynamicType, a1, a4);
  unint64_t v23 = v27;
  Swift::String v24 = String.uppercased()();
  swift_bridgeObjectRelease(v23);
  uint64_t DynamicType = v22;
  unint64_t v27 = v21;
  swift_bridgeObjectRetain(v21);
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v24._object);
  return DynamicType;
}

uint64_t OccupantIntentNode.asContactQuery.getter()
{
  uint64_t v1 = (char *)&v51 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactRelationshipQuery?);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?);
  uint64_t v6 = __chkstk_darwin();
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  ContactQuery.init()(v6);
  uint64_t v9 = ContactQuery.givenName.setter(0LL, 0xE000000000000000LL);
  uint64_t v10 = OccupantIntentNode.firstName.getter(v9);
  if (v11) {
    uint64_t v10 = ContactQuery.givenName.setter(v10, v11);
  }
  uint64_t v12 = OccupantIntentNode.fullName.getter(v10);
  if (v13)
  {
    uint64_t v14 = v12;
    uint64_t v15 = v13;
    uint64_t v16 = ContactQuery.givenName.getter();
    uint64_t v18 = v17;
    if (!v16 && v17 == 0xE000000000000000LL)
    {
      swift_bridgeObjectRelease(0xE000000000000000LL);
LABEL_8:
      uint64_t v12 = ContactQuery.givenName.setter(v14, v15);
      goto LABEL_10;
    }

    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, 0LL, 0xE000000000000000LL, 0LL);
    swift_bridgeObjectRelease(v18);
    if ((v19 & 1) != 0) {
      goto LABEL_8;
    }
    uint64_t v12 = swift_bridgeObjectRelease(v15);
  }

uint64_t OccupantIntentNode.displayName.getter()
{
  uint64_t v0 = type metadata accessor for CharacterSet(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin();
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = OccupantIntentNode.fullName.getter(v2);
  if (!v6)
  {
LABEL_6:
    uint64_t v9 = OccupantIntentNode.firstName.getter(v5);
    unint64_t v11 = v10;
    if (!v10) {
      return 0LL;
    }
    uint64_t v12 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000LL) == 0) {
      uint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
    }
    if (v12)
    {
      uint64_t v25 = v9;
      unint64_t v26 = v10;
      swift_bridgeObjectRetain(v10);
      v13._uint64_t countAndFlagsBits = 32LL;
      v13._object = (void *)0xE100000000000000LL;
      String.append(_:)(v13);
      uint64_t v14 = swift_bridgeObjectRelease(v11);
      uint64_t v16 = v25;
      unint64_t v15 = v26;
      uint64_t v17 = OccupantIntentNode.lastName.getter(v14);
      if (v18) {
        uint64_t v19 = v17;
      }
      else {
        uint64_t v19 = 0LL;
      }
      if (v18) {
        uint64_t v20 = v18;
      }
      else {
        uint64_t v20 = (void *)0xE000000000000000LL;
      }
      uint64_t v25 = v16;
      unint64_t v26 = v15;
      swift_bridgeObjectRetain(v15);
      v21._uint64_t countAndFlagsBits = v19;
      v21._object = v20;
      String.append(_:)(v21);
      swift_bridgeObjectRelease(v20);
      uint64_t v22 = swift_bridgeObjectRelease(v15);
      static CharacterSet.whitespaces.getter(v22);
      unint64_t v23 = lazy protocol witness table accessor for type String and conformance String();
      uint64_t v7 = StringProtocol.trimmingCharacters(in:)(v4, &type metadata for String, v23);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
      swift_bridgeObjectRelease(v26);
    }

    else
    {
      swift_bridgeObjectRelease(v10);
      return 0LL;
    }

    return v7;
  }

  uint64_t v7 = v5;
  uint64_t v8 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000LL) == 0) {
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8)
  {
    uint64_t v5 = swift_bridgeObjectRelease(v6);
    goto LABEL_6;
  }

  return v7;
}

id OccupantIntentNode.asINPerson.getter()
{
  uint64_t v1 = (char *)&v41 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for PersonNameComponents(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin();
  unint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = PersonNameComponents.init()(v8);
  uint64_t v12 = OccupantIntentNode.lastName.getter(v11);
  if (!v13)
  {
    uint64_t v12 = 0LL;
    unint64_t v13 = 0xE000000000000000LL;
  }

  uint64_t v14 = PersonNameComponents.familyName.setter(v12, v13);
  uint64_t v15 = OccupantIntentNode.firstName.getter(v14);
  if (!v16)
  {
    uint64_t v15 = 0LL;
    unint64_t v16 = 0xE000000000000000LL;
  }

  uint64_t v17 = PersonNameComponents.givenName.setter(v15, v16);
  uint64_t v18 = OccupantIntentNode.nickname.getter(v17);
  if (!v19)
  {
    uint64_t v18 = 0LL;
    unint64_t v19 = 0xE000000000000000LL;
  }

  uint64_t v20 = PersonNameComponents.nickname.setter(v18, v19);
  OccupantIntentNode.namePrefix.getter(v20);
  uint64_t v21 = type metadata accessor for PersonOntologyNode.PersonNamePrefix(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v5, 1LL, v21);
  unint64_t v42 = v1;
  if (v23 == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v5,  &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?);
    uint64_t v24 = 0LL;
    unint64_t v25 = 0xE000000000000000LL;
  }

  else
  {
    uint64_t v24 = PersonOntologyNode.PersonNamePrefix.rawValue.getter();
    unint64_t v25 = v26;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v21);
  }

  uint64_t v27 = PersonNameComponents.namePrefix.setter(v24, v25);
  OccupantIntentNode.namePostfix.getter(v27);
  uint64_t v28 = type metadata accessor for PersonOntologyNode.PersonNamePostfix(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v3, 1LL, v28) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v3,  &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?);
    uint64_t v30 = 0LL;
    unint64_t v31 = 0xE000000000000000LL;
  }

  else
  {
    uint64_t v30 = PersonOntologyNode.PersonNamePostfix.rawValue.getter();
    unint64_t v31 = v32;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v3, v28);
  }

  unint64_t v33 = v42;
  PersonNameComponents.nameSuffix.setter(v30, v31);
  id v34 = [objc_allocWithZone(INPersonHandle) initWithValue:0 type:0 label:0];
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v33, v10, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v33, 0LL, 1LL, v6);
  OccupantIntentNode.displayName.getter();
  uint64_t v36 = v35;
  Class isa = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v33, 1LL, v6) != 1)
  {
    Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v33, v6);
  }

  if (v36)
  {
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v36);
  }

  else
  {
    NSString v38 = 0LL;
  }

  id v39 = [objc_allocWithZone(INPerson) initWithPersonHandle:v34 nameComponents:isa displayName:v38 image:0 contactIdentifier:0 customIdentifier:0];

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return v39;
}

uint64_t specialized BidirectionalCollection.dropLast(_:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000LL) == 0) {
      uint64_t v5 = a2;
    }
    uint64_t v6 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v6 = 11LL;
    }
    uint64_t v7 = String.index(_:offsetBy:limitedBy:)(v6 | (v5 << 16), -result, 15LL, a2, a3);
    if ((v8 & 1) != 0) {
      uint64_t v9 = 15LL;
    }
    else {
      uint64_t v9 = v7;
    }
    return String.subscript.getter(15LL, v9, a2, a3);
  }

  return result;
}

uint64_t *LocationSearchIntent.confirmationNode.unsafeMutableAddressor()
{
  if (one-time initialization token for confirmationNode != -1) {
    swift_once( &one-time initialization token for confirmationNode,  one-time initialization function for confirmationNode);
  }
  return &static LocationSearchIntent.confirmationNode;
}

uint64_t *LocationSearchIntent.nounNode.unsafeMutableAddressor()
{
  if (one-time initialization token for nounNode != -1) {
    swift_once(&one-time initialization token for nounNode, one-time initialization function for nounNode);
  }
  return &static LocationSearchIntent.nounNode;
}

uint64_t *LocationSearchIntent.verbNode.unsafeMutableAddressor()
{
  if (one-time initialization token for verbNode != -1) {
    swift_once(&one-time initialization token for verbNode, one-time initialization function for verbNode);
  }
  return &static LocationSearchIntent.verbNode;
}

uint64_t *LocationSearchIntent.referenceNode.unsafeMutableAddressor()
{
  if (one-time initialization token for referenceNode != -1) {
    swift_once(&one-time initialization token for referenceNode, one-time initialization function for referenceNode);
  }
  return &static LocationSearchIntent.referenceNode;
}

uint64_t *LocationSearchIntent.incidentTypeNode.unsafeMutableAddressor()
{
  if (one-time initialization token for incidentTypeNode != -1) {
    swift_once( &one-time initialization token for incidentTypeNode,  one-time initialization function for incidentTypeNode);
  }
  return &static LocationSearchIntent.incidentTypeNode;
}

uint64_t *LocationSearchIntent.domainNode.unsafeMutableAddressor()
{
  if (one-time initialization token for domainNode != -1) {
    swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
  }
  return &static LocationSearchIntent.domainNode;
}

uint64_t LocationSearchIntent.__allocating_init(from:)(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  uint64_t v4 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
  if (one-time initialization token for domainNode != -1) {
    swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
  }
  uint64_t v5 = static LocationSearchIntent.domainNode;
  *(void *)(v3 + v4) = static LocationSearchIntent.domainNode;
  uint64_t v6 = v3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent;
  uint64_t v7 = type metadata accessor for NLIntent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v6, a1, v7);
  swift_retain(v5);
  return v3;
}

uint64_t LocationSearchIntent.__allocating_init(from:)(void *a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  LocationSearchIntent.init(from:)(a1);
  return v3;
}

_UNKNOWN **static LocationSearchIntent.LocationSearchNounValue.allCases.getter()
{
  return &outlined read-only object #0 of static LocationSearchIntent.LocationSearchNounValue.allCases.getter;
}

uint64_t LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(char a1)
{
  return *(void *)&aAny_2[8 * a1];
}

uint64_t LocationSearchIntent.LocationSearchNounValue.rawValue.getter(char a1)
{
  return qword_99860[a1];
}

uint64_t LocationSearchIntent.LocationSearchIncidentTypeValue.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_615FC + 4 * byte_99000[a1]))( 0xD000000000000010LL,  0x800000000009B640LL);
}

uint64_t sub_615FC()
{
  return 0x746E656469636361LL;
}

uint64_t sub_61614()
{
  return 0x746E656469636E69LL;
}

uint64_t sub_61630()
{
  return 0x6472617A6168LL;
}

uint64_t sub_61644()
{
  return 0x68635F6465657073LL;
}

uint64_t sub_61664()
{
  return 0x6B726F7764616F72LL;
}

uint64_t sub_6167C()
{
  return 0x6F6C635F656E616CLL;
}

uint64_t sub_616A8()
{
  return 0x6D656C626F7270LL;
}

_UNKNOWN **static LocationSearchIntent.LocationSearchConfirmationValue.allCases.getter()
{
  return &outlined read-only object #0 of static LocationSearchIntent.LocationSearchConfirmationValue.allCases.getter;
}

uint64_t LocationSearchIntent.LocationSearchConfirmationValue.rawValue.getter(char a1)
{
  return qword_998E0[a1];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t))LocationSearchIntent.LocationSearchConfirmationValue.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchConfirmationValue( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  (uint64_t (*)(uint64_t))LocationSearchIntent.LocationSearchConfirmationValue.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  a3,  (uint64_t (*)(void))LocationSearchIntent.LocationSearchConfirmationValue.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  a3,  (uint64_t (*)(uint64_t))LocationSearchIntent.LocationSearchConfirmationValue.rawValue.getter);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LocationSearchIntent.LocationSearchConfirmationValue@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized LocationSearchIntent.LocationSearchConfirmationValue.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LocationSearchIntent.LocationSearchConfirmationValue@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = LocationSearchIntent.LocationSearchConfirmationValue.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance LocationSearchIntent.LocationSearchConfirmationValue( void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance LocationSearchIntent.LocationSearchConfirmationValue;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  a3,  (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue,  (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue,  (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchNounValue( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t))LocationSearchIntent.LocationSearchNounValue.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchNounValue( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  (uint64_t (*)(uint64_t))LocationSearchIntent.LocationSearchNounValue.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchNounValue( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  a3,  (uint64_t (*)(void))LocationSearchIntent.LocationSearchNounValue.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchNounValue( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  a3,  (uint64_t (*)(uint64_t))LocationSearchIntent.LocationSearchNounValue.rawValue.getter);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LocationSearchIntent.LocationSearchNounValue@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized LocationSearchIntent.LocationSearchNounValue.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LocationSearchIntent.LocationSearchNounValue@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = LocationSearchIntent.LocationSearchNounValue.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance LocationSearchIntent.LocationSearchNounValue( void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static LocationSearchIntent.LocationSearchNounValue.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchNounValue( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  a3,  (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue,  (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue,  (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue);
}

_UNKNOWN **static LocationSearchIntent.LocationSearchVerbValue.allCases.getter()
{
  return &outlined read-only object #0 of static LocationSearchIntent.LocationSearchVerbValue.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchVerbValue( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t))LocationSearchIntent.LocationSearchVerbValue.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchVerbValue( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  (uint64_t (*)(uint64_t))LocationSearchIntent.LocationSearchVerbValue.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchVerbValue( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  a3,  (uint64_t (*)(void))LocationSearchIntent.LocationSearchVerbValue.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchVerbValue( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  a3,  (uint64_t (*)(uint64_t))LocationSearchIntent.LocationSearchVerbValue.rawValue.getter);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LocationSearchIntent.LocationSearchVerbValue@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized LocationSearchIntent.LocationSearchVerbValue.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LocationSearchIntent.LocationSearchVerbValue@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance LocationSearchIntent.LocationSearchVerbValue( void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static LocationSearchIntent.LocationSearchVerbValue.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchVerbValue( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  a3,  (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue,  (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue,  (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue);
}

_UNKNOWN **static LocationSearchIntent.LocationSearchIncidentTypeValue.allCases.getter()
{
  return &outlined read-only object #0 of static LocationSearchIntent.LocationSearchIncidentTypeValue.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchIncidentTypeValue( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t))LocationSearchIntent.LocationSearchIncidentTypeValue.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchIncidentTypeValue( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  (uint64_t (*)(uint64_t))LocationSearchIntent.LocationSearchIncidentTypeValue.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchIncidentTypeValue( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  a3,  (uint64_t (*)(void))LocationSearchIntent.LocationSearchIncidentTypeValue.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchIncidentTypeValue( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  a3,  (uint64_t (*)(uint64_t))LocationSearchIntent.LocationSearchIncidentTypeValue.rawValue.getter);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LocationSearchIntent.LocationSearchIncidentTypeValue@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized LocationSearchIntent.LocationSearchIncidentTypeValue.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LocationSearchIntent.LocationSearchIncidentTypeValue@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = LocationSearchIntent.LocationSearchIncidentTypeValue.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance LocationSearchIntent.LocationSearchIncidentTypeValue( void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static LocationSearchIntent.LocationSearchIncidentTypeValue.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchIncidentTypeValue( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  a3,  (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue,  (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue,  (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue);
}

_UNKNOWN **static LocationSearchIntent.LocationSearchReferenceValue.allCases.getter()
{
  return &outlined read-only object #0 of static LocationSearchIntent.LocationSearchReferenceValue.allCases.getter;
}

uint64_t LocationSearchIntent.LocationSearchReferenceValue.rawValue.getter(char a1)
{
  return *(void *)&aNotset_1[8 * a1];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchReferenceValue( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t))LocationSearchIntent.LocationSearchReferenceValue.rawValue.getter);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a5(*a1);
  uint64_t v9 = v8;
  uint64_t v10 = a5(v6);
  if (v7 == v10 && v9 == v11)
  {
    char v14 = 1;
    uint64_t v13 = v9;
  }

  else
  {
    uint64_t v13 = v11;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
  }

  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v13);
  return v14 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchReferenceValue( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  (uint64_t (*)(uint64_t))LocationSearchIntent.LocationSearchReferenceValue.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchConfirmationValue( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)(v10, 0LL);
  uint64_t v6 = a3(v5);
  uint64_t v8 = v7;
  String.hash(into:)(v10, v6, v7);
  swift_bridgeObjectRelease(v8);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchReferenceValue( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  a3,  (uint64_t (*)(void))LocationSearchIntent.LocationSearchReferenceValue.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(*v4);
  uint64_t v8 = v7;
  String.hash(into:)(a1, v6, v7);
  return swift_bridgeObjectRelease(v8);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchReferenceValue( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  a3,  (uint64_t (*)(uint64_t))LocationSearchIntent.LocationSearchReferenceValue.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)(v11, a1);
  uint64_t v7 = a4(v6);
  uint64_t v9 = v8;
  String.hash(into:)(v11, v7, v8);
  swift_bridgeObjectRelease(v9);
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LocationSearchIntent.LocationSearchReferenceValue@<X0>( uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = specialized LocationSearchIntent.LocationSearchReferenceValue.init(rawValue:)(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LocationSearchIntent.LocationSearchReferenceValue@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = LocationSearchIntent.LocationSearchReferenceValue.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance LocationSearchIntent.LocationSearchReferenceValue( void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static LocationSearchIntent.LocationSearchReferenceValue.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchReferenceValue( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( a1,  a2,  a3,  (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue,  (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue,  (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue);
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v10 = a4();
  uint64_t v11 = a5();
  uint64_t v12 = a6();
  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)(a1, a2, v10, v11, v12);
}

uint64_t LocationSearchIntent.intent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent;
  uint64_t v4 = type metadata accessor for NLIntent(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t one-time initialization function for confirmationNode(uint64_t a1)
{
  return one-time initialization function for confirmationNode( a1,  &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue>,  0xD00000000000001ALL,  0x800000000009E570LL,  &static LocationSearchIntent.confirmationNode);
}

uint64_t static LocationSearchIntent.confirmationNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode( &one-time initialization token for confirmationNode,  &static LocationSearchIntent.confirmationNode);
}

uint64_t one-time initialization function for nounNode(uint64_t a1)
{
  return one-time initialization function for confirmationNode( a1,  &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchNounValue>,  0xD000000000000012LL,  0x800000000009E550LL,  &static LocationSearchIntent.nounNode);
}

uint64_t static LocationSearchIntent.nounNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode( &one-time initialization token for nounNode,  &static LocationSearchIntent.nounNode);
}

uint64_t one-time initialization function for verbNode(uint64_t a1)
{
  return one-time initialization function for confirmationNode( a1,  &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchVerbValue>,  0xD000000000000012LL,  0x800000000009E530LL,  &static LocationSearchIntent.verbNode);
}

uint64_t static LocationSearchIntent.verbNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode( &one-time initialization token for verbNode,  &static LocationSearchIntent.verbNode);
}

uint64_t one-time initialization function for appName(uint64_t a1)
{
  return one-time initialization function for confirmationNode( a1,  &demangling cache variable for type metadata for TerminalOntologyNode<String>,  0x656D614E707061LL,  0xE700000000000000LL,  &static LocationSearchIntent.appName);
}

uint64_t *LocationSearchIntent.appName.unsafeMutableAddressor()
{
  if (one-time initialization token for appName != -1) {
    swift_once(&one-time initialization token for appName, one-time initialization function for appName);
  }
  return &static LocationSearchIntent.appName;
}

uint64_t static LocationSearchIntent.appName.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode( &one-time initialization token for appName,  &static LocationSearchIntent.appName);
}

uint64_t one-time initialization function for applicationId(uint64_t a1)
{
  return one-time initialization function for confirmationNode( a1,  &demangling cache variable for type metadata for TerminalOntologyNode<String>,  0x746163696C707061LL,  0xED000064496E6F69LL,  &static LocationSearchIntent.applicationId);
}

uint64_t *LocationSearchIntent.applicationId.unsafeMutableAddressor()
{
  if (one-time initialization token for applicationId != -1) {
    swift_once(&one-time initialization token for applicationId, one-time initialization function for applicationId);
  }
  return &static LocationSearchIntent.applicationId;
}

uint64_t static LocationSearchIntent.applicationId.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode( &one-time initialization token for applicationId,  &static LocationSearchIntent.applicationId);
}

uint64_t one-time initialization function for incidentTypeNode(uint64_t a1)
{
  return one-time initialization function for confirmationNode( a1,  &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchIncidentTypeValue>,  0xD00000000000001ALL,  0x800000000009C4A0LL,  &static LocationSearchIntent.incidentTypeNode);
}

uint64_t static LocationSearchIntent.incidentTypeNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode( &one-time initialization token for incidentTypeNode,  &static LocationSearchIntent.incidentTypeNode);
}

uint64_t one-time initialization function for referenceNode(uint64_t a1)
{
  return one-time initialization function for confirmationNode( a1,  &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchReferenceValue>,  0xD000000000000017LL,  0x800000000009E510LL,  &static LocationSearchIntent.referenceNode);
}

uint64_t one-time initialization function for confirmationNode( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  uint64_t result = TerminalOntologyNode.init(name:multicardinal:)(a3, a4, 0LL);
  *a5 = result;
  return result;
}

uint64_t static LocationSearchIntent.referenceNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode( &one-time initialization token for referenceNode,  &static LocationSearchIntent.referenceNode);
}

uint64_t one-time initialization function for destinationNode()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  uint64_t v1 = swift_allocObject(v0, 112LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_949D0;
  uint64_t v2 = type metadata accessor for AddressOntologyNode(0LL);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  uint64_t v3 = AddressOntologyNode.init(name:multicardinal:)(0x73736572646461LL, 0xE700000000000000LL, 0LL);
  *(void *)(v1 + 56) = v2;
  *(void *)(v1 + 64) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v3;
  if (one-time initialization token for domainNode != -1) {
    swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
  }
  uint64_t v4 = static LocalSearchIntent.domainNode;
  *(void *)(v1 + 96) = type metadata accessor for DomainOntologyNode(0LL);
  *(void *)(v1 + 104) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v1 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v4;
  uint64_t v5 = type metadata accessor for NonTerminalOntologyNode(0LL);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  swift_retain(v4);
  uint64_t result = NonTerminalOntologyNode.init(name:multicardinal:childNodes:)( 0x74616E6974736564LL,  0xEB000000006E6F69LL,  0LL,  v1);
  static LocationSearchIntent.destinationNode = result;
  return result;
}

uint64_t *LocationSearchIntent.destinationNode.unsafeMutableAddressor()
{
  if (one-time initialization token for destinationNode != -1) {
    swift_once(&one-time initialization token for destinationNode, one-time initialization function for destinationNode);
  }
  return &static LocationSearchIntent.destinationNode;
}

uint64_t static LocationSearchIntent.destinationNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode( &one-time initialization token for destinationNode,  &static LocationSearchIntent.destinationNode);
}

uint64_t one-time initialization function for locationNode()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  uint64_t v1 = swift_allocObject(v0, 72LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_95430;
  if (one-time initialization token for destinationNode != -1) {
    swift_once(&one-time initialization token for destinationNode, one-time initialization function for destinationNode);
  }
  uint64_t v2 = static LocationSearchIntent.destinationNode;
  uint64_t v3 = type metadata accessor for NonTerminalOntologyNode(0LL);
  *(void *)(v1 + 56) = v3;
  *(void *)(v1 + 64) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v2;
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  swift_retain(v2);
  uint64_t result = NonTerminalOntologyNode.init(name:multicardinal:childNodes:)( 0x6E6F697461636F6CLL,  0xE800000000000000LL,  0LL,  v1);
  static LocationSearchIntent.locationNode = result;
  return result;
}

uint64_t *LocationSearchIntent.locationNode.unsafeMutableAddressor()
{
  if (one-time initialization token for locationNode != -1) {
    swift_once(&one-time initialization token for locationNode, one-time initialization function for locationNode);
  }
  return &static LocationSearchIntent.locationNode;
}

uint64_t static LocationSearchIntent.locationNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode( &one-time initialization token for locationNode,  &static LocationSearchIntent.locationNode);
}

uint64_t one-time initialization function for appNode()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  uint64_t v1 = swift_allocObject(v0, 112LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_949D0;
  if (one-time initialization token for applicationId != -1) {
    swift_once(&one-time initialization token for applicationId, one-time initialization function for applicationId);
  }
  uint64_t v2 = static LocationSearchIntent.applicationId;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<String>);
  *(void *)(v1 + 56) = v3;
  uint64_t v4 = lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>( &lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>,  &demangling cache variable for type metadata for TerminalOntologyNode<String>,  (uint64_t)&protocol conformance descriptor for TerminalOntologyNode<A>);
  *(void *)(v1 + 64) = v4;
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v2;
  uint64_t v5 = one-time initialization token for appName;
  swift_retain(v2);
  if (v5 != -1) {
    swift_once(&one-time initialization token for appName, one-time initialization function for appName);
  }
  uint64_t v6 = static LocationSearchIntent.appName;
  *(void *)(v1 + 96) = v3;
  *(void *)(v1 + 104) = v4;
  *(void *)(v1 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v6;
  uint64_t v7 = type metadata accessor for NonTerminalOntologyNode(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  swift_retain(v6);
  uint64_t result = NonTerminalOntologyNode.init(name:multicardinal:childNodes:)(7368801LL, 0xE300000000000000LL, 0LL, v1);
  static LocationSearchIntent.appNode = result;
  return result;
}

uint64_t *LocationSearchIntent.appNode.unsafeMutableAddressor()
{
  if (one-time initialization token for appNode != -1) {
    swift_once(&one-time initialization token for appNode, one-time initialization function for appNode);
  }
  return &static LocationSearchIntent.appNode;
}

uint64_t static LocationSearchIntent.appNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode( &one-time initialization token for appNode,  &static LocationSearchIntent.appNode);
}

uint64_t one-time initialization function for domainNode()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  uint64_t v1 = swift_allocObject(v0, 312LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_99AF0;
  if (one-time initialization token for nounNode != -1) {
    swift_once(&one-time initialization token for nounNode, one-time initialization function for nounNode);
  }
  uint64_t v2 = static LocationSearchIntent.nounNode;
  *(void *)(v1 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchNounValue>);
  *(void *)(v1 + 64) = lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>( &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchNounValue> and conformance TerminalOntologyNode<A>,  &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchNounValue>,  (uint64_t)&protocol conformance descriptor for TerminalOntologyNode<A>);
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v2;
  uint64_t v3 = one-time initialization token for verbNode;
  swift_retain(v2);
  if (v3 != -1) {
    swift_once(&one-time initialization token for verbNode, one-time initialization function for verbNode);
  }
  uint64_t v4 = static LocationSearchIntent.verbNode;
  *(void *)(v1 + 96) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchVerbValue>);
  *(void *)(v1 + 104) = lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>( &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchVerbValue> and conformance TerminalOntologyNode<A>,  &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchVerbValue>,  (uint64_t)&protocol conformance descriptor for TerminalOntologyNode<A>);
  *(void *)(v1 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v4;
  uint64_t v5 = one-time initialization token for incidentTypeNode;
  swift_retain(v4);
  if (v5 != -1) {
    swift_once( &one-time initialization token for incidentTypeNode,  one-time initialization function for incidentTypeNode);
  }
  uint64_t v6 = static LocationSearchIntent.incidentTypeNode;
  *(void *)(v1 + 136) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchIncidentTypeValue>);
  *(void *)(v1 + 144) = lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>( &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchIncidentTypeValue> and conformance TerminalOntologyNode<A>,  &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchIncidentTypeValue>,  (uint64_t)&protocol conformance descriptor for TerminalOntologyNode<A>);
  *(void *)(v1 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v6;
  uint64_t v7 = one-time initialization token for confirmationNode;
  swift_retain(v6);
  if (v7 != -1) {
    swift_once( &one-time initialization token for confirmationNode,  one-time initialization function for confirmationNode);
  }
  uint64_t v8 = static LocationSearchIntent.confirmationNode;
  *(void *)(v1 + 176) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue>);
  *(void *)(v1 + 184) = lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>( &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue> and conformance TerminalOntologyNode<A>,  &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue>,  (uint64_t)&protocol conformance descriptor for TerminalOntologyNode<A>);
  *(void *)(v1 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v8;
  uint64_t v9 = one-time initialization token for locationNode;
  swift_retain(v8);
  if (v9 != -1) {
    swift_once(&one-time initialization token for locationNode, one-time initialization function for locationNode);
  }
  uint64_t v10 = static LocationSearchIntent.locationNode;
  uint64_t v11 = type metadata accessor for NonTerminalOntologyNode(0LL);
  *(void *)(v1 + 216) = v11;
  *(void *)(v1 + 224) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v1 + 19__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v10;
  uint64_t v12 = one-time initialization token for referenceNode;
  swift_retain(v10);
  if (v12 != -1) {
    swift_once(&one-time initialization token for referenceNode, one-time initialization function for referenceNode);
  }
  uint64_t v13 = static LocationSearchIntent.referenceNode;
  *(void *)(v1 + 256) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchReferenceValue>);
  *(void *)(v1 + 264) = lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>( &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchReferenceValue> and conformance TerminalOntologyNode<A>,  &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchReferenceValue>,  (uint64_t)&protocol conformance descriptor for TerminalOntologyNode<A>);
  *(void *)(v1 + 23__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v13;
  uint64_t v14 = one-time initialization token for appNode;
  swift_retain(v13);
  if (v14 != -1) {
    swift_once(&one-time initialization token for appNode, one-time initialization function for appNode);
  }
  uint64_t v15 = static LocationSearchIntent.appNode;
  *(void *)(v1 + 296) = v11;
  *(void *)(v1 + 304) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v1 + 27__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v15;
  uint64_t v16 = type metadata accessor for DomainOntologyNode(0LL);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  swift_retain(v15);
  uint64_t result = DomainOntologyNode.init(name:childNodes:isInEventTree:)(0x6E6F697461636F6CLL, 0xEE00686372616553LL, v1, 1LL);
  static LocationSearchIntent.domainNode = result;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  uint64_t v1 = swift_allocObject(v0, 72LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_95430;
  if (one-time initialization token for categoryNode != -1) {
    swift_once(&one-time initialization token for categoryNode, one-time initialization function for categoryNode);
  }
  uint64_t v2 = static LocalSearchIntent.categoryNode;
  *(void *)(v1 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<String>);
  *(void *)(v1 + 64) = lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>( &lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>,  &demangling cache variable for type metadata for TerminalOntologyNode<String>,  (uint64_t)&protocol conformance descriptor for TerminalOntologyNode<A>);
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v2;
  uint64_t v3 = type metadata accessor for DomainOntologyNode(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  swift_retain(v2);
  uint64_t result = DomainOntologyNode.init(name:childNodes:isInEventTree:)(0x6165536C61636F6CLL, 0xEB00000000686372LL, v1, 1LL);
  static LocalSearchIntent.domainNode = result;
  return result;
}

uint64_t static LocationSearchIntent.domainNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode( &one-time initialization token for domainNode,  &static LocationSearchIntent.domainNode);
}

uint64_t LocationSearchIntent.init(from:)(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
  if (one-time initialization token for domainNode != -1) {
    swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
  }
  uint64_t v4 = static LocationSearchIntent.domainNode;
  *(void *)(v1 + v3) = static LocationSearchIntent.domainNode;
  uint64_t v5 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent;
  uint64_t v6 = type metadata accessor for NLIntent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(v5, a1, v6);
  swift_retain(v4);
  return v1;
}

uint64_t LocationSearchIntent.init(from:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v33 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNode(0LL);
  uint64_t v4 = *(void *)(v33 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NLIntent(0LL);
  uint64_t v34 = *(void *)(v11 - 8);
  uint64_t v35 = v11;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
  if (one-time initialization token for domainNode != -1) {
    swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
  }
  uint64_t v15 = static LocationSearchIntent.domainNode;
  *(void *)(v2 + v14) = static LocationSearchIntent.domainNode;
  swift_retain(v15);
  uint64_t v16 = PommesResponse.firstGeoExperience.getter();
  if (v16)
  {
    uint64_t v17 = (void *)v16;
    id v32 = a1;
    uint64_t v18 = GeoExperience.geoClientComponent.getter(v16);
    char v19 = Apple_Parsec_Siri_V2alpha_GeoClientComponent.hasLocationSearchNode.getter(v18);
    uint64_t v20 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
    uint64_t v21 = v20(v10, v7);
    if ((v19 & 1) != 0)
    {
      uint64_t v22 = GeoExperience.geoClientComponent.getter(v21);
      Apple_Parsec_Siri_V2alpha_GeoClientComponent.locationSearchNode.getter(v22);
      v20(v10, v7);
      uint64_t v23 = type metadata accessor for LocationSearchIntentBuilder();
      swift_allocObject(v23, 120LL, 7LL);
      uint64_t v24 = LocationSearchIntentBuilder.init()();
      uint64_t v25 = (*(uint64_t (**)(char *))(*(void *)v24 + 376LL))(v6);
      uint64_t v26 = swift_release(v24);
      (*(void (**)(uint64_t))(*(void *)v25 + 456LL))(v26);

      swift_release(v25);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v33);
    }

    else
    {
      uint64_t v29 = type metadata accessor for LocationSearchIntentBuilder();
      swift_allocObject(v29, 120LL, 7LL);
      uint64_t v30 = LocationSearchIntentBuilder.init()();
      (*(void (**)(uint64_t))(*(void *)v30 + 456LL))(v30);
      swift_release(v30);
    }
  }

  else
  {
    uint64_t v27 = type metadata accessor for LocationSearchIntentBuilder();
    swift_allocObject(v27, 120LL, 7LL);
    uint64_t v28 = LocationSearchIntentBuilder.init()();
    (*(void (**)(uint64_t))(*(void *)v28 + 456LL))(v28);
    swift_release(v28);
  }

  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))( v2 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent,  v13,  v35);
  return v2;
}

uint64_t LocationSearchIntent.domainOntologyNode.getter()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode);
  swift_beginAccess(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode, v3, 0LL, 0LL);
  return swift_retain(*v1);
}

uint64_t LocationSearchIntent.domainOntologyNode.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  return swift_release(v4);
}

uint64_t (*LocationSearchIntent.domainOntologyNode.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t LocationSearchIntent.domainName.getter()
{
  if (one-time initialization token for domainNode != -1) {
    swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
  }
  return NonTerminalOntologyNode.name.getter();
}

uint64_t LocationSearchIntent.confirmation.getter()
{
  return LocationSearchIntent.confirmation.getter( &one-time initialization token for confirmationNode,  &static LocationSearchIntent.confirmationNode,  (uint64_t)one-time initialization function for confirmationNode);
}

uint64_t LocationSearchIntent.noun.getter()
{
  if (one-time initialization token for nounNode != -1) {
    swift_once(&one-time initialization token for nounNode, one-time initialization function for nounNode);
  }
  uint64_t v0 = static LocationSearchIntent.nounNode;
  uint64_t v1 = type metadata accessor for LocationSearchIntent(0LL);
  uint64_t v2 = lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent( (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent,  (uint64_t)&protocol conformance descriptor for LocationSearchIntent);
  IntentNodeTraversable.value<A>(forNode:)(&v4, v0, v1, v2);
  else {
    return v4;
  }
}

uint64_t LocationSearchIntent.verb.getter()
{
  if (one-time initialization token for verbNode != -1) {
    swift_once(&one-time initialization token for verbNode, one-time initialization function for verbNode);
  }
  uint64_t v0 = static LocationSearchIntent.verbNode;
  uint64_t v1 = type metadata accessor for LocationSearchIntent(0LL);
  uint64_t v2 = lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent( (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent,  (uint64_t)&protocol conformance descriptor for LocationSearchIntent);
  IntentNodeTraversable.value<A>(forNode:)(&v4, v0, v1, v2);
  else {
    return v4;
  }
}

uint64_t LocationSearchIntent.reference.getter()
{
  if (one-time initialization token for referenceNode != -1) {
    swift_once(&one-time initialization token for referenceNode, one-time initialization function for referenceNode);
  }
  uint64_t v0 = static LocationSearchIntent.referenceNode;
  uint64_t v1 = type metadata accessor for LocationSearchIntent(0LL);
  uint64_t v2 = lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent( (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent,  (uint64_t)&protocol conformance descriptor for LocationSearchIntent);
  IntentNodeTraversable.value<A>(forNode:)(&v4, v0, v1, v2);
  else {
    return v4;
  }
}

uint64_t LocationSearchIntent.incidentType.getter()
{
  return LocationSearchIntent.confirmation.getter( &one-time initialization token for incidentTypeNode,  &static LocationSearchIntent.incidentTypeNode,  (uint64_t)one-time initialization function for incidentTypeNode);
}

uint64_t LocationSearchIntent.confirmation.getter(void *a1, uint64_t *a2, uint64_t a3)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v4 = *a2;
  uint64_t v5 = type metadata accessor for LocationSearchIntent(0LL);
  uint64_t v6 = lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent( (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent,  (uint64_t)&protocol conformance descriptor for LocationSearchIntent);
  IntentNodeTraversable.value<A>(forNode:)(&v8, v4, v5, v6);
  return v8;
}

uint64_t LocationSearchIntent.appName.getter()
{
  return LocationSearchIntent.appName.getter( &one-time initialization token for appName,  &static LocationSearchIntent.appName,  (uint64_t)one-time initialization function for appName);
}

uint64_t LocationSearchIntent.address.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NonTerminalIntentNode(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v20 = v1;
  uint64_t v11 = type metadata accessor for AddressOntologyNode(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  uint64_t v12 = AddressOntologyNode.init(name:multicardinal:)(0x73736572646461LL, 0xE700000000000000LL, 0LL);
  uint64_t v13 = type metadata accessor for LocationSearchIntent(0LL);
  uint64_t v14 = lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent( (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent,  (uint64_t)&protocol conformance descriptor for LocationSearchIntent);
  IntentNodeTraversable.intentNode(forOntologyNode:)(v12, v13, v14);
  swift_release(v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    outlined destroy of NonTerminalIntentNode?((uint64_t)v4);
    uint64_t v15 = type metadata accessor for AddressIntentNode(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))( a1,  1LL,  1LL,  v15);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v4, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v10, v5);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v17 = AddressOntologyNode.init(name:multicardinal:)(0x73736572646461LL, 0xE700000000000000LL, 0LL);
    AddressIntentNode.init(intentNode:ontologyNode:)(v8, v17);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    uint64_t v18 = type metadata accessor for AddressIntentNode(0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))( a1,  0LL,  1LL,  v18);
  }

uint64_t LocationSearchIntent.occupant.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NonTerminalIntentNode(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v20 = v1;
  uint64_t v11 = type metadata accessor for AddressOntologyNode.OccupantNode(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  uint64_t v12 = AddressOntologyNode.OccupantNode.init(name:multicardinal:)(0x746E61707563636FLL, 0xE800000000000000LL, 0LL);
  uint64_t v13 = type metadata accessor for LocationSearchIntent(0LL);
  uint64_t v14 = lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent( (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent,  (uint64_t)&protocol conformance descriptor for LocationSearchIntent);
  IntentNodeTraversable.intentNode(forOntologyNode:)(v12, v13, v14);
  swift_release(v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    outlined destroy of NonTerminalIntentNode?((uint64_t)v4);
    uint64_t v15 = type metadata accessor for OccupantIntentNode(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))( a1,  1LL,  1LL,  v15);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v4, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v10, v5);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v17 = AddressOntologyNode.OccupantNode.init(name:multicardinal:)(0x746E61707563636FLL, 0xE800000000000000LL, 0LL);
    OccupantIntentNode.init(intentNode:ontologyNode:)(v8, v17);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    uint64_t v18 = type metadata accessor for OccupantIntentNode(0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))( a1,  0LL,  1LL,  v18);
  }

uint64_t LocationSearchIntent.personPlaceId.getter()
{
  return LocationSearchIntent.personPlaceId.getter( (void (*)(void))&type metadata accessor for AddressOntologyNode.PersonPlaceNode,  (uint64_t (*)(void))&static AddressOntologyNode.PersonPlaceNode.personPlaceIdNode.getter);
}

uint64_t LocationSearchIntent.personPlaceName.getter()
{
  return LocationSearchIntent.personPlaceId.getter( (void (*)(void))&type metadata accessor for AddressOntologyNode.PersonPlaceNode,  (uint64_t (*)(void))&static AddressOntologyNode.PersonPlaceNode.personPlaceNameNode.getter);
}

uint64_t LocationSearchIntent.personPlaceId.getter(void (*a1)(void), uint64_t (*a2)(void))
{
  uint64_t v3 = a2();
  uint64_t v4 = type metadata accessor for LocationSearchIntent(0LL);
  uint64_t v5 = lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent( (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent,  (uint64_t)&protocol conformance descriptor for LocationSearchIntent);
  IntentNodeTraversable.value<A>(forNode:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

uint64_t LocationSearchIntent.category.getter()
{
  return LocationSearchIntent.appName.getter( &one-time initialization token for categoryNode,  &static LocalSearchIntent.categoryNode,  (uint64_t)one-time initialization function for categoryNode);
}

uint64_t LocationSearchIntent.appName.getter(void *a1, uint64_t *a2, uint64_t a3)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v4 = *a2;
  uint64_t v5 = type metadata accessor for LocationSearchIntent(0LL);
  uint64_t v6 = lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent( (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent,  (uint64_t)&protocol conformance descriptor for LocationSearchIntent);
  IntentNodeTraversable.value<A>(forNode:)(&v8, v4, v5, v6);
  return v8;
}

uint64_t LocationSearchIntent.lontitude.getter()
{
  return LocationSearchIntent.personPlaceId.getter( (void (*)(void))&type metadata accessor for AddressOntologyNode.CentroidNode,  (uint64_t (*)(void))&static AddressOntologyNode.CentroidNode.longitudeNode.getter);
}

uint64_t LocationSearchIntent.latitude.getter()
{
  return LocationSearchIntent.personPlaceId.getter( (void (*)(void))&type metadata accessor for AddressOntologyNode.CentroidNode,  (uint64_t (*)(void))&static AddressOntologyNode.CentroidNode.latitudeNode.getter);
}

void LocationSearchIntent.getSiriKitConfirmationState()()
{
  uint64_t v1 = (char *)sub_634C4 + 4 * byte_99009[(*(unsigned __int8 (**)(void))(*(void *)v0 + 152LL))()];
  __asm { BR              X10 }

uint64_t sub_634C4()
{
  uint64_t v1 = enum case for SiriKitConfirmationState.confirmed(_:);
  uint64_t v2 = ((uint64_t (*)(void))type metadata accessor for SiriKitConfirmationState)(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 104LL))(v0, v1, v2);
}

uint64_t LocationSearchIntent.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent;
  uint64_t v2 = type metadata accessor for NLIntent(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode));
  return v0;
}

uint64_t LocationSearchIntent.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent;
  uint64_t v2 = type metadata accessor for NLIntent(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode));
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t protocol witness for NLIntentWrapper.intent.getter in conformance LocationSearchIntent@<X0>( uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent;
  uint64_t v4 = type metadata accessor for NLIntent(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t protocol witness for NLIntentWrapper.domainOntologyNode.getter in conformance LocationSearchIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120LL))();
}

uint64_t protocol witness for GeoIntent.getIntentType() in conformance LocationSearchIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96LL))() & 1;
}

uint64_t protocol witness for IntentNodeTraversable.traversableIntentNode.getter in conformance LocationSearchIntent( uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for LocationSearchIntent, a1);
  return NLIntentWrapper.traversableIntentNode.getter(a1, WitnessTable);
}

uint64_t protocol witness for IntentNodeTraversable.traversableOntologyNode.getter in conformance LocationSearchIntent( uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for LocationSearchIntent, a1);
  return NLIntentWrapper.traversableOntologyNode.getter(a1, WitnessTable);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LocationSearchIntent( uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for LocationSearchIntent, a1);
  return NLIntentWrapper.description.getter(a1, WitnessTable);
}

unint64_t specialized LocationSearchIntent.LocationSearchConfirmationValue.init(rawValue:)( Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of LocationSearchIntent.LocationSearchConfirmationValue.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

unint64_t specialized LocationSearchIntent.LocationSearchNounValue.init(rawValue:)( Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of LocationSearchIntent.LocationSearchNounValue.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8) {
    return 8LL;
  }
  else {
    return v3;
  }
}

unint64_t specialized LocationSearchIntent.LocationSearchVerbValue.init(rawValue:)( Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of LocationSearchIntent.LocationSearchVerbValue.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA) {
    return 10LL;
  }
  else {
    return v3;
  }
}

unint64_t specialized LocationSearchIntent.LocationSearchIncidentTypeValue.init(rawValue:)( Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of LocationSearchIntent.LocationSearchIncidentTypeValue.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 9) {
    return 9LL;
  }
  else {
    return v3;
  }
}

uint64_t specialized LocationSearchIntent.LocationSearchReferenceValue.init(rawValue:)( uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)( &outlined read-only object #0 of LocationSearchIntent.LocationSearchReferenceValue.init(rawValue:),  a1,  a2,  &outlined variable #1 of LocationSearchIntent.LocationSearchReferenceValue.init(rawValue:));
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x1E) {
    return 30LL;
  }
  else {
    return v3;
  }
}

uint64_t type metadata accessor for LocationSearchIntent(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for LocationSearchIntent;
  if (!type metadata singleton initialization cache for LocationSearchIntent) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationSearchIntent);
  }
  return result;
}

uint64_t outlined destroy of NonTerminalIntentNode?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NonTerminalIntentNode?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue()
{
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchConfirmationValue,  &type metadata for LocationSearchIntent.LocationSearchConfirmationValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchConfirmationValue,  &type metadata for LocationSearchIntent.LocationSearchConfirmationValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchConfirmationValue,  &type metadata for LocationSearchIntent.LocationSearchConfirmationValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchConfirmationValue,  &type metadata for LocationSearchIntent.LocationSearchConfirmationValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchConfirmationValue,  &type metadata for LocationSearchIntent.LocationSearchConfirmationValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchConfirmationValue,  &type metadata for LocationSearchIntent.LocationSearchConfirmationValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue);
  }

  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in LocationSearchIntent.LocationSearchConfirmationValue()
{
  return lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>( &lazy protocol witness table cache variable for type [LocationSearchIntent.LocationSearchConfirmationValue] and conformance [A],  &demangling cache variable for type metadata for [LocationSearchIntent.LocationSearchConfirmationValue],  (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue()
{
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchNounValue,  &type metadata for LocationSearchIntent.LocationSearchNounValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchNounValue,  &type metadata for LocationSearchIntent.LocationSearchNounValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchNounValue,  &type metadata for LocationSearchIntent.LocationSearchNounValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchNounValue,  &type metadata for LocationSearchIntent.LocationSearchNounValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchNounValue,  &type metadata for LocationSearchIntent.LocationSearchNounValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchNounValue,  &type metadata for LocationSearchIntent.LocationSearchNounValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue);
  }

  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in LocationSearchIntent.LocationSearchNounValue()
{
  return lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>( &lazy protocol witness table cache variable for type [LocationSearchIntent.LocationSearchNounValue] and conformance [A],  &demangling cache variable for type metadata for [LocationSearchIntent.LocationSearchNounValue],  (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue()
{
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchVerbValue,  &type metadata for LocationSearchIntent.LocationSearchVerbValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchVerbValue,  &type metadata for LocationSearchIntent.LocationSearchVerbValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchVerbValue,  &type metadata for LocationSearchIntent.LocationSearchVerbValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchVerbValue,  &type metadata for LocationSearchIntent.LocationSearchVerbValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchVerbValue,  &type metadata for LocationSearchIntent.LocationSearchVerbValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchVerbValue,  &type metadata for LocationSearchIntent.LocationSearchVerbValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue);
  }

  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in LocationSearchIntent.LocationSearchVerbValue()
{
  return lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>( &lazy protocol witness table cache variable for type [LocationSearchIntent.LocationSearchVerbValue] and conformance [A],  &demangling cache variable for type metadata for [LocationSearchIntent.LocationSearchVerbValue],  (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue()
{
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchIncidentTypeValue,  &type metadata for LocationSearchIntent.LocationSearchIncidentTypeValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchIncidentTypeValue,  &type metadata for LocationSearchIntent.LocationSearchIncidentTypeValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchIncidentTypeValue,  &type metadata for LocationSearchIntent.LocationSearchIncidentTypeValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchIncidentTypeValue,  &type metadata for LocationSearchIntent.LocationSearchIncidentTypeValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchIncidentTypeValue,  &type metadata for LocationSearchIntent.LocationSearchIncidentTypeValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchIncidentTypeValue,  &type metadata for LocationSearchIntent.LocationSearchIncidentTypeValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue);
  }

  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in LocationSearchIntent.LocationSearchIncidentTypeValue()
{
  return lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>( &lazy protocol witness table cache variable for type [LocationSearchIntent.LocationSearchIncidentTypeValue] and conformance [A],  &demangling cache variable for type metadata for [LocationSearchIntent.LocationSearchIncidentTypeValue],  (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue()
{
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchReferenceValue,  &type metadata for LocationSearchIntent.LocationSearchReferenceValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchReferenceValue,  &type metadata for LocationSearchIntent.LocationSearchReferenceValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchReferenceValue,  &type metadata for LocationSearchIntent.LocationSearchReferenceValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchReferenceValue,  &type metadata for LocationSearchIntent.LocationSearchReferenceValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchReferenceValue,  &type metadata for LocationSearchIntent.LocationSearchReferenceValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationSearchIntent.LocationSearchReferenceValue,  &type metadata for LocationSearchIntent.LocationSearchReferenceValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue);
  }

  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in LocationSearchIntent.LocationSearchReferenceValue()
{
  return lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>( &lazy protocol witness table cache variable for type [LocationSearchIntent.LocationSearchReferenceValue] and conformance [A],  &demangling cache variable for type metadata for [LocationSearchIntent.LocationSearchReferenceValue],  (uint64_t)&protocol conformance descriptor for [A]);
}

uint64_t base witness table accessor for IntentNodeTraversable in LocationSearchIntent()
{
  return lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent( (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent,  (uint64_t)&protocol conformance descriptor for LocationSearchIntent);
}

uint64_t base witness table accessor for CustomStringConvertible in LocationSearchIntent()
{
  return lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent( &lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent,  (uint64_t)&protocol conformance descriptor for LocationSearchIntent);
}

uint64_t lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for LocationSearchIntent(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_63EA0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120LL))();
  *a2 = result;
  return result;
}

uint64_t sub_63ED0(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 128LL);
  uint64_t v3 = swift_retain(*a1);
  return v2(v3);
}

uint64_t ObjC metadata update function for LocationSearchIntent()
{
  return type metadata accessor for LocationSearchIntent(0LL);
}

uint64_t type metadata completion function for LocationSearchIntent(uint64_t a1)
{
  uint64_t result = type metadata accessor for NLIntent(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for LocationSearchIntent.LocationSearchConfirmationValue( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_63FCC + 4 * byte_99012[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_64000 + 4 * byte_9900D[v4]))();
}

uint64_t sub_64000(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_64008(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x64010LL);
  }
  return result;
}

uint64_t sub_6401C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x64024LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_64028(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_64030(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationSearchIntent.LocationSearchConfirmationValue()
{
  return &type metadata for LocationSearchIntent.LocationSearchConfirmationValue;
}

uint64_t getEnumTagSinglePayload for LocationSearchIntent.LocationSearchNounValue( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

uint64_t storeEnumTagSinglePayload for LocationSearchIntent.LocationSearchNounValue( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_64128 + 4 * byte_9901C[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_6415C + 4 * byte_99017[v4]))();
}

uint64_t sub_6415C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_64164(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x6416CLL);
  }
  return result;
}

uint64_t sub_64178(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x64180LL);
  }
  *(_BYTE *)uint64_t result = a2 + 7;
  return result;
}

uint64_t sub_64184(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6418C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationSearchIntent.LocationSearchNounValue()
{
  return &type metadata for LocationSearchIntent.LocationSearchNounValue;
}

uint64_t getEnumTagSinglePayload for LocationSearchIntent.LocationSearchVerbValue( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }

uint64_t storeEnumTagSinglePayload for LocationSearchIntent.LocationSearchVerbValue( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF6) {
    return ((uint64_t (*)(void))((char *)&loc_64284 + 4 * byte_99026[v4]))();
  }
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_642B8 + 4 * byte_99021[v4]))();
}

uint64_t sub_642B8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_642C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x642C8LL);
  }
  return result;
}

uint64_t sub_642D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x642DCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 9;
  return result;
}

uint64_t sub_642E0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_642E8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationSearchIntent.LocationSearchVerbValue()
{
  return &type metadata for LocationSearchIntent.LocationSearchVerbValue;
}

uint64_t getEnumTagSinglePayload for LocationSearchIntent.LocationSearchIncidentTypeValue( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }

uint64_t storeEnumTagSinglePayload for LocationSearchIntent.LocationSearchIncidentTypeValue( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_643E0 + 4 * byte_99030[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_64414 + 4 * byte_9902B[v4]))();
}

uint64_t sub_64414(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_6441C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x64424LL);
  }
  return result;
}

uint64_t sub_64430(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x64438LL);
  }
  *(_BYTE *)uint64_t result = a2 + 8;
  return result;
}

uint64_t sub_6443C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_64444(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationSearchIntent.LocationSearchIncidentTypeValue()
{
  return &type metadata for LocationSearchIntent.LocationSearchIncidentTypeValue;
}

uint64_t getEnumTagSinglePayload for LocationSearchIntent.LocationSearchReferenceValue( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xE3) {
    goto LABEL_17;
  }
  if (a2 + 29 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 29) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 29;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 29;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 29;
    }
  }

uint64_t storeEnumTagSinglePayload for LocationSearchIntent.LocationSearchReferenceValue( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 29 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 29) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xE3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xE2) {
    return ((uint64_t (*)(void))((char *)&loc_6453C + 4 * byte_9903A[v4]))();
  }
  *a1 = a2 + 29;
  return ((uint64_t (*)(void))((char *)sub_64570 + 4 * byte_99035[v4]))();
}

uint64_t sub_64570(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_64578(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x64580LL);
  }
  return result;
}

uint64_t sub_6458C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x64594LL);
  }
  *(_BYTE *)uint64_t result = a2 + 29;
  return result;
}

uint64_t sub_64598(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_645A0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationSearchIntent.LocationSearchReferenceValue()
{
  return &type metadata for LocationSearchIntent.LocationSearchReferenceValue;
}

unint64_t GeoDirectInvocations.rawValue.getter(char a1)
{
  if (!a1) {
    return 0xD00000000000002CLL;
  }
  if (a1 == 1) {
    return 0xD00000000000002ALL;
  }
  return 0xD000000000000033LL;
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(char a1)
{
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v2 = 0xD00000000000002ALL;
    }
    else {
      unint64_t v2 = 0xD000000000000033LL;
    }
    if (a1 == 1) {
      unint64_t v3 = 0x800000000009B780LL;
    }
    else {
      unint64_t v3 = 0x800000000009B7B0LL;
    }
  }

  else
  {
    unint64_t v2 = 0xD00000000000002CLL;
    unint64_t v3 = 0x800000000009B750LL;
  }

  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v3 = 0xD00000000000002ALL;
    }
    else {
      unint64_t v3 = 0xD000000000000033LL;
    }
    if (a2 == 1) {
      unint64_t v4 = 0x800000000009B780LL;
    }
    else {
      unint64_t v4 = 0x800000000009B7B0LL;
    }
  }

  else
  {
    unint64_t v3 = 0xD00000000000002CLL;
    unint64_t v4 = 0x800000000009B750LL;
  }

  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)@<X0>( void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1);
  *a3 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GeoDirectInvocations( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GeoDirectInvocations()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GeoDirectInvocations(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GeoDirectInvocations( uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GeoDirectInvocations@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized GeoDirectInvocations.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GeoDirectInvocations@<X0>( unint64_t *a1@<X8>)
{
  unint64_t result = GeoDirectInvocations.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t GeoFlowDelegatePlugin.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, 32LL, 7LL);
  GeoFlowDelegatePlugin.init()();
  return v1;
}

uint64_t GeoFlowDelegatePlugin.init()()
{
  uint64_t v1 = v0;
  type metadata accessor for OS_os_log();
  *(void *)(v0 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000015LL,  0x8000000000099AF0LL);
  static Device.current.getter(v16);
  uint64_t v2 = type metadata accessor for GeoRCHFlowFactoryImpl();
  uint64_t v3 = swift_allocObject(v2, 16LL, 7LL);
  v16[8] = v2;
  v16[9] = &protocol witness table for GeoRCHFlowFactoryImpl;
  v16[5] = v3;
  v16[10] = static DialogHelper.globals.getter(v3);
  unint64_t v4 = static AceService.currentAsync.getter(v17);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v4);
  uint64_t v5 = type metadata accessor for CATService();
  uint64_t v6 = swift_allocObject(v5, 40LL, 7LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v5);
  int v8 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
  *(void *)(v6 + 24) = [v8 bundleForClass:ObjCClassFromMetadata];
  *(void *)(v6 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v6 + 16) = 0;
  v17[10] = v6;
  uint64_t v9 = type metadata accessor for FlowSelector();
  uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
  outlined init with copy of FlowHelperImpl((uint64_t)v16, (uint64_t)v15);
  uint64_t v11 = specialized FlowSelector.init(with:)(v15, v10);
  outlined destroy of FlowHelperImpl(v16);
  *(void *)(v1 + 24) = v11;
  type metadata accessor for CATExecutor(0LL);
  uint64_t v12 = type metadata accessor for GeoFlowDelegatePlugin();
  id v13 = [v8 bundleForClass:swift_getObjCClassFromMetadata(v12)];
  static CATExecutor.registerBundle(bundle:)();

  return v1;
}

uint64_t GeoFlowDelegatePlugin.__allocating_init(with:)(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, 32LL, 7LL);
  type metadata accessor for OS_os_log();
  *(void *)(v3 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000015LL,  0x8000000000099AF0LL);
  *(void *)(v3 + 24) = a1;
  return v3;
}

uint64_t GeoFlowDelegatePlugin.init(with:)(uint64_t a1)
{
  *(void *)(v1 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000015LL,  0x8000000000099AF0LL);
  *(void *)(v1 + 24) = a1;
  return v1;
}

uint64_t GeoFlowDelegatePlugin.findFlowForX(parse:)@<X0>(uint8_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v384 = a2;
  uint64_t v387 = (uint8_t *)type metadata accessor for USOParse(0LL);
  uint64_t v368 = *((void *)v387 - 1);
  __chkstk_darwin();
  uint64_t v369 = (char *)&v357 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v388 = (void *)type metadata accessor for NLIntent(0LL);
  uint64_t v383 = *(v388 - 1);
  __chkstk_darwin();
  id v375 = (char *)&v357 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v381 = (char *)&v357 - v6;
  __chkstk_darwin();
  uint64_t v359 = (char *)&v357 - v7;
  __chkstk_darwin();
  uint64_t v360 = (char *)&v357 - v8;
  __chkstk_darwin();
  os_log_type_t v366 = (char *)&v357 - v9;
  __chkstk_darwin();
  uint64_t v372 = (char *)&v357 - v10;
  uint64_t v11 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v373 = *(void *)(v11 - 8);
  uint64_t v374 = v11;
  __chkstk_darwin();
  uint64_t v361 = (char *)&v357 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v370 = (char *)&v357 - v13;
  __chkstk_darwin();
  uint64_t v376 = (char *)&v357 - v14;
  uint64_t v15 = type metadata accessor for Parse(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  uint64_t v367 = (char *)&v357 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v362 = (char *)&v357 - v18;
  __chkstk_darwin();
  uint64_t v364 = (char *)&v357 - v19;
  __chkstk_darwin();
  id v363 = (char *)&v357 - v20;
  __chkstk_darwin();
  uint64_t v371 = (char *)&v357 - v21;
  __chkstk_darwin();
  uint64_t v379 = (char *)&v357 - v22;
  __chkstk_darwin();
  uint64_t v380 = (char *)&v357 - v23;
  __chkstk_darwin();
  uint64_t v377 = (char *)&v357 - v24;
  __chkstk_darwin();
  uint64_t v26 = (char *)&v357 - v25;
  __chkstk_darwin();
  uint64_t v28 = (char *)&v357 - v27;
  uint64_t v29 = __chkstk_darwin();
  unint64_t v31 = (char *)&v357 - v30;
  os_log_type_t v39 = static os_log_type_t.info.getter(v29, v32, v33, v34, v35, v36, v37, v38);
  uint64_t v382 = v2;
  uint64_t v40 = *(os_log_s **)(v2 + 16);
  uint64_t v385 = (void (*)(char *, char *, uint64_t))v16;
  os_log_type_t v386 = a1;
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  uint64_t v390 = v15;
  uint64_t v42 = v15;
  uint64_t v43 = v41;
  v41(v31, (char *)a1, v42);
  BOOL v44 = os_log_type_enabled(v40, v39);
  os_log_t v389 = v40;
  uint64_t v365 = v28;
  if (v44)
  {
    uint64_t v45 = swift_slowAlloc(12LL, -1LL);
    uint64_t v378 = v26;
    uint64_t v46 = v390;
    unint64_t v47 = (uint8_t *)v45;
    uint64_t v358 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 v393 = v358;
    *(_DWORD *)unint64_t v47 = 136315138;
    v43(v28, v31, v46);
    uint64_t v48 = String.init<A>(describing:)(v28, v46);
    unint64_t v50 = v49;
    unint64_t v391 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, (uint64_t *)&v393);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v391, v392);
    swift_bridgeObjectRelease(v50);
    uint64_t v51 = (uint64_t (**)(char *, uint64_t))v385;
    os_log_type_t v52 = v31;
    uint64_t v53 = (uint8_t *)*((void *)v385 + 1);
    ((void (*)(char *, uint64_t))v53)(v52, v46);
    _os_log_impl(&dword_0, v389, v39, "findFlowForX -- parse type: %s", v47, 0xCu);
    uint64_t v54 = v358;
    swift_arrayDestroy(v358, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v55 = v388;
    swift_slowDealloc(v54, -1LL, -1LL);
    unint64_t v56 = v47;
    id v57 = v387;
    uint64_t v26 = v378;
    swift_slowDealloc(v56, -1LL, -1LL);
    uint64_t v58 = v51;
  }

  else
  {
    uint64_t v58 = (uint64_t (**)(char *, uint64_t))v385;
    unint64_t v59 = v31;
    uint64_t v53 = (uint8_t *)*((void *)v385 + 1);
    ((void (*)(char *, uint64_t))v53)(v59, v390);
    id v57 = v387;
    uint64_t v55 = v388;
  }

  unint64_t v60 = v386;
  uint64_t v61 = v390;
  v43(v26, (char *)v386, v390);
  uint64_t v62 = v58[11](v26, v61);
  if ((_DWORD)v62 == enum case for Parse.NLv3IntentOnly(_:))
  {
    int v63 = v26;
    int v64 = v53;
    int v65 = v380;
    uint64_t v66 = v63;
    uint64_t v67 = v390;
    ((void (*)(char *))v43)(v380);
    v58[12](v65, v67);
    uint64_t v68 = v383;
    int v69 = v381;
    uint64_t v70 = (*(uint64_t (**)(char *, char *, void *))(v383 + 32))(v381, v65, v55);
    uint64_t v71 = (*(uint64_t (**)(uint64_t))(*(void *)v382 + 96LL))(v70);
    uint64_t v72 = (*(uint64_t (**)(char *))(*(void *)v71 + 112LL))(v69);
    uint64_t v73 = swift_release(v71);
    if (v72)
    {
      static FlowSearchResult.flow(_:)(v72);
      swift_release(v72);
      (*(void (**)(char *, void *))(v68 + 8))(v69, v55);
      return ((uint64_t (*)(char *, uint64_t))v64)(v66, v390);
    }

    else
    {
      uint64_t v387 = v64;
      uint64_t v109 = static os_log_type_t.error.getter(v73);
      uint64_t v110 = v375;
      (*(void (**)(char *, char *, void *))(v68 + 16))(v375, v69, v55);
      uint64_t v111 = v55;
      os_log_type_t v112 = v109;
      if (os_log_type_enabled(v389, (os_log_type_t)v109))
      {
        uint64_t v113 = v110;
        uint64_t v114 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v115 = swift_slowAlloc(32LL, -1LL);
        *(void *)&__int128 v393 = v115;
        *(_DWORD *)uint64_t v114 = 136315138;
        uint64_t v378 = v66;
        uint64_t v116 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type NLIntent and conformance NLIntent,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NLIntent,  (uint64_t)&protocol conformance descriptor for NLIntent);
        uint64_t v117 = v113;
        uint64_t v118 = dispatch thunk of CustomStringConvertible.description.getter(v55, v116);
        unint64_t v120 = v119;
        unint64_t v391 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, v119, (uint64_t *)&v393);
        int v69 = v381;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v391, v392);
        swift_bridgeObjectRelease(v120);
        uint64_t v121 = *(void (**)(char *, void *))(v383 + 8);
        uint64_t v122 = v111;
        v121(v117, v111);
        _os_log_impl( &dword_0,  v389,  v112,  "findFlowForX - flow should not be nil here, received nl intent %s",  v114,  0xCu);
        swift_arrayDestroy(v115, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v123 = v378;
        swift_slowDealloc(v115, -1LL, -1LL);
        swift_slowDealloc(v114, -1LL, -1LL);
      }

      else
      {
        uint64_t v121 = *(void (**)(char *, void *))(v68 + 8);
        v121(v110, v111);
        uint64_t v122 = v111;
        uint64_t v123 = v66;
      }

      uint64_t v177 = type metadata accessor for UnsupportedRequestFlow();
      uint64_t v178 = swift_allocObject(v177, 24LL, 7LL);
      type metadata accessor for OS_os_log();
      *(void *)(v178 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000016LL,  0x800000000009BB90LL);
      *(void *)&__int128 v393 = v178;
      uint64_t v179 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for UnsupportedRequestFlow,  (uint64_t)&protocol conformance descriptor for UnsupportedRequestFlow);
      uint64_t v180 = Flow.eraseToAnyFlow()(v177, v179);
      swift_release(v178);
      static FlowSearchResult.flow(_:)(v180);
      swift_release(v180);
      v121(v69, v122);
      return ((uint64_t (*)(char *, uint64_t))v387)(v123, v390);
    }
  }

  if ((_DWORD)v62 != enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    if ((_DWORD)v62 == enum case for Parse.directInvocation(_:))
    {
      uint64_t v99 = v58;
      uint64_t v100 = v377;
      uint64_t v101 = v390;
      uint64_t v385 = v43;
      v43(v377, v26, v390);
      v99[12](v100, v101);
      uint64_t v103 = v373;
      uint64_t v102 = v374;
      id v104 = *(uint64_t (**)(char *, char *, uint64_t))(v373 + 16);
      uint64_t v105 = v104(v376, v100, v374);
      uint64_t v106 = Parse.DirectInvocation.identifier.getter(v105);
      uint64_t v108 = v107;
      if (v106 == 0xD00000000000002CLL && v107 == 0x800000000009B750LL)
      {
        swift_bridgeObjectRelease(0x800000000009B750LL);
LABEL_33:
        uint64_t v182 = type metadata accessor for LocationSearchIntentBuilder();
        swift_allocObject(v182, 120LL, 7LL);
        uint64_t v183 = LocationSearchIntentBuilder.init()();
        uint64_t v184 = (*(uint64_t (**)(uint64_t))(*(void *)v183 + 392LL))(1LL);
        swift_release(v183);
        uint64_t v185 = (*(uint64_t (**)(uint64_t))(*(void *)v184 + 384LL))(6LL);
        uint64_t v186 = swift_release(v184);
        uint64_t v187 = v372;
        (*(void (**)(uint64_t))(*(void *)v185 + 456LL))(v186);
        uint64_t v188 = swift_release(v185);
        uint64_t v189 = (*(uint64_t (**)(uint64_t))(*(void *)v382 + 96LL))(v188);
        uint64_t v190 = (*(uint64_t (**)(char *))(*(void *)v189 + 112LL))(v187);
        uint64_t v191 = swift_release(v189);
        if (!v190)
        {
          uint64_t v387 = v53;
          uint64_t v214 = static os_log_type_t.error.getter(v191);
          uint64_t v215 = v383;
          uint64_t v216 = v366;
          char v217 = v55;
          (*(void (**)(char *, char *, void *))(v383 + 16))(v366, v187, v55);
          os_log_type_t v218 = v214;
          if (os_log_type_enabled(v389, (os_log_type_t)v214))
          {
            uint64_t v219 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v220 = swift_slowAlloc(32LL, -1LL);
            *(void *)&__int128 v393 = v220;
            *(_DWORD *)uint64_t v219 = 136315138;
            id v221 = v55;
            uint64_t v222 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type NLIntent and conformance NLIntent,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NLIntent,  (uint64_t)&protocol conformance descriptor for NLIntent);
            uint64_t v223 = dispatch thunk of CustomStringConvertible.description.getter(v55, v222);
            unint64_t v225 = v224;
            unint64_t v391 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v223, v224, (uint64_t *)&v393);
            uint64_t v103 = v373;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v391, v392);
            swift_bridgeObjectRelease(v225);
            uint64_t v226 = *(void (**)(char *, void *))(v383 + 8);
            v226(v216, v221);
            _os_log_impl( &dword_0,  v389,  v218,  "findFlowForX - flow should not be nil here, received nl intent %s",  v219,  0xCu);
            swift_arrayDestroy(v220, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v220, -1LL, -1LL);
            swift_slowDealloc(v219, -1LL, -1LL);
          }

          else
          {
            uint64_t v226 = *(void (**)(char *, void *))(v215 + 8);
            v226(v216, v217);
            id v221 = v217;
          }

          uint64_t v238 = type metadata accessor for UnsupportedRequestFlow();
          uint64_t v239 = swift_allocObject(v238, 24LL, 7LL);
          type metadata accessor for OS_os_log();
          *(void *)(v239 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000016LL,  0x800000000009BB90LL);
          *(void *)&__int128 v393 = v239;
          uint64_t v240 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for UnsupportedRequestFlow,  (uint64_t)&protocol conformance descriptor for UnsupportedRequestFlow);
          uint64_t v241 = Flow.eraseToAnyFlow()(v238, v240);
          swift_release(v239);
          static FlowSearchResult.flow(_:)(v241);
          swift_release(v241);
          v226(v372, v221);
          uint64_t v242 = *(void (**)(char *, uint64_t))(v103 + 8);
          uint64_t v243 = v374;
          v242(v376, v374);
          v242(v377, v243);
          return ((uint64_t (*)(char *, uint64_t))v387)(v26, v390);
        }

        static FlowSearchResult.flow(_:)(v190);
        swift_release(v190);
        (*(void (**)(char *, void *))(v383 + 8))(v187, v55);
        uint64_t v192 = *(void (**)(char *, uint64_t))(v103 + 8);
        v192(v376, v102);
        v192(v377, v102);
        return ((uint64_t (*)(char *, uint64_t))v53)(v26, v390);
      }

      char v181 = _stringCompareWithSmolCheck(_:_:expecting:)(v106, v107, 0xD00000000000002CLL, 0x800000000009B750LL, 0LL);
      swift_bridgeObjectRelease(v108);
      if ((v181 & 1) != 0) {
        goto LABEL_33;
      }
      unint64_t v227 = *(void (**)(char *, uint64_t))(v103 + 8);
      v227(v376, v102);
      uint64_t v228 = v104(v370, v377, v102);
      uint64_t v229 = Parse.DirectInvocation.identifier.getter(v228);
      uint64_t v231 = v230;
      if (v229 == 0xD00000000000002ALL && v230 == 0x800000000009B780LL)
      {
        swift_bridgeObjectRelease(0x800000000009B780LL);
LABEL_55:
        uint64_t v258 = type metadata accessor for RedirectToServerFlow();
        uint64_t v259 = v102;
        uint64_t v260 = swift_allocObject(v258, 24LL, 7LL);
        type metadata accessor for OS_os_log();
        *(void *)(v260 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000014LL,  0x800000000009B960LL);
        *(void *)&__int128 v393 = v260;
        uint64_t v261 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type RedirectToServerFlow and conformance RedirectToServerFlow,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RedirectToServerFlow,  (uint64_t)&protocol conformance descriptor for RedirectToServerFlow);
        uint64_t v262 = Flow.eraseToAnyFlow()(v258, v261);
        uint64_t v263 = swift_release(v260);
        uint64_t v271 = static os_log_type_t.info.getter(v263, v264, v265, v266, v267, v268, v269, v270);
        os_log(_:dso:log:_:_:)(v271, &dword_0, v389, "makeRedirectToServerFlow", 24LL, 2LL, _swiftEmptyArrayStorage);
        static FlowSearchResult.flow(_:)(v262);
        swift_release(v262);
        v227(v370, v259);
        v227(v377, v259);
        return ((uint64_t (*)(char *, uint64_t))v53)(v26, v390);
      }

      char v257 = _stringCompareWithSmolCheck(_:_:expecting:)(v229, v230, 0xD00000000000002ALL, 0x800000000009B780LL, 0LL);
      swift_bridgeObjectRelease(v231);
      if ((v257 & 1) != 0) {
        goto LABEL_55;
      }
      v227(v370, v102);
      id v298 = v361;
      uint64_t v299 = (*(uint64_t (**)(char *, char *, uint64_t))(v373 + 32))(v361, v377, v102);
      uint64_t v300 = Parse.DirectInvocation.identifier.getter(v299);
      uint64_t v302 = v301;
      if (v300 == 0xD000000000000033LL && v301 == 0x800000000009B7B0LL)
      {
        uint64_t v303 = swift_bridgeObjectRelease(0x800000000009B7B0LL);
        goto LABEL_68;
      }

      char v305 = _stringCompareWithSmolCheck(_:_:expecting:)(v300, v301, 0xD000000000000033LL, 0x800000000009B7B0LL, 0LL);
      uint64_t v303 = swift_bridgeObjectRelease(v302);
      if ((v305 & 1) != 0)
      {
LABEL_68:
        uint64_t v306 = Parse.DirectInvocation.userData.getter(v303);
        if (v306)
        {
          uint64_t v307 = v306;
          if (*(void *)(v306 + 16)
            && (unint64_t v308 = specialized __RawDictionaryStorage.find<A>(_:)(0x746E656469636E49LL, 0xEC00000065707954LL),
                (v309 & 1) != 0))
          {
            outlined init with copy of Any(*(void *)(v307 + 56) + 32 * v308, (uint64_t)&v393);
          }

          else
          {
            __int128 v393 = 0u;
            __int128 v394 = 0u;
          }

          swift_bridgeObjectRelease(v307);
          if (*((void *)&v394 + 1))
          {
            if ((swift_dynamicCast(&v391, &v393, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0
              && v391 <= 5)
            {
              unint64_t v310 = 0x40103020001uLL >> (8 * v391);
LABEL_80:
              uint64_t v311 = type metadata accessor for LocationSearchIntentBuilder();
              swift_allocObject(v311, 120LL, 7LL);
              uint64_t v312 = LocationSearchIntentBuilder.init()();
              uint64_t v313 = (*(uint64_t (**)(uint64_t))(*(void *)v312 + 392LL))(3LL);
              swift_release(v312);
              uint64_t v314 = (*(uint64_t (**)(uint64_t))(*(void *)v313 + 384LL))(5LL);
              swift_release(v313);
              uint64_t v315 = (*(uint64_t (**)(unint64_t))(*(void *)v314 + 400LL))(v310);
              uint64_t v316 = swift_release(v314);
              uint64_t v317 = v360;
              (*(void (**)(uint64_t))(*(void *)v315 + 456LL))(v316);
              uint64_t v318 = swift_release(v315);
              uint64_t v319 = (*(uint64_t (**)(uint64_t))(*(void *)v382 + 96LL))(v318);
              uint64_t v320 = (*(uint64_t (**)(char *))(*(void *)v319 + 112LL))(v317);
              uint64_t v321 = swift_release(v319);
              if (!v320)
              {
                uint64_t v387 = v53;
                uint64_t v322 = static os_log_type_t.error.getter(v321);
                uint64_t v323 = v383;
                uint64_t v324 = v359;
                uint64_t v325 = v55;
                (*(void (**)(char *, char *, void *))(v383 + 16))(v359, v317, v55);
                os_log_type_t v326 = v322;
                if (os_log_type_enabled(v389, (os_log_type_t)v322))
                {
                  unint64_t v327 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                  char v328 = v55;
                  uint64_t v329 = swift_slowAlloc(32LL, -1LL);
                  *(void *)&__int128 v393 = v329;
                  *(_DWORD *)unint64_t v327 = 136315138;
                  uint64_t v378 = v26;
                  uint64_t v330 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type NLIntent and conformance NLIntent,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NLIntent,  (uint64_t)&protocol conformance descriptor for NLIntent);
                  uint64_t v331 = dispatch thunk of CustomStringConvertible.description.getter(v55, v330);
                  unint64_t v333 = v332;
                  unint64_t v391 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v331, v332, (uint64_t *)&v393);
                  uint64_t v26 = v378;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v391, v392);
                  swift_bridgeObjectRelease(v333);
                  uint64_t v334 = *(void (**)(char *, void *))(v323 + 8);
                  v334(v359, v328);
                  _os_log_impl( &dword_0,  v389,  v326,  "findFlowForX - flow should not be nil here, received nl intent %s",  v327,  0xCu);
                  swift_arrayDestroy(v329, 1LL, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v329, -1LL, -1LL);
                  swift_slowDealloc(v327, -1LL, -1LL);
                }

                else
                {
                  uint64_t v334 = *(void (**)(char *, void *))(v323 + 8);
                  v334(v324, v325);
                  char v328 = v325;
                }

                uint64_t v353 = type metadata accessor for UnsupportedRequestFlow();
                uint64_t v354 = swift_allocObject(v353, 24LL, 7LL);
                type metadata accessor for OS_os_log();
                *(void *)(v354 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000016LL,  0x800000000009BB90LL);
                *(void *)&__int128 v393 = v354;
                uint64_t v355 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for UnsupportedRequestFlow,  (uint64_t)&protocol conformance descriptor for UnsupportedRequestFlow);
                uint64_t v356 = Flow.eraseToAnyFlow()(v353, v355);
                swift_release(v354);
                static FlowSearchResult.flow(_:)(v356);
                swift_release(v356);
                v334(v360, v328);
                v227(v361, v374);
                return ((uint64_t (*)(char *, uint64_t))v387)(v26, v390);
              }

              static FlowSearchResult.flow(_:)(v320);
              swift_release(v320);
              (*(void (**)(char *, void *))(v383 + 8))(v317, v55);
              v227(v361, v102);
              return ((uint64_t (*)(void, void))v53)(v26, v390);
            }

LABEL_79:
            unint64_t v310 = 1LL;
            goto LABEL_80;
          }
        }

        else
        {
          __int128 v393 = 0u;
          __int128 v394 = 0u;
        }

        outlined destroy of Any?((uint64_t)&v393);
        goto LABEL_79;
      }

      uint64_t v62 = ((uint64_t (*)(char *, uint64_t))v227)(v298, v102);
      uint64_t v43 = v385;
      unint64_t v60 = v386;
    }

    else
    {
      if ((_DWORD)v62 == enum case for Parse.pommesResponse(_:))
      {
        uint64_t v124 = v371;
        uint64_t v125 = v390;
        v43(v371, v26, v390);
        uint64_t v126 = v58[12](v124, v125);
        uint64_t v388 = *(void **)v124;
        os_log_type_t v134 = static os_log_type_t.info.getter(v126, v127, v128, v129, v130, v131, v132, v133);
        uint64_t v135 = os_log_type_enabled(v389, v134);
        if ((_DWORD)v135)
        {
          uint64_t v136 = v388;
          uint64_t v137 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v138 = swift_slowAlloc(32LL, -1LL);
          *(void *)&__int128 v393 = v138;
          uint64_t v378 = v26;
          *(_DWORD *)uint64_t v137 = 136315138;
          uint64_t v387 = v137 + 4;
          uint64_t v139 = v136;
          id v140 = [v139 description];
          uint64_t v141 = v53;
          uint64_t v142 = static String._unconditionallyBridgeFromObjectiveC(_:)(v140);
          unint64_t v144 = v143;

          uint64_t v145 = v142;
          uint64_t v53 = v141;
          unint64_t v391 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v145, v144, (uint64_t *)&v393);
          uint64_t v26 = v378;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v391, v392);

          swift_bridgeObjectRelease(v144);
          _os_log_impl(&dword_0, v389, v134, "findFlowForX - received POMMES input %s", v137, 0xCu);
          swift_arrayDestroy(v138, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v138, -1LL, -1LL);
          uint64_t v135 = swift_slowDealloc(v137, -1LL, -1LL);
        }

        uint64_t v146 = (*(uint64_t (**)(uint64_t))(*(void *)v382 + 96LL))(v135);
        uint64_t v147 = (*(uint64_t (**)(void *))(*(void *)v146 + 120LL))(v388);
        uint64_t v148 = swift_release(v146);
        if (v147)
        {
          uint64_t v149 = swift_retain_n(v147, 2LL);
          os_log_type_t v150 = static os_log_type_t.default.getter(v149);
          uint64_t v151 = v389;
          os_log_type_t v152 = v150;
          if (os_log_type_enabled(v389, v150))
          {
            uint64_t v153 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v154 = swift_slowAlloc(32LL, -1LL);
            uint64_t v378 = v26;
            uint64_t v155 = v154;
            *(void *)&__int128 v393 = v154;
            uint64_t v387 = v153;
            *(_DWORD *)uint64_t v153 = 136315138;
            os_log_type_t v386 = v153 + 4;
            unint64_t v391 = v147;
            uint64_t v156 = type metadata accessor for AnyFlow(0LL);
            uint64_t v157 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyFlow,  (uint64_t)&protocol conformance descriptor for AnyFlow);
            uint64_t v158 = dispatch thunk of CustomStringConvertible.description.getter(v156, v157);
            unint64_t v160 = v159;
            unint64_t v391 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v158, v159, (uint64_t *)&v393);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v391, v392);
            swift_release_n(v147, 2LL);
            swift_bridgeObjectRelease(v160);
            unint64_t v161 = v387;
            _os_log_impl(&dword_0, v151, v152, "POMMES flow: %s", v387, 0xCu);
            swift_arrayDestroy(v155, 1LL, (char *)&type metadata for Any + 8);
            uint64_t v162 = v155;
            uint64_t v26 = v378;
            swift_slowDealloc(v162, -1LL, -1LL);
            swift_slowDealloc(v161, -1LL, -1LL);
          }

          else
          {
            swift_release_n(v147, 2LL);
          }

          static FlowSearchResult.flow(_:)(v147);

          uint64_t v237 = v147;
          goto LABEL_90;
        }

        uint64_t v232 = static os_log_type_t.error.getter(v148);
        os_log(_:dso:log:_:_:)( v232,  &dword_0,  v389,  "findFlowForX - could not make flow from POMMES input",  52LL,  2LL,  _swiftEmptyArrayStorage);
        uint64_t v233 = type metadata accessor for UnsupportedRequestFlow();
        uint64_t v234 = swift_allocObject(v233, 24LL, 7LL);
        type metadata accessor for OS_os_log();
        *(void *)(v234 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000016LL,  0x800000000009BB90LL);
        *(void *)&__int128 v393 = v234;
        uint64_t v235 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for UnsupportedRequestFlow,  (uint64_t)&protocol conformance descriptor for UnsupportedRequestFlow);
        uint64_t v236 = Flow.eraseToAnyFlow()(v233, v235);
        swift_release(v234);
        static FlowSearchResult.flow(_:)(v236);

LABEL_89:
        uint64_t v237 = v236;
LABEL_90:
        swift_release(v237);
        return ((uint64_t (*)(void, void))v53)(v26, v390);
      }

      if ((_DWORD)v62 == enum case for Parse.uso(_:))
      {
        id v193 = v363;
        uint64_t v194 = v390;
        v43(v363, v26, v390);
        v58[12](v193, v194);
        (*(void (**)(char *, char *, uint8_t *))(v368 + 32))(v369, v193, v57);
        uint64_t v195 = specialized static GeoParse.getUsoTask(usoParse:)();
        uint64_t v196 = v364;
        if (v195)
        {
          uint64_t v197 = v195;
          GeoFlowDelegatePlugin::OnDeviceExperience v198 = UsoTask.getGeoTaskType()();
          swift_release(v197);
          __asm { BR              X10 }
        }

        os_log_type_t v244 = static os_log_type_t.default.getter(0LL);
        v43(v196, (char *)v60, v390);
        os_log_type_t v245 = v244;
        BOOL v246 = os_log_type_enabled(v389, v244);
        uint64_t v378 = v26;
        if (v246)
        {
          uint64_t v247 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v248 = (void *)swift_slowAlloc(32LL, -1LL);
          uint64_t v385 = v43;
          uint64_t v388 = v248;
          *(void *)&__int128 v393 = v248;
          *(_DWORD *)uint64_t v247 = 136315138;
          uint64_t v249 = v365;
          uint64_t v250 = v390;
          v385(v365, v196, v390);
          uint64_t v251 = String.init<A>(describing:)(v249, v250);
          unint64_t v253 = v252;
          unint64_t v391 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v251, v252, (uint64_t *)&v393);
          uint64_t v254 = v389;
          unint64_t v60 = v386;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v391, v392);
          swift_bridgeObjectRelease(v253);
          ((void (*)(char *, uint64_t))v53)(v196, v250);
          _os_log_impl(&dword_0, v254, v245, "uso parse does not conform to any geo experiences:  %s", v247, 0xCu);
          uint64_t v255 = v388;
          swift_arrayDestroy(v388, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v43 = v385;
          swift_slowDealloc(v255, -1LL, -1LL);
          uint64_t v256 = swift_slowDealloc(v247, -1LL, -1LL);
        }

        else
        {
          uint64_t v256 = ((uint64_t (*)(char *, uint64_t))v53)(v196, v390);
        }

        os_log_type_t v283 = static os_log_type_t.default.getter(v256);
        __int128 v284 = v362;
        v43(v362, (char *)v60, v390);
        os_log_type_t v285 = v283;
        if (os_log_type_enabled(v389, v283))
        {
          id v286 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v287 = swift_slowAlloc(32LL, -1LL);
          uint64_t v288 = v43;
          uint64_t v289 = v287;
          *(void *)&__int128 v393 = v287;
          *(_DWORD *)id v286 = 136315138;
          uint64_t v290 = v365;
          uint64_t v291 = v284;
          uint64_t v292 = v284;
          uint64_t v293 = v390;
          v288(v365, v291, v390);
          uint64_t v294 = String.init<A>(describing:)(v290, v293);
          unint64_t v296 = v295;
          unint64_t v391 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v294, v295, (uint64_t *)&v393);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v391, v392);
          swift_bridgeObjectRelease(v296);
          ((void (*)(char *, uint64_t))v53)(v292, v293);
          _os_log_impl(&dword_0, v389, v285, "findFlowForX - not available %s", v286, 0xCu);
          swift_arrayDestroy(v289, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v289, -1LL, -1LL);
          uint64_t v297 = swift_slowDealloc(v286, -1LL, -1LL);
        }

        else
        {
          uint64_t v297 = ((uint64_t (*)(char *, uint64_t))v53)(v284, v390);
        }

        uint64_t v26 = v378;
        id v304 = v387;
        static FlowSearchResult.noFlow.getter(v297);
        (*(void (**)(char *, uint8_t *))(v368 + 8))(v369, v304);
        return ((uint64_t (*)(void, void))v53)(v26, v390);
      }
    }

    os_log_type_t v335 = static os_log_type_t.error.getter(v62);
    uint64_t v336 = v367;
    v43(v367, (char *)v60, v390);
    os_log_type_t v337 = v335;
    if (os_log_type_enabled(v389, v335))
    {
      unint64_t v338 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v339 = swift_slowAlloc(32LL, -1LL);
      uint64_t v340 = v43;
      uint64_t v341 = v339;
      *(void *)&__int128 v393 = v339;
      *(_DWORD *)unint64_t v338 = 136315138;
      uint64_t v342 = v365;
      uint64_t v343 = v336;
      uint64_t v344 = v390;
      v340(v365, v343, v390);
      uint64_t v345 = String.init<A>(describing:)(v342, v344);
      uint64_t v346 = v26;
      unint64_t v348 = v347;
      unint64_t v391 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v345, v347, (uint64_t *)&v393);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v391, v392);
      unint64_t v349 = v348;
      uint64_t v26 = v346;
      swift_bridgeObjectRelease(v349);
      ((void (*)(char *, uint64_t))v53)(v367, v344);
      _os_log_impl(&dword_0, v389, v337, "findFlowForX - flow should not be nil here, received parse %s", v338, 0xCu);
      swift_arrayDestroy(v341, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v341, -1LL, -1LL);
      swift_slowDealloc(v338, -1LL, -1LL);
    }

    else
    {
      ((void (*)(char *, uint64_t))v53)(v336, v390);
    }

    uint64_t v350 = type metadata accessor for UnsupportedRequestFlow();
    uint64_t v351 = swift_allocObject(v350, 24LL, 7LL);
    type metadata accessor for OS_os_log();
    *(void *)(v351 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000016LL,  0x800000000009BB90LL);
    *(void *)&__int128 v393 = v351;
    uint64_t v352 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for UnsupportedRequestFlow,  (uint64_t)&protocol conformance descriptor for UnsupportedRequestFlow);
    uint64_t v236 = Flow.eraseToAnyFlow()(v350, v352);
    swift_release(v351);
    static FlowSearchResult.flow(_:)(v236);
    goto LABEL_89;
  }

  uint64_t v75 = v53;
  uint64_t v76 = v58;
  char v77 = v379;
  uint64_t v78 = v390;
  v43(v379, v26, v390);
  v76[12](v77, v78);
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
  unint64_t v80 = *(void *)&v77[*(int *)(v79 + 48)];
  os_log_type_t v81 = static os_log_type_t.default.getter(v79);
  uint64_t v82 = os_log_type_enabled(v389, v81);
  if ((_DWORD)v82)
  {
    unint64_t v83 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v83 = 0;
    _os_log_impl(&dword_0, v389, v81, "findFlowForX - NLv3PlusServerConversion", v83, 2u);
    uint64_t v82 = swift_slowDealloc(v83, -1LL, -1LL);
  }

  uint64_t v84 = (void *)Parse.ServerConversion.siriKitIntent.getter(v82);
  uint64_t v85 = objc_opt_self(&OBJC_CLASS___INRetrieveParkingLocationIntent);
  uint64_t v86 = swift_dynamicCastObjCClass(v84, v85);

  if (v86)
  {
    uint64_t v88 = v383;
    uint64_t v89 = v26;
    if (one-time initialization token for instance != -1) {
      uint64_t v87 = swift_once(&one-time initialization token for instance, one-time initialization function for instance);
    }
    uint64_t v90 = Parse.ServerConversion.siriKitIntent.getter(v87);
    uint64_t v91 = objc_opt_self(&OBJC_CLASS___INRetrieveParkingLocationIntent);
    uint64_t v92 = swift_dynamicCastObjCClassUnconditional(v90, v91, 0LL, 0LL, 0LL);
    ParkingLocationBaseuint64_t Flow = type metadata accessor for RetrieveParkingLocationBaseFlow(0LL);
    uint64_t v94 = swift_allocObject( ParkingLocationBaseFlow,  *(unsigned int *)(ParkingLocationBaseFlow + 48),  *(unsigned __int16 *)(ParkingLocationBaseFlow + 52));
    *((void *)&v394 + 1) = &type metadata for FlowHelperImpl;
    uint64_t v395 = &protocol witness table for FlowHelperImpl;
    *(void *)&__int128 v393 = swift_allocObject(&unk_BB310, 192LL, 7LL);
    outlined init with copy of FlowHelperImpl((uint64_t)static FlowHelperImpl.instance, v393 + 16);
    type metadata accessor for OS_os_log();
    *(void *)(v94 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001FLL,  0x800000000009BB20LL);
    *(_BYTE *)(v94 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_isPOMMES) = 0;
    outlined init with take of CATType( &v393,  v94 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowHelper);
    uint64_t v95 = v94 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowState;
    *(void *)(v94 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowState) = v92;
    uint64_t ParkingLocationBase = type metadata accessor for RetrieveParkingLocationBaseFlow.State(0LL);
    swift_storeEnumTagMultiPayload(v95, ParkingLocationBase, 0LL);
    *(void *)&__int128 v393 = v94;
    uint64_t v97 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type RetrieveParkingLocationBaseFlow and conformance RetrieveParkingLocationBaseFlow,  255LL,  type metadata accessor for RetrieveParkingLocationBaseFlow,  (uint64_t)&protocol conformance descriptor for RetrieveParkingLocationBaseFlow);
    uint64_t v98 = Flow.eraseToAnyFlow()(ParkingLocationBaseFlow, v97);
    swift_release(v94);
    static FlowSearchResult.flow(_:)(v98);
    swift_release(v80);
    swift_release(v98);
    (*(void (**)(char *, void *))(v88 + 8))(v379, v388);
    return ((uint64_t (*)(char *, uint64_t))v75)(v89, v390);
  }

  uint64_t v163 = (void *)Parse.ServerConversion.siriKitIntent.getter(v87);
  uint64_t v164 = objc_opt_self(&OBJC_CLASS___INDeleteParkingLocationIntent);
  uint64_t v165 = swift_dynamicCastObjCClass(v163, v164);

  if (v165)
  {
    uint64_t v167 = v26;
    if (one-time initialization token for instance != -1) {
      uint64_t v166 = swift_once(&one-time initialization token for instance, one-time initialization function for instance);
    }
    uint64_t v168 = Parse.ServerConversion.siriKitIntent.getter(v166);
    uint64_t v169 = objc_opt_self(&OBJC_CLASS___INDeleteParkingLocationIntent);
    uint64_t v170 = swift_dynamicCastObjCClassUnconditional(v168, v169, 0LL, 0LL, 0LL);
    uint64_t v171 = type metadata accessor for DeleteParkingLocationBaseFlow(0LL);
    uint64_t v172 = swift_allocObject(v171, *(unsigned int *)(v171 + 48), *(unsigned __int16 *)(v171 + 52));
    *((void *)&v394 + 1) = &type metadata for FlowHelperImpl;
    uint64_t v395 = &protocol witness table for FlowHelperImpl;
    *(void *)&__int128 v393 = swift_allocObject(&unk_BB310, 192LL, 7LL);
    outlined init with copy of FlowHelperImpl((uint64_t)static FlowHelperImpl.instance, v393 + 16);
    type metadata accessor for OS_os_log();
    *(void *)(v172 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001DLL,  0x800000000009BA30LL);
    *(_BYTE *)(v172 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_isPOMMES) = 0;
    outlined init with take of CATType( &v393,  v172 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowHelper);
    uint64_t v173 = v172 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowState;
    *(void *)(v172 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowState) = v170;
    uint64_t v174 = type metadata accessor for DeleteParkingLocationBaseFlow.State(0LL);
    swift_storeEnumTagMultiPayload(v173, v174, 0LL);
    *(void *)&__int128 v393 = v172;
    uint64_t v175 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type DeleteParkingLocationBaseFlow and conformance DeleteParkingLocationBaseFlow,  255LL,  type metadata accessor for DeleteParkingLocationBaseFlow,  (uint64_t)&protocol conformance descriptor for DeleteParkingLocationBaseFlow);
    uint64_t v176 = Flow.eraseToAnyFlow()(v171, v175);
    swift_release(v172);
    static FlowSearchResult.flow(_:)(v176);
    swift_release(v80);
    swift_release(v176);
    (*(void (**)(char *, void *))(v383 + 8))(v379, v388);
    uint64_t v26 = v167;
    return ((uint64_t (*)(void, void))v53)(v26, v390);
  }

  uint64_t v199 = (void *)Parse.ServerConversion.siriKitIntent.getter(v166);
  uint64_t v200 = objc_opt_self(&OBJC_CLASS___INSaveParkingLocationIntent);
  uint64_t v201 = swift_dynamicCastObjCClass(v199, v200);

  if (!v201)
  {
    os_log_type_t v272 = static os_log_type_t.error.getter(v202);
    if (os_log_type_enabled(v389, v272))
    {
      swift_retain_n(v80, 2LL);
      uint64_t v378 = v26;
      os_log_type_t v273 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v274 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v393 = v274;
      *(_DWORD *)os_log_type_t v273 = 136315138;
      uint64_t v387 = v273 + 4;
      unint64_t v391 = v80;
      uint64_t v275 = type metadata accessor for Parse.ServerConversion(0LL);
      swift_retain(v80);
      uint64_t v276 = String.init<A>(describing:)(&v391, v275);
      unint64_t v278 = v277;
      unint64_t v391 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v276, v277, (uint64_t *)&v393);
      uint64_t v26 = v378;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v391, v392);
      swift_release_n(v80, 2LL);
      swift_bridgeObjectRelease(v278);
      _os_log_impl( &dword_0,  v389,  v272,  "findFlowForX - flow should not be nil here, received serverConversion %s",  v273,  0xCu);
      swift_arrayDestroy(v274, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v274, -1LL, -1LL);
      swift_slowDealloc(v273, -1LL, -1LL);
    }

    uint64_t v279 = type metadata accessor for UnsupportedRequestFlow();
    uint64_t v280 = swift_allocObject(v279, 24LL, 7LL);
    type metadata accessor for OS_os_log();
    *(void *)(v280 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000016LL,  0x800000000009BB90LL);
    *(void *)&__int128 v393 = v280;
    uint64_t v281 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for UnsupportedRequestFlow,  (uint64_t)&protocol conformance descriptor for UnsupportedRequestFlow);
    uint64_t v282 = Flow.eraseToAnyFlow()(v279, v281);
    swift_release(v280);
    static FlowSearchResult.flow(_:)(v282);
    swift_release(v80);
    swift_release(v282);
    (*(void (**)(char *, void *))(v383 + 8))(v379, v388);
    return ((uint64_t (*)(void, void))v53)(v26, v390);
  }

  uint64_t v203 = v53;
  uint64_t v204 = v26;
  if (one-time initialization token for instance != -1) {
    uint64_t v202 = swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  uint64_t v205 = Parse.ServerConversion.siriKitIntent.getter(v202);
  uint64_t v206 = objc_opt_self(&OBJC_CLASS___INSaveParkingLocationIntent);
  uint64_t v207 = swift_dynamicCastObjCClassUnconditional(v205, v206, 0LL, 0LL, 0LL);
  uint64_t v208 = type metadata accessor for SaveParkingLocationBaseFlow(0LL);
  uint64_t v209 = swift_allocObject(v208, *(unsigned int *)(v208 + 48), *(unsigned __int16 *)(v208 + 52));
  *((void *)&v394 + 1) = &type metadata for FlowHelperImpl;
  uint64_t v395 = &protocol witness table for FlowHelperImpl;
  *(void *)&__int128 v393 = swift_allocObject(&unk_BB310, 192LL, 7LL);
  outlined init with copy of FlowHelperImpl((uint64_t)static FlowHelperImpl.instance, v393 + 16);
  type metadata accessor for OS_os_log();
  *(void *)(v209 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001BLL,  0x800000000009B940LL);
  *(_BYTE *)(v209 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_isPOMMES) = 0;
  outlined init with take of CATType( &v393,  v209 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowHelper);
  uint64_t v210 = v209 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowState;
  *(void *)(v209 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowState) = v207;
  uint64_t v211 = type metadata accessor for SaveParkingLocationBaseFlow.State(0LL);
  swift_storeEnumTagMultiPayload(v210, v211, 0LL);
  *(void *)&__int128 v393 = v209;
  uint64_t v212 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type SaveParkingLocationBaseFlow and conformance SaveParkingLocationBaseFlow,  255LL,  type metadata accessor for SaveParkingLocationBaseFlow,  (uint64_t)&protocol conformance descriptor for SaveParkingLocationBaseFlow);
  uint64_t v213 = Flow.eraseToAnyFlow()(v208, v212);
  swift_release(v209);
  static FlowSearchResult.flow(_:)(v213);
  swift_release(v80);
  swift_release(v213);
  (*(void (**)(char *, void *))(v383 + 8))(v379, v388);
  return ((uint64_t (*)(char *, uint64_t))v203)(v204, v390);
}

uint64_t GeoFlowDelegatePlugin.deinit()
{
  swift_release(*(void *)(v0 + 24));
  return v0;
}

uint64_t GeoFlowDelegatePlugin.__deallocating_deinit()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t protocol witness for FlowPluginExtended.findFlowForX(parse:) in conformance GeoFlowDelegatePlugin()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136LL))();
}

uint64_t protocol witness for FlowPlugin.init() in conformance GeoFlowDelegatePlugin@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 120))();
  *a1 = result;
  return result;
}

uint64_t specialized FlowSelector.init(with:)(_OWORD *a1, uint64_t a2)
{
  int v65 = &type metadata for FlowHelperImpl;
  uint64_t v66 = &protocol witness table for FlowHelperImpl;
  uint64_t v4 = (_OWORD *)swift_allocObject(&unk_BB310, 192LL, 7LL);
  *(void *)&__int128 v64 = v4;
  __int128 v5 = a1[9];
  void v4[9] = a1[8];
  v4[10] = v5;
  v4[11] = a1[10];
  __int128 v6 = a1[5];
  v4[5] = a1[4];
  v4[6] = v6;
  __int128 v7 = a1[7];
  void v4[7] = a1[6];
  void v4[8] = v7;
  __int128 v8 = a1[1];
  v4[1] = *a1;
  void v4[2] = v8;
  __int128 v9 = a1[3];
  void v4[3] = a1[2];
  void v4[4] = v9;
  type metadata accessor for OS_os_log();
  uint64_t v50 = a2;
  *(void *)(a2 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x656C6553776F6C46LL,  0xEC000000726F7463LL);
  __int128 v62 = xmmword_97C80;
  outlined init with copy of DeviceState((uint64_t)&v64, (uint64_t)v61);
  uint64_t v10 = swift_allocObject(&unk_BB3D8, 56LL, 7LL);
  outlined init with take of CATType(v61, v10 + 16);
  uint64_t v11 = swift_allocObject(&unk_BB400, 32LL, 7LL);
  *(void *)(v11 + 16) = partial apply for closure #1 in FlowSelector.init(with:);
  *(void *)(v11 + 24) = v10;
  v63[0] = &outlined read-only object #0 of specialized FlowSelector.init(with:);
  v63[1] = &outlined read-only object #0 of static LocationSearchIntent.LocationSearchNounValue.allCases.getter;
  _OWORD v63[2] = _s21GeoFlowDelegatePlugin20LocationSearchIntentC07SiriKitB003AnyB0CSgIeggo_AcGIegnr_TRTA_0;
  v63[3] = v11;
  outlined init with copy of DeviceState((uint64_t)&v64, (uint64_t)v60);
  uint64_t v12 = swift_allocObject(&unk_BB428, 56LL, 7LL);
  outlined init with take of CATType(v60, v12 + 16);
  uint64_t v13 = swift_allocObject(&unk_BB450, 32LL, 7LL);
  *(void *)(v13 + 16) = _s21GeoFlowDelegatePlugin0B8SelectorC4withAcA0B6Helper_p_tcfc07SiriKitB003AnyB0CSgAA20LocationSearchIntentCcfU0_TA_0;
  *(void *)(v13 + 24) = v12;
  v63[4] = &outlined read-only object #1 of specialized FlowSelector.init(with:);
  v63[5] = &outlined read-only object #0 of static LocationSearchIntent.LocationSearchNounValue.allCases.getter;
  v63[6] = thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)partial apply;
  v63[7] = v13;
  outlined init with copy of DeviceState((uint64_t)&v64, (uint64_t)v59);
  uint64_t v14 = swift_allocObject(&unk_BB478, 56LL, 7LL);
  outlined init with take of CATType(v59, v14 + 16);
  uint64_t v15 = swift_allocObject(&unk_BB4A0, 32LL, 7LL);
  *(void *)(v15 + 16) = _s21GeoFlowDelegatePlugin0B8SelectorC4withAcA0B6Helper_p_tcfc07SiriKitB003AnyB0CSgAA20LocationSearchIntentCcfU1_TA_0;
  *(void *)(v15 + 24) = v14;
  v63[8] = &outlined read-only object #2 of specialized FlowSelector.init(with:);
  v63[9] = &outlined read-only object #0 of static LocationSearchIntent.LocationSearchNounValue.allCases.getter;
  v63[10] = thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)partial apply;
  v63[11] = v15;
  outlined init with copy of DeviceState((uint64_t)&v64, (uint64_t)v58);
  uint64_t v16 = swift_allocObject(&unk_BB4C8, 56LL, 7LL);
  outlined init with take of CATType(v58, v16 + 16);
  uint64_t v17 = swift_allocObject(&unk_BB4F0, 32LL, 7LL);
  *(void *)(v17 + 16) = partial apply for closure #4 in FlowSelector.init(with:);
  *(void *)(v17 + 24) = v16;
  v63[12] = &outlined read-only object #3 of specialized FlowSelector.init(with:);
  v63[13] = &outlined read-only object #4 of specialized FlowSelector.init(with:);
  v63[14] = thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)partial apply;
  v63[15] = v17;
  uint64_t v18 = (void *)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
  unint64_t v19 = 0LL;
  while (1)
  {
    unint64_t v51 = v19;
    uint64_t v20 = &v63[4 * v19];
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v23 = v20[3];
    uint64_t v25 = swift_allocObject(&unk_BB518, 32LL, 7LL);
    *(void *)(v25 + 16) = v24;
    *(void *)(v25 + 24) = v23;
    uint64_t v54 = *(void *)(v21 + 16);
    if (v54) {
      break;
    }
    swift_retain(v23);
    swift_release(v25);
LABEL_3:
    unint64_t v19 = v51 + 1;
    if (v51 == 3) {
      goto LABEL_28;
    }
  }

  uint64_t v56 = *(void *)(v22 + 16);
  uint64_t v53 = v21 + 32;
  swift_bridgeObjectRetain_n(v21, 2LL);
  swift_retain(v23);
  swift_bridgeObjectRetain(v22);
  unint64_t v26 = 0LL;
  uint64_t v52 = v21;
  while (1)
  {
    if (v26 >= *(void *)(v21 + 16))
    {
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for FlowSelector.FlowSelectorKey);
      __break(1u);
      return result;
    }

    if (v56) {
      break;
    }
LABEL_8:
    if (++v26 == v54)
    {
      swift_release(v25);
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease_n(v21, 2LL);
      goto LABEL_3;
    }
  }

  unint64_t v55 = v26;
  int v57 = *(unsigned __int8 *)(v53 + v26);
  swift_bridgeObjectRetain(v22);
  uint64_t v27 = 0LL;
  while (1)
  {
    uint64_t v29 = v22;
    int v30 = *(unsigned __int8 *)(v22 + v27 + 32);
    uint64_t v31 = swift_allocObject(&unk_BB540, 32LL, 7LL);
    *(void *)(v31 + 16) = _s21GeoFlowDelegatePlugin20LocationSearchIntentC07SiriKitB003AnyB0CSgIegnr_AcGIeggo_TRTA_0;
    *(void *)(v31 + 24) = v25;
    uint64_t v32 = v25;
    swift_retain(v25);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    *(void *)&v61[0] = v18;
    unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v57 | (v30 << 8));
    uint64_t v36 = v18[2];
    BOOL v37 = (v34 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      break;
    }
    char v39 = v34;
    if (v18[3] >= v38)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v18 = *(void **)&v61[0];
        if ((v34 & 1) != 0) {
          goto LABEL_12;
        }
      }

      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v18 = *(void **)&v61[0];
        if ((v39 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v38,  isUniquelyReferenced_nonNull_native);
      unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v57 | (v30 << 8));
      if ((v39 & 1) != (v41 & 1)) {
        goto LABEL_31;
      }
      unint64_t v35 = v40;
      uint64_t v18 = *(void **)&v61[0];
      if ((v39 & 1) != 0)
      {
LABEL_12:
        uint64_t v28 = (void *)(v18[7] + 16 * v35);
        swift_release(v28[1]);
        *uint64_t v28 = thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)partial apply;
        v28[1] = v31;
        goto LABEL_13;
      }
    }

    v18[(v35 >> 6) + 8] |= 1LL << v35;
    uint64_t v42 = (_BYTE *)(v18[6] + 2 * v35);
    *uint64_t v42 = v57;
    v42[1] = v30;
    uint64_t v43 = (void *)(v18[7] + 16 * v35);
    *uint64_t v43 = thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)partial apply;
    v43[1] = v31;
    uint64_t v44 = v18[2];
    BOOL v45 = __OFADD__(v44, 1LL);
    uint64_t v46 = v44 + 1;
    if (v45) {
      goto LABEL_27;
    }
    v18[2] = v46;
LABEL_13:
    ++v27;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v22 = v29;
    uint64_t v25 = v32;
    if (v56 == v27)
    {
      swift_bridgeObjectRelease(v29);
      uint64_t v21 = v52;
      unint64_t v26 = v55;
      goto LABEL_8;
    }
  }

  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  uint64_t v47 = v62;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([LocationSearchIntent.LocationSearchVerbValue], [LocationSearchIntent.LocationSearchNounValue], ()));
  swift_arrayDestroy(v63, v47, v48);
  *(void *)(v50 + 24) = v18;
  outlined init with take of CATType(&v64, v50 + 32);
  return v50;
}

uint64_t specialized AnswerETAFlow.init(with:checkNavigation:)( _OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[3] = &type metadata for FlowHelperImpl;
  v21[4] = &protocol witness table for FlowHelperImpl;
  __int128 v8 = (_OWORD *)swift_allocObject(&unk_BB310, 192LL, 7LL);
  v21[0] = v8;
  __int128 v9 = a1[9];
  void v8[9] = a1[8];
  v8[10] = v9;
  v8[11] = a1[10];
  __int128 v10 = a1[5];
  v8[5] = a1[4];
  v8[6] = v10;
  __int128 v11 = a1[7];
  v8[7] = a1[6];
  v8[8] = v11;
  __int128 v12 = a1[1];
  v8[1] = *a1;
  _OWORD v8[2] = v12;
  __int128 v13 = a1[3];
  _OWORD v8[3] = a1[2];
  v8[4] = v13;
  type metadata accessor for OS_os_log();
  *(void *)(a4 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x5445726577736E41LL,  0xED0000776F6C4641LL);
  uint64_t v14 = type metadata accessor for CATService();
  uint64_t v15 = swift_allocObject(v14, 40LL, 7LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v14);
  *(void *)(v15 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  *(void *)(v15 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v15 + 16) = 0;
  *(_BYTE *)(a4 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  *(void *)(a4 + 24) = v15;
  *(void *)(a4 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0LL;
  *(void *)(a4 + 88) = a2;
  *(void *)(a4 + 96) = a3;
  outlined init with copy of DeviceState((uint64_t)v21, a4 + 40);
  uint64_t v17 = type metadata accessor for DialogDuration.Builder(0LL);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  uint64_t v18 = DialogDuration.Builder.init()();
  *(void *)(a4 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v18;
  uint64_t v19 = static os_log_type_t.default.getter(v18);
  os_log(_:dso:log:_:_:)( v19,  &dword_0,  *(void *)(a4 + 16),  "AnswerETAFlow init with prechecks",  33LL,  2LL,  _swiftEmptyArrayStorage);
  __swift_destroy_boxed_opaque_existential_0Tm(v21);
  return a4;
}

void *specialized EndNavigationFlow.init(with:checkNavigation:)( _OWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  v20[3] = &type metadata for FlowHelperImpl;
  _OWORD v20[4] = &protocol witness table for FlowHelperImpl;
  __int128 v8 = (_OWORD *)swift_allocObject(&unk_BB310, 192LL, 7LL);
  v20[0] = v8;
  __int128 v9 = a1[9];
  void v8[9] = a1[8];
  v8[10] = v9;
  v8[11] = a1[10];
  __int128 v10 = a1[5];
  v8[5] = a1[4];
  v8[6] = v10;
  __int128 v11 = a1[7];
  v8[7] = a1[6];
  v8[8] = v11;
  __int128 v12 = a1[1];
  v8[1] = *a1;
  _OWORD v8[2] = v12;
  __int128 v13 = a1[3];
  _OWORD v8[3] = a1[2];
  v8[4] = v13;
  type metadata accessor for OS_os_log();
  a4[2] = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000011LL,  0x800000000009BB40LL);
  uint64_t v14 = type metadata accessor for CATService();
  uint64_t v15 = swift_allocObject(v14, 40LL, 7LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v14);
  *(void *)(v15 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  *(void *)(v15 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v15 + 16) = 0;
  a4[3] = v15;
  a4[4] = 0LL;
  a4[10] = a2;
  a4[11] = a3;
  uint64_t v17 = outlined init with copy of DeviceState((uint64_t)v20, (uint64_t)(a4 + 5));
  uint64_t v18 = static os_log_type_t.default.getter(v17);
  os_log(_:dso:log:_:_:)( v18,  &dword_0,  a4[2],  "EndNavigationFlow init with prechecks",  37LL,  2LL,  _swiftEmptyArrayStorage);
  __swift_destroy_boxed_opaque_existential_0Tm(v20);
  return a4;
}

uint64_t specialized AnswerAltitudeFlow.init(with:)(_OWORD *a1, uint64_t a2)
{
  v16[3] = &type metadata for FlowHelperImpl;
  v16[4] = &protocol witness table for FlowHelperImpl;
  uint64_t v4 = (_OWORD *)swift_allocObject(&unk_BB310, 192LL, 7LL);
  v16[0] = v4;
  __int128 v5 = a1[9];
  void v4[9] = a1[8];
  v4[10] = v5;
  v4[11] = a1[10];
  __int128 v6 = a1[5];
  v4[5] = a1[4];
  v4[6] = v6;
  __int128 v7 = a1[7];
  void v4[7] = a1[6];
  void v4[8] = v7;
  __int128 v8 = a1[1];
  v4[1] = *a1;
  void v4[2] = v8;
  __int128 v9 = a1[3];
  void v4[3] = a1[2];
  void v4[4] = v9;
  type metadata accessor for OS_os_log();
  *(void *)(a2 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000012LL,  0x800000000009BA80LL);
  uint64_t v10 = type metadata accessor for CATService();
  uint64_t v11 = swift_allocObject(v10, 40LL, 7LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v10);
  *(void *)(v11 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  *(void *)(v11 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v11 + 16) = 0;
  *(void *)(a2 + 24) = v11;
  *(void *)(a2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2LL;
  *(_BYTE *)(a2 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 2;
  uint64_t v13 = outlined init with copy of DeviceState((uint64_t)v16, a2 + 48);
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  os_log(_:dso:log:_:_:)( v14,  &dword_0,  *(void *)(a2 + 16),  "AnswerAltitudeFlow init with fetch altitude",  43LL,  2LL,  _swiftEmptyArrayStorage);
  __swift_destroy_boxed_opaque_existential_0Tm(v16);
  return a2;
}

unint64_t specialized GeoDirectInvocations.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of GeoDirectInvocations.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t type metadata accessor for GeoFlowDelegatePlugin()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin21GeoFlowDelegatePlugin);
}

uint64_t sub_6861C()
{
  return swift_deallocObject(v0, 192LL, 7LL);
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type GeoDirectInvocations and conformance GeoDirectInvocations()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDirectInvocations and conformance GeoDirectInvocations;
  if (!lazy protocol witness table cache variable for type GeoDirectInvocations and conformance GeoDirectInvocations)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GeoDirectInvocations,  &type metadata for GeoDirectInvocations);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type GeoDirectInvocations and conformance GeoDirectInvocations);
  }

  return result;
}

uint64_t base witness table accessor for FlowPlugin in GeoFlowDelegatePlugin(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type GeoFlowDelegatePlugin and conformance GeoFlowDelegatePlugin,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for GeoFlowDelegatePlugin,  (uint64_t)&protocol conformance descriptor for GeoFlowDelegatePlugin);
}

uint64_t sub_6871C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96LL))();
  *a2 = result;
  return result;
}

uint64_t sub_6874C(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 104LL);
  uint64_t v3 = swift_retain(*a1);
  return v2(v3);
}

uint64_t storeEnumTagSinglePayload for GeoDirectInvocations(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_687C8 + 4 * byte_99B05[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_687FC + 4 * byte_99B00[v4]))();
}

uint64_t sub_687FC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_68804(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x6880CLL);
  }
  return result;
}

uint64_t sub_68818(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x68820LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_68824(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6882C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GeoDirectInvocations()
{
  return &type metadata for GeoDirectInvocations;
}

uint64_t sub_68848()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t _s21GeoFlowDelegatePlugin20LocationSearchIntentC07SiriKitB003AnyB0CSgIeggo_AcGIegnr_TRTA_0@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_68898()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t _s21GeoFlowDelegatePlugin0B8SelectorC4withAcA0B6Helper_p_tcfc07SiriKitB003AnyB0CSgAA20LocationSearchIntentCcfU0_TA_0( uint64_t a1)
{
  return closure #2 in FlowSelector.init(with:)(a1, v1 + 16);
}

uint64_t _s21GeoFlowDelegatePlugin0B8SelectorC4withAcA0B6Helper_p_tcfc07SiriKitB003AnyB0CSgAA20LocationSearchIntentCcfU1_TA_0( uint64_t a1)
{
  return closure #3 in FlowSelector.init(with:)(a1, v1 + 16);
}

uint64_t _s21GeoFlowDelegatePlugin20LocationSearchIntentC07SiriKitB003AnyB0CSgIegnr_AcGIeggo_TRTA_0( uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed LocationSearchIntent) -> (@out AnyFlow?)( a1,  *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16));
}

uint64_t static GeoParse.getGeoExperience(parse:)()
{
  uint64_t v0 = specialized static GeoParse.getUsoTask(usoParse:)();
  if (!v0) {
    return 4LL;
  }
  uint64_t v1 = v0;
  uint64_t v2 = UsoTask.getGeoTaskType()();
  swift_release(v1);
  return v2;
}

uint64_t OnDeviceExperience.rawValue.getter(char a1)
{
  return *(void *)&aAnsweretendnav[8 * a1];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OnDeviceExperience( char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = OnDeviceExperience.rawValue.getter(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = OnDeviceExperience.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OnDeviceExperience()
{
  char v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = OnDeviceExperience.rawValue.getter(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance OnDeviceExperience(uint64_t a1)
{
  uint64_t v3 = OnDeviceExperience.rawValue.getter(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OnDeviceExperience(uint64_t a1)
{
  char v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = OnDeviceExperience.rawValue.getter(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance OnDeviceExperience@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized OnDeviceExperience.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance OnDeviceExperience@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = OnDeviceExperience.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

GeoFlowDelegatePlugin::OnDeviceExperience __swiftcall UsoTask.getGeoTaskType()()
{
  uint64_t v0 = ((uint64_t (*)(void))UsoTask.baseEntityAsString.getter)();
  uint64_t v2 = v1;
  if (v0 == 0x4A5F6E6F6D6D6F63LL && v1 == 0xEE0079656E72756FLL)
  {
    uint64_t v3 = swift_bridgeObjectRelease(0xEE0079656E72756FLL);
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v0, v1, 0x4A5F6E6F6D6D6F63LL, 0xEE0079656E72756FLL, 0LL);
    uint64_t v3 = swift_bridgeObjectRelease(v2);
    if ((v4 & 1) == 0) {
      goto LABEL_10;
    }
  }

  uint64_t v5 = UsoTask.verbString.getter(v3);
  uint64_t v7 = v6;
  if (v5 == 1886352499 && v6 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 1;
  }

  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, 1886352499LL, 0xE400000000000000LL, 0LL);
  swift_bridgeObjectRelease(v7);
  if ((v9 & 1) != 0) {
    return 1;
  }
LABEL_10:
  if ((UsoTask.answerETATask()() & 1) != 0) {
    return 0;
  }
  uint64_t v10 = ((uint64_t (*)(void))UsoTask.baseEntityAsString.getter)();
  uint64_t v12 = v11;
  if (v10 == 0x435F6E6F6D6D6F63LL && v11 == 0xEE00737361706D6FLL)
  {
    uint64_t v13 = swift_bridgeObjectRelease(0xEE00737361706D6FLL);
  }

  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, 0x435F6E6F6D6D6F63LL, 0xEE00737361706D6FLL, 0LL);
    uint64_t v13 = swift_bridgeObjectRelease(v12);
    if ((v14 & 1) == 0) {
      goto LABEL_21;
    }
  }

  uint64_t v15 = UsoTask.verbString.getter(v13);
  uint64_t v17 = v16;
  if (v15 == 0x74736575716572LL && v16 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 2;
  }

  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, 0x74736575716572LL, 0xE700000000000000LL, 0LL);
  uint64_t v13 = swift_bridgeObjectRelease(v17);
  if ((v18 & 1) != 0) {
    return 2;
  }
LABEL_21:
  uint64_t v19 = UsoTask.baseEntityAsString.getter(v13);
  uint64_t v21 = v20;
  if (v19 == 0xD000000000000016LL && v20 == 0x800000000009E6C0LL)
  {
    uint64_t v22 = swift_bridgeObjectRelease(0x800000000009E6C0LL);
  }

  else
  {
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, 0xD000000000000016LL, 0x800000000009E6C0LL, 0LL);
    uint64_t v22 = swift_bridgeObjectRelease(v21);
    if ((v23 & 1) == 0) {
      return 4;
    }
  }

  uint64_t v24 = UsoTask.verbString.getter(v22);
  uint64_t v26 = v25;
  if (v24 == 0x736972616D6D7573LL && v25 == 0xE900000000000065LL)
  {
    swift_bridgeObjectRelease(0xE900000000000065LL);
    return 3;
  }

  char v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, 0x736972616D6D7573LL, 0xE900000000000065LL, 0LL);
  swift_bridgeObjectRelease(v26);
  if ((v27 & 1) != 0) {
    return 3;
  }
  return 4;
}

uint64_t UsoTask.answerETATask()()
{
  uint64_t v1 = UsoTask.baseEntityAsString.getter();
  uint64_t v3 = v2;
  if (v1 == 0x4A5F6E6F6D6D6F63LL && v2 == 0xEE0079656E72756FLL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xEE0079656E72756FLL);
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v1, v2, 0x4A5F6E6F6D6D6F63LL, 0xEE0079656E72756FLL, 0LL);
    swift_bridgeObjectRelease(v3);
    uint64_t result = 0LL;
    if ((v5 & 1) == 0) {
      return result;
    }
  }

  uint64_t v6 = UsoTask.verbString.getter(result);
  uint64_t v8 = v7;
  if (v6 == 0x74736575716572LL && v7 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, 0x74736575716572LL, 0xE700000000000000LL, 0LL);
    swift_bridgeObjectRelease(v8);
    uint64_t result = 0LL;
    if ((v9 & 1) == 0) {
      return result;
    }
  }

  static UsoTask_CodegenConverter.convert(task:)(v25, v0);
  outlined init with copy of Any?((uint64_t)v25, (uint64_t)v24);
  if (!v24[3])
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v24,  &demangling cache variable for type metadata for Any?);
    goto LABEL_16;
  }

  uint64_t v10 = type metadata accessor for UsoTask_request_common_Journey(0LL);
  if ((swift_dynamicCast(&v23, v24, (char *)&type metadata for Any + 8, v10, 6LL) & 1) == 0)
  {
LABEL_16:
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v25,  &demangling cache variable for type metadata for Any?);
    return 1LL;
  }

  uint64_t v11 = v23;
  uint64_t v12 = swift_retain(v23);
  dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter(v24, v12);
  uint64_t v13 = swift_release(v11);
  uint64_t v14 = v24[0];
  if (v24[0])
  {
    uint64_t v15 = dispatch thunk of UsoEntity_common_Journey.dateTimeRange.getter(v13);
    uint64_t v13 = swift_release(v14);
    if (v15)
    {
      uint64_t v16 = dispatch thunk of UsoEntity_common_DateTimeRange.end.getter(v13);
      uint64_t v13 = swift_release(v15);
      if (v16)
      {
        swift_release(v16);
        outlined destroy of (label: String?, value: Any)?( (uint64_t)v25,  &demangling cache variable for type metadata for Any?);
        uint64_t v17 = v11;
LABEL_21:
        swift_release(v17);
        return 1LL;
      }
    }
  }

  char v18 = dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter(v24, v13);
  uint64_t v19 = v24[0];
  if (v24[0]
    && (uint64_t v20 = dispatch thunk of UsoEntity_common_Journey.dateTimeRange.getter(v18), v21 = swift_release(v19), v20))
  {
    uint64_t v22 = dispatch thunk of UsoEntity_common_DateTimeRange.end.getter(v21);
    swift_release(v11);
    swift_release(v20);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v25,  &demangling cache variable for type metadata for Any?);
    if (v22)
    {
      uint64_t v17 = v22;
      goto LABEL_21;
    }
  }

  else
  {
    swift_release(v11);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v25,  &demangling cache variable for type metadata for Any?);
  }

  return 0LL;
}

uint64_t specialized static GeoParse.getUsoTask(usoParse:)()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v4 = __chkstk_darwin();
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = USOParse.userParse.getter(v4);
  uint64_t v8 = Siri_Nlu_External_UserParse.userDialogActs.getter(v7);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  if (v9)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))( v6,  v8 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)),  v10);
    uint64_t v12 = 0LL;
  }

  else
  {
    uint64_t v12 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v6, v12, 1LL, v10);
  swift_bridgeObjectRelease(v8);
  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1LL, v10);
  if ((_DWORD)v13 == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v6,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    return 0LL;
  }

  uint64_t v15 = Siri_Nlu_External_UserDialogAct.getTasks()(v13);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v6, v10);
  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0) {
      uint64_t v17 = v15;
    }
    else {
      uint64_t v17 = v15 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v15);
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v17);
    uint64_t result = swift_bridgeObjectRelease(v15);
    if (!v14) {
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v14 = *(void *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFF8LL));
    if (!v14)
    {
LABEL_11:
      swift_bridgeObjectRelease(v15);
      return v14;
    }
  }

  if ((v15 & 0xC000000000000001LL) != 0)
  {
    uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v15);
    goto LABEL_11;
  }

  if (*(void *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFF8LL)))
  {
    uint64_t v14 = *(void *)(v15 + 32);
    swift_retain(v14);
    goto LABEL_11;
  }

  __break(1u);
  return result;
}

unint64_t specialized OnDeviceExperience.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of OnDeviceExperience.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type OnDeviceExperience and conformance OnDeviceExperience()
{
  unint64_t result = lazy protocol witness table cache variable for type OnDeviceExperience and conformance OnDeviceExperience;
  if (!lazy protocol witness table cache variable for type OnDeviceExperience and conformance OnDeviceExperience)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for OnDeviceExperience,  &type metadata for OnDeviceExperience);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OnDeviceExperience and conformance OnDeviceExperience);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for OnDeviceExperience(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_69380 + 4 * byte_99C85[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_693B4 + 4 * byte_99C80[v4]))();
}

uint64_t sub_693B4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_693BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x693C4LL);
  }
  return result;
}

uint64_t sub_693D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x693D8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_693DC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_693E4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OnDeviceExperience()
{
  return &type metadata for OnDeviceExperience;
}

uint64_t DeleteParkingHandleIntentStrategy.__allocating_init(with:isPommes:)(__int128 *a1, char a2)
{
  uint64_t v5 = swift_allocObject(v2, 65LL, 7LL);
  type metadata accessor for OS_os_log();
  *(void *)(v5 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000021LL,  0x8000000000099DB0LL);
  outlined init with take of CATType(a1, v5 + 24);
  *(_BYTE *)(v5 + 64) = a2;
  return v5;
}

uint64_t DeleteParkingHandleIntentStrategy.init(with:isPommes:)(__int128 *a1, char a2)
{
  *(void *)(v2 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000021LL,  0x8000000000099DB0LL);
  outlined init with take of CATType(a1, v2 + 24);
  *(_BYTE *)(v2 + 64) = a2;
  return v2;
}

uint64_t DeleteParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  void v3[9] = v2;
  v3[7] = a1;
  return swift_task_switch(DeleteParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:), 0LL, 0LL);
}

uint64_t DeleteParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
  uint64_t v2 = (void *)IntentResolutionRecord.intentResponse.getter(v1);
  int v3 = (char *)[v2 code];

  if (v3 == (_BYTE *)&dword_0 + 3)
  {
    uint64_t v4 = *(void **)(v0 + 72);
    uint64_t v5 = v4[6];
    uint64_t v6 = v4[7];
    __swift_project_boxed_opaque_existential_1(v4 + 3, v5);
    uint64_t v7 = type metadata accessor for DialogLocation.Builder(0LL);
    swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v8 = DialogLocation.Builder.init()();
    uint64_t v9 = dispatch thunk of DialogLocation.Builder.build()(v8);
    swift_release(v8);
    *(void *)(v0 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &type metadata for DeleteParkingLocation;
    *(void *)(v0 + 48) = &protocol witness table for DeleteParkingLocation;
    *(void *)(v0 + 16) = v9;
    *(_OWORD *)(v0 + 24) = xmmword_99DC0;
    uint64_t v10 = (void *)swift_task_alloc(dword_C5274);
    *(void *)(v0 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v10;
    void *v10 = v0;
    v10[1] = DeleteParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    return FlowHelper.makeDialogOnlyOutput(model:)(*(void *)(v0 + 56), v0 + 16, v5, v6);
  }

  else
  {
    uint64_t v12 = *(int **)(**(void **)(v0 + 72) + 120LL);
    uint64_t v14 = (int *)((char *)v12 + *v12);
    uint64_t v13 = (void *)swift_task_alloc(v12[1]);
    *(void *)(v0 + 96) = v13;
    *uint64_t v13 = v0;
    v13[1] = DeleteParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    return ((uint64_t (*)(void, void))v14)(*(void *)(v0 + 56), *(void *)(v0 + 64));
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *(void *)(*v1 + 80);
  int v3 = *v1;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(DeleteParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:), 0LL, 0LL);
  }
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v3 + 16));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

{
  uint64_t *v0;
  uint64_t v2;
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 96));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DeleteParkingHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return swift_task_switch(DeleteParkingHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:), 0LL, 0LL);
}

uint64_t DeleteParkingHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)()
{
  uint64_t v1 = (void *)v0[8];
  uint64_t v3 = v1[6];
  uint64_t v2 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v3);
  v0[5] = &type metadata for DeleteParkingLocation;
  v0[6] = &protocol witness table for DeleteParkingLocation;
  v0[3] = 0LL;
  v0[4] = 0LL;
  v0[2] = 0LL;
  uint64_t v4 = (void *)swift_task_alloc(dword_C5274);
  v0[9] = v4;
  void *v4 = v0;
  v4[1] = SaveParkingLocationUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  return FlowHelper.makeDialogOnlyOutput(model:)(v0[7], (uint64_t)(v0 + 2), v3, v2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance DeleteParkingHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for DeleteParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance DeleteParkingHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for DeleteParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance DeleteParkingHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for DeleteParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance DeleteParkingHandleIntentStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(**(void **)v2 + 112LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v9(a1, a2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance DeleteParkingHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for DeleteParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance DeleteParkingHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for DeleteParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance DeleteParkingHandleIntentStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(**(void **)v2 + 120LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v9(a1, a2);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance DeleteParkingHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for DeleteParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentHandleIntentStrategy;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)(a1, a2, v9, a4);
}

unint64_t lazy protocol witness table accessor for type DeleteParkingHandleIntentStrategy and conformance DeleteParkingHandleIntentStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type DeleteParkingHandleIntentStrategy and conformance DeleteParkingHandleIntentStrategy;
  if (!lazy protocol witness table cache variable for type DeleteParkingHandleIntentStrategy and conformance DeleteParkingHandleIntentStrategy)
  {
    uint64_t v1 = type metadata accessor for DeleteParkingHandleIntentStrategy();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DeleteParkingHandleIntentStrategy, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DeleteParkingHandleIntentStrategy and conformance DeleteParkingHandleIntentStrategy);
  }

  return result;
}

uint64_t type metadata accessor for DeleteParkingHandleIntentStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin33DeleteParkingHandleIntentStrategy);
}

uint64_t LocationSearchIntentBuilder.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, 120LL, 7LL);
  LocationSearchIntentBuilder.init()();
  return v1;
}

uint64_t LocationSearchIntentBuilder.noun.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t LocationSearchIntentBuilder.noun.setter(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 16, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 16) = a1;
  return result;
}

uint64_t (*LocationSearchIntentBuilder.noun.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t LocationSearchIntentBuilder.verb.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t LocationSearchIntentBuilder.verb.setter(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 17, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 7) = a1;
  return result;
}

uint64_t (*LocationSearchIntentBuilder.verb.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t LocationSearchIntentBuilder.incidentType.getter()
{
  return *(unsigned __int8 *)(v0 + 18);
}

uint64_t LocationSearchIntentBuilder.incidentType.setter(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 18, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + __swift_destroy_boxed_opaque_existential_0Tm(v0 + 18) = a1;
  return result;
}

uint64_t (*LocationSearchIntentBuilder.incidentType.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t LocationSearchIntentBuilder.confirmation.getter()
{
  return *(unsigned __int8 *)(v0 + 19);
}

uint64_t LocationSearchIntentBuilder.confirmation.setter(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 19, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 19) = a1;
  return result;
}

uint64_t (*LocationSearchIntentBuilder.confirmation.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t LocationSearchIntentBuilder.appName.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(*(void *)(v0 + 32));
  return v1;
}

uint64_t LocationSearchIntentBuilder.appName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 32);
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a2;
  return swift_bridgeObjectRelease(v5);
}

uint64_t (*ShareETAContactConfirmationStrategy.isPOMMES.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t LocationSearchIntentBuilder.firstName.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain(*(void *)(v0 + 48));
  return v1;
}

uint64_t LocationSearchIntentBuilder.firstName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 48);
  *(void *)(v2 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = a1;
  *(void *)(v2 + 48) = a2;
  return swift_bridgeObjectRelease(v5);
}

uint64_t LocationSearchIntentBuilder.fullName.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain(*(void *)(v0 + 64));
  return v1;
}

uint64_t LocationSearchIntentBuilder.fullName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 64);
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return swift_bridgeObjectRelease(v5);
}

uint64_t LocationSearchIntentBuilder.relationship.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain(*(void *)(v0 + 80));
  return v1;
}

uint64_t LocationSearchIntentBuilder.relationship.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 80);
  *(void *)(v2 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a1;
  *(void *)(v2 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = a2;
  return swift_bridgeObjectRelease(v5);
}

uint64_t (*LocationSearchIntentBuilder.relationship.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t LocationSearchIntentBuilder.locationSearchVerbMap.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 88));
}

uint64_t LocationSearchIntentBuilder.locationSearchConfirmationMap.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 104));
}

uint64_t LocationSearchIntentBuilder.locationSearchIncidentTypeMap.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 112));
}

uint64_t LocationSearchIntentBuilder.fromLocationSearchNode(locationSearchNode:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType(0LL);
  uint64_t v44 = *(void *)(v2 - 8);
  uint64_t v45 = v2;
  __chkstk_darwin();
  uint64_t v43 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation(0LL);
  uint64_t v41 = *(void *)(v4 - 8);
  uint64_t v42 = v4;
  __chkstk_darwin();
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchVerb(0LL);
  uint64_t v7 = *(void *)(v40 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNoun(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = v0[12];
  Apple_Parsec_Siri_V2alpha_LocationSearchNode.locationSearchNoun.getter(v12);
  else {
    uint64_t v18 = 8LL;
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*v1 + 184LL))(v18);
  uint64_t v20 = v1[11];
  Apple_Parsec_Siri_V2alpha_LocationSearchNode.locationSearchVerb.getter(v19);
  else {
    uint64_t v23 = 10LL;
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v40);
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*v1 + 208LL))(v23);
  uint64_t v25 = v1[13];
  Apple_Parsec_Siri_V2alpha_LocationSearchNode.locationSearchConfirmation.getter(v24);
  if (*(void *)(v25 + 16))
  {
    unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    uint64_t v27 = (uint64_t)v43;
    if ((v28 & 1) != 0) {
      uint64_t v29 = *(unsigned __int8 *)(*(void *)(v25 + 56) + v26);
    }
    else {
      uint64_t v29 = 3LL;
    }
  }

  else
  {
    uint64_t v29 = 3LL;
    uint64_t v27 = (uint64_t)v43;
  }

  (*(void (**)(char *, uint64_t))(v41 + 8))(v6, v42);
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(*v1 + 256LL))(v29);
  uint64_t v31 = v1[14];
  Apple_Parsec_Siri_V2alpha_LocationSearchNode.locationSearchIncidentType.getter(v30);
  if (*(void *)(v31 + 16) && (unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v27), (v33 & 1) != 0)) {
    uint64_t v34 = *(unsigned __int8 *)(*(void *)(v31 + 56) + v32);
  }
  else {
    uint64_t v34 = 9LL;
  }
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v27, v45);
  uint64_t v35 = (*(uint64_t (**)(uint64_t))(*v1 + 232LL))(v34);
  uint64_t v36 = Apple_Parsec_Siri_V2alpha_LocationSearchNode.occupantFullName.getter(v35);
  uint64_t v37 = (*(uint64_t (**)(uint64_t))(*v1 + 328LL))(v36);
  uint64_t v38 = Apple_Parsec_Siri_V2alpha_LocationSearchNode.personRelationship.getter(v37);
  (*(void (**)(uint64_t))(*v1 + 352LL))(v38);
  return swift_retain(v1);
}

uint64_t LocationSearchIntentBuilder.withNoun(noun:)()
{
  return swift_retain(v0);
}

uint64_t LocationSearchIntentBuilder.withVerb(verb:)()
{
  return swift_retain(v0);
}

uint64_t LocationSearchIntentBuilder.withIncidentType(incidentType:)()
{
  return swift_retain(v0);
}

uint64_t LocationSearchIntentBuilder.withConfirmation(confirmation:)()
{
  return swift_retain(v0);
}

uint64_t LocationSearchIntentBuilder.withAppName(appName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)v2 + 280LL);
  swift_bridgeObjectRetain(a2);
  v5(a1, a2);
  return swift_retain(v2);
}

uint64_t LocationSearchIntentBuilder.withFirstName(firstName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)v2 + 304LL);
  swift_bridgeObjectRetain(a2);
  v5(a1, a2);
  return swift_retain(v2);
}

uint64_t LocationSearchIntentBuilder.withRelationship(relationship:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)v2 + 352LL);
  swift_bridgeObjectRetain(a2);
  v5(a1, a2);
  return swift_retain(v2);
}

uint64_t LocationSearchIntentBuilder.withFullName(fullName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)v2 + 328LL);
  swift_bridgeObjectRetain(a2);
  v5(a1, a2);
  return swift_retain(v2);
}

void *LocationSearchIntentBuilder.buildOccupantNodes()()
{
  unint64_t v51 = (char *)&v44 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = type metadata accessor for TerminalIntentNode(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v50 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v49 = (char *)&v44 - v5;
  __chkstk_darwin();
  uint64_t v47 = (char *)&v44 - v6;
  __chkstk_darwin();
  uint64_t v46 = (char *)&v44 - v7;
  __chkstk_darwin();
  uint64_t v9 = (char *)&v44 - v8;
  __chkstk_darwin();
  uint64_t v11 = (char *)&v44 - v10;
  uint64_t v12 = type metadata accessor for TerminalElement.Value(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v48 = (uint64_t *)((char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v45 = (uint64_t *)((char *)&v44 - v15);
  uint64_t v16 = __chkstk_darwin();
  uint64_t v18 = (char *)&v44 - v17;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 296LL))(v16);
  if (!v20) {
    goto LABEL_9;
  }
  uint64_t v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000LL) == 0) {
    uint64_t v21 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (!v21)
  {
    uint64_t v19 = swift_bridgeObjectRelease(v20);
LABEL_9:
    uint64_t v24 = _swiftEmptyArrayStorage;
    goto LABEL_10;
  }

  TerminalElement.SemanticValue.init(_:javaPojoName:)();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))( v18,  enum case for TerminalElement.Value.semantic(_:),  v12);
  char v22 = v51;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v51, v18, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v22, 0LL, 1LL, v12);
  TerminalIntentNode.init(name:value:semanticTags:)( 0xD000000000000011LL,  0x800000000009E8C0LL,  v22,  _swiftEmptyArrayStorage);
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v44 = v2;
  v23(v9, v11, v2);
  uint64_t v24 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  1LL,  1,  (unint64_t)_swiftEmptyArrayStorage,  &demangling cache variable for type metadata for _ContiguousArrayStorage<TerminalIntentNode>,  (uint64_t (*)(void))&type metadata accessor for TerminalIntentNode);
  unint64_t v26 = v24[2];
  unint64_t v25 = v24[3];
  if (v26 >= v25 >> 1) {
    uint64_t v24 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v25 > 1,  v26 + 1,  1,  (unint64_t)v24,  &demangling cache variable for type metadata for _ContiguousArrayStorage<TerminalIntentNode>,  (uint64_t (*)(void))&type metadata accessor for TerminalIntentNode);
  }
  void v24[2] = v26 + 1;
  uint64_t v2 = v44;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))( (unint64_t)v24 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
  + *(void *)(v3 + 72) * v26,
    v9,
    v44);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
LABEL_10:
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 320LL))(v19);
  if (v28)
  {
    uint64_t v29 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000LL) == 0) {
      uint64_t v29 = v27 & 0xFFFFFFFFFFFFLL;
    }
    if (v29)
    {
      uint64_t v30 = v45;
      *uint64_t v45 = v27;
      v30[1] = v28;
      (*(void (**)(uint64_t *, void, uint64_t))(v13 + 104))( v30,  enum case for TerminalElement.Value.string(_:),  v12);
      uint64_t v31 = v51;
      (*(void (**)(char *, uint64_t *, uint64_t))(v13 + 16))(v51, v30, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v31, 0LL, 1LL, v12);
      unint64_t v32 = v46;
      TerminalIntentNode.init(name:value:semanticTags:)( 0xD000000000000010LL,  0x800000000009E8A0LL,  v31,  _swiftEmptyArrayStorage);
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v47, v32, v2);
      if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0) {
        uint64_t v24 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v24[2] + 1LL,  1,  (unint64_t)v24,  &demangling cache variable for type metadata for _ContiguousArrayStorage<TerminalIntentNode>,  (uint64_t (*)(void))&type metadata accessor for TerminalIntentNode);
      }
      unint64_t v34 = v24[2];
      unint64_t v33 = v24[3];
      if (v34 >= v33 >> 1) {
        uint64_t v24 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v33 > 1,  v34 + 1,  1,  (unint64_t)v24,  &demangling cache variable for type metadata for _ContiguousArrayStorage<TerminalIntentNode>,  (uint64_t (*)(void))&type metadata accessor for TerminalIntentNode);
      }
      void v24[2] = v34 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))( (unint64_t)v24 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(void *)(v3 + 72) * v34,
        v47,
        v2);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v46, v2);
      uint64_t v27 = (*(uint64_t (**)(uint64_t *, uint64_t))(v13 + 8))(v45, v12);
    }

    else
    {
      uint64_t v27 = swift_bridgeObjectRelease(v28);
    }
  }

  uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 344LL))(v27);
  if (v36)
  {
    uint64_t v37 = HIBYTE(v36) & 0xF;
    if ((v36 & 0x2000000000000000LL) == 0) {
      uint64_t v37 = v35 & 0xFFFFFFFFFFFFLL;
    }
    if (v37)
    {
      uint64_t v38 = v48;
      *uint64_t v48 = v35;
      v38[1] = v36;
      (*(void (**)(uint64_t *, void, uint64_t))(v13 + 104))( v38,  enum case for TerminalElement.Value.string(_:),  v12);
      char v39 = v51;
      (*(void (**)(char *, uint64_t *, uint64_t))(v13 + 16))(v51, v38, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v39, 0LL, 1LL, v12);
      uint64_t v40 = v49;
      TerminalIntentNode.init(name:value:semanticTags:)( 0xD000000000000014LL,  0x800000000009E880LL,  v39,  _swiftEmptyArrayStorage);
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v50, v40, v2);
      if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0) {
        uint64_t v24 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v24[2] + 1LL,  1,  (unint64_t)v24,  &demangling cache variable for type metadata for _ContiguousArrayStorage<TerminalIntentNode>,  (uint64_t (*)(void))&type metadata accessor for TerminalIntentNode);
      }
      unint64_t v42 = v24[2];
      unint64_t v41 = v24[3];
      if (v42 >= v41 >> 1) {
        uint64_t v24 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v41 > 1,  v42 + 1,  1,  (unint64_t)v24,  &demangling cache variable for type metadata for _ContiguousArrayStorage<TerminalIntentNode>,  (uint64_t (*)(void))&type metadata accessor for TerminalIntentNode);
      }
      void v24[2] = v42 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))( (unint64_t)v24 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(void *)(v3 + 72) * v42,
        v50,
        v2);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v49, v2);
      (*(void (**)(uint64_t *, uint64_t))(v13 + 8))(v48, v12);
    }

    else
    {
      swift_bridgeObjectRelease(v36);
    }
  }

  return v24;
}

uint64_t LocationSearchIntentBuilder.build()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v150 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MitigatorClassification?);
  __chkstk_darwin();
  uint64_t v149 = (char *)&v147 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLState?);
  __chkstk_darwin();
  uint64_t v148 = (char *)&v147 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NonTerminalIntentNode(0LL);
  uint64_t v155 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v153 = (char *)&v147 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v165 = (void **)((char *)&v147 - v7);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v147 - v8;
  uint64_t v158 = type metadata accessor for TerminalIntentNode(0LL);
  uint64_t v10 = *(void *)(v158 - 8);
  __chkstk_darwin();
  uint64_t v154 = (char *)&v147 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v164 = (char *)&v147 - v12;
  __chkstk_darwin();
  uint64_t v162 = (char *)&v147 - v13;
  __chkstk_darwin();
  uint64_t v15 = (char *)&v147 - v14;
  __chkstk_darwin();
  *(void *)&__int128 v167 = (char *)&v147 - v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Value?);
  __chkstk_darwin();
  uint64_t v163 = (void **)((char *)&v147 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v19 = (char *)&v147 - v18;
  __chkstk_darwin();
  uint64_t v21 = (char *)&v147 - v20;
  uint64_t v22 = __chkstk_darwin();
  uint64_t v24 = (char *)&v147 - v23;
  v171[0] = _swiftEmptyArrayStorage;
  uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 176LL))(v22);
  uint64_t v166 = v5;
  uint64_t v156 = v9;
  uint64_t v157 = v10;
  if (v25 != 8)
  {
    char v26 = v25;
    if (one-time initialization token for nounNode != -1) {
      swift_once(&one-time initialization token for nounNode, one-time initialization function for nounNode);
    }
    uint64_t v27 = TerminalOntologyNode.name.getter();
    uint64_t v29 = v28;
    TerminalElement.SemanticValue.init(_:javaPojoName:)(*(void *)&aAny_3[8 * v26], qword_99FC0[v26], 0LL, 0LL);
    uint64_t v30 = enum case for TerminalElement.Value.semantic(_:);
    uint64_t v31 = type metadata accessor for TerminalElement.Value(0LL);
    uint64_t v32 = *(void *)(v31 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 104))(v24, v30, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v24, 0LL, 1LL, v31);
    uint64_t v169 = v158;
    uint64_t v170 = &protocol witness table for TerminalIntentNode;
    __swift_allocate_boxed_opaque_existential_0(v168);
    TerminalIntentNode.init(name:value:semanticTags:)(v27, v29, v24, _swiftEmptyArrayStorage);
    unint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  _swiftEmptyArrayStorage);
    v171[0] = v33;
    unint64_t v35 = v33[2];
    unint64_t v34 = v33[3];
    if (v35 >= v34 >> 1) {
      v171[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v34 > 1),  v35 + 1,  1,  v33);
    }
    uint64_t v36 = v169;
    uint64_t v37 = (uint64_t)v170;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v168, v169);
    __chkstk_darwin();
    char v39 = (char *)&v147 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v40 + 16))(v39);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v35, (uint64_t)v39, (uint64_t *)v171, v36, v37);
    uint64_t v25 = __swift_destroy_boxed_opaque_existential_0Tm(v168);
    uint64_t v5 = v166;
    uint64_t v9 = v156;
    uint64_t v10 = v157;
  }

  uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 200LL))(v25);
  if (v41 != 10)
  {
    char v42 = v41;
    if (one-time initialization token for verbNode != -1) {
      swift_once(&one-time initialization token for verbNode, one-time initialization function for verbNode);
    }
    uint64_t v43 = TerminalOntologyNode.name.getter();
    uint64_t v45 = v44;
    uint64_t v46 = LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(v42);
    TerminalElement.SemanticValue.init(_:javaPojoName:)(v46, v47, 0LL, 0LL);
    uint64_t v48 = enum case for TerminalElement.Value.semantic(_:);
    uint64_t v49 = type metadata accessor for TerminalElement.Value(0LL);
    uint64_t v50 = *(void *)(v49 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 104))(v21, v48, v49);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v21, 0LL, 1LL, v49);
    uint64_t v51 = specialized static Array._allocateUninitialized(_:)(0LL);
    uint64_t v52 = v167;
    TerminalIntentNode.init(name:value:semanticTags:)(v43, v45, v21, v51);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v54 = v171[0][2];
    unint64_t v53 = v171[0][3];
    if (v54 >= v53 >> 1) {
      v171[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v53 > 1),  v54 + 1,  1,  v171[0]);
    }
    uint64_t v10 = v157;
    uint64_t v55 = v158;
    (*(void (**)(char *, uint64_t, uint64_t))(v157 + 16))(v15, v52, v158);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)( v54,  (uint64_t)v15,  (uint64_t *)v171,  (uint64_t (*)(void))&type metadata accessor for TerminalIntentNode,  (uint64_t)&protocol witness table for TerminalIntentNode);
    uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v52, v55);
    uint64_t v9 = v156;
  }

  uint64_t v56 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 248LL))(v41);
  if (v56 != 3)
  {
    char v57 = v56;
    if (one-time initialization token for confirmationNode != -1) {
      swift_once( &one-time initialization token for confirmationNode,  one-time initialization function for confirmationNode);
    }
    uint64_t v58 = TerminalOntologyNode.name.getter();
    uint64_t v60 = v59;
    TerminalElement.SemanticValue.init(_:javaPojoName:)(qword_9A000[v57], qword_9A018[v57], 0LL, 0LL);
    uint64_t v61 = enum case for TerminalElement.Value.semantic(_:);
    uint64_t v62 = type metadata accessor for TerminalElement.Value(0LL);
    uint64_t v63 = *(void *)(v62 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 104))(v19, v61, v62);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v19, 0LL, 1LL, v62);
    uint64_t v64 = specialized static Array._allocateUninitialized(_:)(0LL);
    int v65 = v162;
    TerminalIntentNode.init(name:value:semanticTags:)(v58, v60, v19, v64);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v67 = v171[0][2];
    unint64_t v66 = v171[0][3];
    if (v67 >= v66 >> 1) {
      v171[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v66 > 1),  v67 + 1,  1,  v171[0]);
    }
    uint64_t v10 = v157;
    uint64_t v68 = v158;
    uint64_t v69 = v167;
    (*(void (**)(void, char *, uint64_t))(v157 + 16))(v167, v65, v158);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)( v67,  v69,  (uint64_t *)v171,  (uint64_t (*)(void))&type metadata accessor for TerminalIntentNode,  (uint64_t)&protocol witness table for TerminalIntentNode);
    uint64_t v56 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v65, v68);
  }

  char v70 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 224LL))(v56);
  if (v70 != 9)
  {
    char v71 = v70;
    if (one-time initialization token for incidentTypeNode != -1) {
      swift_once( &one-time initialization token for incidentTypeNode,  one-time initialization function for incidentTypeNode);
    }
    TerminalOntologyNode.name.getter();
    __asm { BR              X10 }
  }

  uint64_t v72 = (*(uint64_t (**)(void))(*(void *)v2 + 272LL))();
  uint64_t v74 = "NAFLocationServiceErrorCode" + 27;
  if (v73)
  {
    uint64_t v75 = v72;
    uint64_t v76 = v73;
    if (one-time initialization token for appName != -1) {
      swift_once(&one-time initialization token for appName, one-time initialization function for appName);
    }
    uint64_t v77 = TerminalOntologyNode.name.getter();
    uint64_t v79 = v78;
    TerminalElement.SemanticValue.init(_:javaPojoName:)(v75, v76, 0LL, 0LL);
    uint64_t v80 = enum case for TerminalElement.Value.semantic(_:);
    uint64_t v81 = type metadata accessor for TerminalElement.Value(0LL);
    uint64_t v82 = *(void *)(v81 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v82 + 104))(v21, v80, v81);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56))(v21, 0LL, 1LL, v81);
    uint64_t v83 = specialized static Array._allocateUninitialized(_:)(0LL);
    uint64_t v84 = v167;
    TerminalIntentNode.init(name:value:semanticTags:)(v77, v79, v21, v83);
    if (one-time initialization token for appNode != -1) {
      swift_once(&one-time initialization token for appNode, one-time initialization function for appNode);
    }
    uint64_t v85 = NonTerminalOntologyNode.name.getter();
    uint64_t v87 = v86;
    uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IntentNode>);
    uint64_t v89 = swift_allocObject(v88, 72LL, 7LL);
    uint64_t v74 = "";
    *(_OWORD *)(v89 + 16) = xmmword_95430;
    uint64_t v90 = v158;
    *(void *)(v89 + 56) = v158;
    *(void *)(v89 + 64) = &protocol witness table for TerminalIntentNode;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((void *)(v89 + 32));
    (*(void (**)(void *, uint64_t, uint64_t))(v10 + 16))(boxed_opaque_existential_0, v84, v90);
    uint64_t v92 = specialized static Array._allocateUninitialized(_:)(0LL);
    NonTerminalIntentNode.init(name:childNodes:resultIDs:)(v85, v87, v89, v92);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v94 = v171[0][2];
    unint64_t v93 = v171[0][3];
    if (v94 >= v93 >> 1) {
      v171[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v93 > 1),  v94 + 1,  1,  v171[0]);
    }
    uint64_t v95 = v155;
    uint64_t v96 = v165;
    (*(void (**)(void *, char *, uint64_t))(v155 + 16))(v165, v9, v5);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)( v94,  (uint64_t)v96,  (uint64_t *)v171,  (uint64_t (*)(void))&type metadata accessor for NonTerminalIntentNode,  (uint64_t)&protocol witness table for NonTerminalIntentNode);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v9, v5);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v84, v90);
  }

  uint64_t v97 = LocationSearchIntentBuilder.buildOccupantNodes()();
  uint64_t v98 = (void *)v97[2];
  if (v98)
  {
    unint64_t v99 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v147 = v97;
    uint64_t v100 = (char *)v97 + v99;
    uint64_t v152 = *(void *)(v10 + 72);
    uint64_t v151 = *(void (**)(void *, char *, uint64_t))(v10 + 16);
    __int128 v167 = *((_OWORD *)v74 + 67);
    uint64_t v101 = v158;
    uint64_t v102 = v154;
    do
    {
      uint64_t v164 = v100;
      uint64_t v165 = v98;
      uint64_t v103 = v151;
      v151(v102, v100, v101);
      uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IntentNode>);
      uint64_t v105 = swift_allocObject(v104, 72LL, 7LL);
      *(_OWORD *)(v105 + 16) = v167;
      uint64_t v162 = (char *)v105;
      uint64_t v163 = (void *)(v105 + 32);
      uint64_t v106 = swift_allocObject(v104, 72LL, 7LL);
      *(_OWORD *)(v106 + 16) = v167;
      unint64_t v161 = (void *)(v106 + 32);
      uint64_t v107 = swift_allocObject(v104, 72LL, 7LL);
      *(_OWORD *)(v107 + 16) = v167;
      unint64_t v160 = (void *)(v107 + 32);
      uint64_t v108 = swift_allocObject(v104, 72LL, 7LL);
      *(_OWORD *)(v108 + 16) = v167;
      unint64_t v159 = (void *)(v108 + 32);
      uint64_t v109 = swift_allocObject(v104, 72LL, 7LL);
      *(_OWORD *)(v109 + 16) = v167;
      uint64_t v110 = swift_allocObject(v104, 72LL, 7LL);
      *(_OWORD *)(v110 + 16) = v167;
      *(void *)(v110 + 56) = v101;
      *(void *)(v110 + 64) = &protocol witness table for TerminalIntentNode;
      uint64_t v111 = __swift_allocate_boxed_opaque_existential_0((void *)(v110 + 32));
      v103(v111, v102, v101);
      uint64_t v112 = specialized static Array._allocateUninitialized(_:)(0LL);
      *(void *)(v109 + 56) = v166;
      *(void *)(v109 + 64) = &protocol witness table for NonTerminalIntentNode;
      __swift_allocate_boxed_opaque_existential_0((void *)(v109 + 32));
      NonTerminalIntentNode.init(name:childNodes:resultIDs:)(0x746E61707563636FLL, 0xE800000000000000LL, v110, v112);
      uint64_t v113 = specialized static Array._allocateUninitialized(_:)(0LL);
      *(void *)(v108 + 56) = v166;
      *(void *)(v108 + 64) = &protocol witness table for NonTerminalIntentNode;
      __swift_allocate_boxed_opaque_existential_0(v159);
      NonTerminalIntentNode.init(name:childNodes:resultIDs:)(0x6C506E6F73726570LL, 0xEB00000000656361LL, v109, v113);
      uint64_t v114 = specialized static Array._allocateUninitialized(_:)(0LL);
      *(void *)(v107 + 56) = v166;
      *(void *)(v107 + 64) = &protocol witness table for NonTerminalIntentNode;
      __swift_allocate_boxed_opaque_existential_0(v160);
      uint64_t v115 = v166;
      NonTerminalIntentNode.init(name:childNodes:resultIDs:)(0x6563616C70LL, 0xE500000000000000LL, v108, v114);
      uint64_t v116 = specialized static Array._allocateUninitialized(_:)(0LL);
      *(void *)(v106 + 56) = v115;
      *(void *)(v106 + 64) = &protocol witness table for NonTerminalIntentNode;
      __swift_allocate_boxed_opaque_existential_0(v161);
      NonTerminalIntentNode.init(name:childNodes:resultIDs:)(0x73736572646461LL, 0xE700000000000000LL, v107, v116);
      uint64_t v117 = specialized static Array._allocateUninitialized(_:)(0LL);
      unint64_t v119 = v162;
      uint64_t v118 = v163;
      *((void *)v162 + __swift_destroy_boxed_opaque_existential_0Tm(v0 + 7) = v115;
      *((void *)v119 + 8) = &protocol witness table for NonTerminalIntentNode;
      __swift_allocate_boxed_opaque_existential_0(v118);
      NonTerminalIntentNode.init(name:childNodes:resultIDs:)(0x74616E6974736564LL, 0xEB000000006E6F69LL, v106, v117);
      uint64_t v120 = specialized static Array._allocateUninitialized(_:)(0LL);
      uint64_t v121 = v153;
      NonTerminalIntentNode.init(name:childNodes:resultIDs:)(0x6E6F697461636F6CLL, 0xE800000000000000LL, v119, v120);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v123 = v171[0][2];
      unint64_t v122 = v171[0][3];
      if (v123 >= v122 >> 1) {
        v171[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v122 > 1),  v123 + 1,  1,  v171[0]);
      }
      uint64_t v124 = v155;
      uint64_t v125 = (uint64_t)v156;
      (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v156, v121, v115);
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)( v123,  v125,  (uint64_t *)v171,  (uint64_t (*)(void))&type metadata accessor for NonTerminalIntentNode,  (uint64_t)&protocol witness table for NonTerminalIntentNode);
      (*(void (**)(char *, uint64_t))(v124 + 8))(v121, v115);
      uint64_t v101 = v158;
      uint64_t v102 = v154;
      (*(void (**)(char *, uint64_t))(v157 + 8))(v154, v158);
      uint64_t v100 = &v164[v152];
      uint64_t v98 = (void *)((char *)v165 - 1);
    }

    while (v165 != (void *)((char *)&dword_0 + 1));
    swift_bridgeObjectRelease(v147);
    uint64_t v74 = "NAFLocationServiceErrorCode" + 27;
  }

  else
  {
    swift_bridgeObjectRelease(v97);
  }

  uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IntentNode>);
  uint64_t v127 = swift_allocObject(v126, 72LL, 7LL);
  __int128 v167 = *((_OWORD *)v74 + 67);
  *(_OWORD *)(v127 + 16) = v167;
  uint64_t v128 = v127;
  uint64_t v164 = (char *)v127;
  uint64_t v129 = swift_allocObject(v126, 72LL, 7LL);
  *(_OWORD *)(v129 + 16) = v167;
  uint64_t v130 = swift_allocObject(v126, 72LL, 7LL);
  *(_OWORD *)(v130 + 16) = v167;
  uint64_t v131 = swift_allocObject(v126, 72LL, 7LL);
  *(_OWORD *)(v131 + 16) = v167;
  uint64_t v132 = swift_allocObject(v126, 72LL, 7LL);
  *(_OWORD *)(v132 + 16) = v167;
  uint64_t v163 = (void *)(v130 + 32);
  uint64_t v165 = (void *)(v129 + 32);
  *(void *)&__int128 v167 = v128 + 32;
  uint64_t v133 = v171[0];
  uint64_t v134 = specialized static Array._allocateUninitialized(_:)(0LL);
  uint64_t v135 = v166;
  *(void *)(v132 + 56) = v166;
  *(void *)(v132 + 64) = &protocol witness table for NonTerminalIntentNode;
  __swift_allocate_boxed_opaque_existential_0((void *)(v132 + 32));
  NonTerminalIntentNode.init(name:childNodes:resultIDs:)(0x6E6F697461636F6CLL, 0xEE00686372616553LL, v133, v134);
  uint64_t v136 = specialized static Array._allocateUninitialized(_:)(0LL);
  *(void *)(v131 + 56) = v135;
  *(void *)(v131 + 64) = &protocol witness table for NonTerminalIntentNode;
  __swift_allocate_boxed_opaque_existential_0((void *)(v131 + 32));
  NonTerminalIntentNode.init(name:childNodes:resultIDs:)(0x746E657665LL, 0xE500000000000000LL, v132, v136);
  uint64_t v137 = specialized static Array._allocateUninitialized(_:)(0LL);
  *(void *)(v130 + 56) = v135;
  *(void *)(v130 + 64) = &protocol witness table for NonTerminalIntentNode;
  __swift_allocate_boxed_opaque_existential_0(v163);
  NonTerminalIntentNode.init(name:childNodes:resultIDs:)(0x7463656A627573LL, 0xE700000000000000LL, v131, v137);
  uint64_t v138 = specialized static Array._allocateUninitialized(_:)(0LL);
  *(void *)(v129 + 56) = v135;
  *(void *)(v129 + 64) = &protocol witness table for NonTerminalIntentNode;
  __swift_allocate_boxed_opaque_existential_0(v165);
  NonTerminalIntentNode.init(name:childNodes:resultIDs:)(0x646E616D6D6F63LL, 0xE700000000000000LL, v130, v138);
  uint64_t v139 = specialized static Array._allocateUninitialized(_:)(0LL);
  id v140 = v164;
  *((void *)v164 + __swift_destroy_boxed_opaque_existential_0Tm(v0 + 7) = v135;
  *((void *)v140 + 8) = &protocol witness table for NonTerminalIntentNode;
  __swift_allocate_boxed_opaque_existential_0((void *)v167);
  NonTerminalIntentNode.init(name:childNodes:resultIDs:)(0x6E6F69746361LL, 0xE600000000000000LL, v129, v139);
  uint64_t v141 = specialized static Array._allocateUninitialized(_:)(0LL);
  uint64_t v169 = v135;
  uint64_t v170 = &protocol witness table for NonTerminalIntentNode;
  __swift_allocate_boxed_opaque_existential_0(v168);
  NonTerminalIntentNode.init(name:childNodes:resultIDs:)(0x6973734169726953LL, 0xED0000746E617473LL, v140, v141);
  uint64_t v142 = type metadata accessor for NLState(0LL);
  unint64_t v143 = v148;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v142 - 8) + 56LL))(v148, 1LL, 1LL, v142);
  uint64_t v144 = type metadata accessor for MitigatorClassification(0LL);
  uint64_t v145 = v149;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v144 - 8) + 56LL))(v149, 1LL, 1LL, v144);
  type metadata accessor for MetaDomainAction(0LL);
  return NLIntent.init(rootNode:score:originalInput:allWordsMatched:primary:usingExplicitInput:intentRank:isNERBasedParse:intentID:nlState:mitigatorClassification:strippedVoiceTrigger:isInvalidVoiceTrigger:isSuggested:metaDomainActions:)( v168,  0LL,  1LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  1,  0LL,  1,  v143,  v145,  0LL,  0LL,  0,  _swiftEmptyArrayStorage);
}

void *LocationSearchIntentBuilder.deinit()
{
  return v0;
}

uint64_t LocationSearchIntentBuilder.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 120LL, 7LL);
}

uint64_t LocationSearchIntentBuilder.init()()
{
  *(_DWORD *)(v0 + 16) = 50924040;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0u;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Apple_Parsec_Siri_V2alpha_LocationSearchVerb, LocationSearchIntent.LocationSearchVerbValue)>);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchVerb, LocationSearchIntent.LocationSearchVerbValue));
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_949C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.unknown(_:);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchVerb(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104LL);
  v12(v8, v10, v11);
  *(_BYTE *)(v8 + v9) = 0;
  uint64_t v13 = *(int *)(v2 + 48);
  v12(v8 + v4, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.share(_:), v11);
  *(_BYTE *)(v8 + v4 + v__swift_destroy_boxed_opaque_existential_0Tm(v0 + 13) = 1;
  uint64_t v14 = *(int *)(v2 + 48);
  v12(v8 + 2 * v4, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.stopShare(_:), v11);
  *(_BYTE *)(v8 + 2 * v4 + v14) = 2;
  uint64_t v15 = *(int *)(v2 + 48);
  v12(v8 + 3 * v4, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.report(_:), v11);
  *(_BYTE *)(v8 + 3 * v4 + v15) = 3;
  uint64_t v16 = *(int *)(v2 + 48);
  v12(v8 + 4 * v4, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.confirmReport(_:), v11);
  *(_BYTE *)(v8 + 4 * v4 + v16) = 5;
  uint64_t v17 = v8 + 5 * v4;
  uint64_t v18 = *(int *)(v2 + 48);
  v12(v17, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.clearReport(_:), v11);
  *(_BYTE *)(v17 + v__swift_destroy_boxed_opaque_existential_0Tm(v0 + 18) = 4;
  *(void *)(v0 + 88) = specialized Dictionary.init(dictionaryLiteral:)(v7);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Apple_Parsec_Siri_V2alpha_LocationSearchNoun, LocationSearchIntent.LocationSearchNounValue)>);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchNoun, LocationSearchIntent.LocationSearchNounValue));
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v21 + 72);
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = (v23 + 32) & ~v23;
  uint64_t v25 = swift_allocObject(v19, v24 + 2 * v22, v23 | 7);
  *(_OWORD *)(v25 + 16) = xmmword_949D0;
  uint64_t v26 = v25 + v24;
  uint64_t v27 = *(int *)(v20 + 48);
  uint64_t v28 = enum case for Apple_Parsec_Siri_V2alpha_LocationSearchNoun.unknown(_:);
  uint64_t v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNoun(0LL);
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 104LL);
  v30(v26, v28, v29);
  *(_BYTE *)(v26 + v2__swift_destroy_boxed_opaque_existential_0Tm(v0 + 7) = 0;
  uint64_t v31 = v26 + v22;
  uint64_t v32 = *(int *)(v20 + 48);
  v30(v31, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchNoun.eta(_:), v29);
  *(_BYTE *)(v31 + v3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 6;
  *(void *)(v0 + 96) = specialized Dictionary.init(dictionaryLiteral:)(v25);
  uint64_t v72 = v0;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation, LocationSearchIntent.LocationSearchConfirmationValue)>);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation, LocationSearchIntent.LocationSearchConfirmationValue));
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(void *)(v35 + 72);
  uint64_t v37 = *(unsigned __int8 *)(v35 + 80);
  uint64_t v38 = (v37 + 32) & ~v37;
  uint64_t v39 = 2 * v36;
  uint64_t v40 = swift_allocObject(v33, v38 + 3 * v36, v37 | 7);
  *(_OWORD *)(v40 + 16) = xmmword_949B0;
  uint64_t v41 = v40 + v38;
  uint64_t v42 = *(int *)(v34 + 48);
  uint64_t v43 = enum case for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation.yes(_:);
  uint64_t v44 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation(0LL);
  uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 104LL);
  v45(v41, v43, v44);
  *(_BYTE *)(v41 + v4__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0;
  uint64_t v46 = v41 + v36;
  uint64_t v47 = *(int *)(v34 + 48);
  v45(v46, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation.no(_:), v44);
  *(_BYTE *)(v46 + v4__swift_destroy_boxed_opaque_existential_0Tm(v0 + 7) = 1;
  uint64_t v48 = v41 + v39;
  uint64_t v49 = *(int *)(v34 + 48);
  v45(v48, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation.cancel(_:), v44);
  *(_BYTE *)(v48 + v49) = 2;
  *(void *)(v0 + 104) = specialized Dictionary.init(dictionaryLiteral:)(v40);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType, LocationSearchIntent.LocationSearchIncidentTypeValue)>);
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType, LocationSearchIntent.LocationSearchIncidentTypeValue));
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = *(void *)(v52 + 72);
  uint64_t v54 = *(unsigned __int8 *)(v52 + 80);
  uint64_t v55 = (v54 + 32) & ~v54;
  uint64_t v56 = swift_allocObject(v50, v55 + 9 * v53, v54 | 7);
  *(_OWORD *)(v56 + 16) = xmmword_949E0;
  uint64_t v57 = v56 + v55;
  uint64_t v58 = *(int *)(v51 + 48);
  uint64_t v59 = enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.accident(_:);
  uint64_t v60 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType(0LL);
  uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 104LL);
  v61(v57, v59, v60);
  *(_BYTE *)(v57 + v58) = 0;
  uint64_t v62 = *(int *)(v51 + 48);
  v61(v57 + v53, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.hazard(_:), v60);
  *(_BYTE *)(v57 + v53 + v6__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2;
  uint64_t v63 = *(int *)(v51 + 48);
  v61(v57 + 2 * v53, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.incident(_:), v60);
  *(_BYTE *)(v57 + 2 * v53 + v63) = 1;
  uint64_t v64 = *(int *)(v51 + 48);
  v61(v57 + 3 * v53, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.laneClosed(_:), v60);
  *(_BYTE *)(v57 + 3 * v53 + v64) = 5;
  uint64_t v65 = *(int *)(v51 + 48);
  v61(v57 + 4 * v53, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.problem(_:), v60);
  *(_BYTE *)(v57 + 4 * v53 + v65) = 8;
  uint64_t v66 = *(int *)(v51 + 48);
  v61(v57 + 5 * v53, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.redLightCamera(_:), v60);
  *(_BYTE *)(v57 + 5 * v53 + v66) = 7;
  uint64_t v67 = *(int *)(v51 + 48);
  v61(v57 + 6 * v53, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.roadClosed(_:), v60);
  *(_BYTE *)(v57 + 6 * v53 + v6__swift_destroy_boxed_opaque_existential_0Tm(v0 + 7) = 6;
  uint64_t v68 = *(int *)(v51 + 48);
  v61(v57 + 7 * v53, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.roadwork(_:), v60);
  *(_BYTE *)(v57 + 7 * v53 + v68) = 4;
  uint64_t v69 = v57 + 8 * v53;
  uint64_t v70 = *(int *)(v51 + 48);
  v61(v69, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.speedCheck(_:), v60);
  *(_BYTE *)(v69 + v7specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 3;
  *(void *)(v72 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = specialized Dictionary.init(dictionaryLiteral:)(v56);
  return v72;
}

void *specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t v1 = (void *)*v0;
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native(*v0);
  *uint64_t v0 = v1;
  if (!(_DWORD)result)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( result,  v1[2] + 1LL,  1,  v1);
    *uint64_t v0 = result;
  }

  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IntentNode>);
      uint64_t v11 = (void *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
      size_t v12 = _swift_stdlib_malloc_size(v11);
      _OWORD v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4]) {
          memmove(v13, a4 + 4, 40 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<DisplayHint>,  (uint64_t (*)(void))&type metadata accessor for DisplayHint);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<SemanticValue>,  (uint64_t (*)(void))&type metadata accessor for SemanticValue);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v10 = a2;
  }

  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v15) {
    goto LABEL_29;
  }
  if (v19 - v17 == 0x8000000000000000LL && v15 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    unint64_t v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(void *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }

    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }

    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v11, v24, a4, a6);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v9 = a4(0LL);
  uint64_t v14 = v9;
  uint64_t v15 = a5;
  uint64_t v10 = __swift_allocate_boxed_opaque_existential_0(&v13);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v10, a2, v9);
  uint64_t v11 = *a3;
  *(void *)(v11 + 16) = a1 + 1;
  return outlined init with take of CATType(&v13, v11 + 40 * a1 + 32);
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v9 = __swift_allocate_boxed_opaque_existential_0(&v12);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32LL))(v9, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return outlined init with take of CATType(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_6CAB0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176LL))();
  *a2 = result;
  return result;
}

uint64_t sub_6CAE0(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 184LL))(*a1);
}

uint64_t sub_6CB0C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200LL))();
  *a2 = result;
  return result;
}

uint64_t sub_6CB3C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 208LL))(*a1);
}

uint64_t sub_6CB68@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 224LL))();
  *a2 = result;
  return result;
}

uint64_t sub_6CB98(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 232LL))(*a1);
}

uint64_t sub_6CBC4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 248LL))();
  *a2 = result;
  return result;
}

uint64_t sub_6CBF4(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 256LL))(*a1);
}

uint64_t sub_6CC20@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 272LL))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_6CC50(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 280LL);
  swift_bridgeObjectRetain(v3);
  return v4(v2, v3);
}

uint64_t sub_6CC94@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 296LL))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_6CCC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 304LL);
  swift_bridgeObjectRetain(v3);
  return v4(v2, v3);
}

uint64_t sub_6CD08@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 320LL))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_6CD38(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 328LL);
  swift_bridgeObjectRetain(v3);
  return v4(v2, v3);
}

uint64_t sub_6CD7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 344LL))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_6CDAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 352LL);
  swift_bridgeObjectRetain(v3);
  return v4(v2, v3);
}

uint64_t type metadata accessor for LocationSearchIntentBuilder()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin27LocationSearchIntentBuilder);
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 40 * a1 + 32;
  unint64_t v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentNode);
    swift_arrayInitWithCopy(a3);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t LocationFetchFlow.__allocating_init(flowHelper:requiredAccess:)(__int128 *a1, char a2)
{
  uint64_t v5 = swift_allocObject(v2, 89LL, 7LL);
  LocationFetchFlow.init(flowHelper:requiredAccess:)(a1, a2);
  return v5;
}

void *LocationFetchFlow.exitValue.getter()
{
  uint64_t v1 = *(void **)(v0 + 80);
  outlined copy of LocationFetchFlow.ExitValue(v1, *(_BYTE *)(v0 + 88));
  return v1;
}

void LocationFetchFlow.exitValue.setter(uint64_t a1, char a2)
{
  uint64_t v5 = *(void **)(v2 + 80);
  *(void *)(v2 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = a1;
  unsigned __int8 v6 = *(_BYTE *)(v2 + 88);
  *(_BYTE *)(v2 + 88) = a2;
  outlined consume of LocationFetchFlow.ExitValue(v5, v6);
}

uint64_t LocationFetchFlow.init(flowHelper:requiredAccess:)(__int128 *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CATService();
  uint64_t v7 = swift_allocObject(v6, 40LL, 7LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v6);
  *(void *)(v7 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  type metadata accessor for OS_os_log();
  *(void *)(v7 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v7 + 16) = 0;
  *(void *)(v3 + 16) = v7;
  *(void *)(v3 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000017LL,  0x800000000009BC60LL);
  uint64_t v9 = type metadata accessor for RuntimeError();
  uint64_t v10 = swift_allocObject(v9, 32LL, 7LL);
  *(void *)(v10 + 16) = 0xD000000000000019LL;
  *(void *)(v10 + 24) = 0x800000000009BC80LL;
  uint64_t v11 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RuntimeError,  (uint64_t)&protocol conformance descriptor for RuntimeError);
  uint64_t v12 = swift_allocError(v9, v11, 0LL, 0LL);
  *uint64_t v13 = v10;
  *(void *)(v3 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v12;
  *(_BYTE *)(v3 + 88) = 2;
  outlined init with take of CATType(a1, v3 + 24);
  *(_BYTE *)(v3 + 64) = a2;
  return v3;
}

uint64_t LocationFetchFlow.__allocating_init()()
{
  void v2[3] = &type metadata for FlowHelperImpl;
  void v2[4] = &protocol witness table for FlowHelperImpl;
  v2[0] = swift_allocObject(&unk_BB7E8, 192LL, 7LL);
  FlowHelperImpl.init()((void *)(v2[0] + 16LL));
  return (*(uint64_t (**)(void *, void))(v0 + 168))(v2, 0LL);
}

uint64_t sub_6D320()
{
  return swift_deallocObject(v0, 192LL, 7LL);
}

uint64_t LocationFetchFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t Flow = type metadata accessor for LocationFetchFlow();
  uint64_t v6 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type LocationFetchFlow and conformance LocationFetchFlow,  v5,  (uint64_t (*)(uint64_t))type metadata accessor for LocationFetchFlow,  (uint64_t)&protocol conformance descriptor for LocationFetchFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, Flow, v6);
}

uint64_t type metadata accessor for LocationFetchFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin17LocationFetchFlow);
}

uint64_t LocationFetchFlow.execute()(uint64_t a1)
{
  v2[114] = v1;
  v2[113] = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[115] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for AceOutput(0LL);
  v2[116] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[117] = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  v2[118] = v6;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[119] = swift_task_alloc(v7);
  v2[120] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for TemplatingResult(0LL);
  v2[121] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[122] = v9;
  v2[123] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?)
                               - 8)
                   + 64LL)
       + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[124] = swift_task_alloc(v10);
  v2[125] = swift_task_alloc(v10);
  v2[126] = swift_task_alloc(v10);
  v2[127] = swift_task_alloc(v10);
  v2[128] = swift_task_alloc(v10);
  v2[129] = swift_task_alloc(v10);
  v2[130] = swift_task_alloc(v10);
  v2[131] = swift_task_alloc(v10);
  return swift_task_switch(LocationFetchFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjCClassFromMetadata;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  void *v26;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  double v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE v87[40];
  uint64_t v2 = *(void *)(v1 + 768);
  uint64_t v3 = *(void *)(v1 + 776);
  uint64_t v4 = *(os_log_s **)(*(void *)(v1 + 912) + 72LL);
  uint64_t v5 = static os_log_type_t.default.getter(a1);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v6 = 134217984;
    *(void *)(v1 + 896) = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 896, v1 + 904);
    _os_log_impl(&dword_0, v4, v5, "LocationService Auth level: %lu", v6, 0xCu);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  switch(v2)
  {
    case 0LL:
    case 2LL:
      unint64_t v7 = v1 + 288;
      uint64_t v8 = *(void *)(v1 + 912);
      uint64_t v9 = lazy protocol witness table accessor for type Errors and conformance Errors();
      unint64_t v10 = swift_allocError(&type metadata for Errors, v9, 0LL, 0LL);
      *(void *)uint64_t v11 = 0xD000000000000022LL;
      *(void *)(v11 + 8) = 0x800000000009EA70LL;
      *(_BYTE *)(v11 + 16) = 2;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 152LL))(v10, 2LL);
      uint64_t v12 = type metadata accessor for CATService();
      uint64_t v13 = swift_allocObject(v12, 40LL, 7LL);
      *(void *)(v1 + 111__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v13;
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v12);
      *(void *)(v13 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
      type metadata accessor for OS_os_log();
      unint64_t v15 = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
      *(void *)(v13 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v15;
      *(_BYTE *)(v13 + 16) = 0;
      *(void *)(v1 + 31__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &type metadata for LocationServices;
      *(void *)(v1 + 32specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &protocol witness table for LocationServices;
      *(_BYTE *)(v1 + 288) = 2;
      uint64_t v16 = static DialogHelper.globals.getter(v15);
      *(void *)(v1 + 112specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v16;
      uint64_t v17 = (void *)swift_task_alloc(dword_C5C5C);
      *(void *)(v1 + 1128) = v17;
      void *v17 = v1;
      v17[1] = LocationFetchFlow.execute();
      uint64_t v18 = *(void *)(v1 + 1032);
      goto LABEL_11;
    case 1LL:
      uint64_t v28 = *(void **)(v1 + 912);
      (*(void (**)(void, uint64_t))(*v28 + 152LL))(0LL, 3LL);
      uint64_t v29 = v28[6];
      uint64_t v30 = v28[7];
      __swift_project_boxed_opaque_existential_1(v28 + 3, v29);
      (*(void (**)(uint64_t, uint64_t))(v30 + 32))(v29, v30);
      *(void *)(v1 + 108specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = specialized static LocationServicesViews.makeDeepLink(status:device:)( 2u,  (void *)(v1 + 248));
      __swift_destroy_boxed_opaque_existential_0Tm((void *)(v1 + 248));
      uint64_t v31 = type metadata accessor for CATService();
      uint64_t v32 = swift_allocObject(v31, 40LL, 7LL);
      *(void *)(v1 + 1088) = v32;
      uint64_t v33 = swift_getObjCClassFromMetadata(v31);
      *(void *)(v32 + 24) = [(id)objc_opt_self(NSBundle) bundleForClass:v33];
      type metadata accessor for OS_os_log();
      uint64_t v34 = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
      *(void *)(v32 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v34;
      *(_BYTE *)(v32 + 16) = 0;
      *(void *)(v1 + 23__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &type metadata for LocationServices;
      *(void *)(v1 + 24specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &protocol witness table for LocationServices;
      *(_BYTE *)(v1 + 208) = 0;
      uint64_t v35 = static DialogHelper.globals.getter(v34);
      *(void *)(v1 + 1096) = v35;
      uint64_t v36 = (void *)swift_task_alloc(dword_C5C5C);
      *(void *)(v1 + 1104) = v36;
      *uint64_t v36 = v1;
      v36[1] = LocationFetchFlow.execute();
      uint64_t v18 = *(void *)(v1 + 1040);
      uint64_t v37 = v1 + 208;
      uint64_t v38 = v35;
      return CATService.execute(model:globals:)(v18, v37, v38);
    case 3LL:
    case 4LL:
      if (v3 == 1)
      {
        size_t v19 = *(void **)(v1 + 912);
        uint64_t v20 = v19[6];
        uint64_t v21 = v19[7];
        __swift_project_boxed_opaque_existential_1(v19 + 3, v20);
        (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
        *(void *)(v1 + 1144) = specialized static LocationServicesViews.makeDeepLink(status:device:)( 0,  (void *)(v1 + 528));
        uint64_t v22 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v1 + 528));
        unint64_t v23 = v19[2];
        *(void *)(v1 + 43__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &type metadata for LocationServices;
        *(void *)(v1 + 44specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &protocol witness table for LocationServices;
        *(_BYTE *)(v1 + 408) = 1;
        unint64_t v24 = static DialogHelper.globals.getter(v22);
        *(void *)(v1 + 115__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v24;
        unint64_t v25 = *(int **)(*(void *)v23 + 112LL);
        uint64_t v84 = (int *)((char *)v25 + *v25);
        uint64_t v26 = (void *)swift_task_alloc(v25[1]);
        *(void *)(v1 + 116specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v26;
        *uint64_t v26 = v1;
        v26[1] = LocationFetchFlow.execute();
        return ((uint64_t (*)(void, uint64_t, uint64_t))v84)(*(void *)(v1 + 1024), v1 + 408, v24);
      }

      else
      {
        uint64_t v39 = *(void *)(v1 + 1008);
        uint64_t v40 = *(void *)(v1 + 976);
        uint64_t v41 = *(void *)(v1 + 968);
        outlined init with copy of TemplatingResult?(*(void *)(v1 + 1048), v39);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v39, 1LL, v41) == 1)
        {
          uint64_t v42 = *(void *)(v1 + 1008);
          outlined destroy of (label: String?, value: Any)?( *(void *)(v1 + 1048),  &demangling cache variable for type metadata for TemplatingResult?);
          swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
          outlined destroy of (label: String?, value: Any)?( v42,  &demangling cache variable for type metadata for TemplatingResult?);
          uint64_t v43 = *(void **)(v1 + 1056);
          uint64_t v44 = *(double *)*(&off_BB9C8 + *(char *)(*(void *)(v1 + 912) + 64LL));
          *(void *)(v1 + 184) = v1 + 872;
          *(void *)(v1 + 144) = v1;
          *(void *)(v1 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = LocationFetchFlow.execute();
          *(void *)(v1 + 40specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = swift_continuation_init(v1 + 144, 1LL);
          *(void *)(v1 + 368) = _NSConcreteStackBlock;
          *(void *)(v1 + 376) = 0x40000000LL;
          *(void *)(v1 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
          *(void *)(v1 + 39__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &block_descriptor_1;
          [v43 currentLocationWithAccuracy:v1 + 368 timeout:v44 completion:2.0];
          return swift_continuation_await(v1 + 144);
        }

        else
        {
          uint64_t v82 = *(void **)(v1 + 1056);
          uint64_t v85 = *(void *)(v1 + 1048);
          uint64_t v54 = *(void *)(v1 + 984);
          uint64_t v81 = *(void *)(v1 + 976);
          uint64_t v80 = *(void *)(v1 + 968);
          uint64_t v55 = *(void *)(v1 + 960);
          uint64_t v78 = *(void *)(v1 + 952);
          uint64_t v79 = *(void *)(v1 + 944);
          uint64_t v56 = *(void *)(v1 + 936);
          uint64_t v77 = *(void *)(v1 + 928);
          uint64_t v57 = *(void *)(v1 + 920);
          uint64_t v58 = *(void **)(v1 + 912);
          (*(void (**)(uint64_t, void))(v81 + 32))(v54, *(void *)(v1 + 1008));
          uint64_t v60 = v58[6];
          uint64_t v59 = v58[7];
          __swift_project_boxed_opaque_existential_1(v58 + 3, v60);
          (*(void (**)(uint64_t, uint64_t))(v59 + 32))(v60, v59);
          uint64_t v61 = type metadata accessor for NLContextUpdate(0LL);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56LL))(v57, 1LL, 1LL, v61);
          *(void *)(v1 + 76specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0LL;
          *(_OWORD *)(v1 + 728) = 0u;
          *(_OWORD *)(v1 + 744) = 0u;
          static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)( v54,  v1 + 448,  1LL,  _swiftEmptyArrayStorage,  0LL,  1LL,  v57,  _swiftEmptyArrayStorage,  v1 + 728,  0LL);
          swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
          outlined destroy of (label: String?, value: Any)?( v1 + 728,  &demangling cache variable for type metadata for FlowActivity?);
          outlined destroy of (label: String?, value: Any)?( v57,  &demangling cache variable for type metadata for NLContextUpdate?);
          __swift_destroy_boxed_opaque_existential_0Tm((void *)(v1 + 448));
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v78, v55, v77);
          uint64_t v62 = *(unsigned __int8 *)(v56 + 80);
          uint64_t v63 = (v62 + 16) & ~v62;
          uint64_t v64 = swift_allocObject(&unk_BB858, v63 + v79, v62 | 7);
          uint64_t v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 32))(v64 + v63, v78, v77);
          static OutputPublisherFactory.makeOutputPublisherAsync()(v65);
          uint64_t v66 = type metadata accessor for SimpleOutputFlowAsync(0LL);
          swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
          uint64_t v67 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v87,  &async function pointer to partial apply for closure #1 in LocationFetchFlow.execute(),  v64);
          *(void *)(v1 + 864) = v67;
          static ExecuteResponse.complete<A>(next:)(v1 + 864, v66, &protocol witness table for SimpleOutputFlowAsync);

          swift_release(v67);
          (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v77);
          (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v54, v80);
          outlined destroy of (label: String?, value: Any)?( v85,  &demangling cache variable for type metadata for TemplatingResult?);
          uint64_t v68 = *(void *)(v1 + 1040);
          uint64_t v69 = *(void *)(v1 + 1032);
          uint64_t v70 = *(void *)(v1 + 1024);
          char v71 = *(void *)(v1 + 1016);
          uint64_t v72 = *(void *)(v1 + 1008);
          uint64_t v73 = *(void *)(v1 + 1000);
          uint64_t v74 = *(void *)(v1 + 992);
          uint64_t v75 = *(void *)(v1 + 984);
          uint64_t v76 = *(void *)(v1 + 960);
          uint64_t v83 = *(void *)(v1 + 952);
          uint64_t v86 = *(void *)(v1 + 920);
          swift_task_dealloc(*(void *)(v1 + 1048));
          swift_task_dealloc(v68);
          swift_task_dealloc(v69);
          swift_task_dealloc(v70);
          swift_task_dealloc(v71);
          swift_task_dealloc(v72);
          swift_task_dealloc(v73);
          swift_task_dealloc(v74);
          swift_task_dealloc(v75);
          swift_task_dealloc(v76);
          swift_task_dealloc(v83);
          swift_task_dealloc(v86);
          return (*(uint64_t (**)(void))(v1 + 8))();
        }
      }

    default:
      unint64_t v7 = v1 + 568;
      uint64_t v45 = *(void *)(v1 + 912);
      uint64_t v46 = lazy protocol witness table accessor for type Errors and conformance Errors();
      uint64_t v47 = swift_allocError(&type metadata for Errors, v46, 0LL, 0LL);
      *(void *)uint64_t v48 = 0xD000000000000019LL;
      *(void *)(v48 + 8) = 0x800000000009EA50LL;
      *(_BYTE *)(v48 + 16) = 1;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v45 + 152LL))(v47, 2LL);
      uint64_t v49 = type metadata accessor for CATService();
      uint64_t v50 = swift_allocObject(v49, 40LL, 7LL);
      *(void *)(v1 + 1176) = v50;
      uint64_t v51 = swift_getObjCClassFromMetadata(v49);
      *(void *)(v50 + 24) = [(id)objc_opt_self(NSBundle) bundleForClass:v51];
      type metadata accessor for OS_os_log();
      uint64_t v52 = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
      *(void *)(v50 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v52;
      *(_BYTE *)(v50 + 16) = 0;
      *(void *)(v1 + 59__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &type metadata for LocationServices;
      *(void *)(v1 + 60specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &protocol witness table for LocationServices;
      *(_BYTE *)(v1 + 568) = 2;
      uint64_t v16 = static DialogHelper.globals.getter(v52);
      *(void *)(v1 + 1184) = v16;
      uint64_t v53 = (void *)swift_task_alloc(dword_C5C5C);
      *(void *)(v1 + 119__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v53;
      uint8_t *v53 = v1;
      v53[1] = LocationFetchFlow.execute();
      uint64_t v18 = *(void *)(v1 + 1016);
LABEL_11:
      uint64_t v37 = v7;
      uint64_t v38 = v16;
      return CATService.execute(model:globals:)(v18, v37, v38);
  }

{
  uint64_t v1;
  void *v2;
  os_log_s *v3;
  uint64_t v4;
  id v5;
  os_log_type_t v6;
  uint8_t *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;
  double v19;
  double v20;
  double *v21;
  uint64_t v22;
  double v23;
  id v24;
  uint64_t v25;
  os_log_type_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t (*v36)(void *, void);
  void *v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_log_t log;
  os_log_s *loga;
  os_log_t logb;
  uint64_t v53;
  uint64_t v54;
  uint64_t v2 = *(void **)(v1 + 872);
  *(void *)(v1 + 1208) = v2;
  uint64_t v3 = *(os_log_s **)(*(void *)(v1 + 912) + 72LL);
  if (v2)
  {
    uint64_t v4 = v1 + 824;
    *(void *)(v1 + 1216) = v3;
    uint64_t v5 = v2;
    uint64_t v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v3, v6))
    {
      unint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      os_log_t log = (os_log_t)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)unint64_t v7 = 138412290;
      *(void *)(v1 + 816) = v5;
      uint64_t v8 = v5;
      uint64_t v4 = v1 + 824;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 816, v1 + 824);
      *(void *)os_log_t log = v2;

      _os_log_impl(&dword_0, v3, v6, "location info: %@", v7, 0xCu);
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(log, 1LL, v9);
      swift_slowDealloc(log, -1LL, -1LL);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v18 = *(void *)(v1 + 912);
    [v5 horizontalAccuracy];
    uint64_t v20 = v19;
    uint64_t v21 = (double *)*(&off_BB9E8 + *(char *)(v18 + 64));
    uint64_t v22 = *(void *)(v1 + 912);
    unint64_t v23 = *v21;
    unint64_t v24 = v5;
    unint64_t v25 = swift_retain(v22);
    uint64_t v26 = static os_log_type_t.default.getter(v25);
    uint64_t v27 = os_log_type_enabled(v3, v26);
    uint64_t v28 = *(void *)(v1 + 912);
    if (v20 <= v23)
    {
      if (v27)
      {
        uint64_t v53 = v4;
        uint64_t v32 = swift_slowAlloc(22LL, -1LL);
        *(_DWORD *)uint64_t v32 = 134218240;
        loga = v3;
        [v24 horizontalAccuracy];
        *(void *)(v1 + 83__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 832, v1 + 840);

        *(_WORD *)(v32 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2048;
        uint64_t v34 = *(void *)(v1 + 912);
        *(double *)(v1 + 824) = round(*(double *)*(&off_BB9E8 + *(char *)(v28 + 64)));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v53, v1 + 832);
        swift_release(v34);
        _os_log_impl( &dword_0,  loga,  v26,  "horizontal accuracy is within required access threshold: %f <= %f",  (uint8_t *)v32,  0x16u);
        swift_slowDealloc(v32, -1LL, -1LL);
      }

      else
      {

        swift_release(v28);
      }

      uint64_t v36 = *(uint64_t (**)(void *, void))(**(void **)(v1 + 912) + 152LL);
      uint64_t v37 = *(void **)(v1 + 1208);
      uint64_t v38 = *(void **)(v1 + 1056);
      uint64_t v39 = v24;
      uint64_t v40 = v36(v2, 0LL);
      static ExecuteResponse.complete()(v40);

      uint64_t v41 = *(void *)(v1 + 1040);
      uint64_t v42 = *(void *)(v1 + 1032);
      uint64_t v43 = *(void *)(v1 + 1024);
      uint64_t v44 = *(void *)(v1 + 1016);
      uint64_t v45 = *(void *)(v1 + 1008);
      uint64_t v46 = *(void *)(v1 + 1000);
      uint64_t v47 = *(void *)(v1 + 992);
      uint64_t v48 = *(void *)(v1 + 984);
      uint64_t v49 = *(void *)(v1 + 960);
      os_log_t logb = *(os_log_t *)(v1 + 952);
      uint64_t v54 = *(void *)(v1 + 920);
      swift_task_dealloc(*(void *)(v1 + 1048));
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(logb);
      swift_task_dealloc(v54);
      return (*(uint64_t (**)(void))(v1 + 8))();
    }

    else
    {
      if (v27)
      {
        uint64_t v29 = swift_slowAlloc(22LL, -1LL);
        *(_DWORD *)uint64_t v29 = 134218240;
        [v24 horizontalAccuracy];
        *(void *)(v1 + 856) = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 856, v1 + 864);

        *(_WORD *)(v29 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2048;
        uint64_t v31 = *(void *)(v1 + 912);
        *(double *)(v1 + 848) = round(*(double *)*(&off_BB9E8 + *(char *)(v28 + 64)));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 848, v1 + 856);
        swift_release(v31);
        _os_log_impl( &dword_0,  v3,  v26,  "horizontal accuracy is too high, we cannot reliably use this location value: %f > %f",  (uint8_t *)v29,  0x16u);
        swift_slowDealloc(v29, -1LL, -1LL);
      }

      else
      {

        swift_release(v28);
      }

      uint64_t v35 = *(void **)(v1 + 1056);
      *(void *)(v1 + 56) = v1 + 784;
      *(void *)(v1 + 16) = v1;
      *(void *)(v1 + 24) = LocationFetchFlow.execute();
      *(void *)(v1 + 52specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = swift_continuation_init(v1 + 16, 1LL);
      *(void *)(v1 + 488) = _NSConcreteStackBlock;
      *(void *)(v1 + 496) = 0x40000000LL;
      *(void *)(v1 + 504) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFLocationAuthorizationStyle, @unowned CLAccuracyAuthorization, @unowned NSError?) -> () with result type (AFLocationAuthorizationStyle, CLAccuracyAuthorization);
      *(void *)(v1 + 51__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &block_descriptor_3;
      [v35 currentAuthorizationStyle:v1 + 488];
      return swift_continuation_await(v1 + 16);
    }
  }

  else
  {
    unint64_t v10 = static os_log_type_t.default.getter(a1);
    if (os_log_type_enabled(v3, (os_log_type_t)v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl( &dword_0,  v3,  (os_log_type_t)v10,  "Location Service could not get requested accuracy within timeout",  v11,  2u);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    uint64_t v12 = *(void *)(v1 + 912);
    uint64_t v13 = lazy protocol witness table accessor for type Errors and conformance Errors();
    unint64_t v14 = swift_allocError(&type metadata for Errors, v13, 0LL, 0LL);
    *(void *)unint64_t v15 = 0xD000000000000021LL;
    *(void *)(v15 + 8) = 0x800000000009E9D0LL;
    *(_BYTE *)(v15 + 16) = 2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 152LL))(v14, 2LL);
    uint64_t v16 = (void *)swift_task_alloc(dword_C853C);
    *(void *)(v1 + 1248) = v16;
    *uint64_t v16 = v1;
    v16[1] = LocationFetchFlow.execute();
    return LocationFetchFlow.unknownLocationOutput()(*(void *)(v1 + 904));
  }

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)();
  os_log_s *v9;
  os_log_type_t v10;
  os_log_s *v11;
  uint8_t *v12;
  void *v13;
  uint64_t (*v14)(void *, uint64_t);
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_s *v28;
  os_log_type_t v29;
  os_log_s *v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v2 = *(void *)(v1 + 792);
  if (v2 == 1)
  {
    uint64_t v9 = *(os_log_s **)(v1 + 1216);
    unint64_t v10 = static os_log_type_t.default.getter(a1);
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = *(os_log_s **)(v1 + 1216);
      uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_0, v11, v10, "precise location is not enabled", v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    uint64_t v13 = *(void **)(v1 + 1208);
    unint64_t v14 = *(uint64_t (**)(void *, uint64_t))(**(void **)(v1 + 912) + 152LL);
    unint64_t v15 = *(void **)(v1 + 1056);
    uint64_t v16 = v13;
    uint64_t v17 = v14(v13, 1LL);
    static ExecuteResponse.complete()(v17);

    uint64_t v18 = *(void *)(v1 + 1040);
    size_t v19 = *(void *)(v1 + 1032);
    uint64_t v20 = *(void *)(v1 + 1024);
    uint64_t v21 = *(void *)(v1 + 1016);
    uint64_t v22 = *(void *)(v1 + 1008);
    unint64_t v23 = *(void *)(v1 + 1000);
    unint64_t v24 = *(void *)(v1 + 992);
    unint64_t v25 = *(void *)(v1 + 984);
    uint64_t v26 = *(void *)(v1 + 960);
    uint64_t v32 = *(void *)(v1 + 952);
    uint64_t v33 = *(void *)(v1 + 920);
    swift_task_dealloc(*(void *)(v1 + 1048));
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  else
  {
    if (v2)
    {
      uint64_t v28 = *(os_log_s **)(v1 + 1216);
      uint64_t v29 = static os_log_type_t.default.getter(a1);
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = *(os_log_s **)(v1 + 1216);
        uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v31 = 0;
        _os_log_impl( &dword_0,  v30,  v29,  "unknown location accuracy level, support for it has not been implemented",  v31,  2u);
        swift_slowDealloc(v31, -1LL, -1LL);
      }

      unint64_t v7 = (void *)swift_task_alloc(dword_C853C);
      *(void *)(v1 + 124specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v7;
      uint64_t v8 = LocationFetchFlow.execute();
    }

    else
    {
      uint64_t v3 = *(void *)(v1 + 912);
      uint64_t v4 = lazy protocol witness table accessor for type Errors and conformance Errors();
      uint64_t v5 = swift_allocError(&type metadata for Errors, v4, 0LL, 0LL);
      *(void *)uint64_t v6 = 0xD00000000000002ALL;
      *(void *)(v6 + 8) = 0x800000000009EA00LL;
      *(_BYTE *)(v6 + 16) = 2;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 152LL))(v5, 2LL);
      unint64_t v7 = (void *)swift_task_alloc(dword_C853C);
      *(void *)(v1 + 123__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v7;
      uint64_t v8 = LocationFetchFlow.execute();
    }

    *unint64_t v7 = v1;
    v7[1] = v8;
    return LocationFetchFlow.unknownLocationOutput()(*(void *)(v1 + 904));
  }

{
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  uint64_t v4;
  os_log_type_t v5;
  os_log_s *v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v2 = *(void *)(v1 + 1224);
  uint64_t v3 = *(os_log_s **)(v1 + 1216);
  swift_willThrow(a1);
  uint64_t v4 = swift_errorRelease(v2);
  uint64_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v3, v5))
  {
    uint64_t v6 = *(os_log_s **)(v1 + 1216);
    unint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v7 = 0;
    _os_log_impl(&dword_0, v6, v5, "location accuracy level is inaccessible", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  uint64_t v8 = *(void *)(v1 + 912);
  uint64_t v9 = lazy protocol witness table accessor for type Errors and conformance Errors();
  unint64_t v10 = swift_allocError(&type metadata for Errors, v9, 0LL, 0LL);
  *(void *)uint64_t v11 = 0xD000000000000038LL;
  *(void *)(v11 + 8) = 0x800000000009E960LL;
  *(_BYTE *)(v11 + 16) = 0;
  uint64_t v12 = *(void **)(v1 + 1208);
  uint64_t v13 = *(void **)(v1 + 1056);
  unint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 152LL))(v10, 2LL);
  static ExecuteResponse.complete()(v14);

  unint64_t v15 = *(void *)(v1 + 1040);
  uint64_t v16 = *(void *)(v1 + 1032);
  uint64_t v17 = *(void *)(v1 + 1024);
  uint64_t v18 = *(void *)(v1 + 1016);
  size_t v19 = *(void *)(v1 + 1008);
  uint64_t v20 = *(void *)(v1 + 1000);
  uint64_t v21 = *(void *)(v1 + 992);
  uint64_t v22 = *(void *)(v1 + 984);
  unint64_t v23 = *(void *)(v1 + 960);
  unint64_t v25 = *(void *)(v1 + 952);
  uint64_t v26 = *(void *)(v1 + 920);
  swift_task_dealloc(*(void *)(v1 + 1048));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  os_log_type_t v12;
  os_log_s *v13;
  os_log_type_t v14;
  id v15;
  uint8_t *v16;
  uint64_t *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjCClassFromMetadata;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  double v40;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  os_log_s *log;
  os_log_t loga;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE v84[48];
  swift_willThrow(a1);
  uint64_t v2 = *(void *)(v1 + 1072);
  *(void *)(v1 + 1256) = _swiftEmptyArrayStorage;
  *(void *)(v1 + 888) = v2;
  swift_errorRetain(v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  type metadata accessor for related decl 'e' for AFLocationServiceErrorCode(0LL);
  uint64_t v5 = v4;
  uint64_t v6 = swift_dynamicCast(v1 + 880, v1 + 888, v3, v4, 0LL);
  unint64_t v7 = *(void **)(v1 + 912);
  if ((v6 & 1) != 0)
  {
    uint64_t v8 = (void *)(v1 + 800);
    uint64_t v9 = (void *)(v1 + 808);
    unint64_t v10 = swift_errorRelease(v2);
    uint64_t v11 = *(void **)(v1 + 880);
    *(void *)(v1 + 1264) = v11;
    uint64_t v12 = static os_log_type_t.error.getter(v10);
    uint64_t v13 = (os_log_s *)v7[9];
    unint64_t v14 = v12;
    if (os_log_type_enabled(v13, v12))
    {
      unint64_t v15 = v11;
      uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v17 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v16 = 138412290;
      uint64_t v18 = v15;
      os_log_t log = v13;
      size_t v19 = v11;
      uint64_t v20 = _swift_stdlib_bridgeErrorToNSError(v18);
      *(void *)(v1 + 84specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v20;
      uint64_t v8 = (void *)(v1 + 800);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 840, v1 + 848);
      void *v17 = v20;
      uint64_t v11 = v19;

      _os_log_impl(&dword_0, log, v14, "AFLocationServiceError: %@", v16, 0xCu);
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v17, 1LL, v21);
      uint64_t v22 = v17;
      uint64_t v9 = (void *)(v1 + 808);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    *uint64_t v9 = v11;
    unint64_t v23 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode,  (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
    _BridgedStoredNSError.code.getter(v5, v23);
    if (*v8 == 5LL)
    {
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      unint64_t v24 = v1 + 648;
      unint64_t v25 = type metadata accessor for CATService();
      uint64_t v26 = swift_allocObject(v25, 40LL, 7LL);
      *(void *)(v1 + 127__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v26;
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v25);
      *(void *)(v26 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
      type metadata accessor for OS_os_log();
      uint64_t v28 = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
      *(void *)(v26 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v28;
      *(_BYTE *)(v26 + 16) = 0;
      *(void *)(v1 + 67__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &type metadata for LocationServices;
      *(void *)(v1 + 68specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &protocol witness table for LocationServices;
      *(_BYTE *)(v1 + 648) = 0;
      uint64_t v29 = static DialogHelper.globals.getter(v28);
      *(void *)(v1 + 128specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v29;
      uint64_t v30 = (void *)swift_task_alloc(dword_C5C5C);
      *(void *)(v1 + 1288) = v30;
      *uint64_t v30 = v1;
      v30[1] = LocationFetchFlow.execute();
      uint64_t v31 = *(void *)(v1 + 1000);
    }

    else
    {
      unint64_t v24 = v1 + 688;
      uint64_t v42 = *(void *)(v1 + 912);
      uint64_t v43 = lazy protocol witness table accessor for type Errors and conformance Errors();
      uint64_t v44 = swift_allocError(&type metadata for Errors, v43, 0LL, 0LL);
      *(void *)uint64_t v45 = 0xD00000000000001FLL;
      *(void *)(v45 + 8) = 0x800000000009EA30LL;
      *(_BYTE *)(v45 + 16) = 2;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 152LL))(v44, 2LL);
      uint64_t v46 = type metadata accessor for CATService();
      uint64_t v47 = swift_allocObject(v46, 40LL, 7LL);
      *(void *)(v1 + 1296) = v47;
      uint64_t v48 = swift_getObjCClassFromMetadata(v46);
      *(void *)(v47 + 24) = [(id)objc_opt_self(NSBundle) bundleForClass:v48];
      type metadata accessor for OS_os_log();
      uint64_t v49 = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
      *(void *)(v47 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v49;
      *(_BYTE *)(v47 + 16) = 0;
      *(void *)(v1 + 71__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &type metadata for LocationServices;
      *(void *)(v1 + 72specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &protocol witness table for LocationServices;
      *(_BYTE *)(v1 + 688) = 2;
      uint64_t v29 = static DialogHelper.globals.getter(v49);
      *(void *)(v1 + 1304) = v29;
      uint64_t v50 = (void *)swift_task_alloc(dword_C5C5C);
      *(void *)(v1 + 131__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v50;
      *uint64_t v50 = v1;
      v50[1] = LocationFetchFlow.execute();
      uint64_t v31 = *(void *)(v1 + 992);
    }

    return CATService.execute(model:globals:)(v31, v24, v29);
  }

  else
  {
    swift_errorRelease(*(void *)(v1 + 888));
    uint64_t v32 = lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v33 = swift_allocError(&type metadata for Errors, v32, 0LL, 0LL);
    *(void *)uint64_t v34 = 0xD000000000000038LL;
    *(void *)(v34 + 8) = 0x800000000009E960LL;
    *(_BYTE *)(v34 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t))(*v7 + 152LL))(v33, 2LL);
    swift_errorRelease(v2);
    uint64_t v35 = *(void *)(v1 + 1008);
    uint64_t v36 = *(void *)(v1 + 976);
    uint64_t v37 = *(void *)(v1 + 968);
    outlined init with copy of TemplatingResult?(*(void *)(v1 + 1048), v35);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v35, 1LL, v37) == 1)
    {
      uint64_t v38 = *(void *)(v1 + 1008);
      outlined destroy of (label: String?, value: Any)?( *(void *)(v1 + 1048),  &demangling cache variable for type metadata for TemplatingResult?);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      outlined destroy of (label: String?, value: Any)?( v38,  &demangling cache variable for type metadata for TemplatingResult?);
      uint64_t v39 = *(void **)(v1 + 1056);
      uint64_t v40 = *(double *)*(&off_BB9C8 + *(char *)(*(void *)(v1 + 912) + 64LL));
      *(void *)(v1 + 184) = v1 + 872;
      *(void *)(v1 + 144) = v1;
      *(void *)(v1 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = LocationFetchFlow.execute();
      *(void *)(v1 + 40specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = swift_continuation_init(v1 + 144, 1LL);
      *(void *)(v1 + 368) = _NSConcreteStackBlock;
      *(void *)(v1 + 376) = 0x40000000LL;
      *(void *)(v1 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
      *(void *)(v1 + 39__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &block_descriptor_1;
      [v39 currentLocationWithAccuracy:v1 + 368 timeout:v40 completion:2.0];
      return swift_continuation_await(v1 + 144);
    }

    else
    {
      uint64_t v80 = *(void **)(v1 + 1056);
      uint64_t v82 = *(void *)(v1 + 1048);
      uint64_t v51 = *(void *)(v1 + 984);
      uint64_t v79 = *(void *)(v1 + 976);
      loga = *(os_log_t *)(v1 + 968);
      uint64_t v52 = *(void *)(v1 + 960);
      uint64_t v75 = *(void *)(v1 + 952);
      uint64_t v76 = *(void *)(v1 + 944);
      uint64_t v53 = *(void *)(v1 + 936);
      uint64_t v74 = *(void *)(v1 + 928);
      uint64_t v54 = *(void *)(v1 + 920);
      uint64_t v55 = *(void **)(v1 + 912);
      (*(void (**)(uint64_t, void))(v79 + 32))(v51, *(void *)(v1 + 1008));
      uint64_t v57 = v55[6];
      uint64_t v56 = v55[7];
      __swift_project_boxed_opaque_existential_1(v55 + 3, v57);
      (*(void (**)(uint64_t, uint64_t))(v56 + 32))(v57, v56);
      uint64_t v58 = type metadata accessor for NLContextUpdate(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56LL))(v54, 1LL, 1LL, v58);
      *(void *)(v1 + 76specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0LL;
      *(_OWORD *)(v1 + 728) = 0u;
      *(_OWORD *)(v1 + 744) = 0u;
      static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)( v51,  v1 + 448,  1LL,  _swiftEmptyArrayStorage,  0LL,  1LL,  v54,  _swiftEmptyArrayStorage,  v1 + 728,  0LL);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      outlined destroy of (label: String?, value: Any)?( v1 + 728,  &demangling cache variable for type metadata for FlowActivity?);
      outlined destroy of (label: String?, value: Any)?( v54,  &demangling cache variable for type metadata for NLContextUpdate?);
      __swift_destroy_boxed_opaque_existential_0Tm((void *)(v1 + 448));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v75, v52, v74);
      uint64_t v59 = *(unsigned __int8 *)(v53 + 80);
      uint64_t v60 = (v59 + 16) & ~v59;
      uint64_t v61 = swift_allocObject(&unk_BB858, v60 + v76, v59 | 7);
      uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v61 + v60, v75, v74);
      static OutputPublisherFactory.makeOutputPublisherAsync()(v62);
      uint64_t v63 = type metadata accessor for SimpleOutputFlowAsync(0LL);
      swift_allocObject(v63, *(unsigned int *)(v63 + 48), *(unsigned __int16 *)(v63 + 52));
      uint64_t v64 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v84,  &async function pointer to partial apply for closure #1 in LocationFetchFlow.execute(),  v61);
      *(void *)(v1 + 864) = v64;
      static ExecuteResponse.complete<A>(next:)(v1 + 864, v63, &protocol witness table for SimpleOutputFlowAsync);
      swift_release(v64);

      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v74);
      (*(void (**)(uint64_t, os_log_t))(v79 + 8))(v51, loga);
      outlined destroy of (label: String?, value: Any)?( v82,  &demangling cache variable for type metadata for TemplatingResult?);
      uint64_t v65 = *(void *)(v1 + 1040);
      uint64_t v66 = *(void *)(v1 + 1032);
      uint64_t v67 = *(void *)(v1 + 1024);
      uint64_t v68 = *(void *)(v1 + 1016);
      uint64_t v69 = *(void *)(v1 + 1008);
      uint64_t v70 = *(void *)(v1 + 1000);
      char v71 = *(void *)(v1 + 992);
      uint64_t v72 = *(void *)(v1 + 984);
      uint64_t v73 = *(void *)(v1 + 960);
      uint64_t v81 = *(void *)(v1 + 952);
      uint64_t v83 = *(void *)(v1 + 920);
      swift_task_dealloc(*(void *)(v1 + 1048));
      swift_task_dealloc(v65);
      swift_task_dealloc(v66);
      swift_task_dealloc(v67);
      swift_task_dealloc(v68);
      swift_task_dealloc(v69);
      swift_task_dealloc(v70);
      swift_task_dealloc(v71);
      swift_task_dealloc(v72);
      swift_task_dealloc(v73);
      swift_task_dealloc(v81);
      swift_task_dealloc(v83);
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
  }

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v2 = v1[150];
  swift_willThrow(a1);
  uint64_t v3 = swift_errorRelease(v2);
  uint64_t v4 = *(os_log_s **)(v1[114] + 72);
  uint64_t v5 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_0, v4, v5, "Location Service could not get requested accuracy within timeout", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  unint64_t v7 = v1[114];
  uint64_t v8 = lazy protocol witness table accessor for type Errors and conformance Errors();
  uint64_t v9 = swift_allocError(&type metadata for Errors, v8, 0LL, 0LL);
  *(void *)unint64_t v10 = 0xD000000000000021LL;
  *(void *)(v10 + 8) = 0x800000000009E9D0LL;
  *(_BYTE *)(v10 + 16) = 2;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 152LL))(v9, 2LL);
  uint64_t v11 = (uint64_t **)swift_task_alloc(dword_C853C);
  v1[156] = (uint64_t)v11;
  *uint64_t v11 = v1;
  v11[1] = (uint64_t *)LocationFetchFlow.execute();
  return LocationFetchFlow.unknownLocationOutput()(v1[113]);
}

uint64_t LocationFetchFlow.execute()()
{
  id v1 = [objc_allocWithZone(AFLocationService) init];
  v0[132] = v1;
  if ([(id)objc_opt_self(AFFeatureFlags) isSiriLocationServicesPromptingEnabled])
  {
    uint64_t v2 = (void *)v0[132];
    double v3 = *(double *)*(&off_BB9C8 + *(char *)(v0[114] + 64LL));
    v0[23] = v0 + 109;
    v0[18] = v0;
    v0[19] = LocationFetchFlow.execute();
    v0[50] = swift_continuation_init(v0 + 18, 1LL);
    v0[46] = _NSConcreteStackBlock;
    v0[47] = 0x40000000LL;
    v0[48] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    v0[49] = &block_descriptor_1;
    [v2 currentLocationWithAccuracy:v0 + 46 timeout:v3 completion:2.0];
    uint64_t v4 = v0 + 18;
  }

  else
  {
    uint64_t v5 = v0[131];
    uint64_t v6 = v0[121];
    unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[122] + 56LL);
    v0[133] = v7;
    v7(v5, 1LL, 1LL, v6);
    v0[15] = v0 + 96;
    v0[10] = v0;
    v0[11] = LocationFetchFlow.execute();
    v0[45] = swift_continuation_init(v0 + 10, 1LL);
    v0[41] = _NSConcreteStackBlock;
    v0[42] = 0x40000000LL;
    v0[43] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFLocationAuthorizationStyle, @unowned CLAccuracyAuthorization, @unowned NSError?) -> () with result type (AFLocationAuthorizationStyle, CLAccuracyAuthorization);
    v0[44] = &block_descriptor_0;
    [v1 currentAuthorizationStyle:v0 + 41];
    uint64_t v4 = v0 + 10;
  }

  return swift_continuation_await(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  id v1 = *(void *)(*(void *)v0 + 112LL);
  *(void *)(*(void *)v0 + 107(*(void (**)(uint64_t, uint64_t))(**(void **)(v0 + 24) + 120LL))(1LL, 2LL) = v1;
  if (v1) {
    uint64_t v2 = LocationFetchFlow.execute();
  }
  else {
    uint64_t v2 = LocationFetchFlow.execute();
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v2 = *(void **)v1;
  swift_task_dealloc(*(void *)(*(void *)v1 + 1104LL));
  double v3 = v2[137];
  if (v0)
  {
    uint64_t v4 = v2[136];
    swift_errorRelease(v0);
    swift_bridgeObjectRelease(v3);
    swift_release(v4);
    uint64_t v5 = LocationFetchFlow.execute();
  }

  else
  {
    swift_release(v2[136]);
    swift_bridgeObjectRelease(v3);
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 26);
    uint64_t v5 = LocationFetchFlow.execute();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  double v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[40];
  outlined destroy of (label: String?, value: Any)?( *(void *)(v0 + 1048),  &demangling cache variable for type metadata for TemplatingResult?);
  id v1 = *(void *)(v0 + 1048);
  uint64_t v2 = *(void *)(v0 + 1040);
  (*(void (**)(uint64_t, void, uint64_t, void))(v0 + 1064))(v2, 0LL, 1LL, *(void *)(v0 + 968));
  outlined init with take of TemplatingResult?(v2, v1);
  double v3 = *(void *)(v0 + 1080);
  uint64_t v4 = *(void *)(v0 + 1008);
  uint64_t v5 = *(void *)(v0 + 976);
  uint64_t v6 = *(void *)(v0 + 968);
  outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1LL, v6) == 1)
  {
    unint64_t v7 = *(void *)(v0 + 1008);
    outlined destroy of (label: String?, value: Any)?( *(void *)(v0 + 1048),  &demangling cache variable for type metadata for TemplatingResult?);
    swift_bridgeObjectRelease(v3);
    outlined destroy of (label: String?, value: Any)?( v7,  &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v8 = *(void **)(v0 + 1056);
    uint64_t v9 = *(double *)*(&off_BB9C8 + *(char *)(*(void *)(v0 + 912) + 64LL));
    *(void *)(v0 + 184) = v0 + 872;
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = LocationFetchFlow.execute();
    *(void *)(v0 + 40specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = swift_continuation_init(v0 + 144, 1LL);
    *(void *)(v0 + 368) = _NSConcreteStackBlock;
    *(void *)(v0 + 376) = 0x40000000LL;
    *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    *(void *)(v0 + 39__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &block_descriptor_1;
    [v8 currentLocationWithAccuracy:v0 + 368 timeout:v9 completion:2.0];
    return swift_continuation_await(v0 + 144);
  }

  else
  {
    uint64_t v40 = *(void **)(v0 + 1056);
    uint64_t v42 = *(void *)(v0 + 1048);
    uint64_t v11 = *(void *)(v0 + 984);
    uint64_t v39 = *(void *)(v0 + 976);
    uint64_t v38 = *(void *)(v0 + 968);
    uint64_t v36 = *(void *)(v0 + 952);
    uint64_t v37 = *(void *)(v0 + 944);
    uint64_t v12 = *(void *)(v0 + 936);
    uint64_t v34 = *(void *)(v0 + 960);
    uint64_t v35 = *(void *)(v0 + 928);
    uint64_t v13 = *(void *)(v0 + 920);
    unint64_t v14 = *(void **)(v0 + 912);
    (*(void (**)(uint64_t, void))(v39 + 32))(v11, *(void *)(v0 + 1008));
    unint64_t v15 = v14[6];
    uint64_t v16 = v14[7];
    __swift_project_boxed_opaque_existential_1(v14 + 3, v15);
    (*(void (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
    uint64_t v17 = type metadata accessor for NLContextUpdate(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v13, 1LL, 1LL, v17);
    *(void *)(v0 + 76specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0LL;
    *(_OWORD *)(v0 + 728) = 0u;
    *(_OWORD *)(v0 + 744) = 0u;
    uint64_t v18 = v11;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)( v11,  v0 + 448,  1LL,  v3,  0LL,  1LL,  v13,  _swiftEmptyArrayStorage,  v0 + 728,  0LL);
    swift_bridgeObjectRelease(v3);
    outlined destroy of (label: String?, value: Any)?( v0 + 728,  &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?( v13,  &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 448));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v36, v34, v35);
    size_t v19 = *(unsigned __int8 *)(v12 + 80);
    uint64_t v20 = (v19 + 16) & ~v19;
    uint64_t v21 = swift_allocObject(&unk_BB858, v20 + v37, v19 | 7);
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v21 + v20, v36, v35);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v22);
    unint64_t v23 = type metadata accessor for SimpleOutputFlowAsync(0LL);
    swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    unint64_t v24 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v44,  &async function pointer to partial apply for closure #1 in LocationFetchFlow.execute(),  v21);
    *(void *)(v0 + 864) = v24;
    static ExecuteResponse.complete<A>(next:)(v0 + 864, v23, &protocol witness table for SimpleOutputFlowAsync);

    swift_release(v24);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v34, v35);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v18, v38);
    outlined destroy of (label: String?, value: Any)?( v42,  &demangling cache variable for type metadata for TemplatingResult?);
    unint64_t v25 = *(void *)(v0 + 1040);
    uint64_t v26 = *(void *)(v0 + 1032);
    uint64_t v27 = *(void *)(v0 + 1024);
    uint64_t v28 = *(void *)(v0 + 1016);
    uint64_t v29 = *(void *)(v0 + 1008);
    uint64_t v30 = *(void *)(v0 + 1000);
    uint64_t v31 = *(void *)(v0 + 992);
    uint64_t v32 = *(void *)(v0 + 984);
    uint64_t v33 = *(void *)(v0 + 960);
    uint64_t v41 = *(void *)(v0 + 952);
    uint64_t v43 = *(void *)(v0 + 920);
    swift_task_dealloc(*(void *)(v0 + 1048));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v2 = *(void **)v1;
  double v3 = *(void *)(*(void *)v1 + 1128LL);
  *(void *)(*(void *)v1 + 1136LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[139];
    swift_bridgeObjectRelease(v2[140]);
    swift_release(v4);
    uint64_t v5 = LocationFetchFlow.execute();
  }

  else
  {
    uint64_t v6 = v2[140];
    swift_release(v2[139]);
    swift_bridgeObjectRelease(v6);
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 36);
    uint64_t v5 = LocationFetchFlow.execute();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  double v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[40];
  id v1 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1064);
  uint64_t v2 = *(void *)(v0 + 1048);
  double v3 = *(void *)(v0 + 1032);
  uint64_t v4 = *(void *)(v0 + 968);
  outlined destroy of (label: String?, value: Any)?( v2,  &demangling cache variable for type metadata for TemplatingResult?);
  v1(v3, 0LL, 1LL, v4);
  outlined init with take of TemplatingResult?(v3, v2);
  uint64_t v5 = *(void *)(v0 + 1008);
  uint64_t v6 = *(void *)(v0 + 976);
  unint64_t v7 = *(void *)(v0 + 968);
  outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v5, 1LL, v7) == 1)
  {
    uint64_t v8 = *(void *)(v0 + 1008);
    outlined destroy of (label: String?, value: Any)?( *(void *)(v0 + 1048),  &demangling cache variable for type metadata for TemplatingResult?);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    outlined destroy of (label: String?, value: Any)?( v8,  &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v9 = *(void **)(v0 + 1056);
    unint64_t v10 = *(double *)*(&off_BB9C8 + *(char *)(*(void *)(v0 + 912) + 64LL));
    *(void *)(v0 + 184) = v0 + 872;
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = LocationFetchFlow.execute();
    *(void *)(v0 + 40specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = swift_continuation_init(v0 + 144, 1LL);
    *(void *)(v0 + 368) = _NSConcreteStackBlock;
    *(void *)(v0 + 376) = 0x40000000LL;
    *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    *(void *)(v0 + 39__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &block_descriptor_1;
    [v9 currentLocationWithAccuracy:v0 + 368 timeout:v10 completion:2.0];
    return swift_continuation_await(v0 + 144);
  }

  else
  {
    uint64_t v40 = *(void **)(v0 + 1056);
    uint64_t v42 = *(void *)(v0 + 1048);
    uint64_t v12 = *(void *)(v0 + 984);
    uint64_t v39 = *(void *)(v0 + 976);
    uint64_t v38 = *(void *)(v0 + 968);
    uint64_t v13 = *(void *)(v0 + 960);
    uint64_t v36 = *(void *)(v0 + 952);
    uint64_t v37 = *(void *)(v0 + 944);
    unint64_t v14 = *(void *)(v0 + 936);
    uint64_t v35 = *(void *)(v0 + 928);
    unint64_t v15 = *(void *)(v0 + 920);
    uint64_t v16 = *(void **)(v0 + 912);
    (*(void (**)(uint64_t, void))(v39 + 32))(v12, *(void *)(v0 + 1008));
    uint64_t v18 = v16[6];
    uint64_t v17 = v16[7];
    __swift_project_boxed_opaque_existential_1(v16 + 3, v18);
    (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v18, v17);
    size_t v19 = type metadata accessor for NLContextUpdate(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v15, 1LL, 1LL, v19);
    *(void *)(v0 + 76specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0LL;
    *(_OWORD *)(v0 + 728) = 0u;
    *(_OWORD *)(v0 + 744) = 0u;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)( v12,  v0 + 448,  1LL,  _swiftEmptyArrayStorage,  0LL,  1LL,  v15,  _swiftEmptyArrayStorage,  v0 + 728,  0LL);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    outlined destroy of (label: String?, value: Any)?( v0 + 728,  &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?( v15,  &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 448));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v36, v13, v35);
    uint64_t v20 = *(unsigned __int8 *)(v14 + 80);
    uint64_t v21 = (v20 + 16) & ~v20;
    uint64_t v22 = swift_allocObject(&unk_BB858, v21 + v37, v20 | 7);
    unint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v22 + v21, v36, v35);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v23);
    unint64_t v24 = type metadata accessor for SimpleOutputFlowAsync(0LL);
    swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    unint64_t v25 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v44,  &async function pointer to partial apply for closure #1 in LocationFetchFlow.execute(),  v22);
    *(void *)(v0 + 864) = v25;
    static ExecuteResponse.complete<A>(next:)(v0 + 864, v24, &protocol witness table for SimpleOutputFlowAsync);

    swift_release(v25);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v35);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v12, v38);
    outlined destroy of (label: String?, value: Any)?( v42,  &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v26 = *(void *)(v0 + 1040);
    uint64_t v27 = *(void *)(v0 + 1032);
    uint64_t v28 = *(void *)(v0 + 1024);
    uint64_t v29 = *(void *)(v0 + 1016);
    uint64_t v30 = *(void *)(v0 + 1008);
    uint64_t v31 = *(void *)(v0 + 1000);
    uint64_t v32 = *(void *)(v0 + 992);
    uint64_t v33 = *(void *)(v0 + 984);
    uint64_t v34 = *(void *)(v0 + 960);
    uint64_t v41 = *(void *)(v0 + 952);
    uint64_t v43 = *(void *)(v0 + 920);
    swift_task_dealloc(*(void *)(v0 + 1048));
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v2 = *v1;
  double v3 = *(void *)(*v1 + 1160);
  *(void *)(*v1 + 1168) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(*(void *)(v2 + 1152));
  if (v0)
  {
    uint64_t v4 = LocationFetchFlow.execute();
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 408));
    uint64_t v4 = LocationFetchFlow.execute();
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  double v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[40];
  id v1 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1064);
  uint64_t v2 = *(void *)(v0 + 1048);
  double v3 = *(void *)(v0 + 1024);
  uint64_t v4 = *(void *)(v0 + 968);
  outlined destroy of (label: String?, value: Any)?( v2,  &demangling cache variable for type metadata for TemplatingResult?);
  v1(v3, 0LL, 1LL, v4);
  outlined init with take of TemplatingResult?(v3, v2);
  uint64_t v5 = *(void *)(v0 + 1144);
  uint64_t v6 = *(void *)(v0 + 1008);
  unint64_t v7 = *(void *)(v0 + 976);
  uint64_t v8 = *(void *)(v0 + 968);
  outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v6);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v6, 1LL, v8) == 1)
  {
    uint64_t v9 = *(void *)(v0 + 1008);
    outlined destroy of (label: String?, value: Any)?( *(void *)(v0 + 1048),  &demangling cache variable for type metadata for TemplatingResult?);
    swift_bridgeObjectRelease(v5);
    outlined destroy of (label: String?, value: Any)?( v9,  &demangling cache variable for type metadata for TemplatingResult?);
    unint64_t v10 = *(void **)(v0 + 1056);
    uint64_t v11 = *(double *)*(&off_BB9C8 + *(char *)(*(void *)(v0 + 912) + 64LL));
    *(void *)(v0 + 184) = v0 + 872;
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = LocationFetchFlow.execute();
    *(void *)(v0 + 40specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = swift_continuation_init(v0 + 144, 1LL);
    *(void *)(v0 + 368) = _NSConcreteStackBlock;
    *(void *)(v0 + 376) = 0x40000000LL;
    *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    *(void *)(v0 + 39__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &block_descriptor_1;
    [v10 currentLocationWithAccuracy:v0 + 368 timeout:v11 completion:2.0];
    return swift_continuation_await(v0 + 144);
  }

  else
  {
    uint64_t v42 = *(void **)(v0 + 1056);
    uint64_t v44 = *(void *)(v0 + 1048);
    uint64_t v13 = *(void *)(v0 + 984);
    uint64_t v41 = *(void *)(v0 + 976);
    uint64_t v40 = *(void *)(v0 + 968);
    uint64_t v38 = *(void *)(v0 + 952);
    uint64_t v39 = *(void *)(v0 + 944);
    unint64_t v14 = *(void *)(v0 + 936);
    uint64_t v36 = *(void *)(v0 + 960);
    uint64_t v37 = *(void *)(v0 + 928);
    unint64_t v15 = *(void *)(v0 + 920);
    uint64_t v16 = *(void **)(v0 + 912);
    (*(void (**)(uint64_t, void))(v41 + 32))(v13, *(void *)(v0 + 1008));
    uint64_t v17 = v16[6];
    uint64_t v18 = v16[7];
    __swift_project_boxed_opaque_existential_1(v16 + 3, v17);
    (*(void (**)(uint64_t, uint64_t))(v18 + 32))(v17, v18);
    size_t v19 = type metadata accessor for NLContextUpdate(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v15, 1LL, 1LL, v19);
    *(void *)(v0 + 76specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0LL;
    *(_OWORD *)(v0 + 728) = 0u;
    *(_OWORD *)(v0 + 744) = 0u;
    uint64_t v20 = v13;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)( v13,  v0 + 448,  1LL,  v5,  0LL,  1LL,  v15,  _swiftEmptyArrayStorage,  v0 + 728,  0LL);
    swift_bridgeObjectRelease(v5);
    outlined destroy of (label: String?, value: Any)?( v0 + 728,  &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?( v15,  &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 448));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v38, v36, v37);
    uint64_t v21 = *(unsigned __int8 *)(v14 + 80);
    uint64_t v22 = (v21 + 16) & ~v21;
    unint64_t v23 = swift_allocObject(&unk_BB858, v22 + v39, v21 | 7);
    unint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v23 + v22, v38, v37);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v24);
    unint64_t v25 = type metadata accessor for SimpleOutputFlowAsync(0LL);
    swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    uint64_t v26 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v46,  &async function pointer to partial apply for closure #1 in LocationFetchFlow.execute(),  v23);
    *(void *)(v0 + 864) = v26;
    static ExecuteResponse.complete<A>(next:)(v0 + 864, v25, &protocol witness table for SimpleOutputFlowAsync);

    swift_release(v26);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v36, v37);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v20, v40);
    outlined destroy of (label: String?, value: Any)?( v44,  &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v27 = *(void *)(v0 + 1040);
    uint64_t v28 = *(void *)(v0 + 1032);
    uint64_t v29 = *(void *)(v0 + 1024);
    uint64_t v30 = *(void *)(v0 + 1016);
    uint64_t v31 = *(void *)(v0 + 1008);
    uint64_t v32 = *(void *)(v0 + 1000);
    uint64_t v33 = *(void *)(v0 + 992);
    uint64_t v34 = *(void *)(v0 + 984);
    uint64_t v35 = *(void *)(v0 + 960);
    uint64_t v43 = *(void *)(v0 + 952);
    uint64_t v45 = *(void *)(v0 + 920);
    swift_task_dealloc(*(void *)(v0 + 1048));
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v43);
    swift_task_dealloc(v45);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v2 = *(void **)v1;
  swift_task_dealloc(*(void *)(*(void *)v1 + 1192LL));
  double v3 = v2[148];
  if (v0)
  {
    uint64_t v4 = v2[147];
    swift_errorRelease(v0);
    swift_bridgeObjectRelease(v3);
    swift_release(v4);
    uint64_t v5 = LocationFetchFlow.execute();
  }

  else
  {
    swift_release(v2[147]);
    swift_bridgeObjectRelease(v3);
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 71);
    uint64_t v5 = LocationFetchFlow.execute();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  double v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[40];
  outlined destroy of (label: String?, value: Any)?( *(void *)(v0 + 1048),  &demangling cache variable for type metadata for TemplatingResult?);
  id v1 = *(void *)(v0 + 1048);
  uint64_t v2 = *(void *)(v0 + 1016);
  (*(void (**)(uint64_t, void, uint64_t, void))(v0 + 1064))(v2, 0LL, 1LL, *(void *)(v0 + 968));
  outlined init with take of TemplatingResult?(v2, v1);
  double v3 = *(void *)(v0 + 1008);
  uint64_t v4 = *(void *)(v0 + 976);
  uint64_t v5 = *(void *)(v0 + 968);
  outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, 1LL, v5) == 1)
  {
    uint64_t v6 = *(void *)(v0 + 1008);
    outlined destroy of (label: String?, value: Any)?( *(void *)(v0 + 1048),  &demangling cache variable for type metadata for TemplatingResult?);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    outlined destroy of (label: String?, value: Any)?( v6,  &demangling cache variable for type metadata for TemplatingResult?);
    unint64_t v7 = *(void **)(v0 + 1056);
    uint64_t v8 = *(double *)*(&off_BB9C8 + *(char *)(*(void *)(v0 + 912) + 64LL));
    *(void *)(v0 + 184) = v0 + 872;
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = LocationFetchFlow.execute();
    *(void *)(v0 + 40specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = swift_continuation_init(v0 + 144, 1LL);
    *(void *)(v0 + 368) = _NSConcreteStackBlock;
    *(void *)(v0 + 376) = 0x40000000LL;
    *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    *(void *)(v0 + 39__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &block_descriptor_1;
    [v7 currentLocationWithAccuracy:v0 + 368 timeout:v8 completion:2.0];
    return swift_continuation_await(v0 + 144);
  }

  else
  {
    uint64_t v38 = *(void **)(v0 + 1056);
    uint64_t v40 = *(void *)(v0 + 1048);
    unint64_t v10 = *(void *)(v0 + 984);
    uint64_t v37 = *(void *)(v0 + 976);
    uint64_t v36 = *(void *)(v0 + 968);
    uint64_t v11 = *(void *)(v0 + 960);
    uint64_t v34 = *(void *)(v0 + 952);
    uint64_t v35 = *(void *)(v0 + 944);
    uint64_t v12 = *(void *)(v0 + 936);
    uint64_t v33 = *(void *)(v0 + 928);
    uint64_t v13 = *(void *)(v0 + 920);
    unint64_t v14 = *(void **)(v0 + 912);
    (*(void (**)(uint64_t, void))(v37 + 32))(v10, *(void *)(v0 + 1008));
    uint64_t v16 = v14[6];
    unint64_t v15 = v14[7];
    __swift_project_boxed_opaque_existential_1(v14 + 3, v16);
    (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v16, v15);
    uint64_t v17 = type metadata accessor for NLContextUpdate(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v13, 1LL, 1LL, v17);
    *(void *)(v0 + 76specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0LL;
    *(_OWORD *)(v0 + 728) = 0u;
    *(_OWORD *)(v0 + 744) = 0u;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)( v10,  v0 + 448,  1LL,  _swiftEmptyArrayStorage,  0LL,  1LL,  v13,  _swiftEmptyArrayStorage,  v0 + 728,  0LL);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    outlined destroy of (label: String?, value: Any)?( v0 + 728,  &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?( v13,  &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 448));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v34, v11, v33);
    uint64_t v18 = *(unsigned __int8 *)(v12 + 80);
    size_t v19 = (v18 + 16) & ~v18;
    uint64_t v20 = swift_allocObject(&unk_BB858, v19 + v35, v18 | 7);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v20 + v19, v34, v33);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v21);
    uint64_t v22 = type metadata accessor for SimpleOutputFlowAsync(0LL);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    unint64_t v23 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v42,  &async function pointer to partial apply for closure #1 in LocationFetchFlow.execute(),  v20);
    *(void *)(v0 + 864) = v23;
    static ExecuteResponse.complete<A>(next:)(v0 + 864, v22, &protocol witness table for SimpleOutputFlowAsync);

    swift_release(v23);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v33);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v10, v36);
    outlined destroy of (label: String?, value: Any)?( v40,  &demangling cache variable for type metadata for TemplatingResult?);
    unint64_t v24 = *(void *)(v0 + 1040);
    unint64_t v25 = *(void *)(v0 + 1032);
    uint64_t v26 = *(void *)(v0 + 1024);
    uint64_t v27 = *(void *)(v0 + 1016);
    uint64_t v28 = *(void *)(v0 + 1008);
    uint64_t v29 = *(void *)(v0 + 1000);
    uint64_t v30 = *(void *)(v0 + 992);
    uint64_t v31 = *(void *)(v0 + 984);
    uint64_t v32 = *(void *)(v0 + 960);
    uint64_t v39 = *(void *)(v0 + 952);
    uint64_t v41 = *(void *)(v0 + 920);
    swift_task_dealloc(*(void *)(v0 + 1048));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v39);
    swift_task_dealloc(v41);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  id v1 = *(void *)(*(void *)v0 + 176LL);
  *(void *)(*(void *)v0 + 120swift_beginAccess(v2 + 80, v7, 1LL, 0LL) = v1;
  if (v1) {
    uint64_t v2 = LocationFetchFlow.execute();
  }
  else {
    uint64_t v2 = LocationFetchFlow.execute();
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  id v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 1224LL) = v1;
  if (v1) {
    uint64_t v2 = LocationFetchFlow.execute();
  }
  else {
    uint64_t v2 = LocationFetchFlow.execute();
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 1232LL));
  return swift_task_switch(LocationFetchFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  id v1 = *(void **)(v0 + 1056);

  uint64_t v2 = *(void *)(v0 + 1040);
  double v3 = *(void *)(v0 + 1032);
  uint64_t v4 = *(void *)(v0 + 1024);
  uint64_t v5 = *(void *)(v0 + 1016);
  uint64_t v6 = *(void *)(v0 + 1008);
  unint64_t v7 = *(void *)(v0 + 1000);
  uint64_t v8 = *(void *)(v0 + 992);
  uint64_t v9 = *(void *)(v0 + 984);
  unint64_t v10 = *(void *)(v0 + 960);
  uint64_t v12 = *(void *)(v0 + 952);
  uint64_t v13 = *(void *)(v0 + 920);
  swift_task_dealloc(*(void *)(v0 + 1048));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 1240LL));
  return swift_task_switch(LocationFetchFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 1248LL));
  return swift_task_switch(LocationFetchFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  id v1 = *(void *)(v0 + 1040);
  uint64_t v2 = *(void *)(v0 + 1032);
  double v3 = *(void *)(v0 + 1024);
  uint64_t v4 = *(void *)(v0 + 1016);
  uint64_t v5 = *(void *)(v0 + 1008);
  uint64_t v6 = *(void *)(v0 + 1000);
  unint64_t v7 = *(void *)(v0 + 992);
  uint64_t v8 = *(void *)(v0 + 984);
  uint64_t v9 = *(void *)(v0 + 960);
  uint64_t v11 = *(void *)(v0 + 952);
  uint64_t v12 = *(void *)(v0 + 920);
  swift_task_dealloc(*(void *)(v0 + 1048));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v2 = *(void **)v1;
  swift_task_dealloc(*(void *)(*(void *)v1 + 1288LL));
  if (v0)
  {
    double v3 = v2[160];
    uint64_t v4 = v2[159];
    swift_errorRelease(v0);
    swift_release(v4);
    swift_bridgeObjectRelease(v3);
    uint64_t v5 = LocationFetchFlow.execute();
  }

  else
  {
    uint64_t v6 = v2[159];
    swift_bridgeObjectRelease(v2[160]);
    swift_release(v6);
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 81);
    uint64_t v5 = LocationFetchFlow.execute();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  double v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[40];
  outlined destroy of (label: String?, value: Any)?( *(void *)(v0 + 1048),  &demangling cache variable for type metadata for TemplatingResult?);
  id v1 = *(void **)(v0 + 1264);
  uint64_t v2 = *(void *)(v0 + 1048);
  double v3 = *(void *)(v0 + 1000);
  uint64_t v4 = *(void **)(v0 + 912);
  (*(void (**)(uint64_t, void, uint64_t, void))(v0 + 1064))(v3, 0LL, 1LL, *(void *)(v0 + 968));
  outlined init with take of TemplatingResult?(v3, v2);
  uint64_t v5 = v4 + 3;
  uint64_t v6 = v4[6];
  unint64_t v7 = v4[7];
  __swift_project_boxed_opaque_existential_1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  uint64_t v8 = specialized static LocationServicesViews.makeDeepLink(status:device:)(1u, (void *)(v0 + 608));

  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 608));
  swift_errorRelease(*(void *)(v0 + 888));
  uint64_t v9 = *(void *)(v0 + 1008);
  unint64_t v10 = *(void *)(v0 + 976);
  uint64_t v11 = *(void *)(v0 + 968);
  outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v9, 1LL, v11) == 1)
  {
    uint64_t v12 = *(void *)(v0 + 1008);
    outlined destroy of (label: String?, value: Any)?( *(void *)(v0 + 1048),  &demangling cache variable for type metadata for TemplatingResult?);
    swift_bridgeObjectRelease(v8);
    outlined destroy of (label: String?, value: Any)?( v12,  &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v13 = *(void **)(v0 + 1056);
    unint64_t v14 = *(double *)*(&off_BB9C8 + *(char *)(*(void *)(v0 + 912) + 64LL));
    *(void *)(v0 + 184) = v0 + 872;
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = LocationFetchFlow.execute();
    *(void *)(v0 + 40specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = swift_continuation_init(v0 + 144, 1LL);
    *(void *)(v0 + 368) = _NSConcreteStackBlock;
    *(void *)(v0 + 376) = 0x40000000LL;
    *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    *(void *)(v0 + 39__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &block_descriptor_1;
    [v13 currentLocationWithAccuracy:v0 + 368 timeout:v14 completion:2.0];
    return swift_continuation_await(v0 + 144);
  }

  else
  {
    uint64_t v45 = *(void **)(v0 + 1056);
    uint64_t v47 = *(void *)(v0 + 1048);
    uint64_t v16 = *(void *)(v0 + 984);
    uint64_t v44 = *(void *)(v0 + 976);
    uint64_t v43 = *(void *)(v0 + 968);
    uint64_t v41 = *(void *)(v0 + 952);
    uint64_t v42 = *(void *)(v0 + 944);
    uint64_t v17 = *(void *)(v0 + 936);
    uint64_t v39 = *(void *)(v0 + 960);
    uint64_t v40 = *(void *)(v0 + 928);
    uint64_t v18 = *(void *)(v0 + 920);
    size_t v19 = *(void **)(v0 + 912);
    (*(void (**)(uint64_t, void))(v44 + 32))(v16, *(void *)(v0 + 1008));
    uint64_t v20 = v19[6];
    uint64_t v21 = v19[7];
    __swift_project_boxed_opaque_existential_1(v19 + 3, v20);
    (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
    uint64_t v22 = type metadata accessor for NLContextUpdate(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v18, 1LL, 1LL, v22);
    *(void *)(v0 + 76specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0LL;
    *(_OWORD *)(v0 + 728) = 0u;
    *(_OWORD *)(v0 + 744) = 0u;
    unint64_t v23 = v16;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)( v16,  v0 + 448,  1LL,  v8,  0LL,  1LL,  v18,  _swiftEmptyArrayStorage,  v0 + 728,  0LL);
    swift_bridgeObjectRelease(v8);
    outlined destroy of (label: String?, value: Any)?( v0 + 728,  &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?( v18,  &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 448));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v41, v39, v40);
    unint64_t v24 = *(unsigned __int8 *)(v17 + 80);
    unint64_t v25 = (v24 + 16) & ~v24;
    uint64_t v26 = swift_allocObject(&unk_BB858, v25 + v42, v24 | 7);
    uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v26 + v25, v41, v40);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v27);
    uint64_t v28 = type metadata accessor for SimpleOutputFlowAsync(0LL);
    swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
    uint64_t v29 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v49,  &async function pointer to partial apply for closure #1 in LocationFetchFlow.execute(),  v26);
    *(void *)(v0 + 864) = v29;
    static ExecuteResponse.complete<A>(next:)(v0 + 864, v28, &protocol witness table for SimpleOutputFlowAsync);
    swift_release(v29);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v39, v40);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v23, v43);
    outlined destroy of (label: String?, value: Any)?( v47,  &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v30 = *(void *)(v0 + 1040);
    uint64_t v31 = *(void *)(v0 + 1032);
    uint64_t v32 = *(void *)(v0 + 1024);
    uint64_t v33 = *(void *)(v0 + 1016);
    uint64_t v34 = *(void *)(v0 + 1008);
    uint64_t v35 = *(void *)(v0 + 1000);
    uint64_t v36 = *(void *)(v0 + 992);
    uint64_t v37 = *(void *)(v0 + 984);
    uint64_t v38 = *(void *)(v0 + 960);
    uint64_t v46 = *(void *)(v0 + 952);
    uint64_t v48 = *(void *)(v0 + 920);
    swift_task_dealloc(*(void *)(v0 + 1048));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v2 = *(void **)v1;
  swift_task_dealloc(*(void *)(*(void *)v1 + 1312LL));
  if (v0)
  {
    double v3 = v2[163];
    uint64_t v4 = v2[162];
    swift_errorRelease(v0);
    swift_release(v4);
    swift_bridgeObjectRelease(v3);
    uint64_t v5 = LocationFetchFlow.execute();
  }

  else
  {
    uint64_t v6 = v2[162];
    swift_bridgeObjectRelease(v2[163]);
    swift_release(v6);
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 86);
    uint64_t v5 = LocationFetchFlow.execute();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  double v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[40];
  id v1 = *(void *)(v0 + 1048);

  outlined destroy of (label: String?, value: Any)?( v1,  &demangling cache variable for type metadata for TemplatingResult?);
  uint64_t v2 = *(void *)(v0 + 1048);
  double v3 = *(void *)(v0 + 992);
  (*(void (**)(uint64_t, void, uint64_t, void))(v0 + 1064))(v3, 0LL, 1LL, *(void *)(v0 + 968));
  outlined init with take of TemplatingResult?(v3, v2);
  uint64_t v4 = *(void *)(v0 + 1256);
  swift_errorRelease(*(void *)(v0 + 888));
  uint64_t v5 = *(void *)(v0 + 1008);
  uint64_t v6 = *(void *)(v0 + 976);
  unint64_t v7 = *(void *)(v0 + 968);
  outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v5, 1LL, v7) == 1)
  {
    uint64_t v8 = *(void *)(v0 + 1008);
    outlined destroy of (label: String?, value: Any)?( *(void *)(v0 + 1048),  &demangling cache variable for type metadata for TemplatingResult?);
    swift_bridgeObjectRelease(v4);
    outlined destroy of (label: String?, value: Any)?( v8,  &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v9 = *(void **)(v0 + 1056);
    unint64_t v10 = *(double *)*(&off_BB9C8 + *(char *)(*(void *)(v0 + 912) + 64LL));
    *(void *)(v0 + 184) = v0 + 872;
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = LocationFetchFlow.execute();
    *(void *)(v0 + 40specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = swift_continuation_init(v0 + 144, 1LL);
    *(void *)(v0 + 368) = _NSConcreteStackBlock;
    *(void *)(v0 + 376) = 0x40000000LL;
    *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    *(void *)(v0 + 39__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &block_descriptor_1;
    [v9 currentLocationWithAccuracy:v0 + 368 timeout:v10 completion:2.0];
    return swift_continuation_await(v0 + 144);
  }

  else
  {
    uint64_t v41 = *(void **)(v0 + 1056);
    uint64_t v43 = *(void *)(v0 + 1048);
    uint64_t v12 = *(void *)(v0 + 984);
    uint64_t v40 = *(void *)(v0 + 976);
    uint64_t v39 = *(void *)(v0 + 968);
    uint64_t v37 = *(void *)(v0 + 952);
    uint64_t v38 = *(void *)(v0 + 944);
    uint64_t v13 = *(void *)(v0 + 936);
    uint64_t v35 = *(void *)(v0 + 960);
    uint64_t v36 = *(void *)(v0 + 928);
    unint64_t v14 = *(void *)(v0 + 920);
    unint64_t v15 = *(void **)(v0 + 912);
    (*(void (**)(uint64_t, void))(v40 + 32))(v12, *(void *)(v0 + 1008));
    uint64_t v16 = v15[6];
    uint64_t v17 = v15[7];
    __swift_project_boxed_opaque_existential_1(v15 + 3, v16);
    (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
    uint64_t v18 = type metadata accessor for NLContextUpdate(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v14, 1LL, 1LL, v18);
    *(void *)(v0 + 76specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0LL;
    *(_OWORD *)(v0 + 728) = 0u;
    *(_OWORD *)(v0 + 744) = 0u;
    size_t v19 = v12;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)( v12,  v0 + 448,  1LL,  v4,  0LL,  1LL,  v14,  _swiftEmptyArrayStorage,  v0 + 728,  0LL);
    swift_bridgeObjectRelease(v4);
    outlined destroy of (label: String?, value: Any)?( v0 + 728,  &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?( v14,  &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 448));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v37, v35, v36);
    uint64_t v20 = *(unsigned __int8 *)(v13 + 80);
    uint64_t v21 = (v20 + 16) & ~v20;
    uint64_t v22 = swift_allocObject(&unk_BB858, v21 + v38, v20 | 7);
    unint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v22 + v21, v37, v36);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v23);
    unint64_t v24 = type metadata accessor for SimpleOutputFlowAsync(0LL);
    swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    unint64_t v25 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v45,  &async function pointer to partial apply for closure #1 in LocationFetchFlow.execute(),  v22);
    *(void *)(v0 + 864) = v25;
    static ExecuteResponse.complete<A>(next:)(v0 + 864, v24, &protocol witness table for SimpleOutputFlowAsync);
    swift_release(v25);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v35, v36);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v19, v39);
    outlined destroy of (label: String?, value: Any)?( v43,  &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v26 = *(void *)(v0 + 1040);
    uint64_t v27 = *(void *)(v0 + 1032);
    uint64_t v28 = *(void *)(v0 + 1024);
    uint64_t v29 = *(void *)(v0 + 1016);
    uint64_t v30 = *(void *)(v0 + 1008);
    uint64_t v31 = *(void *)(v0 + 1000);
    uint64_t v32 = *(void *)(v0 + 992);
    uint64_t v33 = *(void *)(v0 + 984);
    uint64_t v34 = *(void *)(v0 + 960);
    uint64_t v42 = *(void *)(v0 + 952);
    uint64_t v44 = *(void *)(v0 + 920);
    swift_task_dealloc(*(void *)(v0 + 1048));
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v42);
    swift_task_dealloc(v44);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  double v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[40];
  outlined destroy of (label: String?, value: Any)?( *(void *)(v0 + 1048),  &demangling cache variable for type metadata for TemplatingResult?);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 208));
  id v1 = *(void *)(v0 + 1048);
  uint64_t v2 = *(void *)(v0 + 1040);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0 + 1064))(v2, 1LL, 1LL, *(void *)(v0 + 968));
  outlined init with take of TemplatingResult?(v2, v1);
  double v3 = *(void *)(v0 + 1080);
  uint64_t v4 = *(void *)(v0 + 1008);
  uint64_t v5 = *(void *)(v0 + 976);
  uint64_t v6 = *(void *)(v0 + 968);
  outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1LL, v6) == 1)
  {
    unint64_t v7 = *(void *)(v0 + 1008);
    outlined destroy of (label: String?, value: Any)?( *(void *)(v0 + 1048),  &demangling cache variable for type metadata for TemplatingResult?);
    swift_bridgeObjectRelease(v3);
    outlined destroy of (label: String?, value: Any)?( v7,  &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v8 = *(void **)(v0 + 1056);
    uint64_t v9 = *(double *)*(&off_BB9C8 + *(char *)(*(void *)(v0 + 912) + 64LL));
    *(void *)(v0 + 184) = v0 + 872;
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = LocationFetchFlow.execute();
    *(void *)(v0 + 40specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = swift_continuation_init(v0 + 144, 1LL);
    *(void *)(v0 + 368) = _NSConcreteStackBlock;
    *(void *)(v0 + 376) = 0x40000000LL;
    *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    *(void *)(v0 + 39__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &block_descriptor_1;
    [v8 currentLocationWithAccuracy:v0 + 368 timeout:v9 completion:2.0];
    return swift_continuation_await(v0 + 144);
  }

  else
  {
    uint64_t v40 = *(void **)(v0 + 1056);
    uint64_t v42 = *(void *)(v0 + 1048);
    uint64_t v11 = *(void *)(v0 + 984);
    uint64_t v39 = *(void *)(v0 + 976);
    uint64_t v38 = *(void *)(v0 + 968);
    uint64_t v36 = *(void *)(v0 + 952);
    uint64_t v37 = *(void *)(v0 + 944);
    uint64_t v12 = *(void *)(v0 + 936);
    uint64_t v34 = *(void *)(v0 + 960);
    uint64_t v35 = *(void *)(v0 + 928);
    uint64_t v13 = *(void *)(v0 + 920);
    unint64_t v14 = *(void **)(v0 + 912);
    (*(void (**)(uint64_t, void))(v39 + 32))(v11, *(void *)(v0 + 1008));
    unint64_t v15 = v14[6];
    uint64_t v16 = v14[7];
    __swift_project_boxed_opaque_existential_1(v14 + 3, v15);
    (*(void (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
    uint64_t v17 = type metadata accessor for NLContextUpdate(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v13, 1LL, 1LL, v17);
    *(void *)(v0 + 76specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0LL;
    *(_OWORD *)(v0 + 728) = 0u;
    *(_OWORD *)(v0 + 744) = 0u;
    uint64_t v18 = v11;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)( v11,  v0 + 448,  1LL,  v3,  0LL,  1LL,  v13,  _swiftEmptyArrayStorage,  v0 + 728,  0LL);
    swift_bridgeObjectRelease(v3);
    outlined destroy of (label: String?, value: Any)?( v0 + 728,  &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?( v13,  &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 448));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v36, v34, v35);
    size_t v19 = *(unsigned __int8 *)(v12 + 80);
    uint64_t v20 = (v19 + 16) & ~v19;
    uint64_t v21 = swift_allocObject(&unk_BB858, v20 + v37, v19 | 7);
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v21 + v20, v36, v35);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v22);
    unint64_t v23 = type metadata accessor for SimpleOutputFlowAsync(0LL);
    swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    unint64_t v24 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v44,  &async function pointer to partial apply for closure #1 in LocationFetchFlow.execute(),  v21);
    *(void *)(v0 + 864) = v24;
    static ExecuteResponse.complete<A>(next:)(v0 + 864, v23, &protocol witness table for SimpleOutputFlowAsync);
    swift_release(v24);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v34, v35);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v18, v38);
    outlined destroy of (label: String?, value: Any)?( v42,  &demangling cache variable for type metadata for TemplatingResult?);
    unint64_t v25 = *(void *)(v0 + 1040);
    uint64_t v26 = *(void *)(v0 + 1032);
    uint64_t v27 = *(void *)(v0 + 1024);
    uint64_t v28 = *(void *)(v0 + 1016);
    uint64_t v29 = *(void *)(v0 + 1008);
    uint64_t v30 = *(void *)(v0 + 1000);
    uint64_t v31 = *(void *)(v0 + 992);
    uint64_t v32 = *(void *)(v0 + 984);
    uint64_t v33 = *(void *)(v0 + 960);
    uint64_t v41 = *(void *)(v0 + 952);
    uint64_t v43 = *(void *)(v0 + 920);
    swift_task_dealloc(*(void *)(v0 + 1048));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  double v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[40];
  outlined destroy of (label: String?, value: Any)?( *(void *)(v0 + 1048),  &demangling cache variable for type metadata for TemplatingResult?);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 568));
  id v1 = *(void *)(v0 + 1048);
  uint64_t v2 = *(void *)(v0 + 1016);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0 + 1064))(v2, 1LL, 1LL, *(void *)(v0 + 968));
  outlined init with take of TemplatingResult?(v2, v1);
  double v3 = *(void *)(v0 + 1008);
  uint64_t v4 = *(void *)(v0 + 976);
  uint64_t v5 = *(void *)(v0 + 968);
  outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, 1LL, v5) == 1)
  {
    uint64_t v6 = *(void *)(v0 + 1008);
    outlined destroy of (label: String?, value: Any)?( *(void *)(v0 + 1048),  &demangling cache variable for type metadata for TemplatingResult?);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    outlined destroy of (label: String?, value: Any)?( v6,  &demangling cache variable for type metadata for TemplatingResult?);
    unint64_t v7 = *(void **)(v0 + 1056);
    uint64_t v8 = *(double *)*(&off_BB9C8 + *(char *)(*(void *)(v0 + 912) + 64LL));
    *(void *)(v0 + 184) = v0 + 872;
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = LocationFetchFlow.execute();
    *(void *)(v0 + 40specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = swift_continuation_init(v0 + 144, 1LL);
    *(void *)(v0 + 368) = _NSConcreteStackBlock;
    *(void *)(v0 + 376) = 0x40000000LL;
    *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    *(void *)(v0 + 39__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &block_descriptor_1;
    [v7 currentLocationWithAccuracy:v0 + 368 timeout:v8 completion:2.0];
    return swift_continuation_await(v0 + 144);
  }

  else
  {
    uint64_t v38 = *(void **)(v0 + 1056);
    uint64_t v40 = *(void *)(v0 + 1048);
    unint64_t v10 = *(void *)(v0 + 984);
    uint64_t v37 = *(void *)(v0 + 976);
    uint64_t v36 = *(void *)(v0 + 968);
    uint64_t v11 = *(void *)(v0 + 960);
    uint64_t v34 = *(void *)(v0 + 952);
    uint64_t v35 = *(void *)(v0 + 944);
    uint64_t v12 = *(void *)(v0 + 936);
    uint64_t v33 = *(void *)(v0 + 928);
    uint64_t v13 = *(void *)(v0 + 920);
    unint64_t v14 = *(void **)(v0 + 912);
    (*(void (**)(uint64_t, void))(v37 + 32))(v10, *(void *)(v0 + 1008));
    uint64_t v16 = v14[6];
    unint64_t v15 = v14[7];
    __swift_project_boxed_opaque_existential_1(v14 + 3, v16);
    (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v16, v15);
    uint64_t v17 = type metadata accessor for NLContextUpdate(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v13, 1LL, 1LL, v17);
    *(void *)(v0 + 76specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0LL;
    *(_OWORD *)(v0 + 728) = 0u;
    *(_OWORD *)(v0 + 744) = 0u;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)( v10,  v0 + 448,  1LL,  _swiftEmptyArrayStorage,  0LL,  1LL,  v13,  _swiftEmptyArrayStorage,  v0 + 728,  0LL);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    outlined destroy of (label: String?, value: Any)?( v0 + 728,  &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?( v13,  &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 448));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v34, v11, v33);
    uint64_t v18 = *(unsigned __int8 *)(v12 + 80);
    size_t v19 = (v18 + 16) & ~v18;
    uint64_t v20 = swift_allocObject(&unk_BB858, v19 + v35, v18 | 7);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v20 + v19, v34, v33);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v21);
    uint64_t v22 = type metadata accessor for SimpleOutputFlowAsync(0LL);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    unint64_t v23 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v42,  &async function pointer to partial apply for closure #1 in LocationFetchFlow.execute(),  v20);
    *(void *)(v0 + 864) = v23;
    static ExecuteResponse.complete<A>(next:)(v0 + 864, v22, &protocol witness table for SimpleOutputFlowAsync);
    swift_release(v23);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v33);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v10, v36);
    outlined destroy of (label: String?, value: Any)?( v40,  &demangling cache variable for type metadata for TemplatingResult?);
    unint64_t v24 = *(void *)(v0 + 1040);
    unint64_t v25 = *(void *)(v0 + 1032);
    uint64_t v26 = *(void *)(v0 + 1024);
    uint64_t v27 = *(void *)(v0 + 1016);
    uint64_t v28 = *(void *)(v0 + 1008);
    uint64_t v29 = *(void *)(v0 + 1000);
    uint64_t v30 = *(void *)(v0 + 992);
    uint64_t v31 = *(void *)(v0 + 984);
    uint64_t v32 = *(void *)(v0 + 960);
    uint64_t v39 = *(void *)(v0 + 952);
    uint64_t v41 = *(void *)(v0 + 920);
    swift_task_dealloc(*(void *)(v0 + 1048));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v39);
    swift_task_dealloc(v41);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  os_log_type_t v11;
  os_log_s *v12;
  os_log_type_t v13;
  id v14;
  uint8_t *v15;
  uint64_t *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjCClassFromMetadata;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  double v39;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  os_log_s *log;
  os_log_t loga;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE v83[40];
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 288));
  id v1 = *(void *)(v0 + 1136);
  *(void *)(v0 + 1256) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 888) = v1;
  swift_errorRetain(v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  type metadata accessor for related decl 'e' for AFLocationServiceErrorCode(0LL);
  uint64_t v4 = v3;
  uint64_t v5 = swift_dynamicCast(v0 + 880, v0 + 888, v2, v3, 0LL);
  uint64_t v6 = *(void **)(v0 + 912);
  if ((v5 & 1) != 0)
  {
    unint64_t v7 = (void *)(v0 + 800);
    uint64_t v8 = (void *)(v0 + 808);
    uint64_t v9 = swift_errorRelease(v1);
    unint64_t v10 = *(void **)(v0 + 880);
    *(void *)(v0 + 1264) = v10;
    uint64_t v11 = static os_log_type_t.error.getter(v9);
    uint64_t v12 = (os_log_s *)v6[9];
    uint64_t v13 = v11;
    if (os_log_type_enabled(v12, v11))
    {
      unint64_t v14 = v10;
      unint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v16 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)unint64_t v15 = 138412290;
      uint64_t v17 = v14;
      os_log_t log = v12;
      uint64_t v18 = v10;
      size_t v19 = _swift_stdlib_bridgeErrorToNSError(v17);
      *(void *)(v0 + 84specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v19;
      unint64_t v7 = (void *)(v0 + 800);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 840, v0 + 848);
      *uint64_t v16 = v19;
      unint64_t v10 = v18;

      _os_log_impl(&dword_0, log, v13, "AFLocationServiceError: %@", v15, 0xCu);
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v16, 1LL, v20);
      uint64_t v21 = v16;
      uint64_t v8 = (void *)(v0 + 808);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    *uint64_t v8 = v10;
    uint64_t v22 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode,  (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
    _BridgedStoredNSError.code.getter(v4, v22);
    if (*v7 == 5LL)
    {
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      unint64_t v23 = v0 + 648;
      unint64_t v24 = type metadata accessor for CATService();
      unint64_t v25 = swift_allocObject(v24, 40LL, 7LL);
      *(void *)(v0 + 127__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v25;
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v24);
      *(void *)(v25 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
      type metadata accessor for OS_os_log();
      uint64_t v27 = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
      *(void *)(v25 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v27;
      *(_BYTE *)(v25 + 16) = 0;
      *(void *)(v0 + 67__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &type metadata for LocationServices;
      *(void *)(v0 + 68specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &protocol witness table for LocationServices;
      *(_BYTE *)(v0 + 648) = 0;
      uint64_t v28 = static DialogHelper.globals.getter(v27);
      *(void *)(v0 + 128specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v28;
      uint64_t v29 = (void *)swift_task_alloc(dword_C5C5C);
      *(void *)(v0 + 1288) = v29;
      *uint64_t v29 = v0;
      v29[1] = LocationFetchFlow.execute();
      uint64_t v30 = *(void *)(v0 + 1000);
    }

    else
    {
      unint64_t v23 = v0 + 688;
      uint64_t v41 = *(void *)(v0 + 912);
      uint64_t v42 = lazy protocol witness table accessor for type Errors and conformance Errors();
      uint64_t v43 = swift_allocError(&type metadata for Errors, v42, 0LL, 0LL);
      *(void *)uint64_t v44 = 0xD00000000000001FLL;
      *(void *)(v44 + 8) = 0x800000000009EA30LL;
      *(_BYTE *)(v44 + 16) = 2;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 152LL))(v43, 2LL);
      uint64_t v45 = type metadata accessor for CATService();
      uint64_t v46 = swift_allocObject(v45, 40LL, 7LL);
      *(void *)(v0 + 1296) = v46;
      uint64_t v47 = swift_getObjCClassFromMetadata(v45);
      *(void *)(v46 + 24) = [(id)objc_opt_self(NSBundle) bundleForClass:v47];
      type metadata accessor for OS_os_log();
      uint64_t v48 = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
      *(void *)(v46 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v48;
      *(_BYTE *)(v46 + 16) = 0;
      *(void *)(v0 + 71__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &type metadata for LocationServices;
      *(void *)(v0 + 72specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &protocol witness table for LocationServices;
      *(_BYTE *)(v0 + 688) = 2;
      uint64_t v28 = static DialogHelper.globals.getter(v48);
      *(void *)(v0 + 1304) = v28;
      uint64_t v49 = (void *)swift_task_alloc(dword_C5C5C);
      *(void *)(v0 + 131__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v49;
      *uint64_t v49 = v0;
      v49[1] = LocationFetchFlow.execute();
      uint64_t v30 = *(void *)(v0 + 992);
    }

    return CATService.execute(model:globals:)(v30, v23, v28);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 888));
    uint64_t v31 = lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v32 = swift_allocError(&type metadata for Errors, v31, 0LL, 0LL);
    *(void *)uint64_t v33 = 0xD000000000000038LL;
    *(void *)(v33 + 8) = 0x800000000009E960LL;
    *(_BYTE *)(v33 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t))(*v6 + 152LL))(v32, 2LL);
    swift_errorRelease(v1);
    uint64_t v34 = *(void *)(v0 + 1008);
    uint64_t v35 = *(void *)(v0 + 976);
    uint64_t v36 = *(void *)(v0 + 968);
    outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v34);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v34, 1LL, v36) == 1)
    {
      uint64_t v37 = *(void *)(v0 + 1008);
      outlined destroy of (label: String?, value: Any)?( *(void *)(v0 + 1048),  &demangling cache variable for type metadata for TemplatingResult?);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      outlined destroy of (label: String?, value: Any)?( v37,  &demangling cache variable for type metadata for TemplatingResult?);
      uint64_t v38 = *(void **)(v0 + 1056);
      uint64_t v39 = *(double *)*(&off_BB9C8 + *(char *)(*(void *)(v0 + 912) + 64LL));
      *(void *)(v0 + 184) = v0 + 872;
      *(void *)(v0 + 144) = v0;
      *(void *)(v0 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = LocationFetchFlow.execute();
      *(void *)(v0 + 40specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = swift_continuation_init(v0 + 144, 1LL);
      *(void *)(v0 + 368) = _NSConcreteStackBlock;
      *(void *)(v0 + 376) = 0x40000000LL;
      *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
      *(void *)(v0 + 39__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &block_descriptor_1;
      [v38 currentLocationWithAccuracy:v0 + 368 timeout:v39 completion:2.0];
      return swift_continuation_await(v0 + 144);
    }

    else
    {
      uint64_t v79 = *(void **)(v0 + 1056);
      uint64_t v81 = *(void *)(v0 + 1048);
      uint64_t v50 = *(void *)(v0 + 984);
      uint64_t v78 = *(void *)(v0 + 976);
      loga = *(os_log_t *)(v0 + 968);
      uint64_t v51 = *(void *)(v0 + 960);
      uint64_t v74 = *(void *)(v0 + 952);
      uint64_t v75 = *(void *)(v0 + 944);
      uint64_t v52 = *(void *)(v0 + 936);
      uint64_t v73 = *(void *)(v0 + 928);
      uint64_t v53 = *(void *)(v0 + 920);
      uint64_t v54 = *(void **)(v0 + 912);
      (*(void (**)(uint64_t, void))(v78 + 32))(v50, *(void *)(v0 + 1008));
      uint64_t v56 = v54[6];
      uint64_t v55 = v54[7];
      __swift_project_boxed_opaque_existential_1(v54 + 3, v56);
      (*(void (**)(uint64_t, uint64_t))(v55 + 32))(v56, v55);
      uint64_t v57 = type metadata accessor for NLContextUpdate(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56LL))(v53, 1LL, 1LL, v57);
      *(void *)(v0 + 76specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0LL;
      *(_OWORD *)(v0 + 728) = 0u;
      *(_OWORD *)(v0 + 744) = 0u;
      static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)( v50,  v0 + 448,  1LL,  _swiftEmptyArrayStorage,  0LL,  1LL,  v53,  _swiftEmptyArrayStorage,  v0 + 728,  0LL);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      outlined destroy of (label: String?, value: Any)?( v0 + 728,  &demangling cache variable for type metadata for FlowActivity?);
      outlined destroy of (label: String?, value: Any)?( v53,  &demangling cache variable for type metadata for NLContextUpdate?);
      __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 448));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v74, v51, v73);
      uint64_t v58 = *(unsigned __int8 *)(v52 + 80);
      uint64_t v59 = (v58 + 16) & ~v58;
      uint64_t v60 = swift_allocObject(&unk_BB858, v59 + v75, v58 | 7);
      uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v60 + v59, v74, v73);
      static OutputPublisherFactory.makeOutputPublisherAsync()(v61);
      uint64_t v62 = type metadata accessor for SimpleOutputFlowAsync(0LL);
      swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
      uint64_t v63 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v83,  &async function pointer to partial apply for closure #1 in LocationFetchFlow.execute(),  v60);
      *(void *)(v0 + 864) = v63;
      static ExecuteResponse.complete<A>(next:)(v0 + 864, v62, &protocol witness table for SimpleOutputFlowAsync);
      swift_release(v63);

      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v73);
      (*(void (**)(uint64_t, os_log_t))(v78 + 8))(v50, loga);
      outlined destroy of (label: String?, value: Any)?( v81,  &demangling cache variable for type metadata for TemplatingResult?);
      uint64_t v64 = *(void *)(v0 + 1040);
      uint64_t v65 = *(void *)(v0 + 1032);
      uint64_t v66 = *(void *)(v0 + 1024);
      uint64_t v67 = *(void *)(v0 + 1016);
      uint64_t v68 = *(void *)(v0 + 1008);
      uint64_t v69 = *(void *)(v0 + 1000);
      uint64_t v70 = *(void *)(v0 + 992);
      char v71 = *(void *)(v0 + 984);
      uint64_t v72 = *(void *)(v0 + 960);
      uint64_t v80 = *(void *)(v0 + 952);
      uint64_t v82 = *(void *)(v0 + 920);
      swift_task_dealloc(*(void *)(v0 + 1048));
      swift_task_dealloc(v64);
      swift_task_dealloc(v65);
      swift_task_dealloc(v66);
      swift_task_dealloc(v67);
      swift_task_dealloc(v68);
      swift_task_dealloc(v69);
      swift_task_dealloc(v70);
      swift_task_dealloc(v71);
      swift_task_dealloc(v72);
      swift_task_dealloc(v80);
      swift_task_dealloc(v82);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  os_log_type_t v12;
  os_log_s *v13;
  os_log_type_t v14;
  id v15;
  uint8_t *v16;
  uint64_t *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjCClassFromMetadata;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  double v40;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE v84[40];
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 408));
  id v1 = *(void *)(v0 + 1168);
  uint64_t v2 = *(void *)(v0 + 1144);
  *(void *)(v0 + 1256) = v2;
  *(void *)(v0 + 888) = v1;
  swift_errorRetain(v1);
  double v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  type metadata accessor for related decl 'e' for AFLocationServiceErrorCode(0LL);
  uint64_t v5 = v4;
  uint64_t v6 = swift_dynamicCast(v0 + 880, v0 + 888, v3, v4, 0LL);
  unint64_t v7 = *(void **)(v0 + 912);
  if ((v6 & 1) != 0)
  {
    uint64_t v8 = (void *)(v0 + 800);
    uint64_t v9 = (void *)(v0 + 808);
    unint64_t v10 = swift_errorRelease(v1);
    uint64_t v11 = *(void **)(v0 + 880);
    *(void *)(v0 + 1264) = v11;
    uint64_t v12 = static os_log_type_t.error.getter(v10);
    uint64_t v13 = (os_log_s *)v7[9];
    unint64_t v14 = v12;
    if (os_log_type_enabled(v13, v12))
    {
      unint64_t v15 = v11;
      uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v17 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v16 = 138412290;
      uint64_t v18 = v15;
      size_t v19 = _swift_stdlib_bridgeErrorToNSError(v18);
      *(void *)(v0 + 84specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 840, v0 + 848);
      void *v17 = v19;

      _os_log_impl(&dword_0, v13, v14, "AFLocationServiceError: %@", v16, 0xCu);
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v17, 1LL, v20);
      uint64_t v21 = v17;
      uint64_t v9 = (void *)(v0 + 808);
      swift_slowDealloc(v21, -1LL, -1LL);
      uint64_t v22 = v16;
      uint64_t v8 = (void *)(v0 + 800);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    *uint64_t v9 = v11;
    unint64_t v23 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode,  (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
    _BridgedStoredNSError.code.getter(v5, v23);
    if (*v8 == 5LL)
    {
      swift_bridgeObjectRelease(v2);
      unint64_t v24 = v0 + 648;
      unint64_t v25 = type metadata accessor for CATService();
      uint64_t v26 = swift_allocObject(v25, 40LL, 7LL);
      *(void *)(v0 + 127__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v26;
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v25);
      *(void *)(v26 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
      type metadata accessor for OS_os_log();
      uint64_t v28 = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
      *(void *)(v26 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v28;
      *(_BYTE *)(v26 + 16) = 0;
      *(void *)(v0 + 67__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &type metadata for LocationServices;
      *(void *)(v0 + 68specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &protocol witness table for LocationServices;
      *(_BYTE *)(v0 + 648) = 0;
      uint64_t v29 = static DialogHelper.globals.getter(v28);
      *(void *)(v0 + 128specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v29;
      uint64_t v30 = (void *)swift_task_alloc(dword_C5C5C);
      *(void *)(v0 + 1288) = v30;
      *uint64_t v30 = v0;
      v30[1] = LocationFetchFlow.execute();
      uint64_t v31 = *(void *)(v0 + 1000);
    }

    else
    {
      unint64_t v24 = v0 + 688;
      uint64_t v42 = *(void *)(v0 + 912);
      uint64_t v43 = lazy protocol witness table accessor for type Errors and conformance Errors();
      uint64_t v44 = swift_allocError(&type metadata for Errors, v43, 0LL, 0LL);
      *(void *)uint64_t v45 = 0xD00000000000001FLL;
      *(void *)(v45 + 8) = 0x800000000009EA30LL;
      *(_BYTE *)(v45 + 16) = 2;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 152LL))(v44, 2LL);
      uint64_t v46 = type metadata accessor for CATService();
      uint64_t v47 = swift_allocObject(v46, 40LL, 7LL);
      *(void *)(v0 + 1296) = v47;
      uint64_t v48 = swift_getObjCClassFromMetadata(v46);
      *(void *)(v47 + 24) = [(id)objc_opt_self(NSBundle) bundleForClass:v48];
      type metadata accessor for OS_os_log();
      uint64_t v49 = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
      *(void *)(v47 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v49;
      *(_BYTE *)(v47 + 16) = 0;
      *(void *)(v0 + 71__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &type metadata for LocationServices;
      *(void *)(v0 + 72specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &protocol witness table for LocationServices;
      *(_BYTE *)(v0 + 688) = 2;
      uint64_t v29 = static DialogHelper.globals.getter(v49);
      *(void *)(v0 + 1304) = v29;
      uint64_t v50 = (void *)swift_task_alloc(dword_C5C5C);
      *(void *)(v0 + 131__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v50;
      *uint64_t v50 = v0;
      v50[1] = LocationFetchFlow.execute();
      uint64_t v31 = *(void *)(v0 + 992);
    }

    return CATService.execute(model:globals:)(v31, v24, v29);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 888));
    uint64_t v32 = lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v33 = swift_allocError(&type metadata for Errors, v32, 0LL, 0LL);
    *(void *)uint64_t v34 = 0xD000000000000038LL;
    *(void *)(v34 + 8) = 0x800000000009E960LL;
    *(_BYTE *)(v34 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t))(*v7 + 152LL))(v33, 2LL);
    swift_errorRelease(v1);
    uint64_t v35 = *(void *)(v0 + 1008);
    uint64_t v36 = *(void *)(v0 + 976);
    uint64_t v37 = *(void *)(v0 + 968);
    outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v35);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v35, 1LL, v37) == 1)
    {
      uint64_t v38 = *(void *)(v0 + 1008);
      outlined destroy of (label: String?, value: Any)?( *(void *)(v0 + 1048),  &demangling cache variable for type metadata for TemplatingResult?);
      swift_bridgeObjectRelease(v2);
      outlined destroy of (label: String?, value: Any)?( v38,  &demangling cache variable for type metadata for TemplatingResult?);
      uint64_t v39 = *(void **)(v0 + 1056);
      uint64_t v40 = *(double *)*(&off_BB9C8 + *(char *)(*(void *)(v0 + 912) + 64LL));
      *(void *)(v0 + 184) = v0 + 872;
      *(void *)(v0 + 144) = v0;
      *(void *)(v0 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = LocationFetchFlow.execute();
      *(void *)(v0 + 40specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = swift_continuation_init(v0 + 144, 1LL);
      *(void *)(v0 + 368) = _NSConcreteStackBlock;
      *(void *)(v0 + 376) = 0x40000000LL;
      *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
      *(void *)(v0 + 39__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &block_descriptor_1;
      [v39 currentLocationWithAccuracy:v0 + 368 timeout:v40 completion:2.0];
      return swift_continuation_await(v0 + 144);
    }

    else
    {
      uint64_t v80 = *(void **)(v0 + 1056);
      uint64_t v82 = *(void *)(v0 + 1048);
      uint64_t v51 = *(void *)(v0 + 984);
      uint64_t v79 = *(void *)(v0 + 976);
      uint64_t v78 = *(void *)(v0 + 968);
      uint64_t v76 = *(void *)(v0 + 952);
      uint64_t v77 = *(void *)(v0 + 944);
      uint64_t v52 = *(void *)(v0 + 936);
      uint64_t v74 = *(void *)(v0 + 960);
      uint64_t v75 = *(void *)(v0 + 928);
      uint64_t v53 = *(void *)(v0 + 920);
      uint64_t v54 = *(void **)(v0 + 912);
      (*(void (**)(uint64_t, void))(v79 + 32))(v51, *(void *)(v0 + 1008));
      uint64_t v55 = v54[6];
      uint64_t v56 = v54[7];
      __swift_project_boxed_opaque_existential_1(v54 + 3, v55);
      (*(void (**)(uint64_t, uint64_t))(v56 + 32))(v55, v56);
      uint64_t v57 = type metadata accessor for NLContextUpdate(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56LL))(v53, 1LL, 1LL, v57);
      *(void *)(v0 + 76specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0LL;
      *(_OWORD *)(v0 + 728) = 0u;
      *(_OWORD *)(v0 + 744) = 0u;
      uint64_t v58 = v51;
      static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)( v51,  v0 + 448,  1LL,  v2,  0LL,  1LL,  v53,  _swiftEmptyArrayStorage,  v0 + 728,  0LL);
      swift_bridgeObjectRelease(v2);
      outlined destroy of (label: String?, value: Any)?( v0 + 728,  &demangling cache variable for type metadata for FlowActivity?);
      outlined destroy of (label: String?, value: Any)?( v53,  &demangling cache variable for type metadata for NLContextUpdate?);
      __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 448));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v76, v74, v75);
      uint64_t v59 = *(unsigned __int8 *)(v52 + 80);
      uint64_t v60 = (v59 + 16) & ~v59;
      uint64_t v61 = swift_allocObject(&unk_BB858, v60 + v77, v59 | 7);
      uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v61 + v60, v76, v75);
      static OutputPublisherFactory.makeOutputPublisherAsync()(v62);
      uint64_t v63 = type metadata accessor for SimpleOutputFlowAsync(0LL);
      swift_allocObject(v63, *(unsigned int *)(v63 + 48), *(unsigned __int16 *)(v63 + 52));
      uint64_t v64 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v84,  &async function pointer to partial apply for closure #1 in LocationFetchFlow.execute(),  v61);
      *(void *)(v0 + 864) = v64;
      static ExecuteResponse.complete<A>(next:)(v0 + 864, v63, &protocol witness table for SimpleOutputFlowAsync);
      swift_release(v64);

      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v74, v75);
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v58, v78);
      outlined destroy of (label: String?, value: Any)?( v82,  &demangling cache variable for type metadata for TemplatingResult?);
      uint64_t v65 = *(void *)(v0 + 1040);
      uint64_t v66 = *(void *)(v0 + 1032);
      uint64_t v67 = *(void *)(v0 + 1024);
      uint64_t v68 = *(void *)(v0 + 1016);
      uint64_t v69 = *(void *)(v0 + 1008);
      uint64_t v70 = *(void *)(v0 + 1000);
      char v71 = *(void *)(v0 + 992);
      uint64_t v72 = *(void *)(v0 + 984);
      uint64_t v73 = *(void *)(v0 + 960);
      uint64_t v81 = *(void *)(v0 + 952);
      uint64_t v83 = *(void *)(v0 + 920);
      swift_task_dealloc(*(void *)(v0 + 1048));
      swift_task_dealloc(v65);
      swift_task_dealloc(v66);
      swift_task_dealloc(v67);
      swift_task_dealloc(v68);
      swift_task_dealloc(v69);
      swift_task_dealloc(v70);
      swift_task_dealloc(v71);
      swift_task_dealloc(v72);
      swift_task_dealloc(v73);
      swift_task_dealloc(v81);
      swift_task_dealloc(v83);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  double v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[40];
  outlined destroy of (label: String?, value: Any)?( *(void *)(v0 + 1048),  &demangling cache variable for type metadata for TemplatingResult?);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 648));
  id v1 = *(void **)(v0 + 1264);
  uint64_t v2 = *(void *)(v0 + 1048);
  double v3 = *(void *)(v0 + 1000);
  uint64_t v4 = *(void **)(v0 + 912);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0 + 1064))(v3, 1LL, 1LL, *(void *)(v0 + 968));
  outlined init with take of TemplatingResult?(v3, v2);
  uint64_t v5 = v4 + 3;
  uint64_t v6 = v4[6];
  unint64_t v7 = v4[7];
  __swift_project_boxed_opaque_existential_1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  uint64_t v8 = specialized static LocationServicesViews.makeDeepLink(status:device:)(1u, (void *)(v0 + 608));

  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 608));
  swift_errorRelease(*(void *)(v0 + 888));
  uint64_t v9 = *(void *)(v0 + 1008);
  unint64_t v10 = *(void *)(v0 + 976);
  uint64_t v11 = *(void *)(v0 + 968);
  outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v9, 1LL, v11) == 1)
  {
    uint64_t v12 = *(void *)(v0 + 1008);
    outlined destroy of (label: String?, value: Any)?( *(void *)(v0 + 1048),  &demangling cache variable for type metadata for TemplatingResult?);
    swift_bridgeObjectRelease(v8);
    outlined destroy of (label: String?, value: Any)?( v12,  &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v13 = *(void **)(v0 + 1056);
    unint64_t v14 = *(double *)*(&off_BB9C8 + *(char *)(*(void *)(v0 + 912) + 64LL));
    *(void *)(v0 + 184) = v0 + 872;
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = LocationFetchFlow.execute();
    *(void *)(v0 + 40specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = swift_continuation_init(v0 + 144, 1LL);
    *(void *)(v0 + 368) = _NSConcreteStackBlock;
    *(void *)(v0 + 376) = 0x40000000LL;
    *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    *(void *)(v0 + 39__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &block_descriptor_1;
    [v13 currentLocationWithAccuracy:v0 + 368 timeout:v14 completion:2.0];
    return swift_continuation_await(v0 + 144);
  }

  else
  {
    uint64_t v45 = *(void **)(v0 + 1056);
    uint64_t v47 = *(void *)(v0 + 1048);
    uint64_t v16 = *(void *)(v0 + 984);
    uint64_t v44 = *(void *)(v0 + 976);
    uint64_t v43 = *(void *)(v0 + 968);
    uint64_t v41 = *(void *)(v0 + 952);
    uint64_t v42 = *(void *)(v0 + 944);
    uint64_t v17 = *(void *)(v0 + 936);
    uint64_t v39 = *(void *)(v0 + 960);
    uint64_t v40 = *(void *)(v0 + 928);
    uint64_t v18 = *(void *)(v0 + 920);
    size_t v19 = *(void **)(v0 + 912);
    (*(void (**)(uint64_t, void))(v44 + 32))(v16, *(void *)(v0 + 1008));
    uint64_t v20 = v19[6];
    uint64_t v21 = v19[7];
    __swift_project_boxed_opaque_existential_1(v19 + 3, v20);
    (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
    uint64_t v22 = type metadata accessor for NLContextUpdate(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v18, 1LL, 1LL, v22);
    *(void *)(v0 + 76specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0LL;
    *(_OWORD *)(v0 + 728) = 0u;
    *(_OWORD *)(v0 + 744) = 0u;
    unint64_t v23 = v16;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)( v16,  v0 + 448,  1LL,  v8,  0LL,  1LL,  v18,  _swiftEmptyArrayStorage,  v0 + 728,  0LL);
    swift_bridgeObjectRelease(v8);
    outlined destroy of (label: String?, value: Any)?( v0 + 728,  &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?( v18,  &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 448));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v41, v39, v40);
    unint64_t v24 = *(unsigned __int8 *)(v17 + 80);
    unint64_t v25 = (v24 + 16) & ~v24;
    uint64_t v26 = swift_allocObject(&unk_BB858, v25 + v42, v24 | 7);
    uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v26 + v25, v41, v40);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v27);
    uint64_t v28 = type metadata accessor for SimpleOutputFlowAsync(0LL);
    swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
    uint64_t v29 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v49,  &async function pointer to partial apply for closure #1 in LocationFetchFlow.execute(),  v26);
    *(void *)(v0 + 864) = v29;
    static ExecuteResponse.complete<A>(next:)(v0 + 864, v28, &protocol witness table for SimpleOutputFlowAsync);
    swift_release(v29);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v39, v40);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v23, v43);
    outlined destroy of (label: String?, value: Any)?( v47,  &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v30 = *(void *)(v0 + 1040);
    uint64_t v31 = *(void *)(v0 + 1032);
    uint64_t v32 = *(void *)(v0 + 1024);
    uint64_t v33 = *(void *)(v0 + 1016);
    uint64_t v34 = *(void *)(v0 + 1008);
    uint64_t v35 = *(void *)(v0 + 1000);
    uint64_t v36 = *(void *)(v0 + 992);
    uint64_t v37 = *(void *)(v0 + 984);
    uint64_t v38 = *(void *)(v0 + 960);
    uint64_t v46 = *(void *)(v0 + 952);
    uint64_t v48 = *(void *)(v0 + 920);
    swift_task_dealloc(*(void *)(v0 + 1048));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  double v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[40];
  id v1 = *(void *)(v0 + 1048);

  outlined destroy of (label: String?, value: Any)?( v1,  &demangling cache variable for type metadata for TemplatingResult?);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 688));
  uint64_t v2 = *(void *)(v0 + 1048);
  double v3 = *(void *)(v0 + 992);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0 + 1064))(v3, 1LL, 1LL, *(void *)(v0 + 968));
  outlined init with take of TemplatingResult?(v3, v2);
  uint64_t v4 = *(void *)(v0 + 1256);
  swift_errorRelease(*(void *)(v0 + 888));
  uint64_t v5 = *(void *)(v0 + 1008);
  uint64_t v6 = *(void *)(v0 + 976);
  unint64_t v7 = *(void *)(v0 + 968);
  outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v5, 1LL, v7) == 1)
  {
    uint64_t v8 = *(void *)(v0 + 1008);
    outlined destroy of (label: String?, value: Any)?( *(void *)(v0 + 1048),  &demangling cache variable for type metadata for TemplatingResult?);
    swift_bridgeObjectRelease(v4);
    outlined destroy of (label: String?, value: Any)?( v8,  &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v9 = *(void **)(v0 + 1056);
    unint64_t v10 = *(double *)*(&off_BB9C8 + *(char *)(*(void *)(v0 + 912) + 64LL));
    *(void *)(v0 + 184) = v0 + 872;
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = LocationFetchFlow.execute();
    *(void *)(v0 + 40specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = swift_continuation_init(v0 + 144, 1LL);
    *(void *)(v0 + 368) = _NSConcreteStackBlock;
    *(void *)(v0 + 376) = 0x40000000LL;
    *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    *(void *)(v0 + 39__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = &block_descriptor_1;
    [v9 currentLocationWithAccuracy:v0 + 368 timeout:v10 completion:2.0];
    return swift_continuation_await(v0 + 144);
  }

  else
  {
    uint64_t v41 = *(void **)(v0 + 1056);
    uint64_t v43 = *(void *)(v0 + 1048);
    uint64_t v12 = *(void *)(v0 + 984);
    uint64_t v40 = *(void *)(v0 + 976);
    uint64_t v39 = *(void *)(v0 + 968);
    uint64_t v37 = *(void *)(v0 + 952);
    uint64_t v38 = *(void *)(v0 + 944);
    uint64_t v13 = *(void *)(v0 + 936);
    uint64_t v35 = *(void *)(v0 + 960);
    uint64_t v36 = *(void *)(v0 + 928);
    unint64_t v14 = *(void *)(v0 + 920);
    unint64_t v15 = *(void **)(v0 + 912);
    (*(void (**)(uint64_t, void))(v40 + 32))(v12, *(void *)(v0 + 1008));
    uint64_t v16 = v15[6];
    uint64_t v17 = v15[7];
    __swift_project_boxed_opaque_existential_1(v15 + 3, v16);
    (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
    uint64_t v18 = type metadata accessor for NLContextUpdate(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v14, 1LL, 1LL, v18);
    *(void *)(v0 + 76specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0LL;
    *(_OWORD *)(v0 + 728) = 0u;
    *(_OWORD *)(v0 + 744) = 0u;
    size_t v19 = v12;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)( v12,  v0 + 448,  1LL,  v4,  0LL,  1LL,  v14,  _swiftEmptyArrayStorage,  v0 + 728,  0LL);
    swift_bridgeObjectRelease(v4);
    outlined destroy of (label: String?, value: Any)?( v0 + 728,  &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?( v14,  &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 448));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v37, v35, v36);
    uint64_t v20 = *(unsigned __int8 *)(v13 + 80);
    uint64_t v21 = (v20 + 16) & ~v20;
    uint64_t v22 = swift_allocObject(&unk_BB858, v21 + v38, v20 | 7);
    unint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v22 + v21, v37, v36);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v23);
    unint64_t v24 = type metadata accessor for SimpleOutputFlowAsync(0LL);
    swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    unint64_t v25 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v45,  &async function pointer to partial apply for closure #1 in LocationFetchFlow.execute(),  v22);
    *(void *)(v0 + 864) = v25;
    static ExecuteResponse.complete<A>(next:)(v0 + 864, v24, &protocol witness table for SimpleOutputFlowAsync);
    swift_release(v25);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v35, v36);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v19, v39);
    outlined destroy of (label: String?, value: Any)?( v43,  &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v26 = *(void *)(v0 + 1040);
    uint64_t v27 = *(void *)(v0 + 1032);
    uint64_t v28 = *(void *)(v0 + 1024);
    uint64_t v29 = *(void *)(v0 + 1016);
    uint64_t v30 = *(void *)(v0 + 1008);
    uint64_t v31 = *(void *)(v0 + 1000);
    uint64_t v32 = *(void *)(v0 + 992);
    uint64_t v33 = *(void *)(v0 + 984);
    uint64_t v34 = *(void *)(v0 + 960);
    uint64_t v42 = *(void *)(v0 + 952);
    uint64_t v44 = *(void *)(v0 + 920);
    swift_task_dealloc(*(void *)(v0 + 1048));
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v42);
    swift_task_dealloc(v44);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFLocationAuthorizationStyle, @unowned CLAccuracyAuthorization, @unowned NSError?) -> () with result type (AFLocationAuthorizationStyle, CLAccuracyAuthorization)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (a4)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v7 = swift_allocError(v6, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v8 = a4;
    id v9 = a4;
    return swift_continuation_throwingResumeWithError(v4, v7);
  }

  else
  {
    uint64_t v11 = *(void **)(*(void *)(v4 + 64) + 40LL);
    *uint64_t v11 = a2;
    v11[1] = a3;
    return swift_continuation_throwingResume(v4);
  }

uint64_t closure #1 in LocationFetchFlow.execute()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(closure #1 in LocationFetchFlow.execute(), 0LL, 0LL);
}

double LocationAccessLevelFor.requestingAccuracy.getter(char a1)
{
  return *(double *)*(&off_BB9C8 + a1);
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation( uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else if (a2)
  {
    **(void **)(*(void *)(v3 + 64) + 4swift_beginAccess(v2 + 80, v7, 1LL, 0LL) = a2;
    id v9 = a2;
    return swift_continuation_throwingResume(v3);
  }

  else
  {
    __break(1u);
  }

  return result;
}

double LocationAccessLevelFor.minimalViableAccuracy.getter(char a1)
{
  return *(double *)*(&off_BB9E8 + a1);
}

uint64_t LocationFetchFlow.unknownLocationOutput()(uint64_t a1)
{
  v2[18] = a1;
  v2[19] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[20] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for AceOutput(0LL);
  v2[21] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[22] = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  v2[23] = v6;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  _BYTE v2[24] = swift_task_alloc(v7);
  v2[25] = swift_task_alloc(v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v2[26] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for TemplatingResult(0LL);
  v2[27] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[28] = v10;
  v2[29] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(LocationFetchFlow.unknownLocationOutput(), 0LL, 0LL);
}

uint64_t LocationFetchFlow.unknownLocationOutput()()
{
  uint64_t v1 = type metadata accessor for CATService();
  uint64_t v2 = swift_allocObject(v1, 40LL, 7LL);
  *(void *)(v0 + 24specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v2;
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v1);
  *(void *)(v2 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  type metadata accessor for OS_os_log();
  uint64_t v4 = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v4;
  *(_BYTE *)(v2 + 16) = 0;
  *(void *)(v0 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &type metadata for LocationServices;
  *(void *)(v0 + 48) = &protocol witness table for LocationServices;
  *(_BYTE *)(v0 + 16) = 2;
  uint64_t v5 = static DialogHelper.globals.getter(v4);
  *(void *)(v0 + 248) = v5;
  uint64_t v6 = (void *)swift_task_alloc(dword_C5C5C);
  *(void *)(v0 + 256) = v6;
  void *v6 = v0;
  v6[1] = LocationFetchFlow.unknownLocationOutput();
  return CATService.execute(model:globals:)(*(void *)(v0 + 208), v0 + 16, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v2 = *(void **)v1;
  swift_task_dealloc(*(void *)(*(void *)v1 + 256LL));
  if (v0)
  {
    uint64_t v5 = v2 + 30;
    uint64_t v4 = v2[30];
    uint64_t v3 = v5[1];
    swift_errorRelease(v0);
    swift_bridgeObjectRelease(v3);
    swift_release(v4);
    uint64_t v6 = LocationFetchFlow.unknownLocationOutput();
  }

  else
  {
    unint64_t v7 = v2[31];
    swift_release(v2[30]);
    swift_bridgeObjectRelease(v7);
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 2);
    uint64_t v6 = LocationFetchFlow.unknownLocationOutput();
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[40];
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 176);
  unint64_t v25 = *(void *)(v0 + 192);
  uint64_t v26 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 160);
  unint64_t v24 = *(void *)(v0 + 168);
  unint64_t v7 = *(void **)(v0 + 152);
  uint64_t v27 = *(void *)(v0 + 224);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v2, 0LL, 1LL, v3);
  uint64_t v8 = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v1, v2, v3);
  uint64_t v9 = v7 + 3;
  uint64_t v11 = v7[6];
  uint64_t v10 = v7[7];
  __swift_project_boxed_opaque_existential_1(v9, v11);
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v11, v10);
  uint64_t v12 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v6, 1LL, 1LL, v12);
  *(void *)(v0 + 128) = 0LL;
  *(_OWORD *)(v0 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v8,  v0 + 56,  1LL,  _swiftEmptyArrayStorage,  0LL,  1LL,  v6,  _swiftEmptyArrayStorage,  v0 + 96);
  outlined destroy of (label: String?, value: Any)?( v0 + 96,  &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (label: String?, value: Any)?( v6,  &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v25, v4, v24);
  uint64_t v13 = *(unsigned __int8 *)(v5 + 80);
  unint64_t v14 = (v13 + 16) & ~v13;
  unint64_t v15 = swift_allocObject(&unk_BB9B0, v14 + v26, v13 | 7);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v15 + v14, v25, v24);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v16);
  uint64_t v17 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  uint64_t v18 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v28,  &async function pointer to partial apply for closure #1 in LocationFetchFlow.unknownLocationOutput(),  v15);
  *(void *)(v0 + 136) = v18;
  static ExecuteResponse.complete<A>(next:)(v0 + 136, v17, &protocol witness table for SimpleOutputFlowAsync);
  swift_release(v18);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v24);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v8, v3);
  size_t v19 = *(void *)(v0 + 200);
  uint64_t v20 = *(void *)(v0 + 208);
  uint64_t v21 = *(void *)(v0 + 192);
  uint64_t v22 = *(void *)(v0 + 160);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v20);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 152);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, 1LL, 1LL, v1);
  uint64_t v5 = outlined destroy of (label: String?, value: Any)?( v3,  &demangling cache variable for type metadata for TemplatingResult?);
  uint64_t v6 = static os_log_type_t.error.getter(v5);
  unint64_t v7 = os_log(_:dso:log:_:_:)( v6,  &dword_0,  *(void *)(v4 + 72),  "error generating error dialog for location services",  51LL,  2LL,  _swiftEmptyArrayStorage);
  static ExecuteResponse.complete()(v7);
  uint64_t v8 = *(void *)(v0 + 200);
  uint64_t v9 = *(void *)(v0 + 208);
  uint64_t v10 = *(void *)(v0 + 192);
  uint64_t v11 = *(void *)(v0 + 160);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in LocationFetchFlow.unknownLocationOutput()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(closure #1 in LocationFetchFlow.unknownLocationOutput(), 0LL, 0LL);
}

uint64_t closure #1 in LocationFetchFlow.unknownLocationOutput()()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = type metadata accessor for AceOutput(0LL);
  v1[3] = v3;
  v1[4] = &protocol witness table for AceOutput;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v1);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(boxed_opaque_existential_0, v2, v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LocationFetchFlow.deinit()
{
  outlined consume of LocationFetchFlow.ExitValue(*(id *)(v0 + 80), *(_BYTE *)(v0 + 88));
  return v0;
}

uint64_t LocationFetchFlow.__deallocating_deinit()
{
  outlined consume of LocationFetchFlow.ExitValue(*(id *)(v0 + 80), *(_BYTE *)(v0 + 88));
  return swift_deallocClassInstance(v0, 89LL, 7LL);
}

uint64_t protocol witness for Flow.on(input:) in conformance LocationFetchFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176LL))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance LocationFetchFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184LL))();
}

uint64_t protocol witness for Flow.execute() in conformance LocationFetchFlow(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 192LL);
  unint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance LocationFetchFlow@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 144LL))();
  *(void *)a1 = result;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)( uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  return _swift_stdlib_bridgeErrorToNSError(v1);
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  unint64_t v7 = (void *)v6;
  uint64_t v8 = *a1 + 8;
  if (v6) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0LL;
  }
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
  *a1 = v8;
  uint64_t v9 = *a2;
  if (*a2)
  {
    *uint64_t v9 = v7;
    *a2 = v9 + 1;
  }

  else
  {
  }

uint64_t outlined init with copy of TemplatingResult?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in LocationFetchFlow.execute()(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for AceOutput(0LL) - 8) + 80LL);
  uint64_t v5 = v1 + ((v4 + 16) & ~v4);
  uint64_t v6 = (void *)swift_task_alloc(dword_C854C);
  *(void *)(v2 + 16) = v6;
  void *v6 = v2;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  _OWORD v6[2] = a1;
  void v6[3] = v5;
  return swift_task_switch(closure #1 in LocationFetchFlow.execute(), 0LL, 0LL);
}

uint64_t outlined init with take of TemplatingResult?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type LocationAccessLevelFor and conformance LocationAccessLevelFor()
{
  unint64_t result = lazy protocol witness table cache variable for type LocationAccessLevelFor and conformance LocationAccessLevelFor;
  if (!lazy protocol witness table cache variable for type LocationAccessLevelFor and conformance LocationAccessLevelFor)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationAccessLevelFor,  &type metadata for LocationAccessLevelFor);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocationAccessLevelFor and conformance LocationAccessLevelFor);
  }

  return result;
}

uint64_t sub_745D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144LL))();
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_74608(uint64_t a1, uint64_t a2)
{
  id v2 = *(id *)a1;
  uint64_t v3 = *(uint64_t (**)(id, uint64_t))(**(void **)a2 + 152LL);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 8);
  outlined copy of LocationFetchFlow.ExitValue(*(id *)a1, v4);
  return v3(v2, v4);
}

uint64_t initializeBufferWithCopyOfBuffer for LocationFetchFlow.ExitValue(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(_BYTE *)(a2 + 8);
  outlined copy of LocationFetchFlow.ExitValue(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for LocationFetchFlow.ExitValue(uint64_t a1)
{
}

uint64_t assignWithCopy for LocationFetchFlow.ExitValue(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(_BYTE *)(a2 + 8);
  outlined copy of LocationFetchFlow.ExitValue(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of LocationFetchFlow.ExitValue(v5, v6);
  return a1;
}

uint64_t assignWithTake for LocationFetchFlow.ExitValue(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  unsigned __int8 v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  outlined consume of LocationFetchFlow.ExitValue(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationFetchFlow.ExitValue(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationFetchFlow.ExitValue( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for LocationFetchFlow.ExitValue(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for LocationFetchFlow.ExitValue(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    LOBYTE(a__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 3;
  }

  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LocationFetchFlow.ExitValue()
{
  return &type metadata for LocationFetchFlow.ExitValue;
}

uint64_t storeEnumTagSinglePayload for LocationAccessLevelFor(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_7484C + 4 * byte_9A055[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_74880 + 4 * byte_9A050[v4]))();
}

uint64_t sub_74880(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_74888(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x74890LL);
  }
  return result;
}

uint64_t sub_7489C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x748A4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_748A8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_748B0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationAccessLevelFor()
{
  return &type metadata for LocationAccessLevelFor;
}

uint64_t objectdestroy_7Tm()
{
  uint64_t v1 = type metadata accessor for AceOutput(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in LocationFetchFlow.unknownLocationOutput()(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for AceOutput(0LL) - 8) + 80LL);
  uint64_t v5 = v1 + ((v4 + 16) & ~v4);
  uint64_t v6 = (void *)swift_task_alloc(dword_C8684);
  *(void *)(v2 + 16) = v6;
  void *v6 = v2;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  _OWORD v6[2] = a1;
  void v6[3] = v5;
  return swift_task_switch(closure #1 in LocationFetchFlow.unknownLocationOutput(), 0LL, 0LL);
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySo30INSupportedTrafficIncidentTypeCGG_21GeoFlowDelegatePlugin0jgH0Vs5NeverOTg508_sSiSo30fghi3C21jkl43Plugin0ebC0VIgygo_Si6offset_AB7elementtAEs5N263OIegnrzr_TR04_s21efg8Plugin42bc171NeedsDisambiguationStrategyC23disambiguateIncidentsRF6dialog14paginatedItems9nlContext07SiriKitB06Output_pSgAA0A8CATModel_p_AH22PaginatedItemContainerVySo011INSupportedeF4D45CGAH15NLContextUpdateVtYaFAA0aeF0VSi_AOtXEfU_Tf3nnnpf_nTf1cn_n( uint64_t a1)
{
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = 0LL;
      uint64_t v25 = a1 & 0xFFFFFFFFFFFFFF8LL;
      unint64_t v26 = a1 & 0xC000000000000001LL;
      uint64_t v4 = &off_C4000;
      uint64_t v24 = a1;
      while (v26)
      {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1);
LABEL_7:
        uint64_t v6 = v5;
        unint64_t v7 = v3 + 1;
        if (__OFADD__(v3, 1LL)) {
          goto LABEL_20;
        }
        id v8 = [v5 v4[23]];
        if (v8)
        {
          uint64_t v9 = v8;
          uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
          uint64_t v27 = v11;
          uint64_t v28 = v10;
        }

        else
        {
          uint64_t v27 = 0LL;
          uint64_t v28 = 0LL;
        }

        uint64_t v12 = v4;
        id v13 = [v6 v4[23]];
        if (v13)
        {
          unint64_t v14 = v13;
          uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
          unint64_t v17 = v16;
        }

        else
        {
          uint64_t v15 = 0LL;
          unint64_t v17 = 0xE000000000000000LL;
        }

        id v18 = [v6 type];

        unint64_t v20 = _swiftEmptyArrayStorage[2];
        unint64_t v19 = _swiftEmptyArrayStorage[3];
        if (v20 >= v19 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v19 > 1,  v20 + 1,  1);
        }
        _swiftEmptyArrayStorage[2] = v20 + 1;
        uint64_t v21 = &_swiftEmptyArrayStorage[6 * v20];
        v21[4] = v3;
        void v21[5] = v28;
        v21[6] = v27;
        v21[7] = v15;
        v21[8] = v17;
        v21[9] = v18;
        ++v3;
        a1 = v24;
        uint64_t v4 = v12;
        if (v7 == v2) {
          goto LABEL_25;
        }
      }

      if (v3 < *(void *)(v25 + 16)) {
        break;
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      if (a1 < 0) {
        uint64_t v22 = a1;
      }
      else {
        uint64_t v22 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v22);
      if (!v2) {
        goto LABEL_25;
      }
    }

    id v5 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_7;
  }

uint64_t TrafficIncidentNeedsDisambiguationStrategy.__allocating_init(isPommes:with:)(char a1, __int128 *a2)
{
  uint64_t v5 = swift_allocObject(v2, 88LL, 7LL);
  TrafficIncidentNeedsDisambiguationStrategy.init(isPommes:with:)(a1, a2);
  return v5;
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.init(isPommes:with:)(char a1, __int128 *a2)
{
  uint64_t v3 = v2;
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  *(void *)(v2 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000002ALL,  0x800000000009A1A0LL);
  uint64_t v6 = type metadata accessor for CATService();
  uint64_t v7 = swift_allocObject(v6, 40LL, 7LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v6);
  *(void *)(v7 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  *(void *)(v7 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v7 + 16) = 1;
  *(void *)(v2 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v10 = swift_allocObject(v9, 80LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_949B0;
  if (one-time initialization token for incidentTypeNode != -1) {
    swift_once( &one-time initialization token for incidentTypeNode,  one-time initialization function for incidentTypeNode);
  }
  uint64_t v11 = static LocationSearchIntent.incidentTypeNode;
  swift_retain(static LocationSearchIntent.incidentTypeNode);
  unint64_t v12 = specialized OntologyNode.javaClassName.getter();
  uint64_t v14 = v13;
  swift_release(v11);
  *(void *)(v10 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v12;
  *(void *)(v10 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v14;
  if (one-time initialization token for referenceNode != -1) {
    swift_once(&one-time initialization token for referenceNode, one-time initialization function for referenceNode);
  }
  uint64_t v15 = static LocationSearchIntent.referenceNode;
  swift_retain(static LocationSearchIntent.referenceNode);
  unint64_t v16 = specialized OntologyNode.javaClassName.getter();
  uint64_t v18 = v17;
  swift_release(v15);
  *(void *)(v10 + 48) = v16;
  *(void *)(v10 + 56) = v18;
  if (one-time initialization token for confirmationNode != -1) {
    swift_once( &one-time initialization token for confirmationNode,  one-time initialization function for confirmationNode);
  }
  uint64_t v19 = static LocationSearchIntent.confirmationNode;
  swift_retain(static LocationSearchIntent.confirmationNode);
  unint64_t v20 = specialized OntologyNode.javaClassName.getter();
  uint64_t v22 = v21;
  swift_release(v19);
  *(void *)(v10 + 64) = v20;
  *(void *)(v10 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v22;
  *(void *)(v3 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v10;
  *(_BYTE *)(v3 + 64) = a1 & 1;
  outlined init with take of CATType(a2, v3 + 24);
  return v3;
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.actionForInput(_:resolveRecord:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v76 = a1;
  uint64_t v1 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v73 = *(void *)(v1 - 8);
  uint64_t v74 = v1;
  __chkstk_darwin();
  uint64_t v72 = (char *)&v72 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for Parse(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v75 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v7 = (void **)((char *)&v72 - v6);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v72 - v8;
  uint64_t v10 = type metadata accessor for NLIntent(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin();
  unint64_t v16 = (char *)&v72 - v15;
  Input.parse.getter(v14);
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t))(v4 + 88);
  if (v17(v9, v3) == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v9, v3);
    uint64_t v18 = *(uint64_t (**)(char *, char *, uint64_t))(v11 + 32);
    uint64_t v19 = v18(v16, v9, v10);
    uint64_t v27 = static os_log_type_t.info.getter(v19, v20, v21, v22, v23, v24, v25, v26);
    os_log(_:dso:log:_:_:)( v27,  &dword_0,  *(void *)(v77 + 16),  "parseDisambiguationResult - NLv3 only parse",  43LL,  2LL,  _swiftEmptyArrayStorage);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
    uint64_t v28 = type metadata accessor for LocationSearchIntent(0LL);
    uint64_t v29 = swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
    uint64_t v30 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
    if (one-time initialization token for domainNode != -1) {
      swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
    }
    uint64_t v31 = static LocationSearchIntent.domainNode;
    *(void *)(v29 + v3specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = static LocationSearchIntent.domainNode;
    v18((char *)(v29 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent), v13, v10);
    uint64_t v78 = v29;
    uint64_t v32 = one-time initialization token for confirmationNode;
    swift_retain(v31);
    if (v32 != -1) {
      swift_once( &one-time initialization token for confirmationNode,  one-time initialization function for confirmationNode);
    }
    uint64_t v33 = static LocationSearchIntent.confirmationNode;
    uint64_t v34 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent,  255LL,  type metadata accessor for LocationSearchIntent,  (uint64_t)&protocol conformance descriptor for LocationSearchIntent);
    IntentNodeTraversable.value<A>(forNode:)(&v79, v33, v28, v34);
    swift_release(v29);
    __asm { BR              X10 }
  }

  uint64_t v35 = v77;
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
  uint64_t v37 = v36(v9, v3);
  Input.parse.getter(v37);
  if (v17((char *)v7, v3) == enum case for Parse.pommesResponse(_:))
  {
    uint64_t v38 = (*(uint64_t (**)(void **, uint64_t))(v4 + 96))(v7, v3);
    uint64_t v39 = *v7;
    uint64_t v47 = static os_log_type_t.info.getter(v38, v40, v41, v42, v43, v44, v45, v46);
    os_log(_:dso:log:_:_:)( v47,  &dword_0,  *(void *)(v35 + 16),  "parseDisambiguationResult - pommes parse",  40LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v48 = type metadata accessor for LocationSearchIntent(0LL);
    swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
    uint64_t v49 = LocationSearchIntent.init(from:)(v39);
    char v50 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 152LL))(v49);
    swift_release(v49);
    __asm { BR              X10 }
  }

  uint64_t v51 = v36((char *)v7, v3);
  uint64_t v52 = v75;
  Input.parse.getter(v51);
  if (v17(v52, v3) == enum case for Parse.directInvocation(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v52, v3);
    uint64_t v54 = v72;
    uint64_t v53 = v73;
    uint64_t v55 = v74;
    uint64_t v56 = (*(uint64_t (**)(char *, char *, uint64_t))(v73 + 32))(v72, v52, v74);
    uint64_t v57 = Parse.DirectInvocation.identifier.getter(v56);
    uint64_t v59 = v58;
    if (v57 == 0xD000000000000033LL && v58 == 0x800000000009B7B0LL)
    {
      uint64_t v60 = swift_bridgeObjectRelease(0x800000000009B7B0LL);
LABEL_18:
      uint64_t v68 = *(os_log_s **)(v35 + 16);
      os_log_type_t v69 = static os_log_type_t.default.getter(v60);
      uint64_t v70 = os_log_type_enabled(v68, v69);
      if ((_DWORD)v70)
      {
        char v71 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)char v71 = 0;
        _os_log_impl(&dword_0, v68, v69, "TrafficIncidentBaseFlow onInput returns true for directInvocation.", v71, 2u);
        uint64_t v70 = swift_slowDealloc(v71, -1LL, -1LL);
      }

      static ActionForInput.handle()(v70);
      return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v54, v55);
    }

    char v67 = _stringCompareWithSmolCheck(_:_:expecting:)(v57, v58, 0xD000000000000033LL, 0x800000000009B7B0LL, 0LL);
    uint64_t v60 = swift_bridgeObjectRelease(v59);
    if ((v67 & 1) != 0) {
      goto LABEL_18;
    }
    uint64_t v61 = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v54, v55);
  }

  else
  {
    uint64_t v61 = v36(v52, v3);
  }

  uint64_t v62 = *(os_log_s **)(v35 + 16);
  os_log_type_t v63 = static os_log_type_t.default.getter(v61);
  uint64_t v64 = os_log_type_enabled(v62, v63);
  if ((_DWORD)v64)
  {
    uint64_t v65 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v65 = 0;
    _os_log_impl(&dword_0, v62, v63, "SiriGeo currently doesn't support parse type.", v65, 2u);
    uint64_t v64 = swift_slowDealloc(v65, -1LL, -1LL);
  }

  return static ActionForInput.ignore()(v64);
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)( uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v1;
  return swift_task_switch( TrafficIncidentNeedsDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:),  0LL,  0LL);
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INReportIncidentIntent>);
  uint64_t v2 = (void *)ParameterResolutionRecord.result.getter(v1);
  id v3 = [v2 disambiguationItems];

  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, (char *)&type metadata for Any + 8);
  uint64_t v5 = specialized _arrayConditionalCast<A, B>(_:)(v4);
  uint64_t v6 = swift_bridgeObjectRelease(v4);
  uint64_t v7 = *(void *)(v0 + 32);
  if (v5)
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicDisambiguationItemContainer<INSupportedTrafficIncidentType>);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = BasicDisambiguationItemContainer.init(_:_:)(v5, 0LL);
    uint64_t v10 = *(os_log_s **)(v7 + 16);
    uint64_t v11 = swift_retain_n(v9, 2LL);
    os_log_type_t v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v10, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v14 = swift_slowAlloc(32LL, -1LL);
      uint64_t v25 = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      *(void *)(v0 + 16) = v9;
      swift_retain(v9);
      uint64_t v15 = String.init<A>(describing:)(v0 + 16, v8);
      unint64_t v17 = v16;
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
      swift_bridgeObjectRelease(v17);
      swift_release_n(v9, 2LL);
      _os_log_impl(&dword_0, v10, v12, "makeDisambiguationItemContainer with container: %s", v13, 0xCu);
      swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v9, 2LL);
    }

    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
  }

  else
  {
    uint64_t v18 = static os_log_type_t.error.getter(v6);
    os_log(_:dso:log:_:_:)( v18,  &dword_0,  *(void *)(v7 + 16),  "makeDisambiguationItemContainer received wrong type for incidentType",  68LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v19 = type metadata accessor for RuntimeError();
    uint64_t v20 = swift_allocObject(v19, 32LL, 7LL);
    *(void *)(v20 + 16) = 0xD000000000000044LL;
    *(void *)(v20 + 24) = 0x800000000009EB90LL;
    uint64_t v21 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RuntimeError,  (uint64_t)&protocol conformance descriptor for RuntimeError);
    uint64_t v22 = swift_allocError(v19, v21, 0LL, 0LL);
    *uint64_t v23 = v20;
    swift_willThrow(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t TrafficIncidentNeedsDisambiguationStrategy.makeFlowCancelledResponse(app:intent:parameterName:)( uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[19] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for TemplatingResult(0LL);
  v2[20] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[21] = v5;
  v2[22] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( TrafficIncidentNeedsDisambiguationStrategy.makeFlowCancelledResponse(app:intent:parameterName:),  0LL,  0LL);
}

{
  void *v1;
  os_log_s *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  void *v11;
  int *v13;
  uint64_t v2 = *(os_log_s **)(v1[18] + 16LL);
  uint64_t v3 = static os_log_type_t.default.getter(a1);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "makeFlowCancelledResponse", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = (void *)v1[18];
  uint64_t v6 = v5[9];
  v1[5] = &type metadata for Common;
  v1[6] = &protocol witness table for Common;
  v1[2] = 0LL;
  uint64_t v7 = v5[6];
  uint64_t v8 = v5[7];
  __swift_project_boxed_opaque_existential_1(v5 + 3, v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 80))(v7, v8);
  v1[23] = v9;
  uint64_t v10 = *(int **)(*(void *)v6 + 112LL);
  uint64_t v13 = (int *)((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc(v10[1]);
  _BYTE v1[24] = v11;
  *uint64_t v11 = v1;
  v11[1] = TrafficIncidentNeedsDisambiguationStrategy.makeFlowCancelledResponse(app:intent:parameterName:);
  return ((uint64_t (*)(void, void *, uint64_t))v13)(v1[22], v1 + 2, v9);
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.makeFlowCancelledResponse(app:intent:parameterName:)()
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 184);
  uint64_t v3 = *(void *)(*v1 + 192);
  *(void *)(*v1 + 20specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = TrafficIncidentNeedsDisambiguationStrategy.makeFlowCancelledResponse(app:intent:parameterName:);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 16));
    uint64_t v5 = TrafficIncidentNeedsDisambiguationStrategy.makeFlowCancelledResponse(app:intent:parameterName:);
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v6 = *(void **)(v0 + 136);
  uint64_t v5 = *(void **)(v0 + 144);
  uint64_t v7 = v5[6];
  uint64_t v8 = v5[7];
  __swift_project_boxed_opaque_existential_1(v5 + 3, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  uint64_t v9 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v4, 1LL, 1LL, v9);
  *(void *)(v0 + 128) = 0LL;
  *(_OWORD *)(v0 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  static TrafficIncidentUtils.sendCompletionViewOutput(result:snippets:device:listenAfterSpeaking:ttsEnabled:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v1,  (uint8_t *)_swiftEmptyArrayStorage,  v0 + 56,  0,  0,  1,  v4,  (uint64_t)_swiftEmptyArrayStorage,  v6,  v0 + 96);
  outlined destroy of (label: String?, value: Any)?( v0 + 96,  &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (label: String?, value: Any)?( v4,  &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v10 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 176));
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 200);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 16));
  type metadata accessor for EmptyOutput(0LL);
  static EmptyOutput.instance.getter();
  swift_errorRelease(v1);
  uint64_t v2 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 176));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[20] = a4;
  v5[21] = v4;
  v5[18] = a1;
  v5[19] = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INReportIncidentIntent>);
  v5[22] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[23] = v7;
  _BYTE v5[24] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Parse.DirectInvocation(0LL);
  v5[25] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[26] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[27] = swift_task_alloc(v10);
  v5[28] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for NLIntent(0LL);
  v5[29] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[30] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[31] = swift_task_alloc(v13);
  _BYTE v5[32] = swift_task_alloc(v13);
  uint64_t v14 = type metadata accessor for Parse(0LL);
  v5[33] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v5[34] = v15;
  v5[35] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( TrafficIncidentNeedsDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:),  0LL,  0LL);
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)( uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 272);
  uint64_t v2 = *(void *)(v1 + 280);
  uint64_t v4 = *(void *)(v1 + 264);
  Input.parse.getter(a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v2, v4);
  if ((_DWORD)v5 == enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v6 = *(void *)(v1 + 280);
    uint64_t v7 = *(void *)(v1 + 256);
    uint64_t v9 = *(void *)(v1 + 240);
    uint64_t v8 = *(void *)(v1 + 248);
    uint64_t v10 = *(void *)(v1 + 232);
    (*(void (**)(uint64_t, void))(*(void *)(v1 + 272) + 96LL))(v6, *(void *)(v1 + 264));
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
    v11(v7, v6, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v7, v10);
    uint64_t v12 = type metadata accessor for LocationSearchIntent(0LL);
    uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v14 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
    if (one-time initialization token for domainNode != -1) {
      swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
    }
    uint64_t v15 = *(void *)(v1 + 248);
    uint64_t v16 = *(void *)(v1 + 256);
    uint64_t v17 = *(void *)(v1 + 232);
    uint64_t v18 = *(void *)(v1 + 240);
    uint64_t v19 = static LocationSearchIntent.domainNode;
    *(void *)(v13 + v14) = static LocationSearchIntent.domainNode;
    v11(v13 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent, v15, v17);
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    swift_retain(v19);
    v20(v16, v17);
LABEL_5:
    uint64_t v21 = *(void *)(v1 + 168);
    id v22 = specialized static TrafficIncidentUtils.convertIncidentTypeFromNLIntent(locationSearchIntent:)(v13);
    if (v22)
    {
      uint64_t v23 = *(os_log_s **)(v21 + 16);
      id v24 = v22;
      os_log_type_t v25 = static os_log_type_t.default.getter(v24);
      uint64_t v149 = (uint64_t *)(v1 + 128);
      uint64_t v144 = v24;
      if (os_log_type_enabled(v23, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        os_log_t logb = (os_log_t)swift_slowAlloc(32LL, -1LL);
        v153[0] = (uint64_t)logb;
        *(_DWORD *)uint64_t v26 = 136315138;
        id v27 = v24;
        id v28 = [v27 description];
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
        uint64_t v151 = v23;
        unint64_t v31 = v30;

        *(void *)(v1 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, v153);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 144);
        unint64_t v32 = v31;
        uint64_t v23 = v151;
        swift_bridgeObjectRelease(v32);

        _os_log_impl(&dword_0, v151, v25, "parseDisambiguationResult updated supportedIncidentType is %s", v26, 0xCu);
        swift_arrayDestroy(logb, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(logb, -1LL, -1LL);
        swift_slowDealloc(v26, -1LL, -1LL);
      }

      else
      {
      }

      uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INReportIncidentIntent>);
      uint64_t v61 = (void *)ParameterResolutionRecord.intent.getter(v60);
      id v62 = [v61 userLocation];

      id v63 = [v62 location];
      os_log_t loga = (os_log_t)v13;
      id v152 = specialized static TrafficIncidentUtils.makeSiriKitIntentWithUserLocation(locationSearchIntent:userLocation:)( v13,  (uint64_t)v63);

      os_log_type_t v72 = static os_log_type_t.info.getter(v64, v65, v66, v67, v68, v69, v70, v71);
      if (os_log_type_enabled(v23, v72))
      {
        id v73 = v152;
        uint64_t v74 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v75 = swift_slowAlloc(32LL, -1LL);
        v153[0] = v75;
        *(_DWORD *)uint64_t v74 = 136315138;
        id v76 = v73;
        uint64_t v77 = v23;
        id v78 = [v76 description];
        uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
        unint64_t v81 = v80;

        *uint64_t v149 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v81, v153);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v149, v1 + 136);
        swift_bridgeObjectRelease(v81);

        _os_log_impl(&dword_0, v77, v72, "parseDisambiguationResult - updated sirikit intent: %s", v74, 0xCu);
        swift_arrayDestroy(v75, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v75, -1LL, -1LL);
        swift_slowDealloc(v74, -1LL, -1LL);
      }

      uint64_t v34 = (uint64_t *)(v1 + 192);
      uint64_t v82 = *(void *)(v1 + 192);
      uint64_t v83 = *(void *)(v1 + 184);
      uint64_t v85 = (uint64_t *)(v1 + 176);
      uint64_t v84 = *(void *)(v1 + 176);
      uint64_t v154 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INSupportedTrafficIncidentType,  &OBJC_CLASS___INSupportedTrafficIncidentType_ptr);
      v153[0] = (uint64_t)v144;
      uint64_t v86 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INReportIncidentIntent,  &OBJC_CLASS___INReportIncidentIntent_ptr);
      id v87 = v144;
      id v88 = v152;
      IntentPromptAnswer.init(answeredValue:updatedIntent:)(v153, v88, v86);
      static DisambiguationResult.chosenItem(_:)(v82, v84);

      swift_release(loga);
      uint64_t v89 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
      goto LABEL_33;
    }

    uint64_t v54 = static os_log_type_t.error.getter(0LL);
    os_log(_:dso:log:_:_:)( v54,  &dword_0,  *(void *)(v21 + 16),  "parseDisambiguationResult - supportedIncidentType is nil",  56LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v55 = type metadata accessor for RuntimeError();
    uint64_t v56 = swift_allocObject(v55, 32LL, 7LL);
    *(void *)(v56 + 16) = 0xD000000000000038LL;
    *(void *)(v56 + 24) = 0x800000000009ECC0LL;
    uint64_t v57 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RuntimeError,  (uint64_t)&protocol conformance descriptor for RuntimeError);
    uint64_t v58 = swift_allocError(v55, v57, 0LL, 0LL);
    *uint64_t v59 = v56;
    swift_willThrow(v58);
    swift_release(v13);
    goto LABEL_35;
  }

  if ((_DWORD)v5 != enum case for Parse.directInvocation(_:))
  {
    uint64_t v50 = *(void *)(v1 + 272);
    uint64_t v49 = *(void ***)(v1 + 280);
    uint64_t v51 = *(void *)(v1 + 264);
    if ((_DWORD)v5 != enum case for Parse.pommesResponse(_:))
    {
      uint64_t v92 = *(void *)(v1 + 168);
      uint64_t v93 = static os_log_type_t.error.getter(v5);
      os_log(_:dso:log:_:_:)( v93,  &dword_0,  *(void *)(v92 + 16),  "parseDisambiguationResult - parse type is wrong",  47LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v94 = type metadata accessor for RuntimeError();
      uint64_t v95 = swift_allocObject(v94, 32LL, 7LL);
      *(void *)(v95 + 16) = 0xD00000000000002FLL;
      *(void *)(v95 + 24) = 0x800000000009EBE0LL;
      uint64_t v96 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RuntimeError,  (uint64_t)&protocol conformance descriptor for RuntimeError);
      uint64_t v97 = swift_allocError(v94, v96, 0LL, 0LL);
      *uint64_t v98 = v95;
      swift_willThrow(v97);
      (*(void (**)(void **, uint64_t))(v50 + 8))(v49, v51);
      goto LABEL_35;
    }

    (*(void (**)(void, void))(v50 + 96))(*(void *)(v1 + 280), *(void *)(v1 + 264));
    uint64_t v52 = *v49;
    uint64_t v53 = type metadata accessor for LocationSearchIntent(0LL);
    swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
    uint64_t v13 = LocationSearchIntent.init(from:)(v52);
    goto LABEL_5;
  }

  uint64_t v34 = (uint64_t *)(v1 + 224);
  uint64_t v33 = *(void *)(v1 + 224);
  uint64_t v35 = *(void *)(v1 + 280);
  uint64_t v36 = *(void *)(v1 + 208);
  uint64_t v37 = *(void *)(v1 + 216);
  uint64_t v38 = *(void *)(v1 + 200);
  uint64_t v39 = *(void *)(v1 + 168);
  (*(void (**)(uint64_t, void))(*(void *)(v1 + 272) + 96LL))(v35, *(void *)(v1 + 264));
  uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v33, v35, v38);
  os_log_type_t v41 = static os_log_type_t.default.getter(v40);
  uint64_t v42 = *(os_log_s **)(v39 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v37, v33, v38);
  os_log_t log = v42;
  if (os_log_type_enabled(v42, v41))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v44 = swift_slowAlloc(32LL, -1LL);
    v153[0] = v44;
    *(_DWORD *)uint64_t v43 = 136315138;
    uint64_t result = Parse.DirectInvocation.userData.getter(v44);
    if (!result) {
      goto LABEL_39;
    }
    uint64_t v46 = result;
    if (*(void *)(result + 16)
      && (unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(0x746E656469636E49LL, 0xEC00000065707954LL),
          (v48 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v46 + 56) + 32 * v47, v1 + 80);
    }

    else
    {
      *(_OWORD *)(v1 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0u;
      *(_OWORD *)(v1 + 96) = 0u;
    }

    swift_bridgeObjectRelease(v46);
    uint64_t v100 = *(void *)(v1 + 208);
    uint64_t v99 = *(void *)(v1 + 216);
    uint64_t v101 = *(void *)(v1 + 200);
    uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    uint64_t v103 = String.init<A>(describing:)(v1 + 80, v102);
    unint64_t v105 = v104;
    *(void *)(v1 + 12specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, v104, v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128);
    swift_bridgeObjectRelease(v105);
    uint64_t v90 = *(void (**)(uint64_t, uint64_t))(v100 + 8);
    v90(v99, v101);
    _os_log_impl(&dword_0, log, v41, "recieved directInvocation: %s", v43, 0xCu);
    swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1LL, -1LL);
    uint64_t v91 = swift_slowDealloc(v43, -1LL, -1LL);
  }

  else
  {
    uint64_t v90 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 + 208) + 8LL);
    uint64_t v91 = ((uint64_t (*)(void, void))v90)(*(void *)(v1 + 216), *(void *)(v1 + 200));
  }

  uint64_t result = Parse.DirectInvocation.userData.getter(v91);
  if (result)
  {
    uint64_t v106 = result;
    if (*(void *)(result + 16)
      && (unint64_t v107 = specialized __RawDictionaryStorage.find<A>(_:)(0x746E656469636E49LL, 0xEC00000065707954LL),
          (v108 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v106 + 56) + 32 * v107, v1 + 48);
    }

    else
    {
      *(_OWORD *)(v1 + 48) = 0u;
      *(_OWORD *)(v1 + 64) = 0u;
    }

    uint64_t result = swift_bridgeObjectRelease(v106);
    if (*(void *)(v1 + 72))
    {
      outlined init with take of Any((_OWORD *)(v1 + 48), (_OWORD *)(v1 + 16));
      swift_dynamicCast(v1 + 112, v1 + 16, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
      uint64_t v109 = *(void *)(v1 + 112);
      if ((unint64_t)(v109 - 1) < 3)
      {
        uint64_t v110 = *(void *)(v1 + 192);
        uint64_t v85 = (uint64_t *)(v1 + 200);
        os_log_t logc = *(os_log_t *)(v1 + 176);
        uint64_t v150 = *(void *)(v1 + 184);
        id v111 = [objc_allocWithZone(INSupportedTrafficIncidentType) initWithType:v109 localizedDisplayString:0];
        type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
        uint64_t v112 = v90;
        id v113 = v111;
        Class isa = NSNumber.init(integerLiteral:)(0LL).super.super.isa;
        uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INReportIncidentIntent>);
        uint64_t v116 = (void *)ParameterResolutionRecord.intent.getter(v115);
        id v117 = [v116 userLocation];

        id v118 = [objc_allocWithZone(INReportIncidentIntent) initWithIncidentType:v113 startTime:0 isClear:isa userLocation:v117 additionalDetails:0];
        uint64_t v89 = v112;

        uint64_t v154 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INSupportedTrafficIncidentType,  &OBJC_CLASS___INSupportedTrafficIncidentType_ptr);
        v153[0] = (uint64_t)v113;
        uint64_t v119 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INReportIncidentIntent,  &OBJC_CLASS___INReportIncidentIntent_ptr);
        id v120 = v113;
        id v121 = v118;
        IntentPromptAnswer.init(answeredValue:updatedIntent:)(v153, v121, v119);
        static DisambiguationResult.chosenItem(_:)(v110, logc);

        (*(void (**)(uint64_t, os_log_t))(v150 + 8))(v110, logc);
LABEL_33:
        uint64_t v122 = *v85;
        uint64_t v123 = *(void *)(v1 + 280);
        uint64_t v125 = *(void *)(v1 + 248);
        uint64_t v124 = *(void *)(v1 + 256);
        uint64_t v127 = *(void *)(v1 + 216);
        uint64_t v126 = *(void *)(v1 + 224);
        uint64_t v128 = *(void *)(v1 + 192);
        v89(*v34, v122);
        swift_task_dealloc(v123);
        swift_task_dealloc(v124);
        swift_task_dealloc(v125);
        swift_task_dealloc(v126);
        swift_task_dealloc(v127);
        swift_task_dealloc(v128);
        uint64_t v129 = *(uint64_t (**)(void))(v1 + 8);
        return v129();
      }

      uint64_t v130 = *v34;
      uint64_t v131 = *(void *)(v1 + 200);
      id v132 = [objc_allocWithZone(INSupportedTrafficIncidentType) initWithType:0 localizedDisplayString:0];
      uint64_t v133 = static os_log_type_t.error.getter(v132);
      os_log(_:dso:log:_:_:)( v133,  &dword_0,  log,  "recieved directInvocation with unknown type, this sis unexpected because there's no button for this and should never happen)",  124LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v134 = type metadata accessor for RuntimeError();
      uint64_t v135 = swift_allocObject(v134, 32LL, 7LL);
      *(void *)(v135 + 16) = 0xD00000000000002FLL;
      *(void *)(v135 + 24) = 0x800000000009EC90LL;
      uint64_t v136 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RuntimeError,  (uint64_t)&protocol conformance descriptor for RuntimeError);
      uint64_t v137 = swift_allocError(v134, v136, 0LL, 0LL);
      uint64_t *v138 = v135;
      swift_willThrow(v137);

      v90(v130, v131);
LABEL_35:
      uint64_t v140 = *(void *)(v1 + 248);
      uint64_t v139 = *(void *)(v1 + 256);
      uint64_t v142 = *(void *)(v1 + 216);
      uint64_t v141 = *(void *)(v1 + 224);
      uint64_t v143 = *(void *)(v1 + 192);
      swift_task_dealloc(*(void *)(v1 + 280));
      swift_task_dealloc(v139);
      swift_task_dealloc(v140);
      swift_task_dealloc(v141);
      swift_task_dealloc(v142);
      swift_task_dealloc(v143);
      uint64_t v129 = *(uint64_t (**)(void))(v1 + 8);
      return v129();
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[59] = a3;
  v4[60] = v3;
  v4[57] = a1;
  v4[58] = a2;
  uint64_t v5 = type metadata accessor for TrafficIncident(0LL);
  v4[61] = v5;
  v4[62] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for PommesContext.Source(0LL);
  v4[63] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[64] = v7;
  v4[65] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  v4[66] = v8;
  unint64_t v9 = (*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[67] = swift_task_alloc(v9);
  v4[68] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  v4[69] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[70] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[71] = swift_task_alloc(v12);
  v4[72] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for ImageSize(0LL);
  v4[73] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v4[74] = v14;
  v4[75] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Locale(0LL);
  v4[76] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v4[77] = v16;
  v4[78] = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for ParameterIdentifier(0LL);
  v4[79] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v4[80] = v18;
  v4[81] = swift_task_alloc((*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INReportIncidentIntent>);
  v4[82] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v4[83] = v20;
  unint64_t v21 = (*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[84] = swift_task_alloc(v21);
  v4[85] = swift_task_alloc(v21);
  v4[86] = swift_task_alloc(v21);
  v4[87] = swift_task_alloc(v21);
  return swift_task_switch( TrafficIncidentNeedsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:),  0LL,  0LL);
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(v8 + 696);
  uint64_t v10 = *(void *)(v8 + 688);
  uint64_t v11 = *(void *)(v8 + 680);
  uint64_t v12 = *(void *)(v8 + 672);
  uint64_t v13 = *(void *)(v8 + 664);
  uint64_t v14 = *(void *)(v8 + 656);
  uint64_t v15 = *(void *)(v8 + 472);
  uint64_t v16 = *(void *)(v8 + 480);
  os_log_type_t v17 = static os_log_type_t.info.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v18 = *(os_log_s **)(v16 + 16);
  *(void *)(v8 + 704) = v18;
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  v19(v9, v15, v14);
  v19(v10, v15, v14);
  v19(v11, v15, v14);
  v19(v12, v15, v14);
  __int128 v167 = v18;
  if (os_log_type_enabled(v18, v17))
  {
    uint64_t v20 = *(void *)(v8 + 696);
    uint64_t v158 = *(void *)(v8 + 672);
    uint64_t v153 = *(void *)(v8 + 664);
    uint64_t v154 = *(void *)(v8 + 688);
    uint64_t v21 = *(void *)(v8 + 656);
    uint64_t v163 = v21;
    uint64_t v22 = *(void *)(v8 + 648);
    uint64_t v155 = *(void *)(v8 + 640);
    uint64_t v156 = *(void *)(v8 + 632);
    uint64_t v157 = *(void *)(v8 + 680);
    uint64_t v23 = swift_slowAlloc(42LL, -1LL);
    unint64_t v159 = (void *)swift_slowAlloc(128LL, -1LL);
    uint64_t v169 = v159;
    *(_DWORD *)uint64_t v23 = 136315906;
    id v24 = (void *)ParameterResolutionRecord.intent.getter(v21);
    id v25 = [v24 description];
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    unint64_t v28 = v27;

    *(void *)(v8 + 424) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, (uint64_t *)&v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 + 424, v8 + 432);
    swift_bridgeObjectRelease(v28);
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v153 + 8);
    v29(v20, v163);
    *(_WORD *)(v23 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
    uint64_t v30 = ParameterResolutionRecord.parameter.getter(v163);
    uint64_t v31 = ParameterIdentifier.name.getter(v30);
    unint64_t v33 = v32;
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v155 + 8);
    v34(v22, v156);
    *(void *)(v8 + 43__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, (uint64_t *)&v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 + 432, v8 + 440);
    swift_bridgeObjectRelease(v33);
    v29(v154, v163);
    *(_WORD *)(v23 + 2__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
    uint64_t v35 = ParameterResolutionRecord.parameter.getter(v163);
    uint64_t v36 = ParameterIdentifier.multicardinalIndex.getter(v35);
    LOBYTE(v33) = v37;
    v34(v22, v156);
    uint64_t v18 = v167;
    *(void *)(v8 + 368) = v36;
    *(_BYTE *)(v8 + 376) = v33 & 1;
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    uint64_t v39 = String.init<A>(describing:)(v8 + 368, v38);
    unint64_t v41 = v40;
    *(void *)(v8 + 44specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, (uint64_t *)&v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 + 440, v8 + 448);
    swift_bridgeObjectRelease(v41);
    v29(v157, v163);
    *(_WORD *)(v23 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2080;
    uint64_t v42 = (void *)ParameterResolutionRecord.result.getter(v163);
    id v43 = [v42 description];
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    unint64_t v46 = v45;

    *(void *)(v8 + 448) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, (uint64_t *)&v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 + 448, v8 + 456);
    swift_bridgeObjectRelease(v46);
    v29(v158, v163);
    _os_log_impl(&dword_0, v167, v17, "inputs: %s, %s,\n%s, %s", (uint8_t *)v23, 0x2Au);
    swift_arrayDestroy(v159, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v159, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {
    uint64_t v47 = *(void *)(v8 + 688);
    uint64_t v48 = *(void *)(v8 + 680);
    uint64_t v49 = *(void *)(v8 + 672);
    uint64_t v50 = *(void *)(v8 + 656);
    uint64_t v51 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 + 664) + 8LL);
    v51(*(void *)(v8 + 696), v50);
    v51(v47, v50);
    v51(v48, v50);
    v51(v49, v50);
  }

  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INSupportedTrafficIncidentType>);
  uint64_t v53 = PaginatedItemContainer.items.getter(v52);
  uint64_t v54 = v53;
  if ((unint64_t)v53 >> 62)
  {
    if (v53 >= 0) {
      v53 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v55 = _CocoaArrayWrapper.endIndex.getter(v53);
  }

  else
  {
    uint64_t v55 = *(void *)((char *)&dword_10 + (v53 & 0xFFFFFFFFFFFFF8LL));
  }

  swift_bridgeObjectRelease(v54);
  if (!v55)
  {
    uint64_t v169 = 0LL;
    unint64_t v170 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(71LL);
    v68._uint64_t countAndFlagsBits = 0xD000000000000045LL;
    v68._object = (void *)0x800000000009EDA0LL;
    String.append(_:)(v68);
    uint64_t v69 = PaginatedItemContainer.items.getter(v52);
    uint64_t v70 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INSupportedTrafficIncidentType,  &OBJC_CLASS___INSupportedTrafficIncidentType_ptr);
    uint64_t v71 = Array.description.getter(v69, v70);
    id v73 = v72;
    swift_bridgeObjectRelease(v69);
    v74._uint64_t countAndFlagsBits = v71;
    v74._object = v73;
    String.append(_:)(v74);
    swift_bridgeObjectRelease(v73);
    uint64_t v75 = v169;
    unint64_t v76 = v170;
    goto LABEL_10;
  }

  uint64_t v56 = v8 + 416;
  uint64_t v57 = PaginatedItemContainer.items.getter(v52);
  uint64_t v58 = swift_bridgeObjectRetain_n(v57, 2LL);
  os_log_type_t v59 = static os_log_type_t.default.getter(v58);
  if (os_log_type_enabled(v18, v59))
  {
    uint64_t v60 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v61 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v169 = v61;
    *(_DWORD *)uint64_t v60 = 136315138;
    uint64_t v56 = v8 + 416;
    uint64_t v62 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INSupportedTrafficIncidentType,  &OBJC_CLASS___INSupportedTrafficIncidentType_ptr);
    swift_bridgeObjectRetain(v57);
    uint64_t v64 = Array.description.getter(v63, v62);
    unint64_t v66 = v65;
    swift_bridgeObjectRelease(v57);
    *(void *)(v8 + 416) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v66, (uint64_t *)&v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 + 416, v8 + 424);
    swift_bridgeObjectRelease(v66);
    swift_bridgeObjectRelease_n(v57, 2LL);
    _os_log_impl(&dword_0, v167, v59, "list of supportedIncidentTypes for disambiguation: %s", v60, 0xCu);
    swift_arrayDestroy(v61, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1LL, -1LL);
    uint64_t result = swift_slowDealloc(v60, -1LL, -1LL);
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease_n(v57, 2LL);
  }

  uint64_t v169 = _swiftEmptyArrayStorage;
  if ((unint64_t)v57 >> 62)
  {
    if (v57 < 0) {
      uint64_t v103 = v57;
    }
    else {
      uint64_t v103 = v57 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v57);
    uint64_t v90 = _CocoaArrayWrapper.endIndex.getter(v103);
    uint64_t result = swift_bridgeObjectRelease(v57);
    uint64_t v162 = v56;
    if (v90) {
      goto LABEL_14;
    }
LABEL_36:
    swift_bridgeObjectRelease(v57);
    uint64_t v102 = _swiftEmptyArrayStorage;
    goto LABEL_37;
  }

  uint64_t v90 = *(void *)((char *)&dword_10 + (v57 & 0xFFFFFFFFFFFFF8LL));
  uint64_t v162 = v56;
  if (!v90) {
    goto LABEL_36;
  }
LABEL_14:
  if (v90 < 1)
  {
    __break(1u);
    return result;
  }

  for (uint64_t i = 0LL; i != v90; ++i)
  {
    if ((v57 & 0xC000000000000001LL) != 0) {
      id v94 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v57);
    }
    else {
      id v94 = *(id *)(v57 + 8 * i + 32);
    }
    uint64_t v95 = v94;
    id v96 = [v94 localizedDisplayString];
    if (v96)
    {
      uint64_t v97 = v96;
      uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
      unint64_t v100 = v99;
    }

    else
    {
      uint64_t v98 = 0LL;
      unint64_t v100 = 0xE000000000000000LL;
    }

    swift_bridgeObjectRelease(v100);
    uint64_t v101 = HIBYTE(v100) & 0xF;
    if ((v100 & 0x2000000000000000LL) == 0) {
      uint64_t v101 = v98 & 0xFFFFFFFFFFFFLL;
    }
    if (v101)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v92 = v169[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v92);
      uint64_t v93 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v92, v95);
      specialized ContiguousArray._endMutation()(v93);
    }

    else
    {
    }
  }

  swift_bridgeObjectRelease(v57);
  uint64_t v102 = v169;
LABEL_37:
  uint64_t v165 = (void *)(v8 + 56);
  *(void *)(v8 + 71__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v102;
  uint64_t v104 = *(void *)(v8 + 624);
  uint64_t v105 = *(void *)(v8 + 616);
  uint64_t v106 = *(void *)(v8 + 608);
  swift_retain(v102);
  static Device.current.getter((void *)(v8 + 16));
  uint64_t v108 = *(void *)(v8 + 40);
  uint64_t v107 = *(void *)(v8 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v8 + 16), v108);
  dispatch thunk of DeviceState.siriLocale.getter(v108, v107);
  uint64_t v109 = specialized static DisambiguationListUtils.makeDisambiguationItems(incidentTypes:locale:)((uint64_t)v102, v104);
  swift_release(v102);
  uint64_t v110 = *(void (**)(uint64_t, uint64_t))(v105 + 8);
  *(void *)(v8 + 72specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v110;
  v110(v104, v106);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v8 + 16));
  uint64_t v111 = swift_bridgeObjectRetain_n(v109, 2LL);
  os_log_type_t v112 = static os_log_type_t.default.getter(v111);
  id v113 = v167;
  if (os_log_type_enabled(v167, v112))
  {
    uint64_t v114 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v115 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v169 = v115;
    *(_DWORD *)uint64_t v114 = 136315138;
    uint64_t v116 = v102;
    uint64_t v117 = type metadata accessor for SiriKitDisambiguationItem(0LL);
    swift_bridgeObjectRetain(v109);
    uint64_t v119 = Array.description.getter(v118, v117);
    unint64_t v121 = v120;
    swift_bridgeObjectRelease(v109);
    uint64_t v122 = v119;
    uint64_t v102 = v116;
    *(void *)(v8 + 408) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122, v121, (uint64_t *)&v169);
    id v113 = v167;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 + 408, v162);
    swift_bridgeObjectRelease(v121);
    swift_bridgeObjectRelease_n(v109, 2LL);
    _os_log_impl( &dword_0,  v167,  v112,  "makePromptForDisambiguation incidentType disambiguationItems are: %s",  v114,  0xCu);
    swift_arrayDestroy(v115, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v115, -1LL, -1LL);
    swift_slowDealloc(v114, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v109, 2LL);
  }

  static Device.current.getter(v165);
  uint64_t v123 = *(void *)(v8 + 80);
  uint64_t v124 = *(void *)(v8 + 88);
  __swift_project_boxed_opaque_existential_1(v165, v123);
  char v125 = dispatch thunk of DeviceState.isCarPlay.getter(v123, v124);
  __swift_destroy_boxed_opaque_existential_0Tm(v165);
  if ((v125 & 1) == 0)
  {
    static Device.current.getter((void *)(v8 + 96));
    uint64_t v127 = *(void *)(v8 + 120);
    uint64_t v128 = *(void *)(v8 + 128);
    __swift_project_boxed_opaque_existential_1((void *)(v8 + 96), v127);
    char v129 = dispatch thunk of DeviceState.isPad.getter(v127, v128);
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v8 + 96));
    if ((v129 & 1) != 0)
    {
      uint64_t v130 = *(void *)(v8 + 600);
      uint64_t v131 = *(void *)(v8 + 592);
      uint64_t v132 = *(void *)(v8 + 584);
      (*(void (**)(uint64_t, void, uint64_t))(v131 + 104))(v130, enum case for ImageSize.default(_:), v132);
      uint64_t v133 = static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetPad(disambiguationItems:deviceIsLocked:imageSize:)( v109,  0LL,  v130);
LABEL_46:
      uint64_t v126 = (void *)v133;
      swift_bridgeObjectRelease(v109);
      (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v130, v132);
      goto LABEL_47;
    }

    static Device.current.getter((void *)(v8 + 136));
    uint64_t v134 = *(void *)(v8 + 160);
    uint64_t v135 = *(void *)(v8 + 168);
    __swift_project_boxed_opaque_existential_1((void *)(v8 + 136), v134);
    char v136 = dispatch thunk of DeviceState.isPhone.getter(v134, v135);
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v8 + 136));
    if ((v136 & 1) != 0)
    {
      uint64_t v130 = *(void *)(v8 + 600);
      uint64_t v131 = *(void *)(v8 + 592);
      uint64_t v132 = *(void *)(v8 + 584);
      (*(void (**)(uint64_t, void, uint64_t))(v131 + 104))(v130, enum case for ImageSize.default(_:), v132);
      uint64_t v133 = static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetPhone(disambiguationItems:deviceIsLocked:imageSize:)( v109,  0LL,  v130);
      goto LABEL_46;
    }

    swift_release(v102);
    uint64_t v151 = swift_bridgeObjectRelease(v109);
    uint64_t v152 = static os_log_type_t.error.getter(v151);
    os_log(_:dso:log:_:_:)( v152,  &dword_0,  v113,  "makePromptForDisambiguation not supported device - this should have been checked in unsupported case upstream",  109LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v76 = 0x800000000009CBF0LL;
    uint64_t v75 = (void *)0xD000000000000012LL;
LABEL_10:
    uint64_t v77 = type metadata accessor for RuntimeError();
    uint64_t v78 = swift_allocObject(v77, 32LL, 7LL);
    *(void *)(v78 + 16) = v75;
    *(void *)(v78 + 24) = v76;
    uint64_t v79 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RuntimeError,  (uint64_t)&protocol conformance descriptor for RuntimeError);
    uint64_t v168 = swift_allocError(v77, v79, 0LL, 0LL);
    uint64_t *v80 = v78;
    swift_willThrow(v168);
    uint64_t v81 = *(void *)(v8 + 688);
    uint64_t v82 = *(void *)(v8 + 680);
    uint64_t v83 = *(void *)(v8 + 672);
    uint64_t v84 = *(void *)(v8 + 648);
    uint64_t v85 = *(void *)(v8 + 624);
    uint64_t v86 = *(void *)(v8 + 600);
    uint64_t v87 = *(void *)(v8 + 576);
    uint64_t v88 = *(void *)(v8 + 568);
    uint64_t v89 = *(void *)(v8 + 544);
    *(void *)uint64_t type = *(void *)(v8 + 536);
    uint64_t v161 = *(void *)(v8 + 520);
    uint64_t v164 = *(void *)(v8 + 496);
    swift_task_dealloc(*(void *)(v8 + 696));
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(*(void *)type);
    swift_task_dealloc(v161);
    swift_task_dealloc(v164);
    return (*(uint64_t (**)(void))(v8 + 8))();
  }

  uint64_t v126 = (void *)static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForCarPlay(disambiguationItems:deviceIsLocked:)( v109,  0LL);
  swift_bridgeObjectRelease(v109);
LABEL_47:
  uint64_t v166 = (uint64_t)v102;
  *(void *)(v8 + 728) = v126;
  id v137 = v126;
  os_log_type_t v138 = static os_log_type_t.default.getter(v137);
  if (os_log_type_enabled(v113, v138))
  {
    uint64_t v139 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v140 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v169 = v140;
    *(_DWORD *)uint64_t v139 = 136315138;
    id v141 = v137;
    id v142 = [v141 description];
    uint64_t v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v142);
    unint64_t v145 = v144;

    *(void *)(v8 + 40specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v143, v145, (uint64_t *)&v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 + 400, v8 + 408);
    swift_bridgeObjectRelease(v145);

    _os_log_impl(&dword_0, v167, v138, "disambiguation snippet is: %s", v139, 0xCu);
    swift_arrayDestroy(v140, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v140, -1LL, -1LL);
    swift_slowDealloc(v139, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v146 = *(void *)(v8 + 480);
  static Device.current.getter((void *)(v8 + 176));
  uint64_t v147 = *(void *)(v8 + 200);
  uint64_t v148 = *(void *)(v8 + 208);
  __swift_project_boxed_opaque_existential_1((void *)(v8 + 176), v147);
  dispatch thunk of DeviceState.siriLocale.getter(v147, v148);
  uint64_t v149 = *(void *)(v146 + 80);
  uint64_t v150 = (void *)swift_task_alloc(dword_C5614);
  *(void *)(v8 + 736) = v150;
  *uint64_t v150 = v8;
  v150[1] = TrafficIncidentNeedsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
  return TypedDisambiguationItems.makeNLContextUpdate(locale:weightedPromptResponseTargets:)( *(void *)(v8 + 576),  *(void *)(v8 + 624),  v149,  v166,  1);
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)()
{
  uint64_t v1 = (void *)(*(void *)v0 + 176LL);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 720LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 712LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 624LL);
  uint64_t v5 = *(void *)(*(void *)v0 + 608LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 736LL));
  swift_release(v3);
  v2(v4, v5);
  __swift_destroy_boxed_opaque_existential_0Tm(v1);
  return swift_task_switch( TrafficIncidentNeedsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:),  0LL,  0LL);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = (void *)(*(void *)v0 + 256LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 744LL));
  __swift_destroy_boxed_opaque_existential_0Tm(v1);
  return swift_task_switch( TrafficIncidentNeedsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:),  0LL,  0LL);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v1 = *(void **)(v0 + 728);
  if (*(void *)(v0 + 240))
  {
    uint64_t v2 = *(void *)(v0 + 696);
    uint64_t v3 = *(void *)(v0 + 688);
    id v25 = *(void *)(v0 + 680);
    uint64_t v26 = *(void *)(v0 + 672);
    unint64_t v27 = *(void *)(v0 + 648);
    unint64_t v28 = *(void *)(v0 + 624);
    uint64_t v4 = *(void *)(v0 + 576);
    uint64_t v29 = *(void *)(v0 + 600);
    uint64_t v30 = *(void *)(v0 + 568);
    uint64_t v5 = *(void *)(v0 + 560);
    uint64_t v6 = *(void *)(v0 + 552);
    unint64_t v32 = *(void *)(v0 + 544);
    uint64_t v34 = *(void *)(v0 + 536);
    uint64_t v36 = *(void *)(v0 + 520);
    uint64_t v7 = *(void *)(v0 + 496);
    uint64_t v8 = *(void *)(v0 + 456);
    outlined destroy of TrafficIncident(v7);

    outlined init with take of CATType((__int128 *)(v0 + 216), v8);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v4);
    swift_task_dealloc(v30);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    swift_task_dealloc(v36);
    swift_task_dealloc(v7);
  }

  else
  {
    uint64_t v9 = *(void *)(v0 + 576);
    uint64_t v10 = *(void *)(v0 + 560);
    uint64_t v11 = *(void *)(v0 + 552);
    uint64_t v12 = *(void *)(v0 + 496);
    outlined destroy of (label: String?, value: Any)?( v0 + 216,  &demangling cache variable for type metadata for Output?);
    uint64_t v13 = lazy protocol witness table accessor for type Errors and conformance Errors();
    char v37 = swift_allocError(&type metadata for Errors, v13, 0LL, 0LL);
    *(void *)uint64_t v14 = 0xD00000000000002BLL;
    *(void *)(v14 + 8) = 0x800000000009ED70LL;
    *(_BYTE *)(v14 + 16) = 0;
    swift_willThrow(v37);

    outlined destroy of TrafficIncident(v12);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    uint64_t v15 = *(void *)(v0 + 688);
    uint64_t v16 = *(void *)(v0 + 680);
    os_log_type_t v17 = *(void *)(v0 + 672);
    uint64_t v18 = *(void *)(v0 + 648);
    uint64_t v19 = *(void *)(v0 + 624);
    uint64_t v20 = *(void *)(v0 + 600);
    uint64_t v21 = *(void *)(v0 + 576);
    uint64_t v22 = *(void *)(v0 + 568);
    uint64_t v23 = *(void *)(v0 + 544);
    uint64_t v31 = *(void *)(v0 + 536);
    unint64_t v33 = *(void *)(v0 + 520);
    uint64_t v35 = *(void *)(v0 + 496);
    swift_task_dealloc(*(void *)(v0 + 696));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v31);
    swift_task_dealloc(v33);
    swift_task_dealloc(v35);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)( uint64_t a1)
{
  uint64_t v2 = v1 + 49;
  if (*(_BYTE *)(v1[60] + 64LL) == 1)
  {
    uint64_t v3 = (os_log_s *)v1[88];
    uint64_t v4 = v1[68];
    uint64_t v5 = v1[65];
    (*(void (**)(uint64_t, void, void))(v1[64] + 104LL))( v5,  enum case for PommesContext.Source.pluginDefined(_:),  v1[63]);
    PommesContext.init(source:domain:listenAfterSpeaking:)(v5, 7300455LL, 0xE300000000000000LL, 1LL);
    uint64_t v6 = type metadata accessor for PommesContext(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v4, 0LL, 1LL, v6);
    uint64_t v7 = NLContextUpdate.pommesContext.setter(v4);
    os_log_type_t v15 = static os_log_type_t.info.getter(v7, v8, v9, v10, v11, v12, v13, v14);
    a1 = os_log_type_enabled(v3, v15);
    if ((_DWORD)a1)
    {
      os_log_t log = (os_log_s *)v1[88];
      uint64_t v16 = v1[72];
      uint64_t v17 = v1[67];
      uint64_t v18 = v1[66];
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      uint64_t v50 = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      uint64_t v21 = swift_beginAccess(v16, v1 + 43, 32LL, 0LL);
      NLContextUpdate.pommesContext.getter(v21);
      uint64_t v2 = v1 + 49;
      swift_endAccess(v1 + 43);
      uint64_t v22 = String.init<A>(describing:)(v17, v18);
      unint64_t v24 = v23;
      v1[49] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 49, v1 + 50);
      swift_bridgeObjectRelease(v24);
      _os_log_impl(&dword_0, log, v15, "updated nl context with pommesContext: %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1LL, -1LL);
      a1 = swift_slowDealloc(v19, -1LL, -1LL);
    }
  }

  id v25 = (os_log_s *)v1[88];
  os_log_type_t v26 = static os_log_type_t.default.getter(a1);
  if (os_log_type_enabled(v25, v26))
  {
    os_log_t loga = (os_log_s *)v1[88];
    uint64_t v48 = v2;
    uint64_t v27 = v1[72];
    uint64_t v28 = v1[71];
    uint64_t v29 = v1[70];
    uint64_t v30 = v1[69];
    uint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v32 = swift_slowAlloc(32LL, -1LL);
    uint64_t v50 = v32;
    *(_DWORD *)uint64_t v31 = 136315138;
    swift_beginAccess(v27, v1 + 40, 0LL, 0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v28, v27, v30);
    uint64_t v33 = String.init<A>(describing:)(v28, v30);
    unint64_t v35 = v34;
    v1[48] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v48);
    swift_bridgeObjectRelease(v35);
    _os_log_impl(&dword_0, loga, v26, "makePromptForDisambiguation nlContextUpdate is: %s", v31, 0xCu);
    swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  uint64_t v36 = v1[72];
  uint64_t v38 = v1[61];
  uint64_t v37 = v1[62];
  uint64_t v39 = v1[60];
  uint64_t v40 = enum case for BehaviorAfterSpeaking.listen(_:);
  uint64_t v41 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 104LL))(v37, v40, v41);
  swift_storeEnumTagMultiPayload(v37, v38, 3LL);
  v1[35] = v38;
  v1[36] = &protocol witness table for TrafficIncident;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v1 + 32);
  outlined init with copy of TrafficIncident(v37, (uint64_t)boxed_opaque_existential_0);
  swift_beginAccess(v36, v1 + 37, 0LL, 0LL);
  id v43 = *(int **)(*(void *)v39 + 168LL);
  uint64_t v49 = (int *)((char *)v43 + *v43);
  uint64_t v44 = (void *)swift_task_alloc(v43[1]);
  v1[93] = v44;
  *uint64_t v44 = v1;
  v44[1] = TrafficIncidentNeedsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
  return ((uint64_t (*)(void *, void *, void, void))v49)(v1 + 27, v1 + 32, v1[58], v1[72]);
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.disambiguateIncidentsRF(dialog:paginatedItems:nlContext:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[12] = a4;
  v5[13] = v4;
  v5[10] = a2;
  v5[11] = a3;
  void v5[9] = a1;
  uint64_t v6 = type metadata accessor for ResponseType(0LL);
  v5[14] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[15] = v7;
  v5[16] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v5[17] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DialogPhase(0LL);
  v5[18] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OutputGenerationManifest(0LL);
  v5[19] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[20] = v11;
  v5[21] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( TrafficIncidentNeedsDisambiguationStrategy.disambiguateIncidentsRF(dialog:paginatedItems:nlContext:),  0LL,  0LL);
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.disambiguateIncidentsRF(dialog:paginatedItems:nlContext:)()
{
  uint64_t v1 = (void *)v0[13];
  uint64_t v2 = v1[9];
  v0[22] = v2;
  uint64_t v3 = v1[6];
  uint64_t v4 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 80))(v3, v4);
  v0[23] = v5;
  uint64_t v6 = *(int **)(*(void *)v2 + 152LL);
  uint64_t v9 = (int *)((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  v0[24] = v7;
  *uint64_t v7 = v0;
  v7[1] = TrafficIncidentNeedsDisambiguationStrategy.disambiguateIncidentsRF(dialog:paginatedItems:nlContext:);
  return ((uint64_t (*)(void, uint64_t))v9)(v0[10], v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  os_log_type_t v5;
  os_log_s *v6;
  os_log_type_t v7;
  uint64_t v8;
  id v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *updated;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  os_log_s *log;
  os_log_t loga;
  uint64_t v44;
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 176) + 136LL))(*(void *)(v0 + 80));
  if ((v3 & 1) != 0)
  {
    uint64_t v1 = outlined consume of Result<String, Error>(v1, v2, 1);
    uint64_t v40 = 0LL;
    uint64_t v41 = 0xE000000000000000LL;
  }

  else
  {
    uint64_t v40 = v1;
    uint64_t v41 = v2;
  }

  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = static os_log_type_t.default.getter(v1);
  uint64_t v6 = *(os_log_s **)(v4 + 16);
  uint64_t v7 = v5;
  os_log_t log = v6;
  uint64_t v8 = os_log_type_enabled(v6, v5);
  if ((_DWORD)v8)
  {
    uint64_t v9 = *(id *)(v0 + 200);
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v44 = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    uint64_t v12 = v9;
    uint64_t v13 = [v12 description];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    uint64_t v16 = v15;

    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
    swift_bridgeObjectRelease(v16);

    _os_log_impl(&dword_0, log, v7, "RF: dialogResult success %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    uint64_t v8 = swift_slowDealloc(v10, -1LL, -1LL);
  }

  uint64_t v39 = *(void **)(v0 + 200);
  uint64_t v18 = *(void *)(v0 + 136);
  uint64_t v17 = *(void *)(v0 + 144);
  uint64_t v19 = *(void *)(v0 + 120);
  uint64_t v20 = *(void *)(v0 + 128);
  uint64_t v21 = *(void *)(v0 + 112);
  uint64_t v22 = *(void *)(v0 + 96);
  static DialogPhase.clarification.getter(v8);
  OutputGenerationManifest.init(dialogPhase:_:)(v17, AnswerETAIntentResponseCode.rawValue.getter, 0LL);
  OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
  OutputGenerationManifest.responseViewId.setter(1936744813LL, 0xE400000000000000LL);
  unint64_t v23 = type metadata accessor for NLContextUpdate(0LL);
  unint64_t v24 = *(void *)(v23 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v18, v22, v23);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v18, 0LL, 1LL, v23);
  OutputGenerationManifest.nlContextUpdate.setter(v18);
  (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))( v20,  enum case for ResponseType.disambiguation(_:),  v21);
  OutputGenerationManifest.responseType.setter(v20);
  id v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INSupportedTrafficIncidentType>);
  os_log_type_t v26 = PaginatedItemContainer.items.getter(v25);
  updated = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySo30INSupportedTrafficIncidentTypeCGG_21GeoFlowDelegatePlugin0jgH0Vs5NeverOTg508_sSiSo30fghi3C21jkl43Plugin0ebC0VIgygo_Si6offset_AB7elementtAEs5N263OIegnrzr_TR04_s21efg8Plugin42bc171NeedsDisambiguationStrategyC23disambiguateIncidentsRF6dialog14paginatedItems9nlContext07SiriKitB06Output_pSgAA0A8CATModel_p_AH22PaginatedItemContainerVySo011INSupportedeF4D45CGAH15NLContextUpdateVtYaFAA0aeF0VSi_AOtXEfU_Tf3nnnpf_nTf1cn_n(v26);
  uint64_t v28 = swift_bridgeObjectRelease(v26);
  uint64_t v29 = static os_log_type_t.default.getter(v28);
  os_log(_:dso:log:_:_:)(v29, &dword_0, log, "RF: made snippet model successfully", 35LL, 2LL, _swiftEmptyArrayStorage);
  uint64_t v30 = type metadata accessor for ResponseFactory(0LL);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  *(void *)(v0 + 216) = ResponseFactory.init()();
  *(void *)(v0 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &type metadata for GeoDataModels;
  *(void *)(v0 + 48) = lazy protocol witness table accessor for type GeoDataModels and conformance GeoDataModels();
  uint64_t v31 = swift_allocObject(&unk_BBA90, 97LL, 7LL);
  *(void *)(v0 + 16) = v31;
  *(void *)(v31 + 16) = v40;
  *(void *)(v31 + 24) = v41;
  *(void *)(v31 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = updated;
  *(_OWORD *)(v31 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0u;
  *(_OWORD *)(v31 + 56) = 0u;
  *(_OWORD *)(v31 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0u;
  *(void *)(v31 + 88) = 0LL;
  *(_BYTE *)(v31 + 96) = 2;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v33 = swift_allocObject(v32, 40LL, 7LL);
  *(_OWORD *)(v33 + 16) = xmmword_95900;
  *(void *)(v33 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v39;
  uint64_t v44 = v33;
  specialized Array._endMutation()(v33);
  unint64_t v34 = v44;
  *(void *)(v0 + 224) = v44;
  uint64_t v36 = v39;
  uint64_t v37 = (void *)swift_task_alloc(v35);
  *(void *)(v0 + 23__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v37;
  *uint64_t v37 = v0;
  v37[1] = TrafficIncidentNeedsDisambiguationStrategy.disambiguateIncidentsRF(dialog:paginatedItems:nlContext:);
  return ((uint64_t (*)(void, uint64_t, uint64_t, void))loga)( *(void *)(v0 + 72),  v0 + 16,  v34,  *(void *)(v0 + 168));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = (void *)(*(void *)v0 + 16LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 224LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 216LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 232LL));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  __swift_destroy_boxed_opaque_existential_0Tm(v1);
  return swift_task_switch( TrafficIncidentNeedsDisambiguationStrategy.disambiguateIncidentsRF(dialog:paginatedItems:nlContext:),  0LL,  0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 152);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = *(void *)(v0 + 136);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 128);
  swift_task_dealloc(*(void *)(v0 + 168));
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)( v3,  &dword_0,  *(void *)(v1 + 16),  "RF: dialogResult failure",  24LL,  2LL,  &_swiftEmptyArrayStorage);
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0LL;
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  uint64_t v4 = *(void *)(v0 + 136);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 128);
  swift_task_dealloc(*(void *)(v0 + 168));
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.disambiguateIncidentsRF(dialog:paginatedItems:nlContext:)( uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 192LL);
  v3[25] = a1;
  v3[26] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v3[23]);
  if (v1)
  {
    swift_errorRelease(v1);
    uint64_t v5 = TrafficIncidentNeedsDisambiguationStrategy.disambiguateIncidentsRF(dialog:paginatedItems:nlContext:);
  }

  else
  {
    uint64_t v5 = TrafficIncidentNeedsDisambiguationStrategy.disambiguateIncidentsRF(dialog:paginatedItems:nlContext:);
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 24));
  swift_release(*(void *)(v0 + 72));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  return v0;
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 24));
  swift_release(*(void *)(v0 + 72));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.paginationStyle(resolveRecord:) in conformance TrafficIncidentNeedsDisambiguationStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy();
  return NeedsDisambiguationFlowStrategyAsync.paginationStyle(resolveRecord:)(a1, v5, a3);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance TrafficIncidentNeedsDisambiguationStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128LL))();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance TrafficIncidentNeedsDisambiguationStrategy( uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v5 = *(int **)(**(void **)v2 + 136LL);
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)v5 + *v5);
  uint64_t v6 = (void *)swift_task_alloc(v5[1]);
  *(void *)(v3 + 24) = v6;
  void *v6 = v3;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance ShareETAPromptForContactStrategy;
  return v8(a2);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance TrafficIncidentNeedsDisambiguationStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(int **)(**(void **)v4 + 152LL);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc(v10[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v13(a1, a2, a3, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:resolveRecord:) in conformance TrafficIncidentNeedsDisambiguationStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(**(void **)v3 + 160LL);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v11(a1, a2, a3);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance TrafficIncidentNeedsDisambiguationStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy();
  void *v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:)( a1,  a2,  a3,  v11,  a5);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:) in conformance TrafficIncidentNeedsDisambiguationStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy();
  void *v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:)( a1,  a2,  a3,  v11,  a5);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:) in conformance TrafficIncidentNeedsDisambiguationStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:) in conformance TrafficIncidentNeedsDisambiguationStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:) in conformance TrafficIncidentNeedsDisambiguationStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy();
  return NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:)(a1, v5, a3);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance TrafficIncidentNeedsDisambiguationStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)[1]);
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy();
  *uint64_t v12 = v6;
  v12[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)(a1, a2, a3, a4, v13, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance TrafficIncidentNeedsDisambiguationStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)[1]);
  *(void *)(v7 + 16) = v14;
  uint64_t v15 = type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy();
  *uint64_t v14 = v7;
  v14[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)(a1, a2, a3, a4, a5, v15, a7);
}

uint64_t outlined init with copy of TrafficIncident(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TrafficIncident(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TrafficIncident(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TrafficIncident(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_79018()
{
  return swift_deallocObject(v0, 97LL, 7LL);
}

uint64_t base witness table accessor for ParameterResolutionHandlingAsync in TrafficIncidentNeedsDisambiguationStrategy( uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type TrafficIncidentNeedsDisambiguationStrategy and conformance TrafficIncidentNeedsDisambiguationStrategy,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy,  (uint64_t)&protocol conformance descriptor for TrafficIncidentNeedsDisambiguationStrategy);
}

uint64_t type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin42TrafficIncidentNeedsDisambiguationStrategy);
}

unint64_t lazy protocol witness table accessor for type BasicDisambiguationItemContainer<INSupportedTrafficIncidentType> and conformance BasicDisambiguationItemContainer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type BasicDisambiguationItemContainer<INSupportedTrafficIncidentType> and conformance BasicDisambiguationItemContainer<A>;
  if (!lazy protocol witness table cache variable for type BasicDisambiguationItemContainer<INSupportedTrafficIncidentType> and conformance BasicDisambiguationItemContainer<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for BasicDisambiguationItemContainer<INSupportedTrafficIncidentType>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for BasicDisambiguationItemContainer<A>, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type BasicDisambiguationItemContainer<INSupportedTrafficIncidentType> and conformance BasicDisambiguationItemContainer<A>);
  }

  return result;
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.geoClientComponent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent(0LL);
  uint64_t v1 = *(void *)(v27 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientDrivenExperience(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter(v12);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.clientDrivenExperience.getter(v15);
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v17 = Apple_Parsec_Siri_V2alpha_ClientDrivenExperience.components.getter(v16);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  if (v18)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))( v14,  v17 + ((*(unsigned __int8 *)(v20 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80)),  v19);
    uint64_t v21 = 0LL;
  }

  else
  {
    uint64_t v21 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v14, v21, 1LL, v19);
  swift_bridgeObjectRelease(v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v14, 1LL, v19) == 1)
  {
    outlined destroy of Apple_Parsec_Siri_V2alpha_ClientComponent?((uint64_t)v14);
    uint64_t v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))( v28,  1LL,  1LL,  v22);
  }

  else
  {
    Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
    uint64_t v24 = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v14, v19);
    uint64_t v25 = v28;
    Apple_Parsec_Siri_V2alpha_DomainClientComponent.geoClientComponent.getter(v24);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v27);
    uint64_t v26 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent(0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))( v25,  0LL,  1LL,  v26);
  }

uint64_t outlined destroy of Apple_Parsec_Siri_V2alpha_ClientComponent?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t specialized ContactResolutionFlow.init(occupantNode:disambiguationStrategy:confirmationStrategy:contactResolver:flowHelper:handleResolver:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v28 = a4;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v31 = a1;
  uint64_t v8 = type metadata accessor for RecommenderType(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SearchSuggestedContacts(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for ContactResolverDomain(0LL);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for Locale(0LL);
  __chkstk_darwin();
  uint64_t v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v20 = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000015LL,  0x800000000009BAA0LL);
  *(void *)(v6 + 24) = 0LL;
  *(void *)(v6 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0LL;
  *(void *)(v6 + 16) = v20;
  *(_BYTE *)(v6 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 1;
  uint64_t v21 = static Locale.current.getter(v20);
  static ContactResolverDomain.all.getter(v21);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))( v15,  enum case for SearchSuggestedContacts.ifOnlyMatchIsSuggested(_:),  v12);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for RecommenderType.mlRecommender(_:), v8);
  ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:recommender:customGenerator:)( 0LL,  0xE000000000000000LL,  0LL,  0xE000000000000000LL,  v19,  1LL,  1LL,  _swiftEmptyArrayStorage,  v17,  v15,  v11,  0LL,  0LL);
  uint64_t v22 = v7 + *(void *)(*(void *)v7 + 168LL);
  uint64_t v23 = type metadata accessor for SiriKitContactResolver(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32LL))(v22, v28, v23);
  *(void *)(v7 + *(void *)(*(void *)v7 + 136LL)) = v29;
  *(void *)(v7 + *(void *)(*(void *)v7 + 144LL)) = v30;
  uint64_t v24 = v7 + *(void *)(*(void *)v7 + 128LL);
  uint64_t v25 = type metadata accessor for OccupantIntentNode(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32LL))(v24, v31, v25);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactResolutionFlow<ShareETAContactDisambiguationStrategy, ShareETAContactConfirmationStrategy>.State);
  swift_storeEnumTagMultiPayload(v24, v26, 0LL);
  outlined init with take of CATType(v32, v7 + *(void *)(*(void *)v7 + 152LL));
  outlined init with take of HandleFilterProtocolAsync?(v33, v7 + *(void *)(*(void *)v7 + 160LL));
  return v7;
}

uint64_t ShareETABaseFlow.__allocating_init(with:stopSharing:flowHelper:checkNavigation:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = swift_allocObject(v5, 114LL, 7LL);
  ShareETABaseFlow.init(with:stopSharing:flowHelper:checkNavigation:)(a1, a2, a3, a4, a5);
  return v11;
}

uint64_t one-time initialization function for kShareETAAuthenticationPolicy()
{
  uint64_t v0 = type metadata accessor for UnlockDevicePolicy(0LL);
  __swift_allocate_value_buffer(v0, kShareETAAuthenticationPolicy);
  __swift_project_value_buffer(v0, (uint64_t)kShareETAAuthenticationPolicy);
  return static UnlockDevicePolicy.default.getter();
}

uint64_t ShareETABaseFlow.flowState.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  outlined copy of ShareETABaseFlow.State(v1, *(_BYTE *)(v0 + 40));
  return v1;
}

uint64_t ShareETABaseFlow.flowState.setter(uint64_t a1, char a2)
{
  uint64_t v5 = *(void *)(v2 + 32);
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a1;
  char v6 = *(_BYTE *)(v2 + 40);
  *(_BYTE *)(v2 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = a2;
  return outlined consume of ShareETABaseFlow.State(v5, v6);
}

uint64_t ShareETABaseFlow.stopSharing.getter()
{
  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t ShareETABaseFlow.directInvocation.getter()
{
  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t ShareETABaseFlow.directInvocation.setter(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 88, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 88) = a1;
  return result;
}

uint64_t ShareETABaseFlow.checkNavigation.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t ShareETABaseFlow.checkNavigation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_beginAccess(v2 + 96, v6, 1LL, 0LL);
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = a2;
  return result;
}

uint64_t ShareETABaseFlow.isPOMMES.getter()
{
  return *(unsigned __int8 *)(v0 + 112);
}

uint64_t ShareETABaseFlow.isPOMMES.setter(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 112, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a1;
  return result;
}

uint64_t ShareETABaseFlow.isUSO.getter()
{
  return *(unsigned __int8 *)(v0 + 113);
}

uint64_t ShareETABaseFlow.isUSO.setter(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 113, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 13) = a1;
  return result;
}

uint64_t (*ShareETABaseFlow.isUSO.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

#error "79B04: call analysis failed (funcsize=93)"
uint64_t outlined copy of ShareETABaseFlow.State(uint64_t result, char a2)
{
  switch(a2)
  {
    case 0:
    case 1:
      uint64_t result = swift_retain(result);
      break;
    case 2:
      uint64_t result = swift_bridgeObjectRetain(result);
      break;
    case 3:
      uint64_t result = swift_errorRetain(result);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t outlined consume of ShareETABaseFlow.State(uint64_t result, char a2)
{
  switch(a2)
  {
    case 0:
    case 1:
      uint64_t result = swift_release(result);
      break;
    case 2:
      uint64_t result = swift_bridgeObjectRelease(result);
      break;
    case 3:
      uint64_t result = swift_errorRelease(result);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t ShareETABaseFlow.onInput(input:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input(0LL);
  uint64_t v64 = *(void *)(v2 - 8);
  uint64_t v65 = v2;
  __chkstk_darwin();
  uint64_t v63 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Parse(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  unint64_t v66 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v8 = (id *)((char *)&v63 - v7);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v63 - v9;
  __chkstk_darwin();
  uint64_t v12 = (char *)&v63 - v11;
  uint64_t v13 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin();
  uint64_t v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = a1;
  Input.parse.getter(v15);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t))(v5 + 88);
  if (v18(v12, v4) == enum case for Parse.directInvocation(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v12, v4);
    uint64_t v19 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v17, v12, v13);
    uint64_t v20 = Parse.DirectInvocation.identifier.getter(v19);
    uint64_t v22 = v21;
    if (v20 == 0xD00000000000002CLL && v21 == 0x800000000009B750LL)
    {
      swift_bridgeObjectRelease(0x800000000009B750LL);
LABEL_14:
      uint64_t v37 = v68;
      uint64_t v38 = (*(uint64_t (**)(uint64_t))(*v68 + 208LL))(1LL);
      uint64_t v39 = (os_log_s *)v37[2];
      os_log_type_t v40 = static os_log_type_t.default.getter(v38);
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v41 = 0;
        _os_log_impl(&dword_0, v39, v40, "ShareETABaseFlow onInput returns true for directInvocation parse", v41, 2u);
        swift_slowDealloc(v41, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
      return 1LL;
    }

    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, 0xD00000000000002CLL, 0x800000000009B750LL, 0LL);
    swift_bridgeObjectRelease(v22);
    if ((v36 & 1) != 0) {
      goto LABEL_14;
    }
    uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }

  else
  {
    uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, v4);
  }

  uint64_t v24 = v67;
  Input.parse.getter(v23);
  unsigned int v25 = v18(v10, v4);
  int v26 = enum case for Parse.NLv3IntentOnly(_:);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  uint64_t v28 = v27(v10, v4);
  if (v25 == v26)
  {
    uint64_t v29 = (os_log_s *)v68[2];
    os_log_type_t v30 = static os_log_type_t.default.getter(v28);
    if (!os_log_type_enabled(v29, v30)) {
      return 1LL;
    }
    uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v31 = 0;
    uint64_t v32 = "ShareETABaseFlow onInput returns true for NLv3IntentOnly parse";
    goto LABEL_12;
  }

  Input.parse.getter(v28);
  if (v18((char *)v8, v4) == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(id *, uint64_t))(v5 + 96))(v8, v4);

    uint64_t v33 = v68;
    uint64_t v34 = 1LL;
    uint64_t v35 = (*(uint64_t (**)(uint64_t))(*v68 + 256LL))(1LL);
    uint64_t v29 = (os_log_s *)v33[2];
    os_log_type_t v30 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v31 = 0;
      uint64_t v32 = "ShareETABaseFlow onInput returns true for pommesResponse parse";
LABEL_12:
      _os_log_impl(&dword_0, v29, v30, v32, v31, 2u);
      swift_slowDealloc(v31, -1LL, -1LL);
      return 1LL;
    }
  }

  else
  {
    uint64_t v43 = v27((char *)v8, v4);
    uint64_t v44 = v66;
    Input.parse.getter(v43);
    unsigned int v45 = v18(v44, v4);
    int v46 = enum case for Parse.uso(_:);
    uint64_t v47 = v27(v44, v4);
    uint64_t v48 = v68;
    uint64_t v49 = (os_log_s *)v68[2];
    if (v45 == v46)
    {
      os_log_type_t v50 = static os_log_type_t.default.getter(v47);
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v51 = 0;
        _os_log_impl(&dword_0, v49, v50, "ShareETABaseFlow onInput returns true for USO parse", v51, 2u);
        swift_slowDealloc(v51, -1LL, -1LL);
      }

      uint64_t v34 = 1LL;
      (*(void (**)(uint64_t))(*v48 + 280LL))(1LL);
    }

    else
    {
      uint64_t v53 = v63;
      uint64_t v52 = v64;
      uint64_t v54 = v65;
      uint64_t v55 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 16))(v63, v24, v65);
      os_log_type_t v56 = static os_log_type_t.default.getter(v55);
      if (os_log_type_enabled(v49, v56))
      {
        uint64_t v57 = v52;
        uint64_t v58 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v59 = swift_slowAlloc(32LL, -1LL);
        uint64_t v70 = v59;
        *(_DWORD *)uint64_t v58 = 136315138;
        uint64_t v60 = Input.description.getter();
        unint64_t v62 = v61;
        uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, &v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
        swift_bridgeObjectRelease(v62);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v53, v54);
        _os_log_impl(&dword_0, v49, v56, "SiriGeo currently doesn't support parse type: %s", v58, 0xCu);
        swift_arrayDestroy(v59, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v59, -1LL, -1LL);
        swift_slowDealloc(v58, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v54);
      }

      return 0LL;
    }
  }

  return v34;
}

uint64_t ShareETABaseFlow.executeState()(uint64_t a1)
{
  v2[200] = v1;
  v2[199] = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INShareETAIntent, INShareETAIntentResponse>?);
  v2[201] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Locale(0LL);
  v2[202] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INStopShareETAIntent, INStopShareETAIntentResponse>?);
  v2[203] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for TemplatingResult(0LL);
  v2[204] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[205] = v7;
  uint64_t v8 = *(void *)(v7 + 64);
  v2[206] = v8;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[207] = swift_task_alloc(v9);
  v2[208] = swift_task_alloc(v9);
  v2[209] = swift_task_alloc(v9);
  v2[210] = swift_task_alloc(v9);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v2[211] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for ActivityType(0LL);
  v2[212] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[213] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[214] = swift_task_alloc(v13);
  v2[215] = swift_task_alloc(v13);
  v2[216] = swift_task_alloc(v13);
  uint64_t v14 = type metadata accessor for ShareETA(0LL);
  v2[217] = v14;
  v2[218] = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for SiriKitContactResolver(0LL);
  v2[219] = swift_task_alloc((*(void *)(*(void *)(v15 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OccupantIntentNode?);
  v2[220] = swift_task_alloc((*(void *)(*(void *)(v16 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for OccupantIntentNode(0LL);
  v2[221] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v2[222] = v18;
  unint64_t v19 = (*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[223] = swift_task_alloc(v19);
  v2[224] = swift_task_alloc(v19);
  return swift_task_switch(ShareETABaseFlow.executeState(), 0LL, 0LL);
}

void ShareETABaseFlow.executeState()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9 = *(void **)(v8 + 1600);
  uint64_t v10 = static os_log_type_t.info.getter( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v8 + 368,  v8 + 1464,  v8 + 648,  v8 + 1248,  v8 + 608,  v8 + 1568,  v8 + 1936,  v8 + 1488,  v8 + 968,  v8 + 1008,  v8 + 848,  v8 + 1552,  v8 + 16,  v8 + 192,  v8 + 568,  v8 + 1416,  v8 + 1368,  v8 + 488,  v8 + 1584);
  uint64_t v11 = os_log(_:dso:log:_:_:)(v10, &dword_0, v9[2], "ShareETABaseFlow execute", 24LL, 2LL, &_swiftEmptyArrayStorage);
  *(void *)(v8 + 180specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = (*(uint64_t (**)(uint64_t))(*v9 + 152LL))(v11);
  __asm { BR              X10 }

uint64_t sub_7A56C()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_C8904);
  *(void *)(v1 + 1808) = v2;
  *uint64_t v2 = v1;
  v2[1] = ShareETABaseFlow.executeState();
  return ShareETABaseFlow.preChecks(intent:)(*(void *)(v1 + 1592), v0);
}

uint64_t sub_7A5BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = static os_log_type_t.info.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v13 = os_log(_:dso:log:_:_:)( v12,  &dword_0,  v9,  "ShareETABaseFlow execute initialized",  36LL,  2LL,  _swiftEmptyArrayStorage);
  os_log_type_t v21 = static os_log_type_t.info.getter(v13, v14, v15, v16, v17, v18, v19, v20);
  uint64_t v22 = os_log_type_enabled(v9, v21);
  if ((v22 & 1) != 0)
  {
    uint64_t v23 = v8;
    uint64_t v24 = *(void *)(v10 + 1600);
    swift_retain(v24);
    unsigned int v25 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unsigned int v25 = 67109120;
    *(_DWORD *)(v10 + 194specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = (*(uint64_t (**)(void))(*(void *)v24 + 248LL))() & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(*(void *)(v11 - 144), v10 + 1944);
    uint64_t v26 = v24;
    uint64_t v8 = v23;
    swift_release(v26);
    _os_log_impl(&dword_0, v9, v21, "Is POMMES ShareETA request? : %{BOOL}d", v25, 8u);
    uint64_t v22 = swift_slowDealloc(v25, -1LL, -1LL);
  }

  uint64_t v27 = (void *)v10;
  uint64_t v28 = *(void *)(v10 + 1776);
  uint64_t v29 = v27[221];
  uint64_t v30 = v27[220];
  uint64_t v31 = *(void (**)(uint64_t))(*(void *)v8 + 208LL);
  *(void *)(v11 - 144) = v8;
  v31(v22);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v30, 1LL, v29) != 1)
  {
    uint64_t v36 = v27[200];
    uint64_t v37 = (*(uint64_t (**)(void, void, void))(v27[222] + 32LL))(v27[224], v27[220], v27[221]);
    uint64_t v35 = v27;
    if ((*(_BYTE *)(v36 + 41) & 1) != 0)
    {
      uint64_t v38 = 0LL;
      uint64_t v39 = 0LL;
    }

    else
    {
      uint64_t v60 = v27[200];
      unint64_t v61 = *(uint64_t (**)(uint64_t))(*(void *)v60 + 248LL);
      *(void *)(v11 - 128) = v61;
      char v110 = v61(v37);
      os_log_type_t v112 = *(uint64_t (**)(void))(*(void *)v60 + 272LL);
      char v109 = v112();
      id v108 = OccupantIntentNode.asINPerson.getter();
      ((void (*)())static Device.current.getter)();
      uint64_t v62 = type metadata accessor for GeoRCHFlowFactoryImpl();
      uint64_t v63 = swift_allocObject(v62, 16LL, 7LL);
      v27[32] = v62;
      v27[33] = &protocol witness table for GeoRCHFlowFactoryImpl;
      v27[29] = v63;
      v27[34] = static DialogHelper.globals.getter(v63);
      uint64_t v64 = static AceService.currentAsync.getter(v27 + 35);
      static OutputPublisherFactory.makeOutputPublisherAsync()(v64);
      uint64_t v65 = type metadata accessor for CATService();
      uint64_t v66 = swift_allocObject(v65, 40LL, 7LL);
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v65);
      Swift::String v68 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
      *(void *)(v66 + 24) = [v68 bundleForClass:ObjCClassFromMetadata];
      type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
      *(void *)(v66 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
      *(_BYTE *)(v66 + 16) = 0;
      v27[45] = v66;
      uint64_t v69 = swift_allocObject(v65, 40LL, 7LL);
      *(void *)(v69 + 24) = [v68 bundleForClass:ObjCClassFromMetadata];
      *(void *)(v69 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
      *(_BYTE *)(v69 + 16) = 1;
      uint64_t v70 = type metadata accessor for ShareETAContactDisambiguationStrategy();
      uint64_t v71 = swift_allocObject(v70, 104LL, 7LL);
      outlined init with copy of FlowHelperImpl((uint64_t)v107, (uint64_t)v106);
      uint64_t v39 = specialized ShareETAContactDisambiguationStrategy.init(isPommes:isUSO:skeletonPerson:flowHelper:catService:)( v110 & 1,  v109 & 1,  (uint64_t)v108,  v106,  v69,  v71);
      os_log_type_t v72 = outlined destroy of FlowHelperImpl(v107);
      char v73 = (*(uint64_t (**)(void *))(v11 - 128))(v72);
      LOBYTE(v71) = v112();
      uint64_t v74 = type metadata accessor for ShareETAContactConfirmationStrategy();
      swift_allocObject(v74, 48LL, 7LL);
      uint64_t v38 = ShareETAContactConfirmationStrategy.init(isPOMMES:isUSO:)(v73 & 1, v71 & 1);
    }

    uint64_t v113 = v35[224];
    uint64_t v75 = v35[223];
    uint64_t v76 = v35[222];
    *(void *)(v11 - 128) = v76;
    uint64_t v77 = v35[219];
    uint64_t v78 = v35[200];
    uint64_t v111 = v35[221];
    uint64_t v79 = *(void *)(v11 - 152);
    *(_OWORD *)uint64_t v79 = 0u;
    *(_OWORD *)(v79 + 16) = 0u;
    *(void *)(v79 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0LL;
    (*(void (**)(uint64_t))(v76 + 16))(v75);
    unint64_t v80 = *(void (**)(uint64_t))(*(void *)v78 + 176LL);
    swift_retain(v38);
    uint64_t v81 = swift_retain(v39);
    v80(v81);
    uint64_t v82 = v39;
    uint64_t v83 = *(void *)(v11 - 160);
    uint64_t v84 = outlined init with copy of HandleFilterProtocolAsync?(v79, v83);
    ((void (*)(uint64_t))SiriKitContactResolver.init())(v84);
    uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactResolutionFlow<ShareETAContactDisambiguationStrategy, ShareETAContactConfirmationStrategy>);
    swift_allocObject(v85, *(unsigned int *)(v85 + 48), *(unsigned __int16 *)(v85 + 52));
    uint64_t v86 = v75;
    uint64_t v87 = v38;
    uint64_t v88 = specialized ContactResolutionFlow.init(occupantNode:disambiguationStrategy:confirmationStrategy:contactResolver:flowHelper:handleResolver:)( v86,  v82,  v38,  v77,  (__int128 *)(v11 - 120),  v83);
    v35[197] = v88;
    uint64_t v89 = lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>( &lazy protocol witness table cache variable for type ContactResolutionFlow<ShareETAContactDisambiguationStrategy, ShareETAContactConfirmationStrategy> and conformance ContactResolutionFlow<A, B>,  &demangling cache variable for type metadata for ContactResolutionFlow<ShareETAContactDisambiguationStrategy, ShareETAContactConfirmationStrategy>,  (uint64_t)&protocol conformance descriptor for ContactResolutionFlow<A, B>);
    swift_retain(v78);
    ((void (*)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))static ExecuteResponse.ongoing<A>(next:childCompletion:))( partial apply for closure #2 in ShareETABaseFlow.executeState(),  v78,  v85,  v89);
    swift_release(v78);
    outlined consume of ShareETABaseFlow.State(*(void *)(v11 - 144), 1);
    swift_release(v82);
    swift_release(v87);
    outlined destroy of (label: String?, value: Any)?( v79,  &demangling cache variable for type metadata for HandleFilterProtocolAsync?);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 128) + 8LL))(v113, v111);
    uint64_t v59 = v88;
    goto LABEL_11;
  }

  uint64_t v32 = (uint64_t *)v27[200];
  uint64_t v33 = outlined destroy of (label: String?, value: Any)?( v27[220],  &demangling cache variable for type metadata for OccupantIntentNode?);
  uint64_t v34 = *v32;
  uint64_t v35 = v27;
  if (*((_BYTE *)v32 + 41) != 1)
  {
    os_log_type_t v40 = (_BYTE *)v27[218];
    uint64_t v41 = v27[217];
    uint64_t v42 = (uint64_t *)v27[200];
    *(void *)(v11 - 136) = v27[199];
    char v43 = (*(uint64_t (**)(uint64_t))(v34 + 248))(v33);
    char v44 = (*(uint64_t (**)(void))(*v42 + 200))();
    uint64_t v45 = *v42;
    *(void *)(v11 - 128) = v27;
    int v46 = *(void (**)(void))(v45 + 176);
    v46();
    outlined init with copy of DeviceState((uint64_t)v104, (uint64_t)v103);
    char v48 = v44 & 1;
    *os_log_type_t v40 = v44 & 1;
    uint64_t v49 = enum case for BehaviorAfterSpeaking.listen(_:);
    uint64_t v50 = type metadata accessor for BehaviorAfterSpeaking(0LL);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v50 - 8) + 104LL))(v47, v49, v50);
    swift_storeEnumTagMultiPayload(v40, v41, 4LL);
    uint64_t v51 = type metadata accessor for ShareETAPromptForContactStrategy(0LL);
    swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
    uint64_t v52 = ShareETAPromptForContactStrategy.init(isPommes:directInvocation:flowHelper:catModel:)( v43 & 1,  v48,  v103,  (uint64_t)v40);
    __swift_destroy_boxed_opaque_existential_0Tm(v104);
    uint64_t v53 = swift_retain(v52);
    ((void (*)(uint64_t))v46)(v53);
    uint64_t v35 = *(void **)(v11 - 128);
    uint64_t v54 = v35[109];
    uint64_t v55 = v35[110];
    __swift_project_boxed_opaque_existential_1(v105, v54);
    (*(void (**)(uint64_t, uint64_t))(v55 + 104))(v54, v55);
    __swift_destroy_boxed_opaque_existential_0Tm(v105);
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForValueFlowAsync<LocationSearchIntent>);
    swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
    uint64_t v57 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type ShareETAPromptForContactStrategy and conformance ShareETAPromptForContactStrategy,  255LL,  type metadata accessor for ShareETAPromptForContactStrategy,  (uint64_t)&protocol conformance descriptor for ShareETAPromptForContactStrategy);
    v35[194] = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))PromptForValueFlowAsync.init<A>(strategy:outputPublisher:))( v52,  v11 - 120,  v51,  v57);
    uint64_t v58 = lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>( &lazy protocol witness table cache variable for type PromptForValueFlowAsync<LocationSearchIntent> and conformance PromptForValueFlowAsync<A>,  &demangling cache variable for type metadata for PromptForValueFlowAsync<LocationSearchIntent>,  (uint64_t)&protocol conformance descriptor for PromptForValueFlowAsync<A>);
    swift_retain(v42);
    ((void (*)(uint64_t (*)(uint64_t), uint64_t *, uint64_t, uint64_t))static ExecuteResponse.ongoing<A>(next:childCompletion:))( partial apply for closure #5 in ShareETABaseFlow.executeState(),  v42,  v56,  v58);
    outlined consume of ShareETABaseFlow.State(*(void *)(v11 - 144), 1);
    swift_release(v52);
    swift_release(v42);
    uint64_t v59 = v35[194];
LABEL_11:
    swift_release(v59);
    goto LABEL_12;
  }

  (*(void (**)(void, uint64_t))(v34 + 160))(0LL, 2LL);
  static ExecuteResponse.ongoing(requireInput:)(0LL);
  outlined consume of ShareETABaseFlow.State(*(void *)(v11 - 144), 1);
LABEL_12:
  uint64_t v90 = v35[224];
  uint64_t v91 = v35[223];
  uint64_t v92 = v35[220];
  uint64_t v93 = v35[219];
  uint64_t v94 = v35[218];
  uint64_t v95 = v35[216];
  uint64_t v96 = v35[215];
  uint64_t v97 = v35[214];
  uint64_t v98 = v35[211];
  uint64_t v99 = v35[210];
  uint64_t v114 = v35[209];
  uint64_t v100 = v35[207];
  *(void *)(v11 - 16specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v35[208];
  *(void *)(v11 - 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v100;
  uint64_t v101 = v35[202];
  *(void *)(v11 - 144) = v35[203];
  *(void *)(v11 - 136) = v101;
  *(void *)(v11 - 128) = v35[201];
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v99);
  swift_task_dealloc(v114);
  swift_task_dealloc(*(void *)(v11 - 160));
  swift_task_dealloc(*(void *)(v11 - 152));
  swift_task_dealloc(*(void *)(v11 - 144));
  swift_task_dealloc(*(void *)(v11 - 136));
  swift_task_dealloc(*(void *)(v11 - 128));
  return ((uint64_t (*)(void))v35[1])();
}

uint64_t ShareETABaseFlow.executeState()()
{
  return swift_task_switch(ShareETABaseFlow.executeState(), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  outlined consume of ShareETABaseFlow.State(*(void *)(v0 + 1800), 0);
  uint64_t v1 = *(void *)(v0 + 1784);
  uint64_t v2 = *(void *)(v0 + 1760);
  uint64_t v3 = *(void *)(v0 + 1752);
  uint64_t v4 = *(void *)(v0 + 1744);
  uint64_t v5 = *(void *)(v0 + 1728);
  uint64_t v6 = *(void *)(v0 + 1720);
  uint64_t v7 = *(void *)(v0 + 1712);
  uint64_t v8 = *(void *)(v0 + 1688);
  unint64_t v9 = *(void *)(v0 + 1680);
  uint64_t v11 = *(void *)(v0 + 1672);
  uint64_t v12 = *(void *)(v0 + 1664);
  uint64_t v13 = *(void *)(v0 + 1656);
  uint64_t v14 = *(void *)(v0 + 1624);
  uint64_t v15 = *(void *)(v0 + 1616);
  uint64_t v16 = *(void *)(v0 + 1608);
  swift_task_dealloc(*(void *)(v0 + 1792));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1856);
  uint64_t v4 = *(void *)(*v1 + 1848);
  *(void *)(*v1 + 1864) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = ShareETABaseFlow.executeState();
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 1208));
    uint64_t v5 = ShareETABaseFlow.executeState();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void v37[5];
  uint64_t v31 = *(void *)(v0 + 1824);
  uint64_t v33 = *(void *)(v0 + 1832);
  uint64_t v29 = *(void *)(v0 + 1816);
  uint64_t v35 = *(void *)(v0 + 1800);
  uint64_t v1 = *(void *)(v0 + 1680);
  uint64_t v2 = *(void *)(v0 + 1672);
  uint64_t v3 = *(void *)(v0 + 1640);
  uint64_t v4 = *(void *)(v0 + 1632);
  uint64_t v26 = *(void *)(v0 + 1648);
  (*(void (**)(void))(v0 + 1840))();
  uint64_t v5 = *(void *)(v0 + 1112);
  uint64_t v6 = *(void *)(v0 + 1120);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 1088), v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 104))(v37, v5, v6);
  uint64_t v7 = v1;
  uint64_t v8 = v1;
  unint64_t v9 = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v7, v4);
  outlined init with copy of DeviceState(v0 + 1088, v0 + 1048);
  uint64_t v10 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v11 = (v10 + 16) & ~v10;
  uint64_t v12 = (v26 + v11 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v13 = swift_allocObject(&unk_BBBD8, v12 + 40, v10 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v13 + v11, v2, v9);
  outlined init with take of CATType((__int128 *)(v0 + 1048), v13 + v12);
  uint64_t v14 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  uint64_t v15 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v37,  &closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)partial apply,  v13);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 1088));
  *(void *)(v0 + 152specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v15;
  static ExecuteResponse.complete<A>(next:)(v0 + 1520, v14, &protocol witness table for SimpleOutputFlowAsync);
  outlined consume of ContactResolutionFlowError(v29, v31);
  swift_release(v33);
  outlined consume of ShareETABaseFlow.State(v35, 3);
  swift_release(v15);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v8, v9);
  uint64_t v16 = *(void *)(v0 + 1784);
  uint64_t v17 = *(void *)(v0 + 1760);
  uint64_t v18 = *(void *)(v0 + 1752);
  uint64_t v19 = *(void *)(v0 + 1744);
  uint64_t v20 = *(void *)(v0 + 1728);
  os_log_type_t v21 = *(void *)(v0 + 1720);
  uint64_t v22 = *(void *)(v0 + 1712);
  uint64_t v23 = *(void *)(v0 + 1688);
  uint64_t v24 = *(void *)(v0 + 1680);
  uint64_t v27 = *(void *)(v0 + 1672);
  uint64_t v28 = *(void *)(v0 + 1664);
  uint64_t v30 = *(void *)(v0 + 1656);
  uint64_t v32 = *(void *)(v0 + 1624);
  uint64_t v34 = *(void *)(v0 + 1616);
  uint64_t v36 = *(void *)(v0 + 1608);
  swift_task_dealloc(*(void *)(v0 + 1792));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1888);
  uint64_t v4 = *(void *)(*v1 + 1880);
  *(void *)(*v1 + 1896) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = ShareETABaseFlow.executeState();
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 1128));
    uint64_t v5 = ShareETABaseFlow.executeState();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void v32[5];
  uint64_t v30 = *(void *)(v0 + 1800);
  uint64_t v1 = *(void *)(v0 + 1672);
  uint64_t v2 = *(void *)(v0 + 1664);
  uint64_t v3 = *(void *)(v0 + 1640);
  uint64_t v4 = *(void *)(v0 + 1632);
  uint64_t v26 = *(void *)(v0 + 1648);
  (*(void (**)(void))(v0 + 1872))();
  uint64_t v5 = *(void *)(v0 + 752);
  uint64_t v6 = *(void *)(v0 + 760);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 728), v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 104))(v32, v5, v6);
  uint64_t v7 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v4);
  outlined init with copy of DeviceState(v0 + 728, v0 + 1328);
  uint64_t v8 = *(unsigned __int8 *)(v3 + 80);
  unint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = (v26 + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = swift_allocObject(&unk_BBB88, v10 + 40, v8 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v11 + v9, v1, v4);
  outlined init with take of CATType((__int128 *)(v0 + 1328), v11 + v10);
  uint64_t v12 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v32,  &closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)partial apply,  v11);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 728));
  *(void *)(v0 + 147__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v13;
  static ExecuteResponse.complete<A>(next:)(v0 + 1472, v12, &protocol witness table for SimpleOutputFlowAsync);
  outlined consume of ShareETABaseFlow.State(v30, 3);
  swift_release(v13);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v4);
  uint64_t v14 = *(void *)(v0 + 1784);
  uint64_t v15 = *(void *)(v0 + 1760);
  uint64_t v16 = *(void *)(v0 + 1752);
  uint64_t v17 = *(void *)(v0 + 1744);
  uint64_t v18 = *(void *)(v0 + 1728);
  uint64_t v19 = *(void *)(v0 + 1720);
  uint64_t v20 = *(void *)(v0 + 1712);
  os_log_type_t v21 = *(void *)(v0 + 1688);
  uint64_t v22 = *(void *)(v0 + 1680);
  uint64_t v24 = *(void *)(v0 + 1672);
  unsigned int v25 = *(void *)(v0 + 1664);
  uint64_t v27 = *(void *)(v0 + 1656);
  uint64_t v28 = *(void *)(v0 + 1624);
  uint64_t v29 = *(void *)(v0 + 1616);
  uint64_t v31 = *(void *)(v0 + 1608);
  swift_task_dealloc(*(void *)(v0 + 1792));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1920);
  uint64_t v4 = *(void *)(*v1 + 1912);
  *(void *)(*v1 + 1928) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = ShareETABaseFlow.executeState();
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 568));
    uint64_t v5 = ShareETABaseFlow.executeState();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void v31[5];
  uint64_t v1 = *(void *)(v0 + 1672);
  uint64_t v2 = *(void *)(v0 + 1656);
  uint64_t v27 = *(void *)(v0 + 1648);
  uint64_t v3 = *(void *)(v0 + 1640);
  uint64_t v4 = *(void *)(v0 + 1632);
  (*(void (**)(void))(v0 + 1904))();
  uint64_t v5 = *(void *)(v0 + 792);
  uint64_t v6 = *(void *)(v0 + 800);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 768), v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 104))(v31, v5, v6);
  uint64_t v7 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v4);
  outlined init with copy of DeviceState(v0 + 768, v0 + 808);
  uint64_t v8 = *(unsigned __int8 *)(v3 + 80);
  unint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = (v27 + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = swift_allocObject(&unk_BBB60, v10 + 40, v8 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v11 + v9, v1, v4);
  outlined init with take of CATType((__int128 *)(v0 + 808), v11 + v10);
  uint64_t v12 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v31,  &async function pointer to partial apply for closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:),  v11);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 768));
  *(void *)(v0 + 1544) = v13;
  static ExecuteResponse.complete<A>(next:)(v0 + 1544, v12, &protocol witness table for SimpleOutputFlowAsync);
  swift_release(v13);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v4);
  uint64_t v14 = *(void *)(v0 + 1784);
  uint64_t v15 = *(void *)(v0 + 1760);
  uint64_t v16 = *(void *)(v0 + 1752);
  uint64_t v17 = *(void *)(v0 + 1744);
  uint64_t v18 = *(void *)(v0 + 1728);
  uint64_t v19 = *(void *)(v0 + 1720);
  uint64_t v20 = *(void *)(v0 + 1712);
  os_log_type_t v21 = *(void *)(v0 + 1688);
  uint64_t v22 = *(void *)(v0 + 1680);
  uint64_t v24 = *(void *)(v0 + 1672);
  unsigned int v25 = *(void *)(v0 + 1664);
  uint64_t v26 = *(void *)(v0 + 1656);
  uint64_t v28 = *(void *)(v0 + 1624);
  uint64_t v29 = *(void *)(v0 + 1616);
  uint64_t v30 = *(void *)(v0 + 1608);
  swift_task_dealloc(*(void *)(v0 + 1792));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[40];
  uint64_t v1 = *(void *)(v0 + 1824);
  uint64_t v2 = *(void *)(v0 + 1816);
  swift_release(*(void *)(v0 + 1832));
  outlined consume of ContactResolutionFlowError(v2, v1);
  uint64_t v3 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 1208));
  uint64_t v4 = *(void *)(v0 + 1864);
  uint64_t v5 = *(void *)(v0 + 1800);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v3);
  uint64_t v6 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  uint64_t v7 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v24,  &async function pointer to closure #7 in ShareETABaseFlow.executeState(),  0LL);
  *(void *)(v0 + 1456) = v7;
  static ExecuteResponse.complete<A>(next:)(v0 + 1456, v6, &protocol witness table for SimpleOutputFlowAsync);
  swift_errorRelease(v4);
  outlined consume of ShareETABaseFlow.State(v5, 3);
  swift_release(v7);
  uint64_t v8 = *(void *)(v0 + 1784);
  unint64_t v9 = *(void *)(v0 + 1760);
  uint64_t v10 = *(void *)(v0 + 1752);
  uint64_t v11 = *(void *)(v0 + 1744);
  uint64_t v12 = *(void *)(v0 + 1728);
  uint64_t v13 = *(void *)(v0 + 1720);
  uint64_t v14 = *(void *)(v0 + 1712);
  uint64_t v15 = *(void *)(v0 + 1688);
  uint64_t v16 = *(void *)(v0 + 1680);
  uint64_t v18 = *(void *)(v0 + 1672);
  uint64_t v19 = *(void *)(v0 + 1664);
  uint64_t v20 = *(void *)(v0 + 1656);
  os_log_type_t v21 = *(void *)(v0 + 1624);
  uint64_t v22 = *(void *)(v0 + 1616);
  uint64_t v23 = *(void *)(v0 + 1608);
  swift_task_dealloc(*(void *)(v0 + 1792));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[40];
  uint64_t v1 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 1128));
  uint64_t v2 = *(void *)(v0 + 1896);
  uint64_t v3 = *(void *)(v0 + 1800);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v1);
  uint64_t v4 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t v5 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v22,  &async function pointer to closure #7 in ShareETABaseFlow.executeState(),  0LL);
  *(void *)(v0 + 1456) = v5;
  static ExecuteResponse.complete<A>(next:)(v0 + 1456, v4, &protocol witness table for SimpleOutputFlowAsync);
  swift_errorRelease(v2);
  outlined consume of ShareETABaseFlow.State(v3, 3);
  swift_release(v5);
  uint64_t v6 = *(void *)(v0 + 1784);
  uint64_t v7 = *(void *)(v0 + 1760);
  uint64_t v8 = *(void *)(v0 + 1752);
  unint64_t v9 = *(void *)(v0 + 1744);
  uint64_t v10 = *(void *)(v0 + 1728);
  uint64_t v11 = *(void *)(v0 + 1720);
  uint64_t v12 = *(void *)(v0 + 1712);
  uint64_t v13 = *(void *)(v0 + 1688);
  uint64_t v14 = *(void *)(v0 + 1680);
  uint64_t v16 = *(void *)(v0 + 1672);
  uint64_t v17 = *(void *)(v0 + 1664);
  uint64_t v18 = *(void *)(v0 + 1656);
  uint64_t v19 = *(void *)(v0 + 1624);
  uint64_t v20 = *(void *)(v0 + 1616);
  os_log_type_t v21 = *(void *)(v0 + 1608);
  swift_task_dealloc(*(void *)(v0 + 1792));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[40];
  uint64_t v1 = *(void *)(v0 + 1928);
  uint64_t v2 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 568));
  static OutputPublisherFactory.makeOutputPublisherAsync()(v2);
  uint64_t v3 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  uint64_t v4 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v21,  &async function pointer to closure #11 in ShareETABaseFlow.executeState(),  0LL);
  *(void *)(v0 + 156specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v4;
  static ExecuteResponse.complete<A>(next:)(v0 + 1560, v3, &protocol witness table for SimpleOutputFlowAsync);
  swift_errorRelease(v1);
  swift_release(v4);
  uint64_t v5 = *(void *)(v0 + 1784);
  uint64_t v6 = *(void *)(v0 + 1760);
  uint64_t v7 = *(void *)(v0 + 1752);
  uint64_t v8 = *(void *)(v0 + 1744);
  unint64_t v9 = *(void *)(v0 + 1728);
  uint64_t v10 = *(void *)(v0 + 1720);
  uint64_t v11 = *(void *)(v0 + 1712);
  uint64_t v12 = *(void *)(v0 + 1688);
  uint64_t v13 = *(void *)(v0 + 1680);
  uint64_t v15 = *(void *)(v0 + 1672);
  uint64_t v16 = *(void *)(v0 + 1664);
  uint64_t v17 = *(void *)(v0 + 1656);
  uint64_t v18 = *(void *)(v0 + 1624);
  uint64_t v19 = *(void *)(v0 + 1616);
  uint64_t v20 = *(void *)(v0 + 1608);
  swift_task_dealloc(*(void *)(v0 + 1792));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in ShareETABaseFlow.executeState()(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  unint64_t v3 = *(void *)(a1 + 8);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    uint64_t v5 = outlined copy of ContactResolutionFlowError(*(void *)a1, v3);
    os_log_type_t v6 = static os_log_type_t.error.getter(v5);
    uint64_t v7 = (os_log_s *)a2[2];
    os_log_type_t v8 = v6;
    if (os_log_type_enabled(v7, v6))
    {
      outlined copy of Result<ContactResolutionOutput, ContactResolutionFlowError>( (uint64_t)v4,  v3,  1,  (uint64_t (*)(uint64_t, void))outlined copy of ContactResolutionOutput,  (uint64_t (*)(void))outlined copy of ContactResolutionFlowError);
      outlined copy of Result<ContactResolutionOutput, ContactResolutionFlowError>( (uint64_t)v4,  v3,  1,  (uint64_t (*)(uint64_t, void))outlined copy of ContactResolutionOutput,  (uint64_t (*)(void))outlined copy of ContactResolutionFlowError);
      unint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v10 = swift_slowAlloc(32LL, -1LL);
      unint64_t v23 = v3;
      uint64_t v24 = v10;
      *(_DWORD *)unint64_t v9 = 136315138;
      uint64_t v22 = (uint64_t)v4;
      outlined copy of ContactResolutionFlowError((uint64_t)v4, v3);
      uint64_t v11 = String.init<A>(describing:)(&v22, &type metadata for ContactResolutionFlowError);
      unint64_t v13 = v12;
      uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
      swift_bridgeObjectRelease(v13);
      outlined copy of Result<ContactResolutionOutput, ContactResolutionFlowError>( (uint64_t)v4,  v3,  1,  (uint64_t (*)(uint64_t, void))outlined consume of ContactResolutionOutput,  (uint64_t (*)(void))outlined consume of ContactResolutionFlowError);
      outlined copy of Result<ContactResolutionOutput, ContactResolutionFlowError>( (uint64_t)v4,  v3,  1,  (uint64_t (*)(uint64_t, void))outlined consume of ContactResolutionOutput,  (uint64_t (*)(void))outlined consume of ContactResolutionFlowError);
      _os_log_impl(&dword_0, v7, v8, "Contact Resolution Failed: %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    unint64_t v14 = lazy protocol witness table accessor for type ContactResolutionFlowError and conformance ContactResolutionFlowError();
    uint64_t v15 = swift_allocError(&type metadata for ContactResolutionFlowError, v14, 0LL, 0LL);
    *uint64_t v16 = v4;
    v16[1] = v3;
    return (*(uint64_t (**)(uint64_t, uint64_t))(*a2 + 160LL))(v15, 3LL);
  }

  else if ((v3 & 1) != 0)
  {
    os_log_type_t v21 = *(uint64_t (**)(void *, uint64_t))(*a2 + 160LL);
    outlined copy of ContactResolutionOutput(*(void **)a1, 1);
    return v21(v4, 2LL);
  }

  else
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v19 = swift_allocObject(v18, 40LL, 7LL);
    *(_OWORD *)(v19 + 16) = xmmword_95900;
    *(void *)(v19 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v4;
    uint64_t v22 = v19;
    specialized Array._endMutation()(v19);
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(*a2 + 160LL);
    outlined copy of ContactResolutionOutput(v4, 0);
    return v20(v22, 2LL);
  }

uint64_t closure #1 in ShareETABaseFlow.executeState()(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<LocationSearchIntent>);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (uint64_t *)((char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 88))(v7, v4);
  if ((_DWORD)result == enum case for PromptResult.answered<A>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = *v7;
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*a2 + 160LL);
    uint64_t v11 = swift_retain(v9);
    v10(v11, 1LL);
    return swift_release(v9);
  }

  else if ((_DWORD)result == enum case for PromptResult.error<A>(_:))
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v13 = *v7;
    os_log_type_t v14 = static os_log_type_t.error.getter(v12);
    uint64_t v15 = (os_log_s *)a2[2];
    os_log_type_t v16 = v14;
    if (os_log_type_enabled(v15, v14))
    {
      swift_errorRetain(v13);
      swift_errorRetain(v13);
      uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v18 = swift_slowAlloc(32LL, -1LL);
      uint64_t v23 = v13;
      uint64_t v24 = v18;
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_errorRetain(v13);
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v20 = String.init<A>(describing:)(&v23, v19);
      unint64_t v22 = v21;
      uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
      swift_bridgeObjectRelease(v22);
      swift_errorRelease(v13);
      swift_errorRelease(v13);
      _os_log_impl(&dword_0, v15, v16, "PromptForValueFlow error %s", v17, 0xCu);
      swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    (*(void (**)(void, uint64_t))(*a2 + 160LL))(0LL, 4LL);
    return swift_errorRelease(v13);
  }

  else if ((_DWORD)result == enum case for PromptResult.cancelled<A>(_:))
  {
    return (*(uint64_t (**)(void, uint64_t))(*a2 + 160LL))(0LL, 4LL);
  }

  else if ((_DWORD)result != enum case for PromptResult.unanswered<A>(_:))
  {
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  }

  return result;
}

uint64_t closure #4 in ShareETABaseFlow.executeState()()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter( 0x6361746E6F436F6ELL,  0xEF646E756F467374LL);
}

uint64_t closure #6 in ShareETABaseFlow.executeState()(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_task_switch(closure #6 in ShareETABaseFlow.executeState(), 0LL, 0LL);
}

uint64_t closure #6 in ShareETABaseFlow.executeState()()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #7 in ShareETABaseFlow.executeState()(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_task_switch(closure #7 in ShareETABaseFlow.executeState(), 0LL, 0LL);
}

uint64_t closure #9 in ShareETABaseFlow.executeState()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_log_s **)(a2 + 16);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  uint64_t result = os_log_type_enabled(v2, v3);
  if ((_DWORD)result)
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v2, v3, "Completed ShareETA RCH", v5, 2u);
    return swift_slowDealloc(v5, -1LL, -1LL);
  }

  return result;
}

uint64_t ShareETABaseFlow.preChecks(intent:)(uint64_t a1, uint64_t a2)
{
  v3[67] = v2;
  v3[66] = a2;
  v3[65] = a1;
  uint64_t v4 = type metadata accessor for UnlockDevicePolicy(0LL);
  v3[68] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[69] = v5;
  v3[70] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for TemplatingResult(0LL);
  v3[71] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[72] = v7;
  uint64_t v8 = *(void *)(v7 + 64);
  v3[73] = v8;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[74] = swift_task_alloc(v9);
  v3[75] = swift_task_alloc(v9);
  v3[76] = swift_task_alloc(v9);
  return swift_task_switch(ShareETABaseFlow.preChecks(intent:), 0LL, 0LL);
}

uint64_t ShareETABaseFlow.preChecks(intent:)()
{
  if (((*(uint64_t (**)(void))(**(void **)(v0 + 536) + 328LL))() & 1) == 0)
  {
    uint64_t v12 = *(void **)(v0 + 536);
    uint64_t v62 = v12[3];
    uint64_t v60 = type metadata accessor for ShareETA(0LL);
    *(void *)(v0 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v60;
    *(void *)(v0 + 48) = &protocol witness table for ShareETA;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((void *)(v0 + 16));
    os_log_type_t v14 = *(void (**)(void))(*v12 + 176LL);
    *(void *)(v0 + 616) = v14;
    v14();
    uint64_t v15 = *(void *)(v0 + 80);
    uint64_t v16 = *(void *)(v0 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v15);
    (*(void (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
    uint64_t v17 = *(void *)(v0 + 120);
    uint64_t v18 = *(void *)(v0 + 128);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v17);
    uint64_t v19 = *(void *)(v17 - 8);
    uint64_t v20 = swift_task_alloc((*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
    *(void *)(v0 + 624) = v20;
    (*(void (**)(void))(v19 + 16))();
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 56));
    LOBYTE(v__swift_destroy_boxed_opaque_existential_0Tm(v0 + 18) = DeviceState.deviceType.getter(v17, v18);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v17);
    void *boxed_opaque_existential_0 = v18;
    uint64_t v21 = swift_storeEnumTagMultiPayload(boxed_opaque_existential_0, v60, 7LL);
    ((void (*)(uint64_t))v14)(v21);
    uint64_t v22 = *(void *)(v0 + 160);
    uint64_t v23 = *(void *)(v0 + 168);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 136), v22);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 80))(v22, v23);
    *(void *)(v0 + 63__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v24;
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 136));
    unsigned int v25 = *(int **)(*(void *)v62 + 112LL);
    unint64_t v61 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v25 + *v25);
    uint64_t v26 = (void *)swift_task_alloc(v25[1]);
    *(void *)(v0 + 64specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v26;
    *uint64_t v26 = v0;
    v26[1] = ShareETABaseFlow.preChecks(intent:);
    uint64_t v27 = *(void *)(v0 + 608);
    uint64_t v28 = v0 + 16;
    uint64_t v29 = v24;
    uint64_t v30 = v61;
    return v30(v27, v28, v29);
  }

  (*(void (**)(void))(**(void **)(v0 + 536) + 224LL))();
  if (((*(uint64_t (**)(void))(v1 + 8))() & 1) == 0)
  {
    uint64_t v31 = *(void **)(v0 + 536);
    uint64_t v32 = v31[3];
    uint64_t v33 = type metadata accessor for ShareETA(0LL);
    *(void *)(v0 + 32specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v33;
    *(void *)(v0 + 328) = &protocol witness table for ShareETA;
    uint64_t v34 = __swift_allocate_boxed_opaque_existential_0((void *)(v0 + 296));
    uint64_t v35 = swift_storeEnumTagMultiPayload(v34, v33, 15LL);
    uint64_t v36 = *(void (**)(uint64_t))(*v31 + 176LL);
    *(void *)(v0 + 656) = v36;
    v36(v35);
    uint64_t v37 = *(void *)(v0 + 360);
    uint64_t v38 = *(void *)(v0 + 368);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 336), v37);
    uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 80))(v37, v38);
    *(void *)(v0 + 664) = v39;
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 336));
    os_log_type_t v40 = *(int **)(*(void *)v32 + 112LL);
    uint64_t v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v40 + *v40);
    uint64_t v41 = (void *)swift_task_alloc(v40[1]);
    *(void *)(v0 + 67__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v41;
    *uint64_t v41 = v0;
    v41[1] = ShareETABaseFlow.preChecks(intent:);
    uint64_t v27 = *(void *)(v0 + 592);
    uint64_t v28 = v0 + 296;
    uint64_t v29 = v39;
    uint64_t v30 = v63;
    return v30(v27, v28, v29);
  }

  (*(void (**)(void))(**(void **)(v0 + 536) + 176LL))();
  uint64_t v2 = *(void *)(v0 + 480);
  uint64_t v3 = *(void *)(v0 + 488);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 456), v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 456));
  uint64_t v4 = *(void *)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 288);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 256), v4);
  if (one-time initialization token for kShareETAAuthenticationPolicy != -1) {
    swift_once( &one-time initialization token for kShareETAAuthenticationPolicy,  one-time initialization function for kShareETAAuthenticationPolicy);
  }
  uint64_t v6 = __swift_project_value_buffer(*(void *)(v0 + 544), (uint64_t)kShareETAAuthenticationPolicy);
  char v7 = dispatch thunk of DeviceState.isAuthenticated(for:)(v6, v4, v5);
  uint64_t v8 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 256));
  unint64_t v9 = *(void **)(v0 + 536);
  if ((v7 & 1) != 0)
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*v9 + 160LL);
    uint64_t v11 = swift_retain(*(void *)(v0 + 528));
    v10(v11, 1LL);
    static ExecuteResponse.ongoing(requireInput:)(0LL);
  }

  else
  {
    char v43 = (os_log_s *)v9[2];
    os_log_type_t v44 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl(&dword_0, v43, v44, "share eta requires device unlocked", v45, 2u);
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    uint64_t v46 = *(void *)(v0 + 560);
    uint64_t v47 = *(void *)(v0 + 552);
    uint64_t v48 = *(void *)(v0 + 544);
    uint64_t v49 = *(void *)(v0 + 536);
    uint64_t v50 = *(void *)(v0 + 528);
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonFlowGuard>);
    uint64_t v52 = *(void *)(type metadata accessor for CommonFlowGuard(0LL) - 8);
    uint64_t v53 = swift_allocObject( v51,  ((*(unsigned __int8 *)(v52 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))
          + *(void *)(v52 + 72),
            *(unsigned __int8 *)(v52 + 80) | 7LL);
    *(_OWORD *)(v53 + 16) = xmmword_95430;
    static UnlockDevicePolicy.requiringDeviceUnlock.getter();
    static CommonFlowGuard.ensuringDeviceIsAuthenticated(using:)(v46);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
    uint64_t v54 = static CommonGuardFlowUtils.makeGuardFlow(withGuards:)(v53);
    swift_bridgeObjectRelease(v53);
    *(void *)(v0 + 51__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v54;
    uint64_t v55 = swift_allocObject(&unk_BBD40, 32LL, 7LL);
    *(void *)(v55 + 16) = v49;
    *(void *)(v55 + 24) = v50;
    uint64_t v56 = type metadata accessor for GuardFlow(0LL);
    swift_retain(v49);
    swift_retain(v50);
    static ExecuteResponse.ongoing<A>(next:childCompletion:)( v0 + 512,  partial apply for closure #1 in ShareETABaseFlow.preChecks(intent:),  v55,  v56,  &protocol witness table for GuardFlow);
    swift_release(v54);
    swift_release(v55);
  }

  uint64_t v57 = *(void *)(v0 + 600);
  uint64_t v58 = *(void *)(v0 + 592);
  uint64_t v59 = *(void *)(v0 + 560);
  swift_task_dealloc(*(void *)(v0 + 608));
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 640LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 632LL);
  *(void *)(*(void *)v1 + 648LL) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = ShareETABaseFlow.preChecks(intent:);
  }

  else
  {
    uint64_t v6 = v2[78];
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 2);
    swift_task_dealloc(v6);
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 12);
    uint64_t v5 = ShareETABaseFlow.preChecks(intent:);
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void v19[5];
  uint64_t v1 = *(void *)(v0 + 608);
  uint64_t v2 = *(void *)(v0 + 600);
  uint64_t v18 = *(void *)(v0 + 584);
  uint64_t v3 = *(void *)(v0 + 576);
  uint64_t v4 = *(void *)(v0 + 568);
  (*(void (**)(void))(v0 + 616))();
  uint64_t v6 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 208);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), v6);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 104))(v19, v6, v5);
  char v7 = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  outlined init with copy of DeviceState(v0 + 176, v0 + 216);
  uint64_t v8 = *(unsigned __int8 *)(v3 + 80);
  unint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = (v18 + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = swift_allocObject(&unk_BBCF0, v10 + 40, v8 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v11 + v9, v2, v4);
  outlined init with take of CATType((__int128 *)(v0 + 216), v11 + v10);
  uint64_t v12 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v19,  &closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)partial apply,  v11);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 176));
  *(void *)(v0 + 504) = v13;
  static ExecuteResponse.complete<A>(next:)(v0 + 504, v12, &protocol witness table for SimpleOutputFlowAsync);
  swift_release(v13);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v4);
  os_log_type_t v14 = *(void *)(v0 + 600);
  uint64_t v15 = *(void *)(v0 + 592);
  uint64_t v16 = *(void *)(v0 + 560);
  swift_task_dealloc(*(void *)(v0 + 608));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 672);
  uint64_t v4 = *(void *)(*v1 + 664);
  *(void *)(*v1 + 68specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = ShareETABaseFlow.preChecks(intent:);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 296));
    uint64_t v5 = ShareETABaseFlow.preChecks(intent:);
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void v19[5];
  uint64_t v1 = *(void *)(v0 + 600);
  uint64_t v2 = *(void *)(v0 + 592);
  uint64_t v18 = *(void *)(v0 + 584);
  uint64_t v3 = *(void *)(v0 + 576);
  uint64_t v4 = *(void *)(v0 + 568);
  (*(void (**)(void))(v0 + 656))();
  uint64_t v6 = *(void *)(v0 + 400);
  uint64_t v5 = *(void *)(v0 + 408);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 376), v6);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 104))(v19, v6, v5);
  char v7 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v4);
  outlined init with copy of DeviceState(v0 + 376, v0 + 416);
  uint64_t v8 = *(unsigned __int8 *)(v3 + 80);
  unint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = (v18 + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = swift_allocObject(&unk_BBD18, v10 + 40, v8 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v11 + v9, v1, v4);
  outlined init with take of CATType((__int128 *)(v0 + 416), v11 + v10);
  uint64_t v12 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v19,  &closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)partial apply,  v11);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 376));
  *(void *)(v0 + 496) = v13;
  static ExecuteResponse.complete<A>(next:)(v0 + 496, v12, &protocol witness table for SimpleOutputFlowAsync);
  swift_release(v13);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v4);
  os_log_type_t v14 = *(void *)(v0 + 600);
  uint64_t v15 = *(void *)(v0 + 592);
  uint64_t v16 = *(void *)(v0 + 560);
  swift_task_dealloc(*(void *)(v0 + 608));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v1 = *(void *)(v0 + 624);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 16));
  swift_task_dealloc(v1);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 96));
  uint64_t v2 = *(void *)(v0 + 648);
  uint64_t v3 = *(void *)(v0 + 536);
  uint64_t v4 = lazy protocol witness table accessor for type Errors and conformance Errors();
  uint64_t v5 = swift_allocError(&type metadata for Errors, v4, 0LL, 0LL);
  *(void *)uint64_t v6 = 0xD000000000000013LL;
  *(void *)(v6 + 8) = 0x800000000009EF50LL;
  *(_BYTE *)(v6 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 160LL))(v5, 3LL);
  static ExecuteResponse.ongoing(requireInput:)(0LL);
  swift_errorRelease(v2);
  char v7 = *(void *)(v0 + 600);
  uint64_t v8 = *(void *)(v0 + 592);
  unint64_t v9 = *(void *)(v0 + 560);
  swift_task_dealloc(*(void *)(v0 + 608));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 296));
  uint64_t v1 = *(void *)(v0 + 680);
  uint64_t v2 = *(void *)(v0 + 536);
  uint64_t v3 = lazy protocol witness table accessor for type Errors and conformance Errors();
  uint64_t v4 = swift_allocError(&type metadata for Errors, v3, 0LL, 0LL);
  *(void *)uint64_t v5 = 0xD000000000000013LL;
  *(void *)(v5 + 8) = 0x800000000009EF50LL;
  *(_BYTE *)(v5 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 160LL))(v4, 3LL);
  static ExecuteResponse.ongoing(requireInput:)(0LL);
  swift_errorRelease(v1);
  uint64_t v6 = *(void *)(v0 + 600);
  char v7 = *(void *)(v0 + 592);
  uint64_t v8 = *(void *)(v0 + 560);
  swift_task_dealloc(*(void *)(v0 + 608));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ShareETABaseFlow.preChecks(intent:)(unsigned __int8 *a1, void *a2, uint64_t a3)
{
  int v5 = *a1;
  uint64_t v6 = (os_log_s *)a2[2];
  os_log_type_t v7 = static os_log_type_t.default.getter(a1);
  BOOL v8 = os_log_type_enabled(v6, v7);
  if (v5 == 1)
  {
    if (v8)
    {
      unint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v9 = 0;
      _os_log_impl(&dword_0, v6, v7, "unlock flow error", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    unint64_t v10 = lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v11 = swift_allocError(&type metadata for Errors, v10, 0LL, 0LL);
    *(void *)uint64_t v12 = 0xD000000000000011LL;
    *(void *)(v12 + 8) = 0x800000000009EF70LL;
    *(_BYTE *)(v12 + 16) = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(*a2 + 160LL))(v11, 3LL);
  }

  else
  {
    if (v8)
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v14 = 0;
      _os_log_impl(&dword_0, v6, v7, "successfully unlocked the device", v14, 2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(*a2 + 160LL);
    uint64_t v16 = swift_retain(a3);
    return v15(v16, 1LL);
  }

uint64_t ShareETABaseFlow.isDeviceSupported()()
{
  void (*v1)(void *__return_ptr);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void v43[3];
  uint64_t v44;
  uint64_t v45;
  void v46[3];
  uint64_t v47;
  uint64_t v48;
  void v49[3];
  uint64_t v50;
  uint64_t v51;
  void v52[3];
  uint64_t v53;
  uint64_t v54;
  uint64_t v1 = *(void (**)(void *__return_ptr))(*(void *)v0 + 176LL);
  v1(v52);
  uint64_t v2 = v53;
  uint64_t v3 = v54;
  __swift_project_boxed_opaque_existential_1(v52, v53);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 32))(v49, v2, v3);
  uint64_t v4 = v50;
  int v5 = v51;
  __swift_project_boxed_opaque_existential_1(v49, v50);
  uint64_t v6 = *(void *)(v4 - 8);
  __chkstk_darwin();
  BOOL v8 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v6 + 16))(v8);
  __swift_destroy_boxed_opaque_existential_0Tm(v52);
  LOBYTE(v5) = dispatch thunk of DeviceState.isXRDevice.getter(v4, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
  unint64_t v9 = __swift_destroy_boxed_opaque_existential_0Tm(v49);
  if ((v5 & 1) != 0)
  {
    unint64_t v10 = 0;
  }

  else
  {
    ((void (*)(void *__return_ptr, uint64_t))v1)(v52, v9);
    uint64_t v11 = v53;
    uint64_t v12 = v54;
    __swift_project_boxed_opaque_existential_1(v52, v53);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v12 + 32))(v49, v11, v12);
    uint64_t v13 = v50;
    os_log_type_t v14 = v51;
    __swift_project_boxed_opaque_existential_1(v49, v50);
    uint64_t v15 = *(void *)(v13 - 8);
    __chkstk_darwin();
    uint64_t v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v15 + 16))(v17);
    __swift_destroy_boxed_opaque_existential_0Tm(v52);
    LOBYTE(v14) = dispatch thunk of DeviceState.isPhone.getter(v13, v14);
    uint64_t v18 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v13);
    if ((v14 & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_0Tm(v49);
      unint64_t v10 = 1;
    }

    else
    {
      ((void (*)(void *__return_ptr, uint64_t))v1)(v46, v18);
      uint64_t v19 = v47;
      uint64_t v20 = v48;
      __swift_project_boxed_opaque_existential_1(v46, v47);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v20 + 32))(v43, v19, v20);
      uint64_t v21 = v44;
      uint64_t v22 = v45;
      __swift_project_boxed_opaque_existential_1(v43, v44);
      uint64_t v23 = *(void *)(v21 - 8);
      __chkstk_darwin();
      unsigned int v25 = (char *)v43 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v23 + 16))(v25);
      __swift_destroy_boxed_opaque_existential_0Tm(v46);
      LOBYTE(v2__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = dispatch thunk of DeviceState.isPad.getter(v21, v22);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v21);
      __swift_destroy_boxed_opaque_existential_0Tm(v43);
      uint64_t v26 = __swift_destroy_boxed_opaque_existential_0Tm(v49);
      if ((v22 & 1) != 0) {
        goto LABEL_7;
      }
      ((void (*)(void *__return_ptr, uint64_t))v1)(v52, v26);
      uint64_t v27 = v53;
      uint64_t v28 = v54;
      __swift_project_boxed_opaque_existential_1(v52, v53);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v28 + 32))(v49, v27, v28);
      uint64_t v29 = v50;
      uint64_t v30 = v51;
      __swift_project_boxed_opaque_existential_1(v49, v50);
      uint64_t v31 = *(void *)(v29 - 8);
      __chkstk_darwin();
      uint64_t v33 = (char *)v43 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v31 + 16))(v33);
      __swift_destroy_boxed_opaque_existential_0Tm(v52);
      LOBYTE(v3specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = dispatch thunk of DeviceState.isCarPlay.getter(v29, v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v29);
      uint64_t v34 = __swift_destroy_boxed_opaque_existential_0Tm(v49);
      if ((v30 & 1) != 0)
      {
LABEL_7:
        unint64_t v10 = 1;
      }

      else
      {
        ((void (*)(void *__return_ptr, uint64_t))v1)(v52, v34);
        uint64_t v35 = v53;
        uint64_t v36 = v54;
        __swift_project_boxed_opaque_existential_1(v52, v53);
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v36 + 32))(v49, v35, v36);
        uint64_t v38 = v50;
        uint64_t v37 = v51;
        __swift_project_boxed_opaque_existential_1(v49, v50);
        uint64_t v39 = *(void *)(v38 - 8);
        __chkstk_darwin();
        uint64_t v41 = (char *)v43 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v39 + 16))(v41);
        __swift_destroy_boxed_opaque_existential_0Tm(v52);
        unint64_t v10 = dispatch thunk of DeviceState.isPod.getter(v38, v37);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v38);
        __swift_destroy_boxed_opaque_existential_0Tm(v49);
      }
    }
  }

  return v10 & 1;
}

uint64_t MockShareETABaseFlow.deinit()
{
  swift_release(*(void *)(v0 + 24));
  outlined consume of ShareETABaseFlow.State(*(void *)(v0 + 32), *(_BYTE *)(v0 + 40));
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 48));
  return v0;
}

uint64_t MockShareETABaseFlow.__deallocating_deinit()
{
  swift_release(*(void *)(v0 + 24));
  outlined consume of ShareETABaseFlow.State(*(void *)(v0 + 32), *(_BYTE *)(v0 + 40));
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 48));
  return swift_deallocClassInstance(v0, 114LL, 7LL);
}

uint64_t protocol witness for FSMFlow.flowState.getter in conformance ShareETABaseFlow@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 152LL))();
  *(void *)a1 = result;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t protocol witness for FSMFlow.onInput(input:) in conformance ShareETABaseFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 304LL))() & 1;
}

uint64_t protocol witness for FSMFlow.executeState() in conformance ShareETABaseFlow(uint64_t a1)
{
  char v4 = *(int **)(**(void **)v1 + 312LL);
  os_log_type_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  int v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *int v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v7(a1);
}

uint64_t protocol witness for Flow.on(input:) in conformance ShareETABaseFlow(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ShareETABaseFlow, a2);
  return FSMFlow.on(input:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance ShareETABaseFlow( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ShareETABaseFlow, a3);
  return FSMFlow.execute(completion:)(a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for Flow.execute() in conformance ShareETABaseFlow(uint64_t a1, uint64_t a2)
{
  int v5 = (void *)swift_task_alloc(dword_C6814);
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ShareETABaseFlow, a2);
  *int v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return FSMFlow.execute()(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance ShareETABaseFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ShareETABaseFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ShareETABaseFlow( uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ShareETABaseFlow, a1);
  return FSMFlow.description.getter(a1, WitnessTable);
}

uint64_t MockShareETABaseFlow.__allocating_init(with:stopSharing:flowHelper:checkNavigation:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = swift_allocObject(v5, 114LL, 7LL);
  outlined init with copy of DeviceState((uint64_t)a3, (uint64_t)v13);
  ShareETABaseFlow.init(with:stopSharing:flowHelper:checkNavigation:)(a1, a2, v13, a4, a5);
  __swift_destroy_boxed_opaque_existential_0Tm(a3);
  return v11;
}

uint64_t MockShareETABaseFlow.init(with:stopSharing:flowHelper:checkNavigation:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return v5;
}

uint64_t vtable thunk for ShareETABaseFlow.isDeviceSupported() dispatching to MockShareETABaseFlow.isDeviceSupported()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352LL))();
}

uint64_t specialized ShareETAContactDisambiguationStrategy.init(isPommes:isUSO:skeletonPerson:flowHelper:catService:)( char a1, char a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v51 = &type metadata for FlowHelperImpl;
  uint64_t v52 = &protocol witness table for FlowHelperImpl;
  uint64_t v11 = (_OWORD *)swift_allocObject(&unk_BBD68, 192LL, 7LL);
  *(void *)&__int128 v50 = v11;
  __int128 v12 = a4[9];
  void v11[9] = a4[8];
  v11[10] = v12;
  void v11[11] = a4[10];
  __int128 v13 = a4[5];
  void v11[5] = a4[4];
  v11[6] = v13;
  __int128 v14 = a4[7];
  v11[7] = a4[6];
  v11[8] = v14;
  __int128 v15 = a4[1];
  v11[1] = *a4;
  _OWORD v11[2] = v15;
  __int128 v16 = a4[3];
  v11[3] = a4[2];
  v11[4] = v16;
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v17 = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000025LL,  0x800000000009B980LL);
  *(_BYTE *)(a6 + 81) = 0;
  *(void *)(a6 + 16) = v17;
  *(void *)(a6 + 88) = _swiftEmptyArrayStorage;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v19 = swift_allocObject(v18, 128LL, 7LL);
  *(_OWORD *)(v19 + 16) = xmmword_949C0;
  if (one-time initialization token for referenceNode != -1) {
    swift_once(&one-time initialization token for referenceNode, one-time initialization function for referenceNode);
  }
  uint64_t v20 = static LocationSearchIntent.referenceNode;
  swift_retain(static LocationSearchIntent.referenceNode);
  unint64_t v21 = specialized OntologyNode.javaClassName.getter();
  uint64_t v23 = v22;
  swift_release(v20);
  *(void *)(v19 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v21;
  *(void *)(v19 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v23;
  if (one-time initialization token for confirmationNode != -1) {
    swift_once( &one-time initialization token for confirmationNode,  one-time initialization function for confirmationNode);
  }
  uint64_t v24 = static LocationSearchIntent.confirmationNode;
  swift_retain(static LocationSearchIntent.confirmationNode);
  unint64_t v25 = specialized OntologyNode.javaClassName.getter();
  uint64_t v27 = v26;
  swift_release(v24);
  *(void *)(v19 + 48) = v25;
  *(void *)(v19 + 56) = v27;
  uint64_t v28 = type metadata accessor for AddressOntologyNode.PersonPlaceNode(0LL);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  uint64_t v29 = AddressOntologyNode.PersonPlaceNode.init(name:multicardinal:)(0x6C506E6F73726570LL, 0xEB00000000656361LL, 0LL);
  unint64_t v30 = specialized OntologyNode.javaClassName.getter();
  uint64_t v32 = v31;
  swift_release(v29);
  *(void *)(v19 + 64) = v30;
  *(void *)(v19 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v32;
  uint64_t v33 = type metadata accessor for AddressOntologyNode.OccupantNode(0LL);
  swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
  uint64_t v34 = AddressOntologyNode.OccupantNode.init(name:multicardinal:)(0x746E61707563636FLL, 0xE800000000000000LL, 0LL);
  unint64_t v35 = specialized OntologyNode.javaClassName.getter();
  uint64_t v37 = v36;
  uint64_t v38 = swift_release(v34);
  *(void *)(v19 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v35;
  *(void *)(v19 + 88) = v37;
  uint64_t v39 = static AddressOntologyNode.OccupantNode.occupantFullNameNode.getter(v38);
  unint64_t v40 = specialized OntologyNode.javaClassName.getter();
  uint64_t v42 = v41;
  swift_release(v39);
  *(void *)(v19 + 96) = v40;
  *(void *)(v19 + 104) = v42;
  type metadata accessor for PersonOntologyNode(0LL);
  uint64_t v43 = static PersonOntologyNode.personFullNameNode.getter();
  unint64_t v44 = specialized OntologyNode.javaClassName.getter();
  uint64_t v46 = v45;
  swift_release(v43);
  *(void *)(v19 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v44;
  *(void *)(v19 + 12specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v46;
  *(void *)(a6 + 96) = v19;
  *(_BYTE *)(a6 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = a1 & 1;
  swift_beginAccess(a6 + 81, v49, 1LL, 0LL);
  *(_BYTE *)(a6 + 81) = a2 & 1;
  *(void *)(a6 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a3;
  outlined init with take of CATType(&v50, a6 + 32);
  *(void *)(a6 + 24) = a5;
  return a6;
}

uint64_t specialized ShareETABaseFlow.makeSkeletonINPerson(inpersons:)(uint64_t a1)
{
  if (!a1) {
    return a1;
  }
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain(a1);
    if (!v2) {
      return a1;
    }
    goto LABEL_4;
  }

  if (a1 >= 0) {
    uint64_t v9 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    uint64_t v9 = a1;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v9);
  if (v10 < 0) {
    __break(1u);
  }
  uint64_t v2 = v10;
  if (v10)
  {
LABEL_4:
    uint64_t v3 = 0LL;
    unint64_t v4 = a1 & 0xC000000000000001LL;
    do
    {
      if (v4) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1);
      }
      else {
        id v7 = *(id *)(a1 + 8 * v3 + 32);
      }
      BOOL v8 = v7;
      [v7 setIsMe:0];

      if (v4) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1);
      }
      else {
        id v5 = *(id *)(a1 + 8 * v3 + 32);
      }
      uint64_t v6 = v5;
      ++v3;
      [v5 setSourceAppBundleIdentifier:0];
    }

    while (v2 != v3);
  }

  return a1;
}

uint64_t partial apply for closure #12 in ShareETABaseFlow.executeState()(uint64_t a1)
{
  return closure #9 in ShareETABaseFlow.executeState()(a1, v1);
}

void specialized ShareETABaseFlow.missingContactInformation(persons:)(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
LABEL_39:
    if (a1 < 0) {
      uint64_t v25 = a1;
    }
    else {
      uint64_t v25 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v25);
    if (v2) {
      goto LABEL_3;
    }
LABEL_43:
    swift_bridgeObjectRelease(a1);
    return;
  }

  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  if (!v2) {
    goto LABEL_43;
  }
LABEL_3:
  unint64_t v3 = 0LL;
  unint64_t v4 = a1 & 0xC000000000000001LL;
  id v5 = &off_C4000;
  uint64_t v26 = v2;
  while (1)
  {
    if (v4)
    {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1);
      goto LABEL_8;
    }

    id v6 = *(id *)(a1 + 32 + 8 * v3);
LABEL_8:
    id v7 = v6;
    if (__OFADD__(v3++, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    id v9 = [v6 v5[84]];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INPerson,  &OBJC_CLASS___INPerson_ptr);
      uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

      if ((unint64_t)v12 >> 62)
      {
        if (v12 < 0) {
          uint64_t v23 = v12;
        }
        else {
          uint64_t v23 = v12 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v12);
        uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v23);
        swift_bridgeObjectRelease(v12);
        if (v13)
        {
LABEL_12:
          if ((v12 & 0xC000000000000001LL) != 0)
          {
            id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v12);
          }

          else
          {
            id v14 = *(id *)(v12 + 32);
          }

          __int128 v15 = v14;
          char v16 = INPerson.hasUsefulHandleValue.getter();

          if ((v16 & 1) != 0)
          {
LABEL_34:
            swift_bridgeObjectRelease(v12);

            goto LABEL_43;
          }

          uint64_t v17 = 0LL;
          uint64_t v18 = v13 - 1;
          while (v18 != v17)
          {
            unint64_t v19 = v17 + 1;
            if ((v12 & 0xC000000000000001LL) != 0)
            {
              id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 + 1, v12);
            }

            else
            {
              id v20 = *(id *)(v12 + 8 * v17 + 40);
            }

            unint64_t v21 = v20;
            if (__OFADD__(v19, 1LL))
            {
              __break(1u);
LABEL_37:
              __break(1u);
              goto LABEL_38;
            }

            char v22 = INPerson.hasUsefulHandleValue.getter();

            ++v17;
            if ((v22 & 1) != 0) {
              goto LABEL_34;
            }
          }
        }
      }

      else
      {
        uint64_t v13 = *(void *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFF8LL));
        if (v13) {
          goto LABEL_12;
        }
      }

      swift_bridgeObjectRelease(v12);
      unint64_t v4 = a1 & 0xC000000000000001LL;
      uint64_t v2 = v26;
      id v5 = &off_C4000;
    }

    char v24 = INPerson.hasUsefulHandleValue.getter();

    if ((v24 & 1) != 0 || v3 == v2) {
      goto LABEL_43;
    }
  }

  __break(1u);
LABEL_45:
  __break(1u);
}

uint64_t partial apply for closure #5 in ShareETABaseFlow.executeState()(uint64_t a1)
{
  return closure #1 in ShareETABaseFlow.executeState()(a1, v1);
}

uint64_t sub_7F6BC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t outlined init with copy of HandleFilterProtocolAsync?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandleFilterProtocolAsync?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #2 in ShareETABaseFlow.executeState()(uint64_t a1)
{
  return closure #2 in ShareETABaseFlow.executeState()(a1, v1);
}

uint64_t instantiation function for generic protocol witness table for ShareETABaseFlow( uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type ShareETABaseFlow and conformance ShareETABaseFlow,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for ShareETABaseFlow,  (uint64_t)&protocol conformance descriptor for ShareETABaseFlow);
  uint64_t result = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type ShareETABaseFlow and conformance ShareETABaseFlow,  v3,  (uint64_t (*)(uint64_t))type metadata accessor for ShareETABaseFlow,  (uint64_t)&protocol conformance descriptor for ShareETABaseFlow);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for ShareETABaseFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin16ShareETABaseFlow);
}

uint64_t sub_7F7B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152LL))();
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_7F7E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 160LL);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 8);
  outlined copy of ShareETABaseFlow.State(*(void *)a1, v4);
  return v3(v2, v4);
}

uint64_t sub_7F830(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 176LL))();
}

uint64_t sub_7F858(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_BYTE *))(**(void **)a2 + 184LL))(v4);
}

uint64_t sub_7F898@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200LL))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_7F8CC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 208LL))(*a1);
}

uint64_t sub_7F8F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 224LL))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_7F928(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)a2 + 232LL))(*a1, a1[1]);
}

uint64_t sub_7F95C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 248LL))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_7F990(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 256LL))(*a1);
}

uint64_t sub_7F9BC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 272LL))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_7F9F0(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 280LL))(*a1);
}

uint64_t initializeBufferWithCopyOfBuffer for ShareETABaseFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  outlined copy of ShareETABaseFlow.State(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for ShareETABaseFlow.State(uint64_t a1)
{
  return outlined consume of ShareETABaseFlow.State(*(void *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for ShareETABaseFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  outlined copy of ShareETABaseFlow.State(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  char v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of ShareETABaseFlow.State(v5, v6);
  return a1;
}

uint64_t assignWithTake for ShareETABaseFlow.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  outlined consume of ShareETABaseFlow.State(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareETABaseFlow.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ShareETABaseFlow.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for ShareETABaseFlow.State(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t destructiveInjectEnumTag for ShareETABaseFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)uint64_t result = a2 - 4;
    LOBYTE(a__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 4;
  }

  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ShareETABaseFlow.State()
{
  return &type metadata for ShareETABaseFlow.State;
}

uint64_t type metadata accessor for MockShareETABaseFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin20MockShareETABaseFlow);
}

uint64_t sub_7FBF0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t partial apply for closure #1 in ShareETABaseFlow.preChecks(intent:)(unsigned __int8 *a1)
{
  return closure #1 in ShareETABaseFlow.preChecks(intent:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type ContactResolutionFlowError and conformance ContactResolutionFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactResolutionFlowError and conformance ContactResolutionFlowError;
  if (!lazy protocol witness table cache variable for type ContactResolutionFlowError and conformance ContactResolutionFlowError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ContactResolutionFlowError,  &type metadata for ContactResolutionFlowError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ContactResolutionFlowError and conformance ContactResolutionFlowError);
  }

  return result;
}

uint64_t outlined init with take of HandleFilterProtocolAsync?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandleFilterProtocolAsync?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_7FCB0()
{
  return swift_deallocObject(v0, 192LL, 7LL);
}

uint64_t LocalSearchIntent.LocalSearchCategory.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x797265636F7267LL;
  }
  else {
    return 0xD000000000000011LL;
  }
}

uint64_t *LocalSearchIntent.domainNode.unsafeMutableAddressor()
{
  if (one-time initialization token for domainNode != -1) {
    swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
  }
  return &static LocalSearchIntent.domainNode;
}

uint64_t *LocalSearchIntent.categoryNode.unsafeMutableAddressor()
{
  if (one-time initialization token for categoryNode != -1) {
    swift_once(&one-time initialization token for categoryNode, one-time initialization function for categoryNode);
  }
  return &static LocalSearchIntent.categoryNode;
}

GeoFlowDelegatePlugin::LocalSearchIntent::LocalSearchCategory_optional __swiftcall LocalSearchIntent.LocalSearchCategory.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of LocalSearchIntent.LocalSearchCategory.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    v4.value = GeoFlowDelegatePlugin_LocalSearchIntent_LocalSearchCategory_grocery;
  }
  else {
    v4.value = GeoFlowDelegatePlugin_LocalSearchIntent_LocalSearchCategory_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

_UNKNOWN **static LocalSearchIntent.LocalSearchCategory.allCases.getter()
{
  return &outlined read-only object #0 of static LocalSearchIntent.LocalSearchCategory.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LocalSearchIntent.LocalSearchCategory( char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = LocalSearchIntent.LocalSearchCategory.rawValue.getter(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = LocalSearchIntent.LocalSearchCategory.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocalSearchIntent.LocalSearchCategory()
{
  char v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = LocalSearchIntent.LocalSearchCategory.rawValue.getter(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LocalSearchIntent.LocalSearchCategory( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocalSearchIntent.LocalSearchCategory( uint64_t a1)
{
  char v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = LocalSearchIntent.LocalSearchCategory.rawValue.getter(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LocalSearchIntent.LocalSearchCategory@<X0>( uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._uint64_t countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of LocalSearchIntent.LocalSearchCategory.init(rawValue:),  v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LocalSearchIntent.LocalSearchCategory@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = LocalSearchIntent.LocalSearchCategory.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance LocalSearchIntent.LocalSearchCategory( void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance LocalSearchIntent.LocalSearchCategory;
}

uint64_t LocalSearchIntent.intent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_intent;
  uint64_t v4 = type metadata accessor for NLIntent(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t one-time initialization function for categoryNode()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<String>);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t result = TerminalOntologyNode.init(name:multicardinal:)(0xD000000000000013LL, 0x800000000009EFC0LL, 0LL);
  static LocalSearchIntent.categoryNode = result;
  return result;
}

uint64_t static LocalSearchIntent.categoryNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode( &one-time initialization token for categoryNode,  &static LocalSearchIntent.categoryNode);
}

uint64_t static LocalSearchIntent.domainNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode( &one-time initialization token for domainNode,  &static LocalSearchIntent.domainNode);
}

uint64_t LocalSearchIntent.domainOntologyNode.getter()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_domainOntologyNode);
  swift_beginAccess(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_domainOntologyNode, v3, 0LL, 0LL);
  return swift_retain(*v1);
}

uint64_t LocalSearchIntent.domainOntologyNode.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_domainOntologyNode);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  return swift_release(v4);
}

uint64_t (*LocalSearchIntent.domainOntologyNode.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t LocalSearchIntent.__allocating_init(from:)(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  uint64_t v4 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_domainOntologyNode;
  if (one-time initialization token for domainNode != -1) {
    swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
  }
  uint64_t v5 = static LocalSearchIntent.domainNode;
  *(void *)(v3 + v4) = static LocalSearchIntent.domainNode;
  uint64_t v6 = v3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_intent;
  uint64_t v7 = type metadata accessor for NLIntent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v6, a1, v7);
  swift_retain(v5);
  return v3;
}

uint64_t LocalSearchIntent.init(from:)(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_domainOntologyNode;
  if (one-time initialization token for domainNode != -1) {
    swift_once(&one-time initialization token for domainNode, one-time initialization function for domainNode);
  }
  uint64_t v4 = static LocalSearchIntent.domainNode;
  *(void *)(v1 + v3) = static LocalSearchIntent.domainNode;
  uint64_t v5 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_intent;
  uint64_t v6 = type metadata accessor for NLIntent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(v5, a1, v6);
  swift_retain(v4);
  return v1;
}

uint64_t LocalSearchIntent.category.getter()
{
  if (one-time initialization token for categoryNode != -1) {
    swift_once(&one-time initialization token for categoryNode, one-time initialization function for categoryNode);
  }
  uint64_t v0 = static LocalSearchIntent.categoryNode;
  uint64_t v1 = type metadata accessor for LocalSearchIntent(0LL);
  uint64_t v2 = lazy protocol witness table accessor for type LocalSearchIntent and conformance LocalSearchIntent( &lazy protocol witness table cache variable for type LocalSearchIntent and conformance LocalSearchIntent,  (uint64_t)&protocol conformance descriptor for LocalSearchIntent);
  IntentNodeTraversable.value<A>(forNode:)(&v4, v0, v1, v2);
  return v4;
}

uint64_t type metadata accessor for LocalSearchIntent(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for LocalSearchIntent;
  if (!type metadata singleton initialization cache for LocalSearchIntent) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocalSearchIntent);
  }
  return result;
}

uint64_t LocalSearchIntent.occupant.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NonTerminalIntentNode(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  BOOL v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  char v10 = (char *)&v19 - v9;
  uint64_t v20 = v1;
  uint64_t v11 = type metadata accessor for AddressOntologyNode.OccupantNode(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  uint64_t v12 = AddressOntologyNode.OccupantNode.init(name:multicardinal:)(0x746E61707563636FLL, 0xE800000000000000LL, 0LL);
  uint64_t v13 = type metadata accessor for LocalSearchIntent(0LL);
  uint64_t v14 = lazy protocol witness table accessor for type LocalSearchIntent and conformance LocalSearchIntent( &lazy protocol witness table cache variable for type LocalSearchIntent and conformance LocalSearchIntent,  (uint64_t)&protocol conformance descriptor for LocalSearchIntent);
  IntentNodeTraversable.intentNode(forOntologyNode:)(v12, v13, v14);
  swift_release(v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    outlined destroy of NonTerminalIntentNode?((uint64_t)v4);
    uint64_t v15 = type metadata accessor for OccupantIntentNode(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))( a1,  1LL,  1LL,  v15);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v4, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v10, v5);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v17 = AddressOntologyNode.OccupantNode.init(name:multicardinal:)(0x746E61707563636FLL, 0xE800000000000000LL, 0LL);
    OccupantIntentNode.init(intentNode:ontologyNode:)(v8, v17);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    uint64_t v18 = type metadata accessor for OccupantIntentNode(0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))( a1,  0LL,  1LL,  v18);
  }

uint64_t LocalSearchIntent.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_intent;
  uint64_t v2 = type metadata accessor for NLIntent(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_domainOntologyNode));
  return v0;
}

uint64_t LocalSearchIntent.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_intent;
  uint64_t v2 = type metadata accessor for NLIntent(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_domainOntologyNode));
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

unint64_t lazy protocol witness table accessor for type LocalSearchIntent.LocalSearchCategory and conformance LocalSearchIntent.LocalSearchCategory()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalSearchIntent.LocalSearchCategory and conformance LocalSearchIntent.LocalSearchCategory;
  if (!lazy protocol witness table cache variable for type LocalSearchIntent.LocalSearchCategory and conformance LocalSearchIntent.LocalSearchCategory)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocalSearchIntent.LocalSearchCategory,  &type metadata for LocalSearchIntent.LocalSearchCategory);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocalSearchIntent.LocalSearchCategory and conformance LocalSearchIntent.LocalSearchCategory);
  }

  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in LocalSearchIntent.LocalSearchCategory()
{
  return lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>( &lazy protocol witness table cache variable for type [LocalSearchIntent.LocalSearchCategory] and conformance [A],  &demangling cache variable for type metadata for [LocalSearchIntent.LocalSearchCategory],  (uint64_t)&protocol conformance descriptor for [A]);
}

uint64_t base witness table accessor for IntentNodeTraversable in LocalSearchIntent()
{
  return lazy protocol witness table accessor for type LocalSearchIntent and conformance LocalSearchIntent( &lazy protocol witness table cache variable for type LocalSearchIntent and conformance LocalSearchIntent,  (uint64_t)&protocol conformance descriptor for LocalSearchIntent);
}

uint64_t base witness table accessor for CustomStringConvertible in LocalSearchIntent()
{
  return lazy protocol witness table accessor for type LocalSearchIntent and conformance LocalSearchIntent( &lazy protocol witness table cache variable for type LocalSearchIntent and conformance LocalSearchIntent,  (uint64_t)&protocol conformance descriptor for LocalSearchIntent);
}

uint64_t lazy protocol witness table accessor for type LocalSearchIntent and conformance LocalSearchIntent( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for LocalSearchIntent(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t protocol witness for NLIntentWrapper.intent.getter in conformance LocalSearchIntent@<X0>( uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_intent;
  uint64_t v4 = type metadata accessor for NLIntent(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t protocol witness for GeoIntent.getIntentType() in conformance LocalSearchIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128LL))() & 1;
}

uint64_t protocol witness for GeoIntent.occupant.getter in conformance LocalSearchIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144LL))();
}

uint64_t protocol witness for IntentNodeTraversable.traversableIntentNode.getter in conformance LocalSearchIntent( uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for LocalSearchIntent, a1);
  return NLIntentWrapper.traversableIntentNode.getter(a1, WitnessTable);
}

uint64_t protocol witness for IntentNodeTraversable.traversableOntologyNode.getter in conformance LocalSearchIntent( uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for LocalSearchIntent, a1);
  return NLIntentWrapper.traversableOntologyNode.getter(a1, WitnessTable);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LocalSearchIntent( uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for LocalSearchIntent, a1);
  return NLIntentWrapper.description.getter(a1, WitnessTable);
}

uint64_t sub_809F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96LL))();
  *a2 = result;
  return result;
}

uint64_t sub_80A24(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 104LL);
  uint64_t v3 = swift_retain(*a1);
  return v2(v3);
}

uint64_t ObjC metadata update function for LocalSearchIntent()
{
  return type metadata accessor for LocalSearchIntent(0LL);
}

uint64_t storeEnumTagSinglePayload for LocalSearchIntent.LocalSearchCategory( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_80AA8 + 4 * byte_9A4A5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_80ADC + 4 * asc_9A4A0[v4]))();
}

uint64_t sub_80ADC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_80AE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x80AECLL);
  }
  return result;
}

uint64_t sub_80AF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x80B00LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_80B04(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_80B0C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocalSearchIntent.LocalSearchCategory()
{
  return &type metadata for LocalSearchIntent.LocalSearchCategory;
}

uint64_t DeleteParkingBaseRCHStrategy.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  type metadata accessor for OS_os_log();
  *(void *)(v1 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001CLL,  0x800000000009A670LL);
  return v1;
}

uint64_t DeleteParkingBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for Parse(0LL);
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(DeleteParkingBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:), 0LL, 0LL);
}

uint64_t DeleteParkingBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:)()
{
  uint64_t v1 = *(void **)(v0 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 40);
    id v3 = v1;
    os_log_type_t v11 = static os_log_type_t.info.getter(v3, v4, v5, v6, v7, v8, v9, v10);
    uint64_t v12 = *(os_log_s **)(v2 + 16);
    os_log_type_t v13 = v11;
    if (os_log_type_enabled(v12, v11))
    {
      id v14 = v3;
      uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      uint64_t v63 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      id v3 = v14;
      id v17 = [v3 description];
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      unint64_t v20 = v19;

      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
      swift_bridgeObjectRelease(v20);

      _os_log_impl(&dword_0, v12, v13, "makeIntentFromParse with current intent: %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    goto LABEL_10;
  }

  uint64_t v22 = *(void *)(v0 + 56);
  uint64_t v21 = *(void *)(v0 + 64);
  uint64_t v23 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t, void, uint64_t))(v22 + 16))(v21, *(void *)(v0 + 24), v23);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 88))(v21, v23);
  if ((_DWORD)v24 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    uint64_t v25 = *(void *)(v0 + 64);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 56) + 96LL))(v25, *(void *)(v0 + 48));
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    uint64_t v27 = *(void *)(v25 + *(int *)(v26 + 48));
    uint64_t v28 = (void *)Parse.ServerConversion.siriKitIntent.getter(v26);
    uint64_t v29 = objc_opt_self(&OBJC_CLASS___INDeleteParkingLocationIntent);
    uint64_t v30 = swift_dynamicCastObjCClass(v28, v29);

    uint64_t v32 = *(void *)(v0 + 64);
    if (v30)
    {
      uint64_t v33 = Parse.ServerConversion.siriKitIntent.getter(v31);
      swift_release(v27);
      uint64_t v34 = objc_opt_self(&OBJC_CLASS___INDeleteParkingLocationIntent);
      id v3 = (id)swift_dynamicCastObjCClassUnconditional(v33, v34, 0LL, 0LL, 0LL);
      uint64_t v35 = type metadata accessor for NLIntent(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8LL))(v32, v35);
LABEL_10:
      swift_task_dealloc(*(void *)(v0 + 64));
      return (*(uint64_t (**)(id))(v0 + 8))(v3);
    }

    uint64_t v50 = type metadata accessor for RuntimeError();
    uint64_t v51 = swift_allocObject(v50, 32LL, 7LL);
    *(void *)(v51 + 16) = 0xD000000000000039LL;
    *(void *)(v51 + 24) = 0x800000000009E0B0LL;
    uint64_t v52 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RuntimeError,  (uint64_t)&protocol conformance descriptor for RuntimeError);
    uint64_t v53 = swift_allocError(v50, v52, 0LL, 0LL);
    *uint64_t v54 = v51;
    swift_willThrow(v53);
    swift_release(v27);
    uint64_t v55 = type metadata accessor for NLIntent(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8LL))(v32, v55);
  }

  else
  {
    uint64_t v37 = *(void *)(v0 + 56);
    uint64_t v36 = *(void ***)(v0 + 64);
    uint64_t v38 = *(void *)(v0 + 48);
    if ((_DWORD)v24 == enum case for Parse.pommesResponse(_:))
    {
      (*(void (**)(void, void))(v37 + 96))(*(void *)(v0 + 64), *(void *)(v0 + 48));
      uint64_t v39 = *v36;
      uint64_t v40 = PommesResponse.firstGeoExperience.getter();
      if (v40)
      {
        uint64_t v41 = (void *)v40;
        id v3 = [objc_allocWithZone(INDeleteParkingLocationIntent) init];

        goto LABEL_10;
      }

      uint64_t v56 = *(void *)(v0 + 40);
      uint64_t v57 = static os_log_type_t.error.getter(0LL);
      os_log(_:dso:log:_:_:)( v57,  &dword_0,  *(void *)(v56 + 16),  "Received pommes response but no geo experience is present",  57LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v58 = type metadata accessor for RuntimeError();
      uint64_t v59 = swift_allocObject(v58, 32LL, 7LL);
      *(void *)(v59 + 16) = 0xD00000000000002BLL;
      *(void *)(v59 + 24) = 0x800000000009E130LL;
      uint64_t v60 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RuntimeError,  (uint64_t)&protocol conformance descriptor for RuntimeError);
      uint64_t v61 = swift_allocError(v58, v60, 0LL, 0LL);
      uint64_t *v62 = v59;
      swift_willThrow(v61);
    }

    else
    {
      uint64_t v43 = *(void *)(v0 + 40);
      uint64_t v44 = static os_log_type_t.error.getter(v24);
      os_log(_:dso:log:_:_:)( v44,  &dword_0,  *(void *)(v43 + 16),  "makeIntentFromParse should have INDeleteParkingLocationIntent passed in",  71LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v45 = type metadata accessor for RuntimeError();
      uint64_t v46 = swift_allocObject(v45, 32LL, 7LL);
      *(void *)(v46 + 16) = 0xD000000000000047LL;
      *(void *)(v46 + 24) = 0x800000000009EFE0LL;
      uint64_t v47 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RuntimeError,  (uint64_t)&protocol conformance descriptor for RuntimeError);
      uint64_t v48 = swift_allocError(v45, v47, 0LL, 0LL);
      *uint64_t v49 = v46;
      swift_willThrow(v48);
      (*(void (**)(void **, uint64_t))(v37 + 8))(v36, v38);
    }
  }

  swift_task_dealloc(*(void *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DeleteParkingBaseRCHStrategy.init()()
{
  *(void *)(v0 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001CLL,  0x800000000009A670LL);
  return v0;
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeParameterMetadata(intent:) in conformance DeleteParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DeleteParkingBaseRCHStrategy();
  return RCHFlowStrategyAsync.makeParameterMetadata(intent:)(a1, v5, a3);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance DeleteParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for DeleteParkingBaseRCHStrategy();
  void *v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:) in conformance DeleteParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for DeleteParkingBaseRCHStrategy();
  void *v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:) in conformance DeleteParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for DeleteParkingBaseRCHStrategy();
  void *v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance DeleteParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:)[1]);
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for DeleteParkingBaseRCHStrategy();
  *uint64_t v12 = v6;
  v12[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:)(a1, a2, a3, a4, v13, a6);
}

uint64_t protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance DeleteParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)[1]);
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for DeleteParkingBaseRCHStrategy();
  *uint64_t v12 = v6;
  v12[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)( a1,  a2,  a3,  a4,  v13,  a6);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance DeleteParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for DeleteParkingBaseRCHStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentHandleIntentStrategy;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)(a1, a2, v9, a4);
}

uint64_t base witness table accessor for ResolveConfirmFlowStrategyAsync in DeleteParkingBaseRCHStrategy( uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type DeleteParkingBaseRCHStrategy and conformance DeleteParkingBaseRCHStrategy,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for DeleteParkingBaseRCHStrategy,  (uint64_t)&protocol conformance descriptor for DeleteParkingBaseRCHStrategy);
}

uint64_t type metadata accessor for DeleteParkingBaseRCHStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin28DeleteParkingBaseRCHStrategy);
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in DeleteParkingBaseRCHStrategy( uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type DeleteParkingBaseRCHStrategy and conformance DeleteParkingBaseRCHStrategy,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for DeleteParkingBaseRCHStrategy,  (uint64_t)&protocol conformance descriptor for DeleteParkingBaseRCHStrategy);
}

uint64_t base witness table accessor for RouteConfirmIntentResponseFlowStrategyAsync in DeleteParkingBaseRCHStrategy( uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type DeleteParkingBaseRCHStrategy and conformance DeleteParkingBaseRCHStrategy,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for DeleteParkingBaseRCHStrategy,  (uint64_t)&protocol conformance descriptor for DeleteParkingBaseRCHStrategy);
}

uint64_t SaveParkingBaseRCHStrategy.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  type metadata accessor for OS_os_log();
  *(void *)(v1 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001ALL,  0x800000000009A7C0LL);
  return v1;
}

uint64_t SaveParkingBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ParkingLocationAction(0LL);
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent(0LL);
  void v3[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[10] = v7;
  v3[11] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Parse(0LL);
  v3[12] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[13] = v9;
  v3[14] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(SaveParkingBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:), 0LL, 0LL);
}

uint64_t SaveParkingBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:)()
{
  uint64_t v1 = *(void **)(v0 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 40);
    id v3 = v1;
    os_log_type_t v11 = static os_log_type_t.info.getter(v3, v4, v5, v6, v7, v8, v9, v10);
    uint64_t v12 = *(os_log_s **)(v2 + 16);
    os_log_type_t v13 = v11;
    if (os_log_type_enabled(v12, v11))
    {
      id v14 = v3;
      uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      uint64_t v79 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      id v3 = v14;
      id v17 = [v3 description];
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      unint64_t v20 = v19;

      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
      swift_bridgeObjectRelease(v20);

      _os_log_impl(&dword_0, v12, v13, "makeIntentFromParse with current intent: %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    goto LABEL_10;
  }

  uint64_t v22 = *(void *)(v0 + 104);
  uint64_t v21 = *(void *)(v0 + 112);
  uint64_t v23 = *(void *)(v0 + 96);
  (*(void (**)(uint64_t, void, uint64_t))(v22 + 16))(v21, *(void *)(v0 + 24), v23);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 88))(v21, v23);
  if ((_DWORD)v24 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    uint64_t v25 = *(void *)(v0 + 112);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 104) + 96LL))(v25, *(void *)(v0 + 96));
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    uint64_t v27 = *(void *)(v25 + *(int *)(v26 + 48));
    uint64_t v28 = (void *)Parse.ServerConversion.siriKitIntent.getter(v26);
    uint64_t v29 = objc_opt_self(&OBJC_CLASS___INSaveParkingLocationIntent);
    uint64_t v30 = swift_dynamicCastObjCClass(v28, v29);

    uint64_t v32 = *(void *)(v0 + 112);
    if (v30)
    {
      uint64_t v33 = Parse.ServerConversion.siriKitIntent.getter(v31);
      swift_release(v27);
      uint64_t v34 = objc_opt_self(&OBJC_CLASS___INSaveParkingLocationIntent);
      id v3 = (id)swift_dynamicCastObjCClassUnconditional(v33, v34, 0LL, 0LL, 0LL);
      uint64_t v35 = type metadata accessor for NLIntent(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8LL))(v32, v35);
LABEL_10:
      uint64_t v53 = *(void *)(v0 + 88);
      uint64_t v54 = *(void *)(v0 + 64);
      swift_task_dealloc(*(void *)(v0 + 112));
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
      return (*(uint64_t (**)(id))(v0 + 8))(v3);
    }

    uint64_t v63 = type metadata accessor for RuntimeError();
    uint64_t v64 = swift_allocObject(v63, 32LL, 7LL);
    *(void *)(v64 + 16) = 0xD000000000000039LL;
    *(void *)(v64 + 24) = 0x800000000009E0B0LL;
    uint64_t v65 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RuntimeError,  (uint64_t)&protocol conformance descriptor for RuntimeError);
    uint64_t v66 = swift_allocError(v63, v65, 0LL, 0LL);
    *uint64_t v67 = v64;
    swift_willThrow(v66);
    swift_release(v27);
    uint64_t v68 = type metadata accessor for NLIntent(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v68 - 8) + 8LL))(v32, v68);
  }

  else
  {
    uint64_t v37 = *(void *)(v0 + 104);
    uint64_t v36 = *(void ***)(v0 + 112);
    uint64_t v38 = *(void *)(v0 + 96);
    if ((_DWORD)v24 == enum case for Parse.pommesResponse(_:))
    {
      (*(void (**)(void, void))(v37 + 96))(*(void *)(v0 + 112), *(void *)(v0 + 96));
      uint64_t v39 = *v36;
      uint64_t v40 = PommesResponse.firstGeoExperience.getter();
      if (v40)
      {
        uint64_t v41 = (void *)v40;
        uint64_t v43 = *(void *)(v0 + 80);
        uint64_t v42 = *(void *)(v0 + 88);
        uint64_t v44 = *(void *)(v0 + 64);
        uint64_t v78 = *(void *)(v0 + 72);
        uint64_t v46 = *(void *)(v0 + 48);
        uint64_t v45 = *(void *)(v0 + 56);
        uint64_t v47 = GeoExperience.geoClientComponent.getter(v40);
        uint64_t v48 = Apple_Parsec_Siri_V2alpha_GeoClientComponent.parkingLocationAction.getter(v47);
        Apple_Parsec_Siri_V2alpha_ParkingLocationAction.note.getter(v48);
        uint64_t v50 = v49;
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
        id v51 = objc_allocWithZone(&OBJC_CLASS___INSaveParkingLocationIntent);
        NSString v52 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v50);
        id v3 = [v51 initWithParkingLocation:0 parkingNote:v52];

        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v78);
        goto LABEL_10;
      }

      uint64_t v69 = *(void *)(v0 + 40);
      uint64_t v70 = static os_log_type_t.error.getter(0LL);
      os_log(_:dso:log:_:_:)( v70,  &dword_0,  *(void *)(v69 + 16),  "Received pommes response but no geo experience is present",  57LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v71 = type metadata accessor for RuntimeError();
      uint64_t v72 = swift_allocObject(v71, 32LL, 7LL);
      *(void *)(v72 + 16) = 0xD00000000000002BLL;
      *(void *)(v72 + 24) = 0x800000000009E130LL;
      uint64_t v73 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RuntimeError,  (uint64_t)&protocol conformance descriptor for RuntimeError);
      uint64_t v74 = swift_allocError(v71, v73, 0LL, 0LL);
      *uint64_t v75 = v72;
      swift_willThrow(v74);
    }

    else
    {
      uint64_t v56 = *(void *)(v0 + 40);
      uint64_t v57 = static os_log_type_t.error.getter(v24);
      os_log(_:dso:log:_:_:)( v57,  &dword_0,  *(void *)(v56 + 16),  "makeIntentFromParse should have INSaveParkingLocationIntent passed in",  69LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v58 = type metadata accessor for RuntimeError();
      uint64_t v59 = swift_allocObject(v58, 32LL, 7LL);
      *(void *)(v59 + 16) = 0xD000000000000045LL;
      *(void *)(v59 + 24) = 0x800000000009F070LL;
      uint64_t v60 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RuntimeError,  (uint64_t)&protocol conformance descriptor for RuntimeError);
      uint64_t v61 = swift_allocError(v58, v60, 0LL, 0LL);
      uint64_t *v62 = v59;
      swift_willThrow(v61);
      (*(void (**)(void **, uint64_t))(v37 + 8))(v36, v38);
    }
  }

  uint64_t v76 = *(void *)(v0 + 88);
  uint64_t v77 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SaveParkingBaseRCHStrategy.init()()
{
  *(void *)(v0 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001ALL,  0x800000000009A7C0LL);
  return v0;
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeParameterMetadata(intent:) in conformance SaveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for SaveParkingBaseRCHStrategy();
  return RCHFlowStrategyAsync.makeParameterMetadata(intent:)(a1, v5, a3);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance SaveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for SaveParkingBaseRCHStrategy();
  void *v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:) in conformance SaveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for SaveParkingBaseRCHStrategy();
  void *v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:) in conformance SaveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for SaveParkingBaseRCHStrategy();
  void *v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance SaveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:)[1]);
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for SaveParkingBaseRCHStrategy();
  *uint64_t v12 = v6;
  v12[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:)(a1, a2, a3, a4, v13, a6);
}

uint64_t protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance SaveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)[1]);
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for SaveParkingBaseRCHStrategy();
  *uint64_t v12 = v6;
  v12[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)( a1,  a2,  a3,  a4,  v13,  a6);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance SaveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for SaveParkingBaseRCHStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentHandleIntentStrategy;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)(a1, a2, v9, a4);
}

uint64_t base witness table accessor for ResolveConfirmFlowStrategyAsync in SaveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type SaveParkingBaseRCHStrategy and conformance SaveParkingBaseRCHStrategy,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for SaveParkingBaseRCHStrategy,  (uint64_t)&protocol conformance descriptor for SaveParkingBaseRCHStrategy);
}

uint64_t type metadata accessor for SaveParkingBaseRCHStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin26SaveParkingBaseRCHStrategy);
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in SaveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type SaveParkingBaseRCHStrategy and conformance SaveParkingBaseRCHStrategy,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for SaveParkingBaseRCHStrategy,  (uint64_t)&protocol conformance descriptor for SaveParkingBaseRCHStrategy);
}

uint64_t base witness table accessor for RouteConfirmIntentResponseFlowStrategyAsync in SaveParkingBaseRCHStrategy( uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type SaveParkingBaseRCHStrategy and conformance SaveParkingBaseRCHStrategy,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for SaveParkingBaseRCHStrategy,  (uint64_t)&protocol conformance descriptor for SaveParkingBaseRCHStrategy);
}

uint64_t TrafficIncidentBaseFlow.__allocating_init(with:flowHelper:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  TrafficIncidentBaseFlow.init(with:flowHelper:)(a1, a2);
  return v5;
}

uint64_t key path setter for TrafficIncidentBaseFlow.flowState : TrafficIncidentBaseFlow( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of TrafficIncidentBaseFlow.State(a1, (uint64_t)v5);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 120LL))(v5);
}

uint64_t TrafficIncidentBaseFlow.flowState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_flowState;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return outlined init with copy of TrafficIncidentBaseFlow.State(v3, a1);
}

uint64_t TrafficIncidentBaseFlow.flowState.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_flowState;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  outlined assign with take of TrafficIncidentBaseFlow.State(a1, v3);
  return swift_endAccess(v5);
}

uint64_t (*TrafficIncidentBaseFlow.flowState.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t TrafficIncidentBaseFlow.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_flowHelper;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return outlined init with copy of DeviceState(v3, a1);
}

uint64_t TrafficIncidentBaseFlow.flowHelper.setter(__int128 *a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_flowHelper);
  swift_beginAccess(v3, v5, 33LL, 0LL);
  __swift_destroy_boxed_opaque_existential_0Tm(v3);
  outlined init with take of CATType(a1, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t (*TrafficIncidentBaseFlow.flowHelper.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t TrafficIncidentBaseFlow.isPOMMES.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_isPOMMES);
  swift_beginAccess(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_isPOMMES, v3, 0LL, 0LL);
  return *v1;
}

uint64_t TrafficIncidentBaseFlow.isPOMMES.setter(char a1)
{
  uint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_isPOMMES);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*TrafficIncidentBaseFlow.isPOMMES.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

#error "825A4: call analysis failed (funcsize=137)"
uint64_t outlined init with copy of TrafficIncidentBaseFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v4 = type metadata accessor for TrafficIncidentBaseFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for TrafficIncidentBaseFlow.State(uint64_t a1)
{
  return type metadata accessor for ShareETA( a1,  (uint64_t *)&type metadata singleton initialization cache for TrafficIncidentBaseFlow.State,  (uint64_t)&nominal type descriptor for TrafficIncidentBaseFlow.State);
}

uint64_t outlined assign with take of TrafficIncidentBaseFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TrafficIncidentBaseFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t TrafficIncidentBaseFlow.__allocating_init(with:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for TrafficIncidentBaseFlow.State(0LL);
  __chkstk_darwin();
  uint64_t v5 = (uint64_t *)((char *)&v29[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  v29[3] = (uint64_t)&type metadata for FlowHelperImpl;
  v29[4] = (uint64_t)&protocol witness table for FlowHelperImpl;
  uint64_t v6 = swift_allocObject(&unk_BC0B0, 192LL, 7LL);
  uint64_t v7 = (void *)(v6 + 16);
  v29[0] = v6;
  swift_retain(a1);
  FlowHelperImpl.init()(v7);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(v1 + 184))(a1, v29);
  *uint64_t v5 = a1;
  swift_storeEnumTagMultiPayload(v5, v3, 1LL);
  uint64_t v9 = v8 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_flowState;
  swift_beginAccess(v8 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_flowState, v29, 33LL, 0LL);
  swift_retain(a1);
  swift_retain(v8);
  outlined assign with take of TrafficIncidentBaseFlow.State((uint64_t)v5, v9);
  uint64_t v10 = swift_endAccess(v29);
  LOBYTE(v9) = static os_log_type_t.info.getter(v10, v11, v12, v13, v14, v15, v16, v17);
  uint64_t v18 = (os_log_s *)*(id *)(v8 + 16);
  swift_release(v8);
  os_log_type_t v19 = v9;
  if (os_log_type_enabled(v18, (os_log_type_t)v9))
  {
    swift_retain_n(a1, 2LL);
    unint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v28 = a1;
    v29[0] = v21;
    *(_DWORD *)unint64_t v20 = 136315138;
    uint64_t v22 = type metadata accessor for LocationSearchIntent(0LL);
    uint64_t v23 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent,  type metadata accessor for LocationSearchIntent,  (uint64_t)&protocol conformance descriptor for LocationSearchIntent);
    uint64_t v24 = NLIntentWrapper.description.getter(v22, v23);
    unint64_t v26 = v25;
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29);
    swift_release_n(a1, 2LL);
    swift_bridgeObjectRelease(v26);
    _os_log_impl(&dword_0, v18, v19, "TrafficIncidentBaseFlow initialized with intent\n%s", v20, 0xCu);
    swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);

    swift_release(a1);
  }

  else
  {
    swift_release(a1);
  }

  return v8;
}

uint64_t TrafficIncidentBaseFlow.exitValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TrafficIncidentBaseFlow.State(0LL);
  uint64_t v4 = __chkstk_darwin();
  uint64_t v6 = (uint64_t *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t))(*(void *)v1 + 112LL))(v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v3);
  if (EnumCaseMultiPayload == 4)
  {
    *(void *)a1 = *v6;
    *(_BYTE *)(a1 + 8) = 0;
    uint64_t v10 = enum case for RCHFlowResult.error<A, B>(_:);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104LL))(a1, v10, v11);
  }

  else if (EnumCaseMultiPayload == 5)
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
    return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, v6, v8);
  }

  else
  {
    unint64_t v12 = lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v13 = swift_allocError(&type metadata for Errors, v12, 0LL, 0LL);
    *(void *)uint64_t v14 = 0LL;
    *(void *)(v14 + 8) = 0LL;
    *(_BYTE *)(v14 + 16) = 3;
    *(void *)a1 = v13;
    *(_BYTE *)(a1 + 8) = 0;
    uint64_t v15 = enum case for RCHFlowResult.error<A, B>(_:);
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104LL))(a1, v15, v16);
    return outlined destroy of TrafficIncidentBaseFlow.State((uint64_t)v6);
  }

uint64_t TrafficIncidentBaseFlow.onInput(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Input(0LL);
  uint64_t v59 = *(void *)(v4 - 8);
  uint64_t v60 = v4;
  __chkstk_darwin();
  uint64_t v57 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v6 = *(void *)(v58 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Parse(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  unint64_t v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v14 = (id *)((char *)&v56 - v13);
  uint64_t v15 = __chkstk_darwin();
  uint64_t v17 = (char *)&v56 - v16;
  uint64_t v56 = a1;
  Input.parse.getter(v15);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t))(v10 + 88);
  uint64_t v61 = v9;
  uint64_t v19 = v18(v17, v9);
  if ((_DWORD)v19 == enum case for Parse.NLv3IntentOnly(_:))
  {
    unint64_t v20 = *(os_log_s **)(v2 + 16);
    os_log_type_t v21 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_0, v20, v21, "TrafficIncidentBaseFlow onInput returns true for Nlv3Only.", v22, 2u);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    uint64_t v23 = 1LL;
    uint64_t v24 = v10;
    goto LABEL_21;
  }

  if ((_DWORD)v19 == enum case for Parse.directInvocation(_:))
  {
    uint64_t v24 = v10;
    uint64_t v25 = v61;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v17, v61);
    (*(void (**)(char *, uint64_t))(v10 + 96))(v12, v25);
    uint64_t v26 = v58;
    uint64_t v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v8, v12, v58);
    uint64_t v28 = Parse.DirectInvocation.identifier.getter(v27);
    uint64_t v30 = v29;
    if (v28 == 0xD000000000000033LL && v29 == 0x800000000009B7B0LL)
    {
      uint64_t v31 = swift_bridgeObjectRelease(0x800000000009B7B0LL);
LABEL_13:
      uint64_t v39 = *(os_log_s **)(v2 + 16);
      os_log_type_t v40 = static os_log_type_t.default.getter(v31);
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v41 = 0;
        _os_log_impl(&dword_0, v39, v40, "TrafficIncidentBaseFlow onInput returns true for directInvocation.", v41, 2u);
        swift_slowDealloc(v41, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v26);
      uint64_t v23 = 1LL;
      goto LABEL_21;
    }

    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, 0xD000000000000033LL, 0x800000000009B7B0LL, 0LL);
    uint64_t v31 = swift_bridgeObjectRelease(v30);
    if ((v38 & 1) != 0) {
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v26);
    uint64_t v32 = (void *)v2;
LABEL_17:
    uint64_t v42 = (os_log_s *)v32[2];
    uint64_t v44 = v59;
    uint64_t v43 = v60;
    uint64_t v45 = v57;
    uint64_t v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 16))(v57, v56, v60);
    os_log_type_t v47 = static os_log_type_t.default.getter(v46);
    if (os_log_type_enabled(v42, v47))
    {
      uint64_t v48 = v45;
      uint64_t v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v50 = swift_slowAlloc(32LL, -1LL);
      uint64_t v63 = v50;
      *(_DWORD *)uint64_t v49 = 136315138;
      id v51 = v48;
      uint64_t v52 = Input.description.getter();
      unint64_t v54 = v53;
      uint64_t v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      swift_bridgeObjectRelease(v54);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v51, v60);
      _os_log_impl(&dword_0, v42, v47, "SiriGeo currently doesn't support parse type: %s", v49, 0xCu);
      swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v43);
    }

    uint64_t v23 = 0LL;
    goto LABEL_21;
  }

  uint64_t v32 = (void *)v2;
  uint64_t v24 = v10;
  if ((_DWORD)v19 != enum case for Parse.pommesResponse(_:)) {
    goto LABEL_17;
  }
  uint64_t v33 = v61;
  (*(void (**)(id *, char *, uint64_t))(v10 + 16))(v14, v17, v61);
  (*(void (**)(id *, uint64_t))(v10 + 96))(v14, v33);

  uint64_t v23 = 1LL;
  uint64_t v34 = (*(uint64_t (**)(uint64_t))(*v32 + 168LL))(1LL);
  uint64_t v35 = (os_log_s *)v32[2];
  os_log_type_t v36 = static os_log_type_t.default.getter(v34);
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl(&dword_0, v35, v36, "TrafficIncidentBaseFlow onInput returns true for Pommes response.", v37, 2u);
    swift_slowDealloc(v37, -1LL, -1LL);
    uint64_t v23 = 1LL;
  }

uint64_t TrafficIncidentBaseFlow.executeState()(uint64_t a1)
{
  v2[7] = a1;
  _BYTE v2[8] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
  void v2[9] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[10] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[11] = swift_task_alloc(v5);
  v2[12] = swift_task_alloc(v5);
  v2[13] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for TrafficIncidentBaseFlow.State(0LL);
  v2[14] = v6;
  unint64_t v7 = (*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[15] = swift_task_alloc(v7);
  v2[16] = swift_task_alloc(v7);
  return swift_task_switch(TrafficIncidentBaseFlow.executeState(), 0LL, 0LL);
}

void TrafficIncidentBaseFlow.executeState()()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 112);
  (*(void (**)(void))(**(void **)(v0 + 64) + 112LL))();
  uint64_t v3 = (char *)sub_8320C + 4 * word_9A930[swift_getEnumCaseMultiPayload(v1, v2)];
  __asm { BR              X10 }

uint64_t sub_8320C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, os_log_t log, uint64_t a33)
{
  void (*v42)(__int128 *__return_ptr, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v52[8];
  os_log_type_t v36 = *(uint64_t **)(v34 + 120);
  uint64_t v35 = *(uint64_t **)(v34 + 128);
  uint64_t v37 = *(void *)(v34 + 112);
  uint64_t v38 = *(void *)(v34 + 64);
  uint64_t v39 = *v35;
  *os_log_type_t v36 = *v35;
  swift_storeEnumTagMultiPayload(v36, v37, 1LL);
  os_log_type_t v40 = *(void (**)(uint64_t *))(*(void *)v38 + 120LL);
  swift_retain(v39);
  v40(v36);
  uint64_t v41 = *(void *)(v34 + 64);
  uint64_t v42 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(void *)v41 + 136LL);
  uint64_t v43 = swift_retain(v39);
  v42(v52, v43);
  uint64_t v44 = type metadata accessor for TrafficIncidentRequestSupportedCheckFlow();
  swift_allocObject(v44, 89LL, 7LL);
  *(void *)(v34 + 48) = TrafficIncidentRequestSupportedCheckFlow.init(intent:flowHelper:)(v39, v52);
  uint64_t v45 = swift_allocObject(&unk_BC100, 32LL, 7LL);
  *(void *)(v45 + 16) = v41;
  *(void *)(v45 + 24) = v39;
  uint64_t v46 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type TrafficIncidentRequestSupportedCheckFlow and conformance TrafficIncidentRequestSupportedCheckFlow,  (uint64_t (*)(uint64_t))type metadata accessor for TrafficIncidentRequestSupportedCheckFlow,  (uint64_t)&protocol conformance descriptor for TrafficIncidentRequestSupportedCheckFlow);
  swift_retain(v41);
  static ExecuteResponse.ongoing<A>(next:childCompletion:)( v33,  partial apply for closure #1 in TrafficIncidentBaseFlow.executeState(),  v45,  v44,  v46);
  swift_release(v45);
  swift_release(*(void *)(v34 + 48));
  os_log_type_t v47 = *(void *)(v34 + 120);
  uint64_t v49 = *(void *)(v34 + 96);
  uint64_t v48 = *(void *)(v34 + 104);
  uint64_t v50 = *(void *)(v34 + 88);
  swift_task_dealloc(*(void *)(v34 + 128));
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  return (*(uint64_t (**)(void))(v34 + 8))();
}

uint64_t TrafficIncidentBaseFlow.executeState()()
{
  return swift_task_switch(TrafficIncidentBaseFlow.executeState(), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v1 = *(void *)(v0 + 136);

  swift_release(v1);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  unint64_t v5 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 128));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #2 in TrafficIncidentBaseFlow.executeState()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TrafficIncidentBaseFlow.State(0LL);
  __chkstk_darwin();
  uint64_t v8 = (uint64_t *)((char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v9 = type metadata accessor for UnsupportedError();
    uint64_t v10 = swift_allocObject(v9, 32LL, 7LL);
    *(void *)(v10 + 16) = 0xD000000000000014LL;
    *(void *)(v10 + 24) = 0x800000000009F1B0LL;
    uint64_t v11 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type UnsupportedError and conformance UnsupportedError,  (uint64_t (*)(uint64_t))type metadata accessor for UnsupportedError,  (uint64_t)&protocol conformance descriptor for UnsupportedError);
    uint64_t v12 = swift_allocError(v9, v11, 0LL, 0LL);
    *uint64_t v13 = v10;
    *uint64_t v8 = v12;
    swift_storeEnumTagMultiPayload(v8, v6, 4LL);
    (*(void (**)(uint64_t *))(*a2 + 120LL))(v8);
  }

  else
  {
    uint64_t v14 = *(void **)a1;
    id v15 = v14;
    os_log_type_t v16 = static os_log_type_t.default.getter(v15);
    uint64_t v17 = (os_log_s *)a2[2];
    int v18 = v16;
    if (os_log_type_enabled(v17, v16))
    {
      outlined copy of LocationFetchFlow.ExitValue(v14, 0);
      outlined copy of LocationFetchFlow.ExitValue(v14, 0);
      uint64_t v54 = a3;
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v53 = swift_slowAlloc(32LL, -1LL);
      uint64_t v56 = (uint8_t *)v53;
      uint64_t v52 = v19;
      *(_DWORD *)uint64_t v19 = 136315138;
      uint64_t v50 = v19 + 4;
      id v20 = [v15 description];
      LODWORD(v51) = v18;
      os_log_type_t v21 = v17;
      uint64_t v22 = v14;
      id v23 = v15;
      id v24 = v20;
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      unint64_t v27 = v26;

      id v15 = v23;
      uint64_t v14 = v22;
      uint64_t v17 = v21;
      outlined consume of LocationFetchFlow.ExitValue(v14, 0);
      uint64_t v28 = v25;
      a3 = v54;
      uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, (uint64_t *)&v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_bridgeObjectRelease(v27);
      outlined consume of LocationFetchFlow.ExitValue(v14, 0);
      outlined consume of LocationFetchFlow.ExitValue(v14, 0);
      uint64_t v29 = v21;
      uint64_t v30 = v52;
      _os_log_impl(&dword_0, v29, (os_log_type_t)v51, "location: %s", v52, 0xCu);
      uint64_t v31 = v53;
      swift_arrayDestroy(v53, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    id v32 = [v15 horizontalAccuracy];
    if (v33 >= 0.0)
    {
      os_log_type_t v37 = static os_log_type_t.default.getter(v32);
      int v38 = v37;
      if (os_log_type_enabled(v17, v37))
      {
        outlined copy of LocationFetchFlow.ExitValue(v14, 0);
        outlined copy of LocationFetchFlow.ExitValue(v14, 0);
        LODWORD(v53) = v38;
        uint64_t v39 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v52 = (uint8_t *)swift_slowAlloc(32LL, -1LL);
        uint64_t v56 = v52;
        uint64_t v54 = a3;
        *(_DWORD *)uint64_t v39 = 136315138;
        uint64_t v50 = v39 + 4;
        id v40 = [v15 description];
        os_log_t v51 = v17;
        uint64_t v41 = v14;
        id v42 = v15;
        id v43 = v40;
        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
        unint64_t v46 = v45;

        id v15 = v42;
        uint64_t v14 = v41;
        outlined consume of LocationFetchFlow.ExitValue(v41, 0);
        uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, (uint64_t *)&v56);
        a3 = v54;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
        swift_bridgeObjectRelease(v46);
        outlined consume of LocationFetchFlow.ExitValue(v41, 0);
        outlined consume of LocationFetchFlow.ExitValue(v41, 0);
        _os_log_impl(&dword_0, v51, (os_log_type_t)v53, "returning success: %s", v39, 0xCu);
        os_log_type_t v47 = v52;
        swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1LL, -1LL);
        swift_slowDealloc(v39, -1LL, -1LL);
      }

      *uint64_t v8 = a3;
      v8[1] = (uint64_t)v15;
      swift_storeEnumTagMultiPayload(v8, v6, 3LL);
      uint64_t v48 = *(void (**)(uint64_t *))(*a2 + 120LL);
      outlined copy of LocationFetchFlow.ExitValue(v14, 0);
      swift_retain(a3);
      v48(v8);
    }

    else
    {
      unint64_t v34 = lazy protocol witness table accessor for type Errors and conformance Errors();
      uint64_t v35 = swift_allocError(&type metadata for Errors, v34, 0LL, 0LL);
      *(void *)uint64_t v36 = 0xD00000000000001ELL;
      *(void *)(v36 + 8) = 0x800000000009F1D0LL;
      *(_BYTE *)(v36 + 16) = 2;
      *uint64_t v8 = v35;
      swift_storeEnumTagMultiPayload(v8, v6, 4LL);
      (*(void (**)(uint64_t *))(*a2 + 120LL))(v8);
    }

    outlined consume of LocationFetchFlow.ExitValue(v14, 0);
  }

void closure #1 in TrafficIncidentBaseFlow.executeState()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TrafficIncidentBaseFlow.State(0LL);
  __chkstk_darwin();
  uint64_t v8 = (os_log_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = *(void **)a1;
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 8) == 1)
    {
      uint64_t v10 = swift_errorRetain(*(void *)a1);
      os_log_type_t v11 = static os_log_type_t.error.getter(v10);
      uint64_t v12 = (os_log_s *)a2[2];
      os_log_type_t v13 = v11;
      if (os_log_type_enabled(v12, v11))
      {
        outlined copy of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v9, 1);
        outlined copy of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v9, 1);
        os_log_t v21 = v12;
        uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        id v15 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v14 = 138412290;
        swift_errorRetain(v9);
        uint64_t v16 = _swift_stdlib_bridgeErrorToNSError(v9);
        uint64_t v22 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
        uint64_t *v15 = v16;
        outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v9, 1);
        outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v9, 1);
        _os_log_impl(&dword_0, v21, v13, "exitValue error: %@", v14, 0xCu);
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy(v15, 1LL, v17);
        swift_slowDealloc(v15, -1LL, -1LL);
        swift_slowDealloc(v14, -1LL, -1LL);
      }

      *uint64_t v8 = v9;
      swift_storeEnumTagMultiPayload(v8, v6, 4LL);
      int v18 = *(void (**)(void *))(*a2 + 120LL);
      swift_errorRetain(v9);
      v18(v8);
      outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v9, 1);
    }

    else
    {
      *uint64_t v8 = a3;
      swift_storeEnumTagMultiPayload(v8, v6, 2LL);
      id v20 = *(void (**)(void *))(*a2 + 120LL);
      swift_retain(a3);
      v20(v8);
    }
  }

  else
  {
    *uint64_t v8 = a3;
    v8[1] = v9;
    swift_storeEnumTagMultiPayload(v8, v6, 3LL);
    uint64_t v19 = *(void (**)(void *))(*a2 + 120LL);
    swift_retain(a3);
    outlined copy of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v9, 0);
    v19(v8);
  }

uint64_t TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[26] = a3;
  v4[27] = v3;
  _BYTE v4[24] = a1;
  v4[25] = a2;
  uint64_t v5 = type metadata accessor for Parse(0LL);
  v4[28] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[29] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[30] = swift_task_alloc(v7);
  v4[31] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for Input(0LL);
  v4[32] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[33] = v9;
  v4[34] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INReportIncidentIntent, INReportIncidentIntentResponse>);
  v4[35] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[36] = v11;
  v4[37] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:), 0LL, 0LL);
}

uint64_t TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(v8 + 280);
  uint64_t v58 = *(void *)(v8 + 248);
  uint64_t v59 = *(void *)(v8 + 232);
  uint64_t v10 = *(void **)(v8 + 216);
  uint64_t v60 = *(void *)(v8 + 224);
  uint64_t v61 = *(void *)(v8 + 208);
  uint64_t v62 = *(void *)(v8 + 240);
  uint64_t v57 = *(void *)(v8 + 200);
  uint64_t v11 = static os_log_type_t.info.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v12 = v10[2];
  *(void *)(v8 + 304) = v12;
  os_log(_:dso:log:_:_:)(v11, &dword_0, v12, "TrafficIncidentBaseFlow makeRCHFlow", 35LL, 2LL, _swiftEmptyArrayStorage);
  uint64_t v13 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INReportIncidentIntent,  &OBJC_CLASS___INReportIncidentIntent_ptr);
  uint64_t v14 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INReportIncidentIntentResponse,  &OBJC_CLASS___INReportIncidentIntentResponse_ptr);
  RCHChildFlowProducersAsync.init()(v13, v14);
  uint64_t v15 = type metadata accessor for App(0LL);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  uint64_t v16 = App.init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)( 0x6C7070612E6D6F63LL,  0xEE007370614D2E65LL,  0xD000000000000023LL,  0x800000000009F130LL,  0LL,  0LL,  0LL,  0LL);
  *(void *)(v8 + 31__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v16;
  uint64_t v17 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)(v16, v13, v14);
  uint64_t v18 = RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v17);
  uint64_t v19 = *(void (**)(uint64_t))(*v10 + 136LL);
  *(void *)(v8 + 32specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v19;
  v19(v18);
  uint64_t v20 = type metadata accessor for TrafficIncidentHandleIntentStrategy();
  uint64_t v21 = swift_allocObject(v20, 64LL, 7LL);
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  *(void *)(v21 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000023LL,  0x800000000009B910LL);
  outlined init with take of CATType((__int128 *)(v8 + 16), v21 + 24);
  *(void *)(v8 + 176) = v21;
  uint64_t v22 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type TrafficIncidentHandleIntentStrategy and conformance TrafficIncidentHandleIntentStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for TrafficIncidentHandleIntentStrategy,  (uint64_t)&protocol conformance descriptor for TrafficIncidentHandleIntentStrategy);
  uint64_t v23 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)(v8 + 176, v20, v22);
  uint64_t v25 = v24;
  swift_release(v21);
  uint64_t v26 = RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v23, v25, v9);
  ((void (*)(__int128 *__return_ptr, uint64_t))v19)(v63, v26);
  uint64_t v27 = type metadata accessor for TrafficIncidentContinueInAppPunchoutStrategy();
  swift_allocObject(v27, 72LL, 7LL);
  uint64_t v28 = TrafficIncidentContinueInAppPunchoutStrategy.init(with:)(v63);
  *(void *)(v8 + 168) = v28;
  uint64_t v29 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type TrafficIncidentContinueInAppPunchoutStrategy and conformance TrafficIncidentContinueInAppPunchoutStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for TrafficIncidentContinueInAppPunchoutStrategy,  (uint64_t)&protocol conformance descriptor for TrafficIncidentContinueInAppPunchoutStrategy);
  uint64_t v30 = static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)( v8 + 168,  v27,  v29);
  uint64_t v32 = v31;
  swift_release(v28);
  uint64_t v33 = RCHChildFlowProducersAsync.continueInAppFlowProducer.setter(v30, v32, v9);
  LOBYTE(v3specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = (*(uint64_t (**)(uint64_t))(*v10 + 160LL))(v33);
  v19((uint64_t)v63);
  uint64_t v34 = type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy();
  swift_allocObject(v34, 88LL, 7LL);
  uint64_t v35 = TrafficIncidentNeedsDisambiguationStrategy.init(isPommes:with:)(v30 & 1, v63);
  *(void *)(v8 + 136) = v35;
  uint64_t v36 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type TrafficIncidentNeedsDisambiguationStrategy and conformance TrafficIncidentNeedsDisambiguationStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy,  (uint64_t)&protocol conformance descriptor for TrafficIncidentNeedsDisambiguationStrategy);
  uint64_t v37 = static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)(v8 + 136, v34, v36);
  uint64_t v39 = v38;
  swift_release(v35);
  uint64_t v40 = RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter(v37, v39, v9);
  ((void (*)(__int128 *__return_ptr, uint64_t))v19)(v63, v40);
  uint64_t v41 = type metadata accessor for TrafficIncidentUnsupportedValueStrategy();
  swift_allocObject(v41, 72LL, 7LL);
  uint64_t v42 = TrafficIncidentUnsupportedValueStrategy.init(with:)(v63);
  *(void *)(v8 + 144) = v42;
  uint64_t v43 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type TrafficIncidentUnsupportedValueStrategy and conformance TrafficIncidentUnsupportedValueStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for TrafficIncidentUnsupportedValueStrategy,  (uint64_t)&protocol conformance descriptor for TrafficIncidentUnsupportedValueStrategy);
  uint64_t v44 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)(v8 + 144, v41, v43);
  uint64_t v46 = v45;
  swift_release(v42);
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter(v44, v46, v9);
  uint64_t v47 = v57 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent;
  uint64_t v48 = type metadata accessor for NLIntent(0LL);
  uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 16LL);
  v49(v58, v47, v48);
  uint64_t v50 = enum case for Parse.NLv3IntentOnly(_:);
  os_log_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 104);
  v51(v58, enum case for Parse.NLv3IntentOnly(_:), v60);
  Input.init(parse:)(v58);
  uint64_t v52 = type metadata accessor for TrafficIncidentBaseRCHStrategy();
  *(void *)(v8 + 328) = v52;
  uint64_t v53 = swift_allocObject(v52, 24LL, 7LL);
  *(void *)(v8 + 336) = v53;
  *(void *)(v53 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001ELL,  0x800000000009BE00LL);
  id v54 = specialized static TrafficIncidentUtils.makeSiriKitIntentWithUserLocation(locationSearchIntent:userLocation:)( v57,  v61);
  *(void *)(v8 + 344) = v54;
  v49(v62, v47, v48);
  v51(v62, v50, v60);
  uint64_t v55 = (void *)swift_task_alloc(dword_C9804);
  *(void *)(v8 + 35__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v55;
  *uint64_t v55 = v8;
  v55[1] = TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:);
  return TrafficIncidentBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:)(*(void *)(v8 + 240), (uint64_t)v54);
}

uint64_t TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 352LL);
  *(void *)(*(void *)v2 + 36swift_beginAccess(v0 + 113, v2, 0LL, 0LL) = v1;
  swift_task_dealloc(v5);
  uint64_t v7 = v4[29];
  uint64_t v6 = v4[30];
  uint64_t v8 = v4[28];
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v9 = TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:);
  }

  else
  {
    v4[46] = a1;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v9 = TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:);
  }

  return swift_task_switch(v9, 0LL, 0LL);
}

{
  uint64_t v1;
  os_log_s *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_s *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v2 = *(os_log_s **)(v1 + 304);
  uint64_t v3 = static os_log_type_t.error.getter(a1);
  uint64_t v4 = os_log_type_enabled(v2, v3);
  if ((_DWORD)v4)
  {
    uint64_t v5 = *(void *)(v1 + 360);
    uint64_t v6 = *(os_log_s **)(v1 + 304);
    swift_errorRetain(v5);
    swift_errorRetain(v5);
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v27 = v8;
    *(void *)(v1 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v5;
    swift_errorRetain(v5);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v10 = String.init<A>(describing:)(v1 + 152, v9);
    uint64_t v12 = v11;
    *(void *)(v1 + 16specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 160, v1 + 168);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl(&dword_0, v6, v3, "TrafficIncidentBaseFlow makeRCHFlow failure: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    uint64_t v4 = swift_slowDealloc(v7, -1LL, -1LL);
  }

  uint64_t v13 = *(void *)(v1 + 360);
  uint64_t v14 = *(void *)(v1 + 336);
  uint64_t v15 = *(void **)(v1 + 344);
  uint64_t v16 = *(void *)(v1 + 312);
  uint64_t v17 = *(void *)(v1 + 288);
  uint64_t v26 = *(void *)(v1 + 296);
  uint64_t v19 = *(void *)(v1 + 272);
  uint64_t v18 = *(void *)(v1 + 280);
  uint64_t v21 = *(void *)(v1 + 256);
  uint64_t v20 = *(void *)(v1 + 264);
  static ExecuteResponse.complete()(v4);
  swift_release(v14);
  swift_release(v16);
  swift_errorRelease(v13);

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v26, v18);
  uint64_t v22 = *(void *)(v1 + 272);
  uint64_t v24 = *(void *)(v1 + 240);
  uint64_t v23 = *(void *)(v1 + 248);
  swift_task_dealloc(*(void *)(v1 + 296));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:)()
{
  uint64_t v1 = *(void **)(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v18 = *(void **)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v16 = *(void *)(v0 + 296);
  uint64_t v17 = *(void *)(v0 + 328);
  uint64_t v22 = *(void *)(v0 + 288);
  uint64_t v23 = *(void *)(v0 + 280);
  uint64_t v19 = *(void *)(v0 + 264);
  uint64_t v20 = *(void *)(v0 + 256);
  uint64_t v21 = *(void *)(v0 + 272);
  uint64_t v4 = *(void *)(v0 + 216);
  (*(void (**)(void))(v0 + 320))();
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 56))(v5, v6);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 96));
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v8 = *(void *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v7);
  *(void *)(v0 + 184) = v2;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8);
  uint64_t v10 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type TrafficIncidentBaseRCHStrategy and conformance TrafficIncidentBaseRCHStrategy,  (uint64_t (*)(uint64_t))type metadata accessor for TrafficIncidentBaseRCHStrategy,  (uint64_t)&protocol conformance descriptor for TrafficIncidentBaseRCHStrategy);
  uint64_t v11 = v9(v0 + 184, v16, v3, v1, v17, v10, v7, v8);
  swift_retain(v4);
  static ExecuteResponse.ongoing<A>(next:childCompletion:)( v11,  partial apply for closure #1 in TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:),  v4);

  swift_release(v3);
  swift_release(v2);

  swift_release(v11);
  swift_release(v4);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v20);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v16, v23);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 56));
  uint64_t v12 = *(void *)(v0 + 272);
  uint64_t v14 = *(void *)(v0 + 240);
  uint64_t v13 = *(void *)(v0 + 248);
  swift_task_dealloc(*(void *)(v0 + 296));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:)( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TrafficIncidentBaseFlow.State(0LL);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v6, a1, v7);
  swift_storeEnumTagMultiPayload(v6, v4, 5LL);
  return (*(uint64_t (**)(char *))(*(void *)a2 + 120LL))(v6);
}

uint64_t TrafficIncidentBaseFlow.deinit()
{
  outlined destroy of TrafficIncidentBaseFlow.State(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_flowState);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0
                                                        + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_flowHelper));
  return v0;
}

uint64_t TrafficIncidentBaseFlow.__deallocating_deinit()
{
  outlined destroy of TrafficIncidentBaseFlow.State((uint64_t)v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_flowState);
  __swift_destroy_boxed_opaque_existential_0Tm((id *)((char *)v0
                                                    + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_flowHelper));
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t protocol witness for Flow.on(input:) in conformance TrafficIncidentBaseFlow(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TrafficIncidentBaseFlow, a2);
  return FSMFlow.on(input:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance TrafficIncidentBaseFlow( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TrafficIncidentBaseFlow, a3);
  return FSMFlow.execute(completion:)(a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for Flow.execute() in conformance TrafficIncidentBaseFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_C6814);
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TrafficIncidentBaseFlow, a2);
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return FSMFlow.execute()(a1, a2, WitnessTable);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TrafficIncidentBaseFlow( uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TrafficIncidentBaseFlow, a1);
  return FSMFlow.description.getter(a1, WitnessTable);
}

uint64_t sub_84CA0()
{
  return swift_deallocObject(v0, 192LL, 7LL);
}

uint64_t outlined destroy of TrafficIncidentBaseFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TrafficIncidentBaseFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void partial apply for closure #2 in TrafficIncidentBaseFlow.executeState()(uint64_t a1)
{
}

uint64_t objectdestroy_3Tm()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void partial apply for closure #1 in TrafficIncidentBaseFlow.executeState()(uint64_t a1)
{
}

uint64_t partial apply for closure #1 in TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:)( uint64_t a1)
{
  return closure #1 in TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:)(a1, v1);
}

uint64_t instantiation function for generic protocol witness table for TrafficIncidentBaseFlow(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type TrafficIncidentBaseFlow and conformance TrafficIncidentBaseFlow,  type metadata accessor for TrafficIncidentBaseFlow,  (uint64_t)&protocol conformance descriptor for TrafficIncidentBaseFlow);
  uint64_t result = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError( &lazy protocol witness table cache variable for type TrafficIncidentBaseFlow and conformance TrafficIncidentBaseFlow,  type metadata accessor for TrafficIncidentBaseFlow,  (uint64_t)&protocol conformance descriptor for TrafficIncidentBaseFlow);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for TrafficIncidentBaseFlow(uint64_t a1)
{
  return type metadata accessor for ShareETA( a1,  (uint64_t *)&type metadata singleton initialization cache for TrafficIncidentBaseFlow,  (uint64_t)&nominal type descriptor for TrafficIncidentBaseFlow);
}

uint64_t sub_84DE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 112LL))();
}

uint64_t sub_84E10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 136LL))();
}

uint64_t sub_84E38(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_BYTE *))(**(void **)a2 + 144LL))(v4);
}

uint64_t sub_84E78@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160LL))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_84EAC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 168LL))(*a1);
}

uint64_t ObjC metadata update function for TrafficIncidentBaseFlow()
{
  return type metadata accessor for TrafficIncidentBaseFlow(0LL);
}

uint64_t type metadata completion function for TrafficIncidentBaseFlow(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for TrafficIncidentBaseFlow.State(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = "(";
    void v4[3] = &unk_9AA50;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TrafficIncidentBaseFlow.State( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v9);
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v8 = *a2;
        *a1 = *a2;
        swift_retain(v8);
        swift_storeEnumTagMultiPayload(a1, a3, 0LL);
        break;
      case 1u:
        uint64_t v11 = *a2;
        *a1 = *a2;
        swift_retain(v11);
        swift_storeEnumTagMultiPayload(a1, a3, 1LL);
        break;
      case 2u:
        uint64_t v12 = *a2;
        *a1 = *a2;
        swift_retain(v12);
        swift_storeEnumTagMultiPayload(a1, a3, 2LL);
        break;
      case 3u:
        uint64_t v13 = *a2;
        uint64_t v14 = (void *)a2[1];
        *a1 = v13;
        a1[1] = (uint64_t)v14;
        swift_retain(v13);
        id v15 = v14;
        swift_storeEnumTagMultiPayload(a1, a3, 3LL);
        break;
      case 4u:
        uint64_t v16 = *a2;
        swift_errorRetain(v16);
        *a1 = v16;
        swift_storeEnumTagMultiPayload(a1, a3, 4LL);
        break;
      case 5u:
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v17 - 8) + 16LL))(a1, a2, v17);
        swift_storeEnumTagMultiPayload(a1, a3, 5LL);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

void destroy for TrafficIncidentBaseFlow.State(void *a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
    case 1u:
    case 2u:
      swift_release(*a1);
      break;
    case 3u:
      swift_release(*a1);

      break;
    case 4u:
      swift_errorRelease(*a1);
      break;
    case 5u:
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
      (*(void (**)(void *, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
      break;
    default:
      return;
  }

uint64_t *initializeWithCopy for TrafficIncidentBaseFlow.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v6 = *a2;
      *a1 = *a2;
      swift_retain(v6);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 0LL;
      goto LABEL_9;
    case 1u:
      uint64_t v10 = *a2;
      *a1 = *a2;
      swift_retain(v10);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 1LL;
      goto LABEL_9;
    case 2u:
      uint64_t v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 2LL;
      goto LABEL_9;
    case 3u:
      uint64_t v12 = *a2;
      uint64_t v13 = (void *)a2[1];
      *a1 = v12;
      a1[1] = (uint64_t)v13;
      swift_retain(v12);
      id v14 = v13;
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 3LL;
      goto LABEL_9;
    case 4u:
      uint64_t v15 = *a2;
      swift_errorRetain(v15);
      *a1 = v15;
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 4LL;
      goto LABEL_9;
    case 5u:
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v16 - 8) + 16LL))(a1, a2, v16);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 5LL;
LABEL_9:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

uint64_t *assignWithCopy for TrafficIncidentBaseFlow.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of TrafficIncidentBaseFlow.State((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v6 = *a2;
        *a1 = *a2;
        swift_retain(v6);
        swift_storeEnumTagMultiPayload(a1, a3, 0LL);
        break;
      case 1u:
        uint64_t v7 = *a2;
        *a1 = *a2;
        swift_retain(v7);
        swift_storeEnumTagMultiPayload(a1, a3, 1LL);
        break;
      case 2u:
        uint64_t v8 = *a2;
        *a1 = *a2;
        swift_retain(v8);
        swift_storeEnumTagMultiPayload(a1, a3, 2LL);
        break;
      case 3u:
        uint64_t v9 = *a2;
        *a1 = *a2;
        uint64_t v10 = (void *)a2[1];
        a1[1] = (uint64_t)v10;
        swift_retain(v9);
        id v11 = v10;
        swift_storeEnumTagMultiPayload(a1, a3, 3LL);
        break;
      case 4u:
        uint64_t v12 = *a2;
        swift_errorRetain(v12);
        *a1 = v12;
        swift_storeEnumTagMultiPayload(a1, a3, 4LL);
        break;
      case 5u:
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
        swift_storeEnumTagMultiPayload(a1, a3, 5LL);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

void *initializeWithTake for TrafficIncidentBaseFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 5)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 5LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *assignWithTake for TrafficIncidentBaseFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of TrafficIncidentBaseFlow.State((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 5)
    {
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 5LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

void type metadata completion function for TrafficIncidentBaseFlow.State(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v4[3] = &unk_9AA70;
  void v4[4] = &unk_9AA88;
  type metadata accessor for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>(319LL);
  if (v3 <= 0x3F)
  {
    v4[5] = *(void *)(v2 - 8) + 64LL;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 6LL, v4);
  }

void type metadata accessor for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>( uint64_t a1)
{
  if (!lazy cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>)
  {
    uint64_t v2 = type metadata accessor for OS_os_log( 255LL,  &lazy cache variable for type metadata for INReportIncidentIntent,  &OBJC_CLASS___INReportIncidentIntent_ptr);
    uint64_t v3 = type metadata accessor for OS_os_log( 255LL,  &lazy cache variable for type metadata for INReportIncidentIntentResponse,  &OBJC_CLASS___INReportIncidentIntentResponse_ptr);
    unint64_t v4 = type metadata accessor for RCHFlowResult(a1, v2, v3);
    if (!v5) {
      atomic_store( v4,  (unint64_t *)&lazy cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
    }
  }

void outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(id a1, char a2)
{
  if (a2 == 1)
  {
    swift_errorRelease(a1);
  }

  else if (!a2)
  {
  }

id outlined copy of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(id result, char a2)
{
  if (a2 == 1) {
    return (id)swift_errorRetain(result);
  }
  if (!a2) {
    return result;
  }
  return result;
}

uint64_t TrafficIncidentRequestSupportedCheckFlow.__allocating_init(intent:flowHelper:)( uint64_t a1, __int128 *a2)
{
  uint64_t v5 = swift_allocObject(v2, 89LL, 7LL);
  TrafficIncidentRequestSupportedCheckFlow.init(intent:flowHelper:)(a1, a2);
  return v5;
}

void *TrafficIncidentRequestSupportedCheckFlow.exitValue.getter()
{
  uint64_t v1 = *(void **)(v0 + 80);
  outlined copy of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v1, *(_BYTE *)(v0 + 88));
  return v1;
}

void TrafficIncidentRequestSupportedCheckFlow.exitValue.setter(uint64_t a1, char a2)
{
  uint64_t v5 = *(void **)(v2 + 80);
  *(void *)(v2 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = a1;
  char v6 = *(_BYTE *)(v2 + 88);
  *(_BYTE *)(v2 + 88) = a2;
  outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v5, v6);
}

uint64_t TrafficIncidentRequestSupportedCheckFlow.init(intent:flowHelper:)(uint64_t a1, __int128 *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CATService();
  uint64_t v7 = swift_allocObject(v6, 40LL, 7LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v6);
  *(void *)(v7 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  *(void *)(v7 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v7 + 16) = 0;
  *(void *)(v3 + 24) = v7;
  *(void *)(v3 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000028LL,  0x800000000009AA90LL);
  uint64_t v9 = type metadata accessor for RuntimeError();
  uint64_t v10 = swift_allocObject(v9, 32LL, 7LL);
  *(void *)(v10 + 16) = 0xD00000000000002CLL;
  *(void *)(v10 + 24) = 0x800000000009BD80LL;
  uint64_t v11 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RuntimeError,  (uint64_t)&protocol conformance descriptor for RuntimeError);
  uint64_t v12 = swift_allocError(v9, v11, 0LL, 0LL);
  *uint64_t v13 = v10;
  *(void *)(v3 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v12;
  *(_BYTE *)(v3 + 88) = 1;
  *(void *)(v3 + 16) = a1;
  outlined init with take of CATType(a2, v3 + 32);
  return v3;
}

uint64_t TrafficIncidentRequestSupportedCheckFlow.__allocating_init(intent:)(uint64_t a1)
{
  void v4[3] = &type metadata for FlowHelperImpl;
  void v4[4] = &protocol witness table for FlowHelperImpl;
  v4[0] = swift_allocObject(&unk_BC1B0, 192LL, 7LL);
  FlowHelperImpl.init()((void *)(v4[0] + 16LL));
  return (*(uint64_t (**)(uint64_t, void *))(v1 + 144))(a1, v4);
}

uint64_t sub_859BC()
{
  return swift_deallocObject(v0, 192LL, 7LL);
}

uint64_t TrafficIncidentRequestSupportedCheckFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TrafficIncidentRequestSupportedCheckFlow();
  uint64_t v6 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type TrafficIncidentRequestSupportedCheckFlow and conformance TrafficIncidentRequestSupportedCheckFlow,  v5,  (uint64_t (*)(uint64_t))type metadata accessor for TrafficIncidentRequestSupportedCheckFlow,  (uint64_t)&protocol conformance descriptor for TrafficIncidentRequestSupportedCheckFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v6);
}

uint64_t type metadata accessor for TrafficIncidentRequestSupportedCheckFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin40TrafficIncidentRequestSupportedCheckFlow);
}

uint64_t TrafficIncidentRequestSupportedCheckFlow.execute()(uint64_t a1)
{
  v2[69] = v1;
  v2[68] = a1;
  uint64_t v3 = type metadata accessor for TemplatingResult(0LL);
  v2[70] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[71] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[72] = v5;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[73] = swift_task_alloc(v6);
  v2[74] = swift_task_alloc(v6);
  v2[75] = swift_task_alloc(v6);
  v2[76] = swift_task_alloc(v6);
  v2[77] = swift_task_alloc(v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v2[78] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for ActivityType(0LL);
  v2[79] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[80] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[81] = swift_task_alloc(v10);
  v2[82] = swift_task_alloc(v10);
  v2[83] = swift_task_alloc(v10);
  v2[84] = swift_task_alloc(v10);
  return swift_task_switch(TrafficIncidentRequestSupportedCheckFlow.execute(), 0LL, 0LL);
}

id TrafficIncidentRequestSupportedCheckFlow.execute()()
{
  char v1 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v0 + 552) + 16LL) + 168LL))();
  uint64_t v2 = LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(v1);
  if (v2 == 0x796669646F6DLL && v3 == 0xE600000000000000LL)
  {
    uint64_t v7 = swift_bridgeObjectRelease(0xE600000000000000LL);
    goto LABEL_10;
  }

  uint64_t v5 = v3;
  char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, 0x796669646F6DLL, 0xE600000000000000LL, 0LL);
  uint64_t v7 = swift_bridgeObjectRelease(v5);
  if ((v6 & 1) != 0)
  {
LABEL_10:
    uint64_t v40 = *(void *)(v0 + 672);
    uint64_t v41 = *(void *)(v0 + 640);
    uint64_t v42 = *(void *)(v0 + 632);
    static SiriKitEventSender.current.getter(v7);
    uint64_t v141 = *(void *)(v0 + 488);
    uint64_t v145 = *(void *)(v0 + 480);
    uint64_t v151 = (void *)(v0 + 456);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 456), v145);
    (*(void (**)(uint64_t, void, uint64_t))(v41 + 104))(v40, enum case for ActivityType.failed(_:), v42);
    uint64_t v43 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INReportIncidentIntent,  &OBJC_CLASS___INReportIncidentIntent_ptr);
    id result = [(id)swift_getObjCClassFromMetadata(v43) typeName];
    if (result)
    {
      uint64_t v44 = result;
      id v137 = (void *)(v0 + 496);
      uint64_t v45 = *(void *)(v0 + 672);
      uint64_t v46 = *(void *)(v0 + 624);
      uint64_t v47 = *(void **)(v0 + 552);
      type metadata accessor for SiriKitEvent(0LL);
      uint64_t v48 = (void *)v0;
      uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      uint64_t v51 = v50;

      uint64_t v52 = enum case for SiriKitReliabilityCodes.unsupportedParameter(_:);
      uint64_t v53 = type metadata accessor for SiriKitReliabilityCodes(0LL);
      uint64_t v54 = *(void *)(v53 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 104))(v46, v52, v53);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(v46, 0LL, 1LL, v53);
      uint64_t v55 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)( v45,  v49,  v51,  v46,  closure #1 in TrafficIncidentRequestSupportedCheckFlow.execute(),  0LL);
      dispatch thunk of SiriKitEventSending.send(_:)(v55, v145, v141);
      swift_release(v55);
      __swift_destroy_boxed_opaque_existential_0Tm(v151);
      uint64_t v56 = type metadata accessor for UnsupportedError();
      uint64_t v57 = swift_allocObject(v56, 32LL, 7LL);
      *(void *)(v57 + 16) = 0xD000000000000027LL;
      *(void *)(v57 + 24) = 0x800000000009F260LL;
      uint64_t v58 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type UnsupportedError and conformance UnsupportedError,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for UnsupportedError,  (uint64_t)&protocol conformance descriptor for UnsupportedError);
      uint64_t v59 = swift_allocError(v56, v58, 0LL, 0LL);
      *uint64_t v60 = v57;
      (*(void (**)(uint64_t, uint64_t))(*v47 + 128LL))(v59, 1LL);
      uint64_t v61 = v47[3];
      uint64_t v62 = type metadata accessor for TrafficIncident(0LL);
      v48[65] = v62;
      v48[66] = &protocol witness table for TrafficIncident;
      uint64_t v32 = v137;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v137);
      swift_storeEnumTagMultiPayload(boxed_opaque_existential_0, v62, 11LL);
      uint64_t v65 = v47[7];
      uint64_t v64 = v47[8];
      __swift_project_boxed_opaque_existential_1(v47 + 4, v65);
      uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 80))(v65, v64);
      v48[85] = v36;
      uint64_t v66 = *(int **)(*(void *)v61 + 112LL);
      uint64_t v150 = (char *)v66 + *v66;
      uint64_t v67 = (void *)swift_task_alloc(v66[1]);
      v48[86] = v67;
      *uint64_t v67 = v48;
      v67[1] = TrafficIncidentRequestSupportedCheckFlow.execute();
      uint64_t v39 = v48[77];
      goto LABEL_12;
    }

    __break(1u);
    goto LABEL_22;
  }

  TrafficIncidentRequestSupportedCheckFlow.isReportMapsProblems()();
  if ((v8 & 1) != 0)
  {
    uint64_t v9 = *(void *)(v0 + 664);
    uint64_t v10 = *(void *)(v0 + 640);
    uint64_t v11 = *(void *)(v0 + 632);
    static SiriKitEventSender.current.getter(v8);
    uint64_t v140 = *(void *)(v0 + 368);
    uint64_t v144 = *(void *)(v0 + 360);
    uint64_t v149 = (void *)(v0 + 336);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 336), v144);
    (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v9, enum case for ActivityType.failed(_:), v11);
    uint64_t v12 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INReportIncidentIntent,  &OBJC_CLASS___INReportIncidentIntent_ptr);
    id result = [(id)swift_getObjCClassFromMetadata(v12) typeName];
    if (result)
    {
      id v14 = result;
      uint64_t v133 = *(void *)(v0 + 664);
      char v136 = (void *)(v0 + 376);
      uint64_t v15 = *(void *)(v0 + 624);
      uint64_t v16 = *(void **)(v0 + 552);
      type metadata accessor for SiriKitEvent(0LL);
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      uint64_t v18 = (void *)v0;
      uint64_t v20 = v19;

      uint64_t v21 = enum case for SiriKitReliabilityCodes.unsupportedParameter(_:);
      uint64_t v22 = type metadata accessor for SiriKitReliabilityCodes(0LL);
      uint64_t v23 = *(void *)(v22 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 104))(v15, v21, v22);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v15, 0LL, 1LL, v22);
      uint64_t v24 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)( v133,  v17,  v20,  v15,  closure #2 in TrafficIncidentRequestSupportedCheckFlow.execute(),  0LL);
      dispatch thunk of SiriKitEventSending.send(_:)(v24, v144, v140);
      swift_release(v24);
      __swift_destroy_boxed_opaque_existential_0Tm(v149);
      uint64_t v25 = type metadata accessor for UnsupportedError();
      uint64_t v26 = swift_allocObject(v25, 32LL, 7LL);
      *(void *)(v26 + 16) = 0xD000000000000025LL;
      *(void *)(v26 + 24) = 0x800000000009F230LL;
      uint64_t v27 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type UnsupportedError and conformance UnsupportedError,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for UnsupportedError,  (uint64_t)&protocol conformance descriptor for UnsupportedError);
      uint64_t v28 = swift_allocError(v25, v27, 0LL, 0LL);
      *uint64_t v29 = v26;
      (*(void (**)(uint64_t, uint64_t))(*v16 + 128LL))(v28, 1LL);
      uint64_t v30 = v16[3];
      uint64_t v31 = type metadata accessor for TrafficIncident(0LL);
      v18[50] = v31;
      v18[51] = &protocol witness table for TrafficIncident;
      uint64_t v32 = v136;
      uint64_t v33 = __swift_allocate_boxed_opaque_existential_0(v136);
      swift_storeEnumTagMultiPayload(v33, v31, 10LL);
      uint64_t v35 = v16[7];
      uint64_t v34 = v16[8];
      __swift_project_boxed_opaque_existential_1(v16 + 4, v35);
      uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 80))(v35, v34);
      v18[90] = v36;
      uint64_t v37 = *(int **)(*(void *)v30 + 112LL);
      uint64_t v150 = (char *)v37 + *v37;
      uint64_t v38 = (void *)swift_task_alloc(v37[1]);
      v18[91] = v38;
      *uint64_t v38 = v18;
      v38[1] = TrafficIncidentRequestSupportedCheckFlow.execute();
      uint64_t v39 = v18[75];
LABEL_12:
      uint64_t v68 = v32;
      uint64_t v69 = v36;
      uint64_t v70 = (uint64_t (*)(uint64_t, void *, uint64_t))v150;
      return (id)v70(v39, v68, v69);
    }

LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v71 = TrafficIncidentRequestSupportedCheckFlow.isAppSupported()();
  if ((v71 & 1) == 0)
  {
    uint64_t v74 = *(void *)(v0 + 656);
    uint64_t v75 = *(void *)(v0 + 640);
    uint64_t v76 = *(void *)(v0 + 632);
    static SiriKitEventSender.current.getter(v71);
    uint64_t v142 = *(void *)(v0 + 48);
    uint64_t v146 = *(void *)(v0 + 40);
    uint64_t v152 = (void *)(v0 + 16);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v146);
    (*(void (**)(uint64_t, void, uint64_t))(v75 + 104))(v74, enum case for ActivityType.failed(_:), v76);
    uint64_t v77 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INReportIncidentIntent,  &OBJC_CLASS___INReportIncidentIntent_ptr);
    id result = [(id)swift_getObjCClassFromMetadata(v77) typeName];
    if (result)
    {
      uint64_t v78 = result;
      uint64_t v134 = *(void *)(v0 + 656);
      os_log_type_t v138 = (void *)(v0 + 56);
      uint64_t v79 = *(void *)(v0 + 624);
      unint64_t v80 = *(void **)(v0 + 552);
      type metadata accessor for SiriKitEvent(0LL);
      uint64_t v81 = (void *)v0;
      uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
      uint64_t v84 = v83;

      uint64_t v85 = enum case for SiriKitReliabilityCodes.intentNotSupportedByApp(_:);
      uint64_t v86 = type metadata accessor for SiriKitReliabilityCodes(0LL);
      uint64_t v87 = *(void *)(v86 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 104))(v79, v85, v86);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v87 + 56))(v79, 0LL, 1LL, v86);
      swift_retain(v80);
      uint64_t v88 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)( v134,  v82,  v84,  v79,  partial apply for closure #3 in TrafficIncidentRequestSupportedCheckFlow.execute(),  v80);
      dispatch thunk of SiriKitEventSending.send(_:)(v88, v146, v142);
      swift_release(v88);
      __swift_destroy_boxed_opaque_existential_0Tm(v152);
      uint64_t v89 = type metadata accessor for UnsupportedError();
      uint64_t v90 = swift_allocObject(v89, 32LL, 7LL);
      *(void *)(v90 + 16) = 0xD000000000000011LL;
      *(void *)(v90 + 24) = 0x800000000009F1F0LL;
      uint64_t v91 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type UnsupportedError and conformance UnsupportedError,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for UnsupportedError,  (uint64_t)&protocol conformance descriptor for UnsupportedError);
      uint64_t v92 = swift_allocError(v89, v91, 0LL, 0LL);
      *uint64_t v93 = v90;
      (*(void (**)(uint64_t, uint64_t))(*v80 + 128LL))(v92, 1LL);
      uint64_t v94 = v80[3];
      uint64_t v95 = type metadata accessor for TrafficIncident(0LL);
      v81[10] = v95;
      v81[11] = &protocol witness table for TrafficIncident;
      uint64_t v32 = v138;
      uint64_t v96 = __swift_allocate_boxed_opaque_existential_0(v138);
      swift_storeEnumTagMultiPayload(v96, v95, 7LL);
      uint64_t v98 = v80[7];
      uint64_t v97 = v80[8];
      __swift_project_boxed_opaque_existential_1(v80 + 4, v98);
      uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v97 + 80))(v98, v97);
      v81[95] = v36;
      uint64_t v99 = *(int **)(*(void *)v94 + 112LL);
      uint64_t v150 = (char *)v99 + *v99;
      uint64_t v100 = (void *)swift_task_alloc(v99[1]);
      v81[96] = v100;
      *uint64_t v100 = v81;
      v100[1] = TrafficIncidentRequestSupportedCheckFlow.execute();
      uint64_t v39 = v81[74];
      goto LABEL_12;
    }

    goto LABEL_23;
  }

  uint64_t v72 = (*(uint64_t (**)(void))(**(void **)(v0 + 552) + 176LL))();
  if ((v72 & 1) != 0)
  {
    uint64_t v73 = swift_task_alloc(dword_C92CC);
    *(void *)(v0 + 84specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v73;
    *(void *)uint64_t v73 = v0;
    *(void *)(v73 + 8) = TrafficIncidentRequestSupportedCheckFlow.execute();
    *(_OWORD *)(v73 + 48) = *(_OWORD *)(v0 + 544);
    return (id)swift_task_switch(TrafficIncidentRequestSupportedCheckFlow.getPreciseLocation(), 0LL, 0LL);
  }

  uint64_t v101 = *(void *)(v0 + 648);
  uint64_t v102 = *(void *)(v0 + 640);
  uint64_t v103 = *(void *)(v0 + 632);
  static SiriKitEventSender.current.getter(v72);
  uint64_t v143 = *(void *)(v0 + 208);
  uint64_t v147 = *(void *)(v0 + 200);
  uint64_t v153 = (void *)(v0 + 176);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), v147);
  (*(void (**)(uint64_t, void, uint64_t))(v102 + 104))(v101, enum case for ActivityType.failed(_:), v103);
  uint64_t v104 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INReportIncidentIntent,  &OBJC_CLASS___INReportIncidentIntent_ptr);
  id result = [(id)swift_getObjCClassFromMetadata(v104) typeName];
  if (result)
  {
    uint64_t v105 = result;
    uint64_t v135 = (void *)(v0 + 216);
    uint64_t v139 = (void *)(v0 + 256);
    uint64_t v132 = *(void *)(v0 + 648);
    uint64_t v106 = *(void *)(v0 + 624);
    uint64_t v107 = *(void **)(v0 + 552);
    type metadata accessor for SiriKitEvent(0LL);
    uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v105);
    uint64_t v110 = v109;

    uint64_t v111 = enum case for SiriKitReliabilityCodes.targetDeviceIncompatible(_:);
    uint64_t v112 = type metadata accessor for SiriKitReliabilityCodes(0LL);
    uint64_t v113 = (void *)v0;
    uint64_t v114 = *(void *)(v112 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v114 + 104))(v106, v111, v112);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v114 + 56))(v106, 0LL, 1LL, v112);
    swift_retain(v107);
    uint64_t v115 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)( v132,  v108,  v110,  v106,  partial apply for closure #4 in TrafficIncidentRequestSupportedCheckFlow.execute(),  v107);
    dispatch thunk of SiriKitEventSending.send(_:)(v115, v147, v143);
    swift_release(v115);
    __swift_destroy_boxed_opaque_existential_0Tm(v153);
    uint64_t v116 = type metadata accessor for UnsupportedError();
    uint64_t v117 = swift_allocObject(v116, 32LL, 7LL);
    *(void *)(v117 + 16) = 0xD000000000000014LL;
    *(void *)(v117 + 24) = 0x800000000009F210LL;
    uint64_t v118 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type UnsupportedError and conformance UnsupportedError,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for UnsupportedError,  (uint64_t)&protocol conformance descriptor for UnsupportedError);
    uint64_t v119 = swift_allocError(v116, v118, 0LL, 0LL);
    *unint64_t v120 = v117;
    (*(void (**)(uint64_t, uint64_t))(*v107 + 128LL))(v119, 1LL);
    uint64_t v154 = v107[3];
    uint64_t v121 = type metadata accessor for TrafficIncident(0LL);
    v113[30] = v121;
    v113[31] = &protocol witness table for TrafficIncident;
    uint64_t v122 = __swift_allocate_boxed_opaque_existential_0(v135);
    uint64_t v123 = v107[7];
    uint64_t v124 = v107[8];
    __swift_project_boxed_opaque_existential_1(v107 + 4, v123);
    (*(void (**)(uint64_t, uint64_t))(v124 + 32))(v123, v124);
    uint64_t v125 = v113[35];
    uint64_t v126 = v113[36];
    __swift_project_boxed_opaque_existential_1(v139, v125);
    *uint64_t v122 = DeviceState.deviceType.getter(v125, v126);
    swift_storeEnumTagMultiPayload(v122, v121, 0LL);
    uint64_t v128 = v107[7];
    uint64_t v127 = v107[8];
    __swift_project_boxed_opaque_existential_1(v107 + 4, v128);
    uint64_t v129 = (*(uint64_t (**)(uint64_t, uint64_t))(v127 + 80))(v128, v127);
    v113[100] = v129;
    uint64_t v130 = *(int **)(*(void *)v154 + 112LL);
    uint64_t v148 = (char *)v130 + *v130;
    uint64_t v131 = (void *)swift_task_alloc(v130[1]);
    v113[101] = v131;
    *uint64_t v131 = v113;
    v131[1] = TrafficIncidentRequestSupportedCheckFlow.execute();
    uint64_t v39 = v113[73];
    uint64_t v68 = v135;
    uint64_t v69 = v129;
    uint64_t v70 = (uint64_t (*)(uint64_t, void *, uint64_t))v148;
    return (id)v70(v39, v68, v69);
  }

uint64_t TrafficIncidentRequestSupportedCheckFlow.execute()()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 688);
  uint64_t v4 = *(void *)(*v1 + 680);
  *(void *)(*v1 + 696) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = TrafficIncidentRequestSupportedCheckFlow.execute();
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 496));
    uint64_t v5 = TrafficIncidentRequestSupportedCheckFlow.execute();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  void v17[5];
  char v1 = *(void *)(v0 + 616);
  uint64_t v2 = *(void *)(v0 + 608);
  uint64_t v16 = *(void *)(v0 + 576);
  uint64_t v3 = *(void *)(v0 + 568);
  uint64_t v4 = *(void *)(v0 + 560);
  uint64_t v5 = *(void **)(v0 + 552);
  char v6 = (uint64_t)(v5 + 4);
  uint64_t v7 = v5[7];
  uint64_t v8 = v5[8];
  __swift_project_boxed_opaque_existential_1(v5 + 4, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 104))(v17, v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  outlined init with copy of DeviceState(v6, v0 + 96);
  uint64_t v9 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = (v9 + 16) & ~v9;
  uint64_t v11 = (v16 + v10 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v12 = swift_allocObject(&unk_BC250, v11 + 40, v9 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v12 + v10, v2, v4);
  outlined init with take of CATType((__int128 *)(v0 + 96), v12 + v11);
  uint64_t v13 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  *(void *)(v0 + 704) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v17,  &closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)partial apply,  v12);
  id v14 = (void *)swift_task_alloc(async function pointer to SimpleOutputFlowAsync.execute()[1]);
  *(void *)(v0 + 71__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v14;
  *id v14 = v0;
  v14[1] = TrafficIncidentRequestSupportedCheckFlow.execute();
  return SimpleOutputFlowAsync.execute()(*(void *)(v0 + 544));
}

{
  uint64_t v0;
  uint64_t v1;
  char v1 = *(void *)(*(void *)v0 + 704LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 712LL));
  swift_release(v1);
  return swift_task_switch(TrafficIncidentRequestSupportedCheckFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  (*(void (**)(void, void))(*(void *)(v0 + 568) + 8LL))(*(void *)(v0 + 616), *(void *)(v0 + 560));
  char v1 = *(void *)(v0 + 664);
  uint64_t v2 = *(void *)(v0 + 656);
  uint64_t v3 = *(void *)(v0 + 648);
  uint64_t v4 = *(void *)(v0 + 624);
  uint64_t v5 = *(void *)(v0 + 616);
  char v6 = *(void *)(v0 + 608);
  uint64_t v7 = *(void *)(v0 + 600);
  uint64_t v8 = *(void *)(v0 + 592);
  uint64_t v9 = *(void *)(v0 + 584);
  swift_task_dealloc(*(void *)(v0 + 672));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 728);
  uint64_t v4 = *(void *)(*v1 + 720);
  *(void *)(*v1 + 736) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = TrafficIncidentRequestSupportedCheckFlow.execute();
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 376));
    uint64_t v5 = TrafficIncidentRequestSupportedCheckFlow.execute();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  void v17[5];
  char v1 = *(void *)(v0 + 608);
  uint64_t v2 = *(void *)(v0 + 600);
  uint64_t v16 = *(void *)(v0 + 576);
  uint64_t v3 = *(void *)(v0 + 568);
  uint64_t v4 = *(void *)(v0 + 560);
  uint64_t v5 = *(void **)(v0 + 552);
  char v6 = (uint64_t)(v5 + 4);
  uint64_t v7 = v5[7];
  uint64_t v8 = v5[8];
  __swift_project_boxed_opaque_existential_1(v5 + 4, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 104))(v17, v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v4);
  outlined init with copy of DeviceState(v6, v0 + 416);
  uint64_t v9 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = (v9 + 16) & ~v9;
  uint64_t v11 = (v16 + v10 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v12 = swift_allocObject(&unk_BC228, v11 + 40, v9 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v12 + v10, v1, v4);
  outlined init with take of CATType((__int128 *)(v0 + 416), v12 + v11);
  uint64_t v13 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  *(void *)(v0 + 744) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v17,  &closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)partial apply,  v12);
  id v14 = (void *)swift_task_alloc(async function pointer to SimpleOutputFlowAsync.execute()[1]);
  *(void *)(v0 + 75__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v14;
  *id v14 = v0;
  v14[1] = TrafficIncidentRequestSupportedCheckFlow.execute();
  return SimpleOutputFlowAsync.execute()(*(void *)(v0 + 544));
}

{
  uint64_t v0;
  uint64_t v1;
  char v1 = *(void *)(*(void *)v0 + 744LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 752LL));
  swift_release(v1);
  return swift_task_switch(TrafficIncidentRequestSupportedCheckFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  (*(void (**)(void, void))(*(void *)(v0 + 568) + 8LL))(*(void *)(v0 + 600), *(void *)(v0 + 560));
  char v1 = *(void *)(v0 + 664);
  uint64_t v2 = *(void *)(v0 + 656);
  uint64_t v3 = *(void *)(v0 + 648);
  uint64_t v4 = *(void *)(v0 + 624);
  uint64_t v5 = *(void *)(v0 + 616);
  char v6 = *(void *)(v0 + 608);
  uint64_t v7 = *(void *)(v0 + 600);
  uint64_t v8 = *(void *)(v0 + 592);
  uint64_t v9 = *(void *)(v0 + 584);
  swift_task_dealloc(*(void *)(v0 + 672));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 768);
  uint64_t v4 = *(void *)(*v1 + 760);
  *(void *)(*v1 + 776) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = TrafficIncidentRequestSupportedCheckFlow.execute();
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 56));
    uint64_t v5 = TrafficIncidentRequestSupportedCheckFlow.execute();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  void v17[5];
  char v1 = *(void *)(v0 + 608);
  uint64_t v2 = *(void *)(v0 + 592);
  uint64_t v16 = *(void *)(v0 + 576);
  uint64_t v3 = *(void *)(v0 + 568);
  uint64_t v4 = *(void *)(v0 + 560);
  uint64_t v5 = *(void **)(v0 + 552);
  char v6 = (uint64_t)(v5 + 4);
  uint64_t v7 = v5[7];
  uint64_t v8 = v5[8];
  __swift_project_boxed_opaque_existential_1(v5 + 4, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 104))(v17, v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v4);
  outlined init with copy of DeviceState(v6, v0 + 136);
  uint64_t v9 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = (v9 + 16) & ~v9;
  uint64_t v11 = (v16 + v10 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v12 = swift_allocObject(&unk_BC1D8, v11 + 40, v9 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v12 + v10, v1, v4);
  outlined init with take of CATType((__int128 *)(v0 + 136), v12 + v11);
  uint64_t v13 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  *(void *)(v0 + 784) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v17,  &async function pointer to partial apply for closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:),  v12);
  id v14 = (void *)swift_task_alloc(async function pointer to SimpleOutputFlowAsync.execute()[1]);
  *(void *)(v0 + 79__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v14;
  *id v14 = v0;
  v14[1] = TrafficIncidentRequestSupportedCheckFlow.execute();
  return SimpleOutputFlowAsync.execute()(*(void *)(v0 + 544));
}

{
  uint64_t v0;
  uint64_t v1;
  char v1 = *(void *)(*(void *)v0 + 784LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 792LL));
  swift_release(v1);
  return swift_task_switch(TrafficIncidentRequestSupportedCheckFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  (*(void (**)(void, void))(*(void *)(v0 + 568) + 8LL))(*(void *)(v0 + 592), *(void *)(v0 + 560));
  char v1 = *(void *)(v0 + 664);
  uint64_t v2 = *(void *)(v0 + 656);
  uint64_t v3 = *(void *)(v0 + 648);
  uint64_t v4 = *(void *)(v0 + 624);
  uint64_t v5 = *(void *)(v0 + 616);
  char v6 = *(void *)(v0 + 608);
  uint64_t v7 = *(void *)(v0 + 600);
  uint64_t v8 = *(void *)(v0 + 592);
  uint64_t v9 = *(void *)(v0 + 584);
  swift_task_dealloc(*(void *)(v0 + 672));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 808);
  uint64_t v4 = *(void *)(*v1 + 800);
  *(void *)(*v1 + 816) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = TrafficIncidentRequestSupportedCheckFlow.execute();
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 216));
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 256));
    uint64_t v5 = TrafficIncidentRequestSupportedCheckFlow.execute();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  void v17[5];
  char v1 = *(void *)(v0 + 608);
  uint64_t v2 = *(void *)(v0 + 584);
  uint64_t v16 = *(void *)(v0 + 576);
  uint64_t v3 = *(void *)(v0 + 568);
  uint64_t v4 = *(void *)(v0 + 560);
  uint64_t v5 = *(void **)(v0 + 552);
  char v6 = (uint64_t)(v5 + 4);
  uint64_t v7 = v5[7];
  uint64_t v8 = v5[8];
  __swift_project_boxed_opaque_existential_1(v5 + 4, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 104))(v17, v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v4);
  outlined init with copy of DeviceState(v6, v0 + 296);
  uint64_t v9 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = (v9 + 16) & ~v9;
  uint64_t v11 = (v16 + v10 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v12 = swift_allocObject(&unk_BC200, v11 + 40, v9 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v12 + v10, v1, v4);
  outlined init with take of CATType((__int128 *)(v0 + 296), v12 + v11);
  uint64_t v13 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  *(void *)(v0 + 824) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v17,  &closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)partial apply,  v12);
  id v14 = (void *)swift_task_alloc(async function pointer to SimpleOutputFlowAsync.execute()[1]);
  *(void *)(v0 + 83__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v14;
  *id v14 = v0;
  v14[1] = TrafficIncidentRequestSupportedCheckFlow.execute();
  return SimpleOutputFlowAsync.execute()(*(void *)(v0 + 544));
}

{
  uint64_t v0;
  uint64_t v1;
  char v1 = *(void *)(*(void *)v0 + 824LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 832LL));
  swift_release(v1);
  return swift_task_switch(TrafficIncidentRequestSupportedCheckFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  (*(void (**)(void, void))(*(void *)(v0 + 568) + 8LL))(*(void *)(v0 + 584), *(void *)(v0 + 560));
  char v1 = *(void *)(v0 + 664);
  uint64_t v2 = *(void *)(v0 + 656);
  uint64_t v3 = *(void *)(v0 + 648);
  uint64_t v4 = *(void *)(v0 + 624);
  uint64_t v5 = *(void *)(v0 + 616);
  char v6 = *(void *)(v0 + 608);
  uint64_t v7 = *(void *)(v0 + 600);
  uint64_t v8 = *(void *)(v0 + 592);
  uint64_t v9 = *(void *)(v0 + 584);
  swift_task_dealloc(*(void *)(v0 + 672));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  char v1 = *(void **)v0;
  uint64_t v13 = *(void **)v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 840LL));
  uint64_t v2 = v1[84];
  uint64_t v3 = v1[83];
  uint64_t v4 = v1[82];
  uint64_t v5 = v1[81];
  char v6 = v1[78];
  uint64_t v7 = v1[77];
  uint64_t v8 = v1[76];
  uint64_t v9 = v1[75];
  uint64_t v10 = v1[74];
  uint64_t v11 = v1[73];
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return ((uint64_t (*)(void))v13[1])();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v1 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 496));
  uint64_t v2 = *(void *)(v0 + 696);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v1);
  uint64_t v3 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  uint64_t v4 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( &v15,  &async function pointer to closure #5 in TrafficIncidentRequestSupportedCheckFlow.execute(),  0LL);
  *(void *)(v0 + 536) = v4;
  static ExecuteResponse.complete<A>(next:)(v0 + 536, v3, &protocol witness table for SimpleOutputFlowAsync);
  swift_errorRelease(v2);
  swift_release(v4);
  uint64_t v5 = *(void *)(v0 + 664);
  char v6 = *(void *)(v0 + 656);
  uint64_t v7 = *(void *)(v0 + 648);
  uint64_t v8 = *(void *)(v0 + 624);
  uint64_t v9 = *(void *)(v0 + 616);
  uint64_t v10 = *(void *)(v0 + 608);
  uint64_t v11 = *(void *)(v0 + 600);
  uint64_t v12 = *(void *)(v0 + 592);
  uint64_t v13 = *(void *)(v0 + 584);
  swift_task_dealloc(*(void *)(v0 + 672));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v1 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 376));
  uint64_t v2 = *(void *)(v0 + 736);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v1);
  uint64_t v3 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  uint64_t v4 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( &v15,  &async function pointer to closure #5 in TrafficIncidentRequestSupportedCheckFlow.execute(),  0LL);
  *(void *)(v0 + 536) = v4;
  static ExecuteResponse.complete<A>(next:)(v0 + 536, v3, &protocol witness table for SimpleOutputFlowAsync);
  swift_errorRelease(v2);
  swift_release(v4);
  uint64_t v5 = *(void *)(v0 + 664);
  char v6 = *(void *)(v0 + 656);
  uint64_t v7 = *(void *)(v0 + 648);
  uint64_t v8 = *(void *)(v0 + 624);
  uint64_t v9 = *(void *)(v0 + 616);
  uint64_t v10 = *(void *)(v0 + 608);
  uint64_t v11 = *(void *)(v0 + 600);
  uint64_t v12 = *(void *)(v0 + 592);
  uint64_t v13 = *(void *)(v0 + 584);
  swift_task_dealloc(*(void *)(v0 + 672));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v1 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 56));
  uint64_t v2 = *(void *)(v0 + 776);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v1);
  uint64_t v3 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  uint64_t v4 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( &v15,  &async function pointer to closure #5 in TrafficIncidentRequestSupportedCheckFlow.execute(),  0LL);
  *(void *)(v0 + 536) = v4;
  static ExecuteResponse.complete<A>(next:)(v0 + 536, v3, &protocol witness table for SimpleOutputFlowAsync);
  swift_errorRelease(v2);
  swift_release(v4);
  uint64_t v5 = *(void *)(v0 + 664);
  char v6 = *(void *)(v0 + 656);
  uint64_t v7 = *(void *)(v0 + 648);
  uint64_t v8 = *(void *)(v0 + 624);
  uint64_t v9 = *(void *)(v0 + 616);
  uint64_t v10 = *(void *)(v0 + 608);
  uint64_t v11 = *(void *)(v0 + 600);
  uint64_t v12 = *(void *)(v0 + 592);
  uint64_t v13 = *(void *)(v0 + 584);
  swift_task_dealloc(*(void *)(v0 + 672));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 216));
  char v1 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 256));
  uint64_t v2 = *(void *)(v0 + 816);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v1);
  uint64_t v3 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  uint64_t v4 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( &v15,  &async function pointer to closure #5 in TrafficIncidentRequestSupportedCheckFlow.execute(),  0LL);
  *(void *)(v0 + 536) = v4;
  static ExecuteResponse.complete<A>(next:)(v0 + 536, v3, &protocol witness table for SimpleOutputFlowAsync);
  swift_errorRelease(v2);
  swift_release(v4);
  uint64_t v5 = *(void *)(v0 + 664);
  char v6 = *(void *)(v0 + 656);
  uint64_t v7 = *(void *)(v0 + 648);
  uint64_t v8 = *(void *)(v0 + 624);
  uint64_t v9 = *(void *)(v0 + 616);
  uint64_t v10 = *(void *)(v0 + 608);
  uint64_t v11 = *(void *)(v0 + 600);
  uint64_t v12 = *(void *)(v0 + 592);
  uint64_t v13 = *(void *)(v0 + 584);
  swift_task_dealloc(*(void *)(v0 + 672));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in TrafficIncidentRequestSupportedCheckFlow.execute()()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter( 0xD000000000000027LL,  0x800000000009F260LL);
}

uint64_t closure #2 in TrafficIncidentRequestSupportedCheckFlow.execute()()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter( 0xD000000000000025LL,  0x800000000009F230LL);
}

uint64_t closure #3 in TrafficIncidentRequestSupportedCheckFlow.execute()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 192LL))();
  uint64_t v8 = App.__allocating_init(appIdentifier:)(v7);
  dispatch thunk of SiriKitEvent.SiriKitEventBuilder.app.setter(v8);
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter(a3, a4);
}

uint64_t TrafficIncidentRequestSupportedCheckFlow.isDeviceSupported()()
{
  char v1 = v0;
  uint64_t v2 = v0 + 4;
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  __swift_project_boxed_opaque_existential_1(v0 + 4, v3);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 32))(v31, v3, v4);
  uint64_t v5 = v32;
  uint64_t v6 = v33;
  __swift_project_boxed_opaque_existential_1(v31, v32);
  char v7 = dispatch thunk of DeviceState.isXRDevice.getter(v5, v6);
  __swift_destroy_boxed_opaque_existential_0Tm(v31);
  if ((v7 & 1) != 0)
  {
    char v8 = 0;
  }

  else
  {
    uint64_t v9 = v1[7];
    uint64_t v10 = v1[8];
    __swift_project_boxed_opaque_existential_1(v2, v9);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 32))(v31, v9, v10);
    uint64_t v11 = v32;
    uint64_t v12 = v33;
    __swift_project_boxed_opaque_existential_1(v31, v32);
    if ((dispatch thunk of DeviceState.isPhone.getter(v11, v12) & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_0Tm(v31);
      char v8 = 1;
    }

    else
    {
      uint64_t v13 = v1[7];
      uint64_t v14 = v1[8];
      __swift_project_boxed_opaque_existential_1(v2, v13);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v14 + 32))(v28, v13, v14);
      uint64_t v15 = v29;
      uint64_t v16 = v30;
      __swift_project_boxed_opaque_existential_1(v28, v29);
      char v17 = dispatch thunk of DeviceState.isPad.getter(v15, v16);
      __swift_destroy_boxed_opaque_existential_0Tm(v28);
      __swift_destroy_boxed_opaque_existential_0Tm(v31);
      if ((v17 & 1) != 0) {
        goto LABEL_7;
      }
      uint64_t v18 = v1[7];
      uint64_t v19 = v1[8];
      __swift_project_boxed_opaque_existential_1(v2, v18);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v19 + 32))(v31, v18, v19);
      uint64_t v20 = v32;
      uint64_t v21 = v33;
      __swift_project_boxed_opaque_existential_1(v31, v32);
      char v22 = dispatch thunk of DeviceState.isCarPlay.getter(v20, v21);
      __swift_destroy_boxed_opaque_existential_0Tm(v31);
      if ((v22 & 1) != 0)
      {
LABEL_7:
        char v8 = 1;
      }

      else
      {
        uint64_t v24 = v1[7];
        uint64_t v23 = v1[8];
        __swift_project_boxed_opaque_existential_1(v2, v24);
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v23 + 32))(v31, v24, v23);
        uint64_t v25 = v32;
        uint64_t v26 = v33;
        __swift_project_boxed_opaque_existential_1(v31, v32);
        char v8 = dispatch thunk of DeviceState.isPod.getter(v25, v26);
        __swift_destroy_boxed_opaque_existential_0Tm(v31);
      }
    }
  }

  return v8 & 1;
}

uint64_t TrafficIncidentRequestSupportedCheckFlow.getPreciseLocation()(uint64_t a1)
{
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = v1;
  return swift_task_switch(TrafficIncidentRequestSupportedCheckFlow.getPreciseLocation(), 0LL, 0LL);
}

uint64_t TrafficIncidentRequestSupportedCheckFlow.getPreciseLocation()()
{
  void (*v11)(uint64_t *__return_ptr);
  char v12;
  _BYTE *v13;
  BOOL v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t *__return_ptr);
  _BYTE *v27;
  char v28;
  char v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  os_log_s *v40;
  os_log_type_t v41;
  id v42;
  uint8_t *v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t (*v49)(id, void);
  id v50;
  uint64_t v51;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + 16LL);
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v1 + 240LL))();
  *(void *)(v0 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0LL;
  uint64_t v4 = (double *)(v0 + 40);
  uint64_t v5 = (BOOL *)(v0 + 64);
  if (v3) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = 0LL;
  }
  if (v3) {
    unint64_t v7 = v3;
  }
  else {
    unint64_t v7 = 0xE000000000000000LL;
  }
  uint64_t v8 = swift_task_alloc(32LL);
  *(void *)(v8 + 16) = v4;
  uint64_t v54 = v0 + 16;
  if ((v7 & 0x1000000000000000LL) != 0 || !(v7 & 0x2000000000000000LL | v6 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)( partial apply for closure #1 in closure #1 in Double.init<A>(_:),  v8,  v6,  v7,  &type metadata for Bool);
    goto LABEL_14;
  }

  uint64_t v9 = swift_task_alloc(32LL);
  *(void *)(v9 + 16) = partial apply for closure #1 in closure #1 in Double.init<A>(_:);
  *(void *)(v9 + 24) = v8;
  if ((v7 & 0x2000000000000000LL) == 0)
  {
    if ((v6 & 0x1000000000000000LL) != 0)
    {
      uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v11 = (void (*)(uint64_t *__return_ptr))partial apply for closure #1 in closure #1 in Double.init<A>(_:);
    }

    else
    {
      uint64_t v10 = _StringObject.sharedUTF8.getter(v6, v7);
      uint64_t v11 = *(void (**)(uint64_t *__return_ptr))(v9 + 16);
      if (!v10)
      {
        v11((uint64_t *)((char *)&v55 + 3));
        uint64_t v12 = BYTE3(v55);
        goto LABEL_13;
      }
    }

    ((void (*)(uint64_t *__return_ptr, uint64_t))v11)((uint64_t *)((char *)&v55 + 2), v10);
    uint64_t v12 = BYTE2(v55);
LABEL_13:
    *uint64_t v5 = v12;
    swift_task_dealloc(v9);
LABEL_14:
    swift_bridgeObjectRelease(v7);
    goto LABEL_21;
  }

  *(void *)(v0 + 16) = v6;
  *(void *)(v0 + 24) = v7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v14 = (v6 > 0x20u || ((0x100003E01uLL >> v6) & 1) == 0)
     && (uint64_t v13 = (_BYTE *)_swift_stdlib_strtod_clocale(v0 + 16, v0 + 40)) != 0LL
     && *v13 == 0;
  *uint64_t v5 = v14;
  swift_bridgeObjectRelease(v7);
  swift_task_dealloc(v9);
LABEL_21:
  uint64_t v15 = (void *)(v0 + 32);
  uint64_t v16 = *v5;
  char v17 = swift_task_dealloc(v8);
  uint64_t v18 = *v4;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 248LL))(v17);
  if (v20) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = 0LL;
  }
  if (v20) {
    char v22 = v20;
  }
  else {
    char v22 = 0xE000000000000000LL;
  }
  uint64_t *v15 = 0LL;
  uint64_t v23 = swift_task_alloc(32LL);
  *(void *)(v23 + 16) = v15;
  if ((v22 & 0x1000000000000000LL) != 0 || !(v22 & 0x2000000000000000LL | v21 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)( partial apply for closure #1 in closure #1 in Double.init<A>(_:),  v23,  v21,  v22,  &type metadata for Bool);
    swift_bridgeObjectRelease(v22);
    uint64_t v28 = *(_BYTE *)(v0 + 65);
  }

  else
  {
    uint64_t v24 = swift_task_alloc(32LL);
    *(void *)(v24 + 16) = partial apply for closure #1 in closure #1 in Double.init<A>(_:);
    *(void *)(v24 + 24) = v23;
    if ((v22 & 0x2000000000000000LL) == 0)
    {
      if ((v21 & 0x1000000000000000LL) != 0)
      {
        uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v26 = (void (*)(uint64_t *__return_ptr))partial apply for closure #1 in closure #1 in Double.init<A>(_:);
      }

      else
      {
        uint64_t v25 = _StringObject.sharedUTF8.getter(v21, v22);
        uint64_t v26 = *(void (**)(uint64_t *__return_ptr))(v24 + 16);
        if (!v25)
        {
          v26((uint64_t *)((char *)&v55 + 1));
          uint64_t v28 = BYTE1(v55);
          goto LABEL_39;
        }
      }

      ((void (*)(uint64_t *__return_ptr, uint64_t))v26)(&v55, v25);
      uint64_t v28 = v55;
LABEL_39:
      swift_task_dealloc(v24);
      swift_bridgeObjectRelease(v22);
      goto LABEL_40;
    }

    *(void *)(v0 + 16) = v21;
    *(void *)(v0 + 24) = v22 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v28 = (v21 > 0x20u || ((0x100003E01uLL >> v21) & 1) == 0)
       && (uint64_t v27 = (_BYTE *)_swift_stdlib_strtod_clocale(v54, v0 + 32)) != 0LL
       && *v27 == 0;
    swift_bridgeObjectRelease(v22);
    swift_task_dealloc(v24);
  }

uint64_t TrafficIncidentRequestSupportedCheckFlow.isAppSupported()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 192LL))();
  uint64_t v3 = v2;
  os_log_type_t v10 = static os_log_type_t.info.getter(v1, v2, v4, v5, v6, v7, v8, v9);
  uint64_t v11 = *(os_log_s **)(v0 + 72);
  os_log_type_t v12 = v10;
  if (os_log_type_enabled(v11, v10))
  {
    swift_bridgeObjectRetain_n(v3, 2LL);
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    v24[0] = v1;
    v24[1] = v3;
    swift_bridgeObjectRetain(v3);
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v16 = String.init<A>(describing:)(v24, v15);
    unint64_t v18 = v17;
    v24[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v24, &v24[1]);
    swift_bridgeObjectRelease_n(v3, 2LL);
    swift_bridgeObjectRelease(v18);
    _os_log_impl(&dword_0, v11, v12, "appName is %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  if (v3)
  {
    v24[0] = 1936744813LL;
    v24[1] = 0xE400000000000000LL;
    uint64_t v22 = v1;
    uint64_t v23 = v3;
    unint64_t v19 = lazy protocol witness table accessor for type String and conformance String();
    if (StringProtocol.caseInsensitiveCompare<A>(_:)( &v22,  &type metadata for String,  &type metadata for String,  v19,  v19))
    {
      strcpy((char *)v24, "com.apple.Maps");
      HIBYTE(v24[1]) = -18;
      uint64_t v22 = v1;
      uint64_t v23 = v3;
      uint64_t v20 = StringProtocol.caseInsensitiveCompare<A>(_:)( &v22,  &type metadata for String,  &type metadata for String,  v19,  v19);
      swift_bridgeObjectRelease(v3);
      if (v20) {
        return 0LL;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v3);
    }
  }

  return 1LL;
}

void TrafficIncidentRequestSupportedCheckFlow.isReportMapsProblems()()
{
  uint64_t v1 = (char *)sub_88414 + 4 * byte_9AAA0[(*(unsigned __int8 (**)(void))(**(void **)(v0 + 16) + 184LL))()];
  __asm { BR              X12 }

uint64_t sub_88414()
{
  char v0 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x746E656469636361LL,  0xE800000000000000LL,  0x6D656C626F7270LL,  0xE700000000000000LL,  0LL);
  swift_bridgeObjectRelease(0xE800000000000000LL);
  return v0 & 1;
}

uint64_t partial apply for closure #3 in TrafficIncidentRequestSupportedCheckFlow.execute()(uint64_t a1)
{
  return closure #3 in TrafficIncidentRequestSupportedCheckFlow.execute()( a1,  v1,  0xD000000000000011LL,  0x800000000009F1F0LL);
}

uint64_t MockTrafficIncidentRequestSupportedCheckFlow.deinit()
{
  outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue( *(id *)(v0 + 80),  *(_BYTE *)(v0 + 88));
  return v0;
}

uint64_t MockTrafficIncidentRequestSupportedCheckFlow.__deallocating_deinit()
{
  outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue( *(id *)(v0 + 80),  *(_BYTE *)(v0 + 88));
  return swift_deallocClassInstance(v0, 89LL, 7LL);
}

uint64_t protocol witness for Flow.on(input:) in conformance TrafficIncidentRequestSupportedCheckFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152LL))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance TrafficIncidentRequestSupportedCheckFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160LL))();
}

uint64_t protocol witness for Flow.execute() in conformance TrafficIncidentRequestSupportedCheckFlow( uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 168LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance TrafficIncidentRequestSupportedCheckFlow@<X0>( uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 120LL))();
  *(void *)a1 = result;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t MockTrafficIncidentRequestSupportedCheckFlow.__allocating_init(intent:flowHelper:)( uint64_t a1, void *a2)
{
  uint64_t v5 = swift_allocObject(v2, 89LL, 7LL);
  outlined init with copy of DeviceState((uint64_t)a2, (uint64_t)v7);
  TrafficIncidentRequestSupportedCheckFlow.init(intent:flowHelper:)(a1, v7);
  __swift_destroy_boxed_opaque_existential_0Tm(a2);
  return v5;
}

uint64_t MockTrafficIncidentRequestSupportedCheckFlow.init(intent:flowHelper:)(uint64_t a1, void *a2)
{
  return v2;
}

uint64_t vtable thunk for TrafficIncidentRequestSupportedCheckFlow.isDeviceSupported() dispatching to MockTrafficIncidentRequestSupportedCheckFlow.isDeviceSupported()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216LL))();
}

uint64_t partial apply for closure #4 in TrafficIncidentRequestSupportedCheckFlow.execute()(uint64_t a1)
{
  return closure #3 in TrafficIncidentRequestSupportedCheckFlow.execute()( a1,  v1,  0xD000000000000014LL,  0x800000000009F210LL);
}

uint64_t sub_887B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120LL))();
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_887EC(uint64_t a1, uint64_t a2)
{
  id v2 = *(id *)a1;
  uint64_t v3 = *(uint64_t (**)(id, uint64_t))(**(void **)a2 + 128LL);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 8);
  outlined copy of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(*(id *)a1, v4);
  return v3(v2, v4);
}

uint64_t initializeBufferWithCopyOfBuffer for TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue( uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  outlined copy of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(uint64_t a1)
{
}

uint64_t assignWithCopy for TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue( uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  outlined copy of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  char v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v5, v6);
  return a1;
}

uint64_t assignWithTake for TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue( uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v4, v5);
  return a1;
}

ValueMetadata *type metadata accessor for TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue()
{
  return &type metadata for TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue;
}

uint64_t type metadata accessor for MockTrafficIncidentRequestSupportedCheckFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin44MockTrafficIncidentRequestSupportedCheckFlow);
}

_BYTE *partial apply for closure #1 in closure #1 in Double.init<A>(_:)@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return partial apply for closure #1 in closure #1 in Double.init<A>(_:)(a1, a2);
}

_BYTE *partial apply for closure #1 in closure #1 in Double.init<A>(_:)@<X0>( _BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1LL << v3) & 0x100003E01LL;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0LL && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t DeviceState.deviceType.getter(uint64_t a1, uint64_t a2)
{
  if ((dispatch thunk of DeviceState.isHomePod.getter() & 1) != 0) {
    return 1LL;
  }
  if ((dispatch thunk of DeviceState.isMac.getter(a1, a2) & 1) != 0) {
    return 2LL;
  }
  if ((dispatch thunk of DeviceState.isWatch.getter(a1, a2) & 1) != 0) {
    return 3LL;
  }
  return 0LL;
}

void one-time initialization function for currentTask()
{
  static TaskMetricsConst.currentTask = 0x54746E6572727543LL;
  unk_D2BD0 = 0xEB000000006B7361LL;
}

uint64_t *TaskMetricsConst.currentTask.unsafeMutableAddressor()
{
  if (one-time initialization token for currentTask != -1) {
    swift_once(&one-time initialization token for currentTask, one-time initialization function for currentTask);
  }
  return &static TaskMetricsConst.currentTask;
}

uint64_t static TaskMetricsConst.currentTask.getter()
{
  return static TaskMetricsConst.currentTask.getter( &one-time initialization token for currentTask,  &static TaskMetricsConst.currentTask,  &qword_D2BD0);
}

void one-time initialization function for none()
{
  static ErrorMessageConst.none = 1701736302LL;
  unk_D2BE0 = 0xE400000000000000LL;
}

uint64_t *ErrorMessageConst.none.unsafeMutableAddressor()
{
  if (one-time initialization token for none != -1) {
    swift_once(&one-time initialization token for none, one-time initialization function for none);
  }
  return &static ErrorMessageConst.none;
}

uint64_t static ErrorMessageConst.none.getter()
{
  return static TaskMetricsConst.currentTask.getter( &one-time initialization token for none,  &static ErrorMessageConst.none,  &qword_D2BE0);
}

uint64_t static TaskMetricsConst.currentTask.getter(void *a1, uint64_t *a2, void *a3)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  uint64_t v5 = *a2;
  swift_bridgeObjectRetain(*a3);
  return v5;
}

ValueMetadata *type metadata accessor for TaskMetricsConst()
{
  return &type metadata for TaskMetricsConst;
}

ValueMetadata *type metadata accessor for ErrorMessageConst()
{
  return &type metadata for ErrorMessageConst;
}

uint64_t TemplatingResult.getDialogAsSummaryOutput(nlContext:deviceState:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  Swift::Bool v7 = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  memset(v9, 0, sizeof(v9));
  uint64_t v10 = 0LL;
  a3[3] = type metadata accessor for AceOutput(0LL);
  a3[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_0(a3);
  static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v3,  a2,  1LL,  _swiftEmptyArrayStorage,  v7,  1LL,  a1,  _swiftEmptyArrayStorage,  v9);
  return outlined destroy of (label: String?, value: Any)?( (uint64_t)v9,  &demangling cache variable for type metadata for FlowActivity?);
}

uint64_t TemplatingResult.getDialogAsSimpleOutputFlow(_:)(void *a1)
{
  uint64_t v3 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin();
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 104))(v15, v6, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL), v1, v3);
  outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v14);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  unint64_t v10 = (v5 + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = swift_allocObject(&unk_BC398, v10 + 40, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))( v11 + v9,  (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v3);
  outlined init with take of CATType(v14, v11 + v10);
  uint64_t v12 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  return SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v15,  &async function pointer to partial apply for closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:),  v11);
}

uint64_t closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[13] = a2;
  v3[14] = a3;
  v3[12] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[15] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:), 0LL, 0LL);
}

uint64_t closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)()
{
  id v2 = *(void **)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v4 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v5 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v1, 1LL, 1LL, v5);
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  LOBYTE(v__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  uint64_t v8 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v0 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0u;
  *(void *)(v0 + 88) = 0LL;
  *(_OWORD *)(v0 + 56) = 0u;
  void v4[3] = v8;
  void v4[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_0(v4);
  static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v3,  v0 + 16,  1LL,  &_swiftEmptyArrayStorage,  v2 & 1,  1LL,  v1,  &_swiftEmptyArrayStorage,  v0 + 56);
  outlined destroy of (label: String?, value: Any)?( v0 + 56,  &demangling cache variable for type metadata for FlowActivity?);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 16));
  outlined destroy of (label: String?, value: Any)?( v1,  &demangling cache variable for type metadata for NLContextUpdate?);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_88F44()
{
  uint64_t v1 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 40, v5);
}

uint64_t static UsoRequest.makeSDAForPromptForContactValue()()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_SystemPrompted(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v12 - v4;
  uint64_t v6 = type metadata accessor for UsoTaskBuilder_noVerb_common_Person(0LL);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  uint64_t v7 = UsoTaskBuilder_noVerb_common_Person.init()();
  uint64_t v8 = type metadata accessor for UsoEntityBuilder_common_Person(0LL);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  uint64_t v9 = UsoEntityBuilder_common_Person.init()();
  dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
  uint64_t v10 = static Siri_Nlu_External_SystemPrompted.from(_:)(v7, (uint64_t)v5);
  Siri_Nlu_External_SystemDialogAct.init()(v10);
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, v5, v0);
  Siri_Nlu_External_SystemDialogAct.prompted.setter(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v5, v0);
  swift_release(v7);
  return swift_release(v9);
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    unint64_t v3 = 0xD000000000000015LL;
  }
  else {
    unint64_t v3 = 0x73746361746E6F43LL;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000LL;
  }
  else {
    unint64_t v4 = 0x800000000009B850LL;
  }
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    unint64_t v3 = 0x797265636F7267LL;
  }
  else {
    unint64_t v3 = 0xD000000000000011LL;
  }
  if (v2) {
    unint64_t v4 = 0x800000000009B820LL;
  }
  else {
    unint64_t v4 = 0xE700000000000000LL;
  }
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  int v2 = a2;
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v3 = 0xD00000000000002ALL;
    }
    else {
      unint64_t v3 = 0xD000000000000033LL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0x800000000009B780LL;
    }
    else {
      unint64_t v4 = 0x800000000009B7B0LL;
    }
  }

  else
  {
    unint64_t v3 = 0xD00000000000002CLL;
    unint64_t v4 = 0x800000000009B750LL;
  }

  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

uint64_t static Siri_Nlu_External_SystemPrompted.from(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static Siri_Nlu_External_SystemPrompted.from(_:)( a1,  (void (*)(uint64_t))&Siri_Nlu_External_SystemPrompted.init(),  (void (*)(char *))&Siri_Nlu_External_SystemPrompted.target.setter,  a2);
}

uint64_t Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(uint64_t a1)
{
  return Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)( a1,  (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_SystemPrompted,  (void (*)(uint64_t))&Siri_Nlu_External_SystemDialogAct.init(),  (void (*)(char *))&Siri_Nlu_External_SystemDialogAct.prompted.setter);
}

uint64_t outlined init with copy of Siri_Nlu_External_UsoGraph?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t static UsoRequest.makeSDAForYesNoCancel()@<X0>(uint64_t a1@<X8>)
{
  v32[1] = a1;
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_SystemOffered(0LL);
  v32[0] = *(void *)(v1 - 8);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)v32 - v6;
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v32 - v8;
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UserCancelled(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Siri_Nlu_External_UserAccepted(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)v32 - v22;
  uint64_t v24 = Siri_Nlu_External_UserDialogAct.init()(v21);
  Siri_Nlu_External_UserAccepted.init()(v24);
  uint64_t v25 = Siri_Nlu_External_UserDialogAct.accepted.setter(v15);
  Siri_Nlu_External_UserCancelled.init()(v25);
  uint64_t v26 = Siri_Nlu_External_UserDialogAct.cancelled.setter(v12);
  Siri_Nlu_External_SystemOffered.init()(v26);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v23, v16);
  Siri_Nlu_External_SystemOffered.offeredAct.setter(v20);
  uint64_t v27 = v32[0];
  uint64_t v28 = *(uint64_t (**)(char *, char *, uint64_t))(v32[0] + 16LL);
  uint64_t v29 = v28(v7, v9, v1);
  Siri_Nlu_External_SystemDialogAct.init()(v29);
  v28(v4, v7, v1);
  Siri_Nlu_External_SystemDialogAct.offered.setter(v4);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v27 + 8);
  v30(v7, v1);
  v30(v9, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v23, v16);
}

uint64_t Siri_Nlu_External_SystemDialogAct.init(systemOffered:)(uint64_t a1)
{
  return Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)( a1,  (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_SystemOffered,  (void (*)(uint64_t))&Siri_Nlu_External_SystemDialogAct.init(),  (void (*)(char *))&Siri_Nlu_External_SystemDialogAct.offered.setter);
}

uint64_t Siri_Nlu_External_SystemGaveOptions.init(choices:)(uint64_t a1)
{
  return Siri_Nlu_External_SystemGaveOptions.choices.setter(a1);
}

uint64_t Siri_Nlu_External_SystemDialogAct.init(gaveOptions:)(uint64_t a1)
{
  return Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)( a1,  (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_SystemGaveOptions,  (void (*)(uint64_t))&Siri_Nlu_External_SystemDialogAct.init(),  (void (*)(char *))&Siri_Nlu_External_SystemDialogAct.gaveOptions.setter);
}

uint64_t Siri_Nlu_External_UserDialogAct.init(_:)(uint64_t a1)
{
  return Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)( a1,  (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserStatedTask,  (void (*)(uint64_t))&Siri_Nlu_External_UserDialogAct.init(),  (void (*)(char *))&Siri_Nlu_External_UserDialogAct.userStatedTask.setter);
}

{
  return Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)( a1,  (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserWantedToProceed,  (void (*)(uint64_t))&Siri_Nlu_External_UserDialogAct.init(),  (void (*)(char *))&Siri_Nlu_External_UserDialogAct.wantedToProceed.setter);
}

uint64_t Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)( uint64_t a1, uint64_t (*a2)(void), void (*a3)(uint64_t), void (*a4)(char *))
{
  uint64_t v7 = a2(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v13 - v10;
  a3(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  a4(v11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
}

uint64_t static Siri_Nlu_External_UserDialogAct.from(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Siri_Nlu_External_UserStatedTask(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v10 - v6;
  uint64_t v8 = static Siri_Nlu_External_UserStatedTask.from(_:)(a1, (uint64_t)&v10 - v6);
  Siri_Nlu_External_UserDialogAct.init()(v8);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v7, v2);
  Siri_Nlu_External_UserDialogAct.userStatedTask.setter(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v7, v2);
}

uint64_t static Siri_Nlu_External_UserStatedTask.from(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v25 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v26 = (char *)&v24 - v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v24 - v9;
  __chkstk_darwin();
  uint64_t v12 = (char *)&v24 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v16 = swift_allocObject(v15, 40LL, 7LL);
  *(_OWORD *)(v16 + 16) = xmmword_95900;
  *(void *)(v16 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a1;
  uint64_t v28 = v16;
  specialized Array._endMutation()(v16);
  uint64_t v17 = v28;
  uint64_t v18 = type metadata accessor for UsoBuilderOptions(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v14, 1LL, 1LL, v18);
  swift_retain(a1);
  uint64_t v19 = static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)(v17, v14);
  swift_bridgeObjectRelease(v17);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v14,  &demangling cache variable for type metadata for UsoBuilderOptions?);
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)(v19, 0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v12, 0LL, 1LL, v3);
  uint64_t v20 = outlined init with copy of Siri_Nlu_External_UsoGraph?((uint64_t)v12, (uint64_t)v10);
  Siri_Nlu_External_UserStatedTask.init()(v20);
  outlined init with copy of Siri_Nlu_External_UsoGraph?((uint64_t)v10, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v8, 1LL, v3) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v10,  &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v8,  &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  }

  else
  {
    uint64_t v21 = v26;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v26, v8, v3);
    uint64_t v22 = v25;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v25, v21, v3);
    Siri_Nlu_External_UserStatedTask.task.setter(v22);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v10,  &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v21, v3);
  }

  swift_release(v19);
  return outlined destroy of (label: String?, value: Any)?( (uint64_t)v12,  &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
}

uint64_t static Siri_Nlu_External_UserDialogAct.from(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v29 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v30 = (char *)&v28 - v6;
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserStatedTask(0LL);
  uint64_t v31 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v28 - v10;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v28 - v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v28 - v16;
  __chkstk_darwin();
  uint64_t v19 = (char *)&v28 - v18;
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)(a1, 0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v19, 0LL, 1LL, v3);
  uint64_t v20 = outlined init with copy of Siri_Nlu_External_UsoGraph?((uint64_t)v19, (uint64_t)v17);
  Siri_Nlu_External_UserStatedTask.init()(v20);
  outlined init with copy of Siri_Nlu_External_UsoGraph?((uint64_t)v17, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v15, 1LL, v3) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v17,  &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v15,  &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  }

  else
  {
    uint64_t v21 = v30;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v30, v15, v3);
    uint64_t v22 = v29;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v29, v21, v3);
    Siri_Nlu_External_UserStatedTask.task.setter(v22);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v17,  &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v21, v3);
  }

  uint64_t v23 = v31;
  uint64_t v24 = *(uint64_t (**)(char *, char *, uint64_t))(v31 + 16);
  uint64_t v25 = v24(v11, v13, v7);
  Siri_Nlu_External_UserDialogAct.init()(v25);
  v24(v9, v11, v7);
  Siri_Nlu_External_UserDialogAct.userStatedTask.setter(v9);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v23 + 8);
  v26(v11, v7);
  v26(v13, v7);
  return outlined destroy of (label: String?, value: Any)?( (uint64_t)v19,  &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
}

uint64_t Siri_Nlu_External_UserStatedTask.init(_:)(uint64_t a1)
{
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin();
  uint64_t v10 = (char *)&v12 - v9;
  Siri_Nlu_External_UserStatedTask.init()(v8);
  outlined init with copy of Siri_Nlu_External_UsoGraph?(a1, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1LL, v4) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( a1,  &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    return outlined destroy of (label: String?, value: Any)?( (uint64_t)v3,  &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v3, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
    Siri_Nlu_External_UserStatedTask.task.setter(v7);
    outlined destroy of (label: String?, value: Any)?( a1,  &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }

uint64_t Siri_Nlu_External_UserDialogAct.usoTask.getter()
{
  uint64_t result = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)(v0);
  uint64_t v2 = result;
  if ((unint64_t)result >> 62)
  {
    if (result < 0) {
      uint64_t v4 = result;
    }
    else {
      uint64_t v4 = result & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(result);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v4);
    uint64_t result = swift_bridgeObjectRelease(v2);
    if (!v3) {
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFF8LL));
    if (!v3)
    {
LABEL_6:
      swift_bridgeObjectRelease(v2);
      return v3;
    }
  }

  if ((v2 & 0xC000000000000001LL) != 0)
  {
    uint64_t v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v2);
    goto LABEL_6;
  }

  if (*(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL)))
  {
    uint64_t v3 = *(void *)(v2 + 32);
    swift_retain(v3);
    goto LABEL_6;
  }

  __break(1u);
  return result;
}

uint64_t Siri_Nlu_External_UserDialogAct.contactId.getter()
{
  uint64_t v0 = type metadata accessor for Google_Protobuf_StringValue(0LL);
  uint64_t v44 = *(void *)(v0 - 8);
  uint64_t v45 = v0;
  __chkstk_darwin();
  uint64_t v43 = (char *)&v41 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v41 - v6;
  uint64_t v46 = type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  uint64_t v8 = *(void *)(v46 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Siri_Nlu_External_UserStatedTask(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
  uint64_t v15 = __chkstk_darwin();
  uint64_t v42 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = Siri_Nlu_External_UserDialogAct.userStatedTask.getter(v15);
  Siri_Nlu_External_UserStatedTask.task.getter(v17);
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v19 = Siri_Nlu_External_UsoGraph.identifiers.getter(v18);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v46);
  uint64_t v20 = *(void *)(v19 + 16);
  if (!v20)
  {
LABEL_14:
    uint64_t v37 = 1LL;
    uint64_t v38 = (uint64_t)v42;
    goto LABEL_16;
  }

  unint64_t v21 = v19 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v46 = *(void *)(v3 + 72);
  uint64_t v22 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v3 + 16);
  uint64_t v41 = v19;
  __n128 v23 = swift_bridgeObjectRetain(v19);
  while (1)
  {
    uint64_t v26 = v22(v7, v21, v2, v23);
    uint64_t v27 = Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter(v26);
    uint64_t v29 = v28;
    if (v27 == 0x73746361746E6F43LL && v28 == 0xE800000000000000LL)
    {
      swift_bridgeObjectRelease(0xE800000000000000LL);
      uint64_t v30 = ((uint64_t (*)(char *, char *, uint64_t))v22)(v5, v7, v2);
    }

    else
    {
      char v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, 0x73746361746E6F43LL, 0xE800000000000000LL, 0LL);
      swift_bridgeObjectRelease(v29);
      uint64_t v30 = ((uint64_t (*)(char *, char *, uint64_t))v22)(v5, v7, v2);
      if ((v31 & 1) == 0)
      {
        uint64_t v25 = *(void (**)(char *, uint64_t))(v3 + 8);
        v25(v5, v2);
        goto LABEL_4;
      }
    }

    uint64_t v32 = v43;
    uint64_t v33 = Siri_Nlu_External_UsoEntityIdentifier.namespace.getter(v30);
    uint64_t v34 = Google_Protobuf_StringValue.value.getter(v33);
    uint64_t v36 = v35;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v45);
    if (v34 == 0x64695F6D657469LL && v36 == 0xE700000000000000LL) {
      break;
    }
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v36, 0x64695F6D657469LL, 0xE700000000000000LL, 0LL);
    swift_bridgeObjectRelease(v36);
    uint64_t v25 = *(void (**)(char *, uint64_t))(v3 + 8);
    v25(v5, v2);
    if ((v24 & 1) != 0) {
      goto LABEL_15;
    }
LABEL_4:
    v25(v7, v2);
    v21 += v46;
    if (!--v20)
    {
      uint64_t v19 = v41;
      swift_bridgeObjectRelease(v41);
      goto LABEL_14;
    }
  }

  swift_bridgeObjectRelease(0xE700000000000000LL);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
LABEL_15:
  uint64_t v19 = v41;
  swift_bridgeObjectRelease(v41);
  uint64_t v38 = (uint64_t)v42;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v42, v7, v2);
  uint64_t v37 = 0LL;
LABEL_16:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v38, v37, 1LL, v2);
  swift_bridgeObjectRelease(v19);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v38, 1LL, v2) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( v38,  &demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
    return 0LL;
  }

  else
  {
    uint64_t v39 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v38, v2);
  }

  return v39;
}

uint64_t UsoIdentifierAppBundle.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000015LL;
  }
  else {
    return 0x73746361746E6F43LL;
  }
}

uint64_t UsoIdentifierNamespace.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x64695F6D657469LL;
  }
  if (a1 == 1) {
    return 0xD000000000000012LL;
  }
  return 0x6369746E616D6573LL;
}

uint64_t static Siri_Nlu_External_UserWantedToProceed.from(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static Siri_Nlu_External_SystemPrompted.from(_:)( a1,  (void (*)(uint64_t))&Siri_Nlu_External_UserWantedToProceed.init(),  (void (*)(char *))&Siri_Nlu_External_UserWantedToProceed.reference.setter,  a2);
}

uint64_t static Siri_Nlu_External_SystemPrompted.from(_:)@<X0>( uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, void (*a3)(char *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v28 = a2;
  uint64_t v29 = a4;
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v26 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v26 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v26 - v14;
  __chkstk_darwin();
  uint64_t v17 = (char *)&v26 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v19 = swift_allocObject(v18, 40LL, 7LL);
  *(_OWORD *)(v19 + 16) = xmmword_95900;
  *(void *)(v19 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a1;
  uint64_t v30 = v19;
  specialized Array._endMutation()();
  uint64_t v20 = v30;
  uint64_t v21 = type metadata accessor for UsoBuilderOptions(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v11, 1LL, 1LL, v21);
  swift_retain(a1);
  uint64_t v22 = static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)(v20, v11);
  swift_bridgeObjectRelease(v20);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)v11,  &demangling cache variable for type metadata for UsoBuilderOptions?);
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)(v22, 0LL);
  swift_release(v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0LL, 1LL, v5);
  uint64_t v23 = outlined init with copy of Siri_Nlu_External_UsoGraph?((uint64_t)v17, (uint64_t)v15);
  v28(v23);
  outlined init with copy of Siri_Nlu_External_UsoGraph?((uint64_t)v15, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v13, 1LL, v5) == 1)
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v15,  &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v13,  &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v13, v5);
    char v24 = v26;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v26, v9, v5);
    v27(v24);
    outlined destroy of (label: String?, value: Any)?( (uint64_t)v15,  &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }

  return outlined destroy of (label: String?, value: Any)?( (uint64_t)v17,  &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
}

uint64_t static Siri_Nlu_External_SystemOffered.from(_:)(uint64_t a1)
{
  uint64_t v20 = a1;
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v19 - v6;
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v19 - v13;
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16);
  uint64_t v16 = v15(v7, v20, v1);
  Siri_Nlu_External_UserDialogAct.init()(v16);
  v15(v5, (uint64_t)v7, v1);
  Siri_Nlu_External_UserDialogAct.wantedToProceed.setter(v5);
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v7, v1);
  Siri_Nlu_External_SystemOffered.init()(v17);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  Siri_Nlu_External_SystemOffered.offeredAct.setter(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
}

GeoFlowDelegatePlugin::UsoIdentifierAppBundle_optional __swiftcall UsoIdentifierAppBundle.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of UsoIdentifierAppBundle.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    v4.value = GeoFlowDelegatePlugin_UsoIdentifierAppBundle_siriNL;
  }
  else {
    v4.value = GeoFlowDelegatePlugin_UsoIdentifierAppBundle_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UsoIdentifierAppBundle( char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = UsoIdentifierAppBundle.rawValue.getter(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = UsoIdentifierAppBundle.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UsoIdentifierAppBundle()
{
  char v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = UsoIdentifierAppBundle.rawValue.getter(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UsoIdentifierAppBundle(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UsoIdentifierAppBundle( uint64_t a1)
{
  char v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = UsoIdentifierAppBundle.rawValue.getter(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance UsoIdentifierAppBundle@<X0>( uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._uint64_t countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of UsoIdentifierAppBundle.init(rawValue:),  v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance UsoIdentifierAppBundle@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = UsoIdentifierAppBundle.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UsoIdentifierNamespace( char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = UsoIdentifierNamespace.rawValue.getter(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = UsoIdentifierNamespace.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UsoIdentifierNamespace()
{
  char v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = UsoIdentifierNamespace.rawValue.getter(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UsoIdentifierNamespace(uint64_t a1)
{
  uint64_t v3 = UsoIdentifierNamespace.rawValue.getter(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UsoIdentifierNamespace( uint64_t a1)
{
  char v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = UsoIdentifierNamespace.rawValue.getter(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance UsoIdentifierNamespace@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized UsoIdentifierNamespace.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance UsoIdentifierNamespace@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = UsoIdentifierNamespace.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t specialized UsoIdentifierNamespace.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of UsoIdentifierNamespace.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type UsoIdentifierAppBundle and conformance UsoIdentifierAppBundle()
{
  unint64_t result = lazy protocol witness table cache variable for type UsoIdentifierAppBundle and conformance UsoIdentifierAppBundle;
  if (!lazy protocol witness table cache variable for type UsoIdentifierAppBundle and conformance UsoIdentifierAppBundle)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for UsoIdentifierAppBundle,  &type metadata for UsoIdentifierAppBundle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifierAppBundle and conformance UsoIdentifierAppBundle);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace()
{
  unint64_t result = lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace;
  if (!lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for UsoIdentifierNamespace,  &type metadata for UsoIdentifierNamespace);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace);
  }

  return result;
}

ValueMetadata *type metadata accessor for UsoRequest()
{
  return &type metadata for UsoRequest;
}

uint64_t storeEnumTagSinglePayload for UsoIdentifierAppBundle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_8AD54 + 4 * byte_9AC45[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_8AD88 + 4 * asc_9AC40[v4]))();
}

uint64_t sub_8AD88(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8AD90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x8AD98LL);
  }
  return result;
}

uint64_t sub_8ADA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x8ADACLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_8ADB0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_8ADB8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UsoIdentifierAppBundle()
{
  return &type metadata for UsoIdentifierAppBundle;
}

uint64_t storeEnumTagSinglePayload for UsoIdentifierNamespace(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_8AE20 + 4 * byte_9AC4F[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_8AE54 + 4 * byte_9AC4A[v4]))();
}

uint64_t sub_8AE54(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8AE5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x8AE64LL);
  }
  return result;
}

uint64_t sub_8AE70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x8AE78LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_8AE7C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_8AE84(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UsoIdentifierNamespace()
{
  return &type metadata for UsoIdentifierNamespace;
}

uint64_t SaveParkingHandleIntentStrategy.__allocating_init(with:isPommes:)(__int128 *a1, char a2)
{
  uint64_t v5 = swift_allocObject(v2, 65LL, 7LL);
  type metadata accessor for OS_os_log();
  *(void *)(v5 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001FLL,  0x800000000009ADF0LL);
  outlined init with take of CATType(a1, v5 + 24);
  *(_BYTE *)(v5 + 64) = a2;
  return v5;
}

uint64_t SaveParkingHandleIntentStrategy.init(with:isPommes:)(__int128 *a1, char a2)
{
  *(void *)(v2 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001FLL,  0x800000000009ADF0LL);
  outlined init with take of CATType(a1, v2 + 24);
  *(_BYTE *)(v2 + 64) = a2;
  return v2;
}

uint64_t SaveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[29] = a2;
  v3[30] = v2;
  v3[28] = a1;
  return swift_task_switch(SaveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:), 0LL, 0LL);
}

uint64_t SaveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
  uint64_t v2 = (void *)IntentResolutionRecord.intentResponse.getter(v1);
  id v3 = [v2 parkingLocation];
  *(void *)(v0 + 248) = v3;

  if (!v3)
  {
    uint64_t v11 = *(int **)(**(void **)(v0 + 240) + 128LL);
    uint64_t v25 = (int *)((char *)v11 + *v11);
    uint64_t v12 = (void *)swift_task_alloc(v11[1]);
    uint64_t v13 = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    *(void *)(v0 + 336) = v12;
LABEL_7:
    *uint64_t v12 = v0;
    v12[1] = v13;
    return ((uint64_t (*)(void, void))v25)(*(void *)(v0 + 224), *(void *)(v0 + 232));
  }

  id v4 = [v3 location];
  *(void *)(v0 + 256) = v4;
  if (!v4)
  {
    uint64_t v14 = *(int **)(**(void **)(v0 + 240) + 128LL);
    uint64_t v25 = (int *)((char *)v14 + *v14);
    uint64_t v12 = (void *)swift_task_alloc(v14[1]);
    uint64_t v13 = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    *(void *)(v0 + 32specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v12;
    goto LABEL_7;
  }

  uint64_t v5 = CLLocation.makeDialogLocation()();
  *(void *)(v0 + 264) = v5;
  uint64_t v6 = (void *)IntentResolutionRecord.intentResponse.getter(v1);
  id v7 = [v6 parkingNote];

  if (v7)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    unint64_t v10 = v9;
  }

  else
  {
    uint64_t v8 = 0LL;
    unint64_t v10 = 0xE000000000000000LL;
  }

  *(void *)(v0 + 27__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v10;
  uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(v0 + 240) + 112LL))();
  *(void *)(v0 + 28specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v16;
  *(void *)(v0 + 12specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &type metadata for SaveParkingLocation;
  *(void *)(v0 + 128) = &protocol witness table for SaveParkingLocation;
  *(void *)(v0 + 96) = v5;
  *(void *)(v0 + 104) = v8;
  *(void *)(v0 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v10;
  swift_retain(v5);
  swift_bridgeObjectRetain(v10);
  uint64_t v17 = (void *)IntentResolutionRecord.intentResponse.getter(v1);
  id v18 = [v17 parkingNote];

  if (v18)
  {
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v21 = v20;
  }

  else
  {
    uint64_t v19 = 0LL;
    uint64_t v21 = 0LL;
  }

  *(void *)(v0 + 288) = v21;
  uint64_t v22 = *(int **)(*(void *)v16 + 112LL);
  char v24 = (uint64_t (*)(uint64_t, uint64_t, id, uint64_t, uint64_t))((char *)v22 + *v22);
  uint64_t v23 = (void *)swift_task_alloc(v22[1]);
  *(void *)(v0 + 296) = v23;
  *uint64_t v23 = v0;
  v23[1] = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  return v24(v0 + 56, v0 + 96, v3, v19, v21);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance SaveParkingHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for SaveParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance SaveParkingHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for SaveParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance SaveParkingHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for SaveParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance SaveParkingHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for SaveParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance SaveParkingHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for SaveParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance SaveParkingHandleIntentStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for SaveParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentHandleIntentStrategy;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)(a1, a2, v9, a4);
}

unint64_t lazy protocol witness table accessor for type SaveParkingHandleIntentStrategy and conformance SaveParkingHandleIntentStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type SaveParkingHandleIntentStrategy and conformance SaveParkingHandleIntentStrategy;
  if (!lazy protocol witness table cache variable for type SaveParkingHandleIntentStrategy and conformance SaveParkingHandleIntentStrategy)
  {
    uint64_t v1 = type metadata accessor for SaveParkingHandleIntentStrategy();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SaveParkingHandleIntentStrategy, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SaveParkingHandleIntentStrategy and conformance SaveParkingHandleIntentStrategy);
  }

  return result;
}

uint64_t type metadata accessor for SaveParkingHandleIntentStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin31SaveParkingHandleIntentStrategy);
}

uint64_t ShareETAContactConfirmationStrategy.__allocating_init(isPOMMES:isUSO:)(char a1, char a2)
{
  uint64_t v5 = swift_allocObject(v2, 48LL, 7LL);
  ShareETAContactConfirmationStrategy.init(isPOMMES:isUSO:)(a1, a2);
  return v5;
}

uint64_t ShareETAContactConfirmationStrategy.isPOMMES.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t ShareETAContactConfirmationStrategy.isPOMMES.setter(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 24, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 24) = a1;
  return result;
}

uint64_t ShareETAContactConfirmationStrategy.isUSO.getter()
{
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t ShareETAContactConfirmationStrategy.isUSO.setter(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 25, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 25) = a1;
  return result;
}

uint64_t (*ShareETAContactConfirmationStrategy.isUSO.modify(uint64_t a1))()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t ShareETAContactConfirmationStrategy.init(isPOMMES:isUSO:)(char a1, char a2)
{
  uint64_t v3 = v2;
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v6 = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD000000000000023LL,  0x800000000009AEF0LL);
  *(_WORD *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = v6;
  uint64_t v7 = type metadata accessor for CATService();
  uint64_t v8 = swift_allocObject(v7, 40LL, 7LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v7);
  *(void *)(v8 + 24) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  *(void *)(v8 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x6976726553544143LL,  0xEA00000000006563LL);
  *(_BYTE *)(v8 + 16) = 0;
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v11 = swift_allocObject(v10, 80LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_949B0;
  if (one-time initialization token for confirmationNode != -1) {
    swift_once( &one-time initialization token for confirmationNode,  one-time initialization function for confirmationNode);
  }
  uint64_t v12 = static LocationSearchIntent.confirmationNode;
  swift_retain(static LocationSearchIntent.confirmationNode);
  unint64_t v13 = specialized OntologyNode.javaClassName.getter();
  uint64_t v15 = v14;
  swift_release(v12);
  *(void *)(v11 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v13;
  *(void *)(v11 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v15;
  uint64_t v16 = type metadata accessor for AddressOntologyNode.OccupantNode(0LL);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  uint64_t v17 = AddressOntologyNode.OccupantNode.init(name:multicardinal:)(0x746E61707563636FLL, 0xE800000000000000LL, 0LL);
  unint64_t v18 = specialized OntologyNode.javaClassName.getter();
  uint64_t v20 = v19;
  uint64_t v21 = swift_release(v17);
  *(void *)(v11 + 48) = v18;
  *(void *)(v11 + 56) = v20;
  uint64_t v22 = static AddressOntologyNode.OccupantNode.occupantFullNameNode.getter(v21);
  unint64_t v23 = specialized OntologyNode.javaClassName.getter();
  uint64_t v25 = v24;
  swift_release(v22);
  *(void *)(v11 + 64) = v23;
  *(void *)(v11 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v25;
  *(void *)(v3 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v11;
  swift_beginAccess(v3 + 24, v28, 1LL, 0LL);
  *(_BYTE *)(v3 + 24) = a1 & 1;
  swift_beginAccess(v3 + 25, &v27, 1LL, 0LL);
  *(_BYTE *)(v3 + 25) = a2 & 1;
  return v3;
}

uint64_t ShareETAContactConfirmationStrategy.catService.getter()
{
  return swift_retain(*(void *)(v0 + 32));
}

uint64_t ShareETAContactConfirmationStrategy.weightedPromptResponseTargets.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 40));
}

uint64_t ShareETAContactConfirmationStrategy.actionForInput(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Parse(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin();
  uint64_t v10 = (id *)((char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Input.parse.getter(v8);
  uint64_t v11 = (*(uint64_t (**)(id *, uint64_t))(v7 + 88))(v10, v6);
  if ((_DWORD)v11 == enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v19 = static os_log_type_t.info.getter(v11, v12, v13, v14, v15, v16, v17, v18);
    os_log(_:dso:log:_:_:)( v19,  &dword_0,  v2[2],  "SiriGeo received supported parse type: NLv3IntentOnly.",  54LL,  2LL,  _swiftEmptyArrayStorage);
LABEL_7:
    (*(void (**)(id *, uint64_t))(v7 + 8))(v10, v6);
    return ShareETAContactConfirmationStrategy.confirmationHandle(input:)(a1, a2);
  }

  int v20 = v11;
  if ((_DWORD)v11 != enum case for Parse.pommesResponse(_:))
  {
    int v30 = enum case for Parse.uso(_:);
    uint64_t v31 = static os_log_type_t.info.getter(v11, v12, v13, v14, v15, v16, v17, v18);
    uint64_t v32 = v3[2];
    if (v20 != v30)
    {
      uint64_t v34 = os_log(_:dso:log:_:_:)( v31,  &dword_0,  v32,  "SiriGeo received unsupported parse type.",  40LL,  2LL,  _swiftEmptyArrayStorage);
      static ActionForInput.ignore()(v34);
      return (*(uint64_t (**)(id *, uint64_t))(v7 + 8))(v10, v6);
    }

    os_log(_:dso:log:_:_:)( v31,  &dword_0,  v32,  "SiriGeo received supported parse type: USO.",  43LL,  2LL,  _swiftEmptyArrayStorage);
    (*(void (**)(uint64_t))(*v3 + 152LL))(1LL);
    goto LABEL_7;
  }

  (*(void (**)(id *, uint64_t))(v7 + 96))(v10, v6);

  uint64_t v29 = static os_log_type_t.info.getter(v21, v22, v23, v24, v25, v26, v27, v28);
  os_log(_:dso:log:_:_:)( v29,  &dword_0,  v3[2],  "SiriGeo received supported parse type: pommesResponse.",  54LL,  2LL,  _swiftEmptyArrayStorage);
  (*(void (**)(uint64_t))(*v3 + 128LL))(1LL);
  return ShareETAContactConfirmationStrategy.confirmationHandle(input:)(a1, a2);
}

uint64_t ShareETAContactConfirmationStrategy.parseConfirmationResponse(input:)(uint64_t a1, uint64_t a2)
{
  v2[13] = a1;
  v2[14] = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v2[15] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Parse(0LL);
  v2[16] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[17] = v5;
  v2[18] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(ShareETAContactConfirmationStrategy.parseConfirmationResponse(input:), 0LL, 0LL);
}

uint64_t ShareETAContactConfirmationStrategy.parseConfirmationResponse(input:)()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[16];
  uint64_t v4 = type metadata accessor for GeoParse();
  Input.parse.getter(v4);
  static GeoParse.getDomainIntent(parse:)(v1, (uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined init with copy of GeoIntent?((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
  if (v0[10])
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeoIntent);
    uint64_t v6 = type metadata accessor for LocationSearchIntent(0LL);
    if ((swift_dynamicCast(v0 + 12, v0 + 7, v5, v6, 6LL) & 1) != 0)
    {
      uint64_t v7 = v0[12];
      uint64_t v8 = *(unsigned __int8 (**)(void))(*(void *)v7 + 152LL);
      if (v8() != 3)
      {
        int v16 = v8();
        if ((v16 - 1) >= 2)
        {
          if (v16)
          {
            unint64_t v23 = lazy protocol witness table accessor for type Errors and conformance Errors();
            uint64_t v24 = swift_allocError(&type metadata for Errors, v23, 0LL, 0LL);
            *(void *)uint64_t v25 = 0xD000000000000020LL;
            *(void *)(v25 + 8) = 0x800000000009F410LL;
            *(_BYTE *)(v25 + 16) = 0;
            swift_willThrow(v24);
            swift_release(v7);
            goto LABEL_7;
          }

          uint64_t v17 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
        }

        else
        {
          uint64_t v17 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
        }

        uint64_t v18 = v0[18];
        uint64_t v19 = v0[15];
        uint64_t v20 = *v17;
        uint64_t v21 = type metadata accessor for ConfirmationResponse(0LL);
        uint64_t v22 = *(void *)(v21 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 104))(v19, v20, v21);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
        SimpleConfirmationResponseProvider.init(_:)(v19);
        swift_release(v7);
        outlined destroy of (label: String?, value: Any)?( (uint64_t)(v0 + 2),  &demangling cache variable for type metadata for GeoIntent?);
        swift_task_dealloc(v18);
        swift_task_dealloc(v19);
        uint64_t v14 = (uint64_t (*)(void))v0[1];
        return v14();
      }

      swift_release(v7);
    }
  }

  else
  {
    outlined destroy of (label: String?, value: Any)?( (uint64_t)(v0 + 7),  &demangling cache variable for type metadata for GeoIntent?);
  }

  unint64_t v9 = lazy protocol witness table accessor for type Errors and conformance Errors();
  uint64_t v10 = swift_allocError(&type metadata for Errors, v9, 0LL, 0LL);
  *(void *)uint64_t v11 = 0xD00000000000001CLL;
  *(void *)(v11 + 8) = 0x800000000009F3F0LL;
  *(_BYTE *)(v11 + 16) = 0;
  swift_willThrow(v10);
LABEL_7:
  uint64_t v12 = v0[18];
  uint64_t v13 = v0[15];
  outlined destroy of (label: String?, value: Any)?( (uint64_t)(v0 + 2),  &demangling cache variable for type metadata for GeoIntent?);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t ShareETAContactConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)( uint64_t a1, uint64_t a2)
{
  v3[35] = a2;
  v3[36] = v2;
  v3[34] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[37] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for PommesContext.Source(0LL);
  v3[38] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[39] = v6;
  v3[40] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  v3[41] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NLContextUpdate(0LL);
  v3[42] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[43] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[44] = swift_task_alloc(v10);
  v3[45] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for TemplatingResult(0LL);
  v3[46] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[47] = v12;
  v3[48] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v3[49] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for ActivityType(0LL);
  v3[50] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v3[51] = v15;
  v3[52] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Locale(0LL);
  v3[53] = swift_task_alloc((*(void *)(*(void *)(v16 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(ShareETAContactConfirmationStrategy.makePromptForConfirmation(itemToConfirm:), 0LL, 0LL);
}

id ShareETAContactConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  uint64_t v1 = v0[53];
  uint64_t v2 = v0[51];
  uint64_t v33 = v0[50];
  uint64_t v36 = v0[52];
  uint64_t v3 = (void *)v0[35];
  type metadata accessor for DialogPerson(0LL);
  id v4 = v3;
  static Device.current.getter(v0 + 2);
  uint64_t v6 = v0[5];
  uint64_t v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v6);
  dispatch thunk of DeviceState.siriLocale.getter(v6, v5);
  uint64_t v32 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)(v4, v1, 0LL);
  v0[54] = v32;
  uint64_t v7 = __swift_destroy_boxed_opaque_existential_0Tm(v0 + 2);
  static SiriKitEventSender.current.getter(v7);
  uint64_t v8 = v0[10];
  uint64_t v31 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v8);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v36, enum case for ActivityType.confirmation(_:), v33);
  uint64_t v9 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INShareETAIntent,  &OBJC_CLASS___INShareETAIntent_ptr);
  id result = [(id)swift_getObjCClassFromMetadata(v9) typeName];
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = v0[52];
    uint64_t v13 = v0[49];
    uint64_t v34 = v0[36];
    type metadata accessor for SiriKitEvent(0LL);
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v16 = v15;

    uint64_t v17 = enum case for SiriKitReliabilityCodes.normal(_:);
    uint64_t v18 = type metadata accessor for SiriKitReliabilityCodes(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 104))(v13, v17, v18);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v13, 0LL, 1LL, v18);
    uint64_t v20 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)( v12,  v14,  v16,  v13,  closure #1 in ShareETAPromptForContactStrategy.makePromptForValue(),  0LL);
    dispatch thunk of SiriKitEventSending.send(_:)(v20, v8, v31);
    swift_release(v20);
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 7);
    uint64_t v21 = *(void *)(v34 + 32);
    uint64_t v22 = type metadata accessor for ShareETA(0LL);
    v0[15] = v22;
    v0[16] = &protocol witness table for ShareETA;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v0 + 12);
    uint64_t v24 = (char *)boxed_opaque_existential_0
    void *boxed_opaque_existential_0 = v32;
    uint64_t v25 = enum case for BehaviorAfterSpeaking.listen(_:);
    uint64_t v26 = type metadata accessor for BehaviorAfterSpeaking(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 104LL))(v24, v25, v26);
    swift_storeEnumTagMultiPayload(boxed_opaque_existential_0, v22, 10LL);
    uint64_t v27 = swift_retain(v32);
    uint64_t v28 = static DialogHelper.globals.getter(v27);
    v0[55] = v28;
    uint64_t v29 = *(int **)(*(void *)v21 + 112LL);
    uint64_t v35 = (int *)((char *)v29 + *v29);
    int v30 = (void *)swift_task_alloc(v29[1]);
    v0[56] = v30;
    *int v30 = v0;
    v30[1] = ShareETAContactConfirmationStrategy.makePromptForConfirmation(itemToConfirm:);
    return (id)((uint64_t (*)(void, void *, uint64_t))v35)(v0[48], v0 + 12, v28);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t ShareETAContactConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 440);
  uint64_t v3 = *(void *)(*v1 + 448);
  *(void *)(*v1 + 456) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = ShareETAContactConfirmationStrategy.makePromptForConfirmation(itemToConfirm:);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 96));
    uint64_t v5 = ShareETAContactConfirmationStrategy.makePromptForConfirmation(itemToConfirm:);
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  void *v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  os_log_s *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  os_log_s *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  Swift::Bool v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)v0[36];
  uint64_t v3 = static GeoNLContextUtils.makeNLContextFor(weightedPromptResponseTargets:)(v2[5]);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*v2 + 120))(v3);
  uint64_t v5 = (void *)v0[36];
  if ((v4 & 1) != 0)
  {
    uint64_t v6 = (os_log_s *)v5[2];
    uint64_t v7 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_0, v6, v7, "makePromptForConfirmation adding Pommes Context", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    unint64_t v10 = v0[40];
    uint64_t v9 = v0[41];
    (*(void (**)(uint64_t, void, void))(v0[39] + 104LL))( v10,  enum case for PommesContext.Source.pluginDefined(_:),  v0[38]);
    PommesContext.init(source:domain:listenAfterSpeaking:)(v10, 7300455LL, 0xE300000000000000LL, 1LL);
    uint64_t v11 = type metadata accessor for PommesContext(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v9, 0LL, 1LL, v11);
    uint64_t v12 = NLContextUpdate.pommesContext.setter(v9);
  }

  else
  {
    uint64_t v12 = (*(uint64_t (**)(void))(*v5 + 144LL))();
    if ((v12 & 1) != 0)
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
      uint64_t v21 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL) - 8);
      uint64_t v22 = *(void *)(v21 + 72);
      unint64_t v23 = *(unsigned __int8 *)(v21 + 80);
      uint64_t v24 = (v23 + 32) & ~v23;
      uint64_t v25 = swift_allocObject(v20, v24 + v22, v23 | 7);
      *(_OWORD *)(v25 + 16) = xmmword_95430;
      static UsoRequest.makeSDAForYesNoCancel()(v25 + v24);
      uint64_t v12 = NLContextUpdate.nluSystemDialogActs.setter(v25);
    }
  }

  uint64_t v26 = v1[36];
  uint64_t v27 = static os_log_type_t.info.getter(v12, v13, v14, v15, v16, v17, v18, v19);
  uint64_t v28 = *(os_log_s **)(v26 + 16);
  uint64_t v29 = v27;
  if (os_log_type_enabled(v28, v27))
  {
    uint64_t v31 = v1[44];
    int v30 = v1[45];
    uint64_t v33 = v1[42];
    uint64_t v32 = v1[43];
    uint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    uint64_t v57 = v35;
    *(_DWORD *)uint64_t v34 = 136315138;
    swift_beginAccess(v30, v1 + 30, 0LL, 0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v31, v30, v33);
    uint64_t v36 = String.init<A>(describing:)(v31, v33);
    uint64_t v38 = v37;
    v1[33] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 33, v1 + 34);
    swift_bridgeObjectRelease(v38);
    _os_log_impl(&dword_0, v28, v29, "makePromptForConfirmation: %s", v34, 0xCu);
    swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  uint64_t v51 = v1[53];
  uint64_t v52 = v1[52];
  uint64_t v39 = v1[48];
  uint64_t v48 = v1[54];
  uint64_t v49 = v1[47];
  uint64_t v40 = v1[45];
  uint64_t v50 = v1[46];
  uint64_t v41 = v1[43];
  uint64_t v53 = v1[49];
  uint64_t v54 = v1[44];
  uint64_t v42 = v1[42];
  uint64_t v55 = v1[41];
  uint64_t v56 = v1[40];
  uint64_t v43 = v1[37];
  uint64_t v44 = (void *)v1[34];
  swift_beginAccess(v40, v1 + 27, 0LL, 0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v43, v40, v42);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v43, 0LL, 1LL, v42);
  static Device.current.getter(v1 + 22);
  uint64_t v45 = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  uint64_t v46 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v1 + 19) = 0u;
  v1[21] = 0LL;
  *(_OWORD *)(v1 + 1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 7) = 0u;
  v44[3] = v46;
  v44[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_0(v44);
  static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v39,  v1 + 22,  1LL,  _swiftEmptyArrayStorage,  v45,  1LL,  v43,  _swiftEmptyArrayStorage,  v1 + 17);
  outlined destroy of (label: String?, value: Any)?( (uint64_t)(v1 + 17),  &demangling cache variable for type metadata for FlowActivity?);
  swift_release(v48);
  __swift_destroy_boxed_opaque_existential_0Tm(v1 + 22);
  outlined destroy of (label: String?, value: Any)?( v43,  &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v39, v50);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v43);
  return ((uint64_t (*)(void))v1[1])();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 416);
  uint64_t v4 = *(void *)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 392);
  uint64_t v6 = *(void *)(v0 + 352);
  uint64_t v5 = *(void *)(v0 + 360);
  uint64_t v8 = *(void *)(v0 + 320);
  uint64_t v7 = *(void *)(v0 + 328);
  unint64_t v10 = *(void *)(v0 + 296);
  swift_release(*(void *)(v0 + 432));
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 96));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ShareETAContactConfirmationStrategy.makeConfirmationRejectedResponse()(uint64_t a1)
{
  v2[25] = a1;
  v2[26] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[27] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_SystemPrompted(0LL);
  v2[28] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[29] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[30] = swift_task_alloc(v6);
  v2[31] = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for PommesContext.Source(0LL);
  v2[32] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[33] = v8;
  v2[34] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  v2[35] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  v2[36] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[37] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[38] = swift_task_alloc(v12);
  v2[39] = swift_task_alloc(v12);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v2[40] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for ActivityType(0LL);
  v2[41] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v2[42] = v15;
  v2[43] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(ShareETAContactConfirmationStrategy.makeConfirmationRejectedResponse(), 0LL, 0LL);
}

id ShareETAContactConfirmationStrategy.makeConfirmationRejectedResponse()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (void *)(v1 + 16);
  uint64_t v6 = v1 + 336;
  uint64_t v5 = *(void *)(v1 + 336);
  uint64_t v4 = *(void *)(v6 + 8);
  uint64_t v7 = *(void *)(v2 + 328);
  static SiriKitEventSender.current.getter(a1);
  uint64_t v78 = *(void *)(v2 + 48);
  uint64_t v81 = *(void *)(v2 + 40);
  uint64_t v84 = v3;
  __swift_project_boxed_opaque_existential_1(v3, v81);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))( v4,  enum case for ActivityType.confirmationRejected(_:),  v7);
  uint64_t v8 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INShareETAIntent,  &OBJC_CLASS___INShareETAIntent_ptr);
  id result = [(id)swift_getObjCClassFromMetadata(v8) typeName];
  if (result)
  {
    uint64_t v10 = result;
    uint64_t v11 = *(void *)(v2 + 344);
    uint64_t v12 = *(void *)(v2 + 320);
    uint64_t v13 = *(void *)(v2 + 208);
    type metadata accessor for SiriKitEvent(0LL);
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v16 = v15;

    uint64_t v17 = enum case for SiriKitReliabilityCodes.rejectParameter(_:);
    uint64_t v18 = type metadata accessor for SiriKitReliabilityCodes(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 104))(v12, v17, v18);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v12, 0LL, 1LL, v18);
    uint64_t v20 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)( v11,  v14,  v16,  v12,  closure #1 in ShareETAPromptForContactStrategy.makeFlowCancelledResponse(),  0LL);
    dispatch thunk of SiriKitEventSending.send(_:)(v20, v81, v78);
    swift_release(v20);
    __swift_destroy_boxed_opaque_existential_0Tm(v84);
    uint64_t v21 = static GeoNLContextUtils.makeNLContextFor(weightedPromptResponseTargets:)(*(void *)(v13 + 40));
    os_log_type_t v29 = static os_log_type_t.info.getter(v21, v22, v23, v24, v25, v26, v27, v28);
    int v30 = *(os_log_s **)(v13 + 16);
    os_log_type_t v31 = v29;
    uint64_t v32 = os_log_type_enabled(v30, v29);
    if ((_DWORD)v32)
    {
      uint64_t v34 = *(void *)(v2 + 304);
      uint64_t v33 = *(void *)(v2 + 312);
      uint64_t v35 = *(void *)(v2 + 288);
      uint64_t v36 = *(void *)(v2 + 296);
      uint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v38 = swift_slowAlloc(32LL, -1LL);
      uint64_t v87 = v38;
      *(_DWORD *)uint64_t v37 = 136315138;
      swift_beginAccess(v33, v2 + 168, 0LL, 0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v34, v33, v35);
      uint64_t v39 = String.init<A>(describing:)(v34, v35);
      unint64_t v41 = v40;
      *(void *)(v2 + 19__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 192, v2 + 200);
      swift_bridgeObjectRelease(v41);
      _os_log_impl(&dword_0, v30, v31, "nl context = %s", v37, 0xCu);
      swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1LL, -1LL);
      uint64_t v32 = swift_slowDealloc(v37, -1LL, -1LL);
    }

    uint64_t v42 = (*(uint64_t (**)(uint64_t))(**(void **)(v2 + 208) + 120LL))(v32);
    if ((v42 & 1) != 0)
    {
      uint64_t v50 = v2 + 144;
      uint64_t v51 = *(void *)(v2 + 312);
      uint64_t v53 = *(void *)(v2 + 272);
      uint64_t v52 = *(void *)(v2 + 280);
      uint64_t v55 = *(void *)(v2 + 256);
      uint64_t v54 = *(void *)(v2 + 264);
      uint64_t v56 = static os_log_type_t.info.getter(v42, v43, v44, v45, v46, v47, v48, v49);
      os_log(_:dso:log:_:_:)( v56,  &dword_0,  v30,  "makeConfirmationRejectedResponse adding Pommes Context",  54LL,  2LL,  _swiftEmptyArrayStorage);
      (*(void (**)(uint64_t, void, uint64_t))(v54 + 104))( v53,  enum case for PommesContext.Source.pluginDefined(_:),  v55);
      PommesContext.init(source:domain:listenAfterSpeaking:)(v53, 7300455LL, 0xE300000000000000LL, 1LL);
      uint64_t v57 = type metadata accessor for PommesContext(0LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56LL))(v52, 0LL, 1LL, v57);
      swift_beginAccess(v51, v2 + 144, 33LL, 0LL);
      NLContextUpdate.pommesContext.setter(v52);
    }

    else
    {
      if (((*(uint64_t (**)(void))(**(void **)(v2 + 208) + 144LL))() & 1) == 0)
      {
LABEL_9:
        uint64_t v68 = *(void *)(v2 + 344);
        uint64_t v69 = *(void *)(v2 + 312);
        uint64_t v70 = *(void *)(v2 + 320);
        uint64_t v71 = *(void *)(v2 + 296);
        uint64_t v72 = *(void *)(v2 + 304);
        uint64_t v73 = *(void *)(v2 + 288);
        uint64_t v77 = *(void *)(v2 + 280);
        uint64_t v80 = *(void *)(v2 + 272);
        uint64_t v83 = *(void *)(v2 + 248);
        uint64_t v86 = *(void *)(v2 + 240);
        uint64_t v74 = *(void *)(v2 + 216);
        uint64_t v75 = *(void **)(v2 + 200);
        swift_beginAccess(v69, v2 + 96, 0LL, 0LL);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16))(v74, v69, v73);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v71 + 56))(v74, 0LL, 1LL, v73);
        uint64_t v76 = type metadata accessor for AceOutput(0LL);
        *(_OWORD *)(v2 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 0u;
        *(void *)(v2 + 88) = 0LL;
        *(_OWORD *)(v2 + 56) = 0u;
        v75[3] = v76;
        v75[4] = &protocol witness table for AceOutput;
        __swift_allocate_boxed_opaque_existential_0(v75);
        static AceOutputHelper.makeAceOutput(allAddViews:nlContextUpdate:additionalCommands:flowActivity:)( _swiftEmptyArrayStorage,  v74,  _swiftEmptyArrayStorage,  v2 + 56);
        outlined destroy of (label: String?, value: Any)?( v2 + 56,  &demangling cache variable for type metadata for FlowActivity?);
        outlined destroy of (label: String?, value: Any)?( v74,  &demangling cache variable for type metadata for NLContextUpdate?);
        (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v69, v73);
        swift_task_dealloc(v68);
        swift_task_dealloc(v70);
        swift_task_dealloc(v69);
        swift_task_dealloc(v72);
        swift_task_dealloc(v77);
        swift_task_dealloc(v80);
        swift_task_dealloc(v83);
        swift_task_dealloc(v86);
        swift_task_dealloc(v74);
        return (id)(*(uint64_t (**)(void))(v2 + 8))();
      }

      uint64_t v50 = v2 + 120;
      uint64_t v58 = *(void *)(v2 + 248);
      uint64_t v79 = *(void *)(v2 + 240);
      uint64_t v59 = *(void *)(v2 + 232);
      uint64_t v82 = *(void *)(v2 + 224);
      uint64_t v85 = *(void *)(v2 + 312);
      uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
      uint64_t v61 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL) - 8);
      uint64_t v62 = swift_allocObject( v60,  ((*(unsigned __int8 *)(v61 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))
            + *(void *)(v61 + 72),
              *(unsigned __int8 *)(v61 + 80) | 7LL);
      *(_OWORD *)(v62 + 16) = xmmword_95430;
      uint64_t v63 = type metadata accessor for UsoTaskBuilder_noVerb_common_Person(0LL);
      swift_allocObject(v63, *(unsigned int *)(v63 + 48), *(unsigned __int16 *)(v63 + 52));
      uint64_t v64 = UsoTaskBuilder_noVerb_common_Person.init()();
      uint64_t v65 = type metadata accessor for UsoEntityBuilder_common_Person(0LL);
      swift_allocObject(v65, *(unsigned int *)(v65 + 48), *(unsigned __int16 *)(v65 + 52));
      uint64_t v66 = UsoEntityBuilder_common_Person.init()();
      dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
      uint64_t v67 = static Siri_Nlu_External_SystemPrompted.from(_:)(v64, v58);
      Siri_Nlu_External_SystemDialogAct.init()(v67);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v79, v58, v82);
      Siri_Nlu_External_SystemDialogAct.prompted.setter(v79);
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v82);
      swift_release(v66);
      swift_release(v64);
      swift_beginAccess(v85, v2 + 120, 33LL, 0LL);
      NLContextUpdate.nluSystemDialogActs.setter(v62);
    }

    swift_endAccess(v50);
    goto LABEL_9;
  }

  __break(1u);
  return result;
}

uint64_t ShareETAContactConfirmationStrategy.makeFlowCancelledResponse()(uint64_t a1)
{
  v2[22] = a1;
  v2[23] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  _BYTE v2[24] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for TemplatingResult(0LL);
  v2[25] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[26] = v5;
  v2[27] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v2[28] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ActivityType(0LL);
  v2[29] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[30] = v8;
  v2[31] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(ShareETAContactConfirmationStrategy.makeFlowCancelledResponse(), 0LL, 0LL);
}

id ShareETAContactConfirmationStrategy.makeFlowCancelledResponse()(uint64_t a1)
{
  uint64_t v3 = v1[30];
  uint64_t v2 = v1[31];
  uint64_t v4 = v1[29];
  static SiriKitEventSender.current.getter(a1);
  uint64_t v23 = v1[6];
  uint64_t v24 = v1[5];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v24);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for ActivityType.canceled(_:), v4);
  uint64_t v5 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for INShareETAIntent,  &OBJC_CLASS___INShareETAIntent_ptr);
  id result = [(id)swift_getObjCClassFromMetadata(v5) typeName];
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = v1[31];
    uint64_t v9 = v1[28];
    uint64_t v22 = v1[23];
    type metadata accessor for SiriKitEvent(0LL);
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v12 = v11;

    uint64_t v13 = enum case for SiriKitReliabilityCodes.rejectParameter(_:);
    uint64_t v14 = type metadata accessor for SiriKitReliabilityCodes(0LL);
    uint64_t v15 = *(void *)(v14 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 104))(v9, v13, v14);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v9, 0LL, 1LL, v14);
    uint64_t v16 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)( v8,  v10,  v12,  v9,  closure #1 in ShareETAPromptForContactStrategy.makeFlowCancelledResponse(),  0LL);
    dispatch thunk of SiriKitEventSending.send(_:)(v16, v24, v23);
    swift_release(v16);
    uint64_t v17 = __swift_destroy_boxed_opaque_existential_0Tm(v1 + 2);
    uint64_t v18 = *(void *)(v22 + 32);
    v1[10] = &type metadata for Common;
    v1[11] = &protocol witness table for Common;
    v1[7] = 0LL;
    uint64_t v19 = static DialogHelper.globals.getter(v17);
    v1[32] = v19;
    uint64_t v20 = *(int **)(*(void *)v18 + 112LL);
    uint64_t v25 = (int *)((char *)v20 + *v20);
    uint64_t v21 = (void *)swift_task_alloc(v20[1]);
    v1[33] = v21;
    *uint64_t v21 = v1;
    v21[1] = ShareETAContactConfirmationStrategy.makeFlowCancelledResponse();
    return (id)((uint64_t (*)(void, void *, uint64_t))v25)(v1[27], v1 + 7, v19);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t ShareETAContactConfirmationStrategy.makeFlowCancelledResponse()()
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 256);
  uint64_t v3 = *(void *)(*v1 + 264);
  *(void *)(*v1 + 27__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    uint64_t v5 = ShareETAContactConfirmationStrategy.makeFlowCancelledResponse();
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v2 + 56));
    uint64_t v5 = ShareETAPromptForContactStrategy.makeFlowCancelledResponse();
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 192);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 56));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ShareETAContactConfirmationStrategy.makeErrorResponse(_:)()
{
  return swift_task_switch(ShareETAContactConfirmationStrategy.makeErrorResponse(_:), 0LL, 0LL);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = lazy protocol witness table accessor for type Errors and conformance Errors();
  uint64_t v2 = swift_allocError(&type metadata for Errors, v1, 0LL, 0LL);
  *(void *)uint64_t v3 = 0xD000000000000025LL;
  *(void *)(v3 + 8) = 0x800000000009F480LL;
  *(_BYTE *)(v3 + 16) = 0;
  swift_willThrow(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ShareETAContactConfirmationStrategy.confirmationHandle(input:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v34 = a2;
  uint64_t v5 = type metadata accessor for Input(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Parse(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for GeoParse();
  Input.parse.getter(v13);
  static GeoParse.getDomainIntent(parse:)((uint64_t)v12, (uint64_t)v37);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  outlined init with copy of GeoIntent?((uint64_t)v37, (uint64_t)v36);
  if (!v36[3])
  {
    uint64_t v16 = outlined destroy of (label: String?, value: Any)?( (uint64_t)v36,  &demangling cache variable for type metadata for GeoIntent?);
    goto LABEL_6;
  }

  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeoIntent);
  uint64_t v15 = type metadata accessor for LocationSearchIntent(0LL);
  uint64_t v16 = swift_dynamicCast(&v35, v36, v14, v15, 6LL);
  if ((v16 & 1) == 0)
  {
LABEL_6:
    os_log_type_t v19 = static os_log_type_t.debug.getter(v16);
    uint64_t v20 = *(os_log_s **)(v3 + 16);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
    os_log_type_t v21 = v19;
    if (os_log_type_enabled(v20, v19))
    {
      uint64_t v22 = swift_slowAlloc(12LL, -1LL);
      uint64_t v33 = v6;
      uint64_t v23 = (uint8_t *)v22;
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      uint64_t v32 = v5;
      uint64_t v25 = v24;
      v36[0] = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      Input.parse.getter(v24);
      uint64_t v26 = String.init<A>(describing:)(v12, v9);
      unint64_t v28 = v27;
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36);
      swift_bridgeObjectRelease(v28);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v32);
      _os_log_impl(&dword_0, v20, v21, "ignoring parse %s", v23, 0xCu);
      swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1LL, -1LL);
      uint64_t v29 = swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
      uint64_t v29 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }

    static ActionForInput.ignore()(v29);
    return outlined destroy of (label: String?, value: Any)?( (uint64_t)v37,  &demangling cache variable for type metadata for GeoIntent?);
  }

  uint64_t v17 = v35;
  uint64_t v18 = *(unsigned __int8 (**)(void))(*(void *)v35 + 152LL);
  if (v18() == 3)
  {
    uint64_t v16 = swift_release(v17);
    goto LABEL_6;
  }

  uint64_t v31 = ((uint64_t (*)(void))v18)();
  else {
    static ActionForInput.handle()(v31);
  }
  swift_release(v17);
  return outlined destroy of (label: String?, value: Any)?( (uint64_t)v37,  &demangling cache variable for type metadata for GeoIntent?);
}

uint64_t ShareETAContactConfirmationStrategy.deinit()
{
  swift_release(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return v0;
}

uint64_t ShareETAContactConfirmationStrategy.__deallocating_deinit()
{
  swift_release(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.actionForInput(_:) in conformance ShareETAContactConfirmationStrategy()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176LL))();
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance ShareETAContactConfirmationStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(*(void *)v2 + 184LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v9(a1, a2);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:) in conformance ShareETAContactConfirmationStrategy( uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *(int **)(*(void *)v2 + 192LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v9(a1, v5);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:) in conformance ShareETAContactConfirmationStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for ShareETAContactConfirmationStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:) in conformance ShareETAContactConfirmationStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for ShareETAContactConfirmationStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse() in conformance ShareETAContactConfirmationStrategy( uint64_t a1)
{
  uint64_t v4 = *(int **)(*(void *)v1 + 200LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v7(a1);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAContactConfirmationStrategy( uint64_t a1)
{
  uint64_t v4 = *(int **)(*(void *)v1 + 208LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v7(a1);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:) in conformance ShareETAContactConfirmationStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(*(void *)v2 + 216LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v9(a1, a2);
}

void *associated type witness table accessor for PromptForConfirmationFlowStrategyAsync.AnswerType : ConfirmationResponseProviding in ShareETAContactConfirmationStrategy()
{
  return &protocol witness table for SimpleConfirmationResponseProvider;
}

uint64_t sub_8DAF8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120LL))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_8DB2C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 128LL))(*a1);
}

uint64_t sub_8DB58@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144LL))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_8DB8C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 152LL))(*a1);
}

uint64_t type metadata accessor for ShareETAContactConfirmationStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin35ShareETAContactConfirmationStrategy);
}

uint64_t TrafficIncidentBaseRCHStrategy.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  type metadata accessor for OS_os_log();
  *(void *)(v1 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001ELL,  0x800000000009AFE0LL);
  return v1;
}

#error "8DD40: call analysis failed (funcsize=101)"
uint64_t TrafficIncidentBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v2;
  return swift_task_switch(TrafficIncidentBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:), 0LL, 0LL);
}

uint64_t TrafficIncidentBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:)(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  if (v2)
  {
    id v4 = v2;
    os_log_type_t v12 = static os_log_type_t.info.getter(v4, v5, v6, v7, v8, v9, v10, v11);
    uint64_t v13 = *(os_log_s **)(v3 + 16);
    os_log_type_t v14 = v12;
    if (os_log_type_enabled(v13, v12))
    {
      id v15 = v4;
      id v31 = v4;
      uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v30 = swift_slowAlloc(32LL, -1LL);
      uint64_t v32 = v30;
      *(_DWORD *)uint64_t v16 = 136315138;
      id v17 = v15;
      id v18 = [v17 description];
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      unint64_t v21 = v20;

      *(void *)(v1 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24);
      swift_bridgeObjectRelease(v21);

      _os_log_impl(&dword_0, v13, v14, "makeIntentFromParse with current intent: %s", v16, 0xCu);
      swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      uint64_t v22 = v16;
      id v4 = v31;
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    return (*(uint64_t (**)(id))(v1 + 8))(v4);
  }

  else
  {
    uint64_t v24 = static os_log_type_t.error.getter(a1);
    os_log(_:dso:log:_:_:)( v24,  &dword_0,  *(void *)(v3 + 16),  "makeIntentFromParse should have INReportIncidentIntent passed in",  64LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v25 = type metadata accessor for RuntimeError();
    uint64_t v26 = swift_allocObject(v25, 32LL, 7LL);
    *(void *)(v26 + 16) = 0xD000000000000040LL;
    *(void *)(v26 + 24) = 0x800000000009F500LL;
    uint64_t v27 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RuntimeError,  (uint64_t)&protocol conformance descriptor for RuntimeError);
    uint64_t v28 = swift_allocError(v25, v27, 0LL, 0LL);
    *uint64_t v29 = v26;
    swift_willThrow(v28);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

uint64_t TrafficIncidentBaseRCHStrategy.init()()
{
  *(void *)(v0 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0xD00000000000001ELL,  0x800000000009AFE0LL);
  return v0;
}

uint64_t protocol witness for RCHFlowStrategyAsync.actionForInput(input:) in conformance TrafficIncidentBaseRCHStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88LL))();
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeIntentFromParse(parse:currentIntent:) in conformance TrafficIncidentBaseRCHStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(**(void **)v2 + 96LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance SaveParkingLocationUnsupportedValueStrategy;
  return v9(a1, a2);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeParameterMetadata(intent:) in conformance TrafficIncidentBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TrafficIncidentBaseRCHStrategy();
  return RCHFlowStrategyAsync.makeParameterMetadata(intent:)(a1, v5, a3);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance TrafficIncidentBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for TrafficIncidentBaseRCHStrategy();
  void *v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:) in conformance TrafficIncidentBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for TrafficIncidentBaseRCHStrategy();
  void *v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:) in conformance TrafficIncidentBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for TrafficIncidentBaseRCHStrategy();
  void *v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance TrafficIncidentBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  os_log_type_t v12 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:)[1]);
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for TrafficIncidentBaseRCHStrategy();
  *os_log_type_t v12 = v6;
  v12[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:)(a1, a2, a3, a4, v13, a6);
}

uint64_t protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance TrafficIncidentBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  os_log_type_t v12 = (void *)swift_task_alloc(async function pointer to RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)[1]);
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for TrafficIncidentBaseRCHStrategy();
  *os_log_type_t v12 = v6;
  v12[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)( a1,  a2,  a3,  a4,  v13,  a6);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentBaseRCHStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentBaseRCHStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentHandleIntentStrategy;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)(a1, a2, v9, a4);
}

uint64_t base witness table accessor for ResolveConfirmFlowStrategyAsync in TrafficIncidentBaseRCHStrategy( uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type TrafficIncidentBaseRCHStrategy and conformance TrafficIncidentBaseRCHStrategy,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for TrafficIncidentBaseRCHStrategy,  (uint64_t)&protocol conformance descriptor for TrafficIncidentBaseRCHStrategy);
}

uint64_t type metadata accessor for TrafficIncidentBaseRCHStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin30TrafficIncidentBaseRCHStrategy);
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in TrafficIncidentBaseRCHStrategy( uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type TrafficIncidentBaseRCHStrategy and conformance TrafficIncidentBaseRCHStrategy,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for TrafficIncidentBaseRCHStrategy,  (uint64_t)&protocol conformance descriptor for TrafficIncidentBaseRCHStrategy);
}

uint64_t base witness table accessor for RouteConfirmIntentResponseFlowStrategyAsync in TrafficIncidentBaseRCHStrategy( uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type TrafficIncidentBaseRCHStrategy and conformance TrafficIncidentBaseRCHStrategy,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for TrafficIncidentBaseRCHStrategy,  (uint64_t)&protocol conformance descriptor for TrafficIncidentBaseRCHStrategy);
}

uint64_t WhereAmIFlow.__allocating_init()()
{
  void v2[3] = &type metadata for FlowHelperImpl;
  void v2[4] = &protocol witness table for FlowHelperImpl;
  v2[0] = swift_allocObject(&unk_BC6E8, 192LL, 7LL);
  FlowHelperImpl.init()((void *)(v2[0] + 16LL));
  return (*(uint64_t (**)(void *))(v0 + 160))(v2);
}

uint64_t sub_8E5E8()
{
  return swift_deallocObject(v0, 192LL, 7LL);
}

uint64_t CLPlacemark.makeDialogLocation()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin();
  uint64_t v68 = (char *)&v67 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v67 - v3;
  __chkstk_darwin();
  uint64_t v6 = (char *)&v67 - v5;
  __chkstk_darwin();
  uint64_t v8 = (char *)&v67 - v7;
  __chkstk_darwin();
  uint64_t v10 = (char *)&v67 - v9;
  __chkstk_darwin();
  os_log_type_t v12 = (char *)&v67 - v11;
  uint64_t v13 = type metadata accessor for DialogLocationAddress.Builder(0LL);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v14 = DialogLocationAddress.Builder.init()();
  id v15 = [v0 fullThoroughfare];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v19 = v18;

    String.toSpeakableString.getter(v17, v19);
    swift_bridgeObjectRelease(v19);
    uint64_t v20 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v12, 0LL, 1LL, v20);
  }

  else
  {
    uint64_t v21 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v12, 1LL, 1LL, v21);
  }

  uint64_t v22 = dispatch thunk of DialogLocationAddress.Builder.withFullThoroughfare(_:)(v12);
  swift_release(v14);
  outlined destroy of SpeakableString?((uint64_t)v12);
  id v23 = [v1 locality];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    uint64_t v27 = v26;

    String.toSpeakableString.getter(v25, v27);
    swift_bridgeObjectRelease(v27);
    uint64_t v28 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v10, 0LL, 1LL, v28);
  }

  else
  {
    uint64_t v29 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v10, 1LL, 1LL, v29);
  }

  uint64_t v30 = dispatch thunk of DialogLocationAddress.Builder.withLocality(_:)(v10);
  swift_release(v22);
  outlined destroy of SpeakableString?((uint64_t)v10);
  id v31 = [v1 country];
  if (v31)
  {
    uint64_t v32 = v31;
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    uint64_t v35 = v34;

    String.toSpeakableString.getter(v33, v35);
    swift_bridgeObjectRelease(v35);
    uint64_t v36 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))(v8, 0LL, 1LL, v36);
  }

  else
  {
    uint64_t v37 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56LL))(v8, 1LL, 1LL, v37);
  }

  uint64_t v38 = dispatch thunk of DialogLocationAddress.Builder.withCountry(_:)(v8);
  swift_release(v30);
  outlined destroy of SpeakableString?((uint64_t)v8);
  id v39 = [v1 administrativeArea];
  if (v39)
  {
    unint64_t v40 = v39;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    uint64_t v43 = v42;

    String.toSpeakableString.getter(v41, v43);
    swift_bridgeObjectRelease(v43);
    uint64_t v44 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v6, 0LL, 1LL, v44);
  }

  else
  {
    uint64_t v45 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56LL))(v6, 1LL, 1LL, v45);
  }

  uint64_t v46 = dispatch thunk of DialogLocationAddress.Builder.withAdministrativeArea(_:)(v6);
  swift_release(v38);
  outlined destroy of SpeakableString?((uint64_t)v6);
  id v47 = [v1 subLocality];
  if (v47)
  {
    uint64_t v48 = v47;
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    uint64_t v51 = v50;

    String.toSpeakableString.getter(v49, v51);
    swift_bridgeObjectRelease(v51);
    uint64_t v52 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56LL))(v4, 0LL, 1LL, v52);
  }

  else
  {
    uint64_t v53 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56LL))(v4, 1LL, 1LL, v53);
  }

  uint64_t v54 = dispatch thunk of DialogLocationAddress.Builder.withSubLocality(_:)(v4);
  swift_release(v46);
  outlined destroy of SpeakableString?((uint64_t)v4);
  id v55 = [v1 postalCode];
  if (v55)
  {
    uint64_t v56 = v55;
    uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    uint64_t v59 = v58;

    uint64_t v60 = (uint64_t)v68;
    String.toSpeakableString.getter(v57, v59);
    swift_bridgeObjectRelease(v59);
    uint64_t v61 = type metadata accessor for SpeakableString(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56LL))(v60, 0LL, 1LL, v61);
  }

  else
  {
    uint64_t v62 = type metadata accessor for SpeakableString(0LL);
    uint64_t v60 = (uint64_t)v68;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56LL))(v68, 1LL, 1LL, v62);
  }

  uint64_t v63 = dispatch thunk of DialogLocationAddress.Builder.withPostCode(_:)(v60);
  swift_release(v54);
  uint64_t v64 = outlined destroy of SpeakableString?(v60);
  uint64_t v65 = dispatch thunk of DialogLocationAddress.Builder.build()(v64);
  swift_release(v63);
  return v65;
}

void *WhereAmIFlow.flowState.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  outlined copy of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v1, *(_BYTE *)(v0 + 32));
  return v1;
}

void WhereAmIFlow.flowState.setter(uint64_t a1, char a2)
{
  uint64_t v5 = *(void **)(v2 + 24);
  *(void *)(v2 + 24) = a1;
  char v6 = *(_BYTE *)(v2 + 32);
  *(_BYTE *)(v2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a2;
  outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v5, v6);
}

uint64_t WhereAmIFlow.catService.getter()
{
  return swift_retain(*(void *)(v0 + 80));
}

uint64_t WhereAmIFlow.__allocating_init(with:)(void *a1)
{
  uint64_t v3 = swift_allocObject(v1, 88LL, 7LL);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v4);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v8 + 16))(v7);
  uint64_t v9 = specialized WhereAmIFlow.init(with:)((uint64_t)v7, v3, v4, v5);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v9;
}

uint64_t WhereAmIFlow.init(with:)(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v3);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v7 + 16))(v6);
  uint64_t v8 = specialized WhereAmIFlow.init(with:)((uint64_t)v6, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v8;
}

uint64_t WhereAmIFlow.executeState()(uint64_t a1)
{
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = a1;
  *(void *)(v2 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v1;
  return swift_task_switch(WhereAmIFlow.executeState(), 0LL, 0LL);
}

uint64_t WhereAmIFlow.executeState()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 40) + 112LL))();
  uint64_t v9 = (void *)v1;
  *(void *)(v0 + 48) = v1;
  if (!(_BYTE)v2)
  {
    uint64_t v21 = *(void **)(v0 + 40);
    uint64_t v22 = static os_log_type_t.info.getter(v1, v2, v3, v4, v5, v6, v7, v8);
    os_log(_:dso:log:_:_:)(v22, &dword_0, v21[2], "Handling the WhereAmI Flow", 26LL, 2LL, _swiftEmptyArrayStorage);
    id v23 = *(int **)(*v21 + 192LL);
    uint64_t v35 = (int *)((char *)v23 + *v23);
    uint64_t v24 = (void *)swift_task_alloc(v23[1]);
    *(void *)(v0 + 56) = v24;
    *uint64_t v24 = v0;
    v24[1] = WhereAmIFlow.executeState();
    return ((uint64_t (*)(void, void *))v35)(*(void *)(v0 + 32), v9);
  }

  if (v2 == 1)
  {
    uint64_t v10 = *(void *)(v0 + 40);
    os_log_type_t v11 = static os_log_type_t.default.getter(v1);
    os_log_type_t v12 = *(os_log_s **)(v10 + 16);
    os_log_type_t v13 = v11;
    uint64_t v14 = os_log_type_enabled(v12, v11);
    if ((v14 & 1) != 0)
    {
      outlined copy of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v9, 1);
      outlined copy of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v9, 1);
      id v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      uint64_t v37 = v16;
      *(_DWORD *)id v15 = 136315138;
      *(void *)(v0 + 16) = v9;
      swift_errorRetain(v9);
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v18 = String.init<A>(describing:)(v0 + 16, v17);
      unint64_t v20 = v19;
      *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
      swift_bridgeObjectRelease(v20);
      outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v9, 1);
      outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v9, 1);
      _os_log_impl(&dword_0, v12, v13, "WhereAmIFlow execute request unsupported with err: %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1LL, -1LL);
      uint64_t v14 = swift_slowDealloc(v15, -1LL, -1LL);
    }

    static ExecuteResponse.complete()(v14);
    outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v9, 1);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  if (v1)
  {
    if (v1 != 1)
    {
      uint64_t v26 = *(void *)(v0 + 40);
      uint64_t v27 = static os_log_type_t.default.getter(v1);
      uint64_t v28 = os_log(_:dso:log:_:_:)( v27,  &dword_0,  *(void *)(v26 + 16),  "WhereAmI execute rchComplete",  28LL,  2LL,  _swiftEmptyArrayStorage);
      static ExecuteResponse.complete()(v28);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

  else
  {
    uint64_t v29 = *(void **)(v0 + 40);
    uint64_t v30 = static os_log_type_t.default.getter(0LL);
    os_log(_:dso:log:_:_:)(v30, &dword_0, v29[2], "Creating .whereAmI guardFlows", 29LL, 2LL, _swiftEmptyArrayStorage);
    uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t))(*v29 + 120LL))(1LL, 2LL);
  }

  id v31 = *(void **)(v0 + 40);
  uint64_t v32 = static os_log_type_t.default.getter(v1);
  os_log(_:dso:log:_:_:)(v32, &dword_0, v31[2], " .whereAmI flow prechecks", 25LL, 2LL, _swiftEmptyArrayStorage);
  uint64_t v33 = *(int **)(*v31 + 184LL);
  uint64_t v36 = (uint64_t (*)(void))((char *)v33 + *v33);
  uint64_t v34 = (void *)swift_task_alloc(v33[1]);
  *(void *)(v0 + 64) = v34;
  *uint64_t v34 = v0;
  v34[1] = AnswerAltitudeFlow.executeState();
  return v36(*(void *)(v0 + 32));
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 56LL));
  return swift_task_switch(WhereAmIFlow.executeState(), 0LL, 0LL);
}

{
  uint64_t v0;
  outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(*(id *)(v0 + 48), 0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t WhereAmIFlow.preChecks()(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v1;
  return swift_task_switch(WhereAmIFlow.preChecks(), 0LL, 0LL);
}

uint64_t WhereAmIFlow.preChecks()()
{
  uint64_t v1 = *(void *)(v0 + 32);
  (*(void (**)(__int128 *__return_ptr))(*(void *)v1 + 136LL))(v5);
  uint64_t Flow = type metadata accessor for LocationFetchFlow();
  swift_allocObject(Flow, 89LL, 7LL);
  *(void *)(v0 + 16) = LocationFetchFlow.init(flowHelper:requiredAccess:)(v5, 3);
  uint64_t v3 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type LocationFetchFlow and conformance LocationFetchFlow,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for LocationFetchFlow,  (uint64_t)&protocol conformance descriptor for LocationFetchFlow);
  swift_retain(v1);
  static ExecuteResponse.ongoing<A>(next:childCompletion:)( v0 + 16,  partial apply for closure #1 in WhereAmIFlow.preChecks(),  v1,  Flow,  v3);
  swift_release(v1);
  swift_release(*(void *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in WhereAmIFlow.preChecks()(uint64_t a1)
{
  __asm { BR              X10 }

void sub_8F2B4()
{
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___CLPlacemark);
  id v3 = v0;
  id v4 = [v2 placemarkWithLocation:v3 name:0 postalAddress:0];
  os_log_type_t v12 = static os_log_type_t.info.getter(v4, v5, v6, v7, v8, v9, v10, v11);
  os_log_type_t v13 = (os_log_s *)v1[2];
  os_log_type_t v14 = v12;
  if (os_log_type_enabled(v13, v12))
  {
    outlined copy of LocationFetchFlow.ExitValue(v0, 0);
    outlined copy of LocationFetchFlow.ExitValue(v0, 0);
    id v24 = v4;
    id v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    v26[0] = v16;
    *(_DWORD *)id v15 = 136315138;
    id v17 = [v3 debugDescription];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    unint64_t v20 = v19;

    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26);
    swift_bridgeObjectRelease(v20);
    outlined consume of LocationFetchFlow.ExitValue(v0, 0);
    outlined consume of LocationFetchFlow.ExitValue(v0, 0);
    _os_log_impl(&dword_0, v13, v14, "WhereAmIFlow continuing with location %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    uint64_t v21 = v15;
    id v4 = v24;
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  uint64_t v22 = *(void (**)(id, void))(*v1 + 120LL);
  id v23 = v4;
  v22(v4, 0LL);

  outlined consume of LocationFetchFlow.ExitValue(v0, 0);
}

uint64_t WhereAmIFlow.handle(location:)(uint64_t a1, uint64_t a2)
{
  v3[52] = a2;
  v3[53] = v2;
  v3[51] = a1;
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v3[54] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[55] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[56] = v6;
  v3[57] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(WhereAmIFlow.handle(location:), 0LL, 0LL);
}

uint64_t WhereAmIFlow.handle(location:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(v8 + 424);
  os_log_type_t v10 = static os_log_type_t.info.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v11 = *(os_log_s **)(v9 + 16);
  *(void *)(v8 + 464) = v11;
  os_log_type_t v12 = v10;
  if (os_log_type_enabled(v11, v10))
  {
    id v13 = *(id *)(v8 + 416);
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = v15;
    *(_DWORD *)os_log_type_t v14 = 136315138;
    id v16 = [v13 debugDescription];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    unint64_t v19 = v18;

    *(void *)(v8 + 40specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 + 400, v8 + 408);
    swift_bridgeObjectRelease(v19);

    _os_log_impl(&dword_0, v11, v12, "RevGeocode location to get address: %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  unint64_t v20 = (void *)swift_task_alloc(dword_C992C);
  *(void *)(v8 + 47__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v20;
  *unint64_t v20 = v8;
  v20[1] = WhereAmIFlow.handle(location:);
  v20[17] = *(void *)(v8 + 416);
  return swift_task_switch(CLPlacemark.withRevGeo(), 0LL, 0LL);
}

uint64_t WhereAmIFlow.handle(location:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 472LL);
  *(void *)(*(void *)v1 + 48swift_beginAccess(v2 + 24, v7, 1LL, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(WhereAmIFlow.handle(location:), 0LL, 0LL);
}

{
  void *v1;
  os_log_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void *, void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void *, void);
  uint64_t v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  os_log_s *log;
  uint64_t v24[4];
  uint64_t v2 = (os_log_s *)v1[58];
  uint64_t v4 = v1[53];
  id v3 = v1[54];
  static DialogPhase.summary.getter(a1);
  OutputGenerationManifest.init(dialogPhase:_:)(v3, AnswerETAIntentResponseCode.rawValue.getter, 0LL);
  OutputGenerationManifest.listenAfterSpeaking.setter(0LL);
  OutputGenerationManifest.responseViewId.setter(0x6465722D7370616DLL, 0xED00006465746361LL);
  void v24[3] = (uint64_t)&type metadata for String;
  v24[0] = 0LL;
  v24[1] = 0xE000000000000000LL;
  uint64_t v5 = (uint64_t (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v4 + 152LL))(v1 + 32);
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(v6 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v6, v7);
  uint64_t v9 = (void (*)(void *, void))(*(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 96))( v1 + 36,  v7,  v8);
  specialized Dictionary.subscript.setter((uint64_t)v24, 0x65736E6F70736572LL, 0xEC00000065646F4DLL);
  v9(v1 + 36, 0LL);
  os_log_type_t v10 = v5(v1 + 32, 0LL);
  uint64_t v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v2, v11))
  {
    os_log_type_t v12 = v1[57];
    os_log_t log = (os_log_s *)v1[58];
    id v13 = v1[55];
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    v24[0] = v15;
    *(_DWORD *)os_log_type_t v14 = 136315138;
    swift_beginAccess(v12, v1 + 43, 0LL, 0LL);
    id v16 = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type OutputGenerationManifest and conformance OutputGenerationManifest,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for OutputGenerationManifest,  (uint64_t)&protocol conformance descriptor for OutputGenerationManifest);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
    unint64_t v19 = v18;
    v1[49] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 49, v1 + 50);
    swift_bridgeObjectRelease(v19);
    _os_log_impl(&dword_0, log, v11, "outputManifest: %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  v1[48] = _swiftEmptyArrayStorage;
  unint64_t v20 = (void *)swift_task_alloc(dword_C9934);
  v1[61] = v20;
  *unint64_t v20 = v1;
  v20[1] = WhereAmIFlow.handle(location:);
  uint64_t v21 = v1[53];
  v20[23] = v1[60];
  v20[24] = v21;
  return swift_task_switch(WhereAmIFlow.makeDialog(placemark:), 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  void *v6;
  int *v8;
  id v3 = *(void *)(*v2 + 488);
  uint64_t v4 = *v2;
  *(void *)(v4 + 496) = a1;
  swift_task_dealloc(v3);
  if (!v1) {
    return swift_task_switch(WhereAmIFlow.handle(location:), 0LL, 0LL);
  }
  swift_errorRelease(v1);
  uint64_t v5 = *(int **)(**(void **)(v4 + 424) + 208LL);
  uint64_t v8 = (int *)((char *)v5 + *v5);
  uint64_t v6 = (void *)swift_task_alloc(v5[1]);
  *(void *)(v4 + 504) = v6;
  char *v6 = v4;
  v6[1] = WhereAmIFlow.handle(location:);
  return ((uint64_t (*)(uint64_t, void))v8)(v4 + 136, *(void *)(v4 + 480));
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  int *v9;
  void *v10;
  int *v12;
  uint64_t v2 = *(void **)(v1 + 496);
  id v3 = *(void *)(v1 + 464);
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  os_log(_:dso:log:_:_:)(v4, &dword_0, v3, "Adding Dialog to WhereAmI", 25LL, 2LL, _swiftEmptyArrayStorage);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v2);
  uint64_t v6 = *(void *)((char *)&dword_10 + (*(void *)(v1 + 384) & 0xFFFFFFFFFFFFFF8LL));
  uint64_t v5 = *(void *)((char *)&dword_18 + (*(void *)(v1 + 384) & 0xFFFFFFFFFFFFFF8LL));
  if (v6 >= v5 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1LL);
  }
  uint64_t v7 = *(void **)(v1 + 496);
  uint64_t v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v7);
  specialized Array._endMutation()(v8);

  uint64_t v9 = *(int **)(**(void **)(v1 + 424) + 208LL);
  os_log_type_t v12 = (int *)((char *)v9 + *v9);
  os_log_type_t v10 = (void *)swift_task_alloc(v9[1]);
  *(void *)(v1 + 504) = v10;
  char *v10 = v1;
  v10[1] = WhereAmIFlow.handle(location:);
  return ((uint64_t (*)(uint64_t, void))v12)(v1 + 136, *(void *)(v1 + 480));
}

{
  uint64_t v1;
  os_log_s *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  os_log_s *log;
  os_log_t loga;
  void *v23;
  uint64_t v24[5];
  uint64_t v2 = *(os_log_s **)(v1 + 464);
  id v3 = static os_log_type_t.default.getter(a1);
  id v23 = (void *)(v1 + 176);
  outlined init with copy of DeviceState(v1 + 176, v1 + 216);
  if (os_log_type_enabled(v2, v3))
  {
    os_log_t log = *(os_log_s **)(v1 + 464);
    uint64_t v4 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v5 = swift_slowAlloc(32LL, -1LL);
    v24[0] = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    outlined init with copy of DeviceState(v1 + 216, v1 + 56);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output);
    uint64_t v7 = String.init<A>(describing:)(v1 + 56, v6);
    uint64_t v9 = v8;
    *(void *)(v1 + 376) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 376, v1 + 384);
    swift_bridgeObjectRelease(v9);
    __swift_destroy_boxed_opaque_existential_0Tm((void *)(v1 + 216));
    _os_log_impl(&dword_0, log, v3, "WhereAmIFlow completing with output: %s", v4, 0xCu);
    swift_arrayDestroy(v5, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1LL, -1LL);
    os_log_type_t v10 = swift_slowDealloc(v4, -1LL, -1LL);
  }

  else
  {
    os_log_type_t v10 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v1 + 216));
  }

  uint64_t v11 = *(void **)(v1 + 480);
  os_log_type_t v12 = *(void *)(v1 + 456);
  unint64_t v19 = *(void *)(v1 + 448);
  unint64_t v20 = *(void *)(v1 + 440);
  os_log_t loga = *(os_log_t *)(v1 + 432);
  (*(void (**)(uint64_t))(**(void **)(v1 + 424) + 136LL))(v10);
  id v13 = *(void *)(v1 + 40);
  os_log_type_t v14 = *(void *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 16), v13);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v14 + 104))(v24, v13, v14);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v1 + 16));
  outlined init with copy of DeviceState((uint64_t)v23, v1 + 96);
  uint64_t v15 = swift_allocObject(&unk_BC710, 56LL, 7LL);
  outlined init with take of CATType((__int128 *)(v1 + 96), v15 + 16);
  id v16 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  uint64_t v17 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v24,  &async function pointer to partial apply for closure #1 in WhereAmIFlow.handle(location:),  v15);
  *(void *)(v1 + 368) = v17;
  static ExecuteResponse.complete<A>(next:)(v1 + 368, v16, &protocol witness table for SimpleOutputFlowAsync);

  swift_release(v17);
  __swift_destroy_boxed_opaque_existential_0Tm(v23);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v1 + 136));
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v12, v20);
  swift_task_dealloc(v12);
  swift_task_dealloc(loga);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t WhereAmIFlow.handle(location:)()
{
  return swift_task_switch(WhereAmIFlow.handle(location:), 0LL, 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char *v6;
  uint64_t v1 = v0[57];
  uint64_t v2 = type metadata accessor for ResponseFactory(0LL);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v0[64] = ResponseFactory.init()();
  id v3 = v0[48];
  v0[65] = v3;
  swift_beginAccess(v1, v0 + 40, 0LL, 0LL);
  v0[66] = v4;
  char *v4 = v0;
  v4[1] = WhereAmIFlow.handle(location:);
  return ((uint64_t (*)(void *, void *, uint64_t, void))v6)(v0 + 22, v0 + 17, v3, v0[57]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(*(void *)v0 + 520LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 512LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 528LL));
  swift_bridgeObjectRelease(v1);
  swift_release(v2);
  return swift_task_switch(WhereAmIFlow.handle(location:), 0LL, 0LL);
}

uint64_t CLPlacemark.withRevGeo()()
{
  *(void *)(v1 + 136) = v0;
  return swift_task_switch(CLPlacemark.withRevGeo(), 0LL, 0LL);
}

{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v1 = [*(id *)(v0 + 136) location];
  *(void *)(v0 + 144) = v1;
  if (!v1) {
    return (*(uint64_t (**)(id))(v0 + 8))(*(id *)(v0 + 136));
  }
  uint64_t v2 = v1;
  id v3 = v0 + 16;
  *(void *)(v0 + 12specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = 0LL;
  uint64_t v4 = specialized getter of coder #1 in CLPlacemark.withRevGeo()((void **)(v0 + 120));
  *(void *)(v0 + 15__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v4;
  *(void *)(v0 + 56) = v0 + 128;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = CLPlacemark.withRevGeo();
  uint64_t v5 = swift_continuation_init(v0 + 16, 1LL);
  *(void *)(v0 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = _NSConcreteStackBlock;
  uint64_t v6 = (void *)(v0 + 80);
  v6[1] = 0x40000000LL;
  __int128 v6[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [CLPlacemark];
  void v6[3] = &block_descriptor_1;
  v6[4] = v5;
  [v4 reverseGeocodeLocation:v2 completionHandler:v6];
  return swift_continuation_await(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 16swift_beginAccess(v2 + 24, v7, 1LL, 0LL) = v1;
  if (v1) {
    uint64_t v2 = CLPlacemark.withRevGeo();
  }
  else {
    uint64_t v2 = CLPlacemark.withRevGeo();
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v1 = *(void **)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v4 = *(void **)(v0 + 136);
  id v3 = *(void **)(v0 + 144);
  swift_willThrow();

  uint64_t v5 = *(void **)(v0 + 120);
  uint64_t v6 = v4;
  swift_errorRelease(v2);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 136));
}

void CLPlacemark.withRevGeo()()
{
  uint64_t v1 = *(void *)(v0 + 128);

  if (!((unint64_t)v1 >> 62))
  {
LABEL_11:
    uint64_t v8 = *(void **)(v0 + 144);
    swift_bridgeObjectRelease(v1);
    id v3 =  [(id)objc_opt_self(CLPlacemark) placemarkWithLocation:v8 name:0 postalAddress:0];

    uint64_t v5 = *(void **)(v0 + 120);
    goto LABEL_12;
  }

  if (v1 < 0) {
    uint64_t v6 = v1;
  }
  else {
    uint64_t v6 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v1);
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v6);
  swift_bridgeObjectRelease(v1);
  if (!v7) {
    goto LABEL_11;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001LL) != 0)
  {
    id v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v1);
    goto LABEL_6;
  }

  if (*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL)))
  {
    id v2 = *(id *)(v1 + 32);
LABEL_6:
    id v3 = v2;
    uint64_t v4 = *(void **)(v0 + 144);
    swift_bridgeObjectRelease(v1);
    uint64_t v5 = *(void **)(v0 + 120);

LABEL_12:
    (*(void (**)(id))(v0 + 8))(v3);
    return;
  }

  __break(1u);
}

uint64_t closure #1 in WhereAmIFlow.handle(location:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(closure #1 in WhereAmIFlow.handle(location:), 0LL, 0LL);
}

uint64_t closure #1 in WhereAmIFlow.handle(location:)()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t WhereAmIFlow.makeDialog(placemark:)(uint64_t a1)
{
  *(void *)(v2 + 184) = a1;
  *(void *)(v2 + 19__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v1;
  return swift_task_switch(WhereAmIFlow.makeDialog(placemark:), 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 232LL);
  *(void *)(*(void *)v2 + 24swift_beginAccess(v2 + 24, v7, 1LL, 0LL) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = v4[27];
    swift_bridgeObjectRelease(v4[28]);
    swift_release(v6);
    uint64_t v7 = WhereAmIFlow.makeDialog(placemark:);
  }

  else
  {
    uint64_t v8 = v4[28];
    swift_release(v4[27]);
    swift_bridgeObjectRelease(v8);
    v4[31] = a1;
    __swift_destroy_boxed_opaque_existential_0Tm(v4 + 7);
    uint64_t v7 = WhereAmIFlow.makeDialog(placemark:);
  }

  return swift_task_switch(v7, 0LL, 0LL);
}

uint64_t WhereAmIFlow.makeDialog(placemark:)()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = CLPlacemark.makeDialogLocation()();
  v0[25] = v2;
  uint64_t v3 = swift_retain_n(v2, 2LL);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  uint64_t v5 = *(os_log_s **)(v1 + 16);
  v0[26] = v5;
  os_log_type_t v6 = v4;
  uint64_t v7 = os_log_type_enabled(v5, v4);
  if ((_DWORD)v7)
  {
    uint64_t v8 = v0[24];
    swift_retain_n(v8, 2LL);
    os_log_type_t type = v6;
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v29 = swift_slowAlloc(32LL, -1LL);
    uint64_t v32 = v29;
    *(_DWORD *)uint64_t v9 = 136315138;
    buf = v9;
    (*(void (**)(void))(*(void *)v8 + 136LL))();
    uint64_t v10 = v0[20];
    uint64_t v11 = v0[21];
    __swift_project_boxed_opaque_existential_1(v0 + 17, v10);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 80))(v10, v11);
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 17);
    uint64_t v14 = Dictionary.description.getter(v13);
    unint64_t v16 = v15;
    swift_bridgeObjectRelease(v12);
    v0[22] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23);
    swift_bridgeObjectRelease(v16);
    swift_release_n(v8, 2LL);
    _os_log_impl(&dword_0, v5, type, "catGlobals: %s", buf, 0xCu);
    swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    uint64_t v7 = swift_slowDealloc(buf, -1LL, -1LL);
  }

  uint64_t v17 = *(void (**)(uint64_t))(*(void *)v0[24] + 136LL);
  v17(v7);
  uint64_t v18 = v0[5];
  uint64_t v19 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v18);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 128))(v18, v19);
  v0[27] = v20;
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 2);
  v0[10] = &type metadata for LocationSearch;
  v0[11] = &protocol witness table for LocationSearch;
  v0[7] = v2;
  v0[8] = v2;
  uint64_t v21 = swift_retain_n(v2, 2LL);
  v17(v21);
  uint64_t v22 = v0[15];
  uint64_t v23 = v0[16];
  __swift_project_boxed_opaque_existential_1(v0 + 12, v22);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 80))(v22, v23);
  v0[28] = v24;
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 12);
  uint64_t v25 = *(int **)(*(void *)v20 + 152LL);
  uint64_t typea = (int *)((char *)v25 + *v25);
  uint64_t v26 = (void *)swift_task_alloc(v25[1]);
  v0[29] = v26;
  *uint64_t v26 = v0;
  v26[1] = WhereAmIFlow.makeDialog(placemark:);
  return ((uint64_t (*)(void *, uint64_t))typea)(v0 + 7, v24);
}

{
  uint64_t v0;
  swift_release_n(*(void *)(v0 + 200), 3LL);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 248));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 208);
  os_log_type_t v4 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 56));
  uint64_t v5 = static os_log_type_t.error.getter(v4);
  os_log(_:dso:log:_:_:)( v5,  &dword_0,  v2,  "Dialog Engine RF implementation error when building WhereAmI experience",  71LL,  2LL,  _swiftEmptyArrayStorage);
  os_log_type_t v6 = lazy protocol witness table accessor for type Errors and conformance Errors();
  uint64_t v7 = swift_allocError(&type metadata for Errors, v6, 0LL, 0LL);
  *(_OWORD *)uint64_t v8 = xmmword_963F0;
  *(_BYTE *)(v8 + 16) = 3;
  swift_willThrow(v7);
  swift_errorRelease(v1);
  swift_release_n(v3, 3LL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t WhereAmIFlow.makeRFView(placemark:)(uint64_t a1, uint64_t a2)
{
  v3[54] = a2;
  v3[55] = v2;
  v3[53] = a1;
  uint64_t v4 = type metadata accessor for Google_Protobuf_DoubleValue(0LL);
  v3[56] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[57] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[58] = swift_task_alloc(v6);
  v3[59] = swift_task_alloc(v6);
  return swift_task_switch(WhereAmIFlow.makeRFView(placemark:), 0LL, 0LL);
}

uint64_t WhereAmIFlow.makeRFView(placemark:)()
{
  uint64_t v70 = *(void (**)(void))(**(void **)(v0 + 440) + 136LL);
  v70();
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 408);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 376), v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 128))(v1, v2);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 376));
  *(_OWORD *)(v0 + 96) = xmmword_9B150;
  uint64_t v65 = (void *)(v0 + 296);
  uint64_t v66 = (void *)(v0 + 176);
  *(void *)(v0 + 12specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &type metadata for GeoLabel;
  *(void *)(v0 + 128) = &protocol witness table for GeoLabel;
  *(_BYTE *)(v0 + 11__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 136LL))(v0 + 96);
  uint64_t v6 = v5;
  LOBYTE(v1) = v7;
  swift_release(v3);
  uint64_t v8 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 96));
  uint64_t v64 = (void *)(v0 + 336);
  if ((v1 & 1) != 0)
  {
    uint64_t v8 = outlined consume of Result<String, Error>(v4, v6, 1);
    uint64_t v68 = 0LL;
    unint64_t v69 = 0xE000000000000000LL;
  }

  else
  {
    uint64_t v68 = v4;
    unint64_t v69 = v6;
  }

  ((void (*)(uint64_t))v70)(v8);
  uint64_t v9 = *(void *)(v0 + 160);
  uint64_t v10 = *(void *)(v0 + 168);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 136), v9);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 128))(v9, v10);
  uint64_t v12 = __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 136));
  ((void (*)(uint64_t))v70)(v12);
  uint64_t v13 = *(void *)(v0 + 240);
  uint64_t v14 = *(void *)(v0 + 248);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 216), v13);
  (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
  uint64_t v15 = *(void *)(v0 + 280);
  uint64_t v16 = *(void *)(v0 + 288);
  uint64_t v17 = __swift_project_boxed_opaque_existential_1((void *)(v0 + 256), v15);
  uint64_t v18 = *(void *)(v15 - 8);
  uint64_t v19 = swift_task_alloc((*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t, void *, uint64_t))(v18 + 16))(v19, v17, v15);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 216));
  LOBYTE(v1__swift_destroy_boxed_opaque_existential_0Tm(v0 + 7) = dispatch thunk of DeviceState.isWatch.getter(v15, v16);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v15);
  swift_task_dealloc(v19);
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 256));
  uint64_t v20 = 4LL;
  *(void *)(v0 + 20specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &type metadata for GeoLabel;
  *(void *)(v0 + 208) = &protocol witness table for GeoLabel;
  *(void *)(v0 + 176) = v20;
  *(void *)(v0 + 184) = 0LL;
  *(_BYTE *)(v0 + 19__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2;
  uint64_t v21 = (*(uint64_t (**)(void *))(*(void *)v11 + 136LL))(v66);
  uint64_t v72 = v22;
  char v24 = v23;
  swift_release(v11);
  uint64_t v25 = __swift_destroy_boxed_opaque_existential_0Tm(v66);
  if ((v24 & 1) != 0)
  {
    uint64_t v25 = outlined consume of Result<String, Error>(v21, v72, 1);
    uint64_t v67 = 0LL;
    uint64_t v72 = 0xE000000000000000LL;
  }

  else
  {
    uint64_t v67 = v21;
  }

  ((void (*)(uint64_t))v70)(v25);
  uint64_t v26 = *(void *)(v0 + 320);
  uint64_t v27 = *(void *)(v0 + 328);
  __swift_project_boxed_opaque_existential_1(v65, v26);
  uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 128))(v26, v27);
  __swift_destroy_boxed_opaque_existential_0Tm(v65);
  uint64_t v29 = CLPlacemark.makeDialogLocation()();
  *(void *)(v0 + 36specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = &type metadata for GeoLabel;
  *(void *)(v0 + 368) = &protocol witness table for GeoLabel;
  *(void *)(v0 + 336) = v29;
  *(void *)(v0 + 344) = 0LL;
  *(_BYTE *)(v0 + 35__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 1;
  uint64_t v30 = (*(uint64_t (**)(void *))(*(void *)v28 + 136LL))(v64);
  uint64_t v32 = v31;
  char v34 = v33;
  swift_release(v28);
  __swift_destroy_boxed_opaque_existential_0Tm(v64);
  if ((v34 & 1) != 0)
  {
    outlined consume of Result<String, Error>(v30, v32, 1);
    uint64_t v30 = 0LL;
    uint64_t v32 = 0xE000000000000000LL;
  }

  uint64_t v71 = v30;
  id v35 = [*(id *)(v0 + 432) location];
  if (v35)
  {
    uint64_t v36 = v35;
    uint64_t v38 = *(void *)(v0 + 464);
    uint64_t v37 = *(void *)(v0 + 472);
    uint64_t v39 = *(void *)(v0 + 448);
    uint64_t v40 = *(void *)(v0 + 456);
    [v35 coordinate];
    double v42 = v41;
    double v44 = v43;

    uint64_t v45 = Double.toProtobufDoubleValue()(v42);
    double v46 = Google_Protobuf_DoubleValue.value.getter(v45);
    id v47 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v47(v37, v39);
    uint64_t v48 = Double.toProtobufDoubleValue()(v44);
    double v49 = Google_Protobuf_DoubleValue.value.getter(v48);
    id v35 = (id)((uint64_t (*)(uint64_t, uint64_t))v47)(v38, v39);
  }

  else
  {
    double v46 = 0.0;
    double v49 = 0.0;
  }

  uint64_t v50 = *(void *)(v0 + 440);
  os_log_type_t v51 = static os_log_type_t.default.getter(v35);
  uint64_t v52 = *(os_log_s **)(v50 + 16);
  os_log_type_t v53 = v51;
  if (os_log_type_enabled(v52, v51))
  {
    swift_bridgeObjectRetain_n(v72, 2LL);
    swift_bridgeObjectRetain_n(v32, 2LL);
    swift_bridgeObjectRetain_n(v69, 2LL);
    uint64_t v54 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v55 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v54 = 136315138;
    uint64_t v73 = v55;
    *(void *)(v0 + 16) = 0LL;
    *(void *)(v0 + 24) = 0LL;
    *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v67;
    *(void *)(v0 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v72;
    *(void *)(v0 + 48) = v71;
    *(void *)(v0 + 56) = v32;
    *(void *)(v0 + 64) = v68;
    *(void *)(v0 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v69;
    *(double *)(v0 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v46;
    *(double *)(v0 + 88) = v49;
    swift_bridgeObjectRetain(v72);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v69);
    uint64_t v56 = String.init<A>(describing:)(v0 + 16, &type metadata for GeoDataModels.WhereAmIDataModel);
    unint64_t v58 = v57;
    *(void *)(v0 + 416) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424);
    swift_bridgeObjectRelease(v58);
    swift_bridgeObjectRelease_n(0LL, 2LL);
    swift_bridgeObjectRelease_n(v72, 2LL);
    swift_bridgeObjectRelease_n(v32, 2LL);
    swift_bridgeObjectRelease_n(v69, 2LL);
    _os_log_impl(&dword_0, v52, v53, "RF: WhereAmI view %s", v54, 0xCu);
    swift_arrayDestroy(v55, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1LL, -1LL);
    swift_slowDealloc(v54, -1LL, -1LL);
  }

  uint64_t v59 = *(void *)(v0 + 464);
  uint64_t v60 = *(void *)(v0 + 472);
  uint64_t v61 = *(uint64_t **)(v0 + 424);
  void v61[3] = (uint64_t)&type metadata for GeoDataModels;
  v61[4] = lazy protocol witness table accessor for type GeoDataModels and conformance GeoDataModels();
  uint64_t v62 = swift_allocObject(&unk_BC750, 97LL, 7LL);
  *uint64_t v61 = v62;
  *(void *)(v62 + 16) = 0LL;
  *(void *)(v62 + 24) = 0LL;
  *(void *)(v62 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v67;
  *(void *)(v62 + 4specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v72;
  *(void *)(v62 + 48) = v71;
  *(void *)(v62 + 56) = v32;
  *(void *)(v62 + 64) = v68;
  *(void *)(v62 + 7__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = v69;
  *(double *)(v62 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v46;
  *(double *)(v62 + 88) = v49;
  *(_BYTE *)(v62 + 96) = 3;
  swift_task_dealloc(v60);
  swift_task_dealloc(v59);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t WhereAmIFlow.deinit()
{
  outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue( *(id *)(v0 + 24),  *(_BYTE *)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 40));
  swift_release(*(void *)(v0 + 80));
  return v0;
}

uint64_t WhereAmIFlow.__deallocating_deinit()
{
  outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue( *(id *)(v0 + 24),  *(_BYTE *)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0Tm((void *)(v0 + 40));
  swift_release(*(void *)(v0 + 80));
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t protocol witness for Flow.on(input:) in conformance WhereAmIFlow(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for WhereAmIFlow, a2);
  return FSMFlow.on(input:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance WhereAmIFlow( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for WhereAmIFlow, a3);
  return FSMFlow.execute(completion:)(a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for Flow.execute() in conformance WhereAmIFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_C6814);
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for WhereAmIFlow, a2);
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return FSMFlow.execute()(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance WhereAmIFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for WhereAmIFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WhereAmIFlow( uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for WhereAmIFlow, a1);
  return FSMFlow.description.getter(a1, WitnessTable);
}

id specialized getter of coder #1 in CLPlacemark.withRevGeo()(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    id v2 = *a1;
  }

  else
  {
    id v4 = [objc_allocWithZone(CLGeocoder) init];
    swift_beginAccess(a1, v8, 1LL, 0LL);
    uint64_t v5 = *a1;
    *a1 = v4;
    id v2 = v4;

    uint64_t v1 = 0LL;
  }

  id v6 = v1;
  return v2;
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [CLPlacemark]( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *char v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    uint64_t v11 = type metadata accessor for OS_os_log( 0LL,  &lazy cache variable for type metadata for CLPlacemark,  &OBJC_CLASS___CLPlacemark_ptr);
    **(void **)(*(void *)(v3 + 64) + 4swift_beginAccess(v2 + 24, v7, 1LL, 0LL) = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v11);
    return swift_continuation_throwingResume(v3);
  }

uint64_t specialized WhereAmIFlow.init(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[3] = a3;
  v13[4] = a4;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v13);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32LL))(boxed_opaque_existential_0, a1, a3);
  type metadata accessor for OS_os_log( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_os_log,  &OBJC_CLASS___OS_os_log_ptr);
  *(void *)(a2 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000000009B8C0LL,  0x496D416572656857LL,  0xEC000000776F6C46LL);
  *(void *)(a2 + 24) = 0LL;
  *(_BYTE *)(a2 + 3__swift_destroy_boxed_opaque_existential_0Tm(v0 + 2) = 2;
  outlined init with copy of DeviceState((uint64_t)v13, a2 + 40);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 128))(a3, a4);
  *(void *)(a2 + 8specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0) = v9;
  uint64_t v10 = static os_log_type_t.default.getter(v9);
  id v11 = *(id *)(a2 + 16);
  os_log(_:dso:log:_:_:)( v10,  &dword_0,  v11,  "WhereAmIFlow has been initalized with .guardFlows",  49LL,  2LL,  _swiftEmptyArrayStorage);

  __swift_destroy_boxed_opaque_existential_0Tm(v13);
  return a2;
}

void partial apply for closure #1 in WhereAmIFlow.preChecks()(uint64_t a1)
{
}

uint64_t sub_91374()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t partial apply for closure #1 in WhereAmIFlow.handle(location:)(uint64_t a1)
{
  id v4 = (void *)swift_task_alloc(dword_C993C);
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  void v4[2] = a1;
  void v4[3] = v1 + 16;
  return swift_task_switch(closure #1 in WhereAmIFlow.handle(location:), 0LL, 0LL);
}

uint64_t sub_913FC()
{
  return swift_deallocObject(v0, 97LL, 7LL);
}

uint64_t instantiation function for generic protocol witness table for WhereAmIFlow(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type WhereAmIFlow and conformance WhereAmIFlow,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for WhereAmIFlow,  (uint64_t)&protocol conformance descriptor for WhereAmIFlow);
  uint64_t result = lazy protocol witness table accessor for type PommesContext and conformance PommesContext( &lazy protocol witness table cache variable for type WhereAmIFlow and conformance WhereAmIFlow,  v3,  (uint64_t (*)(uint64_t))type metadata accessor for WhereAmIFlow,  (uint64_t)&protocol conformance descriptor for WhereAmIFlow);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for WhereAmIFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC21GeoFlowDelegatePlugin12WhereAmIFlow);
}

uint64_t sub_914C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 112LL))();
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_914F4(uint64_t a1, uint64_t a2)
{
  id v2 = *(id *)a1;
  uint64_t v3 = *(uint64_t (**)(id, uint64_t))(**(void **)a2 + 120LL);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 8);
  outlined copy of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(*(id *)a1, v4);
  return v3(v2, v4);
}

uint64_t sub_91540(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 136LL))();
}

uint64_t sub_91568(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_BYTE *))(**(void **)a2 + 144LL))(v4);
}

ValueMetadata *type metadata accessor for WhereAmIFlow.State()
{
  return &type metadata for WhereAmIFlow.State;
}

id AnswerETAIntent.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

id AnswerETAIntent.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AnswerETAIntent();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for AnswerETAIntent()
{
  return objc_opt_self(&OBJC_CLASS___AnswerETAIntent);
}

id AnswerETAIntent.__allocating_init(coder:)(void *a1)
{
  id v3 = [objc_allocWithZone(v1) initWithCoder:a1];

  return v3;
}

id AnswerETAIntent.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for AnswerETAIntent();
  id v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id AnswerETAIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v7 = 0LL;
  }

  id v8 = [objc_allocWithZone(v4) initWithIdentifier:v7 backingStore:a3];

  return v8;
}

id AnswerETAIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v6 = 0LL;
  }

  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for AnswerETAIntent();
  id v7 = objc_msgSendSuper2(&v9, "initWithIdentifier:backingStore:", v6, a3);

  return v7;
}

id AnswerETAIntent.__allocating_init(domain:verb:parametersByName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a5)
  {
    v11.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a5);
  }

  else
  {
    v11.super.Class isa = 0LL;
  }

  id v12 = [objc_allocWithZone(v5) initWithDomain:v9 verb:v10 parametersByName:v11.super.isa];

  return v12;
}

id AnswerETAIntent.init(domain:verb:parametersByName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a5)
  {
    v11.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a5);
  }

  else
  {
    v11.super.Class isa = 0LL;
  }

  v14.receiver = v5;
  v14.super_class = (Class)type metadata accessor for AnswerETAIntent();
  id v12 = objc_msgSendSuper2(&v14, "initWithDomain:verb:parametersByName:", v9, v10, v11.super.isa);

  return v12;
}

id AnswerETAIntent.__deallocating_deinit()
{
  return AnswerETAIntent.__deallocating_deinit(type metadata accessor for AnswerETAIntent);
}

unint64_t AnswerETAIntentResponseCode.init(rawValue:)(unint64_t a1)
{
  return specialized AnswerETAIntentResponseCode.init(rawValue:)(a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AnswerETAIntentResponseCode@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = specialized AnswerETAIntentResponseCode.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t AnswerETAIntentResponse.code.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___AnswerETAIntentResponse_code;
  swift_beginAccess(v0 + OBJC_IVAR___AnswerETAIntentResponse_code, v3, 0LL, 0LL);
  return *(void *)v1;
}

char *AnswerETAIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  objc_super v5 = (char *)[objc_allocWithZone(v2) init];
  NSString v6 = &v5[OBJC_IVAR___AnswerETAIntentResponse_code];
  swift_beginAccess(&v5[OBJC_IVAR___AnswerETAIntentResponse_code], v9, 1LL, 0LL);
  *(void *)NSString v6 = a1;
  id v7 = v5;
  [v7 setUserActivity:a2];

  return v7;
}

char *AnswerETAIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  objc_super v5 = (char *)[v2 init];
  NSString v6 = &v5[OBJC_IVAR___AnswerETAIntentResponse_code];
  swift_beginAccess(&v5[OBJC_IVAR___AnswerETAIntentResponse_code], v9, 1LL, 0LL);
  *(void *)NSString v6 = a1;
  id v7 = v5;
  [v7 setUserActivity:a2];

  return v7;
}

id AnswerETAIntentResponse.init()()
{
  *(void *)&v0[OBJC_IVAR___AnswerETAIntentResponse_code] = 0LL;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AnswerETAIntentResponse();
  return objc_msgSendSuper2(&v2, "init");
}

id AnswerETAIntentResponse.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR___AnswerETAIntentResponse_code] = 0LL;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for AnswerETAIntentResponse();
  id v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id AnswerETAIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  id v3 = [objc_allocWithZone(v1) initWithBackingStore:a1];

  return v3;
}

id AnswerETAIntentResponse.init(backingStore:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR___AnswerETAIntentResponse_code] = 0LL;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for AnswerETAIntentResponse();
  id v3 = objc_msgSendSuper2(&v5, "initWithBackingStore:", a1);

  return v3;
}

id @objc AnswerETAIntentResponse.init(coder:)(char *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  *(void *)&a1[OBJC_IVAR___AnswerETAIntentResponse_code] = 0LL;
  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for AnswerETAIntentResponse();
  return objc_msgSendSuper2(&v7, *a4, a3);
}

id AnswerETAIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  if (a1)
  {
    v3.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    v3.super.Class isa = 0LL;
  }

  id v4 = [objc_allocWithZone(v1) initWithPropertiesByName:v3.super.isa];

  return v4;
}

id AnswerETAIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR___AnswerETAIntentResponse_code] = 0LL;
  if (a1)
  {
    v3.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    v3.super.Class isa = 0LL;
  }

  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for AnswerETAIntentResponse();
  id v4 = objc_msgSendSuper2(&v6, "initWithPropertiesByName:", v3.super.isa);

  if (v4) {
  return v4;
  }
}

id AnswerETAIntentResponse.__deallocating_deinit()
{
  return AnswerETAIntent.__deallocating_deinit(type metadata accessor for AnswerETAIntentResponse);
}

id AnswerETAIntent.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

unint64_t specialized AnswerETAIntentResponseCode.init(rawValue:)(unint64_t result)
{
  if (result > 6) {
    return 0LL;
  }
  return result;
}

uint64_t type metadata accessor for AnswerETAIntentResponse()
{
  return objc_opt_self(&OBJC_CLASS___AnswerETAIntentResponse);
}

unint64_t lazy protocol witness table accessor for type AnswerETAIntentResponseCode and conformance AnswerETAIntentResponseCode()
{
  unint64_t result = lazy protocol witness table cache variable for type AnswerETAIntentResponseCode and conformance AnswerETAIntentResponseCode;
  if (!lazy protocol witness table cache variable for type AnswerETAIntentResponseCode and conformance AnswerETAIntentResponseCode)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AnswerETAIntentResponseCode,  &type metadata for AnswerETAIntentResponseCode);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnswerETAIntentResponseCode and conformance AnswerETAIntentResponseCode);
  }

  return result;
}

uint64_t sub_92284@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((char *)&stru_20.maxprot + (swift_isaMask & **a1)))();
  *a2 = result;
  return result;
}

uint64_t sub_922C4(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  objc_super v3 = (void *)(*a2 + OBJC_IVAR___AnswerETAIntentResponse_code);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *objc_super v3 = v2;
  return result;
}

ValueMetadata *type metadata accessor for AnswerETAIntentResponseCode()
{
  return &type metadata for AnswerETAIntentResponseCode;
}